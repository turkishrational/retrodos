     1                                  ; ****************************************************************************
     2                                  ; IBMBIO7.S (PCDOS 7.1 IBMBIO.COM) - RETRO DOS 5.0 by ERDOGAN TAN - 12/09/2023
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 09/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1)
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 26/12/2018 (Retro DOS 4.0), 01/10/2022 (Retro DOS 4.2)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm ibmbio7.s -l ibmbio7.txt -o IBMBIO.COM -Z error.txt))
    11                                  ;					   -o IBMBIO7.BIN
    12                                  ; ****************************************************************************
    13                                  
    14                                  ; 12/09/2023 - Retro DOS v5.0 Kernel -dosbios- ('ibmbio7.s')
    15                                  ; Modified from 'iosys6.s' (11/09/2023, Retro DOS v4.2 Kernel's IO.SYS) file
    16                                  ; as below:
    17                                  ;
    18                                  ;    1) Retro DOS v4.2 IO.SYS is based on disassembled source code
    19                                  ;	of MSDOS 6.21 IO.SYS, derived using MSDOS 6.0 source code.
    20                                  ;
    21                                  ;    2) Labels, names, comments, explanations and structure definitions
    22                                  ;	about procedures and code details are almost entirely taken from
    23                                  ;	the original MSDOS 6.0 source code, except for the details that
    24                                  ;	Erdogan Tan personally experienced. Some of them are incompatible
    25                                  ;	with PCDOS 7.1 code. But they have not been deleted to preserve
    26                                  ;	the originality of the descriptions.)
    27                                  ;
    28                                  ;    3)'ibmbio7.s' contains the BIOSLOADER (MSLOADER) section located in
    29                                  ;	the 1st 4 sectors of the IBMBIO.COM file on disk. This is a method
    30                                  ;	from older DOS versions (3 sectors for MSDOS 6.22).
    31                                  ;	The MSDOS/PCDOS boot sector code only reads these MSLOADER/BIOSLOADER
    32                                  ;	sectors and transfers control to the MSLOADER/BIOSLOADER code.
    33                                  ;	BUT!!! The Retro DOS v3 (& v5) boot sector code loads the entire
    34                                  ;	MSDOS.SYS/PCDOS.SYS -combined- kernel file into memory at once.
    35                                  ;	So, hence the Retro DOS boot sector code, 'retrodos5.s' file
    36                                  ;       contains slightly different IO.SYS/IBMBIO.COM INITialization code
    37                                  ;	than the original PCDOS/MSDOS. It does not include 
    38                                  ;	the MSLOADER/BIOSLOADER section. The 'retrodos5.s' and 'ibmbio7.s'
    39                                  ;	files are almost identical except their INIT codes.)
    40                                  ;
    41                                  ; ('iosys6.s' has been converted to 'ibmbio7.s' and 'retrodos42.s' has been
    42                                  ; converted to 'retrodos5.s'. 'ibmbio7.s' is IBMBIO.COM source code file
    43                                  ; while 'retrodos5.s' is source code of Retro DOS v5 kernel file 'PCDOS.SYS'.
    44                                  ; 'retrodos5.s' includes 'ibmdos7.bin' or IBMDOS.COM as binary file.)
    45                                  
    46                                  ; ----------------------------------------------------------------------------
    47                                  
    48                                  ; 09/12/2022 - Multisection binary file format (BIOSDATA & BIOSCODE sections)
    49                                  ; 01/10/2022 - Erdogan Tan (Istanbul)
    50                                  
    51                                  ;Note: This code is a part of Retro DOS 4.0 kernel source code
    52                                  ;     (as included binary, 'IOSYS5.BIN') 
    53                                  ;     Equivalent of MSDOS 5.0 IO.SYS, BIOSCODE and BIOSDATA and SYSINIT
    54                                  ;						        (except MSLOAD code)
    55                                        
    56                                  ;---- Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    57                                  ;     at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    58                                  ;     moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    59                                  ;     Then SYSINIT code to the next segment (46Dh for original MSDOS 5.0)..
    60                                  ;     SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    61                                  ;     (MSDOS5.BIN) according to request/setting in 'config.sys' file.
    62                                  
    63                                  ; ----------------------------------------------------------------------------
    64                                  
    65                                  ; ----------------------------------------------------------------------------
    66                                  ;
    67                                  ; +-------------------------------------------------------------------------+
    68                                  ; |   This file	has been generated by The Interactive Disassembler (IDA)    |
    69                                  ; |	      Copyright	(c) 2013 Hex-Rays, <support@hex-rays.com>	    |
    70                                  ; |			 Licensed to: Freeware version			    |
    71                                  ; +-------------------------------------------------------------------------+
    72                                  ;
    73                                  ; ----------------------------------------------------------------------------
    74                                  
    75                                  ;		.386
    76                                  ;		.model flat
    77                                  
    78                                  ; ============================================================================
    79                                  
    80                                  ; 12/09/2023 - Erdogan Tan - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
    81                                  
    82                                  ;-----------------------------------------------------------------------------
    83                                  
    84                                  ; [[ Most of comments here are from the original MSDOS 6.0 source code ]]
    85                                  
    86                                  ;-----------------------------------------------------------------------------
    87                                  ; Start of (PCDOS 7.1) IBMBIO.COM
    88                                  ;-----------------------------------------------------------------------------
    89                                  
    90                                  		[ORG 0]			; segment 0x0070h
    91                                  
    92                                  ;=============================================================================
    93                                  ; IBMBIO.COM (IO.SYS) LOADER SECTION 
    94                                  ;=============================================================================
    95                                  ; 12/09/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
    96                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
    97                                  ;non-contiguous io.sys loader (msload) ((MSDOS 6.0 source: MSLOAD.ASM, 1991))
    98                                  
    99                                  section .MSLOAD ; vstart=0 ;; .BIOSLOAD 
   100                                  
   101                                  ; ===========================================================================
   102                                  
   103                                  ; 09/12/2022
   104                                  ; Comments are from MSDOS 6.0 MSLOAD.ASM (1991) & HEX-RAYS IDA disasm output
   105                                  
   106                                  ; ===========================================================================
   107                                  ;	NOTE: The boot loader should be verifying that the first
   108                                  ;	  block of io.sys is, in fact, at cluster 2. This would be saving
   109                                  ;	  a whole lot of time during system debugging.
   110                                  ;
   111                                  ;============================================================================
   112                                  ;
   113                                  ;     for dos 4.00, msload program has been changed to allow:
   114                                  ;	  1. 32 bit calculation,
   115                                  ;	  2. reading a fat sector when needed, instead of reading the whole
   116                                  ;	     fat sectors at once. this will make the boot time faster,
   117                                  ;	     and eliminate the memory size limitation problem,
   118                                  ;	  3. solving the limitation of the file size (29 kb) of io.sys0,
   119                                  ;	  4. adding the boot error message. show the same boot error message
   120                                  ;	     and do the same behavior when the read operation of io.sys
   121                                  ;	     fails as the msboot program, since msload program is the
   122                                  ;	     extention of msboot program.
   123                                  ;
   124                                  ; ===========================================================================
   125                                  
   126                                  ;----------------------------------------------------------------------------
   127                                  ;
   128                                  ; M056 : Added RPL support, so that RPL's fake INT 13 code can be safe from
   129                                  ;		SYSINIT & transient portion of COMMAND.COM
   130                                  ;
   131                                  ;----------------------------------------------------------------------------
   132                                  		
   133                                  		[ORG 0]			; segment 0x0070h
   134                                  
   135                                  START$:
   136 00000000 EB45                    		jmp	short SaveInputValues	; 13/09/2023
   137 00000002 90                      		nop	; 13/09/2023
   138                                  %if 0
   139                                  ; 20/12/2022
   140                                  ; 09/12/2022
   141                                  ; ---------------------------------------------------------------------------
   142                                  SysVersion:	dw 5			; expected_version
   143                                  ;MyStacks:	db 256 dup(0)		; local stack
   144                                  ; 22/12/2022
   145                                  ; 20/12/2022
   146                                  ;MyStacks:	dw 102 dup(0)		; local stack
   147                                  NumHeads:	dw 0			; ...
   148                                  ClusterSize:	db 2 dup(0)		; ...
   149                                  StartSecL:	dw 0			; ...
   150                                  StartSecH:	dw 0			; ...
   151                                  TempH:		dw 0			; for 32 bit calculation
   152                                  TempCluster:	db 2 dup(0)		; temporary place for cluster number
   153                                  LastFatSector:	db 2 dup(0FFh)		; fat sec # start from 1st FAT entry
   154                                  SectorCount:	dw 0			; ...
   155                                  SecPerFat:	dw 0			; ...
   156                                  HiddenSectorsL:	dw 0			; ...
   157                                  HiddenSectorsH:	dw 0			; ...
   158                                  BytesPerSec:	dw 0			; ...
   159                                  ReservSectors:	db 2 dup(0)		; ...
   160                                  CurrentCluster:	db 2 dup(0)		; ...
   161                                  NextBioLocation: db 2 dup(0)		; ...
   162                                  FirstSectorL:	dw 0			; ...
   163                                  FirstSectorH:	dw 0			; ...
   164                                  TotalSectorsL:	dw 0			; max. number of sectors
   165                                  TotalSectorsH:	dw 0			; ...
   166                                  SecPerTrack:	db 2 dup(0)		; ...
   167                                  BootDrive:	db 0			; ...
   168                                  Fatsize:	db 0			; ...
   169                                  MediaByte:	db 0			; ...
   170                                  EndOfFile:	db 0			; ...
   171                                  OrgDasdPtr:	db 4 dup(0)		; ...
   172                                  FatSegment:	db 2 dup(0)		; ...
   173                                  SecPerCluster:	db 0			; ...
   174                                  ; ---------------------------------------------------------------------------
   175                                  %endif
   176                                  
   177                                  ; 13/09/2023 (Retro DOS v5)
   178                                  ; 24/12/2022 (Retro DOS v4)
   179                                  ; 23/12/2022
   180                                  ; 20/12/2022
   181                                  ; 09/12/2022
   182                                  ; ---------------------------------------------------------------------------
   183                                  ;SysVersion:	dw 5			; expected_version
   184 00000003 07                      SysVersionMajor: db 7	; Retro DOS v5.0 (IBM PCDOS 7.1)
   185 00000004 0A                      SysVersionMinor: db 10
   186 00000005 0000                    ClusterSize:	dw 0
   187 00000007 0000                    StartSecL:	dw 0
   188 00000009 0000                    StartSecH:	dw 0
   189 0000000B 0000                    TempH:		dw 0			; for 32 bit calculation
   190                                  ;TempCluster:	dw 0
   191 0000000D FFFF                    LastFatSectorL:	dw 0FFFFh		; fat sec # start from 1st FAT entry
   192 0000000F FFFF                    LastFatSectorH:	dw 0FFFFh		; fat sec # start from 1st FAT entry
   193 00000011 0000                    SectorCount:	dw 0
   194                                  CurrentCluster:	
   195                                  		; 06/10/2023
   196                                  CurrentClusterL:
   197 00000013 0000                    		dw 0
   198                                  CurrentClusterH:
   199 00000015 0000                    		dw 0	; 13/09/2023 - HW of FAT32 cluster number
   200                                  		; 27/12/2023
   201                                  FirstCluster:	; 06/10/2023
   202 00000017 0000                    FirstClusterL:	dw 0
   203 00000019 0000                    FirstClusterH:	dw 0
   204                                  		;;
   205 0000001B 0000                    BytesPerSec:	dw 0
   206 0000001D 0000                    SecPerCluster:	dw 0
   207                                  		; 13/09/2023
   208 0000001F 0000                    ReservSectors:	dw 0
   209 00000021 0000                    NumFats:	dw 0
   210 00000023 0000                    RootEntCnt:	dw 0
   211 00000025 0000                    SecPerTrack:	dw 0
   212 00000027 0000                    NumHeads:	dw 0
   213 00000029 0000                    HiddenSectorsL:	dw 0
   214 0000002B 0000                    HiddenSectorsH:	dw 0
   215 0000002D 0000                    TotalSectorsL:	dw 0			; max. number of sectors
   216 0000002F 0000                    TotalSectorsH:	dw 0
   217 00000031 0000                    FATSectorsL:	dw 0
   218 00000033 0000                    FATSectorsH:	dw 0
   219 00000035 0000                    RootClusterL:	dw 0
   220 00000037 0000                    RootClusterH:	dw 0
   221                                  		;;
   222 00000039 0000                    FirstSectorL:	dw 0
   223 0000003B 0000                    FirstSectorH:	dw 0
   224 0000003D 00                      BootDrive:	db 0
   225 0000003E 00                      FatType:	db 0
   226 0000003F 00                      MediaByte:	db 0
   227 00000040 00                      EndOfFile:	db 0
   228 00000041 00000000                OrgDasdPtr:	dd 0
   229                                  		; 06/10/2023
   230                                  ;FatStartSecL:	dw 0
   231                                  ;FatStartSecH:	dw 0
   232 00000045 0000                    FatSegment:	dw 0
   233                                  		; 05/10/2023
   234                                  ;NextBioLocation:
   235                                  	; 05/10/2023 (bp register will be used instead of [NextBioLocation])
   236                                  		;dw 0
   237                                  
   238                                  		; 13/09/2023
   239                                  
   240                                  ; SaveInputValues
   241                                  ; ---------------------------------------------------------------------------
   242                                  ; INPUT:     none
   243                                  ;
   244                                  ;   dl = int 13 drive number we booted from
   245                                  ;   ch = media byte
   246                                  ;   bx = first data sector (low) on disk (0-based)
   247                                  ;   ds:si = original rom bios diskette parameter table.
   248                                  ;
   249                                  ; if an extended boot record, then ax will be the first data sector
   250                                  ; high word. save ax and set FirstSectorH according to ax if it is an
   251                                  ; extended boot record.
   252                                  ;
   253                                  ;   ax = first data sector (high) on disk ;
   254                                  ; OUTPUT:
   255                                  ;
   256                                  ;   bx = first data sector on disk
   257                                  ;
   258                                  ;   MediaByte = input ch
   259                                  ;   BootDrive = input dl
   260                                  ;   FirstSectorL = input bx
   261                                  ;   FirstSectorH = input ax, if an extended boot record.;j.k.
   262                                  ;   TotalSectorsL = maximum sector number in this media ;j.k.
   263                                  ;   TotalSectorsH = high word of the above
   264                                  ;   HiddenSectorsL = hidden secotrs
   265                                  ;   HiddenSectorsH
   266                                  ;   ReservSectors = reserved sectors
   267                                  ;   SecPerTrack = sectors/track
   268                                  ;   NumHeads = heads/cylinder
   269                                  ;
   270                                  ;   ds = 0
   271                                  ;   AX,DX,SI destroyed
   272                                  ;
   273                                  ; calls:     none
   274                                  ; ---------------------------------------------------------------------------
   275                                  ;FUNCTION:
   276                                  ; save input information and bpb informations from the boot record.
   277                                  ; ---------------------------------------------------------------------------
   278                                  
   279                                  Sec9 equ 522h
   280                                  ; 20/12/2022	
   281                                  DskAddr	equ 1Eh*4 ; 78h
   282                                  ; 22/12/2022
   283                                  ;StackPtr equ MyStacks+(NumHeads-MyStacks)
   284                                  
   285                                  ; ---------------------------------------------------------------------------
   286                                  
   287                                  		; 13/09/2023
   288                                  		; (registers from PCDOS 7.1 boot sector)
   289                                  		; ss = 0
   290                                  		; sp = 7BE4h
   291                                  		;	[0:7BE4h] = ss:bx = 0:78h (1Eh vector)
   292                                  		;	[0:7BE8h] = ds:si = DSK_PARMS (INT 1Eh) table address
   293                                  		; bp = 7BECh
   294                                  		; ds = 0
   295                                  		; ax:bx = absolute disk address for cluster 2 (data start)
   296                                  		;	= dword/far ptr [0:7BFCh]
   297                                  		; es = ax	
   298                                  		; dl = [BootDrv] = [7C40h] ; !FAT32 BPB!
   299                                  		; ch = [MediaByte] = [7C15h]
   300                                  		; ds:si = rom bios disk(ette) params table address (INT 1Eh)
   301                                  		;	= [0:7BE8h] = 0:7BECh
   302                                  		;	(ds:si is also in stack, at [0:7BE8h])
   303                                  		; 0:500h = root dir buffer (1st sector of the root dir)
   304                                  		; [0:7Eh] = disk(ette) params table address = 0:7BECh
   305                                  		;	   (head settle time = 15ms) 
   306                                  
   307                                  SaveInputValues:
   308                                  		; 13/09/2023 (Retro DOS v5 MSLOADER/BIOSLOADER)
   309 00000047 8CDF                    		mov	di, ds ; DSK_PARMS (INT 1Eh) table segment
   310                                  
   311                                  		; 24/12/2022 (Retro DOS v4 MSLOADER)
   312 00000049 0E                      		push	cs
   313 0000004A 1F                      		pop	ds 
   314                                  		;mov	[cs:FirstSectorL], bx ; first data sector (low word)
   315                                  		;mov	[cs:MediaByte], ch
   316                                  		;mov	[cs:BootDrive], dl
   317                                  		; 13/09/2023
   318 0000004B 891E[3900]              		mov	[FirstSectorL], bx
   319 0000004F A3[3B00]                		mov	[FirstSectorH], ax
   320 00000052 891E[0700]              		mov	[StartSecL], bx ; **!**
   321 00000056 A3[0900]                		mov	[StartSecH], ax ; **!!**
   322 00000059 882E[3F00]              		mov	[MediaByte], ch
   323 0000005D 8816[3D00]              		mov	[BootDrive], dl
   324                                  
   325                                  		; 13/09/2023
   326                                  		; (PCDOS 7.1 MSLOAD:0058h)
   327                                  		;pop	si	
   328                                  		;pop	ds
   329                                  		;	; from BS code..
   330                                  		;	; ss:sp = 0:7BE4h, bp = 7BECh
   331                                  		;	; Clear stack and load disk parameters table in ds:si
   332                                  		;	;
   333                                  		;	; pop.. Original INT 1Eh vector address
   334                                  		;pop	si
   335                                  		;pop	ds
   336                                  		;	; pop.. Original INT 1Eh disk table address
   337                                  
   338                                  		; 13/09/2023
   339                                  		; Note: DS:SI -from BS- points to DSK_PARMS (INT 1Eh) tbl addr
   340                                  		; (no need to pop/take address from stack)
   341                                  
   342                                  		;mov	sp, bp ; sp = 7BECh
   343                                  
   344                                  		; sp = 7BE4h
   345                                  
   346                                  		; 13/09/2023
   347                                  		; Save original (ROMBIOS) DSK_PARMS table address 
   348 00000061 8936[4100]              		mov	[OrgDasdPtr], si   ; DSK_PARMS (INT 1Eh) tbl offset
   349 00000065 893E[4300]              		mov	[OrgDasdPtr+2], di ; DSK_PARMS (INT 1Eh) tbl segment
   350                                  
   351 00000069 31C9                    		xor	cx, cx		; segment 0 (obviously)
   352 0000006B 8ED9                    		mov	ds, cx		; ZERO
   353                                  		; 13/09/2023
   354 0000006D 8EC1                    		mov	es, cx
   355 0000006F 57                      		push	di
   356 00000070 BF2205                  		mov	di, Sec9
   357 00000073 893E7800                		mov	[DskAddr], di	; mov [78h], di ; 522h
   358 00000077 890E7A00                		mov	[DskAddr+2], cx ; mov [7Ah], cx ; 0
   359 0000007B 1F                      		pop	ds
   360 0000007C B10E                    		mov	cl, 14		; (11+3 bytes for IBM rombios)
   361 0000007E FC                      		cld
   362 0000007F F3A4                    		rep movsb		; copy table
   363                                  		; 20/12/2022
   364 00000081 8ED9                    		mov	ds, cx ; 0
   365                                  		; 23/12/2022
   366                                  		; es = 0
   367                                  		; ds = 0
   368                                  		; ss = 0
   369                                  
   370                                  		; 13/09/2023
   371                                  		;mov	cx, [051Ah]	; LW of IBMBIO.COM (IO.SYS) first cluster
   372                                  		;mov	[cs:CurrentCluster], cx
   373                                  		;mov	cx, [0514h]	; HW of IBMBIO.COM (IO.SYS) first cluster
   374                                  		;mov	[cs:CurrentCluster+2], cx
   375                                  ; 24/12/2022
   376                                  %if 0
   377                                  		mov	cx, [7C0Bh] 	; BootSector.ext_boot_bpb.BPB_bytespersector
   378                                  		mov	[cs:BytesPerSec], cx
   379                                  		mov	cl, [7C0Dh]	; BootSector.ext_boot_bpb.BPB_sectorspercluster
   380                                  		mov	[cs:SecPerCluster], cl
   381                                  		mov	cx, [7C18h]	; BootSector.ext_boot_bpb.BPB_sectorspertrack
   382                                  		mov	[cs:SecPerTrack], cx
   383                                  		mov	cx, [7C1Ah]	; BootSector.ext_boot_bpb.BPB_heads
   384                                  		mov	[cs:NumHeads], cx
   385                                  		;mov	cx, [7C16h]	; BootSector.ext_boot_bpb.BPB_sectorsperfat
   386                                  		;mov	[cs:SecPerFat], cx
   387                                  		; 13/09/2023
   388                                  		mov	dx, [7C16h]	; BootSector.ext_boot_bpb.BPB_sectorsperfat
   389                                  		;mov	[cs:FATSectorsL], dx
   390                                  		mov	bl, [7C26h]	; BS_BootSig ; (FAT12 and FAT16)
   391                                  		or	dx, dx ; **
   392                                  		jnz	short not_fat32
   393                                  		mov	bl, [7C42h]	; BS_BootSig ; (FAT32) 
   394                                  not_fat32:
   395                                  		mov	cl, [7C10h]	; BPB_NumFATs
   396                                  		mov	[cs:NumFats], cl
   397                                  		mov	cx, [7C11h]	; BPB_RootEntCnt
   398                                  		mov	[cs:RootEntCnt], cx
   399                                  		;
   400                                  		mov	cx, [7C0Eh]	; BootSector.ext_boot_bpb.BPB_reservedsectors
   401                                  		mov	[cs:ReservSectors], cx
   402                                  		mov	cx, [7C1Ch]	; BootSector.ext_boot_bpb.BPB_hiddensectors
   403                                  		mov	[cs:HiddenSectorsL], cx
   404                                  		mov	cx, [7C13h]	; BootSector.ext_boot_bpb.BPB_totalsectors
   405                                  		mov	[cs:TotalSectorsL], cx
   406                                  
   407                                  		; First of all, check if it the boot record is an extended one.
   408                                  		; This is just a safe guard in case some user just "copy" the
   409                                  		; 4.00 iosys.com to a media with a conventional boot record.
   410                                  
   411                                  		; 22/12/2022
   412                                  		;cmp	byte [7C26h], 29h ; ext_boot_signature
   413                                  		; 13/09/2023
   414                                  		cmp	bl, 29h
   415                                  		jne	short Relocate	; old boot sector
   416                                  					; no need to copy high words
   417                                  		mov	[cs:FirstSectorH], ax ; Start sector # of data, high word
   418                                  		mov	ax, [7C1Eh]	; BPB_HiddSec+2
   419                                  		mov	[cs:HiddenSectorsH], ax
   420                                  		; 10/12/2022
   421                                  		or	cx, cx
   422                                  		;cmp	cx, 0		; cx set already before (=totalsectors)
   423                                  		; 22/12/2022
   424                                  		;jnz	short Relocate
   425                                  		; 13/09/2023
   426                                  		jnz	short not_big
   427                                  		mov	ax, [7C20h]	; BootSector.ext_boot_bpb.BPB_bigtotalsectors
   428                                  		mov	[cs:TotalSectorsL], ax
   429                                  		mov	ax, [7C22h]	; BootSector.ext_boot_bpb.BPB_bigtotalsectors+2
   430                                  		mov	[cs:TotalSectorsH], ax
   431                                  		; 13/09/2023
   432                                  not_big:	
   433                                  		;cmp	word [cs:FATsectorsL], 0
   434                                  		and	dx, dx ; **
   435                                  		jnz	short Relocate	; FAT12 or FAT16 fs
   436                                  
   437                                    		mov     cx, [7C24h]	; BPB_FATSz32 ; FAT32 fs
   438                                  		mov     [cs:FATSectorsL], cx
   439                                  		mov     cx, [7C26h]	; BPB_FATSz32+2
   440                                  		mov     [cs:FATSectorsH], cx
   441                                  		mov     cx, [7C2Ch]	; BPB_RootClus
   442                                  		mov     [cs:RootClusterL], cx
   443                                  		mov     cx, [7C2Eh]    ; BPB_RootClus+2
   444                                  		mov     [cs:RootClusterH], cx
   445                                  %endif
   446                                  		; 13/09/2023 - Erdogan Tan - Istanbul
   447                                  		;
   448                                  		; Note: Boot signature check has been removed because
   449                                  		;	it is not possible to start/run IBMBIO.COM
   450                                  		;	if it would not be a valid FAT32 (or compatible) boot sector
   451                                  		;	(input parameters and register contents would be wrong)
   452                                  
   453 00000083 0E                      		push	cs
   454 00000084 07                      		pop	es
   455                                  
   456                                  		; 13/09/2023
   457 00000085 BF[1700]                		mov	di, FirstCluster
   458 00000088 A11A05                  		mov	ax, [051Ah]	; LW of IBMBIO.COM (IO.SYS) first cluster
   459 0000008B AB                      		stosw			;  Initialize to this cluster
   460 0000008C A11405                  		mov	ax, [0514h]	; HW of IBMBIO.COM (IO.SYS) first cluster
   461 0000008F AB                      		stosw
   462                                  
   463 00000090 BE0B7C                  		mov	si, 7C0Bh	; boot sector's bpb, BytesPerSector
   464                                  		;mov	di, BytesPerSec
   465 00000093 A5                      		movsw	; BytesPerSec
   466 00000094 A4                      		movsb	; SecPerCluster
   467 00000095 47                      		inc	di ; skip high byte of SecPerCluster word (it is 0)
   468 00000096 A5                      		movsw	; ReservSectors
   469                                  		; 13/09/2023
   470 00000097 A4                      		movsb	; NumFats
   471 00000098 47                      		inc	di ; skip high byte of NumFats word (it is 0)
   472 00000099 A5                      		movsw	; RootEntCnt
   473 0000009A AD                      		lodsw	; TotalSectorsL
   474 0000009B 50                      		push	ax	; save TotalSectorsL
   475 0000009C AC                      		lodsb	; skip MediaByte
   476                                  		; 13/09/2023
   477 0000009D AD                      		lodsw	; FATSectorsL (Retro DOS 5) - SecPerFat (Retro DOS 4)
   478 0000009E 89C2                    		mov	dx, ax ; save BPB_FATSz16 into dx (it is 0 for FAT32 fs)
   479 000000A0 A5                      		movsw 	; SecPerTrack
   480 000000A1 A5                      		movsw	; NumHeads
   481 000000A2 A5                      		movsw	; HiddenSectorsL
   482 000000A3 A5                      		movsw	; HiddenSectorsH
   483 000000A4 58                      		pop	ax	; restore TotalSectorsL
   484                                  		; si = 7C20h 
   485                                  		; di = offset TotalSectorsL
   486 000000A5 09C0                    		or	ax, ax	; 16 bit total sectors value
   487 000000A7 7403                    		jz	short big_total_sectors
   488 000000A9 AB                      		stosw	; TotalSectorsL
   489                                  			; TotalsectorsH = 0
   490 000000AA EB02                    		jmp	short chk_fatsz_16
   491                                  
   492                                  big_total_sectors:
   493                                  		; BigTotalSecs - 32 bit total sectors value
   494 000000AC A5                      		movsw 	; BPB_TotSec32 (lw) -> TotalSectorsL
   495 000000AD A5                      		movsw	; BPB_TotSec32 (hw) -> TotalSectorsH
   496                                  chk_fatsz_16:
   497                                  		; 13/09/2023
   498                                  		; si = 7C24h
   499 000000AE 09D2                    		or	dx, dx ; **
   500 000000B0 7405                    		jz	short fat32_bs	; FAT32 boot sector
   501                                  		; FAT (FAT12 or FAT16) boot sector
   502 000000B2 47                      		inc	di  ; skip TotalsectorsH
   503 000000B3 47                      		inc	di
   504 000000B4 92                      		xchg	ax, dx	; mov ax, dx
   505                                  		;stosw
   506 000000B5 EB06                    		jmp	short fat_bs
   507                                  
   508                                  fat32_bs:
   509                                  		; FAT32 boot sector
   510 000000B7 A5                      		movsw	; BPB_FATSz32 (lw) -> FATSectorsL
   511 000000B8 A5                      		movsw	; BPB_FATSz32 (hw) -> FATSectorsH
   512 000000B9 AD                      		lodsw	; skip BPB_ExtFlags
   513 000000BA AD                      		lodsw	; skip BPB_FSVer
   514 000000BB A5                      		movsw	; RootClusterL
   515 000000BC AD                      		lodsw	; RootClusterH
   516                                  fat_bs:
   517 000000BD AB                      		stosw	; 13/09/2023
   518                                  
   519                                  		; 13/09/2023
   520 000000BE 0E                      		push	cs
   521 000000BF 1F                      		pop	ds
   522                                  
   523                                  		; 13/09/2023
   524                                  		; (PCDOS 7.1 - IBMBIO.COM - MSLOAD:0151h)
   525                                  
   526                                  ; Relocate
   527                                  ; -------------------------------------------------------------------------
   528                                  ;
   529                                  ; NOTES:
   530                                  ;
   531                                  ;   Relocates the loader code to top-of-memory.
   532                                  ;
   533                                  ; INPUT:     none
   534                                  ;
   535                                  ; OUTPUT:    code and data relocated.
   536                                  ;	     AX,CX,SI,DI destroyed
   537                                  ;
   538                                  ; calls:     none
   539                                  ; -------------------------------------------------------------------------
   540                                  ;
   541                                  ; Determine the number of paragraphs (16 byte blocks) of memory.
   542                                  ; this involves invoking the memory size determination interrupt,
   543                                  ; which returns the number of 1k blocks of memory, and then
   544                                  ; converting this to the number of paragraphs.
   545                                  ; Find out whether RPL code is present at top of memory and modify the
   546                                  ; available amount of memory in AX
   547                                  ; leave the number of paragraphs of memory in ax.
   548                                  ;
   549                                  ; -------------------------------------------------------------------------
   550                                  ; copy code from start to top of memory.
   551                                  ;
   552                                  ; the length to copy is EndOfLoader
   553                                  ;
   554                                  ; jump to relocated code
   555                                  ; -------------------------------------------------------------------------
   556                                  
   557                                  		; 14/09/2023 - Retro DOS v5.0 BIOSLOADER/MSLOADER
   558                                  		;			      PCDOS 7.1
   559                                  Relocate:
   560                                  		; 24/12/2022 - Retro DOS v4 (4.0 & 4.1 & 4.2) MSLOADER
   561                                  		;			     MSDOS 5.0 & 5.0+ & 6.22 (6.21)
   562                                  		
   563                                  		;cld
   564                                  
   565 000000C0 31F6                    		xor	si, si
   566 000000C2 89F7                    		mov	di, si
   567 000000C4 CD12                    		int	12h		; MEMORY SIZE -
   568                                  					; Return: AX = number of contiguous 1K blocks of memory
   569 000000C6 B106                    		mov	cl, 6
   570 000000C8 D3E0                    		shl	ax, cl		; Memory size in paragraphs
   571                                  
   572                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
   573                                  
   574                                  		; 10/12/2022
   575                                  		; ds = 0
   576                                  		; 24/12/2022
   577                                  		; ds = cs
   578                                  		;xor	bx, bx
   579                                  		;mov	ds, bx		; ZERO
   580                                  		; 14/09/2023
   581 000000CA 8EDE                    		mov	ds, si ; 0		
   582                                  
   583                                  		; 10/12/2022
   584 000000CC 8B1EBC00                		mov	bx, [2Fh*4]	; (Int 2Fh)
   585 000000D0 8E1EBE00                		mov	ds, [2Fh*4+2]		
   586                                  
   587                                  		;cmp	word ptr [bx+3], 'PR'
   588                                  		; 09/12/2022
   589 000000D4 817F035250              		cmp	word [bx+3], 'RP' ; 'RPL'
   590 000000D9 750F                    		jnz	short Skip_RPL
   591 000000DB 807F054C                		cmp	byte [bx+5], 'L'
   592 000000DF 7509                    		jnz	short Skip_RPL
   593 000000E1 89C2                    		mov	dx, ax		; get TOM into DX
   594 000000E3 B8064A                  		mov	ax, 4A06h	; (multMULT shl	8) + multMULTRPLTOM
   595 000000E6 CD2F                    		int	2Fh		; Get new TOM from any RPL
   596 000000E8 89D0                    		mov	ax, dx
   597                                  Skip_RPL:
   598                                  		; 24/12/2022
   599 000000EA 0E                      		push	cs
   600 000000EB 1F                      		pop	ds	; 25/12/2022
   601                                  
   602 000000EC B104                    		mov	cl, 4
   603 000000EE 8B16[1B00]              		mov	dx, [BytesPerSec] ; 24/12/2022
   604                                  		;mov	dx, [cs:BytesPerSec]
   605 000000F2 D3EA                    		shr	dx, cl
   606 000000F4 42                      		inc	dx
   607 000000F5 29D0                    		sub	ax, dx
   608 000000F7 A3[4500]                		mov	[FatSegment], ax ; 24/12/2022
   609                                  		;mov	[cs:FatSegment], ax ; This will be used for fat sector
   610                                  		; 14/09/2023
   611                                  		;mov	dx, 5F0h ; 1520 (for PCDOS 7.1 IBMBIO.COM)
   612 000000FA BA[8004]                		mov	dx, EndOfLoader ; loader size = 1520 
   613 000000FD D3EA                    		shr	dx, cl
   614 000000FF 42                      		inc	dx
   615 00000100 29D0                    		sub	ax, dx
   616 00000102 8EC0                    		mov	es, ax	; ES:DI -> place be relocated.
   617                                  		; 14/09/2023
   618                                  		; 22/12/2022
   619                                  		;dec	dx
   620                                  		;shl	dx, cl	; convert paragraphs to bytes (*)
   621                                  				; (stack pointer will be set to this offset)
   622                                  		; 24/12/2022
   623                                  		;push	cs
   624                                  		;pop	ds		; DS:SI -> source
   625                                  		
   626                                  		; 14/09/2023
   627 00000104 B9[8004]                		mov	cx, EndOfLoader ; 1520 (for PCDOS 7.1 IBMBIO.COM)
   628 00000107 F3A4                    		rep movsb
   629                                  
   630 00000109 06                      		push	es		; Far jump to relocated MSLOAD code
   631                                  					; (via retf, far return)
   632 0000010A B8[0F01]                		mov	ax, SetupStack
   633 0000010D 50                      		push	ax		; Massage stack for destin of CS:IP
   634 0000010E CB                      		retf
   635                                  
   636                                  ; ---------------------------------------------------------------------------
   637                                  
   638                                  ; Start of relocated code
   639                                  ;----------------------------------------------------------------------------
   640                                  ;
   641                                  ; Move the stack to just under the boot record and relocation area (0:7c00h)
   642                                  ;
   643                                  
   644                                  SetupStack:
   645                                  		; 22/12/2022
   646                                  		;mov	ax, cs		; Start	of relocated code
   647                                  		;mov	ss, ax
   648                                  		;;mov	sp, NumHeads	; StackPtr offset
   649                                  		; 20/12/2022
   650                                  		;mov	sp, StackPtr	; StackPtr offset
   651                                  		
   652                                  ; 22/12/2022
   653                                  ; (set a temporary stack just above the relocated loader code)
   654                                  ; ((instead of using/reserving 256 bytes of stack space in 'IO.SYS' file))
   655                                  
   656                                  		; 22/12/2022
   657                                  		; cs = loader segment (relocated)
   658                                  		; dx = loader size + stack space (*) -paragraph aligned-
   659                                  
   660                                  		; 14/09/2023
   661                                  		;;cli
   662                                  		;mov	ax, cs
   663                                  		;mov	ds, ax	; 24/12/2022
   664                                  		;cli 
   665                                  		;mov	ss, ax
   666                                  		;;mov	sp, dx	; (*) 
   667                                  		;sti
   668                                  		
   669                                  		; 14/09/2023
   670                                  		; (PCDOS 7.1 IBMBIO.COM - MSLOAD:01A5h)
   671 0000010F 8CC8                    		mov	ax, cs
   672                                  		; 27/12/2023
   673 00000111 8ED8                    		mov	ds, ax
   674                                  		;
   675 00000113 83E840                  		sub	ax, 40h	; move ss to 400h backward for stack space
   676                                  				; then set sp to the end of this stack space
   677 00000116 8ED0                    		mov	ss, ax
   678 00000118 BC0004                  		mov	sp, 400h
   679                                  		;add	ax, 40h	; ax = cs
   680                                  		;mov	ds, ax
   681                                  
   682                                  ; FindClusterSize
   683                                  ; ---------------------------------------------------------------------------
   684                                  ;
   685                                  ; INPUT:     bpb information in loaded boot record at 0:7c00h
   686                                  ;
   687                                  ; OUTPUT:
   688                                  ;
   689                                  ;	ds = 0
   690                                  ;	ax = bytes/cluster
   691                                  ;	bx = sectors/cluster
   692                                  ;	si destroyed
   693                                  ; calls:     none
   694                                  ;----------------------------------------------------------------------------
   695                                  ;
   696                                  ; get bytes/sector from bpb
   697                                  ;
   698                                  ; get sectors/cluster from bpb
   699                                  ;
   700                                  ; bytes/cluster = bytes/sector * sector/cluster
   701                                  ; ---------------------------------------------------------------------------
   702                                  
   703                                  FindClusterSize:
   704                                  
   705                                  ;for the time being just ASSUME the boot record is valid and the bpb is there.
   706                                  
   707                                  		; 14/09/2023
   708                                  		; 24/12/2022
   709                                  		; ds = cs
   710 0000011B A1[1B00]                		mov	ax, [BytesPerSec]
   711                                  		;xor	bx, bx
   712                                  		;mov	bl, [SecPerCluster]	; get sectors/cluster
   713                                  		;mul	bx
   714 0000011E F726[1D00]              		mul	word [SecPerCluster]
   715                                  		; 14/09/2023
   716 00000122 09D2                    		or	dx, dx
   717 00000124 7403                    		jz	short CalcFatSize
   718 00000126 E98E01                  		jmp	ErrorOut
   719                                  
   720                                  ; CalcFatSize
   721                                  ; ---------------------------------------------------------------------------
   722                                  ;
   723                                  ; NOTES:
   724                                  ;
   725                                  ;   Determine if fat is 12 or 16 bit fat. 12 bit fat if floppy, read mbr
   726                                  ;   to find out what system id byte is.
   727                                  ;
   728                                  ; INPUT:
   729                                  ;
   730                                  ; OUTPUT:
   731                                  ;
   732                                  ;   CS:FatSize = FAT_12_BIT or FAT_16_BIT
   733                                  ;   all other registers destroyed
   734                                  ;
   735                                  ; ---------------------------------------------------------------------------
   736                                  
   737                                  CalcFatSize:
   738                                  		; 14/09/2023 (Retro DOS v5, PCDOS 7.1 IBMBIO.COM LOADER)
   739                                  		; 24/12/2022 (Retro DOS v4, MSDOS 5.0-6.22 IO.SYS LOADER)
   740                                  
   741 00000129 A3[0500]                		mov	[ClusterSize], ax ; cluster size in bytes
   742                                  
   743                                  		; 24/12/2022
   744                                  		; ds = cs
   745                                  		;mov	byte [Fatsize], 1; FAT_12_BIT (assume)
   746                                  		; 14/09/2023
   747 0000012C C606[3E00]01            		mov	byte [FatType],1 ; FAT12
   748                                  		
   749                                  		;mov	dx, [TotalSectorsH]
   750                                  		;mov	ax, [TotalSectorsL] ; DX:AX = total disk sectors
   751                                  		; 14/09/2023
   752 00000131 A1[2F00]                		mov	ax, [TotalSectorsH]
   753 00000134 8B1E[2D00]              		mov	bx, [TotalSectorsL] ; AX:BX = total disk sectors
   754                                  ; 14/09/2023
   755                                  %if 0
   756                                  		sub	ax, [ReservSectors]
   757                                  
   758                                  		sbb	dx, 0		; DX:AX	= Total	available sectors
   759                                  		
   760                                  		push	ax
   761                                  		push	dx
   762                                  
   763                                  		mov	bx, [FATSectorsL]
   764                                  		
   765                                  		;mov	cx, [FATSectorsH]
   766                                  		;push	ax
   767                                  		;push	dx
   768                                  		;;mov	al, [NumFats]
   769                                  		;;xor	ah, ah
   770                                  		;mov	ax, [NumFats]
   771                                  		;xchg	ax, cx
   772                                  		;mul	cx
   773                                  
   774                                  		mov	ax, [FATSectorsH]
   775                                  		mov	cx, [NumFats]	; calculate total FAT sectors
   776                                  		mul	cx
   777                                  		xchg	ax, cx
   778                                  		mul	bx
   779                                  		add	cx, dx
   780                                  		mov	bx, ax
   781                                  
   782                                  		pop	dx
   783                                  		pop	ax
   784                                  
   785                                  		sub	ax, bx
   786                                  		sbb	dx, cx		; DX:AX = Total sectors - FAT sectors
   787                                  		
   788                                  		mov	bx, [RootEntCnt] ; Root directory entry count
   789                                  		mov	cl, 4
   790                                  		shr	bx, cl		; BX = Total directory sectors
   791                                  		sub	ax, bx
   792                                  		sbb	dx, 0		; DX:AX	= Sectors in data area
   793                                  %endif
   794                                  		; 14/09/2023
   795 00000138 8B16[3900]              		mov	dx, [FirstSectorL]
   796 0000013C 8B0E[3B00]              		mov	cx, [FirstSectorH]
   797                                  		; 04/10/2023
   798 00000140 8916[0700]              		mov	[StartSecL], dx
   799 00000144 890E[0900]              		mov	[StartSecH], cx
   800                                  		;
   801                                  		; ! here, cx:dx includes hidden sectors (partition start address) !
   802 00000148 2B16[2900]              		sub	dx, [HiddenSectorsL]
   803 0000014C 1B0E[2B00]              		sbb	cx, [HiddenSectorsH] ; cx:dx = start of data from boot sector
   804                                  
   805                                  		; 14/09/2023
   806 00000150 29D3                    		sub	bx, dx	; total secs - start of data
   807 00000152 19C8                    		sbb	ax, cx
   808                                  				; AX:BX	= Sectors in data area
   809                                  		; 24/12/2022
   810 00000154 8B0E[1D00]              		mov	cx, [SecPerCluster] ; *#*
   811                                  		; 14/09/2023
   812                                  		; bx = lw of data sector count
   813                                  		; ax = hw of data sector count
   814 00000158 31D2                    		xor	dx, dx
   815 0000015A F7F1                    		div	cx  ; *#*
   816                                  		; 24/12/2022
   817                                  		;;mov	[cs:TempH], ax	; AX = Total number of clusters (hw)
   818                                  		;mov	[TempH], ax
   819                                  		; 14/09/2023
   820 0000015C 93                      		xchg	ax, bx	; ax = lw of data sector count ; 06/10/2023
   821                                  				; bx = hw of cluster count
   822 0000015D F7F1                    		div	cx  ; *#*
   823                                  		; 14/09/2023
   824                                  		;mov	dx, [FirstCluster+2]
   825 0000015F C606[3E00]0B            		mov	byte [FatType], 0Bh ; set FAT type to FAT32 (CHS type disk R/W)
   826                                  		;cmp	word [TempH], 0
   827                                  		;jne	short ReadInFirstCluster
   828 00000164 09DB                    		or	bx, bx	; is cluster count > 65535 ?
   829 00000166 7518                    		jnz	short ReadInFirstCluster ; yes, it is (it must be) FAT32 fs
   830                                  		; 06/10/2023
   831 00000168 83F8F6                  		cmp	ax, 0FFF6h	; FAT16 limit (65536-10)
   832 0000016B 7313                    		jnb	short ReadInFirstCluster ; FAT32
   833                                  		;
   834 0000016D 891E[1900]              		mov	[FirstCluster+2], bx ; 0 ; (clear HW of FirstCluster)
   835                                  		;xor	dx, dx
   836 00000171 C606[3E00]01            		mov	byte [FatType], 1 ; set FAT type to FAT12
   837                                  		; 06/10/2023
   838 00000176 3DF60F                  		cmp	ax, 0FF6h
   839                                  		;cmp	ax, 4086	; 4096-10
   840 00000179 7205                    		jb	short ReadInFirstCluster ; 12 bit FAT
   841 0000017B C606[3E00]04            		mov	byte [FatType], 4 ; set FAT type to FAT16
   842                                  
   843                                  ; ReadInFirstCluster
   844                                  ; ---------------------------------------------------------------------------
   845                                  ;
   846                                  ; NOTES: read the start of the clusters that covers at least IbmLoadSize
   847                                  ;	 fully.  for example, if sector/cluster = 2, and IbmLoadSize=3
   848                                  ;	 then we are going to re-read the second cluster to fully cover
   849                                  ;	 msload program in the cluster boundary.
   850                                  ;
   851                                  ; INPUT:
   852                                  ;   IbmLoadSize - make sure this value is the same as the one in
   853                                  ;		  msboot program when you build the new version!!!!!
   854                                  ;
   855                                  ;   SecPerCluster
   856                                  ;   ClusterSize
   857                                  ;   FirstSectorL
   858                                  ;   FirstSectorH
   859                                  ;
   860                                  ; OUTPUT: msload program is fully covered in a cluster boundary.
   861                                  ;	  ax = # of clusters we read in so far.
   862                                  ;
   863                                  ; calls:     ReadSectors
   864                                  ; logic:
   865                                  ;	ax; dx = IbmLoadSize / # of sector in a cluster.
   866                                  ;	if dx = 0 then ok. (msload is in a cluster boundary.)
   867                                  ;      else		   (has to read (ax+1)th cluster to cover msload)
   868                                  ;	read (ax+1)th cluster into the address after the clusters we
   869                                  ;	read in so far.
   870                                  ; ---------------------------------------------------------------------------
   871                                  
   872                                  ; 09/12/2022
   873                                  ; BiosStart equ 51Ah ; AX = IO.SYS starting cluster
   874                                  ; IbmLoadSize equ 3  ; AX = Number sectors in MSLOAD
   875                                  ; BiosOffset equ 700h ; Address where loader was read in
   876                                  	
   877                                  ReadInFirstCluster:
   878                                  		; 14/09/2023
   879 00000180 8B16[1900]              		mov	dx, [FirstCluster+2]
   880 00000184 A1[1700]                		mov	ax, [FirstCluster]
   881                                  					; IBMBIO.COM First Cluster
   882                                  					; Root dir buffer at 500h (segment=0)
   883                                  					; IBMBIO.COM first cluster ptr at 51Ah
   884                                  					; high word of cluster is at 514h
   885                                  		; 14/10/2023 (!*!)
   886                                  		;; a cluster number start from 2
   887                                  		;; convert it to (correct) cluster index number
   888                                  		;sub	ax, 2
   889                                  		;sbb	dx, 0
   890                                  		;	; DX:AX = zero based cluster number (cluster index)
   891                                  
   892 00000187 8916[1500]              		mov	[CurrentClusterH], dx
   893 0000018B A3[1300]                		mov	[CurrentClusterL], ax ; Initialize to this cluster
   894                                  
   895                                  		; 24/12/2022
   896                                  		; (PCDOS 7.1 IBMBIO.COM - MSLOAD:0255h) ; 04/10/2023 ('mov ax,3')
   897                                  		;;mov	ax, IbmLoadSize
   898                                  		;mov	ax, 3		; Load the 3rd and other IO.SYS	sectors
   899                                  		; 04/10/2023  ; **	 	
   900                                  		; (Windows ME IO.SYS - MSLOAD:01E4h)
   901 0000018E B80400                  		mov	ax, 4 ; **	; Load the 4rd and other IO.SYS	sectors	
   902                                  
   903                                  		; 14/09/2023
   904                                  		;div	byte [SecPerCluster]
   905 00000191 F6F1                    		div	cl ; *#*
   906                                  					; AL = total cluster read in
   907                                  					; AH = remaining sectors in last cluster
   908                                  		
   909                                  		; (Note: PCDOS 7.1 bs loads 1st 4 sectors of IBMBIO.COM)
   910                                  		; If cluster size > 3, al = 0, ah <> 0
   911                                  		; If cluster size = 2, al = 1, ah = 1
   912                                  		; If cluster size = 1, al = 3, ah = 0
   913                                  		; If ah = 0, nothing remaining in last cluster
   914                                  
   915                                  		; 14/10/2023
   916 00000193 BE7000                  		mov	si, 70h ; ++*
   917 00000196 8EC6                    		mov	es, si	; ++	; ES = BIOSDATA (IO.SYS DATA) segment
   918                                  
   919                                  		; 14/09/2023
   920                                  		;cmp	ah, 0
   921                                  		; 10/12/2022
   922 00000198 20E4                    		and	ah, ah
   923                                  		;cmp	ah, 0
   924 0000019A 742F                    		jz	short SetNextClusterNum	; next cluster
   925                                  			; 04/10/2023 ; **
   926                                  			; If AH=0
   927                                  			;    and if CL=1, AL=4
   928                                  			;    and if CL=2, AL=2 (?)
   929                                  			;    and if CL=4, AL=1
   930                                  			; If AH>0
   931                                  			;    AL=0 and AH=4
   932                                  
   933                                  		; 04/10/2023	; **
   934                                  		; al = 0
   935                                  		;xor	ah, ah ; 0
   936                                  		;push	ax	; (*)	; AX = total clusters in the loader
   937                                  					; already read in
   938                                  ; 14/09/2023
   939                                  ; 24/12/2022
   940                                  %if 0		
   941                                  		mov	cx, [FirstSectorL]	; Put starting sector of disk data
   942                                  		mov	[StartSecL], cx	; area in StartSecH:StartSecL
   943                                  		mov	cx, [FirstSectorH]
   944                                  		mov	[StartSecH], cx
   945                                  		mul	byte [cs:SecPerCluster]
   946                                  		add	[StartSecL], ax	; Add number of sectors already loaded
   947                                  		adc	word [StartSecH], 0	; to start sector
   948                                  		;mov	dx, [FirstCluster+2]
   949                                  		;mov	ax, [FirstCluster]
   950                                  		;sub	ax, 2
   951                                  		;sbb	dx, 0
   952                                  		mov	dx, [CurrentClusterH]	; IBMBIO.COM 1st cluster (index)
   953                                  		mov	ax, [CurrentClusterL]	; (zero based cluster number)
   954                                  
   955                                  		xor	bx, bx
   956                                  		mov	bl, [SecPerCluster]
   957                                  		mul	bx		; DX:AX = logical start sector
   958                                  		add	[StartSecL], ax
   959                                  		adc	[StartSecH], dx
   960                                  					; abs start sector for next read of
   961                                  					; the rest of the last loader cluster
   962                                  		pop	ax	; (*) number of clusters already loaded
   963                                  				; (0 or 1)
   964                                  				; (Note: if al=0, the 1st 4 sectors of the 1st cluster
   965                                  				; will be loaded again! -PCDOS 7.1-)
   966                                  		push	ax
   967                                  		mul	word [ClusterSize]
   968                                  		;mov	di, BiosOffset
   969                                  		mov	di, 700h	; IBMBIO.COM (IO.SYS) loading addr (segment = 0)
   970                                  		add	di, ax
   971                                  		xor	ax, ax
   972                                  		mov	es, ax		; ES = segment 0
   973                                  		mov	al, [SecPerCluster] 
   974                                  					; Read in the entire last cluster
   975                                  		mov	[SectorCount], ax
   976                                  		call	ReadSectors
   977                                  		pop	ax		; AX = total clust read	by boot	loader
   978                                  		inc	ax		; AX = total clust read	in now
   979                                  SetNextClusterNum:			; ...
   980                                  		inc	ax		; AX = total clusters read in based 2
   981                                  		add	[CurrentClusterL], ax
   982                                  		adc	[CurrentClusterH], 0
   983                                  		dec	ax		; CurrentCluster = Last	cluster	read
   984                                  					; AX = number of clusters loaded
   985                                  %endif
   986                                  		; 04/10/2023 ; **
   987                                  		; ah=4 & al=0
   988 0000019C 88C8                    		mov	al, cl ; ** (SecPerCluster)
   989 0000019E 28E0                    		sub	al, ah ; ** (remain sectors to read in the cluster)
   990 000001A0 A2[1100]                		mov	[SectorCount], al ; ** (spc-4)
   991                                  
   992                                  		; 24/12/2022
   993                                  		; ds = cs
   994                                  		;mov	cx, [FirstSectorL] ; Put starting sector of disk data
   995                                  		;mov	[StartSecL], cx    ; area in StartSecH:StartSecL
   996                                  		;mov	cx, [cs:FirstSectorH]
   997                                  		;mov	[StartSecH], cx
   998                                  		; [StartSecL] = [FirstSectorL] ; **!**
   999                                  		; [StartSecH] = [FirstSectorH] ; **!**
  1000                                  		
  1001                                  		; 24/12/2022
  1002                                  		; cx = [SecPerCluster]  ; *#*
  1003                                  	
  1004                                  		; 04/10/2023
  1005                                  		;; ax = 0 (cluster size > 3) or ax = 1 (cluster size = 2)
  1006                                  		; al = 0 (cluster size > 4) and ah > 0  ; (as Win ME IO.SYS)
  1007                                  		; cx = sectors per cluster (ch = 0)
  1008                                  
  1009                                  		; 04/10/2023 ; **
  1010                                  		; cx = sectors per cluster (ch = 0)
  1011                                  
  1012                                  ;		;or	al, al ; *
  1013                                  ;		;jz	short rfc_1 ; al = 0 ; *
  1014                                  		; al = 1
  1015                                  
  1016                                  		;;mul	byte [SecPerCluster]
  1017                                  		;mul	cl ; *#*
  1018                                  		;add	[StartSecL], ax ; Add number of sectors already loaded
  1019                                  		;adc	word [StartSecH], 0 ; to start sector
  1020                                  		; 04/10/2023
  1021                                  		;add	[StartSecL], cx ; * (AL=1, CL*AL=CL, CH=0)
  1022                                  		;adc	word [StartSecH], 0 ; *
  1023                                  
  1024                                  ;rfc_1: ; *	; 04/10/2023
  1025                                  		;mov	ax, [51Ah] ; AX = [51Ah] = IO.SYS 1st clust
  1026                                  		;dec	ax
  1027                                  		;dec	ax
  1028                                  		; 14/10/2023
  1029                                  		;mov	ax, [CurrentClusterL] ; *##*
  1030                                  		;; ax = word [51Ah] - 2
  1031                                  		; 04/10/2023
  1032                                  		;mov	dx, [CurrentClusterH]
  1033 000001A3 A1[1500]                		mov	ax, [CurrentClusterH] ; *###*		
  1034                                  
  1035                                  		;;xor	bx, bx
  1036                                  		;;mov	bl, [SecPerCluster]
  1037                                  		;mov	bx, [SecPerCluster]
  1038                                  		;mul	bx		; DX:AX = logical start sector
  1039                                  		; 04/10/2023
  1040                                  		;mul	cx  ; [SecPerCluster]  ; *#*
  1041                                  		; 32 bit multiplication (HHLL*SPC)
  1042                                  		; 14/10/2023
  1043                                  		;push	ax ; Current Cluster LW
  1044                                  		;mov	ax, dx ; Current Cluster HW (HH) ; *###*
  1045                                  		
  1046 000001A6 F7E1                    		mul	cx ; (HH*SPC) ; (result: dx is -must be- zero)
  1047 000001A8 91                      		xchg	ax, cx
  1048                                  		; 14/10/2023
  1049                                  		;pop	dx ; Current Cluster LW	(LL)
  1050                                  		;mul	dx  ; LL*SPC	
  1051 000001A9 F726[1300]              		mul	word [CurrentClusterL] ; *##*
  1052 000001AD 01CA                    		add	dx, cx ; (add lw of HH*SPC)
  1053                                  
  1054                                  		; 04/10/2023 ; **
  1055 000001AF 83C004                  		add	ax, 4 ; ** ; IbmLoadSize (Win ME BS's IO.SYS read count)
  1056 000001B2 83D200                  		adc	dx, 0 ; **
  1057                                  
  1058 000001B5 0106[0700]              		add	[StartSecL], ax
  1059 000001B9 1116[0900]              		adc	[StartSecH], dx
  1060                                  					; abs start sector for next read of
  1061                                  					; the rest of the last loader cluster
  1062                                  		; 04/10/2023 ; **
  1063                                  		; (number of clusters already -complete- loaded = 0)
  1064                                  		;pop	ax	; (*) number of clusters already loaded
  1065                                  		;push	ax
  1066                                  
  1067                                  		; 04/10/2023 ; **
  1068                                  		;;mul	word [ClusterSize]
  1069                                  		; 14/10/2023
  1070                                  		;mov	ax, [BytesPerSec]
  1071                                  		;shl	ax, 2 ; * 4 (4 sectors already loaded)
  1072                                  		
  1073                                  		;;mov	di, BiosOffset
  1074                                  		;mov	di, 700h	; IO.SYS offset	(segment = 0)
  1075                                  		;add	di, ax
  1076                                  		; 14/10/2023
  1077 000001BD 8B3E[1B00]              		mov	di, [BytesPerSec]
  1078 000001C1 C1E702                  		shl	di, 2 ; * 4 (4 sectors already loaded)
  1079                                  		;add	di, 700h ; ++
  1080                                  		; di = buffer offset
  1081                                  
  1082                                  		; 04/10/2023 ; **
  1083                                  		;xor	ax, ax
  1084                                  		;mov	es, ax		; ES = segment 0
  1085                                  		;; dx = 0 ; **
  1086                                  		;mov	es, dx ; 0
  1087                                  		; 14/10/2023
  1088                                  		; cx = 0
  1089                                  		;mov	es, cx ; 0 ; ++
  1090                                  		; es = buffer segment = 0 
  1091                                  
  1092                                  		; 14/10/2023
  1093                                  		; es = si = 70h ; ++*
  1094                                  		;mov	si, 70h ; ++
  1095                                  		;mov	es, si	; ++
  1096                                  		; es:di = 70h:800h
  1097                                  
  1098                                  		; 24/12/2022
  1099                                  		;mov	al, [SecPerCluster]
  1100                                  		;			; Read in the entire last cluster
  1101                                  		;mov	[SectorCount], ax
  1102                                  		; 14/10/2023 ; **
  1103                                  		;mov	[SectorCount], cx ; [SecPerCluster]  ; *#*
  1104                                  		
  1105 000001C4 E87F00                  		call	ReadSectors
  1106                                  
  1107                                  		; 04/10/2023 ; *
  1108                                  		;;pop	ax		; AX = total clust read	by boot	loader
  1109                                  		;;inc	ax		; AX = total clust read	in now
  1110                                  		; 04/10/2023
  1111                                  		;mov	ax, 1	; 1 cluster loaded
  1112                                  ;SetNextClusterNum:
  1113                                  		; 14/10/2023
  1114 000001C7 89F8                    		mov	ax, di  
  1115                                  		; ax = loaded (IBMBIO.COM or IO.SYS) byte count
  1116 000001C9 EB0F                    		jmp	short SaveLoadedBios2
  1117                                  SetNextClusterNum:
  1118                                  		; 14/10/2023 (!*!)
  1119                                  		;inc	ax
  1120 000001CB 48                      		dec	ax ; (4 clusters -> +3, 1 cluster -> +0)
  1121 000001CC 0106[1300]              		add	[CurrentClusterL], ax  ; ah = 0
  1122 000001D0 8316[1500]00            		adc	word [CurrentClusterH], 0
  1123                                  				; CurrentCluster = Last	cluster	(loaded)
  1124 000001D5 40                      		inc	ax
  1125                                  		;dec	ax
  1126                                  				; AX = number of clusters loaded
  1127                                  		
  1128                                  ; SaveLoadedBios
  1129                                  ; ---------------------------------------------------------------------------
  1130                                  ;
  1131                                  ; NOTES:
  1132                                  ;
  1133                                  ;   Determine how much of iosys was loaded in when the loader was loaded
  1134                                  ;   by the boot record (only the portion that is guaranteed to be contiguous)
  1135                                  ;
  1136                                  ; INPUT:
  1137                                  ;   AX:Total cluster already read in (loader & bios)
  1138                                  ;   CS:CurrentCluster = number of clusters used for loader+2
  1139                                  ;
  1140                                  ; OUTPUT:
  1141                                  ;	ES = 70h
  1142                                  ;	DI = next offset to load iosys code
  1143                                  ;	AX,BX,CX,DX,SI destroyed
  1144                                  ;
  1145                                  ;	CS:NextBioLocation = di on output
  1146                                  ;	CS:last_cluster = last cluster loaded
  1147                                  ;
  1148                                  ; calls:     none
  1149                                  ;
  1150                                  ; ---------------------------------------------------------------------------
  1151                                  ;
  1152                                  ; Multiply cluster * cluster size in bytes to get total loaded for msload
  1153                                  ;
  1154                                  ; Subtract total_loaded - (EndOfLoader) to get loaded io.sys in last cluster
  1155                                  ;
  1156                                  ; Relocate this piece of iosys down to 70:0
  1157                                  ;
  1158                                  ; ---------------------------------------------------------------------------
  1159                                  
  1160                                  SaveLoadedBios:
  1161                                  		; 14/10/2023
  1162                                  		;push	ds
  1163                                  		
  1164                                  		; 24/12/2022
  1165                                  		; ds = cs
  1166                                  		; ax = number of loaded clusters
  1167 000001D6 F726[0500]              		mul	word [ClusterSize]
  1168                                  		;mul	word [cs:ClusterSize]
  1169                                  					; Get total bytes loaded by
  1170                                  					; this is always < 64k, so
  1171                                  					; lower 16 bits ok
  1172                                  		; 14/10/2023
  1173                                  		; ax = [clusterSize] * (loaded cluster count)
  1174                                  SaveLoadedBios2:
  1175                                  		; 14/10/2023
  1176 000001DA 1E                      		push	ds
  1177                                  		
  1178                                  		; 14/10/2023
  1179                                  		;sub	ax, EndOfLoader ; (OFFSET EndOfLoader)-(OFFSET Start)
  1180 000001DB BE[8004]                		mov	si, EndOfLoader
  1181 000001DE 29F0                    		sub	ax, si
  1182 000001E0 89C1                    		mov	cx, ax
  1183                                  		
  1184                                  		; 14/10/2023
  1185                                  		;mov	ax, 70h		; Segment at 70h
  1186                                  		;mov	ds, ax
  1187                                  		;mov	es, ax
  1188                                  		; es = 70h
  1189 000001E2 06                      		push	es
  1190 000001E3 1F                      		pop	ds
  1191                                  		
  1192                                  		;mov	si, EndOfLoader
  1193 000001E4 31FF                    		xor	di, di
  1194 000001E6 F3A4                    		rep movsb		; Relocate this code to 0070h:0000h
  1195                                  		
  1196                                  		;mov	[NextBioLocation], di
  1197                                  		;;mov	[cs:NextBioLocation], di
  1198                                  		; 05/10/2023
  1199                                  		;mov	[NextBioLocation], di
  1200 000001E8 89FD                    		mov	bp, di
  1201                                  
  1202                                  		; es:di = (the next) buffer address for next read
  1203                                  
  1204 000001EA 1F                      		pop	ds		; Save where location for next read
  1205                                  
  1206                                  ; GetContigClusters
  1207                                  ; ---------------------------------------------------------------------------
  1208                                  ;
  1209                                  ; NOTES: go find clusters as long as they are contiguous
  1210                                  ;
  1211                                  ;
  1212                                  ; INPUT:
  1213                                  ;   CS:NextBioLocation
  1214                                  ;   CS:
  1215                                  ;
  1216                                  ; OUTPUT:
  1217                                  ;
  1218                                  ; calls: GetNextFatEntry
  1219                                  ; ---------------------------------------------------------------------------
  1220                                  ;
  1221                                  ;Set CS:SectorCount to sectors per cluster
  1222                                  ;
  1223                                  ;Call GetNextFatEntry to get next cluster in file
  1224                                  ;
  1225                                  ;Call check_for_eof
  1226                                  ;
  1227                                  ;if (nc returned)
  1228                                  ;
  1229                                  ;   {call GetNextFatEntry
  1230                                  ;
  1231                                  ;    if (new cluster is contig to old cluster)
  1232                                  ;	{add sectors per cluster to CS:SectorCount
  1233                                  ;
  1234                                  ;	 call check_for_eof
  1235                                  ;
  1236                                  ;	 if (nc returned)
  1237                                  ;
  1238                                  ; ---------------------------------------------------------------------------
  1239                                  
  1240                                  ; 09/12/2022
  1241                                  ; END_OF_FILE equ 0FFh
  1242                                  ; DosLoadSeg equ 70h
  1243                                  
  1244                                  GetContigClusters:
  1245                                  
  1246                                  ; 24/12/2022
  1247                                  %if 0	
  1248                                  		xor	ah, ah
  1249                                  		mov	al, [cs:SecPerCluster]	; Assume we will get one cluster
  1250                                  		mov	[cs:SectorCount], ax	; Sector count = sectors in 1 cluster
  1251                                  		push	word [cs:SectorCount]
  1252                                  		call	GetNextFatEntry		; Returns next cluster to read in AX
  1253                                  		pop	word [cs:SectorCount]
  1254                                  		mov	word [cs:CurrentCluster], ax ; Update the last one found
  1255                                  		cmp	byte [cs:EndOfFile], 0FFh ; END_OF_FILE
  1256                                  		jz	short GoToBioInit
  1257                                  		xor	dx, dx
  1258                                  		;sub	ax, 2			; Zero base the cluster
  1259                                  		; 10/12/2022
  1260                                  		dec	ax
  1261                                  		dec	ax
  1262                                  		xor	ch, ch
  1263                                  		mov	cl, [cs:SecPerCluster]
  1264                                  		mul	cx			; How many sectors (before next cluster) 
  1265                                  		add	ax, [cs:FirstSectorL]	; See where the data sector starts
  1266                                  		adc	dx, [cs:FirstSectorH]
  1267                                  		mov	[cs:StartSecL], ax	; Save it (used by ReadSectors)
  1268                                  		mov	[cs:StartSecH], dx
  1269                                  		mov	di, [cs:NextBioLocation] ; Get where to put code
  1270                                  		push	word [cs:SectorCount]	; Save how many sectors
  1271                                  		;mov	ax, DosLoadSeg
  1272                                  		mov	ax, 70h
  1273                                  		mov	es, ax
  1274                                  		call	ReadSectors
  1275                                  		pop	ax			; Get back total sectors read in
  1276                                  		mul	word [cs:BytesPerSec]	; Get number of bytes we loaded
  1277                                  		add	[cs:NextBioLocation], ax ; Point to where to load next	
  1278                                  		jmp	short GetContigClusters
  1279                                  
  1280                                  %endif
  1281                                  		; 24/12/2022
  1282                                  		; ds = cs
  1283                                  
  1284 000001EB A1[1D00]                		mov	ax, [SecPerCluster]	; Assume we will get one cluster
  1285 000001EE A3[1100]                		mov	[SectorCount], ax	; Sector count = sectors in 1 cluster
  1286                                  		;push	word [SectorCount]
  1287 000001F1 50                      		push	ax
  1288                                  		
  1289 000001F2 E85401                  		call	GetNextFatEntry		; Returns next cluster to read in AX
  1290                                  		
  1291                                  		;pop	word [SectorCount]
  1292                                  		; 05/10/2023
  1293 000001F5 59                      		pop	cx ; sc = spc
  1294                                  		
  1295 000001F6 A3[1300]                		mov	[CurrentClusterL], ax	; Update the last one found, lw
  1296 000001F9 893E[1500]              		mov	[CurrentClusterH], di	; hw
  1297                                  
  1298 000001FD 803E[4000]FF            		cmp	byte [EndOfFile], 0FFh	; END_OF_FILE
  1299 00000202 742A                    		je	short GoToBioInit ; 23/12/2022
  1300                                  
  1301                                  		; 22/12/2022
  1302                                  		;xor	dx, dx ; * (not required)
  1303                                  		; 10/12/2022
  1304                                  		;;sub	ax, 2			; Zero base the cluster
  1305                                  		;dec	ax
  1306                                  		;dec	ax
  1307                                  		; 14/10/2023
  1308                                  		;xor	dx, dx
  1309 00000204 83E802                  		sub	ax, 2			; Zero base the cluster (32 bit as di:ax)
  1310 00000207 83DF00                  		sbb	di, 0
  1311                                  
  1312                                  		;; 24/12/2022
  1313                                  		;; ax = cluster index
  1314                                  		;;mov	cx, [SecPerCluster]
  1315                                  		;;mul	cx ; *			; How many sectors (before next cluster) 
  1316                                  		; 04/10/2023 
  1317                                  		;;mul	word [SecPerCluster]
  1318                                  		;mul	cx
  1319                                  		; 04/10/2023
  1320 0000020A 97                      		xchg	di, ax			; 32 bit multiplication
  1321 0000020B F7E1                    		mul	cx			; (dx:ax)*cx
  1322 0000020D 97                      		xchg	ax, di
  1323 0000020E F7E1                    		mul	cx
  1324 00000210 01FA                    		add	dx, di
  1325                                  		
  1326 00000212 0306[3900]              		add	ax, [FirstSectorL]	; See where the data sector starts
  1327 00000216 1316[3B00]              		adc	dx, [FirstSectorH]
  1328 0000021A A3[0700]                		mov	[StartSecL], ax		; Save it (used by ReadSectors)
  1329 0000021D 8916[0900]              		mov	[StartSecH], dx
  1330                                  		
  1331                                  		; 05/10/2023
  1332                                  		;mov	di, [NextBioLocation]
  1333 00000221 89EF                    		mov	di, bp
  1334 00000223 890E[1100]              		mov	[SectorCount], cx
  1335                                  		; es = 70h
  1336                                  
  1337                                  		; es:di = (current) buffer address for (current) read
  1338                                  	
  1339 00000227 E81C00                  		call	ReadSectors
  1340                                  				; ES:DI = (the next) buffer address for next read
  1341                                  		; 05/10/2023
  1342                                  		;mov	[NextBioLocation], di
  1343 0000022A 89FD                    		mov	bp, di
  1344                                  
  1345 0000022C EBBD                    		jmp	short GetContigClusters
  1346                                  
  1347                                  ; ---------------------------------------------------------------------------
  1348                                  
  1349                                  ; GoToBiosInit
  1350                                  ; ---------------------------------------------------------------------------
  1351                                  ;
  1352                                  ; NOTES:
  1353                                  ;
  1354                                  ;  Set up required registers for iosys, then jump to it (70:0)
  1355                                  ;
  1356                                  ; INPUT:     none
  1357                                  ;
  1358                                  ;   CS:MediaByte = media byte
  1359                                  ;   CS:BootDrive = int 13 drive number we booted from
  1360                                  ;   CS:FirstSectorL = first data sector on disk (low) (0-based)
  1361                                  ;   CS:FirstSectorH = first data sector on disk (high)
  1362                                  ;
  1363                                  ; OUTPUT:
  1364                                  ;
  1365                                  ;   required by msinit
  1366                                  ;   DL = int 13 drive number we booted from
  1367                                  ;   CH = media byte
  1368                                  ;   BX = first data sector on disk (0-based)
  1369                                  ;   AX = first data sector on disk (high)
  1370                                  ;   DI = sectors/fat for the boot media.
  1371                                  ;
  1372                                  ; calls:     none
  1373                                  ; ---------------------------------------------------------------------------
  1374                                  ;
  1375                                  ; set up registers for msinit then do far jmp
  1376                                  ;
  1377                                  ; ---------------------------------------------------------------------------
  1378                                  
  1379                                  GoToBioInit:
  1380                                  
  1381                                  ; 05/10/2023 - Retro DOS v5.0 IBMBIO.COM (PCDOS 7.1)
  1382                                  %if 0
  1383                                  		; 24/12/2022
  1384                                  		; ds = cs	
  1385                                  		;mov	ch, [cs:MediaByte]
  1386                                  		;mov	dl, [cs:BootDrive]
  1387                                  		;mov	bx, [cs:FirstSectorL]
  1388                                  		;mov	ax, [cs:FirstSectorH]
  1389                                  
  1390                                  		mov	ch, [MediaByte] ; Restore regs required for msint
  1391                                  		mov	dl, [BootDrive] ; Physical drv number we booted from.
  1392                                  		mov	bx, [FirstSectorL] ; AX:BX = first data sector of disk
  1393                                  		mov	ax, [FirstSectorH]
  1394                                  %endif
  1395                                  
  1396                                  ; 05/10/2023 - Retro DOS v5.0 IBMBIO.COM (PCDOS 7.1)
  1397                                  %if 1	
  1398                                  		; 05/10/2023
  1399                                  		; (PCDOS 7.1 IBMBIO.COM - MSLOAD:034Ah)
  1400 0000022E 8A2E[3F00]              		mov	ch, [MediaByte]	; Set up required registers for iosys,
  1401                                  					;  then jump to it (70:0)
  1402                                  					;
  1403                                  					; Restore regs required for msint
  1404 00000232 8A16[3D00]              		mov	dl, [BootDrive]	; Physical drv number we booted from
  1405 00000236 8B1E[3900]              		mov	bx, [FirstSectorL]
  1406 0000023A A1[3B00]                		mov     ax, [FirstSectorH]
  1407                                  					; bx:ax = first data sector of disk
  1408 0000023D C536[4100]              		lds	si, [OrgDasdPtr]
  1409                                  					; Set ds:si to Original INT 1Eh disk(ette)
  1410                                  					; table address and then push disk table 
  1411                                  					; address and INT 1Eh vector to stack
  1412                                  					; (set stack content just as at the start
  1413                                  					;  of MSLOAD)
  1414                                  		; 05/10/2023
  1415                                  		; following pushes are not necessary..
  1416                                  		; PCDOS 7.1 BIOSDATA init procedure does not pop the pushed
  1417                                  		; registers here and also it doesn't use the di value here
  1418                                  		; (but ds:si is used)
  1419                                  		;
  1420                                  		;push	ds              ; INT 1Eh original table segment
  1421                                  		;push	si              ; INT 1Eh original table offset
  1422                                  		;xor	di, di          ; 0
  1423                                  		;push	di		; INT 1Eh vector segment
  1424                                  		;mov	di, 78h         ; 1Eh*4 = 78h
  1425                                  		;push	di              ; INT 1Eh vector offset
  1426                                  %endif
  1427                                  		; 05/10/2023
  1428                                  		;mov	bp, sp	; not necessary
  1429                                  				; (BIOSDATA init doesn't use the bp value here)
  1430                                  
  1431 00000241 EA00007000              		jmp	70h:0	; Far jump to IoSysAddr	(DOSBIOS)
  1432                                  
  1433                                  ; =============== S U B	R O U T	I N E =======================================
  1434                                  
  1435                                  ; 05/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  1436                                  ; (PCDOS 7.1 IBMBIO.COm - MSLOAD:036Bh)
  1437                                  
  1438                                  %if 0
  1439                                  check_int13h_extensions:
  1440                                  		push	ax
  1441                                  		push	dx
  1442                                  		xor	ax, ax
  1443                                  		push	ax		; zero (buffer offset 24)
  1444                                  					; (bytes per sector)
  1445                                  		mov	bx, sp
  1446                                  		sub	sp, 20
  1447                                  		push	ax		; info flags
  1448                                  		mov	ax, 26		; Result buffer size
  1449                                  		push	ax
  1450                                  		mov	si, sp
  1451                                  		mov	dl, [BootDrive]
  1452                                  		mov	ah, 48h
  1453                                  		push	ds
  1454                                  		push	ss
  1455                                  		pop	ds
  1456                                  		cmp	dl, 0
  1457                                  		jge	short not_hard_disk
  1458                                  		int	13h	; DISK - IBM/MS Extension - GET DRIVE PARAMETERS
  1459                                  				; (DL - drive, DS:SI - buffer)
  1460                                  not_hard_disk:
  1461                                  		pop	ds
  1462                                  		mov	sp, bx
  1463                                  		pop	ax		; bytes per sector, buffer offset 24
  1464                                  		jc 	short int13h_ext_err
  1465                                  		cmp	ax, 512
  1466                                  		je	short int13_ext_ok
  1467                                  		stc
  1468                                  int13h_ext_err:
  1469                                  int13_ext_ok:
  1470                                  		pop	dx
  1471                                  		pop	ax
  1472                                  		retn
  1473                                  %endif
  1474                                  
  1475                                  ; =============== S U B	R O U T	I N E =======================================
  1476                                  
  1477                                  ; ReadSectors
  1478                                  ; ---------------------------------------------------------------------------
  1479                                  ; notES:
  1480                                  ;
  1481                                  ;  read in the CS:SectorCount number of sectors at ES:di
  1482                                  ;
  1483                                  ;
  1484                                  ; INPUT:
  1485                                  ;
  1486                                  ;   DI = OFFSET of start of read
  1487                                  ;   ES = segment of read
  1488                                  ;   CS:SectorCount = number of sectors to read
  1489                                  ;   CS:StartSecL = starting sector (low)
  1490                                  ;   CS:StartSecH = starting sector (high)
  1491                                  ;   following is bpb info that must be setup prior to call
  1492                                  ;   CS:NumHeads
  1493                                  ;   CS:number_of_sectors
  1494                                  ;   CS:BootDrive
  1495                                  ;   CS:SecPerTrack
  1496                                  ;
  1497                                  ; OUTPUT:
  1498                                  ;
  1499                                  ;   AX,BX,CX,DX,SI,DI destroyed
  1500                                  ; ---------------------------------------------------------------------------
  1501                                  ; divide start sector by sectors per track
  1502                                  ; the remainder is the actual sector number, 0 based
  1503                                  ;
  1504                                  ; increment actual sector number to get 1 based
  1505                                  ;
  1506                                  ; the quotient is the number of tracks - divide by heads to get the cyl
  1507                                  ;
  1508                                  ; the remainder is actual head, the quotient is cylinder
  1509                                  ;
  1510                                  ; figure the number of sectors in that track, set al to this
  1511                                  ;
  1512                                  ; do the read
  1513                                  ;
  1514                                  ; if error, do reset, then redo the int 13h
  1515                                  ;
  1516                                  ; if successful read, subtract # sectors read from SectorCount, add to logical
  1517                                  ; sector, add #sectors read * BytesPerSec to bx;
  1518                                  ;
  1519                                  ; if SectorCount <> 0 do next read
  1520                                  ; ---------------------------------------------------------------------------
  1521                                  
  1522                                  ; 05/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  1523                                  
  1524                                  		; 24/12/2022
  1525                                  		; 22/12/2022
  1526                                  ReadSectors:
  1527 00000246 B90500                  		mov	cx, 5			; 5 retries
  1528                                  
  1529                                  		; Convert a logical sector into track/sector/head. AX has the
  1530                                  		; logical sector number
  1531                                  TryRead:
  1532                                  		; 24/12/2022
  1533                                  		; ds = cs
  1534 00000249 51                      		push	cx		; (*)
  1535                                  		;mov	ax, [cs:StartSecL]	; Get starting sector
  1536                                  		;mov	dx, [cs:StartSecH]
  1537 0000024A A1[0700]                		mov	ax, [StartSecL]		; Get starting sector
  1538 0000024D 8B16[0900]              		mov	dx, [StartSecH]
  1539 00000251 50                      		push	ax		; (**)
  1540                                  		;;;
  1541                                  	
  1542                                  		; 05/10/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  1543                                  		;call	check_int13h_extensions
  1544                                  		;jc	short chs_read
  1545                                  		; ----------------------
  1546                                  		; 06/10/2023
  1547                                  check_int13h_extensions:
  1548 00000252 8A1E[3D00]              		mov	bl, [BootDrive]
  1549 00000256 08DB                    		or	bl, bl
  1550 00000258 7953                    		jns	short chs_read  ; not hard disk
  1551                                  		; bl >= 80h
  1552 0000025A 52                      		push	dx ; ***
  1553                                  		;mov	dl, [BootDrive]
  1554 0000025B 88DA                    		mov	dl, bl
  1555 0000025D 50                      		push	ax ; ****
  1556 0000025E 31C0                    		xor	ax, ax
  1557 00000260 50                      		push	ax		; zero (buffer offset 24)
  1558                                  					; (bytes per sector)
  1559 00000261 89E3                    		mov	bx, sp
  1560 00000263 83EC14                  		sub	sp, 20
  1561 00000266 50                      		push	ax		; info flags
  1562 00000267 B81A00                  		mov	ax, 26		; Result buffer size
  1563 0000026A 50                      		push	ax
  1564 0000026B 89E6                    		mov	si, sp
  1565 0000026D B448                    		mov	ah, 48h
  1566 0000026F 1E                      		push	ds
  1567 00000270 16                      		push	ss
  1568 00000271 1F                      		pop	ds
  1569 00000272 CD13                    		int	13h	; DISK - IBM/MS Extension - GET DRIVE PARAMETERS
  1570                                  				; (DL - drive, DS:SI - buffer)
  1571 00000274 1F                      		pop	ds
  1572 00000275 89DC                    		mov	sp, bx
  1573 00000277 58                      		pop	ax		; bytes per sector, buffer offset 24
  1574 00000278 7203                    		jc 	short int13h_ext_err
  1575 0000027A 3D0002                  		cmp	ax, 512
  1576                                  int13h_ext_err:
  1577 0000027D 58                      		pop	ax ; ****
  1578 0000027E 5A                      		pop	dx ; ***
  1579 0000027F 752C                    		jne	short chs_read
  1580                                  		; ----------------------
  1581                                  lba_read:		
  1582                                  		;xor	si, si		; LBA read
  1583                                  		;push	si		; 0
  1584                                  		;push	si		; 0
  1585 00000281 31DB                    		xor	bx, bx		; LBA read
  1586 00000283 53                      		push	bx		; 0
  1587 00000284 53                      		push	bx		; 0
  1588 00000285 52                      		push	dx
  1589 00000286 50                      		push	ax		; 0:0:dx:ax = start sector (8 bytes)
  1590 00000287 06                      		push	es
  1591 00000288 57                      		push	di 		; memory buffer address (seg:off)
  1592 00000289 FF36[1100]              		push	word [SectorCount]
  1593                                  					; number of sectors to read
  1594                                  		;mov	bx, 16		; size of DAP
  1595 0000028D B310                    		mov	bl, 16
  1596 0000028F 53                      		push	bx
  1597 00000290 89E6                    		mov	si, sp
  1598 00000292 B442                    		mov	ah, 42h
  1599 00000294 52                      		push	dx
  1600 00000295 8A16[3D00]              		mov	dl, [BootDrive]
  1601 00000299 1E                      		push	ds
  1602 0000029A 16                      		push	ss
  1603 0000029B 1F                      		pop	ds
  1604                                  		
  1605 0000029C CD13                    		int	13h	; DISK - IBM/MS Extension - EXTENDED READ
  1606                                  				; (DL - drive, DS:SI - disk address packet)
  1607 0000029E 1F                      		pop	ds
  1608 0000029F 5A                      		pop	dx		; sector number, hw
  1609 000002A0 7209                    		jc	short lba_read_err
  1610 000002A2 58                      		pop	ax		; size of DAP (disk address packet) = 16
  1611 000002A3 58                      		pop	ax		; number of sectors to read
  1612 000002A4 50                      		push	ax		; (**) discard ax on stack (StartSecL)
  1613 000002A5 01DC                    		add	sp, bx		; sp points to cx (*)
  1614 000002A7 59                      		pop	cx	; (*)	; remaining retry count value
  1615 000002A8 E98400                  		jmp	ReadOk
  1616                                  lba_read_err:
  1617 000002AB 01DC                    		add	sp, bx
  1618                                  		;;;
  1619                                  chs_read:
  1620 000002AD 89D0                    		mov	ax, dx		; start sector, hw
  1621 000002AF 31D2                    		xor	dx, dx ; 0
  1622                                  		;;;
  1623                                  		; 05/10/2023 - Retro DOS v5.0
  1624                                  		; (PCDOS 7.1 IBMBIO.COM - MSLOAD:03E3h
  1625 000002B1 3906[2500]              		cmp	[SecPerTrack], ax ; hw of disk (LBA) address
  1626 000002B5 7326                    		jnb	short DoDivide	; (must not be > sectors per track)
  1627                                  ErrorOut:
  1628                                  ReadError:		
  1629                                  		;push	cs
  1630                                  		;pop	ds
  1631                                  		; ds = cs
  1632 000002B7 BE[2904]                		mov	si, NonSystemDiskMsg ; "Non-System disk or disk error" ...
  1633                                  WriteTTY:
  1634 000002BA AC                      		lodsb
  1635 000002BB 08C0                    		or	al, al
  1636 000002BD 7408                    		jz	short wait_key_reboot
  1637 000002BF B40E                    		mov	ah, 0Eh
  1638 000002C1 B307                    		mov	bl, 7
  1639 000002C3 CD10                    		int	10h
  1640 000002C5 EBF3                    		jmp	short WriteTTY
  1641                                  wait_key_reboot:
  1642 000002C7 30E4                    		xor	ah, ah
  1643 000002C9 CD16                    		int	16h
  1644                                  		;xor	bx, bx
  1645                                  		;mov	ds, bx ; 0
  1646                                  		;les	bx, [cs:OrgDasdPtr]
  1647 000002CB C41E[4100]              		les	bx, [OrgDasdPtr] ; Restore ROMBIOS's INT 1Eh vector
  1648                                  		; 06/10/2023
  1649 000002CF 31F6                    		xor	si, si ; 0
  1650 000002D1 8EDE                    		mov	ds, si
  1651                                  
  1652 000002D3 BE7800                  		mov	si, 78h ; 1Eh*4 
  1653 000002D6 891C                    		mov	[si], bx
  1654 000002D8 8C4402                  		mov	[si+2], es
  1655 000002DB CD19                    		int	19h		; DISK BOOT
  1656                                  					; causes reboot of disk system
  1657                                  		;;;
  1658                                  DoDivide:
  1659                                  		;;div	word [cs:SecPerTrack]
  1660                                  		;div	word [SecPerTrack]
  1661                                  		; 24/12/2022
  1662 000002DD 8B1E[2500]              		mov	bx, [SecPerTrack]
  1663 000002E1 F7F3                    		div	bx
  1664 000002E3 A3[0B00]                		mov	[TempH], ax
  1665                                  		;mov	[cs:TempH], ax
  1666 000002E6 58                      		pop	ax ; (**) ; 05/10/2023	; start sector, lw
  1667 000002E7 F7F3                    		div	bx
  1668                                  		;div	word [SecPerTrack]
  1669                                  		;;div	word [cs:SecPerTrack]	; [TempH]:ax = track,
  1670                                  						; dx = sector number
  1671                                  
  1672                                  		;mov	bx, [cs:SecPerTrack]	; Get number of sectors we can
  1673                                  						; read in this track
  1674 000002E9 29D3                    		sub	bx, dx		; dx = start sector on (same) track
  1675                                  		;mov	si, bx
  1676 000002EB 8B36[1100]              		mov	si, [SectorCount] ; sectors to read on (same) track (remain sectors)
  1677                                  
  1678 000002EF 39DE                    		cmp	si, bx
  1679 000002F1 7602                    		jna	short GotLength
  1680                                  		;cmp	[SectorCount], si
  1681                                  		;;cmp	[cs:SectorCount], si	; Is possible sectors in track more
  1682                                  		;jnb	short GotLength		; than what we need to read?
  1683 000002F3 89DE                    		mov	si, bx
  1684                                  		;mov	si, [SectorCount]
  1685                                  		;;mov	si, [cs:SectorCount]	; Yes, only read what we need to
  1686                                  ;GotLength:
  1687                                  
  1688                                  		; 24/12/2022
  1689                                  		; IO.SYS < 40KB (segment override is not possible)
  1690                                  		; 700h+0F8FFh < 64KB address 
  1691                                  		;	(there is not an override risk up to 63743 bytes)
  1692                                  ; 24/12/2022
  1693                                  %if 0
  1694                                  		; 24/12/2022
  1695                                  		; dma boundary check for >64KB reads
  1696                                  		; Also, Segment Override risk !
  1697                                  		or	di, di
  1698                                  		jz	short dma_boundary_ok ; no problem for the 1st read
  1699                                  		;cmp	byte [BootDrive], 80h
  1700                                  		;;cmp	byte [cs:BootDrive], 80h
  1701                                  		;jnb	short dma_boundary_ok ; no problem for hard disks
  1702                                  dma_boundary_chk:
  1703                                  		cmp	si, 1
  1704                                  		jna	short dma_boundary_ok 
  1705                                  				; 1 sector read will not cause a boundary error
  1706                                  		push	dx
  1707                                  		push	ax
  1708                                  		mov	ax, si
  1709                                  		sub	dx, dx
  1710                                  		mul	word [BytesPerSec]
  1711                                  		mov	bx, es
  1712                                  		mov	cl, 4
  1713                                  		shl	bx, cl	; convert paragraphs to bytes
  1714                                  		; bx = segment start position (for 64K memory sections)
  1715                                  		add	bx, ax	; byte count to read
  1716                                  		pop	ax
  1717                                  		pop	dx
  1718                                  		add	bx, di	; add current buffer offset to byte count
  1719                                  		jnc	short dma_boundary_ok
  1720                                  		
  1721                                  		; Sector count must be decreased to prevent
  1722                                  		; DMA boundary error or segment override risk!
  1723                                  		dec	si
  1724                                  		jmp	short dma_boundary_chk
  1725                                  dma_boundary_ok:
  1726                                  %endif
  1727                                  		; 24/12/2022
  1728                                  GotLength:
  1729                                  		;inc	dl			; Sector numbers are 1-based
  1730                                  		; 18/12/2022
  1731 000002F5 42                      		inc	dx
  1732 000002F6 88D3                    		mov	bl, dl			; Start sector in BL
  1733                                  		; 24/12/2022
  1734 000002F8 8B16[0B00]              		mov	dx, [TempH]		; DX:AX = Track
  1735                                  		;mov	dx, [cs:TempH]		; DX:AX = Track
  1736 000002FC 50                      		push	ax
  1737 000002FD 89D0                    		mov	ax, dx
  1738 000002FF 31D2                    		xor	dx, dx
  1739                                  		; 24/12/2022
  1740 00000301 F736[2700]              		div	word [NumHeads]
  1741                                  		;div	word [cs:NumHeads]	; Start cyl in AX, head in dl
  1742                                  		;mov	[TempH], ax
  1743                                  		;;mov	[cs:TempH], ax
  1744 00000305 58                      		pop	ax
  1745 00000306 F736[2700]              		div	word [NumHeads]
  1746                                  		;div	word [cs:NumHeads]	; [TempH]:AX = Cylinder, DX = Head
  1747                                  
  1748                                  			; At this moment, we assume that TempH = 0,
  1749                                  			; ax <= 1024, dx <= 255
  1750                                  
  1751 0000030A 88D6                    		mov	dh, dl
  1752                                  		
  1753 0000030C B106                    		mov	cl, 6
  1754 0000030E D2E4                    		shl	ah, cl			; Shift cyl high bits up
  1755 00000310 08DC                    		or	ah, bl			; Mix in with sector bits
  1756 00000312 88C5                    		mov	ch, al			; Setup cyl low
  1757 00000314 88E1                    		mov	cl, ah			; Setup cyl/high - sector
  1758 00000316 89FB                    		mov	bx, di			; Get back OFFSET
  1759                                  		; 24/12/2022
  1760 00000318 8A16[3D00]              		mov	dl, [BootDrive]		; Get drive
  1761                                  		;mov	dl, [cs:BootDrive]	; Get drive
  1762 0000031C 89F0                    		mov	ax, si			; Get number of sectors to read (al)
  1763 0000031E B402                    		mov	ah, 2			; Read sectors
  1764                                  		; 23/12/2022
  1765                                  		;push	ax
  1766                                  		;push	di
  1767                                  
  1768                                  			; Issue one read request. ES:BX have the transfer address,
  1769                                  			; AL is the number of sectors.	
  1770                                  
  1771 00000320 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  1772                                  					; AL = number of sectors to read, CH = track, CL = sector
  1773                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  1774                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  1775                                  		; 23/12/2022
  1776                                  		;pop	di
  1777                                  		;pop	ax
  1778                                  
  1779                                  		; 09/12/2023
  1780                                  		; 23/12/2022
  1781                                  		;mov	ah, 0
  1782                                  		
  1783 00000322 59                      		pop	cx ; (*)	; Get retry count back
  1784 00000323 730A                    		jnc	short ReadOk	; 23/12/2022
  1785                                  		
  1786                                  		; 23/12/2022
  1787                                  		;mov	bx, di		; Get offset
  1788                                  		; 12/12/2023
  1789 00000325 30E4                    		xor	ah, ah
  1790                                  		; ah = 0
  1791                                  		; 23/12/2022
  1792                                  		;push	cx
  1793                                  		; 24/12/2022
  1794                                  		;mov	dl, [BootDrive]
  1795                                  		;;mov	dl, [cs:BootDrive]
  1796                                  		; 23/12/2022
  1797                                  		;push	di
  1798 00000327 CD13                    		int	13h		; DISK - RESET DISK SYSTEM
  1799                                  					; DL = drive (if bit 7 is set both hard	disks and floppy disks reset)
  1800                                  		; 23/12/2022
  1801                                  		;pop	di
  1802                                  		;pop	cx
  1803 00000329 49                      		dec	cx
  1804 0000032A 748B                    		jz	short ReadError
  1805 0000032C E91AFF                  		jmp	TryRead
  1806                                  ; ---------------------------------------------------------------------------
  1807                                  ; 05/10/2023
  1808                                  ;ReadError:
  1809                                  ;		jmp	ErrorOut
  1810                                  ; ---------------------------------------------------------------------------
  1811                                  
  1812                                  ReadOk:
  1813                                  		; 09/12/2023
  1814                                  		; al = sectors per cluster or sectors per track
  1815                                  		; (al <= 64, sectors per cluster <= 64) ; (!!!)
  1816                                  		; ((128*512 = 65536 -> ax=0, dx=1 is unexpected result here!))
  1817                                  
  1818                                  		; 23/12/2022
  1819                                  		; ah = 0
  1820                                  		; 22/12/2022
  1821                                  		;xor	ah, ah		; Mask out read command, just get # read
  1822                                  		; ch = 0
  1823 0000032F 88C1                    		mov	cl, al
  1824                                  		
  1825                                  		; 09/12/2023
  1826                                  		;; 22/12/2022
  1827                                  		;; cx = ax = read (sector) count
  1828                                  		;;mov	bx, [cs:BytesPerSec]	; Bytes per sector
  1829                                  		;;mul	bx			; Get total bytes read
  1830                                  		;; 24/12/2022
  1831                                  		;; ds = cs
  1832                                  		;mul	word [BytesPerSec]
  1833                                  		;;mul	word [cs:BytesPerSec]
  1834                                  		; 09/12/2023
  1835 00000331 A1[1B00]                		mov	ax, [BytesPerSec]
  1836 00000334 F7E1                    		mul	cx	; (!!!)	
  1837 00000336 01C7                    		add	di, ax		; Add it to OFFSET
  1838                                  		; 09/12/2023
  1839                                  		; dx = 0 (CL must be <= 64) ; (!!!) 
  1840                                  
  1841                                  		; 24/12/2022
  1842                                  		; IO.SYS < 40KB (segment override is not possible)
  1843                                  		; 700h+0F8FFh < 64KB address 
  1844                                  		;	(there is not an override risk up to 63743 bytes)
  1845                                  		;add	di, ax
  1846                                  		;jnc	short read_next_sector
  1847                                  		;mov	bx, es
  1848                                  		;;add	bx, 1000h
  1849                                  		;add	bh, 10h
  1850                                  		;mov	es, bx
  1851                                  ;read_next_sector:
  1852                                  
  1853                                  		; 24/12/2022
  1854                                  		; ds = cs
  1855                                  		; 22/12/2022
  1856 00000338 290E[1100]              		sub	[SectorCount], cx
  1857                                  		;sub	[cs:SectorCount], cx
  1858                                  		;;sub	[cs:SectorCount], ax	; Bump number down
  1859 0000033C 7464                    		jz	short EndRead
  1860 0000033E 010E[0700]              		add	[StartSecL], cx
  1861                                  		;add	[cs:StartSecL], cx
  1862                                  		;;add	[cs:StartSecL], ax	; Where to start next time
  1863                                  		;adc	word [StartSecH], 0
  1864                                  		; 09/12/2023
  1865 00000342 1116[0900]              		adc	[StartSecH], dx ; 0
  1866                                  		;;adc	word [cs:StartSecH], 0
  1867 00000346 E9FDFE                  		jmp	ReadSectors
  1868                                  ; ---------------------------------------------------------------------------
  1869                                  		
  1870                                  		; 09/12/2023
  1871                                  		; 06/10/2023
  1872                                  		; 24/12/2022
  1873                                  ;EndRead:
  1874                                  ;		retn
  1875                                  
  1876                                  ; =============== S U B	R O U T	I N E =======================================
  1877                                  
  1878                                  ; GetNextFatEntry
  1879                                  ; ---------------------------------------------------------------------------
  1880                                  ;
  1881                                  ; NOTES:
  1882                                  ;
  1883                                  ;   given the last cluster found, this will return the next cluster of
  1884                                  ;   iosys. if the last cluster is (f)ff8 - (f)fff, then the final cluster
  1885                                  ;   of iosys has been loaded, and control is passed to goto_iosys
  1886                                  ;   msload can handle maximum fat area size of 128 kb.
  1887                                  ;
  1888                                  ; INPUT:
  1889                                  ;
  1890                                  ;    CS:CurrentCluster
  1891                                  ;    CS:FatSize
  1892                                  ;
  1893                                  ; OUTPUT:
  1894                                  ;
  1895                                  ;   CS:CurrentCluster (updated)
  1896                                  ;
  1897                                  ; calls:  GetFatSector
  1898                                  ; ---------------------------------------------------------------------------
  1899                                  ; get CurrentCluster
  1900                                  ;
  1901                                  ; if (16 bit fat)
  1902                                  ;    {if (CurrentCluster = fff8 - ffff)
  1903                                  ;	 {jmp goto_iosys}
  1904                                  ;     else
  1905                                  ;	{get OFFSET by multiply cluster by 2}
  1906                                  ;
  1907                                  ; else
  1908                                  ;    {if (CurrentCluster = ff8 - fff)
  1909                                  ;	 {jmp goto_iosys}
  1910                                  ;     else
  1911                                  ;	{get OFFSET by multiply cluster by 3
  1912                                  ;
  1913                                  ;	 rotate right to divide by 2
  1914                                  ;
  1915                                  ;	 if (cy set - means odd number)
  1916                                  ;	    {shr 4 times to keep high twelve bits}
  1917                                  ;
  1918                                  ;	 else
  1919                                  ;	    {and with 0fffh to keep low 12 bits}
  1920                                  ;	}
  1921                                  ;    }
  1922                                  ;
  1923                                  ; ---------------------------------------------------------------------------
  1924                                  
  1925                                  ; 09/12/2022
  1926                                  ; FAT_12_BIT equ 1
  1927                                  ; NOT_END_OF_FILE equ 0  ; ~END_OF_FILE ; END_OF_FILE equ 0FFh
  1928                                  
  1929                                  GetNextFatEntry:
  1930                                  		; 05/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  1931                                  
  1932 00000349 06                      		push	es
  1933                                  		; 24/12/2022
  1934                                  		; ds = cs
  1935                                  		;mov	ax, [cs:FatSegment]
  1936 0000034A A1[4500]                		mov	ax, [FatSegment]
  1937 0000034D 8EC0                    		mov	es, ax		; ES-> FAT area segment
  1938                                  		; 09/12/2022
  1939                                  		;;mov	byte [cs:EndOfFile], END_OF_FILE
  1940                                  		;mov	byte [cs:EndOfFile], 0FFh ; Assume last cluster
  1941                                  		;mov	ax, [cs:CurrentCluster] ; Get last cluster
  1942                                  		; 24/12/2022
  1943                                  		; ds = cs
  1944 0000034F C606[4000]FF            		mov	byte [EndOfFile], 0FFh ; Assume last cluster
  1945                                  		;;;
  1946                                  		;mov	ax, [CurrentCluster] ; Get last cluster
  1947                                  		; 05/10/2023 - Retro DOS v5.0 (PCDOS 7.1)
  1948 00000354 A1[1300]                		mov	ax, [CurrentClusterL] ; Get last cluster
  1949                                  		; 06/10/2023
  1950                                  		;mov	di, [CurrentClusterH]
  1951                                  chk_fat32_type:
  1952                                  		; 05/10/2023
  1953 00000357 803E[3E00]0B            		cmp	byte [FatType], 0Bh  ; FAT32 (CHS) fs ?
  1954 0000035C 7520                    		jne	short chk_fat_type   ; no
  1955                                  Got32bit:
  1956 0000035E 8B3E[1500]              		mov	di, [CurrentClusterH]
  1957 00000362 01C0                    		add	ax, ax
  1958 00000364 11FF                    		adc	di, di
  1959 00000366 01C0                    		add	ax, ax
  1960 00000368 11FF                    		adc	di, di          ; Get the FAT offset (di:si)
  1961 0000036A 89C6                    		mov	si, ax
  1962 0000036C E86700                  		call	GetFatSector
  1963 0000036F 268B07                  		mov	ax, [es:bx]
  1964 00000372 268B7F02                		mov	di, [es:bx+2]
  1965                                  		; 06/10/2023
  1966                                  		;and	di, 0FFFh ; 28 bit cluster number
  1967 00000376 81FFFF0F                		cmp	di, 0FFFh       ; FAT32 cluster numbers are 28 bit numbers
  1968                                  					; (higher 4 bits are -must be- zero)
  1969                                  		;jne	short GotFAT32ClusterDone
  1970 0000037A 751E                    		jne	short GotClusterDoneJ
  1971                                  		; 06/10/2023
  1972                                  		;cmp	ax, 0FFF8h
  1973                                  ;GotFAT32ClusterDone:
  1974                                  		;jmp	short GotClusterDoneJ
  1975                                  		; 09/12/2023
  1976                                  		;mov	dx, 0FFF8h
  1977                                  		;jmp	short isitlastcluster
  1978 0000037C EB17                    		jmp	short isitlastcluster_16_32
  1979                                  		;;;
  1980                                  chk_fat_type:
  1981                                  		; 06/10/2023
  1982 0000037E 29FF                    		sub	di, di ; 0 ; hw of the cluster number must be 0
  1983                                  				   ; (if it is not FAT32 cluster) 
  1984                                  		; 05/10/2023
  1985 00000380 803E[3E00]01            		cmp	byte [FatType], 1
  1986                                  		;cmp	byte [Fatsize], 1
  1987                                  		;;;cmp	byte [cs:FatSize], FAT_12_BIT
  1988                                  		;;cmp	byte [cs:Fatsize], 1
  1989                                  		;jne	short Got16Bit	; 23/12/2022
  1990                                  		; 09/12/2023
  1991 00000385 741C                    		je	short Got12Bit
  1992                                  
  1993                                  ; ---------------------------------------------------------------------------
  1994                                  		
  1995                                  		; 09/12/2023
  1996                                  Got16Bit:
  1997                                  		; 23/12/2022
  1998                                  		;push	dx
  1999                                  		;xor	dx, dx
  2000                                  		; 05/10/2023
  2001                                  		;sub	dx, dx ; 23/12/2022
  2002                                  
  2003                                  		; 05/10/2023 - Retro DOS v5.0 IBMBIO.COM (MSLOAD)
  2004                                  		;shl	ax, 1			; Multiply cluster by 2
  2005                                  		;adc	dx, 0
  2006 00000387 D1E0                    		shl	ax, 1
  2007 00000389 11FF                    		adc	di, di	; di = 0 ; 06/10/2023	
  2008                                  
  2009 0000038B 89C6                    		mov	si, ax			; Get the final buffer OFFSET
  2010 0000038D E84600                  		call	GetFatSector
  2011                                  		; 23/12/2022
  2012                                  		;pop	dx
  2013                                  
  2014                                  		; 05/10/2023
  2015 00000390 31FF                    		xor	di, di		 ; HW of cluster number is 0
  2016                                  
  2017 00000392 268B07                  		mov	ax, [es:bx]
  2018                                  
  2019                                  		; 09/12/2023
  2020                                  isitlastcluster_16_32:
  2021                                  		; 06/10/2023
  2022 00000395 BAF8FF                  		mov	dx, 0FFF8h
  2023                                  		;jmp	short isitlastcluster
  2024                                  ; 09/12/2023
  2025                                  ; 06/10/2023
  2026                                  %if 1
  2027                                  isitlastcluster:
  2028 00000398 39D0                    		cmp	ax, dx
  2029                                  		;cmp	ax, 0FFF8h
  2030                                  GotClusterDoneJ:	; 05/10/2023
  2031 0000039A 7305                    		jnb	short GotClusterDone
  2032                                  NotLastCluster:	
  2033                                  		; 24/12/2022
  2034                                  		; ds = cs
  2035                                  		;;mov	byte [cs:EndOfFile], NOT_END_OF_FILE ; ~END_OF_FILE
  2036                                  		;mov	byte [cs:EndOfFile], 0	; Assume not last cluster
  2037 0000039C C606[4000]00            		mov	byte [EndOfFile], 0	; Assume not last cluster
  2038                                  GotClusterDone:
  2039 000003A1 07                      		pop	es
  2040                                  		; 24/12/2022
  2041                                  EndRead:
  2042 000003A2 C3                      		retn
  2043                                  %endif
  2044                                  
  2045                                  ; ---------------------------------------------------------------------------
  2046                                  
  2047                                  		; 09/12/2023
  2048                                  Got12Bit:
  2049 000003A3 89C6                    		mov	si, ax
  2050                                  		;shr	ax, 1
  2051                                  		;add	si, ax		; SI = AX * 1.5 = AX + AX/2
  2052                                  		; 05/10/2023
  2053                                  		;mov	dx, di
  2054                                  		;shr	dx, 1
  2055                                  		;rcr	ax, 1
  2056                                  		;add	si, ax
  2057                                  		;adc	di, dx		; di:si = dx:ax * 1.5 = dx:ax + dx:ax/2
  2058                                  		; 06/10/2023
  2059 000003A5 D1E8                    		shr	ax, 1
  2060 000003A7 01C6                    		add	si, ax
  2061                                  		;sub	di, di ; 0 ; (di must be 0 for FAT12)
  2062                                  
  2063                                  		; 23/12/2022
  2064                                  		;push	dx
  2065                                  		;xor	dx, dx
  2066                                  		; 05/10/2023
  2067                                  		;sub	dx, dx ; 23/12/2022
  2068 000003A9 E82A00                  		call	GetFatSector
  2069                                  		; 23/12/2022
  2070                                  		;pop	dx
  2071 000003AC 7510                    		jnz	short ClusterOk
  2072 000003AE 268A07                  		mov	al, [es:bx]
  2073                                  		; 22/12/2022
  2074                                  		;mov	[cs:TempCluster], al
  2075                                  		; 06/10/2023
  2076 000003B1 50                      		push	ax ; (*)
  2077                                  		;inc	si
  2078                                  		;add	si, 1
  2079                                  		;adc	di, 0
  2080                                  		; 05/10/2023
  2081 000003B2 46                      		inc	si
  2082                                  		; 06/10/2023
  2083                                  		;jnz	short Got12Bit_rnfs
  2084                                  		;inc	di
  2085                                  ;Got12Bit_rnfs:
  2086                                  		; 23/12/2022
  2087                                  		;push	dx
  2088                                  		; 05/10/2023
  2089                                  		;xor	dx, dx
  2090 000003B3 E82000                  		call	GetFatSector	; Read next fat sector
  2091                                  		; 23/12/2022
  2092                                  		;pop	dx
  2093                                  		; 22/12/2022
  2094                                  		;mov	al, [es:0]
  2095                                  		;mov	[cs:TempCluster+1], al
  2096                                  		;mov	ax, [cs:TempCluster]
  2097                                  		; 06/10/2023
  2098                                  		; 22/12/2022
  2099 000003B6 58                      		pop	ax ; (*) 
  2100 000003B7 268A260000              		mov	ah, [es:0]
  2101 000003BC EB03                    		jmp	short EvenOdd
  2102                                  ; ---------------------------------------------------------------------------
  2103                                  
  2104                                  ClusterOk:
  2105 000003BE 268B07                  		mov	ax, [es:bx]
  2106                                  EvenOdd:
  2107                                  		; 24/12/2022
  2108                                  		; ds = cs
  2109                                  		;test	byte [CurrentCluster], 1
  2110                                  		; 05/10/2023 - Retro DOS v5.0 IBMBIO.COM (MSLOAD)
  2111 000003C1 F606[1300]01            		test	byte [CurrentClusterL], 1
  2112                                  		; 10/12/2022		
  2113                                  		;test	byte [cs:CurrentCluster], 1 ; 09/12/2022
  2114                                  		;;test	word [cs:CurrentCluster], 1 ; Was last cluster odd?
  2115 000003C6 7505                    		jnz	short OddResult		; If not zero it was odd
  2116 000003C8 25FF0F                  		and	ax, 0FFFh		; Keep low 12 bits
  2117 000003CB EB04                    		jmp	short TestEOF
  2118                                  ; ---------------------------------------------------------------------------
  2119                                  
  2120                                  OddResult:
  2121 000003CD B104                    		mov	cl, 4			; Keep high 12 bits for odd
  2122 000003CF D3E8                    		shr	ax, cl
  2123                                  TestEOF:
  2124                                  		; 06/10/2023
  2125                                  		; di = 0
  2126                                  		;xor	di, di		 ; HW of cluster number is 0
  2127                                  		
  2128                                  		; 06/10/2023	
  2129                                  		;cmp	ax, 0FF8h		; Is it last cluster?
  2130                                  		;jnb	short GotClusterDone	; Yep, all done here
  2131                                  		;jmp	short NotLastCluster
  2132 000003D1 BAF80F                  		mov	dx, 0FF8h
  2133                                  		; 09/12/2023
  2134 000003D4 EBC2                    		jmp	short isitlastcluster
  2135                                  ; 09/12/2023
  2136                                  ; 06/10/2023
  2137                                  %if 0
  2138                                  isitlastcluster:
  2139                                  		; 06/10/2023
  2140                                  		cmp	ax, dx
  2141                                  GotClusterDoneJ:
  2142                                  		jnb	short GotClusterDone
  2143                                  NotLastCluster:	
  2144                                  		; 24/12/2022
  2145                                  		; ds = cs
  2146                                  		;;mov	byte [cs:EndOfFile], NOT_END_OF_FILE ; ~END_OF_FILE
  2147                                  		;mov	byte [cs:EndOfFile], 0	; Assume not last cluster
  2148                                  		mov	byte [EndOfFile], 0	; Assume not last cluster
  2149                                  GotClusterDone:
  2150                                  		pop	es
  2151                                  		; 06/10/2023
  2152                                  		; 24/12/2022
  2153                                  ;EndRead:
  2154                                  		retn
  2155                                  %endif
  2156                                  
  2157                                  ; GetFatSector
  2158                                  ; ---------------------------------------------------------------------------
  2159                                  ;function: find and read the corresponding fat sector into ES:0
  2160                                  ;
  2161                                  ;in). SI = offset value (starting from fat entry 0) of fat entry to find.
  2162                                  ;     ES = fat sector segment
  2163                                  ;     CS:BytesPerSec
  2164                                  ;
  2165                                  ;out). corresponding fat sector read in.
  2166                                  ;      BX = offset value of the corresponding fat entry in the fat sector.
  2167                                  ;      CX destroyed.
  2168                                  ;      zero flag set if the fat entry is splitted, i.e. when 12 bit fat entry
  2169                                  ;      starts at the last byte of the fat sector. in this case, the caller
  2170                                  ;      should save this byte, and read the next fat sector to get the rest
  2171                                  ;      of the fat entry value. (this will only happen with the 12 bit fat).
  2172                                  ;
  2173                                  ; ---------------------------------------------------------------------------
  2174                                  
  2175                                  ; 09/12/2023
  2176                                  ; 06/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  2177                                  ; (PCDOS 7.1 IBMBIO.COM - MSLOAD:054Ch)
  2178                                  
  2179                                  		; 24/12/2022
  2180                                  		; 22/12/2022
  2181                                  GetFatSector:
  2182                                  		;push	ax	; 06/10/2023
  2183 000003D6 56                      		push	si
  2184 000003D7 57                      		push	di		; di:si = byte offset in (entire) FAT
  2185                                  		;;;
  2186                                  		; 06/10/2023
  2187 000003D8 89F8                    		mov	ax, di		; 32 bit division (dx:ax/512)
  2188 000003DA 8B0E[1B00]              		mov     cx, [BytesPerSec]
  2189 000003DE 31D2                    		xor	dx, dx
  2190 000003E0 F7F1                    		div	cx
  2191 000003E2 89C3                    		mov	bx, ax
  2192                                  		;;;
  2193 000003E4 89F0                    		mov	ax, si
  2194                                  		; 24/12/2022
  2195                                  		; ds = cs
  2196                                  		;mov	cx, [cs:BytesPerSec]
  2197                                  		; 06/10/2023
  2198 000003E6 F7F1                    		div	cx			; AX = Sector number, DX = Offset
  2199                                  		;div	word [BytesPerSec]
  2200                                  			; dx = byte offset in the FAT sector
  2201                                  			; ax = low word of the FAT sector number
  2202                                  			; bx = high word of the FAT sector number  
  2203                                  		; 06/10/2023
  2204 000003E8 3B1E[0F00]              		cmp	bx, [LastFatSectorH]  ; FAT32 (32 bit cluster numbers)
  2205 000003EC 7506                    		jne	short not_same_fat_sector
  2206 000003EE 3B06[0D00]              		cmp	ax, [LastFatSectorL]
  2207                                  		;cmp	ax, [LastFatSector]
  2208                                  		;;cmp	ax, [cs:LastFatSector]	; The same fat sector?
  2209 000003F2 742D                    		je	short SplitChk		; Don't need to read it again.
  2210                                  not_same_fat_sector:
  2211                                  		; 06/10/2023
  2212 000003F4 A3[0D00]                		mov	[LastFatSectorL], ax
  2213 000003F7 891E[0F00]              		mov	[LastFatSectorH], bx
  2214                                  		;
  2215                                  		;mov	[LastFatSector], ax
  2216                                  		;;mov	[cs:LastFatSector], ax
  2217                                  		; 06/10/2023
  2218 000003FB 51                      		push	cx ; ** ; bytes per sector
  2219                                  		;
  2220 000003FC 52                      		push	dx ; *
  2221                                  		; 24/12/2022
  2222                                  		;xor	dx, dx
  2223                                  		; 06/10/2023
  2224 000003FD 89DA                    		mov	dx, bx
  2225                                  		;
  2226                                  		;add	ax, [cs:HiddenSectorsL]
  2227                                  		;adc	dx, [cs:HiddenSectorsH]
  2228                                  		;add	ax, [cs:ReservSectors]
  2229                                  		;adc	dx, 0
  2230                                  		; 24/12/2022
  2231                                  		; ds = cs
  2232                                  		; 06/10/2023 - Retro DOS v5.0 (PCDOS 7.1 IBVBIO.COM)
  2233                                  		;add	ax, [FatStartSecL]
  2234                                  		;adc	dx, [FatStartSecH]
  2235                                  		; 09/12/2023
  2236 000003FF 31FF                    		xor	di, di ; 0
  2237 00000401 0306[2900]              		add     ax, [HiddenSectorsL]
  2238 00000405 1316[2B00]              		adc	dx, [HiddenSectorsH]
  2239 00000409 0306[1F00]              		add	ax, [ReservSectors]
  2240                                  		;adc	dx, 0
  2241                                  		; 09/12/2023
  2242 0000040D 11FA                    		adc	dx, di ; 0
  2243                                  
  2244 0000040F A3[0700]                		mov	[StartSecL], ax
  2245 00000412 8916[0900]              		mov	[StartSecH], dx		; Set up for ReadSectors
  2246                                  		;mov	[cs:StartSecL], ax
  2247                                  		;mov	[cs:StartSecH], dx	; Set up for ReadSectors
  2248                                  		
  2249 00000416 C706[1100]0100          		mov	word [SectorCount], 1 ; 1 sector
  2250                                  		;mov	word [cs:SectorCount], 1 ; 1 sector
  2251                                  		; 06/10/2023
  2252                                  		; di = 0
  2253                                  		;xor	di, di ; 0
  2254                                  		; es:di = FATSEGMENT:0000h
  2255 0000041C E827FE                  		call	ReadSectors
  2256 0000041F 5A                      		pop	dx ; *
  2257                                  		; 06/10/2023
  2258                                  		;mov	cx, [BytesPerSec]
  2259 00000420 59                      		pop	cx ; **
  2260                                  		; 24/12/2022
  2261                                  		;mov	cx, [cs:BytesPerSec]
  2262                                  SplitChk:
  2263                                  		; 06/10/2023
  2264                                  		; cx = bytes per sector
  2265                                  		; 24/12/2022
  2266                                  		;mov	cx, [BytesPerSec]
  2267 00000421 49                      		dec	cx			; CX = SECTOR SIZE - 1
  2268 00000422 39CA                    		cmp	dx, cx			; If last byte of sector, splitted entry.
  2269 00000424 89D3                    		mov	bx, dx			; set bx to dx
  2270 00000426 5F                      		pop	di
  2271 00000427 5E                      		pop	si
  2272                                  		;pop	ax	; 06/10/2023
  2273                                  EndWrite:		; 10/12/2022
  2274 00000428 C3                      		retn
  2275                                  
  2276                                  ; ---------------------------------------------------------------------------
  2277                                  
  2278                                  ; 05/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  2279                                  %if 0
  2280                                  
  2281                                  ErrorOut:
  2282                                  		; 24/12/2022
  2283                                  		; ds = cs
  2284                                  		;push	cs
  2285                                  		;pop	ds
  2286                                  		
  2287                                  		mov	si, NonSystemDiskMsg ; "\r\nNon-System disk or disk error\r\nRe"...
  2288                                  		call	WriteTTY
  2289                                  
  2290                                  		; Wait for a keypress on the keyboard.
  2291                                  		; Use the bios keyboard interrupt.
  2292                                  
  2293                                  		xor	ah, ah
  2294                                  		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  2295                                  					; Return: AH = scan code, AL = character
  2296                                  
  2297                                  		; We have to restore the address of the original rom disk
  2298                                  		; parameter table to the location at [0:DskAddr]. The address
  2299                                  		; of this original table has been saved previously in
  2300                                  		; 0:OrgDasdPtr and 0:OrgDasdPtr+2. After this table address
  2301                                  		; has been restored we can reboot by invoking the bootstrap
  2302                                  		; loader bios interrupt.
  2303                                  
  2304                                  		; 23/12/2022
  2305                                  		;xor	bx, bx
  2306                                  		;mov	ds, bx
  2307                                  		;les	bx, [OrgDasdPtr] ; Wrong DS segment !
  2308                                  					 ; (Erdogan Tan, 23/12/2022)
  2309                                  		les	bx, [OrgDasdPtr] ; Correct DS segment = CS
  2310                                  		
  2311                                  		; 23/12/2022
  2312                                  		push	ss ; 0
  2313                                  		pop	ds
  2314                                  		; ds = 0
  2315                                  
  2316                                  		mov	si, DskAddr	; (Int 1Eh)
  2317                                  		mov	[si], bx	; restore offset
  2318                                  		mov	[si+2], es	; restore segment
  2319                                  		int	19h		; reboot
  2320                                  
  2321                                  ; =============== S U B	R O U T	I N E =======================================
  2322                                  
  2323                                  ; WriteTTY
  2324                                  ; ---------------------------------------------------------------------------
  2325                                  ; in) DS:si -> asciiz string.
  2326                                  ;
  2327                                  ; WriteTTY the character in al to the screen.
  2328                                  ; use video service 'write teletype to active page' (ROM_TTY)
  2329                                  ; use normal character attribute
  2330                                  ; ---------------------------------------------------------------------------
  2331                                  
  2332                                  WriteTTY:
  2333                                  		lodsb
  2334                                  		or	al, al
  2335                                  		jz	short EndWrite
  2336                                  		;mov	AH, ROM_TTY	; 09/12/2022
  2337                                  		mov	ah, 0Eh
  2338                                  		mov	bl, 7	; "normal" attribute
  2339                                  		int	10h	; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
  2340                                  				; AL = character, BH = display page (alpha modes)
  2341                                  				; BL = foreground color	(graphics modes)
  2342                                  		jmp	short WriteTTY
  2343                                  ; ---------------------------------------------------------------------------
  2344                                  
  2345                                  ; 10/12/2022
  2346                                  ;EndWrite:
  2347                                  ;		retn
  2348                                  
  2349                                  %endif	; 05/10/2023
  2350                                  
  2351                                  ; ---------------------------------------------------------------------------
  2352                                  
  2353                                  ; 06/10/2023 - Retro DOS v5.0 IBMBIO.COM (IO.SYS) ((Modified PCDOS 7.1))
  2354                                  ; (PCDOS 7.1 IBMBIO.COM - MSLOAD:054Ch)
  2355                                  
  2356                                  ; 09/12/2022
  2357                                  ;include msbio.cl1
  2358                                  
  2359                                  		; 22/12/2022
  2360                                  		; 20/12/2022
  2361                                  		; 18/12/2022
  2362                                  		;db 0	; (word alignment)
  2363                                  NonSystemDiskMsg:
  2364 00000429 0D0A                    		db 0Dh,0Ah		; ...
  2365 0000042B 4E6F6E2D5379737465-     		db 'Non-System disk or disk error',0Dh,0Ah
  2365 00000434 6D206469736B206F72-
  2365 0000043D 206469736B20657272-
  2365 00000446 6F720D0A           
  2366 0000044A 5265706C6163652061-     		db 'Replace and press any key when ready',0Dh,0Ah,0
  2366 00000453 6E6420707265737320-
  2366 0000045C 616E79206B65792077-
  2366 00000465 68656E207265616479-
  2366 0000046E 0D0A00             
  2367                                  ; 25/12/2022
  2368 00000471 90<rep Fh>              align 16
  2369                                  
  2370                                  EndOfLoader:	; (PCDOS 7.1 IBMBIO.COM - MSLOAD:05F0h) ; 06/10/2023
  2371                                  		;dw 01A1h	; 10/12/2022
  2372                                  
  2373                                  ; ---------------------------------------------------------------------------
  2374                                  
  2375                                  ;=============================================================================
  2376                                  ; DOS BIOS (IO.SYS) DATA SEGMENT 
  2377                                  ;=============================================================================
  2378                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  2379                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
  2380                                  ; 02/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
  2381                                  
  2382                                  section .BIOSDATA vstart=0
  2383                                  
  2384                                  ;--- DOSBIOS data segment ----------------------------------------------------
  2385                                  ;-----------------------------------------------------------------------------
  2386                                  
  2387                                  ;Bios_Data segment
  2388                                  
  2389                                  BData_start:
  2390 00000000 E9931B                  hdrv_pat:	jmp	init		; MSBIO1.ASM, MSSBDATA.INC
  2391                                  ; ----------------------------------------------------------------------------
  2392                                  
  2393 00000003 0000                    DosDataSg:	dw 0
  2394                                  
  2395                                  ; DOS's int 2f handler will exit via a jump through here.
  2396                                  ; This is how the BIOS hooks int2f
  2397                                  
  2398                                  ;BIOSDATA:0005h: ; 10/05/2023 (Note the 'bios_i2f equ 5' in 'msdos6.s')
  2399                                  			
  2400 00000005 EA                      bios_i2f:	db 0EAh			; far jump to int_2f (segment may not be at 70h)
  2401                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2402                                  		; PCDOS 7.1 IBMBIO.COM - BIODATA:0006h
  2403                                  		;dw int_2f
  2404                                  		;dw 70h			; BIOSDATA segment (KERNEL_SEGMENT)
  2405 00000006 [2D16]                  		dw i2f_handler
  2406                                  bios_i2f_seg:	; 10/08/2023
  2407 00000008 2D03                    		dw DOSBIOCODESEG	; 02CCh for MSDOS 6.21 IO.SYS (25Ch+070h)
  2408                                  					; 0364h PCDOS 7.1 IBMBIO.COM  (2F4h+070h)
  2409                                  
  2410 0000000A 0000                    romstartaddr:	dw 0			; The start address for the romfind routines
  2411                                  					; This is to maintain binary compatibility
  2412                                  					; with DISK based DOS 5.0
  2413                                  
  2414                                  ; This is a byte used for special key handling in the resident
  2415                                  ; console device driver. It must be here so that it can be included
  2416                                  ; in the WIN386 instance table (in INC\LMSTUB.ASM).
  2417                                  
  2418 0000000C 00                      altah:		db 0			; special key handling
  2419                                  			
  2420 0000000D 00                      inHMA:		db 0			; flag indicates we're running from HMA
  2421 0000000E 00000000                xms:		dd 0			; entry point to xms if above is true
  2422                                  
  2423                                  ; PTRSAV - pointer save
  2424                                  ;
  2425                                  ; This variable holds the pointer to the Request Header passed by a program
  2426                                  ; wishing to use a device driver. When the strategy routine is called it 
  2427                                  ; puts the address of the Request header in this variable and returns.
  2428                                  		
  2429 00000012 00000000                ptrsav:		dd 0			
  2430                                  auxbuf:		;db 4 dup(0)		; set of 1 byte buffers for com 1,2,3, and 4
  2431 00000016 00000000                		db 0, 0, 0, 0 ; 19/10/2022
  2432 0000001A 0000                    zeroseg:	dw 0			; easy way to load segment registers with zero
  2433 0000001C 0000                    i13_ds:		dw 0			; ds register for int13 call through
  2434 0000001E 0000                    prevoper:	dw 0			; holds int 13 request (i.e. register ax).
  2435 00000020 00                      number_of_sec:	db 0			; holds number of secs. to read on an ecc error
  2436 00000021 0000                    auxnum:		dw 0			; which aux device was requested
  2437                                  
  2438                                  ;-----------------------------------------------------------------------------
  2439                                  
  2440                                  res_dev_list:
  2441                                  
  2442                                  ; Device Header for the CON Device Driver
  2443                                  
  2444                                  CONHeader:				; HEADER FOR DEVICE "CON"
  2445 00000023 [3500]                  		dw auxdev2
  2446 00000025 7000                    		dw 70h	
  2447 00000027 1380                    word_727:	dw 8013h
  2448 00000029 [1506]                  		dw strategy
  2449 0000002B [2006]                  		dw con_entry
  2450 0000002D 434F4E2020202020        aCon:		db 'CON     '
  2451 00000035 [4700]                  auxdev2:	dw prndev2		; HEADER FOR DEVICE "AUX"
  2452 00000037 7000                    		dw 70h
  2453 00000039 0080                    		dw 8000h
  2454 0000003B [1506]                  		dw strategy
  2455 0000003D [4106]                  		dw aux0_entry
  2456 0000003F 4155582020202020        aAux:		db 'AUX     '
  2457 00000047 [5900]                  prndev2:	dw timdev		; HEADER FOR DEVICE "PRN"
  2458 00000049 7000                    		dw 70h
  2459 0000004B C0A0                    word_74B:	dw 0A0C0h
  2460 0000004D [1506]                  		dw strategy
  2461 0000004F [2506]                  		dw prn0_entry
  2462 00000051 50524E2020202020        aPrn:		db 'PRN     '		; HEADER FOR DEVICE "CLOCK$"
  2463 00000059 [6B00]                  timdev:		dw dskdev
  2464 0000005B 7000                    		dw 70h
  2465 0000005D 0880                    		dw 8008h
  2466 0000005F [1506]                  		dw strategy
  2467 00000061 [5906]                  		dw tim_entry
  2468 00000063 434C4F434B242020        aClock:		db 'CLOCK$  '
  2469 0000006B [7B00]                  dskdev:		dw com1dev		; HEADER FOR DISK DEVICES
  2470 0000006D 7000                    		dw 70h
  2471                                  		;dw 8C2h
  2472                                  		; 02/10/2023 - Retro DOS v5.0
  2473 0000006F C248                    		dw 48C2h		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:006Fh
  2474                                  		;dw offset strategy
  2475                                  		;dw offset dsk_entry
  2476                                  		; 19/10/2022
  2477 00000071 [1506]                  		dw strategy
  2478 00000073 [5E06]                  		dw dsk_entry
  2479                                  
  2480                                  ; maximum number of drives
  2481                                  
  2482 00000075 04                      drvmax:		db 4
  2483 00000076 FE                      step_drv:	db 0FEh	 ; -2		; last drive accessed
  2484 00000077 00                      fhave96:	db 0			; flag to indicate presence of
  2485                                  					; 96tpi support		
  2486 00000078 00                      single:		db 0			; used to detect single drive systems
  2487 00000079 00                      fhavek09:	db 0			; indicates if this is a k09 or not
  2488                                  					; used by console driver.
  2489 0000007A 00                      fsetowner:	db 0			; = 1 if we are setting the owner of a
  2490                                  					; drive. (examined by checksingle).
  2491                                  		
  2492 0000007B [8D00]                  com1dev:	dw lpt1dev		; Device Header for device "COM1"
  2493 0000007D 7000                    		dw 70h
  2494 0000007F 0080                    		dw 8000h
  2495 00000081 [1506]                  		dw strategy
  2496 00000083 [4106]                  		dw aux0_entry
  2497 00000085 434F4D3120202020        aCom1:		db 'COM1    '
  2498 0000008D [9F00]                  lpt1dev:	dw lpt2dev		; Device Header for device LPT1
  2499 0000008F 7000                    		dw 70h
  2500 00000091 C0A0                    		dw 0A0C0h
  2501 00000093 [1506]                  		dw strategy
  2502 00000095 [2C06]                  		dw prn1_entry
  2503 00000097 4C50543120202020        aLpt1:		db 'LPT1    '
  2504 0000009F [B800]                  lpt2dev:	dw lpt3dev		; Device Header for device LPT2
  2505 000000A1 7000                    		dw 70h
  2506 000000A3 C0A0                    		dw 0A0C0h
  2507 000000A5 [1506]                  		dw strategy
  2508 000000A7 [3306]                  		dw prn2_entry
  2509 000000A9 4C5054322020202000-     aLpt2:		db 'LPT2    ',0,0,0
  2509 000000B2 0000               
  2510                                  
  2511                                  ;M058; Start of changes
  2512                                  ; Orig13 needs to be at offset 0B4h for the CMS floppy driver to work.
  2513                                  ;These guys patch Orig13 with their own int 13h hook and so this offset
  2514                                  ;cannot change for them to work. Even ProComm does this.
  2515                                  
  2516 000000B4 00000000                Orig13:		dd 0			; to make Orig13 offset 0B4h
  2517                                  
  2518 000000B8 [CA00]                  lpt3dev:	dw com2dev		; Device Header for device LPT3	
  2519 000000BA 7000                    		dw 70h
  2520 000000BC C0A0                    		dw 0A0C0h
  2521 000000BE [1506]                  		dw strategy
  2522 000000C0 [3A06]                  		dw prn3_entry
  2523 000000C2 4C50543320202020        aLpt3:		db 'LPT3    '
  2524 000000CA [DC00]                  com2dev:	dw com3dev		; Device Header for device "COM2"
  2525 000000CC 7000                    		dw 70h
  2526 000000CE 0080                    		dw 8000h
  2527 000000D0 [1506]                  		dw strategy
  2528 000000D2 [4706]                  		dw aux1_entry
  2529                                  		; 19/10/2022
  2530 000000D4 434F4D3220202020        aCom2:		db 'COM2    '
  2531                                  com3dev:	;dw offset com4dev	; Device Header for device "COM3"
  2532 000000DC [EE00]                  		dw com4dev
  2533 000000DE 7000                    		dw 70h
  2534 000000E0 0080                    		dw 8000h
  2535                                  		;dw offset strategy
  2536                                  		;dw offset aux2_entry
  2537 000000E2 [1506]                  		dw strategy
  2538 000000E4 [4D06]                  		dw aux2_entry	
  2539 000000E6 434F4D3320202020        aCom3:		db 'COM3    '
  2540 000000EE FFFF                    com4dev:	dw 0FFFFh		; Device Header for device "COM4"
  2541 000000F0 7000                    		dw 70h
  2542 000000F2 0080                    		dw 8000h
  2543 000000F4 [1506]                  		dw strategy
  2544 000000F6 [5306]                  		dw aux3_entry
  2545 000000F8 434F4D3420202020        		db 'COM4    '
  2546                                  
  2547                                  ;-----------------------------------------------------------------------------
  2548                                  
  2549 00000100 10                      RomVectors:	db 10h			
  2550 00000101 00000000                Old10:		dd 0
  2551 00000105 13                      		db 13h
  2552 00000106 00000000                Old13:		dd 0			
  2553 0000010A 15                      		db 15h
  2554 0000010B 00000000                Old15:		dd 0			
  2555 0000010F 19                      		db 19h
  2556 00000110 00000000                Old19:		dd 0
  2557 00000114 1B                      		db 1Bh
  2558 00000115 00000000                Old1B:		dd 0
  2559                                  
  2560                                  ;EndRomVectors	equ $
  2561                                  
  2562                                  ;NUMROMVECTORS	equ ((EndRomVectors - RomVectors)/5)
  2563                                  
  2564                                  ;-----------------------------------------------------------------------------
  2565                                  
  2566 00000119 [5203]                  start_bds:	dw bds1			; Start	of linked list of BDS's
  2567 0000011B 7000                    		dw 70h			; KERNEL_SEGMENT
  2568                                  
  2569                                  ; (MSDOS 3.3) NOTE:
  2570                                  ; Some floppy drives do not have changeline support. The result is a
  2571                                  ; large amount of inefficiency in the code. A media-check always returns
  2572                                  ; "I don`t know". This cause DOS to reread the FAT on every access and
  2573                                  ; always discard any cached data.
  2574                                  ;    We get around this inefficiency by implementing a "Logical Door Latch".
  2575                                  ; The following three items are used to do this. The logical door latch is
  2576                                  ; based on the premise that it is not physically possible to change floppy
  2577                                  ; disks in a drive in under two seconds (most people take about 10). The
  2578                                  ; logical door latch is implemented by saving the time of the last successful
  2579                                  ; disk operation (in the value TIM_DRV). When a new request is made the
  2580                                  ; current time is compared to the saved time. If less than two seconds have
  2581                                  ; passed then the value "No Change" is returned. If more than two seconds
  2582                                  ; have passed the value "Don't Know" is returned.
  2583                                  ;    There is one complecation to this algorithm. Some programs change the
  2584                                  ; value of the timer. In this unfortunate case we have an invalid timer.
  2585                                  ; This possibility is detected by counting the number of disk operations
  2586                                  ; which occur without any time passing. If this count exceeds the value of
  2587                                  ; "AccessMax" we assume the counter is invalid and always return "Don't
  2588                                  ; Know". The variable "AccessCount" is used to keep track of the number
  2589                                  ; of disk operation which occur without the time changing.
  2590                                  
  2591 0000011D 00                      accesscount:	db 0			
  2592 0000011E FF                      tim_drv:	db 0FFh			
  2593 0000011F 00                      medbyt:		db 0
  2594                                  wrtverify:	; 15/10/2022			
  2595 00000120 02                      rflag:		db 2			; 2 for	read, 3	for write
  2596 00000121 00                      verify:		db 0			; 1 if verify after write
  2597 00000122 0000                    seccnt:		dw 0			
  2598 00000124 00                      		db 0			; -- pad where hardnum was
  2599 00000125 01                      dsktnum:	db 1			; number of diskette drives
  2600                                  
  2601                                  ; (MSDOS 3.3) NOTE:
  2602                                  ; Some of the older versions of the IBM rom-bios always assumed a seek would
  2603                                  ; have to be made to read the diskette. Consequently a large head settle
  2604                                  ; time was always used in the I/O operations. To get around this problem
  2605                                  ; we need to continually adjust the head settle time. The following
  2606                                  ; algorithm is used:
  2607                                  ;
  2608                                  ;   Get the current head settle value.
  2609                                  ;   If it is 1, then
  2610                                  ;	set slow = 15
  2611                                  ;   else
  2612                                  ;	set slow = value
  2613                                  ;   ...
  2614                                  ;   if we are seeking and writing then
  2615                                  ;	use slow
  2616                                  ;   else
  2617                                  ;	use fast
  2618                                  ;   ...
  2619                                  ;   restore current head settle value
  2620                                  
  2621 00000126 00                      motorstartup:	db 0			; value from table
  2622 00000127 00                      settlecurrent:	db 0			; value from table
  2623 00000128 00                      settleslow:	db 0			; slow settle value
  2624 00000129 00                      nextspeed:	db 0			; value	of speed to be used
  2625 0000012A 00                      save_head_sttl:	db 0			; used by read_sector routine
  2626 0000012B 00                      save_eot:	db 0			; saved	eot from the default DPT
  2627 0000012C 09                      eot:		db 9			
  2628 0000012D 00000000                dpt:		dd 0			; pointer to Disk Parameter Table
  2629 00000131 00                      cursec:		db 0			; current sector
  2630 00000132 00                      curhd:		db 0			; current head
  2631 00000133 0000                    curtrk:		dw 0			; current track
  2632 00000135 0000                    spsav:		dw 0			; save the stack pointer
  2633 00000137 08                      formt_eot:	db 8			; eot used for format
  2634 00000138 00                      hdnum:		db 0			; head number
  2635 00000139 0000                    trknum:		dw 0			; track	being manipulated
  2636 0000013B 50                      gap_patch:	db 50h			; format gap patched into dpt
  2637                                  
  2638                                  ;-----------------------------------------------------------------------------
  2639                                  
  2640                                  ; disk errors returned from the IBM rom
  2641                                  
  2642 0000013C CC                      errin:		db 0CCh			; write fault (hard disk)
  2643 0000013D 80                      		db 80h			; write fault (hard disk)
  2644 0000013E 40                      		db 40h			; seek failed
  2645 0000013F 10                      		db 10h			; uncorrectable CRC or ECC error on read
  2646 00000140 08                      		db 8			; dma overrun
  2647 00000141 06                      		db 6			; disk changed (floppy)
  2648 00000142 04                      		db 4			; sector not found/read error
  2649 00000143 03                      		db 3			; disk write-protected
  2650                                  		; 02/10/2023 - Retro DOS 5.0 (PCDOS 7.1 IBMBIO.COM)
  2651 00000144 01                      		db 1			; invalid function in AH or invalid parameter
  2652 00000145 B2                      		db 0B2h			; volume not removable	
  2653                                  		;
  2654 00000146 00                      lsterr:		db 0			; all other errors
  2655                                  
  2656                                  ; returned error codes corresponding to above
  2657                                  
  2658 00000147 0A                      errout:		db 10			; write	fault error
  2659 00000148 02                      		db 2			; no response (timeout)
  2660 00000149 06                      		db 6			; seek failure
  2661 0000014A 04                      		db 4			; bad crc
  2662 0000014B 04                      		db 4			; dma overrun
  2663 0000014C 0F                      		db 15			; invalid media	change
  2664 0000014D 08                      		db 8			; sector not found
  2665 0000014E 00                      		db 0			; write	attempt	to write-protect disk
  2666                                  		; 02/10/2023
  2667 0000014F 03                      		db 3			; unknown command error
  2668 00000150 03                      		db 3			; unknown command error
  2669                                  		;
  2670 00000151 0C                      		db 12			; general error
  2671                                  
  2672                                  ;-----------------------------------------------------------------------------
  2673                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0152h
  2674                                  
  2675                                  ; 02/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  2676                                  %if 1
  2677                                  disksector:	;times 174 db 0
  2678                                  NUM174 equ 512-$
  2679 00000152 00<rep AEh>             		times NUM174 db 0
  2680                                  JB_sign	:	;dw 424Ah		; 'BJ' (nasm) ; 'JB' (masm)
  2681 00000200 4A                      		dec	dx
  2682 00000201 42                      		inc	dx	
  2683 00000202 E9FBFD                  		jmp	BData_start	; db 0E9h, 0FBh, 0FDh
  2684                                  
  2685 00000205 402349424D3A31322E-     IBMBIOCOM$:	db '@#IBM:12.01.2003.build_1.32#@ IBMBIO.COM(USA)',0
  2685 0000020E 30312E323030332E62-
  2685 00000217 75696C645F312E3332-
  2685 00000220 23402049424D42494F-
  2685 00000229 2E434F4D2855534129-
  2685 00000232 00                 
  2686                                  		
  2687                                  		;times 287 db 0
  2688 00000233 00<rep 11Fh>            		times (disksector+512-$) db 0  ; 287
  2689                                  %endif
  2690                                  
  2691                                  ;-----------------------------------------------------------------------------
  2692                                  
  2693                                  ; 30/12/2018 - Retro DOS v4.0
  2694                                  
  2695                                  ; read in boot sector here, read done in readboot.
  2696                                  ; also read sector for dma check for hard disk.
  2697                                  ;
  2698                                  ; This buffer is word aligned because certain AMI BIOSs have a bug
  2699                                  ; in them which causes the byte after the buffer to be trashed
  2700                                  ; on floppy reads to odd-byte boundaries. Although no general effort 
  2701                                  ; is made to enforce this in the bigger picture, this one small sacrifice
  2702                                  ; makes that system more-or-less work.
  2703                                  
  2704                                  ; 02/10/2023
  2705                                  %if 0
  2706                                  
  2707                                  disksector:	;db 512 dup(0)		; read in boot sector here
  2708                                  		; 19/10/2022
  2709                                  		times 512 db 0
  2710                                  %endif
  2711                                  
  2712                                  ;-----------------------------------------------------------------------------
  2713                                  
  2714                                  ; 02/10/2023 - Retro DOS v5.0
  2715                                  ; 30/12/2018 - Retro DOS v4.0
  2716                                  ;-----------------------------------------------------------------------------
  2717                                  ; 25/05/2018 (04/04/2018)
  2718                                  ;*****************************************************************************
  2719                                  ;	"bds" contains information for each drive in the system.
  2720                                  ;	various values are patched whenever actions are performed.
  2721                                  ;	sectors/alloc. unit in bpb initially set to -1 to signify that
  2722                                  ;	the bpb has not been filled. link also set to -1 to signify end
  2723                                  ;	of list. # of cylinders in maxparms initialized to -1 to indicate
  2724                                  ;	that the parameters have not been set.
  2725                                  
  2726                                  bds1:		;dw offset bds2
  2727 00000352 [E803]                  		dw bds2	; 19/10/2022
  2728 00000354 7000                    		dw 70h			; dword	link to	next structure
  2729 00000356 00                      		db 0			; int 13h drive	number
  2730 00000357 00                      		db 0			; logical drive	letter
  2731 00000358 0002                    fdrive1:	dw 512			
  2732                                  					; physical sector size in bytes
  2733 0000035A FF                      		db 0FFh			; sectors/allocation unit
  2734 0000035B 0100                    		dw 1			; reserved sectors for dos
  2735 0000035D 02                      		db 2			; no of	file allocation	tables
  2736 0000035E 4000                    		dw 64			; number of root directory entries
  2737 00000360 6801                    		dw 360			; number sectors (at 512 bytes each)
  2738 00000362 00                      		db 0			; media	descriptor, initially 0
  2739 00000363 0200                    		dw 2			; number of fat	sectors
  2740 00000365 0900                    		dw 9			; sector limit (sectors	per track)
  2741 00000367 0100                    		dw 1			; head limit (number of	heads -	1)
  2742                                  		;
  2743                                  		; 02/10/2023
  2744                                  		; MSDOS 5.0-6.22 (& PCDOS 7.0)
  2745                                  		;dw 0			; hidden sector	count (low word)
  2746                                  		;dw 0			; hidden sector	(high)
  2747                                  		;dw 0			; number sectors (low)
  2748                                  		;dw 0			; number sectors (high)
  2749                                  		;db 0			; true => large	fats
  2750                                  		; 02/10/2023
  2751                                  		; PCDOS 7.1 (FAT32 support)
  2752 00000369 00000000                		dd 0			; hidden sector count
  2753 0000036D 00000000                		dd 0			; number of sectors (32 bit)
  2754 00000371 00000000                		dd 0			; BPB_FATSz32 ; FAT32 FAT size in sectors ; 4 bytes
  2755                                  					;   BS_DrvNum ; FAT INT 13h drive number ; 1 byte
  2756                                  					;   BS_Reserved1 ; FAT reserved byte = 0 ; 1 byte
  2757                                  					;   BS_BootSig ; FAT Extended boot signature = 29h ; 1 byte
  2758                                  					;   BS_VolID ; FAT Volume serial number ; 4 bytes
  2759 00000375 0000                    		dw 0			; BPB_ExtFlags ; FAT32 Extended Flags
  2760 00000377 0000                    		dw 0			; BPB_FSVer ; FAT32 fs/volume version
  2761 00000379 00000000                		dd 0			; BPB_RootClus ; FAT32 root directory's first cluster number
  2762 0000037D FFFF                    		dw 0FFFFh		; BPB_FSInfo ; FAT32 FSINFO sector number = -1 (initial)
  2763 0000037F FFFF                    		dw 0FFFFh		; BPB_BkBootSec ; FAT32 backup boot sector number = -1 (initial)
  2764 00000381 00<rep Ch>              		times 12 db 0		; BPB_Reserved  ; FAT32 reserved field = 0, 12 bytes
  2765 0000038D 00                      		db 0			; true => large	fats
  2766                                  		;
  2767 0000038E 0000                    		dw 0			; open ref. count
  2768 00000390 03                      		db 3			; form factor
  2769 00000391 2000                    		dw 20h			; various flags
  2770 00000393 2800                    		dw 40			; number of cylinders
  2771 00000395 0002                    recommended_bps: dw 512			; recommended bps for this drive
  2772 00000397 01                      		db 1
  2773 00000398 0100                    		dw 1
  2774 0000039A 02                      		db 2
  2775 0000039B E000                    		dw 224			; number of root directory entries
  2776 0000039D 6801                    		dw 360
  2777 0000039F F0                      		db 0F0h			; media	descriptor, initially 0F0h
  2778 000003A0 0200                    		dw 2
  2779 000003A2 0900                    		dw 9
  2780 000003A4 0200                    		dw 2
  2781                                  		;
  2782                                  		; 02/10/2023
  2783                                  		;dw 0
  2784                                  		;dw 0
  2785                                  		;dw 0
  2786                                  		;dw 0
  2787                                  		;;db 6 dup(0)
  2788                                  		;times 6 db 0		; 19/10/2022
  2789 000003A6 00000000                		dd 0
  2790 000003AA 00000000                		dd 0
  2791 000003AE 00000000                		dd 0
  2792 000003B2 0000                    		dw 0
  2793 000003B4 0000                    		dw 0
  2794 000003B6 00000000                		dd 0
  2795 000003BA FFFF                    		dw 0FFFFh
  2796 000003BC FFFF                    		dw 0FFFFh	
  2797                                  		;db 12 dup(0)
  2798 000003BE 00<rep Ch>              		times 12 db 0		; 02/10/2023
  2799                                  		;
  2800 000003CA FF                      		db 0FFh			; last track accessed on this drive
  2801 000003CB FFFF                    		dw 0FFFFh		; keep these two contiguous (?)
  2802 000003CD FFFF                    		dw 0FFFFh
  2803 000003CF 4E4F204E414D452020-     		db 'NO NAME    ',0      ; volume id for this disk
  2803 000003D8 202000             
  2804 000003DB 00000000                		dd 0			; current volume serial	from boot record
  2805 000003DF 464154313220202000      		db 'FAT12   ',0         ; current file system id from boot record
  2806                                  ; ----
  2807                                  
  2808                                  ; 02/10/2023
  2809                                  ; PCDOS 7.1
  2810                                  %if 1
  2811                                  
  2812                                  bds2:		; 02/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  2813 000003E8 FFFF                    		dw 0FFFFh ; -1
  2814 000003EA 7000                    		dw 70h
  2815 000003EC 00                      		db 0
  2816 000003ED 00                      		db 0
  2817 000003EE 0002                    fdrive2:	dw 512
  2818 000003F0 FF                      		db 0FFh
  2819 000003F1 0100                    		dw 1
  2820 000003F3 02                      		db 2
  2821 000003F4 4000                    		dw 64
  2822 000003F6 6801                    		dw 360
  2823 000003F8 00                      		db 0
  2824 000003F9 0200                    		dw 2
  2825 000003FB 0900                    		dw 9
  2826 000003FD 0100                    		dw 1
  2827 000003FF 00000000<rep 5h>        		times 5 dd 0
  2828 00000413 FFFFFFFF                		dd 0FFFFFFFFh
  2829 00000417 00000000<rep 3h>        		times 3 dd 0
  2830 00000423 00                      		db 0
  2831 00000424 0000                    		dw 0
  2832 00000426 03                      		db 3
  2833 00000427 2000                    		dw 20h
  2834 00000429 2800                    		dw 40
  2835                                  recbpb2:
  2836 0000042B 0002                    		dw 512
  2837 0000042D 01                                      db 1
  2838 0000042E 0100                                    dw 1
  2839 00000430 02                                      db 2
  2840 00000431 E000                                    dw 224
  2841 00000433 6801                                    dw 360
  2842 00000435 F0                                      db 0F0h
  2843 00000436 0200                                    dw 2
  2844 00000438 0900                                    dw 9
  2845 0000043A 0200                                    dw 2
  2846 0000043C 00000000<rep 5h>        		times 5 dd 0
  2847 00000450 FFFFFFFF                		dd 0FFFFFFFFh
  2848 00000454 00000000<rep 3h>                        times 3 dd 0
  2849 00000460 FF                                      db 0FFh
  2850 00000461 FFFFFFFF                                dd 0FFFFFFFFh
  2851 00000465 4E4F204E414D452020-                     db 'NO NAME    ',0
  2851 0000046E 202000             
  2852 00000471 00000000                                dd 0
  2853 00000475 464154313220202000                      db 'FAT12   ',0
  2854                                  %endif
  2855                                  
  2856                                  ; ----
  2857                                  
  2858                                  ; 02/10/2023
  2859                                  ; MSDOS 5.0 - 6.22 (& PCDOS 7.0)
  2860                                  %if 0
  2861                                  
  2862                                  bds2:		dw bds3
  2863                                  		dw 70h
  2864                                  		db 0
  2865                                  		db 0
  2866                                  fdrive2:	dw 512			
  2867                                  		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  2868                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  2869                                  		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  2870                                  		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  2871                                  		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  2872                                  		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  2873                                  		db 31h,	32h, 20h, 20h, 20h, 0
  2874                                  
  2875                                  bds3:		dw bds4
  2876                                  		dw 70h
  2877                                  		db 0
  2878                                  		db 0
  2879                                  fdrive3:	dw 512			
  2880                                  		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  2881                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  2882                                  		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  2883                                  		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  2884                                  		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  2885                                  		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  2886                                  		db 31h,	32h, 20h, 20h, 20h, 0
  2887                                  ; ----
  2888                                  
  2889                                  bds4:		dw 0FFFFh
  2890                                  		dw 70h
  2891                                  		db 0
  2892                                  		db 0
  2893                                  fdrive4:	dw 512			
  2894                                  		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  2895                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  2896                                  		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  2897                                  		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  2898                                  		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  2899                                  		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  2900                                  		db 31h,	32h, 20h, 20h, 20h, 0
  2901                                  
  2902                                  ;-----------------------------------------------------------------------------
  2903                                  
  2904                                  sm92:		db 3			; .spf
  2905                                  		db 9			; .spt
  2906                                  		db 112	; 70h		; .cdire
  2907                                  		dw 1440	; 2*9*80	; .csec
  2908                                  		db 2			; .spau
  2909                                  		db 2			; .chead
  2910                                  
  2911                                  %endif
  2912                                  
  2913 0000047E 00                      keyrd_func:	db 0			
  2914 0000047F 01                      keysts_func:	db 1			
  2915 00000480 00                      printdev:	db 0			; printer device index
  2916                                  
  2917                                  wait_count:	;dw 4 dup(50h)		; retry	counts for printers
  2918 00000481 5000<rep 4h>            		times 4 dw 50h		; 19/10/2022
  2919                                  
  2920 00000489 0000                    daycnt:		dw 0			
  2921 0000048B 00                      t_switch:	db 0			; flag for updating daycnt
  2922 0000048C 00                      havecmosclock:	db 0			
  2923 0000048D 13                      base_century:	db 19			
  2924 0000048E 50                      base_year:	db 80			
  2925                                  
  2926 0000048F 1F                      month_tab:	db 31
  2927 00000490 1C                      february:	db 28 ; 08/08/2023
  2928 00000491 1F1E1F1E1F1F1E1F1E-     		db 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
  2928 0000049A 1F                 
  2929                                  
  2930                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2931                                  %if 0  
  2932                                  bintobcd:	dw bin_to_bcd		; points to bin_to_bcd proc in msinit
  2933                                  		dw 70h ; 17/10/2022	
  2934                                  daycnttoday:	dw daycnt_to_day	; points to daycnt_to_day in msinit
  2935                                  		dw 70h ; 17/10/2022
  2936                                  %endif
  2937                                  
  2938 0000049B 00                      set_id_flag:	db 0			; flag for getbp routine
  2939                                  
  2940                                  ; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  2941                                  ;fat_12_id:	db 'FAT12   ',0         
  2942                                  ;fat_16_id:	db 'FAT16   ',0         
  2943                                  ;vol_no_name:	db 'NO NAME    ',0      
  2944                                  ;temp_h:	dw 0			; temporary for	32 bit calculation
  2945                                  
  2946 0000049C 0000                    start_sec_h:	dw 0			; starting sector number high word
  2947 0000049E 0000                    saved_word:	dw 0			; tempory saving place for a word
  2948 000004A0 0000                    multrk_flag:	dw 0			
  2949 000004A2 00                      ec35flag:	db 0			; flags	for 3.5	inch disk drives
  2950 000004A3 0000                    vretry_cnt:	dw 0			
  2951 000004A5 0000                    soft_ecc_cnt:	dw 0			
  2952 000004A7 00                      multitrk_format_flag: db 0		; multi	track format request flag
  2953 000004A8 0000                    xfer_seg:	dw 0			; temp for transfer segment
  2954                                  
  2955                                  ; variables for msdioctl.asm module
  2956                                  
  2957                                  ; tracktable contains a 4-tuples (c,h,r,n) for each sector in a track
  2958                                  ; c = cylinder number,h = head number,r = sector id,n = bytes per sector
  2959                                  ;	n	bytes per sector
  2960                                  ;      ---	----------------
  2961                                  ;	0	      128
  2962                                  ;	1	      256
  2963                                  ;	2	      512
  2964                                  ;	3	     1024
  2965                                  
  2966                                  ;max_sectors_curr_sup equ 63		; current maximum sec/trk that
  2967                                  ;					; we support (was 40 in dos 3.2)
  2968                                  
  2969 000004AA 2400                    sectorspertrack: dw 36
  2970 000004AC 00000102                tracktable:	db 0, 0, 1, 2
  2971 000004B0 00000202                		db 0, 0, 2, 2
  2972 000004B4 00000302                		db 0, 0, 3, 2
  2973 000004B8 00000402                		db 0, 0, 4, 2
  2974 000004BC 00000502                		db 0, 0, 5, 2
  2975 000004C0 00000602                		db 0, 0, 6, 2
  2976 000004C4 00000702                		db 0, 0, 7, 2
  2977 000004C8 00000802                		db 0, 0, 8, 2
  2978 000004CC 00000902                		db 0, 0, 9, 2
  2979 000004D0 00000A02                		db 0, 0, 10, 2
  2980 000004D4 00000B02                		db 0, 0, 11, 2
  2981 000004D8 00000C02                		db 0, 0, 12, 2
  2982 000004DC 00000D02                		db 0, 0, 13, 2
  2983 000004E0 00000E02                		db 0, 0, 14, 2
  2984 000004E4 00000F02                		db 0, 0, 15, 2
  2985 000004E8 00001002                		db 0, 0, 16, 2
  2986 000004EC 00001102                		db 0, 0, 17, 2
  2987 000004F0 00001202                		db 0, 0, 18, 2
  2988 000004F4 00001302                		db 0, 0, 19, 2
  2989 000004F8 00001402                		db 0, 0, 20, 2
  2990 000004FC 00001502                		db 0, 0, 21, 2
  2991 00000500 00001602                		db 0, 0, 22, 2
  2992 00000504 00001702                		db 0, 0, 23, 2
  2993 00000508 00001802                		db 0, 0, 24, 2
  2994 0000050C 00001902                		db 0, 0, 25, 2
  2995 00000510 00001A02                		db 0, 0, 26, 2
  2996 00000514 00001B02                		db 0, 0, 27, 2
  2997 00000518 00001C02                		db 0, 0, 28, 2
  2998 0000051C 00001D02                		db 0, 0, 29, 2
  2999 00000520 00001E02                		db 0, 0, 30, 2
  3000 00000524 00001F02                		db 0, 0, 31, 2
  3001 00000528 00002002                		db 0, 0, 32, 2
  3002 0000052C 00002102                		db 0, 0, 33, 2
  3003 00000530 00002202                		db 0, 0, 34, 2
  3004 00000534 00002302                		db 0, 0, 35, 2
  3005 00000538 00002402                		db 0, 0, 36, 2
  3006                                  
  3007                                  ; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  3008                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:053Ch
  3009                                  
  3010                                  		;times 108 db 0		; 19/10/2022
  3011                                  		;;db 108 dup(0)		; 4*max_sectors_curr_sup - ($ -	tracktable) dup	(0)
  3012                                  					; times	((4*63)	- 144) db 0
  3013                                  dskdrvs:	
  3014 0000053C [5803]                  		dw fdrive1
  3015 0000053E [EE03]                  		dw fdrive2 
  3016                                  	
  3017                                  		;dw 52 dup(0)
  3018 00000540 00<rep 68h>             		times 104 db 0		; times (((4*63)-144)-4) db 0
  3019                                  					; 4*max_sectors_curr_sup-($-tracktable)-4 dup (0)			
  3020                                  
  3021                                  ;-----------------------------------------------------------------------------
  3022                                  
  3023                                  ; this is a real ugly place to put this
  3024                                  ; it should really go in the bds
  3025                                  
  3026 000005A8 00                      mediatype:	db 0
  3027 000005A9 00                      media_set_for_format: db 0		; 1 if we have done an int 13h set media
  3028                                  					; type for format call
  3029 000005AA 00                      had_format_error: db 0			; 1 if the previous format operation
  3030                                  					; failed.
  3031                                  
  3032                                  ; temp disk base table. it holds the the current dpt which is then replaced by
  3033                                  ; the one passed by "new roms" before we perform a format operation. the old
  3034                                  ; dpt is restored in restoreolddpt. the first entry (disk_specify_1) is -1 if
  3035                                  ; this table does not contain the previously saved dpt.
  3036                                  		
  3037 000005AB FFFFFFFF                tempdpt:	dd 0FFFFFFFFh ; -1	; temp disk base table
  3038 000005AF FF                      model_byte:	db 0FFh			; model	byte set at init time
  3039 000005B0 00                      secondary_model_byte: db 0
  3040                                  		
  3041 000005B1 00                      int19sem:	db 0			; indicate that all int 19h
  3042                                  					; initialization is complete
  3043                                  		
  3044                                  ;; we assume the following remain contiguous and their order doesn't change
  3045                                  ;i19_lst:
  3046                                  ;	irp	aa,<02,08,09,0a,0b,0c,0d,0e,70,72,73,74,76,77>
  3047                                  ;	public	int19old&aa
  3048                                  ;		db	aa&h	; store the number as a byte
  3049                                  ;int19old&aa	dd	-1	; original hardware int. vectors for int 19h.
  3050                                  ;	endm
  3051                                  
  3052                                  ; 21/10/2022
  3053                                  
  3054 000005B2 02                      i19_lst:	db 2
  3055                                  					; Int19old&aa
  3056 000005B3 FFFFFFFF                int19old02:	dd 0FFFFFFFFh ; -1
  3057 000005B7 08                      		db 8
  3058 000005B8 FFFFFFFF                int19old08:	dd 0FFFFFFFFh		; original hardware int. vectors for int 19h
  3059 000005BC 09                      		db 9
  3060 000005BD FFFFFFFF                int19old09:	dd 0FFFFFFFFh
  3061 000005C1 0A                      		db 0Ah
  3062 000005C2 FFFFFFFF                int19old0A:	dd 0FFFFFFFFh
  3063 000005C6 0B                      		db 0Bh
  3064 000005C7 FFFFFFFF                int19old0B:	dd 0FFFFFFFFh
  3065 000005CB 0C                      		db 0Ch
  3066 000005CC FFFFFFFF                int19old0C:	dd 0FFFFFFFFh
  3067 000005D0 0D                      		db 0Dh
  3068 000005D1 FFFFFFFF                int19old0D:	dd 0FFFFFFFFh
  3069 000005D5 0E                      		db 0Eh
  3070 000005D6 FFFFFFFF                int19old0E:	dd 0FFFFFFFFh
  3071 000005DA 70                      		db 70h
  3072 000005DB FFFFFFFF                int19old70:	dd 0FFFFFFFFh
  3073 000005DF 72                      		db 72h
  3074 000005E0 FFFFFFFF                int19old72:	dd 0FFFFFFFFh
  3075 000005E4 73                      		db 73h
  3076 000005E5 FFFFFFFF                int19old73:	dd 0FFFFFFFFh
  3077 000005E9 74                      		db 74h
  3078 000005EA FFFFFFFF                int19old74:	dd 0FFFFFFFFh
  3079 000005EE 76                      		db 76h
  3080 000005EF FFFFFFFF                int19old76:	dd 0FFFFFFFFh
  3081 000005F3 77                      		db 77h
  3082 000005F4 FFFFFFFF                int19old77:	dd 0FFFFFFFFh
  3083                                  
  3084                                  ;num_i19	equ ($ - i19_lst)/5  ; 18/03/2019
  3085                                  
  3086                                  ;-----------------------------------------------------------------------------
  3087                                  
  3088                                  ; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  3089                                  ; 
  3090                                  ;dskdrvs:	dw fdrive1
  3091                                  ;		dw fdrive2
  3092                                  ;		dw fdrive3
  3093                                  ;		dw fdrive4
  3094                                  ;
  3095                                  ;;M011 -- made all hard drive stuff variable
  3096                                  ;		;dw 22 dup(0)		; up to	26 drives for mini disks
  3097                                  ;		times 22 dw 0	; 19/10/2022
  3098                                  
  3099                                  ;-----------------------------------------------------------------------------
  3100                                  
  3101                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS v5.0 -actual-)
  3102                                  ; 30/12/2018 - Retro DOS v4.0 (MSDOS v6.21 -draft-)
  3103                                  ; 01/06/2018 - Retro DOS v3.0 (MSDOS v3.3)
  3104                                  
  3105                                  ;variables for dynamic relocatable modules
  3106                                  ;these should be stay resident.
  3107                                  
  3108 000005F8 00000000                int6c_ret_addr:	dd 0			; return address from int 6Ch
  3109                                  					; for p12 machine
  3110                                  
  3111                                  ; data structures for real-time date and time
  3112                                  			
  3113 000005FC 00000000                bin_date_time:	db 0, 0, 0, 0		; century, year, month,	day
  3114                                  
  3115                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3116                                  %if 0
  3117                                  month_table:	dw 0			; january
  3118                                  		dw 31			; february
  3119                                  		dw 59
  3120                                  		dw 90
  3121                                  		dw 120
  3122                                  		dw 151
  3123                                  		dw 181
  3124                                  		dw 212
  3125                                  		dw 243
  3126                                  		dw 273
  3127                                  		dw 304
  3128                                  		dw 334			; december
  3129                                  %endif
  3130                                  
  3131 00000600 0000                    daycnt2:	dw 0
  3132                                  ; 08/08/2023
  3133                                  ;feb29:		db 0			; february 29 in a leap	year flag
  3134                                  
  3135                                  ;-----------------------------------------------------------------------------
  3136                                  ;
  3137                                  ; 01/10/2022 - (New/Actual) Retro DOS v4.0 (will run as MSDOS 5.0)	
  3138                                  ; by Erdogan Tan (Istanbul) ! free source code !
  3139                                  ; 31/12/2018 - (old/draft) Retro DOS v4.0 (will/would run as MSDOS 6.21)
  3140                                  
  3141                                  ; ----------------------------------------------------------------------------
  3142                                  
  3143                                  ;************************************************************************
  3144                                  ;*									*
  3145                                  ;*	Entry points into Bios_Code routines. The segment values	*
  3146                                  ;*	  are plugged in by seg_reinit.					*
  3147                                  ;*									*
  3148                                  ;************************************************************************
  3149                                  
  3150                                  ; 01/10/2022 - Retro DOS v4.0 - IO.SYS (MSDOS v5.0)
  3151                                  ; BIOSCODE_SEGMENT equ 2C7h
  3152                                  ; BIOSDATA_SEGMENT equ 70h ; KERNEL_SEGMENT equ 70h
  3153                                  
  3154                                  ; 01/10/2022 - Erdogan Tan
  3155                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed function/routine
  3156                                  ;  addresses, they will be changed to table labels later)
  3157                                  
  3158                                  ; 09/12/2022
  3159                                  %if 0
  3160                                  cdev:		dw 43h,	2C7h		; chardev_entry
  3161                                  					; at 2C7h:43h =	70h:25B3h
  3162                                  ttticks:	dw 396h, 2C7h		; time_to_ticks
  3163                                  					; at 2C7h:396h = 70h:2906h
  3164                                  bcode_i2f:	dw 1302h, 2C7h		; i2f_handler
  3165                                  					; at 2C7h:1302h	= 70h:3872h
  3166                                  i13x:		dw 154Bh, 2C7h		; i13z
  3167                                  					; at 2C7h:154Bh	= 70h:3ABBh
  3168                                  %endif
  3169                                  
  3170                                  ; 30/12/2022
  3171                                  ; (IOSYSCODESEG is 2CCh for MSDOS 6.21 IO.SYS)
  3172                                  
  3173                                  ; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  3174                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0602h
  3175                                  ; (IOSYSCODESEG is 364h for PCDOS 7.1 IBMBIO.COM)
  3176                                  
  3177                                  ; 09/12/2022
  3178 00000602 [4700]2D03              cdev:		dw chardev_entry, IOSYSCODESEG
  3179 00000606 [A003]2D03              ttticks:	dw time_to_ticks, IOSYSCODESEG
  3180                                  ; 07/08/2023
  3181                                  ;bcode_i2f:	dw i2f_handler, IOSYSCODESEG
  3182 0000060A [5918]2D03              i13x:		dw i13z, IOSYSCODESEG
  3183                                  
  3184                                  end_BC_entries:	; 15/10/2022
  3185                                  
  3186                                  ;************************************************************************
  3187                                  ;*									*
  3188                                  ;*	cbreak - break key handling - simply set altah=3 and iret	*
  3189                                  ;*									*
  3190                                  ;************************************************************************
  3191                                  
  3192                                  cbreak:					
  3193 0000060E 2EC606[0C00]03          		mov	byte [cs:altah], 3 ; break key handling
  3194                                  					; indicate break key set
  3195                                  intret:					
  3196 00000614 CF                      		iret
  3197                                  
  3198                                  ; =============== S U B	R O U T	I N E ========================================
  3199                                  
  3200                                  
  3201                                  ;************************************************************************
  3202                                  ;*									*
  3203                                  ;*	strategy - store es:bx (device driver request packet)		*
  3204                                  ;*		     away at [ptrsav] for next driver function call	*
  3205                                  ;*									*
  3206                                  ;************************************************************************
  3207                                  
  3208                                  strategy:	; proc far		
  3209 00000615 2E891E[1200]            		mov	[cs:ptrsav], bx ; store es:bx (device driver request packet)
  3210                                  					; away at [ptrsav] for next driver function call
  3211 0000061A 2E8C06[1400]            		mov	[cs:ptrsav+2], es
  3212 0000061F CB                      		retf
  3213                                  
  3214                                  ; ----------------------------------------------------------------------------
  3215                                  
  3216                                  ;************************************************************************
  3217                                  ;*									*
  3218                                  ;*	device driver entry points. these are the initial		*
  3219                                  ;*	  'interrupt' hooks out of the device driver chain.		*
  3220                                  ;*	  in the case of our resident drivers, they'll just		*
  3221                                  ;*	  stick a fake return address on the stack which		*
  3222                                  ;*	  points to dispatch tables and possibly some unit		*
  3223                                  ;*	  numbers, and then call through a common entry point		*
  3224                                  ;*	  which can take care of a20 switching				*
  3225                                  ;*									*
  3226                                  ;************************************************************************
  3227                                  
  3228                                  ; 01/10/2022 - Erdogan Tan
  3229                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed table
  3230                                  ;  addresses, they will be changed to table labels later)
  3231                                  
  3232                                  ; 09/12/2022
  3233                                  
  3234                                  ; 02/10/2023 - Retro DOS v5.0
  3235                                  ; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:0620h, BIOSCODE = 0364h)
  3236                                  
  3237                                  con_entry:				
  3238 00000620 E84000                  		call	cdev_entry
  3239                                  ; ----------------------------------------------------------------------------
  3240                                  		;dw 0E4h		; con_table
  3241 00000623 [E400]                  		dw con_table		; 364h:0E4h (PCDOS 7.1)
  3242                                  					; 2C7h:0E4h = 70h:2654h
  3243                                  ; ----------------------------------------------------------------------------
  3244                                  
  3245                                  prn0_entry:				
  3246 00000625 E83B00                  		call	cdev_entry
  3247                                  ; ----------------------------------------------------------------------------
  3248                                  		;dw 0FBh		; prn_table
  3249 00000628 [FB00]                  		dw prn_table
  3250                                  					; 2C7h:0FBh = 70h:266Bh
  3251 0000062A 0000                    		db 0, 0
  3252                                  ; ----------------------------------------------------------------------------
  3253                                  
  3254                                  prn1_entry:				
  3255 0000062C E83400                  		call	cdev_entry
  3256                                  ; ----------------------------------------------------------------------------
  3257                                  		;dw 0FBh		; prn_table
  3258 0000062F [FB00]                  		dw prn_table
  3259                                  					; 2C7h:0FBh = 70h:266Bh
  3260 00000631 0001                    		db 0, 1
  3261                                  ; ----------------------------------------------------------------------------
  3262                                  
  3263                                  prn2_entry:				
  3264 00000633 E82D00                  		call	cdev_entry
  3265                                  ; ----------------------------------------------------------------------------
  3266                                  		;dw 0FBh		; prn_table
  3267 00000636 [FB00]                  		dw prn_table
  3268                                  					; 2C7h:0FBh = 70h:266Bh
  3269 00000638 0102                    		db 1, 2
  3270                                  ; ----------------------------------------------------------------------------
  3271                                  
  3272                                  prn3_entry:				
  3273 0000063A E82600                  		call	cdev_entry
  3274                                  ; ----------------------------------------------------------------------------
  3275                                  		;dw 0FBh		; prn_table
  3276 0000063D [FB00]                  		dw prn_table
  3277                                  					; 2C7h:0FBh = 70h:266Bh
  3278 0000063F 0203                    		db 2, 3
  3279                                  ; ----------------------------------------------------------------------------
  3280                                  
  3281                                  aux0_entry:				
  3282 00000641 E81F00                  		call	cdev_entry
  3283                                  ; ----------------------------------------------------------------------------
  3284                                  		;dw 130h		; aux_table
  3285 00000644 [3001]                  		dw aux_table
  3286                                  					; 2C7h:130h = 70h:26A0h
  3287 00000646 00                      		db 0
  3288                                  ; ----------------------------------------------------------------------------
  3289                                  
  3290                                  aux1_entry:				
  3291 00000647 E81900                  		call	cdev_entry
  3292                                  ; ----------------------------------------------------------------------------
  3293                                  		;dw 130h		; aux_table
  3294 0000064A [3001]                  		dw aux_table		; 364h:130h = 70h:3070h (PCDOS 7.1)
  3295                                  					; 2C7h:130h = 70h:26A0h
  3296 0000064C 01                      		db 1
  3297                                  ; ----------------------------------------------------------------------------
  3298                                  
  3299                                  aux2_entry:				
  3300 0000064D E81300                  		call	cdev_entry
  3301                                  ; ----------------------------------------------------------------------------
  3302                                  		;dw 130h		; aux_table
  3303 00000650 [3001]                  		dw aux_table
  3304                                  					; 2C7h:130h = 70h:26A0h
  3305 00000652 02                      		db 2
  3306                                  ; ----------------------------------------------------------------------------
  3307                                  
  3308                                  aux3_entry:				
  3309 00000653 E80D00                  		call	cdev_entry
  3310                                  ; ----------------------------------------------------------------------------
  3311                                  		;dw 130h		; aux_table
  3312 00000656 [3001]                  		dw aux_table
  3313                                  					; 2C7h:130h = 70h:26A0h
  3314 00000658 03                      		db 3
  3315                                  ; ----------------------------------------------------------------------------
  3316                                  
  3317                                  tim_entry:				
  3318 00000659 E80700                  		call	cdev_entry
  3319                                  ; ----------------------------------------------------------------------------
  3320                                  		;dw 147h		; tim_table
  3321 0000065C [4701]                  		dw tim_table		; 364h:147h = 70h:3087h (PCDOS 7.1)
  3322                                  					; 2C7h:147h = 70h:26B7h
  3323                                  ; ----------------------------------------------------------------------------
  3324                                  
  3325                                  ; 15/10/2022
  3326                                  ;DSKTBL	equ dsktbl - DOSBIOSEG_2C7h	; dsktbl - 2C70h
  3327                                  ; 09/12/2022
  3328                                  DSKTBL equ dsktbl
  3329                                  
  3330                                  dsk_entry:				
  3331 0000065E E80200                  		call	cdev_entry
  3332                                  ; ----------------------------------------------------------------------------
  3333                                  		;dw 4A2h		; dsktbl
  3334 00000661 [6F05]                  		dw DSKTBL		; 09/12/2022
  3335                                  					; 2C7h:4A2h = 70h:2A12h
  3336                                  					; 02/10/2023 (PCDOS 7.1 IBMBIO.COM)
  3337                                  					; 364h:579h = 70h:34B9h
  3338                                  
  3339                                  ; =============== S U B	R O U T	I N E ========================================
  3340                                  
  3341                                  ;************************************************************************
  3342                                  ;*									*
  3343                                  ;*	Ensure A20 is enabled before jumping into code in HMA.		*
  3344                                  ;*	This code assumes that if Segment of Device request packet is	*
  3345                                  ;*	DOS DATA segment then the Device request came from DOS & that	*
  3346                                  ;*	A20 is already on.						*
  3347                                  ;*									*
  3348                                  ;************************************************************************
  3349                                  
  3350                                  cdev_entry:	; proc near		
  3351 00000663 2E803E[0D00]00          		cmp	byte [cs:inHMA],0
  3352 00000669 740D                    		jz	short ce_enter_codeseg
  3353                                  				; optimized for DOS in HMA
  3354 0000066B 50                      		push	ax
  3355 0000066C 2EA1[0300]              		mov	ax,[cs:DosDataSg]
  3356 00000670 2E3906[1400]            		cmp	[cs:ptrsav+2],ax
  3357 00000675 58                      		pop	ax
  3358 00000676 7505                    		jnz	short not_from_dos
  3359                                  				; jump is coded this way to fall thru
  3360                                  				; in 99.99% of the cases
  3361                                  ce_enter_codeseg:
  3362 00000678 2EFF2E[0206]            		jmp	far [cs:cdev]			
  3363                                  		;jmp	dword ptr cs:cdev
  3364                                  ;-----------------------------------------------------------------------------
  3365                                  
  3366                                  not_from_dos:				
  3367 0000067D E8AA00                  		call	EnsureA20On
  3368 00000680 EBF6                    		jmp	short ce_enter_codeseg
  3369                                  
  3370                                  ;************************************************************************
  3371                                  ;*									*
  3372                                  ;*	outchr - this is our int 29h handler. it writes the		*
  3373                                  ;*	   character in al on the display using int 10h ttywrite	*
  3374                                  ;*									*
  3375                                  ;************************************************************************
  3376                                  
  3377                                  	; 02/10/2023
  3378                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0682h
  3379                                  outchr:					
  3380 00000682 50                      		push	ax		; int 29h handler
  3381 00000683 56                      		push	si
  3382 00000684 57                      		push	di
  3383 00000685 55                      		push	bp
  3384 00000686 53                      		push	bx
  3385                                  		;;;
  3386                                  		; 02/10/2023 - Retro DOS v5.0 (Modified POCDOS 7.1) 
  3387                                  		;mov	ah,0Eh
  3388                                  		;mov	bx,7
  3389                                  		;int	10h	; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
  3390                                  		;		; AL = character, BH = display page (alpha modes)
  3391                                  		;		; BL = foreground color	(graphics modes)
  3392                                  		; 02/10/2023
  3393                                  		;push	ds ; *
  3394 00000687 31DB                    		xor	bx,bx ; 0
  3395 00000689 2E381E[1208]            		cmp	[cs:IsWin386], bl ; (are we in) Windows ?
  3396 0000068E 7510                    		jnz	short win_outchr ; *
  3397 00000690 1E                      		push	ds ; *
  3398 00000691 8EDB                    		mov	ds,bx ; 0
  3399 00000693 B40E                    		mov	ah,0Eh
  3400 00000695 B307                    		mov	bl,7
  3401                                  		;jnz	short win_outchr ; Running on Windows
  3402 00000697 9C                      		pushf			; far call (simulate INT)	
  3403 00000698 FA                      		cli	; disable interrupts
  3404 00000699 FF1E4000                		call	far [40h]	; far call to INT 10h vector
  3405 0000069D 1F                      		pop	ds ; *
  3406 0000069E EB02                    		jmp	short outchr_ok
  3407                                  win_outchr:
  3408 000006A0 CD10                    		int	10h
  3409                                  outchr_ok:
  3410                                  		;pop	ds ; *
  3411                                  		;;;
  3412 000006A2 5B                      		pop	bx
  3413 000006A3 5D                      		pop	bp
  3414 000006A4 5F                      		pop	di
  3415 000006A5 5E                      		pop	si
  3416 000006A6 58                      		pop	ax
  3417 000006A7 CF                      		iret
  3418                                  
  3419                                  ;-----------------------------------------------------------------------------
  3420                                  
  3421                                  	; 02/10/2023 - Retro DOS v5.0
  3422                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:06A8h
  3423                                  
  3424 000006A8 50                      		db 50h ; P		; 'PCI' signature
  3425 000006A9 43                      		db 43h ; C
  3426 000006AA 49                      		db 49h ; I
  3427                                  
  3428 000006AB 00000000                Orig1A:		dd 0
  3429                                  
  3430                                  ; =============== S U B R O U T I N E =======================================
  3431                                  
  3432                                  	; 02/10/2023 - Retro DOS v5.0
  3433                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:06AFh
  3434                                  
  3435                                  Int1A:
  3436 000006AF 80FC04                  		cmp	ah,4		; (Y2K-fix)
  3437 000006B2 7405                    		je	short int1a_1	; Read the date from the computer's real-time clock
  3438 000006B4 2EFF2E[AB06]            		jmp	far [cs:Orig1A]
  3439                                  int1a_1:
  3440 000006B9 55                      		push	bp
  3441                                  int1a_2:
  3442 000006BA 89E5                    		mov	bp,sp
  3443 000006BC 55                      		push	bp
  3444 000006BD 9C                      		pushf
  3445 000006BE 2EFF1E[AB06]            		call	far [cs:Orig1A]
  3446 000006C3 7220                    		jc	short int1a_4
  3447                                  
  3448                                  		;cmp	cl,0		; Year (BCD)
  3449                                  		; 02/10/2023
  3450 000006C5 08C9                    		or	cl,cl
  3451 000006C7 7515                    		jnz	short int1a_3
  3452 000006C9 80FD19                  		cmp	ch,19h		; Century (BCD)
  3453 000006CC 7510                    		jne	short int1a_3
  3454 000006CE B520                    		mov	ch,20h
  3455 000006D0 B405                    		mov	ah,5		; Set the date on the computer's real-time clock
  3456 000006D2 51                        		push	cx
  3457 000006D3 52                      		push	dx		; dh = Month (BCD), dl = Day (BCD)
  3458 000006D4 9C                      		pushf
  3459 000006D5 2EFF1E[AB06]            		call	far [cs:Orig1A]
  3460 000006DA 5A                      		pop	dx
  3461 000006DB 59                      		pop	cx
  3462 000006DC 7207                    		jc	short int1a_4
  3463                                  int1a_3:
  3464 000006DE 5D                      		pop	bp
  3465 000006DF 806606FE                		and	byte [bp+6],0FEh ; clear carry flag
  3466 000006E3 EB05                                    jmp	short int1a_5
  3467                                  int1a_4:
  3468 000006E5 5D                      		pop	bp
  3469 000006E6 804E0601                		or	byte [bp+6],1	; set carry flag
  3470                                  int1a_5:
  3471 000006EA 5D                      		pop	bp
  3472 000006EB CF                      		iret
  3473                                  
  3474                                  		; 02/10/2023
  3475 000006EC 90                      		nop	; (not necessary, i have used this 'nop' to locate 'block13:'
  3476                                  			; at BIOSDATA:06EDh, just as in the original PCDOS 7.1 IBMBIO.COM)
  3477                                  	
  3478                                  ;-----------------------------------------------------------------------------
  3479                                  
  3480                                  ;************************************************************************
  3481                                  ;*									*
  3482                                  ;*	block13 - our int13 hooker					*
  3483                                  ;*									*
  3484                                  ;************************************************************************
  3485                                  
  3486                                  	; 02/10/2023 - Retro DOS v5.0
  3487                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:06EDh
  3488                                  
  3489                                  block13:				
  3490 000006ED 2E803E[0D00]00          		cmp	byte [cs:inHMA],0
  3491 000006F3 7403                    		jz	short skipa20
  3492                                  		
  3493                                  		;call	IsA20Off	; A20 Off?
  3494                                  		;jnz	short skipa20
  3495                                  		;call	EnableA20	; assure a20 enabled
  3496                                  		; 02/10/2023 -  Retro DOS v5.0 (Modified PCDOS 7.1)
  3497 000006F5 E83200                  		call	EnsureA20On	; assure a20 enabled
  3498                                  skipa20:				
  3499 000006F8 2E8C1E[1C00]            		mov	[cs:i13_ds],ds	; save caller's ds for call-through
  3500 000006FD 9C                      		pushf			; fake interrupt
  3501 000006FE 2EFF1E[0A06]            		call	far [cs:i13x]
  3502                                  		;call	dword ptr cs:i13x
  3503                                  					; call through Bios_Code entry table
  3504 00000703 2E8E1E[1C00]            		mov	ds,[cs:i13_ds]
  3505 00000708 CA0200                  		retf	2
  3506                                  
  3507                                  ; =============== S U B	R O U T	I N E =======================================
  3508                                  
  3509                                  ; the int13 hook calls back here to call-through to the ROM
  3510                                  ; this is necessary because some people have extended their
  3511                                  ; ROM BIOSs to use ds as a parameter/result register and
  3512                                  ; our int13 hook relies heavily on ds to access Bios_Data
  3513                                  
  3514                                  call_orig13:	; proc far		
  3515 0000070B 8E1E[1C00]              		mov	ds,[i13_ds]	; get caller's ds register
  3516 0000070F 9C                      		pushf			; simulate an int13
  3517 00000710 2EFF1E[B400]            		call	far [cs:Orig13]
  3518                                  		;call	cs:Orig13
  3519 00000715 2E8C1E[1C00]            		mov	[cs:i13_ds],ds
  3520 0000071A 0E                      		push	cs
  3521 0000071B 1F                      		pop	ds		; restore ds ->	Bios_Data before return
  3522                                  
  3523 0000071C 9C                      		pushf
  3524                                  		; 10/12/2022
  3525                                  		; ds = cs
  3526 0000071D 803E[0D00]00            		cmp	byte [inHMA],0	; 16/10/2022
  3527                                  		;cmp	byte [cs:inHMA],0
  3528 00000722 7403                    		jz	short corig13_popf_retf
  3529                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3530                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0725h	
  3531                                  		;call	IsA20Off
  3532                                  		;jnz	short corig13_popf_retf
  3533                                  		;call	EnableA20
  3534 00000724 E80300                  		call	EnsureA20On ; 07/08/2023
  3535                                  corig13_popf_retf:	
  3536 00000727 9D                      		popf
  3537                                  		; 20/09/2023
  3538                                  re_init:	; 07/08/2023
  3539 00000728 CB                      		retf
  3540                                  
  3541                                  		; 02/10/2023
  3542 00000729 90                      		nop	; (not necessary, i have used this 'nop' to locate 'EnsureA20On:'
  3543                                  			; at BIOSDATA:072Ah, just as in the original PCDOS 7.1 IBMBIO.COM)
  3544                                  
  3545                                  ;-----------------------------------------------------------------------------
  3546                                  
  3547                                  ; BIOSDATA:07BBh (MSDOS 6.21, IO.SYS)
  3548                                  ; BIOSDATA:07BBh (MSDOS 5.0, IO.SYS) ; 16/10/2022
  3549                                  
  3550                                  ; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3551                                  ;HiMem:		dd 0FFFF0090h		
  3552                                  ;LoMem:		dd 80h
  3553                                  
  3554                                  ; ----------------------------------------------------------------------------			
  3555                                  
  3556                                  ; =============== S U B	R O U T	I N E ========================================
  3557                                  
  3558                                  
  3559                                  ;************************************************************************
  3560                                  ;*									*
  3561                                  ;*	EnsureA20On - ensure that a20 is enabled if we're running	*
  3562                                  ;*	  in the HMA before interrupt entry points into Bios_Code	*
  3563                                  ;*									*
  3564                                  ;************************************************************************
  3565                                  
  3566                                  EnsureA20On:	; proc near
  3567 0000072A E80E00                  		call	IsA20Off
  3568                                  		;jz	short EnableA20
  3569                                  		;retn
  3570                                  		; 18/12/2022
  3571 0000072D 750B                    		jnz	short A20On_retn
  3572                                  
  3573                                  ; =============== S U B	R O U T	I N E ========================================
  3574                                  
  3575                                  
  3576                                  EnableA20:	; proc near
  3577 0000072F 50                      		push	ax
  3578 00000730 53                      		push	bx
  3579 00000731 B405                    		mov	ah,5	 ; local enable a20
  3580                                  		;call	cs:xms
  3581 00000733 2EFF1E[0E00]            		call	far [cs:xms] ; 16/10/2022
  3582 00000738 5B                      		pop	bx
  3583 00000739 58                      		pop	ax
  3584                                  A20On_retn:	; 18/12/2022
  3585 0000073A C3                      		retn
  3586                                  
  3587                                  ; =============== S U B	R O U T	I N E ========================================
  3588                                  
  3589                                  
  3590                                  IsA20Off:	; proc near
  3591 0000073B 1E                      		push	ds
  3592 0000073C 06                      		push	es
  3593 0000073D 51                      		push	cx
  3594 0000073E 56                      		push	si
  3595 0000073F 57                      		push	di
  3596                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3597                                  		;lds	si,[cs:HiMem]
  3598                                  		;les	di,[cs:LoMem]
  3599                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0740h
  3600 00000740 31FF                    		xor	di,di
  3601 00000742 8EC7                    		mov	es,di
  3602 00000744 4F                      		dec	di
  3603 00000745 BE9000                  		mov	si,90h	; 0FFFFh:0090h ; HiMem
  3604 00000748 8EDF                    		mov	ds,di
  3605 0000074A BF8000                  		mov	di,80h	; 0000h:0080h ; LoMem
  3606                                  		; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (PCDOS 7.1)
  3607                                  		; (following cpu instructions will be modified by 'SYSIN'
  3608                                  		; if the cpu is a 386/32bit, for checking A20 line faster) 
  3609                                  cpu386_cmpsd:
  3610 0000074D 90                      		nop
  3611 0000074E B90800                  		mov	cx,8
  3612 00000751 F3A7                    		repe cmpsw
  3613                                  				; zf = 0 -> A20 line is ON
  3614                                  				; zf = 1 -> A20 line is OFF
  3615 00000753 5F                      		pop	di
  3616 00000754 5E                      		pop	si
  3617 00000755 59                      		pop	cx
  3618 00000756 07                      		pop	es
  3619 00000757 1F                      		pop	ds
  3620 00000758 C3                      		retn
  3621                                  
  3622                                  ; ----------------------------------------------------------------------------
  3623                                  
  3624                                  ; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3625                                  %if 0
  3626                                  DisableA20:
  3627                                  		push	ax
  3628                                  		push	bx
  3629                                  		mov	ah,6		; local disable A20
  3630                                  		call	far [cs:xms]
  3631                                  		;call	cs:xms
  3632                                  		pop	bx
  3633                                  		pop	ax
  3634                                  		retn
  3635                                  %endif
  3636                                  
  3637                                  ; ----------------------------------------------------------------------------
  3638                                  
  3639                                  ;************************************************************************
  3640                                  ;*									*
  3641                                  ;*	int19 - bootstrap interrupt -- we must restore a bunch of the	*
  3642                                  ;*	  interrupt vectors before resuming the original int19 code	*
  3643                                  ;*									*
  3644                                  ;************************************************************************
  3645                                  
  3646                                  		; 02/10/2023 - Retro DOS v5.0
  3647                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0759h
  3648                                  int19:
  3649 00000759 0E                      		push	cs
  3650 0000075A 1F                      		pop	ds
  3651                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3652                                  		;mov	es,[zeroseg]	; 16/10/2022
  3653                                  		;mov	cx,5		; NUMROMVECTORS
  3654 0000075B 31C9                    		xor	cx,cx
  3655 0000075D 8EC1                    		mov	es,cx
  3656 0000075F B105                    		mov	cl,5
  3657                                  		;mov	si,offset RomVectors
  3658 00000761 BE[0001]                		mov	si,RomVectors	; 19/10/2022
  3659                                  next_int:
  3660 00000764 AC                      		lodsb			; get int number
  3661 00000765 98                      		cbw			; assume < 128
  3662 00000766 D1E0                    		shl	ax,1
  3663 00000768 D1E0                    		shl	ax,1		; int *	4
  3664                                  		; 07/08/2023
  3665                                  		;mov	di,ax
  3666                                  		;lodsw
  3667                                  		;stosw
  3668                                  		;lodsw
  3669                                  		;stosw			; install the saved vector
  3670                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:076Ah
  3671 0000076A 97                      		xchg	ax,di
  3672 0000076B A5                      		movsw
  3673 0000076C A5                      		movsw
  3674 0000076D E2F5                    		loop	next_int
  3675                                  		;cmp	byte [int19sem], 0 ; 19/10/2022
  3676 0000076F 380E[B105]              		cmp	[int19sem], cl ; 0 ; 07/08/2023
  3677 00000773 7419                    		jz	short doint19
  3678 00000775 BE[B205]                		mov	si,i19_lst	; stacks code has changed these hardware interrupt vectors
  3679                                  					; stkinit in sysinit1 will initialize int19oldxx values
  3680                                  		;mov	cx,14		; num_i19
  3681                                  		; 07/08/2023
  3682 00000778 B10E                    		mov	cl,14
  3683                                  i19_restore_loop:
  3684 0000077A AC                      		lodsb			; get interrupt	number
  3685 0000077B 98                      		cbw			; assume < 128
  3686                                  		;mov	di,ax
  3687                                  		;lodsw			; get original vector offset
  3688                                  		;mov	bx,ax		; save it
  3689                                  		;lodsw
  3690                                  		; 07/08/2023
  3691 0000077C 97                      		xchg	ax,di
  3692 0000077D AD                      		lodsw
  3693 0000077E 93                      		xchg	ax,bx
  3694 0000077F AD                      		lodsw
  3695                                  		;cmp	bx,0FFFFh	; check	for 0ffffh (unlikely segment)
  3696 00000780 43                      		inc	bx ; 07/08/2023
  3697 00000781 7409                    		jz	short i19_restor_1 ; opt no need to check selector too
  3698                                  		;cmp	ax,0FFFFh	; opt 0ffffh is	unlikely offset
  3699                                  		;jz	short i19_restor_1
  3700 00000783 4B                      		dec	bx ; 07/08/2023
  3701 00000784 01FF                    		add	di,di
  3702 00000786 01FF                    		add	di,di
  3703 00000788 93                      		xchg	ax,bx
  3704 00000789 AB                      		stosw
  3705 0000078A 93                      		xchg	ax,bx
  3706 0000078B AB                      		stosw			; put the vector back
  3707                                  i19_restor_1:
  3708 0000078C E2EC                    		loop	i19_restore_loop
  3709                                  doint19:
  3710                                  		;cmp	byte [inHMA],0	; ; Is dos running from	HMA
  3711 0000078E 380E[0D00]              		cmp	[inHMA],cl ; 0	; 07/08/2023
  3712 00000792 7403                    		jz	short SkipVDisk
  3713 00000794 E82A00                  		call	EraseVDiskHead	; Then erase our VDISK header at 1MB boundary
  3714                                  					; Some m/c's (AST 386 & HP QS/16 do not clear
  3715                                  					; the memory above 1MB during a	warm boot.
  3716                                  SkipVDisk:
  3717 00000797 CD19                    		int	19h		; DISK BOOT
  3718                                  					; causes reboot	of disk	system
  3719                                  
  3720                                  ; =============== S U B	R O U T	I N E ========================================
  3721                                  
  3722                                  ;-----------------------------------------------------------------------------
  3723                                  ;
  3724                                  ; procedure : int15
  3725                                  ;
  3726                                  ;		Int15 handler for recognizing ctrl-alt-del seq
  3727                                  ;		If it recognizes ctrl-alt-del and if DOS was
  3728                                  ;		is running high, it Erases the VDISK header
  3729                                  ;		present at 1MB boundary
  3730                                  ;
  3731                                  ;-----------------------------------------------------------------------------
  3732                                  
  3733                                  ; 16/10/2022
  3734                                  ;DELKEY		equ	53h
  3735                                  ;ROMDATASEG	equ	40h
  3736                                  KBFLAG		equ	17h
  3737                                  ;CTRLSTATE	equ	04h
  3738                                  ;ALTSTATE	equ	08h
  3739                                  
  3740                                  		; 02/10/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  3741                                  Int15:
  3742                                  		;cmp	ax,4F00h+DELKEY
  3743 00000799 3D534F                  		cmp	ax,4F53h	; del keystroke ?
  3744                                  		; 02/10/2023 - Retro DOS v5.0
  3745                                  		; 07/08/2023
  3746 0000079C 7405                    		jz	short int15_1
  3747                                  		;jnz	short Old15_j	; 07/08/2023 
  3748                                  Old15_j:
  3749 0000079E 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  3750                                  
  3751                                  ; ----------------------------------------------------------------------------
  3752                                  int15_1:
  3753 000007A3 1E                      		push	ds
  3754 000007A4 50                      		push	ax
  3755                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3756                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:07A5h
  3757                                  		;mov	ax,40h		; ROMDATASEG
  3758                                  		;mov	ds,ax
  3759                                  		;;mov	al,ds:17h	; [KBFLAG]
  3760                                  		;; 16/10/2022
  3761                                  		;mov	al,[KBFLAG]
  3762 000007A5 31C0                    		xor	ax,ax
  3763 000007A7 8ED8                    		mov	ds,ax
  3764 000007A9 A01704                  		mov	al,[0417h]	; KBFLAG = 0417h (PCDOS 7.1 IBMBIO.COM)
  3765 000007AC 240C                    		and	al,0Ch		; (CTRLSTATE | ALTSTATE)
  3766 000007AE 3C0C                    		cmp	al,0Ch		; (CTRLSTATE | ALTSTATE)
  3767 000007B0 750A                    		jnz	short int15_2
  3768                                  		; 07/08/2023
  3769                                  		;push	cs
  3770                                  		;pop	ds
  3771                                  		;cmp	byte [inHMA],0	; is DOS running from HMA
  3772 000007B2 2E3826[0D00]            		cmp	byte [cs:inHMA],ah ; 0
  3773 000007B7 7403                    		jz	short int15_2
  3774 000007B9 E80500                  		call	EraseVDiskHead
  3775                                  int15_2:
  3776 000007BC 58                      		pop	ax
  3777 000007BD 1F                      		pop	ds
  3778 000007BE F9                      		stc
  3779                                  		; 02/10/2023 - Retro DOS v5.0
  3780 000007BF EBDD                    		jmp	short Old15_j
  3781                                  
  3782                                  		; 02/10/2023
  3783                                  ;Old15_j:	; 07/08/2023
  3784                                  ;		jmp	far [cs:Old15]	; 16/10/2022
  3785                                  ;		;jmp	cs:Old15
  3786                                  	
  3787                                  ; =============== S U B	R O U T	I N E ========================================
  3788                                  
  3789                                  ;-----------------------------------------------------------------------------
  3790                                  ;
  3791                                  ; procedure : EraseVDiskHead
  3792                                  ;
  3793                                  ;		Erases the VDisk Header present in the 1MB boundary
  3794                                  ;
  3795                                  ;-----------------------------------------------------------------------------
  3796                                  
  3797                                  EraseVDiskHead:	; proc near
  3798                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3799                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:07C1h
  3800                                  		;push	ax
  3801 000007C1 51                      		push	cx
  3802 000007C2 57                      		push	di
  3803 000007C3 06                      		push	es
  3804 000007C4 E863FF                  		call	EnsureA20On
  3805                                  		;mov	ax,0FFFFh	; HMA seg
  3806                                  		;mov	es,ax
  3807                                  		; 03/10/2023 - Retro DOS v5.0
  3808 000007C7 6AFF                    		push	0FFFFh
  3809 000007C9 07                      		pop	es
  3810 000007CA BF1000                  		mov	di,10h		; point	to VDISK header
  3811                                  		; 07/08/2023
  3812                                  		;mov	cx,10h		; size of vdisk	header
  3813 000007CD 89F9                    		mov	cx,di ; 16
  3814                                  		; 03/10/2023
  3815 000007CF 31C0                    		xor	ax,ax
  3816                                  		;inc	ax ; ax = 0
  3817 000007D1 F3AB                    		rep stosw		; clear	it
  3818 000007D3 07                      		pop	es
  3819 000007D4 5F                      		pop	di
  3820 000007D5 59                      		pop	cx
  3821                                  		;pop	ax ; 07/08/2023
  3822 000007D6 C3                      		retn
  3823                                  
  3824                                  ; ----------------------------------------------------------------------------
  3825                                  
  3826                                  ; 03/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
  3827                                  ; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  3828                                  
  3829                                  ; 09/12/2022
  3830                                  ;SYSINITSEG	equ 46Dh  ; SYSINIT segment
  3831                                  ;DOSLOADSEG	equ 83Fh  ; MSDOS.SYS (kernel) loading segment		
  3832                                  ; (followings are in sysinit segment)
  3833                                  ;FTryToMovDOSHi	equ 0A84h ; (procedure in SYSINIT segment)
  3834                                  FTRYTOMOVDOSHI	equ FTryToMovDOSHi ; SYSINIT section
  3835                                  ;DEVICELIST	equ 273h
  3836                                  DEVICELIST	equ DEVICE_LIST	; SYSINIT section 	
  3837                                  ;MEMORYSIZE	equ 292h	
  3838                                  MEMORYSIZE	equ MEMORY_SIZE	; SYSINIT section
  3839                                  ;DEFAULTDRIVE	equ 296h
  3840                                  DEFAULTDRIVE	equ DEFAULT_DRIVE ; SYSINIT section
  3841                                  ;;currentdoslocation equ 271h
  3842                                  ;CURRENTDOSLOCATION equ 271h
  3843                                  CURRENTDOSLOCATION equ CURRENT_DOS_LOCATION  ; SYSINIT section
  3844                                  ;SYSINITSTART	equ 267h
  3845                                  SYSINITSTART	equ SYSINIT  ; SYSINIT section
  3846                                  ; 18/10/2022
  3847                                  ;toomanydrivesflag equ 3FFh 
  3848                                  TOOMANYDRIVESFLAG equ toomanydrivesflag ; SYSINIT section	
  3849                                  
  3850                                  ; ----------------------------------------------------------------------------
  3851                                  
  3852                                  ; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  3853                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:07D7h
  3854                                  
  3855                                  %if 1
  3856                                  
  3857 000007D7 FFFF                    FreeHMAPtr:	dw 0FFFFh		
  3858                                  ;MoveDOSIntoHMA: dd 46D0A84h 		; FTryToMovDOSHi
  3859                                  					; (procedure in	SYSINIT	segment)
  3860                                  ; 17/10/2022
  3861 000007D9 [E80B]                  MoveDOSIntoHMA:	dw FTRYTOMOVDOSHI	; 09/12/2022
  3862 000007DB 0405                    		dw SYSINITSEG		; 08/08/2023
  3863                                  					; 0544h for PCDOS 7.1 IBMBIO.COM
  3864                                  					; 0473h for MSDOS 6.21 IO.SYS
  3865                                  ;SR;
  3866                                  ; A communication block has been setup between the DOS and the BIOS. All
  3867                                  ;the data starting from SysinitPresent will be part of the data block. 
  3868                                  ;Right now, this is the only data being communicated. It can be expanded 
  3869                                  ;later to add more stuff
  3870                                  
  3871 000007DD 00                      SysinitPresent:	db 0
  3872                                  
  3873                                  %endif
  3874                                  
  3875                                  ; ----------------------------------------------------------------------------
  3876                                  
  3877                                  ;************************************************************************
  3878                                  ;*									*
  3879                                  ;*	the int2f handler chains up to Bios_Code through here.		*
  3880                                  ;*	  it returns through one of the three functions that follow.	*
  3881                                  ;*	  notice that we'll assume we're being entered from DOS, so	*
  3882                                  ;*	  that we're guaranteed to be A20 enabled if needed		*
  3883                                  ;*									*
  3884                                  ;************************************************************************
  3885                                  
  3886                                  ; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3887                                  %if 0	; 20/09/2023
  3888                                  int_2f:		
  3889                                  		jmp	far [cs:bcode_i2f] ; 16/10/2022
  3890                                  		;jmp	dword ptr cs:bcode_i2f ; far [cs:bcode_i2f]
  3891                                  
  3892                                  ; ----------------------------------------------------------------------------
  3893                                  
  3894                                  ; re-enter here to transition out of hma mode and jmp to dsk_entry
  3895                                  ; note:  is it really necessary to transiton out and then back in?
  3896                                  ;	 It's not as if this is a really speed critical function.
  3897                                  ;	 might as well do whatever's most compact.
  3898                                  
  3899                                  i2f_dskentry:
  3900                                  		jmp	dsk_entry
  3901                                  
  3902                                  ; ----------------------------------------------------------------------------
  3903                                  
  3904                                  ;************************************************************************
  3905                                  ;*									*
  3906                                  ;*	re_init - called back by sysinit after a bunch of stuff		*
  3907                                  ;*		is done. presently does nothing. affects no		*
  3908                                  ;*		registers!						*
  3909                                  ;*									*
  3910                                  ;************************************************************************
  3911                                  
  3912                                  ; 09/12/2022
  3913                                  ; re_init_:
  3914                                  re_init:				; called back by sysinit after
  3915                                  		retf			; a bunch of stuff is done.
  3916                                  					; presently does nothing
  3917                                  %endif
  3918                                  
  3919                                  ; ----------------------------------------------------------------------------
  3920                                  
  3921                                  ;SR; WIN386 support
  3922                                  
  3923                                  ; WIN386 instance data structure
  3924                                  ;
  3925                                  ; Here is a Win386 startup info structure which we set up and to which
  3926                                  ; we return a pointer when Win386 initializes.
  3927                                  
  3928 000007DE 0300                    Win386_SI:	db 3,0			; SI_Version
  3929                                  					; Startup Info for Win386
  3930 000007E0 00000000                SI_Next:	dd 0			; pointer to next info structure
  3931 000007E4 00000000                		dd 0			; a field we don't need
  3932 000007E8 00000000                		dd 0			; another field	we don't need
  3933 000007EC [F007]                  SI_Instance:	dw Instance_Table
  3934 000007EE 7000                    		dw 70h	; Bios_Data	; far pointer to instance table
  3935                                  
  3936                                  ; This table gives Win386 the instance data in the BIOS and ROM-BIOS data
  3937                                  ; areas. Note that the address and size of the hardware stacks must
  3938                                  ; be calculated and inserted at boot time.
  3939                                  
  3940 000007F0 00005000                Instance_Table:	dw 0,50h		; print	screen status...
  3941 000007F4 0200                    		dw 2			; ... 2	bytes
  3942 000007F6 0E005000                		dw 0Eh,50h		; ROM Basic data...
  3943 000007FA 1400                    		dw 14h			; ... 14H bytes
  3944 000007FC [0C00]                  		dw altah		; a con	device buffer...
  3945 000007FE 7000                    		dw 70h			; Bios_Data segment
  3946 00000800 0100                    		dw 1			; ... 1 byte
  3947                                  
  3948                                  NextStack:
  3949                                  
  3950                                  ; NOTE:  If stacks are disabled by STACKS=0,0, the following
  3951                                  ;	instance items WILL NOT be filled in by SYSINIT.
  3952                                  ;	That's just fine as long as these are the last items
  3953                                  ;	in the instance list since the first item is initialized
  3954                                  ;	to 0000 at load time.
  3955                                  
  3956 00000802 00000000                		dw 0,0			; pointer to next stack	to be used...
  3957 00000806 0200                    		dw 2			; ... 2 bytes
  3958 00000808 00000000                IT_StackLoc:	dd 0			; location of hardware stacks
  3959 0000080C 0000                    IT_StackSize:	dw 0			; size of hardware stacks
  3960 0000080E 00000000                		dd 0			; terminate the	instance table
  3961                                  
  3962                                  					;SR;
  3963 00000812 00                      IsWin386:	db 0			; Flag to indicate whether
  3964                                  					; Win386 is running or not
  3965                                  ;-----------------------------------------------------------------------------
  3966                                  
  3967                                  ; 09/12/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  3968                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0813h
  3969                                  
  3970                                  ;This routine was originally in BIOS_CODE but this causes a lot of problems
  3971                                  ;when we call it including checking of A20. The code being only about 
  3972                                  ;30 bytes, we might as well put it in BIOS_DATA
  3973                                  
  3974                                  V86_Crit_SetFocus:			
  3975 00000813 57                      		push	di
  3976 00000814 06                      		push	es
  3977 00000815 53                      		push	bx
  3978 00000816 50                      		push	ax
  3979 00000817 31FF                    		xor	di,di
  3980 00000819 8EC7                    		mov	es,di
  3981 0000081B BB1500                  		mov	bx,15h		; Device ID of DOSMGR device
  3982 0000081E B88416                  		mov	ax,1684h	; Get API entry	point
  3983 00000821 CD2F                    		int	2Fh		; - Multiplex -	MS WINDOWS - GET DEVICE	API ENTRY POINT
  3984                                  					; BX = virtual device (VxD) ID,	ES:DI =	0000h:0000h
  3985                                  					; Return: ES:DI	-> VxD API entry point,	or 0:0 if the VxD does not support an API
  3986 00000823 8CC0                    		mov	ax, es
  3987 00000825 09F8                    		or	ax, di
  3988 00000827 740A                    		jz	short Skip	; Here,	es:di is address of API	routine.
  3989                                  					; Set up stack frame to	simulate a call.
  3990 00000829 0E                      		push	cs
  3991                                  		;;mov	ax,offset Skip
  3992                                  		;mov	ax,Skip
  3993                                  		;push	ax
  3994                                  		; 03/10/2023 - Retro DOS v5.0
  3995 0000082A 68[3308]                		push	Skip
  3996 0000082D 06                      		push	es
  3997 0000082E 57                      		push	di		; API far call address
  3998 0000082F B80100                  		mov	ax,1		; SetFocus function number
  3999 00000832 CB                      		retf			; do the call
  4000                                  ;-----------------------------------------------------------------------------
  4001                                  
  4002                                  Skip:					
  4003 00000833 58                      		pop	ax
  4004 00000834 5B                      		pop	bx
  4005 00000835 07                      		pop	es
  4006 00000836 5F                      		pop	di
  4007 00000837 CB                      		retf
  4008                                  
  4009                                  ;End WIN386 support
  4010                                  
  4011                                  ; ----------------------------------------------------------------------------
  4012                                  
  4013                                  ; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  4014                                  %if 0
  4015                                  
  4016                                  FreeHMAPtr:	dw 0FFFFh		
  4017                                  ;MoveDOSIntoHMA: dd 46D0A84h 		; FTryToMovDOSHi
  4018                                  					; (procedure in	SYSINIT	segment)
  4019                                  ; 17/10/2022
  4020                                  MoveDOSIntoHMA:	dw FTRYTOMOVDOSHI	; 09/12/2022
  4021                                  		dw SYSINITSEG		; 08/08/2023
  4022                                  					; 0544h for PCDOS 7.1 IBMBIO.COM
  4023                                  					; 0473h for MSDOS 6.21 IO.SYS
  4024                                  ;SR;
  4025                                  ; A communication block has been setup between the DOS and the BIOS. All
  4026                                  ;the data starting from SysinitPresent will be part of the data block. 
  4027                                  ;Right now, this is the only data being communicated. It can be expanded 
  4028                                  ;later to add more stuff
  4029                                  
  4030                                  SysinitPresent:	db 0
  4031                                  		
  4032                                  endfloppy:	db 0, 0
  4033                                  
  4034                                  %endif
  4035                                  	
  4036                                  	; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM
  4037                                  
  4038                                  	endfloppy:
  4039 00000838 00                      		db 0
  4040                                  
  4041                                  	; 03/10/2023
  4042                                  
  4043                                  numxdiv	equ ($-BData_start)
  4044                                  numxmod	equ (numxdiv % 16)
  4045                                  
  4046                                  %if (numxmod>0) & (numxmod<16)
  4047 00000839 00<rep 7h>              		times (16-numxmod) db 0
  4048                                  %endif
  4049                                  
  4050                                  ; ----------------------------------------------------------------------------			
  4051                                  
  4052                                  ; Bios_Data ends
  4053                                  	
  4054                                  ; Possibly disposable BIOS data
  4055                                  ; This data follows the	regular	BIOS data,
  4056                                  ; and is part of the same group.
  4057                                  
  4058                                  ; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM
  4059                                  ;nul_vid:	db 'NO NAME    ',0 	; null volume id
  4060                                  ;tmp_vid:	db 'NO NAME    ',0	; vid scratch buffer
  4061                                  
  4062                                  ; 03/10/2023
  4063 00000840 4E4F204E414D452020-     tmp_vid:	db 'NO NAME    '
  4063 00000849 2020               
  4064                                  
  4065 0000084B 80                      harddrv:	db 80h			
  4066                                  
  4067                                  end96tpi:
  4068                                  
  4069                                  ; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  4070                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:084Ch ('bdss:' address)
  4071                                  
  4072                                  ;;*********************************************************************
  4073                                  ;;memory allocation for bdss
  4074                                  ;;*********************************************************************
  4075                                  ;
  4076                                  ;;max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
  4077                                  ;
  4078                                  ;;bdss	BDS_STRUC (2+max_mini_dsk_num) dup (<>)	; currently max. 25
  4079                                  ;
  4080                                  ;bdss:	times BDS.size*(2+max_mini_dsk_num) db 0
  4081                                  
  4082                                  
  4083                                  ; 09/12/2023
  4084                                  %if 1
  4085                                  ; Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM BDS structure (FAT32 adaptation)
  4086                                  
  4087 0000084C FFFF                    bdss:		dw 0FFFFh		; ...
  4088                                  					; max_mini_dsk_num equ 23
  4089                                  					; BDS_STRUC (2+max_mini_dsk_num) dup (<>)
  4090                                  					; currently max. 25
  4091                                  					; (MSDOS 6 BDS structure size = 100 bytes)
  4092                                  					; (PCDOS 7.1 BDS structure size = 150 bytes)
  4093                                  					; BDS.link
  4094 0000084E 0000                    		dw 0
  4095 00000850 50                      		db 80			; BDS.drivenum
  4096 00000851 03                      		db 3			; BDS.drivelet
  4097 00000852 0002                    		dw 512			; BDS.BPB (BDS offset 6)
  4098                                  					; 53 bytes BPB for FAT32 fs
  4099                                  					; 25 bytes BPB for FAT16 and FAT12 fs
  4100                                  					; .bytespersec
  4101 00000854 01                      		db 1			; .secperclus
  4102 00000855 0100                    		dw 1			; .resectors
  4103 00000857 02                      		db 2			; .fats
  4104 00000858 1000                    		dw 16			; .direntries
  4105 0000085A 0000                    		dw 0			; .totalsec16
  4106 0000085C F8                      		db 0F8h			; .media
  4107 0000085D 0100                    		dw 1			; .fatsecs16
  4108 0000085F 0000                    		dw 0			; .secpertrack
  4109 00000861 0000                    		dw 0			; .heads
  4110 00000863 00000000                		dd 0			; .hiddensectors
  4111 00000867 00000000                		dd 0			; .totalsecs32
  4112                                  					; (End of FAT12/FAT16 BPB)
  4113                                  					;
  4114                                  					; FAT32 extensions to BDS
  4115 0000086B 00000000                		dd 0			; .fatsecs32 ; BPB_FATSz32 (BDS offset 31)
  4116 0000086F 0000                    		dw 0			; .extflags ; BPB_ExtFlags
  4117 00000871 0000                    		dw 0			; .fsver ; BPB_FSVer
  4118 00000873 00000000                		dd 0			; .rootdirclust ; BPB_RootClus (BDS offset 39)
  4119 00000877 FFFF                    		dw 0FFFFh		; .fsinfo ; BPB_FSInfo ; initialized to -1
  4120 00000879 FFFF                    		dw 0FFFFh		; .bkbootsec ; BPB_BkBootSec ; initialized to -1
  4121 0000087B 00<rep Ch>              		times 12 db 0		; .reserved ; BPB_Reserved (12 zero bytes)
  4122 00000887 00                      		db 0			; BDS.fatsiz (BDS offset 59)
  4123 00000888 0000                    		dw 0			; BDS.opcnt
  4124 0000088A 03                      		db 3
  4125 0000088B 2000                    		dw 20h			; BDS.flags (BDS offset 63)
  4126 0000088D 2800                    		dw 40
  4127 0000088F 00<rep 25h>             		times 37 db 0
  4128 000008B4 FFFFFFFF                		dd 0FFFFFFFFh
  4129 000008B8 00<rep Ch>              		times 12 db 0
  4130 000008C4 FF                      		db -1			; BDS.track (BDS offset 120)
  4131 000008C5 0100                    		dw 1			; BDS.tim_lo ; BDS.bdsm_ismini
  4132 000008C7 0000                    		dw 0			; BDS.tim_hi
  4133 000008C9 4E4F204E414D452020-     		db 'NO NAME    ',0	; BDS.volid
  4133 000008D2 202000             
  4134 000008D5 00000000                		dd 0			; BDS.vol_serial (BDS offset 137)
  4135 000008D9 464154313220202000      		db 'FAT12   ',0		; BDS.filesys_id
  4136 000008E2 FFFF                    bds_1:		dw 0FFFFh
  4137 000008E4 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4137 000008ED 0210000000F8       
  4138 000008F3 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4138 000008FC 000000000000000000 
  4139 00000905 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4139 0000090E FFFFFF0000         
  4140 00000913 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4140 0000091C 0000000003200028   
  4141 00000924 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4141 0000092D 000000000000000000 
  4142 00000936 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4142 0000093F 000000000000000000 
  4143 00000948 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4143 00000951 0000000000         
  4144 00000956 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4144 0000095F 4E4F204E41         
  4145 00000964 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4145 0000096D 00004641           
  4146 00000971 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4147 00000978 FFFF                    bds_2:		dw 0FFFFh
  4148 0000097A 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4148 00000983 0210000000F8       
  4149 00000989 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4149 00000992 000000000000000000 
  4150 0000099B 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4150 000009A4 FFFFFF0000         
  4151 000009A9 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4151 000009B2 0000000003200028   
  4152 000009BA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4152 000009C3 000000000000000000 
  4153 000009CC 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4153 000009D5 000000000000000000 
  4154 000009DE 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4154 000009E7 0000000000         
  4155 000009EC 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4155 000009F5 4E4F204E41         
  4156 000009FA 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4156 00000A03 00004641           
  4157 00000A07 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4158 00000A0E FFFF                    bds_3:		dw 0FFFFh
  4159 00000A10 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4159 00000A19 0210000000F8       
  4160 00000A1F 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4160 00000A28 000000000000000000 
  4161 00000A31 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4161 00000A3A FFFFFF0000         
  4162 00000A3F 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4162 00000A48 0000000003200028   
  4163 00000A50 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4163 00000A59 000000000000000000 
  4164 00000A62 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4164 00000A6B 000000000000000000 
  4165 00000A74 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4165 00000A7D 0000000000         
  4166 00000A82 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4166 00000A8B 4E4F204E41         
  4167 00000A90 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4167 00000A99 00004641           
  4168 00000A9D 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4169 00000AA4 FFFF                    bds_4:		dw 0FFFFh
  4170 00000AA6 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4170 00000AAF 0210000000F8       
  4171 00000AB5 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4171 00000ABE 000000000000000000 
  4172 00000AC7 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4172 00000AD0 FFFFFF0000         
  4173 00000AD5 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4173 00000ADE 0000000003200028   
  4174 00000AE6 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4174 00000AEF 000000000000000000 
  4175 00000AF8 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4175 00000B01 000000000000000000 
  4176 00000B0A 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4176 00000B13 0000000000         
  4177 00000B18 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4177 00000B21 4E4F204E41         
  4178 00000B26 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4178 00000B2F 00004641           
  4179 00000B33 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4180 00000B3A FFFF                    		dw 0FFFFh
  4181 00000B3C 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4181 00000B45 0210000000F8       
  4182 00000B4B 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4182 00000B54 000000000000000000 
  4183 00000B5D 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4183 00000B66 FFFFFF0000         
  4184 00000B6B 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4184 00000B74 0000000003200028   
  4185 00000B7C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4185 00000B85 000000000000000000 
  4186 00000B8E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4186 00000B97 000000000000000000 
  4187 00000BA0 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4187 00000BA9 0000000000         
  4188 00000BAE 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4188 00000BB7 4E4F204E41         
  4189 00000BBC 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4189 00000BC5 00004641           
  4190 00000BC9 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4191 00000BD0 FFFF                    		dw 0FFFFh
  4192 00000BD2 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4192 00000BDB 0210000000F8       
  4193 00000BE1 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4193 00000BEA 000000000000000000 
  4194 00000BF3 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4194 00000BFC FFFFFF0000         
  4195 00000C01 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4195 00000C0A 0000000003200028   
  4196 00000C12 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4196 00000C1B 000000000000000000 
  4197 00000C24 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4197 00000C2D 000000000000000000 
  4198 00000C36 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4198 00000C3F 0000000000         
  4199 00000C44 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4199 00000C4D 4E4F204E41         
  4200 00000C52 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4200 00000C5B 00004641           
  4201 00000C5F 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4202 00000C66 FFFF                    		dw 0FFFFh
  4203 00000C68 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4203 00000C71 0210000000F8       
  4204 00000C77 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4204 00000C80 000000000000000000 
  4205 00000C89 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4205 00000C92 FFFFFF0000         
  4206 00000C97 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4206 00000CA0 0000000003200028   
  4207 00000CA8 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4207 00000CB1 000000000000000000 
  4208 00000CBA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4208 00000CC3 000000000000000000 
  4209 00000CCC 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4209 00000CD5 0000000000         
  4210 00000CDA 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4210 00000CE3 4E4F204E41         
  4211 00000CE8 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4211 00000CF1 00004641           
  4212 00000CF5 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4213 00000CFC FFFF                    		dw 0FFFFh
  4214 00000CFE 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4214 00000D07 0210000000F8       
  4215 00000D0D 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4215 00000D16 000000000000000000 
  4216 00000D1F 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4216 00000D28 FFFFFF0000         
  4217 00000D2D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4217 00000D36 0000000003200028   
  4218 00000D3E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4218 00000D47 000000000000000000 
  4219 00000D50 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4219 00000D59 000000000000000000 
  4220 00000D62 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4220 00000D6B 0000000000         
  4221 00000D70 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4221 00000D79 4E4F204E41         
  4222 00000D7E 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4222 00000D87 00004641           
  4223 00000D8B 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4224 00000D92 FFFF                    		dw 0FFFFh
  4225 00000D94 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4225 00000D9D 0210000000F8       
  4226 00000DA3 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4226 00000DAC 000000000000000000 
  4227 00000DB5 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4227 00000DBE FFFFFF0000         
  4228 00000DC3 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4228 00000DCC 0000000003200028   
  4229 00000DD4 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4229 00000DDD 000000000000000000 
  4230 00000DE6 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4230 00000DEF 000000000000000000 
  4231 00000DF8 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4231 00000E01 0000000000         
  4232 00000E06 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4232 00000E0F 4E4F204E41         
  4233 00000E14 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4233 00000E1D 00004641           
  4234 00000E21 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4235 00000E28 FFFF                    		dw 0FFFFh
  4236 00000E2A 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4236 00000E33 0210000000F8       
  4237 00000E39 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4237 00000E42 000000000000000000 
  4238 00000E4B 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4238 00000E54 FFFFFF0000         
  4239 00000E59 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4239 00000E62 0000000003200028   
  4240 00000E6A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4240 00000E73 000000000000000000 
  4241 00000E7C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4241 00000E85 000000000000000000 
  4242 00000E8E 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4242 00000E97 0000000000         
  4243 00000E9C 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4243 00000EA5 4E4F204E41         
  4244 00000EAA 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4244 00000EB3 00004641           
  4245 00000EB7 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4246 00000EBE FFFF                    		dw 0FFFFh
  4247 00000EC0 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4247 00000EC9 0210000000F8       
  4248 00000ECF 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4248 00000ED8 000000000000000000 
  4249 00000EE1 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4249 00000EEA FFFFFF0000         
  4250 00000EEF 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4250 00000EF8 0000000003200028   
  4251 00000F00 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4251 00000F09 000000000000000000 
  4252 00000F12 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4252 00000F1B 000000000000000000 
  4253 00000F24 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4253 00000F2D 0000000000         
  4254 00000F32 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4254 00000F3B 4E4F204E41         
  4255 00000F40 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4255 00000F49 00004641           
  4256 00000F4D 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4257 00000F54 FFFF                    		dw 0FFFFh
  4258 00000F56 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4258 00000F5F 0210000000F8       
  4259 00000F65 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4259 00000F6E 000000000000000000 
  4260 00000F77 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4260 00000F80 FFFFFF0000         
  4261 00000F85 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4261 00000F8E 0000000003200028   
  4262 00000F96 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4262 00000F9F 000000000000000000 
  4263 00000FA8 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4263 00000FB1 000000000000000000 
  4264 00000FBA 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4264 00000FC3 0000000000         
  4265 00000FC8 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4265 00000FD1 4E4F204E41         
  4266 00000FD6 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4266 00000FDF 00004641           
  4267 00000FE3 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4268 00000FEA FFFF                    		dw 0FFFFh
  4269 00000FEC 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4269 00000FF5 0210000000F8       
  4270 00000FFB 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4270 00001004 000000000000000000 
  4271 0000100D 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4271 00001016 FFFFFF0000         
  4272 0000101B 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4272 00001024 0000000003200028   
  4273 0000102C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4273 00001035 000000000000000000 
  4274 0000103E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4274 00001047 000000000000000000 
  4275 00001050 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4275 00001059 0000000000         
  4276 0000105E 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4276 00001067 4E4F204E41         
  4277 0000106C 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4277 00001075 00004641           
  4278 00001079 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4279 00001080 FFFF                    		dw 0FFFFh
  4280 00001082 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4280 0000108B 0210000000F8       
  4281 00001091 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4281 0000109A 000000000000000000 
  4282 000010A3 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4282 000010AC FFFFFF0000         
  4283 000010B1 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4283 000010BA 0000000003200028   
  4284 000010C2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4284 000010CB 000000000000000000 
  4285 000010D4 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4285 000010DD 000000000000000000 
  4286 000010E6 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4286 000010EF 0000000000         
  4287 000010F4 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4287 000010FD 4E4F204E41         
  4288 00001102 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4288 0000110B 00004641           
  4289 0000110F 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4290 00001116 FFFF                    		dw 0FFFFh
  4291 00001118 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4291 00001121 0210000000F8       
  4292 00001127 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4292 00001130 000000000000000000 
  4293 00001139 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4293 00001142 FFFFFF0000         
  4294 00001147 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4294 00001150 0000000003200028   
  4295 00001158 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4295 00001161 000000000000000000 
  4296 0000116A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4296 00001173 000000000000000000 
  4297 0000117C 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4297 00001185 0000000000         
  4298 0000118A 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4298 00001193 4E4F204E41         
  4299 00001198 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4299 000011A1 00004641           
  4300 000011A5 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4301 000011AC FFFF                    		dw 0FFFFh
  4302 000011AE 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4302 000011B7 0210000000F8       
  4303 000011BD 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4303 000011C6 000000000000000000 
  4304 000011CF 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4304 000011D8 FFFFFF0000         
  4305 000011DD 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4305 000011E6 0000000003200028   
  4306 000011EE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4306 000011F7 000000000000000000 
  4307 00001200 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4307 00001209 000000000000000000 
  4308 00001212 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4308 0000121B 0000000000         
  4309 00001220 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4309 00001229 4E4F204E41         
  4310 0000122E 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4310 00001237 00004641           
  4311 0000123B 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4312 00001242 FFFF                    		dw 0FFFFh
  4313 00001244 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4313 0000124D 0210000000F8       
  4314 00001253 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4314 0000125C 000000000000000000 
  4315 00001265 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4315 0000126E FFFFFF0000         
  4316 00001273 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4316 0000127C 0000000003200028   
  4317 00001284 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4317 0000128D 000000000000000000 
  4318 00001296 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4318 0000129F 000000000000000000 
  4319 000012A8 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4319 000012B1 0000000000         
  4320 000012B6 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4320 000012BF 4E4F204E41         
  4321 000012C4 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4321 000012CD 00004641           
  4322 000012D1 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4323 000012D8 FFFF                    		dw 0FFFFh
  4324 000012DA 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4324 000012E3 0210000000F8       
  4325 000012E9 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4325 000012F2 000000000000000000 
  4326 000012FB 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4326 00001304 FFFFFF0000         
  4327 00001309 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4327 00001312 0000000003200028   
  4328 0000131A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4328 00001323 000000000000000000 
  4329 0000132C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4329 00001335 000000000000000000 
  4330 0000133E 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4330 00001347 0000000000         
  4331 0000134C 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4331 00001355 4E4F204E41         
  4332 0000135A 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4332 00001363 00004641           
  4333 00001367 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4334 0000136E FFFF                    		dw 0FFFFh
  4335 00001370 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4335 00001379 0210000000F8       
  4336 0000137F 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4336 00001388 000000000000000000 
  4337 00001391 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4337 0000139A FFFFFF0000         
  4338 0000139F 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4338 000013A8 0000000003200028   
  4339 000013B0 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4339 000013B9 000000000000000000 
  4340 000013C2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4340 000013CB 000000000000000000 
  4341 000013D4 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4341 000013DD 0000000000         
  4342 000013E2 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4342 000013EB 4E4F204E41         
  4343 000013F0 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4343 000013F9 00004641           
  4344 000013FD 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4345 00001404 FFFF                    		dw 0FFFFh
  4346 00001406 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4346 0000140F 0210000000F8       
  4347 00001415 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4347 0000141E 000000000000000000 
  4348 00001427 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4348 00001430 FFFFFF0000         
  4349 00001435 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4349 0000143E 0000000003200028   
  4350 00001446 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4350 0000144F 000000000000000000 
  4351 00001458 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4351 00001461 000000000000000000 
  4352 0000146A 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4352 00001473 0000000000         
  4353 00001478 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4353 00001481 4E4F204E41         
  4354 00001486 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4354 0000148F 00004641           
  4355 00001493 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4356 0000149A FFFF                    		dw 0FFFFh
  4357 0000149C 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4357 000014A5 0210000000F8       
  4358 000014AB 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4358 000014B4 000000000000000000 
  4359 000014BD 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4359 000014C6 FFFFFF0000         
  4360 000014CB 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4360 000014D4 0000000003200028   
  4361 000014DC 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4361 000014E5 000000000000000000 
  4362 000014EE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4362 000014F7 000000000000000000 
  4363 00001500 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4363 00001509 0000000000         
  4364 0000150E 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4364 00001517 4E4F204E41         
  4365 0000151C 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4365 00001525 00004641           
  4366 00001529 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4367 00001530 FFFF                    		dw 0FFFFh
  4368 00001532 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4368 0000153B 0210000000F8       
  4369 00001541 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4369 0000154A 000000000000000000 
  4370 00001553 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4370 0000155C FFFFFF0000         
  4371 00001561 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4371 0000156A 0000000003200028   
  4372 00001572 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4372 0000157B 000000000000000000 
  4373 00001584 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4373 0000158D 000000000000000000 
  4374 00001596 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4374 0000159F 0000000000         
  4375 000015A4 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4375 000015AD 4E4F204E41         
  4376 000015B2 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4376 000015BB 00004641           
  4377 000015BF 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4378 000015C6 FFFF                    		dw 0FFFFh
  4379 000015C8 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4379 000015D1 0210000000F8       
  4380 000015D7 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4380 000015E0 000000000000000000 
  4381 000015E9 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4381 000015F2 FFFFFF0000         
  4382 000015F7 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4382 00001600 0000000003200028   
  4383 00001608 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4383 00001611 000000000000000000 
  4384 0000161A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4384 00001623 000000000000000000 
  4385 0000162C 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4385 00001635 0000000000         
  4386 0000163A 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4386 00001643 4E4F204E41         
  4387 00001648 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4387 00001651 00004641           
  4388 00001655 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4389 0000165C FFFF                    bds_24:		dw 0FFFFh
  4390 0000165E 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4390 00001667 0210000000F8       
  4391 0000166D 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4391 00001676 000000000000000000 
  4392 0000167F 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4392 00001688 FFFFFF0000         
  4393 0000168D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4393 00001696 0000000003200028   
  4394 0000169E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4394 000016A7 000000000000000000 
  4395 000016B0 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4395 000016B9 000000000000000000 
  4396 000016C2 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4396 000016CB 0000000000         
  4397 000016D0 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4397 000016D9 4E4F204E41         
  4398 000016DE 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4398 000016E7 00004641           
  4399 000016EB 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4400                                  
  4401                                  %endif
  4402                                  
  4403                                  ; 09/12/2023
  4404                                  %if 0
  4405                                  ; Retro DOS v4.2 (MSDOS 6.22) IO.SYS BDS structure
  4406                                  
  4407                                  bdss:		dw 0FFFFh		
  4408                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4409                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4410                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4411                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4412                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4413                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4414                                  		db 32h,	20h, 20h, 20h, 0
  4415                                  		dw 0FFFFh
  4416                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4417                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4418                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4419                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4420                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4421                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4422                                  		db 32h,	20h, 20h, 20h, 0
  4423                                  		dw 0FFFFh
  4424                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4425                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4426                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4427                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4428                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4429                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4430                                  		db 32h,	20h, 20h, 20h, 0
  4431                                  		dw 0FFFFh
  4432                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4433                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4434                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4435                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4436                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4437                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4438                                  		db 32h,	20h, 20h, 20h, 0
  4439                                  		dw 0FFFFh
  4440                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4441                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4442                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4443                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4444                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4445                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4446                                  		db 32h,	20h, 20h, 20h, 0
  4447                                  		dw 0FFFFh
  4448                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4449                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4450                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4451                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4452                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4453                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4454                                  		db 32h,	20h, 20h, 20h, 0
  4455                                  		dw 0FFFFh
  4456                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4457                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4458                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4459                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4460                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4461                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4462                                  		db 32h,	20h, 20h, 20h, 0
  4463                                  		dw 0FFFFh
  4464                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4465                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4466                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4467                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4468                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4469                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4470                                  		db 32h,	20h, 20h, 20h, 0
  4471                                  		dw 0FFFFh
  4472                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4473                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4474                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4475                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4476                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4477                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4478                                  		db 32h,	20h, 20h, 20h, 0
  4479                                  		dw 0FFFFh
  4480                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4481                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4482                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4483                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4484                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4485                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4486                                  		db 32h,	20h, 20h, 20h, 0
  4487                                  		dw 0FFFFh
  4488                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4489                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4490                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4491                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4492                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4493                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4494                                  		db 32h,	20h, 20h, 20h, 0
  4495                                  		dw 0FFFFh
  4496                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4497                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4498                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4499                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4500                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4501                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4502                                  		db 32h,	20h, 20h, 20h, 0
  4503                                  		dw 0FFFFh
  4504                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4505                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4506                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4507                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4508                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4509                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4510                                  		db 32h,	20h, 20h, 20h, 0
  4511                                  		dw 0FFFFh
  4512                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4513                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4514                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4515                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4516                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4517                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4518                                  		db 32h,	20h, 20h, 20h, 0
  4519                                  		dw 0FFFFh
  4520                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4521                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4522                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4523                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4524                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4525                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4526                                  		db 32h,	20h, 20h, 20h, 0
  4527                                  		dw 0FFFFh
  4528                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4529                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4530                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4531                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4532                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4533                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4534                                  		db 32h,	20h, 20h, 20h, 0
  4535                                  		dw 0FFFFh
  4536                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4537                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4538                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4539                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4540                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4541                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4542                                  		db 32h,	20h, 20h, 20h, 0
  4543                                  		dw 0FFFFh
  4544                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4545                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4546                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4547                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4548                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4549                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4550                                  		db 32h,	20h, 20h, 20h, 0
  4551                                  		dw 0FFFFh
  4552                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4553                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4554                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4555                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4556                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4557                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4558                                  		db 32h,	20h, 20h, 20h, 0
  4559                                  		dw 0FFFFh
  4560                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4561                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4562                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4563                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4564                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4565                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4566                                  		db 32h,	20h, 20h, 20h, 0
  4567                                  		dw 0FFFFh
  4568                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4569                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4570                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4571                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4572                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4573                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4574                                  		db 32h,	20h, 20h, 20h, 0
  4575                                  		dw 0FFFFh
  4576                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4577                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4578                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4579                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4580                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4581                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4582                                  		db 32h,	20h, 20h, 20h, 0
  4583                                  		dw 0FFFFh
  4584                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4585                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4586                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4587                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4588                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4589                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4590                                  		db 32h,	20h, 20h, 20h, 0
  4591                                  		dw 0FFFFh
  4592                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4593                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4594                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4595                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4596                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4597                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4598                                  		db 32h,	20h, 20h, 20h, 0
  4599                                  		dw 0FFFFh
  4600                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4601                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4602                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4603                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4604                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4605                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4606                                  		db 32h,	20h, 20h, 20h, 0
  4607                                  		db 0
  4608                                  %endif
  4609                                  
  4610                                  ;---------------------------------------------------------------------------
  4611                                  ; Possibly disposable data, goes at end of data group
  4612                                  ;***************************************************************************
  4613                                  
  4614                                  ; Possibly disposable data, goes at end of data group
  4615                                  
  4616                                  ;***	ibm_disk_io - main routine, fixes at rom bug
  4617                                  ;
  4618                                  ;	entry:	(ah) = function, 02 or 0a for read.
  4619                                  ;		(dl) = drive number (80h or 81h).
  4620                                  ;		(dh) = head number.
  4621                                  ;		(ch) = cylinder number.
  4622                                  ;		(cl) = sector number (high 2 bits has cylinder number).
  4623                                  ;		(al) = number of sectors.
  4624                                  ;		(es:bx) = address of read buffer.
  4625                                  ;		for more on register contents see rom bios listing.
  4626                                  ;		stack set up for return by an iret.
  4627                                  ;
  4628                                  ;	exit:	(ah) = status of current operation.
  4629                                  ;		(cy) = 1 if failed, 0 if successful.
  4630                                  ;		for other register contents see rom bios listing.
  4631                                  ;
  4632                                  ;	uses:	
  4633                                  ;
  4634                                  ;
  4635                                  ;	warning: uses old13 vector for non-read calls.
  4636                                  ;		does direct calls to the at rom.
  4637                                  ;		does segment arithmatic.
  4638                                  ;
  4639                                  ;	effects: performs disk i/o operation.
  4640                                  
  4641                                  ; 16/10/2022
  4642                                  ; 28/05/2019
  4643                                  cmd_block equ 42h ; ROMBIOS DATA segment (40h) offset 42h ; 13/12/2022
  4644                                  
  4645                                  ;* offsets into cmd_block for registers
  4646                                  
  4647                                  pre_comp equ 0	;write pre-compensation
  4648                                  sec_cnt	 equ 1	;sector count
  4649                                  sec_num	 equ 2	;sector number
  4650                                  cyl_low	 equ 3	;cylinder number, low part
  4651                                  cyl_high equ 4	;cylinder number, high part
  4652                                  drv_head equ 5	;drive/head (bit 7 = ecc mode, bit 5 = 512 byte sectors, 
  4653                                  		;            bit 4 = drive number, bits 3-0 have head number)
  4654                                  cmd_reg  equ 6	;command register
  4655                                  
  4656                                  ; 01/10/2022
  4657                                  disk_status1	equ 74h
  4658                                  hf_num		equ 75h
  4659                                  control_byte	equ 76h
  4660                                  
  4661                                  ibm_disk_io:				
  4662 000016F2 80FA80                  		cmp	dl, 80h		; main routine,	fixes at rom bug
  4663 000016F5 720A                    		jb	short atd1	; pass through floppy disk calls. 
  4664 000016F7 80FC02                  		cmp	ah, 2
  4665 000016FA 740A                    		jz	short atd2	; intercept call 02 (read sectors).
  4666 000016FC 80FC0A                  		cmp	ah, 0Ah
  4667 000016FF 7405                    		jz	short atd2	; and call 0Ah (read long).
  4668                                  atd1:
  4669 00001701 2EFF2E[0601]            		jmp	far [cs:Old13]					
  4670                                  		;jmp	cs:Old13	; use rom int 13h handler
  4671                                  ;-----------------------------------------------------------------------------
  4672                                  
  4673                                  atd2:					
  4674 00001706 53                      		push	bx
  4675 00001707 51                      		push	cx
  4676 00001708 52                      		push	dx
  4677 00001709 57                      		push	di
  4678 0000170A 1E                      		push	ds
  4679 0000170B 06                      		push	es
  4680 0000170C 50                      		push	ax
  4681 0000170D B84000                  		mov	ax, 40h		; bioseg (rombios data segment)
  4682                                  					; establish bios segment addressing
  4683 00001710 8ED8                    		mov	ds, ax
  4684                                  		; 16/10/2022
  4685 00001712 C606740000              		mov	byte [disk_status1], 0
  4686                                  		;mov	byte ptr ds:74h, 0 ; [disk_status1]
  4687                                  					; initially no error code.
  4688 00001717 80E27F                  		and	dl, 7Fh		; mask to hard disk number
  4689 0000171A 3A167500                		cmp	dl, [hf_num]
  4690                                  		;cmp	dl, ds:75h	; [hf_num] ; 40h:75h
  4691 0000171E 7207                    		jb	short atd3	; disk number in range
  4692                                  		;mov	byte ptr ds:74h, 1 ; bad_disk
  4693 00001720 C606740001              		mov	byte [disk_status1], 1
  4694 00001725 EB20                    		jmp	short atd4	; disk number out of range error,
  4695                                  					; return
  4696                                  ; ----------------------------------------------------------------------------
  4697                                  
  4698                                  atd3:					
  4699 00001727 53                      		push	bx
  4700 00001728 8CC0                    		mov	ax, es
  4701 0000172A C1EB04                  		shr	bx, 4		; make es:bx to seg:000x form.
  4702 0000172D 01D8                    		add	ax, bx
  4703 0000172F 8EC0                    		mov	es, ax
  4704 00001731 5B                      		pop	bx
  4705 00001732 83E30F                  		and	bx, 0Fh
  4706 00001735 0E                      		push	cs
  4707 00001736 E8DF00                  		call	check_dma
  4708 00001739 720C                    		jb	short atd4	; abort if dma across segment boundary
  4709 0000173B 58                      		pop	ax
  4710 0000173C 50                      		push	ax
  4711 0000173D E81A00                  		call	setcmd		; set up command block for disk op
  4712 00001740 BAF603                  		mov	dx, 3F6h	; hf_reg_port 
  4713 00001743 EE                      		out	dx, al		; write out command modifier
  4714 00001744 E86B00                  		call	docmd		; carry out command
  4715                                  ; ----------------------------------------------------------------------------
  4716                                  
  4717                                  atd4:	
  4718                                  
  4719                                  ;  new code - let logical or clear carry and then set carry if ah!=0
  4720                                  ;	      and save a couple bytes while were at it.
  4721                                  				
  4722 00001747 58                      		pop	ax
  4723                                  		;mov	ah, ds:74h	; [disk_status1]
  4724 00001748 8A267400                		mov	ah, [disk_status1]
  4725 0000174C 08E4                    		or	ah, ah
  4726 0000174E 7401                    		jz	short atd5
  4727 00001750 F9                      		stc
  4728                                  atd5:					
  4729 00001751 07                      		pop	es
  4730 00001752 1F                      		pop	ds
  4731 00001753 5F                      		pop	di
  4732 00001754 5A                      		pop	dx
  4733 00001755 59                      		pop	cx
  4734 00001756 5B                      		pop	bx
  4735 00001757 CA0200                  		retf	2		; far return, dropping flags
  4736                                  
  4737                                  ; =============== S U B	R O U T	I N E ========================================
  4738                                  
  4739                                  ;***	setcmd - set up cmd_block for the disk operation
  4740                                  ;
  4741                                  ;	entry:	(ds) = bios data segment.
  4742                                  ;		(es:bx) in seg:000x form.
  4743                                  ;		other registers as in int 13h call
  4744                                  ;	
  4745                                  ;	exit:	cmd_block set up for disk read call.
  4746                                  ;		control_byte set up for disk operation.
  4747                                  ;		(al) = control byte modifier
  4748                                  ;
  4749                                  ;	sets the fields of cmd_block using the register contents
  4750                                  ;	and the contents of the disk parameter block for the given drive.
  4751                                  ;
  4752                                  ;	warning: (ax) destroyed.
  4753                                  ;		does direct calls to the at rom.
  4754                                  
  4755                                  setcmd:		; proc near		
  4756                                  		;mov	ds:43h,	al	; [cmd_block+sec_cnt]
  4757                                  		; 16/10/2022
  4758 0000175A A24300                  		mov	[cmd_block+sec_cnt], al
  4759                                  		;mov	byte ptr ds:48h, 20h ; [cmd_block+cmd_reg]
  4760 0000175D C606480020              		mov	byte [cmd_block+cmd_reg], 20h ; assume function 02h (read)
  4761 00001762 80FC02                  		cmp	ah, 2
  4762 00001765 7405                    		jz	short setc1	; cmd_reg = 20h	if function 02h	(read)
  4763 00001767 C606480022              		mov	byte [cmd_block+cmd_reg], 22h
  4764                                  		;mov	byte ptr ds:48h, 22h ; [cmd_block+cmd_reg]
  4765                                  					; cmd_reg = 22h	if function 0Ah	(read long)
  4766                                  setc1:					
  4767 0000176C 88C8                    		mov	al, cl
  4768 0000176E 243F                    		and	al, 3Fh		; mask sector number
  4769                                  		;mov	ds:44h,	al	; [cmd_block+sec_num]
  4770                                  		;mov	ds:45h,	ch	; [cmd_block+cyl_low]
  4771 00001770 A24400                  		mov	[cmd_block+sec_num], al ; mov [44h],al
  4772 00001773 882E4500                		mov	[cmd_block+cyl_low], ch ; mov [45h],ch
  4773 00001777 88C8                    		mov	al, cl
  4774 00001779 C0E806                  		shr	al, 6		; get two high bits of cylinder	number
  4775                                  		;mov	ds:46h,	al	; [cmd_block+cyl_high]
  4776 0000177C A24600                  		mov	[cmd_block+cyl_high], al ; mov [46h],al
  4777 0000177F 89D0                    		mov	ax, dx
  4778 00001781 C0E004                  		shl	al, 4		; drive	number
  4779 00001784 80E40F                  		and	ah, 0Fh
  4780 00001787 08E0                    		or	al, ah		; head number
  4781 00001789 0CA0                    		or	al, 0A0h	; set ecc and 512 bytes	per sector
  4782                                  		;mov	ds:47h,	al	; [cmd_block+drv_head]
  4783 0000178B A24700                  		mov	[cmd_block+drv_head], al  ; mov [47h],al 
  4784 0000178E 06                      		push	es
  4785 0000178F 53                      		push	bx
  4786 00001790 0E                      		push	cs
  4787 00001791 E85C00                  		call	get_vec
  4788 00001794 268B4705                		mov	ax, [es:bx+5]	; [es:bx+fdp_precomp]
  4789                                  			 		; write pre-comp from disk parameters
  4790 00001798 C1E802                  		shr	ax, 2
  4791                                  		;mov	ds:42h,	al	; [cmd_block+pre_comp]
  4792 0000179B A24200                  		mov	[cmd_block+pre_comp], al ; mov [42h],al
  4793                                  					; only use low part
  4794 0000179E 268A4708                		mov	al, [es:bx+8]	; [es:bx+fdp_control]
  4795                                  					; control byte modifier
  4796 000017A2 5B                      		pop	bx
  4797 000017A3 07                      		pop	es
  4798                                  		;mov	ah, ds:76h	; [control_byte]
  4799 000017A4 8A267600                		mov	ah, [control_byte] ; mov ah,[76h]
  4800 000017A8 80E4C0                  		and	ah, 0C0h	; keep disable retry bits	
  4801 000017AB 08C4                    		or	ah, al
  4802                                  		;mov	ds:76h,	ah
  4803 000017AD 88267600                		mov	[control_byte], ah ; mov [76h],al
  4804 000017B1 C3                      		retn
  4805                                  
  4806                                  ; =============== S U B	R O U T	I N E ========================================
  4807                                  
  4808                                  ;***	docmd - carry out read operation to at hard disk
  4809                                  ;
  4810                                  ;	entry:	(es:bx) = address for read in data.
  4811                                  ;		cmd_block set up for disk read.
  4812                                  ;
  4813                                  ;	exit:	buffer at (es:bx) contains data read.
  4814                                  ;		disk_status1 set to error code (0 if success).
  4815                                  ;
  4816                                  ;	
  4817                                  ;
  4818                                  ;	warning: (ax), (bl), (cx), (dx), (di) destroyed.
  4819                                  ;		no check is made for dma boundary overrun.
  4820                                  ;
  4821                                  ;	effects: programs disk controller.
  4822                                  ;		performs disk input.
  4823                                  
  4824                                  docmd:		; proc near		
  4825 000017B2 89DF                    		mov	di, bx
  4826 000017B4 0E                      		push	cs
  4827 000017B5 E84000                  		call	command
  4828 000017B8 7535                    		jnz	short doc3
  4829                                  doc1:					
  4830 000017BA 0E                      		push	cs
  4831 000017BB E84200                  		call	waitt		; wait for controller to complete read
  4832 000017BE 752F                    		jnz	short doc3
  4833 000017C0 B90001                  		mov	cx, 256		; 256 words per sector
  4834 000017C3 BAF001                  		mov	dx, 1F0h	; hf_port
  4835 000017C6 FC                      		cld			; string op goes up
  4836 000017C7 FA                      		cli			; disable interrupts
  4837                                  					; (bug was forgetting this)
  4838                                  
  4839                                  ;	M062 -- some of these old machines have intermittent failures
  4840                                  ;		when the read is done at full speed. Instead of using
  4841                                  ;		a string rep instruction, we'll use a loop. There is
  4842                                  ;		a slight performance hit, but it only affects these
  4843                                  ;		very old machines with an exact date code match, and
  4844                                  ;		it makes said machines more reliable
  4845                                  ;
  4846                                  ;M062	repz	insw		;read in sector
  4847                                  
  4848                                  rsct_loop:				
  4849 000017C8 6D                      		insw
  4850 000017C9 E2FD                    		loop	rsct_loop
  4851 000017CB FB                      		sti
  4852                                  		; 16/10/2022
  4853 000017CC F606480002              		test	byte [cmd_block+cmd_reg], 02h
  4854                                  		;test	byte ptr ds:48h, 2 ; [cmd_block+cmd_reg]
  4855                                  					; (ds =	40h)
  4856 000017D1 7410                    		jz	short doc2	; no ecc bytes to read.
  4857 000017D3 0E                      		push	cs
  4858 000017D4 E83100                  		call	wait_drq	; wait for controller to complete read
  4859 000017D7 7216                    		jb	short doc3
  4860 000017D9 B90400                  		mov	cx, 4		; 4 bytes of ecc
  4861 000017DC BAF001                  		mov	dx, 1F0h	; hf_port
  4862 000017DF FA                      		cli
  4863 000017E0 F36C                    		rep insb		; read in ecc
  4864 000017E2 FB                      		sti
  4865                                  doc2:					
  4866 000017E3 0E                      		push	cs
  4867 000017E4 E82900                  		call	check_status
  4868 000017E7 7506                    		jnz	short doc3	; operation failed
  4869                                  		;dec	byte ptr ds:43h	; [cmd_block+sec_cnt]
  4870 000017E9 FE0E4300                		dec	byte [cmd_block+sec_cnt]
  4871 000017ED 75CB                    		jnz	short doc1	; loop while more sectors to read
  4872                                  doc3:					
  4873 000017EF C3                      		retn
  4874                                  
  4875                                  ; =============== S U B	R O U T	I N E ========================================
  4876                                  
  4877                                  ;***	define where the rom routines are actually located
  4878                                  ;	   in the buggy old AT BIOS that we might need to
  4879                                  ;	   install a special level of int13 handler for
  4880                                  
  4881                                  ; 16/10/2022
  4882                                  
  4883                                  romsegment 	equ 0F000h  ; segment
  4884                                  romcommand 	equ 2E1Eh   ; offset in romsegment
  4885                                  romwait		equ 2E7Fh   ; offset in romsegment
  4886                                  romwait_drq 	equ 2EE2h   ; offset in romsegment
  4887                                  romcheck_status equ 2EF8h   ; offset in romsegment
  4888                                  romcheck_dma 	equ 2F69h   ; offset in romsegment	
  4889                                  romget_vec	equ 2F8Eh   ; offset in romsegment
  4890                                  romfret		equ 0FF65h  ; far return in rom	
  4891                                  
  4892                                  ;***	get_vec - get pointer to hard disk parameters.
  4893                                  ;
  4894                                  ;	entry:	(dl) = low bit has hard disk number (0 or 1).
  4895                                  ;
  4896                                  ;	exit:	(es:bx) = address of disk parameters table.
  4897                                  ;
  4898                                  ;	uses:	ax for segment computation.
  4899                                  ;
  4900                                  ;	loads es:bx from interrupt table in low memory, vector 46h (disk 0)
  4901                                  ;	or 70h (disk 1).
  4902                                  ;	
  4903                                  ;	warning: (ax) destroyed.
  4904                                  ;		this does a direct call to the at rom.
  4905                                  
  4906                                  get_vec:	; proc near		
  4907                                  		;push	0FF65h		; romfret ; far	return in rom
  4908                                  		;jmp	far ptr	0F000h:2F8Eh
  4909                                  		; 16/10/2022
  4910 000017F0 6865FF                  		push	romfret		; far return in rom
  4911 000017F3 EA8E2F00F0              		jmp	romsegment:romget_vec
  4912                                  
  4913                                  ; =============== S U B	R O U T	I N E ========================================
  4914                                  
  4915                                  ;***	command - send contents of cmd_block to disk controller.
  4916                                  ;
  4917                                  ;	entry:	control_byte 
  4918                                  ;		cmd_block - set up with values for hard disk controller.
  4919                                  ;
  4920                                  ;	exit:	disk_status1 = error code.
  4921                                  ;		nz if error, zr for no error.
  4922                                  ;
  4923                                  ;
  4924                                  ;	warning: (ax), (cx), (dx) destroyed.
  4925                                  ;		does a direct call to the at rom.
  4926                                  ;
  4927                                  ;	effects: programs disk controller.
  4928                                  
  4929                                  command:	; proc near		
  4930                                  		;push	0FF65h		; romfret ; far	return in rom
  4931                                  		;jmp	far ptr	0F000h:2E1Eh
  4932                                  		; 16/10/2022
  4933 000017F8 6865FF                  		push	romfret		; far return in rom
  4934 000017FB EA1E2E00F0              		jmp	romsegment:romcommand
  4935                                  
  4936                                  ; =============== S U B	R O U T	I N E ========================================
  4937                                  
  4938                                  ;***	waitt - wait for disk interrupt
  4939                                  ;
  4940                                  ;	entry:	nothing.
  4941                                  ;
  4942                                  ;	exit:	disk_status1 = error code.
  4943                                  ;		nz if error, zr if no error.
  4944                                  ;
  4945                                  ;
  4946                                  ;	warning: (ax), (bl), (cx) destroyed.
  4947                                  ;		does a direct call to the at rom.
  4948                                  ;		
  4949                                  ;	effects: calls int 15h, function 9000h.
  4950                                  
  4951                                  waitt:		; proc near		
  4952                                  		;push	0FF65h		; romfret ; far	return in rom
  4953                                  		;jmp	far ptr	0F000h:2E7Fh
  4954                                  		; 16/10/2022
  4955 00001800 6865FF                  		push	romfret		; far return in rom
  4956 00001803 EA7F2E00F0              		jmp	romsegment:romwait
  4957                                  
  4958                                  ; =============== S U B	R O U T	I N E ========================================
  4959                                  
  4960                                  ;***	wait_drq - wait for data request.
  4961                                  ;
  4962                                  ;	entry:	nothing.
  4963                                  ;
  4964                                  ;	exit:	disk_status1 = error code.
  4965                                  ;		cy if error, nc if no error.
  4966                                  ;
  4967                                  ;	warning: (al), (cx), (dx) destroyed.
  4968                                  ;		does a direct call to the at rom.
  4969                                  
  4970                                  wait_drq:	; proc near		
  4971                                  		;push	0FF65h		; romfret ; far	return in rom
  4972                                  		;jmp	far ptr	0F000h:2EE2h
  4973                                  		; 16/10/2022
  4974 00001808 6865FF                  		push	romfret		; far return in rom
  4975 0000180B EAE22E00F0              		jmp	romsegment:romwait_drq
  4976                                  
  4977                                  ; =============== S U B	R O U T	I N E ========================================
  4978                                  
  4979                                  ;***	check_status - check hard disk status.
  4980                                  ;
  4981                                  ;	entry:	nothing.
  4982                                  ;
  4983                                  ;	exit:	disk_status1 = error code.
  4984                                  ;		nz if error, zr if no error.
  4985                                  ;
  4986                                  ;	warning: (ax), (cx), (dx) destroyed.
  4987                                  ;		does a direct call to the at rom.
  4988                                  
  4989                                  check_status:	; proc near		
  4990                                  		;push	0FF65h		; romfret ; far	return in rom
  4991                                  		;jmp	far ptr	0F000h:2EF8h
  4992                                  		; 16/10/2022
  4993 00001810 6865FF                  		push	romfret		; far return in rom
  4994 00001813 EAF82E00F0              		jmp	romsegment:romcheck_status
  4995                                  
  4996                                  ; =============== S U B	R O U T	I N E ========================================
  4997                                  
  4998                                  ;***	check_dma - check for dma overrun 64k segment.
  4999                                  ;
  5000                                  ;	entry:	(es:bx) = addr. of memory buffer in seg:000x form.
  5001                                  ;		cmd_block set up for operation.
  5002                                  ;
  5003                                  ;	exit:	disk_status1 - error code.
  5004                                  ;		cy if error, nc if no error.
  5005                                  ;
  5006                                  ;	warning: does a direct call to the at rom.
  5007                                  
  5008                                  check_dma:	; proc near		
  5009                                  		;push	0FF65h		; romfret ; far	return in rom
  5010                                  		;jmp	far ptr	0F000h:2F69h
  5011                                  		; 16/10/2022
  5012 00001818 6865FF                  		push	romfret		; far return in rom
  5013 0000181B EA692F00F0              		jmp	romsegment:romcheck_dma
  5014                                  
  5015                                  ;-----------------------------------------------------------------------------
  5016                                  
  5017                                  endatrom:
  5018                                  
  5019                                  ; ----------------------------------------------------------------------------
  5020                                  
  5021                                  ;; M015 -- begin changes
  5022                                  ;;
  5023                                  ;; Certain old COMPAQ '286 machines have a bug in their ROM BIOS.
  5024                                  ;; When Int13 is done with AH > 15h and DL >= 80h, they trash
  5025                                  ;; the byte at DS:74h, assuming that DS points to ROM_DATA.
  5026                                  ;; If our init code detects this error, it will install this
  5027                                  ;; special Int13 hook through the same mechanism that was set
  5028                                  ;; up for the IBM patch above. This code is also dynamically
  5029                                  ;; relocated by MSINIT.
  5030                                  
  5031                                  compaq_disk_io:
  5032 00001820 80FC15                  		cmp	ah, 15h		; compaq_disk_io proc far
  5033                                  					;
  5034                                  					; the following	label defines the end of the at	rom patch.
  5035                                  					; this is used at configuration	time.
  5036                                  					;
  5037                                  					; warning!!!
  5038                                  					; this code will be dynamically	relocated by msinit
  5039 00001823 7705                    		ja	short mebbe_hookit ; only deal with functions > 15h
  5040                                  no_hookit:				
  5041                                  		;jmp	cs:Old13
  5042                                  		; 16/10/2022
  5043 00001825 2EFF2E[0601]            		jmp	far [cs:Old13]
  5044                                  
  5045                                  ; ----------------------------------------------------------------------------
  5046                                  
  5047                                  mebbe_hookit:
  5048 0000182A 80FA80                  		cmp	dl, 80h
  5049 0000182D 72F6                    		jb	short no_hookit
  5050 0000182F 1E                      		push	ds
  5051                                  		
  5052                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  5053                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:1830h
  5054                                  		;push	ax
  5055                                  		;mov	ax, 40h
  5056                                  		;mov	ds, ax
  5057                                  		;pop	ax
  5058 00001830 6A40                    		push	40h
  5059 00001832 1F                      		pop	ds
  5060                                  
  5061 00001833 9C                      		pushf
  5062                                  		;call	cs:Old13
  5063                                  		; 16/10/2022
  5064 00001834 2EFF1E[0601]            		call	far [cs:Old13]
  5065 00001839 1F                      		pop	ds
  5066 0000183A CA0200                  		retf	2
  5067                                  
  5068                                  ; ----------------------------------------------------------------------------
  5069                                  
  5070 0000183D 00                      end_compaq_i13hook: db 0			
  5071                                  
  5072                                  ; =============== S U B	R O U T	I N E ========================================
  5073                                  
  5074                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  5075                                  %if 0  
  5076                                  
  5077                                  ; CMOS Clock setting support routines used by MSCLOCK.		
  5078                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
  5079                                  
  5080                                  daycnt_to_day:	; proc far
  5081                                  
  5082                                  ; entry: [daycnt] = number of days since 1-1-80
  5083                                  ;
  5084                                  ; return: ch - century in bcd
  5085                                  ;	  cl - year in bcd
  5086                                  ;	  dh - month in bcd
  5087                                  ;	  dl - day in bcd
  5088                                  
  5089                                  		; 16/10/2022		
  5090                                  		push	word [cs:daycnt] ; save daycnt
  5091                                  		cmp	word [cs:daycnt], 7305	; (365*20+(20/4))
  5092                                  					; # days from 1-1-1980 to 1-1-2000
  5093                                  		jnb	short century20
  5094                                  		mov	byte [cs:base_century], 19
  5095                                  		mov	byte [cs:base_year], 80
  5096                                  		jmp	short years
  5097                                  ; ----------------------------------------------------------------------------
  5098                                  		
  5099                                  century20:				
  5100                                  		mov	byte [cs:base_century], 20
  5101                                  		mov	byte [cs:base_year], 0
  5102                                  		sub	word [cs:daycnt], 7305	; (365*20+(20/4))
  5103                                  					; adjust daycnt
  5104                                  years:					
  5105                                  		xor	dx, dx
  5106                                  		mov	ax, [cs:daycnt]
  5107                                  		mov	bx, 1461	; (366+365*3)
  5108                                  					; # of days in a Leap year block
  5109                                  		div	bx		; AX = # of leap block,	DX = daycnt
  5110                                  		mov	[cs:daycnt], dx	; save daycnt left
  5111                                  		mov	bl, 4
  5112                                  		mul	bl		; AX = # of years. Less	than 100
  5113                                  		add	[cs:base_year], al ; So, ah = 0. Adjust year
  5114                                  		inc	word [cs:daycnt]	; set daycnt to	1 base
  5115                                  		cmp	word [cs:daycnt], 366	; daycnt=remainder of leap year	bk
  5116                                  		jbe	short leapyear	; within 366+355+355+355 days.
  5117                                  		inc	byte [cs:base_year]	; if daycnt <= 366, then leap year
  5118                                  		sub	word [cs:daycnt], 366	; else daycnt--, base_year++ ;
  5119                                  		mov	cx, 3		; And next three years are normal
  5120                                  regularyear:				
  5121                                  		cmp	word [cs:daycnt], 365	; for(i=1; i>3 or daycnt <=365;	i++)
  5122                                  		jbe	short yeardone	; {if (daycnt >	365)
  5123                                  		inc	byte [cs:base_year]	;   { daycnt -=	365
  5124                                  		sub	word [cs:daycnt], 365	;   }
  5125                                  		loop	regularyear	; }
  5126                                  					;
  5127                                  					; should never fall through loop
  5128                                  leapyear:				
  5129                                  		mov	byte [cs:month_tab+1], 29 ; leap year.
  5130                                  					; change month table.
  5131                                  yeardone:				
  5132                                  		xor	bx, bx
  5133                                  		xor	dx, dx
  5134                                  		mov	ax, [cs:daycnt]
  5135                                  		;mov	si, offset month_tab
  5136                                  		mov	si, month_tab	; 19/10/2022
  5137                                  		mov	cx, 12
  5138                                  months:					
  5139                                  		inc	bl
  5140                                  
  5141                                  		; !!! -- 16/10/2022 -- (if DS=CS, what for CS: prefixes are used !?)
  5142                                  		;mov	dl, [cs:si]
  5143                                  		; !!! -- 16/10/2022 -- (may be to keep code addrs as unchanged/fix!?)
  5144                                  		; ds = cs !? ((ofcourse ds must be same with cs here))
  5145                                  		;mov	dl, [si] ; 20/03/2019 (MSDOS 6.21 IO.SYS, BIOSDATA:14C0h)
  5146                                  		;mov	dl, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS, BIOSDATA:14C0h)
  5147                                  		
  5148                                  		mov	dl, [si] ; ?	; mov dl, [cs:si]
  5149                                  		cmp	ax, dx		; cmp daycnt for each month till fit
  5150                                  					; dh=0
  5151                                  		jbe	short month_done
  5152                                  		inc	si		; next month
  5153                                  		sub	ax, dx		; adjust daycnt
  5154                                  		loop	months		;
  5155                                  					; should never fall through loop
  5156                                  month_done:				
  5157                                  		mov	byte [cs:month_tab+1], 28
  5158                                  					; restore month table value
  5159                                  		mov	dl, bl
  5160                                  		mov	dh, [cs:base_year]
  5161                                  		mov	cl, [cs:base_century] ; al=day,dl=month,dh=year,cl=cntry
  5162                                  		call	far [cs:bintobcd]
  5163                                  		;call	cs:bintobcd	; convert "day"	to bcd
  5164                                  					; dl = bcd day,	al = month
  5165                                  		xchg	dl, al
  5166                                  		call	far [cs:bintobcd]
  5167                                  		;call	cs:bintobcd	; dh = bcd month, al = year
  5168                                  		xchg	dh, al
  5169                                  		call	far [cs:bintobcd]
  5170                                  		;call	cs:bintobcd	; cl = bcd year, al = century
  5171                                  		xchg	cl, al
  5172                                  		call	far [cs:bintobcd]
  5173                                  		;call	cs:bintobcd	; ch = bcd century
  5174                                  		mov	ch, al
  5175                                  		pop	word [cs:daycnt] ; restore original value
  5176                                  		retf
  5177                                  
  5178                                  enddaycnttoday:	
  5179                                  
  5180                                  %endif
  5181                                  
  5182                                  ; =============== S U B	R O U T	I N E ========================================
  5183                                  
  5184                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  5185                                  %if 0  
  5186                                  
  5187                                  bin_to_bcd:	; proc far		; real time clock support
  5188                                  
  5189                                  ;convert a binary input in al (less than 63h or 99 decimal)
  5190                                  ;into a bcd value in al. ah destroyed.	
  5191                                  		
  5192                                  		push	cx		
  5193                                  		aam			; al=high digit	bcd, ah=low digit bcd
  5194                                  		mov	cl, 4
  5195                                  		shl	ah, cl		; mov the high digit to	high nibble
  5196                                  		or	al, ah
  5197                                  		pop	cx
  5198                                  		retf
  5199                                  %endif
  5200                                  
  5201                                  ; ----------------------------------------------------------------------------
  5202                                  
  5203                                  ; the k09 requires the routines for reading the clock because of the suspend/
  5204                                  ; resume facility. the system clock needs to be reset after resume.
  5205                                  
  5206                                  ; the following routine is executed at resume time when the system
  5207                                  ; powered on after suspension. it reads the real time clock and
  5208                                  ; resets the system time and date, and then irets.
  5209                                  
  5210                                  ; warning!!! this code will be dynamically relocated by msinit.
  5211                                  
  5212                                  	; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  5213                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:183Eh
  5214                                  int_6Ch:
  5215 0000183E 0E                      		push	cs
  5216 0000183F 1F                      		pop	ds
  5217                                  		;cmp	byte [cs:inHMA], 0  
  5218 00001840 803E[0D00]00            		cmp	byte [inHMA], 0
  5219 00001845 7405                    		jz      short int6c
  5220 00001847 BB[2A07]                		mov     bx, EnsureA20On
  5221 0000184A FFD3                    		call    bx
  5222                                  int6c:					
  5223                                  		;push	cs
  5224                                  		;pop	ds
  5225 0000184C 8F06[F805]              		pop	word [int6c_ret_addr]	; pop off return address
  5226 00001850 8F06[FA05]              		pop	word [int6c_ret_addr+2]
  5227 00001854 9D                      		popf
  5228 00001855 E81300                  		call	read_real_date	; get the date from the clock
  5229 00001858 FA                      		cli
  5230 00001859 8936[8904]              		mov	[daycnt], si	; update dos copy of date
  5231 0000185D FB                      		sti
  5232 0000185E E8B900                  		call	read_real_time	; get the time from the	rtc
  5233 00001861 FA                      		cli
  5234 00001862 B401                    		mov	ah, 1
  5235 00001864 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  5236                                  					; CX:DX	= clock	count
  5237                                  					; Return: time of day set
  5238 00001866 FB                      		sti
  5239                                  		;jmp	int6c_ret_addr	; long jump
  5240                                  		; 16/10/2022
  5241 00001867 FF2E[F805]              		jmp	far [int6c_ret_addr] ; long jump
  5242                                  
  5243                                  ; =============== S U B	R O U T	I N E ========================================
  5244                                  
  5245                                  ;   read_real_date reads real-time clock for date and returns the number
  5246                                  ;   of days elapsed since 1-1-80 in si
  5247                                  
  5248                                  read_real_date:	; proc near		
  5249 0000186B 50                      		push	ax
  5250 0000186C 51                      		push	cx
  5251 0000186D 52                      		push	dx
  5252 0000186E 30E4                    		xor	ah, ah		; throw	away clock roll	over
  5253 00001870 CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  5254                                  					; Return: CX:DX	= clock	count
  5255                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  5256                                  					; midnight
  5257                                  					; Otherwise, AL	> 0
  5258 00001872 5A                      		pop	dx
  5259 00001873 59                      		pop	cx
  5260 00001874 58                      		pop	ax
  5261 00001875 50                      		push	ax
  5262 00001876 53                      		push	bx
  5263 00001877 51                      		push	cx
  5264 00001878 52                      		push	dx
  5265                                  		;mov	word [cs:daycnt2], 1
  5266                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  5267                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:187Ah
  5268 00001879 C706[0006]0100          		mov	word [daycnt2], 1
  5269                                  					; REAL TIME CLOCK ERROR	FLAG (+1 DAY)
  5270 0000187F B404                    		mov	ah, 4
  5271 00001881 CD1A                    		int	1Ah		; CLOCK	- READ DATE FROM REAL TIME CLOCK (AT,XT286,CONV,PS)
  5272                                  					; Return: DL = day in BCD
  5273                                  					; DH = month in	BCD
  5274                                  					; CL = year in BCD
  5275                                  					; CH = century (19h or 20h)
  5276 00001883 7303                    		jnb	short read_ok
  5277 00001885 E98300                  		jmp	r_d_ret
  5278                                  ;-----------------------------------------------------------------------------
  5279                                  
  5280                                  read_ok:
  5281 00001888 882E[FC05]              		mov	[bin_date_time], ch
  5282 0000188C 880E[FD05]              		mov	[bin_date_time+1], cl
  5283 00001890 8836[FE05]              		mov	[bin_date_time+2], dh
  5284 00001894 8816[FF05]              		mov	[bin_date_time+3], dl
  5285                                  		;mov	word [cs:daycnt2], 2 ; READ OF R-T CLOCK SUCCESSFUL
  5286                                  		; 08/08/2023
  5287                                  		;mov	byte [daycnt2], 2
  5288 00001898 FE06[0006]              		inc	byte [daycnt2] ; 2
  5289 0000189C E83401                  		call	bcd_verify	; verify bcd values in range
  5290 0000189F 726A                    		jb	short r_d_ret	; some value out of range
  5291                                  		;mov	word [cs:daycnt2], 3
  5292                                  		; 08/08/2023
  5293                                  		;mov	byte [daycnt2], 3
  5294 000018A1 FE06[0006]              		inc	byte [daycnt2] ; 3
  5295 000018A5 E8DB00                  		call	date_verify
  5296 000018A8 7261                    		jb	short r_d_ret
  5297                                  		;mov	word [cs:daycnt2], 0
  5298                                  		; 08/08/2023
  5299 000018AA C606[0006]00            		mov	byte [daycnt2], 0
  5300 000018AF E8A100                  		call	in_bin
  5301 000018B2 A0[FD05]                		mov	al, [bin_date_time+1]
  5302 000018B5 98                      		cbw
  5303 000018B6 803E[FC05]14            		cmp	byte [bin_date_time], 20 ; 20th century?
  5304 000018BB 7503                    		jnz	short century_19 ; no
  5305 000018BD 83C064                  		add	ax, 100		; add in a century
  5306                                  century_19:				
  5307 000018C0 83E850                  		sub	ax, 80		; subtract off 1-1-80
  5308 000018C3 B104                    		mov	cl, 4		; leap year every 4
  5309 000018C5 F6F1                    		div	cl		; al= #	leap year blocks, ah= remainder
  5310 000018C7 88E3                    		mov	bl, ah		; save odd years
  5311 000018C9 98                      		cbw			; zero ah
  5312 000018CA B9B505                  		mov	cx, 1461	; 366+(3*365)
  5313                                  					; # of days in leap year blocks
  5314 000018CD F7E1                    		mul	cx
  5315                                  		;mov	[cs:daycnt2], ax ; SAVE COUNT OF DAYS
  5316                                  		; 08/08/2023
  5317 000018CF A3[0006]                		mov	[daycnt2], ax
  5318 000018D2 88D8                    		mov	al, bl		; get odd years	count
  5319 000018D4 98                      		cbw
  5320 000018D5 09C0                    		or	ax, ax
  5321 000018D7 740B                    		jz	short leap_year
  5322 000018D9 B96D01                  		mov	cx, 365		; days in year
  5323 000018DC F7E1                    		mul	cx
  5324                                  		;add	[cs:daycnt2], ax ; ADD ON DAYS IN ODD YEARS
  5325                                  		; 08/08/2023
  5326 000018DE 0106[0006]              		add	[daycnt2], ax
  5327 000018E2 EB07                    		jmp	short leap_adjustment ;	account	for leap year
  5328                                  					; possibly account for a leap day
  5329                                  ;-----------------------------------------------------------------------------
  5330                                  
  5331                                  leap_year:
  5332 000018E4 803E[FE05]02            		cmp	byte [bin_date_time+2], 2 ; is	month february?
  5333 000018E9 7604                    		jbe	short no_leap_adjustment ; jan or feb. no leap day yet.
  5334                                  leap_adjustment:
  5335                                  		;inc	word [cs:daycnt2] ; account for leap day
  5336                                  		; 08/08/2023
  5337 000018EB FF06[0006]              		inc	word [daycnt2]
  5338                                  no_leap_adjustment:			
  5339 000018EF 8A0E[FF05]              		mov	cl, [bin_date_time+3] ; get days of month
  5340 000018F3 30ED                    		xor	ch, ch
  5341 000018F5 49                      		dec	cx		; because of offset from day 1,	not day	0
  5342                                  		;add	[cs:daycnt2], cx ; GET DAYS IN MONTHS PRECEEDING
  5343                                  		; 08/08/2023
  5344 000018F6 010E[0006]              		add	[daycnt2], cx
  5345 000018FA 8A0E[FE05]              		mov	cl, [bin_date_time+2] ; get month
  5346                                  		; 08/08/2023
  5347                                  		;xor	ch, ch
  5348 000018FE 49                      		dec	cx		; january starts at offset 0
  5349                                  		
  5350                                  		; 08/08/2023
  5351                                  		;shl	cx, 1		; word offset
  5352                                  		;;mov	si, month_table
  5353                                  		;add	si, cx
  5354                                  		;; 16/10/2022
  5355                                  		;; ds must be same with cs here, if so..
  5356                                  		;; what for cs: prefixes are used !?)
  5357                                  		;; mov	ax, [cs:si]
  5358                                  		;; mov	ax, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS - BIOSDATA:15D5h)
  5359                                  		;mov	ax, [si]	; mov ax, [cs:si]
  5360                                  		;			; get #	days in	previous months
  5361                                  		;add	[cs:daycnt2], ax
  5362                                  
  5363                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  5364                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:1907h
  5365 000018FF B400                    		mov	ah, 0
  5366 00001901 BE[8F04]                		mov	si, month_tab
  5367                                  r_d_sum_loop:
  5368 00001904 AC                      		lodsb
  5369 00001905 0106[0006]              		add	[daycnt2], ax
  5370 00001909 E2F9                    		loop	r_d_sum_loop
  5371                                  r_d_ret:
  5372                                  		;mov	si, [cs:daycnt2]
  5373                                  		; 08/08/2023
  5374 0000190B 8B36[0006]              		mov	si, [daycnt2]
  5375 0000190F 5A                      		pop	dx
  5376 00001910 59                      		pop	cx
  5377 00001911 5B                      		pop	bx
  5378 00001912 58                      		pop	ax
  5379 00001913 C3                      		retn
  5380                                  
  5381                                  ;-----------------------------------------------------------------------------
  5382                                  
  5383                                  r_t_retj:				
  5384 00001914 31C9                    		xor	cx, cx
  5385 00001916 31D2                    		xor	dx, dx
  5386 00001918 EB38                    		jmp	short r_t_ret
  5387                                  
  5388                                  ; =============== S U B	R O U T	I N E ========================================
  5389                                  
  5390                                  ; read_real_time reads the time from the rtc. on exit, it has the number of
  5391                                  ; ticks (at 18.2 ticks per sec.) in cx:dx.
  5392                                  
  5393                                  read_real_time:	; proc near		
  5394 0000191A B402                    		mov	ah, 2
  5395 0000191C CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  5396                                  					; Return: CH = hours in	BCD
  5397                                  					; CL = minutes in BCD
  5398                                  					; DH = seconds in BCD
  5399 0000191E 72F4                    		jb	short r_t_retj
  5400 00001920 882E[FC05]              		mov	[bin_date_time], ch ; hours
  5401 00001924 880E[FD05]              		mov	[bin_date_time+1], cl ; minutes
  5402 00001928 8836[FE05]              		mov	[bin_date_time+2], dh ; seconds
  5403 0000192C C606[FF05]00            		mov	byte [bin_date_time+3], 0 ; unused for time
  5404 00001931 E89F00                  		call	bcd_verify
  5405 00001934 72DE                    		jb	short r_t_retj
  5406 00001936 E88500                  		call	time_verify
  5407 00001939 72D9                    		jb	short r_t_retj
  5408 0000193B E81500                  		call	in_bin		; from bcd to bin
  5409 0000193E 8A2E[FC05]              		mov	ch, [bin_date_time]
  5410 00001942 8A0E[FD05]              		mov	cl, [bin_date_time+1]
  5411 00001946 8A36[FE05]              		mov	dh, [bin_date_time+2]
  5412 0000194A 8A16[FF05]              		mov	dl, [bin_date_time+3]
  5413                                  		; 16/10/2022
  5414                                  		; 17/09/2022
  5415                                  		; 31/05/2019
  5416 0000194E FF1E[0606]              		call	far [ttticks] 
  5417                                  		;call	dword ptr ttticks ; note: indirect far call
  5418                                  					; cx:dx	= number of ticks
  5419                                  					; (at 18.2 ticks per sec.)
  5420                                  r_t_ret:				
  5421 00001952 C3                      		retn
  5422                                  
  5423                                  ; =============== S U B	R O U T	I N E =======================================
  5424                                  
  5425                                  ;   in_bin converts bin_date_time values from bcd to bin
  5426                                  
  5427                                  in_bin:		; proc near
  5428 00001953 A0[FC05]                		mov	al, [bin_date_time] ; century or hours
  5429 00001956 E81F00                  		call	bcd_to_bin
  5430 00001959 A2[FC05]                		mov	[bin_date_time], al
  5431 0000195C A0[FD05]                		mov	al, [bin_date_time+1] ; years or minutes
  5432 0000195F E81600                  		call	bcd_to_bin
  5433 00001962 A2[FD05]                		mov	[bin_date_time+1], al
  5434 00001965 A0[FE05]                		mov	al, [bin_date_time+2] ; months or seconds
  5435 00001968 E80D00                  		call	bcd_to_bin
  5436 0000196B A2[FE05]                		mov	[bin_date_time+2], al
  5437 0000196E A0[FF05]                		mov	al, [bin_date_time+3] ; days (not used for time)
  5438 00001971 E80400                  		call	bcd_to_bin
  5439 00001974 A2[FF05]                		mov	[bin_date_time+3], al
  5440 00001977 C3                      		retn
  5441                                  
  5442                                  ; =============== S U B	R O U T	I N E =======================================
  5443                                  
  5444                                  ;   bcd_to_bin converts two bcd nibbles in al (value <= 99.) to
  5445                                  ;   a binary representation in al
  5446                                  ;   ah is destroyed
  5447                                  
  5448                                  bcd_to_bin:	; proc near
  5449 00001978 88C4                    		mov	ah, al
  5450 0000197A 240F                    		and	al, 0Fh
  5451 0000197C B104                    		mov	cl, 4
  5452 0000197E D2EC                    		shr	ah, cl
  5453 00001980 D50A                    		aad
  5454 00001982 C3                      		retn
  5455                                  
  5456                                  ; =============== S U B	R O U T	I N E ========================================
  5457                                  
  5458                                  ;   date_verify loosely checks bcd date values to be in range
  5459                                  ;   in bin_date_time
  5460                                  
  5461                                  date_verify:	; proc near
  5462 00001983 803E[FC05]20            		cmp	byte [bin_date_time], 20h ; century check
  5463 00001988 7732                    		ja	short date_error
  5464 0000198A 740E                    		jz	short century_20 ; jmp in 21th century
  5465 0000198C 803E[FC05]19            		cmp	byte [bin_date_time], 19h ; century check
  5466                                  		;jb	short date_error
  5467                                  		; 12/12/2022
  5468 00001991 722A                    		jb	short date_err2
  5469 00001993 803E[FD05]80            		cmp	byte [bin_date_time+1], 80h ; year check
  5470                                  		;jb	short date_error
  5471                                  		; 12/12/2022
  5472 00001998 7223                    		jb	short date_err2
  5473                                  century_20:
  5474 0000199A 803E[FD05]99            		cmp	byte [bin_date_time+1], 99h ; year check
  5475 0000199F 771B                    		ja	short date_error
  5476 000019A1 803E[FE05]12            		cmp	byte [bin_date_time+2], 12h ; month check
  5477 000019A6 7714                    		ja	short date_error
  5478 000019A8 803E[FE05]00            		cmp	byte [bin_date_time+2], 0
  5479                                  		;jbe	short date_error
  5480 000019AD 760D                    		jna	short date_error
  5481 000019AF 803E[FF05]31            		cmp	byte [bin_date_time+3], 31h ; day check
  5482 000019B4 7706                    		ja	short date_error
  5483                                  		;cmp	byte [bin_date_time+3], 0 ; day check
  5484                                  		;;jbe	short date_error
  5485                                  		;jna	short date_error
  5486                                  		; 12/12/2022
  5487                                  		; cf=0
  5488                                  		;clc
  5489                                  		; 12/12/2022
  5490 000019B6 803E[FF05]01            		cmp	byte [bin_date_time+3], 1 ; day check
  5491 000019BB C3                      		retn
  5492                                  ;-----------------------------------------------------------------------------
  5493                                  
  5494                                  date_error:
  5495 000019BC F9                      		stc
  5496                                  date_err2:
  5497 000019BD C3                      		retn
  5498                                  
  5499                                  ; =============== S U B	R O U T	I N E ========================================
  5500                                  
  5501                                  ; time_verify very loosely checks bcd date values to be in range
  5502                                  ; in bin_date_time
  5503                                  
  5504                                  time_verify:	; proc near
  5505 000019BE 803E[FC05]24            		cmp	byte [bin_date_time], 24h ; hour check
  5506 000019C3 770C                    		ja	short time_error
  5507 000019C5 803E[FD05]59            		cmp	byte [bin_date_time+1], 59h ; minute check
  5508 000019CA 7705                    		ja	short time_error
  5509                                  		; 12/12/2022h
  5510                                  		;cmp	byte [bin_date_time+2], 59h ; second check
  5511                                  		;ja	short time_error
  5512                                  		;clc
  5513                                  		;retn
  5514                                  		; 12/12/2022
  5515 000019CC 803E[FE05]5A            		cmp	byte  [bin_date_time+2], 5Ah	
  5516                                  time_error:
  5517                                  bv_error:
  5518 000019D1 F5                      		cmc	; cf=0 -> cf=1, cf=1 -> cf=0
  5519 000019D2 C3                      		retn
  5520                                  
  5521                                  ; ----------------------------------------------------------------------------
  5522                                  
  5523                                  ;time_error:				
  5524                                  		;stc
  5525                                  		;retn
  5526                                  
  5527                                  ; =============== S U B	R O U T	I N E ========================================
  5528                                  
  5529                                  ;   bcd_verify checks values in bin_date_time to be valid
  5530                                  ;   bcd numerals.  carry set if any nibble out of range
  5531                                  
  5532                                  bcd_verify:	; proc near
  5533 000019D3 B90400                  		mov	cx, 4		; 4 bytes to check
  5534 000019D6 BB[FC05]                		mov	bx, bin_date_time
  5535                                  bv_loop:
  5536 000019D9 8A07                    		mov	al, [bx]	; get a	bcd number (0..99)
  5537 000019DB 88C4                    		mov	ah, al
  5538 000019DD 250FF0                  		and	ax, 0F00Fh	; 10's place in high ah, 1's in al
  5539                                  					; is 1's place in range?
  5540 000019E0 3C0A                    		cmp	al, 10
  5541 000019E2 77ED                    		ja	short bv_error	; jmp out of range
  5542 000019E4 D0EC                    		shr	ah, 1
  5543 000019E6 D0EC                    		shr	ah, 1
  5544 000019E8 D0EC                    		shr	ah, 1
  5545 000019EA D0EC                    		shr	ah, 1
  5546 000019EC 80E40F                  		and	ah, 0Fh		; get rid of any erroneous bits
  5547 000019EF 80FC0A                  		cmp	ah, 10		; is 10's place in range
  5548 000019F2 77DD                    		ja	short bv_error	; jmp out of range
  5549 000019F4 43                      		inc	bx		; next byte
  5550 000019F5 49                      		dec	cx
  5551 000019F6 75E1                    		jnz	short bv_loop
  5552 000019F8 F8                      		clc			; set success flag
  5553 000019F9 C3                      		retn
  5554                                  ; ----------------------------------------------------------------------------
  5555                                  
  5556                                  		; 12/12/2022
  5557                                  ;bv_error:
  5558                                  		;stc			; set error flag
  5559                                  		;retn
  5560                                  
  5561                                  ; ----------------------------------------------------------------------------
  5562                                  
  5563                                  endk09:
  5564                                  
  5565                                  ; ----------------------------------------------------------------------------
  5566                                  
  5567                                  ;------------------------------------------------------------------------
  5568                                  ;									:
  5569                                  ;	System initialization						:
  5570                                  ;									:
  5571                                  ;	The entry conditions are established by the bootstrap		:
  5572                                  ;	loader and are considered unknown. The following jobs		:
  5573                                  ;	will be performed by this module:				:
  5574                                  ;									:
  5575                                  ;	1.	All device initialization is performed			:
  5576                                  ;	2.	A local stack is set up and DS:SI are set		:
  5577                                  ;		to point to an initialization table. Then		:
  5578                                  ;		an inter-segment call is made to the first		:
  5579                                  ;		byte of the dos 					:
  5580                                  ;	3.	Once the dos returns from this call the ds		:
  5581                                  ;		register has been set up to point to the start		:
  5582                                  ;		of free memory. The initialization will then		:
  5583                                  ;		load the command program into this area 		:
  5584                                  ;		beginning at 100 hex and transfer control to		:
  5585                                  ;		this program.						:
  5586                                  ;									:
  5587                                  ;------------------------------------------------------------------------
  5588                                  
  5589                                  ; 01/10/2022
  5590                                  ; 08/01/2018 - Retro DOS v4.0
  5591                                  
  5592                                  ; drvfat must be the first location of freeable space!
  5593                                  
  5594                                  align 2
  5595                                  		;db 90h
  5596                                  
  5597                                  ; 09/12/2023 - Retro DOS v5.0 IO.SYS (IBMBIO.COM 7.1)
  5598                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1A0Ch)
  5599                                  
  5600                                  ; 30/12/2022
  5601                                  ; (MSDOS 6.21 IO.SYS, BIOSDATA:16D6h)
  5602                                  	
  5603 000019FA 0000                    drvfat:		dw 0			; drive	and fat	id of dos
  5604                                  ; 09/12/2023
  5605                                  ;bios_l:	dw 0			; first	sector of data (low word)
  5606                                  ;bios_h:	dw 0			; first	sector of data (high word)
  5607                                  First_Data_Sector:
  5608 000019FC 0000                    		dw 0
  5609 000019FE 0000                    		dw 0
  5610 00001A00 0000                    doscnt:		dw 0			; how many sectors to read
  5611                                  ;fbigfat:	db 0			; flags	for drive
  5612 00001A02 0000                    fatloc:		dw 0			; seg addr of fat sector
  5613 00001A04 0000                    init_bootseg:	dw 0			; seg addr of buffer for reading boot record
  5614                                  ; 09/12/2023
  5615 00001A06 00                      fbigfat:	db 0			; flags	for drive
  5616 00001A07 80                      rom_drv_num:	db 80h			; rom drive number
  5617 00001A08 0002                    md_sectorsize:	dw 200h			; used by get_fat_sector proc.
  5618                                  ; 12/12/2023
  5619                                  ;temp_cluster:	dw 0			; used by get_fat_sector proc.
  5620 00001A0A FFFF                    last_fat_sec_num: dw 0FFFFh		; used by get_fat_sector proc.
  5621                                  
  5622                                  ; the following two bytes are used to save the info returned by int 13, ah = 8
  5623                                  ; call to determine drive parameters.
  5624                                  
  5625 00001A0C 02                      num_heads:	db 2	; dw 2		; number of heads returned by rom
  5626 00001A0D 00                      		db 0	; 09/12/2023
  5627                                  ;sec_trk:	db 9			; sec/trk returned by rom
  5628 00001A0E 28                      num_cyln:	db 40	; dw 40		; number of cylinders returned by rom
  5629 00001A0F 00                      		db 0	; 09/12/2023
  5630                                  ; 09/12/2023
  5631 00001A10 09                      sec_trk:	db 9			; sec/trk returned by rom
  5632 00001A11 00                      fakefloppydrv:	db 0			; if 1,	then no	diskette drives	in the system.
  5633                                  
  5634                                  ; 09/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  5635                                  Orig_Int1Eh_Table:
  5636 00001A12 0000                    		dw 0
  5637 00001A14 0000                    		dw 0
  5638                                  
  5639                                  ; ----------------------------------------------------------------------------
  5640                                  
  5641                                  ; 09/12/2023
  5642                                  %if 0
  5643                                  
  5644                                  disktable:	dw 512,	0100h, 64, 0	; warning !!! old values
  5645                                  		dw 2048, 0201h, 112, 0
  5646                                  		dw 8192, 0402h, 256, 0
  5647                                  		dw 32680, 0803h, 512, 0	; warning !!! old values
  5648                                  		dw 65535, 1004h, 1024, 0
  5649                                  					; default disktable under
  5650                                  					; the assumption of total fat size <= 128 kb,
  5651                                  					; and the maximum size of fat entry = 16 bit.
  5652                                  %endif
  5653                                  
  5654                                  ; 09/12/2023 - Retro DOS v5.0 IO.SYS (IBMBIO.COM 7.1)
  5655                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1A2Ah)
  5656                                  
  5657                                  		; 09/12/2023
  5658                                  		; 08/08/2023
  5659                                  		; disktable.totalsectors: resw 1 ; high word
  5660                                  		;			  resw 1 ; low word
  5661                                  		; disktable.shiftcount:   resb 1
  5662                                  		; disktable.secperclus:   resb 1
  5663                                  		; disktable.rdirentries:  resw 1
  5664                                  		; disktable.bigflag:      resw 1
  5665 00001A16 0000A87F0308000200-     disktable2:	dw 0, 32680, 0803h, 512, 0 ; for compatibility.
  5665 00001A1F 00                 
  5666                                  					   ; (32680 sectors, 16340 KB)
  5667 00001A20 040000000204000240-     		dw 4, 0, 0402h, 512, 40h   ; covers upto 134 mb media.
  5667 00001A29 00                 
  5668                                  					   ; fbig = 40h  ; (40000h sectors = 128 MB)
  5669 00001A2A 080000000308000240-     		dw 8, 0, 0803h, 512, 40h   ; upto 268 mb ; (80000h sectors = 256 MB)
  5669 00001A33 00                 
  5670 00001A34 100000000410000240-     		dw 16, 0, 1004h, 512, 40h  ; upto 536 mb ; (100000h sectors = 512 MB)
  5670 00001A3D 00                 
  5671 00001A3E 200000000520000240-     		dw 32, 0, 2005h, 512, 40h  ; upto 1072 mb ; (200000h sectors = 1024 MB)
  5671 00001A47 00                 
  5672 00001A48 400000000640000240-     		dw 64, 0, 4006h, 512, 40h  ; upto 2144 mb ; (400000h sectors = 2048 MB)
  5672 00001A51 00                 
  5673                                  		; 09/12/2023
  5674                                  		;dw 128, 0, 8007h, 512, 40h ; upto 4288 mb ; (800000h sectors = 4096 MB)
  5675 00001A52 FFFFFFFF0308000060-     		dw 0FFFFh, 0FFFFh, 0803h, 0, 60h ; FAT32 (> 2144MB)
  5675 00001A5B 00                 
  5676                                  					   ; (fbig and fbigbig flags are set)			
  5677                                  			
  5678                                  ; ----------------------------------------------------------------------------
  5679                                  
  5680                                  ;******************************************************
  5681                                  ;variables for mini disk initialization
  5682                                  ;******************************************************
  5683                                  
  5684                                  ; 01/10/2022
  5685                                  ; [ Note: Minidisk == logical dos drive (in extended dos partition) ] 
  5686                                  
  5687 00001A5C 00                      rom_minidisk_num: db 0			; temp variable	for phys unit
  5688 00001A5D 00                      hnum:		db 0			; real number of hardfiles
  5689 00001A5E [3C05]                  last_dskdrv_table: dw dskdrvs		; index	into dskdrv table
  5690 00001A60 [4C08]                  end_of_bdss:	dw bdss			; offset value of the ending address
  5691                                  					; of bds table. needed to figure out
  5692                                  					; the dosdatasg address.
  5693 00001A62 0000                    mini_hdlim:	dw 0			
  5694 00001A64 0000                    mini_seclim:	dw 0
  5695                                  
  5696                                  ; 19/12/2023
  5697                                  ; 09/12/2023
  5698                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1A7Ah)
  5699                                  ;ld_p_number:	dw 2BADh		; (for 'find_mini_partition' proc)
  5700                                  
  5701                                  ;end of mini disk init variables **********************
  5702                                  
  5703                                  ; ----------------------------------------------------------------------------
  5704                                  			
  5705 00001A66 30312F31302F383400      bios_date:	db '01/10/84',0 	; used for checking at rom bios	date.
  5706                                  
  5707                                  ; 13/12/2022
  5708                                  %if 0
  5709                                  
  5710                                  ;align 2
  5711                                  		db  90h	
  5712                                  
  5713                                  ; the following are the recommended bpbs for the media that we know of so far.
  5714                                  
  5715                                  ;struc bpbx
  5716                                  ;   resw 1 ; 512
  5717                                  ;   resb 1
  5718                                  ;   resw 1 ; 1
  5719                                  ;   resb 1 ; 2
  5720                                  ;   resw 1
  5721                                  ;   resw 1
  5722                                  ;   resb 1
  5723                                  ;   resw 1
  5724                                  ;   resw 1
  5725                                  ;   resw 1 ; 2
  5726                                  ;   resw 1
  5727                                  ;   resw 1 ; hidden sector high
  5728                                  ;   resd 1 ; extended total sectors
  5729                                  ;.size:
  5730                                  ;endstruc
  5731                                  
  5732                                  ; 08/01/2019 - Retro DOS v4.0
  5733                                  
  5734                                  ; 20/04/2019
  5735                                  
  5736                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0) IO.SYS
  5737                                  
  5738                                  ; 09/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  5739                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1A86h)
  5740                                  
  5741                                  ; 09/12/2022
  5742                                  BPB48T:
  5743                                  ;bpb48t:	; bpbx <512, 2, 1, 2, 112, 720, 0FDh, 2, 9, 2, 0, 0, 0, 0> 
  5744                                  		; 48 tpi diskettes	;
  5745                                  		dw	512		; physical sector size in bytes
  5746                                  		db	2		; sectors/allocation unit
  5747                                  		dw	1		; reserved sectors for dos
  5748                                  		db	2		; number of allocation tables
  5749                                  		dw	112		; number of directory entries
  5750                                  		dw	720 ; 2*9*40	; number of sectors (at 512 bytes each)
  5751                                  		db	0FDh		; media descriptor
  5752                                  		dw	2		; number of fat sectors
  5753                                  		dw	9		; sectors per track
  5754                                  		dw	2		; heads
  5755                                  		dw	0		; hidden sector count (low word)
  5756                                  		dw	0		; hidden sector (high)
  5757                                  		dw	0		; number of sectors (low)
  5758                                  		dw	0		; number of sectors (high)
  5759                                  		; 09/12/2023
  5760                                  		; FAT32 extensions (to BDS)
  5761                                  		times	28 db 0
  5762                                  		;
  5763                                  		db 90h
  5764                                  ;align 2
  5765                                  BPB96T:
  5766                                  ;bpb96t:	; bpbx <512, 1, 1, 2, 224, 2400, 0F9h, 7, 15, 2, 0, 0, 0, 0> 
  5767                                  		; 96 tpi diskettes	;
  5768                                  		dw	512		; physical sector size in bytes
  5769                                  		db	1		; sectors/allocation unit
  5770                                  		dw	1		; reserved sectors for dos
  5771                                  		db	2		; number of allocation tables
  5772                                  		dw	224		; number of directory entries
  5773                                  		dw	2400 ; 2*15*80	; number of sectors (at 512 bytes each)
  5774                                  		db	0F9h		; media descriptor
  5775                                  		dw	7		; number of fat sectors
  5776                                  		dw	15		; sectors per track
  5777                                  		dw	2		; heads
  5778                                  		dw	0		; hidden sector count (low word)
  5779                                  		dw	0		; hidden sector (high)
  5780                                  		dw	0		; number of sectors (low)
  5781                                  		dw	0		; number of sectors (high)
  5782                                  		; 09/12/2023
  5783                                  		; FAT32 extensions (to BDS)
  5784                                  		times	28 db 0
  5785                                  		;
  5786                                  		db 90h
  5787                                  ;align 2
  5788                                  BPB35:
  5789                                  ;bpb35:		; bpbx <512, 2, 1, 2, 112, 1440, 0F9h, 3, 9, 2, 0, 0, 0, 0> 
  5790                                  		; 3.5" diskettes - 720 KB ;		
  5791                                  		dw	512		; physical sector size in bytes
  5792                                  		db	2		; sectors/allocation unit
  5793                                  		dw	1		; reserved sectors for dos
  5794                                  		db	2		; number of allocation tables
  5795                                  		dw	112		; number of directory entries
  5796                                  		dw	1440 ; 2*9*80	; number of sectors (at 512 bytes each)
  5797                                  		db	0F9h		; media descriptor
  5798                                  		dw	3		; number of fat sectors
  5799                                  		dw	9		; sectors per track
  5800                                  		dw	2		; heads
  5801                                  		dw	0		; hidden sector count (low word)
  5802                                  		dw	0		; hidden sector (high)
  5803                                  		dw	0		; number of sectors (low)
  5804                                  		dw	0		; number of sectors (high)
  5805                                  		; 09/12/2023
  5806                                  		; FAT32 extensions (to BDS)
  5807                                  		times	28 db 0
  5808                                  		;
  5809                                  		db 90h
  5810                                  ;align 2
  5811                                  
  5812                                  ;align 2
  5813                                  ;BPB144:
  5814                                  ;bpb144:	; Retro DOS v4.0 feature only !	; 1.44MB diskettes
  5815                                  ;
  5816                                  ;		dw	512		; physical sector size in bytes
  5817                                  ;		db	1		; sectors/allocation unit
  5818                                  ;		dw	1		; reserved sectors for dos
  5819                                  ;		db	2		; number of allocation tables
  5820                                  ;		dw	224		; number of directory entries
  5821                                  ;		dw	2880 ; 2*18*80	; number of sectors (at 512 bytes each)
  5822                                  ;		db	0F0h		; media descriptor
  5823                                  ;		dw	9		; number of fat sectors
  5824                                  ;		dw	18		; sectors per track
  5825                                  ;		dw	2		; heads
  5826                                  ;		dw	0		; hidden sector count (low word)
  5827                                  ;		dw	0		; hidden sector (high)
  5828                                  ;		dw	0		; number of sectors (low)
  5829                                  ;		dw	0		; number of sectors (high)
  5830                                  ;
  5831                                  ;		db 90h
  5832                                  ;align 2
  5833                                  
  5834                                  BPB288:
  5835                                  ;bpb288:	; bpbx <512, 2, 1, 2, 240, 5760, 0F0h, 9, 36, 2, 0, 0, 0, 0>
  5836                                  		; 3.5" diskettes - 2.88 MB ;	 
  5837                                  		dw	512		; physical sector size in bytes
  5838                                  		db	2		; sectors/allocation unit
  5839                                  		dw	1		; reserved sectors for dos
  5840                                  		db	2		; number of allocation tables
  5841                                  		dw	240		; number of directory entries
  5842                                  		dw	5760 ; 2*36*80	; number of sectors (at 512 bytes each)
  5843                                  		db	0F0h		; media descriptor
  5844                                  		dw	3		; number of fat sectors
  5845                                  		dw	9		; sectors per track
  5846                                  		dw	2		; heads
  5847                                  		dw	0		; hidden sector count (low word)
  5848                                  		dw	0		; hidden sector (high)
  5849                                  		dw	0		; number of sectors (low)
  5850                                  		dw	0		; number of sectors (high)
  5851                                  		; 09/12/2023
  5852                                  		; FAT32 extensions (to BDS)
  5853                                  		times	28 db 0
  5854                                  		;
  5855                                  		db 90h
  5856                                  ;align 2
  5857                                  
  5858                                  %endif
  5859                                  
  5860                                  ; ----------------------------------------------------------------------------
  5861                                  					; align	2
  5862                                  ; 09/12/2022
  5863                                  %if 0
  5864                                  bpbtable:	dw bpb48t		; 48tpi	drives
  5865                                  		dw bpb96t		; 96tpi	drives
  5866                                  		dw bpb35		; 3.5" drives
  5867                                  		dw bpb35		; unused 8" diskette
  5868                                  		dw bpb35		; unused 8" diskette
  5869                                  		dw bpb35		; used for hard	disk
  5870                                  		dw bpb35		; used for tape	drive
  5871                                  		dw bpb35		; FFOTHER
  5872                                  		dw bpb35		; ERIMO
  5873                                  		dw bpb288		; 2.88MB drive
  5874                                  		;
  5875                                  		;dw bpb144		; 1.44MB drive - Retro DOS v4.0 feature !
  5876                                  %endif
  5877                                  
  5878                                  ; 13/12/2022
  5879                                  %if 0
  5880                                  BPBTABLE:	dw BPB48T		; 48tpi	drives
  5881                                  		dw BPB96T		; 96tpi	drives
  5882                                  		dw BPB35		; 3.5" drives
  5883                                  		dw BPB35		; unused 8" diskette
  5884                                  		dw BPB35		; unused 8" diskette
  5885                                  		dw BPB35		; used for hard	disk
  5886                                  		dw BPB35		; used for tape	drive
  5887                                  		dw BPB35		; FFOTHER
  5888                                  		dw BPB35		; ERIMO
  5889                                  		dw BPB288		; 2.88MB drive
  5890                                  		;
  5891                                  		;dw BPB144		; 1.44MB drive - Retro DOS v4.0 feature !
  5892                                  
  5893                                  %endif
  5894                                  
  5895                                  ; ----------------------------------------------------------------------------
  5896                                  
  5897                                  ;	entry point to call utility functions in Bios_Code. At this time,
  5898                                  ;	  we aren't doing any A20 switching. During MSINIT time Bios_Code
  5899                                  ;	  will not yet be moved to its final resting place, so we know
  5900                                  ;	  it'll be low.
  5901                                  ;
  5902                                  ;	to use this function, do a "push cs" and load bp with the offset of
  5903                                  ;	  the function you want to call in Bios_Code. This routine will
  5904                                  ;	  push the address of a retf in Bios_Code onto the stack which
  5905                                  ;	  will get executed when the utility function finishes. It will
  5906                                  ;	  then transfer control to Bios_Code:bp using a couple of pushes
  5907                                  ;	  and a retf
  5908                                  
  5909                                  ; 16/10/2022
  5910                                  ;BC_RETF equ bc_retf - DOSBIOSEG_2C7h
  5911                                  ; 09/12/2022
  5912                                  BC_RETF equ bc_retf
  5913                                  
  5914                                  ; 09/12/2023
  5915                                  ;PCDOS 7.1 IBMBIO.COM bc_retf offset = 0CAh (in BIOSCODE segment = 364h)
  5916                                  
  5917                                  addr_of_bcretf:	;dw 0C8h		; dw bc_retf
  5918                                  					; 2C7h:0C8h = 70h:2638h
  5919                                  					; 09/12/2023
  5920                                  					; 364h:0CAh = 70h:300Ah ; PCDOS 7.1
  5921 00001A6F [CA00]                  		dw BC_RETF		; dw 0CAh
  5922                                  
  5923                                  ; ----------------------------------------------------------------------------
  5924                                  
  5925                                  call_bios_code:	; proc far			
  5926 00001A71 2EFF36[6F1A]            		push	word [cs:addr_of_bcretf] 
  5927                                  					; set up near return to far return
  5928 00001A76 2EFF36[0406]            		push	word [cs:cdev+2] ; push Bios_Code segment
  5929 00001A7B 55                      		push	bp		; save offset of utility function
  5930 00001A7C CB                      		retf			; far jump to (DOS)BIOS code
  5931                                  
  5932                                  ; ----------------------------------------------------------------------------
  5933                                  
  5934                                  		; 09/12/2023 - Retro DOS v5.0 IBMBIO.COM/IO.SYS
  5935                                  		; 20/12/2022
  5936 00001A7D 00                      flp_drvs:	db 0
  5937                                  		; 11/12/2023
  5938                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:1B81h)
  5939                                  firstcluster_hw: 
  5940 00001A7E 0000                    		dw 0	; 06/04/2024
  5941 00001A80 00                      Boot_Drv:	db 0
  5942                                  
  5943                                  ; ----------------------------------------------------------------------------
  5944                                  
  5945                                  ; 09/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  5946                                  ;-----------------------------------------------------------------------------
  5947                                  ; PCDOS 7.1 CD BOOT option code 
  5948                                  ;-----------------------------------------------------------------------------
  5949                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1B84h)
  5950                                  
  5951                                  cd_boot_option:
  5952 00001A81 50                      		push	ax
  5953 00001A82 1E                      		push	ds
  5954 00001A83 06                      		push	es
  5955 00001A84 52                      		push	dx
  5956                                  cdbo_1:
  5957 00001A85 B401                    		mov	ah, 1
  5958 00001A87 CD16                    		int	16h			; KEYBOARD - status
  5959 00001A89 7406                    		jz	short cdbo_2
  5960 00001A8B 30E4                    		xor	ah, ah
  5961 00001A8D CD16                    		int	16h			; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  5962                                  						; Return: AH = scan code, AL = character
  5963 00001A8F EBF4                    		jmp	short cdbo_1
  5964                                  cdbo_2:
  5965 00001A91 0E                      		push	cs
  5966 00001A92 1F                      		pop	ds
  5967 00001A93 BE[6B1B]                		mov	si, cd_boot_msg		; "Press the ENTER key to boot from CD"...
  5968 00001A96 AC                      		lodsb
  5969                                  cdbo_3:
  5970 00001A97 BB0700                  		mov	bx, 7
  5971 00001A9A B40E                    		mov	ah, 0Eh
  5972 00001A9C CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  5973                                  						; AL = character, BH = display page (alpha modes)
  5974                                  						; BL = foreground color (graphics modes)
  5975 00001A9E AC                      		lodsb
  5976 00001A9F 08C0                    		or	al, al
  5977 00001AA1 75F4                    		jnz	short cdbo_3
  5978 00001AA3 B84000                  		mov	ax, 40h
  5979 00001AA6 8ED8                    		mov	ds, ax
  5980                                  		;mov	bx, [6Ch]		; 0:46Ch = Daily timer counter (4 bytes)
  5981                                  		; 09/12/2023
  5982 00001AA8 8B166C00                		mov	dx, [6Ch]
  5983 00001AAC 8B366E00                		mov	si, [6Eh]
  5984                                  wait_for_key:
  5985                                  		;push	bx
  5986                                  		;mov	bx, 7
  5987                                  		; bx = 7
  5988 00001AB0 B8080E                  		mov	ax, 0E08h
  5989 00001AB3 CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  5990                                  						; AL = character, BH = display page (alpha modes)
  5991                                  						; BL = foreground color (graphics modes)
  5992 00001AB5 B8200E                  		mov	ax, 0E20h
  5993 00001AB8 CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  5994                                  						; AL = character, BH = display page (alpha modes)
  5995                                  						; BL = foreground color (graphics modes)
  5996 00001ABA B8080E                  		mov	ax, 0E08h
  5997 00001ABD CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  5998                                  						; AL = character, BH = display page (alpha modes)
  5999                                  						; BL = foreground color (graphics modes)
  6000                                  		;pop	bx
  6001                                  		;add	bx, 18			; 18.2 ticks per second
  6002                                  		; 09/12/2023
  6003 00001ABF 83C212                  		add	dx, 18
  6004 00001AC2 83D600                  		adc	si, 0			; next second (if carry flag is 1)
  6005                                  continue_to_wait:
  6006 00001AC5 B401                    		mov	ah, 1
  6007 00001AC7 CD16                    		int	16h			; KEYBOARD - status
  6008 00001AC9 741B                    		jz	short cdbo_5
  6009 00001ACB B400                    		mov	ah, 0
  6010 00001ACD CD16                    		int	16h			; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  6011                                  						; Return: AH = scan code, AL = character
  6012                                  
  6013                                  		; 09/12/2023
  6014                                  		;cmp	ax, 11Bh ; ESC key
  6015                                  		;jz	short cdb0_7
  6016                                  ;cdbo_4:
  6017                                  		;push	ax ; *
  6018 00001ACF 89C2                    		mov	dx, ax ; *
  6019                                  
  6020                                  		; CRLF (next line)
  6021                                  		;mov	bx, 7
  6022                                  		; bx = 7
  6023 00001AD1 B80D0E                  		mov	ax, 0E0Dh
  6024 00001AD4 CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  6025                                  						; AL = character, BH = display page (alpha modes)
  6026                                  						; BL = foreground color (graphics modes)
  6027 00001AD6 B80A0E                  		mov	ax, 0E0Ah
  6028 00001AD9 CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  6029                                  						; AL = character, BH = display page (alpha modes)
  6030                                  						; BL = foreground color (graphics modes)
  6031                                  		; 09/12/2023
  6032                                  		;pop	ax ; *
  6033                                  			
  6034 00001ADB 81FA1B01                		cmp	dx, 11Bh
  6035                                  		;cmp	ax, 11Bh ; ESC key (to cancel CD/DVD boot)
  6036 00001ADF 7418                    		je	short cdbo_7
  6037                                  
  6038                                  cdbo_4:		; 10/12/2023
  6039 00001AE1 5A                      		pop	dx
  6040 00001AE2 07                      		pop	es
  6041 00001AE3 1F                      		pop	ds
  6042 00001AE4 58                      		pop	ax
  6043 00001AE5 C3                      		retn
  6044                                  cdbo_5:
  6045 00001AE6 3B366E00                		cmp	si, [6Eh]
  6046 00001AEA 7504                    		jnz	short cdbo_6
  6047                                  		; 09/12/2023
  6048 00001AEC 3B166C00                		cmp	dx, [6Ch]
  6049                                  		;cmp	bx, [6Ch]
  6050                                  cdbo_6:
  6051 00001AF0 73D3                    		jnb	short continue_to_wait
  6052 00001AF2 2EFE0E[6A1B]            		dec	byte [cs:time_counter]
  6053 00001AF7 75B7                    		jnz	short wait_for_key
  6054                                  cdbo_7:
  6055                                  		; 09/12/2023
  6056                                  		; CRLF (next line)
  6057                                  		;
  6058                                  		;mov	bx, 7
  6059                                  		;mov	ax, 0E0Dh
  6060                                  		;int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  6061                                  		;				; AL = character, BH = display page (alpha modes)
  6062                                  		;				; BL = foreground color (graphics modes)
  6063                                  		;mov	ax, 0E0Ah
  6064                                  		;int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  6065                                  		;				; AL = character, BH = display page (alpha modes)
  6066                                  		;				; BL = foreground color (graphics modes)
  6067                                  		
  6068 00001AF9 0E                      		push	cs
  6069 00001AFA 1F                      		pop	ds
  6070                                  		; 09/12/2023
  6071 00001AFB 1E                      		push	ds
  6072 00001AFC 07                      		pop	es
  6073                                  		; es = ds = cs
  6074                                  
  6075 00001AFD B8004B                  		mov	ax, 4B00h
  6076                                  		;xor	dl, dl
  6077                                  		; 09/12/2023
  6078 00001B00 31D2                    		xor	dx, dx
  6079                                  		; dl = disk drive = 0  ; fd
  6080                                  		;mov	si, 1C93h
  6081 00001B02 BE[571B]                		mov	si, empty_dap_buff
  6082 00001B05 CD13                    		int	13h			; DISK - Bootable CD-ROM - AL = TERMINATE DISK EMULATION
  6083                                  		; DS:SI = Specification packet filled		
  6084                                  
  6085                                  		;mov	dx, 80h
  6086                                  		;xor	ax, ax
  6087                                  		; 09/12/2023
  6088 00001B07 B81300                  		mov	ax, 19
  6089 00001B0A 89F7                    		mov	di, si	
  6090                                  		;mov	byte [si], 13h
  6091                                  		;mov	[si+1], al
  6092 00001B0C AB                      		stosw	
  6093                                  		;mov	[si+2], dx
  6094 00001B0D B080                    		mov	al, 80h
  6095 00001B0F AB                      		stosw
  6096 00001B10 89C2                    		mov	dx, ax
  6097                                  		;mov	[si+4], ax
  6098                                  		;mov	[si+6], ax
  6099                                  		;mov	[si+8], ax
  6100                                  		;mov	[si+0Ah], ax
  6101                                  		;mov	[si+0Ch], ax
  6102                                  		;mov	[si+0Eh], ax
  6103                                  		;mov	[si+10h], al
  6104                                  		;mov	[si+11h], al
  6105                                  		;mov	[si+12h], al
  6106 00001B12 B90F00                  		mov	cx, 15
  6107 00001B15 F3AA                    		rep	stosb
  6108                                  		; dl = disk drive = 80h ; hd
  6109 00001B17 B8004B                  		mov	ax, 4B00h
  6110 00001B1A CD13                    		int	13h			; DISK - Bootable CD-ROM - AL = TERMINATE DISK EMULATION
  6111 00001B1C 31C0                    		xor	ax, ax
  6112                                  		; 09/12/2023
  6113                                  		;mov	dx, 80h
  6114                                  		; dx = 80h
  6115 00001B1E CD13                    		int	13h			; DISK - RESET DISK SYSTEM
  6116                                  						; DL = drive (if bit 7 is set both hard disks and floppy disks reset)
  6117                                  		; 09/12/2023
  6118                                  		;push	cs
  6119                                  		;pop	es
  6120                                  		; es = ds = cs		
  6121                                  
  6122 00001B20 B80102                  		mov	ax, 201h
  6123                                  		;mov	bx, 152h
  6124 00001B23 BB[5201]                		mov	bx, disksector
  6125                                  		;mov	cx, 1
  6126                                  		; 09/12/2023
  6127 00001B26 41                      		inc	cx ; cx = 1
  6128                                  		;mov	dx, 80h
  6129                                  		; dx = 80h
  6130 00001B27 CD13                    		int	13h			; DISK - READ SECTORS INTO MEMORY
  6131                                  						; AL = number of sectors to read, CH = track, CL = sector
  6132                                  						; DH = head, DL = drive, ES:BX -> buffer to fill
  6133                                  						; Return: CF set on error, AH = status, AL = number of sectors read
  6134                                  		;jc	short cdbo_8
  6135                                  		; 10/12/2023
  6136 00001B29 72B6                    		jc	short cdbo_4
  6137                                  
  6138 00001B2B 2681BFFE0155AA          		cmp	word [es:bx+1FEh], 0AA55h
  6139                                  		;jz 	short cdbo_9
  6140                                  		; 10/12/2023
  6141 00001B32 75AD                    		jnz	short cdbo_4
  6142                                  ;cdbo_8:
  6143                                  		;jmp	short cdbo_4
  6144                                  ;cdbo_9:
  6145                                  		; 10/12/2023
  6146                                  		; (stack clearing -pop- is not necessary here, 
  6147                                  		;  PCDOS 7.1 boot sector will set stack pointer again)
  6148                                  		;pop	ax ; near call return address
  6149                                  		;pop	cx ; +++ ; ch = [MediaByte]
  6150                                  
  6151                                  		; 09/12/2023
  6152                                  		;push	cs
  6153                                  		;pop	ds
  6154                                  		; ds = cs
  6155 00001B34 31C0                    		xor	ax, ax	; 0
  6156 00001B36 BF007C                  		mov	di, 7C00h
  6157 00001B39 8EC0                    		mov	es, ax
  6158 00001B3B 89DE                    		mov	si, bx
  6159 00001B3D 06                      		push	es
  6160 00001B3E 57                      		push	di
  6161 00001B3F B90001                  		mov	cx, 100h ; 256
  6162                                  		; 10/12/2023
  6163                                  		;cld	; not necessary (direction flag is already cleared) 
  6164 00001B42 F3A5                    		rep movsw
  6165 00001B44 8ED8                    		mov	ds, ax
  6166 00001B46 BE7800                  		mov	si, 78h
  6167 00001B49 2EA1[121A]              		mov	ax, [cs:Orig_Int1Eh_Table]
  6168 00001B4D 8904                    		mov	[si], ax
  6169 00001B4F 2EA1[141A]              		mov	ax, [cs:Orig_Int1Eh_Table+2]
  6170 00001B53 894402                  		mov	[si+2], ax
  6171 00001B56 CB                      		retf
  6172                                  
  6173                                  ; ---------------------------------------------------------------------------
  6174                                  dap_buffer: ; 16/12/2023
  6175                                  
  6176 00001B57 13                      empty_dap_buff:	db 19
  6177                                  		;db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0  ; db 18 dup(0)
  6178 00001B58 00<rep 12h>             		times 18 db 0
  6179 00001B6A 05                      time_counter:	db 5	; 5 seconds
  6180 00001B6B 0D0A                    cd_boot_msg:	db 0Dh,0Ah
  6181                                  		;db 'Press the ENTER key to boot from CD or DVD......',0
  6182                                  		; 09/12/2023
  6183 00001B6D 507265737320616E79-     		db 'Press any key to boot from CD or DVD ...',0
  6183 00001B76 206B657920746F2062-
  6183 00001B7F 6F6F742066726F6D20-
  6183 00001B88 4344206F7220445644-
  6183 00001B91 202E2E2E00         
  6184                                  
  6185                                  ; ----------------------------------------------------------------------------
  6186                                  
  6187                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0)
  6188                                  
  6189                                  ; 10/12/2023 - Retro DOS v5.0 (PCDOS 7.1)
  6190                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1CDAh)
  6191                                  
  6192                                  ;-----------------------------------------------------------------------------
  6193                                  ; entry point from boot sector
  6194                                  ;-----------------------------------------------------------------------------
  6195                                  
  6196                                  init:		; 27/12/2018
  6197                                  		; MSDOS 6.0 (MSINIT.ASM)
  6198                                  		;=============================================================
  6199                                  		;
  6200                                  		; entry from boot sector. the register contents are:
  6201                                  		;
  6202                                  		;   dl = int 13 drive number we booted from
  6203                                  		;   ch = media byte
  6204                                  		;   bx = first data sector on disk.
  6205                                  		;   ax = first data sector (high)
  6206                                  		;   di = sectors/fat for the boot media.
  6207                                  
  6208                                  		; 07/04/2018
  6209                                  		;=============================================================
  6210                                  		; Retro DOS v2.0 - registers from FD Boot Sector 
  6211                                                  ; DL = [bsDriveNumber]
  6212                                  		; DH = [bsMedia]
  6213                                  		; AX = [bsSectors] ; Total sectors
  6214                                  		; DS = 0, SS = 0
  6215                                  		; BP = 7C00h
  6216                                  
  6217                                  		; 10/12/2023
  6218                                  		; Retro DOS v5.0 (IBMBIO.COM)
  6219                                  		;=============================================================
  6220                                  		; PCDOS 7.1 IBMBIO.COM - registers from MSLOAD section
  6221                                                  ; DL = [BootDrive]
  6222                                  		; CH = [MediaByte]
  6223                                  		; AX:BX = First data Sector
  6224                                  		; DS:SI = Original INT 1Eh table address
  6225                                  		;
  6226                                  		; Stack: INT 1Eh vector (0:78h) !not used! (dword [sp])
  6227                                  		;	 INT 1Eh table address !not used! (dword [sp+4])
  6228                                  		; DI = 78h !not used!
  6229                                   
  6230                                  		; 11/12/2023
  6231                                  		;cli	; not necessary at this stage
  6232                                  
  6233                                  		; 10/12/2023
  6234                                  		;mov	[cs:Orig_Int1Eh_Table+2], ds
  6235                                  		;mov	[cs:Orig_Int1Eh_Table], si
  6236 00001B96 1E                      		push	ds
  6237 00001B97 07                      		pop	es
  6238 00001B98 0E                      		push	cs
  6239 00001B99 1F                      		pop	ds
  6240 00001B9A 8C06[141A]              		mov	[Orig_Int1Eh_Table+2], es
  6241 00001B9E 8936[121A]              		mov	[Orig_Int1Eh_Table], si
  6242                                  
  6243                                  		; 21/12/2022
  6244                                  		; ds = 0 (?)
  6245                                  		;push	ax
  6246                                  		;xor	ax, ax
  6247                                  		;mov	ds, ax
  6248                                  		;pop	ax
  6249                                  
  6250                                  ; 02/10/2022
  6251                                  ; ------------------------------------------------------------------------------
  6252                                  ; Note: Retro DOS v4.0 Kernel does not use/contain MSLOAD part of IO.SYS (5.0)
  6253                                  ; 	Because, Retro DOS v2 boot sector loads complete/entire MSDOS.SYS
  6254                                  ;	(RETRODOS.SYS) Kernel file (IO.SYS & MSDOS.SYS together).
  6255                                  ;	As result of boot sector ve init differences, Retro DOS init code (here)
  6256                                  ;	moves kernel to segment 070h at first, then sets diskette parameters
  6257                                  ;	at segment 50h (while MSDOS 5.0 boot sector sets this).
  6258                                  ; ------------------------------------------------------------------------------
  6259                                  
  6260                                  ; msload will check the extended boot record and set ax, bx accordingly.
  6261                                  
  6262                                  ;	msload passes a 32 bit sector number hi word in ax and low in bx
  6263                                  ;	save this in cs:bios_h and cs:bios_l. this is for the start of
  6264                                  ;	data sector of the bios.
  6265                                  
  6266                                  		;mov	[cs:bios_h], ax	; (start of) dos bios (IO.SYS) data sector
  6267                                  		;mov	[cs:bios_l], bx
  6268                                  		; 10/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  6269                                  		;mov	[cs:First_Data_Sector+2], ax
  6270                                  		;mov	[cs:First_Data_Sector], bx
  6271                                  		;mov	[cs:Boot_Drv], dl
  6272                                  		; ds = cs
  6273 00001BA2 A3[FE19]                		mov	[First_Data_Sector+2], ax
  6274 00001BA5 891E[FC19]              		mov	[First_Data_Sector], bx
  6275 00001BA9 8816[801A]              		mov	[Boot_Drv], dl
  6276                                  	
  6277                                  ; with the following information from msload, we don't need the
  6278                                  ;     boot sector any more.-> this will solve the problem of 29 kb size
  6279                                  ;     limitation of msbio.com file.
  6280                                  
  6281 00001BAD 0E                      		push	cs		; Save a peck of interrupt vectors...
  6282 00001BAE 07                      		pop	es
  6283                                  		
  6284 00001BAF 51                      		push	cx ; +++ ; ch = [MediaByte]
  6285                                  		;push	di ; *! (not necessary) ; 10/12/2023
  6286                                  
  6287                                  		; 10/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  6288 00001BB0 FC                      		cld	; (may not be necessary)
  6289                                  		
  6290 00001BB1 31C0                    		xor	ax, ax
  6291 00001BB3 8ED8                    		mov	ds, ax	; ds = 0
  6292                                  
  6293                                  		; 06/04/2024
  6294 00001BB5 50                      		push	ax ; push ds ; 0
  6295                                  
  6296                                  		;mov	ax, 544h	; SYSINIT segment
  6297 00001BB6 B80405                  		mov	ax, SYSINITSEG
  6298                                  
  6299                                  		; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1D06h)
  6300                                  
  6301                                  		; check (1st sector) of the root directory -of BOOT CD-
  6302                                  		; for special names (as boot option signature)
  6303                                  
  6304 00001BB9 BE4005                  		mov	si, 540h  ; ROOT DIRECTORY BUFFER offset 40h 
  6305                                  				  ; (BOOT DRV's root directory the 3rd entry)
  6306                                  chk_boot_hdnoz:
  6307 00001BBC 803C00                  		cmp	byte [si], 0
  6308 00001BBF 7436                    		jz	short chk_no_logo_noz
  6309 00001BC1 813C5F42                		cmp	word [si], 425Fh ; '_BOOT_HDNOZ'
  6310 00001BC5 7527                    		jnz	short chk_next_1
  6311 00001BC7 817C024F4F              		cmp	word [si+2], 4F4Fh ; 'OO'
  6312 00001BCC 7520                    		jnz	short chk_next_1
  6313 00001BCE 817C04545F              		cmp	word [si+4], 5F54h
  6314 00001BD3 7519                    		jnz	short chk_next_1
  6315 00001BD5 817C064844              		cmp	word [si+6], 4448h ; 'HD'
  6316 00001BDA 7512                    		jnz	short chk_next_1
  6317 00001BDC 817C084E4F              		cmp	word [si+8], 4F4Eh
  6318 00001BE1 750B                    		jnz	short chk_next_1
  6319 00001BE3 807C0A5A                		cmp	byte [si+0Ah], 5Ah ; 'Z'
  6320 00001BE7 7505                    		jnz	short chk_next_1
  6321 00001BE9 E895FE                  		call	cd_boot_option
  6322 00001BEC EB09                    		jmp	short chk_no_logo_noz
  6323                                  chk_next_1:
  6324 00001BEE 83C620                  		add	si, 32	; (next entry)
  6325 00001BF1 81FE0007                		cmp	si, 700h
  6326 00001BF5 72C5                    		jb	short chk_boot_hdnoz
  6327                                  chk_no_logo_noz:
  6328 00001BF7 BE4005                  		mov	si, 540h  ; (BOOT DRV's root directory the 3rd entry)
  6329                                  chk_no_logo_noz2_nxt:
  6330 00001BFA 803C00                  		cmp	byte [si], 0
  6331 00001BFD 7431                    		jz	short write_start_msg
  6332 00001BFF 813C4E4F                		cmp	word [si], 4F4Eh ; 'NO_LOGO NOZ'
  6333 00001C03 7522                    		jnz	short chk_next_2
  6334 00001C05 817C025F4C              		cmp	word [si+2], 4C5Fh
  6335 00001C0A 751B                    		jnz	short chk_next_2
  6336 00001C0C 817C044F47              		cmp	word [si+4], 474Fh
  6337 00001C11 7514                    		jnz	short chk_next_2
  6338 00001C13 817C064F20              		cmp	word [si+6], 204Fh
  6339 00001C18 750D                    		jnz	short chk_next_2
  6340 00001C1A 817C084E4F              		cmp	word [si+8], 4F4Eh
  6341 00001C1F 7506                    		jnz	short chk_next_2
  6342 00001C21 807C0A5A                		cmp	byte [si+0Ah], 5Ah
  6343 00001C25 741C                    		jz      short startmsg_ok
  6344                                  chk_next_2:
  6345 00001C27 83C620                  		add	si, 32	; (next entry)
  6346 00001C2A 81FE0007                		cmp	si, 700h
  6347 00001C2E 72CA                    		jb	short chk_no_logo_noz2_nxt
  6348                                  write_start_msg:
  6349 00001C30 8ED8                    		mov	ds, ax	; SYSINIT segment
  6350 00001C32 BE[4550]                		mov	si, StartMsg	; "Starting PC DOS...\r\n\n"
  6351                                  startmsg_nxt_chr:
  6352 00001C35 AC                      		lodsb
  6353 00001C36 08C0                    		or	al, al
  6354 00001C38 7409                    		jz	short startmsg_ok
  6355 00001C3A B40E                    		mov     ah, 0Eh
  6356 00001C3C BB0700                  		mov	bx, 7
  6357 00001C3F CD10                    		int	10h             ; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  6358                                  					; AL = character, BH = display page (alpha modes)
  6359                                  					; BL = foreground color (graphics modes)
  6360 00001C41 EBF2                    		jmp	short startmsg_nxt_chr
  6361                                  startmsg_ok:
  6362                                  		; 06/04/2024
  6363 00001C43 1F                      		pop	ds ; 0
  6364                                  
  6365                                  		; 10/12/2023
  6366                                  		; ds = 0
  6367                                  
  6368                                  		; 21/12/2022
  6369                                  		; ds = 0 (?)
  6370                                  		; 24/12/2022
  6371                                  		; ds = cs
  6372                                  		;xor	cx, cx
  6373                                  		;mov	ds, cx
  6374                                  		; ds = 0
  6375                                  
  6376                                  		;mov	cl, 5
  6377                                  		; 10/12/2023
  6378 00001C44 B90500                  		mov	cx, 5		; NUMROMVECTORS
  6379                                  					; no. of rom vectors to	be saved
  6380                                  		;mov	si, offset RomVectors ; point to list of int vectors
  6381 00001C47 BE[0001]                		mov	si, RomVectors
  6382                                  
  6383                                  		; 10/12/2023
  6384 00001C4A FA                      		cli
  6385                                  next_int_:		
  6386 00001C4B 2E                      		cs	; 16/10/2022
  6387 00001C4C AC                      		lodsb		
  6388                                  		;lods	byte ptr cs:[si] ; cs lodsb
  6389 00001C4D 98                      		cbw			; ax = interrupt number
  6390 00001C4E D1E0                    		shl	ax, 1
  6391 00001C50 D1E0                    		shl	ax, 1		; int no * 4
  6392 00001C52 89C7                    		mov	di, ax		; interrupt vector address
  6393 00001C54 87F7                    		xchg	si, di		; rombios interrupt vector address in si
  6394                                  					; saving address in di
  6395 00001C56 AD                      		lodsw			; movsw
  6396 00001C57 AB                      		stosw
  6397 00001C58 AD                      		lodsw			; movsw
  6398 00001C59 AB                      		stosw			; save the vector
  6399 00001C5A 87F7                    		xchg	si, di
  6400 00001C5C E2ED                    		loop	next_int_
  6401                                  		
  6402                                  		; 10/12/2023
  6403                                  		;pop	di  ; *!
  6404                                  		;pop	cx ; +++ ; ch = [MediaByte]
  6405                                  
  6406                                  ; we need to save int13 in two places in case we are running on an at.
  6407                                  ; on ats we install the ibm supplied rom_bios patch which hooks
  6408                                  ; int13 ahead of orig13. since int19 must unhook int13 to point to the
  6409                                  ; rom int13 routine, we must have that rom address also stored away.
  6410                                  
  6411                                  		; 21/12/2022
  6412                                  		;mov	ax, [cs:Old13]	; save old13 in orig13 also
  6413                                  		;mov	[cs:Orig13], ax
  6414                                  		;mov	ax, [cs:Old13+2]
  6415                                  		;mov	[cs:Orig13+2], ax
  6416                                  
  6417                                  		; 16/10/2022
  6418 00001C5E C7064C00[ED06]          		mov	word [13h*4], block13
  6419                                  		;mov	word ptr ds:4Ch, offset	block13	; 13h*4
  6420                                  					; set up int 13	for new	action
  6421 00001C64 8C0E4E00                		mov	[13h*4+2], cs
  6422                                  		;mov	word ptr ds:4Eh, cs ; 13h*4+2
  6423 00001C68 C7065400[9907]          		mov	word [15h*4], Int15
  6424                                  		;mov	word ptr ds:54h, offset	Int15 ;	15h*4
  6425                                  					; set up int 15	for new	action
  6426 00001C6E 8C0E5600                		mov	[15h*4+2], cs
  6427                                  		;mov	word ptr ds:56h, cs ; 15h*4+2
  6428 00001C72 C7066400[5907]          		mov	word [19h*4], int19
  6429                                  		;mov	word ptr ds:64h, offset	int19 ;	19h*4
  6430                                  					; set up int 19	for new	action
  6431 00001C78 8C0E6600                		mov	[19h*4+2], cs
  6432                                  		;mov	word ptr ds:66h, cs ; 19h*4+2
  6433                                  
  6434                                  		; 10/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  6435 00001C7C A16800                  		mov	ax, [68h]	 ; 1Ah*4
  6436 00001C7F 8B3E6A00                		mov	di, [6Ah]	 ; 1Ah*4+2
  6437 00001C83 C7066800[AF06]          		mov	word [68h], Int1A
  6438 00001C89 8C0E6A00                		mov	[6Ah], cs
  6439                                  
  6440                                  		; 21/12/2022
  6441 00001C8D 0E                      		push	cs
  6442 00001C8E 1F                      		pop	ds
  6443                                  
  6444                                  		; 10/12/2023
  6445 00001C8F A3[AB06]                		mov	[Orig1A], ax
  6446 00001C92 893E[AD06]              		mov	[Orig1A+2], di
  6447                                  
  6448 00001C96 A1[0601]                		mov	ax, [Old13]	; save old13 in orig13 also
  6449 00001C99 A3[B400]                		mov	[Orig13], ax
  6450 00001C9C A1[0801]                		mov	ax, [Old13+2]
  6451 00001C9F A3[B600]                		mov	[Orig13+2], ax
  6452                                  					; ;
  6453 00001CA2 FB                      		sti
  6454 00001CA3 CD11                    		int	11h		; EQUIPMENT DETERMINATION
  6455                                  					; Return: AX = equipment flag bits
  6456                                  		; 10/12/2023
  6457                                  		;jmp	short chk_fd_count
  6458                                  		; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1DF7h) ; *!!*
  6459                                  		; ((signature))
  6460                                  		;push	dx		; 52h ; 'R'
  6461                                  		;push	ax		; 50h ; 'P'
  6462                                  		;push	bx		; 53h ; 'S'
  6463                                  
  6464                                  ; we have to support a system that does not have any diskette
  6465                                  ; drives but only hardfiles. this system will ipl from the hardfile.
  6466                                  ; if the equipment flag bit 0 is 1, then the system has diskette drive(s).
  6467                                  ; otherwise, the system has only hardfiles.
  6468                                  ;
  6469                                  ; important thing is that still, for compatibility reason, the drive letter
  6470                                  ; for the hardfiles start from "c". so, we still need to allocate dummy bds
  6471                                  ; drive a and drive b. at sysinit time, we are going to set cds table entry
  6472                                  ; of dpb pointer for these drives to 0, so any user attempt to access this
  6473                                  ; drives will get "invalid drive letter ..." message. we are going to
  6474                                  ; establish "fakefloppydrv" flag. ***sysinit module should call int 11h to
  6475                                  ; determine whether there are any diskette drivers in the system or not.!!!***
  6476                                  
  6477                                  ; check the register returned by the equipment determination interrupt
  6478                                  ; we have to handle the case of no diskettes in the system by faking
  6479                                  ; two dummy drives.
  6480                                  ;
  6481                                  ; if the register indicates that we do have floppy drives we don't need
  6482                                  ; to do anything special.
  6483                                  ;
  6484                                  ; if the register indicates that we don't have any floppy drives then
  6485                                  ; what we need to do is set the fakefloppydrv variable, change the
  6486                                  ; register to say that we do have floppy drives and then go to execute
  6487                                  ; the code which starts at notsingle. this is because we can skip the
  6488                                  ; code given below which tries to find if there are one or two drives
  6489                                  ; since we already know about this.
  6490                                  
  6491                                  chk_fd_count:	; 10/12/2023
  6492                                  		;or	ax, 1	; *!!*
  6493                                  		
  6494                                  		; 12/12/2022
  6495 00001CA5 A801                    		test	al, 1
  6496                                  		;test	ax, 1		; floppy drives	present	?
  6497 00001CA7 7525                    		jnz	short normalfloppydrv ;	yes.
  6498                                  
  6499                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
  6500                                  ; whether it is an old ROM BIOS or a new one
  6501                                  ;
  6502                                  ; WARNING !!!
  6503                                  ;
  6504                                  ; This sequence of code is present in SYSINIT1.ASM also. Any modification
  6505                                  ; here will require an equivalent modification in SYSINIT1.ASM also
  6506                                  
  6507                                  		; 10/12/2023
  6508                                  		; ((cx is already on top of the stack))
  6509                                  		;push	cx	; +++ ; ch = [MediaByte]
  6510                                  		;push	bx	; not necessary
  6511 00001CA9 50                      		push	ax
  6512 00001CAA 52                      		push	dx
  6513                                  		;push	di	; not necessary
  6514 00001CAB 06                      		push	es
  6515                                  
  6516 00001CAC B408                    		mov	ah, 8
  6517 00001CAE B200                    		mov	dl, 0
  6518 00001CB0 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  6519                                  					; DL = drive number
  6520                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  6521                                  					; DL = number of consecutive drives
  6522                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  6523 00001CB2 7204                    		jc	short _gdskp_error
  6524                                  		;mov	[cs:flp_drvs], dl
  6525                                  		; 21/12/2022
  6526                                  		; ds = cs
  6527 00001CB4 8816[7D1A]              		mov	[flp_drvs], dl
  6528                                  _gdskp_error:	
  6529                                  		; 10/12/2023
  6530 00001CB8 07                      		pop	es
  6531                                  		;pop	di
  6532 00001CB9 5A                      		pop	dx
  6533 00001CBA 58                      		pop	ax
  6534                                  		;pop	bx
  6535 00001CBB 59                      		pop	cx	; +++ ; ch = [MediaByte]
  6536 00001CBC 7210                    		jc	short normalfloppydrv
  6537                                  					; if error it is an old ROM BIOS
  6538                                  					; so, lets assume that ROM BIOS lied
  6539                                  		; 21/12/2022
  6540                                  		;cmp	byte [cs:flp_drvs], 0 ; number of drvs == 0?
  6541                                  		;jz	short _set_fake_flpdrv
  6542                                  		;mov	al, [cs:flp_drvs]
  6543 00001CBE A0[7D1A]                		mov	al, [flp_drvs]
  6544 00001CC1 08C0                    		or	al, al		; number of drvs == 0?
  6545 00001CC3 7403                    		jz	short _set_fake_flpdrv
  6546                                  
  6547                                  		;dec	al		; make it zero based
  6548                                  		; 18/12/2022
  6549 00001CC5 48                      		dec	ax
  6550 00001CC6 EB0A                    		jmp	short got_num_flp_drvs
  6551                                  ; ----------------------------------------------------------------------------
  6552                                  
  6553                                  _set_fake_flpdrv:
  6554                                  		; 21/12/2022
  6555                                  		;mov	ax, 1
  6556                                  		; 10/12/2023
  6557 00001CC8 40                      		inc	ax ; al = 1
  6558 00001CC9 A2[111A]                		mov	[fakefloppydrv], al ; 1
  6559                                  		;mov	byte [cs:fakefloppydrv], 1
  6560                                  		;			; we don't have any floppy drives.
  6561                                  		;mov	ax, 1
  6562 00001CCC EB09                    		jmp	short settwodrive ; well then set it for two drives!
  6563                                  ; ----------------------------------------------------------------------------
  6564                                  
  6565                                  normalfloppydrv:			; yes, bit 0 is 1.			
  6566 00001CCE D0C0                    		rol	al, 1		; there	exist floppy drives.
  6567 00001CD0 D0C0                    		rol	al, 1		; put bits 6 & 7 into bits 0 & 1
  6568                                  got_num_flp_drvs:			
  6569                                  		;and	ax, 3		; only look at bits 0 &	1
  6570                                  		; 18/12/2022
  6571 00001CD2 2403                    		and	al, 3
  6572 00001CD4 7505                    		jnz	short notsingle	; zero means single drive system
  6573 00001CD6 40                      		inc	ax		; pretend it's a two drive system
  6574                                  settwodrive:				; set this to two fakedrives
  6575                                  		; 21/12/2022
  6576                                  		; ds = cs
  6577 00001CD7 FE06[7800]              		inc	byte [single]
  6578                                  		;inc	byte [cs:single] ; remember this
  6579                                  notsingle:				
  6580 00001CDB 40                      		inc	ax		; ax has number	of drives, 2-4
  6581                                  					; is also 0 indexed boot drive if we
  6582                                  					; booted off hard file
  6583 00001CDC 88C1                    		mov	cl, al		; ch is	fat id,	cl # floppies
  6584                                  
  6585                                  ; 16/10/2022
  6586                                  ; MSDOS 3.3 - "MSEQU.INC" (24/07/1987)
  6587                                  INITSPOT EQU	534h	; IBM wants 4 zeros here
  6588                                  BRKADR	EQU	1BH * 4	; 6CH, 1BH break vector address
  6589                                  TIMADR	EQU	1CH * 4	; 70H, 1CH timer interrupt
  6590                                  DSKADR	EQU	1EH * 4	; address of ptr to disk parameters
  6591                                  SEC9	EQU	522h	; address of disk parameters
  6592                                  CHROUT	EQU	29h
  6593                                  LSTDRV	EQU     504h
  6594                                  
  6595                                  ; determine whether we booted from floppy or hard disk...
  6596                                  
  6597 00001CDE F6C280                  		test	dl, 80h		; boot from floppy ?
  6598 00001CE1 7505                    		jnz	short gothrd	; no.
  6599 00001CE3 31C0                    		xor	ax, ax		; indicate boot	from drive a
  6600                                  		; 10/12/2023
  6601 00001CE5 A2[801A]                		mov     [Boot_Drv], al
  6602                                  gothrd:					
  6603 00001CE8 31D2                    		xor	dx, dx ; 0	; ax = 0-based drive we	booted from
  6604                                  					; bios_l, bios_h set.
  6605                                  					; cl = number of floppies including fake one
  6606                                  					; ch = media byte
  6607 00001CEA FA                      		cli
  6608 00001CEB 8ED2                    		mov	ss, dx		; set stack segment and stack pointer
  6609 00001CED BC0007                  		mov	sp, 700h
  6610 00001CF0 FB                      		sti
  6611                                  
  6612 00001CF1 51                      		push	cx ; *		; save number of floppies and media byte
  6613 00001CF2 88EC                    		mov	ah, ch		; FAT ID to AH
  6614 00001CF4 50                      		push	ax ; **		; save boot drive number and media byte
  6615                                  		
  6616                                  ; let model_byte, secondary_model_byte be set here!!!
  6617                                  
  6618 00001CF5 B4C0                    		mov	ah, 0C0h
  6619 00001CF7 CD15                    		int	15h		; SYSTEM - GET CONFIGURATION (XT after 1/10/86,AT mdl 3x9,CONV,XT286,PS)
  6620 00001CF9 7215                    		jb	short no_rom_system_conf ; just	use Model_Byte
  6621 00001CFB 80FC00                  		cmp	ah, 0
  6622 00001CFE 7510                    		jnz	short no_rom_system_conf
  6623                                  
  6624                                  		; 21/12/2022
  6625                                  		; ds = cs
  6626 00001D00 268A4702                		mov	al, [es:bx+2]	; [es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
  6627 00001D04 A2[AF05]                		mov	[model_byte], al
  6628                                  		;mov	[cs:model_byte], al
  6629                                  					; get/save model byte
  6630 00001D07 268A4703                		mov	al, [es:bx+3]	; [es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
  6631 00001D0B A2[B005]                		mov	[secondary_model_byte], al
  6632                                  		;mov	[cs:secondary_model_byte], al
  6633                                  					; get/save secondary model byte
  6634 00001D0E EB0C                    		jmp	short turn_timer_on
  6635                                  ;-----------------------------------------------------------------------------
  6636                                  
  6637                                  no_rom_system_conf:			
  6638 00001D10 BEFFFF                  		mov	si, 0FFFFh
  6639 00001D13 8EC6                    		mov	es, si
  6640                                  		; 21/12/2022
  6641 00001D15 26A00E00                		mov	al, [es:0Eh]	; get model byte (from 0FFFFh:0Eh)
  6642 00001D19 A2[AF05]                		mov	[model_byte], al
  6643                                  		;mov	[cs:model_byte], al ; save model byte
  6644                                  turn_timer_on:				
  6645 00001D1C B020                    		mov	al, 20h	; ' '   ; turn on the timer
  6646 00001D1E E620                    		out	20h, al		; Interrupt controller,	8259A.
  6647                                  					; AKPORT
  6648                                  
  6649                                  ; some olivetti m24 machines have an 8530 serial communications
  6650                                  ; chip installed at io address 50h and 52h. if we're running
  6651                                  ; on one of those, we must inhibit the normal aux port initialization
  6652                                  
  6653                                  		; 21/12/2022
  6654                                  		; ds = cs
  6655 00001D20 803E[AF05]00            		cmp	byte [model_byte], 0
  6656                                  		;cmp	byte [cs:model_byte], 0 ; next to last	byte in	rom bios
  6657 00001D25 7510                    		jnz	short not_olivetti_m24 ; skip for all other machines
  6658                                  					; (except olivetti m24)
  6659 00001D27 E466                    		in	al, 66h		; is 8530 installed?
  6660 00001D29 A820                    		test	al, 20h
  6661 00001D2B 740A                    		jz	short not_olivetti_m24 ; we're done if not
  6662 00001D2D B00F                    		mov	al, 0Fh		; double check
  6663 00001D2F E650                    		out	50h, al
  6664 00001D31 E450                    		in	al, 50h
  6665 00001D33 A801                    		test	al, 1		; this test was	copied from olivetti
  6666 00001D35 7414                    		jz	short skip_aux_port_init ; take	this branch if 8530 installed
  6667                                  
  6668                                  not_olivetti_m24:			
  6669 00001D37 B003                    		mov	al, 3		; init com4
  6670 00001D39 E8EA0A                  		call	aux_init
  6671 00001D3C B002                    		mov	al, 2		; init com3
  6672 00001D3E E8E50A                  		call	aux_init
  6673 00001D41 B001                    		mov	al, 1		; init com2
  6674 00001D43 E8E00A                  		call	aux_init
  6675 00001D46 30C0                    		xor	al, al		; init com1
  6676 00001D48 E8DB0A                  		call	aux_init
  6677                                  
  6678                                  skip_aux_port_init:			
  6679 00001D4B B002                    		mov	al, 2		; init lpt3
  6680 00001D4D E8CE0A                  		call	print_init
  6681 00001D50 B001                    		mov	al, 1		; init lpt2
  6682 00001D52 E8C90A                  		call	print_init
  6683 00001D55 30C0                    		xor	al, al		; init lpt1
  6684 00001D57 E8C40A                  		call	print_init
  6685                                  		
  6686 00001D5A 31D2                    		xor	dx, dx ; 0
  6687 00001D5C 8EDA                    		mov	ds, dx		; to initialize	print screen vector
  6688 00001D5E 8EC2                    		mov	es, dx
  6689                                  
  6690                                  		; 11/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  6691 00001D60 BF3405                  		mov	di, 534h	; offset INITSPOT
  6692                                  		;mov	di, INITSPOT	; 0534h
  6693                                  					; IBMDOS.COM's first cluster - high word
  6694                                  					; 520h (the 2nd entry of root dir) + 14h
  6695 00001D63 8B05                    		mov	ax, [di]
  6696                                  		;mov	[firstcluster_hw], ax
  6697                                  		; 06/04/2024
  6698 00001D65 2EA3[7E1A]              		mov	[cs:firstcluster_hw], ax
  6699                                  
  6700 00001D69 31C0                    		xor	ax, ax
  6701                                  		; 11/12/2023
  6702                                  		; 16/10/2022
  6703                                  		;mov	di, INITSPOT	; 0534h
  6704                                  		;;mov	di, 534h	; INITSPOT (0000h:0534h)
  6705                                  					; IBM wants 4 zeros here
  6706 00001D6B AB                      		stosw
  6707 00001D6C AB                      		stosw
  6708 00001D6D 8CC8                    		mov	ax, cs		; fetch	segment
  6709 00001D6F C7066C00[0E06]          		mov	word [BRKADR], cbreak
  6710                                  		;mov	word ptr ds:6Ch, offset	cbreak ; [BRKADR]
  6711                                  					; break	entry point
  6712 00001D75 A36E00                  		mov	[BRKADR+2], ax		
  6713                                  		;mov	ds:6Eh,	ax	; vector for break
  6714 00001D78 C706A400[8206]          		mov	word [CHROUT*4], outchr
  6715                                  		;mov	word ptr ds:0A4h, offset outchr	; [CHROUT*4]
  6716 00001D7E A3A600                  		mov	[CHROUT*4+2], ax
  6717                                  		;mov	ds:0A6h, ax	; [CHROUT*4+2]
  6718 00001D81 BF0400                  		mov	di, 4
  6719 00001D84 BB[1406]                		mov	bx, intret ; 19/10/2022
  6720                                  		;mov	bx, offset intret ; intret (cs:intret)
  6721                                  					; will initialize rest of interrupts
  6722 00001D87 93                      		xchg	ax, bx
  6723 00001D88 AB                      		stosw			; location 4
  6724 00001D89 93                      		xchg	ax, bx		; cs:
  6725 00001D8A AB                      		stosw			; int 1	; location 6
  6726 00001D8B 83C704                  		add	di, 4		; skip int 2
  6727 00001D8E 93                      		xchg	ax, bx
  6728 00001D8F AB                      		stosw			; location 12
  6729 00001D90 93                      		xchg	ax, bx		; cs:
  6730 00001D91 AB                      		stosw			; int 3	; location 14
  6731 00001D92 93                      		xchg	ax, bx
  6732 00001D93 AB                      		stosw			; location 16
  6733 00001D94 93                      		xchg	ax, bx		; cs:
  6734 00001D95 AB                      		stosw			; int 4	; location 18
  6735 00001D96 89160005                		mov	[0500h], dx
  6736                                  		;mov	ds:500h, dx	; set print screen & break = 0
  6737 00001D9A 89160405                		mov	[LSTDRV], dx	; [0504h]
  6738                                  		;mov	ds:504h, dx	; clean	out last drive spec
  6739                                  
  6740                                  ; we need to initalize the cs:motorstartup variable from the disk
  6741                                  ; parameter table at sec9. the offsets in this table are defined in
  6742                                  ; the disk_parms struc in msdskprm.inc. 2 locs
  6743                                  
  6744 00001D9E A02C05                  		mov	al, [SEC9+0Ah]	; 16/10/2022 
  6745                                  		;mov	al, ds:52Ch	; [SEC9+DISK_PARMS.DISK_MOTOR_STRT]
  6746                                  					; [522h+0Ah]
  6747                                  		; 21/12/2022
  6748                                  		; ds = 0
  6749                                  
  6750 00001DA1 2EA2[2601]              		mov	[cs:motorstartup], al
  6751 00001DA5 2E803E[AF05]FD          		cmp	byte [cs:model_byte], 0FDh ; is this an old rom?
  6752 00001DAB 720B                    		jb	short no_diddle	; no
  6753 00001DAD C7062B050F02            		mov	word [SEC9+09h], 20Fh
  6754                                  		;mov	word ptr ds:52Bh, 20Fh ; [SEC9+DISK_PARMS.DISK_HEAD_STTL], 0200h+NORMSETTLE
  6755                                  					; set head settle and motor start on pc-1 pc-2 pc-xt hal0
  6756 00001DB3 C6062205DF              		mov	byte [SEC9+0], 0DFh
  6757                                  		;mov	byte ptr ds:522h, 0DFh ; [SEC9+DISK_PARMS.DISK_SPECIFY_1]
  6758                                  					;  set 1st specify byte	on pc-1	pc-2 pc-xt hal0
  6759                                  no_diddle:				
  6760 00001DB8 CD12                    		int	12h		; MEMORY SIZE -
  6761                                  					; Return: AX = number of contiguous 1K blocks of memory
  6762 00001DBA B106                    		mov	cl, 6
  6763 00001DBC D3E0                    		shl	ax, cl		; convert memory size to 16-byte blocks	(segment no.)
  6764                                  		
  6765                                  		; 21/12/2022
  6766                                  		;pop	cx
  6767                                  		;mov	[cs:drvfat], cx ; save drive to load dos, and fat id
  6768                                  		
  6769 00001DBE 50                      		push	ax ; ***	; save real top	of memory
  6770                                  
  6771                                  ;M068 - BEGIN
  6772                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
  6773                                  
  6774                                  		; 21/12/2022
  6775                                  		; ds = 0
  6776                                  		;push	ds
  6777                                  		;push	bx		; pushes not required but since this
  6778                                  		;			; happens to be a last minute change
  6779                                  		;			; & since it is only init code.
  6780                                  		;xor	bx, bx
  6781                                  		;mov	ds, bx
  6782                                  
  6783                                  		;mov	bx, ds:0BCh	; [2Fh*4]
  6784 00001DBF 8B1EBC00                		mov	bx, [2Fh*4]
  6785                                  		;mov	ds, word ptr ds:0BEh ; [2Fh*4+2]
  6786 00001DC3 8E1EBE00                		mov	ds, [2Fh*4+2]
  6787 00001DC7 817F035250              		cmp	word [bx+3], 'RP' ; 'RPL'
  6788                                  		;cmp	word ptr [bx+3], 'PR' ; 'RPL'
  6789 00001DCC 750F                    		jnz	short SkipRPL
  6790 00001DCE 807F054C                		cmp	byte [bx+5], 'L'
  6791                                  		;cmp	byte ptr [bx+5], 'L'
  6792 00001DD2 7509                    		jnz	short SkipRPL
  6793 00001DD4 89C2                    		mov	dx, ax		; get TOM into DX
  6794 00001DD6 B8064A                  		mov	ax, 4A06h	; (multMULT shl	8) + multMULTRPLTOM
  6795 00001DD9 CD2F                    		int	2Fh		; Get new TOM from any RPL
  6796 00001DDB 89D0                    		mov	ax, dx
  6797                                  SkipRPL:
  6798                                  		; 21/12/2022				
  6799                                  		;pop	bx
  6800                                  		;pop	ds
  6801                                  ;M068 - END
  6802                                  		; 21/12/2022
  6803 00001DDD 0E                      		push	cs
  6804 00001DDE 1F                      		pop	ds
  6805                                  
  6806 00001DDF 83E840                  		sub	ax, 64		; room for fatloc segment. (1 kb buffer)
  6807                                  		; 21/12/2022
  6808 00001DE2 A3[021A]                		mov	[fatloc], ax
  6809                                  		;mov	[cs:fatloc], ax	; location to read fat
  6810                                  		
  6811 00001DE5 83E840                  		sub	ax, 64
  6812 00001DE8 A3[041A]                		mov	[init_bootseg], ax ; 21/12/2022
  6813                                  		;mov	[cs:init_bootseg], ax
  6814 00001DEB 58                      		pop	ax ; ***	; get back real top of memory for
  6815                                  
  6816                                  		; 21/12/2022
  6817 00001DEC 59                      		pop	cx ; **
  6818 00001DED 890E[FA19]              		mov	[drvfat], cx	; save drive to load dos, and fat id
  6819                                  
  6820                                  		;;mov	dx, 46Dh	; SYSINIT segment
  6821                                  		;mov	dx, 544h	; 10/12/2023 (PCDOS 7.1 IBMBIO.COM)	
  6822 00001DF1 BA0405                  		mov	dx, SYSINITSEG	; 17/10/2022
  6823 00001DF4 8EDA                    		mov	ds, dx
  6824                                  
  6825                                  ; set pointer to resident device driver chain
  6826                                  
  6827                                  		; 17/10/2022
  6828 00001DF6 C706[7502][2300]        		mov	word [DEVICELIST], res_dev_list
  6829                                  		;mov	word [273h], res_dev_list
  6830                                  		;;mov	word ptr ds:273h, offset res_dev_list
  6831                                  					; [SYSINIT+DEVICE_LIST]
  6832 00001DFC 8C0E[7702]              		mov	[DEVICELIST+2], cs		
  6833                                  		;mov	[275h], cs
  6834                                  		;;mov	word ptr ds:275h, cs ; [SYSINIT+DEVICE_LIST+2]
  6835                                  
  6836 00001E00 A3[9402]                		mov	[MEMORYSIZE], ax
  6837                                  		;mov	[292h], ax
  6838                                  		;;mov	ds:292h, ax	; [SYSINIT+MEMORY_SIZE]
  6839                                  
  6840 00001E03 FEC1                    		inc	cl
  6841 00001E05 880E[9802]              		mov	[DEFAULTDRIVE], cl
  6842                                  		;mov	[296h], cl
  6843                                  		;;mov	ds:296h, cl	; [SYSINIT+DEFAULT_DRIVE]
  6844                                  
  6845                                  		;mov	word [CURRENTDOSLOCATION], 0AF8h ; 10/12/2023
  6846 00001E09 C706[7302]2C0A          		mov	word [CURRENTDOSLOCATION], DOSLOADSEG
  6847                                  		;mov	word [271h], 83Fh ; (MSDOS.SYS segment)
  6848                                  		;;mov	word ptr ds:271h, 83Fh ; [SYSINIT+CURRENT_DOS_LOCATION]
  6849                                  					; dos_load_seg
  6850                                  
  6851                                  ; important: some old ibm hardware generates spurious int 0F's due to bogus
  6852                                  ; printer cards. we initialize this value to point to an iret only if
  6853                                  ;
  6854                                  ; 1) the original segment points to storage inside valid ram.
  6855                                  ;
  6856                                  ; 2) the original segment is 0F000:xxxx
  6857                                  
  6858                                  		;;;mov	ax, 46Dh	; SYSINIT segment
  6859                                  		;;mov	ax, 544h	; 10/12/2023
  6860                                  		;mov	ax, SYSINITSEG	; 17/10/2022
  6861                                  		;mov	es, ax
  6862                                  		; 21/12/2022
  6863 00001E0F 8EC2                    		mov	es, dx ; SYSINITSEG
  6864 00001E11 31C9                    		xor	cx, cx ; 0
  6865 00001E13 8ED9                    		mov	ds, cx		; segment 0
  6866                                  		;mov	ax, ds:3Eh	; [0Fh*4+2]
  6867 00001E15 A13E00                  		mov	ax, [0Fh*4+2]	; segment for INT 0Fh
  6868                                  		; 18/10/2022
  6869 00001E18 263B06[9402]            		cmp	ax, [es:MEMORYSIZE] ; es:292h
  6870                                  		;cmp	ax, es:292h	; [ES:SYSINIT+MEMORY_SIZE]  ; (condition 1)
  6871 00001E1D 7605                    		jbe	short resetintf
  6872 00001E1F 3D00F0                  		cmp	ax, 0F000h	; (condition 2)
  6873 00001E22 750A                    		jnz	short keepintf
  6874                                  resetintf:	
  6875 00001E24 C7063C00[1406]          		mov	word [0Fh*4], intret			
  6876                                  		;mov	word ptr ds:3Ch, offset	intret ; [0Fh*4]
  6877 00001E2A 8C0E3E00                		mov	word [0Fh*4+2], cs
  6878                                  		;mov	word ptr ds:3Eh, cs ; [0Fh*4+2]
  6879                                  keepintf:				
  6880                                  ; end important
  6881                                  
  6882                                  ; 17/10/2022
  6883                                  ; 28/12/2018 - Retro DOS v4.0
  6884                                  
  6885                                  ; (MSDOS 6.0, MSINIT.ASM, 1991)
  6886                                  ;
  6887                                  ; we will check if the system has ibm extended keyboard by
  6888                                  ; looking at a byte at 40:96. if bit 4 is set, then extended keyboard
  6889                                  ; is installed, and we are going to set keyrd_func to 10h, keysts_func to 11h
  6890                                  ; for the extended keyboard function. use cx as the temporary register.
  6891                                  
  6892                                  		; 21/12/2022
  6893                                  		; ds = 0, cx = 0
  6894                                  		;xor	cx, cx
  6895                                  		;mov	ds, cx
  6896                                  		
  6897 00001E2E 8A0E9604                		mov	cl, [496h]	; get keyboard flag
  6898                                  
  6899                                  		; 21/12/2022
  6900 00001E32 0E                      		push	cs
  6901 00001E33 1F                      		pop	ds
  6902                                  
  6903 00001E34 F6C110                  		test	cl, 10h		; extended keyboard ?
  6904 00001E37 740A                    		jz	short org_key	; no, original keyboard
  6905                                  
  6906                                  		; 21/12/2022
  6907                                  		; ds = cs
  6908 00001E39 C606[7E04]10            		mov	byte [keyrd_func], 10h ; extended keyboard
  6909 00001E3E C606[7F04]11            		mov	byte [keysts_func], 11h
  6910                                  		;mov	byte [cs:keyrd_func], 10h ; extended keyboard
  6911                                  		;mov	byte [cs:keysts_func], 11h
  6912                                  					; change for extended keyboard functions
  6913                                  org_key:
  6914                                  
  6915                                  ; 02/06/2018 - Retro DOS v3.0
  6916                                  
  6917                                  ;**************************************************************
  6918                                  ;	will initialize the number of drives
  6919                                  ;	after the equipment call (int 11h) bits 6&7 will tell
  6920                                  ;	the indications are as follows:
  6921                                  ;
  6922                                  ;	bits	7	6	drives
  6923                                  ;		0	0	1
  6924                                  ;		0	1	2
  6925                                  ;		1	0	3
  6926                                  ;		1	1	4
  6927                                  ;**************************************************************
  6928                                  				
  6929                                  		; 21/12/2022
  6930                                  		; ds = cs
  6931                                  		;push	cs
  6932                                  		;pop	ds
  6933                                  		;push	cs
  6934                                  		;pop	es
  6935                                  		
  6936 00001E43 E8C10B                  		call	cmos_clock_read	; If cmos clock	exists,
  6937                                  					; then set the system time according to	that.
  6938                                  					; also,	reset the cmos clock rate.
  6939                                  		; 18/10/2022
  6940                                  		;mov	word ptr BData_start, offset harddrv ;
  6941                                  					; set up pointer to hdrive
  6942                                  		; 02/10/2022
  6943 00001E46 C706[0000][4B08]        		mov	word [hdrv_pat], harddrv 
  6944                                  					
  6945 00001E4C 58                      		pop	ax ; *		; number of floppies and FAT ID
  6946 00001E4D 30E4                    		xor	ah, ah		; chuck	fat id byte
  6947 00001E4F A2[7500]                		mov	[drvmax], al	; remember which drive is hard disk
  6948 00001E52 A2[2501]                		mov	[dsktnum], al	; and set initial number of drives
  6949 00001E55 D1E0                    		shl	ax, 1
  6950 00001E57 0106[5E1A]              		add	[last_dskdrv_table], ax
  6951                                  
  6952                                  		; 10/12/2023 - Retro DOS v5.0 IO.SYS (IBMBIO.COM)
  6953                                  		; ((MSDOS 6.22 IO.SYS & PCDOS 7.1 IBMBIO.COM))
  6954                                  		; ........
  6955 00001E5B 1E                      		push    ds
  6956 00001E5C B800F0                  		mov     ax, 0F000h
  6957 00001E5F 8ED8                    		mov     ds, ax
  6958                                  
  6959 00001E61 813EEAFF434F            		cmp	word [0FFEAh], 'CO' ; 'COMPAQ'
  6960 00001E67 751F                    		jne	short skip_mode2
  6961 00001E69 813EECFF4D50            		cmp	word [0FFECh], 'MP'
  6962 00001E6F 7517                    		jne	short skip_mode2
  6963 00001E71 813EEEFF4151            		cmp	word [0FFEEh], 'AQ'
  6964 00001E77 750F                    		jne	short skip_mode2
  6965                                  
  6966 00001E79 B800E4                  		mov	ax, 0E400h	; get advanced system info (COMPAQ ROMBIOS)
  6967 00001E7C CD15                    		int	15h
  6968 00001E7E 7208                    		jc	short skip_mode2
  6969                                  		; 10/12/2023
  6970                                  		; PCDOS 7.1 IBMBIO.COM
  6971                                  		;or	bx, 0           ; or bx,40h ; enable mode 2
  6972                                  					; (MSDOS 6.0)
  6973                                  		; MSDOS 6.22 IO.SYS
  6974 00001E80 83CB40                  		or	bx, 40h		; enable mode 2 (dual harddisk controller)
  6975 00001E83 B880E4                  		mov	ax, 0E480h      ; set advanced system info (COMPAQ ROMBIOS)
  6976 00001E86 CD15                    		int	15h
  6977                                  skip_mode2:
  6978 00001E88 1F                      		pop	ds
  6979                                  		; ........
  6980                                  
  6981 00001E89 B280                    		mov	dl, 80h
  6982 00001E8B B408                    		mov	ah, 8
  6983 00001E8D CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  6984                                  					; DL = drive number
  6985                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  6986                                  					; DL = number of consecutive drives
  6987                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  6988 00001E8F 7204                    		jc	short enddrv
  6989 00001E91 8816[5D1A]              		mov	[hnum], dl
  6990                                  enddrv:
  6991                                  		; 21/12/2022
  6992 00001E95 0E                      		push	cs
  6993 00001E96 07                      		pop	es
  6994                                  
  6995                                  ; scan the list of drives to determine their type. we have three flavors of
  6996                                  ; diskette drives:
  6997                                  ;
  6998                                  ;   48tpi drives    we do nothing special for them
  6999                                  ;   96tpi drives    mark the fact that they have changeline support.
  7000                                  ;   3.5"  drives    mark changeline support and small.
  7001                                  ;
  7002                                  ; the following code uses registers for certain values:
  7003                                  ;
  7004                                  ;   dl - physical drive
  7005                                  ;   ds:di - points to current bds
  7006                                  ;   cx - flag bits for bds
  7007                                  ;   dh - form factor for the drive (1 - 48tpi, 2 - 96tpi, 3 - 3.5" medium)
  7008                                  					
  7009 00001E97 30D2                    		xor	dl, dl
  7010                                  
  7011                                  		; 21/12/2022
  7012                                  		; ds = cs
  7013                                  		;push	cs
  7014                                  		;pop	ds
  7015                                  
  7016 00001E99 C606[2C01]09            		mov	byte [eot], 9
  7017 00001E9E BF[1901]                		mov	di, start_bds 	; if we	are faking floppy drives we need
  7018                                  					; to set aside two bdss	for the	two fake floppy	drives
  7019                                  
  7020                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS)
  7021                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.0, MSINIT.ASM)
  7022                                  
  7023                                  ; check to see if we are faking floppy drives. if not we don't
  7024                                  ; do anything special. if we are faking floppy drives we need
  7025                                  ; to set aside two bdss for the two fake floppy drives. we
  7026                                  ; don't need to initalise any fields though. so starting at start_bds
  7027                                  ; use the link field in the bds structure to go to the second bds
  7028                                  ; in the list and initalise it's link field to -1 to set the end of
  7029                                  ; the list. then jump to the routine at dohard to allocate/initialise
  7030                                  ; the bds for harddrives.
  7031                                  
  7032 00001EA1 803E[111A]01            		cmp	byte [fakefloppydrv], 1
  7033 00001EA6 750B                    		jnz	short loop_drive
  7034 00001EA8 8B3D                    		mov	di, [di]	; [di+BDS.link]
  7035                                  					; di <-	first bds link
  7036 00001EAA 8B3D                    		mov	di, [di]	; [di+BDS.link]
  7037                                  					; di <-	second bds link
  7038 00001EAC C705FFFF                		mov	word [di], 0FFFFh ; -1 ; set end of link
  7039 00001EB0 E98801                  		jmp	dohard		; allocate/initialise bds for harddrives
  7040                                  ;-----------------------------------------------------------------------------
  7041                                  
  7042                                  loop_drive:				
  7043 00001EB3 3A16[7500]              		cmp	dl, [drvmax]
  7044 00001EB7 7203                    		jb	short got_more
  7045 00001EB9 E97B01                  		jmp	done_drives
  7046                                  ;-----------------------------------------------------------------------------
  7047                                  
  7048                                  got_more:	
  7049                                  		; 10/12/2023			
  7050                                  		;xor	cx, cx		; zero all flags
  7051 00001EBC 8B3D                    		mov	di, [di]	; [di+BDS.link]
  7052                                  					; get next bds
  7053                                  		; ........
  7054                                  		; 10/12/2023 - Retro DOS v5.0
  7055                                  		; (PCDOS 7.1 IBMBIO.COM BIOSDATA:2046h) 
  7056 00001EBE 83FFFF                  		cmp	di, 0FFFFh      ; end of link ?
  7057 00001EC1 7516                    		jne	short not_last_bds
  7058 00001EC3 88D0                    		mov	al, dl          ; drive number (0 based)
  7059 00001EC5 98                      		cbw
  7060 00001EC6 01C0                    		add	ax, ax
  7061 00001EC8 05[3C05]                		add	ax, dskdrvs
  7062 00001ECB A3[5E1A]                		mov	[last_dskdrv_table], ax
  7063 00001ECE 8B3E[601A]              		mov	di, [end_of_bdss]
  7064 00001ED2 E8FC0A                  		call	xinstall_bds
  7065 00001ED5 FE0E[7500]              		dec	byte [drvmax]
  7066                                  not_last_bds:
  7067                                  		; ........
  7068                                  
  7069 00001ED9 B600                    		mov	dh, 0		; ff48tpi
  7070                                  					; set form factor to 48	tpi
  7071 00001EDB C606[0E1A]28            		mov	byte [num_cyln], 40 ; 40 tracks per side
  7072                                  		
  7073                                  		; 21/12/2022
  7074                                  		;push	ds
  7075 00001EE0 57                      		push	di
  7076 00001EE1 52                      		push	dx
  7077                                  		;push	cx ; not necessary (10/12/2023)
  7078 00001EE2 06                      		push	es ; es=cs=ds ; 21/12/2022
  7079                                  
  7080                                  		; ...........
  7081                                  		; 10/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  7082                                  		;xor	bx, bx
  7083                                  		;xor	cx, cx
  7084 00001EE3 52                      		push	dx  ; dl = drive number
  7085                                  
  7086 00001EE4 B408                    		mov	ah, 8
  7087 00001EE6 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  7088                                  					; DL = drive number
  7089                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  7090                                  					; DL = number of consecutive drives
  7091                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  7092                                  		;jc	short noparmsfromrom
  7093                                  		; 10/12/2023
  7094 00001EE8 58                      		pop	ax  ; al = drive number
  7095 00001EE9 7303                    		jnc	short chk_drv_type
  7096 00001EEB E9E600                  		jmp	noparmsfromrom
  7097                                  
  7098                                  chk_drv_type:
  7099                                  		; 10/12/2023
  7100                                  		; ch = low eight bits of maximum cylinder number
  7101                                  		; cl = maximum sector number (bits 5-0)
  7102                                  		;      high two bits of maximum cylinder number (bits 7-6)
  7103                                  		;
  7104 00001EEE 80FB10                  		cmp	bl, 10h		; ATAPI Removable Media Device
  7105 00001EF1 7554                    		jne	short not_atapi_removable
  7106                                  		
  7107                                  		; save ds:si
  7108 00001EF3 1E                      		push	ds
  7109                                  		;push	si	; not necessary (10/12/2023)
  7110                                  		
  7111 00001EF4 88C2                    		mov	dl, al
  7112 00001EF6 83EC1A                  		sub	sp, 26
  7113 00001EF9 31C0                    		xor	ax, ax ; 0
  7114 00001EFB 50                      		push	ax
  7115 00001EFC B81E00                  		mov	ax, 30
  7116 00001EFF 50                      		push	ax
  7117 00001F00 89E6                    		mov	si, sp		; DS:SI = segment:offset pointer to Result Buffer
  7118 00001F02 16                      		push	ss
  7119 00001F03 1F                      		pop	ds
  7120 00001F04 B448                    		mov	ah, 48h
  7121 00001F06 CD13                    		int	13h		; DISK - IBM/MS Extension
  7122                                  					; GET DRIVE PARAMETERS (DL - drive, DS:SI - buffer)
  7123 00001F08 7239                    		jc	short ext_gdp_err
  7124 00001F0A 8B4408                  		mov	ax, [si+8]	; physical number of heads
  7125 00001F0D A3[0C1A]                		mov	[num_heads], ax
  7126 00001F10 8B4404                  		mov	ax, [si+4]	; physical number of cylinders
  7127 00001F13 A3[0E1A]                		mov	[num_cyln], ax
  7128 00001F16 8A440C                  		mov	al, [si+0Ch]	; physical number of sectors per track
  7129 00001F19 A2[101A]                		mov	[sec_trk], al
  7130 00001F1C 3A06[2C01]              		cmp	al, [eot]
  7131 00001F20 7603                    		jbe	short _eotok
  7132 00001F22 A2[2C01]                		mov	[eot], al
  7133                                  
  7134                                  _eotok:		; 10/12/2023
  7135                                  		;xor	al, al
  7136 00001F25 31C9                    		xor	cx, cx ; 0
  7137 00001F27 F6440210                		test	byte [si+2], 10h ; information flags
  7138                                  					; bit 4 = Device has change line support
  7139 00001F2B 7403                    		jz	short not_chgline_sup
  7140                                  		;or	al, 2		; change line support
  7141 00001F2D 80C902                  		or	cl, 2
  7142                                  not_chgline_sup:
  7143 00001F30 83C41E                  		add	sp, 30
  7144                                  		;pop	si	; (10/12/2023)
  7145 00001F33 1F                      		pop	ds
  7146                                  		;
  7147 00001F34 07                      		pop	es	; es=cs=ds (21/12/2022)
  7148                                  		;pop	cx	; (10/12/2023)
  7149 00001F35 5A                      		pop	dx
  7150 00001F36 5F                      		pop	di
  7151                                  		;pop	ds	; (21/12/2022)
  7152                                  
  7153                                  		; 10/12/2023
  7154 00001F37 F6C102                  		test	cl, 2
  7155                                  		;test	al, 2
  7156                                  		;jz	short gotother_j
  7157 00001F3A 7450                    		jz	short gotother
  7158                                  		;or	cl, al
  7159 00001F3C C606[7700]01            		mov	byte [fhave96], 1 ; Device has change line support
  7160                                  gotother_j:
  7161 00001F41 EB49                    		jmp	short gotother
  7162                                  ext_gdp_err:
  7163 00001F43 83C41E                  		add	sp, 30
  7164                                  		;pop	si	; (10/12/2023)
  7165 00001F46 1F                      		pop	ds
  7166                                  
  7167                                  		; 10/12/2023
  7168                                  not_atapi_removable:
  7169                                  		; ...........
  7170                                  
  7171                                  ; if cmos is bad, it gives es,ax,bx,cx,dh,di=0. cy=0.
  7172                                  ; in this case, we are going to put bogus informations to bds table.
  7173                                  ; we are going to set ch=39,cl=9,dh=1 to avoid divide overflow when
  7174                                  ; they are calculated at the later time. this is just for the diagnostic
  7175                                  ; diskette which need msbio,msdos to boot up before it sets cmos.
  7176                                  ; this should only happen with drive b.
  7177                                  
  7178 00001F47 80FD00                  		cmp	ch, 0		; if ch=0, then	cl,dh=0	too.
  7179 00001F4A 7505                    		jnz	short pfr_ok
  7180                                  		
  7181                                  		;mov	ch, 39		; rom gave wrong info.
  7182                                  		;mov	cl, 9		; let's default to 360k.
  7183                                  		; 21/12/2022
  7184 00001F4C B90927                  		mov	cx, 2709h
  7185 00001F4F B601                    		mov	dh, 1
  7186                                  pfr_ok:					
  7187                                  		;inc	dh		; make number of heads 1-based
  7188                                  		;mov	[num_heads], dh	; save parms returned by rom
  7189                                  		; 10/12/2023
  7190 00001F51 86D6                    		xchg	dl, dh
  7191 00001F53 30F6                    		xor	dh, dh
  7192 00001F55 42                      		inc	dx		; make number of heads 1-based
  7193 00001F56 8916[0C1A]              		mov	[num_heads], dx
  7194                                  
  7195                                  		;inc	ch		; make number of cylinders 1-based
  7196                                  		;and	cl, 3Fh
  7197                                  		;mov	[sec_trk], cl
  7198                                  		;mov	[num_cyln], ch	; assume less than 256 cylinders!!
  7199                                  		; 10/12/2023
  7200 00001F5A 88CA                    		mov	dl, cl
  7201 00001F5C 80E23F                  		and	dl, 3Fh
  7202 00001F5F 8816[101A]              		mov	[sec_trk], dl
  7203 00001F63 86CD                    		xchg	cl, ch
  7204 00001F65 D0C5                    		rol	ch, 1
  7205 00001F67 D0C5                    		rol	ch, 1
  7206 00001F69 80E503                  		and	ch, 3
  7207 00001F6C 41                      		inc	cx		; make number of cylinders 1-based
  7208 00001F6D 890E[0E1A]              		mov	[num_cyln], cx
  7209                                  		
  7210                                  ; make sure that eot contains the max number of sec/trk in system of floppies
  7211                                  
  7212                                  		;mov	cl, [sec_trk] ; 10/12/2023
  7213                                  		;cmp	cl, [eot]	; may set carry
  7214                                  		;;jbe	short eot_ok
  7215                                  		;; 09/12/2022
  7216                                  		;;jne	short eotok  ; wrong ! 14/08/2023
  7217                                  		;; 14/08/2023
  7218                                  		;jbe	short eotok
  7219                                  		;mov	[eot], cl
  7220                                  		; 10/12/2023
  7221 00001F71 3A16[2C01]              		cmp	dl, [eot] ; dl = [sec_trk]
  7222 00001F75 7604                    		jbe	short eotok
  7223 00001F77 8816[2C01]              		mov	[eot], dl
  7224                                  ;eot_ok:
  7225                                  eotok:
  7226                                  		; 10/12/2023
  7227                                  		; !!!
  7228                                  		; (following pops are moved to 'chk_changeline' procedure)
  7229                                  		;pop	es ; es=cs=ds ; 21/12/2022
  7230                                  		;;pop	cx	; (10/12/2023)
  7231                                  		;pop	dx
  7232                                  		;pop	di
  7233                                  
  7234                                  		; 21/12/2022
  7235                                  		;pop	ds
  7236                                  
  7237                                  ; Check	for presence of	changeline
  7238                                  
  7239                                  ; 10/12/2023
  7240                                  %if 0
  7241                                  		; 10/12/2023
  7242                                  		;xor	cx, cx	; 0
  7243                                  		;push	cx
  7244                                  		push	dx
  7245                                  
  7246                                  		mov	ah, 15h
  7247                                  		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  7248                                  					; DL = drive ID
  7249                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  7250                                  					; CX:DX	= number of sectors on the media
  7251                                  		; 10/12/2023
  7252                                  		pop	dx
  7253                                  		;pop	cx
  7254                                  		mov	cx, 0 ; 12/12/2023
  7255                                  		jc	short changeline_done
  7256                                  		cmp	ah, 2		; check	for presence of	changeline
  7257                                  		jnz	short changeline_done
  7258                                  
  7259                                  ; we have a drive with change line support.
  7260                                  
  7261                                  		or	cl, 2		; fchangeline
  7262                                  					; signal type
  7263                                  		mov	byte [fhave96], 1 ; remember that we have 96tpi disks
  7264                                  %endif
  7265                                  		; 10/12/2023
  7266 00001F7B E83800                  		call	chk_changeline
  7267                                  		;jc	short changeline_done
  7268                                  		
  7269                                  ; we now try to set up the form factor for the types of media that we know
  7270                                  ; and can recognise. for the rest, we set the form factor as "other".
  7271                                  
  7272                                  changeline_done:
  7273 00001F7E 803E[0E1A]28            		cmp	byte [num_cyln], 40
  7274 00001F83 750B                    		jnz	short try_80
  7275 00001F85 803E[101A]09            		cmp	byte [sec_trk], 9
  7276 00001F8A 765F                    		jbe	short nextdrive
  7277                                  gotother:	
  7278                                  		; 10/12/2023
  7279                                  		; ch = 0, cl = 2 or 0		
  7280                                  		
  7281 00001F8C B607                    		mov	dh, 7		; ffOther
  7282                                  					; we have a "strange" medium
  7283 00001F8E EB5B                    		jmp	short nextdrive
  7284                                  ;-----------------------------------------------------------------------------
  7285                                  
  7286                                  ; 80 cylinders and 9 sectors/track => 720 kb device
  7287                                  ; 80 cylinders and 15 sec/trk => 96 tpi medium
  7288                                  
  7289                                  try_80:					
  7290 00001F90 803E[0E1A]50            		cmp	byte [num_cyln], 80
  7291 00001F95 75F5                    		jnz	short gotother
  7292 00001F97 B609                    		mov	dh, 9		; ff288
  7293                                  					; assume 2.88 MB drive
  7294 00001F99 803E[101A]24            		cmp	byte [sec_trk], 36 ; is it	?
  7295 00001F9E 744B                    		jz	short nextdrive	; yeah,	go update
  7296                                  
  7297                                  		; 12/05/2019 (ff144 type will not be used -compatibility problem-)
  7298                                  		; 08/01/2018 - Retro DOS v4.0 feature only ! for 1.44MB diskettes
  7299                                  		;mov	dh, ff144
  7300                                  		;cmp	byte [sec_trk], 18
  7301                                  		;je	short nextdrive
  7302                                  
  7303 00001FA0 803E[101A]0F            		cmp	byte [sec_trk], 15
  7304 00001FA5 740B                    		jz	short got96
  7305                                  		
  7306 00001FA7 803E[101A]09            		cmp	byte [sec_trk], 9
  7307 00001FAC 75DE                    		jnz	short gotother
  7308                                  		
  7309 00001FAE B602                    		mov	dh, 2		; ffSmall
  7310 00001FB0 EB39                    		jmp	short nextdrive
  7311                                  ; ----------------------------------------------------------------------------
  7312                                  
  7313                                  got96:					
  7314 00001FB2 B601                    		mov	dh, 1		; ff96tpi
  7315 00001FB4 EB35                    		jmp	short nextdrive
  7316                                  
  7317                                  ; ----------------------------------------------------------------------------
  7318                                  		
  7319                                  		; 10/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  7320                                  		; check change line feature (and set fhave96 if there is)
  7321                                  		; (common procedure for 'eotok:' and 'noparmsfromrom:')
  7322                                  chk_changeline:
  7323 00001FB6 59                      		pop	cx ; near call return address
  7324                                  
  7325                                  		; (pop es, dx, di for 'eotok' and 'noparmsfromrom' procs)
  7326 00001FB7 07                      		pop	es ; es=cs=ds ; 21/12/2022
  7327                                  		;pop	cx	; (10/12/2023)
  7328 00001FB8 5A                      		pop	dx
  7329 00001FB9 5F                      		pop	di ; BDS address/offset
  7330                                  		
  7331 00001FBA 51                      		push	cx ; near call return address
  7332                                  
  7333                                  		;xor	cx, cx ; 0
  7334                                  		;push	cx
  7335 00001FBB 52                      		push	dx
  7336                                  
  7337 00001FBC B415                    		mov	ah, 15h
  7338 00001FBE CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  7339                                  					; DL = drive ID
  7340                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  7341                                  					; CX:DX	= number of sectors on the media
  7342 00001FC0 5A                      		pop	dx
  7343                                  		;pop	cx
  7344 00001FC1 B90000                  		mov	cx, 0
  7345 00001FC4 720D                    		jc	short chk_chgl_1
  7346                                  
  7347 00001FC6 80FC02                  		cmp	ah, 2		; is there changeline?
  7348 00001FC9 7508                    		jne	short chk_chgl_2 ; *
  7349                                  
  7350 00001FCB 80C902                  		or	cl, 2
  7351                                  		;or	cl, ah ; 2
  7352 00001FCE C606[7700]01            		mov	byte [fhave96], 1 ; fchangeline
  7353                                  		; cf = 0
  7354                                  chk_chgl_1:
  7355                                  chk_chgl_2:
  7356 00001FD3 C3                      		retn
  7357                                  
  7358                                  ;chk_chgl_2:	; *
  7359                                  ;		; 10/12/2023
  7360                                  ;		; ah = 1 ; harddisk type (ah = 3) return not possible here for floppies 
  7361                                  ;		;stc
  7362                                  ;		; cf = 1
  7363                                  ;		retn
  7364                                  
  7365                                  ; ----------------------------------------------------------------------------
  7366                                  
  7367                                  ; we have an old rom, so we either have a 48tpi or 96tpi drive. if the drive
  7368                                  ; has changeline, we assume it is a 96tpi, otherwise we treat it as a 48tpi.
  7369                                  
  7370                                  noparmsfromrom:
  7371                                  		; 10/12/2023
  7372                                  		; !!!
  7373                                  		; (following pops are moved to 'chk_changeline' procedure)
  7374                                  		;pop	es ; es=cs=ds ; 21/12/2022
  7375                                  		;;pop	cx	; (10/12/2023)
  7376                                  		;pop	dx
  7377                                  		;pop	di	
  7378                                  
  7379                                  		; 21/12/2022
  7380                                  		;pop	ds
  7381                                  ; 10/12/2023
  7382                                  %if 0
  7383                                  		; 10/12/2023
  7384                                  		;xor	cx, cx ; 0
  7385                                  		;push	cx
  7386                                  		push	dx
  7387                                  
  7388                                  
  7389                                  		mov	ah, 15h
  7390                                  		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  7391                                  					; DL = drive ID
  7392                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  7393                                  					; CX:DX	= number of sectors on the media
  7394                                  		; 10/12/2023
  7395                                  		pop	dx
  7396                                  		;pop	cx
  7397                                  		mov	cx, 0 ; 12/12/2023
  7398                                  		jc	short nextdrive
  7399                                  
  7400                                  		cmp	ah, 2		; is there changeline?
  7401                                  		jnz	short nextdrive
  7402                                  
  7403                                  		or	cl, 2
  7404                                  		mov	byte [fhave96], 1 ; fchangeline
  7405                                  %endif
  7406                                  		; 10/12/2023
  7407 00001FD4 E8DFFF                  		call	chk_changeline
  7408 00001FD7 7212                    		jc	short nextdrive
  7409                                  		
  7410                                  		; change line support, [fhave96] = 1
  7411                                  		
  7412 00001FD9 C606[0E1A]50            		mov	byte [num_cyln], 80
  7413 00001FDE B601                    		mov	dh, 1		; ff96tpi
  7414 00001FE0 B00F                    		mov	al, 15
  7415 00001FE2 3A06[2C01]              		cmp	al, [eot]
  7416 00001FE6 7603                    		jbe	short nextdrive
  7417 00001FE8 A2[2C01]                		mov	[eot], al
  7418                                  ; ----------------------------------------------------------------------------
  7419                                  
  7420                                  nextdrive:
  7421                                  		; 10/12/2023
  7422                                  		; ch = 0, cl = 2 or 0
  7423                                  		
  7424 00001FEB 80C920                  		or	cl, 20h		; fi_own_physical
  7425                                  					; set this true	for all	drives
  7426 00001FEE 88D7                    		mov	bh, dl		; save int13 drive number
  7427                                  
  7428                                  ; we need to do special things if we have a single drive system and are setting
  7429                                  ; up a logical drive. it needs to have the same int13 drive number as its
  7430                                  ; counterpart, but the next drive letter. also reset ownership flag.
  7431                                  ; we detect the presence of this situation by examining the flag single for the
  7432                                  ; value 2.
  7433 00001FF0 803E[7800]02            		cmp	byte [single], 2
  7434 00001FF5 7505                    		jnz	short not_special
  7435 00001FF7 FECF                    		dec	bh		; int13	drive number same for logical drive
  7436 00001FF9 80F120                  		xor	cl, 20h		; reset	ownership flag for logical drive
  7437                                  not_special:
  7438                                  
  7439                                  ; the values that we put in for BDS_RBPB.BPB_HEADS and
  7440                                  ; BDS_RBPB.BPB_SECTORSPERTRACK will only remain if the
  7441                                  ; form factor is of type "ffother".
  7442                                  				
  7443                                  		;xor	ax, ax		; fill BDS for drive
  7444                                  		;mov	al, [num_heads]
  7445                                  		; 10/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM) ; *
  7446 00001FFC A1[0C1A]                		mov	ax, [num_heads]
  7447                                  		;mov	[di+36h], ax	; [di+BDS.rheads]
  7448 00001FFF 894552                  		mov	[di+52h], ax	; [di+BDS.rheads] ; *
  7449 00002002 31C0                    		xor	ax, ax		; *
  7450 00002004 A0[101A]                		mov	al, [sec_trk]
  7451                                  		;mov	[di+34h], ax	; [di+BDS.rsecpertrack]
  7452 00002007 894550                  		mov	[di+50h], ax	; [di+BDS.rsecpertrack] ; *
  7453                                  		;mov	[di+23h], cx	; [di+BDS.flags]
  7454 0000200A 894D3F                  		mov	[di+3Fh], cx	; [di+BDS.flags] ; *
  7455                                  		;mov	[di+22h], dh	; [di+BDS.formfactor]
  7456 0000200D 88753E                  		mov	[di+3Eh], dh	; [di+BDS.formfactor] ; *
  7457 00002010 885505                  		mov	[di+5],	dl	; [di+BDS.drivelet]
  7458 00002013 887D04                  		mov	[di+4],	bh	; [di+BDS.drivenum]
  7459                                  		;mov	bl, [num_cyln]
  7460                                  		;mov	[di+25h], bl	; [di+BDS.cylinders]
  7461                                  		; 10/12/2023
  7462 00002016 A1[0E1A]                		mov	ax, [num_cyln]
  7463 00002019 894541                  		mov	[di+41h], ax	; [di+BDS.cylinders] ; *
  7464                                  
  7465 0000201C 803E[7800]01            		cmp	byte [single], 1 ; Special case for single drive system
  7466 00002021 7510                    		jnz	short no_single
  7467                                  		;mov	byte [single], 2 ; Don't forget we have
  7468                                  					; single drive system
  7469                                  		; 10/12/2023
  7470 00002023 FE06[7800]              		inc	byte [single]	; [single] = 2
  7471                                  		; 18/12/2022
  7472 00002027 80C910                  		or	cl, 10h
  7473                                  		;or	cx, 10h		; fi_am_mult
  7474                                  					; set that this	is one of several drives
  7475                                  		;or	[di+23h], cx	; [di+BDS.flags]
  7476 0000202A 094D3F                  		or	[di+3Fh], cx	; [di+BDS.flags] ; *
  7477                                  					; save flags
  7478 0000202D 8B3D                    		mov	di, [di]	; [di+BDS.link]
  7479                                  					; move to next BDS in list
  7480 0000202F FEC2                    		inc	dl		; add a	number
  7481 00002031 EBB8                    		jmp	short nextdrive	; Use same info	for BDS	as previous
  7482                                  ; ----------------------------------------------------------------------------
  7483                                  
  7484                                  no_single:				
  7485                                  		;inc	dl
  7486                                  		; 18/12/2022
  7487 00002033 42                      		inc	dx
  7488 00002034 E97CFE                  		jmp	loop_drive
  7489                                  ; ----------------------------------------------------------------------------
  7490                                  
  7491                                  		; 11/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  7492                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:21E8h)
  7493                                  done_drives:	
  7494                                  		;mov	word [di+BDS.link], -1			
  7495 00002037 C705FFFF                		mov	word [di], -1	; set link to null
  7496                                  
  7497                                  ; set up all the hard drives in	the system
  7498                                  
  7499                                  dohard:	
  7500 0000203B 8A36[5D1A]              		mov	dh, [hnum]
  7501 0000203F 08F6                    		or	dh, dh		; done if no hardfiles
  7502 00002041 7459                    		jz	short static_configure
  7503 00002043 B280                    		mov	dl, 80h
  7504                                  dohard1:				
  7505 00002045 52                      		push	dx
  7506 00002046 8B3E[601A]              		mov	di, [end_of_bdss]
  7507 0000204A 8A1E[7500]              		mov	bl, [drvmax]
  7508 0000204E B700                    		mov	bh, 0		; first	primary	partition (or active)
  7509 00002050 E89B02                  		call	sethard
  7510 00002053 7208                    		jc	short hardfile_err
  7511 00002055 E86409                  		call	dmax_check	; error	if already 26 drives
  7512 00002058 7303                    		jnb	short hardfile_err
  7513 0000205A E87409                  		call	xinstall_bds	; insert new bds into linked list
  7514                                  hardfile_err:				
  7515 0000205D 5A                      		pop	dx
  7516                                  		;inc	dl		; next hard drive
  7517                                  		; 12/12/2023
  7518 0000205E 42                      		inc	dx
  7519 0000205F FECE                    		dec	dh
  7520 00002061 75E2                    		jnz	short dohard1
  7521                                  
  7522                                  ; end of physical drive	initialization
  7523                                  
  7524                                  ; *** do not change the position of the following statement.
  7525                                  ; *** domini routine will use [drvmax] value for the start of the logical
  7526                                  ; *** drive number of mini disk(s).
  7527                                  					
  7528 00002063 E8C907                  		call	domini		; for setting up mini disks, if found
  7529                                  
  7530                                  ; -- begin added section
  7531                                  
  7532 00002066 8A36[5D1A]              		mov	dh, [hnum]	; we already know this is >0
  7533 0000206A B280                    		mov	dl, 80h
  7534                                  dohardx1:				
  7535 0000206C B701                    		mov	bh, 1		; do all subsequent primary partitions
  7536                                  dohardx2:				
  7537 0000206E 52                      		push	dx
  7538 0000206F 53                      		push	bx
  7539 00002070 8B3E[601A]              		mov	di, [end_of_bdss]
  7540 00002074 8A1E[7500]              		mov	bl, [drvmax]
  7541 00002078 E87302                  		call	sethard
  7542 0000207B 720E                    		jc	short dohardx4	; move to next hardfile	if error
  7543 0000207D E83C09                  		call	dmax_check	; make sure <=26 drives
  7544 00002080 7309                    		jnb	short dohardx4	; skip if error
  7545 00002082 E84C09                  		call	xinstall_bds	; insert new bds into linked list
  7546 00002085 5B                      		pop	bx		; get partition	number
  7547 00002086 5A                      		pop	dx		; restore physical drive counts
  7548 00002087 FEC7                    		inc	bh
  7549 00002089 EBE3                    		jmp	short dohardx2	; keep looping until we	fail
  7550                                  ; ----------------------------------------------------------------------------
  7551                                  
  7552                                  dohardx4:				
  7553 0000208B 5B                      		pop	bx		; unjunk partition number from stack
  7554 0000208C 5A                      		pop	dx		; restore physical drive counts
  7555                                  		;inc	dl		; next hard drive
  7556                                  		; 12/12/2023
  7557 0000208D 42                      		inc	dx
  7558 0000208E FECE                    		dec	dh
  7559 00002090 75DA                    		jnz	short dohardx1
  7560                                  
  7561                                  ; -- end changed section
  7562                                  
  7563                                  ;******************************************************************************
  7564                                  ; if more than 2 diskette drives on the system, then it is necessary to remap
  7565                                  ; the bds chain to adjust the logical drive num (drive letter) with greater
  7566                                  ; than two diskette drives
  7567                                  ;
  7568                                  ; new scheme:	if more than 2 disktte drives, first map the bds structure
  7569                                  ;		as usual and then rescan the bds chain to adjust the  drive
  7570                                  ;		letters. to do this, scan for disk drives and assign logical
  7571                                  ;		drive number starting from 2 and then rescan diskette drives
  7572                                  ;		and assign next to the last logical drive number of last disk
  7573                                  ;		drive to the 3rd and 4th diskette drives.
  7574                                  ;******************************************************************************
  7575                                  
  7576 00002092 803E[2501]02            		cmp	byte [dsktnum], 2 ; >2 diskette drives
  7577                                  		;jbe	short static_configure ; no - no need for remapping
  7578 00002097 7603                    		jbe	short no_remap
  7579 00002099 E8D601                  		call	remap		; remap	bds chain to adjust driver letters
  7580                                  no_remap:
  7581                                  
  7582                                  ; End of drive initialization.
  7583                                  
  7584                                  ; ----------------------------------------------------------------------------
  7585                                  
  7586                                  ;we now decide, based on the configurations available so far, what
  7587                                  ;code or data we need to keep as a stay resident code. the following table
  7588                                  ;shows the configurations under consideration. they are listed in the order
  7589                                  ;of their current position memory.
  7590                                  ;
  7591                                  ;configuration will be done in two ways:
  7592                                  ;
  7593                                  ;first, we are going to set "static configuration". static configuration will
  7594                                  ;consider from basic configuration to endof96tpi configuration. the result
  7595                                  ;of static configuration will be the address the dynamic configuration will
  7596                                  ;use to start with.
  7597                                  ;
  7598                                  ;secondly, "dynamic cofiguration" will be performed. dynamic configuration
  7599                                  ;involves possible relocation of code or data. dynamic configuration routine
  7600                                  ;will take care of bdsm tables and at rom fix module thru k09 suspend/resume
  7601                                  ;code individually. after these operation, [dosdatasg] will be set.
  7602                                  ;this will be the place sysinit routine will relocate msdos module for good.
  7603                                  
  7604                                  ; -- begin changed section
  7605                                  ;
  7606                                  ;   1.	 basic configuration for msbio (endfloppy)
  7607                                  ;   2.   end96tpi	; a system that supports "change line error"
  7608                                  ;   3.	 end of bdss	; end of bdss for hard disks
  7609                                  ;   4.	 endatrom	;some of at rom fix module.
  7610                                  ;   5.	 endcmosclockset;supporting program for cmos clock write.
  7611                                  ;   6.	 endk09 	;k09 cmos clock module to handle suspend/resume operation.
  7612                                  ;
  7613                                  
  7614                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS v5.0 IO.SYS)
  7615                                  
  7616                                  static_configure:			
  7617 0000209C 8B3E[601A]              		mov	di, [end_of_bdss]
  7618 000020A0 81FF[4C08]              		cmp	di, bdss	; 19/10/2022
  7619                                  		;cmp	di, offset bdss	; did we allocate any hard drive bdss?
  7620 000020A4 750D                    		jnz	short dynamic_configure	; that's the end, then
  7621                                  		; 18/10/2022
  7622 000020A6 BF[4C08]                		mov	di, end96tpi
  7623                                  		;mov	di, offset harddrv ; end96tpi
  7624                                  					; keep everything up to	end96tpi
  7625 000020A9 803E[7700]00            		cmp	byte [fhave96], 0
  7626 000020AE 7503                    		jnz	short dynamic_configure
  7627                                  		
  7628 000020B0 BF[3808]                		mov	di, endfloppy
  7629                                  dynamic_configure:			
  7630                                  		; 20/12/2022
  7631                                  		;push	cs
  7632                                  		;pop	es
  7633                                  		
  7634                                  		; 10/12/2023
  7635                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2268h)
  7636                                  		; (MSDOS 6.22 IO.SYS - BIOSDATA:1C34h)
  7637 000020B3 FC                      		cld	; clear direction flag is not necessary here !?
  7638                                  			; because there will not be a running program
  7639                                  			; which will set direction flag as backward (std)
  7640                                  
  7641                                  ; -- end changed section
  7642                                  
  7643                                  		; 21/12/2022
  7644                                  		; ds = cs <> es
  7645                                  		; ss = 0
  7646                                  		; sp = 700h
  7647                                  
  7648                                  		; 13/12/2023
  7649 000020B4 BE00F0                  		mov	si, 0F000h
  7650 000020B7 8EC6                    		mov	es, si		; ES ->	ROM BIOS segment
  7651                                  
  7652 000020B9 803E[AF05]FC            		cmp	byte [model_byte], 0FCh ; AT ?
  7653                                  		;jnz	short checkcmosclock
  7654                                  		; 10/12/2023
  7655 000020BE 751E                    		jnz	short checkcompaqbug ; no
  7656 000020C0 803E[5D1A]00            		cmp	byte [hnum], 0	; No hard file?
  7657                                  		;jz	short checkcmosclock
  7658 000020C5 7417                    		jz	short checkcompaqbug
  7659 000020C7 97                      		xchg	ax, di		; save allocation pointer in ax
  7660                                  		; 13/12/2023
  7661                                  		;mov	si, 0F000h
  7662                                  		;mov	es, si		; ES ->	ROM BIOS segment
  7663 000020C8 BE[661A]                		mov	si, bios_date	; "01/10/84"
  7664 000020CB BFF5FF                  		mov	di, 0FFF5h	; ROM BIOS string is at	F000:FFF5
  7665 000020CE B90900                  		mov	cx, 9		; bdate_l
  7666                                  					; Only patch ROM for bios 01/10/84
  7667 000020D1 F3A6                    		repe cmpsb		; check	for date + zero	on end
  7668 000020D3 97                      		xchg	ax, di		; restore allocation pointer
  7669                                  
  7670                                  ; M015 -- begin changes
  7671                                  
  7672                                  		;jnz	short checkcmosclock
  7673                                  		; 02/10/2022
  7674 000020D4 7508                    		jnz	short checkcompaqbug
  7675                                  
  7676                                  ; install at rom fix
  7677                                  
  7678                                  		; 19/10/2022
  7679                                  		;mov	cx, offset endatrom
  7680 000020D6 B9[2018]                		mov	cx, endatrom
  7681                                  		;mov	si, offset ibm_disk_io
  7682 000020D9 BE[F216]                		mov	si, ibm_disk_io
  7683 000020DC EB46                    		jmp	short install_int13_patch
  7684                                  ; ----------------------------------------------------------------------------
  7685                                  
  7686                                  ; M065 -- begin changes
  7687                                  ;
  7688                                  ; On certain systems with Western Digital disk controllers, the
  7689                                  ; following detection scheme caused an unpredictable and serious
  7690                                  ; failure. In particular, they've implemented a nonstandard
  7691                                  ; Int13(ah=16h) which reconfigures the hard drive, depending on
  7692                                  ; what happens to be at es:[bx] and other memory locations indexed
  7693                                  ; off of it.
  7694                                  ;
  7695                                  ; Compaq was unable to tell us exactly which kind of systems have
  7696                                  ; the bug, except that they guarantee that the bug was fixed in
  7697                                  ; ROM BIOSs dated 08/04/86 and later. We'll check for the COMPAQ
  7698                                  ; string, and then look for date codes before 08/04/86 to decide
  7699                                  ; when to install the hook.
  7700                                  
  7701                                  ;checkcmosclock:
  7702                                  ; 02/10/2022				
  7703                                  checkcompaqbug:
  7704                                  		; 21/12/2022
  7705                                  		; es = 0F000h
  7706                                  		;mov	ax, 0F000h	; point	to ROM BIOS
  7707                                  		;mov	es, ax
  7708                                  
  7709                                  		; 19/10/2022
  7710 000020DE 26813EEAFF434F          		cmp	word [es:0FFEAh], 'CO'
  7711                                  		;cmp	word ptr es:0FFEAh, 'OC' ; look for COMPAQ
  7712 000020E5 754B                    		jnz	short not_compaq_patch
  7713 000020E7 26813EECFF4D50          		cmp	word [es:0FFECh], 'MP'
  7714                                  		;cmp	word ptr es:0FFECh, 'PM'
  7715 000020EE 7542                    		jnz	short not_compaq_patch
  7716 000020F0 26813EEEFF4151          		cmp	word [es:0FFEEh], 'AQ'
  7717                                  		;cmp	word ptr es:0FFEEh, 'QA'
  7718 000020F7 7539                    		jnz	short not_compaq_patch
  7719                                  
  7720                                  ; We're running on a COMPAQ. Now look at the date code.
  7721                                  
  7722 000020F9 26A1FBFF                		mov	ax, [es:0FFFBh]	; get year
  7723 000020FD 86E0                    		xchg	ah, al
  7724                                  
  7725                                  ; 11/12/2023
  7726                                  ; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:22B9h)
  7727                                  %if 0
  7728                                  		cmp	ax, 3836h       ; '68' (NASM syntax) (('86' in MASM syntax))
  7729                                  		ja	short checkk09
  7730                                  		jz	short chkcompaqbug1
  7731                                  		cmp	ax, 3739h       ; '97'
  7732                                  		jbe	short not_compaq_patch
  7733                                  		stc
  7734                                  chkcompaqbug1:
  7735                                  		jb	short do_compaq_patch
  7736                                  		mov	ax, [es:0FFF5h]
  7737                                  		xchg	ah, al
  7738                                  		cmp	ax, 3038h       ; '80'
  7739                                  		ja	short not_compaq_patch
  7740                                  		jb	short do_compaq_patch
  7741                                  		mov	ax, [es:0FFF8h]
  7742                                  		xchg	ah, al
  7743                                  		cmp	ax, 3034h       ; '40'
  7744                                  		jnb	short not_compaq_patch
  7745                                  do_compaq_patch:
  7746                                  %endif
  7747                                  		; 11/12/2023
  7748                                  		; (MSDOS 6.22 IO.SYS - BIOSDATA:1C85h)
  7749                                  
  7750 000020FF 3D3638                  		cmp	ax, 3836h ; 02/10/2022 (NASM syntax)
  7751                                  		;cmp	ax, '86'        ; 3836h
  7752                                  					; is it	86?
  7753 00002102 772E                    		ja	short not_compaq_patch
  7754 00002104 7218                    		jb	short do_compaq_patch
  7755 00002106 26A1F5FF                		mov	ax, [es:0FFF5h]	; get month
  7756 0000210A 86E0                    		xchg	ah, al
  7757 0000210C 3D3830                  		cmp	ax, 3038h ; 02/10/2022 (NASM syntax)
  7758                                  		;cmp	ax, '08'        ; 3038h
  7759                                  					; is it	08?
  7760 0000210F 7721                    		ja	short not_compaq_patch
  7761 00002111 720B                    		jb	short do_compaq_patch
  7762 00002113 26A1F8FF                		mov	ax, [es:0FFF8h]	; get day
  7763 00002117 86E0                    		xchg	ah, al
  7764 00002119 3D3430                  		cmp	ax, 3034h ; 02/10/2022 (NASM syntax)
  7765                                  		;cmp	ax, '04'        ; 3034h
  7766                                  					; is it	04?
  7767 0000211C 7314                    		jnb	short not_compaq_patch
  7768                                  
  7769                                  do_compaq_patch:			
  7770 0000211E B9[3D18]                		mov	cx, end_compaq_i13hook
  7771                                  		;mov	si, endatrom
  7772                                  		; 11/12/2023
  7773 00002121 BE[2018]                		mov	si, compaq_disk_io ; endatrom
  7774                                  
  7775                                  install_int13_patch:			
  7776 00002124 0E                      		push	cs
  7777 00002125 07                      		pop	es
  7778                                  		; 18/10/2022
  7779 00002126 893E[B400]              		mov	[Orig13], di	; set new rom bios int 13 vector
  7780 0000212A 8C0E[B600]              		mov	[Orig13+2], cs
  7781 0000212E 29F1                    		sub	cx, si		; size of rom fix module
  7782 00002130 F3A4                    		rep movsb		; relocate it
  7783                                  
  7784                                  ; M065 -- end changes
  7785                                  
  7786                                  ; ----------------------------------------------------------------------------
  7787                                  not_compaq_patch:			; M065
  7788                                  		; 17/10/2022
  7789                                  checkcmosclock:	
  7790                                  		; 18/10/2022		
  7791 00002132 0E                      		push	cs
  7792 00002133 07                      		pop	es
  7793                                  
  7794                                  		; 21/12/2022
  7795                                  		; ds = cs = es
  7796                                  		; ss = 0
  7797                                  		; sp = 700h
  7798                                  
  7799                                  ; 09/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  7800                                  %if 0
  7801                                  		cmp	byte [havecmosclock], 1 ; cmos clock exists?
  7802                                  		jnz	short checkk09	; no
  7803                                  
  7804                                  		mov	word [daycnttoday], di
  7805                                  		;mov	word ptr ds:daycnttoday, di ; set the address for mschar
  7806                                  		mov	cx, 209	 ; enddaycnttoday - daycnt_to_day
  7807                                  		mov	si, daycnt_to_day
  7808                                  		rep movsb
  7809                                  		mov	word [bintobcd], di
  7810                                  		;mov	word ptr ds:bintobcd, di ; set the address for msclock
  7811                                  					; let original segment stay
  7812                                  		;mov	cx, 11	; endcmosclockset - bin_to_bcd
  7813                                  		; 08/08/2023
  7814                                  		mov	cl, 11
  7815                                  		mov	si, bin_to_bcd
  7816                                  		rep movsb
  7817                                  %endif
  7818                                  
  7819                                  ; 09/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  7820                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:22F4h
  7821                                  		;push	cs
  7822                                  		;pop	es
  7823                                  checkk09:				
  7824 00002134 57                      		push	di ; ? ; save ? ; 21/12/2022
  7825                                  
  7826                                  ; 13/12/2023 - Retro DOS v4.2 IO.SYS
  7827                                  ; (MSDOS 6.22 IO.SYS - BIOSDATA:1CDAh)
  7828                                  %if 0		
  7829                                  
  7830                                  		mov	ax, 4101h	; wait for bh=es:[di]
  7831                                  		mov	bl, 1		; wait for 1 clock tick
  7832                                  		mov	bh, [es:di]
  7833                                  		stc			; Assume we will fail
  7834                                  		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  7835                                  					; AL = condition type, BH = condition compare or mask value
  7836                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  7837                                  					; DX = I/O port	address	if AL bit 4 set
  7838                                  					; 11/12/2023
  7839                                  					; ES:DI = user byte if AL bit 4 clear
  7840                                  %endif
  7841                                  		; 13/12/2023 - Retro DOS v5.0 IBMBIO.COM/IO.SYS
  7842                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:1CDAh)
  7843                                  	
  7844                                  		; ........
  7845                                  
  7846 00002135 B80041                  		mov	ax, 4100h	; wait for any external event (al=0)
  7847 00002138 B304                    		mov	bl, 4		; wait for 4 clock ticks
  7848 0000213A F9                      		stc			; Assume we will fail
  7849 0000213B CD15                    		int	15h		; SYSTEM - WAIT ON EXTERNAL EVENT (CONVERTIBLE)
  7850                                  					; AL = condition type, BH = condition compare or mask value
  7851                                  					; BL = timeout value times 55 milliseconds, 00h means no timeout
  7852                                  					; DX = I/O port address if AL bit 4 set
  7853                                  		; ........
  7854                                  
  7855 0000213D 5F                      		pop	di ; ?
  7856 0000213E 721B                    		jc	short configdone ; 21/12/2022
  7857                                  
  7858 00002140 C606[7900]01            		mov	byte [fhavek09], 1
  7859                                  					; remember we have a k09 type
  7860 00002145 1E                      		push	ds
  7861 00002146 31C0                    		xor	ax, ax
  7862 00002148 8ED8                    		mov	ds, ax
  7863                                  		
  7864 0000214A 893EB001                		mov	[6Ch*4], di
  7865                                  		;mov	ds:1B0h, di	; [6Ch*4]
  7866                                  					; new int 6Ch handler
  7867                                  		;mov	word ptr ds:1B2h, cs ; [6Ch*4+2]
  7868 0000214E 8C0EB201                		mov	word [6Ch*4+2], cs
  7869 00002152 1F                      		pop	ds
  7870                                  		; 20/12/2022
  7871                                  		; ds = cs = es
  7872                                  		;mov	si, int6c
  7873                                  		;mov	cx, endk09-int6c ; 459
  7874                                  		;;mov	cx, 459		; endk09 - int6c
  7875                                  					; size of k09 routine
  7876                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  7877                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:2315h
  7878 00002153 BE[3E18]                		mov	si, int_6Ch
  7879 00002156 B9BC01                  		mov	cx, endk09-int_6Ch ; 461 in PCDOS 7.1 IBMBIO.COM
  7880 00002159 F3A4                    		rep movsb		;
  7881                                  					; set up config	stuff for sysinit
  7882                                  ; ----------------------------------------------------------------------------
  7883                                  ; Set up config stuff for SYSINIT
  7884                                  
  7885                                  ; 17/10/2022
  7886                                  ;SETDRIVE equ SetDrive - DOSBIOSEG_2C7h ; (4D7h for MSDOS 5.0 IO.SYS)
  7887                                  ;GETBP equ GetBp - DOSBIOSEG_2C7h ; (606h for MSDOS 5.0 IO.SYS)
  7888                                  ; 09/12/2022
  7889                                  SETDRIVE equ SetDrive
  7890                                  GETBP equ GetBp
  7891                                  		
  7892                                  		; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7893                                  configdone:				
  7894 0000215B 0E                      		push	cs		; di is	final ending address of	msbio.
  7895 0000215C 1F                      		pop	ds
  7896                                  
  7897 0000215D 83C70F                  		add	di, 15		; round	(up) to	paragraph
  7898                                  		; 10/12/2022
  7899                                  		;shr	di, 1
  7900                                  		;shr	di, 1
  7901                                  		;shr	di, 1
  7902                                  		;shr	di, 1
  7903 00002160 B104                    		mov	cl, 4
  7904 00002162 D3EF                    		shr	di, cl		
  7905                                  		; 10/12/2022
  7906 00002164 83C770                  		add	di, 70h		; KERNEL_SEGMENT (in fact: IO.SYS loading segment)
  7907                                  		; 19/10/2022 - Temporary !
  7908                                  		;db	81h, 0C7h, 70h, 0 ; add di, 0070h
  7909 00002167 893E[0300]              		mov	[DosDataSg], di	; where	the dos	data segment will be
  7910                                  
  7911                                  ; 11/12/2023 - Retro DOS v5.0 IBMBIO.COM/IO.SYS
  7912                                  ; ----------------------------------------------------------------------------
  7913                                  ; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2332h)
  7914                                  ; ---------------------------------------
  7915                                  ; ("IBMDOS.COM" kernel file reading code here, below...)	
  7916                                  
  7917 0000216B A1[FA19]                		mov	ax, [drvfat]	; get drive and	fat id
  7918                                  		; 22/12/2022
  7919                                  		; Note: SETDRIVES uses AL (drive number) only
  7920 0000216E BD[A405]                		mov	bp, SETDRIVE
  7921                                  		;mov	bp, 5AEh ; 11/12/2023 (PCDOS 7.1 IBMBIO.COM)
  7922                                  		;;mov	bp, 4D7h	; set_drive (in	dosbios	code segment)
  7923                                  					; at 2C7h:4D7h = 70h:2A47h
  7924 00002171 0E                      		push	cs		; simulate far call
  7925 00002172 E8FCF8                  		call	call_bios_code	; get bds for drive
  7926                                  			; 06/04/2024
  7927                                  			; es:di = BDS address
  7928 00002175 BD[D606]                		mov	bp, GETBP	; ensure valid bpb is present
  7929                                  		;mov	bp, 6E4h ; 11/12/2023 (PCDOS 7.1 IBMBIO.COM)
  7930                                  		;;mov	bp, 606h	; GetBp (2C7h:606h = 70h:2B76h)
  7931 00002178 0E                      		push	cs
  7932 00002179 E8F5F8                  		call	call_bios_code
  7933                                  
  7934                                  	; resort to funky old segment definitions for now
  7935                                  
  7936                                  		; 22/12/2022
  7937                                  		;push	es		; copy bds to ds:di
  7938                                  		;pop	ds
  7939                                  
  7940                                  	; the following read of es:0000 was spurious anyway. Should look into it.
  7941                                  	;
  7942                                  	; hmmmmmm. j.k. took out a call to getfat right here a while
  7943                                  	;	  back. Apparently it was what actually setup es: for the following
  7944                                  	; cas----
  7945                                  
  7946                                  		; 22/12/2022
  7947                                  		;xor	di, di
  7948                                  		;mov	al, [es:di]	; get fat id byte
  7949                                  		;;mov	byte ptr es:drvfat+1, al ; save fat byte
  7950                                  		;mov	[es:drvfat+1], al
  7951                                  		;mov	ax, [es:drvfat]
  7952                                  		
  7953                                  		; 22/12/2022
  7954                                  		; ds = cs
  7955                                  	;;;	mov	al, [drvfat]
  7956                                  
  7957                                  	; cas -- why do a SECOND setdrive here???
  7958                                  
  7959                                  		; 22/12/2022
  7960                                  		;push	es		; save whatever's in es
  7961                                  		;push	ds		; copy bds to es:di
  7962                                  		;pop	es
  7963                                  		;push	cs		; copy Bios_Data to ds
  7964                                  		;pop	ds
  7965                                  	
  7966                                  	; 22/12/2022
  7967                                  	;;;	mov	bp, SETDRIVE
  7968                                  	;;;	;mov	bp, 4D7h	; SetDrive (2C7h:47Dh = 70h:2A47h)
  7969                                  	;;;	push	cs		; simulate far call
  7970                                  	;;;	call	call_bios_code	; get correct bds for this drive
  7971                                  	
  7972                                  		; 22/12/2022
  7973                                  		;push	es		; copy bds back to ds:di
  7974                                  		;pop	ds
  7975                                  		;pop	es		; pop whatever was in es
  7976                                  
  7977                                  	; Now we load in the MSDOS.SYS file
  7978                                  
  7979                                  	; 22/12/2022
  7980                                  	; -----
  7981                                  	;	mov	bx, [di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  7982                                  	;	mov	[cs:md_sectorsize], bx	; used by get_fat_sector proc.
  7983                                  	;	mov	bl, [di+1Fh]	; [di+BDS.fatsiz]
  7984                                  	;				; get size of fat on media
  7985                                  	;	;mov	es:16DEh, bl
  7986                                  	;	mov	[es:fbigfat], bl
  7987                                  	;	mov	cl, [di+8]
  7988                                  	;	mov	ax, [di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  7989                                  	;	;sub	es:16D8h, ax
  7990                                  	;	sub	[es:bios_l], ax	; subtract hidden sectors since we
  7991                                  	;				; need a logical sector number that will
  7992                                  	;				; be used by getclus(diskrd procedure)
  7993                                  	;	mov	ax, [di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  7994                                  	;	;sbb	es:16DAh, ax
  7995                                  	;	sbb	[es:bios_h], ax	; subtract upper 16 bits of sector num
  7996                                  	; -----
  7997                                  		
  7998                                  		; 11/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  7999                                  	; -----	; 22/12/2022
  8000 0000217C 268B5D06                		mov	bx, [es:di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  8001 00002180 891E[081A]              		mov	[md_sectorsize], bx ; used by get_fat_sector proc.
  8002                                  		; 11/12/2023 ; *
  8003 00002184 268A5D3B                		mov	bl, [es:di+3Bh]	; [di+BDS.fatsiz] ; *
  8004                                  		;mov	bl, [es:di+1Fh]	; [di+BDS.fatsiz]
  8005                                  					; get size of fat on media
  8006 00002188 881E[061A]              		mov	[fbigfat], bl
  8007 0000218C 268A4D08                		mov	cl, [es:di+8]
  8008 00002190 268B4517                		mov	ax, [es:di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  8009 00002194 2906[FC19]              		sub	[First_Data_Sector], ax ; *
  8010                                  		;sub	[bios_l], ax	; subtract hidden sectors since we
  8011                                  					; need a logical sector number that will
  8012                                  					; be used by getclus(diskrd procedure)
  8013 00002198 268B4519                		mov	ax, [es:di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  8014 0000219C 1906[FE19]              		sbb	[First_Data_Sector+2], ax ; *
  8015                                  		;sbb	[bios_h], ax	; subtract upper 16 bits of sector num
  8016                                  	; ------
  8017                                  
  8018 000021A0 30ED                    		xor	ch, ch	 ; cx = sectors/cluster
  8019                                  
  8020                                  	; the boot program has left the directory at 0:500h
  8021                                  
  8022                                  		; 11/12/2023 - - Retro DOS v5.0 IBMBIO.COM/IO.SYS
  8023                                  		;push	di
  8024 000021A2 1E                      		push	ds
  8025                                  		;xor	di, di
  8026                                  		;mov	ds, di
  8027 000021A3 31DB                    		xor	bx, bx ; 0
  8028 000021A5 8EDB                    		mov	ds, bx
  8029 000021A7 8B1E3A05                		mov	bx, [53Ah]
  8030                                  		;mov	bx, ds:53Ah    	; (First cluster of the 2nd dir entry
  8031                                  				   	; of root directory in the buffer at 500h)
  8032 000021AB 1F                      		pop	ds
  8033 000021AC 8B36[7E1A]              		mov     si, [firstcluster_hw] ; 11/12/2023 
  8034                                  				   	; (32 bit cluster number for FAT32 fs)
  8035                                  		;pop	ds
  8036                                  		;pop	di
  8037                                  
  8038                                  		; 12/12/2023
  8039                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2397h)
  8040                                  		; ...........
  8041                                  		; ds = cs
  8042 000021B0 A0[061A]                		mov	al, [fbigfat]
  8043 000021B3 50                      		push	ax              ; (*) save fbigfat flags
  8044 000021B4 A0[FA19]                		mov	al, [drvfat]
  8045 000021B7 0A06[801A]              		or	al, [Boot_Drv]
  8046 000021BB 757B                    		jnz	short boot_drv_fixed ; hard disk
  8047                                  boot_drv_removable:			; calculate cluster count and set fbig or fbigbig flag
  8048 000021BD 53                      		push	bx              ; for removable drives
  8049 000021BE 51                      		push	cx
  8050                                  		; 28/12/2023
  8051                                  		;push	dx ; (not necessary)
  8052                                  	
  8053                                  		; 12/12/2023
  8054 000021BF 06                      		push	es
  8055 000021C0 1F                      		pop	ds
  8056                                  
  8057 000021C1 8B450E                  		mov	ax, [di+0Eh]    ; [di+BDS.totalsecs16]
  8058 000021C4 31D2                    		xor	dx, dx
  8059 000021C6 09C0                    		or	ax, ax
  8060 000021C8 7506                    		jnz	short prep_totalsecs_ok
  8061 000021CA 8B451B                  		mov	ax, [di+1Bh]    ; [di+BDS.totalsecs32]
  8062 000021CD 8B551D                  		mov	dx, [di+1Dh]
  8063                                  prep_totalsecs_ok:
  8064 000021D0 2B4509                  		sub	ax, [di+9]      ; [di+BDS.resectors]
  8065 000021D3 83DA00                  		sbb	dx, 0
  8066 000021D6 50                      		push	ax
  8067 000021D7 52                      		push	dx
  8068 000021D8 8B5D11                  		mov	bx, [di+11h]    ; [di+BDS.fatsecs16]
  8069 000021DB 31C0                    		xor	ax, ax
  8070 000021DD 09DB                    		or	bx, bx
  8071 000021DF 7506                    		jnz	short prep_fatsecs_ok
  8072 000021E1 8B5D1F                  		mov	bx, [di+1Fh]    ; [di+BDS.fatsecs32]
  8073 000021E4 8B4521                  		mov	ax, [di+21h]
  8074                                  prep_fatsecs_ok:
  8075 000021E7 8A4D0B                  		mov	cl, [di+0Bh]    ; ax:bx = 32 bit count of FAT sectors
  8076                                  				        ; [di+BDS.fats]
  8077 000021EA 30ED                    		xor	ch, ch
  8078 000021EC F7E1                    		mul	cx
  8079 000021EE 91                      		xchg	ax, cx
  8080 000021EF F7E3                    		mul	bx
  8081 000021F1 01D1                    		add	cx, dx
  8082 000021F3 89C3                    		mov	bx, ax          ; cx:bx = total (2*) fat sectors
  8083 000021F5 5A                      		pop	dx
  8084 000021F6 58                      		pop	ax              ; dx:ax = totals sectors - reserved sectors
  8085 000021F7 29D8                    		sub	ax, bx
  8086 000021F9 19CA                    		sbb	dx, cx          ; dx:ax = data sectors (includes root dir sectors)
  8087 000021FB 8B5D0C                  		mov	bx, [di+0Ch]    ; [di+BDS.direntries]
  8088 000021FE 83C30F                  		add	bx, 15          ; 16 directory entries per sector
  8089                                  				        ; (round up sector count by adding 15)
  8090 00002201 B104                    		mov	cl, 4           ; (rounded) dir entries / 16
  8091 00002203 D3EB                    		shr	bx, cl
  8092 00002205 31C9                    		xor	cx, cx
  8093 00002207 29D8                    		sub	ax, bx
  8094 00002209 19CA                    		sbb	dx, cx          ; dx:ax = data sectors (except root directory sectors)
  8095                                  					; (will be used for cluster count calculation)
  8096 0000220B 8A4D08                  		mov	cl, [di+8]      ; [di+BDS.secperclus]
  8097                                  
  8098                                  		; 12/12/2023
  8099 0000220E 0E                      		push	cs
  8100 0000220F 1F                      		pop	ds
  8101                                  
  8102 00002210 50                      		push	ax              ; 32 bit division (data sectors / sector per cluster)
  8103 00002211 89D0                    		mov	ax, dx
  8104 00002213 31D2                    		xor	dx, dx
  8105 00002215 F7F1                    		div	cx
  8106 00002217 89C3                    		mov	bx, ax
  8107 00002219 58                      		pop	ax
  8108 0000221A F7F1                    		div	cx
  8109 0000221C 09DB                    		or	bx, bx          ; 32 bit cluster count if bx > 0
  8110 0000221E 7505                    		jnz	short set_fbigbig_flag ; too big cluster number
  8111 00002220 83F8F6                  		cmp	ax, 0FFF6h
  8112 00002223 7207                    		jb	short set_fbig_flag
  8113                                  set_fbigbig_flag:
  8114 00002225 800E[061A]20            		or	byte [fbigfat], 20h ; FAT32 ; fbigbig
  8115 0000222A EB0A                    		jmp	short set_fbig_flag_ok
  8116                                  ; ---------------------------------------------------------------------------
  8117                                  
  8118                                  set_fbig_flag:
  8119 0000222C 3DF60F                  		cmp	ax, 0FF6h       ; 4096-10
  8120                                  				        ; is this 16-bit fat?
  8121 0000222F 7205                    		jb	short set_fbig_flag_ok ; no, small fat
  8122 00002231 800E[061A]40            		or	byte [fbigfat], 40h ; FAT16 ; fbig
  8123                                  set_fbig_flag_ok:
  8124                                  		; 28/12/2023
  8125                                  		;pop	dx
  8126 00002236 59                      		pop	cx
  8127 00002237 5B                      		pop	bx
  8128                                  boot_drv_fixed:
  8129 00002238 31FF                    		xor	di, di
  8130                                  
  8131                                  		; cx = sectors/cluster
  8132                                  		; si:bx = first cluster
  8133                                  		; di = 0
  8134                                  
  8135                                  		; ...........
  8136                                  loadit:
  8137 0000223A B80405                  		mov	ax, SYSINITSEG	; 46Dh
  8138                                  		;mov	ax, 544h	; 11/12/2023 - PCDOS 7.1 IBMBIO.COM
  8139                                  		;;mov	ax, 46Dh	; sysinit segment
  8140 0000223D 8EC0                    		mov	es, ax
  8141 0000223F 268E06[7302]            		mov	es, [es:CURRENTDOSLOCATION] ; 09/12/2022
  8142                                  		;mov	es, [es:271h]
  8143                                  
  8144 00002244 E85908                  		call	getclus		; read cluster at ES:DI (DI is updated)
  8145                                  
  8146                                  ; ----------------------------------------------------------------------------
  8147                                  
  8148                                  		; 13/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  8149                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2431h)
  8150                                  
  8151                                  		;test	byte [cs:fbigfat], 20h ; fbigbig ; FAT32 fs flag
  8152 00002247 F606[061A]20            		test	byte [fbigfat], 20h ; fbigbig ; FAT32 fs flag
  8153                                  		;jz	short iseof
  8154                                  		; 06/04/2024
  8155 0000224C 750D                    		jnz	short eofbigbig
  8156                                  
  8157                                  ; ----------------------------------------------------------------------------
  8158                                  ; 06/04/2024
  8159                                  %if 1
  8160                                  		; 13/12/2023
  8161                                  iseof:
  8162                                  		;;test	byte [cs:fbigfat], fbig
  8163                                  		;test	byte [cs:fbigfat], 40h ; fbig
  8164                                  		; 12/12/2023
  8165                                  		; ds = cs
  8166 0000224E F606[061A]40            		test	byte [fbigfat], 40h ; fbig
  8167 00002253 750C                    		jnz	short eofbig
  8168 00002255 81FBF70F                		cmp	bx, 0FF7h
  8169 00002259 EB09                    		jmp	short iseofx
  8170                                  %endif
  8171                                  ; ----------------------------------------------------------------------------
  8172                                  
  8173                                  eofbigbig:	; si:bx = 32 bit cluster number
  8174 0000225B 81FEFF0F                		cmp	si, 0FFFh
  8175 0000225F 7503                    		jnz	short iseofx
  8176                                  		;cmp	bx, 0FFF7h
  8177                                  		;jmp	short iseofx
  8178                                  		; 06/04/2024
  8179                                  		;jmp	short eofbig
  8180                                  
  8181                                  ; ----------------------------------------------------------------------------
  8182                                  ; 06/04/2024
  8183                                  %if 0
  8184                                  		; 13/12/2023
  8185                                  iseof:
  8186                                  		;;test	byte [cs:fbigfat], fbig
  8187                                  		;test	byte [cs:fbigfat], 40h ; fbig
  8188                                  		; 12/12/2023
  8189                                  		; ds = cs
  8190                                  		test	byte [fbigfat], 40h ; fbig
  8191                                  		jnz	short eofbig
  8192                                  		cmp	bx, 0FF7h
  8193                                  		jmp	short iseofx
  8194                                  %endif
  8195                                  ; ----------------------------------------------------------------------------
  8196                                  
  8197                                  eofbig:
  8198 00002261 83FBF7                  		cmp	bx, 0FFF7h
  8199                                  iseofx:
  8200 00002264 72D4                    		jb	short loadit	; keep loading until cluster = eof
  8201                                  ; ----------------------------------------------------------------------------
  8202                                  
  8203                                  		; 06/04/2024
  8204                                  		;call	setdrvparms	;
  8205                                  
  8206                                  		; 28/12/2023
  8207 00002266 58                      		pop	ax		; (*) restore fbigfat flags
  8208                                  					; (after loading DOS kernel)
  8209                                  		; 06/04/2024
  8210                                  		;mov	[cs:fbigfat], al
  8211 00002267 A2[061A]                		mov	[fbigfat], al
  8212                                  
  8213 0000226A E8FC04                  		call	setdrvparms	; 06/04/2024
  8214                                  
  8215                                  		;;;jmp	far ptr	46Dh:267h ; jmp	SYSINIT_SEG:SYSINIT_START
  8216                                  		;;jmp	far 46Dh:267h
  8217                                  		; 12/12/2023
  8218                                  		;jmp	far 544h:269h	; (PCDOS 7.1 IBMBIO.COM)
  8219                                  
  8220 0000226D EA[6902]0405            		jmp	SYSINITSEG:SYSINITSTART
  8221                                  
  8222                                  ; =============== S U B	R O U T	I N E ========================================
  8223                                  
  8224                                  ; Following are subroutines to support resident device driver initialization
  8225                                  ;
  8226                                  ;M011 -- note:  deleted setup_bdsms and reset_bdsms here
  8227                                  
  8228                                  ;	M035 -- begin changed section
  8229                                  
  8230                                  ;******************************************************************************
  8231                                  ; module name: remap
  8232                                  ;
  8233                                  ; descriptive name: all the code for himem that could be separated from msbio
  8234                                  ;
  8235                                  ; function:  remap the bds chain to adjusted logical drive numbers (drive
  8236                                  ;	     letters) if more than two diskette drives on the system.
  8237                                  ;
  8238                                  ;     scheme:  if more than 2 diskette drives, first map the bds structure
  8239                                  ;	       as usual and then rescan the bds chain to adjust the drive
  8240                                  ;	       letters. to do this, scan for disk drives and assign logical
  8241                                  ;	       drive number starting from 2 and then rescan diskette drives
  8242                                  ;	       and assign next to the last logical drive number of last disk
  8243                                  ;	       drive to the 3rd and 4th diskette drives.
  8244                                  
  8245                                  ; input:       none
  8246                                  ; exit:	drive letters have been remapped in bds chain
  8247                                  ; exit error:  none
  8248                                  ; called from: msinit
  8249                                  ;
  8250                                  ; notes:  this function  will be called only if more than 2 diskettes are
  8251                                  ;	  found in the system
  8252                                  ;	  this function assumes that there are no more than 26 drives assigned
  8253                                  ;	    this is guaranteed by the code that creates bdss for partitions
  8254                                  ;	  this function assumes that the first entries in the chain are
  8255                                  ;	   floppy drives, and all the rest are hard drives
  8256                                  ;	  will alter the boot drive if necessary to reflect remapping
  8257                                  ;
  8258                                  ;******************************************************************************
  8259                                  
  8260                                  ; 17/10/2022
  8261                                  ; 02/10/2022
  8262                                  		; 15/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  8263                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2464h)
  8264                                  		; (MSDOS 6.22 IO.SYS - BIOSDATA:1D9Eh)
  8265                                  
  8266                                  remap:		; proc near
  8267                                  
  8268                                  		; 15/12/2023
  8269                                  		; ds = cs
  8270                                  		;mov	di, [cs:start_bds] ; get first bds
  8271 00002272 8B3E[1901]              		mov	di, [start_bds]
  8272                                  
  8273                                  ; search for 1st fixed disk physical drive num
  8274                                  
  8275                                  drive_loop:
  8276 00002276 807D0480                		cmp	byte [di+4], 80h ; [di+BDS.drivenum]
  8277                                  					; first	hard disk??
  8278 0000227A 7409                    		jz	short fdrv_found ; yes,	continue
  8279 0000227C 8B3D                    		mov	di, [di]	; [di+BDS.link]
  8280                                  					; get next bds,	assume segment
  8281 0000227E 83FFFF                  		cmp	di, -1 ; 0FFFFh	; last bds?
  8282 00002281 75F3                    		jnz	short drive_loop ; loop	if not
  8283 00002283 EB49                    		jmp	short rmap_exit	; yes, no hard drive on	system
  8284                                  
  8285                                  ;------------------------------------------------------------------------------
  8286                                  ;first disk drive bds, now change the logical drive num to 2 and the subsequent
  8287                                  ;logical drive nums to 3, 4, 5 etc.
  8288                                  ;------------------------------------------------------------------------------
  8289                                  
  8290                                  fdrv_found:
  8291 00002285 B002                    		mov	al, 2		; start	with logical drv num=2
  8292                                  fdrv_loop:
  8293 00002287 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  8294 0000228A 8B3D                    		mov	di, [di]	; [di+BDS.link]
  8295                                  					; ds:di--> next	bds
  8296                                  		;inc	al		; set num for next drive
  8297                                  		; 18/12/2022
  8298 0000228C 40                      		inc	ax
  8299 0000228D 83FFFF                  		cmp	di, 0FFFFh	; last hard drive ?
  8300 00002290 75F5                    		jnz	short fdrv_loop	; no - assign more disk drives
  8301                                  
  8302                                  ;------------------------------------------------------------------------------
  8303                                  ; now, rescan and find bds of 3rd floppy drive and assign next drive letter
  8304                                  ; in al to 3rd. if the current drive letter is past z, then do not allocate
  8305                                  ; any more.
  8306                                  ;------------------------------------------------------------------------------
  8307                                  
  8308                                  		;mov	di, [cs:start_bds] ; [start_bds]
  8309                                  		; 15/12/2023
  8310 00002292 8B3E[1901]              		mov	di, [start_bds]	; get first bds
  8311 00002296 8B3D                    		mov	di, [di]	; [di+BDS.link]
  8312                                  					; ds:di-->bds2
  8313                                  		;mov	ah, [cs:dsktnum] ; get number of floppies to remap
  8314 00002298 8A26[2501]              		mov	ah, [dsktnum]
  8315 0000229C 80EC02                  		sub	ah, 2		; adjust for a:	& b:
  8316                                  remap_loop1:
  8317 0000229F 8B3D                    		mov	di, [di]	; [di+BDS.link]
  8318                                  					; set new num to next floppy
  8319 000022A1 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  8320 000022A4 FEC0                    		inc	al		; new number for next floppy
  8321 000022A6 FECC                    		dec	ah		; count down extra floppies
  8322 000022A8 75F5                    		jnz	short remap_loop1
  8323                                  
  8324                                  ; now we've got to adjust the boot drive if we reassigned it
  8325                                  
  8326                                  		; 15/12/2023
  8327                                  		;mov	al, [cs:drvfat]
  8328 000022AA A0[FA19]                		mov	al, [drvfat]
  8329 000022AD 3C02                    		cmp	al, 2		; is it	a: or b: ?
  8330 000022AF 721D                    		jb	short rmap_exit
  8331                                  		;sub	al, [cs:dsktnum]
  8332 000022B1 2A06[2501]              		sub	al, [dsktnum]	; is it one of the other floppies?
  8333 000022B5 7204                    		jb	short remap_boot_flop ;	brif so
  8334                                  
  8335                                  ; we've got to remap the boot hard drive
  8336                                  ; subtract the number of EXTRA floppies from it
  8337                                  
  8338 000022B7 0402                    		add	al, 2		; bootdrv -= (dsktnum-2)
  8339 000022B9 EB04                    		jmp	short remap_change_boot_drv
  8340                                  ; ---------------------------------------------------------------------------
  8341                                  
  8342                                  ; we've got to remap the boot floppy.
  8343                                  ; add the number of hard drive partitions to it
  8344                                  
  8345                                  remap_boot_flop:
  8346                                  		;add	al, [cs:drvmax]	; bootdrv += (drvmax-dsktnum)
  8347                                  		; 15/12/2023
  8348 000022BB 0206[7500]              		add	al, [drvmax]
  8349                                  remap_change_boot_drv:			
  8350                                  		;mov	[cs:drvfat], al ; alter msdos.sys load drive
  8351 000022BF A2[FA19]                		mov	[drvfat], al
  8352 000022C2 FEC0                    		inc	al
  8353 000022C4 1E                      		push	ds
  8354 000022C5 BF0405                  		mov	di, SYSINITSEG	; 46Dh
  8355                                  		;mov	di, 544h	; PCDOS 7.1 IBMBIO.COM
  8356                                  		;;mov	di, 46Dh	; SYSINIT segment
  8357 000022C8 8EDF                    		mov	ds, di
  8358 000022CA A2[9802]                		mov	[DEFAULTDRIVE], al
  8359                                  		;mov	ds:296h, al	; [SYSINIT+DEFAULT_DRIVE]
  8360                                  					; pass it to sysinit as	well
  8361 000022CD 1F                      		pop	ds ; ds = cs
  8362                                  rmap_exit:
  8363 000022CE C3                      		retn
  8364                                  
  8365                                  ; =============== S U B	R O U T	I N E =======================================
  8366                                  
  8367                                  ; 17/10/2022
  8368                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 -actual-)
  8369                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21 -draft-)
  8370                                  ; 02/06/2018 - Retro DOS v3.0 (MSDOS 3.3)	
  8371                                  ; 19/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
  8372                                  ;**************************************************
  8373                                  ; getboot - get the boot sector for a hard disk
  8374                                  ;
  8375                                  ; Reads the boot sector from a specified drive into
  8376                                  ; a buffer at the top of memory.
  8377                                  ;
  8378                                  ; dl = int13 drive number to read boot sector for
  8379                                  ;**************************************************
  8380                                  
  8381                                  ; 17/10/2022
  8382                                  bootbias equ 200h
  8383                                  
  8384                                  getboot:	; proc near
  8385                                  
  8386                                  		; 15/12/2023 - Retro DOS v5.0 
  8387                                  		;	 (Modified PCDOS 7.1) IBMBIO.COM/IO.SYS
  8388                                  		; ds = cs
  8389                                  		
  8390                                  		; 08/04/2018
  8391                                  		; Retro DOS v2.0 (IBMBIO.COM, IBMDOS 2.1)
  8392                                  		; 28/03/2018 - MSDOS 6.0 - MSINIT.ASM, 1991
  8393                                  		; 02/10/2022 - Retro DOS v4.0
  8394                                  		;	      (disassembled IO.SYS code of MSDOS 5.0)
  8395                                  
  8396                                  		;mov	ax, [cs:init_bootseg] ; 17/10/2022
  8397                                  		; 15/12/2023
  8398 000022CF A1[041A]                		mov	ax, [init_bootseg]
  8399 000022D2 8EC0                    		mov	es, ax
  8400                                  
  8401                                  		; 17/10/2022
  8402 000022D4 BB0002                  		mov	bx, bootbias ; 200h
  8403                                  		;mov	bx, 200h	; bootbias
  8404                                  					; load BX, ES:BX is where sector goes
  8405 000022D7 B80102                  		mov	ax, 201h
  8406 000022DA 30F6                    		xor	dh, dh
  8407 000022DC B90100                  		mov	cx, 1
  8408 000022DF CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  8409                                  					; AL = number of sectors to read, CH = track, CL = sector
  8410                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  8411                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  8412 000022E1 7209                    		jc	short erret
  8413                                  		; 17/10/2022
  8414 000022E3 26813EFE0355AA          		cmp	word [es:bootbias+1FEh], 0AA55h
  8415                                  		;cmp	word ptr es:3FEh, 0AA55h ; [es:bootbias+1FEh]
  8416                                  					; Dave Litton magic word?
  8417 000022EA 7401                    		jz	short norm_ret	; yes
  8418                                  erret:
  8419 000022EC F9                      		stc
  8420                                  norm_ret:
  8421 000022ED C3                      		retn
  8422                                  
  8423                                  ; =============== S U B	R O U T	I N E =======================================
  8424                                  
  8425                                  ; 28/12/2018 - Retro DOS v4.0 
  8426                                  
  8427                                  ;***************************************************************************
  8428                                  ;   sethard - generate bpb for a variable sized hard file. ibm has a
  8429                                  ;   partitioned hard file; we must read physical sector 0 to determine where
  8430                                  ;   our own logical sectors start. we also read in our boot sector to
  8431                                  ;   determine version number
  8432                                  ;
  8433                                  ;   inputs:	dl is rom drive number (80...)
  8434                                  ;		bh is partition number (0....) 
  8435                                  ;		ds:di points to bds
  8436                                  ;   outputs:	carry clear -> bpb is filled in
  8437                                  ;		carry set   -> bpb is left uninitialized due to error
  8438                                  ;	trashes (at least) si, cx
  8439                                  ;	MUST PRESERVE ES:!!!!
  8440                                  ;***************************************************************************
  8441                                  
  8442                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  8443                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:24E9h)
  8444                                  
  8445                                  sethard:	; proc near
  8446                                  		; 12/08/2023
  8447                                  		; ds = cs = BIOSDATA
  8448 000022EE 57                      		push	di
  8449 000022EF 53                      		push	bx
  8450                                  		;push	ds  ; ds = cs = BIOSDATA ; 12/08/2023
  8451 000022F0 06                      		push	es
  8452 000022F1 885D05                  		mov	[di+5],	bl	; [di+BDS.drivelet]
  8453 000022F4 885504                  		mov	[di+4],	dl	; [di+BDS.drivenum]
  8454                                  		; 16/12/2023
  8455 000022F7 804D3F01                		or	byte [di+3Fh], 1 ; PCDOS 7.1
  8456                                  		;or	byte [di+23h], 1 ; [di+BDS.flags]
  8457                                  					; fnon_removable
  8458 000022FB C6453E05                		mov	byte [di+3Eh], 5 ; PCDOS 7.1
  8459                                  		;mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  8460                                  					; ffHardFile
  8461 000022FF C606[061A]00            		mov	byte [fbigfat], 0 ; assume 12 bit FAT
  8462 00002304 88FE                    		mov	dh, bh		; partition number
  8463 00002306 52                      		push	dx
  8464 00002307 B408                    		mov	ah, 8
  8465 00002309 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  8466                                  					; DL = drive number
  8467                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  8468                                  					; DL = number of consecutive drives
  8469                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  8470                                  		;inc	dh
  8471                                  		; 16/12/2023 - Retro DOS v5.0
  8472 0000230B 88F2                    		mov	dl, dh
  8473 0000230D B600                    		mov	dh, 0
  8474 0000230F 42                      		inc	dx
  8475                                  		;mov	[di+15h], dh	; [di+BDS.heads] ; get number of heads
  8476 00002310 895515                  		mov	[di+15h], dx
  8477 00002313 5A                      		pop	dx
  8478 00002314 7253                    		jc	short setret	; error	if no hard disk
  8479                                  		; 16/12/2023
  8480                                  		;jc	short setret_j
  8481                                  		
  8482 00002316 80E13F                  		and	cl, 3Fh
  8483 00002319 884D13                  		mov	[di+13h], cl	; [di+BDS.secpertrack]
  8484 0000231C 52                      		push	dx		; save partition number
  8485 0000231D E8AFFF                  		call	getboot
  8486 00002320 5A                      		pop	dx		; restore partition number
  8487 00002321 7246                    		jc	short setret
  8488                                  		; 16/12/2023
  8489                                  		;jnc	short chk_act_part
  8490                                  ;setret_j:
  8491                                  		;jmp	setret
  8492                                  
  8493                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8494                                  chk_act_part:
  8495 00002323 31DB                    		xor	bx, bx ; 0
  8496                                  		;;mov	[cs:ep_start_sector], bx
  8497                                  		;;mov	[cs:ep_start_sector+2], bx
  8498                                  		;mov	[cs:ep_hidden_secs], bx
  8499                                  		;mov	[cs:ep_hidden_secs+2], bx
  8500                                  		; 16/12/2023
  8501                                  		; ds = cs
  8502                                  		; 20/12/2023
  8503                                  		;mov	[ep_start_sector], bx
  8504                                  		;mov	[ep_start_sector+2], bx
  8505 00002325 891E[8B23]              		mov	[ep_hidden_secs], bx
  8506 00002329 891E[8D23]              		mov	[ep_hidden_secs+2], bx
  8507                                  		
  8508 0000232D BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  8509                                  
  8510                                  ; The first 'active' partition is 00, the second is 01....
  8511                                  ;   then the remainder of the 'primary' but non-active partitions
  8512                                  
  8513                                  act_part:
  8514 00002330 26F647FC80              		test	byte [es:bx-4], 80h ; is the partition active?
  8515 00002335 740B                    		jz	short no_act	; no
  8516                                  ; 16/12/2023
  8517                                  %if 0		
  8518                                  		; 16/12/2023
  8519                                  		; reject if partitiontype != 1, 4, 6, 0Bh, 0Ch, 0Eh
  8520                                  		cmp	byte [es:bx], 1 ; FAT12
  8521                                  		jz	short got_good_act
  8522                                  		cmp	byte [es:bx], 4	; FAT16 CHS (<= 32MB)
  8523                                  		jz	short got_good_act
  8524                                  		
  8525                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8526                                  		cmp	byte [es:bx], 0Bh ; FAT32 CHS
  8527                                  		jz	short got_good_act
  8528                                  		cmp	byte [es:bx], 0Ch ; FAT32 LBA
  8529                                  		jz	short got_good_act
  8530                                  		cmp	byte [es:bx], 0Eh ; FAT16 LBA
  8531                                  		jz	short got_good_act
  8532                                  
  8533                                  		cmp	byte [es:bx], 6	; FAT16 BIG CHS (> 32MB)
  8534                                  		jnz	short no_act
  8535                                  ;%else
  8536                                  		; 16/12/2023
  8537                                  		mov	al, [es:bx]	 ; partition type
  8538                                  
  8539                                  		; reject if partitiontype != 1, 4, 6, 0Bh, 0Ch, 0Eh
  8540                                  		cmp	al, 1		; FAT12
  8541                                  		je	short got_good_act
  8542                                  		cmp	al, 4		; FAT16 CHS (<= 32MB)
  8543                                  		je	short got_good_act
  8544                                  		
  8545                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8546                                  		cmp	al, 0Bh		; FAT32 CHS
  8547                                  		je	short got_good_act
  8548                                  		cmp	al, 0Ch		; FAT32 LBA
  8549                                  		je	short got_good_act
  8550                                  		cmp	al, 0Eh		; FAT16 LBA
  8551                                  		je	short got_good_act
  8552                                  
  8553                                  		cmp	al, 6		; FAT16 BIG CHS (> 32MB)
  8554                                  		jne	short no_act
  8555                                  %endif		
  8556                                  		; 16/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  8557                                  		; check if it is a primary dos partition
  8558                                  
  8559 00002337 E83300                  		call	chk_partition_type
  8560 0000233A 7506                    		jne	short no_act
  8561                                  
  8562                                  got_good_act:				; 11/08/2023
  8563 0000233C 08F6                    		or	dh, dh		; is this our target partition #?
  8564                                  					; (0 = first primary dos or active partition)
  8565 0000233E 744F                    		jz	short set2	; WE GOT THE ONE WANTED!!
  8566 00002340 FECE                    		dec	dh		; count	down
  8567                                  no_act:					
  8568 00002342 83C310                  		add	bx, 16
  8569 00002345 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  8570                                  					; last entry done?
  8571 00002349 75E5                    		jnz	short act_part	; no, process next entry
  8572                                  
  8573 0000234B BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  8574                                  					; restore original value of bx
  8575                                  
  8576                                  ; Now scan the non-active partitions
  8577                                  
  8578                                  get_primary:
  8579 0000234E 26F647FC80              		test	byte [es:bx-4], 80h
  8580 00002353 750B                    		jnz	short not_prim	; we've already scanned
  8581                                  					; the ACTIVE ones
  8582                                  ; 16/12/2023
  8583                                  %if 0
  8584                                  		; 16/12/2023
  8585                                  		; see if partitiontype == 1, 4, 6, 0Bh, 0Ch, 0Eh
  8586                                  		cmp	byte [es:bx], 1	; FAT12
  8587                                  		jz	short got_prim
  8588                                  		cmp	byte [es:bx], 4	; FAT16 CHS (<= 32MB)
  8589                                  		jz	short got_prim
  8590                                  
  8591                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8592                                  		cmp	byte [es:bx], 0Bh ; FAT32 CHS
  8593                                  		jz	short got_prim
  8594                                  		cmp	byte [es:bx], 0Ch ; FAT32 LBA
  8595                                  		jz	short got_prim
  8596                                  		cmp	byte [es:bx], 0Eh ; FAT16 LBA
  8597                                  		jz	short got_prim
  8598                                  
  8599                                  		cmp	byte [es:bx], 6	; FAT16 BIG CHS (> 32MB)
  8600                                  		jnz	short not_prim
  8601                                  ;%else
  8602                                  		; 16/12/2023
  8603                                  		mov	al, [es:bx]	 ; partition type
  8604                                  
  8605                                  		; see if partitiontype == 1, 4, 6, 0Bh, 0Ch, 0Eh
  8606                                  		cmp	al, 1		; FAT12
  8607                                  		je	short got_prim
  8608                                  		cmp	al, 4		; FAT16 CHS (<= 32MB)
  8609                                  		je	short got_prim
  8610                                  		
  8611                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8612                                  		cmp	al, 0Bh		; FAT32 CHS
  8613                                  		je	short got_prim
  8614                                  		cmp	al, 0Ch		; FAT32 LBA
  8615                                  		je	short got_prim
  8616                                  		cmp	al, 0Eh		; FAT16 LBA
  8617                                  		je	short got_prim
  8618                                  
  8619                                  		cmp	al, 6		; FAT16 BIG CHS (> 32MB)
  8620                                  		jne	short not_prim
  8621                                  %endif
  8622                                  		; 16/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  8623                                  		; check if it is a primary dos partition
  8624                                  
  8625 00002355 E81500                  		call	chk_partition_type
  8626 00002358 7506                    		jne	short not_prim
  8627                                  
  8628                                  got_prim:
  8629 0000235A 08F6                    		or	dh, dh		; is this our target partition?
  8630 0000235C 7431                    		jz	short set2
  8631 0000235E FECE                    		dec	dh
  8632                                  not_prim:
  8633 00002360 83C310                  		add	bx, 16
  8634 00002363 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  8635 00002367 75E5                    		jnz	short get_primary ; loop till we've gone through table
  8636                                  setret:					
  8637 00002369 F9                      		stc			; error	return
  8638 0000236A E9C503                  		jmp	ret_hard_err
  8639                                  
  8640                                  ; ---------------------------------------------------------------------------
  8641                                  		
  8642                                  		; 16/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  8643                                  
  8644                                  chk_partition_type:
  8645                                  		; 16/12/2023
  8646 0000236D 268A07                  		mov	al, [es:bx]	 ; partition type
  8647                                  
  8648                                  		; see if partitiontype == 1, 4, 6, 0Bh, 0Ch, 0Eh
  8649 00002370 3C01                    		cmp	al, 1		; FAT12
  8650 00002372 7412                    		je	short chk_ptype_retn
  8651 00002374 3C04                    		cmp	al, 4		; FAT16 CHS (<= 32MB)
  8652 00002376 740E                    		je	short chk_ptype_retn
  8653                                  		
  8654                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8655 00002378 3C0B                    		cmp	al, 0Bh		; FAT32 CHS
  8656 0000237A 740A                    		je	short chk_ptype_retn
  8657 0000237C 3C0C                    		cmp	al, 0Ch		; FAT32 LBA
  8658 0000237E 7406                    		je	short chk_ptype_retn
  8659 00002380 3C0E                    		cmp	al, 0Eh		; FAT16 LBA
  8660 00002382 7402                    		je	short chk_ptype_retn
  8661                                  
  8662 00002384 3C06                    		cmp	al, 6		; FAT16 BIG CHS (> 32MB)
  8663                                  chk_ptype_retn:
  8664                                  		; zf = 1 -> primary DOS partition
  8665                                  		; zf = 0 -> not a primary DOS partition
  8666 00002386 C3                      		retn
  8667                                  
  8668                                  ; ---------------------------------------------------------------------------
  8669                                  
  8670                                  		; 16/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  8671                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:25B6h)
  8672                                  ep_start_sector:
  8673 00002387 00000000                		dd 0
  8674 0000238B 00000000                ep_hidden_secs:	dd 0
  8675                                  
  8676                                  ; ---------------------------------------------------------------------------
  8677                                  
  8678                                  ;  until we get the real logical boot record and get the bpb,
  8679                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS will be used instead of BDS_BPB.BPB_TOTALSECTORS
  8680                                  ;  for the convenience of the computation.
  8681                                  ;
  8682                                  ;  at the end of this procedure, if a bpb information is gotten from
  8683                                  ;  the valid boot record, then we are going to use those bpb information
  8684                                  ;  without change.
  8685                                  ;
  8686                                  ;  otherwise, if (hidden sectors + total sectors) <= a word, then we will move
  8687                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS (low) to BDS_BPB.BPB_TOTALSECTORS and zero out
  8688                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS entry to make it a conventional bpb format.
  8689                                  
  8690                                  set2:		
  8691                                  		; 12/08/2023
  8692                                  		; ds = cs = BIOSDATA segment (0070h)
  8693 0000238F 8816[071A]              		mov	[rom_drv_num], dl
  8694                                  		;mov	[cs:rom_drv_num], dl
  8695                                  			; save the rom bios drive number we are handling now.
  8696 00002393 268B4704                		mov	ax, [es:bx+4]	; hidden sectors (start	sector)
  8697 00002397 268B5706                		mov	dx, [es:bx+6]
  8698                                  
  8699                                  ; decrement the sector count by 1 to make it zero based. exactly 64k
  8700                                  ; sectors should be allowed	
  8701                                  
  8702 0000239B 83E801                  		sub	ax, 1
  8703 0000239E 83DA00                  		sbb	dx, 0
  8704 000023A1 26034708                		add	ax, [es:bx+8]	; sectors in partition
  8705 000023A5 2613570A                		adc	dx, [es:bx+10]
  8706 000023A9 7305                    		jnc	short okdrive
  8707 000023AB 800E[061A]80            		or	byte [fbigfat], 80h ; ftoobig
  8708                                  
  8709                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  8710                                  		;;;
  8711                                  okdrive:
  8712                                  		;add	ax, [cs:ep_hidden_secs]
  8713                                  		;adc	dx, [cs:ep_hidden_secs+2]
  8714                                  		; ds = cs
  8715 000023B0 0306[8B23]              		add	ax, [ep_hidden_secs]
  8716 000023B4 1316[8D23]              		adc	dx, [ep_hidden_secs+2]
  8717 000023B8 7305                    		jnc	short okdrive_1
  8718 000023BA 800E[061A]80            		or	byte [fbigfat], 80h ; ftoobig
  8719                                  okdrive_1:
  8720 000023BF 26803F0C                		cmp	byte [es:bx], 0Ch ; FAT32 LBA partition ID
  8721 000023C3 7418                    		je	short set_lba_flag
  8722 000023C5 26803F0E                		cmp	byte [es:bx], 0Eh ; FAT16 LBA partition ID
  8723 000023C9 7412                    		je	short set_lba_flag
  8724 000023CB 3B5513                  		cmp	dx, [di+13h]	; if dx > [di+BDS.secpertrack] then
  8725 000023CE 730D                    		jnb	short set_lba_flag ; set LBA r/w flag
  8726 000023D0 F77513                  		div	word [di+13h]
  8727 000023D3 31D2                    		xor	dx, dx
  8728 000023D5 F77515                  		div	word [di+15h]
  8729 000023D8 3D0004                  		cmp	ax, 400h	; if ax (cylinder number) >= 1024
  8730                                  					;  set LBA r/w flag
  8731 000023DB 7204                     		jb	short set3
  8732                                  set_lba_flag:
  8733 000023DD 804D4004                                or	byte [di+40h], 4 ; fLBArw ; LBA r/w flag
  8734                                  		;;;
  8735                                  ;okdrive:
  8736                                  		; 16/12/2023
  8737                                  set3:		
  8738                                  		;mov	ax, [es:bx+4]
  8739                                  		;mov	[di+17h], ax	; [di+BDS.hiddensecs]
  8740                                  		;			; BPB_HIDDENSECTORS = p->partitionbegin
  8741                                  		;mov	ax, [es:bx+6]
  8742                                  		;mov	[di+19h], ax	; [di+BDS.hiddensecs+2]
  8743                                  
  8744                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  8745                                  		;;;
  8746 000023E1 268B4704                		mov	ax, [es:bx+4]	; start sector (LBA) of the partition
  8747 000023E5 268B5706                		mov	dx, [es:bx+6]
  8748                                  		;add	ax, [cs:ep_hidden_secs]
  8749                                  		;adc	dx, [cs:ep_hidden_secs+2]
  8750                                  		; ds = cs
  8751 000023E9 0306[8B23]              		add	ax, [ep_hidden_secs]
  8752                                  					; + hidden secs of the extd dos partion
  8753 000023ED 1316[8D23]              		adc	dx, [ep_hidden_secs+2]
  8754 000023F1 894517                  		mov	[di+17h], ax	; [di+BDS.hiddensecs]
  8755 000023F4 895519                  		mov	[di+19h], dx	; [di+BDS.hiddensecs+2]
  8756 000023F7 31C0                    		xor	ax, ax ; 0
  8757 000023F9 89457B                  		mov	[di+7Bh], ax	; [di+BDS.bdsm_hidden_trks]
  8758 000023FC 89450E                  		mov	[di+0Eh], ax	; [di+BDS.totalsec16]	
  8759                                  		;;;
  8760                                  
  8761 000023FF 268B570A                		mov	dx, [es:bx+10]	; # of sectors (high)
  8762 00002403 268B4708                		mov	ax, [es:bx+8]	; # of sectors (low)
  8763 00002407 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  8764 0000240A 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  8765                                  					; bpb->maxsec =	p->partitionlength
  8766                                  		;cmp	dx, 0
  8767                                  		;ja	short okdrive_1
  8768                                  		; 16/12/2023
  8769 0000240D 09D2                    		or	dx, dx
  8770 0000240F 7505                    		jnz	short set3_read
  8771 00002411 83F840                  		cmp	ax, 64		; if (p->partitionlength < 64)
  8772                                  		;jb	short setret	; return -1;
  8773 00002414 7264                    		jb	short set3_err
  8774                                  ;okdrive_1:
  8775                                  		; 16/12/2023
  8776                                  set3_read:
  8777 00002416 8B5519                  		mov	dx, [di+19h]	; [di+BDS.hiddensecs+2]
  8778 00002419 8B4517                  		mov	ax, [di+17h]	; [di+BDS.hiddensecs]
  8779 0000241C 31DB                    		xor	bx, bx		; boot sector number - for mini	disk
  8780                                  					; usually equal	to the # of sec/trk.
  8781 0000241E 8A5D13                  		mov	bl, [di+13h]	; [di+BDS.secpertrack]
  8782 00002421 50                      		push	ax
  8783 00002422 89D0                    		mov	ax, dx
  8784 00002424 31D2                    		xor	dx, dx
  8785 00002426 F7F3                    		div	bx		; (sectors)dx:ax / (BDS.secpertrack)bx =
  8786                                  					; (track)temp_h:ax + (sector)dx
  8787                                  ; 16/12/2023
  8788                                  %if 0
  8789                                  		; 17/10/2022
  8790                                  		;mov	[cs:temp_h], ax
  8791                                  		; 12/08/2023 (ds=cs)
  8792                                  		mov	[temp_h], ax
  8793                                  		pop	ax
  8794                                  		div	bx
  8795                                  		mov	cl, dl
  8796                                  		inc	cl
  8797                                  		xor	bx, bx
  8798                                  		mov	bl, [di+15h]	; [di+BDS.heads]
  8799                                  		push	ax
  8800                                  		xor	dx, dx
  8801                                  		;mov	ax, [cs:temp_h]
  8802                                  		mov	ax, [temp_h] ; 12/08/2023
  8803                                  		div	bx
  8804                                  		;mov	[cs:temp_h], ax
  8805                                  		mov	[temp_h], ax ; 12/08/2023
  8806                                  		pop	ax
  8807                                  		div	bx		; dl is head, ax is cylinder
  8808                                  		; 12/08/2023 (ds=cs)
  8809                                  		cmp	word [temp_h], 0
  8810                                  		;cmp	word [cs:temp_h], 0
  8811                                  		ja	short setret_brdg ; exceeds the	limit of int 13h
  8812                                  		cmp	ax, 1024
  8813                                  		ja	short setret_brdg ; exceeds the	limit of int 13h
  8814                                  			; Retro DOS v3.2 note by Erdogan Tan - 28/07/2019
  8815                                  			; **MSDOS code accepts if ax = 1024 but it is nonsense here
  8816                                  			; ('ja' must be 'jnb')
  8817                                  okdrive_2:
  8818                                   		; 28/07/2019
  8819                                  ; dl is head.
  8820                                  ; ax is cylinder
  8821                                  ; cl is sector number (assume less than 2**6 = 64 for int 13h)
  8822                                  
  8823                                  ;*** for mini disks ***
  8824                                  
  8825                                  		cmp	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  8826                                  					; check for mini disk
  8827                                  		jnz	short oknotmini	; not mini disk.
  8828                                  		add	ax, [di+49h]	; [di+BDS.bdsm_hidden_trks]
  8829                                  					; set the physical track number
  8830                                  oknotmini:
  8831                                  %endif
  8832                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  8833                                  		;;;
  8834                                  		;mov	[cs:saved_word], ax
  8835 00002428 A3[9E04]                		mov	[saved_word], ax
  8836 0000242B 58                      		pop	ax
  8837 0000242C F7F3                    		div	bx
  8838 0000242E 88D1                    		mov	cl, dl
  8839 00002430 FEC1                    		inc	cl
  8840 00002432 8B5D15                  		mov	bx, [di+15h]	; [di+BDS.heads]
  8841 00002435 50                      		push	ax
  8842 00002436 31D2                    		xor	dx, dx
  8843                                  		;mov	ax, [cs:saved_word]
  8844 00002438 A1[9E04]                		mov	ax, [saved_word]
  8845 0000243B F7F3                    		div	bx
  8846                                  		;mov	[cs:saved_word], ax
  8847 0000243D A3[9E04]                		mov	[saved_word], ax ; not necessary !? (ax must be 0)
  8848 00002440 58                      		pop	ax
  8849 00002441 F7F3                    		div	bx		; dl is head, ax is cylinder
  8850                                  		; 16/12/2023
  8851 00002443 0E                      		push	cs
  8852 00002444 07                      		pop	es ; (*)
  8853 00002445 BB[5201]                		mov	bx, disksector ; (**)
  8854                                  		;
  8855 00002448 F6454004                		test	byte [di+40h], 4 ; fLBArw ; LBA read/write flag
  8856 0000244C 742F                    		jz	short set3_chs_read
  8857                                  set3_lba_read:
  8858                                  
  8859                                  ; 16/12/2023
  8860                                  %if 0
  8861                                  		;push	cs
  8862                                  		;pop	es ; (*)
  8863                                  		;mov	bx, disksector ; (**)
  8864                                  
  8865                                  		;push	ds
  8866                                  		;push	si
  8867                                  		xor	ax, ax	; 0
  8868                                  		push	ax
  8869                                  		push	ax
  8870                                  		mov	ax, [di+19h]	; [di+BDS.hiddensectors+2]
  8871                                  		push	ax
  8872                                  		mov	ax, [di+17h]	; [di+BDS.hiddensectors]
  8873                                  		push	ax
  8874                                  		push	es		; buffer address
  8875                                  		push	bx
  8876                                  		mov	ax, 1		; sector (read) count
  8877                                  		push	ax
  8878                                  		;mov	ax, 16		; DAP size
  8879                                  		mov	al, 16
  8880                                  		push	ax
  8881                                  		mov	dl, [rom_drv_num] ; ds = cs
  8882                                  		mov	ax, ss
  8883                                  		mov	ds, ax ; ds = ss
  8884                                  		mov	si, sp
  8885                                  		;mov	dl, [cs:rom_drv_num]
  8886                                  		mov	ah, 42h
  8887                                  		int	13h		; DISK - IBM/MS Extension
  8888                                  					; EXTENDED READ (DL - drive, DS:SI - disk address packet)
  8889                                  		;pop	si
  8890                                  		;pop	ds
  8891                                  		jnc	short set3_lba_read_ok
  8892                                  		add	sp, 16
  8893                                  		;pop	si
  8894                                  		;pop	ds
  8895                                  set3_err:
  8896                                  		;jmp	setret
  8897                                  		jmp	ret_hard_err
  8898                                  
  8899                                  set3_lba_read_ok
  8900                                  		add	sp, 16
  8901                                  		;pop	si
  8902                                  		;pop	ds
  8903                                  		jmp	short set3_read_ok
  8904                                  %else
  8905                                  		; 16/12/2023
  8906                                  		;push	si ; * ; (not necessary)
  8907                                  		;mov	si, empty_dap_buff ; dap_buffer
  8908 0000244E BE[571B]                		mov	si, dap_buffer ; empty_dap_buff 
  8909 00002451 56                      		push	si
  8910 00002452 87F7                    		xchg	si, di
  8911                                  		; si = BDS
  8912                                  		; di = DAP buffer
  8913 00002454 B81000                  		mov	ax, 16
  8914 00002457 AB                      		stosw		; DAP size
  8915 00002458 B001                    		mov	al, 1
  8916 0000245A AB                      		stosw		; sector (read) count
  8917                                  		; buffer address
  8918 0000245B 89D8                    		mov	ax, bx	; offset disksector
  8919 0000245D AB                      		stosw
  8920 0000245E 8CC0                    		mov	ax, es	; es=ds=cs = BIOSDATA segment
  8921 00002460 AB                      		stosw
  8922                                  		; sector address (bits 0 to 31)	
  8923 00002461 8B4417                  		mov	ax, [si+17h] ; [di+BDS.hiddensectors]
  8924 00002464 AB                      		stosw
  8925 00002465 8B4419                  		mov	ax, [si+19h] ; [di+BDS.hiddensectors+2]
  8926 00002468 AB                      		stosw
  8927                                  		; sector address bits 32 to 63 (0)
  8928 00002469 31C0                    		xor	ax, ax ; 0
  8929 0000246B AB                      		stosw
  8930 0000246C AB                      		stosw
  8931                                  		;xchg	di, si
  8932 0000246D 89F7                    		mov	di, si
  8933                                  		; di = BDS
  8934 0000246F 5E                      		pop	si ; DAP buffer address	
  8935                                  		
  8936 00002470 8A16[071A]              		mov	dl, [rom_drv_num] ; ds = cs
  8937 00002474 B442                    		mov	ah, 42h
  8938 00002476 CD13                    		int	13h		; DISK - IBM/MS Extension
  8939                                  					; EXTENDED READ (DL - drive, DS:SI - disk address packet)
  8940                                  		;pop	si ; *
  8941 00002478 7324                    		jnc	short set3_read_ok
  8942                                  set3_err:
  8943                                  		;jmp	setret
  8944 0000247A E9B502                  		jmp	ret_hard_err
  8945                                  %endif
  8946                                  
  8947                                  set3_chs_read:
  8948 0000247D 837D7901                		cmp	word [di+79h], 1 ; [di+BDS.bdsm_ismini] ; check for mini disk
  8949 00002481 7503                    		jnz	short oknotmini
  8950 00002483 03457B                  		add	ax, [di+7Bh]	; [di+BDS.bdsm_hidden_trks]
  8951                                  		;;;
  8952                                  
  8953                                  oknotmini:
  8954                                  ;*** end of added logic for mini disk
  8955                                  				
  8956 00002486 D0CC                    		ror	ah, 1		; move high two bits of cyl to high
  8957 00002488 D0CC                    		ror	ah, 1		; two bits of upper byte
  8958 0000248A 80E4C0                  		and	ah, 0C0h	; turn off remainder of bits
  8959 0000248D 08E1                    		or	cl, ah		; move two bits to correct spot
  8960 0000248F 88C5                    		mov	ch, al		; ch iscylinder (low 8 bits)
  8961                                  					; cl is sector + 2 high bits of cylinder
  8962 00002491 88D6                    		mov	dh, dl		; dh is	head
  8963                                  		
  8964                                  		; 12/08/2023 (ds=cs)
  8965 00002493 8A16[071A]              		mov	dl, [rom_drv_num]
  8966                                  		;mov	dl, [cs:rom_drv_num] ; dl is drive number
  8967                                  
  8968                                  ; cl is sector + 2 high bits of cylinder
  8969                                  ; ch is low 8 bits of cylinder
  8970                                  ; dh is head
  8971                                  ; dl is drive
  8972                                  
  8973                                  ; for convenience, we are going to read the logical boot sector
  8974                                  ; into cs:disksector area.
  8975                                  
  8976                                  ; read in boot sector using bios disk interrupt. the buffer where it
  8977                                  ; is to be read in is cs:disksector.
  8978                                  
  8979                                  		; 16/12/2023
  8980                                  		; es=ds=cs = BIOSDATA segment
  8981                                  		; bx = disksector ; (**)
  8982                                  
  8983                                  		;push	cs
  8984                                  		;pop	es ; (*)
  8985                                  		
  8986                                  		;mov	bx, disksector	; for convenience,
  8987                                  					; we are going to read the logical boot sector
  8988                                  					; into cs:disksector area.
  8989 00002497 B80102                  		mov	ax, 201h
  8990 0000249A CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  8991                                  					; AL = number of sectors to read, CH = track, CL = sector
  8992                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  8993                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  8994                                  		; 16/12/2023
  8995 0000249C 72DC                    		jc	short set3_err
  8996                                  
  8997                                  ; cs:disksec contains the boot sector. in theory, (ha ha) the bpb in this thing
  8998                                  ; is correct. we can, therefore, suck out all the relevant statistics on the
  8999                                  ; media if we recognize the version number.
  9000                                  
  9001                                  set3_read_ok:
  9002                                  		; 11/08/2023
  9003                                  		;mov	bx, disksector	; BIOSDATA:014Eh ; MSDOS 6.21 ; 11/08/2023
  9004                                  					; BIOSDATA:0152h ; PCDOS 7.1 IBMBIO.COM
  9005                                  		; 18/12/2023
  9006                                  		;push	bx ; +
  9007                                  		;push	ax ; (not necessary)
  9008                                  
  9009                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  9010                                  		;;;
  9011 0000249E 81BFFE0155AA            		cmp	word [bx+1FEh], 0AA55h
  9012 000024A4 7541                    		jne	short invalid_boot_record
  9013                                  		; 16/12/2023
  9014                                  		; 12/08/2023
  9015                                  		; ds = cs = BIOSDATA segment ('disksector:' is in BIOSDATA) 
  9016 000024A6 803FE9                  		cmp	byte [bx], 0E9h	; is it a near jump?
  9017 000024A9 740B                    		je	short check_1_ok ; yes
  9018 000024AB 803FEB                  		cmp	byte [bx], 0EBh	; is it a short jump?
  9019 000024AE 7537                    		jne	short invalid_boot_record ; no
  9020 000024B0 807F0290                		cmp	byte [bx+2], 90h ; yes, is the next one a nop?
  9021 000024B4 7531                    		jne	short invalid_boot_record ; no, invalid bs ; 11/08/2023
  9022                                  check_1_ok:
  9023 000024B6 837F1600                		cmp     word [bx+16h], 0 ; [bx+BPB_FATSz16]
  9024                                  		;jz	short check_1	; 16 bit FAT size is 0 if it is FAT32 bs
  9025                                  		; 16/12/2023
  9026 000024BA 740E                    		jz	short check_2	; FAT32 bs
  9027                                  
  9028                                  		; FAT16 or FAT12 bs
  9029                                  
  9030                                  		;push	ds
  9031                                  		;push	si  ; (not necessary)
  9032 000024BC 57                      		push	di
  9033                                  		; es=ds=cs = BIOSDATA segment
  9034                                  		;push	es
  9035                                  		;pop	ds
  9036                                  
  9037                                  		;mov	cx, 28
  9038 000024BD B90E00                  		mov	cx, 14 ; *
  9039 000024C0 8D7724                  		lea	si, [bx+24h]	; move offset 36 to 63
  9040                                  					;      to offset 64 (28 bytes)
  9041 000024C3 8D7F40                  		lea	di, [bx+40h]	; boot sector offset 64
  9042 000024C6 FC                      		cld	; (not necessary, 'std' is not used before here)
  9043                                  		;rep movsb
  9044 000024C7 F3A5                    		rep movsw ; *
  9045 000024C9 5F                      		pop	di
  9046                                  		;pop	si
  9047                                  		;pop	ds
  9048                                  		;;;
  9049                                  ; 16/12/2023
  9050                                  %if 0
  9051                                  ;check_1:
  9052                                  		; 12/08/2023
  9053                                  		; ds = cs = BIOSDATA segment ('disksector:' is in BIOSDATA) 
  9054                                  		cmp	byte [bx], 0E9h
  9055                                  		;cmp	byte [cs:bx], 0E9h ; is it a near jump?
  9056                                  		je	short check_1_ok ; yes
  9057                                  		cmp	byte [bx], 0EBh
  9058                                  		;cmp	byte [cs:bx], 0EBh ; is it a short jump?
  9059                                  		jne	short invalid_boot_record ; no
  9060                                  		cmp	byte [bx+2], 90h
  9061                                  		;cmp	byte [cs:bx+2], 90h ; yes, is the next one a nop?
  9062                                  		jne	short invalid_boot_record ; no, invalid bs ; 11/08/2023
  9063                                  check_1_ok:
  9064                                  %endif
  9065                                  
  9066                                  ; 18/12/2023
  9067                                  %if 0
  9068                                  		; 14/08/2023
  9069                                  check_2:
  9070                                  		mov	bx, disksector+11 ; disksector+EXT_BOOT.BPB
  9071                                  		;mov	bx, 159h	; disksector+EXT_BOOT.BPB
  9072                                  					; point to the bpb in the boot record
  9073                                  		;mov	al, [cs:bx+10]	; [bx+EBPB.MEDIADESCRIPTOR]
  9074                                  		mov	al, [bx+10] ; 12/08/2023 
  9075                                  					; get the mediadescriptor byte
  9076                                  		and	al, 0F0h	; mask off low nibble
  9077                                  		cmp	al, 0F0h	; is high nibble = 0Fh?
  9078                                  		jne	short invalid_boot_record ; no, invalid boot record
  9079                                  		;cmp	word [cs:bx], 512 ; [bx+EBPB.BYTESPERSECTOR]
  9080                                  		cmp	word [bx], 512 ; 12/08/2023
  9081                                  		jne	short invalid_boot_record ; invalidate non 512 byte sectors
  9082                                  
  9083                                  check2_ok:				; yes, mediadescriptor ok.
  9084                                  		mov	al, [bx+2] ; 12/08/2023
  9085                                  		;mov	al, [cs:bx+2]	; now make sure that
  9086                                  					; the sectorspercluster is
  9087                                  					; a power of 2
  9088                                  					;
  9089                                  					; [bx+EBPB.SECTORSPERCLUSTER]
  9090                                  					; get the sectorspercluster
  9091                                  %endif
  9092                                  		;;;
  9093                                  check_2:
  9094                                  		; 18/12/2023
  9095                                  		; bx = disksector
  9096 000024CA 8A4715                  		mov	al, [bx+21]	; [bx+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  9097                                  					; get the mediadescriptor byte
  9098 000024CD 24F0                    		and	al, 0F0h	; mask off low nibble
  9099 000024CF 3CF0                    		cmp	al, 0F0h	; is high nibble = 0Fh?
  9100 000024D1 7514                    		jne	short invalid_boot_record ; no, invalid boot record
  9101 000024D3 817F0B0002              		cmp	word [bx+11], 512 ; [bx+EXT_BOOT.BPB+EBPB.BYTESPERSECTOR]
  9102 000024D8 750D                    		jne	short invalid_boot_record ; invalidate non 512 byte sectors
  9103                                  
  9104                                  check2_ok:	; yes, mediadescriptor ok.
  9105 000024DA 8A470D                  		mov	al, [bx+13]	; now make sure that
  9106                                  					; the sectorspercluster is
  9107                                  					; a power of 2
  9108                                  					;
  9109                                  					; [bx++EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  9110                                  					; get the sectorspercluster
  9111                                  		;;;
  9112                                  
  9113 000024DD 08C0                    		or	al, al		; is it zero?
  9114 000024DF 7406                    		jz	short invalid_boot_record ; yes, invalid boot record
  9115                                  
  9116                                  ck_power_of_two:
  9117 000024E1 D0E8                    		shr	al, 1		; shift until first bit emerges
  9118 000024E3 73FC                    		jnc	short ck_power_of_two
  9119 000024E5 7406                    		jz	short valid_boot_record
  9120                                  
  9121                                  invalid_boot_record:
  9122                                  		; 18/12/2023
  9123                                  		;pop	ax
  9124                                  		;pop	bx ; +
  9125 000024E7 E95E01                  		jmp	unknown		; jump to invalid boot record
  9126                                  					; unformatted or illegal media.
  9127                                  ; 16/12/2023
  9128                                  ; ---------------------------------------------------------------------------
  9129                                  ;	; 12/08/2023
  9130                                  ;setret_brdg:
  9131                                  ;		jmp	setret
  9132                                  ; ---------------------------------------------------------------------------
  9133                                  
  9134                                  unknown3_0_j:
  9135 000024EA E95F01                  		jmp	unknown3_0	; legally formatted media,
  9136                                  					; although, content might be bad.
  9137                                  ; ---------------------------------------------------------------------------
  9138                                  
  9139                                  valid_boot_record:
  9140                                  		; 18/12/2023
  9141                                  		;pop	ax
  9142                                  		;pop	bx ; +
  9143                                  		
  9144                                  		; 18/12/2023
  9145                                  		; bx = offset disksector ; +
  9146                                  
  9147                                  ; Signature found. Now check version.
  9148                                  
  9149                                  		; 14/08/2023
  9150 000024ED 817F08322E              		cmp	word [bx+8], '2.'
  9151                                  		;cmp	word [cs:bx+8], '2.' ; 03/10/2022 (NASM syntax)
  9152                                  		;;cmp	word ptr cs:[bx+8], 2E32h ; '2.'
  9153 000024F2 7506                    		jne	short try5
  9154 000024F4 807F0A30                		cmp	byte [bx+10], '0'
  9155                                  		;cmp	byte [cs:bx+0Ah], '0' ; 03/10/2022 (NASM syntax)
  9156                                  		;;cmp	byte ptr cs:[bx+0Ah], 30h ; '0'
  9157                                  		; 12/08/2023
  9158                                  		;jnz	short try5
  9159                                  		;jmp	short copybpb
  9160 000024F8 7425                    		je	short copybpb
  9161                                  
  9162                                  ;; --------------------------------------------------------------------------
  9163                                  ;;	; 12/08/2023
  9164                                  ;;setret_brdg:
  9165                                  ;;		jmp	setret
  9166                                  ;; --------------------------------------------------------------------------
  9167                                  ;
  9168                                  ;unknown3_0_j:
  9169                                  ;		jmp	unknown3_0	; legally formatted media,
  9170                                  ;					; although, content might be bad.
  9171                                  ; ---------------------------------------------------------------------------
  9172                                  
  9173                                  try5:
  9174 000024FA E83902                  		call	cover_fdisk_bug
  9175                                  
  9176                                  ; see if it is an os2 signature
  9177                                  
  9178                                  		; 12/08/2023
  9179                                  		; ds = cs = BIOSDATA segment
  9180 000024FD 817F08302E              		cmp	word [bx+8], '0.'
  9181                                  		;cmp	word [cs:bx+8], '0.' ; 03/10/2022 (NASM syntax)
  9182                                  		;;cmp	word ptr cs:[bx+8], 2E30h ; '0.'
  9183 00002502 750C                    		jne	short no_os2
  9184 00002504 8A4707                  		mov	al, [bx+7] ; 12/08/2023
  9185                                  		;mov	al, [cs:bx+7]	; 17/10/2022 (NASM syntax)
  9186 00002507 2C31                    		sub	al, '1'
  9187                                  		;sub	al, 31h		; '1'
  9188 00002509 24FE                    		and	al, 0FEh
  9189 0000250B 7412                    		jz	short copybpb	; accept either	'1' or '2'
  9190 0000250D E93801                  		jmp	unknown
  9191                                  ; ---------------------------------------------------------------------------
  9192                                  
  9193                                  ; no os2 signature, this is to check for real dos versions
  9194                                  
  9195                                  no_os2:
  9196                                  		; 12/08/2023
  9197                                  		; ds = cs = BIOSDATA
  9198 00002510 817F08332E              		cmp	word [bx+8], '3.'			
  9199                                  		;cmp	word [cs:bx+8], '3.' ; 03/10/2022 (NASM syntax)
  9200                                  		;;cmp	word ptr cs:[bx+8], 2E33h ; '3.'
  9201 00002515 72D3                    		jb	short unknown3_0_j ; must be 2.1 boot record.
  9202                                  					; do not trust it, but still legal.
  9203 00002517 7506                    		jnz	short copybpb	; honor	os2 boot record
  9204                                  					; or dos 4.0 version
  9205 00002519 807F0A31                		cmp	byte [bx+10], '1' ; 12/08/2023
  9206                                  		;cmp	byte [cs:bx+10], '1'
  9207                                  		;;cmp	byte ptr cs:[bx+0Ah], 31h ; '1'
  9208 0000251D 72CB                    		jb	short unknown3_0_j ; if version >= 3.1, then o.k.
  9209                                  copybpb:
  9210                                  
  9211                                  ; 03/10/2022
  9212                                  
  9213                                  ; we have a valid boot sector. use the bpb in it to build the
  9214                                  ; bpb in bios. it is assumed that only
  9215                                  ;	BDS_BPB.BPB_SECTORSPERCLUSTER
  9216                                  ;	BDS_BPB.BPB_ROOTENTRIES, and
  9217                                  ;	BDS_BPB.BPB_SECTORSPERFAT
  9218                                  ; need to be set (all other values in already). fbigfat is also set.
  9219                                  
  9220                                  ; if it is non fat based system, then just copy the bpb from the boot sector
  9221                                  ; into the bpb in bds table, and also set the boot serial number, volume id,
  9222                                  ; and system id according to the boot record.
  9223                                  ; for the non_fat system, don't need to set the other value. so just do goodret.
  9224                                  
  9225                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  9226                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2787h)
  9227                                  		;;;
  9228                                  		; 17/12/2023
  9229 0000251F BE[5D01]                		mov	si, disksector+11
  9230                                  		;sub	ch, ch ; ; (ch may be > 0)
  9231 00002522 29C9                    		sub	cx, cx ; 0 
  9232                                  		;mov	cl, [disksector+16] ; BPB_NumFATs
  9233 00002524 8A4C05                  		mov	cl, [si+5] ; number of FATs
  9234                                  
  9235                                  		; NOTE: This check is not proper for FAT32 boot sector (standard spec)
  9236                                  		; (after PCDOS 7.1). So, it is not existing in Windows ME IO.SYS
  9237                                  		; Erdogan Tan - 01/09/2023 ((IBMBIO.COM 7.1 disassembly note))
  9238                                  
  9239                                  		;;cmp	word ptr cs:disksector+4Dh, 0 ; ???
  9240                                  		;cmp	word [disksector+4Dh], 0
  9241                                  		;jnz	short check_3
  9242                                  
  9243                                  		; 17/12/2023
  9244                                  		; check extended boot signature (0x29)
  9245                                  		;
  9246                                  		; (***) NOTE: 28 bytes of FAT16/FAT12 boot sector from offset 36
  9247                                  		; have been moved to offset 64 (see label 'check_1_ok:' above) 
  9248                                  		; ((now, BS_BootSig is at offset 66 even if it was at offset 38))
  9249                                  		
  9250                                  		;cmp	cs:disksector+42h, 29h	; BS_BootSig (FAT32)
  9251 00002527 803E[9401]29            		cmp	byte [disksector+42h], 29h ; BS_BootSig (***)
  9252                                  		;jmp	short check_4
  9253                                  check_3:
  9254                                  		;;cmp	cs:disksector+26h, 29h	; BS_BootSig (FAT16/FAT12)
  9255                                  		;cmp	byte [disksector+26h], 29h ; (***)
  9256                                  check_4:
  9257 0000252C 7538                    		jnz	short copybpb_fat	; conventional fat system
  9258                                  
  9259                                  ; 17/12/2023
  9260                                  %if 0
  9261                                  		; 10/12/2022
  9262                                  		; (number of FATs optimization)
  9263                                  		mov	si, disksector+11 ; disksector+0Bh
  9264                                  		;;mov	cl, [cs:disksector+10h] ; Number of FATs (may be 2 or 1)
  9265                                  		;mov	cl, [cs:si+05h]
  9266                                  		; 12/08/2023
  9267                                  		; ds = cs = BIOSDATA segment (0070h)
  9268                                  		mov	cl, [si+05h] ; number of FATs
  9269                                  
  9270                                  		cmp	byte [si+1Bh], 29h ; 12/08/2023
  9271                                  		;cmp	byte [cs:si+1Bh], 29h ; 10/12/2022	
  9272                                  		;;cmp	byte [cs:disksector+26h], 29h ; 17/10/2022
  9273                                  					; [disksector+EXT_BOOT.SIG]
  9274                                  					; EXT_BOOT_SIGNATURE
  9275                                  		jnz	short copybpb_fat ; conventional fat system
  9276                                  
  9277                                  		; 03/10/2022
  9278                                  		; 29/12/2018 - Retro DOS v4.0 modification note:
  9279                                  		; Regarding 'fat_big_small' part of this (MSDOS 6.0) code
  9280                                  		;	     number of FATs must be 2 ; =*?=
  9281                                  		; (Otherwise, '# of data sectors' would be calculated as wrong!!!)
  9282                                  		;
  9283                                  		;cmp	byte [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS], 2 ; =*?=
  9284                                  
  9285                                  		; 10/12/2022
  9286                                  		;cmp	byte [cs:disksector+10h], 0
  9287                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
  9288                                  		;jnz	short copybpb_fat ; a fat system.
  9289                                  		or	cl, cl	 ; [cs:disksector+10h]
  9290                                  		jnz	short copybpb_fat ; a fat system.
  9291                                  %endif
  9292                                  
  9293                                  		; 17/12/2023 - Retro DOS v5.0
  9294                                  		;;cmp	byte [cs:disksector+10h], 0 ; BPB.fats
  9295                                  		;cmp	byte [disksector+10h], 0 ; BPB_NUmFATs
  9296                                  		;jnz	short copybpb_fat ; a fat system
  9297                                  		; 17/12/2023
  9298                                  		; cl = [disksector+10h]
  9299 0000252E 20C9                    		and	cl, cl ; 0 ?
  9300 00002530 7534                    		jnz	short copybpb_fat ; a fat system
  9301                                  
  9302                                  ; non fat based	media.
  9303                                  
  9304 00002532 57                      		push	di  ; BDS
  9305                                  		; 12/08/2023
  9306                                  		;push	ds  ; ds = cs = BIOSDATA segment
  9307                                  		
  9308                                  		; 17/12/2023
  9309                                  		; es = ds = cs
  9310                                  		;push	ds
  9311                                  		;pop	es
  9312                                  
  9313                                  		; 12/08/2023
  9314                                  		; ds = cs
  9315                                  		;push	cs
  9316                                  		;pop	ds
  9317                                  
  9318                                  		; 10/12/2022
  9319                                  		; (number of FATs optimization)
  9320                                  		; SI = disksector+11
  9321                                  		; 17/10/2022
  9322                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  9323                                  		;mov	si, disksector+11
  9324 00002533 83C706                  		add	di, 6		; add di,BDS.BPB
  9325                                  
  9326                                  ; just for completeness, we'll make sure that total_sectors and
  9327                                  ; big_total_sectors aren't both zero. I've seen examples of
  9328                                  ; this on DOS 3.30 boot records. I don't know exactly how it
  9329                                  ; got that way. If it occurs, then use the values from the
  9330                                  ; partition table.
  9331                                  
  9332                                  		; 17/12/2023
  9333                                  		; cx = 0
  9334                                  		; 18/12/2022
  9335                                  		;sub	cx, cx
  9336                                  
  9337                                  		;cmp	word [cs:si+8], 0 	; [cs:si+EBPB.TOTALSECTORS]
  9338                                  		;jnz	short already_nonz 
  9339                                  		;			; how about big_total?
  9340                                  		;cmp	word [cs:si+15h], 0	; [cs:si+EBPB.BIGTOTALSECTORS]
  9341                                  		;jnz	short already_nonz ; we're okay if any are != 0
  9342                                  		;cmp	word [cs:si+17h], 0	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  9343                                  		;jnz	short already_nonz
  9344                                  
  9345                                  		; 12/08/2023
  9346                                  		; ds = cs = BIOSDATA segment (0070h)
  9347                                  
  9348                                  		; 17/12/2023
  9349                                  		; 12/08/2023
  9350 00002536 394C08                  		cmp	[si+8], cx ; 0		; [si+EBPB.TOTALSECTORS]
  9351 00002539 751C                    		jnz	short already_nonz
  9352                                  				    	; how about big_total?
  9353 0000253B 394C15                  		cmp	[si+15h], cx ; 0	; [si+EBPB.BIGTOTALSECTORS]
  9354 0000253E 7517                    		jnz	short already_nonz ; we're okay if any are != 0
  9355 00002540 394C17                  		cmp	[si+17h], cx ; 0	; [si+EBPB.BIGTOTALSECTORS+2]
  9356 00002543 7512                    		jnz	short already_nonz
  9357                                  
  9358                                  ; now let's copy the values from the partition table (now in the BDS)
  9359                                  ; into the BPB in the boot sector buffer, before they get copied back.
  9360                                  
  9361 00002545 8B4508                  		mov	ax, [di+8]	; [di+BDS.totalsecs16]
  9362                                  		; 12/08/2023
  9363                                  		;mov	[cs:si+8], ax	; [cs:si+EBPB.TOTALSECTORS]
  9364 00002548 894408                  		mov	[si+8], ax
  9365 0000254B 8B4515                  		mov	ax, [di+15h]	; [di+BDS.totalsecs32]
  9366                                  		;mov	[cs:si+15h], ax	; [cs:si+EBPB.BIGTOTALSECTORS]
  9367 0000254E 894415                  		mov	[si+15h], ax
  9368 00002551 8B4517                  		mov	ax, [di+17h]	; [di+BDS.totalsecs32+2]
  9369                                  		;mov	[cs:si+17h], ax	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  9370 00002554 894417                  		mov	[si+17h], ax
  9371                                  
  9372                                  already_nonz:
  9373                                  		; 18/12/2022
  9374                                  		; cx = 0
  9375                                  		;mov	cl, 25
  9376                                  		;;mov	cx, 25		; A_BPB.size - 6 ; Use SMALL version!
  9377                                  		; 17/12/2023 - Retro DOS v5.0
  9378 00002557 B135                    		mov	cl, 53	; PCDOS 7.1 IBMBIO.COM
  9379                                  				; BDS.BPB size (25 + 28 for FAT32 parms)
  9380 00002559 F3A4                    		rep movsb
  9381                                  		;pop	ds
  9382                                  		; 12/08/2023
  9383                                  		; ds = cs
  9384                                  		;pop	bp  ; ds (on top of stack) = BIOSDATA
  9385 0000255B 5F                      		pop	di  ; BDS
  9386                                  		;push	es
  9387                                  		;push	ds
  9388                                  		;pop	es
  9389                                  		;push	cs
  9390                                  		;pop	ds
  9391                                  		; 12/08/2023
  9392                                  		;mov	es, bp
  9393                                  		; ds = cs = es
  9394                                  		
  9395                                  		; 14/08/2023
  9396 0000255C BD[4F08]                		mov	bp, MOVMEDIAIDS ; mov_media_ids
  9397                                  		; 18/12/2022
  9398                                  		;mov	bp, mov_media_ids
  9399                                  		;;mov	bp, 751h	; mov_media_ids
  9400                                  					; at 2C7h:751h = 70h:2CC1h
  9401                                  					; set volume id, systemid, serial.
  9402 0000255F 0E                      		push	cs		; simulate far call
  9403 00002560 E80EF5                  		call	call_bios_code
  9404                                  		; 12/08/2023
  9405                                  		; ds = cs = es
  9406                                  		;push	es
  9407                                  		;pop	ds
  9408                                  		;pop	es
  9409 00002563 E9C501                  		jmp	goodret
  9410                                  
  9411                                  ; ---------------------------------------------------------------------------
  9412                                  
  9413                                  ; ****** cas ---
  9414                                  ; IBM DOS 3.30 doesn't seem to mind that the TOTAL_SECTORS and
  9415                                  ; BIG_TOTAL_SECTORS field in the boot sector are 0000. This
  9416                                  ; happens with some frequency -- perhaps through some OS/2 setup
  9417                                  ; program. We haven't actually been COPYING the TOTAL_SECTORS
  9418                                  ; from the boot sector into the DPB anyway, we've just been using
  9419                                  ; it for calculating the fat size. Pretty scary, huh? For now,
  9420                                  ; we'll go ahead and copy it into the DPB, except in the case
  9421                                  ; that it equals zero, in which case we just use the values in
  9422                                  ; the DPB from the partition table.
  9423                                  
  9424                                  ; 17/10/2022
  9425                                  ;MOVMEDIAIDS equ mov_media_ids - DOSBIOSEG_2C7h ; (751h for MSDOS 5.0 IO.SYS)
  9426                                  ;CLEARIDS equ clear_ids - DOSBIOSEG_2C7h ; (5D9h for MSDOS 5.0 IO.SYS)		    		
  9427                                  ; 09/12/2022
  9428                                  MOVMEDIAIDS equ mov_media_ids
  9429                                  CLEARIDS equ clear_ids
  9430                                  ; 11/09/2023
  9431                                  CLEARIDS_X equ clear_ids_x
  9432                                  
  9433                                  copybpb_fat:
  9434                                  		; 17/12/2023
  9435                                  		; ch = 0, cl = number of FATs
  9436                                  		; 10/12/2022
  9437                                  		; (number of FATs optimization)
  9438                                  		; SI = disksector+11
  9439                                  		; 17/10/2022
  9440                                  		;mov	si, disksector+11
  9441                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  9442                                  					; cs:si	-> bpb in boot
  9443                                  		; 17/12/2023
  9444                                  		; dx = 0
  9445                                  		;xor	dx, dx
  9446                                  
  9447                                  		; 12/08/2023
  9448                                  		; ds = cs = BIOSDATA segment (0070h)
  9449 00002566 8B4408                  		mov	ax, [si+8]
  9450                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  9451                                  					; get totsec from boot sec
  9452 00002569 09C0                    		or	ax, ax
  9453 0000256B 7514                    		jnz	short copy_totsec ; if non zero, use that
  9454 0000256D 8B4415                  		mov	ax, [si+15h] ; 12/08/2023
  9455                                  		;mov	ax, [cs:si+15h]	; [cs:si+EBPB.BIGTOTALSECTORS]
  9456                                  					; get the big version
  9457                                  					; (32 bit total	sectors)
  9458 00002570 8B5417                  		mov	dx, [si+17h] ; 12/08/2023
  9459                                  		;mov	dx, [cs:si+17h]	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  9460                                  		; 10/12/2022
  9461                                  		; (number of FATs optimization)
  9462                                  		; CL = number of FATs (2 or 1) 
  9463 00002573 89D3                    		mov	bx, dx		; see if it is a big zero
  9464 00002575 09C3                    		or	bx, ax
  9465 00002577 7508                    		jnz	short copy_totsec
  9466                                  			; screw it. it was bogus.
  9467 00002579 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  9468 0000257C 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  9469 0000257F EB06                    		jmp	short fat_big_small
  9470                                  
  9471                                  		;mov	cx, dx
  9472                                  		;or	cx, ax		; see if it is a big zero
  9473                                  		;jz	short totsec_already_set ; screw it. it	was bogus.
  9474                                  copy_totsec:				
  9475 00002581 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  9476                                  					; make DPB match boot sec
  9477 00002584 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  9478                                  
  9479                                  		; 10/12/2022
  9480                                  ;totsec_already_set:			
  9481                                  		;mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  9482                                  		;mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  9483                                  
  9484                                  ; determine fat entry size.
  9485                                  
  9486                                  fat_big_small:
  9487                                  
  9488                                  ;at this moment dx;ax = total sector number
  9489                                  
  9490                                  ;Do not assume 1 reserved sector. Update the reserved sector field in BDS 
  9491                                  ;from the BPB on the disk
  9492                                  		
  9493                                  		; 12/08/2023
  9494                                  		; ds = cs = BIOSDATA segment (0070h)
  9495                                  				
  9496 00002587 8B5C03                  		mov	bx, [si+3]
  9497                                  		;mov	bx, [cs:si+3]	; [cs:si+EBPB.RESERVEDSECTORS]
  9498                                  					; get #reserved_sectors	from BPB
  9499 0000258A 895D09                  		mov	[di+9],	bx	; [di+BDS.resectors]
  9500                                  					; update BDS field
  9501 0000258D 29D8                    		sub	ax, bx
  9502 0000258F 83DA00                  		sbb	dx, 0		; update the count
  9503                                  		; 12/08/2023
  9504 00002592 8B5C0B                  		mov	bx, [si+0Bh]
  9505                                  		;mov	bx, [cs:si+0Bh]	; [cs:si+EBPB.SECTORSPERFAT]
  9506                                  					; bx = sectors/fat
  9507 00002595 895D11                  		mov	[di+11h], bx	; [di+BDS.fatsecs]
  9508                                  					; set in bds bpb
  9509                                  		; 17/12/2023 - Retro DOS v5.0
  9510                                  		;	      (PCDOS 7.1 IBMBIO.COM)
  9511 00002598 53                      		push	bx ; FAT sectors
  9512 00002599 09DB                    		or	bx, bx
  9513 0000259B 753A                    		jnz	short fat_16bit	
  9514                                  
  9515                                  ; 17/12/2023
  9516                                  %if 0		
  9517                                  		sub	ax, [si+19h]	; FAT32 file system (PCDOS 7.1 BUG!)
  9518                                  					; BPB.FATSz32
  9519                                  		sbb	dx, [si+1Bh]	; BPB.FATSz32+2 (PCDOS 7.1 BUG!)
  9520                                  		; dx:ax = partition size - (one FAT sectors + reserved sects)  
  9521                                  		mov	bx, [si+19h]	; BPB.FATSz32
  9522                                  		mov	[di+1Fh], bx	; [di+BDS.fatsecs32]
  9523                                  		mov	bx, [si+1Bh]	; BPB.FATSz32+2
  9524                                  		mov	[di+21h], bx	; [di+BDS.fatsecs32+2]
  9525                                  		mov	bx, [si+1Dh]	; BPB.BPB_ExtFlags
  9526                                  		mov	[di+23h], bx	; [di+BDS.extflags]
  9527                                  		mov	bx, [si+1Fh]	; BPB.FSVer
  9528                                  		mov	[di+25h], bx	; [di+BDS.fsver]
  9529                                  		mov	bx, [si+21h]	; BPB.RootClus
  9530                                  		mov	[di+27h], bx	; [di+BDS.rootdirclust]
  9531                                  		mov	bx, [si+23h]	; BPB.RootClus+2
  9532                                  		mov	[di+29h], bx	; [di+BDS.rootdirclust+2]
  9533                                  		mov	bx, [si+25h]	; BPB.FSInfo
  9534                                  		mov	[di+2Bh], bx	; [di+BDS.fsinfo]
  9535                                  		mov	bx, [si+27h]	; BPB.FSInfo+2
  9536                                  		mov	[di+2Dh], bx	; [di+BDS.fsinfo+2]
  9537                                  		jmp	short fat_32bit	; PCDOS 7.1 BUG! Erdogan Tan - 8/8/2023
  9538                                  					; correct code (would be):
  9539                                  					;   mov cl, [cs:si+05h] ; BPB_NumFATs
  9540                                  					; sub_fat32_size:
  9541                                  					;   sub ax, [cs:si+19h] ; BPB_FATSz32
  9542                                  					;   sbb dx, [cs:si+1Bh] ; BPB_FATSz32+2
  9543                                  					;   dec cl
  9544                                  					;   jg short sub_fat32_size
  9545                                  					;   jmp short fat_32bit
  9546                                  %endif
  9547                                  		; 17/12/2023
  9548                                  		; cl = BPB_NumFATs (2 or 1)
  9549                                  		; ch = 0
  9550 0000259D 8B5C19                  		mov	bx, [si+19h]	; BPB.FATSz32
  9551                                  sub_fat32_size:
  9552 000025A0 29D8                    		sub	ax, bx
  9553 000025A2 1B541B                  		sbb	dx, [si+1Bh]	; BPB.FATSz32+2
  9554                                  		;dec	cl
  9555 000025A5 49                      		dec	cx
  9556 000025A6 7FF8                    		jg	short sub_fat32_size
  9557                                  
  9558 000025A8 895D1F                  		mov	[di+1Fh], bx	; [di+BDS.fatsecs32]
  9559 000025AB 8B5C1B                  		mov	bx, [si+1Bh]	; BPB.FATSz32+2
  9560 000025AE 895D21                  		mov	[di+21h], bx	; [di+BDS.fatsecs32+2]
  9561                                  
  9562 000025B1 8B5C1D                  		mov	bx, [si+1Dh]	; BPB.BPB_ExtFlags
  9563 000025B4 895D23                  		mov	[di+23h], bx	; [di+BDS.extflags]
  9564 000025B7 8B5C1F                  		mov	bx, [si+1Fh]	; BPB.FSVer
  9565 000025BA 895D25                  		mov	[di+25h], bx	; [di+BDS.fsver]
  9566 000025BD 8B5C21                  		mov	bx, [si+21h]	; BPB.RootClus
  9567 000025C0 895D27                  		mov	[di+27h], bx	; [di+BDS.rootdirclust]
  9568 000025C3 8B5C23                  		mov	bx, [si+23h]	; BPB.RootClus+2
  9569 000025C6 895D29                  		mov	[di+29h], bx	; [di+BDS.rootdirclust+2]
  9570 000025C9 8B5C25                  		mov	bx, [si+25h]	; BPB.FSInfo
  9571 000025CC 895D2B                  		mov	[di+2Bh], bx	; [di+BDS.fsinfo]
  9572 000025CF 8B5C27                  		mov	bx, [si+27h]	; BPB.FSInfo+2
  9573 000025D2 895D2D                  		mov	[di+2Dh], bx	; [di+BDS.fsinfo+2]
  9574 000025D5 EB08                    		jmp	short fat_32bit
  9575                                  		
  9576                                  fat_16bit:
  9577                                  		; 17/12/2023 - Retro DOS v5.0
  9578                                  		;	      (PCDOS 7.1 IBMBIO.COM)
  9579                                  		; 10/12/2022
  9580                                  		; (number of FATs optimization)
  9581                                  		; CL = number of FATs (2 or 1)
  9582                                  		; CH = 0 ; 17/12/2023 
  9583                                  		;dec	cl ; *
  9584                                  		; 18/12/2022
  9585 000025D7 49                      		dec	cx ; *
  9586 000025D8 D3E3                    		shl	bx, cl
  9587                                  		;shl	bx, 1	; =*?=	; always 2 fats
  9588                                  		
  9589 000025DA 29D8                    		sub	ax, bx		; sub #	fat sectors
  9590 000025DC 83DA00                  		sbb	dx, 0
  9591                                  fat_32bit:	
  9592                                  		; 17/12/2023
  9593 000025DF 8B5C06                  		mov	bx, [si+6] ; 12/08/2023
  9594                                  		;mov	bx, [cs:si+6]	; [cs:si+EBPB.ROOTENTRIES]
  9595                                  					; # root entries
  9596 000025E2 895D0C                  		mov	[di+0Ch], bx	; [di+BDS.direntries]
  9597                                  					; set in bds bpb
  9598 000025E5 B104                    		mov	cl, 4
  9599 000025E7 D3EB                    		shr	bx, cl		; div by 16 ents/sector
  9600 000025E9 29D8                    		sub	ax, bx		; sub #	dir sectors
  9601 000025EB 83DA00                  		sbb	dx, 0		;
  9602                                  					; dx:ax	now contains the
  9603                                  					; # of data sectors
  9604                                  		; 17/12/2023
  9605                                  		; ch = 0
  9606                                  		;xor	cx, cx ; *
  9607 000025EE 8A4C02                  		mov	cl, [si+2] ; 12/08/2023
  9608                                  		;mov	cl, [cs:si+2]	; [cs:si+EBPB.SECTORSPERCLUSTER]
  9609                                  					; sectors per cluster
  9610 000025F1 884D08                  		mov	[di+8],	cl	; [di+BDS.secperclus]
  9611                                  					; set in bios bpb
  9612 000025F4 50                      		push	ax
  9613 000025F5 89D0                    		mov	ax, dx
  9614 000025F7 31D2                    		xor	dx, dx
  9615 000025F9 F7F1                    		div	cx		; cx = sectors per cluster
  9616                                  		; 12/08/2023 (ds=cs)
  9617                                  		;mov	[temp_h], ax
  9618                                  		;;mov	[cs:temp_h], ax	; [temp_h]:ax now contains the
  9619                                  					; # clusters.
  9620                                  		; 17/12/2023
  9621 000025FB A3[9E04]                		mov	[saved_word], ax ; hw of cluster number
  9622 000025FE 58                      		pop	ax
  9623 000025FF F7F1                    		div	cx
  9624                                  		; 17/12/2023
  9625                                  		;;cmp	word [cs:temp_h], 0
  9626                                  		;cmp	word [temp_h], 0  ; 12/08/2023
  9627                                  		;cmp	word [saved_word], 0 ; (*)
  9628                                  		;ja	short toobig_ret ; too big cluster number
  9629                                  
  9630                                  		; 17/12/2023
  9631                                  		;;;
  9632 00002601 5B                      		pop	bx ; FAT sectors (16 bit)
  9633                                  		;and	bx, bx ; 0 ?
  9634 00002602 09DB                    		or	bx, bx ; 0 ?
  9635 00002604 751F                    		jnz	short chk_clnum_hw
  9636                                  				 ; 16 bit fat sectors > 0 ; FAT12 or FAT16 fs
  9637                                  
  9638 00002606 813E[9E04]FF0F          		cmp	word [saved_word], 0FFFh 
  9639 0000260C 7503                    		jne	short fat32_clust_limit
  9640 0000260E 83F8F6                  		cmp	ax, 0FFF6h	; FAT32 cluster number limit: 0FFFFFF6h
  9641                                  fat32_clust_limit:
  9642 00002611 772D                    		ja	short short toobig_ret ; too big cluster number
  9643 00002613 391E[9E04]              		cmp	[saved_word], bx ; 0 ?
  9644                                  	 	;jnz	short fat16_clust_limit
  9645 00002617 7505                    		jnz	short set_bigbig_flag ; 17/12/2023
  9646                                  fat16_clust_limit:	; 17/12/2023
  9647 00002619 83F8F6                  		cmp	ax, 0FFF6h	; FAT16 cluster number limit: 0FFF6h
  9648                                  ;fat16_clust_limit:
  9649 0000261C 760E                    		jna     short fat12_clust_limit ; jbe
  9650                                  set_bigbig_flag:	; 17/12/2023
  9651 0000261E 800E[061A]20            		or	byte [fbigfat], 20h ; fbigbig ; FAT32 fs
  9652 00002623 EB11                    		jmp	short copymediaid
  9653                                  chk_clnum_hw:
  9654 00002625 833E[9E04]00            		cmp	word [saved_word], 0 ; (*)
  9655 0000262A 7714                    		ja	short toobig_ret ; too big cluster number
  9656                                  		;;;
  9657                                  fat12_clust_limit:
  9658 0000262C 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  9659                                  					; is this 16-bit fat?
  9660 0000262F 7205                    		jb	short copymediaid ; no,	small fat
  9661                                  		; 17/10/2022
  9662 00002631 800E[061A]40            		or	byte [fbigfat], 40h ; fbig ; FAT16 fs
  9663                                  		;or	ds:fbigfat, 40h	; fbig
  9664                                  					; 16 bit fat
  9665                                  copymediaid:
  9666                                  		; 17/12/2023
  9667                                  		; es = ds = cs
  9668                                  		
  9669                                  		;push	es
  9670                                  		;push	ds
  9671                                  		;pop	es
  9672                                  		
  9673                                  		; 12/08/2023
  9674                                  		; ds = cs = BIOSDATA
  9675                                  		;push	cs
  9676                                  		;pop	ds
  9677                                  		; 17/10/2022
  9678 00002636 BD[4F08]                		mov	bp, MOVMEDIAIDS
  9679                                  		;mov	bp, 865h	; (PCDOS 7.1 IBMBIO.COM)
  9680                                  		;;mov	bp, 751h	; mov_media_ids
  9681                                  					; at 2C7h:751h = 70h:2CC1h
  9682                                  					; copy filesys_id, volume label
  9683 00002639 0E                      		push	cs		; simulate far call
  9684 0000263A E834F4                  		call	call_bios_code
  9685                                  
  9686                                  		; 12/08/2023
  9687                                  		;push	es
  9688                                  		;pop	ds
  9689                                  		; 17/12/2023
  9690                                  		;pop	es
  9691                                  
  9692 0000263D E9CD00                  		jmp	massage_bpb	; now final check for bpb info
  9693                                  					; and return.
  9694                                  ; ---------------------------------------------------------------------------
  9695                                  
  9696                                  toobig_ret:
  9697                                  		; 12/08/2023 (ds=cs=BIOSDATA)
  9698 00002640 800E[061A]80            		or	byte [fbigfat], 80h ; ftoobig
  9699                                  		;or	byte [cs:fbigfat], 80h ; ftoobig 
  9700                                  					; too big (32 bit clust #) for FAT16
  9701 00002645 E9E300                  		jmp	goodret		; still	drive letter is	assigned
  9702                                  					; but useless. to big for
  9703                                  					; current pc dos fat file system
  9704                                  ; ---------------------------------------------------------------------------
  9705                                  
  9706                                  unknown:
  9707                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  9708 00002648 804D4002                		or	byte [di+40h], 2 ; [di+BDS.flags+1]
  9709                                  					 ; unformatted_media
  9710                                  		; 12/12/2022
  9711                                  		;or	byte [di+24h], 02h
  9712                                  		;;or	word [di+23h], 200h ; [di+BDS.flags]
  9713                                  					; unformatted_media
  9714                                  					; Set unformatted media	flag.
  9715                                  
  9716                                  ; the boot signature may not be	recognizable,
  9717                                  ; but we should	try and	read it	anyway.
  9718                                  
  9719                                  unknown3_0:
  9720 0000264C 8B551D                  		mov	dx, [di+1Dh]	; skip setting unformatted_media bit
  9721                                  					; [di+BDS.totalsecs32+2]
  9722 0000264F 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  9723 00002652 BE[161A]                		mov	si, disktable2
  9724                                  scan:					; 08/08/2023
  9725                                  		;cmp	dx, [cs:si]	; total sectors hw
  9726                                  		; 12/08/2023 (ds=cs)
  9727 00002655 3B14                    		cmp	dx, [si] 
  9728 00002657 720C                     		jb	short gotparm
  9729 00002659 7705                    		ja	short scan_next
  9730                                  		;cmp	ax, [cs:si+2]	; total sectors lw
  9731 0000265B 3B4402                  		cmp	ax, [si+2]
  9732 0000265E 7605                    		jbe	short gotparm
  9733                                  scan_next:				
  9734 00002660 83C60A                  		add	si, 10		; 5*2
  9735 00002663 EBF0                    		jmp	short scan	; covers upto 512 mb media
  9736                                  ; ---------------------------------------------------------------------------
  9737                                  
  9738                                  gotparm:
  9739 00002665 8A4C08                  		mov	cl, [si+8]	; fat size for fbigfat flag
  9740                                  		;or	ds:fbigfat, cl
  9741                                  		; 17/10/2022
  9742 00002668 080E[061A]              		or	[fbigfat], cl	; (fbig flag, 40h or 0) ; 08/08/2023
  9743                                  		; 12/08/2023
  9744                                  		; ds = cs = BIOSDATA
  9745 0000266C 8B4C04                  		mov	cx, [si+4]
  9746                                  		;mov	cx, [cs:si+4]	; ch = number of sectors per cluster
  9747                                  					; cl = log base 2 of ch
  9748 0000266F 8B5406                  		mov	dx, [si+6]
  9749                                  		;mov	dx, [cs:si+6]	; dx = number of root dir entries
  9750                                  
  9751                                  ; now calculate size of fat table
  9752                                  
  9753 00002672 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
  9754                                  					; save number of (root)	dir entries
  9755 00002675 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  9756 00002678 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  9757 0000267B 886D08                  		mov	[di+8],	ch	; [di+BDS.secperclus]
  9758                                  					; save sectors per cluster
  9759                                  		
  9760                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  9761 0000267E F606[061A]60            		test	byte [fbigfat], 60h ; fbig+fbigbig ; FAT16 or FAT32
  9762                                  		; 11/09/2023
  9763                                  		; 17/10/2022
  9764                                  		;test	byte [fbigfat], 40h
  9765                                  		;;test	ds:fbigfat, 40h	; fbig
  9766                                  					; if (fbigfat)
  9767 00002683 751E                    		jnz	short dobig	; goto dobig; (16 bit fat)
  9768                                  
  9769                                  ; we don't need to change "small fat" logic since it is guaranteed
  9770                                  ; that double word total sector will not use 12 bit fat (unless
  9771                                  ; it's sectors/cluster >= 16 which will never be in this case.)
  9772                                  ; so in this case we assume dx = 0 !!
  9773                                  
  9774 00002685 31DB                    		xor	bx, bx		; 12 bit fat (FAT12 fs)
  9775 00002687 88EB                    		mov	bl, ch
  9776 00002689 4B                      		dec	bx
  9777 0000268A 01C3                    		add	bx, ax		; dx=0
  9778 0000268C D3EB                    		shr	bx, cl		; bx = 1+(bpb->maxsec+BDS.secperclus-1)/
  9779 0000268E 43                      		inc	bx		; BDS.secperclus
  9780 0000268F 80E3FE                  		and	bl, 0FEh	; bx &= ~1; (=number of clusters)
  9781 00002692 89DE                    		mov	si, bx
  9782 00002694 D1EB                    		shr	bx, 1
  9783 00002696 01F3                    		add	bx, si		; number of FAT bytes ; 08/08/2023
  9784 00002698 81C3FF01                		add	bx, 511		; bx +=	511 + bx/2
  9785 0000269C D0EF                    		shr	bh, 1		; bh >>= 1; (=bx/512)
  9786 0000269E 887D11                  		mov	[di+11h], bh	; [di+BDS.fatsecs]
  9787                                  					; save number of fat sectors
  9788 000026A1 EB6A                    		jmp	short massage_bpb
  9789                                  ; ---------------------------------------------------------------------------
  9790                                  
  9791                                  ; for bigfat we do need to extend this logic to 32 bit sector calculation.
  9792                                  
  9793                                  dobig:					
  9794 000026A3 B104                    		mov	cl, 4		; 16 (2^4) directory entries per sector
  9795 000026A5 52                      		push	dx		; save total sectors (high)
  9796 000026A6 8B550C                  		mov	dx, [di+0Ch]	; [di+BDS.direntries]
  9797 000026A9 D3EA                    		shr	dx, cl		; root dir sectors = BDS.direntries / 16;
  9798 000026AB 29D0                    		sub	ax, dx
  9799 000026AD 5A                      		pop	dx
  9800 000026AE 83DA00                  		sbb	dx, 0		; dx:ax	= total	sectors	- root dir sectors
  9801 000026B1 83E801                  		sub	ax, 1
  9802 000026B4 83DA00                  		sbb	dx, 0		; dx:ax	= t - r	- d
  9803                                  					; total	secs - reserved	secs - root dir	secs
  9804 000026B7 B302                    		mov	bl, 2
  9805 000026B9 8A7D08                  		mov	bh, [di+8]	; [di+BDS.secperclus]
  9806                                  					; bx = 256 * BDS.secperclus + 2
  9807                                  
  9808                                  ; I don't understand why to add bx here!!!
  9809                                  
  9810                                  		; 29/12/2018 - Erdogan Tan (Retro DOS v4.0)
  9811                                  		; 27/09/2022
  9812                                  		; (Microsoft FAT32 File	System Specification,
  9813                                  		; December 2000, Page 21)
  9814                                  		; TmpVal1 = DskSize - (BPB_ResvdSecCnt+RootrDirSectors)
  9815                                  		; TmpVal2 = (256*BPB_SecPerClus)+BPB_NumFATs
  9816                                  		; 8/8/2023 (Retro DOS v5.0)
  9817                                  		; If(FATType == FAT32)
  9818                                  		;   TmpVal2 = TmpVal2 / 2;
  9819                                  		; FATsz	= (TmpVal1+(TmpVal2-1))/TmpVal2
  9820                                  		; 8/8/2023 (Retro DOS v5.0)
  9821                                  		; If(FATType == FAT32) {
  9822                                  		;   BPB_FATSz16 = 0;
  9823                                  		;   BPB_FATSz32 = FATSz;
  9824                                  		;} else {
  9825                                  		;   BPB_FATSz16 = LOWORD(FATSz);
  9826                                  		;/* there is no BPB_FATSz32 in a FAT16 BPB */
  9827                                  		;}
  9828                                  					; dx:ax = TmpVal1, bx = TmpVal2
  9829 000026BC 01D8                    		add	ax, bx		; 
  9830 000026BE 83D200                  		adc	dx, 0		; dx:ax = TmpVal1+TmpVal2
  9831 000026C1 83E801                  		sub	ax, 1		
  9832 000026C4 83DA00                  		sbb	dx, 0		; dx:ax = TmpVal1+TmpVal2-1
  9833                                  
  9834                                  		;;;
  9835                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  9836 000026C7 F606[061A]20            		test	byte [fbigfat], 20h ; fbigbig (FAT32) flag
  9837 000026CC 740D                    		jz      short dobig1
  9838                                  
  9839 000026CE D1EB                    		shr	bx, 1           ; TmpVal2 = TmpVal2 / 2
  9840                                  					; dx:ax = TmpVal1+(2*TmpVal2)-1
  9841 000026D0 83E81F                  		sub	ax, 31          ; reserved sectors = 32 (for FAT32 fs) /// 1+31 = 32
  9842 000026D3 83DA00                  		sbb	dx, 0
  9843 000026D6 29D8                    		sub	ax, bx
  9844 000026D8 83DA00                  		sbb	dx, 0           ; dx:ax = TmpVal1+(2*TmpVal2)-TmpVal2-1
  9845                                  					;       = TmpVal1+(TmpVal2-1)
  9846                                  dobig1:
  9847 000026DB 50                      		push	ax		; save lw of dividend
  9848 000026DC 89D0                    		mov	ax, dx		; divide hw of dx:ax at first (as 1st stage)
  9849 000026DE 31D2                    		xor	dx, dx
  9850 000026E0 F7F3                    		div	bx		; 32 bit division, dx:ax/bx
  9851                                  					; remainder in dx is hw of 2nd stage dividend
  9852 000026E2 89C5                    		mov	bp, ax		; hw of quotient
  9853 000026E4 58                      		pop	ax		; restore lw of dividend (of 1st stage)
  9854                                  		;;;
  9855                                  
  9856                                  ; assuming dx in the table will never be bigger than bx.
  9857                                  
  9858 000026E5 F7F3                    		div	bx		; BDS.fatsecs =
  9859                                  					; ceil((total-dir-res)/(256*BDS.secperclus+2))
  9860 000026E7 894511                  		mov	[di+11h], ax	; [di+BDS.fatsecs]
  9861                                  					; number of fat	sectors
  9862                                  		;;;
  9863                                  		
  9864                                  		; 18/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  9865 000026EA 8A1E[061A]              		mov	bl, [fbigfat]
  9866 000026EE 885D3B                  		mov	[di+3Bh], bl	; [di+BDS.fatsiz] ; fat size flag
  9867                                  		
  9868 000026F1 F6C320                  		test	bl, 20h		; fbigbig (FAT32) flag
  9869 000026F4 7410                    		jz	short dobig2	; not FAT32
  9870                                  
  9871 000026F6 89451F                  		mov	[di+1Fh], ax	; [di+BDS.fatsecs32]
  9872 000026F9 896D21                  		mov	[di+21h], bp	; [di+BDS.fatsecs32+2]
  9873 000026FC C745110000              		mov	word [di+11h], 0 ; [di+BDS.fatsecs] = 0
  9874                                  					; clear 16 bit FAT size field
  9875 00002701 C745092000              		mov	word [di+9], 32	; [di+BDS.resectors]
  9876                                  					; set reserved sectors to 32 (FAT32 de facto)
  9877                                  dobig2:
  9878                                  		;;;
  9879                                  
  9880                                  ; now, set the default filesys_id, volume label, serial number
  9881                                  
  9882                                  		; 05/08/2023
  9883                                  		; [di+1Fh] = [fbigfat]
  9884                                  		;
  9885                                  		;;mov	bl, ds:fbigfat
  9886                                  		;; 17/10/2022
  9887                                  		;mov	bl, [fbigfat]
  9888                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz] ; fat	size flag
  9889                                  
  9890                                  		; 12/08/2023
  9891                                  		;push	ds ; ds = cs = BIOSDATA
  9892                                  		
  9893                                  		; 17/12/2023
  9894                                  		; es = ds = cs
  9895                                  		;push	ds
  9896                                  		;pop	es
  9897                                  
  9898                                  		; 12/08/2023 
  9899                                  		; ds = cs = BIOSDATA
  9900                                  		;push	cs
  9901                                  		;pop	ds
  9902                                  
  9903                                  		; 18/12/2023 - Retro DOS v5.0
  9904                                  		; bl = [fbigfat] (clear_ids_x uses bl value here)
  9905                                  		; 11/09/2023
  9906                                  		;mov	al, [fbigfat]
  9907 00002706 BD[A106]                		mov	bp, CLEARIDS_X	; clear_ids_x (uses AL value here)
  9908                                  		; 17/10/2022
  9909                                  		;mov	bp, CLEARIDS
  9910                                  		;;mov	bp, 5D9h	; clear_ids
  9911                                  					; at 2C7h:5D9h = 70h:2B49h
  9912                                  					; at BIOSCODE:06ABh
  9913                                  					;	in PCDOS 7.1 IBMBIO.COM
  9914 00002709 0E                      		push	cs
  9915 0000270A E864F3                  		call	call_bios_code
  9916                                  
  9917                                  		; 12/08/2023
  9918                                  		;pop	ds ; ds = cs = BIOSDATA
  9919                                  
  9920                                  ; at this point, in bpb of bds table, BDS_BPB.BPB_BIGTOTALSECTORS which is
  9921                                  ; set according to the partition information. we are going to
  9922                                  ; see if (hidden sectors + total sectors) > a word. if it is true,
  9923                                  ; then no change. otherwise, BDS_BPB.BPB_BIGTOTALSECTORS will be moved
  9924                                  ; to BDS_BPB.BPB_TOTALSECTORS and BDS_BPB.BPB_BIGTOTALSECTORS will be set to 0.
  9925                                  ; we don't do this for the bpb information from the boot record. we
  9926                                  ; are not going to change the bpb information from the boot record.
  9927                                  
  9928                                  massage_bpb:
  9929                                  		; 05/08/2023
  9930                                  		; [di+1Fh] = [fbigfat]
  9931                                  		;
  9932                                  		;; 12/12/2022
  9933                                  		;mov	bl, [fbigfat]
  9934                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  9935                                  		;			; set size of fat on media
  9936                                  		;
  9937 0000270D 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  9938 00002710 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  9939                                  		; 11/09/2023
  9940 00002713 09D2                    		or	dx, dx
  9941 00002715 7514                    		jnz	short goodret	
  9942                                  		;cmp	dx, 0		; double word total sectors?
  9943                                  		;;ja	short goodret	; don't have to change it.
  9944                                  		;; 12/12/2022
  9945                                  		;ja	short short goodret2
  9946                                  		;cmp	word [di+19h], 0 ; [di+BDS.hiddensecs+2]
  9947                                  		;ja	short goodret	; don't have to change it.
  9948                                  		; 12/12/2022
  9949 00002717 395519                  		cmp	[di+19h], dx ; 0
  9950                                  		;ja	short goodret2
  9951 0000271A 770F                    		ja	short goodret	; 11/09/2023
  9952 0000271C 034517                  		add	ax, [di+17h]	; [di+BDS.hiddensecs]
  9953                                  		;jb	short goodret
  9954                                  		; 12/12/2022
  9955                                  		;jc	short goodret
  9956 0000271F 7209                    		jc	short goodret_clc ; 11/09/2023
  9957 00002721 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  9958 00002724 89450E                  		mov	[di+0Eh], ax	; [di+BDS.totalsecs16]
  9959                                  		;mov	word [di+1Bh], 0 ; [di+BDS.totalsecs32]
  9960                                  		; 12/12/2022
  9961 00002727 89551B                  		mov	[di+1Bh], dx ; 0
  9962                                  goodret_clc:
  9963                                  		; 11/09/2023
  9964 0000272A F8                      		clc 
  9965                                  goodret:
  9966                                  		;mov	bl, ds:fbigfat
  9967                                  		; 11/09/2023
  9968                                  		; 12/12/2022
  9969                                  		; 17/10/2022
  9970 0000272B 8A1E[061A]              		mov	bl, [fbigfat]
  9971                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  9972 0000272F 885D3B                  		mov	[di+3Bh], bl	; [di+BDS.fatsiz]
  9973                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  9974                                  					; set size of fat on media
  9975                                  		; 11/09/2023
  9976                                  		;clc
  9977                                  ret_hard_err:
  9978                                  		; 12/12/2022
  9979                                  goodret2:
  9980 00002732 07                      		pop	es
  9981                                  		;pop	ds	; ds = cs = BIOSDATA ; 14/08/2023
  9982 00002733 5B                      		pop	bx
  9983 00002734 5F                      		pop	di
  9984 00002735 C3                      		retn
  9985                                  
  9986                                  ; =============== S U B	R O U T	I N E =======================================
  9987                                  
  9988                                  ; 15/10/2022
  9989                                  
  9990                                  ;fdisk of pc dos 3.3 and below, os2 1.0 has a bug. the maximum number of
  9991                                  ;sector that can be handled by pc dos 3.3 ibmbio should be 0ffffh.
  9992                                  ;instead, sometimes fdisk use 10000h to calculate the maximum number.
  9993                                  ;so, we are going to check that if BPB_TOTALSECTORS + hidden sector = 10000h
  9994                                  ;then subtract 1 from BPB_TOTALSECTORS.
  9995                                  
  9996                                  		; 17/10/2022
  9997                                  cover_fdisk_bug:
  9998                                  		; 12/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  9999                                  		; ds = cs
 10000                                  
 10001                                  		; 18/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 10002                                  		; (optimization)
 10003                                  		;push	ax
 10004                                  		;push	dx
 10005                                  		;push	si
 10006                                  
 10007                                  		; 18/12/2023
 10008                                  		; bx = offset disksector
 10009                                  
 10010                                  		; 18/12/2023
 10011 00002736 807F2629                		cmp	byte [bx+26h], 29h
 10012                                  		; 12/08/2023
 10013                                  		;cmp	byte [disksector+26h], 29h
 10014                                  		;;cmp	byte [cs:disksector+26h], 29h
 10015                                  					; [disksector+EXT_BOOT.SIG],
 10016                                  					; EXT_BOOT_SIGNATURE
 10017 0000273A 7426                    		je	short cfb_retit	; if extended bpb, then	>= pc dos 4.00
 10018                                  		
 10019 0000273C 817F073130              		cmp	word [bx+7], 3031h
 10020                                  		;cmp	word [cs:bx+7], 3031h ; '10' ; os2 1.0 = ibm 10.0
 10021 00002741 7506                    		jne	short cfb_chk_totalsecs ; 11/08/2023
 10022 00002743 807F0A30                		cmp	byte [bx+10], '0'
 10023                                  		;cmp	byte [cs:bx+10], '0'
 10024 00002747 7519                    		jne	short cfb_retit
 10025                                  
 10026                                  cfb_chk_totalsecs:
 10027                                  		; 11/08/2023
 10028                                  ; 18/12/2023
 10029                                  %if 0
 10030                                  		; 17/10/2022		
 10031                                  		mov	si, disksector+11 ; 14Eh+0Bh
 10032                                  		;mov	si, 159h	; disksector+EXT_BOOT.BPB
 10033                                  		; 12/08/2023
 10034                                  		cmp	word [si+8], 0
 10035                                  		;cmp	word [cs:si+8], 0 ; [cs:si+EBPB.TOTALSECTORS]
 10036                                  					; just to make sure.
 10037                                  		jz	short cfb_retit
 10038                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
 10039                                  		;add	ax, [cs:si+11h]	; [cs:si+EBPB.HIDDENSECTORS]
 10040                                  		; 12/08/2023
 10041                                  		mov	ax, [si+8]
 10042                                  		add	ax, [si+11h]
 10043                                  
 10044                                  		jnb	short cfb_retit
 10045                                  		jnz	short cfb_retit
 10046                                  					; if carry set and ax=0
 10047                                  		dec	word [si+8]
 10048                                  		;dec	word [cs:si+8]	; 0 -> 0FFFFh
 10049                                  					; then decrease	BPB_TOTALSECTORS by 1
 10050                                  %endif
 10051                                  		; 18/12/2023
 10052                                  		;cmp	word [bx+19], 0
 10053 00002749 8B4713                  		mov	ax, [bx+19]	; [bx+EBPB.TOTALSECTORS]
 10054 0000274C 21C0                    		and	ax, ax ; 0 ?
 10055 0000274E 7412                    		jz	short cfb_retit
 10056                                  
 10057                                  		;mov	ax, [bx+19]
 10058 00002750 03471C                  		add	ax, [bx+28]	; [bx+EBPB.HIDDENSECTORS]
 10059 00002753 730D                    		jnc	short cfb_retit
 10060 00002755 750B                    		jnz	short cfb_retit
 10061                                  		; ax = 0		; 0 -> 0FFFFh
 10062 00002757 FF4F13                  		dec	word [bx+19]	; then decrease	BPB_TOTALSECTORS by 1
 10063                                  
 10064 0000275A 836D1B01                		sub	word [di+1Bh], 1 ; [di+BDS.totalsecs32]
 10065 0000275E 835D1D00                		sbb	word [di+1Dh], 0 ; [di+BDS.totalsecs32+2]
 10066                                  cfb_retit:	
 10067                                  		; 18/12/2023
 10068                                  		;pop	si
 10069                                  		;pop	dx
 10070                                  		;pop	ax
 10071                                  		
 10072 00002762 C3                      		retn
 10073                                  
 10074                                  ; ---------------------------------------------------------------------------
 10075                                  		
 10076                                  		; 18/12/2023 - Retro DOS v5.0 
 10077                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2A3Dh)
 10078                                  		; ((MSDOS 6.22 IO.SYS - BIOSDATA:21DCh))
 10079                                  
 10080 00002763 0200                    word2:		dw 2
 10081 00002765 0300                    word3:		dw 3
 10082 00002767 0002                    word512:	dw 512
 10083                                  
 10084                                  ; =============== S U B	R O U T	I N E =======================================
 10085                                  
 10086                                  ; 15/10/2022
 10087                                  
 10088                                  ; setdrvparms sets up the recommended bpb in each bds in the system based on
 10089                                  ; the form factor. it is assumed that the bpbs for the various form factors
 10090                                  ; are present in the bpbtable. for hard files, the recommended bpb is the same
 10091                                  ; as the bpb on the drive.
 10092                                  ;
 10093                                  ; no attempt is made to preserve registers since we are going to jump to
 10094                                  ; sysinit straight after this routine.
 10095                                  
 10096                                  		; 18/12/2023 - Retro DOS v5.0 
 10097                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2A43h)
 10098                                  setdrvparms:
 10099                                  		; 12/12/2023
 10100                                  		; ds = cs
 10101 00002769 31DB                    		xor	bx, bx
 10102                                  		; 18/10/2022
 10103 0000276B C43E[1901]              		les	di, [start_bds] ; get first bds in list
 10104                                  _next_bds:
 10105 0000276F 06                      		push	es
 10106 00002770 57                      		push	di
 10107                                  
 10108                                  		; 18/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 10109 00002771 268A5D3E                		mov	bl, [es:di+3Eh]	; [es:di+BDS.formfactor]
 10110                                  		;mov	bl, [es:di+22h]	; [es:di+BDS.formfactor]
 10111                                  
 10112 00002775 80FB05                  		cmp	bl, 5		; ffHardFile
 10113 00002778 753A                    		jnz	short nothardff
 10114 0000277A 31D2                    		xor	dx, dx
 10115 0000277C 268B450E                		mov	ax, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
 10116 00002780 09C0                    		or	ax, ax
 10117 00002782 7508                    		jnz	short get_ccyl
 10118 00002784 268B551D                		mov	dx, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
 10119 00002788 268B451B                		mov	ax, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
 10120                                  get_ccyl:
 10121 0000278C 52                      		push	dx
 10122 0000278D 50                      		push	ax
 10123 0000278E 268B4515                		mov	ax, [es:di+15h]	; [es:di+BDS.heads]
 10124 00002792 26F76513                		mul	word [es:di+13h] ; [es:di+BDS.secpertrack]
 10125                                  					; assume sectors per cyl. < 64k.
 10126 00002796 89C1                    		mov	cx, ax		; cx has # sectors per cylinder
 10127 00002798 58                      		pop	ax
 10128 00002799 5A                      		pop	dx		; dx:ax	= total	sectors
 10129 0000279A 50                      		push	ax
 10130 0000279B 89D0                    		mov	ax, dx
 10131 0000279D 31D2                    		xor	dx, dx
 10132 0000279F F7F1                    		div	cx
 10133                                  		; 12/12/2023  ; !*!
 10134                                  		; (data segment may not be same with code segment here)
 10135                                  		;mov	[cs:temp_h], ax	; ax be	0 here.
 10136                                  		; 18/12/2023 - Retro DOS v5.0
 10137                                  		;mov	[cs:saved_word], ax
 10138 000027A1 58                      		pop	ax
 10139 000027A2 F7F1                    		div	cx		; div #sec by sec/cyl to get # cyl.
 10140 000027A4 09D2                    		or	dx, dx
 10141 000027A6 7401                    		jz	short no_cyl_rnd ; came out even
 10142 000027A8 40                      		inc	ax		; round	up
 10143                                  no_cyl_rnd:
 10144                                  		; 18/12/2023 - Retro DOS v5.0
 10145 000027A9 26894541                		mov	[es:di+41h], ax	; [es:di+BDS.cylinders]
 10146                                  		;mov	[es:di+25h], ax	; [es:di+BDS.cylinders]
 10147                                  		
 10148 000027AD 06                      		push	es
 10149 000027AE 1F                      		pop	ds  ; !*! ; 12/12/2023
 10150                                  
 10151 000027AF 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec]
 10152                                  					; ds:si	-> bpb for hard	file
 10153 000027B2 EB55                    		jmp	short set_recbpb
 10154                                  ; ---------------------------------------------------------------------------
 10155                                  
 10156                                  nothardff:				
 10157 000027B4 0E                      		push	cs
 10158 000027B5 1F                      		pop	ds
 10159                                  
 10160                                  ; if fake floppy drive variable is set then we don't have to handle this bds.
 10161                                  ; we can just go and deal with the next bds at label go_to_next_bds.
 10162                                  
 10163                                  		; 10/12/2022
 10164                                  		; ds = cs
 10165                                  		; 17/10/2022 (ds=cs)
 10166 000027B6 803E[111A]01            		cmp	byte [fakefloppydrv], 1
 10167                                  		;cmp	byte [cs:fakefloppydrv], 1
 10168 000027BB 7454                    		jz	short go_to_next_bds
 10169 000027BD 80FB07                  		cmp	bl, 7		; ffother
 10170                                  					; special case "other" type of medium
 10171 000027C0 753D                    		jnz	short not_process_other
 10172                                  process_other:
 10173 000027C2 31D2                    		xor	dx, dx
 10174                                  
 10175                                  		;mov	ax, [di+25h]	; [di+BDS.cylinders]
 10176                                  		;mul	word [di+36h]	; [di+BDS.rheads]
 10177                                  		;mul	word [di+34h]	; [di+BDS.rsecpertrack]
 10178                                  		;mov	[di+2Fh], ax	; [di+BDS.rtotalsecs16]
 10179                                  		;			; have the total number of sectors
 10180                                  		; 18/12/2023 - Retro DOS v5.0
 10181 000027C4 8B4541                  		mov	ax, [di+41h]	; [di+BDS.cylinders]
 10182 000027C7 F76552                  		mul	word [di+52h]	; [di+BDS.rheads]
 10183 000027CA F76550                  		mul	word [di+50h]	; [di+BDS.rsecpertrack]
 10184 000027CD 89454B                  		mov	[di+4Bh], ax	; [di+BDS.rtotalsecs16]
 10185                                  					; have the total number of sectors
 10186 000027D0 48                      		dec	ax
 10187 000027D1 B201                    		mov	dl, 1
 10188                                  _again:					
 10189 000027D3 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
 10190 000027D6 7206                    		jb	short _@@
 10191 000027D8 D1E8                    		shr	ax, 1
 10192 000027DA D0E2                    		shl	dl, 1
 10193 000027DC EBF5                    		jmp	short _again
 10194                                  ; ---------------------------------------------------------------------------
 10195                                  
 10196                                  _@@:
 10197 000027DE 80FA01                  		cmp	dl, 1		; is it	a small	disk ?
 10198 000027E1 7405                    		jz	short __@@	; yes, 224 root	entries	is enuf
 10199                                  
 10200                                  		; 18/12/2023 - Retro DOS v5.0
 10201 000027E3 C74549F000              		mov	word [di+49h], 240 ; [di+BDS.rdirentries]
 10202                                  		;mov	word [di+2Dh], 240 ; [di+BDS.rdirentries]
 10203                                  __@@:
 10204                                  		; 18/12/2023 - Retro DOS v5.0
 10205 000027E8 885545                  		mov	[di+45h], dl	; [di+BDS.rsecperclus]
 10206                                  		;mov	[di+29h], dl	; [di+BDS.rsecperclus]
 10207                                  
 10208                                  ; logic to get the sectors/fat area.
 10209                                  ; fat entry is assumed to be 1.5 bytes!!!
 10210                                  
 10211                                  		; 10/12/2022
 10212                                  		; ds = cs
 10213                                  		; 17/10/2022 (ds=cs)
 10214 000027EB F726[6527]              		mul	word [word3]	; * 3
 10215 000027EF F736[6327]              		div	word [word2]	; / 2
 10216 000027F3 31D2                    		xor	dx, dx
 10217 000027F5 F736[6727]              		div	word [word512]	; / 512
 10218                                  		;
 10219                                  		; 10/12/2022
 10220                                  		;mul	word [cs:word3]	; * 3
 10221                                  		;div	word [cs:word2]	; / 2
 10222                                  		;xor	dx, dx
 10223                                  		;div	word [cs:word512] ; / 512
 10224                                  		;
 10225 000027F9 40                      		inc	ax		; + 1
 10226                                  no_round_up:
 10227                                  		; 18/12/2023 - Retro DOS v5.0
 10228 000027FA 89454E                  		mov	[di+4Eh], ax	; [di+BDS.rfatsecs]
 10229                                  		;mov	[di+32h], ax	; [di+BDS.rfatsecs]
 10230                                  
 10231 000027FD EB12                    		jmp	short go_to_next_bds
 10232                                  ; ---------------------------------------------------------------------------
 10233                                  
 10234                                  not_process_other:
 10235 000027FF D1E3                    		shl	bx, 1		; bx is	word index into	table of bpbs
 10236                                  		
 10237                                  		;mov	si, bpbtable
 10238                                  		;mov	si, [bpbtable+bx] ; 15/10/2022
 10239                                  		; 09/12/2022
 10240                                  		;mov	si, BPBTABLE
 10241                                  		;mov	si, [bx+si]	; get address of bpb
 10242                                  		; 10/12/2022
 10243                                  		;mov	si, [BPBTABLE+bx]
 10244                                  		; 13/12/2022
 10245                                  		;mov	si, [SYSINITOFFSET+bpbtable+bx] ; wrong ! 14/08/2023
 10246                                  		
 10247                                  		; 14/08/2023
 10248                                  		SYSINIT_OFFSET equ (SYSINITSEG-DOSBIODATASEG<<4)
 10249                                  							; correct offset
 10250 00002801 8BB7[EC97]              		mov	si, [bx+SYSINIT_OFFSET+bpbtable]
 10251                                  		
 10252                                  		; 18/12/2023 
 10253                                  		; si = address of the requested disk(ette) parameter block
 10254                                  		;	! as offset from SYSINIT segment !
 10255                                  
 10256                                  		; 28/08/2023
 10257 00002805 81C64049                		add	si, SYSINIT_OFFSET
 10258                                  			; + displacement from BIOSDATA segment ; 18/12/2023
 10259                                  set_recbpb:
 10260                                  		; 18/12/2023
 10261                                  		;lea	di, [di+27h]	; [di+BDS.R_BPB]
 10262                                  		;			; es:di	-> recbpb
 10263                                  		;mov	cx, 25		; bpbx.size
 10264                                  		;rep movsb		; move (size bpbx) bytes
 10265                                  		
 10266                                  		; 18/12/2023 - Retro DOS v5.0
 10267 00002809 8D7D43                  		lea	di, [di+43h]	; [di+BDS.R_BPB]
 10268                                  					; es:di	-> recbpb
 10269 0000280C B93500                  		mov	cx, 53		; bpbx.size
 10270 0000280F F3A4                    		rep movsb		; move (size bpbx) byte
 10271                                  go_to_next_bds:
 10272 00002811 5F                      		pop	di
 10273 00002812 07                      		pop	es		; restore pointer to bds
 10274 00002813 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 10275 00002816 83FFFF                  		cmp	di, 0FFFFh	; -1
 10276 00002819 740A                    		jz	short got_end_of_bds_chain
 10277 0000281B E951FF                  		jmp	_next_bds
 10278                                  
 10279                                  ; ---------------------------------------------------------------------------
 10280                                  
 10281                                  		; 18/12/2022
 10282                                  ;got_end_of_bds_chain:
 10283                                  		;retn
 10284                                  
 10285                                  ; =============== S U B	R O U T	I N E =======================================
 10286                                  
 10287                                  ; 15/10/2022
 10288                                  ; 30/12/2018 - Retro DOS v4.0
 10289                                  
 10290                                  ; al = device number
 10291                                  
 10292                                  print_init:	
 10293 0000281E 98                      		cbw
 10294 0000281F 89C2                    		mov	dx, ax
 10295 00002821 B401                    		mov	ah, 1
 10296 00002823 CD17                    		int	17h		; PRINTER - INITIALIZE
 10297                                  					; DX = printer port (0-3)
 10298                                  					; Return: AH = status
 10299                                  got_end_of_bds_chain:	; 18/12/2022
 10300 00002825 C3                      		retn
 10301                                  
 10302                                  ; =============== S U B	R O U T	I N E =======================================
 10303                                  
 10304                                  ; al = device number
 10305                                  
 10306                                  aux_init:
 10307 00002826 98                      		cbw
 10308 00002827 89C2                    		mov	dx, ax
 10309                                  		;mov	al, 0A3h	; RSINIT ; 0A3h
 10310                                  					; 2400,n,1,8 (msequ.inc)
 10311                                  		;mov	ah, 0
 10312                                  		; 10/12/2022
 10313 00002829 B8A300                  		mov	ax, 00A3h
 10314 0000282C CD14                    		int	14h		; SERIAL I/O - INITIALIZE USART
 10315                                  					; 	AL = initializing parameters,
 10316                                  					;	DX = port number (0-3)
 10317                                  					; Return: AH = RS-232 status code bits,
 10318                                  					;	  AL = modem status bits
 10319 0000282E C3                      		retn
 10320                                  
 10321                                  ; =============== S U B	R O U T	I N E =======================================
 10322                                  
 10323                                  ; 18/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 10324                                  ; 08/08/2023 - Retro DOS v4.2 (Modified MSDOS 6.22 IO.SYS)
 10325                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS) -Retro DOS v4 2022- (MSDOS 5.0-6.21)
 10326                                  ; 30/12/2018 - Retro DOS v4.0
 10327                                  ; 03/06/2018 - Retro DOS v3.0
 10328                                  ; (19/03/2018 - Retro DOS v2.0)
 10329                                  
 10330                                  ; domini **********************************************************************
 10331                                  ;
 10332                                  ;mini disk initialization routine. called right after dohard
 10333                                  ;modified for >2 hardfile support
 10334                                  ;
 10335                                  ; **cs=ds=es=datagrp
 10336                                  ;
 10337                                  ; **domini will search for every extended partition in the system, and
 10338                                  ;   initialize it.
 10339                                  ;
 10340                                  ; **bdsm stands for bds table for mini disk and located right after the label
 10341                                  ;   end96tpi. end_of_bdsm will have the offset value of the ending
 10342                                  ;   address of bdsm table.
 10343                                  ;
 10344                                  ; **bdsm is the same as usual bds structure except that tim_lo, tim_hi entries
 10345                                  ;   are overlapped and used to identify mini disk and the number of hidden_trks.
 10346                                  ;   right now, they are called as ismini, hidden_trks respectively.
 10347                                  ;
 10348                                  ; **domini will use the same routine in sethard routine after label set2 to
 10349                                  ;   save coding.
 10350                                  ;
 10351                                  ; **drvmax determined in dohard routine will be used for the next
 10352                                  ;   available logical mini disk drive number.
 10353                                  ;
 10354                                  ; input: drvmax, dskdrvs
 10355                                  ;
 10356                                  ; output: minidisk installed. bdsm table established and installed to bds.
 10357                                  ;	  end_of_bdsm - ending offset address of bdsm.
 10358                                  ;
 10359                                  ; called modules:
 10360                                  ;		  getboot
 10361                                  ;		  find_mini_partition (new), xinstall_bds (new), M038
 10362                                  ;
 10363                                  ;		  setmini (new, it will use set2 routine)
 10364                                  ;
 10365                                  ; variables used: end_of_bdsm
 10366                                  ;		  rom_minidisk_num
 10367                                  ;		  mini_hdlim, mini_seclim
 10368                                  ;		  BDS_STRUC, start_bds
 10369                                  ;
 10370                                  ;******************************************************************************
 10371                                  
 10372                                  		; 18/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
 10373                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2B10h)
 10374                                  
 10375                                  		; 19/10/2022
 10376                                  domini:
 10377 0000282F 8A36[5D1A]              		mov	dh, [hnum]	; get number of hardfiles
 10378                                  		; 10/12/2022
 10379 00002833 20F6                    		and	dh, dh
 10380                                  		;cmp	dh, 0
 10381 00002835 743C                    		jz	short dominiret	; no hard file?	then exit.
 10382 00002837 B280                    		mov	dl, 80h		; start	with hardfile 80h
 10383                                  domini_loop:
 10384                                  		; 18/12/2023 - Retro DOS v5.0
 10385 00002839 31C0                    		xor	ax, ax ; 0
 10386                                  		; ds = cs
 10387                                  		;mov	[cs:ep_start_sector], ax
 10388                                  		;mov	[cs:ep_start_sector+2], ax
 10389                                  		;mov	[cs:ep_hidden_secs], ax
 10390                                  		;mov	[cs:ep_hidden_secs+2], ax
 10391 0000283B A3[8723]                		mov	[ep_start_sector], ax
 10392 0000283E A3[8923]                		mov	[ep_start_sector+2], ax
 10393 00002841 A3[8B23]                		mov	[ep_hidden_secs], ax
 10394 00002844 A3[8D23]                		mov	[ep_hidden_secs+2], ax
 10395                                  		;
 10396 00002847 52                      		push	dx
 10397 00002848 8816[5C1A]              		mov	[rom_minidisk_num], dl
 10398 0000284C B408                    		mov	ah, 8
 10399 0000284E CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
 10400                                  					; DL = drive number
 10401                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
 10402                                  					; DL = number of consecutive drives
 10403                                  					; DH = maximum value for head number, ES:DI -> drive parameter
 10404                                  		
 10405                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 10406                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:2B36h
 10407                                  		;inc	dh
 10408                                  		;xor	ax, ax
 10409                                  		;mov	al, dh
 10410 00002850 31C0                    		xor	ax, ax
 10411 00002852 88F0                    		mov	al, dh	; <= 255
 10412 00002854 40                      		inc	ax	; (0FFh -> 100h)
 10413 00002855 A3[621A]                		mov	[mini_hdlim], ax ; # of heads
 10414                                  		;and	cl, 3Fh
 10415                                  		;mov	al, cl
 10416                                  		; 08/08/2023
 10417 00002858 88C8                    		mov	al, cl
 10418 0000285A 83E03F                  		and	ax, 3Fh
 10419 0000285D A3[641A]                		mov	[mini_seclim], ax ; # of sectors/track
 10420                                  		
 10421                                  		; 18/12/2023
 10422                                  		;push	es ; * ; not necessary
 10423 00002860 8A16[5C1A]              		mov	dl, [rom_minidisk_num]
 10424 00002864 E868FA                  		call	getboot		; read master boot record into
 10425                                  					; initbootsegment:bootbias
 10426 00002867 7203                    		jc	short domininext
 10427 00002869 E80800                  		call	find_mini_partition
 10428                                  domininext:
 10429                                  		;pop	es ; *
 10430 0000286C 5A                      		pop	dx
 10431 0000286D FEC2                    		inc	dl		; next hard file
 10432 0000286F FECE                    		dec	dh
 10433 00002871 75C6                    		jnz	short domini_loop
 10434                                  dominiret:
 10435 00002873 C3                      		retn
 10436                                  
 10437                                  ; =============== S U B	R O U T	I N E =======================================
 10438                                  
 10439                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
 10440                                  ; 30/12/2018 - Retro DOS v4.0
 10441                                  
 10442                                  ;find_mini_partition tries to find every extended partition on a disk.
 10443                                  ;at entry:	di -> bdsm entry
 10444                                  ;		es:bx -> 07c0:bootbias - master boot record
 10445                                  ;		rom_minidisk_num - rom drive number
 10446                                  ;		drvmax - logical drive number
 10447                                  ;		mini_hdlim, mini_seclim
 10448                                  ;
 10449                                  ;called routine: setmini which uses set2 (in sethard routine)
 10450                                  ;variables & equates used from original bios - flags, fnon_removable, fbigfat
 10451                                  
 10452                                  		; 19/12/2023 - Retro DOS v5.0 
 10453                                  		;	(Modified PCDOS 7.1 IBMBIO.COM)
 10454                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSADATA:2BFCh)
 10455                                  
 10456                                  find_mini_partition:	
 10457 00002874 81C3C201                		add	bx, 1C2h	; bx ->	file system id
 10458                                  
 10459                                  		; 19/12/2023
 10460                                  		; PCDOS 7.1 IBMBIO.COM
 10461                                  		;mov	word [ld_p_number], 26
 10462                                  fmpnext:
 10463                                  		;add	word [ld_p_number], 16
 10464                                  		;cmp	word [ld_p_number], 4122
 10465                                  		;		; 64 logical disk partitions (64 EBRs)
 10466                                  		;		; (64*4 = 256 pte's, 256*16 = 4096, + 26 = 4122)
 10467                                  		;jg	short fmpnextfound
 10468                                  				
 10469 00002878 26803F05                		cmp	byte [es:bx], 5 ; 05h = extended partition id.
 10470 0000287C 7410                    		je	short fmpgot ; Extended DOS CHS
 10471                                  		
 10472                                  		; 19/12/2023 - Retro DOS v5.0
 10473 0000287E 26803F0F                		cmp     byte [es:bx], 0Fh ; Extended DOS LBA
 10474 00002882 740A                    		je	short fmpgot
 10475                                  
 10476 00002884 83C310                  		add	bx, 16
 10477 00002887 81FB0204                		cmp	bx, 402h	; 202h+bootbias
 10478 0000288B 75EB                    		jne	short fmpnext
 10479                                  		;jmp	short fmpnextfound ; extended partition	not found
 10480                                  		; 18/12/2022
 10481                                  fmpnextfound:
 10482 0000288D C3                      		retn
 10483                                  
 10484                                  ;		; 30/07/2019 - Retro DOS v3.2
 10485                                  ;		jb	short fmpnext
 10486                                  ;fmpret:
 10487                                  ;		retn	; 29/05/2019
 10488                                  
 10489                                  ; ---------------------------------------------------------------------------
 10490                                  
 10491                                  		; 19/10/2022
 10492                                  fmpgot:					; found my partition.
 10493 0000288E E82B01                  		call	dmax_check	; check	for drvmax already 26
 10494 00002891 73FA                    		jnb	short fmpnextfound ; done if too many
 10495                                  
 10496 00002893 8B3E[601A]              		mov	di, [end_of_bdss] ; get next free bds
 10497                                  
 10498                                  		; 19/12/2023
 10499                                  		;mov	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
 10500                                  		;; 10/12/2022
 10501                                  		;or	byte [di+23h], 1
 10502                                  		;;or	word [di+23h], 1 ; [di+BDS.flags]
 10503                                  		;			; fNon_Removable
 10504                                  		;mov	byte [di+22h], 5 ; [di+BDS.formfactor]
 10505                                  		;			; ffHardFile
 10506                                  		; 19/12/2023 - Retro DOS v5.0
 10507 00002897 C745790100              		mov	word [di+79h], 1 ; [di+BDS.bdsm_ismini]
 10508 0000289C 804D3F01                		or	byte [di+3Fh], 1 ; [di+BDS.flags], fNon_Removable
 10509 000028A0 C6453E05                		mov	byte [di+3Eh], 5 ; [di+BDS.formfactor], ffHardFile 
 10510                                  
 10511 000028A4 C606[061A]00            		mov	byte [fbigfat], 0 ; assume 12 bit fat.
 10512 000028A9 A1[621A]                		mov	ax, [mini_hdlim]
 10513 000028AC 894515                  		mov	[di+15h], ax	; [di+BDS.heads]
 10514 000028AF A1[641A]                		mov	ax, [mini_seclim]
 10515 000028B2 894513                  		mov	[di+13h], ax	; [di+BDS.secpertrack]
 10516 000028B5 A0[5C1A]                		mov	al, [rom_minidisk_num]
 10517 000028B8 884504                  		mov	[di+4],	al	; [di+BDS.drivenum]
 10518                                  					; set physical number
 10519 000028BB A0[7500]                		mov	al, [drvmax]
 10520 000028BE 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
 10521                                  					; set logical number
 10522 000028C1 26837F0A00              		cmp	word [es:bx+10], 0
 10523                                  		;ja	short fmpgot_cont
 10524 000028C6 7707                    		ja	short fmpgot1	; 19/12/2023
 10525 000028C8 26837F0840              		cmp	word [es:bx+8], 64 ; with current bpb,
 10526                                  					; only lower word is meaningful.
 10527 000028CD 72BE                    		jb	short fmpnextfound
 10528                                  					; should be bigger than 64 sectors at least
 10529                                  fmpgot1:	; 19/12/2023
 10530                                  ;fmpgot_cont:				
 10531 000028CF 83EB04                  		sub	bx, 4		; let bx point to the start of the entry
 10532 000028D2 268A7702                		mov	dh, [es:bx+2]	; cylinder
 10533 000028D6 80E6C0                  		and	dh, 0C0h	; get higher bits of cyl
 10534 000028D9 D0C6                    		rol	dh, 1
 10535 000028DB D0C6                    		rol	dh, 1
 10536 000028DD 268A5703                		mov	dl, [es:bx+3]	; cyl byte
 10537                                  		; 19/12/2023 - Retro DOS v5.0
 10538 000028E1 89557B                  		mov	[di+7Bh], dx	; [di+BDS.bdsm_hidden_trks]
 10539                                  		;mov	[di+49h], dx	; [di+BDS.bdsm_hidden_trks]
 10540                                  					; set hidden trks
 10541                                  		; 19/12/2023
 10542                                  		;push	bx ; * ; PCDOS 7.1	
 10543                                  		;;;
 10544 000028E4 268B4F08                		mov	cx, [es:bx+8]	; partition size, lw
 10545 000028E8 268B470A                		mov	ax, [es:bx+10]	; partition size, hw
 10546 000028EC 030E[8723]              		add	cx, [ep_start_sector]
 10547 000028F0 1306[8923]              		adc	ax, [ep_start_sector+2]
 10548 000028F4 31D2                    		xor	dx, dx ; 19/12/2023
 10549 000028F6 3916[8723]              		cmp	[ep_start_sector], dx ; 0
 10550                                  		;cmp	word [ep_start_sector], 0
 10551 000028FA 750D                    		jnz	short fmpgot2
 10552 000028FC 3916[8923]              		cmp	[ep_start_sector+2], dx ; 0
 10553                                  		;cmp	word [ep_start_sector+2], 0
 10554 00002900 7507                    		jnz	short fmpgot2
 10555 00002902 890E[8723]              		mov	[ep_start_sector], cx
 10556 00002906 A3[8923]                		mov	[ep_start_sector+2], ax
 10557                                  fmpgot2:
 10558 00002909 890E[8B23]              		mov	[ep_hidden_secs], cx
 10559 0000290D A3[8D23]                		mov	[ep_hidden_secs+2], ax
 10560                                  		
 10561                                  		; convert start sector address to CHS
 10562                                  	
 10563                                  		; 19/12/2023
 10564                                  		; dx = 0
 10565                                  		;push	bx ; * ; not necessary
 10566                                  
 10567                                  		;mov	bx, [di+13h]	; [di+BDS.secpertrack]
 10568 00002910 8B7513                  		mov	si, [di+13h]	; [di+BDS.secpertrack]
 10569                                  		;xor	dx, dx  ; dx = 0
 10570                                  		;div	bx
 10571 00002913 F7F6                    		div	si
 10572 00002915 91                      		xchg	ax, cx
 10573                                  		;div	bx
 10574 00002916 F7F6                    		div	si
 10575 00002918 8B5D15                  		mov	bx, [di+15h]	; [di+BDS.heads]
 10576 0000291B 91                      		xchg	ax, cx
 10577 0000291C 31D2                    		xor	dx, dx
 10578                                  		;div	bx
 10579 0000291E F7F6                    		div	si
 10580 00002920 91                      		xchg	ax, cx
 10581                                  		;div	bx
 10582 00002921 F7F6                    		div	si
 10583                                  
 10584                                  		;pop	bx ; *
 10585                                  
 10586 00002923 09C9                    		or	cx, cx
 10587 00002925 7505                    		jnz	short fmpgot_lba_rd
 10588 00002927 3D0004                  		cmp	ax, 1024	; cylinder number < 1024, CHS read is proper
 10589 0000292A 7235                    		jb	short fmpgot_chs_rd
 10590                                  fmpgot_lba_rd:
 10591 0000292C 804D4004                		or	byte [di+40h], 4 ; set fLBArw flag ; LBA read/write ok/ready
 10592 00002930 8A16[5C1A]              		mov	dl, [rom_minidisk_num]
 10593 00002934 1E                      		push	ds
 10594                                  		; 19/12/2023
 10595                                  		;push	si ; ** ; not necessary 
 10596 00002935 31C0                    		xor	ax, ax		; push bp
 10597                                  				        ; mov bp, sp ; (*)
 10598 00002937 50                      		push	ax ; 0
 10599 00002938 50                      		push	ax ; 0
 10600 00002939 FF36[8D23]              		push	word [ep_hidden_secs+2]
 10601 0000293D FF36[8B23]              		push	word [ep_hidden_secs]
 10602 00002941 B80002                  		mov	ax, bootbias ; 200h	
 10603                                  		;mov	ax, 200h	; bootbias (buffer offset)
 10604 00002944 06                      		push	es		; buffer segment
 10605 00002945 50                      		push	ax
 10606 00002946 B80100                  		mov	ax, 1
 10607 00002949 50                      		push	ax		; read count
 10608 0000294A B81000                  		mov	ax, 10h		; DAP size = 16
 10609 0000294D 50                      		push	ax
 10610 0000294E 8CD0                    		mov	ax, ss
 10611 00002950 8ED8                    		mov	ds, ax
 10612 00002952 89E6                    		mov	si, sp		; ds:si = Disk Address Packet
 10613                                  		
 10614 00002954 B442                    		mov	ah, 42h		; LBA read
 10615 00002956 CD13                    		int	13h		; DISK - IBM/MS Extension
 10616                                  					; EXTENDED READ (DL - drive, DS:SI - disk address packet)
 10617                                  		; 19/12/2023	
 10618                                  		;pushf		; PCDOS 7.1 IBMBIO.COM BUG! Erdogan Tan - 08/08/2023
 10619                                  		;add	sp, 16
 10620                                  		;popf		; BUG!
 10621                                  					; mov sp, bp ; (*)
 10622                                  					; pop bp
 10623                                  		; 19/12/2023
 10624 00002958 9F                      		lahf		; load status flags into AH
 10625 00002959 83C410                  		add	sp, 16
 10626 0000295C 9E                      		sahf		; store AH into flags
 10627                                  		
 10628                                  		;pop	si ; ** ; 19/12/2023
 10629 0000295D 1F                      		pop	ds
 10630 0000295E 7317                    		jnc	short fmpgot3
 10631                                  fmpnotfound:	; 19/12/2023
 10632 00002960 C3                      		retn
 10633                                  		;jmp	short fmpgot3 
 10634                                  		;;;
 10635                                  
 10636                                  		; 19/12/2023
 10637                                  fmpgot_chs_rd:
 10638 00002961 268B4F02                		mov	cx, [es:bx+2]	; cylinder,cylinder/sector
 10639 00002965 268A7701                		mov	dh, [es:bx+1]	; head
 10640 00002969 8A16[5C1A]              		mov	dl, [rom_minidisk_num]
 10641 0000296D BB0002                  		mov	bx, 200h	; bootbias
 10642 00002970 B80102                  		mov	ax, 201h
 10643 00002973 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
 10644                                  					; AL = number of sectors to read, CH = track, CL = sector
 10645                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
 10646                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
 10647                                  ;fmpgot3:	; 19/12/2023
 10648                                  		;jc	short fmpnextfound
 10649 00002975 72E9                    		jc	short fmpnotfound
 10650                                  fmpgot3:	
 10651 00002977 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
 10652                                  
 10653                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 10654                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:2C7Ch
 10655 0000297A 26817F3C55AA            		cmp	word [es:bx+3Ch], 0AA55h ; 03C2h+03Ch = 3FEh
 10656                                  		;jne	short fmpnextfound ; not a valid boot sector !
 10657                                  		; 19/12/2023
 10658 00002980 75DE                    		jne	short fmpnotfound ; not a valid boot sector !
 10659                                  
 10660                                  		; 13/08/2023
 10661                                  		;push	es
 10662 00002982 E80800                  		call	setmini		; install a mini disk.
 10663                                  					; bx value saved.
 10664                                  		;pop	es  ; 13/08/2023
 10665 00002985 7203                    		jc	short fmpnextchain
 10666 00002987 E84700                  		call	xinstall_bds	; -- install the bdsm into table
 10667                                  fmpnextchain:
 10668 0000298A E9EBFE                  		jmp	fmpnext		; let's find out
 10669                                  					; if we	have any chained partition
 10670                                  ; ---------------------------------------------------------------------------
 10671                                  
 10672                                  		; 18/12/2022
 10673                                  ;fmpnextfound:
 10674                                  		;retn
 10675                                  
 10676                                  ; =============== S U B	R O U T	I N E =======================================
 10677                                  
 10678                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 10679                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
 10680                                  
 10681                                  ; 19/12/2022 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 10682                                  ; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2C92h)
 10683                                  
 10684                                  setmini:	; 'setmini' is called from 'find_mini_partition' procedure
 10685                                  	
 10686 0000298D 57                      		push	di
 10687 0000298E 53                      		push	bx
 10688                                  		; 12/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 10689                                  		; ds = cs = BIOSDATA segment
 10690                                  		;push	ds
 10691 0000298F 06                      		push	es
 10692                                  setmini_1:
 10693                                  		;cmp	byte [es:bx], 1 ; FAT12 partition
 10694                                  		;je	short setmini_2
 10695                                  		;cmp	byte [es:bx], 4 ; FAT16 (CHS) partition
 10696                                  		;je	short setmini_2
 10697                                  		;cmp	byte [es:bx], 6 ; FAT16 BIG (CHS) partition
 10698                                  		;je	short setmini_2
 10699                                  		;
 10700                                  		; 19/12/2023 - Retro DOS v5.0
 10701                                  		;cmp	byte [es:bx], 0Bh ; FAT32 (CHS) partition
 10702                                  		;je	short setmini_2
 10703                                  		;cmp	byte [es:bx], 0Ch ; FAT32 (LBA) partition
 10704                                  		;je	short setmini_2
 10705                                  		;cmp	byte [es:bx], 0Eh ; FAT16 (LBA) partition
 10706                                  		;je	short setmini_2
 10707                                  
 10708                                  		; 19/12/2023
 10709 00002990 268A07                  		mov 	al, [es:bx]
 10710 00002993 3C01                    		cmp	al, 1 		; FAT12 partition
 10711 00002995 7422                    		je	short setmini_2
 10712 00002997 3C04                    		cmp	al, 4 		; FAT16 (CHS) partition
 10713 00002999 741E                    		je	short setmini_2
 10714 0000299B 3C06                    		cmp	al, 6 		; FAT16 BIG (CHS) partition
 10715 0000299D 741A                    		je	short setmini_2
 10716 0000299F 3C0B                    		cmp	al, 0Bh 	; FAT32 (CHS) partition
 10717 000029A1 7416                    		je	short setmini_2
 10718 000029A3 3C0C                    		cmp	al, 0Ch 	; FAT32 (LBA) partition
 10719 000029A5 7412                    		je	short setmini_2
 10720 000029A7 3C0E                    		cmp	al, 0Eh 	; FAT16 (LBA) partition
 10721 000029A9 740E                    		je	short setmini_2
 10722                                  
 10723 000029AB 83C310                  		add	bx, 16
 10724 000029AE 81FB0204                		cmp	bx, 402h	; 202h+bootbias
 10725                                  		;jne	short setmini_1
 10726 000029B2 72DC                    		jb	short setmini_1 ; 19/12/2023
 10727 000029B4 F9                      		stc
 10728 000029B5 07                      		pop	es
 10729                                  		; 12/08/2023
 10730                                  		;pop	ds
 10731 000029B6 5B                      		pop	bx
 10732 000029B7 5F                      		pop	di
 10733 000029B8 C3                      		retn
 10734                                  
 10735                                  ; ---------------------------------------------------------------------------
 10736                                  setmini_2:
 10737 000029B9 E9D3F9                  		jmp	set2		; branch into middle of sethard
 10738                                  
 10739                                  ; =============== S U B	R O U T	I N E =======================================
 10740                                  
 10741                                  ; 30/12/2022 - Retro DOS v4.2
 10742                                  ; (SYSINITSEG is 473h for MSDOS 6.21 IO.SYS)
 10743                                  
 10744                                  ; 15/10/2022
 10745                                  ; 28/12/2018 - Retro DOS v4.0
 10746                                  ;
 10747                                  ; dmax_check -- call this when we want to install a new drive.
 10748                                  ;		it checks for drvmax < 26 to see if there is
 10749                                  ;		a drive letter left.
 10750                                  ;
 10751                                  ;	drvmax < 26 : carry SET!
 10752                                  ;	drvmax >=26 : carry RESET!, error flag set for message later
 10753                                  ;			trash ax
 10754                                  
 10755                                  		; 19/12/2023 - Retro DOS v5.0
 10756                                  dmax_check:
 10757 000029BC 803E[7500]1A            		cmp	byte [drvmax], 26 ; checks for drvmax < 26
 10758 000029C1 720D                    		jb	short dmax_ok	; return with carry if okay
 10759 000029C3 06                      		push	es
 10760                                  		;;mov	ax, 46Dh	; SYSINIT_SEG (SYSINIT segment)
 10761                                  		;mov	ax, 544h	; 19/12/2023 (PCDOS 7.1)
 10762 000029C4 B80405                  		mov	ax, SYSINITSEG	; 17/10/2022	
 10763 000029C7 8EC0                    		mov	es, ax
 10764                                  		; 18/10/2022
 10765 000029C9 26C606[8803]01          		mov	byte [es:TOOMANYDRIVESFLAG], 1 ; 09/12/2022 
 10766                                  		;mov	byte ptr es:3FFh, 1 ; [es:toomanydrivesflag]
 10767                                  					; set message flag
 10768                                  					; [SYSINIT+toomanydrivesflag]
 10769 000029CF 07                      		pop	es
 10770                                  
 10771                                  		;;push	es
 10772                                  		;;mov	ax,SYSINIT_SEG
 10773                                  		;;mov	es,ax
 10774                                  		;;mov	byte [es:toomanydrivesflag],1
 10775                                  					; set message flag
 10776                                  		;;pop	es
 10777                                  		;
 10778                                  		;mov	byte [SYSINIT+toomanydrivesflag],1
 10779                                  dmax_ok:
 10780 000029D0 C3                      		retn
 10781                                  
 10782                                  ; =============== S U B	R O U T	I N E =======================================
 10783                                  
 10784                                  ; 18/10/2022
 10785                                  ; 15/10/2022
 10786                                  ; 28/12/2018 - Retro DOS v4.0
 10787                                  ;
 10788                                  ;	link next bds (at ds:di) into the chain. assume that the
 10789                                  ;	  chain is entirely within ds == datagrp. also update drvmax,
 10790                                  ;	  dskdrv_table, and end_of_bdss.	
 10791                                  
 10792                                  		; 19/12/2023 - Retro DOS v5.0
 10793                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2CE1h)
 10794                                  xinstall_bds:
 10795 000029D1 56                      		push	si
 10796 000029D2 53                      		push	bx
 10797 000029D3 8B36[1901]              		mov	si, [start_bds]	; get first bds
 10798                                  xinstall_bds_1:
 10799 000029D7 833CFF                  		cmp	word [si], 0FFFFh ; is this the last one?
 10800 000029DA 7404                    		jz	short xinstall_bds_2 ;	skip ahead if so
 10801                                  		;mov	si, [si+BDS.link]
 10802 000029DC 8B34                    		mov	si, [si]	; chain	through	list
 10803 000029DE EBF7                    		jmp	short xinstall_bds_1
 10804                                  
 10805                                  xinstall_bds_2:
 10806                                  		;mov	[si+BDS.link], di
 10807 000029E0 893C                    		mov	[si], di
 10808                                  		;mov	[si+BDS.link+2], ds
 10809 000029E2 8C5C02                  		mov	[si+2], ds
 10810                                  		;mov	word [di+BDS.link], -1
 10811 000029E5 C705FFFF                		mov	word [di], 0FFFFh ; make sure it is a null ptr.
 10812                                  		;mov	[di+BDS.link+2], ds
 10813 000029E9 8C5D02                  		mov	[di+2], ds ; might as well plug segment
 10814                                  		; 20/03/2019 - Retro DOS v4.0
 10815                                  		;lea	bx, [di+BDS.BPB]
 10816 000029EC 8D5D06                  		lea	bx, [di+6]
 10817 000029EF 8B36[5E1A]              		mov	si, [last_dskdrv_table]
 10818 000029F3 891C                    		mov	[si], bx
 10819 000029F5 8306[5E1A]02            		add	word [last_dskdrv_table], 2
 10820 000029FA FE06[7500]              		inc	byte [drvmax]
 10821                                  		;add	word [end_of_bdss], 100 ; BDS.size = 100
 10822                                  		; 19/12/2023 - Retro DOS v5.0
 10823 000029FE 8106[601A]9600          		add	word [end_of_bdss], 150 ; BDS.size = 150
 10824 00002A04 5B                      		pop	bx
 10825 00002A05 5E                      		pop	si
 10826 00002A06 C3                      		retn
 10827                                  
 10828                                  ; =============== S U B	R O U T	I N E =======================================
 10829                                  
 10830                                  ; 17/10/2022
 10831                                  ; 15/10/2022
 10832                                  ; 28/12/2018 - Retro DOS v4.0
 10833                                  ; 03/06/2018 - Retro DOS v3.0
 10834                                  
 10835                                  		; 19/12/2023 - Retro DOS v5.0
 10836                                  cmos_clock_read:
 10837 00002A07 50                      		push	ax
 10838 00002A08 51                      		push	cx
 10839 00002A09 52                      		push	dx
 10840 00002A0A 55                      		push	bp
 10841 00002A0B 31ED                    		xor	bp, bp
 10842                                  loop_clock:
 10843 00002A0D 31C9                    		xor	cx, cx
 10844 00002A0F 31D2                    		xor	dx, dx
 10845 00002A11 B402                    		mov	ah, 2
 10846 00002A13 CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
 10847                                  					; Return: CH = hours in	BCD
 10848                                  					; CL = minutes in BCD
 10849                                  					; DH = seconds in BCD
 10850                                  		; 19/12/2023
 10851                                  		;cmp	cx, 0
 10852 00002A15 21C9                    		and	cx, cx
 10853 00002A17 750F                    		jnz	short clock_present
 10854                                  		;cmp	dx, 0
 10855 00002A19 09D2                    		or	dx, dx
 10856 00002A1B 750B                    		jnz	short clock_present
 10857                                  		;cmp	bp, 1		; read again after a slight delay, in case clock
 10858                                  		;je	short no_readdate ; was	at zero	setting.
 10859 00002A1D 21ED                    		and	bp, bp
 10860 00002A1F 751A                    		jnz	short no_readdate
 10861 00002A21 45                      		inc	bp		; only perform delay once.
 10862                                  		;mov	cx, 4000h	; 16384
 10863                                  		; 19/12/2023
 10864 00002A22 B540                    		mov	ch, 40h ; cx = 4000h ; 16384
 10865                                  delay:					
 10866 00002A24 E2FE                    		loop	delay
 10867 00002A26 EBE5                    		jmp	short loop_clock
 10868                                  ; ---------------------------------------------------------------------------
 10869                                  
 10870                                  clock_present:
 10871                                  		;mov	byte [cs:havecmosclock], 1 ; set the flag for cmos clock
 10872                                  		; 19/12/2023
 10873                                  		; ds = cs
 10874 00002A28 C606[8C04]01            		mov	byte [havecmosclock], 1 ; set the flag for cmos clock
 10875                                  		
 10876 00002A2D E81000                  		call	cmosck		; reset	cmos clock rate	that may be
 10877                                  					; possibly destroyed by	cp dos and
 10878                                  					; post routine did not restore that.
 10879 00002A30 56                      		push	si
 10880 00002A31 E837EE                  		call	read_real_date	; read real-time clock for date
 10881 00002A34 FA                      		cli
 10882                                  		;mov	ds:daycnt, si	; set system date
 10883 00002A35 8936[8904]              		mov	[daycnt], si
 10884 00002A39 FB                      		sti
 10885 00002A3A 5E                      		pop	si
 10886                                  no_readdate:
 10887 00002A3B 5D                      		pop	bp
 10888 00002A3C 5A                      		pop	dx
 10889 00002A3D 59                      		pop	cx
 10890 00002A3E 58                      		pop	ax
 10891                                  cmosck9:	; 19/12/2023
 10892 00002A3F C3                      		retn
 10893                                  
 10894                                  ; ---------------------------------------------------------------------------
 10895                                  
 10896                                  ; the following code is written by jack gulley in engineering group.
 10897                                  ; cp dos (CP/DOS, OS/2) is changing cmos clock rate for its own purposes
 10898                                  ; and if the use cold boot the system to use pc dos while running cp dos,
 10899                                  ; the cmos clock rate are still slow which slow down disk operations
 10900                                  ; of pc dos which uses cmos clock. pc dos is put this code in msinit
 10901                                  ; to fix this problem at the request of cp dos.
 10902                                  ;
 10903                                  ; the program is modified to be run on msinit. equates are defined
 10904                                  ; in cmosequ.inc. this program will be called by cmos_clock_read procedure.
 10905                                  ;
 10906                                  ;  the following code cmosck is used to insure that the cmos has not
 10907                                  ;	had its rate controls left in an invalid state on older at's.
 10908                                  ;
 10909                                  ;	it checks for an at model byte "fc" with a submodel type of
 10910                                  ;	00, 01, 02, 03 or 06 and resets the periodic interrupt rate
 10911                                  ;	bits in case post has not done it. this initialization routine
 10912                                  ;	is only needed once when dos loads. it should be run as soon
 10913                                  ;	as possible to prevent slow diskette access.
 10914                                  ;
 10915                                  ;	this code exposes one to dos clearing cmos setup done by a
 10916                                  ;	resident program that hides and re-boots the system.
 10917                                  
 10918                                  cmosck:					; check and reset rtc rate bits
 10919                                  
 10920                                  ;model byte and submodel byte were already determined in msinit.
 10921                                  
 10922                                  	; 16/06/2018 - Retro DOS v3.0
 10923                                  	; 19/03/2018 (Model: 0FCh, Sub Model: 01h, REF: AMIBIOS Prog. Guide)
 10924                                  
 10925                                  	; 19/12/2023 - Retro DOS v5.0
 10926                                  	
 10927                                  		; 19/12/2023
 10928                                  		; ds = cs
 10929                                  		;push	ax ; not necessary ; 19/12/2023
 10930                                  		;
 10931 00002A40 803E[AF05]FC            		cmp	byte [model_byte], 0FCh
 10932                                  		;cmp	byte [cs:model_byte], 0FCh
 10933 00002A45 75F8                    		jnz	short cmosck9	; Exit if not an AT model
 10934 00002A47 2E803E[B005]06          		cmp	byte [cs:secondary_model_byte], 6
 10935                                  		;cmp	byte [cs:secondary_model_byte], 6
 10936                                  					; Is it 06 for the industral AT ?
 10937 00002A4D 7407                    		jz	short cmosck4	; Go reset CMOS periodic rate if 06
 10938 00002A4F 803E[B005]04            		cmp	byte [secondary_model_byte], 4
 10939                                  		;cmp	byte [cs:secondary_model_byte], 4
 10940                                  					; Is it 00, 01, 02, or 03 ?
 10941 00002A54 73E9                    		jnb	short cmosck9	; EXIT if problem fixed by POST
 10942                                  					; Also,Secondary_model_byte = 0
 10943                                  					;   when AH=0C0h, int 15h failed.
 10944                                  					;	RESET THE CMOS PERIODIC RATE
 10945                                  					;  Model=FC submodel=00,01,02,03 or 06
 10946                                  cmosck4:
 10947 00002A56 B08A                    		mov	al, 8Ah		; cmos_reg_a|nmi
 10948                                  					; NMI disabled on return
 10949 00002A58 B426                    		mov	ah, 26h		; 00100110b
 10950                                  					; Set divider & rate selection
 10951 00002A5A E80B00                  		call	cmos_write
 10952 00002A5D B08B                    		mov	al, 8Bh		; cmos_reg_b|nmi
 10953                                  					; NMI disabled on return
 10954 00002A5F E82000                  		call	cmos_read
 10955 00002A62 2407                    		and	al, 7		; 00000111b
 10956                                  					; clear SET,PIE,AIE,UIE,SQWE
 10957 00002A64 88C4                    		mov	ah, al
 10958 00002A66 B00B                    		mov	al, 0Bh		; cmos_reg_b
 10959                                  					; NMI enabled on return
 10960                                  		; 19/12/2023
 10961                                  		;call	cmos_write
 10962                                  ;cmosck9:
 10963                                  		;pop	ax ; 19/12/2023
 10964                                  		;retn
 10965                                  
 10966                                  		; 19/12/2023
 10967                                  		;jmp	short cmos_write
 10968                                  
 10969                                  ; =============== S U B	R O U T	I N E =======================================
 10970                                  
 10971                                  ;--- cmos_write ----------------------------------------------------------------
 10972                                  ;		write byte to cmos system clock configuration table	       :
 10973                                  ;									       :
 10974                                  ; input: (al)=	cmos table address to be written to			       :
 10975                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
 10976                                  ;		bits 6-0 = address of table location to write		       :
 10977                                  ;	 (ah)=	new value to be placed in the addressed table location	       :
 10978                                  ;									       :
 10979                                  ; output:	value in (ah) placed in location (al) with nmi left disabled   :
 10980                                  ;		if bit 7 of (al) is on. during the cmos update both nmi and    :
 10981                                  ;		normal interrupts are disabled to protect cmos data integrity. :
 10982                                  ;		the cmos address register is pointed to a default value and    :
 10983                                  ;		the interrupt flag restored to the entry state on return.      :
 10984                                  ;		only the cmos location and the nmi state is changed.	       :
 10985                                  ;-------------------------------------------------------------------------------
 10986                                  
 10987                                  cmos_write:				; write (ah) to location (al)
 10988 00002A68 9C                      		pushf			;
 10989 00002A69 50                      		push	ax		; save work register values
 10990 00002A6A FA                      		cli
 10991 00002A6B 50                      		push	ax		; save user nmi	state
 10992 00002A6C 0C80                    		or	al, 80h		; disable nmi for us
 10993 00002A6E E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
 10994                                  					; RTC Seconds
 10995 00002A70 90                      		nop
 10996 00002A71 88E0                    		mov	al, ah
 10997 00002A73 E671                    		out	71h, al		; CMOS Memory/RTC Data Register
 10998 00002A75 58                      		pop	ax		; get user nmi
 10999 00002A76 2480                    		and	al, 80h
 11000 00002A78 0C0F                    		or	al, 0Fh
 11001 00002A7A E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
 11002                                  					; RTC Seconds
 11003 00002A7C 90                      		nop
 11004 00002A7D E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
 11005 00002A7F 58                      		pop	ax		; restore work registers
 11006                                  
 11007                                  		; 19/12/2023
 11008                                  		;push	cs		; *place code segment in stack and
 11009                                  		;call	cmos_popf	; *handle popf for b- level 80286
 11010                                  		;retn
 11011 00002A80 EB18                    		jmp	short cmos_rw_popf
 11012                                  
 11013                                  ; =============== S U B	R O U T	I N E =======================================
 11014                                  
 11015                                  ;--- CMOS_READ -----------------------------------------------------------------
 11016                                  ;		read byte from cmos system clock configuration table	       :
 11017                                  ;									       :
 11018                                  ; input: (al)=	cmos table address to be read				       :
 11019                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
 11020                                  ;		bits 6-0 = address of table location to read		       :
 11021                                  ;									       :
 11022                                  ; output: (al)	value at location (al) moved into (al). if bit 7 of (al) was   :
 11023                                  ;		on then nmi left disabled. during the cmos read both nmi and   :
 11024                                  ;		normal interrupts are disabled to protect cmos data integrity. :
 11025                                  ;		the cmos address register is pointed to a default value and    :
 11026                                  ;		the interrupt flag restored to the entry state on return.      :
 11027                                  ;		only the (al) register and the nmi state is changed.	       :
 11028                                  ;-------------------------------------------------------------------------------
 11029                                  
 11030                                  cmos_read:				; read location (al) into (al)
 11031 00002A82 9C                      		pushf
 11032 00002A83 FA                      		cli
 11033 00002A84 53                      		push	bx
 11034                                  		;push	ax ; *		; AL = cmos table address to be read
 11035                                  		; 19/12/2023
 11036 00002A85 89C3                    		mov	bx, ax ; * ; input
 11037 00002A87 0C80                    		or	al, 80h
 11038 00002A89 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
 11039                                  					; RTC Seconds
 11040 00002A8B 90                      		nop			; (undocumented delay needed)
 11041 00002A8C E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
 11042                                  		
 11043                                  		;mov	bx, ax ; output
 11044                                  		;pop	ax ; * ; input
 11045                                  
 11046                                  		; 19/12/2023
 11047                                  		; al = output, bl = input
 11048 00002A8E 93                      		xchg	ax, bx ; *
 11049                                  		; bl = output, al = input
 11050                                  	
 11051 00002A8F 2480                    		and	al, 80h
 11052 00002A91 0C0F                    		or	al, 0Fh
 11053 00002A93 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
 11054                                  					; RTC Seconds
 11055 00002A95 90                      		nop
 11056 00002A96 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
 11057                                  		;mov	ax, bx ; * ; output
 11058                                  		; 19/12/2023
 11059 00002A98 93                      		xchg	ax, bx
 11060 00002A99 5B                      		pop	bx
 11061                                  
 11062                                  		; 19/12/2023
 11063                                  cmos_rw_popf:
 11064 00002A9A 0E                      		push	cs		; *place code segment in stack and
 11065 00002A9B E80100                  		call	cmos_popf	; *handle popf for b- level 80286
 11066 00002A9E C3                      		retn			; return with flags restored
 11067                                  
 11068                                  ; ---------------------------------------------------------------------------
 11069                                  
 11070                                  cmos_popf:				
 11071 00002A9F CF                      		iret			; popf for level b- parts
 11072                                  					; return far and restore flags
 11073                                  
 11074                                  ; ---------------------------------------------------------------------------
 11075                                  ; MSINIT.ASM (MSDOS 6.0, 1991)
 11076                                  ; ---------------------------------------------------------------------------
 11077                                  ; The following routines provide support for reading in the file MSDOS.SYS.
 11078                                  ; ---------------------------------------------------------------------------
 11079                                  
 11080                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11081                                  ;
 11082                                  ; (For Retro DOS, 'IO.SYS' and 'MSDOS.SYS' are already loaded together
 11083                                  ;  at once -as single kernel file- by the Retro DOS boot sector code.
 11084                                  ;  So, following disk reads -MSDOS.SYS loading- is not needed!
 11085                                  ;  Only needing is to move MSDOS Kernel to it's final memory location.)
 11086                                  
 11087                                  ; 20/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 11088                                  ; --------------------------------------------------------------------------- 
 11089                                  
 11090                                  ;ClusterH:	dw 0  ; 20/12/2023
 11091                                  
 11092                                  ; =============== S U B	R O U T	I N E =======================================
 11093                                  
 11094                                  ; GetClus, read in a cluster at a specified address
 11095                                  ;
 11096                                  ;  bx = cluster to read
 11097                                  ;  cx = sectors per cluster
 11098                                  ;  es:di = load location
 11099                                  
 11100                                  ; 17/10/2022
 11101                                  ;DISKRD equ diskrd - DOSBIOSEG_2C7h	; (8E5h for MSDOS 5.0 IO.SYS)
 11102                                  ; 09/12/2022
 11103                                  DISKRD equ diskrd
 11104                                  
 11105                                  		; 29/12/2023
 11106                                  		; 20/12/2023 - Retro DOS v5.0
 11107                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2DC4h)
 11108                                  
 11109                                  		; si:bx = (32 bit) cluster to read
 11110                                  		; cx = sectors per cluster
 11111                                  		; es:di = load location
 11112                                  
 11113                                  ; 06/04/2024
 11114                                  %if 1
 11115                                  
 11116                                  		; 17/10/2022
 11117                                  getclus:
 11118                                  		; 12/12/2023
 11119                                  		; ds = cs
 11120                                  		
 11121 00002AA0 51                      		push	cx ; 1*
 11122 00002AA1 57                      		push	di ; 2*
 11123                                  		;mov	[cs:doscnt], cx
 11124 00002AA2 890E[001A]              		mov	[doscnt], cx ; 12/12/2023
 11125                                  
 11126                                  		; 20/12/2023
 11127                                  		;;mov	[cs:ClusterH], si ; high word of cluster number
 11128                                  		;mov	[ClusterH], si ; high word of cluster number
 11129 00002AA6 89F5                    		mov	bp, si
 11130                                  
 11131 00002AA8 89D8                    		mov	ax, bx
 11132                                  
 11133                                  		;dec	ax
 11134                                  		;dec	ax
 11135                                  		; 20/12/2023
 11136 00002AAA 83E802                  		sub	ax, 2
 11137                                  
 11138                                  		;;sbb	[cs:ClusterH], 0
 11139                                  		;sbb	[ClusterH], 0
 11140 00002AAD 83DD00                  		sbb	bp, 0		
 11141                                  
 11142                                  		; 20/12/2023
 11143                                  		;;xchg	ax, [cs:ClusterH]
 11144                                  		;xchg	ax, [ClusterH]
 11145 00002AB0 95                      		xchg	ax, bp
 11146                                  
 11147 00002AB1 F7E1                    		mul	cx
 11148                                  
 11149                                  		;;xchg	ax, [cs:ClusterH]
 11150                                  		;xchg	ax, [ClusterH]
 11151 00002AB3 95                      		xchg	ax, bp ; (+)
 11152                                  		;
 11153 00002AB4 F7E1                    		mul	cx		;; convert to logical sector
 11154                                  					;; dx:ax = matching logical sector number
 11155                                  					;;	  starting from the data sector
 11156                                  		;;add	ax, [cs:bios_l]
 11157                                  		;;adc	dx, [cs:bios_h]	; dx:ax	= first	logical	sector to read
 11158                                  		; 12/12/2023
 11159                                  		;add	ax, [bios_l]
 11160                                  		;adc	dx, [bios_h]	; dx:ax	= first	logical	sector to read
 11161                                  
 11162                                  		; 20/12/2023
 11163                                  		;;add	dx, [cs:ClusterH]
 11164                                  		;add	ax, [cs:First_Data_Sector]
 11165                                  		;adc	dx, [cs:First_Data_Sector+2]
 11166 00002AB6 01EA                    		add	dx, bp ; (+)
 11167                                  		;add	dx, [ClusterH]	; convert to logical sector
 11168                                  					; dx:ax	= matching logical sector number
 11169                                  					;	  starting from the data sector
 11170 00002AB8 0306[FC19]              		add	ax, [First_Data_Sector]
 11171 00002ABC 1316[FE19]              		adc	dx, [First_Data_Sector+2]
 11172                                  					; dx:ax = first logical sector to read
 11173                                  unpack:
 11174                                  		; 20/12/2023
 11175 00002AC0 1E                      		push	ds ; 3* ; ds = cs ; 12/12/2023
 11176 00002AC1 52                      		push	dx ; 4* ; * ; 12/12/2023
 11177 00002AC2 50                      		push	ax ; 5*
 11178                                  		; 29/12/2023
 11179 00002AC3 56                      		push	si ; 6* 
 11180 00002AC4 53                      		push	bx ; 7*
 11181                                  
 11182                                  		;;mov	si, [cs:fatloc]
 11183                                  		;mov	si, [fatloc] ; 12/12/2023
 11184                                  		;mov	ds, si
 11185                                  		; 20/12/2023
 11186                                  		;mov	ax, [fatloc]
 11187                                  		;mov	ds, ax
 11188 00002AC5 53                      		push	bx ; 8*
 11189 00002AC6 FF36[021A]              		push	word [fatloc] ; 9*
 11190                                  
 11191                                  		;test	byte [cs:fbigfat], 20h
 11192 00002ACA F606[061A]20            		test	byte [fbigfat], 20h	; fbigbig FAT32 ?
 11193 00002ACF 1F                      		pop	ds ; 9* ; ds = [fatloc]
 11194 00002AD0 7415                    		jz      short not_32bit_cluster ; no
 11195                                  unpack32:
 11196                                  		;push	dx
 11197 00002AD2 89F2                    		mov	dx, si
 11198                                  		;mov	si, bx
 11199 00002AD4 5E                      		pop	si ; 8* ; si = bx
 11200 00002AD5 01F6                    		add	si, si
 11201 00002AD7 11D2                    		adc	dx, dx
 11202 00002AD9 01F6                    		add	si, si
 11203 00002ADB 11D2                    		adc	dx, dx 
 11204                                  			; dx:si = 4*(si:bx) ; clust num offset from FAT entry 0
 11205 00002ADD E89600                  		call	get_fat_sector
 11206 00002AE0 8B7702                  		mov	si, [bx+2]	; high word of the FAT32 cluster number
 11207 00002AE3 8B1F                    		mov	bx, [bx]	; low word of the FAT32 cluster number
 11208                                  		;pop	dx
 11209 00002AE5 EB45                    		jmp	short getcl1
 11210                                  
 11211                                  not_32bit_cluster:
 11212                                  		;mov	si, bx		; next cluster
 11213 00002AE7 5E                      		pop	si ; 8* ; si = bx
 11214 00002AE8 2EF606[061A]40          		test	byte [cs:fbigfat], 40h	; fbig
 11215                                  					; 16 bit fat?
 11216 00002AEE 752F                    		jnz	short unpack16	; yes
 11217                                  unpack12:
 11218 00002AF0 D1EE                    		shr	si, 1		; 12 bit fat. si = si/2
 11219                                  					; si = clus + clus/2
 11220 00002AF2 01DE                    		add	si, bx		;
 11221                                  					; (si =	byte offset of the cluster in the FAT)
 11222                                  		;push	dx ; 12/12/2023
 11223 00002AF4 31D2                    		xor	dx, dx
 11224                                  		; 12/12/2023
 11225                                  		; ds = FAT buffer segment
 11226 00002AF6 E87D00                  		call	get_fat_sector
 11227                                  		;pop	dx ; 12/12/2023
 11228                                  
 11229 00002AF9 8B07                    		mov	ax, [bx]	; save it into ax
 11230 00002AFB 750C                    		jnz	short even_odd	; if not a splitted fat, check even-odd.
 11231                                  		; 25/06/2023
 11232                                  		;mov	al, [bx]	; splitted fat
 11233                                  		
 11234                                  		; 12/12/2023
 11235                                  		;mov	[cs:temp_cluster], al
 11236 00002AFD 50                      		push	ax ; **	; al = low 8 bits of 12 bits cluster number
 11237                                  
 11238 00002AFE 46                       		inc	si		; (next	byte)
 11239                                  
 11240                                  		;push	dx ; 12/12/2023
 11241 00002AFF 31D2                    		xor	dx, dx
 11242 00002B01 E87200                  		call	get_fat_sector
 11243                                  		;pop	dx ; 12/12/2023
 11244                                  
 11245                                  		;mov	al, ds:0
 11246                                  		; 12/12/2023
 11247                                  		; ds = FAT buffer segment
 11248                                  		;mov	al, [0] ; 19/10/2022
 11249                                  		;mov	[cs:temp_cluster+1], al
 11250                                  		;mov	ax, [cs:temp_cluster]
 11251                                  		; 12/12/2023
 11252                                  		;mov	al, [cs:temp_cluster]
 11253 00002B04 58                      		pop	ax  ; ** ; al = low 8 bits of 12 bits cluster number
 11254 00002B05 8A260000                		mov	ah, [0] ; high 4 bits (bits 7 to 11) of 12 bits cluster num
 11255                                  even_odd:
 11256                                  		; 29/12/2023
 11257 00002B09 5B                      		pop	bx ; 7*		; restore old fat entry	value
 11258 00002B0A 53                      		push	bx		; save it right	away.
 11259 00002B0B D1EB                    		shr	bx, 1		; was it even or odd?
 11260 00002B0D 7308                    		jnc	short havclus	; it was even.
 11261 00002B0F D1E8                    		shr	ax, 1		; odd. massage fat value and keep
 11262                                  					; the highest 12 bits.
 11263 00002B11 D1E8                    		shr	ax, 1
 11264 00002B13 D1E8                    		shr	ax, 1
 11265 00002B15 D1E8                    		shr	ax, 1
 11266                                  havclus:
 11267 00002B17 89C3                    		mov	bx, ax		; now bx = new fat entry.
 11268 00002B19 81E3FF0F                		and	bx, 0FFFh	; keep low 12 bits.
 11269 00002B1D EB0B                    		jmp	short unpackx
 11270                                  ; ---------------------------------------------------------------------------
 11271                                  
 11272                                  unpack16:
 11273                                  		;push	dx	; 12/12/2023
 11274 00002B1F 31D2                    		xor	dx, dx ; 0
 11275 00002B21 D1E6                    		shl	si, 1		; extend to 32 bit offset
 11276                                  		;adc	dx, 0
 11277                                  		; 12/12/2023
 11278 00002B23 D1D2                    		rcl	dx, 1
 11279                                  
 11280                                  		; 12/12/2023
 11281                                  		; ds = FAT buffer segment
 11282 00002B25 E84E00                  		call	get_fat_sector
 11283                                  		;pop	dx	; 12/12/2023
 11284 00002B28 8B1F                    		mov	bx, [bx]	;
 11285                                  					; bx = new fat entry.
 11286                                  unpackx:
 11287                                  		; 20/12/2023
 11288 00002B2A 31F6                    		xor	si, si		; high word of cluster number = 0
 11289                                  					; (FAT12 or FAT16)
 11290                                  getcl1:
 11291                                  		; 29/12/2023
 11292 00002B2C 58                      		pop	ax	; 7* - cluster number lw
 11293                                  		;pop	word [cs:ClusterH]
 11294 00002B2D 5A                      		pop	dx	; 6* - cluster number hw
 11295                                  
 11296                                  		; 20/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 11297                                  		; (this is a fast kernel loading method by the MSDOS programmer)
 11298                                  		; ((consequtive clusters --> consequtive sectors))
 11299                                  
 11300 00002B2E 29D8                    		sub	ax, bx	; previous - current (or current - new)	
 11301                                  		;sbb	[cs:ClusterH], si
 11302 00002B30 19F2                    		sbb	dx, si
 11303                                  		;;cmp	[cs:ClusterH], -1 ; one apart? (current = previous+1)
 11304                                  		;cmp	dx, -1
 11305                                  		; 29/12/2023
 11306 00002B32 42                      		inc	dx ; -1 -> 0
 11307 00002B33 7501                    		jnz	short not_consequental
 11308                                  		;cmp	ax, -1		; 0FFFFh ; is [ClusterH]:ax = -1 ?
 11309 00002B35 40                      		inc	ax ; -1 -> 0
 11310                                  not_consequental:
 11311 00002B36 58                      		pop	ax ; 5* 	; restore logical sector (low)
 11312 00002B37 5A                      		pop	dx ; 4* ; * ; 12/12/2023
 11313 00002B38 1F                      		pop	ds ; 3*
 11314                                  
 11315                                  		;; 12/12/2023
 11316                                  		;; (this is a fast kernel loading method by the MSDOS programmer)
 11317                                  		;; ((consequtive clusters --> consequtive sectors))
 11318                                  		;; ds = cs
 11319                                  		;sub	si, bx
 11320                                  		;cmp	si, -1		; one apart? (consequtive?)
 11321                                  		;			; (current = previous+1)
 11322                                  
 11323 00002B39 7507                    		jnz	short getcl2	; no, read [doscnt] sectors 
 11324                                  
 11325                                  		;add	[cs:doscnt], cx ; (cx = sectors per cluster)
 11326 00002B3B 010E[001A]              		add	[doscnt], cx ; 12/12/2023 ; add to read count
 11327 00002B3F E97EFF                  		jmp	unpack
 11328                                  ; ---------------------------------------------------------------------------
 11329                                  
 11330                                  getcl2:
 11331 00002B42 56                      		push	si ; 20/12/2023
 11332 00002B43 53                      		push	bx	
 11333                                  		; bx = low word of the new cluster number
 11334                                  		; 20/12/2023 - Retro DOS v5.0 (32 bit cluster numbers)
 11335                                  		; si = high word of the new cluster number
 11336 00002B44 52                      		push	dx		; sector to read (high word)
 11337 00002B45 50                      		push	ax		; sector to read (low word)
 11338                                  		
 11339                                  		; 12/12/2023
 11340                                  		; ds = cs
 11341                                  		;mov	ax, [cs:drvfat]	; get drive and	fat spec
 11342                                  		;mov	cx, [cs:doscnt]
 11343 00002B46 A1[FA19]                		mov	ax, [drvfat]	; get drive and	fat spec
 11344                                  
 11345                                  		;;;
 11346                                  		; 20/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 11347                                  		;
 11348                                  		; dma and segment (64K boundary) overrun precaution
 11349                                  		; (sector count will be decreased if it is required)
 11350 00002B49 89F9                     		mov	cx, di
 11351 00002B4B F7D1                    		not	cx		; cx = 65535 - cx
 11352 00002B4D D1E9                    		shr	cx, 1		; cx = cx/2
 11353 00002B4F 30C9                    		xor	cl, cl
 11354 00002B51 86CD                    		xchg	cl, ch		; cx = cx/256
 11355                                  		
 11356                                  		;cmp	cx, [cs:doscnt]	
 11357                                  				; if sector read count > cx, decrease it to cx
 11358 00002B53 3B0E[001A]              		cmp	cx, [doscnt]
 11359 00002B57 7604                    		jbe	short getcl3
 11360                                  		;;;
 11361                                  		;mov	cx, [cs:doscnt]
 11362 00002B59 8B0E[001A]              		mov	cx, [doscnt]
 11363                                  getcl3:
 11364 00002B5D 5A                      		pop	dx		; sector to read for diskrd (low)
 11365                                  		;pop	word [cs:start_sec_h]
 11366                                  		; 12/12/2023
 11367 00002B5E 8F06[9C04]              		pop	word [start_sec_h]
 11368                                  					; sector to read for diskrd (high)
 11369                                  		; 06/04/2024
 11370                                  		;;;
 11371 00002B62 51                      		push	cx ; +*
 11372                                  		;;;
 11373                                  
 11374                                  		; 12/12/2023
 11375                                  		; ds = cs
 11376                                  		;push	ds
 11377                                  		;push	cs
 11378                                  		;pop	ds
 11379                                  		
 11380 00002B63 0E                      		push	cs		; simulate far call
 11381                                  
 11382                                  		; 20/12/2023
 11383                                  		; 17/10/2022
 11384 00002B64 BD[0C0A]                		mov	bp, DISKRD	; offset diskrd
 11385                                  		;mov	bp, 0A2Bh	; 20/12/2023
 11386                                  		;	(PCDOS 7.1 IBMBIO.COM - BIOSCODE:0A2Bh ; 364h:0A2Bh)
 11387                                  		;mov	bp, 8E5h	; 17/10/2022
 11388                                  					; 2C7h:8E5h = 70h:2E55h
 11389                                  
 11390 00002B67 E807EF                  		call	call_bios_code	; read the clusters
 11391                                  
 11392                                  		;pop	ds
 11393                                  		; 12/12/2023
 11394                                  		; ds = cs
 11395                                  
 11396                                  		; 06/04/2024
 11397                                  		;;;
 11398 00002B6A 58                      		pop	ax ; +*		; sector count
 11399                                  		;;;
 11400                                  
 11401 00002B6B 5B                      		pop	bx		; lw of the new cluster number
 11402 00002B6C 5E                      		pop	si ; 20/12/2023 ; hw of the new cluster number
 11403                                  
 11404 00002B6D 5F                      		pop	di ; 2* - (kernel) load location (es:di)
 11405                                  
 11406                                  		; 06/04/2024
 11407                                  		;;mov	ax, [cs:doscnt]	; get number of	sectors	read
 11408                                  		;; 12/12/2023
 11409                                  		;mov	ax, [doscnt]
 11410                                  		
 11411 00002B6E 86E0                    		xchg	ah, al		; multiply by 256
 11412 00002B70 D1E0                    		shl	ax, 1		; times	2 equal	512
 11413 00002B72 01C7                    		add	di, ax		; update load location
 11414                                  
 11415 00002B74 59                      		pop	cx ; 1*		; restore sectors/cluster
 11416                                  
 11417 00002B75 C3                      		retn
 11418                                  
 11419                                  ; =============== S U B	R O U T	I N E =======================================
 11420                                  
 11421                                  ;function: find and read the corresponding fat sector into ds:0
 11422                                  ;
 11423                                  ;in). dx:si - offset value (starting from fat entry 0) of fat entry to find. M054
 11424                                  ;     ds - fatloc segment
 11425                                  ;     cs:drvfat - logical drive number, fat id
 11426                                  ;     cs:md_sectorsize
 11427                                  ;     cs:last_fat_secnum - last fat sector number read in.
 11428                                  ;
 11429                                  ;out). corresponding fat sector read in.
 11430                                  ;      bx = offset value from fatlog segment.
 11431                                  ;      other registers are saved.
 11432                                  ;      zero flag set if the fat entry is splitted, i.e., when 12 bit fat entry
 11433                                  ;      starts at the last byte of the fat sector. in this case, the caller
 11434                                  ;      should save this byte, and read the next fat sector to get the rest
 11435                                  ;      of the fat entry value. (this will only happen with the 12 bit fat.)
 11436                                  
 11437                                  		; 17/10/2022
 11438                                  get_fat_sector:	
 11439                                  		; 20/12/2023
 11440                                  		; 12/12/2023
 11441                                  		; ds = fat buffer segment
 11442                                  
 11443                                  		; 12/12/2023
 11444                                  		;push	ax ; (not necessary)
 11445 00002B76 51                      		push	cx ; read count (sectors per cluster)
 11446 00002B77 57                      		push	di ; IBMDOS.COM/MSDOS.SYS load offset
 11447 00002B78 56                      		push	si ; FAT offset value (from fat entry 0)
 11448 00002B79 06                      		push	es ; IBMDOS.COM/MSDOS.SYS load segment
 11449 00002B7A 1E                      		push	ds ; FAT buffer segment
 11450                                  
 11451                                  		; 12/12/2023
 11452 00002B7B 0E                      		push	cs
 11453 00002B7C 1F                      		pop	ds
 11454                                  
 11455                                  		; 06/04/2024
 11456                                  		; dx:si = offset value (starting from fat entry 0)
 11457                                  		;	      of fat entry to find
 11458                                  	
 11459 00002B7D 89F0                    		mov	ax, si
 11460                                  		;;mov	cx, [cs:md_sectorsize] ; 512
 11461                                  		; 12/12/2023
 11462                                  		;mov	cx, [md_sectorsize] ; 512
 11463                                  		;div	cx		; ax = sector number, dx = offset
 11464                                  		; 12/12/2023
 11465                                  		;nop
 11466                                  
 11467                                  		; 12/12/2023
 11468 00002B7F F736[081A]              		div	word [md_sectorsize] ; 512
 11469                                  
 11470                                  		; ax = FAT sector (sequence/index) number
 11471                                  		; dx = cluster number offset
 11472                                  
 11473                                  		; Get rid of the assumption that
 11474                                  		; there	is only	one reserved sector
 11475                                  
 11476                                  		; 12/12/2023 ; *
 11477                                  		;push	es ; *
 11478                                  		;push	ds ; *
 11479                                  		;push	di ; *
 11480 00002B83 50                      		push	ax
 11481                                  		;push	cs ; *
 11482                                  		;pop	ds ; *
 11483                                  
 11484                                  		;mov	ax, [cs:drvfat]	; get drive # and FAT id
 11485                                  		; 12/12/2023
 11486 00002B84 A1[FA19]                		mov	ax, [drvfat]	; get drive # and FAT id 
 11487 00002B87 BD[A405]                		mov	bp, SETDRIVE
 11488                                  		;mov	bp, 5AEh  ; PCDOS 7.1 IBMBIO.COM
 11489                                  		;;mov	bp, 4D7h	; setdrive
 11490                                  					; at 2C7h:4D7h = 70h:2A47h
 11491 00002B8A 0E                      		push	cs		; simulate far call
 11492 00002B8B E8E3EE                  		call	call_bios_code	; get bds for drive
 11493 00002B8E 58                      		pop	ax		; (sector number -without reserved and hidden sectors-)
 11494 00002B8F 26034509                		add	ax, [es:di+9]	; [es:di+BDS.resectors]
 11495                                  					; add #reserved_sectors
 11496                                  		; 12/12/2023
 11497                                  		;pop	di ; *
 11498                                  		;pop	ds ; *
 11499                                  		;pop	es ; *
 11500                                  
 11501                                  		; 12/12/2023
 11502                                  		; ds = cs
 11503 00002B93 3B06[0A1A]              		cmp	ax, [last_fat_sec_num]
 11504                                  		;cmp	ax, [cs:last_fat_sec_num]
 11505 00002B97 741C                    		jz	short gfs_split_chk ; don't need to read it again.
 11506 00002B99 A3[0A1A]                		mov	[last_fat_sec_num], ax
 11507                                  		;mov	[cs:last_fat_sec_num], ax
 11508                                  					; sector number
 11509                                  					; (in the partition, without hidden sectors)
 11510                                  		; 13/12/2023
 11511 00002B9C 07                      		pop	es ; FAT buffer segment (DS on top of the stack)
 11512 00002B9D 06                      		push	es ; (put it on top of the stack again)
 11513                                  
 11514 00002B9E 52                      		push	dx ; cluster number offset
 11515                                  
 11516                                  		; 12/12/2023
 11517 00002B9F 31C9                    		xor	cx, cx
 11518 00002BA1 890E[9C04]              		mov	[start_sec_h], cx ;0 
 11519                                  		;mov	word [cs:start_sec_h], 0 
 11520                                  					; prepare to read the fat sector
 11521                                  					; start_sec_h is always	0 for fat sector.
 11522 00002BA5 89C2                    		mov	dx, ax
 11523                                  		; 12/12/2023
 11524 00002BA7 41                      		inc	cx ; cx = 1
 11525                                  		;mov	cx, 1		; 1 sector read
 11526                                  		;mov	ax, [cs:drvfat]
 11527 00002BA8 A1[FA19]                		mov	ax, [drvfat]
 11528                                  		;push	ds
 11529                                  		;pop	es
 11530                                  
 11531 00002BAB 31FF                    		xor	di, di	; 0	; es:di	-> fatloc segment:0
 11532                                  		
 11533                                  		; 12/12/2023
 11534                                  		;push	ds
 11535                                  		;push	cs
 11536                                  		;pop	ds
 11537                                  		
 11538 00002BAD 0E                      		push	cs		; simulate far call
 11539                                  
 11540                                  		; 20/12/2023
 11541                                  		; 17/10/2022
 11542 00002BAE BD[0C0A]                		mov	bp, DISKRD	; offset diskrd
 11543                                  		;mov	bp, 0A2Bh	; 20/12/2023
 11544                                  		;	(PCDOS 7.1 IBMBIO.COM - BIOSCODE:0A2Bh ; 364h:0A2Bh)
 11545                                  		;mov	bp, 8E5h	; 17/10/2022
 11546                                  					; 2C7h:8E5h = 70h:2E55h
 11547                                  
 11548 00002BB1 E8BDEE                  		call	call_bios_code	; read the clusters
 11549                                  
 11550                                  		; 12/12/2023
 11551                                  		;pop	ds
 11552                                  		; ds = cs = biosdata segment
 11553                                  
 11554 00002BB4 5A                      		pop	dx ; cluster number offset 
 11555                                  
 11556                                  gfs_split_chk:
 11557                                  		; 13/12/2023
 11558                                  		;mov	cx, [cs:md_sectorsize] ; 512
 11559 00002BB5 8B0E[081A]              		mov	cx, [md_sectorsize]
 11560                                  ;gfs_split_chk:					
 11561 00002BB9 49                      		dec	cx		; 511
 11562 00002BBA 39CA                    		cmp	dx, cx		; if offset points to the
 11563                                  					; last byte of this sector,
 11564                                  					; then splitted	entry.
 11565 00002BBC 89D3                    		mov	bx, dx		; set bx to dx
 11566                                  		
 11567                                  		; 12/12/2023
 11568                                  		; bx = dx = cluster number offset in the FAT buffer
 11569 00002BBE 1F                      		pop	ds ; FAT buffer segment
 11570 00002BBF 07                      		pop	es ; IBMDOS.COM/MSDOS.SYS load segment
 11571 00002BC0 5E                      		pop	si ; FAT offset value (from fat entry 0)
 11572 00002BC1 5F                      		pop	di ; IBMDOS.COM/MSDOS.SYS load offset
 11573 00002BC2 59                      		pop	cx ; read count (sectors per cluster)
 11574                                  		;pop	ax
 11575                                  
 11576 00002BC3 C3                      		retn
 11577                                  
 11578                                  %else
 11579                                  
 11580                                  	; 06/04/2024 - temporary
 11581                                  temp_cluster:	dw	0
 11582                                  
 11583                                  ClusterH:	dw	0
 11584                                  
 11585                                  ; =============== S U B R O U T I N E =======================================
 11586                                  
 11587                                  getclus:
 11588                                                  push    cx              ; 1*
 11589                                                                          ; si:bx = (32 bit) cluster to read
 11590                                                                          ; cx = sectors per cluster
 11591                                                                          ; es:di = load location
 11592                                                  push    di              ; 2*
 11593                                                  mov     [cs:doscnt], cx
 11594                                                  mov     ax, bx
 11595                                                  mov     [cs:ClusterH], si ; high word of cluster number
 11596                                                  sub     ax, 2
 11597                                                  sbb     word [cs:ClusterH], 0
 11598                                                  xchg    ax, [cs:ClusterH]
 11599                                                  mul     cx
 11600                                                  xchg    ax, [cs:ClusterH]
 11601                                                  mul     cx
 11602                                                  add     dx, [cs:ClusterH] ; convert to logical sector
 11603                                                                          ; dx:ax = matching logical sector number
 11604                                                                          ; starting from the data sector
 11605                                                  add     ax, [cs:First_Data_Sector]
 11606                                                  adc     dx, [cs:First_Data_Sector+2]
 11607                                                                          ; dx:ax = first logical sector to read
 11608                                  unpack:
 11609                                                  push    ds              ; 3*
 11610                                                  push    ax              ; 4*
 11611                                                  push    si              ; 5*
 11612                                                  push    bx              ; 6*
 11613                                                  mov     ax, [cs:fatloc]
 11614                                                  mov     ds, ax
 11615                                                  test    byte [cs:fbigfat], 20h ; fbigbig
 11616                                                                          ; FAT32 ?
 11617                                                  jz      short not_32bit_cluster ; no
 11618                                  unpack32:                               ; yes
 11619                                                  push    dx              ; 7*
 11620                                                  mov     dx, si
 11621                                                  mov     si, bx
 11622                                                  add     si, si
 11623                                                  adc     dx, dx
 11624                                                  add     si, si
 11625                                                  adc     dx, dx          ; dx:si = 4*(si:bx)
 11626                                                  call    get_fat_sector
 11627                                                  mov     si, [bx+2]      ; byte 16-31 of the FAT32 cluster number
 11628                                                  mov     bx, [bx]        ; byte 0-15 of the FAT32 cluster number
 11629                                                  pop     dx              ; 7*
 11630                                                  jmp     short getcl1
 11631                                  ; ---------------------------------------------------------------------------
 11632                                  
 11633                                  not_32bit_cluster:
 11634                                                  mov     si, bx          ; next cluster
 11635                                                  test    byte [cs:fbigfat], 40h ; fbig
 11636                                                                          ; FAT16 ?
 11637                                                  jnz     short unpack16  ; yes
 11638                                  unpack12:
 11639                                                  shr     si, 1
 11640                                                  add     si, bx          ; 12 bit fat. si=si/2
 11641                                                                          ; si = clus + clus/2
 11642                                                                          ; (si = byte offset of the cluster in the FAT)
 11643                                                  push    dx
 11644                                                  xor     dx, dx
 11645                                                  call    get_fat_sector
 11646                                                  pop     dx
 11647                                                  mov     ax, [bx]        ; save cluster number into ax
 11648                                                  jnz     short even_odd  ; if not a splitted fat, check even-odd
 11649                                                  mov     al, [bx]        ; (not needed!) Erdogan Tan - 2023
 11650                                                  mov     byte [cs:temp_cluster], al ; splitted fat
 11651                                                  inc     si              ; (next byte)
 11652                                                  push    dx
 11653                                                  xor     dx, dx
 11654                                                  call    get_fat_sector
 11655                                                  pop     dx
 11656                                                  mov     al, [0]		; mov ah,[0]
 11657                                                  mov     byte [cs:temp_cluster+1], al
 11658                                                  mov     ax, [cs:temp_cluster] ; mov al,[cs:temp_cluster]
 11659                                  even_odd:
 11660                                                  pop     bx              ; restore old fat entry value
 11661                                                  push    bx              ; 6*
 11662                                                  shr     bx, 1           ; was it even or odd?
 11663                                                  jnb     short havclus   ; it was even
 11664                                                  shr     ax, 1           ; odd. massage fat value and keep
 11665                                                                          ; the highest 12 bits.
 11666                                                  shr     ax, 1
 11667                                                  shr     ax, 1
 11668                                                  shr     ax, 1
 11669                                  havclus:
 11670                                                  mov     bx, ax          ; now bx = new fat entry
 11671                                                  and     bx, 0FFFh       ; keep low 12 bits
 11672                                                  jmp     short unpackx
 11673                                  ; ---------------------------------------------------------------------------
 11674                                  
 11675                                  unpack16:
 11676                                                  push    dx
 11677                                                  xor     dx, dx          ; extend to 32 bit offset
 11678                                                  shl     si, 1           ; cluster number * 2
 11679                                                  adc     dx, 0
 11680                                                  call    get_fat_sector
 11681                                                  pop     dx
 11682                                                  mov     bx, [bx]        ; bx = new fat entry
 11683                                  unpackx:
 11684                                                  xor     si, si          ; high word of cluster number = 0
 11685                                                                          ; (FAT12 or FAT16)
 11686                                  getcl1:
 11687                                                  pop     ax              ; 6* - cluster number lw
 11688                                                  pop     word [cs:ClusterH] ; 5* - cluster number hw
 11689                                                  sub     ax, bx          ; previous - current (or current - new)
 11690                                                  sbb     [cs:ClusterH], si
 11691                                                  cmp     word [cs:ClusterH], -1 ; one apart? (current = previous+1)
 11692                                                  jnz     short not_consenquental
 11693                                                  cmp     ax, -1          ; 0FFFFh ; is [ClusterH]:ax = -1 ?
 11694                                  not_consenquental:
 11695                                                  pop     ax              ; 4* - low word of first logical sector
 11696                                                  pop     ds              ; 3*
 11697                                                  jnz     short getcl2
 11698                                                  add     [cs:doscnt], cx ; consequental cluster read, +1 cluster sectors
 11699                                                                          ; (cx = sectors per cluster)
 11700                                                  jmp     unpack
 11701                                  ; ---------------------------------------------------------------------------
 11702                                  
 11703                                  getcl2:
 11704                                                  push    bx
 11705                                                  push    si
 11706                                                  push    dx              ; sector to read (high)
 11707                                                  push    ax              ; sector to read (low)
 11708                                                  mov     ax, [cs:drvfat] ; get drive and fat spec
 11709                                                  mov     cx, di          ; dma and segment (64K boundary) overrun precaution
 11710                                                                          ; (sector count will be decreased if it is required)
 11711                                                  not     cx              ; cx = 65535 - cx
 11712                                                  shr     cx, 1           ; cx = cx/2
 11713                                                  xor     cl, cl
 11714                                                  xchg    cl, ch          ; cx = cx/256
 11715                                                  cmp     cx, [cs:doscnt] ; if sector read count > cx, decrease it to cx
 11716                                                  jbe     short getcl3
 11717                                                  mov     cx, [cs:doscnt]
 11718                                  getcl3:
 11719                                                  pop     dx              ; sector to read for diskrd (low)
 11720                                                  pop     word [cs:start_sec_h] ; sector to read for diskrd (high)
 11721                                                  push    cx
 11722                                                  push    ds
 11723                                                  push    cs
 11724                                                  pop     ds
 11725                                                  push    cs              ; simulate far call
 11726                                                  mov     bp, DISKRD ; BIOSCODE:0A2Bh ; 364h:0A2Bh
 11727                                                  call    call_bios_code
 11728                                                  pop     ds
 11729                                                  pop     ax              ; sector count
 11730                                                  pop     si
 11731                                                  pop     bx
 11732                                                  pop     di              ; 2* - load location (es:di)
 11733                                                  xchg    ah, al
 11734                                                  shl     ax, 1           ; ax = ax * 512 ; byte count
 11735                                                  add     di, ax          ; update load location
 11736                                                  pop     cx              ; 1* - restore sectors/cluster
 11737                                                  retn
 11738                                  
 11739                                  ; =============== S U B R O U T I N E =======================================
 11740                                  
 11741                                  get_fat_sector:
 11742                                                  push    ax              ; dx:si = offset value (starting from fat entry 0)
 11743                                                                          ;         of fat entry to find
 11744                                                  push    cx
 11745                                                  push    di
 11746                                                  push    si
 11747                                                  push    es
 11748                                                  push    ds
 11749                                                  mov     ax, si
 11750                                                  mov     cx, [cs:md_sectorsize] ; 512
 11751                                                  div     cx
 11752                                                  nop                     ; ax = sector number, dx = offset
 11753                                                  push    es
 11754                                                  push    ds
 11755                                                  push    di
 11756                                                  push    ax
 11757                                                  push    cs
 11758                                                  pop     ds
 11759                                                  mov     ax, [cs:drvfat] ; get drive # and FAT id
 11760                                                  mov     bp, SetDrive ; BIOSCODE:05AEh
 11761                                                  push    cs              ; simulate far call
 11762                                                  call    call_bios_code  ; get bds for drive
 11763                                                  pop     ax              ; (sector number -without reserved and hidden sectors-)
 11764                                                  add     ax, [es:di+9]   ; [es:di+BDS.resectors]
 11765                                                                          ; add #reserved_sectors
 11766                                                  pop     di
 11767                                                  pop     ds
 11768                                                  pop     es
 11769                                                  cmp     ax, [cs:last_fat_sec_num]
 11770                                                  jz      short gfs_split_chk ; don't need to read it again
 11771                                                  mov     [cs:last_fat_sec_num], ax ; sector number
 11772                                                                          ; (in the partition, without hidden sectors)
 11773                                                  push    dx
 11774                                                  mov     word [cs:start_sec_h], 0 ; prepare to read the fat sector
 11775                                                                          ; start_sec_h is always 0 for fat sector
 11776                                                  mov     dx, ax
 11777                                                  mov     cx, 1           ; 1 sector read
 11778                                                  mov     ax, [cs:drvfat]
 11779                                                  push    ds
 11780                                                  pop     es
 11781                                                  xor     di, di          ; es:di -> fatloc segment:0
 11782                                                  push    ds
 11783                                                  push    cs
 11784                                                  pop     ds
 11785                                                  push    cs              ; simulate far call
 11786                                                  mov     bp, DISKRD ; BIOSCODE:0A2Bh ; 364h:0A2Bh
 11787                                                  call    call_bios_code
 11788                                                  pop     ds
 11789                                                  pop     dx
 11790                                                  mov     cx, [cs:md_sectorsize] ; 512
 11791                                  gfs_split_chk:
 11792                                                  dec     cx              ; 511
 11793                                                  cmp     dx, cx          ; if offset points to the last byte of this sector,
 11794                                                                          ; then splitted entry.
 11795                                                  mov     bx, dx          ; offset value from fatloc segment
 11796                                                  pop     ds
 11797                                                  pop     es
 11798                                                  pop     si
 11799                                                  pop     di
 11800                                                  pop     cx
 11801                                                  pop     ax
 11802                                                  retn
 11803                                  
 11804                                  %endif
 11805                                  
 11806                                  ; 15/10/2022
 11807                                  ;Bios_Data_Init	ends
 11808                                  
 11809                                  ; ---------------------------------------------------------------------------
 11810                                  
 11811                                  		; 09/12/2022
 11812                                  		;db 0
 11813                                  
 11814                                  numbertodiv	equ ($-BData_start)
 11815                                  numbertomod	equ (numbertodiv % 16)
 11816                                  
 11817                                  %if numbertomod>0 & numbertomod<16
 11818 00002BC4 00<rep Ch>              		times (16-numbertomod) db 0
 11819                                  %endif
 11820                                  
 11821                                  ;align 16
 11822                                  
 11823                                  ; 09/12/2022
 11824                                  IOSYSCODESEGOFF	equ $ - BData_start
 11825                                  IOSYSCODESEG	equ (IOSYSCODESEGOFF>>4)+(700h>>4)
 11826                                  
 11827                                  ;--- End of DOSBIOS data segment --------------------------------------------
 11828                                  ; ---------------------------------------------------------------------------
 11829                                  		;db 4 dup(0)
 11830                                  ; 09/12/2022		
 11831                                  ;		times 4 db 0	; 19/10/2022
 11832                                  ; ---------------------------------------------------------------------------
 11833                                  
 11834                                  ;============================================================================
 11835                                  ; DOS BIOS (IO.SYS) CODE SEGMENT 
 11836                                  ;============================================================================
 11837                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11838                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 11839                                  
 11840                                  section .BIOSCODE vstart=0 
 11841                                  
 11842                                  ; 30/12/2022
 11843                                  ; (BIOSCODE SEGMENT is 2CCh for MSDOS 6.21 IO.SYS)  -- ((25C0h+700h)>>4) --
 11844                                  
 11845                                  BCode_start:	 ; 09/12/2022
 11846                                   
 11847                                  ; 02/10/2022
 11848                                  
 11849                                  ;--- DOSBIOS code segment ---------------------------------------------------
 11850                                  ;----------------------------------------------------------------------------
 11851                                  ; MSBIO1.ASM (MSDOS 6.0, 1991)
 11852                                  ;----------------------------------------------------------------------------
 11853                                  
 11854                                  DOSBIOSEG_2C7h:	;db 30h dup(0)		; SEGMENT 2C7h (2C70h-700h=2570h)
 11855 00000000 00<rep 30h>             		times 48 db 0		; 19/10/2022	
 11856 00000030 7000                    BiosDataWord:	dw 70h
 11857                                  
 11858                                  ; 15/10/2022
 11859                                  ;BIOSDATAWORD	equ BiosDataWord - DOSBIOSEG_2C7h
 11860                                  ; 09/12/2022
 11861                                  BIOSDATAWORD	equ BiosDataWord
 11862                                  
 11863                                  ; ---------------------------------------------------------------------------
 11864                                  
 11865                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11866                                  ; 20/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 11867                                  
 11868                                  ;************************************************************************
 11869                                  ;*									*
 11870                                  ;*	seg_reinit is called with ax = our new code segment value,	*
 11871                                  ;*	  trashes di, cx, es						*
 11872                                  ;*									*
 11873                                  ;*	cas -- should be made disposable!				*
 11874                                  ;*									*
 11875                                  ;************************************************************************
 11876                                  
 11877                                  	; 20/09/2023	
 11878                                  	; 10/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 11879                                  	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0032h 
 11880                                  
 11881                                  _seg_reinit:
 11882 00000032 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 11883                                  					; at 2C7h:30h or 70h:25A0h
 11884                                  		;mov	di, (offset cdev+2)
 11885 00000037 BF[0406]                		mov	di, cdev+2	; 19/10/2022
 11886                                  		;mov	cx, 4		; (end_BC_entries - cdev)/4
 11887                                  		; 10/08/2023
 11888 0000003A B90300                  		mov	cx, 3 ; (PCDOS 7.1)
 11889                                  _seg_reinit_1:
 11890 0000003D AB                      		stosw			; modify Bios_Code entry points
 11891 0000003E 47                      		inc	di
 11892 0000003F 47                      		inc	di
 11893 00000040 E2FB                    		loop	_seg_reinit_1
 11894                                  		; 10/08/2023 (PCDOS 7.1)
 11895                                  		; (direct jump to i2f_handler from BIOSDATA:bios_i2f)
 11896                                  		; (instead of 'bcode_i2f: dw i2f_handler, IOSYSCODESEG')
 11897 00000042 26A3[0800]              		mov     [es:bios_i2f_seg], ax ; actual BIOSCODE segment
 11898                                  
 11899 00000046 CB                      		retf
 11900                                  
 11901                                  ; ---------------------------------------------------------------------------
 11902                                  
 11903                                  ; 15/10/2022
 11904                                  
 11905                                  ;************************************************************************
 11906                                  ;*									*
 11907                                  ;*	chardev_entry - main device driver dispatch routine		*
 11908                                  ;*	   called with a dummy parameter block on the stack		*
 11909                                  ;*	   dw dispatch_table, dw prn/aux numbers (optional)		*
 11910                                  ;*									*
 11911                                  ;*	will eventually take care of doing the transitions in		*
 11912                                  ;*	   out of Bios_Code						*
 11913                                  ;*									*
 11914                                  ;************************************************************************
 11915                                  
 11916                                  		; 20/09/2023
 11917                                  chardev_entry:				; 0070h:25B3h =	02C7h:0043h
 11918 00000047 56                      		push	si
 11919 00000048 50                      		push	ax
 11920 00000049 51                      		push	cx
 11921 0000004A 52                      		push	dx
 11922 0000004B 57                      		push	di
 11923 0000004C 55                      		push	bp
 11924 0000004D 1E                      		push	ds
 11925 0000004E 06                      		push	es
 11926 0000004F 53                      		push	bx
 11927 00000050 89E5                    		mov	bp, sp
 11928 00000052 8B7612                  		mov	si, [bp+18]	; get return address (dispatch table)
 11929                                  		;;mov	ds, word [cs:0030h]
 11930                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 11931 00000055 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 11932                                  		; 20/09/2023 (PCDOS 7.1 - IBMBIO.COM - BIOSCODE:005Ah)
 11933 0000005A C434                    		les	si, [si]
 11934                                  		;mov	ax, [si+2]	; get the device number	if present
 11935 0000005C 8CC0                    		mov	ax, es
 11936 0000005E A2[2100]                		mov	[auxnum], al
 11937 00000061 8826[8004]              		mov	[printdev], ah
 11938                                  		;mov	si, [si]	; point	to the device dispatch table
 11939 00000065 C41E[1200]              		les	bx, [ptrsav]	; get pointer to i/o packet
 11940 00000069 268A4701                		mov	al, [es:bx+1]	; [es:bx+unit]	; al = unit code
 11941 0000006D 268A670D                		mov	ah, [es:bx+13]	; [es:bx+media]	; ah = media descrip
 11942 00000071 268B4F12                		mov	cx, [es:bx+18]	; [es:bx+count]	; cx = count
 11943 00000075 268B5714                		mov	dx, [es:bx+20]	; [es:bx+start]	; dx = start sector
 11944                                  		; 17/10/2022
 11945 00000079 81FE[6F05]              		cmp	si, DSKTBL
 11946                                  		;;cmp	si, 579h	; (PCDOS 7.1 IBMBIO.COM)
 11947                                  		;cmp	si, 4A2h	; dsktbl
 11948                                  					; at 2C7h:4A2h = 70h:2A12h
 11949 0000007D 7517                    		jnz	short no_sector32_mapping
 11950                                  
 11951                                  ; Special case for 32-bit start sector number:
 11952                                  ;   if (si==dsktbl) /* if this is a disk device call */
 11953                                  ;      set high 16 bits of secnum to 0
 11954                                  ;      if (secnum == 0xffff) fetch 32 bit sector number
 11955                                  ;
 11956                                  ; pass high word of sector number in start_sec_h, low word in dx
 11957                                  ;
 11958                                  ; note: start_l and start_h are the offsets within the io_request packet
 11959                                  ;	  which contain the low and hi words of the 32 bit start sector if
 11960                                  ;	  it has been used.
 11961                                  ;
 11962                                  ; note: remember not to destroy the registers which have been set up before
 11963                                  
 11964                                  		; 20/09/2023
 11965                                  		;mov	ds:start_sec_h,	0 ; initialize to 0
 11966 0000007F C706[9C04]0000          		mov	word [start_sec_h], 0
 11967 00000085 83FAFF                  		cmp	dx, 0FFFFh
 11968 00000088 750C                    		jnz	short no_sector32_mapping
 11969 0000008A 268B571C                		mov	dx, [es:bx+28]	; [es:bx+start_h]
 11970                                  					; 32 bits dsk req
 11971                                  		;mov	ds:start_sec_h,	dx ; start_sec_h = packet.start_h
 11972 0000008E 8916[9C04]              		mov	[start_sec_h], dx
 11973 00000092 268B571A                		mov	dx, [es:bx+26]	; [es:bx+start_l]
 11974                                  					; dx = packet.start_l
 11975                                  no_sector32_mapping:
 11976 00000096 97                      		xchg	ax, di
 11977 00000097 268A4702                		mov	al, [es:bx+2]	; [es:bx+cmd]
 11978 0000009B 2E3A04                  		cmp	al, [cs:si]
 11979 0000009E 732B                    		jnb	short command_error
 11980 000000A0 98                      		cbw			; note that al <= 15 means ok
 11981 000000A1 D1E0                    		shl	ax, 1
 11982 000000A3 01C6                    		add	si, ax
 11983 000000A5 97                      		xchg	ax, di
 11984 000000A6 26C47F0E                		les	di, [es:bx+14]	; [es:bx+trans]
 11985 000000AA FC                      		cld
 11986                                  		; 17/10/2022
 11987 000000AB 2EFF5401                		call	near [cs:si+1]
 11988                                  		;call	word ptr cs:si+1
 11989 000000AF 7202                    		jb	short already_got_ah_status
 11990 000000B1 B401                    		mov	ah, 1
 11991                                  already_got_ah_status:
 11992                                  		;;mov	ds, [cs:0030h]	; 15/10/2022
 11993                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 11994                                  					; cas note: shouldn't be needed!
 11995 000000B3 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 11996                                  		;lds	bx, ds:ptrsav
 11997 000000B8 C51E[1200]              		lds	bx, [ptrsav]
 11998 000000BC 894703                  		mov	[bx+3],	ax	; [bx+status]
 11999                                  					; mark operation complete
 12000 000000BF 5B                      		pop	bx
 12001 000000C0 07                      		pop	es
 12002 000000C1 1F                      		pop	ds
 12003 000000C2 5D                      		pop	bp
 12004 000000C3 5F                      		pop	di
 12005 000000C4 5A                      		pop	dx
 12006 000000C5 59                      		pop	cx
 12007 000000C6 58                      		pop	ax
 12008 000000C7 5E                      		pop	si
 12009                                  		;add	sp, 2		; get rid of fake return address
 12010                                  		; 20/09/2023 (PCDOS 7.1	- IBMBIO.COM - BIOSCODE:00C8h)
 12011 000000C8 44                      		inc	sp
 12012 000000C9 44                      		inc	sp	
 12013                                  
 12014                                  		; fall through into bc_retf
 12015                                  ; ---------------------------------------------------------------------------	
 12016                                  bc_retf:
 12017 000000CA CB                      		retf
 12018                                  ; ---------------------------------------------------------------------------
 12019                                  
 12020                                  command_error:				
 12021 000000CB E80700                  		call	bc_cmderr
 12022 000000CE EBE3                    		jmp	short already_got_ah_status
 12023                                  ; 15/10/2022
 12024                                  ; 01/05/2019
 12025                                  
 12026                                  ;----------------------------------------------------------------------------
 12027                                  ; The following piece of hack is for supporting CP/M compatibility
 12028                                  ; Basically at offset 5 we have a far call into 0:c0. But this does not call
 12029                                  ; 0:c0 directly instead it call f01d:fef0, because it needs to support 'lhld 6'
 12030                                  ; The following hack has to reside at ffff:d0 (= f01d:fef0) if BIOS is loaded
 12031                                  ; high.
 12032                                  ;----------------------------------------------------------------------------
 12033                                  
 12034                                  		;db 7 dup(0)
 12035                                  
 12036                                  		; 20/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 12037                                  		; (PCDOS 7.1 - IBMBIO.COM - BIOSCODE:0D0h)
 12038                                  		; 15/10/2022
 12039                                  		;dw 0		; pad to bring offset to 0D0h
 12040                                  
 12041 000000D0 00<rep 5h>              off_d0: 	times 5 db 0	; 5 bytes from 0:c0 will be copied onto here
 12042                                  				;  which is the CP/M call 5 entry point
 12043                                  		
 12044                                  
 12045                                  ; ---------------------------------------------------------------------------
 12046                                  
 12047                                  ;	exit - all routines return through this path
 12048                                  
 12049                                  bc_cmderr:				
 12050 000000D5 B003                    		mov	al, 3		; 2C7h:D5h = 70h:2645h
 12051                                  					; unknown command error
 12052                                  
 12053                                  ; =============== S U B	R O U T	I N E =======================================
 12054                                  
 12055                                  ;	now zero the count field by subtracting its current value,
 12056                                  ;	  which is still in cx, from itself.
 12057                                  
 12058                                  ;	subtract the number of i/o's NOT YET COMPLETED from total
 12059                                  ;	  in order to return the number actually complete
 12060                                  
 12061                                  bc_err_cnt:	
 12062                                  		;les	bx, ds:ptrsav
 12063                                  		; 19/10/2022
 12064 000000D7 C41E[1200]              		les	bx, [ptrsav]
 12065 000000DB 26294F12                		sub	[es:bx+18], cx	; [es:bx+count]
 12066                                  					; # of successful i/o's
 12067 000000DF B481                    		mov	ah, 81h		; mark error return
 12068 000000E1 F9                      		stc			; indicate abnormal end
 12069 000000E2 C3                      		retn
 12070                                  
 12071                                  ; 15/10/2022
 12072                                  
 12073                                  ;Bios_Code ends
 12074                                  
 12075                                  ;----------------------------------------------------------------------------
 12076                                  ; MSCHAR.ASM - MSDOS 6.0 - 1991
 12077                                  ;----------------------------------------------------------------------------
 12078                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 12079                                  ; 10/01/2019 - Retro DOS v4.0
 12080                                  
 12081                                  ; 30/04/2019
 12082                                  
 12083                                  ;title	mschar - character and clock devices
 12084                                  
 12085                                  ;MODE_CTRLBRK	equ	0FFh
 12086                                  
 12087                                  ; BIOSCODE:00E4h (MSDOS 6.21, IO.SYS)
 12088                                  
 12089                                  ;************************************************************************
 12090                                  ;*									*
 12091                                  ;*	device driver dispatch tables					*
 12092                                  ;*									*
 12093                                  ;*	each table starts with a byte which lists the number of		*
 12094                                  ;*	legal functions, followed by that number of words. Each		*
 12095                                  ;*	word represents an offset of a routine in Bios_Code which	*
 12096                                  ;*	handles the function. The functions are terminated with		*
 12097                                  ;*	a near return. If carry is reset, a 'done' code is returned	*
 12098                                  ;*	to the caller. If carry is set, the ah/al registers are		*
 12099                                  ;*	returned as abnormal completion status. Notice that ds		*
 12100                                  ;*	is assumed to point to the Bios_Data segment throughout.	*
 12101                                  ;*									*
 12102                                  ;************************************************************************
 12103                                  
 12104                                  		; 20/09/2023
 12105                                  		; (PCDOS 7.1 - IBMBIO.COM - BIOSCODE:00E3h)
 12106                                  		; 13/12/2022
 12107 000000E3 00                      		db 0
 12108                                  
 12109                                  		; 13/12/2022
 12110 000000E4 0B                      con_table:	db ((con_table_end - con_table)-1)/2 ; 11
 12111                                  					; 2C7h:0E4h = 70h:2654h
 12112 000000E5 [FA01]                  		dw bc_exvec  ; 1FBh	; bc_exvec at 2C7h:1FBh	= 70h:276Bh
 12113                                  					; 00 init
 12114 000000E7 [FA01]                  		dw bc_exvec  ; 1FBh	; 01
 12115 000000E9 [FA01]                  		dw bc_exvec  ; 1FBh	; 02
 12116 000000EB [D500]                  		dw bc_cmderr ; 0D5h	; bc_exvec at 2C7h:D5h = 70h:2645h
 12117                                  					; 03
 12118 000000ED [5C01]                  		dw con_read  ; 15Ch	; con_read at 2C7h:15Ch	= 70h:26CCh
 12119                                  					; 04
 12120 000000EF [9F01]                  		dw con_rdnd  ; 19Fh	; con_rdnd at 2C7h:19Fh	= 70h:270Fh
 12121                                  					; 05
 12122 000000F1 [FA01]                  		dw bc_exvec  ; 1FBh	; 06
 12123 000000F3 [0802]                  		dw con_flush ; 209h	; con_flush at 2C7h:209h = 70h:2779h
 12124                                  					; 07
 12125 000000F5 [FC01]                  		dw con_writ  ; 1FDh	; con_writ at 2C7h:1FDh	= 70h:276Dh
 12126                                  					; 08
 12127 000000F7 [FC01]                  		dw con_writ  ; 1FDh	; 09
 12128 000000F9 [FA01]                  		dw bc_exvec  ; 1FBh	; 0A
 12129                                  con_table_end:
 12130 000000FB 1A                      prn_table:	db ((prn_table_end - prn_table)-1)/2 ; 26			
 12131                                  					; 2C7h:0FBh = 70h:266Bh
 12132 000000FC [FA01]                  		dw bc_exvec   ; 1FBh	; bc_exvec
 12133 000000FE [FA01]                  		dw bc_exvec   ; 1FBh	; 01
 12134 00000100 [FA01]                  		dw bc_exvec   ; 1FBh	; 02
 12135 00000102 [D500]                  		dw bc_cmderr  ;	0D5h	; bc_cmderr
 12136 00000104 [1902]                  		dw prn_input  ;	21Ah	; prn_input
 12137                                  					; 04 indicate zero chars read
 12138 00000106 [C701]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
 12139                                  					; 05 read non-destructive
 12140 00000108 [FA01]                  		dw bc_exvec   ; 1FBh	; 06
 12141 0000010A [FA01]                  		dw bc_exvec   ; 1FBh	; 07
 12142 0000010C [1E02]                  		dw prn_writ   ;	21Fh	; prn_writ
 12143 0000010E [1E02]                  		dw prn_writ   ; 21Fh	; 09
 12144 00000110 [4F02]                  		dw prn_stat   ; 251h	; prn_stat
 12145 00000112 [FA01]                  		dw bc_exvec   ; 1FBh	; 0B
 12146 00000114 [FA01]                  		dw bc_exvec   ; 1FBh	; 0C
 12147 00000116 [FA01]                  		dw bc_exvec   ; 1FBh	; 0D
 12148 00000118 [FA01]                  		dw bc_exvec   ; 1FBh	; 0E
 12149 0000011A [FA01]                  		dw bc_exvec   ; 1FBh	; 0F
 12150 0000011C [9402]                  		dw prn_tilbusy ; 28Bh	; prn_tilbusy
 12151 0000011E [FA01]                  		dw bc_exvec   ; 1FBh	; 11
 12152 00000120 [FA01]                  		dw bc_exvec   ; 1FBh	; 12
 12153 00000122 [C202]                  		dw prn_genioctl ; 2BAh	; prn_genioctl
 12154 00000124 [FA01]                  		dw bc_exvec   ; 1FBh	; 14
 12155 00000126 [FA01]                  		dw bc_exvec   ; 1FBh	; 15
 12156 00000128 [FA01]                  		dw bc_exvec   ; 1FBh	; 16
 12157 0000012A [FA01]                  		dw bc_exvec   ; 1FBh	; 17
 12158 0000012C [FA01]                  		dw bc_exvec   ; 1FBh	; 18
 12159 0000012E [F702]                  		dw prn_ioctl_query ; 2F0h ; prn_ioctl_query
 12160                                  prn_table_end:
 12161 00000130 0B                      aux_table:	db ((aux_table_end - aux_table)-1)/2 ; 11			
 12162                                  					; 2C7h:130h = 70h:26A0h
 12163 00000131 [FA01]                  		dw bc_exvec   ; 1FBh	; 00 - init
 12164 00000133 [FA01]                  		dw bc_exvec   ; 1FBh	; 01
 12165 00000135 [FA01]                  		dw bc_exvec   ; 1FBh	; 02
 12166 00000137 [D500]                  		dw bc_cmderr  ;	0D5h	; 03
 12167 00000139 [1203]                  		dw aux_read   ; 30Dh	; aux_read ; 04	- read
 12168 0000013B [3703]                  		dw aux_rdnd   ; 335h	; aux_rdnd - 05	- read non-destructive
 12169 0000013D [FA01]                  		dw bc_exvec   ; 1FBh	; 06
 12170 0000013F [7803]                  		dw aux_flsh   ;	36Ch	; aux_flsh
 12171 00000141 [7F03]                  		dw aux_writ   ;	374h	; aux_writ
 12172 00000143 [7F03]                  		dw aux_writ   ;	374h	; 09
 12173 00000145 [5703]                  		dw aux_wrst   ;	355h	; aux_wrst
 12174                                  aux_table_end:
 12175 00000147 0A                      tim_table	db ((tim_table_end - tim_table)-1)/2 ; 10
 12176                                  					; 2C7h:147h = 70h:26B7h
 12177 00000148 [FA01]                  		dw bc_exvec   ; 1FBh	; 00
 12178 0000014A [FA01]                  		dw bc_exvec   ; 1FBh	; 01
 12179 0000014C [FA01]                  		dw bc_exvec   ; 1FBh	; 02
 12180 0000014E [D500]                  		dw bc_cmderr  ;	0D5h	; 03
 12181 00000150 [E404]                  		dw tim_read   ;	435h	; tim_read
 12182 00000152 [C701]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
 12183 00000154 [FA01]                  		dw bc_exvec   ; 1FBh	; 06
 12184 00000156 [FA01]                  		dw bc_exvec   ; 1FBh	; 07
 12185 00000158 [E503]                  		dw tim_writ   ; 3DBh	; tim_writ
 12186 0000015A [E503]                  		dw tim_writ   ; 3DBh	; 09
 12187                                  tim_table_end:
 12188                                  
 12189                                  ; ---------------------------------------------------------------------------
 12190                                  
 12191                                  ;************************************************************************
 12192                                  ;*									*
 12193                                  ;*	con_read - read cx bytes from keyboard into buffer at es:di	*
 12194                                  ;*									*
 12195                                  ;************************************************************************
 12196                                  
 12197                                  con_read:				; 2C7h:15Ch = 70h:26CCh
 12198                                  		;jcxz	short con_exit	; read cx bytes	from keyboard into buffer
 12199 0000015C E306                    		jcxz	con_exit	; 19/10/2022
 12200                                  con_loop:				
 12201 0000015E E80500                  		call	chrin		; get char in al
 12202 00000161 AA                      		stosb			; store	char at	es:di
 12203 00000162 E2FA                    		loop	con_loop
 12204                                  con_exit:				
 12205 00000164 F8                      		clc
 12206 00000165 C3                      		retn
 12207                                  
 12208                                  ; =============== S U B	R O U T	I N E =======================================
 12209                                  
 12210                                  ;************************************************************************
 12211                                  ;*									*
 12212                                  ;*	chrin - input single char from keyboard into al			*
 12213                                  ;*									*
 12214                                  ;*	  we are going to issue extended keyboard function, if		*
 12215                                  ;*	  supported. the returning value of the extended keystroke	*
 12216                                  ;*	  of the extended keyboard function uses 0E0h in al		*
 12217                                  ;*	  instead of 00h as in the conventional keyboard function.	*
 12218                                  ;*	  this creates a conflict when the user entered real		*
 12219                                  ;*	  greek alpha charater (= 0E0h) to  distinguish the extended	*
 12220                                  ;*	  keystroke and the greek alpha. this case will be handled	*
 12221                                  ;*	  in the following manner:					*
 12222                                  ;*									*
 12223                                  ;*	      ah = 16h							*
 12224                                  ;*	      int 16h							*
 12225                                  ;*	      if al == 0, then extended code (in ah)			*
 12226                                  ;*	      else if al == 0E0h, then					*
 12227                                  ;*	      if ah <> 0, then extended code (in ah)			*
 12228                                  ;*		else greek_alpha character.				*
 12229                                  ;*									*
 12230                                  ;*	also, for compatibility reason, if an extended code is		*
 12231                                  ;*	  detected, then we are going to change the value in al		*
 12232                                  ;*	  from 0E0h to 00h.						*
 12233                                  ;*									*
 12234                                  ;************************************************************************
 12235                                  
 12236                                  		; 19/10/2022
 12237                                  chrin:		
 12238 00000166 8A26[7E04]              		mov	ah, [keyrd_func] ; set by msinit. 0 or 10h
 12239 0000016A 30C0                    		xor	al, al
 12240 0000016C 8606[0C00]              		xchg	al, [altah]	; get character	& zero altah
 12241 00000170 08C0                    		or	al, al
 12242 00000172 752A                    		jnz	short keyret
 12243 00000174 CD16                    		int	16h		; KEYBOARD -
 12244 00000176 09C0                    		or	ax, ax
 12245 00000178 74EC                    		jz	short chrin
 12246 0000017A 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
 12247 0000017D 7504                    		jnz	short alt_ext_chk
 12248 0000017F B010                    		mov	al, 10h
 12249 00000181 EB1B                    		jmp	short keyret
 12250                                  ; ---------------------------------------------------------------------------
 12251                                  
 12252                                  ;  if operation was extended function (i.e. keyrd_func != 0) then
 12253                                  ;    if character read was 0E0h then
 12254                                  ;      if extended byte was zero (i.e. ah == 0) then
 12255                                  ;	 goto keyret
 12256                                  ;      else
 12257                                  ;	 set al to zero
 12258                                  ;	 goto alt_save
 12259                                  ;      endif
 12260                                  ;    endif
 12261                                  ;  endif
 12262                                  
 12263                                  alt_ext_chk:
 12264 00000183 803E[7E04]00            		cmp	byte [keyrd_func], 0
 12265 00000188 740C                    		jz	short not_ext
 12266 0000018A 3CE0                    		cmp	al, 0E0h
 12267 0000018C 7508                    		jnz	short not_ext
 12268 0000018E 08E4                    		or	ah, ah
 12269 00000190 740C                    		jz	short keyret
 12270 00000192 30C0                    		xor	al, al
 12271 00000194 EB04                    		jmp	short alt_save
 12272                                  ; ---------------------------------------------------------------------------
 12273                                  
 12274                                  not_ext:				
 12275 00000196 08C0                    		or	al, al		; special case?
 12276 00000198 7504                    		jnz	short keyret
 12277                                  alt_save:				
 12278 0000019A 8826[0C00]              		mov	[altah], ah	; store	special	key
 12279                                  keyret:					
 12280 0000019E C3                      		retn
 12281                                  
 12282                                  ; ---------------------------------------------------------------------------
 12283                                  
 12284                                  ;************************************************************************
 12285                                  ;*									*
 12286                                  ;*	con_rdnd - keyboard non destructive read, no wait		*
 12287                                  ;*									*
 12288                                  ;*	pc-convertible-type machine: if bit 10 is set by the dos	*
 12289                                  ;*	in the status word of the request packet, and there is no	*
 12290                                  ;*	character in the input buffer, the driver issues a system	*
 12291                                  ;*	wait request to the rom. on return from the rom, it returns	*
 12292                                  ;*	a 'char-not-found' to the dos.					*
 12293                                  ;*									*
 12294                                  ;************************************************************************
 12295                                  
 12296                                  		; 19/10/2022
 12297                                  con_rdnd:				
 12298 0000019F A0[0C00]                		mov	al, [altah]
 12299 000001A2 08C0                    		or	al, al
 12300 000001A4 754C                    		jnz	short rdexit
 12301 000001A6 8A26[7F04]              		mov	ah, [keysts_func]
 12302 000001AA CD16                    		int	16h		; KEYBOARD -
 12303 000001AC 751D                    		jnz	short gotchr
 12304 000001AE 803E[7900]00            		cmp	byte [fhavek09], 0
 12305 000001B3 7412                    		jz	short z_bus_exit
 12306 000001B5 C41E[1200]              		les	bx, [ptrsav]
 12307                                  		; 12/12/2022
 12308 000001B9 26F6470404              		test	byte [es:bx+4], 04h
 12309                                  		;test	word [es:bx+3], 400h ; [es:bx+status]
 12310 000001BE 7407                    		jz	short z_bus_exit
 12311 000001C0 B80041                  		mov	ax, 4100h
 12312 000001C3 30DB                    		xor	bl, bl
 12313 000001C5 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
 12314                                  					; AL = condition type, BH = condition compare or mask value
 12315                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
 12316                                  					; DX = I/O port	address	if AL bit 4 set
 12317                                  z_bus_exit:				
 12318 000001C7 F9                      		stc			; 2C7h:1C8h = 70h:2738h
 12319 000001C8 B403                    		mov	ah, 3		; indicate busy	status
 12320 000001CA C3                      		retn
 12321                                  ; ---------------------------------------------------------------------------
 12322                                  
 12323                                  gotchr:					
 12324 000001CB 09C0                    		or	ax, ax
 12325 000001CD 7508                    		jnz	short notbrk	; check	for null after break
 12326 000001CF 8A26[7E04]              		mov	ah, [keyrd_func] ; issue keyboard read function
 12327 000001D3 CD16                    		int	16h		; KEYBOARD -
 12328 000001D5 EBC8                    		jmp	short con_rdnd	; get a	real status
 12329                                  ; ---------------------------------------------------------------------------
 12330                                  
 12331                                  notbrk:					
 12332 000001D7 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
 12333 000001DA 7504                    		jnz	short rd_ext_chk
 12334 000001DC B010                    		mov	al, 10h		; ('P' & 1Fh) ; return control p
 12335 000001DE EB12                    		jmp	short rdexit
 12336                                  ; ---------------------------------------------------------------------------
 12337                                  
 12338                                  rd_ext_chk:				
 12339 000001E0 803E[7E04]00            		cmp	byte [keyrd_func], 0 ; extended keyboard function?
 12340 000001E5 740B                    		jz	short rdexit
 12341 000001E7 3CE0                    		cmp	al, 0E0h	; extended key value or	greek alpha?
 12342 000001E9 7507                    		jnz	short rdexit
 12343 000001EB 80FC00                  		cmp	ah, 0		; scan code exist?
 12344 000001EE 7402                    		jz	short rdexit	; yes. greek alpha char.
 12345 000001F0 B000                    		mov	al, 0		; no. extended key stroke.
 12346                                  					; change it for	compatibility
 12347                                  rdexit:					
 12348 000001F2 C41E[1200]              		les	bx, [ptrsav]
 12349 000001F6 2688470D                		mov	[es:bx+13], al	; [es:bx+media]
 12350                                  					; return keyboard character here
 12351                                  bc_exvec:				
 12352 000001FA F8                      		clc			; bc_exvec at 2C7h:1FBh	= 70h:276Bh
 12353                                  					; indicate normal termination
 12354 000001FB C3                      		retn
 12355                                  ; ---------------------------------------------------------------------------
 12356                                  
 12357                                  ;************************************************************************
 12358                                  ;*									*
 12359                                  ;*	con_write - console write routine				*
 12360                                  ;*									*
 12361                                  ;*	entry:	es:di -> buffer						*
 12362                                  ;*		cx    =  count						*
 12363                                  ;*									*
 12364                                  ;************************************************************************
 12365                                  
 12366                                  con_writ:
 12367                                  		;jcxz	short bc_exvec
 12368 000001FC E3FC                    		jcxz	bc_exvec	; 19/10/2022
 12369                                  		; 12/12/2022
 12370                                  		;jcxz	cc_ret
 12371                                  con_lp:					
 12372 000001FE 268A05                  		mov	al, [es:di]
 12373 00000201 47                      		inc	di
 12374 00000202 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
 12375                                  					; AL = character to display
 12376 00000204 E2F8                    		loop	con_lp
 12377                                  cc_ret:					
 12378 00000206 F8                      		clc
 12379 00000207 C3                      		retn
 12380                                  
 12381                                  ; =============== S U B	R O U T	I N E =======================================
 12382                                  
 12383                                  ;************************************************************************
 12384                                  ;*									*
 12385                                  ;*	con_flush - flush out keyboard queue				*
 12386                                  ;*									*
 12387                                  ;************************************************************************
 12388                                  
 12389                                  con_flush:
 12390 00000208 C606[0C00]00            		mov	byte [altah], 0	; clear	out holding buffer
 12391                                  flloop:					; while	(charavail()) charread();	
 12392 0000020D B401                    		mov	ah, 1
 12393 0000020F CD16                    		int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
 12394                                  					; Return: ZF clear if character	in buffer
 12395                                  					; AH = scan code, AL = character
 12396                                  					; ZF set if no character in buffer
 12397 00000211 74F3                    		jz	short cc_ret
 12398 00000213 30E4                    		xor	ah, ah
 12399 00000215 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
 12400                                  					; Return: AH = scan code, AL = character
 12401 00000217 EBF4                    		jmp	short flloop
 12402                                  
 12403                                  ; ---------------------------------------------------------------------------
 12404                                  
 12405                                  ; 15/10/2022
 12406                                  
 12407                                  ;************************************************************************
 12408                                  ;*									*
 12409                                  ;*	some equates for rom bios printer i/o				*
 12410                                  ;*									*
 12411                                  ;************************************************************************
 12412                                  
 12413                                  ; ibm rom status bits (i don't trust them, neither should you)
 12414                                  ; warning!!! the ibm rom does not return just one bit. it returns a
 12415                                  ; whole slew of bits, only one of which is correct.
 12416                                  
 12417                                  ;notbusystatus	equ 10000000b		; not busy
 12418                                  ;nopaperstatus	equ 00100000b		; no more paper
 12419                                  ;prnselected	equ 00010000b		; printer selected
 12420                                  ;ioerrstatus	equ 00001000b		; some kinda error
 12421                                  ;timeoutstatus	equ 00000001b		; time out.
 12422                                  ;
 12423                                  ;noprinter	equ 00110000b		; no printer attached
 12424                                  
 12425                                  ; 18/03/2019 - Retro DOS v4.0
 12426                                  ;error_I24_out_of_paper	equ 9 ; MSDOS 6.0, ERR.INC, 1991
 12427                                  
 12428                                  ; ---------------------------------------------------------------------------
 12429                                  
 12430                                  ;************************************************************************
 12431                                  ;*									*
 12432                                  ;*	prn_input - return with no error but zero chars read		*
 12433                                  ;*									*
 12434                                  ;*	enter with cx = number of characters requested			*
 12435                                  ;*									*
 12436                                  ;************************************************************************
 12437                                  
 12438                                  prn_input:				; 2C7h:21Ah = 70h:278Ah
 12439 00000219 E8BBFE                  		call	bc_err_cnt	; reset	count to zero
 12440                                  					; (sub reqpkt.count,cx)
 12441                                  		; 12/12/2022
 12442                                  prn_done:
 12443 0000021C F8                      		clc			; but return with carry	reset for no error
 12444 0000021D C3                      		retn
 12445                                  ; ---------------------------------------------------------------------------
 12446                                  
 12447                                  ;************************************************************************
 12448                                  ;*									*
 12449                                  ;*	prn_writ - write cx bytes from es:di to printer device		*
 12450                                  ;*									*
 12451                                  ;*	auxnum has printer number					*
 12452                                  ;*									*
 12453                                  ;************************************************************************
 12454                                  
 12455                                  prn_writ:				; 2C7h:21Fh = 70h:278Fh
 12456                                  		;jcxz	short prn_done	; no chars to output
 12457 0000021E E3FC                    		jcxz	prn_done	; 19/10/2022
 12458                                  prn_loop:				
 12459 00000220 BB0200                  		mov	bx, 2		; retry	count
 12460                                  prn_out:				
 12461 00000223 E83600                  		call	prnstat		; get status
 12462 00000226 751D                    		jnz	short TestPrnError
 12463 00000228 268A05                  		mov	al, [es:di]	; get character	to print
 12464 0000022B 30E4                    		xor	ah, ah
 12465 0000022D E82E00                  		call	prnop		; print	to printer
 12466 00000230 7419                    		jz	short prn_con	; no error - continue
 12467 00000232 80FCFF                  		cmp	ah, 0FFh	; MODE_CTRLBRK
 12468 00000235 7509                    		jnz	short _prnwf
 12469 00000237 B00C                    		mov	al, 0Ch		; error_I24_gen_failure
 12470 00000239 C606[0C00]00            		mov	byte [altah], 0
 12471 0000023E EB08                    		jmp	short pmessg
 12472                                  ; ---------------------------------------------------------------------------
 12473                                  
 12474                                  _prnwf:					
 12475 00000240 F6C401                  		test	ah, 1		; timeoutstatus
 12476 00000243 7406                    		jz	short prn_con
 12477                                  TestPrnError:				
 12478 00000245 4B                      		dec	bx		; retry	until count is exhausted.
 12479 00000246 75DB                    		jnz	short prn_out
 12480                                  pmessg:					
 12481 00000248 E98CFE                  		jmp	bc_err_cnt
 12482                                  ; ---------------------------------------------------------------------------
 12483                                  
 12484                                  prn_con:				
 12485 0000024B 47                      		inc	di		; point	to next	char and continue
 12486 0000024C E2D2                    		loop	prn_loop
 12487                                  ;prn_done:				
 12488                                  		; 12/12/2022
 12489                                  prn_done2:
 12490                                  		;clc
 12491                                  		; cf=0
 12492 0000024E C3                      		retn
 12493                                  ; ---------------------------------------------------------------------------
 12494                                  
 12495                                  ;************************************************************************
 12496                                  ;*									*
 12497                                  ;*	prn_stat - device driver entry to return printer status		*
 12498                                  ;*									*
 12499                                  ;************************************************************************
 12500                                  
 12501                                  prn_stat:				; 2C7h:251h = 70h:27C1h
 12502 0000024F E80A00                  		call	prnstat		; device in dx
 12503 00000252 75F4                    		jnz	short pmessg
 12504 00000254 F6C480                  		test	ah, 80h		; notbusystatus
 12505                                  		;jnz	short prn_done
 12506                                  		; 12/12/2022
 12507 00000257 75F5                    		jnz	short prn_done2 ; cf=0
 12508 00000259 E96BFF                  		jmp	z_bus_exit
 12509                                  ; ---------------------------------------------------------------------------
 12510                                  
 12511                                  ;************************************************************************
 12512                                  ;*									*
 12513                                  ;*	prnstat - utility function to call ROM BIOS to check		*
 12514                                  ;*		 printer status. Return meaningful error code		*
 12515                                  ;*									*
 12516                                  ;************************************************************************
 12517                                  
 12518                                  prnstat:				
 12519 0000025C B402                    		mov	ah, 2		; set command for get status
 12520                                  					; PRINTER - GET	STATUS
 12521                                  					; DX = printer port (0-3)
 12522                                  					; Return: AH = status
 12523                                  
 12524                                  ; =============== S U B	R O U T	I N E =======================================
 12525                                  
 12526                                  ;************************************************************************
 12527                                  ;*									*
 12528                                  ;*	prnop - call ROM BIOS printer function in ah			*
 12529                                  ;*		return zero true if no error				*
 12530                                  ;*		return zero false if error, al = error code		*
 12531                                  ;*									*
 12532                                  ;************************************************************************
 12533                                  
 12534                                  prnop:
 12535                                  		; 20/12/2023 - Retro DOS v5.0
 12536                                  		; PCDOS 7.1 IBMBIO.COM
 12537                                  		
 12538                                  		;mov	dx, [auxnum]	; get printer number
 12539                                  		;int	17h
 12540                                  
 12541 0000025E 1E                      		push	ds
 12542 0000025F FF36[2100]              		push	word [auxnum]
 12543 00000263 31D2                    		xor	dx, dx ; 0
 12544 00000265 8EDA                    		mov	ds, dx
 12545 00000267 5A                      		pop	dx
 12546 00000268 9C                      		pushf			; simulate int 17h
 12547 00000269 FA                      		cli
 12548                                  		;call	dword ptr ds:5ghghCh
 12549 0000026A FF1E5C00                		call	far [17h*4]	; 0:5Ch = INT 17h vector
 12550 0000026E 1F                      		pop	ds
 12551                                  
 12552                                  	; This check was added to see if this is a case of no
 12553                                  	; printer being installed. This tests checks to be sure
 12554                                  	; the error is noprinter (30h)
 12555                                  
 12556 0000026F 50                      		push	ax
 12557 00000270 80E430                  		and	ah, 30h
 12558 00000273 80FC30                  		cmp	ah, 30h		; noprinter
 12559 00000276 58                      		pop	ax
 12560 00000277 7506                    		jnz	short NextTest
 12561 00000279 80E4DF                  		and	ah, 0DFh	; ~nopaperstatus
 12562 0000027C 80CC08                  		or	ah, 8		; ioerrstatus
 12563                                  
 12564                                  ; examine the status bits to see if an error occurred. unfortunately, several
 12565                                  ; of the bits are set so we have to pick and choose. we must be extremely
 12566                                  ; careful about breaking basic.
 12567                                  
 12568                                  NextTest:				
 12569 0000027F F6C428                  		test	ah, 28h		; (ioerrstatus+nopaperstatus)
 12570                                  					; i/o error?
 12571 00000282 740A                    		jz	short checknotready ; no, try not ready
 12572                                  
 12573                                  ; at this point, we know we have an error. the converse is not true
 12574                                  
 12575 00000284 B009                    		mov	al, 9		; error_I24_out_of_paper
 12576                                  					; first, assume	out of paper
 12577 00000286 F6C420                  		test	ah, 20h		; out of paper set?
 12578 00000289 7502                    		jnz	short ret1	; yes, error is	set
 12579 0000028B FEC0                    		inc	al		; return al=10 (i/o error)
 12580                                  ret1:					
 12581 0000028D C3                      		retn
 12582                                  ; ---------------------------------------------------------------------------
 12583                                  
 12584                                  checknotready:				
 12585 0000028E B002                    		mov	al, 2		; assume not-ready
 12586 00000290 F6C401                  		test	ah, 1
 12587 00000293 C3                      		retn
 12588                                  
 12589                                  ; ---------------------------------------------------------------------------
 12590                                  
 12591                                  ;************************************************************************
 12592                                  ;*									*
 12593                                  ;*	prn_tilbusy - output until busy. Used by print spooler.		*
 12594                                  ;*		     this entry point should never block waiting for	*
 12595                                  ;*		     device to come ready.				*
 12596                                  ;*									*
 12597                                  ;*	inputs:	cx = count, es:di -> buffer				*
 12598                                  ;*	outputs: set the number of bytes transferred in the		*
 12599                                  ;*		 device driver request packet				*
 12600                                  ;*									*
 12601                                  ;************************************************************************
 12602                                  
 12603                                  		; 19/10/2022
 12604                                  prn_tilbusy:				; 2C7h:28Bh = 70h:27FBh
 12605 00000294 89FE                    		mov	si, di		; everything is	set for	lodsb
 12606                                  prn_tilbloop:				
 12607 00000296 51                      		push	cx
 12608 00000297 53                      		push	bx
 12609 00000298 30FF                    		xor	bh, bh
 12610 0000029A 8A1E[8004]              		mov	bl, [printdev]
 12611 0000029E D1E3                    		shl	bx, 1
 12612                                  		;mov	cx, ds:wait_count[bx] ;	wait count times to come ready
 12613 000002A0 8B8F[8104]              		mov	cx, [wait_count+bx]
 12614 000002A4 5B                      		pop	bx
 12615                                  prn_getstat:				
 12616 000002A5 E8B4FF                  		call	prnstat		; get status
 12617 000002A8 7514                    		jnz	short prn_bperr	; error
 12618 000002AA F6C480                  		test	ah, 80h		; ready	yet?
 12619 000002AD E1F6                    		loope	prn_getstat	; no, go for more
 12620 000002AF 59                      		pop	cx		; get original count
 12621 000002B0 740D                    		jz	short prn_berr	; still	not ready => done
 12622 000002B2 26                      		es
 12623 000002B3 AC                      		lodsb
 12624                                  		;lods	byte ptr es:[si] ; es
 12625                                  					; lodsb
 12626 000002B4 30E4                    		xor	ah, ah
 12627 000002B6 E8A5FF                  		call	prnop
 12628 000002B9 7504                    		jnz	short prn_berr	; error
 12629 000002BB E2D9                    		loop	prn_tilbloop
 12630                                  		; 12/12/2022
 12631                                  		; cf=0 (prnop)
 12632                                  		;clc			; normal no-error return
 12633 000002BD C3                      		retn			;   from device driver
 12634                                  
 12635                                  ; ---------------------------------------------------------------------------
 12636                                  
 12637                                  prn_bperr:				
 12638 000002BE 59                      		pop	cx		; restore transfer count from stack
 12639                                  prn_berr:				
 12640 000002BF E915FE                  		jmp	bc_err_cnt
 12641                                  ; ---------------------------------------------------------------------------
 12642                                  
 12643                                  ; 15/10/2022
 12644                                  
 12645                                  ;************************************************************************
 12646                                  ;*									*
 12647                                  ;*	prn_genioctl - get/set printer retry count			*
 12648                                  ;*									*
 12649                                  ;************************************************************************
 12650                                  
 12651                                  ; IOCTL.INC (MSDOS 6.0, 1991)
 12652                                  ; 11/01/2019
 12653                                  
 12654                                  ;********************************;*
 12655                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
 12656                                  ;********************************;*
 12657                                  
 12658                                  ;;RAWIO SUB-FUNCTIONS
 12659                                  ;;get_retry_count equ 65h
 12660                                  ;;set_retry_count equ 45h
 12661                                  
 12662                                  ;;struc A_RETRYCOUNT
 12663                                  ;;.rc_count: resw 1
 12664                                  ;;endstruc
 12665                                  
 12666                                  ;ioc_pc equ 5
 12667                                  
 12668                                  ; ---------------------------------------------------------------------------
 12669                                  
 12670                                  		; 19/10/2022
 12671                                  prn_genioctl:				; 2C7h:2BAh = 70h:282Ah
 12672 000002C2 C43E[1200]              		les	di, [ptrsav]
 12673 000002C6 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
 12674                                  					; ioc_pc
 12675 000002CB 7403                    		jz	short prnfunc_ok
 12676                                  
 12677                                  prnfuncerr:				
 12678 000002CD E905FE                  		jmp	bc_cmderr
 12679                                  ; ---------------------------------------------------------------------------
 12680                                  
 12681                                  prnfunc_ok:				
 12682 000002D0 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
 12683 000002D4 26C47D13                		les	di, [es:di+19]	; [es:di+IOCTL_REQ.GENERICIOCTL_PACKET]
 12684 000002D8 30FF                    		xor	bh, bh
 12685                                  		;mov	bl, ds:printdev	; get index into retry counts
 12686 000002DA 8A1E[8004]              		mov	bl, [printdev]
 12687 000002DE D1E3                    		shl	bx, 1
 12688                                  		;mov	cx, ds:wait_count[bx] ;	pull out retry count for device
 12689 000002E0 8B8F[8104]              		mov	cx, [wait_count+bx]
 12690 000002E4 3C65                    		cmp	al, 65h		; get_retry_count
 12691 000002E6 7407                    		jz	short prngetcount
 12692 000002E8 3C45                    		cmp	al, 45h		; set_retry_count
 12693 000002EA 75E1                    		jnz	short prnfuncerr
 12694 000002EC 268B0D                  		mov	cx, [es:di]
 12695                                  prngetcount:				
 12696                                  		;mov	ds:wait_count[bx], cx
 12697 000002EF 898F[8104]              		mov	[wait_count+bx], cx
 12698 000002F3 26890D                  		mov	[es:di], cx	; [es:di+A_RETRYCOUNT.RC_COUNT]
 12699                                  					; return current retry count
 12700                                  		; 12/12/2022
 12701                                  		; cf=0
 12702                                  		;clc
 12703 000002F6 C3                      		retn
 12704                                  ; ---------------------------------------------------------------------------
 12705                                  
 12706                                  ;************************************************************************
 12707                                  ;*									*
 12708                                  ;*  prn_ioctl_query							*
 12709                                  ;*									*
 12710                                  ;*  Added for 5.00							*
 12711                                  ;************************************************************************
 12712                                  
 12713                                  prn_ioctl_query:			; 2C7h:2F0h = 70h:2860h
 12714 000002F7 C43E[1200]              		les	di, [ptrsav]
 12715 000002FB 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
 12716                                  					; ioc_pc
 12717 00000300 750D                    		jnz	short prn_query_err
 12718 00000302 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
 12719 00000306 3C65                    		cmp	al, 65h		; GET_RETRY_COUNT
 12720 00000308 7404                    		jz	short IOCtlSupported
 12721 0000030A 3C45                    		cmp	al, 45h		; SET_RETRY_COUNT
 12722 0000030C 7501                    		jnz	short prn_query_err
 12723                                  IOCtlSupported:	
 12724                                  		; 12/12/2022
 12725                                  		; cf=0		
 12726                                  		;clc
 12727 0000030E C3                      		retn
 12728                                  ; ---------------------------------------------------------------------------
 12729                                  
 12730                                  prn_query_err:
 12731                                  		; 12/12/2022				
 12732                                  		;stc
 12733 0000030F E9C3FD                  		jmp	bc_cmderr ; (bc_cmderr sets cf to 1)
 12734                                  ; ---------------------------------------------------------------------------
 12735                                  
 12736                                  ;************************************************************************
 12737                                  ;*									*
 12738                                  ;*	aux port driver code -- "aux" == "com1"				*
 12739                                  ;*									*
 12740                                  ;*	the device driver entry/dispatch code sets up auxnum to		*
 12741                                  ;*	give the com port number to use (0=com1, 1=com2, 2=com3...)	*
 12742                                  ;*									*
 12743                                  ;************************************************************************
 12744                                  
 12745                                  ;	values in ah, requesting function of int 14h in rom bios
 12746                                  
 12747                                  ;auxfunc_send	 equ	1	;transmit
 12748                                  ;auxfunc_receive equ	2	;read
 12749                                  ;auxfunc_status	 equ	3	;request status
 12750                                  
 12751                                  ;	error flags, reported by int 14h, reported in ah:
 12752                                  
 12753                                  ;flag_data_ready equ	01h	;data ready
 12754                                  ;flag_overrun	 equ	02h	;overrun error
 12755                                  ;flag_parity	 equ	04h	;parity error
 12756                                  ;flag_frame	 equ	08h	;framing error
 12757                                  ;flag_break	 equ	10h	;break detect
 12758                                  ;flag_tranhol_emp equ	20h	;transmit holding register empty
 12759                                  ;flag_timeout	 equ	80h	;timeout
 12760                                  
 12761                                  ;	these flags reported in al:
 12762                                  
 12763                                  ;flag_cts	 equ	10h	;clear to send
 12764                                  ;flag_dsr	 equ	20h	;data set ready
 12765                                  ;flag_rec_sig	 equ	80h	;receive line signal detect
 12766                                  
 12767                                  ; ---------------------------------------------------------------------------
 12768                                  
 12769                                  ;************************************************************************
 12770                                  ;*									*
 12771                                  ;*	aux_read - read cx bytes from [auxnum] aux port to buffer	*
 12772                                  ;*		   at es:di						*
 12773                                  ;*									*
 12774                                  ;************************************************************************
 12775                                  
 12776                                  aux_read:				; 2C7h:30Dh = 70h:287Dh
 12777                                  		;jcxz	short exvec2
 12778 00000312 E311                    		jcxz	exvec2		; 19/10/2022
 12779 00000314 E88000                  		call	getbx		; put address of auxbuf	in bx
 12780 00000317 30C0                    		xor	al, al
 12781 00000319 8607                    		xchg	al, [bx]
 12782 0000031B 08C0                    		or	al, al
 12783 0000031D 7503                    		jnz	short aux2
 12784                                  aux1:					
 12785 0000031F E80500                  		call	auxin		; get character	from port
 12786                                  					; won't return if error
 12787                                  aux2:					
 12788 00000322 AA                      		stosb
 12789 00000323 E2FA                    		loop	aux1		; if more characters, go around	again
 12790                                  exvec2:					
 12791 00000325 F8                      		clc			; all done, successful exit
 12792                                  auxin_retn:	; 18/12/2022
 12793 00000326 C3                      		retn
 12794                                  ; ---------------------------------------------------------------------------
 12795                                  
 12796                                  ;************************************************************************
 12797                                  ;*									*
 12798                                  ;*	auxin - call rom bios to read character from aux port		*
 12799                                  ;*		if error occurs, map the error and return one		*
 12800                                  ;*		level up to device driver exit code, setting		*
 12801                                  ;*		the number of bytes transferred appropriately		*
 12802                                  ;*									*
 12803                                  ;************************************************************************
 12804                                  
 12805                                  auxin:					
 12806 00000327 B402                    		mov	ah, 2		; auxfunc_receive
 12807 00000329 E83A00                  		call	auxop
 12808 0000032C F6C40E                  		test	ah, 0Eh		; flag_frame|flag_parity|flag_overrun
 12809                                  		;jnz	short arbad	; skip if any error bits set
 12810                                  		;retn
 12811                                  		; 25/06/2023 (BugFix)
 12812 0000032F 74F5                    		jz	short auxin_retn
 12813                                  ; ---------------------------------------------------------------------------
 12814                                  
 12815                                  arbad:					
 12816 00000331 58                      		pop	ax		; remove return	address	(near call)
 12817                                  		;xor	al, al
 12818                                  		;or	al, 0B0h	; flag_rec_sig|	flag_dsr|flag_cts
 12819                                  		; 11/08/2023
 12820 00000332 B0B0                    		mov	al, 0B0h	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0334h
 12821 00000334 E9A0FD                  		jmp	bc_err_cnt
 12822                                  
 12823                                  ; ---------------------------------------------------------------------------
 12824                                  
 12825                                  ;************************************************************************
 12826                                  ;*									*
 12827                                  ;*	aux_rdnd - non-destructive aux port read			*
 12828                                  ;*									*
 12829                                  ;************************************************************************
 12830                                  
 12831                                  aux_rdnd:				; 2C7h:335h = 70h:28A5h
 12832 00000337 E85D00                  		call	getbx
 12833 0000033A 8A07                    		mov	al, [bx]	; have bx point	to auxbuf
 12834 0000033C 08C0                    		or	al, al		; if al	is non-zero (char in buffer)
 12835 0000033E 7511                    		jnz	short auxdrx	; then return character
 12836 00000340 E82100                  		call	auxstat		; if not, get status of	aux device
 12837 00000343 F6C401                  		test	ah, 1		; flag_data_ready - test data ready
 12838 00000346 740C                    		jz	short auxbus	; then device is busy (not ready)
 12839 00000348 A820                    		test	al, 20h		; flag_dsr - test data set ready
 12840 0000034A 7408                    		jz	short auxbus	; then device is busy (not ready)
 12841 0000034C E8D8FF                  		call	auxin		; else aux is ready, get character
 12842 0000034F 8807                    		mov	[bx], al
 12843                                  auxdrx:					
 12844 00000351 E99EFE                  		jmp	rdexit		; return busy status
 12845                                  ; ---------------------------------------------------------------------------
 12846                                  
 12847                                  auxbus:					
 12848 00000354 E970FE                  		jmp	z_bus_exit
 12849                                  ; ---------------------------------------------------------------------------
 12850                                  
 12851                                  ;************************************************************************
 12852                                  ;*									*
 12853                                  ;*	aux_wrst - return aux port write status				*
 12854                                  ;*									*
 12855                                  ;************************************************************************
 12856                                  
 12857                                  aux_wrst:				; 2C7h:355h = 70h:28C5h
 12858 00000357 E80A00                  		call	auxstat		; get status of	aux in ax
 12859 0000035A A820                    		test	al, 20h		; test data set	ready
 12860 0000035C 74F6                    		jz	short auxbus	; then device is busy (not ready)
 12861 0000035E F6C420                  		test	ah, 20h		; flag_tranhol_emp - test transmit hold	reg empty
 12862 00000361 74F1                    		jz	short auxbus	; then device is busy (not ready)
 12863                                  		; 12/12/2022
 12864                                  		; cf=0	; (test instruction resets cf)
 12865                                  		;clc
 12866 00000363 C3                      		retn
 12867                                  ; ---------------------------------------------------------------------------
 12868                                  
 12869                                  ;************************************************************************
 12870                                  ;*									*
 12871                                  ;*	auxstat - call rom bios to determine aux port status		*
 12872                                  ;*									*
 12873                                  ;*	exit:	ax = status						*
 12874                                  ;*		dx = [auxnum]						*
 12875                                  ;*									*
 12876                                  ;************************************************************************
 12877                                  
 12878                                  auxstat:				
 12879 00000364 B403                    		mov	ah, 3		; auxfunc_status
 12880                                  
 12881                                  		; fall into auxop
 12882                                  
 12883                                  ; =============== S U B	R O U T	I N E =======================================
 12884                                  
 12885                                  ;************************************************************************
 12886                                  ;*									*
 12887                                  ;*	auxop - perform rom-biox aux port interrupt			*
 12888                                  ;*									*
 12889                                  ;*	entry:	ah = int 14h function number				*
 12890                                  ;*	exit:	ax = results						*
 12891                                  ;*		dx = [auxnum]						*
 12892                                  ;*									*
 12893                                  ;************************************************************************
 12894                                  
 12895                                  auxop:		; proc near
 12896                                  		; 20/12/2023 - Retro DOS v5.0
 12897                                  		;mov	dx, [auxnum]	; ah=function code
 12898                                  		;			; 0=init, 1=send, 2=receive, 3=status
 12899                                  		;			; get port number
 12900                                  		;
 12901                                  		;int	14h		; SERIAL I/O - GET USART STATUS
 12902                                  		;			; DX = port number (0-3)
 12903                                  		;			; Return: AX = port status code
 12904                                  		; (PCDOS 7.1 IBMBIO.COM)
 12905 00000366 1E                      		push	ds
 12906 00000367 FF36[2100]              		push	word [auxnum]
 12907 0000036B 31D2                    		xor	dx, dx ; 0
 12908 0000036D 8EDA                    		mov	ds, dx
 12909 0000036F 5A                      		pop	dx
 12910 00000370 9C                      		pushf			; simulate INT 14h
 12911 00000371 FA                      		cli
 12912                                  		;call	dword ptr ds:50h
 12913 00000372 FF1E5000                		call	far [14h*4]	; INT 14h vector (14h*4 = 50h)
 12914 00000376 1F                      		pop	ds
 12915 00000377 C3                      		retn
 12916                                  
 12917                                  ; ---------------------------------------------------------------------------
 12918                                  
 12919                                  ;************************************************************************
 12920                                  ;*									*
 12921                                  ;*	aux_flsh - flush aux input buffer - set contents of		*
 12922                                  ;*		   auxbuf [auxnum] to zero				*
 12923                                  ;*									*
 12924                                  ;*	cas - shouldn't this code call the rom bios input function	*
 12925                                  ;*	      repeatedly until it isn't ready?  to flush out any	*
 12926                                  ;*	      pending serial input queue if there's a tsr like MODE	*
 12927                                  ;*	      which is providing interrupt-buffering of aux port?	*
 12928                                  ;*									*
 12929                                  ;************************************************************************
 12930                                  
 12931                                  aux_flsh:				; 2C7h:36Ch = 70h:28DCh
 12932 00000378 E81C00                  		call	getbx		; flush	aux input buffer
 12933 0000037B C60700                  		mov	byte [bx], 0	; get bx to point to auxbuf
 12934                                  					; zero out buffer
 12935                                  		;clc			; all done, successful return
 12936                                  		; 12/12/2022
 12937                                  		; cf=0 ('add' instruction in 'getbx')
 12938 0000037E C3                      		retn
 12939                                  ; ---------------------------------------------------------------------------
 12940                                  
 12941                                  ;************************************************************************
 12942                                  ;*									*
 12943                                  ;*	aux_writ - write to aux device					*
 12944                                  ;*									*
 12945                                  ;************************************************************************
 12946                                  
 12947                                  aux_writ:				; 2C7h:374h = 70h:28E4h
 12948                                  		;jcxz	short exvec2	; write	to aux device (if cx > 0)
 12949 0000037F E3A4                    		jcxz	exvec2		; 19/10/2022
 12950                                  aux_loop:				
 12951 00000381 268A05                  		mov	al, [es:di]	; get character	to be written
 12952                                  					; move di pointer to next character
 12953 00000384 47                      		inc	di
 12954 00000385 B401                    		mov	ah, 1		; auxfunc_send - indicates a write
 12955 00000387 E8DCFF                  		call	auxop		; send character over aux port
 12956 0000038A F6C480                  		test	ah, 80h		; check	for error
 12957 0000038D 7405                    		jz	short awok	; then no error
 12958 0000038F B00A                    		mov	al, 10		; else indicate	write fault
 12959 00000391 E943FD                  		jmp	bc_err_cnt	; call error routines
 12960                                  ; ---------------------------------------------------------------------------
 12961                                  
 12962                                  awok:					
 12963 00000394 E2EB                    		loop	aux_loop	; if cx	is non-zero,
 12964                                  					; still	more character to print
 12965                                  		;clc			; all done, successful return
 12966                                  		; 12/12/2022
 12967                                  		; cf=0 (test instruction above)	
 12968 00000396 C3                      		retn
 12969                                  
 12970                                  ; =============== S U B	R O U T	I N E =======================================
 12971                                  
 12972                                  ;************************************************************************
 12973                                  ;*									*
 12974                                  ;*	getbx - return bx -> single byte input buffer for		*
 12975                                  ;*		selected aux port ([auxnum])				*
 12976                                  ;*									*
 12977                                  ;************************************************************************
 12978                                  
 12979                                  getbx:	
 12980 00000397 8B1E[2100]              		mov	bx, [auxnum]	; return bx -> single byte input buffer
 12981                                  					; for selected aux port	([auxnum])
 12982                                  		;add	bx, offset auxbuf
 12983 0000039B 81C3[1600]              		add	bx, auxbuf	; 19/10/2022
 12984                                  		; 12/12/2022
 12985                                  		; cf=0 (if [auxnum] is valid number) 
 12986 0000039F C3                      		retn
 12987                                  
 12988                                  ; ---------------------------------------------------------------------------
 12989                                  
 12990                                  ; 15/10/2022
 12991                                  
 12992                                  ;----------------------------------------------------------------
 12993                                  ;								:
 12994                                  ;		    clock device driver 			:
 12995                                  ;								:
 12996                                  ;								:
 12997                                  ;   this file contains the clock device driver. 		:
 12998                                  ;								:
 12999                                  ;   the routines in this files are:				:
 13000                                  ;								:
 13001                                  ;	routine 		function			:
 13002                                  ;	------- 		--------			:
 13003                                  ;	tim_writ		set the current time		:
 13004                                  ;	tim_read		read the current time		:
 13005                                  ;	time_to_ticks		convert time to corresponding	:
 13006                                  ;				  number of clock ticks 	:
 13007                                  ;								:
 13008                                  ; the clock ticks at the rate of:				:
 13009                                  ;								:
 13010                                  ;	1193180/65536 ticks/second (about 18.2 ticks per second):
 13011                                  ; see each routine for information on the use.			:
 13012                                  ;								:
 13013                                  ;----------------------------------------------------------------
 13014                                  
 13015                                  ; convert time to ticks
 13016                                  ; input : time in cx and dx
 13017                                  ; ticks returned in cx:dx
 13018                                  
 13019                                  ;19/07/2019
 13020                                  ;09/03/2019
 13021                                  
 13022                                  time_to_ticks:				; 0070h:2906h =	02C7h:0396h
 13023                                  
 13024                                  ; first convert from hour,min,sec,hund. to
 13025                                  ; total number of 100th of seconds
 13026                                  
 13027 000003A0 B03C                    		mov	al, 60
 13028 000003A2 F6E5                    		mul	ch		; hours	to minutes
 13029 000003A4 B500                    		mov	ch, 0
 13030 000003A6 01C8                    		add	ax, cx		; total	minutes
 13031 000003A8 B97017                  		mov	cx, 6000	; 60*100
 13032 000003AB 89D3                    		mov	bx, dx		; get out of the way of	the multiply
 13033 000003AD F7E1                    		mul	cx		; convert to 1/100 sec
 13034 000003AF 89C1                    		mov	cx, ax
 13035 000003B1 B064                    		mov	al, 100
 13036 000003B3 F6E7                    		mul	bh		; convert seconds to 1/100 sec
 13037 000003B5 01C1                    		add	cx, ax		; combine seconds with hours and min
 13038 000003B7 83D200                  		adc	dx, 0		; ripple carry
 13039 000003BA B700                    		mov	bh, 0
 13040 000003BC 01D9                    		add	cx, bx		; combine 1/100	sec
 13041 000003BE 83D200                  		adc	dx, 0
 13042                                  
 13043                                  	; dx:cx is time in 1/100 sec
 13044                                  
 13045 000003C1 92                      		xchg	ax, dx
 13046 000003C2 91                      		xchg	ax, cx		; now time is in cx:ax
 13047 000003C3 BB0BE9                  		mov	bx, 59659
 13048 000003C6 F7E3                    		mul	bx		; multiply low half
 13049 000003C8 87D1                    		xchg	dx, cx
 13050 000003CA 92                      		xchg	ax, dx		; cx->ax, ax->dx, dx->cx
 13051 000003CB F7E3                    		mul	bx		; multiply high	half
 13052 000003CD 01C8                    		add	ax, cx		; combine overlapping products
 13053 000003CF 83D200                  		adc	dx, 0
 13054 000003D2 92                      		xchg	ax, dx		; ax:dx=time*59659
 13055 000003D3 BB0500                  		mov	bx, 5
 13056 000003D6 F6F3                    		div	bl		; divide high half by 5
 13057 000003D8 88C1                    		mov	cl, al
 13058 000003DA B500                    		mov	ch, 0
 13059 000003DC 88E0                    		mov	al, ah		; remainder of divide-by-5
 13060 000003DE 98                      		cbw
 13061 000003DF 92                      		xchg	ax, dx		; use it to extend low half
 13062 000003E0 F7F3                    		div	bx		; divide low half by 5
 13063 000003E2 89C2                    		mov	dx, ax		; cx:dx	is now number of ticks in time
 13064 000003E4 CB                      		retf			; far return
 13065                                  
 13066                                  ; ---------------------------------------------------------------------------
 13067                                  
 13068                                  ; 17/10/2022
 13069                                  ; 15/10/2022
 13070                                  
 13071                                  ;--------------------------------------------------------------------
 13072                                  ;
 13073                                  ; tim_writ sets the current time
 13074                                  ;
 13075                                  ; on entry es:[di] has the current time:
 13076                                  ;
 13077                                  ;	number of days since 1-1-80	(word)
 13078                                  ;	minutes (0-59)			(byte)
 13079                                  ;	hours (0-23)			(byte)
 13080                                  ;	hundredths of seconds (0-99)	(byte)
 13081                                  ;	seconds (0-59)			(byte)
 13082                                  ;
 13083                                  ; each number has been checked for the correct range.
 13084                                  ;
 13085                                  ;	NOTE: Any changes in this routine probably require corresponding
 13086                                  ;	changes in the version that is built with the power manager driver.
 13087                                  ;	See ptime.asm.
 13088                                  ;
 13089                                  ;--------------------------------------------------------------------
 13090                                  
 13091                                  	; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 13092                                  	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:03EAh
 13093                                  tim_writ:				; 2C7h:3DBh = 70h:294Bh
 13094 000003E5 268B05                  		mov	ax, [es:di]
 13095 000003E8 50                      		push	ax		; daycnt. we need to set this at the very
 13096                                  					; end to avoid tick windows.
 13097 000003E9 803E[8C04]00            		cmp	byte [havecmosclock], 0
 13098                                  		;cmp	ds:havecmosclock, 0
 13099 000003EE 7423                    		jz	short no_cmos_1
 13100 000003F0 268A4503                		mov	al, [es:di+3]	; near indirect	calls
 13101                                  					; get binary hours
 13102                                  					; convert to bcd
 13103                                  		;call	far [bintobcd]
 13104                                  		;;call	ds:bintobcd	; call far [bintobcd]
 13105                                  		; 08/08/2023
 13106 000003F4 E8E800                  		call	bintobcd
 13107 000003F7 88C5                    		mov	ch, al		; ch = bcd hours
 13108 000003F9 268A4502                		mov	al, [es:di+2]	; get binary minutes
 13109                                  		;call	far [bintobcd]
 13110                                  		;;call	ds:bintobcd	; convert to bcd
 13111 000003FD E8DF00                  		call	bintobcd
 13112 00000400 88C1                    		mov	cl, al		; cl = bcd minutes
 13113 00000402 268A4505                		mov	al, [es:di+5]	; get binary seconds
 13114                                  		;call	far [bintobcd]
 13115                                  		;;call	ds:bintobcd
 13116 00000406 E8D600                  		call	bintobcd
 13117                                  
 13118 00000409 88C6                    		mov	dh, al		; dh = bcd seconds
 13119 0000040B B200                    		mov	dl, 0		; dl = 0 (st) or 1 (dst)
 13120 0000040D FA                      		cli
 13121 0000040E B403                    		mov	ah, 3
 13122 00000410 CD1A                    		int	1Ah		; CLOCK	- SET REAL TIME	CLOCK (AT,XT286,CONV,PS)
 13123                                  					; CH = hours in	BCD, CL	= minutes in BCD
 13124                                  					;  DH =	seconds	in BCD,DL = 01h	if daylight savings, 00h if standard time
 13125                                  					; Return: CMOS clock set
 13126 00000412 FB                      		sti
 13127                                  no_cmos_1:				
 13128 00000413 268B4D02                		mov	cx, [es:di+2]
 13129 00000417 268B5504                		mov	dx, [es:di+4]
 13130                                  		; 17/10/2022
 13131 0000041B FF1E[0606]              		call	far [ttticks]
 13132                                  		;call	dword ptr ds:ttticks ; call far	[ttticks]
 13133                                  					; convert time to ticks
 13134                                  					; cx:dx	now has	time in	ticks
 13135 0000041F FA                      		cli			; turn off timer
 13136 00000420 B401                    		mov	ah, 1
 13137 00000422 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
 13138                                  					; CX:DX	= clock	count
 13139                                  					; Return: time of day set
 13140                                  		;pop	ds:daycnt
 13141 00000424 8F06[8904]              		pop	word [daycnt]
 13142 00000428 FB                      		sti
 13143                                  		;cmp	ds:havecmosclock, 0
 13144 00000429 803E[8C04]00            		cmp	byte [havecmosclock], 0
 13145 0000042E 7409                    		jz	short no_cmos_2
 13146                                  
 13147                                  		; 08/08/2023
 13148                                  		;call	far [daycnttoday]
 13149                                  		;;call	ds:daycnttoday	; call far [daycnttoday]
 13150                                  					; convert to bcd format
 13151 00000430 E80700                  		call	daycnttoday
 13152                                  
 13153 00000433 FA                      		cli
 13154 00000434 B405                    		mov	ah, 5
 13155 00000436 CD1A                    		int	1Ah		; CLOCK	- SET DATE IN REAL TIME	CLOCK (AT,XT286,CONV,PS)
 13156                                  					; DL = day in BCD, DH =	month in BCD, CL = year	in BCD
 13157                                  					; CH = century (19h or 20h)
 13158                                  					; Return: CMOS clock set
 13159 00000438 FB                      		sti
 13160                                  no_cmos_2:
 13161                                  		; 12/12/2022
 13162                                  		; cf=0
 13163                                  		;clc
 13164 00000439 C3                      		retn
 13165                                  
 13166                                  ; ---------------------------------------------------------------------------
 13167                                  
 13168                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 13169                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0440h
 13170                                  %if 1 
 13171                                  
 13172                                  ; CMOS Clock setting support routines used by MSCLOCK.
 13173                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
 13174                                  
 13175                                  daycnttoday:	; proc near
 13176                                  
 13177                                  ; entry: [daycnt] = number of days since 1-1-80
 13178                                  ;
 13179                                  ; return: ch - century in bcd
 13180                                  ;	  cl - year in bcd
 13181                                  ;	  dh - month in bcd
 13182                                  ;	  dl - day in bcd
 13183                                  
 13184                                  		; 20/12/2023 - Retro DOS v5.0
 13185                                  
 13186                                  		; 08/08/2023 (ds:) (near proc)
 13187                                  		; 16/10/2022 (cs:) (far proc)		
 13188 0000043A FF36[8904]              		push	word [daycnt] ; save daycnt
 13189 0000043E 813E[8904]891C          		cmp	word [daycnt], 7305 ; (365*20+(20/4))
 13190                                  					; # days from 1-1-1980 to 1-1-2000
 13191 00000444 7308                    		jnb	short century20
 13192                                  		;mov	byte [base_century], 19
 13193                                  		;mov	byte [base_year], 80
 13194                                  		; 08/08/2023
 13195 00000446 C706[8D04]1350          		mov	word [base_century], 5013h
 13196 0000044C EB0C                    		jmp	short years
 13197                                  ; ----------------------------------------------------------------------------
 13198                                  		
 13199                                  century20:				
 13200                                  		;mov	byte [base_century], 20
 13201                                  		;mov	byte [base_year], 0
 13202                                  		; 08/08/2023
 13203 0000044E C706[8D04]1400          		mov	word [base_century], 20
 13204 00000454 812E[8904]891C          		sub	word [daycnt], 7305 ; (365*20+(20/4))
 13205                                  					; adjust daycnt
 13206                                  years:					
 13207 0000045A 31D2                    		xor	dx, dx
 13208 0000045C A1[8904]                		mov	ax, [daycnt]
 13209 0000045F BBB505                  		mov	bx, 1461	; (366+365*3)
 13210                                  					; # of days in a Leap year block
 13211 00000462 F7F3                    		div	bx		; AX = # of leap block,	DX = daycnt
 13212 00000464 8916[8904]              		mov	[daycnt], dx	; save daycnt left
 13213 00000468 B304                    		mov	bl, 4
 13214 0000046A F6E3                    		mul	bl		; AX = # of years. Less	than 100
 13215 0000046C 0006[8E04]              		add	[base_year], al ; So, ah = 0. Adjust year
 13216 00000470 FF06[8904]              		inc	word [daycnt]	; set daycnt to	1 base
 13217                                  		; 08/08/2023
 13218 00000474 BB6E01                  		mov	bx, 366
 13219 00000477 B90300                  		mov	cx, 3
 13220                                  		;cmp	word [daycnt], 366 ; daycnt=remainder of leap year
 13221 0000047A 391E[8904]              		cmp	[daycnt], bx ; 366
 13222 0000047E 7619                    		jbe	short leapyear	; within 366+355+355+355 days.
 13223 00000480 FE06[8E04]              		inc	byte [base_year] ; if daycnt <= 366, then leap year
 13224                                  		;sub	word [daycnt], 366 ; else daycnt--, base_year++ ;
 13225 00000484 291E[8904]              		sub	[daycnt], bx ; 366 ; 08/08/2023
 13226                                  		;mov	cx, 3		; And next three years are normal
 13227                                  		; 08/08/2023
 13228 00000488 4B                      		dec	bx ; 365
 13229                                  regularyear:	; 20/12/2023
 13230                                  		;cmp	word [daycnt], 365 ; for(i=1; i>3 or daycnt <=365; i++)
 13231 00000489 391E[8904]              		cmp	[daycnt], bx ; 365 ; 08/08/2023
 13232 0000048D 760F                    		jbe	short yeardone	; {if (daycnt >	365)
 13233 0000048F FE06[8E04]              		inc	byte [base_year] ; { daycnt -=	365
 13234                                  		;sub	word [daycnt], 365 ; }
 13235 00000493 291E[8904]              		sub	[daycnt], bx ; 365 ; 08/08/2023
 13236 00000497 E2F0                    		loop	regularyear	; }
 13237                                  					;
 13238                                  					; should never fall through loop
 13239                                  leapyear:	
 13240 00000499 C606[9004]1D            		mov	byte [february], 29 ; 08/08/2023			
 13241                                  		;mov	byte [month_tab+1], 29 ; leap year.
 13242                                  					; change month table.
 13243                                  yeardone:				
 13244 0000049E 31DB                    		xor	bx, bx
 13245 000004A0 31D2                    		xor	dx, dx
 13246 000004A2 A1[8904]                		mov	ax, [daycnt]
 13247                                  		;mov	si, offset month_tab
 13248 000004A5 BE[8F04]                		mov	si, month_tab	; 19/10/2022
 13249                                  		;mov	cx, 12
 13250                                  		; 08/08/2023
 13251 000004A8 B10C                    		mov	cl, 12
 13252                                  months:					
 13253 000004AA FEC3                    		inc	bl
 13254                                  		; 08/08/2023
 13255 000004AC 8A14                    		mov	dl, [si]	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:04B7h
 13256 000004AE 39D0                    		cmp	ax, dx		; cmp daycnt for each month till fit
 13257                                  					; dh=0
 13258 000004B0 7605                    		jbe	short month_done
 13259 000004B2 46                      		inc	si		; next month
 13260 000004B3 29D0                    		sub	ax, dx		; adjust daycnt
 13261 000004B5 E2F3                    		loop	months		;
 13262                                  					; should never fall through loop
 13263                                  month_done:	
 13264 000004B7 C606[9004]1C            		mov	byte [february], 28 ; 08/08/2023
 13265                                  		;mov	byte [month_tab+1], 28
 13266                                  					; restore month table value
 13267 000004BC 88DA                    		mov	dl, bl
 13268 000004BE 8A36[8E04]              		mov	dh, [base_year]
 13269 000004C2 8A0E[8D04]              		mov	cl, [base_century] ; al=day,dl=month,dh=year,cl=cntry
 13270 000004C6 E81600                  		call	bintobcd	; convert "day"	to bcd
 13271                                  					; dl = bcd day,	al = month
 13272 000004C9 86D0                    		xchg	dl, al
 13273 000004CB E81100                  		call	bintobcd	; dh = bcd month, al = year
 13274 000004CE 86F0                    		xchg	dh, al
 13275 000004D0 E80C00                  		call	bintobcd	; cl = bcd year, al = century
 13276 000004D3 86C8                    		xchg	cl, al
 13277 000004D5 E80700                  		call	bintobcd	; ch = bcd century
 13278 000004D8 88C5                    		mov	ch, al
 13279 000004DA 8F06[8904]              		pop	word [daycnt] ; restore original value
 13280 000004DE C3                      		retn
 13281                                  
 13282                                  ;----------------------------------------------------------------------------
 13283                                  
 13284                                  bintobcd:	; proc near		; real time clock support
 13285                                  
 13286                                  ;convert a binary input in al (less than 63h or 99 decimal)
 13287                                  ;into a bcd value in al. ah destroyed.	
 13288                                  		
 13289 000004DF D40A                    		aam			; AH = AL/10, AL = AL MOD 10
 13290 000004E1 D510                    		aad     10h             ; db 0D5h,10h
 13291                                  					; AL = (AH*10H)+AL, AH = 0
 13292 000004E3 C3                      		retn
 13293                                  %endif
 13294                                  
 13295                                  ;----------------------------------------------------------------------------
 13296                                  
 13297                                  ; 15/10/2022
 13298                                  
 13299                                  ;----------------------------------------------------------------------------
 13300                                  ; gettime reads date and time
 13301                                  ; and returns the following information:
 13302                                  ;
 13303                                  ;	es:[di]  =count of days since 1-1-80
 13304                                  ;	es:[di+2]=hours
 13305                                  ;	es:[di+3]=minutes
 13306                                  ;	es:[di+4]=seconds
 13307                                  ;	es:[di+5]=hundredths of seconds
 13308                                  ;
 13309                                  ;	NOTE: Any changes in this routine probably require corresponding
 13310                                  ;	changes in the version that is built with the power manager driver.
 13311                                  ;	See ptime.asm.
 13312                                  ;----------------------------------------------------------------------------
 13313                                  
 13314                                  tim_read:				; 2C7h:435h = 70h:29A5h
 13315 000004E4 E84A00                  		call	GetTickCnt
 13316 000004E7 8B36[8904]              		mov	si, [daycnt]
 13317                                  
 13318                                  ; we now need to convert the time in tick to the time in 100th of
 13319                                  ; seconds. the relation between tick and seconds is:
 13320                                  ;
 13321                                  ;		 65,536 seconds
 13322                                  ;	       ----------------
 13323                                  ;		1,193,180 tick
 13324                                  ;
 13325                                  ; to get to 100th of second we need to multiply by 100. the equation is:
 13326                                  ;
 13327                                  ;	ticks from clock  * 65,536 * 100
 13328                                  ;      --------------------------------- = time in 100th of seconds
 13329                                  ;		1,193,180
 13330                                  ;
 13331                                  ; fortunately this formula simplifies to:
 13332                                  ;
 13333                                  ;	ticks from clock * 5 * 65,536
 13334                                  ;      --------------------------------- = time in 100th of seconds
 13335                                  ;		59,659
 13336                                  ;
 13337                                  ; the calculation is done by first multipling tick by 5. next we divide by
 13338                                  ; 59,659. in this division we multiply by 65,536 by shifting the dividend
 13339                                  ; my 16 bits to the left.
 13340                                  ;
 13341                                  ; start with ticks in cx:dx
 13342                                  ; multiply by 5
 13343                                  
 13344 000004EB 89C8                    		mov	ax, cx
 13345 000004ED 89D3                    		mov	bx, dx		; start	with ticks in cx:dx
 13346                                  					; multiply by 5
 13347 000004EF D1E2                    		shl	dx, 1
 13348 000004F1 D1D1                    		rcl	cx, 1		; times	2
 13349 000004F3 D1E2                    		shl	dx, 1
 13350 000004F5 D1D1                    		rcl	cx, 1		; times	4
 13351 000004F7 01DA                    		add	dx, bx
 13352 000004F9 11C8                    		adc	ax, cx		; times	5
 13353 000004FB 92                      		xchg	ax, dx
 13354                                  
 13355                                  ; now have ticks * 5 in	dx:ax
 13356                                  ; we now need to multiply by 65536 and divide by 59659 d.
 13357                                  
 13358 000004FC B90BE9                  		mov	cx, 59659	; get divisor
 13359 000004FF F7F1                    		div	cx		; dx now has remainder
 13360                                  					; ax has high word of final quotient
 13361                                  
 13362                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 13363                                  		;mov	bx, ax		; put high word	in safe	place
 13364 00000501 93                      		xchg	bx, ax
 13365 00000502 31C0                    		xor	ax, ax		; this is the multiply by 65536
 13366 00000504 F7F1                    		div	cx		; bx:ax	now has	time in	100th of seconds
 13367                                  
 13368                                  ; rounding based on the	remainder may be added here
 13369                                  ; the result in	bx:ax is time in 1/100 second.
 13370                                  
 13371 00000506 89DA                    		mov	dx, bx		
 13372 00000508 B9C800                  		mov	cx, 200		; extract 1/100's
 13373                                  
 13374                                  ; division by 200 is necessary to ensure no overflow--max result
 13375                                  ; is number of seconds in a day/2 = 43200.
 13376                                  
 13377 0000050B F7F1                    		div	cx
 13378 0000050D 80FA64                  		cmp	dl, 100		; remainder over 100?
 13379 00000510 7203                    		jb	short noadj
 13380 00000512 80EA64                  		sub	dl, 100		; keep 1/100's less than 100
 13381                                  noadj:					
 13382 00000515 F5                      		cmc			; if we	subtracted 100,	carry is now set
 13383 00000516 88D3                    		mov	bl, dl		; save 1/100's
 13384                                  
 13385                                  ; to compensate	for dividing by	200 instead of 100, we now multiply
 13386                                  ; by two, shifting a one in if the remainder had exceeded 100.
 13387                                  
 13388 00000518 D1D0                    		rcl	ax, 1		
 13389 0000051A B200                    		mov	dl, 0
 13390 0000051C D1D2                    		rcl	dx, 1
 13391                                  		;mov	cx, 60		; divide out seconds
 13392                                  		; 20/12/2023
 13393 0000051E B13C                    		mov	cl, 60
 13394 00000520 F7F1                    		div	cx
 13395 00000522 88D7                    		mov	bh, dl		; save the seconds
 13396 00000524 F6F1                    		div	cl		; break	into hours and minutes
 13397 00000526 86C4                    		xchg	al, ah
 13398                                  
 13399                                  ; time is now in ax:bx (hours, minutes, seconds, 1/100 sec)
 13400                                  
 13401                                  		; 08/08/2023
 13402                                  		;push	ax
 13403                                  		;mov	ax, si		; daycnt
 13404 00000528 96                      		xchg	ax, si
 13405 00000529 AB                      		stosw
 13406                                  		;pop	ax
 13407 0000052A 96                      		xchg	ax, si		; al = hours, ah = minutes
 13408 0000052B AB                      		stosw
 13409 0000052C 89D8                    		mov	ax, bx
 13410 0000052E AB                      		stosw
 13411 0000052F F8                      		clc			; [es:di] = count of days since 1-1-80
 13412                                  					;   [es:di+2] = hours
 13413                                  					;   [es:di+3] = minutes
 13414                                  					;   [es:di+4] = seconds
 13415                                  					;   [es:di+5] = hundredths of seconds
 13416 00000530 C3                      		retn
 13417                                  
 13418                                  ; =============== S U B	R O U T	I N E =======================================
 13419                                  
 13420                                  ; 15/10/2022
 13421                                  
 13422                                  ;----------------------------------------------------------------------------
 13423                                  ;
 13424                                  ; procedure : GetTickCnt
 13425                                  ;
 13426                                  ;		Returns the tick count in CX:DX. Takes care of DayCnt in case
 13427                                  ;		of rollover [except when power management driver is in use]. 
 13428                                  ;		Uses the following logic for updating Daycnt
 13429                                  ;
 13430                                  ;		if ( rollover ) {
 13431                                  ;			if ( t_switch )
 13432                                  ;				daycnt++ ;
 13433                                  ;			else
 13434                                  ;				daycnt += rollover ;
 13435                                  ;		}
 13436                                  ;
 13437                                  ; USES : AX
 13438                                  ;
 13439                                  ; RETURNS : CX:DX - tick count
 13440                                  ; MODIFIES : daycnt
 13441                                  ;
 13442                                  ;----------------------------------------------------------------------------
 13443                                  
 13444                                  		; 17/10/2022
 13445                                  GetTickCnt:
 13446 00000531 30E4                    		xor	ah, ah
 13447 00000533 CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
 13448                                  					; Return: CX:DX	= clock	count
 13449                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
 13450                                  					; midnight
 13451                                  					; Otherwise, AL	> 0
 13452                                  		; 20/12/2023
 13453 00000535 30E4                    		xor	ah, ah
 13454 00000537 3826[8B04]              		cmp	byte [t_switch], ah ; 0
 13455                                  		;cmp	byte [t_switch], 0 ; use old method ? (>0 is yes)
 13456 0000053B 7505                    		jnz	short inc_case	; old method assumes that Int 1Ah returns rollover flag
 13457                                  		;xor	ah, ah		; new method assumes that Int 1Ah returns roll over count
 13458                                  					; and not flag
 13459 0000053D 0106[8904]              		add	[daycnt], ax
 13460 00000541 C3                      		retn
 13461                                  ; ---------------------------------------------------------------------------
 13462                                  
 13463                                  inc_case:
 13464 00000542 08C0                    		or	al, al
 13465 00000544 7404                    		jz	short no_rollover
 13466 00000546 FF06[8904]              		inc	word [daycnt]
 13467                                  no_rollover:
 13468 0000054A C3                      		retn
 13469                                  
 13470                                  ; ---------------------------------------------------------------------------
 13471                                  ; ---------------------------------------------------------------------------
 13472                                  ; 03/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 13473                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0556h
 13474                                  
 13475                                  %if 1
 13476                                  
 13477 0000054B 4641543132202020        fat_12_id:	db 'FAT12   '
 13478 00000553 4641543136202020        fat_16_id:	db 'FAT16   '
 13479 0000055B 4641543332202020        fat_32_id:	db 'FAT32   '
 13480 00000563 4E4F204E414D452020-     nul_vid:	db 'NO NAME    '
 13480 0000056C 2020               
 13481                                  
 13482                                  %endif
 13483                                  
 13484                                  ;----------------------------------------------------------------------------
 13485                                  ; MSDISK.ASM - MSDOS 6.0 - 1991
 13486                                  ;----------------------------------------------------------------------------
 13487                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13488                                  ; 09/03/2019 - Retro DOS v4.0
 13489                                  
 13490                                  ; MSDISK.ASM - MSDOS 3.3 - 02/02/1988
 13491                                  ; 26/05/2018 - Retro DOS v3.0
 13492                                  ; 23/03/2018 - Retro DOS v2.0
 13493                                  
 13494                                  ;error_unknown_media equ	7	; for use in BUILD BPB call
 13495                                  
 13496                                  ;struc BPB_TYPE
 13497                                  ;.SECSIZE:	resw 1
 13498                                  ;.SECALL:	resb 1
 13499                                  ;.RESNUM:	resw 1
 13500                                  ;.FATNUM:	resb 1
 13501                                  ;.DIRNUM:	resw 1
 13502                                  ;.SECNUM:	resw 1
 13503                                  ;.FATID:	resb 1
 13504                                  ;.FATSIZE:	resw 1
 13505                                  ;.SLIM:		resw 1
 13506                                  ;.HLIM:		resw 1
 13507                                  ;.HIDDEN:	resw 1
 13508                                  ;.size:
 13509                                  ;endstruc
 13510                                  
 13511                                  ;-----------------------------------------------------------------
 13512                                  ;	disk interface routines
 13513                                  ;-----------------------------------------------------------------
 13514                                  
 13515                                  ; device attribute bits:
 13516                                  ;	bit 6 - get/set map for logical drives and generic ioctl.
 13517                                  
 13518                                  ;MAXERR		equ	5
 13519                                  ;MAX_HD_FMT_ERR	equ	2
 13520                                  
 13521                                  ;LSTDRV	equ 504h
 13522                                  
 13523                                  ; some floppies do not have changeline. as a result, media-check would
 13524                                  ; normally return i-don't-know, the dos would continually reread the fat and
 13525                                  ; discard cached data. we optimize this by implementing a logical door-latch:
 13526                                  ; it is physically impossible to change a disk in under 2 seconds. we retain
 13527                                  ; the time of the last successful disk operation and compare it with the current
 13528                                  ; time during media-check. if < 2 seconds and at least 1 timer tick has passed,
 13529                                  ; the we say no change. if > 2 seconds then we say i-don't-know. finally, 
 13530                                  ; since we cannot trust the timer to be always available, we record the number 
 13531                                  ; of media checks that have occurred when no apparent time has elapsed. while
 13532                                  ; this number is < a given threshold, we say no change. when it exceeds that
 13533                                  ; threshold, we say i-don't-know and reset the counter to 0. when we store 
 13534                                  ; the time of last successful access, if we see that time has passed too,
 13535                                  ; we reset the counter.
 13536                                  
 13537                                  accessmax	equ	5
 13538                                  
 13539                                  ; due to various bogosities, we need to continually adjust what the head
 13540                                  ; settle time is.  the following algorithm is used:
 13541                                  ;
 13542                                  ;   get the current head settle value.
 13543                                  ;   if it is 0, then
 13544                                  ;	set slow = 15
 13545                                  ;   else
 13546                                  ;	set slow = value
 13547                                  ;   ...
 13548                                  ;*********************************************
 13549                                  ;************ old algorithm ******************
 13550                                  ;*   if we are seeking and writing then
 13551                                  ;*	 use slow
 13552                                  ;*   else
 13553                                  ;*	 use fast
 13554                                  ;*********************************************
 13555                                  ;*********** ibm's requested logic ***********
 13556                                  ;   if we are seeking and writing and not on an at then
 13557                                  ;	use slow
 13558                                  ;   else
 13559                                  ;	use fast
 13560                                  ;   ...
 13561                                  ;   restore current head settle value
 13562                                  ;
 13563                                  ;
 13564                                  ;---------------------------------------
 13565                                  multrk_on	equ	10000000b	;user spcified mutitrack=on, or system turns
 13566                                  					; it on after handling config.sys file as a
 13567                                  					; default value, if multrk_flag = multrk_off1.
 13568                                  multrk_off1	equ	00000000b	;initial value. no "multitrack=" command entered.
 13569                                  multrk_off2	equ	00000001b	;user specified multitrack=off.
 13570                                  
 13571                                  ; close data segment, open Bios_Code segment
 13572                                  
 13573                                  ; 15/10/2022
 13574                                  
 13575                                  ; BIOSCODE:04A2h (MSDOS 6.21, IO.SYS)
 13576                                  
 13577                                  ;-----------------------------------------------------------------
 13578                                  ;	command jump table
 13579                                  ;-----------------------------------------------------------------
 13580                                  
 13581 0000056E 00                      		db 0
 13582                                  
 13583                                  ; 11/12/2022
 13584                                  %if 0
 13585                                  
 13586                                  dsktbl:		db 26			; 2C7h:4A2h = 70h:2A12h
 13587                                  					; ((dtbl_siz-1)/2) ; this is the size of the table ; 26
 13588                                  		dw 1742h		; dsk_init
 13589                                  		dw 4EBh			; media_chk
 13590                                  		dw 592h			; get_bpb
 13591                                  		dw 0D5h			; bc_cmderr
 13592                                  		dw 857h			; dsk_read
 13593                                  		dw 83Dh			; x_bus_exit
 13594                                  		dw 558h			; ret_carry_clear
 13595                                  		dw 558h			; ret_carry_clear
 13596                                  		dw 849h			; dsk_writ
 13597                                  		dw 841h			; dsk_writv
 13598                                  		dw 558h			; ret_carry_clear
 13599                                  		dw 558h			; ret_carry_clear
 13600                                  		dw 0D5h			; bc_cmderr
 13601                                  		dw 80Ah			; dsk_open
 13602                                  		dw 81Ah			; dsk_close
 13603                                  		dw 831h			; dsk_rem
 13604                                  		dw 558h			; ret_carry_clear
 13605                                  		dw 558h			; ret_carry_clear
 13606                                  		dw 558h			; ret_carry_clear
 13607                                  		dw 0C6Bh		; do_generic_ioctl
 13608                                  		dw 558h			; ret_carry_clear
 13609                                  		dw 558h			; ret_carry_clear
 13610                                  		dw 558h			; ret_carry_clear
 13611                                  		dw 1124h		; ioctl_getown
 13612                                  		dw 1142h		; ioctl_setown
 13613                                  		dw 129Ah		; ioctl_support_query
 13614                                  
 13615                                  ;dtbl_siz equ $-dsktbl
 13616                                  
 13617                                  %endif
 13618                                  
 13619                                  ; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 13620                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0579h		
 13621                                  
 13622                                  		; 21/12/2023 - Retro DOS v5.0
 13623                                  		; 11/12/2022
 13624 0000056F 1A                      dsktbl:		db (dtbl_siz-1)/2	; 26 ; this is the size of the table
 13625 00000570 [4C1A]                  		dw dsk_init
 13626 00000572 [B805]                  		dw media_chk
 13627 00000574 [5706]                  		dw get_bpb
 13628                                  		;dw bc_cmderr
 13629 00000576 [470E]                  		dw ioctl_input ; PCDOS 7 ; 21/12/2023
 13630 00000578 [7209]                  		dw dsk_read
 13631 0000057A [5809]                  		dw x_bus_exit
 13632 0000057C [2206]                  		dw ret_carry_clear
 13633 0000057E [2206]                  		dw ret_carry_clear
 13634 00000580 [6409]                  		dw dsk_writ
 13635 00000582 [5C09]                  		dw dsk_writv
 13636 00000584 [2206]                  		dw ret_carry_clear
 13637 00000586 [2206]                  		dw ret_carry_clear
 13638                                  		;dw bc_cmderr
 13639 00000588 [F40D]                  		dw ioctl_output ; PCDOS 7 ; 21/12/2023
 13640 0000058A [2909]                  		dw dsk_open
 13641 0000058C [3809]                  		dw dsk_close
 13642 0000058E [4E09]                  		dw dsk_rem
 13643 00000590 [2206]                  		dw ret_carry_clear
 13644 00000592 [2206]                  		dw ret_carry_clear
 13645 00000594 [2206]                  		dw ret_carry_clear
 13646 00000596 [C90E]                  		dw do_generic_ioctl
 13647 00000598 [2206]                  		dw ret_carry_clear
 13648 0000059A [2206]                  		dw ret_carry_clear
 13649 0000059C [2206]                  		dw ret_carry_clear
 13650 0000059E [A413]                  		dw ioctl_getown
 13651 000005A0 [C113]                  		dw ioctl_setown
 13652 000005A2 [1E15]                  		dw ioctl_support_query
 13653                                  
 13654                                  dtbl_siz equ $-dsktbl
 13655                                  
 13656                                  ; =============== S U B	R O U T	I N E =======================================
 13657                                  
 13658                                  ; ---------------------------------------------------------------------------
 13659                                  ; setdrive scans through the data structure of bdss, and returns a pointer to
 13660                                  ; the one that belongs to the drive specified. carry is set if none exists
 13661                                  ; for the drive. Pointer is returned in es:[di]
 13662                                  ;
 13663                                  ;  AL contains the logical drive number.
 13664                                  ; ---------------------------------------------------------------------------
 13665                                  
 13666                                  SetDrive:
 13667                                  		;les	di, dword ptr ds:start_bds ; Point es:di to first bds
 13668 000005A4 C43E[1901]              		les	di, [start_bds] ; 19/10/2022
 13669                                  X_Scan_Loop:
 13670 000005A8 26384505                		cmp	[es:di+5], al	
 13671 000005AC 7409                    		jz	short X_SetDrv
 13672 000005AE 26C43D                  		les	di, [es:di]	; [es:di+BDS.link] ; Go	to next	bds
 13673 000005B1 83FFFF                  		cmp	di, 0FFFFh
 13674 000005B4 75F2                    		jnz	short X_Scan_Loop
 13675 000005B6 F9                      		stc
 13676                                  X_SetDrv:
 13677 000005B7 C3                      		retn
 13678                                  
 13679                                  ; ---------------------------------------------------------------------------
 13680                                  
 13681                                  ; 15/10/2022
 13682                                  
 13683                                  	; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 13684                                  	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:05C2h
 13685                                  
 13686                                  ; ---------------------------------------------------------------------
 13687                                  ; if id is f9, have a 96tpi disk else
 13688                                  ; if bit 2 is 0 then media is not removable and could not have changed
 13689                                  ;  otherwise if within 2 secs of last disk operation media could not
 13690                                  ;    have changed, otherwise dont know if media has changed
 13691                                  ; ---------------------------------------------------------------------
 13692                                  
 13693                                  media_chk:				; 2C7h:4EBh = 70h:2A5Bh
 13694 000005B8 E8E9FF                  		call	SetDrive
 13695 000005BB BE0100                  		mov	si, 1
 13696                                  		; 21/12/2023
 13697 000005BE 26F6454001              		test	byte [es:di+40h], 1
 13698                                  		;test	byte [es:di+24h], 1 ; [es:di+BDS.flags+1]
 13699                                  					; fchanged_by_format
 13700 000005C3 7415                    		jz	short WeAreNotFakingIt
 13701                                  		; 21/12/2023
 13702 000005C5 26806540FE              		and	byte [es:di+40h], 0FEh
 13703                                  		; 12/12/2022
 13704                                  		;and	byte [es:di+24h], 0FEh ; ~fchanged_by_format
 13705                                  		;;and	word [es:di+23h], 0FEFFh ; [es:di+BDS.flags]
 13706                                  					; ~fchanged_by_format ;	reset flag
 13707 000005CA C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
 13708                                  					; Ensure that we ask the rom if media has changed
 13709                                  		; 21/12/2023
 13710 000005CF 26F6453F01              		test	byte [es:di+3Fh], 1
 13711                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 13712                                  					; fnon_removable
 13713 000005D4 740B                    		jz	short wehaveafloppy
 13714                                  		;mov	si, 0FFFFh	; Indicate media changed
 13715                                  		; 11/08/2023
 13716 000005D6 F7DE                    		neg	si		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:05E0h
 13717 000005D8 EB2B                    		jmp	short Media_Done ; Media_Done
 13718                                  ; ---------------------------------------------------------------------------
 13719                                  
 13720                                  WeAreNotFakingIt:
 13721                                  		; 21/12/2023
 13722 000005DA 26F6453F01              		test	byte [es:di+3Fh], 1
 13723                                  		;test	byte [es:di+BDS.flags], fnon_removable			
 13724                                  		;test	byte [es:di+23h], 1
 13725 000005DF 7524                    		jnz	short Media_Done
 13726                                  wehaveafloppy:
 13727                                  		;xor	si, si ; 0	; Presume "I don't know"
 13728                                  		; 11/08/2023
 13729 000005E1 4E                      		dec	si ; 0 		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:05EBh
 13730                                  
 13731                                  		; If we have a floppy with changeline support, we ask the ROM
 13732                                  		; to determine if media has changed. We do not perform the
 13733                                  		; 2 second check for these drives.
 13734                                  
 13735 000005E2 803E[7700]00            		cmp	byte [fhave96], 0	; Do we	have changeline	support?
 13736 000005E7 740A                    		jz	short mChk_NoChangeLine	; Brif not
 13737 000005E9 E83815                  		call	mediacheck	;  Call	into removable routine
 13738 000005EC 7236                    		jb	short err_exitj
 13739 000005EE E89C16                  		call	haschange
 13740 000005F1 7512                    		jnz	short Media_Done
 13741                                  mChk_NoChangeLine:
 13742                                  		; If we come here, we have a floppy with no changeline support
 13743                                  			
 13744 000005F3 BE0100                  		mov	si, 1		; Presume no change
 13745 000005F6 A0[1E01]                		mov	al, [tim_drv]	; Last drive accessed
 13746 000005F9 263A4504                		cmp	al, [es:di+4]	; [es:di+BDS.drivenum]
 13747                                  					; Is drive of last access the same?
 13748 000005FD 7505                    		jnz	short Media_Unk	; No, then "i don't know"
 13749 000005FF E82800                  		call	Check_Time_Of_Access
 13750 00000602 EB01                    		jmp	short Media_Done
 13751                                  ; ---------------------------------------------------------------------------
 13752                                  
 13753                                  Media_Unk:
 13754 00000604 4E                      		dec	si		; 0 ; Return "I don't know"
 13755                                  
 13756                                  		; SI now contains the correct value for media change.
 13757                                  		; Clean up the left overs
 13758                                  Media_Done:
 13759                                  		; 19/10/2022
 13760 00000605 06                      		push	es
 13761 00000606 C41E[1200]              		les	bx, [ptrsav]
 13762 0000060A 2689770E                		mov	[es:bx+0Eh], si	; [es:bx+trans]
 13763 0000060E 07                      		pop	es
 13764 0000060F 09F6                    		or	si, si
 13765 00000611 790F                    		jns	short ret_carry_clear ;	volidok
 13766 00000613 803E[7700]00            		cmp	byte [fhave96], 0
 13767 00000618 7403                    		jz	short mChk1_NoChangeLine ; Brif	no changeline support
 13768 0000061A E80216                  		call	media_set_vid
 13769                                  mChk1_NoChangeLine:
 13770 0000061D C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
 13771                                  					; Make sure we ask rom for media check
 13772                                  ret_carry_clear:			
 13773 00000622 F8                      		clc			; volidok
 13774 00000623 C3                      		retn
 13775                                  ; ---------------------------------------------------------------------------
 13776                                  
 13777                                  err_exitj:
 13778 00000624 E87F07                  		call	maperror	; guaranteed to	set carry
 13779                                  ret81:					
 13780 00000627 B481                    		mov	ah, 81h		; return error status
 13781 00000629 C3                      		retn			; return with carry set
 13782                                  
 13783                                  ; =============== S U B	R O U T	I N E =======================================
 13784                                  
 13785                                  ; ---------------------------------------------------------------------------
 13786                                  ; perform a check on the time passed since the last access for this physical
 13787                                  ; drive.
 13788                                  ; we are accessing the same drive. if the time of last successful access was
 13789                                  ; less than 2 seconds ago, then we may presume that the disk was not changed.
 13790                                  ; returns in si:
 13791                                  ;	0 - if time of last access was >= 2 seconds
 13792                                  ;	1 - if time was < 2 seconds (i.e no media change assumed)
 13793                                  ; registers affected ax,cx,dx, flags.
 13794                                  ;
 13795                                  ;	assume es:di -> bds, ds->Bios_Data
 13796                                  ; ---------------------------------------------------------------------------
 13797                                  
 13798                                  		; 21/12/2023 - Retro DOS v5.0 IBMBIO.COM
 13799                                  		; 19/10/2022
 13800                                  Check_Time_Of_Access:
 13801 0000062A BE0100                  		mov	si, 1		; presume no change.
 13802 0000062D E801FF                  		call	GetTickCnt	; cx:dx	is the elapsed time
 13803                                  		; 21/12/2023
 13804 00000630 268B4579                		mov	ax, [es:di+79h]
 13805                                  		;mov	ax, [es:di+47h]	; [es:di+BDS.tim_lo]
 13806                                  					; get stored time
 13807 00000634 29C2                    		sub	dx, ax
 13808                                  		; 21/12/2023
 13809 00000636 268B457B                		mov	ax, [es:di+7Bh]
 13810                                  		;mov	ax, [es:di+49h]	; [es:di+BDS.tim_hi]
 13811 0000063A 19C1                    		sbb	cx, ax
 13812                                  		; 11/08/2023
 13813                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0646h
 13814                                  		;mov	al, [accesscount]
 13815 0000063C 7515                    		jnz	short timecheck_unk ; cx<>0 => >1 hour
 13816 0000063E 09D2                    		or	dx, dx		; time must pass
 13817 00000640 750C                    		jnz	short timepassed ; yes, examine max value
 13818                                  		; 11/08/2023
 13819                                  		;inc	al
 13820                                  		;cmp	al, 5
 13821                                  		;;inc	byte [accesscount]
 13822                                  		;;cmp	byte [accesscount], 5
 13823                                  		;			; if count is less than threshold, ok
 13824                                  		;jb	short timecheck_ret
 13825                                  		;;dec	byte [accesscount] ; don't let the count wrap
 13826                                  		; 11/08/2023
 13827                                  		;dec	al
 13828                                  		;jmp	short timecheck_unk ; "i don't know" if media changed
 13829                                  		; 11/08/2023
 13830 00000642 803E[1D01]04            		cmp	byte [accesscount], 4
 13831 00000647 730A                    		jnb	short timecheck_unk
 13832 00000649 FE06[1D01]              		inc	byte [accesscount]
 13833 0000064D C3                      		retn
 13834                                  
 13835                                  ; ---------------------------------------------------------------------------
 13836                                  
 13837                                  timepassed:
 13838 0000064E 83FA24                  		cmp	dx, 36		; 18*2 ; 18.2 tics per second.
 13839                                  					; min elapsed time? (2 seconds)
 13840 00000651 7601                    		jbe	short timecheck_ret ; yes, presume no change
 13841                                  
 13842                                  		; everything indicates that we do not know what has happened.
 13843                                  timecheck_unk:
 13844 00000653 4E                      		dec	si		; presume i don't know
 13845                                  timecheck_ret:
 13846                                  		; 11/08/2023
 13847                                  		;mov	[accesscount], al
 13848 00000654 C3                      		retn
 13849                                  
 13850                                  ; ---------------------------------------------------------------------------
 13851                                  ; 15/10/2022
 13852                                  Err_Exitj2:
 13853 00000655 EBCD                    		jmp	short err_exitj
 13854                                  
 13855                                  ; ---------------------------------------------------------------------------
 13856                                  
 13857                                  ; 15/10/2022
 13858                                  
 13859                                  ; ==========================================================================
 13860                                  ; Build a valid bpb for the disk in the drive.
 13861                                  ; ==========================================================================
 13862                                  
 13863                                  		; 21/12/2023 - Retro DOS v5.0 IBMBIO.COM
 13864                                  		; 19/10/2022
 13865                                  get_bpb:				; 2C7h:592h = 70h:2B02h
 13866 00000657 268A25                  		mov	ah, [es:di]	; get fat id byte read by dos
 13867 0000065A E847FF                  		call	SetDrive	; get the correct bds for the drive
 13868                                  		; 21/12/2023
 13869 0000065D 26F6453F01              		test	byte [es:di+3Fh], 1
 13870                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 13871                                  					; fnon_removable
 13872 00000662 7523                    		jnz	short already_gotbpb ; no need to build	for fixed disks
 13873                                  
 13874                                  		; let's set the default value for volid,vol_serial,
 13875                                  		; filesys_id in bds table
 13876                                  
 13877 00000664 E83600                  		call	clear_ids
 13878                                  		;mov	ds:set_id_flag,	1 ; indicate to	set system id in bds
 13879 00000667 C606[9B04]01            		mov	byte [set_id_flag], 1
 13880 0000066C E86700                  		call	GetBp		; build	a bpb if necessary
 13881 0000066F 72B6                    		jb	short ret81
 13882                                  		;cmp	ds:set_id_flag,	2 ; already, volume_label set from boot
 13883 00000671 803E[9B04]02            		cmp	byte [set_id_flag], 2
 13884                                  		;mov	ds:set_id_flag,	0 ; record to bds table?
 13885 00000676 C606[9B04]00            		mov	byte [set_id_flag], 0
 13886 0000067B 740A                    		jz	short already_gotbpb ; do not set it again from	root dir
 13887                                  					; otherwise, conventional boot record
 13888                                  		;cmp	ds:fhave96, 0	; do we	have changeline	support?
 13889 0000067D 803E[7700]00            		cmp	byte [fhave96], 0
 13890 00000682 7403                    		jz	short already_gotbpb ; brif not
 13891 00000684 E80C16                  		call	set_volume_id
 13892                                  already_gotbpb:
 13893 00000687 83C706                  		add	di, 6		; BDS.BPB
 13894                                  					; return the bpb from the current bds
 13895                                  
 13896                                  ;		fall into setptrsav, es:di -> result
 13897                                  
 13898                                  ; ---------------------------------------------------------------------------
 13899                                  
 13900                                  ; 15/10/2022
 13901                                  
 13902                                  ; ==========================================================================
 13903                                  ;Setptrsav is also jumped to from dsk_init (msbio2.asm). In both cases, the
 13904                                  ;pointer to be returned is in es:di. We were incorrectly returning ds:di.
 13905                                  ;Note that this works in most cases because most pointers are in Bios_Data.
 13906                                  ;It fails, for instance, when we install an external drive using driver.sys
 13907                                  ;because then the BDS segment is no longer Bios_Data. 
 13908                                  ;NB: It is fine to corrupt cx because this is not a return value and anyway
 13909                                  ;this returns to Chardev_entry (msbio1.asm) where all registers are 
 13910                                  ;restored before returning to the caller.
 13911                                  ; ==========================================================================
 13912                                  
 13913                                  ; 21/12/2023
 13914                                  %if 0
 13915                                  		; 19/10/2022
 13916                                  SetPtrSav:	; return point for dsk_init
 13917                                  		mov	cx, es		; save es
 13918                                  		;les	bx, ds:ptrsav
 13919                                  		les	bx, [ptrsav]
 13920                                  		mov	[es:bx+0Dh], ah	; [es:bx+media]
 13921                                  		mov	[es:bx+12h], di	; [es:bx+count]
 13922                                  		mov	[es:bx+14h], cx	; [es:bx+count+2]
 13923                                  		clc
 13924                                  		retn
 13925                                  %endif
 13926                                  		; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 13927                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0698h
 13928                                  SetPtrSav:	
 13929                                  		; return point for dsk_init
 13930 0000068A 1E                      		push	ds
 13931                                  		;lds	bx, ds:ptrsav
 13932 0000068B C51E[1200]              		lds	bx, [ptrsav]
 13933 0000068F 88670D                  		mov	[bx+0Dh], ah	; [bx+media]
 13934 00000692 897F12                  		mov	[bx+12h], di	; [bx+count]
 13935 00000695 8C4714                  		mov	[bx+14h], es	; [bx+count+2]
 13936 00000698 1E                      		push	ds
 13937 00000699 07                      		pop	es
 13938 0000069A 1F                      		pop	ds
 13939 0000069B F8                      		clc
 13940 0000069C C3                      		retn
 13941                                  
 13942                                  ; =============== S U B	R O U T	I N E =======================================
 13943                                  
 13944                                  ; 15/10/2022
 13945                                  
 13946                                  ; -----------------------------------------------------
 13947                                  ; clear ids in bds table. only applied for floppies.
 13948                                  ;input:  es:di -> bds table
 13949                                  ;	assumes ds: -> Bios_Data
 13950                                  ;output: volid set to "NO NAME    "
 13951                                  ;	 vol_serial set to 0.
 13952                                  ;	 filesys_id set to "FAT12   " or "FAT16   "
 13953                                  ;	   depending on the flag fatsize in bds.
 13954                                  ;
 13955                                  ;	trashes si, cx
 13956                                  ; -----------------------------------------------------
 13957                                  
 13958                                  ;size_of_EXT_BOOT_VOL_LABEL equ 11
 13959                                  ;size_of_EXT_SYSTEM_ID equ 8
 13960                                  
 13961                                  ; 11/09/2023
 13962                                  ; 14/08/2023
 13963                                  ;BDS.fatsiz equ 1Fh
 13964                                  ; 21/12/2023
 13965                                  ;BDS.fatsiz equ 59
 13966                                  
 13967                                  		; 22/12/2023
 13968                                  		; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 13969                                  clear_ids:
 13970                                  		;mov	al, [es:di+1Fh] ; mov al,[es:di+BDS.fatsiz]
 13971                                  		; 21/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM BugFix)
 13972 0000069D 268A5D3B                		mov	bl, [es:di+3Bh] ; mov bl,[es:di+BDS.fatsiz]; *+
 13973                                  clear_ids_x:
 13974                                  		; 21/12/2023 
 13975                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:06ABh)
 13976                                  		; 11/09/2023		
 13977                                   		; (MSDOS 5.0 IO.SYS - BIOSCODE:05D9h)
 13978 000006A1 57                      		push	di
 13979 000006A2 31C9                    		xor	cx, cx		; no serial number
 13980                                  		; 21/12/2023
 13981 000006A4 26898D8900              		mov	[es:di+89h], cx	; [es:di+BDS.vol_serial]
 13982 000006A9 26898D8B00              		mov	[es:di+8Bh], cx	; [es:di+BDS.vol_serial+2]
 13983                                  		;mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
 13984                                  		;mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
 13985                                  
 13986                                  		; BUGBUG - there's a lot in common here and with
 13987                                  		; mov_media_ids.. see if we can save some space by
 13988                                  		; merging them... jgl
 13989                                  
 13990                                  		;mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
 13991                                  		; 10/12/2022
 13992 000006AE B10B                    		mov	cl, 11 ; cx = 11
 13993                                  
 13994                                  		;;mov	si, offset vol_no_name ; "NO NAME    "
 13995                                  		;mov	si, vol_no_name	; 19/10/2022
 13996                                  		; 22/12/2023
 13997                                  		;mov	si, offset nul_vid ; "NO NAME    "
 13998 000006B0 BE[6305]                		mov	si, nul_vid
 13999                                  
 14000                                  		; 21/12/2023
 14001 000006B3 83C77D                  		add	di, 125
 14002                                  		;add	di, 75		; BDS.volid
 14003                                  		
 14004                                  		;rep movsb
 14005                                  		; 21/12/2023
 14006                                  		;rep movs byte ptr es:[di], byte ptr cs:[si] ; cs rep movsb
 14007                                  		; 26/12/2023
 14008                                  		;cs	; vol_no_name is in BIOSCODE segment
 14009                                  		;rep movsb
 14010 000006B6 F3                      		rep
 14011 000006B7 2E                      		cs
 14012 000006B8 A4                      		movsb
 14013                                  
 14014                                  		; 11/09/2023 (BugFix, DI is not start addr of BDS structure here)
 14015                                  		;;test	byte [es:di+BDS.fatsiz], fbig
 14016                                  		; (MSDOS 5.0 IO.SYS - BIOSCODE:05EFh)
 14017                                  		;test	byte [es:di+1Fh], 40h
 14018                                  		; 21/12/2023 - Retro DOS v5.0
 14019                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:06C3h)
 14020                                  		;test	byte [es:di+59], 20h 
 14021                                  			; (here, es:di points to the BDS offset +136)
 14022                                  			; purpose: test byte [es:di+BDS.fatsiz], fbigbig
 14023                                  			; applied: test byte [es:BDS.fatsiz+136], fbigbig -BUG!-
 14024                                  
 14025                                  			; (PCDOS 7.1 BUG note: 26/06/2023 - Erdogan Tan)
 14026                                  			;; ! NOTE - 11/08/2023 - Erdogan Tan (Retro DOS v4.2 IO.SYS bugfix)
 14027                                  			; Microsoft/IBM code has a bug here because the BDS's
 14028                                  			; .volid and .filesys_id fields will be reset
 14029                                  			; (to their default text) according to 'BDS.fatsiz' flags
 14030                                  			; at the BDS offset 59 but current (this) code checks flags
 14031                                  			; at ES:DI+59 while DI points the BDS offset 136!? ; (PCDOS 7.1)
 14032                                  			;; at the BDS offset 31 but current (this) code checks flags
 14033                                  			;; at ES:DI+31 while DI points the BDS offset 86!? ; (MSDOS 6.22)
 14034                                  			;
 14035                                  			; Correct Code:
 14036                                  			; ;test byte [ES:59],20h or [ES:BDS.fatsiz],fbigbig  ; (PCDOS 7.1)	
 14037                                  			; ;;test byte [ES:31],40h or [ES:BDS.fatsiz],fbig  ; (MSDOS 6.22)
 14038                                  			; 11/09/2023
 14039                                  			; (before 'rep movsb') 'mov al,[es:di+BDS.Fatsiz]' and then
 14040                                  			; (after 'rep movsb') 'test al,fbig' (AL is free/proper to use here)	
 14041                                  			;
 14042                                  			; Same BUG is existing in MSDOS 6.22 IO.SYS - BIOSCODE:05EFh
 14043                                  			; and in Windows ME IO.SYS - BIOSCODE:0E1Ah as 'test byte [es:di+59],20h'
 14044                                  
 14045                                  			;
 14046                                  			; (Why this bug did not affect MSDOS and PCDOS 7.x applications:
 14047                                  			; 'clear_ids' is used for floppy disks only and the default
 14048                                  			; option of 'clear_ids' is FAT12 volid and filesys_id text
 14049                                  			; when the flag bit has wrong value for FAT16/40h or FAT32/20h.)
 14050                                  
 14051                                  		; 21/12/2023 - Retro DOS v5.0
 14052                                  		;mov	si, offset fat_32_id ; "FAT32   "
 14053 000006B9 BE[5B05]                		mov	si, fat_32_id	
 14054                                  
 14055                                  		; 21/12/2023
 14056                                  		; BugFix (of the PCDOS 7.1 IBMBIO.COM BUG) ; *+
 14057                                  		;test	bl, fbigbig ; FAT32 flag
 14058 000006BC F6C320                  		test	bl, 20h ; * ; BL = [es:BDS.fatsiz] = [es:59]
 14059 000006BF 750B                    		jnz	short ci_bigfat
 14060                                  
 14061                                  		;mov	si, offset fat_16_id ; "FAT16	"
 14062 000006C1 BE[5305]                		mov	si, fat_16_id	; 19/10/2022
 14063                                  		
 14064                                  		; 21/12/2023
 14065                                  		; !BUG! (PCDOS 7.1 IBMBIO.COM BIOSCODE:06CDh)
 14066                                  		;test	byte [es:di+59], 40h ; [es:di+BDS.fatsiz], fbig
 14067                                  		; BugFix ; *+
 14068                                  		;test	bl, fbig ; FAT16 flag
 14069 000006C4 F6C340                  		test	bl, 40h ; * ; Retro DOS v5.0
 14070                                  		;;test	al, 40h ; * ; Retro DOS v4.2
 14071 000006C7 7503                    		jnz	short ci_bigfat
 14072                                  
 14073                                  		;mov	si, offset fat_12_id ; "FAT12	"
 14074 000006C9 BE[4B05]                		mov	si, fat_12_id	; 19/10/2022
 14075                                  ci_bigfat:
 14076                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
 14077                                  		; 10/12/2022
 14078 000006CC B108                    		mov	cl, 8 ; cx = 8 
 14079 000006CE 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
 14080                                  					; filesys_id field
 14081                                  		;rep movsb
 14082                                  		; 21/12/2023 - Retro DOS v5.0
 14083                                  		;rep movs byte ptr es:[di], byte ptr cs:[si] ; 0F3h,2Eh,0A4h
 14084                                  		; 26/12/2023
 14085                                  		;cs	; fat32_id, fat16_id and fat12_id are in BIOSCODE segment
 14086                                  		;rep movsb
 14087 000006D1 F3                      		rep
 14088 000006D2 2E                      		cs
 14089 000006D3 A4                      		movsb
 14090                                  
 14091 000006D4 5F                      		pop	di		; restore bds pointer
 14092                                  getret_exit:		; 21/12/2023
 14093 000006D5 C3                      		retn
 14094                                  
 14095                                  ; =============== S U B	R O U T	I N E =======================================
 14096                                  
 14097                                  ; 15/10/2022
 14098                                  
 14099                                  ; ---------------------------------------------------------------------------
 14100                                  ;	getbp - return bpb from the drive specified by the bds.
 14101                                  ;	    if the return_fake_bpb flag is set, then it does nothing.
 14102                                  ;	    note that we never come here for fixed disks.
 14103                                  ;	    for all other cases,
 14104                                  ;	      - it reads boot sector to pull out the bpb
 14105                                  ;	      - if no valid bpb is found, it then reads the fat sector,
 14106                                  ;		to get the fat id byte to build the bpb from there.
 14107                                  ;
 14108                                  ;   inputs:	es:di point to correct bds.
 14109                                  ;
 14110                                  ;   outputs:	fills in bpb in current bds if valid bpb or fat id on disk.
 14111                                  ;		carry set, and al=7 if invalid disk.
 14112                                  ;		carry set and error code in al if other error.
 14113                                  ;		if failed to recognize the boot record, then will set the
 14114                                  ;		set_id_flag to 0.
 14115                                  ;		this routine will only work for a floppy diskette.
 14116                                  ;		     for a fixed disk, it will just return.
 14117                                  ;
 14118                                  ;	****** Note: getbp is a clone of getbp which uses the newer
 14119                                  ;	  segment definitions. It should be migrated towards.
 14120                                  ;	   now es:di has the bds, ds: has Bios_Data
 14121                                  ; ---------------------------------------------------------------------------
 14122                                  
 14123                                  		; 29/12/2023
 14124                                  		; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 14125                                  GetBp:
 14126                                  		; if returning fake bpb then return bpb as is.
 14127                                  		; 21/12/2023
 14128 000006D6 26F6453F05              		test	byte [es:di+3Fh], 5 ; PCDOS 7.1
 14129                                  		;test	byte [es:di+BDS.flags], return_fake_bpb|fnon_removable		
 14130                                  		;test	byte [es:di+23h], 5 ; MSDOS 6.22 (& MSDOS 5.0)
 14131                                  		;jz	short getbp1	; getbp1
 14132                                  		;jmp	getret_exit
 14133                                  		; 21/12/2023
 14134 000006DB 75F8                    		jnz	short getret_exit
 14135                                  ; ---------------------------------------------------------------------------
 14136                                  getbp1:	
 14137 000006DD 51                      		push	cx
 14138 000006DE 52                      		push	dx
 14139 000006DF 53                      		push	bx
 14140                                  
 14141                                  		; attempt to read in boot sector and determine bpb.
 14142                                  		; we assume that the 2.x and greater dos disks all
 14143                                  		; have a valid boot sector.
 14144                                  
 14145 000006E0 E8CF00                  		call	readbootsec
 14146 000006E3 720A                    		jb	short getbp_err_ret_brdg ; carry set if there was error.
 14147 000006E5 09DB                    		or	bx, bx		; bx is	0 if boot sector is valid.
 14148 000006E7 7509                    		jnz	short dofatbpb
 14149 000006E9 E81401                  		call	movbpb		; move bpb into	registers
 14150                                  		;jmp	short Has1
 14151                                  		; 21/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
 14152 000006EC E9B500                  		jmp	getret
 14153                                  ; ---------------------------------------------------------------------------
 14154                                  
 14155                                  getbp_err_ret_brdg:
 14156 000006EF E9B600                  		jmp	getbp_err_ret
 14157                                  ; ---------------------------------------------------------------------------
 14158                                  
 14159                                  		; we have a 1.x diskette. In this case read in the fat ID byte
 14160                                  		; and fill in bpb from there.
 14161                                  dofatbpb:				
 14162 000006F2 E8B401                  		call	readfat		; puts media descriptor	byte in	ah
 14163 000006F5 72F8                    		jb	short getbp_err_ret_brdg
 14164                                  		;cmp	ds:fhave96, 0	;  changeline support available?
 14165 000006F7 803E[7700]00            		cmp	byte [fhave96], 0 ; 19/10/2022
 14166 000006FC 7403                    		jz	short bpb_nochangeline ; brif not
 14167 000006FE E83315                  		call	hidensity	; may not return! May add sp, 2	and
 14168                                  					; jump to has1!!!!!! or	has720K
 14169                                  bpb_nochangeline:		; test for a valid 3.5" medium			
 14170                                  		; 21/12/2023 - Retro DOS v5.0
 14171 00000701 26807D3E02              		cmp	byte [es:di+3Eh], 2
 14172                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 14173                                  					; ffSmall
 14174 00000706 7512                    		jnz	short is_floppy
 14175 00000708 80FCF9                  		cmp	ah, 0F9h	; is it	a valid	fat id byte for	3.5" ?
 14176 0000070B 7512                    		jnz	short got_unknown_medium
 14177                                  Has720K:
 14178                                  		; 21/12/2023
 14179                                  		;;mov	bx, offset sm92 ; pointer to correct bpb
 14180                                  		;mov	bx, sm92	; 19/10/2022
 14181                                  
 14182                                  		; es points to segment of bds. the following should be modified
 14183                                  		; to get spf,csec,spau,spt correctly. it had been wrong if
 14184                                  		; driver.sys is loaded since the bds is inside the driver.sys.
 14185                                  
 14186                                  		; 21/12/2023
 14187                                  		;; 10/12/2022
 14188                                  		;;mov	al, [bx+0]	; [bx+bpbtype.spf]
 14189                                  		;; 21/12/2022
 14190                                  		;mov	al, [bx]
 14191                                  		;mov	cx, [bx+3]	; [bx+bpbtype.csec]
 14192                                  		;mov	dx, [bx+5]	; [bx+bpbtype.spau]
 14193                                  		;mov	bx, [bx+1]	; [bx+bpbtype.spt]
 14194                                  		;; 19/10/2022 - Temporary !
 14195                                  		;;db	8Ah, 87h, 0, 0	; mov al, [bx+0]
 14196                                  		;;db	8Bh, 8Fh, 3, 0	; mov cx, [bx+3]
 14197                                  		;;db	8Bh, 97h, 5, 0	; mov dx, [bx+5]
 14198                                  		;;db	8Bh, 9Fh, 1, 0	; mov bx, [bx+1]
 14199                                  
 14200                                  		; 21/12/2023 - Retro DOS v5.0
 14201 0000070D B003                    		mov	al, 3		; bpbtype.sbf = 3
 14202 0000070F B9A005                  		mov	cx, 1440	; bpbtype.csec = 1440
 14203 00000712 BA0202                  		mov	dx, 202h	; dl = bpbtype.spau = 2
 14204                                  					; dh = bpbtype.chead = 2
 14205 00000715 BB0970                  		mov	bx, 7009h	; bl = bpbtype.spt = 9
 14206                                  					; bh = bpbtype.dire = 112
 14207 00000718 EB30                    		jmp	short Has1
 14208                                  ; ---------------------------------------------------------------------------
 14209                                  
 14210                                  is_floppy:			; must be a 5.25" floppy if we come here
 14211 0000071A 80FCF8                  		cmp	ah, 0F8h	; valid	media??	(0F8h-0FFh)
 14212                                  		;jb	short got_unknown_medium
 14213                                  		; 21/12/2023
 14214 0000071D 730A                    		jnb	short chk_160K
 14215                                  ; ---------------------------------------------------------------------------
 14216                                  		; 21/12/2023
 14217                                  		; we have a 3.5" diskette for which we cannot build a bpb.
 14218                                  		; we do	not assume any type of bpb for this medium.
 14219                                  got_unknown_medium:
 14220                                  		;mov	ds:set_id_flag,	0
 14221 0000071F C606[9B04]00            		mov	byte [set_id_flag], 0
 14222 00000724 B007                    		mov	al, 7
 14223 00000726 F9                      		stc
 14224 00000727 EB7B                    		jmp	short getret
 14225                                  ; ---------------------------------------------------------------------------
 14226                                  chk_160K:
 14227 00000729 B001                    		mov	al, 1		; set number of	fat sectors
 14228 0000072B BB0840                  		mov	bx, 16392	; 64*256+8
 14229                                  					; set dir entries and sector max
 14230 0000072E B94001                  		mov	cx, 320		; 40*8
 14231                                  					; set size of drive
 14232 00000731 BA0101                  		mov	dx, 257		; 01*256+1
 14233                                  					; set head limit and sec/all unit
 14234                                  		; 21/12/2023
 14235                                  		;mov	al, 1		; bpbtype.sbf = 1
 14236                                  		;mov	bx, 4008h	; bl = bpbtype.spt = 8
 14237                                  		;			; bh = bpbtype.dire = 64
 14238                                  		;mov	cx, 140h	; bpbtype.csec = 320
 14239                                  		;mov	dx, 101h	; dl = bpbtype.spau = 1
 14240                                  		;			; dh = bpbtype.chead = 1
 14241                                  
 14242 00000734 F6C402                  		test	ah, 2		; test for 8 or	9 sector
 14243 00000737 7505                    		jnz	short has8	; nz = has 8 sectors
 14244                                  		
 14245                                  		; 29/12/2023
 14246                                  		;inc	al	; 2 	; inc number of	fat sectors
 14247                                  		;inc	bl	; 9	; inc sector max
 14248 00000739 40                      		inc	ax
 14249 0000073A 43                      		inc	bx
 14250                                  
 14251                                  		;add	cx, 40		; increase size	(to 360)
 14252                                  		; 18/12/2022
 14253 0000073B 80C128                  		add	cl, 40	; 28h	; 180K (360 sectors)
 14254                                  has8:
 14255 0000073E F6C401                  		test	ah, 1		; test for 1 or	2 heads
 14256 00000741 7407                    		jz	short Has1	; jz = 1 head
 14257 00000743 01C9                    		add	cx, cx		; double size of disk
 14258 00000745 B770                    		mov	bh, 112		; increase number of directory entries
 14259 00000747 FEC6                    		inc	dh	; 2	; inc sec/all unit
 14260                                  		; 29/12/2023
 14261                                  		;inc	dl	; 2	; inc head limit
 14262 00000749 42                      		inc	dx
 14263                                  Has1:
 14264                                  		; 02/09/2023 (PCDOS 7.1, IBMBIO.COM - BIOSCODE:0754h)
 14265 0000074A 1E                      		push	ds
 14266 0000074B 06                      		push	es
 14267 0000074C 1F                      		pop	ds
 14268                                  
 14269                                  		;mov	[es:di+8], dh	; [es:di+BDS.secperclus]
 14270                                  		;mov	[es:di+0Ch], bh	; [es:di+BDS.direntries]
 14271                                  		;mov	[es:di+0Eh], cx	; [es:di+BDS.totalsecs16]
 14272                                  		;mov	[es:di+10h], ah	; [es:di+BDS.media]
 14273                                  		;mov	[es:di+11h], al	; [es:di+BDS.fatsecs]
 14274                                  		;mov	[es:di+13h], bl	; [es:di+BDS.secpertrack]
 14275                                  		;mov	[es:di+15h], dl	; [es:di+BDS.heads]
 14276                                  
 14277 0000074D 887508                  		mov	[di+8], dh	; [di+BDS.secperclus]
 14278 00000750 30F6                    		xor	dh, dh
 14279 00000752 895515                  		mov	[di+15h], dx	; [di+BDS.heads]
 14280 00000755 88FA                    		mov	dl, bh
 14281 00000757 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
 14282 0000075A 894D0E                  		mov	[di+0Eh], cx	; [di+BDS.totalsecs16]
 14283 0000075D 894D1B                  		mov	[di+1Bh], cx	; [di+BDS.totalsecs32]
 14284 00000760 886510                  		mov	[di+10h], ah	; [di+BDS.media]
 14285 00000763 88C2                    		mov	dl, al
 14286 00000765 895511                  		mov	[di+11h], dx	; [di+BDS.fatsecs]
 14287 00000768 88DA                    		mov	dl, bl
 14288 0000076A 895513                  		mov	[di+13h], dx	; [di+BDS.secpertrack]
 14289                                  
 14290                                  		; the BDS_BPB.BPB_HIDDENSECTORS+2 field and the
 14291                                  		; BDS_BPB.BPB_BIGTOTALSECTORS field need to be set
 14292                                  		; to 0 since this code is for floppies
 14293                                  
 14294                                  		; 18/12/2022
 14295                                  		;mov	word [es:di+19h], 0 ; [es:di+BDS.hiddensecs+2]
 14296                                  		;mov	word [es:di+17h], 0 ; [es:di+BDS.hiddensecs]
 14297                                  		;mov	word [es:di+1Dh], 0 ; [es:di+BDS.totalsecs32+2]
 14298                                  		; 18/12/2022
 14299 0000076D 29C9                    		sub	cx, cx ; 0
 14300                                  		;mov	[es:di+19h], cx ; 0 ; [es:di+BDS.hiddensecs+2]
 14301                                  		;mov	[es:di+17h], cx ; 0 ; [es:di+BDS.hiddensecs]
 14302                                  		;mov	[es:di+1Dh], cx ; 0 ; [es:di+BDS.totalsecs32+2]
 14303                                  		
 14304                                  		; 02/09/2023
 14305 0000076F 894D19                  		mov	[di+19h], cx ; 0 ; [di+BDS.hiddensecs+2]
 14306 00000772 894D17                  		mov	[di+17h], cx ; 0 ; [di+BDS.hiddensecs]
 14307 00000775 894D1D                  		mov	[di+1Dh], cx ; 0 ; [di+BDS.totalsecs32+2]
 14308                                  
 14309                                  		; 21/12/2023 - Retro DOS v5.0
 14310 00000778 894D1F                  		mov     [di+1Fh], cx    ; [di+BDS.fatsecs32] ; BPB_FATSz32
 14311 0000077B 894D21                  		mov     [di+21h], cx    ; [di+BDS.fatsecs32+2]
 14312 0000077E 894D27                  		mov     [di+27h], cx    ; [di+BDS.rootdirclust]
 14313 00000781 894D29                  		mov     [di+29h], cx    ; [di+BDS.rootdirclust+2]
 14314 00000784 894D2F                  		mov     [di+2Fh], cx    ; [di+BDS.reserved]
 14315                                  					;     BPB_Reserved (12 zero bytes)
 14316 00000787 894D31                  		mov     [di+31h], cx
 14317 0000078A 894D33                  		mov     [di+33h], cx
 14318 0000078D 894D35                  		mov     [di+35h], cx
 14319 00000790 894D37                  		mov     [di+37h], cx
 14320 00000793 894D39                  		mov     [di+39h], cx
 14321 00000796 894D23                  		mov     [di+23h], cx    ; [di+BDS.extflags] ; BPB_ExtFlags
 14322 00000799 894D25                  		mov     [di+25h], cx    ; [di+BDS.fsver] ; BPB_FSVer
 14323                                  
 14324 0000079C 49                      		dec     cx              ; -1 ; 0FFFFFFFFh
 14325 0000079D 894D2B                  		mov     [di+2Bh], cx    ; [di+BDS.fsinfo] ; BPB_FSInfo
 14326 000007A0 894D2D                  		mov     [di+2Dh], cx    ; [di+BDS.bkbootsec] ; BPB_BkBootSec
 14327                                  		
 14328 000007A3 1F                      		pop	ds ; 02/09/2023
 14329                                  getret:
 14330 000007A4 5B                      		pop	bx
 14331 000007A5 5A                      		pop	dx
 14332 000007A6 59                      		pop	cx
 14333                                  ;getret_exit:		; 21/12/2023
 14334 000007A7 C3                      		retn
 14335                                  ; ---------------------------------------------------------------------------
 14336                                  
 14337                                  getbp_err_ret:	; before doing anything else, set set_id_flag to 0.
 14338                                  		;mov	ds:set_id_flag,	0
 14339                                  		; 19/10/2022
 14340 000007A8 C606[9B04]00            		mov	byte [set_id_flag], 0
 14341 000007AD E8F605                  		call	maperror
 14342 000007B0 EBF2                    		jmp	short getret
 14343                                  ; ---------------------------------------------------------------------------
 14344                                  ; 21/12/2023
 14345                                  ;		; we have a 3.5" diskette for which we cannot build a bpb.
 14346                                  ;		; we do	not assume any type of bpb for this medium.
 14347                                  ;
 14348                                  ;got_unknown_medium:
 14349                                  ;		;mov	ds:set_id_flag,	0
 14350                                  ;		mov	byte [set_id_flag], 0
 14351                                  ;		mov	al, 7
 14352                                  ;		stc
 14353                                  ;		jmp	short getret
 14354                                  
 14355                                  ; =============== S U B	R O U T	I N E =======================================
 14356                                  
 14357                                  ; 15/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 14358                                  
 14359                                  ; ----------------------------------------------------------------
 14360                                  ; read in the boot sector. set carry if error in reading sector.
 14361                                  ; bx is set to 1 if the boot sector is invalid, otherwise it is 0.
 14362                                  ;
 14363                                  ;	assumes es:di -> bds, ds-> Bios_Data
 14364                                  ; ----------------------------------------------------------------
 14365                                  
 14366                                  ; 10/03/2019 - Retro DOS v4.0
 14367                                  
 14368                                  ; 30/12/2022 - Retro DOS v4.2
 14369                                  ; (MSDOS 6.21 IO.SYS, BIOSCODE:06C3h)
 14370                                  ; ((MSDOS 6.22 IO.SYS, BIOSCODE:06C3h)) ; 22/12/2023
 14371                                  
 14372                                  ; 22/12/2023 - Retro DOS v5.0
 14373                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSCODE:07C6h)
 14374                                  
 14375                                  readbootsec:	
 14376 000007B2 B600                    		mov	dh, 0		; head 0
 14377 000007B4 B90100                  		mov	cx, 1		; cylinder 0, sector 1
 14378 000007B7 E8FC00                  		call	read_sector
 14379 000007BA 7243                    		jb	short err_ret
 14380 000007BC 31DB                    		xor	bx, bx		; assume valid boot sector
 14381                                  
 14382                                  		; put a sanity check for the boot sector in here to detect
 14383                                  		; boot sectors that do not have valid bpbs. we examine the
 14384                                  		; first two bytes - they must contain a long jump (69h) or a
 14385                                  		; short jump (EBh) followed by a nop (90h), or a short jump
 14386                                  		; (E9h). if this test is passed, we further check by examining
 14387                                  		; the signature at the end of the boot sector for the word
 14388                                  		; AA55h. if the signature is not present, we examine the media
 14389                                  		; descriptor byte to see if it is valid. for dos 3.3, this
 14390                                  		; logic is modified a little bit. we are not going to check
 14391                                  		; signature. instead we are going to sanity check the media
 14392                                  		; byte in bpb regardless of the validity of signature. this is
 14393                                  		; to save the already developed commercial products that have
 14394                                  		; good jump instruction and signature but with the false bpb
 14395                                  		; informations
 14396                                  
 14397                                  ; that will crash the diskette drive operation. (for example, symphony diskette).
 14398                                  
 14399                                  		; 02/09/2023
 14400                                  		; 19/10/2022
 14401                                  		;cmp	byte [disksector], 69h ; is it a direct jump?
 14402                                  		;jz	short check_bpb_mediabyte ; don't need to find a nop
 14403                                  		;cmp	byte [disksector], 0E9h ; dos 2.0 jump?
 14404                                  		;jz	short check_bpb_mediabyte ; no need for	nop
 14405                                  		;cmp	byte [disksector], 0EBh ; how about a short jump?
 14406                                  		;jnz	short invalidbootsec
 14407                                  		;cmp	byte [disksector+2], 90h ; is next one a nop?
 14408                                  		;jnz	short invalidbootsec
 14409                                  
 14410                                  		; 02/09/2023 (PCDOS 7.1)
 14411 000007BE A0[5201]                		mov	al, [disksector]
 14412 000007C1 3C69                    		cmp	al, 69h		; is it a direct jump?
 14413 000007C3 740F                    		je	short check_bpb_mediabyte
 14414                                  					; don't need to find a nop
 14415 000007C5 3CE9                    		cmp	al, 0E9h	; dos 2.0 jump?
 14416 000007C7 740B                    		je	short check_bpb_mediabyte
 14417                                  					; no need for nop
 14418 000007C9 3CEB                    		cmp	al, 0EBh	; how about a short jump?
 14419 000007CB 7530                    		jne	short invalidbootsec
 14420 000007CD 803E[5401]90            		cmp	byte [disksector+2], 90h ; is next one a nop?
 14421 000007D2 7529                    		jne	short invalidbootsec
 14422                                  
 14423                                  ; 15/10/5022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14424                                  ;
 14425                                  ;; 10/03/2019
 14426                                  ;; (MSDOS 3.3, MSDISK.ASM, 1988)
 14427                                  ;;
 14428                                  ;; Don't have to perform the following signature check since
 14429                                  ;; we need to check the media byte even with the good signatured diskette.
 14430                                  ;;
 14431                                  ;;check_signature:
 14432                                  ;;		cmp	word [cs:disksector+1FEh],0AA55h ; see if non-ibm
 14433                                  ;;							 ; disk or 1.x media.
 14434                                  ;;		jz	short checksinglesided ; go see if singled sided medium.
 14435                                  ;;					       ; may need some special handling
 14436                                  
 14437                                  ; check for non-ibm disks which do not have the signature AA55h at the
 14438                                  ; end of the boot sector, but still have a valid boot sector. this is done
 14439                                  ; by examining the media descriptor in the boot sector.
 14440                                  
 14441                                  		; 19/10/2022
 14442                                  check_bpb_mediabyte:
 14443 000007D4 A0[6701]                		mov	al, [disksector+15h]
 14444                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 14445 000007D7 50                      		push	ax ; 02/09/2023
 14446 000007D8 24F0                    		and	al, 0F0h
 14447 000007DA 3CF0                    		cmp	al, 0F0h	; allow	for strange media
 14448 000007DC 58                      		pop	ax ; 02/09/2023
 14449 000007DD 751E                    		jnz	short invalidbootsec
 14450                                  
 14451                                  ; there were some (apparently a lot of them) diskettes that had been formatted
 14452                                  ; under dos 3.1 and earlier versions which have invalid bpbs in their boot
 14453                                  ; sectors. these are specifically diskettes that were formatted in drives
 14454                                  ; with one head, or whose side 0 was bad. these contain bpbs in the boot
 14455                                  ; sector that have the sec/clus field set to 2 instead of 1, as is standard
 14456                                  ; in dos. in order to support them, we have to introduce a "hack" that will
 14457                                  ; help our build bpb routine to recognise these specific cases, and to
 14458                                  ; set up out copy of the bpb accordingly.
 14459                                  ; we do this by checking to see if the boot sector is off a diskette that
 14460                                  ; is single-sided and is a pre-dos 3.20 diskette. if it is, we set the
 14461                                  ; sec/clus field to 1. if not, we carry on as normal.
 14462                                  
 14463                                  checksinglesided:
 14464                                  		;mov	al, [disksector+15h]
 14465                                  		; 02/09/2023
 14466                                  		; al = [disksector+15h]
 14467 000007DF 3CF0                    		cmp	al, 0F0h
 14468 000007E1 741B                    		jz	short gooddsk
 14469 000007E3 A801                    		test	al, 1
 14470 000007E5 7517                    		jnz	short gooddsk
 14471 000007E7 813E[5A01]332E          		cmp	word [disksector+8], 2E33h ; "3."
 14472 000007ED 7507                    		jnz	short mustbeearlier
 14473 000007EF 803E[5C01]32            		cmp	byte [disksector+0Ah], 32h ; "2"
 14474 000007F4 7308                    		jnb	short gooddsk
 14475                                  
 14476                                  ; we must have a pre-3.20 diskette. set the sec/clus field to 1
 14477                                  
 14478                                  mustbeearlier:				
 14479 000007F6 C606[5F01]01            		mov	byte [disksector+0Dh], 1
 14480                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
 14481 000007FB EB01                    		jmp	short gooddsk
 14482                                  ; ---------------------------------------------------------------------------
 14483                                  
 14484                                  invalidbootsec:				
 14485 000007FD 43                      		inc	bx		; indicate that boot sector invalid
 14486                                  		; 10/12/2022
 14487                                  movbpb_ret:
 14488                                  gooddsk:				
 14489 000007FE F8                      		clc
 14490                                  err_ret:
 14491 000007FF C3                      		retn
 14492                                  ; ---------------------------------------------------------------------------
 14493                                  
 14494                                  		; 10/12/2022
 14495                                  ;err_ret:				
 14496                                  		;retn
 14497                                  
 14498                                  ; =============== S U B	R O U T	I N E =======================================
 14499                                  
 14500                                  ; 15/10/2022
 14501                                  ; ---------------------------------------------------------------------------
 14502                                  ; 'movbpb' moves the bpb read from the boot sector into registers for use by
 14503                                  ; getbp routine at has1
 14504                                  ;
 14505                                  ; if the set_id_flag is 1, and if an extended boot record, then set volume
 14506                                  ; serial number, volume label, file system id in bds according to
 14507                                  ; the boot record. after that, this routine will set the set_id_flag to 2
 14508                                  ; to signal that volume label is set already from the extended boot record
 14509                                  ; (so, don't set it again by calling "set_volume_id" routine which uses
 14510                                  ; the volume label in the root directory.)
 14511                                  ; ---------------------------------------------------------------------------
 14512                                  
 14513                                  ; 10/03/2019 - Retro DOS v4.0
 14514                                  
 14515                                  ; 22/12/2023
 14516                                  %if 0
 14517                                  		; 19/10/2022
 14518                                  movbpb:
 14519                                  		mov	dh, [disksector+0Dh]
 14520                                  					; disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
 14521                                  					; sectors per unit
 14522                                  		mov	bh, [disksector+11h]
 14523                                  					; [disksector+EXT_BOOT.BPB+EBPB.ROOTENTRIES]
 14524                                  					; number of directory entries
 14525                                  		mov	cx, [disksector+13h]
 14526                                  					; [disksector+EXT_BOOT.BPB+EBPB.TOTALSECTORS]
 14527                                  					; size of drive
 14528                                  		mov	ah, [disksector+15h]
 14529                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 14530                                  					; media	descriptor
 14531                                  		mov	al, [disksector+16h];
 14532                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERFAT]
 14533                                  					; number of fat	sectors
 14534                                  		mov	bl, [disksector+18h]
 14535                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERTRACK]
 14536                                  					; sectors per track
 14537                                  		mov	dl, [disksector+1Ah]
 14538                                  					; [disksector+EXT_BOOT.BPB+EBPB.HEADS]
 14539                                  					; number of heads
 14540                                  %else
 14541                                  		; 29/12/2023
 14542                                  		; 22/12/2023 - Retro DOS v5.0
 14543                                  		; (PCDOS 7.1 IBMBIO.COM, BIOSCODE:0814h)
 14544                                  		;;;
 14545                                  movbpb:
 14546 00000800 57                      		push	di
 14547 00000801 83C706                  		add	di, 6		; BDS+6 = BDS.BPB
 14548 00000804 8D36[5D01]              		lea	si, [disksector+0Bh]
 14549 00000808 B93500                  		mov	cx, 53		; copy bios parameters block
 14550                                  					; from BPB_BytsPerSec to (FAT32) BS_DrvNum (excluded)
 14551 0000080B FC                      		cld
 14552 0000080C F3A4                    		rep movsb
 14553 0000080E 8B4CD3                  		mov	cx, [si-45]	; si = disksector+64 -> 64-45 = 19
 14554                                  					; disksektor+19 = BPB_TotSec16
 14555 00000811 31C0                    		xor	ax, ax
 14556 00000813 E308                    		jcxz	movbpb_bigdisk
 14557 00000815 26894DE0                		mov	[es:di-32], cx	; write 16 bit total sectors
 14558                                  					; to 32 bit total sectors field
 14559 00000819 268945E2                		mov	[es:di-30], ax	; BPB_TotalSec32+2 (BDS offset 29, BPB offset 23)
 14560                                  movbpb_bigdisk:
 14561 0000081D 3944D6                  		cmp	[si-42], ax     ; BPB_FATSz16 = disksector+22
 14562 00000820 7410                    		jz	short movbpb_fat32
 14563                                  movbpb_fat:
 14564 00000822 83EF1C                  		sub	di, 28		; di = BDS offset 31 (BPB offset 25)
 14565                                  		; 29/12/2023
 14566 00000825 B90C00                  		mov	cx, 12		; clear 12 byte extended BDS (FAT32) fields
 14567                                  					; (which are used only for FAT32 disks)
 14568 00000828 F3AA                    		rep stosb
 14569 0000082A 48                      		dec	ax		; -1 ; 0FFFFh
 14570 0000082B AB                      		stosw			; set BDS offset 43 (dword) to -1
 14571                                  					; dword [BDS.BPB_FSInfo] = 0FFFFFFFFh
 14572 0000082C AB                      		stosw
 14573 0000082D 40                      		inc	ax		; ax = 0
 14574 0000082E B10C                    		mov	cl, 12		
 14575                                  		;mov	cx, 12		; clear BDS offset 47 to 59
 14576                                  					; (BPB offset 41 to 53) (disksector offset 52 to 64)
 14577 00000830 F3AA                    		rep stosb
 14578                                  movbpb_fat32:
 14579 00000832 5F                      		pop	di
 14580                                  %endif
 14581                                  		;;;
 14582                                  
 14583 00000833 803E[9B04]01            		cmp	byte [set_id_flag], 1 ; called by get_bpb?
 14584 00000838 75C4                    		jnz	short movbpb_ret
 14585 0000083A E81200                  		call	mov_media_ids
 14586 0000083D 7205                    		jb	short movbpb_conv ; conventional boot record?
 14587 0000083F C606[9B04]02            		mov	byte [set_id_flag], 2 ; signals that volume id is set
 14588                                  movbpb_conv:
 14589 00000844 803E[7700]01            		cmp	byte [fhave96], 1
 14590 00000849 75B3                    		jnz	short movbpb_ret
 14591 0000084B E83914                  		call	resetchanged	; reset	flags in bds to	not fchanged.
 14592                                  		; 10/12/2022
 14593                                  		; cf = 0
 14594                                  ;movbpb_ret:
 14595                                  		;clc
 14596 0000084E C3                      		retn
 14597                                  		
 14598                                  ; =============== S U B	R O U T	I N E =======================================
 14599                                  
 14600                                  ;copy the boot_serial number, volume id, and filesystem id from the
 14601                                  ;***extended boot record*** in ds:disksector to the bds table pointed
 14602                                  ;by es:di.
 14603                                  
 14604                                  ;in.) es:di -> bds
 14605                                  ;     ds:disksector = valid extended boot record.
 14606                                  ;out.) vol_serial, bds_volid and bds_system_id in bds are set according to
 14607                                  ;      the boot record information.
 14608                                  ;     carry flag set if not an extended bpb.
 14609                                  ;     all registers saved except the flag.
 14610                                  
 14611                                  ; 22/12/2023
 14612                                  %if 0
 14613                                  		; 19/10/2022
 14614                                  mov_media_ids:		
 14615                                  		cmp	byte [disksector+26h], 29h
 14616                                  					; [disksector+EXT_BOOT.SIG],
 14617                                  					; EXT_BOOT_SIGNATURE
 14618                                  		jnz	short mmi_not_ext
 14619                                  		push	cx
 14620                                  		mov	cx, [disksector+27h]
 14621                                  					; [disksector+EXT_BOOT.SERIAL]
 14622                                  		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
 14623                                  		mov	cx, [disksector+29h]
 14624                                  					; [disksector+EXT_BOOT.SERIAL+2]
 14625                                  		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
 14626                                  		push	di
 14627                                  		push	si
 14628                                  		mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
 14629                                  		mov	si, disksector+2Bh
 14630                                  		;mov	si, (offset disksector+2Bh) ;
 14631                                  					; disksector+EXT_BOOT.VOL_LABEL
 14632                                  		add	di, 75		; BDS.volid
 14633                                  		rep movsb
 14634                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
 14635                                  		; 10/12/2022
 14636                                  		mov	cl, 8 ; cx = 8
 14637                                  		mov	si, disksector+36h
 14638                                  		;mov	si, (offset disksector+36h) ; disksector+EXT_BOOT.SYSTEM_ID
 14639                                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
 14640                                  		rep movsb
 14641                                  		pop	si
 14642                                  		pop	di
 14643                                  		pop	cx
 14644                                  		; 10/12/2022
 14645                                  		; cf = 0
 14646                                  		;clc		; this clc is not required (16/06/2019 - Erdogan Tan)
 14647                                  				; (20/09/2022)
 14648                                  		retn
 14649                                  %else
 14650                                  		; 22/12/2023 - Retro DOS v5.0
 14651                                  		; (PCDOS 7.1 IBMBIO.COM, BIOSCODE:0865h)
 14652                                  		;;;		
 14653                                  mov_media_ids:
 14654 0000084F 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB.FATSz16
 14655 00000854 7507                    		jnz	short mmi_chk_fat
 14656 00000856 803E[9401]29            		cmp	byte [disksector+42h], 29h
 14657                                  					; [disksector+FAT32_EXT_BOOT.SIG],
 14658                                  					; EXT_BOOT_SIGNATURE
 14659 0000085B EB05                    		jmp	short mmi_chk_fat32
 14660                                  mmi_chk_fat:
 14661 0000085D 803E[7801]29            		cmp	byte [disksector+26h], 29h
 14662                                  					; [disksector+EXT_BOOT.SIG],EXT_BOOT_SIGNATURE
 14663                                  mmi_chk_fat32:
 14664 00000862 7543                    		jnz	short mmi_not_ext
 14665 00000864 51                      		push	cx
 14666 00000865 50                      		push	ax
 14667 00000866 57                      		push	di
 14668 00000867 56                      		push	si
 14669 00000868 1E                      		push	ds
 14670 00000869 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB.FATSz16
 14671 0000086E 750C                    		jnz	short mmi_fat
 14672                                  
 14673                                  mmi_fat32:				; FAT32 file system
 14674                                  		;lds	cx, dword ptr ds:disksector+43h
 14675 00000870 C50E[9501]              		lds	cx, [disksector+43h]	; BS_FAT32_VolID
 14676 00000874 BE[9901]                		mov	si, disksector+47h	; BS_FAT32_VolLab
 14677 00000877 B8[A401]                		mov	ax, disksector+52h	; BS_FAT32_FilSysType
 14678 0000087A EB0A                    		jmp	short mmi_do
 14679                                  
 14680                                  mmi_fat:
 14681                                  		;lds	cx, dword ptr ds:disksector+27h
 14682 0000087C C50E[7901]              		lds	cx, [disksector+27h]	; BS_VolID
 14683 00000880 BE[7D01]                		mov	si, disksector+2Bh	; BS_VolLab
 14684 00000883 B8[8801]                		mov	ax, disksector+36h	; BS_FilSysType
 14685                                  mmi_do:
 14686 00000886 26898D8900              		mov	[es:di+89h], cx	; [es:di+BDS.vol_serial]
 14687                                  					; (BDS offset 137)
 14688 0000088B 268C9D8B00              		mov	[es:di+8Bh], ds	; [es:di+BDS.vol_serial+2]
 14689 00000890 1F                      		pop	ds
 14690 00000891 B90B00                  		mov	cx, 11
 14691 00000894 83C77D                  		add	di, 125		; di = di+125 = BDS.volid
 14692 00000897 F3A4                    		rep movsb
 14693 00000899 B108                    		mov	cl, 8		; di = di+136
 14694 0000089B 89C6                    		mov	si, ax		; BS_FilSysType or BS_FAT32_FilSysType
 14695 0000089D 83C705                  		add	di, 5		; di = di+141 = BDS.filesys_id
 14696 000008A0 F3A4                    		rep movsb
 14697 000008A2 5E                      		pop	si
 14698 000008A3 5F                      		pop	di
 14699 000008A4 58                      		pop	ax
 14700 000008A5 59                      		pop	cx
 14701                                  		;clc	; this clc is not required (16/06/2019 - Erdogan Tan)
 14702                                  			; (20/09/2022 - 27/06/2023) MSDOS 6.21 .. PCDOS 7.1
 14703 000008A6 C3                      		retn
 14704                                  %endif
 14705                                  		;;;
 14706                                  	
 14707                                  ; ---------------------------------------------------------------------------
 14708                                  
 14709                                  mmi_not_ext:				
 14710 000008A7 F9                      		stc
 14711 000008A8 C3                      		retn
 14712                                  
 14713                                  ; =============== S U B	R O U T	I N E =======================================
 14714                                  
 14715                                  ; 15/10/2022
 14716                                  ; --------------------------------------------------------------
 14717                                  ; read in the fat sector and get the media byte from it.
 14718                                  ; input : es:di -> bds
 14719                                  ; output:
 14720                                  ;	  carry set if an error occurs, ax contains error code.
 14721                                  ;	  otherwise, ah contains media byte on exit
 14722                                  ; --------------------------------------------------------------
 14723                                  
 14724                                  readfat:	
 14725                                  		;mov	dh, 0
 14726                                  		; 10/12/2022
 14727 000008A9 30F6                    		xor	dh, dh
 14728 000008AB B90200                  		mov	cx, 2		; head 0
 14729                                  					; cylinder 0, sector 2
 14730 000008AE E80500                  		call	read_sector
 14731 000008B1 7202                    		jb	short bad_fat_ret
 14732 000008B3 8A27                    		mov	ah, [bx]	; media	byte
 14733                                  bad_fat_ret:				
 14734 000008B5 C3                      		retn
 14735                                  
 14736                                  ; =============== S U B	R O U T	I N E =======================================
 14737                                  
 14738                                  ; 15/10/2022
 14739                                  
 14740                                  ; ---------------------------------------------------------------------------
 14741                                  ; read a single sector into the temp buffer.
 14742                                  ; perform three retries in case of error.
 14743                                  ;   inputs:	es:[di].bds_drivenum has physical drive to use
 14744                                  ;		cx has sector and cylinder
 14745                                  ;		dh has head
 14746                                  ;		es:di has bds
 14747                                  ;		ds has Bios_Data
 14748                                  ;
 14749                                  ;   outputs:	carry clear
 14750                                  ;		    Bios_Data:bx point to sector
 14751                                  ;		       (note: some callers assume location of buffer)
 14752                                  ;
 14753                                  ;		carry set
 14754                                  ;		    ax has rom error code
 14755                                  ;
 14756                                  ; register bp is preserved.
 14757                                  ; ---------------------------------------------------------------------------
 14758                                  
 14759                                  ; 10/03/2019 - Retro DOS v4.0
 14760                                  ; 22/12/2023 - Retro DOS v5.0
 14761                                  
 14762                                  		; 19/10/2022
 14763                                  read_sector:
 14764 000008B6 55                      		push	bp
 14765 000008B7 BD0300                  		mov	bp, 3		; make 3 attempts
 14766 000008BA 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 14767 000008BE BB[5201]                		mov	bx, disksector	; get es:bx to point to	buffer
 14768                                  rd_ret:
 14769 000008C1 06                      		push	es
 14770 000008C2 1E                      		push	ds
 14771 000008C3 07                      		pop	es
 14772 000008C4 B80102                  		mov	ax, 201h
 14773 000008C7 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
 14774                                  					; AL = number of sectors to read, CH = track, CL = sector
 14775                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
 14776                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
 14777 000008C9 07                      		pop	es
 14778 000008CA 734A                    		jnb	short okret2
 14779                                  rd_rty:
 14780 000008CC E80F05                  		call	again		; reset	disk, decrement	bp, preserve ax
 14781 000008CF 7442                    		jz	short err_rd_ret
 14782                                  
 14783                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 14784 000008D1 26F6453F01              		test	byte [es:di+3Fh], 1
 14785                                  		;test	byte [es:di+23h], 1
 14786                                  		;;test	byte ptr [es:di+23h], 1	; [es:di+BDS.flags]
 14787                                  					; fnon_removable
 14788 000008D6 75E9                    		jnz	short rd_ret
 14789 000008D8 803E[A905]00            		cmp	byte [media_set_for_format], 0
 14790 000008DD 7510                    		jnz	short rd_skip1_dpt
 14791 000008DF 50                      		push	ax
 14792 000008E0 1E                      		push	ds		; for retry, set the head settle time to 0Fh
 14793 000008E1 C536[2D01]              		lds	si, [dpt]
 14794                                  		;mov	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 14795                                  		;mov	byte [si+9], 15 ; [si+DISK_PARMS.DISK_HEAD_STTL]
 14796                                  		;			; NORMSETTLE
 14797                                  		; 12/12/2022
 14798 000008E5 B00F                    		mov	al, 15
 14799 000008E7 864409                  		xchg	al, [si+9]
 14800                                  		; 
 14801 000008EA 1F                      		pop	ds
 14802 000008EB A2[2A01]                		mov	[save_head_sttl], al
 14803 000008EE 58                      		pop	ax
 14804                                  rd_skip1_dpt:
 14805 000008EF 06                      		push	es
 14806 000008F0 1E                      		push	ds
 14807 000008F1 07                      		pop	es
 14808 000008F2 B80102                  		mov	ax, 201h
 14809 000008F5 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
 14810                                  					; AL = number of sectors to read, CH = track, CL = sector
 14811                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
 14812                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
 14813 000008F7 07                      		pop	es
 14814 000008F8 9C                      		pushf
 14815 000008F9 803E[A905]00            		cmp	byte [media_set_for_format], 0
 14816 000008FE 750E                    		jnz	short rd_skip2_dpt
 14817 00000900 50                      		push	ax
 14818 00000901 A0[2A01]                		mov	al, [save_head_sttl]
 14819 00000904 1E                      		push	ds
 14820 00000905 C536[2D01]              		lds	si, [dpt]
 14821 00000909 884409                  		mov	[si+9],	al	; [si+DISK_PARMS.DISK_HEAD_STTL]
 14822 0000090C 1F                      		pop	ds
 14823 0000090D 58                      		pop	ax
 14824                                  rd_skip2_dpt:
 14825 0000090E 9D                      		popf
 14826 0000090F 7305                    		jnb	short okret2
 14827 00000911 EBB9                    		jmp	short rd_rty
 14828                                  ; ---------------------------------------------------------------------------
 14829                                  
 14830                                  err_rd_ret:
 14831 00000913 B2FF                    		mov	dl, 0FFh	; make sure we ask rom if media	has changed
 14832                                  					; return error
 14833 00000915 F9                      		stc
 14834                                  
 14835                                  ; update information pertaining to last drive accessed, time of access, last
 14836                                  ; track accessed in that drive.
 14837                                  
 14838                                  okret2:
 14839 00000916 8816[7600]              		mov	[step_drv], dl	; set up for head settle logic in disk
 14840 0000091A 8816[1E01]              		mov	[tim_drv], dl	; save drive last accessed
 14841                                  		
 14842                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 14843 0000091E 26886D78                		mov	[es:di+78h], ch
 14844                                  		;mov	[es:di+46h], ch	; [es:di+BDS.track]
 14845                                  					; save last track accessed on this drive
 14846                                  					; preserve flags in case error occurred
 14847 00000922 9C                      		pushf
 14848 00000923 E89804                  		call	set_tim
 14849 00000926 9D                      		popf			; restore flags
 14850 00000927 5D                      		pop	bp
 14851 00000928 C3                      		retn
 14852                                  
 14853                                  ;----------------------------------------------------------------------------
 14854                                  ;	disk open/close routines
 14855                                  ;----------------------------------------------------------------------------
 14856                                  
 14857                                  dsk_open:				; 2C7h:80Ah = 70h:2D7Ah
 14858 00000929 803E[7700]00            		cmp	byte [fhave96], 0
 14859 0000092E 7407                    		jz	short dsk_open_exit ; done if no changeline support
 14860 00000930 E871FC                  		call	SetDrive	; get bds for drive
 14861                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 14862 00000933 26FF453C                		inc	word [es:di+3Ch] ; [es:di+BDS.opcnt] ; BDS offset 60
 14863                                  		;inc	word [es:di+20h] ; [es:di+BDS.opcnt]
 14864                                  dsk_open_exit:
 14865                                  		; 10/12/2022
 14866                                  		; cf = 0			
 14867                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
 14868                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
 14869 00000937 C3                      		retn
 14870                                  ; ---------------------------------------------------------------------------
 14871                                  
 14872                                  dsk_close:				; 2C7h:81Ah = 70h:2D8Ah
 14873 00000938 803E[7700]00            		cmp	byte [fhave96], 0
 14874 0000093D 740E                    		jz	short exitjx	; done if no changeline	support
 14875 0000093F E862FC                  		call	SetDrive	; get bds for drive
 14876                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 14877 00000942 26837D3C00              		cmp	word [es:di+3Ch], 0 ; [es:di+BDS.opcnt] ; BDS off 60
 14878                                  		;cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 14879 00000947 7404                    		jz	short exitjx	; watch	out for	wrap
 14880                                  		; 22/12/2023
 14881 00000949 26FF4D3C                		dec	word [es:di+3Ch]
 14882                                  		;dec	word [es:di+20h]
 14883                                  exitjx:
 14884                                  		; 10/12/2022
 14885                                  		; cf = 0
 14886                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
 14887                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
 14888 0000094D C3                      		retn
 14889                                  
 14890                                  ;----------------------------------------------------------------------------
 14891                                  ;		disk removable routine
 14892                                  ;----------------------------------------------------------------------------
 14893                                  
 14894                                  		; al is	unit #
 14895                                  dsk_rem:				; 2C7h:831h = 70h:2DA1h
 14896 0000094E E853FC                  		call	SetDrive	; get bds for this drive
 14897                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 14898                                  		;test	byte [es:di+BDS.flags], fnon_removable
 14899 00000951 26F6453F01              		test	byte [es:di+3Fh], 1 ; [es:di+BDS.flags], fnon_removable
 14900 00000956 74F5                    		jz	short exitjx
 14901                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags], fnon_removable
 14902                                  		;;jnz	short x_bus_exit ; non_rem
 14903                                  		;jnz	short non_rem	; 15/10/2022
 14904                                  		;; 10/12/2022
 14905                                  		;; cf = 0
 14906                                  		;;clc			; CF is already ZERO here
 14907                                  		;			; 15/10/2022
 14908                                  		;retn
 14909                                  ; ---------------------------------------------------------------------------
 14910                                  
 14911                                  non_rem:
 14912                                  x_bus_exit:
 14913 00000958 B403                    		mov	ah, 3		; 2C7h:83Dh = 0070h:2DADh
 14914                                  					; return busy status
 14915 0000095A F9                      		stc
 14916                                  dsk_ret:
 14917 0000095B C3                      		retn
 14918                                  
 14919                                  ;----------------------------------------------------------------------------
 14920                                  ;		disk i/o routines
 14921                                  ;----------------------------------------------------------------------------
 14922                                  
 14923                                  dsk_writv:				; 2C7h:841h = 70h:2DB1h
 14924                                  		;mov	word [wrtverify], 103h
 14925                                  		; 19/10/2022
 14926 0000095C C706[2001]0301          		mov	word [rflag], 103h
 14927                                  		;mov	word ptr ds:rflag, 103h	; write	and verify
 14928 00000962 EB06                    		jmp	short dsk_cl
 14929                                  ; ---------------------------------------------------------------------------
 14930                                  
 14931                                  dsk_writ:				; 2C7h:849h = 70h:2DB9h
 14932                                  		;mov	word [wrtverify], 3
 14933                                  		; 19/10/2022
 14934 00000964 C706[2001]0300          		mov	word [rflag], 3
 14935                                  		;mov	word ptr ds:rflag, 3 ; romwrite
 14936                                  dsk_cl:
 14937 0000096A E8A400                  		call	diskio		; romwrite
 14938                                  ; ---------------------------------------------------------------------------
 14939                                  
 14940                                  dsk_io:
 14941 0000096D 73EC                    		jnb	short dsk_ret
 14942 0000096F E965F7                  		jmp	bc_err_cnt
 14943                                  ; ---------------------------------------------------------------------------
 14944                                  
 14945                                  dsk_read:				; ; 2C7h:857h =	70h:2DC7h
 14946 00000972 E89700                  		call	diskrd
 14947 00000975 EBF6                    		jmp	short dsk_io
 14948                                  
 14949                                  ; =============== S U B	R O U T	I N E =======================================
 14950                                  
 14951                                  ; 15/10/2022
 14952                                  ; 10/03/2019 - Retro DOS v4.0
 14953                                  ; 22/12/2023 - Retro DOS v5.0
 14954                                  
 14955                                  ;-----------------------------------------------------------
 14956                                  ; miscellaneous odd jump routines. 
 14957                                  ; moved out of mainline for speed.
 14958                                  
 14959                                  ; if we have a system where we have virtual drives, we need 
 14960                                  ; to prompt the user to place the correct disk in the drive.
 14961                                  ;
 14962                                  ;	assume es:di -> bds, ds:->Bios_Data
 14963                                  ;-----------------------------------------------------------
 14964                                  
 14965                                  		; 19/10/2022
 14966                                  checksingle:
 14967 00000977 50                      		push	ax
 14968 00000978 53                      		push	bx
 14969                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 14970 00000979 268B5D3F                		mov	bx, [es:di+3Fh]	; [es:di+BDS.flags]
 14971                                  		;mov	bx, [es:di+23h]	; [es:di+BDS.flags]
 14972                                  
 14973                                  ; if hard drive, cannot change disk.
 14974                                  ; if current owner of physical drive, no need to change diskette.
 14975                                  
 14976 0000097D F6C321                  		test	bl, 21h		; fnon_removable|fi_own_physical
 14977 00000980 7573                    		jnz	short singleret
 14978 00000982 F6C310                  		test	bl, 10h		; fi_am_mult
 14979                                  					; is there a drive sharing this	physical drive?
 14980 00000985 746E                    		jz	short singleret
 14981                                  
 14982                                  ; look for the previous owner of this physical drive
 14983                                  ; and reset its ownership flag.
 14984                                  
 14985 00000987 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 14986                                  					; get physical drive number
 14987 0000098B 06                      		push	es		; preserve pointer to current bds
 14988 0000098C 57                      		push	di
 14989 0000098D C43E[1901]              		les	di, [start_bds] ; get first bds
 14990                                  scan_list:
 14991 00000991 26384504                		cmp	[es:di+4], al
 14992 00000995 7553                    		jnz	short scan_skip	; Not our drive. Try next bds.
 14993 00000997 B320                    		mov	bl, 20h	; ' '   ; fi_own_physical ; test ownership flag
 14994                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 14995 00000999 26845D3F                		test	[es:di+3Fh], bl	; [es:di+BDS.flags]
 14996                                  		;test	[es:di+23h], bl
 14997 0000099D 744B                    		jz	short scan_skip	; he doesn't own it either. continue
 14998 0000099F 26305D3F                		xor	[es:di+3Fh], bl
 14999                                  		;xor	[es:di+23h], bl	; reset	ownership flag
 15000 000009A3 5F                      		pop	di		; restore pointer to current bds
 15001 000009A4 07                      		pop	es
 15002 000009A5 26085D3F                		or	[es:di+3Fh], bl
 15003                                  		;or	[es:di+23h], bl	; ; set	ownership flag
 15004                                  
 15005                                  ; we examine the fsetowner flag. if it is set, then we are using the code in
 15006                                  ; checksingle to just set the owner of a drive. we must not issue the prompt
 15007                                  ; in this case.
 15008 000009A9 803E[7A00]01            		cmp	byte [fsetowner], 1
 15009 000009AE 7517                    		jnz	short not_fsetowner
 15010                                  		;cmp	byte ptr es:[di+4], 0 ;	are we handling	drive number 0 ?
 15011 000009B0 26807D0400              		cmp	byte [es:di+4], 0
 15012 000009B5 753E                    		jnz	short singleret
 15013 000009B7 268A4505                		mov	al, [es:di+5]
 15014                                  		;mov	al, es:[di+5]	; [es:di+BDS.drivelet]
 15015                                  					; get the DOS drive letter
 15016 000009BB 06                      		push	es
 15017 000009BC 8E06[1A00]              		mov	es, [zeroseg]
 15018 000009C0 26A20405                		mov	[es:LSTDRV], al
 15019                                  		;mov	es:504h, al	; [es:LSTDRV]
 15020                                  					; set up sdsb
 15021 000009C4 07                      		pop	es		; restore bds pointer
 15022 000009C5 EB2E                    		jmp	short singleret
 15023                                  ; ---------------------------------------------------------------------------
 15024                                  
 15025                                  ; to support "backward" compatibility with ibm's "single drive status byte"
 15026                                  ; we now check to see if we are in a single drive system and the application
 15027                                  ; has "cleverly" diddled the sdsb
 15028                                  
 15029                                  not_fsetowner:
 15030 000009C7 803E[7800]02            		cmp	byte [single], 2 ; if (single_drive_system)
 15031 000009CC 7517                    		jnz	short ignore_sdsb
 15032 000009CE 50                      		push	ax
 15033 000009CF 268A4505                		mov	al, [es:di+5]	; if (curr_drv == req_drv)
 15034 000009D3 88C4                    		mov	ah, al
 15035 000009D5 06                      		push	es
 15036 000009D6 8E06[1A00]              		mov	es, [zeroseg]
 15037 000009DA 2686060405              		xchg	al, [es:LSTDRV]
 15038                                  		;xchg	al, es:504h	; [es:LSTDRV]
 15039                                  					; then swap(curr_drv,req_drv)
 15040 000009DF 07                      		pop	es
 15041 000009E0 38C4                    		cmp	ah, al		; else
 15042 000009E2 58                      		pop	ax		; swap(curr_drv,req_drv)
 15043 000009E3 7410                    		jz	short singleret	; issue	swap_dsk_msg
 15044                                  ignore_sdsb:
 15045 000009E5 E8B510                  		call	swpdsk
 15046 000009E8 EB0B                    		jmp	short singleret
 15047                                  ; ---------------------------------------------------------------------------
 15048                                  
 15049                                  scan_skip:
 15050 000009EA 26C43D                  		les	di, [es:di]
 15051                                  		;les	di, es:[di]	; [es:di+BDS.link]
 15052                                  					; go to	next bds
 15053 000009ED 83FFFF                  		cmp	di, 0FFFFh ; -1	; end of list?
 15054 000009F0 759F                    		jnz	short scan_list	; continue until hit end of list
 15055 000009F2 F9                      		stc
 15056 000009F3 5F                      		pop	di		; restore current bds
 15057 000009F4 07                      		pop	es
 15058                                  singleret:
 15059 000009F5 5B                      		pop	bx
 15060 000009F6 58                      		pop	ax
 15061 000009F7 C3                      		retn
 15062                                  
 15063                                  ; 22/12/2023
 15064                                  %if 0
 15065                                  ; ---------------------------------------------------------------------------
 15066                                  
 15067                                  baddrive:
 15068                                  		mov	al, 8		; sector not found
 15069                                  		jmp	short baddrive_ret
 15070                                  %endif
 15071                                  
 15072                                  ; ---------------------------------------------------------------------------
 15073                                  
 15074                                  unformatteddrive:
 15075 000009F8 B007                    		mov	al, 7		; unknown media
 15076                                  ;baddrive_ret:
 15077 000009FA F9                      		stc
 15078                                  ; ---------------------------------------------------------------------------
 15079                                  
 15080                                  ioret:
 15081 000009FB C3                      		retn
 15082                                  
 15083                                  ; ---------------------------------------------------------------------------
 15084                                  		
 15085                                  		; 22/12/2023 - Retro DOS v5.0
 15086                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0A1Bh
 15087                                  
 15088 000009FC 10                      LBA_Packet:	db 16			; ...
 15089                                  					; DAP buffer
 15090 000009FD 00                                      db 0
 15091 000009FE 0000                    dap_block_cnt:	dw 0			; ...
 15092 00000A00 00000000                dap_trans_buf:	dd 0			; ...
 15093 00000A04 00000000                dap_lba_value:	dd 0			; ...
 15094 00000A08 00000000                		dd 0
 15095                                  
 15096                                  ; ---------------------------------------------------------------------------
 15097                                  
 15098                                  ; 15/10/2022
 15099                                  
 15100                                  ; ---------------------------------------------------------------------------
 15101                                  ;	disk i/o handler
 15102                                  ;
 15103                                  ;	al = drive number (0-6)
 15104                                  ;	ah = media descriptor
 15105                                  ;	cx = sector count
 15106                                  ;	dx = first sector (low)
 15107                                  ;	[start_sec_h] = first sector (high)  32 bit calculation.
 15108                                  ;	ds = cs
 15109                                  ;	es:di = transfer address
 15110                                  ;	[rflag]=operation (2=read, 3=write)
 15111                                  ;	[verify]=1 for verify after write
 15112                                  ;
 15113                                  ;	if successful carry flag = 0
 15114                                  ;	  else cf=1 and al contains error code
 15115                                  ; ---------------------------------------------------------------------------
 15116                                  
 15117                                  		; 12/12/2023
 15118                                  		; ds = biosdata segment (cs = bioscode segment)
 15119                                  diskrd:	
 15120                                  		;mov	ds:rflag, 2	; romread
 15121                                  		; 19/10/2022
 15122 00000A0C C606[2001]02            		mov	byte [rflag], 2 ; romread
 15123                                  
 15124                                  ; =============== S U B	R O U T	I N E =======================================
 15125                                  
 15126                                  		; 22/12/2023 - Retro DOS v5.0
 15127                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0A30h
 15128                                  ; 22/12/2023
 15129                                  %if 0
 15130                                  		; 19/10/2022
 15131                                  diskio:
 15132                                  		mov	bx, di		; es:bx	= transfer address
 15133                                  		mov	[xfer_seg], es	; save transfer	segment
 15134                                  		call	SetDrive
 15135                                  		mov	al, [es:di+10h]	; [es:di+BDS.media]
 15136                                  		mov	[medbyt], al
 15137                                  		;jcxz	short ioret
 15138                                  		jcxz	ioret
 15139                                  
 15140                                  ; see if the media is formatted or not by checking the flags field in
 15141                                  ; in the bds. if it is unformatted we cannot allow i/o, so we should
 15142                                  ; go to the error exit at label unformatteddrive.
 15143                                  
 15144                                  		test	byte [es:di+24h], 2
 15145                                  		;test	byte ptr es:[di+24h], 2	; [es:di+BDS.flags+1]
 15146                                  					; unformatted_media
 15147                                  		jnz	short unformatteddrive
 15148                                  		mov	[seccnt], cx	; save sector count
 15149                                  		mov	[spsav], sp	; save sp
 15150                                  
 15151                                  ; ensure that we are trying to access valid sectors on the drive
 15152                                  
 15153                                  		mov	ax, dx
 15154                                  		xor	si, si ; 0
 15155                                  		add	dx, cx
 15156                                  		;adc	si, 0
 15157                                  		; 02/09/2023 (PCDOS 7.1)
 15158                                  		rcl	si, 1
 15159                                  		cmp	word [es:di+0Eh], 0 ; [es:di+BDS.totalsecs16]
 15160                                  					; 32 bit sector ?
 15161                                  		jz	short sanity32
 15162                                  		;cmp	si, 0
 15163                                  		; 02/09/2023
 15164                                  		or	si, si
 15165                                  		jnz	short baddrive
 15166                                  		cmp	dx, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
 15167                                  		ja	short baddrive
 15168                                  		jmp	short sanityok
 15169                                  ; ---------------------------------------------------------------------------
 15170                                  
 15171                                  sanity32:
 15172                                  		add	si, [start_sec_h]
 15173                                  		cmp	si, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
 15174                                  		jb	short sanityok
 15175                                  		ja	short baddrive
 15176                                  		cmp	dx, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
 15177                                  		ja	short baddrive
 15178                                  sanityok:
 15179                                  		mov	dx, [start_sec_h]
 15180                                  		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 15181                                  		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 15182                                  
 15183                                  ; now dx;ax have the physical first sector.
 15184                                  ; since the following procedures is going to destroy ax, let's
 15185                                  ; save it temporarily to saved_word.
 15186                                  
 15187                                  		mov	[saved_word], ax ; save the sector number (low)
 15188                                  
 15189                                  ; set up pointer to disk base table in [dpt]. we cannot assume that iosetup
 15190                                  ; will do it because we will skip the set up stuff with hard disks.
 15191                                  
 15192                                  		push	es
 15193                                  		;mov	es, [zeroseg]
 15194                                  		; 02/09/2023
 15195                                  		xor	si, si ; 0
 15196                                  		mov	es, si
 15197                                  		les	si, [es:DSKADR]
 15198                                  		;les	si, es:78h	; [es:DSKADR]
 15199                                  					; current disk parm table
 15200                                  		mov	[dpt], si
 15201                                  		mov	[dpt+2], es
 15202                                  		pop	es
 15203                                  		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 15204                                  					; fnon_removable
 15205                                  		jnz	short skip_setup
 15206                                  		call	checksingle
 15207                                  
 15208                                  ; check to see if we have previously noted a change line. the routine
 15209                                  ; returns if everything is ok. otherwise, it pops off the stack and returns
 15210                                  ; the proper error code.
 15211                                  
 15212                                  		cmp	byte [fhave96], 0 ; do we have changeline support?
 15213                                  		jz	short diskio_nochangeline ; brif not
 15214                                  		call	checklatchio	; will do a sneaky pop stack return
 15215                                  					; if a disk error occurs
 15216                                  diskio_nochangeline:			
 15217                                  		call	iosetup		; set up tables	and variables for i/o
 15218                                  
 15219                                  ; now the settle values are correct for the following code
 15220                                  
 15221                                  skip_setup:
 15222                                  
 15223                                  ; 32 bit sector calculation.
 15224                                  ; dx:[saved_word] = starting sector number.
 15225                                  				
 15226                                  		mov	ax, dx
 15227                                  		xor	dx, dx
 15228                                  		;div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 15229                                  					 ; divide by sec per track
 15230                                  		; 02/09/2023
 15231                                  		mov	cx, [es:di+13h]
 15232                                  		div	cx
 15233                                  		mov	[temp_h], ax
 15234                                  		mov	ax, [saved_word]
 15235                                  		div	cx ; 02/09/2023
 15236                                  		;div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 15237                                  					; now, [temp_h]:ax = track #, dx = sector
 15238                                  		;inc	dl		; sector number	is 1 based.
 15239                                  		; 18/12/2022
 15240                                  		inc	dx
 15241                                  		mov	[cursec], dl	; save current sector
 15242                                  		mov	cx, [es:di+15h]	; es:di+BDS.heads]
 15243                                  					; get number of	heads
 15244                                  		push	ax
 15245                                  		xor	dx, dx
 15246                                  		mov	ax, [temp_h]	; divide tracks	by heads per cylinder
 15247                                  		div	cx
 15248                                  		mov	[temp_h], ax
 15249                                  		pop	ax
 15250                                  		div	cx		; now, [temp_h]:ax = cylinder #, dx = head
 15251                                  		cmp	word [temp_h], 0
 15252                                  		ja	short baddrive_brdg
 15253                                  		cmp	ax, 1024	; 2^10 currently maxium	for track #.
 15254                                  		ja	short baddrive_brdg
 15255                                  		mov	[curhd], dl	; save current head
 15256                                  		mov	[curtrk], ax	; save current track
 15257                                  
 15258                                  ; we are now set up for the i/o. normally, we consider the dma boundary
 15259                                  ; violations here. not true. we perform the operation as if everything is
 15260                                  ; symmetric; let the int 13 handler worry about the dma violations.
 15261                                  
 15262                                  		mov	ax, [seccnt]
 15263                                  		call	block		; (cas - call/ret)
 15264                                  		;call	done
 15265                                  		;retn
 15266                                  		; 18/12/2022
 15267                                  		jmp	done
 15268                                  %else
 15269                                  		;;;	; 22/12/2023
 15270                                  diskio:
 15271 00000A11 89FB                    		mov	bx, di		; al = drive number
 15272                                  					; cx = sector count
 15273                                  					; dx = first sector (low)
 15274                                  					; [start_sec_h] = first sector (high)
 15275                                  					;
 15276                                  					; es:bx = transfer address
 15277 00000A13 8C06[A804]              		mov	[xfer_seg], es	; save transfer segment
 15278 00000A17 E88AFB                  		call	SetDrive
 15279 00000A1A 268A4510                		mov	al, [es:di+10h]	; [es:di+BDS.media]
 15280 00000A1E A2[1F01]                		mov	[medbyt], al
 15281 00000A21 E3D8                    		jcxz	ioret
 15282                                  
 15283                                  ; see if the media is formatted or not by checking the flags field in
 15284                                  ; in the bds. if it is unformatted we cannot allow i/o, so we should
 15285                                  ; go to the error exit at label unformatteddrive.
 15286                                  
 15287 00000A23 26F6454002              		test	byte [es:di+40h], 2 ; [es:di+BDS.flags+1]
 15288                                  					; unformatted_media
 15289 00000A28 75CE                    		jnz	short unformatteddrive
 15290 00000A2A 890E[2201]              		mov	[seccnt], cx	; save sector count
 15291 00000A2E 8926[3501]              		mov	[spsav], sp	; save sp
 15292                                  
 15293                                  ; ensure that we are trying to access valid sectors on the drive
 15294                                  
 15295 00000A32 89D0                    		mov	ax, dx
 15296 00000A34 31F6                    		xor	si, si ; 0
 15297 00000A36 01CA                    		add	dx, cx
 15298 00000A38 D1D6                    		rcl	si, 1
 15299 00000A3A 26837D0E00              		cmp	word [es:di+0Eh], 0 ; [es:di+BDS.totalsecs16]
 15300                                  					; > 32 bit sector ?
 15301 00000A3F 740E                    		jz	short sanity32
 15302 00000A41 09F6                    		or	si, si
 15303 00000A43 7506                    		jnz	short baddrive
 15304 00000A45 263B550E                		cmp	dx, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
 15305                                  		;ja	short baddrive
 15306                                  		;jmp	short sanityok
 15307                                  		; 22/12/2023
 15308 00000A49 7616                    		jna	short sanityok
 15309                                  ; 29/12/2023
 15310                                  ; 22/12/2023
 15311                                  ;%if 1
 15312                                  ; ---------------------------------------------------------------------------
 15313                                  
 15314                                  baddrive:
 15315 00000A4B B008                    		mov	al, 8		; sector not found
 15316                                  		;jmp	short baddrive_ret
 15317                                  ; ---------------------------------------------------------------------------
 15318                                  ;unformatteddrive:
 15319                                  		;mov	al, 7		; unknown media
 15320                                  baddrive_ret:
 15321 00000A4D F9                      		stc
 15322                                  ;ioret:
 15323 00000A4E C3                      		retn
 15324                                  ;%endif
 15325                                  
 15326                                  ; ---------------------------------------------------------------------------
 15327                                  
 15328                                  sanity32:
 15329 00000A4F 0336[9C04]              		add	si, [start_sec_h]
 15330 00000A53 263B751D                		cmp	si, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
 15331 00000A57 7208                    		jb	short sanityok
 15332 00000A59 77F0                    		ja	short baddrive
 15333 00000A5B 263B551B                		cmp	dx, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
 15334 00000A5F 77EA                    		ja	short baddrive
 15335                                  sanityok:
 15336 00000A61 8B16[9C04]              		mov	dx, [start_sec_h]
 15337 00000A65 26034517                		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 15338 00000A69 26135519                		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 15339                                  
 15340                                  ; now dx;ax have the physical first sector.
 15341                                  ; since the following procedures is going to destroy ax, let's
 15342                                  ; save it temporarily to saved_word.
 15343                                  
 15344 00000A6D A3[9E04]                		mov	[saved_word], ax ; save the sector number (low)
 15345                                  
 15346                                  ; set up pointer to disk base table in [dpt]. we cannot assume that iosetup
 15347                                  ; will do it because we will skip the set up stuff with hard disks.
 15348                                  
 15349 00000A70 06                      		push	es
 15350 00000A71 31F6                    		xor	si, si ; 0
 15351 00000A73 8EC6                    		mov	es, si
 15352                                  		;les	si, dword ptr es:78h
 15353 00000A75 26C4367800              		les	si, [es:78h]	; INT 1Eh vector address
 15354                                  					; [es:DSKADR] - current disk parm table
 15355 00000A7A 8936[2D01]              		mov	[dpt], si
 15356 00000A7E 8C06[2F01]              		mov	[dpt+2], es
 15357 00000A82 07                      		pop	es
 15358 00000A83 26F6453F01              		test	byte [es:di+3Fh], 1 ; [es:di+BDS.flags], fnon_removable
 15359 00000A88 7510                    		jnz	short chk_13h_ext_flag
 15360 00000A8A E8EAFE                  		call	checksingle
 15361                                  
 15362                                  ; check to see if we have previously noted a change line. the routine
 15363                                  ; returns if everything is ok. otherwise, it pops off the stack and returns
 15364                                  ; the proper error code.
 15365                                  
 15366 00000A8D 803E[7700]00            		cmp	byte [fhave96], 0 ; do we have changeline support?
 15367 00000A92 7403                    		jz	short diskio_nochangeline ; brif not
 15368 00000A94 E8D410                  		call	checklatchio	; will do a sneaky pop stack return
 15369                                  					; if a disk error occurs
 15370                                  diskio_nochangeline:
 15371 00000A97 E8E000                  		call	iosetup		; set up tables and variables for i/o
 15372                                  
 15373                                  chk_13h_ext_flag:
 15374 00000A9A 26F6454004              		test	byte [es:di+40h], 4 ; [es:di+BDS.flags+1], fLBArw
 15375                                  					; LBA read/write flag
 15376 00000A9F 7539                    		jnz	short set_lbarw_1
 15377                                  		;jmp	skip_setup
 15378                                  		; 22/12/2023
 15379                                  ; ---------------------------------------------------------------------------
 15380                                  
 15381                                  ; now the settle values are correct for the following code
 15382                                  
 15383                                  skip_setup:
 15384                                  
 15385                                  ; 32 bit sector calculation.
 15386                                  ; dx:[saved_word] = starting sector number.
 15387                                  
 15388                                  		;push	bp ; ! (not necessary) ; 22/12/2023
 15389 00000AA1 92                      		xchg	ax, dx ; mov ax,dx
 15390 00000AA2 31D2                    		xor	dx, dx
 15391 00000AA4 268B4D13                		mov	cx, [es:di+13h]	; [es:di+BDS.secpertrack]
 15392                                  					; divide by sec per track
 15393 00000AA8 F7F1                    		div	cx
 15394 00000AAA 95                      		xchg	ax, bp ; mov bp,ax
 15395 00000AAB A1[9E04]                		mov	ax, [saved_word]
 15396 00000AAE F7F1                    		div	cx		; [es:di+BDS.secpertrack]
 15397                                  					; now, bp:ax = track #, dx = sector
 15398                                  					; sector number is 1 based.
 15399 00000AB0 42                      		inc	dx
 15400 00000AB1 8816[3101]              		mov	[cursec], dl	; save current sector
 15401 00000AB5 268B4D15                		mov	cx, [es:di+15h] ; [es:di+BDS.heads]
 15402                                  					; get number of heads
 15403                                  		; 22/12/2023
 15404                                  		;push	ax ; *
 15405 00000AB9 31D2                    		xor	dx, dx
 15406 00000ABB 95                      		xchg	ax, bp ; bp = *	; divide tracks by heads per cylinder
 15407 00000ABC F7F1                    		div	cx
 15408 00000ABE 95                      		xchg	ax, bp ; ax = *, bp = **
 15409                                  		;pop	ax ; *
 15410 00000ABF F7F1                    		div	cx		; now, bp:ax = cylinder #, dx = head
 15411 00000AC1 09ED                    		or	bp, bp ; ** = 0 ?
 15412                                  		;pop	bp ; ! ; 22/12/2023
 15413                                  		;jnz	short baddrive_brdg
 15414                                  		; 22/12/2023
 15415 00000AC3 7586                    		jnz	short baddrive
 15416                                  
 15417                                  		;cmp	ax, 1024	; 2^10 currently maximum for track #.
 15418                                  		;jnb	short baddrive_brdg
 15419                                  		; 22/12/2023
 15420 00000AC5 80FC04                  		cmp	ah, 4	; if ax >= 4*256 (1024) 
 15421 00000AC8 7381                    		jnb	short baddrive 
 15422                                  
 15423 00000ACA 8816[3201]              		mov	[curhd], dl	; save current head
 15424 00000ACE A3[3301]                		mov	[curtrk], ax	; save current track
 15425                                  
 15426                                  ; we are now set up for the i/o. normally, we consider the dma boundary
 15427                                  ; violations here. not true. we perform the operation as if everything is
 15428                                  ; symmetric; let the int 13 handler worry about the dma violations.
 15429                                  
 15430 00000AD1 A1[2201]                		mov	ax, [seccnt]
 15431 00000AD4 E81F01                  		call	block
 15432                                  		;call	done
 15433                                  		;retn
 15434                                  		; 22/12/2023
 15435 00000AD7 E9E500                  		jmp	done
 15436                                  		
 15437                                  ; ---------------------------------------------------------------------------
 15438                                  
 15439                                  set_lbarw_1:
 15440 00000ADA A1[9E04]                		mov	ax, [saved_word] ; check for mini disk
 15441                                  					 ; (logical dos drive/partition)
 15442 00000ADD 26837D7901              		cmp	word [es:di+79h], 1 ; [di+BDS.bdsm_ismini]
 15443                                  					    ; logical dos partition
 15444 00000AE2 750F                    		jnz	short set_lbarw_2 ; not a logical dos partition/drive
 15445 00000AE4 26837D7B00              		cmp	word [es:di+7Bh], 0 ; [di+BDS.bdsm_hidden_trks] (> 0)
 15446 00000AE9 7408                    		jz	short set_lbarw_2
 15447 00000AEB 26034517                		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 15448 00000AEF 26135519                		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 15449                                  
 15450                                  set_lbarw_2:
 15451 00000AF3 2EA3[040A]              		mov	[cs:dap_lba_value], ax
 15452 00000AF7 2E8916[060A]            		mov	[cs:dap_lba_value+2], dx
 15453 00000AFC 2E891E[000A]            		mov	[cs:dap_trans_buf], bx
 15454 00000B01 A1[A804]                		mov	ax, [xfer_seg]
 15455 00000B04 2EA3[020A]              		mov	[cs:dap_trans_buf+2], ax
 15456 00000B08 A1[2201]                		mov	ax, [seccnt]
 15457 00000B0B 2EA3[FE09]              		mov	[cs:dap_block_cnt], ax
 15458 00000B0F BD0500                  		mov	bp, 5
 15459 00000B12 892E[A304]              		mov	[vretry_cnt], bp ; verify op. retry cnt for write-verify
 15460 00000B16 892E[A504]              		mov	[soft_ecc_cnt], bp ; soft ecc error retry count
 15461                                  
 15462                                  set_lbarw_3:
 15463 00000B1A 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 15464 00000B1E 8A26[2001]              		mov	ah, [rflag]	; get read/write indicator
 15465 00000B22 80C440                  		add	ah, 40h
 15466 00000B25 30C0                    		xor	al, al
 15467 00000B27 1E                      		push	ds
 15468 00000B28 0E                      		push	cs
 15469 00000B29 1F                      		pop	ds
 15470 00000B2A BE[FC09]                		mov	si, LBA_Packet
 15471 00000B2D CD13                    		int	13h		; LBA read/write
 15472 00000B2F 1F                      		pop	ds
 15473 00000B30 731A                    		jnc	short set_lbarw_7
 15474 00000B32 E8A902                  		call	again
 15475                                  set_lbarw_9:
 15476 00000B35 7503                    		jnz	short set_lbarw_4
 15477 00000B37 E92802                  		jmp	harderr
 15478                                  ; ---------------------------------------------------------------------------
 15479                                  
 15480                                  set_lbarw_4:
 15481                                  ;set_lbarw_9:	; 22/12/2023
 15482 00000B3A 80FCCC                  		cmp	ah, 0CCh	; Write fault (hard disk)
 15483 00000B3D 7505                    		jnz	short set_lbarw_5
 15484 00000B3F BD0100                  		mov	bp, 1
 15485 00000B42 EB06                    		jmp	short set_lbarw_6
 15486                                  ; ---------------------------------------------------------------------------
 15487                                  
 15488                                  set_lbarw_5:
 15489                                  set_lbarw_10:	; 22/12/2023
 15490 00000B44 C706[A504]0500          		mov	word [soft_ecc_cnt], 5 ; soft ecc error retry count
 15491                                  set_lbarw_6:
 15492                                  set_lbarw_11:
 15493 00000B4A EBCE                    		jmp	short set_lbarw_3
 15494                                  ; ---------------------------------------------------------------------------
 15495                                  
 15496                                  set_lbarw_7:
 15497 00000B4C 813E[2001]0301          		cmp	word [rflag], 103h
 15498 00000B52 7523                    		jnz	short set_lbarw_12
 15499 00000B54 B444                    		mov	ah, 44h
 15500 00000B56 1E                      		push	ds
 15501 00000B57 0E                      		push	cs
 15502 00000B58 1F                      		pop	ds
 15503 00000B59 CD13                    		int	13h		; DISK - IBM/MS Extension - VERIFY SECTORS
 15504                                  					;  (DL - drive, [SI - disk address packet)
 15505 00000B5B 1F                      		pop	ds
 15506 00000B5C 7319                    		jnc	short set_lbarw_12
 15507 00000B5E 80FC11                  		cmp	ah, 11h		; ECC corrected data error (soft error - retried OK )
 15508 00000B61 7506                    		jnz	short set_lbarw_8
 15509 00000B63 FF0E[A504]              		dec	word [soft_ecc_cnt]
 15510                                  ;set_lbarw_8:
 15511 00000B67 740E                    		jz	short set_lbarw_12
 15512                                  set_lbarw_8:
 15513 00000B69 E8CC07                  		call	ResetDisk
 15514 00000B6C 80FC11                  		cmp	ah, 11h
 15515 00000B6F 74D9                    		jz	short set_lbarw_11
 15516 00000B71 FF0E[A304]              		dec	word [vretry_cnt]
 15517                                  		;jnz	short set_lbarw_9
 15518                                  		;jmp	harderr
 15519                                  		; 22/12/2023
 15520 00000B75 EBBE                    		jmp	short set_lbarw_9
 15521                                  
 15522                                  ; ---------------------------------------------------------------------------
 15523                                  ;		; 22/12/2023
 15524                                  ;set_lbarw_9:
 15525                                  ;		cmp	ah, 0CCh
 15526                                  ;		jnz	short set_lbarw_10
 15527                                  ;		mov	bp, 1
 15528                                  ;		jmp	short set_lbarw_11
 15529                                  ; ---------------------------------------------------------------------------
 15530                                  ;		; 22/12/2023
 15531                                  ;set_lbarw_10:
 15532                                  ;		mov	word [soft_ecc_cnt], 5 ; soft ecc error retry count
 15533                                  ;set_lbarw_11:
 15534                                  ;		jmp	short set_lbarw_3
 15535                                  ; ---------------------------------------------------------------------------
 15536                                  
 15537                                  set_lbarw_12:
 15538 00000B77 31C0                    		xor	ax, ax
 15539                                  skip_dpt_setting:	; 23/12/2023
 15540 00000B79 C3                      		retn
 15541                                  		;;;	; 22/12/2023
 15542                                  %endif
 15543                                  
 15544                                  ; ---------------------------------------------------------------------------
 15545                                  
 15546                                  		; 22/12/2023
 15547                                  ;baddrive_brdg:
 15548                                  		;jmp	baddrive
 15549                                  
 15550                                  ; =============== S U B	R O U T	I N E =======================================
 15551                                  
 15552                                  ;--------------------------------------------------------------
 15553                                  ; set the drive-last-accessed flag for diskette only.
 15554                                  ; we know that the hard disk will not be removed.
 15555                                  ; es:di -> current bds.
 15556                                  ; ds -> Bios_Data
 15557                                  ; ax,cx,si are destroyed.
 15558                                  ;--------------------------------------------------------------
 15559                                  
 15560                                  		; 23/12/2023 - Retro DOS v5.0
 15561                                  
 15562                                  		; 19/10/2022
 15563                                  iosetup:
 15564 00000B7A 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 15565 00000B7E A2[1E01]                		mov	[tim_drv], al	; save drive letter
 15566                                  
 15567                                  ; determine proper head settle values
 15568                                  
 15569 00000B81 803E[A905]00            		cmp	byte [media_set_for_format], 0
 15570 00000B86 75F1                    		jnz	short skip_dpt_setting
 15571 00000B88 A0[2C01]                		mov	al, [eot]	; fetch	up eot before changing ds
 15572 00000B8B 1E                      		push	ds
 15573 00000B8C C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 15574 00000B90 884404                  		mov	[si+4],	al
 15575                                  		
 15576                                  		;; 23/12/2023
 15577                                  		;mov	ah, al
 15578                                  		;mov	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 15579                                  		;;mov	ah, [si+4]	; [si+DISK_PARMS.DISK_EOT]
 15580                                  		;pop	ds
 15581                                  		;mov	[motorstartup], al
 15582                                  		;mov	[save_eot], ah
 15583                                  		; 06/04/2024
 15584 00000B93 8A640A                  		mov	ah,[si+10]
 15585 00000B96 1F                      		pop	ds
 15586 00000B97 8826[2601]              		mov	[motorstartup], ah
 15587 00000B9B A2[2B01]                		mov	[save_eot], al
 15588                                  
 15589                                  ; for 3.5" drives, both external as well as on the k09, we need to set the
 15590                                  ; motor start time to 4. this checking for every i/o is going to affect
 15591                                  ; performance across the board, but is necessary!!
 15592                                  
 15593 00000B9E 1E                      		push	ds
 15594 00000B9F C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 15595                                  		; 23/12/2023  - Retro DOS v5.0
 15596 00000BA3 26807D3E02              		cmp	byte [es:di+3Eh], 2 ; (PCDOS 7.1 IBMBIO.COM)
 15597                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 15598                                  					; ffSmall
 15599 00000BA8 7505                    		jnz	short motor_start_ok
 15600 00000BAA B004                    		mov	al, 4
 15601 00000BAC 86440A                  		xchg	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 15602                                  motor_start_ok:
 15603                                  
 15604                                  ; ds:si now points to disk parameter table.
 15605                                  ; get current settle and set fast settle
 15606                                  
 15607                                  		;xor	al, al
 15608                                  		;inc	al		; ibm wants fast settle	to be 1
 15609                                  		; 18/12/2022
 15610 00000BAF 31C0                    		xor	ax, ax
 15611 00000BB1 40                      		inc	ax
 15612 00000BB2 864409                  		xchg	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 15613                                  					; get settle and set up	for fast
 15614 00000BB5 1F                      		pop	ds
 15615 00000BB6 A2[2701]                		mov	[settlecurrent], al
 15616 00000BB9 B00F                    		mov	al, 15		; NORMSETTLE
 15617                                  					; someone has diddled the settle
 15618 00000BBB A2[2801]                		mov	[settleslow], al
 15619                                  		; 23/12/2023
 15620                                  ;skip_dpt_setting:
 15621 00000BBE C3                      		retn
 15622                                  
 15623                                  ; =============== S U B	R O U T	I N E =======================================
 15624                                  
 15625                                  ;--------------------------------------------------------------
 15626                                  ; set time of last access, and reset default values in the dpt.
 15627                                  ;
 15628                                  ;	  note: trashes (at least) si
 15629                                  ;--------------------------------------------------------------
 15630                                  
 15631                                  		; 23/12/2023 - Retro DOS v5.0
 15632                                  
 15633                                  		; 19/10/2022
 15634                                  done:		
 15635                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 15636                                  					; fnon_removable
 15637                                  		; 23/12/2023
 15638 00000BBF 26F6453F01              		test	byte [es:di+3Fh], 1 ; (PCDOS 7.1 IBMBIO.COM)
 15639 00000BC4 752F                    		jnz	short ddbx	; do not set for non-removable media
 15640 00000BC6 E8F501                  		call	set_tim
 15641                                  ;diddleback:
 15642                                  ; 09/12/2022
 15643                                  diddle_back:
 15644 00000BC9 9C                      		pushf
 15645 00000BCA 803E[A905]00            		cmp	byte [media_set_for_format], 0
 15646 00000BCF 7523                    		jnz	short nodiddleback
 15647 00000BD1 50                      		push	ax
 15648 00000BD2 06                      		push	es
 15649 00000BD3 C436[2D01]              		les	si, [dpt]
 15650 00000BD7 A0[2B01]                		mov	al, [save_eot]
 15651 00000BDA 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 15652 00000BDE A0[2701]                		mov	al, [settlecurrent]
 15653 00000BE1 8A26[2601]              		mov	ah, [motorstartup]
 15654 00000BE5 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 15655 00000BE9 26C6440302              		mov	byte [es:si+3], 2 ; [es:si+DISK_PARMS.DISK_SECTOR_SIZ]
 15656 00000BEE 2688640A                		mov	[es:si+0Ah], ah	; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 15657 00000BF2 07                      		pop	es
 15658 00000BF3 58                      		pop	ax
 15659                                  nodiddleback:
 15660 00000BF4 9D                      		popf
 15661                                  ddbx:
 15662 00000BF5 C3                      		retn
 15663                                  
 15664                                  ; =============== S U B	R O U T	I N E =======================================
 15665                                  
 15666                                  ;--------------------------------------------------------------
 15667                                  ;read the number of sectors specified in ax,
 15668                                  ;handling track boundaries
 15669                                  ;es:di -> bds for this drive
 15670                                  ;--------------------------------------------------------------
 15671                                  
 15672                                  		; 23/12/2023 - Retro DOS v5.0
 15673                                  
 15674                                  		; 19/10/2022
 15675                                  block:	
 15676 00000BF6 09C0                    		or	ax, ax
 15677 00000BF8 74FB                    		jz	short ddbx
 15678                                  		; 23/12/2023
 15679 00000BFA 26F6453F01              		test	byte [es:di+3Fh], 1 ; (PCDOS 7.1 IBMBIO.COM)
 15680                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 15681                                  					    ; fnon_removable
 15682 00000BFF 740D                    		jz	short block_floppy
 15683                                  
 15684                                  ; check	to see if multi	track operation	is allowed. if not
 15685                                  ; we have to go	to the block_floppy below to break up the operation.
 15686                                  
 15687 00000C01 F606[A004]80            		test	byte [multrk_flag], 80h
 15688                                  		;test	byte ptr ds:multrk_flag, 80h ; multrk_on
 15689 00000C06 7406                    		jz	short block_floppy
 15690 00000C08 E82800                  		call	Disk
 15691 00000C0B 31C0                    		xor	ax, ax
 15692 00000C0D C3                      		retn
 15693                                  ; ---------------------------------------------------------------------------
 15694                                  
 15695                                  block_floppy:
 15696                                  
 15697                                  ; read at most 1 track worth. perform minimization at sector / track
 15698                                  
 15699 00000C0E 268A4D13                		mov	cl, [es:di+19]	; [es:di+BDS.secpertrack]
 15700                                  		;inc	cl
 15701                                  		; 23/12/2023
 15702 00000C12 41                      		inc	cx
 15703 00000C13 2A0E[3101]              		sub	cl, [cursec]
 15704 00000C17 30ED                    		xor	ch, ch
 15705 00000C19 39C8                    		cmp	ax, cx
 15706 00000C1B 7302                    		jnb	short gotmin
 15707 00000C1D 89C1                    		mov	cx, ax
 15708                                  gotmin:
 15709                                  
 15710                                  ; ax is the requested number of sectors to read
 15711                                  ; cx is the number that we can do on this track
 15712                                  
 15713 00000C1F 50                      		push	ax
 15714 00000C20 51                      		push	cx
 15715 00000C21 89C8                    		mov	ax, cx
 15716 00000C23 E80D00                  		call	Disk
 15717 00000C26 59                      		pop	cx
 15718 00000C27 58                      		pop	ax
 15719                                  
 15720                                  ; cx is the number of sectors just transferred
 15721                                  
 15722 00000C28 29C8                    		sub	ax, cx		; reduce sectors-remaining by last i/o
 15723 00000C2A D0E1                    		shl	cl, 1
 15724 00000C2C 00CF                    		add	bh, cl		; adjust transfer address
 15725 00000C2E EBC6                    		jmp	short block
 15726                                  dskerr_brdg:
 15727 00000C30 E9F100                  		jmp	dskerr
 15728                                  
 15729                                  ; =============== S U B	R O U T	I N E =======================================
 15730                                  
 15731                                  ; 15/10/2022
 15732                                  
 15733                                  ;--------------------------------------------------------------
 15734                                  ;perform disk i/o with retries
 15735                                  ; al = number of sectors (1-8, all on one track)
 15736                                  ; es:di point to drive parameters
 15737                                  ; xfer_seg:bx = transfer address 
 15738                                  ;		(must not cross a 64k physical boundary)
 15739                                  ; [rflag] = 2 if read, 3 if write
 15740                                  ; [verify] = 0 for normal, 1 for verify after write
 15741                                  ;--------------------------------------------------------------
 15742                                  
 15743                                  		; 23/12/2023 - Retro DOS v5.0
 15744                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0C74h)
 15745                                  
 15746                                  		; 19/10/2022
 15747                                  Disk:
 15748                                  
 15749                                  ; Check for hard disk format and
 15750                                  ; if TRUE then set max error count to 2
 15751                                  
 15752 00000C33 BD0500                  		mov	bp, 5		; MAXERR
 15753                                  					; set up retry count
 15754                                  		; 23/12/2023
 15755 00000C36 268A4D3F                		mov	cl, [es:di+3Fh]
 15756 00000C3A 83E101                  		and	cx, 1
 15757                                  		;test	byte [es:di+3Fh], 1
 15758                                  		;;test	byte [es:di+23h], 1 
 15759                                  					; [es:di+BDS.flags], fnon_removable
 15760 00000C3D 7408                    		jz	short GetRdWrInd
 15761 00000C3F 80FC04                  		cmp	ah, 4		; romverify ; Is this a	track verify?
 15762 00000C42 7403                    		jz	short GetRdWrInd
 15763 00000C44 BD0200                  		mov	bp, 2		; This is not verify so only 1 retry
 15764                                  GetRdWrInd:				
 15765 00000C47 892E[A304]              		mov	[vretry_cnt], bp ; verify op. retry cnt for write-verify
 15766 00000C4B 892E[A504]              		mov	[soft_ecc_cnt], bp ; soft ecc error retry count.
 15767 00000C4F 8A26[2001]              		mov	ah, [rflag]	; get read/write indicator
 15768                                  ;retry:
 15769                                  ; 09/12/2022
 15770                                  _retry:
 15771 00000C53 50                      		push	ax
 15772 00000C54 8B16[3301]              		mov	dx, [curtrk]
 15773                                  		; 23/12/2023
 15774 00000C58 E30B                    		jcxz	disk_not_mini
 15775                                  		;test	byte [es:di+3Fh], 1
 15776                                  		;;test	byte [es:di+23h], 1
 15777                                  		;jz	short disk_not_mini
 15778                                  
 15779                                  		; 23/12/2023
 15780 00000C5A 26837D7901              		cmp	word [es:di+79h], 1
 15781                                  		;cmp	word [es:di+47h], 1 ; [es:di+BDS.bdsm_ismini]
 15782                                  					; is this a mini disk? ((logical dos partition))
 15783 00000C5F 7504                    		jnz	short disk_not_mini ; no. continue to next.
 15784                                  		; 23/12/2023
 15785 00000C61 2603557B                		add     dx, [es:di+7Bh]
 15786                                  		;add	dx, [es:di+49h]	; [es:di+BDS.bdsm_hidden_trks]
 15787                                  					; add hidden trks.
 15788                                  disk_not_mini:
 15789 00000C65 D0CE                    		ror	dh, 1
 15790 00000C67 D0CE                    		ror	dh, 1
 15791 00000C69 0A36[3101]              		or	dh, [cursec]
 15792 00000C6D 89D1                    		mov	cx, dx
 15793 00000C6F 86E9                    		xchg	ch, cl		;  cl =	sector,	ch = cylinder
 15794 00000C71 8A36[3201]              		mov	dh, [curhd]	; load current head number and
 15795 00000C75 268A5504                		mov	dl, [es:di+4]	; physical drive number
 15796                                  					; [es:di+BDS.drivenum]
 15797                                  		; 23/12/2023
 15798 00000C79 26807D3E05              		cmp	byte [es:di+3Eh], 5 
 15799                                  		;cmp	byte [es:di+22h], 5 ; [es:di+BDS.formfactor], ffHardFile
 15800 00000C7E 7411                    		jz	short do_fast	; hard files use fast speed
 15801                                  
 15802                                  ; if we have [step_drv] set to -1, we use the slow settle time.
 15803                                  ; this helps when we have just done a reset disk operation and the head has
 15804                                  ; been moved to another cylinder - the problem crops up with 3.5" drives.
 15805                                  
 15806 00000C80 803E[7600]FF            		cmp	byte [step_drv], 0FFh ; -1
 15807                                  		;jz	short do_writej
 15808                                  		; 23/12/2023
 15809 00000C85 746A                    		jz	short do_write
 15810 00000C87 80FC02                  		cmp	ah, 2		; romread
 15811 00000C8A 7405                    		jz	short do_fast
 15812 00000C8C 80FC04                  		cmp	ah, 4		; romverify
 15813                                  		;jz	short do_fast
 15814                                  		; 23/12/2023
 15815 00000C8F 7560                    		jnz	short do_write
 15816                                  ;do_writej:
 15817                                  
 15818                                  ; reads always fast, unless we have just done a disk reset operation
 15819                                  			
 15820                                  		;jmp	short do_write	; reads	always fast
 15821                                  ; ---------------------------------------------------------------------------
 15822                                  
 15823                                  do_fast:
 15824 00000C91 E80501                  		call	fastspeed	; change settle	mode
 15825                                  testerr:
 15826 00000C94 729A                    		jb	short dskerr_brdg
 15827                                  
 15828                                  		; 23/12/2023 Retro DOS v5.0
 15829                                  		; (PCDOS 7.1 IBMBIO.COM)
 15830 00000C96 83FD05                  		cmp	bp, 5		; is there retry ?
 15831 00000C99 7505                    		jnz	short testerror	; yes
 15832 00000C9B 80FCBB                  		cmp	ah, 0BBh	; Undefined error (hard disk)
 15833 00000C9E 7490                    		jz	short dskerr_brdg
 15834                                  testerror:
 15835                                  
 15836                                  ; set drive and track of last access
 15837                                  
 15838 00000CA0 8816[7600]              		mov	[step_drv], dl
 15839                                  		; 23/12/2023
 15840 00000CA4 26886D78                		mov	[es:di+78h], ch
 15841                                  		;mov	[es:di+46h], ch	; [es:di+BDS.track]
 15842                                  no_set:
 15843                                  		;cmp	word [wrtverify], 103h
 15844 00000CA8 813E[2001]0301          		cmp	word [rflag], 103h ; check for write and verify
 15845 00000CAE 7452                    		jz	short doverify
 15846                                  noverify:
 15847 00000CB0 58                      		pop	ax
 15848                                  
 15849                                  ; check the flags word in the bds to see if the drive is non removable
 15850                                  ; if not we needn't do anything special
 15851                                  ; if it is a hard disk then check to see if multi-track operation
 15852                                  ; is specified. if specified we don't have to calculate for the next
 15853                                  ; track since we are already done. so we can go to the exit of this routine.
 15854                                  
 15855                                  		; 23/12/2023
 15856 00000CB1 26F6453F01              		test	byte [es:di+3Fh], 1
 15857                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 15858                                  					; fnon_removable
 15859 00000CB6 7407                    		jz	short its_removable
 15860 00000CB8 F606[A004]80            		test	byte [multrk_flag], 80h ; multrk_on
 15861 00000CBD 7530                    		jnz	short disk_ret
 15862                                  its_removable:
 15863 00000CBF 80E13F                  		and	cl, 3Fh		; eliminate cylinder bits from sector
 15864 00000CC2 30E4                    		xor	ah, ah
 15865 00000CC4 2906[2201]              		sub	[seccnt], ax	; reduce count of sectors to go	next sector
 15866 00000CC8 00C1                    		add	cl, al
 15867 00000CCA 880E[3101]              		mov	[cursec], cl
 15868 00000CCE 263A4D13                		cmp	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 15869                                  					; see if sector/track limit reached
 15870 00000CD2 761B                    		jbe	short disk_ret
 15871 00000CD4 C606[3101]01            		mov	byte [cursec], 1 ; start with first sector of next track
 15872 00000CD9 8A36[3201]              		mov	dh, [curhd]
 15873 00000CDD FEC6                    		inc	dh
 15874 00000CDF 263A7515                		cmp	dh, [es:di+15h]	; [es:di+BDS.heads]
 15875 00000CE3 7206                    		jb	short noxor
 15876 00000CE5 30F6                    		xor	dh, dh
 15877 00000CE7 FF06[3301]              		inc	word [curtrk]
 15878                                  noxor:
 15879 00000CEB 8836[3201]              		mov	[curhd], dh
 15880                                  disk_ret:
 15881 00000CEF F8                      		clc
 15882 00000CF0 C3                      		retn
 15883                                  ; ---------------------------------------------------------------------------
 15884                                  
 15885                                  ; 15/10/2022
 15886                                  
 15887                                  ; 24/12/2023 - Retro DOS v5.0
 15888                                  
 15889                                  ;--------------------------------------------------------------
 15890                                  ; the request is for write. determine if we are talking about
 15891                                  ; the same track and drive. if so, use the fast speed.
 15892                                  ;--------------------------------------------------------------
 15893                                  
 15894                                  do_write:
 15895 00000CF1 3A16[7600]              		cmp	dl, [step_drv]
 15896 00000CF5 7506                    		jnz	short do_norm	; we have changed drives
 15897                                  		; 24/12/2023
 15898 00000CF7 263A6D78                		cmp	ch, [es:di+78h]
 15899                                  		;cmp	ch, [es:di+46h]	; [es:di+BDS.track]
 15900 00000CFB 7494                    		jz	short do_fast	; we are still on the same track
 15901                                  do_norm:
 15902 00000CFD E87500                  		call	normspeed
 15903 00000D00 EB92                    		jmp	short testerr
 15904                                  ; ---------------------------------------------------------------------------
 15905                                  
 15906                                  ;--------------------------------------------------------------
 15907                                  ; we have a verify request also. get state info and go verify
 15908                                  ;--------------------------------------------------------------
 15909                                  
 15910                                  doverify:
 15911 00000D02 58                      		pop	ax
 15912 00000D03 50                      		push	ax
 15913 00000D04 B404                    		mov	ah, 4
 15914 00000D06 E89000                  		call	fastspeed
 15915 00000D09 73A5                    		jnb	short noverify
 15916                                  
 15917                                  ; check the error returned in ah to see if it is a soft ecc error.
 15918                                  ; if it is not we needn't do anything special. if it is a soft
 15919                                  ; ecc error then decrement the soft_ecc_cnt error retry count. if
 15920                                  ; this retry count becomes 0 then we just ignore the error and go to
 15921                                  ; no_verify but if we can still try then we call the routine to reset
 15922                                  ; the disk and go to dskerr1 to retry the operation.
 15923                                  
 15924 00000D0B 80FC11                  		cmp	ah, 11h		; soft ecc error ?
 15925 00000D0E 750B                    		jnz	short not_softecc_err
 15926 00000D10 FF0E[A504]              		dec	word [soft_ecc_cnt]
 15927 00000D14 749A                    		jz	short noverify	; no more retry
 15928 00000D16 E81F06                  		call	ResetDisk	; reset	disk
 15929 00000D19 EB3E                    		jmp	short dskerr1	; retry
 15930                                  ; ---------------------------------------------------------------------------
 15931                                  
 15932                                  not_softecc_err:			; other error.
 15933 00000D1B E81A06                  		call	ResetDisk
 15934 00000D1E FF0E[A304]              		dec	word [vretry_cnt]
 15935 00000D22 EB1C                    		jmp	short dskerr0
 15936                                  ; ---------------------------------------------------------------------------
 15937                                  
 15938                                  ;--------------------------------------------------------------
 15939                                  ; need to special case the change-line error ah=06h.
 15940                                  ; if we get this, we need to return it.
 15941                                  ;--------------------------------------------------------------
 15942                                  
 15943                                  dskerr:
 15944 00000D24 803E[7700]00            		cmp	byte [fhave96], 0	; do we	have changeline	support?
 15945 00000D29 7403                    		jz	short dskerr_nochangeline ; brif not
 15946 00000D2B E8C30E                  		call	checkio
 15947                                  dskerr_nochangeline:
 15948 00000D2E 803E[A704]01            		cmp	byte [multitrk_format_flag], 1 ; multi trk format request?
 15949 00000D33 7508                    		jnz	short dochkagain ; no more retry.
 15950 00000D35 BD0100                  		mov	bp, 1
 15951 00000D38 C606[A704]00            		mov	byte [multitrk_format_flag], 0 ; clear the flag.
 15952                                  dochkagain:
 15953 00000D3D E89E00                  		call	again
 15954                                  dskerr0:
 15955 00000D40 7420                    		jz	short harderr
 15956                                  		; 24/12/2023
 15957 00000D42 26F6453F01              		test	byte [es:di+3Fh], 1
 15958                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 15959                                  					; fnon_removable
 15960 00000D47 7505                    		jnz	short skip_timeout_chk
 15961 00000D49 80FC80                  		cmp	ah, 80h		; timeout?
 15962 00000D4C 7414                    		jz	short harderr
 15963                                  skip_timeout_chk:
 15964 00000D4E 80FCCC                  		cmp	ah, 0CCh	; write	fault error?
 15965 00000D51 740A                    		jz	short write_fault_err ;	then, don't retry.
 15966 00000D53 C706[A504]0500          		mov	word [soft_ecc_cnt], 5 ; MAXERR
 15967                                  					; set soft_ecc_cnt back	to maxerr
 15968                                  dskerr1:
 15969 00000D59 58                      		pop	ax		; restore sector count
 15970                                  		;jmp	retry
 15971                                  		; 09/12/2022
 15972 00000D5A E9F6FE                  		jmp	_retry
 15973                                  ; ---------------------------------------------------------------------------
 15974                                  
 15975                                  write_fault_err:
 15976 00000D5D BD0100                  		mov	bp, 1		; just retry only once
 15977                                  					; for write fault error.
 15978 00000D60 EBF7                    		jmp	short dskerr1
 15979                                  
 15980                                  		; fall into harderr
 15981                                  ; ---------------------------------------------------------------------------
 15982                                  
 15983                                  ; entry point for routines that call maperror themselves
 15984                                  
 15985                                  harderr:
 15986 00000D62 E84100                  		call	maperror
 15987                                  harderr2:
 15988 00000D65 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 15989                                  					; force a media check through rom
 15990 00000D6A 8B0E[2201]              		mov	cx, [seccnt]	; get count of sectors to go
 15991 00000D6E 8B26[3501]              		mov	sp, [spsav]	; recover entry	stack pointer
 15992                                  
 15993                                  ; since we are performing a non-local goto, restore the disk parameters
 15994                                  
 15995                                  		;jmp	diddleback
 15996                                  		; 09/12/2022
 15997 00000D72 E954FE                  		jmp	diddle_back
 15998                                  
 15999                                  ; =============== S U B	R O U T	I N E =======================================
 16000                                  
 16001                                  ; change settle value from settlecurrent to whatever is appropriate
 16002                                  ; note that this routine is never called for a fixed disk.
 16003                                  
 16004                                  		; 19/10/2022
 16005                                  normspeed:
 16006 00000D75 803E[A905]00            		cmp	byte [media_set_for_format], 0
 16007 00000D7A 751D                    		jnz	short fastspeed
 16008 00000D7C 06                      		push	es
 16009 00000D7D 50                      		push	ax
 16010 00000D7E A0[2801]                		mov	al, [settleslow]
 16011 00000D81 C436[2D01]              		les	si, [dpt]	; current disk parm table
 16012 00000D85 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 16013 00000D89 58                      		pop	ax
 16014 00000D8A 07                      		pop	es
 16015 00000D8B E80B00                  		call	fastspeed
 16016                                  		; 24/12/2023
 16017                                  		;push	es
 16018                                  		;les	si, [dpt]
 16019                                  		;mov	byte [es:si+9], 1 ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 16020                                  		;			; 1 is fast settle value
 16021                                  		;pop	es
 16022 00000D8E 1E                      		push	ds
 16023 00000D8F C536[2D01]              		lds	si, [dpt]
 16024 00000D93 C6440901                		mov	byte [si+9], 1
 16025 00000D97 1F                      		pop	ds
 16026                                  
 16027 00000D98 C3                      		retn
 16028                                  
 16029                                  ; =============== S U B	R O U T	I N E =======================================
 16030                                  
 16031                                  ; if the drive has been marked as too big (i.e. starting sector of the
 16032                                  ; partition is > 16 bits, then always return drive not ready.
 16033                                  
 16034                                  		; 24/12/2023 - Retro DOS v5.0
 16035                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0DDDh)
 16036                                  fastspeed:
 16037                                  		;;test	byte [es:di+3Bh], 80h ; [es:di+BDS.fatsiz]
 16038                                  		;test	byte [es:di+1Fh], 80h ; [es:di+BDS.fatsiz]
 16039                                  		;			; ftoobig
 16040                                  		;jnz	short notready
 16041 00000D99 06                      		push	es
 16042 00000D9A 8E06[A804]              		mov	es, [xfer_seg]
 16043 00000D9E CD13                    		int	13h		; DISK -
 16044 00000DA0 8C06[A804]              		mov	[xfer_seg], es
 16045 00000DA4 07                      		pop	es
 16046 00000DA5 C3                      		retn
 16047                                  ; ---------------------------------------------------------------------------
 16048                                  ;		; 24/12/2023
 16049                                  ;notready:
 16050                                  		;stc
 16051                                  		;mov	ah, 80h
 16052                                  		;retn
 16053                                  
 16054                                  ; =============== S U B	R O U T	I N E =======================================
 16055                                  
 16056                                  ; map error returned by rom in ah into corresponding code to be returned to
 16057                                  ; dos in al. trashes di. guaranteed to set carry.
 16058                                  
 16059                                  maperror:
 16060 00000DA6 51                      		push	cx
 16061 00000DA7 06                      		push	es
 16062 00000DA8 1E                      		push	ds		; set es=Bios_Data
 16063 00000DA9 07                      		pop	es
 16064 00000DAA 88E0                    		mov	al, ah		; put error code in al
 16065 00000DAC A2[4601]                		mov	[lsterr], al	; terminate list with error code
 16066                                  		; 24/12/2023
 16067 00000DAF B90B00                  		mov	cx, 11 ; PCDOS 7.1 ; 02/09/2023
 16068                                  		;mov	cx, 9		; numerr (= errout-errin)
 16069                                  					; number of possible error conditions
 16070 00000DB2 BF[3C01]                		mov	di, errin	; point to error conditions
 16071 00000DB5 F2AE                    		repne scasb
 16072                                  
 16073                                  		; 24/12/2023
 16074                                  		; 02/09/2023
 16075 00000DB7 8A450A                  		mov	al, [di+10] ; PCDOS 7.1 IBMBIO.COM
 16076                                  		; 10/12/2022
 16077                                  		;mov	al, [di+8]	; [di+numerr-1]
 16078                                  					; get translation
 16079                                  		; 19/10/2022 - Temporary ! 
 16080                                  		;db	8Ah, 85h, 8, 0	; mov al, [di+8]
 16081 00000DBA 07                      		pop	es
 16082 00000DBB 59                      		pop	cx
 16083 00000DBC F9                      		stc			; flag error condition
 16084 00000DBD C3                      		retn
 16085                                  
 16086                                  ; =============== S U B	R O U T	I N E =======================================
 16087                                  
 16088                                  ; set the time of last access for this drive.
 16089                                  ; this is done only for removable media. es:di -> bds
 16090                                  
 16091                                  set_tim:
 16092 00000DBE 50                      		push	ax
 16093 00000DBF E86FF7                  		call	GetTickCnt	; Does INT 1A ah=0 & updates daycnt
 16094                                  
 16095                                  ; we have the new time. if we see that the time has passed,
 16096                                  ; then we reset the threshold counter...
 16097                                  
 16098                                  		; 24/12/2023 - Retro DOS v5.0
 16099 00000DC2 263B5579                		cmp	dx, [es:di+79h]	; PCDOS 7.1 IBMBIO.COM
 16100                                  		;cmp	dx, [es:di+47h]	; [es:di+BDS.tim_lo]
 16101 00000DC6 7506                    		jne	short setaccess
 16102                                  		; 24/12/2023
 16103 00000DC8 263B4D7B                		cmp	cx, [es:di+7Bh]	; PCDOS 7.1 IBMBIO.COM
 16104                                  		;cmp	cx, [es:di+49h]	; [es:di+BDS.tim_hi]
 16105                                  		;jz	short done_set
 16106                                  		; 12/12/2022
 16107 00000DCC 740E                    		je	short done_set2
 16108                                  setaccess:
 16109 00000DCE C606[1D01]00            		mov	byte [accesscount], 0
 16110                                  		
 16111                                  		; 24/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 16112 00000DD3 26895579                		mov	[es:di+79h], dx
 16113 00000DD7 26894D7B                		mov	[es:di+7Bh], cx
 16114                                  		;mov	[es:di+47h], dx	; [es:di+BDS.tim_lo]
 16115                                  		;mov	[es:di+49h], cx	; [es:di+BDS.tim_hi]
 16116                                  done_set:
 16117 00000DDB F8                      		clc
 16118                                  done_set2:		; 12/12/2022
 16119 00000DDC 58                      		pop	ax
 16120 00000DDD C3                      		retn
 16121                                  
 16122                                  ; =============== S U B	R O U T	I N E =======================================
 16123                                  
 16124                                  ; this routine is called if an error occurs while formatting or verifying.
 16125                                  ; it resets the drive,and decrements the retry count.
 16126                                  ; on entry - ds:di - points to bds for the drive
 16127                                  ;	     bp    - contains retry count
 16128                                  ; on exit    flags indicate result of decrementing retry count
 16129                                  
 16130                                  again:
 16131 00000DDE E85705                  		call	ResetDisk
 16132 00000DE1 80FC06                  		cmp	ah, 6
 16133 00000DE4 7402                    		jz	short dont_dec_retry_count ; If	it is a	media change error
 16134                                  					; do not decrement retry count.
 16135 00000DE6 4D                      		dec	bp		; decrement retry count
 16136 00000DE7 C3                      		retn
 16137                                  ; ---------------------------------------------------------------------------
 16138                                  
 16139                                  dont_dec_retry_count:
 16140 00000DE8 08E4                    		or	ah, ah
 16141 00000DEA C3                      		retn
 16142                                  
 16143                                  ;----------------------------------------------------------------------------
 16144                                  ; Retro DOS v5.0 - PCDOS 7.1 IBMBIO.COM - BIOSCODE:0E30h
 16145                                  ;----------------------------------------------------------------------------
 16146                                  ; 24/12/2023 - Retro DOS v5.0
 16147                                  ;;;;
 16148                                  
 16149 00000DEB 00                      ioctl_drvnum:	db 0
 16150                                  
 16151                                  		; 24/12/2023
 16152                                  
 16153                                  ; =============== S U B R O U T I N E =======================================
 16154                                  
 16155                                  get_phy_drv_num:
 16156 00000DEC E8B5F7                  		call	SetDrive	; get physical drive number
 16157                                  					; INPUT: al = logical drive number (BDS.drivelet)
 16158                                  					; OUTPUT: physical drive number (BDS.drivenum)
 16159 00000DEF 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 16160 00000DF3 C3                      		retn
 16161                                  
 16162                                  ; =============== S U B R O U T I N E =======================================
 16163                                  
 16164                                  		; 24/12/2023
 16165                                  ioctl_output:
 16166 00000DF4 E8F5FF                  		call	get_phy_drv_num
 16167 00000DF7 2E8816[EB0D]            		mov	[cs:ioctl_drvnum], dl
 16168 00000DFC B441                    		mov	ah, 41h
 16169 00000DFE BBAA55                  		mov	bx, 55AAh
 16170 00000E01 CD13                    		int	13h		; DISK - Check for INT 13h Extensions
 16171                                  					; BX = 55AAh, DL = drive number
 16172                                  					; Return: CF set if not supported
 16173                                  					; AH = extensions version
 16174                                  					; BX = AA55h
 16175                                  					; CX = Interface support bit map
 16176 00000E03 7235                    		jc	short int13h_exts_err
 16177                                  ioctl_input_1:
 16178 00000E05 C43E[1200]              		les	di, [ptrsav]
 16179 00000E09 26C47D0E                		les	di, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
 16180 00000E0D 723E                    		jc	short ioctl_input_2
 16181 00000E0F B80046                  		mov	ax, 4600h	; Eject removable media
 16182 00000E12 263805                  		cmp	[es:di], al	; al = 0 ; disk ioctl function = 0
 16183 00000E15 7417                    		je	short ioctl_output_1
 16184 00000E17 26803D01                		cmp	byte [es:di], 1 ; al = 1 ; disk ioctl function = 1
 16185 00000E1B 751B                    		jne	short ioctl_output_2
 16186 00000E1D B80145                  		mov	ax, 4501h	; Lock/unlock media
 16187                                  					; (al, 0 = lock, 1 = unlock)
 16188 00000E20 26807D0100              		cmp	byte [es:di+1], 0 ; unlock (reverse of INT 13h ah=45h)
 16189 00000E25 7407                    		jz	short ioctl_output_1
 16190 00000E27 26384501                		cmp	[es:di+1], al	; lock (reverse of INT 13h ah=45h)
 16191 00000E2B 750B                    		jne	short ioctl_output_2
 16192 00000E2D 48                      		dec	ax
 16193                                  ioctl_output_1:
 16194 00000E2E 2E8A16[EB0D]            		mov	dl, [cs:ioctl_drvnum]
 16195 00000E33 CD13                    		int	13h		; DISK - IBM/MS Extension - LOCK/UNLOCK DRIVE (DL - drive, [SI - disk address packet)
 16196 00000E35 7203                    		jc	short int13h_exts_err
 16197                                  ioctl_lock_err:
 16198                                  		; cf=0
 16199                                  ioctl_output_ret:
 16200                                  		;clc
 16201 00000E37 C3                      		retn
 16202                                  ; ---------------------------------------------------------------------------
 16203                                  
 16204                                  ioctl_output_2:
 16205 00000E38 B401                    		mov	ah, 1
 16206                                  int13h_exts_err:
 16207 00000E3A 80FCB0                  		cmp	ah, 0B0h	; volume not locked in drive
 16208 00000E3D 74F8                    		je	short ioctl_lock_err
 16209 00000E3F 80FCB4                  		cmp	ah, 0B4h	; lock count exceeded
 16210 00000E42 74F3                    		je	short ioctl_lock_err
 16211 00000E44 E9DDF7                  		jmp	err_exitj
 16212                                  
 16213                                  ; =============== S U B R O U T I N E =======================================
 16214                                  
 16215                                  		; 24/12/2023
 16216                                  ioctl_input:
 16217 00000E47 E8A2FF                  		call	get_phy_drv_num
 16218 00000E4A F9                      		stc
 16219 00000E4B EBB8                    		jmp	short ioctl_input_1
 16220                                  ioctl_input_2:
 16221 00000E4D 26803D06                		cmp	byte [es:di], 6	; disk ioctl function = 6
 16222 00000E51 75E5                    		jne	short ioctl_output_2
 16223 00000E53 B80245                  		mov	ax, 4502h	; get lock status
 16224 00000E56 CD13                    		int	13h		; DISK - IBM/MS Extension - LOCK/UNLOCK DRIVE (DL - drive, [SI - disk address packet)
 16225 00000E58 72E0                    		jc	short int13h_exts_err
 16226 00000E5A BB0C00                  		mov	bx, 0Ch		; bit 1 lock bit
 16227 00000E5D 3C00                    		cmp	al, 0		; not locked
 16228 00000E5F 7402                    		jz	short ioctl_input_3
 16229 00000E61 B30E                    		mov	bl, 0Eh
 16230                                  ioctl_input_3:
 16231 00000E63 53                      		push	bx
 16232 00000E64 B404                    		mov	ah, 4
 16233 00000E66 B90101                  		mov	cx, 101h
 16234 00000E69 B601                    		mov	dh, 1
 16235 00000E6B CD13                    		int	13h		; DISK - VERIFY SECTORS
 16236                                  					; AL = number of sectors to verify, CH = track, CL = sector
 16237                                  					; DH = head, DL = drive
 16238                                  					; Return: CF set on error, AH = status
 16239                                  					; AL = number of sectors verified
 16240 00000E6D 5B                      		pop	bx
 16241 00000E6E 80FC31                  		cmp	ah, 31h		; no media in drive (IBM/MS INT 13 extensions)
 16242 00000E71 740B                    		je	short ioctl_input_5
 16243 00000E73 80FC80                  		cmp	ah, 80h		; timeout (not ready)
 16244 00000E76 7406                    		je	short ioctl_input_5
 16245                                  ioctl_input_4:
 16246 00000E78 26895D01                		mov	[es:di+1], bx
 16247 00000E7C EBB9                    		jmp	short ioctl_lock_err
 16248                                  ioctl_input_5:
 16249 00000E7E 81CB0108                		or	bx, 801h	; bit 0 error bit (1 = error, 31h or 80h)
 16250                                  					; bit 11 (not ready -removable media error- bit)
 16251                                  					; if bit 11 = 0, another error (except 31h and 80h)
 16252 00000E82 EBF4                    		jmp	short ioctl_input_4
 16253                                  
 16254                                  ; ---------------------------------------------------------------------------
 16255                                  ;;;;
 16256                                  
 16257                                  ; 16/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 16258                                  
 16259                                  ;----------------------------------------------------------------------------
 16260                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
 16261                                  ;----------------------------------------------------------------------------
 16262                                  ; 11/03/2019 - Retro DOS v4.0
 16263                                  
 16264                                  ; 18/03/2019
 16265                                  
 16266                                  ; ==========================================================================
 16267                                  ;
 16268                                  ; NOTE: GetAccessFlag/SetAccessFlag is unpublished function.
 16269                                  ;
 16270                                  ;      This function is intended to give the user to control the
 16271                                  ;      bds table flags of unformatted_media bit.
 16272                                  ;      GetAccessFlag will show the status -
 16273                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 disk i/o not allowed
 16274                                  ;						1 disk i/o allowed
 16275                                  ;      SetAccessFlag will set/reset the unformatted_media bit in flags -
 16276                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 allow disk i/o
 16277                                  ;						1 disallow disk i/o
 16278                                  ; ==========================================================================
 16279                                  
 16280                                  		; generic ioctl dispatch tables
 16281                                  
 16282                                  ; BIOSCODE:0C3Ch (MSDOS 6.21, IO.SYS)
 16283                                  
 16284                                  ; 24/12/2023
 16285                                  ; BIOSCODE:0ECAh (PCDOS 7.1, IBMBIO.COM)
 16286                                  
 16287                                  ; ---------------------------------------------------------------------------
 16288                                  		; 24/12/2023
 16289                                  		;db 0
 16290                                  ; 09/12/2022 
 16291                                  %if 0
 16292                                  
 16293                                  IoReadJumpTable: db 8	; ((IoWriteJumpTable-IoReadJumpTable)-1)/2
 16294                                  		dw 0CA7h	; 60h	; GetDeviceParameters
 16295                                  		dw 0EE8h	; 61h	; ReadTrack
 16296                                  		dw 0E86h	; 62h	; VerifyTrack
 16297                                  		dw 0CA3h	 	; Cmd_Error_Proc
 16298                                  		dw 0CA3h		; Cmd_Error_Proc
 16299                                  		dw 0CA3h		; Cmd_Error_Proc
 16300                                  		dw 119Ah	; 66h	; GetMediaId
 16301                                  		dw 1269h	; 67h	; GetAccessFlag ; unpublished function
 16302                                  		dw 12C1h	; 68h	; SenseMediaType
 16303                                  
 16304                                  IoWriteJumpTable: db 7	; ((IOC_DC_Table-IoWriteJumpTable)-1)/2
 16305                                  		dw 0CF3h	; 40h	; SetDeviceParameters
 16306                                  		dw 0EEFh	; 41h	; WriteTrack
 16307                                  		dw 0DC1h	; 42h	; FormatTrack
 16308                                  		dw 0CA3h		; Cmd_Error_Proc
 16309                                  		dw 0CA3h		; Cmd_Error_Proc
 16310                                  		dw 0CA3h		; Cmd_Error_Proc
 16311                                  		dw 11D2h	; 46h	; SetMediaId
 16312                                  		dw 1280h	; 47h	; SetAccessFlag ; unpublished function
 16313                                  
 16314                                  %endif
 16315                                  		; 24/12/2023 - Retro DOS v5.0
 16316                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0ECAh)
 16317                                  
 16318                                  		; 09/12/2022
 16319                                  IoReadJumpTable:
 16320 00000E84 10                      		db ((IoWriteJumpTable-IoReadJumpTable)-1)/2 ; 15
 16321 00000E85 [170F]                  		dw GetDeviceParameters	; 60h
 16322 00000E87 [9011]                  		dw ReadTrack		; 61h
 16323 00000E89 [3011]                  		dw VerifyTrack		; 62h
 16324 00000E8B [130F]                  		dw Cmd_Error_Proc
 16325 00000E8D [130F]                  		dw Cmd_Error_Proc
 16326 00000E8F [130F]                  		dw Cmd_Error_Proc
 16327 00000E91 [0F14]                  		dw GetMediaId		; 66h
 16328 00000E93 [EC14]                  		dw GetAccessFlag	; 67h ; unpublished function
 16329 00000E95 [4615]                  		dw SenseMediaType	; 68h
 16330                                  		; 24/12/2023
 16331                                  		; Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 16332 00000E97 [130F]                  		dw Cmd_Error_Proc	; 69h
 16333 00000E99 [130F]                  		dw Cmd_Error_Proc	; 6Ah
 16334 00000E9B [130F]                  		dw Cmd_Error_Proc
 16335 00000E9D [130F]                  		dw Cmd_Error_Proc
 16336 00000E9F [130F]                  		dw Cmd_Error_Proc
 16337 00000EA1 [130F]                  		dw Cmd_Error_Proc	; 6Eh
 16338 00000EA3 [CA15]                  		dw GetDrvMapInfo	; 6Fh
 16339                                  
 16340                                  IoWriteJumpTable:
 16341 00000EA5 0A                      		db ((IOC_DC_Table-IoWriteJumpTable)-1)/2 ; 9
 16342 00000EA6 [770F]                  		dw SetDeviceParameters	; 40h
 16343 00000EA8 [9711]                  		dw WriteTrack		; 41h
 16344 00000EAA [6A10]                  		dw FormatTrack		; 42h
 16345 00000EAC [130F]                  		dw Cmd_Error_Proc
 16346 00000EAE [130F]                  		dw Cmd_Error_Proc
 16347 00000EB0 [130F]                  		dw Cmd_Error_Proc
 16348 00000EB2 [4F14]                  		dw SetMediaId		; 46h
 16349 00000EB4 [0115]                  		dw SetAccessFlag	; 47h ; unpublished function
 16350                                  		; 24/12/2023
 16351                                  		; Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 16352 00000EB6 [8315]                  		dw SetLockState		; 48h
 16353 00000EB8 [9A15]                  		dw EjectMedia		; 49h	
 16354                                  		
 16355                                  ; ==========================================================================
 16356                                  ; IOC_DC_Table
 16357                                  ;
 16358                                  ; This table contains all of the valid generic IOCtl Minor codes for
 16359                                  ; major function 08 to be used by the Ioctl_Support_Query function.
 16360                                  ; Added for 5.00
 16361                                  ; ==========================================================================
 16362                                  
 16363                                  		; 24/12/2023 - Retro DOS v5.0
 16364                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0F00h)
 16365                                  
 16366 00000EBA 60                      IOC_DC_Table:	db 60h			; GET_DEVICE_PARAMETERS
 16367 00000EBB 40                      		db 40h			; SET_DEVICE_PARAMETERS
 16368 00000EBC 61                      		db 61h			; READ_TRACK
 16369 00000EBD 41                      		db 41h			; WRITE_TRACK
 16370 00000EBE 62                      		db 62h			; VERIFY_TRACK
 16371 00000EBF 42                      		db 42h			; FORMAT_TRACK
 16372 00000EC0 66                      		db 66h			; GET_MEDIA_ID
 16373 00000EC1 46                      		db 46h			; SET_MEDIA_ID
 16374 00000EC2 67                      		db 67h			; GET_ACCESS_FLAG
 16375 00000EC3 47                      		db 47h			; SET_ACCESS_FLAG
 16376 00000EC4 68                      		db 68h			; SENSE_MEDIA_TYPE
 16377                                  		; 24/12/2023
 16378                                  		; Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 16379 00000EC5 48                      		db 48h			; SET_LOCK_STATE
 16380 00000EC6 49                      		db 49h			; EJECT_MEDIA
 16381 00000EC7 6F                      		db 6Fh			; GET_DRV_MAP_INFO
 16382                                  
 16383                                  ;IOC_DC_TABLE_LEN EQU $ - IOC_DC_Table
 16384                                  
 16385                                  		; 24/12/2023 - Retro DOS v5.0
 16386                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0F0Eh)
 16387                                  
 16388 00000EC8 00                      new_genioctl:	db 0
 16389                                  
 16390                                  ; ---------------------------------------------------------------------------
 16391                                  
 16392                                  ; 16/10/2022
 16393                                  
 16394                                  ; ==========================================================================
 16395                                  ; Do_Generic_IOCtl: perform generic ioctl request
 16396                                  ;
 16397                                  ;    input: AL contains logical drive
 16398                                  ;
 16399                                  ;	functions are dispatched through a call. On return, carry indicates
 16400                                  ;	error code in al. Note::bES:b& ds undefined on return from
 16401                                  ;	subfunctions.
 16402                                  ;
 16403                                  ; ==========================================================================
 16404                                  
 16405                                  ; 11/03/2019
 16406                                  		; 24/12/2023 - Retro DOS v5.0
 16407                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0F0Fh)
 16408                                  
 16409                                  		; 19/10/2022
 16410                                  do_generic_ioctl:			; 2C7h:0C6Bh = 70h:31DBh
 16411 00000EC9 E8D8F6                  		call	SetDrive	; ES:DI	Points to bds for drive
 16412                                  		
 16413                                  		; 24/12/2023
 16414                                  		;;;
 16415 00000ECC 2EC606[C80E]00          		mov	byte [cs:new_genioctl], 0
 16416                                  					; 0, old generic ioctl function
 16417 00000ED2 06                      		push	es
 16418 00000ED3 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	Points to request header
 16419 00000ED7 26807F0D08              		cmp	byte [es:bx+0Dh], 8 ; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 16420                                  					; RAWIO
 16421                                  		; 24/12/2023
 16422                                  		;mov	al, [es:bx+0Eh]	; [es:bx+IOCTL_REQ.MINORFUNCTION]
 16423                                  		;pop	es
 16424                                  		;jnz	short IoctlFuncErr
 16425 00000EDC 740A                    		jz	short chk_genioctl_minor
 16426 00000EDE 2EFE06[C80E]            		inc	byte [cs:new_genioctl]
 16427                                  					; 1, new generic ioctl function (FAT32)
 16428 00000EE3 26807F0D48              		cmp	byte [es:bx+0Dh], 48h ; Generic IOCtl Request support
 16429                                  				; (called only if bit 6 of attribute is set to 1)
 16430                                  chk_genioctl_minor:
 16431 00000EE8 268A470E                		mov	al, [es:bx+0Eh]	; [es:bx+IOCTL_REQ.MINORFUNCTION]
 16432 00000EEC 07                      		pop	es
 16433 00000EED 7525                    		jnz	short IoctlFuncErr
 16434                                  		;;;
 16435                                  
 16436                                  		; cas note: Could do the above two blocks in reverse order.
 16437                                  		; Would have to preserve al for SetDrive
 16438                                  
 16439                                  		; 10/12/2022
 16440 00000EEF BE[840E]                		mov	si, IoReadJumpTable
 16441                                  		;mov	si, 0C3Ch	; IoReadJumpTable
 16442                                  					; at 2C7h:0C3Ch	= 70h:31ACh
 16443 00000EF2 A820                    		test	al, 20h		; GEN_IOCTL_FN_TST ; test of req. function
 16444 00000EF4 7503                    		jnz	short NotGenericWrite ; function is a read.
 16445                                  		; 10/12/2022
 16446 00000EF6 BE[A50E]                		mov	si, IoWriteJumpTable
 16447                                  		;mov	si, 0C4Fh	; IoWriteJumpTable
 16448                                  					; at 2C7h:0C4Fh	= 70h:31BFh
 16449                                  NotGenericWrite:
 16450 00000EF9 24DF                    		and	al, 0DFh	; ~GEN_IOCTL_FN_TST ; get rid of read/write bit
 16451 00000EFB 2C40                    		sub	al, 40h		; offset for base function
 16452 00000EFD 2E3A04                  		cmp	al, [cs:si]
 16453 00000F00 7712                    		ja	short IoctlFuncErr
 16454 00000F02 98                      		cbw
 16455                                  		; 24/12/2023
 16456                                  		;shl	ax, 1
 16457 00000F03 01C0                    		add	ax, ax
 16458 00000F05 46                      		inc	si
 16459 00000F06 01C6                    		add	si, ax
 16460 00000F08 2EFF14                  		call	near [cs:si]
 16461                                  		;call	word ptr cs:[si]
 16462 00000F0B 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 16463                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 16464                                  					; 2C7h:30h = 70h:25A0h
 16465 00000F10 B481                    		mov	ah, 81h		; Return this status in	case of	carry
 16466 00000F12 C3                      		retn			; Pass carry flag through to exit code
 16467                                  ; ---------------------------------------------------------------------------
 16468                                  
 16469                                  		; Cmd_Error_Proc is called as a procedure and also use
 16470                                  		; as a fall through from above
 16471                                  Cmd_Error_Proc:				; 2C7h:0CA3h = 70h:3213h
 16472 00000F13 5A                      		pop	dx
 16473                                  IoctlFuncErr:
 16474 00000F14 E9BEF1                  		jmp	bc_cmderr
 16475                                  ; ---------------------------------------------------------------------------
 16476                                  
 16477                                  ; 16/10/2022
 16478                                  
 16479                                  ; ==========================================================================
 16480                                  ;**	GetDeviceParameters:
 16481                                  ;
 16482                                  ;	GetDeviceParameters implements the generic ioctl function:
 16483                                  ;	majorcode=RAWIO, minorcode=GetDeviceParameters (60h)
 16484                                  ;
 16485                                  ;	ENTRY	(ES:di) = BDS for drive
 16486                                  ;		PtrSav = long pointer to request header
 16487                                  ;	EXIT	??? BUGBUG
 16488                                  ;	USES	??? BUGBUG
 16489                                  ; ==========================================================================
 16490                                  
 16491                                  		; 24/12/2023 - Retro DOS v5.0
 16492                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0F5Dh)
 16493                                  
 16494                                  		; 19/10/2022
 16495                                  GetDeviceParameters:
 16496                                  		; Copy info from bds to the device parameters packet
 16497                                  
 16498 00000F17 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 16499 00000F1B C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 16500                                  					; (DS:BX) = return buffer
 16501                                  		; 24/12/2023
 16502 00000F1E 268A453E                		mov	al, [es:di+3Eh]
 16503                                  		;mov	al, [es:di+34]	; [es:di+BDS.formfactor]
 16504 00000F22 884701                  		mov	[bx+1],	al	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 16505                                  		; 24/12/2023
 16506 00000F25 268B453F                		mov	ax, [es:di+3Fh]
 16507                                  		;mov	ax, [es:di+35]	; [es:di+BDS.flags]
 16508 00000F29 83E003                  		and	ax, 3		; fnon_removable+fchangeline
 16509                                  					; Mask off other bits
 16510 00000F2C 894702                  		mov	[bx+2],	ax	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 16511                                  		; 24/12/2023
 16512 00000F2F 268B4541                		mov     ax, [es:di+41h]
 16513                                  		;mov	ax, [es:di+37]	; [es:di+BDS.cylinders]
 16514 00000F33 894704                  		mov	[bx+4],	ax	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 16515 00000F36 30C0                    		xor	al, al		; Set media type to default
 16516 00000F38 884706                  		mov	[bx+6],	al	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 16517                                  					
 16518                                  		; copy recommended bpb
 16519                                  
 16520                                  		; 24/12/2023
 16521 00000F3B 8D7543                  		lea     si, [di+43h]
 16522                                  		;lea	si, [di+39]	; [di+BDS.rbytespersec]	= [di+BDS.R_BPB]
 16523 00000F3E F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 16524                                  					; BUILD_DEVICE_BPB
 16525 00000F41 7412                    		jz	short UseBpbPresent
 16526 00000F43 1E                      		push	ds		; Save request packet segment
 16527 00000F44 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 16528                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 16529                                  					; 2C7h:30h = 70h:25A0h
 16530                                  					; Point back to Bios_Data
 16531 00000F49 E82BFA                  		call	checksingle
 16532 00000F4C E887F7                  		call	GetBp		; Build	the bpb	from scratch
 16533 00000F4F 1F                      		pop	ds		; Restore request packet segment
 16534 00000F50 7224                    		jb	short GetParmRet
 16535 00000F52 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec] = [di+BSD.DP_BPB]
 16536                                  					; Use this subfield of bds instead
 16537                                  UseBpbPresent:				
 16538 00000F55 8D7F07                  		lea	di, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 16539                                  					; This is where	the result goes
 16540                                  		; 24/12/2023
 16541 00000F58 31D2                    		xor	dx, dx ; 0
 16542                                  		
 16543                                  		; 24/12/2023
 16544 00000F5A B91F00                  		mov	cx, 31		; A_BPB.size = 31
 16545                                  		;mov	cx, 25		; A_BPB.size - 6
 16546                                  					; For now use 'small' bpb
 16547                                  		; 24/12/2023
 16548                                  		;;;
 16549 00000F5D 2E3816[C80E]            		cmp	[cs:new_genioctl], dl ; 0 ? ; *
 16550 00000F62 7404                    		jz	short gdp_1	; old type (FAT12 & FAT16) structure
 16551                                  		;mov	cx, 53		; FAT32 BPB size
 16552                                  		;mov	dx, 32		; 53+32 = 85 bytes (A_BPB_FAT32.size)
 16553 00000F64 B135                    		mov	cl, 53
 16554 00000F66 B220                    		mov	dl, 32
 16555                                  gdp_1:
 16556                                  		;;;
 16557 00000F68 1E                      		push	ds		; reverse segments for copy
 16558 00000F69 06                      		push	es
 16559 00000F6A 1F                      		pop	ds
 16560 00000F6B 07                      		pop	es
 16561 00000F6C F3A4                    		rep movsb
 16562                                  
 16563                                  		; 24/12/2023
 16564                                  		;;;
 16565 00000F6E 89D1                    		mov	cx, dx		; 0 or 32
 16566 00000F70 E304                    		jcxz	gdp_2
 16567 00000F72 30C0                    		xor	al, al		; 32 zeros
 16568 00000F74 F3AA                    		rep stosb
 16569                                  gdp_2:
 16570                                  		;clc	; cf is already 0 ; * ; 24/12/2023
 16571                                  		;;;		
 16572                                  		
 16573                                  		; 12/12/2022
 16574                                  		; cf=0 (test instruction -above- resets cf) 	
 16575                                  		;clc
 16576                                  GetParmRet:				
 16577 00000F76 C3                      		retn
 16578                                  ; ---------------------------------------------------------------------------
 16579                                  
 16580                                  ; 17/10/2022
 16581                                  ; 16/10/2022
 16582                                  
 16583                                  ; ==========================================================================
 16584                                  ; SetDeviceParameters:
 16585                                  ;
 16586                                  ; input: ES:di points to bds for drive
 16587                                  ; ==========================================================================
 16588                                  
 16589                                  		; 24/12/2023 - Retro DOS v5.0
 16590                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0FC0h)
 16591                                  
 16592                                  		; 19/10/2022
 16593                                  SetDeviceParameters:			; 2C7h:0CF3h = 70h:3263h
 16594 00000F77 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 16595 00000F7B C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 16596                                  		; 24/12/2023
 16597 00000F7E 26814D3F4001            		or	word [es:di+3Fh], 140h
 16598                                  		;or	word [es:di+23h], 140h ; [es:di+BDS.flags]
 16599                                  					; fchanged_by_format|fchanged
 16600 00000F84 F60702                  		test	byte [bx], 2	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 16601                                  					; ONLY_SET_TRACKLAYOUT
 16602                                  		;jnz	short setTrackTable
 16603                                  		; 24/12/2023
 16604 00000F87 7403                    		jz	short sdp_1
 16605 00000F89 E98000                  		jmp	setTrackTable
 16606                                  sdp_1:	
 16607 00000F8C 8A4701                  		mov	al, [bx+1]	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 16608                                  		; 24/12/2023
 16609 00000F8F 2688453E                		mov	[es:di+3Eh], al
 16610                                  		;mov	[es:di+34], al	; [es:di+BDS.formfactor]
 16611 00000F93 8B4704                  		mov	ax, [bx+4]	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 16612                                  		; 24/12/2023
 16613 00000F96 26894541                		mov	[es:di+41h], ax
 16614                                  		;mov	[es:di+37], ax	; [es:di+BDS.cylinders]
 16615 00000F9A 8B4702                  		mov	ax, [bx+2]	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 16616 00000F9D 1E                      		push	ds
 16617                                  		; 17/10/2022
 16618 00000F9E 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 16619                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 16620                                  					; 2C7h:30h = 70h:25A0h
 16621                                  		;cmp	byte [fhave96], 0
 16622 00000FA3 803E[7700]00            		cmp	byte [fhave96], 0
 16623 00000FA8 1F                      		pop	ds
 16624 00000FA9 7502                    		jnz	short HaveChange ; we have changeline support
 16625                                  		; 10/12/2022
 16626 00000FAB 24FD                    		and	al, 0FDh
 16627                                  		;and	ax, 0FFFDh	; ~fchangeline
 16628                                  
 16629                                  		; Ignore all bits except non_removable and changeline
 16630                                  HaveChange:
 16631 00000FAD 83E003                  		and	ax, 3		; fnon_removable|fchangeline
 16632                                  		; 24/12/2023
 16633 00000FB0 268B4D3F                		mov	cx, [es:di+3Fh]
 16634                                  		;mov	cx, [es:di+35]	; [es:di+BDS.flags]
 16635 00000FB4 81E1F4FD                		and	cx, 0FDF4h	; ~(fnon_removable|fchangeline|good_tracklayout|unformatted_media)
 16636 00000FB8 09C8                    		or	ax, cx
 16637                                  		; 24/12/2023
 16638 00000FBA 2689453F                		mov	[es:di+3Fh], ax
 16639                                  		;mov	[es:di+35], ax	; [es:di+BDS.flags]
 16640 00000FBE 8A4706                  		mov	al, [bx+6]	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 16641                                  					; Set media type
 16642 00000FC1 1E                      		push	ds
 16643 00000FC2 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 16644                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 16645 00000FC7 A2[A805]                		mov	[mediatype], al
 16646                                  		;mov	ds:mediatype, al
 16647                                  
 16648                                  		; 24/12/2023
 16649                                  		;;;
 16650 00000FCA B93500                  		mov	cx, 53		; FAT32 BPB size
 16651 00000FCD 2E803E[C80E]00          		cmp	byte [cs:new_genioctl], 0
 16652 00000FD3 7502                    		jnz	short sdp_2	; new type (FAT32) structure
 16653                                  		;mov	cx, 31		; A_BPB.size = 31
 16654 00000FD5 B11F                    		mov	cl, 31
 16655                                  sdp_2:
 16656                                  		;;;	
 16657 00000FD7 1F                      		pop	ds
 16658                                  
 16659                                  		; The media changed (maybe) so we will have to do a set dasd
 16660                                  		; the next time we format a track
 16661                                  
 16662                                  		; 24/12/2023
 16663 00000FD8 26804D3F80              		or	byte [es:di+3Fh], 80h
 16664                                  		; 10/12/2022
 16665                                  		;or	byte [es:di+35], 80h
 16666                                  		;;or	word [es:di+35], 80h ; [es:di+BDS.flags]
 16667                                  					; set_dasd_true
 16668 00000FDD 57                      		push	di		; Save bds pointer
 16669                                  
 16670                                  		; Figure out what we are supposed to do with the bpb
 16671                                  		; were we asked to install a fake bpb?
 16672                                  
 16673 00000FDE F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 16674                                  					; INSTALL_FAKE_BPB
 16675 00000FE1 7511                    		jnz	short InstallFakeBpb
 16676                                  
 16677                                  		; were we returning a fake bpb when asked to build a bpb?
 16678                                  
 16679                                  		; 24/12/2023
 16680 00000FE3 26F6453F04              		test	byte [es:di+3Fh], 4
 16681                                  		; 10/12/2022
 16682                                  		;test	byte [es:di+35], 4
 16683                                  		;;test	word [es:di+35], 4 ; [es:di+BDS.flags]
 16684                                  					; return_fake_bpb
 16685 00000FE8 7405                    		jz	short InstallRecommendedBpb
 16686                                  
 16687                                  		; we were returning a fake bpb but we can stop now
 16688                                  
 16689                                  		; 24/12/2023
 16690 00000FEA 2680653FFB              		and	byte [es:di+3Fh], 0FBh
 16691                                  		; 10/12/2022
 16692                                  		;and	byte [es:di+35], 0FBh
 16693                                  		;;and	word [es:di+35], 0FFFBh ; [es:di+BDS.flags]
 16694                                  					; ~return_fake_bpb
 16695                                  InstallRecommendedBpb:
 16696                                  		; 24/12/2023
 16697                                  		;mov	cx, 31		; A_BPB.size
 16698                                  		;lea	di, [di+27h]	; [di+BDS.R_BPB] = [di+BDS.rbytespersec]
 16699                                  		; cx = 53 or 31
 16700 00000FEF 8D7D43                  		lea	di, [di+43h]	; (PCDOS 7.1 IBMBIO.COM)
 16701 00000FF2 EB08                    		jmp	short CopyTheBpb
 16702                                  ; ---------------------------------------------------------------------------
 16703                                  
 16704                                  InstallFakeBpb:
 16705                                  		; 24/12/2023
 16706 00000FF4 26804D3F04              		or	byte [es:di+3Fh], 4
 16707                                  		; 10/12/2022
 16708                                  		;or	byte [es:di+35], 4
 16709                                  		;;or	word [es:di+35], 4 ; byte [es:di+BDS.flags]
 16710                                  					; return_fake_bpb
 16711                                  		; 24/12/2023
 16712                                  		; cx = 53 or 31
 16713                                  		;mov	cx, 25		; A_BPB.size - 6
 16714                                  					; move 'smaller' bpb
 16715 00000FF9 8D7D06                  		lea	di, [di+6]	; [es:di+BDS.BPB] = [es:di+BDS.bytespersec]
 16716                                  CopyTheBpb:				
 16717 00000FFC 8D7707                  		lea	si, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 16718 00000FFF F3A4                    		rep movsb
 16719 00001001 1E                      		push	ds		; Save packet segment
 16720                                  		; 17/10/2022
 16721 00001002 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 16722                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 16723                                  					; Setup	for ds -> Bios_Data
 16724 00001007 E8DD03                  		call	RestoreOldDpt	; Restore the old Dpt from TempDpt
 16725 0000100A 1F                      		pop	ds		; Restore packet segment
 16726 0000100B 5F                      		pop	di		; Restore bds pointer
 16727                                  setTrackTable:	
 16728                                  		; 24/12/2023
 16729                                  		;mov	cx, [bx+38]	; [bx+26h]
 16730                                  		;;;
 16731 0000100C 8B4F5C                  		mov	cx, [bx+5Ch]	; [bx+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES]
 16732                                  					; offset 85+7 (A_BPB.size+7) (FAT32)
 16733 0000100F 2E803E[C80E]00          		cmp	byte [cs:new_genioctl], 0
 16734 00001015 7503                    		jnz	short sdp_3	; new type (FAT32) structure
 16735 00001017 8B4F26                  		mov	cx, [bx+26h]	; [bx+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES]
 16736                                  					; offset 31+7 (A_BPB.size+7)
 16737                                  sdp_3:
 16738                                  		;;;
 16739                                  
 16740 0000101A 1E                      		push	ds
 16741 0000101B 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 16742 00001020 890E[AA04]              		mov	[sectorspertrack], cx
 16743 00001024 1F                      		pop	ds
 16744                                  		
 16745                                  		; 24/12/2023
 16746 00001025 2680653FF7              		and	byte [es:di+3Fh], 0F7h
 16747                                  		; 10/12/2022
 16748                                  		;and	byte [es:di+35], 0F7h
 16749                                  		;;and	word [es:di+35], 0FFF7h ; [es:di+BDS.flags]
 16750                                  					; ~good_tracklayout
 16751 0000102A F60704                  		test	byte [bx], 4	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 16752                                  					; TRACKLAYOUT_IS_GOOD
 16753 0000102D 7405                    		jz	short UglyTrackLayOut
 16754                                  		; 24/12/2023
 16755 0000102F 26804D3F08              		or	byte [es:di+3Fh], 8
 16756                                  		; 10/12/2022
 16757                                  		;or	byte [es:di+35], 8
 16758                                  		;;or	word [es:di+35], 8 ; [es:di+BDS.flags]
 16759                                  					; good_tracklayout
 16760                                  UglyTrackLayOut:
 16761 00001034 83F93F                  		cmp	cx, 63		; MAX_SECTORS_IN_TRACK
 16762 00001037 772D                    		ja	short TooManyPerTrack
 16763                                  		;jcxz	short SectorInfoSaved
 16764 00001039 E329                    		jcxz	SectorInfoSaved	; 19/10/2022
 16765                                  		
 16766 0000103B BF[AC04]                		mov	di, tracktable
 16767                                  
 16768                                  		; 24/12/2023
 16769                                  		;lea	si, [bx+40]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 16770                                  		;;;
 16771 0000103E 8D775E                  		lea	si, [bx+5Eh]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 16772                                  					; offset 85+9 (A_BPB.size+9) (FAT32)
 16773 00001041 2E803E[C80E]00          		cmp	byte [cs:new_genioctl], 0
 16774 00001047 7503                    		jnz	short sdp_4	; new type (FAT32) structure
 16775 00001049 8D7728                  		lea	si, [bx+28h]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 16776                                  					; offset 31+9 (A_BPB.size+9)
 16777                                  sdp_4:
 16778                                  		;;;
 16779                                  
 16780                                  		; 17/10/2022
 16781 0000104C 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 16782                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 16783                                  					; Trash	our bds	pointer
 16784                                  StoreSectorInfo:
 16785 00001051 47                      		inc	di
 16786 00001052 47                      		inc	di		; Skip over cylinder and head
 16787 00001053 AD                      		lodsw			; Get sector id
 16788 00001054 AA                      		stosb			; Copy it
 16789 00001055 AD                      		lodsw			; Get sector size
 16790                                  		
 16791                                  		; 24/12/2023
 16792                                  		; 02/09/2023 (PCDOS 7.1)
 16793                                  		;call	SectSizeToSectIndex
 16794 00001056 80FC03                  		cmp	ah, 3 ; 02/09/2023
 16795                                  		;cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 16796                                  					; examine upper	byte only
 16797 00001059 7704                    		ja	short OneK
 16798 0000105B 88E0                    		mov	al, ah		; value	in AH is the index!
 16799 0000105D EB02                    		jmp	short sdp_s
 16800                                  OneK:
 16801 0000105F B003                    		mov	al, 3		; 1024 bytes per sector
 16802                                  sdp_s:
 16803 00001061 AA                      		stosb			; Store	sector SIZE index
 16804 00001062 E2ED                    		loop	StoreSectorInfo
 16805                                  SectorInfoSaved:
 16806 00001064 F8                      		clc
 16807 00001065 C3                      		retn
 16808                                  ; ---------------------------------------------------------------------------
 16809                                  
 16810                                  TooManyPerTrack:
 16811 00001066 B00C                    		mov	al, 0Ch
 16812 00001068 F9                      		stc
 16813 00001069 C3                      		retn
 16814                                  ; ---------------------------------------------------------------------------
 16815                                  
 16816                                  ; 16/10/2022
 16817                                  
 16818                                  ; ==========================================================================
 16819                                  ; FormatTrack:
 16820                                  ; if specialfunction byte is 1,then this is a status call to see if there is
 16821                                  ; rom support for the combination of sec/trk and # of cyln,and if the
 16822                                  ; combination is legal. if specialfunction byte is 0,then format the track.
 16823                                  ;
 16824                                  ; input: ES:di points to bds for drive
 16825                                  ;
 16826                                  ; output:
 16827                                  ;	for status call:
 16828                                  ;	specialfunction byte set to:
 16829                                  ;		0 - rom support + legal combination
 16830                                  ;		1 - no rom support
 16831                                  ;		2 - illegal combination
 16832                                  ;		3 - no media present
 16833                                  ;	carry cleared.
 16834                                  ;
 16835                                  ;	for format track:
 16836                                  ;		carry set if error
 16837                                  ;
 16838                                  ; ==========================================================================
 16839                                  
 16840                                  ; 16/03/2019
 16841                                  		; 24/12/2023 - Retro DOS 5.0
 16842                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:10B7h)
 16843                                  
 16844                                  		; 19/10/2022
 16845                                  FormatTrack:
 16846 0000106A C51E[1200]              		lds	bx, [ptrsav]
 16847 0000106E C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET
 16848 00001071 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 16849                                  					; STATUS_FOR_FORMAT
 16850 00001074 740E                    		jz	short DoFormatTrack
 16851 00001076 1E                      		push	ds
 16852                                  		; 17/10/2022
 16853 00001077 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 16854                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 16855 0000107C E82502                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 16856 0000107F 1F                      		pop	ds
 16857 00001080 8807                    		mov	[bx], al	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 16858 00001082 F8                      		clc
 16859 00001083 C3                      		retn
 16860                                  ; ---------------------------------------------------------------------------
 16861                                  
 16862                                  DoFormatTrack:
 16863                                  		; 24/12/2023 - Retro DOS 5.0
 16864 00001084 26807D3E05              		cmp	byte [es:di+3Eh], 5				
 16865                                  		;cmp	byte [es:di+34], 5 ; [es:di+BDS.formfactor]
 16866                                  					; DEV_HARDDISK
 16867 00001089 7508                    		jnz	short DoFormatDiskette
 16868                                  		; 17/10/2022
 16869 0000108B 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 16870                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 16871                                  					; Point	to Bios_Data (at 2C7h:30h or 70h:25A0h)
 16872 00001090 E99D00                  		jmp	VerifyTrack
 16873                                  ; ---------------------------------------------------------------------------
 16874                                  
 16875                                  DoFormatDiskette:
 16876 00001093 8B4F01                  		mov	cx, [bx+1]
 16877 00001096 8B5703                  		mov	dx, [bx+3]
 16878 00001099 F60702                  		test	byte [bx], 2
 16879                                  		; 17/10/2022
 16880 0000109C 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 16881                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 16882                                  					; Setup	ds-> Bios_Data for verify
 16883 000010A1 7403                    		jz	short DoFormatDiskette_1
 16884 000010A3 E9E500                  		jmp	VerifyTrack_Err
 16885                                  ; ---------------------------------------------------------------------------
 16886                                  
 16887                                  DoFormatDiskette_1:
 16888 000010A6 E8FB01                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 16889 000010A9 3C01                    		cmp	al, 1		;  ROM support for sec/trk,# trks comb?
 16890 000010AB 7406                    		jz	short NeedToSetDasd ; Old rom
 16891 000010AD 3C03                    		cmp	al, 3		; Time out error?
 16892 000010AF 7507                    		jnz	short NoSetDasd	; No,fine. (at this point, don't care
 16893                                  					; about	the illegal combination)
 16894 000010B1 EB68                    		jmp	short FormatFailed
 16895                                  ; ---------------------------------------------------------------------------
 16896                                  
 16897                                  NeedToSetDasd:
 16898 000010B3 52                      		push	dx
 16899 000010B4 E89001                  		call	SetDasd		; INT 13h, AH=17h
 16900 000010B7 5A                      		pop	dx
 16901                                  NoSetDasd:
 16902 000010B8 E8BCF8                  		call	checksingle	; Do any needed	diskette swapping
 16903 000010BB 89D0                    		mov	ax, dx		; Get track from packet
 16904 000010BD A3[3901]                		mov	[trknum], ax
 16905 000010C0 880E[3801]              		mov	[hdnum], cl	; Store	head from packet
 16906 000010C4 88CC                    		mov	ah, cl
 16907 000010C6 BB[AC04]                		mov	bx, tracktable
 16908 000010C9 8B0E[AA04]              		mov	cx, [sectorspertrack]
 16909                                  		; 24/12/2023 - Retro DOS 5.0
 16910 000010CD E307                    		jcxz	set_fmt_retry_count
 16911                                  StoreCylinderHead:
 16912 000010CF 8907                    		mov	[bx], ax	; Store	into TrackTable
 16913 000010D1 83C304                  		add	bx, 4		; Skip to next sector field
 16914 000010D4 E2F9                    		loop	StoreCylinderHead
 16915                                  set_fmt_retry_count:	; 24/12/2023
 16916                                  		;mov	cx, 5		; MAXERR - Set up retry	count
 16917                                  		; 02/09/2023
 16918 000010D6 B105                    		mov	cl, 5
 16919                                  FormatRetry:
 16920 000010D8 51                      		push	cx
 16921 000010D9 BB[AC04]                		mov	bx, tracktable
 16922 000010DC A0[AA04]                		mov	al, [sectorspertrack]
 16923 000010DF B405                    		mov	ah, 5		; romformat
 16924 000010E1 8C1E[A804]              		mov	[xfer_seg], ds
 16925 000010E5 E86602                  		call	ToRom
 16926 000010E8 59                      		pop	cx
 16927 000010E9 7216                    		jb	short FormatError
 16928 000010EB 51                      		push	cx		; Now verify the sectors just formatted.
 16929                                  					; NOTE:	because	of bug in some BIOSes we have to
 16930                                  					;	set ES:BX to 00:00
 16931 000010EC 53                      		push	bx
 16932 000010ED 31DB                    		xor	bx, bx
 16933 000010EF 891E[A804]              		mov	[xfer_seg], bx
 16934 000010F3 A0[AA04]                		mov	al, [sectorspertrack]
 16935 000010F6 B404                    		mov	ah, 4		; romverify
 16936 000010F8 B101                    		mov	cl, 1
 16937 000010FA E85102                  		call	ToRom
 16938 000010FD 5B                      		pop	bx
 16939 000010FE 59                      		pop	cx
 16940 000010FF 7329                    		jnb	short FormatOk
 16941                                  FormatError:
 16942 00001101 E83402                  		call	ResetDisk
 16943 00001104 C606[AA05]01            		mov	byte [had_format_error], 1
 16944 00001109 50                      		push	ax
 16945 0000110A 51                      		push	cx
 16946 0000110B 52                      		push	dx
 16947 0000110C E89501                  		call	SetMediaForFormat
 16948 0000110F 3C01                    		cmp	al, 1
 16949 00001111 7503                    		jnz	short WhileErr
 16950 00001113 E83101                  		call	SetDasd
 16951                                  WhileErr:
 16952 00001116 5A                      		pop	dx
 16953 00001117 59                      		pop	cx
 16954 00001118 58                      		pop	ax
 16955 00001119 E2BD                    		loop	FormatRetry
 16956                                  FormatFailed:
 16957 0000111B C606[AA05]01            		mov	byte [had_format_error], 1
 16958                                  					; Set the format error flag
 16959 00001120 80FC06                  		cmp	ah, 6		; DSK_CHANGELINE_ERR - convert change line
 16960 00001123 7502                    		jnz	short DoMapIt	; Error	to time	out error
 16961 00001125 B480                    		mov	ah, 80h		; DSK_TIMEOUT_ERR
 16962                                  DoMapIt:
 16963 00001127 E97CFC                  		jmp	maperror
 16964                                  ; ---------------------------------------------------------------------------
 16965                                  
 16966                                  FormatOk:
 16967 0000112A C606[AA05]00            		mov	byte [had_format_error], 0 ; reset the format error flag
 16968 0000112F C3                      		retn
 16969                                  ; ---------------------------------------------------------------------------
 16970                                  
 16971                                  ; 16/10/2022
 16972                                  
 16973                                  ; ==========================================================================
 16974                                  ;
 16975                                  ; VerifyTrack:
 16976                                  ;
 16977                                  ; input: ES:di points to bds for drive
 16978                                  ; ==========================================================================
 16979                                  
 16980                                  		; 24/12/2023 - Retro DOS 5.0
 16981                                  VerifyTrack:
 16982 00001130 1E                      		push	ds
 16983 00001131 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX points to request header.
 16984 00001135 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 16985                                  
 16986                                  		; Come here with DS:[BX] -> packet, ES:[DI] -> bds
 16987                                  
 16988 00001138 8B4F03                  		mov	cx, [bx+3]	; [bx+A_VERIFYPACKET.VP_CYLINDER]
 16989 0000113B 8B4701                  		mov	ax, [bx+1]	; [bx+A_VERIFYPACKET.VP_HEAD]
 16990 0000113E 8B5705                  		mov	dx, [bx+5]	; [bx+A_FORMATPACKET.FP_TRACKCOUNT]
 16991 00001141 8A1F                    		mov	bl, [bx]	; [bx+A_FORMATPACKET.FP_SPECIALFUNCTIONS]
 16992                                  					; Get option flag word
 16993 00001143 1F                      		pop	ds
 16994 00001144 C606[2001]04            		mov	byte [rflag], 4	; romverify
 16995 00001149 890E[3301]              		mov	[curtrk], cx
 16996 0000114D A2[3201]                		mov	[curhd], al	; ASSUME heads < 256
 16997 00001150 8B0E[AA04]              		mov	cx, [sectorspertrack]
 16998                                  
 16999                                  		; Check specialfunctions to see if DO_FAST_FORMAT has been
 17000                                  		; specified if not we should go to the normal track verification
 17001                                  		; routine. If fast format has been specified we should get the
 17002                                  		; number of tracks to be verified and check it to see if it is
 17003                                  		; > 255. If it is then it is an error and we should go to
 17004                                  		; VerifyTrack_Err. If not multiply the number of tracks by the
 17005                                  		; sectors per track to get the total number of sectors to be
 17006                                  		; verified. This should also be less than equal to 255
 17007                                  		; otherwise we go to same error exit. If everything is okay
 17008                                  		; we initalise cx to the total sectors. use ax as a temporary
 17009                                  		; register.
 17010                                  
 17011                                  					; Special function requested?	
 17012 00001154 F6C302                  		test	bl, 2		; DO_FAST_FORMAT
 17013 00001157 7421                    		jz	short NormVerifyTrack
 17014 00001159 89D0                    		mov	ax, dx		; Get ax = number of trks to verify
 17015 0000115B 08E4                    		or	ah, ah
 17016 0000115D 752C                    		jnz	short VerifyTrack_Err ; #tracks > 255
 17017 0000115F F6E1                    		mul	cl
 17018 00001161 08E4                    		or	ah, ah
 17019 00001163 7526                    		jnz	short VerifyTrack_Err ; #sectors > 255	
 17020 00001165 89C1                    		mov	cx, ax
 17021                                  		; 24/12/2023
 17022 00001167 26F6453F01              		test	byte [es:di+3Fh], 1 ; PCDOS 7.1 IBMBIO.COM
 17023                                  		; 10/12/2022
 17024                                  		;test	byte [es:di+35], 1
 17025                                  		;;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 17026                                  					; fnon_removable
 17027 0000116C 740C                    		jz	short NormVerifyTrack
 17028                                  					; Multitrack operation = on?
 17029                                  		; 10/12/2022
 17030                                  		; 19/10/2022
 17031 0000116E F606[A004]80            		test	byte [multrk_flag], 80h
 17032                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 17033                                  		;;test	ds:multrk_flag,	80h ; MULTI_TRK_ON
 17034 00001173 7405                    		jz	short NormVerifyTrack
 17035 00001175 C606[A704]01            		mov	byte [multitrk_format_flag], 1
 17036                                  NormVerifyTrack:
 17037 0000117A 31C0                    		xor	ax, ax		; 1st sector
 17038 0000117C 31DB                    		xor	bx, bx
 17039 0000117E 891E[A804]              		mov	[xfer_seg], bx	; Use 0:0 as the transfer address for verify
 17040 00001182 E83F00                  		call	TrackIo
 17041 00001185 C606[A704]00            		mov	byte [multitrk_format_flag], 0
 17042 0000118A C3                      		retn
 17043                                  ; ---------------------------------------------------------------------------
 17044                                  
 17045                                  VerifyTrack_Err:
 17046 0000118B B401                    		mov	ah, 1
 17047 0000118D E916FC                  		jmp	maperror
 17048                                  ; ---------------------------------------------------------------------------
 17049                                  
 17050                                  ; 16/10/2022
 17051                                  
 17052                                  ; ==========================================================================
 17053                                  ;
 17054                                  ; ReadTrack:
 17055                                  ;
 17056                                  ; input: ES:di points to bds for drive
 17057                                  ;
 17058                                  ; ==========================================================================
 17059                                  
 17060                                  ReadTrack:
 17061 00001190 C606[2001]02            		mov	byte [rflag], 2	; romread
 17062 00001195 EB05                    		jmp	short ReadWriteTrack
 17063                                  ; ---------------------------------------------------------------------------
 17064                                  
 17065                                  WriteTrack:
 17066                                  
 17067                                  ; ==========================================================================
 17068                                  ;
 17069                                  ; WriteTrack:
 17070                                  ;
 17071                                  ; input: ES:di points to bds for drive
 17072                                  ;
 17073                                  ; ==========================================================================
 17074                                  				
 17075 00001197 C606[2001]03            		mov	byte [rflag], 3	; romwrite
 17076                                  
 17077                                  		; Fall into ReadWriteTrack
 17078                                  
 17079                                  ; ==========================================================================
 17080                                  ;
 17081                                  ; readWriteTrack:
 17082                                  ;
 17083                                  ; input:
 17084                                  ;    ES:di points to bds for drive
 17085                                  ;    rFlag - 2 for read,3 for write
 17086                                  ;
 17087                                  ; ==========================================================================
 17088                                  
 17089                                  ReadWriteTrack:	
 17090                                  		; save bds pointer segment so we can use it to access
 17091                                  		; our packet. Notice that this is not the standard register
 17092                                  		; assignment for accessing packets
 17093                                  		
 17094                                  		; 19/10/2022
 17095 0000119C 06                      		push	es
 17096 0000119D C41E[1200]              		les	bx, [ptrsav]	; ES:BX	-> to request header
 17097 000011A1 26C45F13                		les	bx, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 17098 000011A5 268B4703                		mov	ax, [es:bx+3]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_CYLINDER]
 17099 000011A9 A3[3301]                		mov	[curtrk], ax
 17100 000011AC 268B4701                		mov	ax, [es:bx+1]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_HEAD]
 17101 000011B0 A2[3201]                		mov	[curhd], al	; Assume heads < 256!!!
 17102 000011B3 268B4705                		mov	ax, [es:bx+5]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_FIRSTSECTOR]
 17103 000011B7 268B4F07                		mov	cx, [es:bx+7]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_SECTORSTOREADWRITE]
 17104 000011BB 26C45F09                		les	bx, [es:bx+9]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_TRANSFERADDRESS]
 17105                                  					; Get transfer address
 17106                                  
 17107                                  		; we just trashed our packet address, but we no longer care
 17108                                  
 17109 000011BF 8C06[A804]              		mov	[xfer_seg], es	; Pass transfer	segment
 17110 000011C3 07                      		pop	es
 17111                                  
 17112                                  		; Fall into TrackIo
 17113                                  
 17114                                  ; =============== S U B	R O U T	I N E =======================================
 17115                                  
 17116                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17117                                  
 17118                                  ; ==========================================================================
 17119                                  ;
 17120                                  ; TrackIo:
 17121                                  ;    performs track read/write/verify
 17122                                  ;
 17123                                  ;   input:
 17124                                  ;      rFlag	- 2 = read
 17125                                  ;		  3 = write
 17126                                  ;		  4 = verify
 17127                                  ;      AX	- Index into track table of first sector to io
 17128                                  ;      CX	- Number of sectors to io
 17129                                  ;      Xfer_Seg:BX - Transfer address
 17130                                  ;      ES:DI	- Pointer to bds
 17131                                  ;      CurTrk	- Current cylinder
 17132                                  ;      CurHd	- Current head
 17133                                  ;
 17134                                  ; ==========================================================================
 17135                                  
 17136                                  ; 16/03/2019 - Retro DOS v4.0
 17137                                  
 17138                                  		; 24/12/2023 - Retro DOS 5.0		
 17139                                  
 17140                                  		; 19/10/2022
 17141                                  TrackIo:
 17142                                  					; Procedure `disk' will pop stack to
 17143 000011C4 8926[3501]              		mov	[spsav], sp	; SpSav	and return if error
 17144 000011C8 E8ACF7                  		call	checksingle	; Ensure correct disk is in drv
 17145 000011CB 803E[A905]01            		cmp	byte [media_set_for_format], 1
 17146                                  					; See if we have already set	disk
 17147 000011D0 7407                    		jz	short Dptalreadyset ; base table
 17148 000011D2 50                      		push	ax		; set up tables	and variables for i/o
 17149 000011D3 51                      		push	cx
 17150 000011D4 E8A3F9                  		call	iosetup
 17151 000011D7 59                      		pop	cx
 17152 000011D8 58                      		pop	ax
 17153                                  Dptalreadyset:				; Point si at the table entry of the			
 17154 000011D9 BE[AC04]                		mov	si, tracktable	; first sector to be io'd
 17155                                  		; 24/12/2023
 17156                                  		;add	ax, ax		; PCDOS 7.1 IBMBIO.COM
 17157                                  		;add	ax, ax
 17158 000011DC D1E0                    		shl	ax, 1
 17159 000011DE D1E0                    		shl	ax, 1
 17160 000011E0 01C6                    		add	si, ax
 17161                                  
 17162                                  		; WE WANT:
 17163                                  		; CX to	be the number of times we have to loop
 17164                                  		; DX to	be the number of sectors we read on each iteration
 17165                                  		
 17166 000011E2 BA0100                  		mov	dx, 1
 17167                                  
 17168                                  		; 24/12/2023
 17169 000011E5 26F6453F08              		test	byte [es:di+3Fh], 8 ; PCDOS 7.1 IBMBIO.COM
 17170                                  		; 12/12/2022
 17171                                  		;test	byte [es:di+23h], 8
 17172                                  		;;test	word [es:di+35], 8 ; [es:di+BDS.flags]
 17173                                  					; good_tracklayout
 17174 000011EA 7402                    		jz	short ionextsector
 17175                                  		
 17176 000011EC 87D1                    		xchg	dx, cx		; HEY! We can read all secs in one blow
 17177                                  ionextsector:
 17178 000011EE 51                      		push	cx
 17179 000011EF 52                      		push	dx
 17180 000011F0 46                      		inc	si
 17181 000011F1 46                      		inc	si		; Skip over the	cylinder and head in
 17182                                  					; the track table
 17183 000011F2 AC                      		lodsb			; Get sector ID	from track table
 17184 000011F3 A2[3101]                		mov	[cursec], al
 17185                                  
 17186                                  		; assumptions for a fixed disk multi-track disk	i/o
 17187                                  		; 1). In the input CX (# of sectors to go) to TrackIo,
 17188                                  		;     only CL is valid.
 17189                                  		; 2). Sector size should be set	to 512 bytes.
 17190                                  		; 3). Good track layout
 17191                                  		
 17192                                  		; 24/12/2023
 17193 000011F6 26F6453F01              		test	byte [es:di+3Fh], 1 ; PCDOS 7.1 IBMBIO.COM
 17194                                  		; 12/12/2022
 17195                                  		;test	byte [es:di+23h], 1
 17196                                  		;;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 17197                                  					; fnon_removable ; Fixed disk?
 17198 000011FB 7414                    		jz	short IoRemovable ; No
 17199                                  
 17200                                  		; 12/12/2022
 17201 000011FD F606[A004]80            		test	byte [multrk_flag], 80h
 17202                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 17203                                  						; Allow multi-track operation?
 17204 00001202 740D                    		jz	short IoRemovable ; No,don't do that.
 17205 00001204 8916[2201]              		mov	[seccnt], dx
 17206 00001208 89D0                    		mov	ax, dx
 17207 0000120A E826FA                  		call	Disk
 17208 0000120D 5A                      		pop	dx
 17209 0000120E 59                      		pop	cx
 17210 0000120F F8                      		clc
 17211 00001210 C3                      		retn
 17212                                  ; ---------------------------------------------------------------------------
 17213                                  
 17214                                  IoRemovable:
 17215 00001211 AC                      		lodsb			; Get sector size index	from track
 17216                                  					; table	and save it
 17217 00001212 50                      		push	ax
 17218 00001213 56                      		push	si
 17219 00001214 1E                      		push	ds		; Save Bios_Data
 17220 00001215 50                      		push	ax
 17221 00001216 8A26[2C01]              		mov	ah, [eot]	; Preserve whatever might be in	ah
 17222                                  					; Fetch	EOT while ds-> Bios_Data
 17223 0000121A C536[2D01]              		lds	si, [dpt]
 17224 0000121E 884403                  		mov	[si+3],	al	; [si+DISK_PARMS.DISK_SECTOR_SIZ]
 17225 00001221 886404                  		mov	[si+4],	ah	; [si+DISK_PARMS.DISK_EOT]
 17226 00001224 58                      		pop	ax
 17227 00001225 1F                      		pop	ds
 17228 00001226 88D0                    		mov	al, dl
 17229 00001228 A3[2201]                		mov	[seccnt], ax
 17230 0000122B E805FA                  		call	Disk
 17231 0000122E 5E                      		pop	si		; Advance buffer pointer by adding
 17232                                  					; sector size
 17233                                  		;pop	ax
 17234                                  		; 24/12/2023
 17235 0000122F 59                      		pop	cx
 17236                                  
 17237                                  		; 02/09/2023 (PCDOS 7.1)
 17238                                  		;call	SectorSizeIndexToSectorSize
 17239                                  		;mov	cl, al	; 24/12/2023
 17240 00001230 B88000                  		mov	ax, 128
 17241 00001233 D3E0                    		shl	ax, cl
 17242                                  
 17243 00001235 01C3                    		add	bx, ax
 17244 00001237 5A                      		pop	dx
 17245 00001238 59                      		pop	cx
 17246 00001239 E2B3                    		loop	ionextsector
 17247 0000123B 803E[A905]01            		cmp	byte [media_set_for_format], 1
 17248                                  		;jz	short NoNeedDone
 17249                                  		; 12/12/2022
 17250 00001240 7404                    		je	short NoNeedDone2
 17251 00001242 E87AF9                  		call	done		; set time of last access, and reset
 17252                                  					; entries in Dpt.
 17253                                  NoNeedDone:
 17254 00001245 F8                      		clc	; not necessary ('done' clears cf) ; 24/12/2023
 17255                                  NoNeedDone2:
 17256 00001246 C3                      		retn
 17257                                  
 17258                                  ; =============== S U B	R O U T	I N E =======================================
 17259                                  
 17260                                  ; ---------------------------------------------------------------------------
 17261                                  ;
 17262                                  ; The sector size in bytes needs to be converted to an index value for the ibm
 17263                                  ; rom. (0=>128,1=>256,2=>512,3=>1024). It is assumed that only these values
 17264                                  ; are permissible.
 17265                                  ;
 17266                                  ; On Input   AX contains sector size in bytes
 17267                                  ; On Output  AL Contains index
 17268                                  ; All other registers preserved
 17269                                  ;
 17270                                  ; ---------------------------------------------------------------------------
 17271                                  
 17272                                  ; 02/09/2023
 17273                                  ;SectSizeToSectIndex:
 17274                                  ;		cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 17275                                  ;					; examine upper	byte only
 17276                                  ;		ja	short OneK
 17277                                  ;		mov	al, ah		; value	in AH is the index!
 17278                                  ;		retn
 17279                                  
 17280                                  ; ---------------------------------------------------------------------------
 17281                                  ;
 17282                                  ;OneK:
 17283                                  ;		mov	al, 3
 17284                                  ;		retn
 17285                                  
 17286                                  ; =============== S U B	R O U T	I N E =======================================
 17287                                  
 17288                                  ; 02/09/2023
 17289                                  ;SectorSizeIndexToSectorSize:
 17290                                  ;		mov	cl, al
 17291                                  ;		mov	ax, 128
 17292                                  ;		shl	ax, cl
 17293                                  ;		retn
 17294                                  
 17295                                  ; =============== S U B	R O U T	I N E =======================================
 17296                                  
 17297                                  ; 16/10/2022
 17298                                  
 17299                                  ; ---------------------------------------------------------------------------
 17300                                  ;
 17301                                  ; SetDASD
 17302                                  ;
 17303                                  ; Set up the rom for formatting.
 17304                                  ; we have to tell the rom bios what type of disk is in the drive.
 17305                                  ;
 17306                                  ; On Input   - ES:di - Points to bds
 17307                                  ;
 17308                                  ; ---------------------------------------------------------------------------
 17309                                  
 17310                                  		; 24/12/2023 - Retro DOS 5.0
 17311                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:129Bh)
 17312                                  
 17313                                  		; 19/10/2022
 17314                                  SetDasd:
 17315 00001247 803E[AA05]01            		cmp	byte [had_format_error], 1 ;
 17316                                  					; See if we've previously set dasd type
 17317 0000124C 740C                    		jz	short DoSetDasd
 17318                                  		; 24/12/2023
 17319 0000124E 26F6453F80              		test	byte [es:di+3Fh], 80h
 17320                                  		; 10/12/2022
 17321                                  		;test	byte [es:di+23h], 80h
 17322                                  		;;test	word [es:di+23h], 80h ; [es:di+BDS.flags]
 17323                                  					; set_dasd_true
 17324 00001253 7446                    		jz	short DasdHasBeenSet
 17325                                  		; 24/12/2023
 17326 00001255 2680653F7F              		and	byte [es:di+3Fh], 7Fh
 17327                                  		; 10/12/2022
 17328                                  		;and	byte [es:di+23h], 7Fh
 17329                                  		;;and	word [es:di+23h], 0FF7Fh ; [es:di+BDS.flags]
 17330                                  					; ~set_dasd_true
 17331                                  DoSetDasd:
 17332 0000125A C606[AA05]00            		mov	byte [had_format_error], 0 ; Reset it
 17333 0000125F C606[3B01]50            		mov	byte [gap_patch], 50h ; Format gap for 48tpi disks
 17334 00001264 B004                    		mov	al, 4
 17335                                  		; 24/12/2023
 17336 00001266 268A653E                		mov	ah, [es:di+3Eh]
 17337                                  		; 02/09/2023
 17338                                  		;mov	ah, [es:di+22h] ; [es:di+BDS.formfactor]
 17339 0000126A 80FC02                  		cmp	ah, 2
 17340                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 17341                                  					; DEV_3INCH720KB
 17342 0000126D 7414                    		jz	short DoSet
 17343                                  		; 24/12/2023
 17344 0000126F B001                    		mov	al, 1
 17345                                  		;cmp	ah, 1
 17346 00001271 38C4                    		cmp	ah, al	; 1
 17347                                  		;cmp	byte [es:di+22h], 1 ; [es:di+BDS.formfactor]
 17348                                  					; DEV_5INCH96TPI
 17349                                  		;jz	short GotBig
 17350                                  		; 24/12/2023
 17351                                  		;mov	al, 1
 17352                                  		;jmp	short DoSet
 17353                                  		; 02/09/2023
 17354 00001273 750E                    		jnz	short DoSet
 17355                                  GotBig:
 17356                                  		;mov	al, 2		; 160/320k in a	1.2 meg	drive
 17357                                  		; 02/09/2023
 17358 00001275 40                      		inc	ax  ; mov al, 2
 17359 00001276 803E[A805]00            		cmp	byte [mediatype], 0
 17360 0000127B 7506                    		jnz	short DoSet
 17361                                  		;mov	al, 3		; 1.2meg in a 1.2meg drive
 17362                                  		; 10/12/2022
 17363                                  		;inc	al  ; al = 3
 17364                                  		; 18/12/2022
 17365 0000127D 40                      		inc	ax  ; al = 3
 17366 0000127E C606[3B01]54            		mov	byte [gap_patch], 54h
 17367                                  DoSet:
 17368 00001283 1E                      		push	ds
 17369 00001284 56                      		push	si
 17370                                  
 17371                                  		;mov	ds, [zeroseg]	; Point	to interrupt vectors
 17372                                  		; 02/09/2023
 17373 00001285 31F6                    		xor	si, si
 17374 00001287 8EDE                    		mov	ds, si	; 0
 17375                                  
 17376 00001289 C5367800                		lds	si, [DSKADR]
 17377                                  		;lds	si, [78h]	; [DSKADR]  (Int 1Eh)
 17378                                  		;;lds	si, ds:78h
 17379                                  
 17380 0000128D C644090F                		mov	byte [si+9], 0Fh ;
 17381                                  					; [si+DISK_PARMS.DISK_HEAD_STTL]
 17382 00001291 5E                      		pop	si
 17383 00001292 1F                      		pop	ds
 17384 00001293 B417                    		mov	ah, 17h
 17385 00001295 268A5504                		mov	dl, [es:di+4]
 17386 00001299 CD13                    		int	13h		; DISK - DISK -	SET TYPE (AT,XT2,XT286,CONV,PS
 17387                                  					; AL = disk type AL = 03h - high-capacity disk in high-capacity	drive
 17388                                  DasdHasBeenSet:
 17389 0000129B 268A6513                		mov	ah, [es:di+13h]	; [es:di+BDS.secpertrack]
 17390 0000129F 8826[3701]              		mov	[formt_eot], ah
 17391 000012A3 C3                      		retn
 17392                                  
 17393                                  ; =============== S U B	R O U T	I N E =======================================
 17394                                  
 17395                                  ; 16/10/2022
 17396                                  
 17397                                  ; ---------------------------------------------------------------------------
 17398                                  ;
 17399                                  ; Set Media Type for Format
 17400                                  ; Performs the int 13 with ah = 18h to see if the medium described in the
 17401                                  ; BPB area in the BDS can be handled by the rom.
 17402                                  ; On Input, ES:DI -> current BDS.
 17403                                  ; The status of the operation is returned in AL
 17404                                  ;
 17405                                  ;	- 0 - if the support is available,and the combination is valid.
 17406                                  ;	- 1 - no rom support
 17407                                  ;	- 2 - illegal combination
 17408                                  ;	- 3 - no media present (rom support exists but cannot determine now)
 17409                                  ;
 17410                                  ; Flags also may be altered. All other registers preserved.
 17411                                  ; If the call to rom returns no error,then the current Dpt is "replaced" by
 17412                                  ; the one returned by the rom. This is Done by changing the pointer in [Dpt]
 17413                                  ; to the one returned. the original pointer to the disk base table is stored
 17414                                  ; in TempDpt, until it is restored.
 17415                                  ;
 17416                                  ; ---------------------------------------------------------------------------
 17417                                  
 17418                                  		; 24/12/2023 - Retro DOS 5.0
 17419                                  
 17420                                  		; 19/10/2022
 17421                                  SetMediaForFormat:	
 17422 000012A4 51                      		push	cx
 17423 000012A5 52                      		push	dx
 17424                                  
 17425                                  		; If we have a format error, then do not change Dpt, TempDpt.
 17426                                  		; but we need to call int 13h, ah=18h again.
 17427                                  
 17428 000012A6 803E[AA05]01            		cmp	byte [had_format_error], 1
 17429 000012AB 7425                    		jz	short SkipSaveDskAdr
 17430 000012AD 30C0                    		xor	al, al		; If already done return 0
 17431 000012AF 803E[A905]01            		cmp	byte [media_set_for_format], 1
 17432 000012B4 7502                    		jnz	short DoSetMediaForFormat
 17433 000012B6 EB7D                    		jmp	SetMediaRet	; Media	already	set
 17434                                  ; ---------------------------------------------------------------------------
 17435                                  
 17436                                  DoSetMediaForFormat:
 17437 000012B8 06                      		push	es
 17438 000012B9 56                      		push	si
 17439                                  
 17440                                  		; 02/09/2023
 17441                                  		;mov	es, [zeroseg]	; Point to interrupt vectors
 17442 000012BA 31F6                    		xor	si, si ; 0
 17443 000012BC 8EC6                    		mov	es, si
 17444                                  
 17445 000012BE 26C4367800              		les	si, [es:DSKADR]
 17446                                  		;les	si, es:78h	; [es:DSKADR]
 17447                                  					; Get pointer to disk base table
 17448 000012C3 8936[2D01]              		mov	[dpt], si
 17449 000012C7 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 17450                                  
 17451                                  		; Initialize the head settle time to 0Fh. See the offsets
 17452                                  		; given in dskprm.inc.
 17453                                  
 17454 000012CB 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 17455 000012D0 5E                      		pop	si
 17456 000012D1 07                      		pop	es
 17457                                  SkipSaveDskAdr:
 17458                                  		; 24/12/2023
 17459 000012D2 268B4D41                		mov	cx, [es:di+41h]	; (PCDOS 7.1 IBMBIO.COM)
 17460                                  		;mov	cx, [es:di+25h]	; [es:di+BDS.cylinders]
 17461 000012D6 49                      		dec	cx
 17462 000012D7 80E503                  		and	ch, 3
 17463 000012DA D0CD                    		ror	ch, 1
 17464 000012DC D0CD                    		ror	ch, 1
 17465 000012DE 86E9                    		xchg	ch, cl
 17466 000012E0 260A4D13                		or	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 17467 000012E4 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 17468 000012E8 06                      		push	es
 17469 000012E9 1E                      		push	ds
 17470 000012EA 56                      		push	si
 17471 000012EB 57                      		push	di
 17472 000012EC B418                    		mov	ah, 18h
 17473 000012EE CD13                    		int	13h		; DISK - SET MEDIA TYPE	FOR FORMAT (AT model 3x9,XT2,XT286,PS)
 17474                                  					; DL = drive number, CH	= lower	8 bits of number of tracks, CL = sectors per track
 17475 000012F0 7231                    		jc	short FormaStatErr
 17476 000012F2 803E[AA05]01            		cmp	byte [had_format_error], 1
 17477 000012F7 7423                    		jz	short skip_disk_base_setting
 17478 000012F9 06                      		push	es		; Save segment returned	by the rom
 17479                                  
 17480                                  		; 02/09/2023
 17481                                  		;mov	es, [zeroseg]	; Point	to interrupt vector segment
 17482 000012FA 31F6                    		xor	si, si
 17483 000012FC 8EC6                    		mov	es, si ; 0
 17484 000012FE 06                      		push	es ; * ; 02/09/2023
 17485                                  
 17486 000012FF 26C4367800              		les	si, [es:DSKADR]
 17487                                  		;les	si, es:78h	; [es:DSKADR] (Int 1Eh)
 17488                                  					; Get current disk base	table
 17489 00001304 8936[AB05]              		mov	[tempdpt], si
 17490 00001308 8C06[AD05]              		mov	[tempdpt+2], es ; Save it
 17491                                  
 17492                                  		; 02/09/2023
 17493                                  		;;mov	es, [zeroseg]
 17494                                  		;xor	si, si ; 0
 17495                                  		;mov	es, si
 17496 0000130C 07                      		pop	es ; * ; 02/09/2023
 17497                                  
 17498                                  		;mov	es:78h,	di
 17499 0000130D 26893E7800              		mov	[es:DSKADR], di
 17500                                  		;pop	word ptr es:7Ah	; replace with one returned by rom
 17501 00001312 268F067A00              		pop	word [es:DSKADR+2]
 17502 00001317 C606[A905]01            		mov	byte [media_set_for_format], 1
 17503                                  skip_disk_base_setting:
 17504 0000131C 30C0                    		xor	al, al		; Legal	combination + rom support code
 17505                                  		;mov	ds:had_format_error, al	; Reset	the flag
 17506 0000131E A2[AA05]                		mov	[had_format_error], al
 17507 00001321 EB0E                    		jmp	short PopStatRet
 17508                                  ; ---------------------------------------------------------------------------
 17509                                  
 17510                                  FormaStatErr:
 17511                                  		; 10/12/2022
 17512 00001323 B003                    		mov	al, 3
 17513                                  
 17514 00001325 80FC0C                  		cmp	ah, 0Ch		; DSK_ILLEGAL_COMBINATION
 17515                                  					; Illegal combination =	0Ch
 17516 00001328 7406                    		jz	short FormatStatIllegalComb
 17517 0000132A 80FC80                  		cmp	ah, 80h		; DSK_TIMEOUT_ERR
 17518 0000132D 7402                    		jz	short FormatStatTimeOut
 17519                                  		; 10/12/2022
 17520                                  		;dec	al
 17521                                  		; 18/12/2022
 17522 0000132F 48                      		dec	ax
 17523                                  		; al = 2
 17524                                  		;mov	al, 1		; Function not supported.
 17525                                  		;jmp	short PopStatRet
 17526                                  ; ---------------------------------------------------------------------------
 17527                                  
 17528                                  FormatStatIllegalComb:
 17529                                  		; 10/12/2022
 17530                                  		;dec	al	; 3 -> 2 or 2 -> 1
 17531                                  		; 18/12/2022
 17532 00001330 48                      		dec	ax
 17533                                  		; al = 2
 17534                                  		;mov	al, 2		; Function supported, but
 17535                                  					; Illegal sect/trk,trk combination.
 17536                                  		; 10/12/2022
 17537                                  		;jmp	short PopStatRet
 17538                                  ; ---------------------------------------------------------------------------
 17539                                  
 17540                                  FormatStatTimeOut:
 17541                                  		; 10/12/2022
 17542                                  		; al = 3
 17543                                  		;mov	al, 3		; Function supported, but
 17544                                  					; Media	not present.
 17545                                  PopStatRet:
 17546 00001331 5F                      		pop	di
 17547 00001332 5E                      		pop	si
 17548 00001333 1F                      		pop	ds
 17549 00001334 07                      		pop	es
 17550                                  SetMediaRet:
 17551 00001335 5A                      		pop	dx
 17552 00001336 59                      		pop	cx
 17553 00001337 C3                      		retn
 17554                                  
 17555                                  ; =============== S U B	R O U T	I N E =======================================
 17556                                  
 17557                                  ; 16/10/2022
 17558                                  
 17559                                  ; ---------------------------------------------------------------------------
 17560                                  ;
 17561                                  ; RESET THE DRIVE
 17562                                  ;
 17563                                  ; we also set [Step_Drv] to -1 to force the main disk routine to use the
 17564                                  ; slow head settle time for the next operation. this is because the reset
 17565                                  ; operation moves the head to cylinder 0,so we need to do a seek the next
 17566                                  ; time around - there is a problem with 3.5" drives in that the head does
 17567                                  ; not settle down in time,even for read operations!!
 17568                                  ;
 17569                                  ; ---------------------------------------------------------------------------
 17570                                  
 17571                                  ResetDisk:
 17572 00001338 50                      		push	ax
 17573                                  
 17574                                  		; 02/09/2023
 17575 00001339 B80100                  		mov	ax, 1 ; PCDOS 7.1
 17576 0000133C 3806[A905]              		cmp	[media_set_for_format], al ; 1
 17577                                  		;cmp	byte [media_set_for_format], 1
 17578                                  					; Reset while formatting?
 17579 00001340 7503                    		jnz	short ResetDisk_cont
 17580                                  					; Then verify operation in "fmt & vrfy"
 17581                                  		;mov	byte [had_format_error], 1 ; Might have failed.
 17582 00001342 A2[AA05]                		mov	[had_format_error], al ; 1
 17583                                  ResetDisk_cont:
 17584                                  		; 02/09/2023 (ah=0)
 17585                                  		;xor	ah, ah		; So signals that we had a format error
 17586 00001345 CD13                    		int	13h		; DISK - RESET DISK SYSTEM
 17587                                  					; DL = drive (if bit 7 is set both hard	disks and floppy disks reset)
 17588 00001347 C606[7600]FF            		mov	byte [step_drv], 0FFh ; -1
 17589                                  					; Zap up the speed
 17590 0000134C 58                      		pop	ax
 17591 0000134D C3                      		retn
 17592                                  
 17593                                  ; =============== S U B	R O U T	I N E =======================================
 17594                                  
 17595                                  ; 16/10/2022
 17596                                  
 17597                                  ; ---------------------------------------------------------------------------
 17598                                  ;
 17599                                  ; This routine sets up the drive parameter table with the values needed for
 17600                                  ; format,does an int 13. values in Dpt are restored after a verify is done.
 17601                                  ;
 17602                                  ; on entry  -	ES:DI - points to bds for the drive
 17603                                  ;		Xfer_Seg:BX - points to trkbuf
 17604                                  ;		AL    - number of sectors
 17605                                  ;		AH    - int 13 function code
 17606                                  ;		CL    - sector number for verify
 17607                                  ;		DS    - Bios_Data
 17608                                  ;
 17609                                  ; ON EXIT   -	DS,DI,ES,BX remain unchanged.
 17610                                  ;		AX and flags are the results of the int 13
 17611                                  ;
 17612                                  ; ---------------------------------------------------------------------------
 17613                                  
 17614                                  		; 24/12/2023 - Retro DOS 5.0
 17615                                  
 17616                                  		; 19/10/2022
 17617                                  ToRom:
 17618 0000134E 53                      		push	bx
 17619 0000134F 56                      		push	si
 17620                                  
 17621                                  		; Compaq bug fix - check whether we are using new ROM
 17622                                  		; functionality to set up format, not merely if it exists.
 17623                                  		; This was formerly a check against [new_rom]
 17624                                  
 17625 00001350 F606[A905]01            		test	byte [media_set_for_format], 1
 17626 00001355 7534                    		jnz	short GotValidDpt
 17627 00001357 50                      		push	ax
 17628 00001358 06                      		push	es		; Save bds segment
 17629                                  		; 24/12/2023
 17630 00001359 26807D3E02              		cmp	byte [es:di+3Eh], 2
 17631                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 17632                                  					; ffSmall ; is it a 3.5" drive?
 17633                                  		; 24/12/2023
 17634                                  		;pushf	; not necessary	; (Save	the cmp	result)
 17635 0000135E 8E06[1A00]              		mov	es, [zeroseg]
 17636                                  		;les	si, es:78h	; Get pointer to disk base table
 17637 00001362 26C4367800              		les	si, [es:DSKADR]
 17638                                  		;mov	word ptr ds:dpt, si
 17639                                  		;mov	word ptr ds:dpt+2, es ;	 Save pointer to table
 17640 00001367 8936[2D01]              		mov	[dpt], si
 17641 0000136B 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 17642                                  		
 17643 0000136F A0[3701]                		mov	al, [formt_eot]
 17644 00001372 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 17645 00001376 A0[3B01]                		mov	al, [gap_patch]
 17646 00001379 26884407                		mov	[es:si+7], al	; [es:si+DISK_PARMS.DISK_FORMT_GAP]
 17647                                  					; Important for	format
 17648 0000137D 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 17649                                  					; Assume we are	doing a	seek operation
 17650                                  					; Setup	motor start correctly for 3.5" drives
 17651                                  		; 24/12/2023
 17652                                  		;popf			; Get result of	earlier	cmp
 17653 00001382 7505                    		jnz	short MotorStrtOK
 17654 00001384 26C6440A04              		mov	byte [es:si+0Ah], 4 ; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 17655                                  MotorStrtOK:
 17656 00001389 07                      		pop	es		; Restore bds segment
 17657 0000138A 58                      		pop	ax
 17658                                  GotValidDpt:
 17659 0000138B 8B16[3901]              		mov	dx, [trknum]	; Set track number
 17660 0000138F 88D5                    		mov	ch, dl		; Set low 8 bits in ch
 17661 00001391 268A5504                		mov	dl, [es:di+4]	; Set drive number
 17662 00001395 8A36[3801]              		mov	dh, [hdnum]	; Set head number
 17663 00001399 06                      		push	es		; Save bds segment
 17664 0000139A 8E06[A804]              		mov	es, [xfer_seg]
 17665 0000139E CD13                    		int	13h		; DISK -
 17666 000013A0 07                      		pop	es		; Restore bds segment
 17667 000013A1 5E                      		pop	si
 17668 000013A2 5B                      		pop	bx
 17669 000013A3 C3                      		retn
 17670                                  
 17671                                  ; ---------------------------------------------------------------------------
 17672                                  
 17673                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17674                                  ; 24/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 17675                                  
 17676                                  ; BIOSCODE:1124h (MSDOS 6.21, IO.SYS)
 17677                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1404h
 17678                                  
 17679                                  ; ==========================================================================
 17680                                  ;
 17681                                  ; get the owner of the physical drive represented by the logical drive in al.
 17682                                  ; the assumption is that we **always** keep track of the owner of a drive!!
 17683                                  ; if this is not the case, the system may hang, just following the linked list.
 17684                                  ;
 17685                                  ; ==========================================================================
 17686                                  
 17687                                  		; 24/12/2023 - Retro DOS 5.0
 17688                                  
 17689                                  		; 19/10/2022
 17690                                  ioctl_getown:
 17691 000013A4 E8FDF1                  		call	SetDrive
 17692 000013A7 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 17693                                  					; Get physical drive number
 17694 000013AB C43E[1901]              		les	di, [start_bds] ; Get start of bds chain
 17695                                  ownloop:
 17696 000013AF 26384504                		cmp	[es:di+4], al	; [es:di+BDS.drivenum]
 17697 000013B3 7507                    		jnz	short getnextBDS
 17698                                  		; 24/12/2023
 17699 000013B5 26F6453F20              		test	byte [es:di+3Fh], 20h ; (PCDOS 7.1 IBMBIO.COM)
 17700                                  		; 10/12/2022
 17701                                  		;test	byte [es:di+23h], 20h
 17702                                  		;;test	word [es:di+23h], 20h ; [es:di+BDS.flags]
 17703                                  					; fi_own_physical
 17704 000013BA 7514                    		jnz	short exitown
 17705                                  getnextBDS:
 17706 000013BC 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 17707 000013BF EBEE                    		jmp	short ownloop
 17708                                  ; ---------------------------------------------------------------------------
 17709                                  
 17710                                  ; ==========================================================================
 17711                                  ;
 17712                                  ; set the ownership of the physical drive represented by the logical drive
 17713                                  ; in al to al.
 17714                                  ;
 17715                                  ; ==========================================================================
 17716                                  
 17717                                  		; 24/12/2023 - Retro DOS 5.0
 17718                                  
 17719                                  		; 19/10/2022
 17720                                  ioctl_setown:
 17721 000013C1 E8E0F1                  		call	SetDrive
 17722 000013C4 C606[7A00]01            		mov	byte [fsetowner], 1
 17723                                  					; set flag for CheckSingle to look at.
 17724 000013C9 E8ABF5                  		call	checksingle
 17725                                  		; 02/09/2023
 17726 000013CC FE0E[7A00]              		dec	byte [fsetowner] ; 0
 17727                                  		;mov	byte [fsetowner], 0
 17728                                  					; set ownership	of drive reset flag
 17729                                  		; Fall into ExitOwn
 17730                                  
 17731                                  ; ==========================================================================
 17732                                  ;
 17733                                  ; if there is only one logical drive assigned to this physical drive, return
 17734                                  ; 0 to user to indicate this. Enter with ES:di -> the owner's bds.
 17735                                  ;
 17736                                  ; ==========================================================================
 17737                                  
 17738                                  		; 24/12/2023 - Retro DOS 5.0
 17739                                  exitown:
 17740 000013D0 30C9                    		xor	cl, cl
 17741                                  		; 24/12/2023
 17742 000013D2 26F6453F10              		test	byte [es:di+3Fh], 10h ; (PCDOS 7.1 IBMBIO.COM)
 17743                                  		; 12/12/2022
 17744                                  		;test	byte [es:di+23h], 10h
 17745                                  		;;test	word [es:di+23h], 10h ; [es:di+BDS.flags]
 17746                                  					; fi_am_mult
 17747 000013D7 7406                    		jz	short exitnomult
 17748 000013D9 268A4D05                		mov	cl, [es:di+5]	; [es:di+BDS.drivelet]
 17749                                  					; Get logical drive number
 17750                                  					; Get it 1-based
 17751 000013DD FEC1                    		inc	cl
 17752                                  exitnomult:
 17753 000013DF C51E[1200]              		lds	bx, [ptrsav]
 17754 000013E3 884F01                  		mov	[bx+1],	cl	; [bx+unit]
 17755                                  					; Exit normal termination
 17756                                  		; 12/12/2022
 17757                                  		; cf=0
 17758                                  		;clc
 17759 000013E6 C3                      		retn
 17760                                  
 17761                                  ; =============== S U B	R O U T	I N E =======================================
 17762                                  
 17763                                  ; 16/10/2022
 17764                                  
 17765                                  ; ---------------------------------------------------------------------------
 17766                                  ;
 17767                                  ; moves the old Dpt that had been saved in TempDpt back to Dpt. this is done
 17768                                  ; only if the first byte of TempDpt is not -1.
 17769                                  ; all registers (including flags) are preserved.
 17770                                  ;
 17771                                  ; ---------------------------------------------------------------------------
 17772                                  
 17773                                  		; 24/12/2023
 17774                                  		; 19/10/2022
 17775                                  RestoreOldDpt:
 17776                                  		; if we have already restored the disk base table earlier,
 17777                                  		; do not do it again.
 17778                                  
 17779 000013E7 50                      		push	ax
 17780 000013E8 30C0                    		xor	al, al
 17781 000013EA A2[AA05]                		mov	[had_format_error], al	; Reset flag and 
 17782 000013ED 8606[A905]              		xchg	al, [media_set_for_format] ; get current flag setting
 17783 000013F1 08C0                    		or	al, al
 17784 000013F3 7418                    		jz	short DontRestore
 17785 000013F5 56                      		push	si
 17786 000013F6 1E                      		push	ds
 17787 000013F7 06                      		push	es
 17788 000013F8 C536[AB05]              		lds	si, [tempdpt]
 17789                                  
 17790                                  		; 17/10/2022
 17791                                  		;mov	es, [cs:BIOSDATAWORD]
 17792                                  		;;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 17793                                  		;mov	es, [es:zeroseg]
 17794                                  		;;mov	es, es:zeroseg	; CAS -- bleeeech!
 17795                                  
 17796                                  		; 24/12/2023
 17797 000013FC 31C0                    		xor	ax, ax
 17798 000013FE 8EC0                    		mov	es, ax ; 0
 17799                                  
 17800                                  		;mov	es:78h,	si	; [es:DSKADR]  (Int 1Eh)
 17801 00001400 2689367800              		mov	[es:DSKADR], si
 17802                                  		;mov	word ptr es:7Ah, ds ; [es:DSKADR+2]
 17803 00001405 268C1E7A00              		mov	[es:DSKADR+2], ds
 17804 0000140A 07                      		pop	es
 17805 0000140B 1F                      		pop	ds
 17806 0000140C 5E                      		pop	si
 17807                                  DontRestore:
 17808 0000140D 58                      		pop	ax
 17809                                  		; 12/12/2022
 17810                                  		; cf=0
 17811                                  		;clc			;  Clear carry
 17812 0000140E C3                      		retn
 17813                                  
 17814                                  ; ---------------------------------------------------------------------------
 17815                                  
 17816                                  ; 16/10/2022
 17817                                  
 17818                                  ; ==========================================================================
 17819                                  ;	get media id
 17820                                  ; ==========================================================================
 17821                                  ;
 17822                                  ; FUNCTION: get the volume label,the system id and the serial number from
 17823                                  ;	    the media that has the extended boot record.
 17824                                  ;	    for the conventional media,this routine will return "unknown
 17825                                  ;	    media type" error to dos.
 17826                                  ;
 17827                                  ; INPUT :   ES:di -> bds table for this drive.
 17828                                  ;
 17829                                  ; OUTPUT:   the request packet filled with the information,if not carry.
 17830                                  ;	    if carry set,then al contains the device driver error number
 17831                                  ;	    that will be returned to dos.
 17832                                  ;	    register DS,DX,AX,CX,DI,SI destroyed.
 17833                                  ;
 17834                                  ; SUBROUTINES TO BE CALLED:
 17835                                  ;	BootIo:NEAR
 17836                                  ;
 17837                                  ; LOGIC:
 17838                                  ;	to recognize the extended boot record,this logic will actually
 17839                                  ;	access the boot sector even if it is a hard disk.
 17840                                  ;	note:the valid extended bpb is recognized by looking at the mediabyte
 17841                                  ;	field of bpb and the extended boot signature.
 17842                                  ;
 17843                                  ; {
 17844                                  ;	get logical drive number from bds table;
 17845                                  ;	rFlag = read operation;
 17846                                  ;	BootIo;		 /*get the media boot record into the buffer
 17847                                  ;	if (no error) then
 17848                                  ;	     if (extended boot record) then
 17849                                  ;		{ set volume label,volume serial number and system id
 17850                                  ;		  of the request packet to those of the boot record;
 17851                                  ;		};
 17852                                  ;	     else		  /*not an extended bpb */
 17853                                  ;		{ set register al to "unknown media.." error code;
 17854                                  ;		  set carry bit;
 17855                                  ;		};
 17856                                  ;	else
 17857                                  ;	     ret;	/*already error code is set in the register al
 17858                                  ;
 17859                                  ; ==========================================================================
 17860                                  
 17861                                  ;size_of_EXT_BOOT_SERIAL equ 4
 17862                                  ;;size_of_EXT_BOOT_VOL_LABEL equ 11
 17863                                  ;;size_of_EXT_SYSTEM_ID equ 8
 17864                                  
 17865                                  		; 24/12/2023 - Retro DOS 5.0
 17866                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:1478h)
 17867                                  
 17868                                  		; 19/10/2022
 17869                                  GetMediaId:
 17870 0000140F E8B000                  		call	ChangeLineChk
 17871 00001412 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet] ; Logical drive number
 17872 00001416 C606[2001]02            		mov	byte [rflag], 2	; Read operation
 17873 0000141B E88C00                  		call	BootIo		; Read boot sector into	DiskSector
 17874 0000141E 722E                    		jb	short IOCtl_If1
 17875                                  					; Valid? (0F0h-0FFh?)
 17876 00001420 803E[6701]F0            		cmp	byte [disksector+15h], 0F0h
 17877                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 17878                                  		;jb	short IOCtl_If2	; brif not valid (0F0h - 0FFh)
 17879                                  		; 24/12/2023
 17880 00001425 7225                    		jb	short IOCtl_If7		
 17881                                  
 17882                                  		; 24/12/2023
 17883                                  		; 10/12/2022
 17884                                  		;mov	si, disksector+26h
 17885                                  		;;;
 17886                                  		; 24/12/2023
 17887                                  		;mov	si, disksector+43h ; BS_FAT32_VolID
 17888 00001427 BE[9401]                		mov	si, disksector+42h ; BS_FAT32_BootSig ; 24/12/2023
 17889 0000142A 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB.FATSz16
 17890 0000142F 7403                    		jz	short IOCtl_If3 ; FAT32 fs
 17891 00001431 83EE1C                  		sub	si, 1Ch         ; FAT (12-16) fs ; 43h-1Ch = 27h ; BS_VolID
 17892                                  		; si = disksector+26h = BS_BootSig ; 24/12/2023
 17893                                  IOCtl_If3:
 17894                                  		;cmp	byte [si-1], 29h ; BS_BootSig or BS_FAT32_BootSig
 17895                                  		;;;
 17896 00001434 803C29                  		cmp	byte [si], 29h
 17897                                  		;cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 17898                                  					; EXT_BOOT_SIGNATURE
 17899 00001437 7512                    		jne	short IOCtl_If2	; not extended boot record
 17900 00001439 C43E[1200]              		les	di, [ptrsav]	; es:di	points to request header
 17901 0000143D 26C47F13                		les	di, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 17902                                  		; 10/12/2022
 17903                                  		;mov	si, disksector+27h ; disksector+EXT_BOOT.SERIAL
 17904 00001441 46                      		inc	si
 17905                                  		; 24/12/2023
 17906                                  		; si = disksector+27h (BS_VolID)
 17907                                  		;      or disksector+43h (BS_FAT32_VolID)
 17908                                  
 17909 00001442 83C702                  		add	di, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 17910                                  IOCtl_If4:		; 24/12/2023
 17911 00001445 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 17912                                  					; L+size_of_EXT_BOOT_VOL_LABEL
 17913                                  					; +size_of_EXT_SYSTEM_ID
 17914 00001448 F3A4                    		rep movsb		; Move from Bios_Data into request packet
 17915                                  	
 17916                                  		; 10/12/2022
 17917                                  		; cf = 0
 17918                                  		;clc
 17919                                  
 17920 0000144A C3                      		retn
 17921                                  ; ---------------------------------------------------------------------------
 17922                                  
 17923                                  		; 24/12/2023
 17924                                  IOCtl_If2:
 17925 0000144B F9                      		stc	
 17926                                  IOCtl_If7:
 17927 0000144C B007                    		mov	al, 7		; error_unknown_media
 17928                                  		;stc
 17929                                  IOCtl_If6:
 17930                                  IOCtl_If1:
 17931 0000144E C3                      		retn
 17932                                  ; ---------------------------------------------------------------------------
 17933                                  
 17934                                  ; 16/10/2022
 17935                                  
 17936                                  ; ==========================================================================
 17937                                  ;  set media id
 17938                                  ; ==========================================================================
 17939                                  
 17940                                  ; function: set the volume label, the system id and the serial number of
 17941                                  ;	    the media that has the extended boot record.
 17942                                  ;	    for the conventional media, this routine will return "unknown
 17943                                  ;	    media.." error to dos.
 17944                                  ;	    this routine will also set the corresponding informations in
 17945                                  ;	    the bds table.
 17946                                  ;
 17947                                  ; input :   ES:di -> bds table for this drive.
 17948                                  ;
 17949                                  ; output:   the extended boot record in the media will be set according to
 17950                                  ;	    the request packet.
 17951                                  ;	    if carry set, then al contains the device driver error number
 17952                                  ;	    that will be returned to dos.
 17953                                  ;
 17954                                  ; subroutines to be called:
 17955                                  ;	BootIo:NEAR
 17956                                  ;
 17957                                  ; logic:
 17958                                  ;
 17959                                  ; {
 17960                                  ;	get drive_number from bds;
 17961                                  ;	rFlag = "read operation";
 17962                                  ;	BootIo;
 17963                                  ;	if (no error) then
 17964                                  ;	     if (extended boot record) then
 17965                                  ;		{ set volume label,volume serial number and system id
 17966                                  ;		  of the boot record to those of the request packet;
 17967                                  ;		  rFlag = "write operation";
 17968                                  ;		  get drive number from bds;
 17969                                  ;		  BootIo;	  /*write it back*/
 17970                                  ;		};
 17971                                  ;	     else		  /*not an extended bpb */
 17972                                  ;		{ set register al to "unknown media.." error code;
 17973                                  ;		  set carry bit;
 17974                                  ;		  ret;	 /*return back to caller */
 17975                                  ;		};
 17976                                  ;	else
 17977                                  ;	     ret;		 /*already error code is set */
 17978                                  ;
 17979                                  ; ==========================================================================
 17980                                  
 17981                                  		; 24/12/2023 - Retro DOS 5.0
 17982                                  
 17983                                  		; 19/10/2022
 17984                                  SetMediaId:
 17985 0000144F E87000                  		call	ChangeLineChk
 17986 00001452 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet]
 17987                                  					; Logical drive	number
 17988 00001456 88C2                    		mov	dl, al
 17989 00001458 C606[2001]02            		mov	byte [rflag], 2	; romread
 17990 0000145D 52                      		push	dx
 17991 0000145E E84900                  		call	BootIo		; Read boot sec	to Bios_Data:DiskSector
 17992 00001461 5A                      		pop	dx
 17993 00001462 72EA                    		jb	short IOCtl_If6
 17994                                  					; Valid? (0F0h-0FFh?)
 17995 00001464 803E[6701]F0            		cmp	byte [disksector+15h], 0F0h
 17996                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 17997 00001469 72E1                    		jb	short IOCtl_If7	; Brif not
 17998                                  
 17999                                  		; 24/12/2023
 18000                                  		;cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 18001                                  		;			; EXT_BOOT_SIGNATURE
 18002                                  		;jnz	short IOCtl_If7	; not extended boot record
 18003                                  		
 18004 0000146B 06                      		push	es		; Save BDS pointer
 18005 0000146C 57                      		push	di
 18006 0000146D 1E                      		push	ds		; Point	ES To boot record
 18007 0000146E 07                      		pop	es
 18008                                  
 18009                                  		; 24/12/2023
 18010                                  		;;;
 18011                                  		;mov	di, disksector+43h ; disksector+EXT_BOOT.SERIAL
 18012 0000146F BF[9401]                		mov	di, disksector+42h ; BS_FAT32_BootSig ; 24/12/2023 
 18013 00001472 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB.FATSz16
 18014 00001477 7403                    		jz      short IOCtl_If5	; FAT32 fs
 18015 00001479 83EF1C                  		sub	di, 1Ch		; 67-28 ; offset disksektor+27h
 18016                                  		; di = disksector+26h = BS_BootSig ; 24/12/2023
 18017                                  IOCtl_If5:
 18018                                  		;cmp	byte [di-1], 29h ; BS_BootSig or BS_FAT32_BootSig
 18019 0000147C 803D29                  		cmp	byte [di], 29h
 18020 0000147F 7404                    		je	short IOCtl_If8
 18021 00001481 5F                      		pop	di		; not extended boot record
 18022 00001482 07                      		pop	es
 18023                                  		;jmp	short IOCtl_If7
 18024                                  		; 24/12/2023
 18025 00001483 EBC6                    		jmp	short IOCtl_If2
 18026                                  IOCtl_If8:
 18027                                  		;;;
 18028                                  		; 24/12/2023
 18029                                  		;mov	di, disksector+27h ; disksector+EXT_BOOT.SERIAL
 18030 00001485 47                      		inc	di
 18031                                  		; di = disksector+27h (BS_VolID)
 18032                                  		;      or disksector+43h (BS_FAT32_VolID)
 18033                                  
 18034 00001486 C536[1200]              		lds	si, [ptrsav]	; ds:si	points to request header.
 18035 0000148A C57413                  		lds	si, [si+19]	; [si+IOCTL_REQ.GENERICIOCTL_PACKET]
 18036 0000148D 83C602                  		add	si, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 18037                                  		
 18038                                  		; 24/12/2023
 18039                                  		;mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 18040                                  		;			; +size_of_EXT_BOOT_VOL_LABEL
 18041                                  		;			; +size_of_EXT_SYSTEM_ID
 18042                                  		;rep movsb
 18043 00001490 E8B2FF                  		call	IOCtl_If4       ; copy volume serial, label and system id
 18044                                  
 18045 00001493 06                      		push	es		; point	ds back	to Bios_Data
 18046 00001494 1F                      		pop	ds
 18047 00001495 5F                      		pop	di		; restore bds pointer
 18048 00001496 07                      		pop	es
 18049 00001497 E8B5F3                  		call	mov_media_ids	; update the bds media id info.
 18050 0000149A 88D0                    		mov	al, dl
 18051 0000149C C606[2001]03            		mov	byte [rflag], 3	; romwrite
 18052 000014A1 E80600                  		call	BootIo		; write	it back.
 18053 000014A4 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 18054                                  					; make sure chk_media check the driver
 18055                                  					; return with error code from BootIo
 18056 000014A9 C3                      		retn
 18057                                  ; ---------------------------------------------------------------------------
 18058                                  
 18059                                  		; 24/12/2023
 18060                                  ;IOCtl_If7:
 18061                                  ;		mov	al, 7		; error_unknown_media
 18062                                  ;		stc
 18063                                  ;IOCtl_If6:
 18064                                  ;		retn
 18065                                  
 18066                                  ; =============== S U B	R O U T	I N E =======================================
 18067                                  
 18068                                  ; 16/10/2022
 18069                                  
 18070                                  ; ---------------------------------------------------------------------------
 18071                                  ;	BootIo
 18072                                  ; ---------------------------------------------------------------------------
 18073                                  ;
 18074                                  ; function: read/write the boot record into boot sector.
 18075                                  ;
 18076                                  ; input :
 18077                                  ;	    al=logical drive number
 18078                                  ;	    rFlag = operation (read/write)
 18079                                  ;
 18080                                  ; output:   for read operation,the boot record of the drive specified in bds
 18081                                  ;	    be read into the DiskSector buffer.
 18082                                  ;	    for write operation,the DiskSector buffer image will be written
 18083                                  ;	    to the drive specified in bds.
 18084                                  ;	    if carry set,then al contains the device driver error number
 18085                                  ;	    that will be returned to dos.
 18086                                  ;	    AX,CX,DX register destroyed.
 18087                                  ;	    if carry set,then al will contain the error code from DiskIO.
 18088                                  ;
 18089                                  ; subroutines to be called:
 18090                                  ;	DiskIO:NEAR
 18091                                  ;
 18092                                  ; logic:
 18093                                  ;
 18094                                  ; {
 18095                                  ;	first_sector = 0;	 /*logical sector 0 is the boot sector */
 18096                                  ;	sectorcount = 1;	 /*read 1 sector only */
 18097                                  ;	buffer = DiskSector;	 /*read it into the DiskSector buffer */
 18098                                  ;	call DiskIO (rFlag,drive_number,first_sector,sectorcount,buffer);
 18099                                  ; }
 18100                                  ; ==========================================================================
 18101                                  
 18102                                  		; 19/10/2022
 18103                                  BootIo:	
 18104 000014AA 06                      		push	es
 18105 000014AB 57                      		push	di
 18106 000014AC 53                      		push	bx
 18107 000014AD 1E                      		push	ds
 18108 000014AE 07                      		pop	es		; Point ES: to Bios_Data
 18109                                  
 18110                                  		; Call DiskIO to read/write the boot sec. The parameters which
 18111                                  		; need to be initialized for this subroutine out here are
 18112                                  		; - Transfer address to Bios_Data:DiskSector
 18113                                  		; - Low sector needs to be initalized to 0. this is a reg. param
 18114                                  		; - Hi sector in [Start_Sec_H] needs to be initialised to 0.
 18115                                  		; - Number of sectors <-- 1
 18116                                  
 18117 000014AF BF[5201]                		mov	di, disksector	; es:di -> transfer address
 18118 000014B2 31D2                    		xor	dx, dx		; First	sector (h) -> 0
 18119 000014B4 8916[9C04]              		mov	[start_sec_h], dx ; Start sector (h) -> 0
 18120 000014B8 B90100                  		mov	cx, 1
 18121 000014BB E853F5                  		call	diskio
 18122 000014BE 5B                      		pop	bx
 18123 000014BF 5F                      		pop	di
 18124 000014C0 07                      		pop	es
 18125 000014C1 C3                      		retn
 18126                                  
 18127                                  ; =============== S U B	R O U T	I N E =======================================
 18128                                  
 18129                                  ; 16/10/2022
 18130                                  
 18131                                  ; ---------------------------------------------------------------------------
 18132                                  ;	ChangeLineChk
 18133                                  ; ---------------------------------------------------------------------------
 18134                                  ;
 18135                                  ; when the user calls get/set media id call before dos establishes the media
 18136                                  ; by calling "media_chk",the change line activity of the drive is going to be
 18137                                  ; lost.	this routine will check the change line activity and will save the
 18138                                  ; history in the flags.
 18139                                  ;
 18140                                  ; FUNCTION: check the change line error activity
 18141                                  ;
 18142                                  ; INPUT :  ES:di -> bds table.
 18143                                  ;
 18144                                  ; OUTPUT:   flag in bds table will be updated if change line occurs.
 18145                                  ;
 18146                                  ; SUBROUTINES TO BE CALLED:
 18147                                  ;	Set_Changed_DL
 18148                                  ;
 18149                                  ; ---------------------------------------------------------------------------
 18150                                  
 18151                                  		; 24/12/2023 - Retro DOS 5.0
 18152                                  ChangeLineChk:	
 18153 000014C2 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 18154 000014C6 08D2                    		or	dl, dl		; Fixed	disk?
 18155 000014C8 7821                    		js	short ChangeLnChkRet ; Yes, skip it.
 18156                                  		; 24/12/2023
 18157 000014CA 26F6453F04              		test	byte [es:di+3Fh], 4 ; [es:di+BDS.flags] ; PCDOS 7.1
 18158                                  		; 12/12/2022
 18159                                  		;test	byte [es:di+23h], 4
 18160                                  		;;test	word [es:di+23h], 4 ; [es:di+BDS.flags]
 18161                                  					; return_fake_bpb
 18162 000014CF 751A                    		jnz	short ChangeLnChkRet
 18163 000014D1 803E[7700]01            		cmp	byte [fhave96], 1   ; This rom support change line?
 18164 000014D6 7513                    		jnz	short ChangeLnChkRet
 18165 000014D8 E8B207                  		call	haschange	; This drive support change line?
 18166 000014DB 740E                    		jz	short ChangeLnChkRet ; Do nothing
 18167                                  
 18168                                  		; Execute the rom disk interrupt to check changeline activity.
 18169                                  
 18170 000014DD B416                    		mov	ah, 16h
 18171 000014DF CD13                    		int	13h	; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 18172                                  				; DL = drive to	check
 18173                                  				; Return: AH = disk change status
 18174 000014E1 7308                    		jnb	short ChangeLnChkRet
 18175 000014E3 53                      		push	bx
 18176 000014E4 BB4000                  		mov	bx, 40h		; fchanged
 18177                                  					; Update flag in BDS for this
 18178                                  					; physical drive
 18179 000014E7 E87C07                  		call	set_changed_dl
 18180 000014EA 5B                      		pop	bx
 18181                                  ChangeLnChkRet:				
 18182 000014EB C3                      		retn
 18183                                  
 18184                                  ; ---------------------------------------------------------------------------
 18185                                  
 18186                                  ; 16/10/2022
 18187                                  
 18188                                  ; ==========================================================================
 18189                                  ;	GetAccessFlag
 18190                                  ; ==========================================================================
 18191                                  ;
 18192                                  ; FUNCTION: get the status of UNFORMATTED_MEDIA bit of flags in bds table
 18193                                  ;
 18194                                  ; INPUT :
 18195                                  ;	    ES:di -> bds table
 18196                                  ;
 18197                                  ; OUTPUT:   a_DiskAccess_Control.dac_access_flag = 0 if disk i/o not allowed.
 18198                                  ;						 = 1 if disk i/o allowed.
 18199                                  ; ==========================================================================
 18200                                  
 18201                                  		; 24/12/2023 - Retro DOS 5.0
 18202                                  
 18203                                  		; 19/10/2022
 18204                                  GetAccessFlag:				
 18205 000014EC C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 18206 000014F0 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 18207                                  		;mov	al, 0		; Assume result	is unformatted
 18208                                  		; 10/12/2022
 18209 000014F3 28C0                    		sub	al, al
 18210                                  		; 24/12/2023
 18211 000014F5 26F6454002              		test	byte [es:di+40h], 02h ; (PCDOS 7.1 IBMBIO.COM)
 18212                                  		;test	word ptr es:[di+3Fh], 200h
 18213                                  		; 10/12/2022
 18214                                  		;test	byte [es:di+36], 02h
 18215                                  		;;test	word [es:di+35], 200h ; [es:di+BDS.flags]
 18216                                  					; unformatted_media
 18217 000014FA 7501                    		jnz	short GafDone	; Done if unformatted
 18218                                  		;inc	al		; Return true for formatted
 18219                                  		; 24/12/2023
 18220 000014FC 40                      		inc	ax
 18221                                  GafDone:				
 18222 000014FD 884701                  		mov	[bx+1],	al	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 18223 00001500 C3                      		retn
 18224                                  ; ---------------------------------------------------------------------------
 18225                                  
 18226                                  ; 16/10/2022
 18227                                  
 18228                                  ; ==========================================================================
 18229                                  ;	SetAccessFlag
 18230                                  ; ==========================================================================
 18231                                  ;
 18232                                  ; function: set/reset the UNFORMATTED_MEDIA bit of flags in bds table
 18233                                  ;
 18234                                  ; input :
 18235                                  ;	    ES:di -> bds table
 18236                                  ;
 18237                                  ; output:   unformtted_media bit modified according to the user request
 18238                                  ; ==========================================================================
 18239                                  
 18240                                  		; 24/12/2023 - Retro DOS 5.0
 18241                                  
 18242                                  		; 19/10/2022
 18243                                  SetAccessFlag:				
 18244 00001501 C51E[1200]              		lds	bx, [ptrsav]	; ES:BX	points to request header
 18245 00001505 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 18246                                  		; 24/12/2023
 18247 00001508 26806540FD              		and	byte [es:di+40h], 0FDh ; (PCDOS 7.1 IBMBIO.COM)
 18248                                  		;and	word ptr es:[di+3Fh], 0FDFFh
 18249                                  		; 10/12/2022
 18250                                  		;and	byte [es:di+36], 0FDh
 18251                                  		;;and	word [es:di+35], 0FDFFh ; [es:di+BDS.flags]
 18252                                  					; ~unformatted_media
 18253 0000150D 807F0100                		cmp	byte [bx+1], 0	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 18254 00001511 750A                    		jnz	short saf_Done
 18255                                  		; 24/12/2023
 18256 00001513 26804D4002              		or	byte [es:di+40h], 02h ; (PCDOS 7.1 IBMBIO.COM)
 18257                                  		;or	word ptr es:[di+3Fh], 200h
 18258                                  		; 10/12/2022
 18259 00001518 26804D2402              		or	byte [es:di+36], 02h
 18260                                  		;or	word [es:di+35], 200h ; [es:di+BDS.flags]
 18261                                  					; unformatted_media
 18262                                  saf_Done:				
 18263 0000151D C3                      		retn
 18264                                  ; ---------------------------------------------------------------------------
 18265                                  
 18266                                  ; 16/10/2022
 18267                                  
 18268                                  ; ==========================================================================
 18269                                  ; Ioctl_Support_Query
 18270                                  ; ==========================================================================
 18271                                  ;
 18272                                  ; New device command which was added in DOS 5.00 to allow a query of a 
 18273                                  ; specific GENERIC IOCtl to see if it is supported. Bit 7 in the
 18274                                  ; device attributes specifies if this function is supported.
 18275                                  ;
 18276                                  ; ==========================================================================
 18277                                  
 18278                                  		; 24/12/2023 - Retro DOS 5.0
 18279                                  
 18280                                  		; 19/10/2022
 18281                                  ioctl_support_query:
 18282 0000151E 06                      		push	es
 18283 0000151F C41E[1200]              		les	bx, [ptrsav]	; ES:BX Points to request header.
 18284 00001523 268B470D                		mov	ax, [es:bx+13]	; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 18285                                  					; AL ==	Major, AH == Minor
 18286                                  		; 24/12/2023
 18287                                  		; 02/09/2023 (PCDOS 7.1)
 18288 00001527 3C48                    		cmp	al, 48h		; IOC_NEW_DC (PCDOS 7.1)
 18289                                  					; new generic ioctl function (FAT32)
 18290 00001529 7404                    		je	short ioctl_support
 18291                                  
 18292 0000152B 3C08                    		cmp	al, 8		; IOC_DC
 18293                                  					; See if major code is 8
 18294 0000152D 7513                    		jne	short nosupport
 18295                                  ioctl_support:
 18296 0000152F 0E                      		push	cs
 18297 00001530 07                      		pop	es
 18298                                  		; 24/12/2023
 18299                                  		; 02/09/2023
 18300 00001531 B90E00                  		mov	cx, 14          ; (PCDOS 7.1) IOC_DC_TABLE_LEN
 18301                                  		;mov	cx, 11		; IOC_DC_TABLE_LEN
 18302                                  		; 10/12/2022
 18303 00001534 BF[BA0E]                		mov	di, IOC_DC_Table
 18304                                  		;mov	di, 0C60h	; IOC_DC_Table
 18305                                  					; at 2C7h:0C60h	= 70h:31D0h
 18306 00001537 86C4                    		xchg	al, ah		; Put minor code in AL
 18307 00001539 F2AE                    		repne scasb		; Scan for minor code in AL
 18308 0000153B 7505                    		jnz	short nosupport	; it was not found
 18309 0000153D B80001                  		mov	ax, 100h
 18310                                  		; 10/12/2022
 18311                                  		; (jump to ioctlsupexit is not required)
 18312                                  		;jmp	short $+2	; ioctlsupexit
 18313                                  					; Signal ioctl is supported
 18314                                  		;;jmp	short ioctlsupexit
 18315                                  ; ---------------------------------------------------------------------------
 18316                                  ioctlsupexit:
 18317 00001540 07                      		pop	es
 18318                                  		; 10/12/2022
 18319                                  		; cf = 0
 18320                                  		;clc
 18321 00001541 C3                      		retn
 18322                                  ; ---------------------------------------------------------------------------
 18323                                  nosupport:
 18324 00001542 07                      		pop	es
 18325 00001543 E98FEB                  		jmp	bc_cmderr
 18326                                  ; ---------------------------------------------------------------------------
 18327                                  
 18328                                  ; 16/10/2022
 18329                                  
 18330                                  ; ==========================================================================
 18331                                  ;	GetMediaSenseStatus
 18332                                  ; ==========================================================================
 18333                                  ;
 18334                                  ; FUNCTION: Will return the type of diskette media in the specified DOS
 18335                                  ;	    diskette drive and whether the media is the default type
 18336                                  ;	    for that drive. (default type means the max size for that
 18337                                  ;	    drive)
 18338                                  ;
 18339                                  ; INPUT :   ES:DI -> BDS table
 18340                                  ; OUTPUT:   If carry clear
 18341                                  ;	    DS:BX -> Updated IOCtlPacket
 18342                                  ;
 18343                                  ;			 Special Function at offset 0:
 18344                                  ;				0	- Media detected is not default type
 18345                                  ;				1	- Media detected is default type
 18346                                  ;
 18347                                  ;			 Device Type at offset 1:
 18348                                  ;				2       - 720K 3.5" 80 tracks
 18349                                  ;				7	- 1.44M 3.5" 80 tracks
 18350                                  ;				9	- 2.88M 3.5" 80 tracks
 18351                                  ;
 18352                                  ; Error Codes returned in AX if carry set:
 18353                                  ;
 18354                                  ; 8102 - Drive not ready	- No disk is in the drive.
 18355                                  ; 8107 - Unknown media type	- Drive doesn't support this function or
 18356                                  ;				  the media is really unkown, any error
 18357                                  ;				  other than "media not present"
 18358                                  ; 
 18359                                  ; ==========================================================================
 18360                                  
 18361                                  		; 19/10/2022
 18362                                  SenseMediaType:
 18363 00001546 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header.
 18364 0000154A C55F13                  		lds	bx, [bx+19]	; bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 18365                                  		; 10/10/2022
 18366                                  		;mov	word [bx], 0	; Initialize the 2 packet bytes
 18367 0000154D 31D2                    		xor	dx, dx
 18368 0000154F 8917                    		mov	[bx], dx ; 0
 18369                                  		;
 18370 00001551 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 18371                                  					; Get int 13h drive number from	BDS
 18372                                  		; 10/12/2022
 18373                                  		;xor	dh, dh		; DX = physical	drive number
 18374 00001555 B420                    		mov	ah, 20h		; Get Media Type function
 18375                                  					; If no	carry media type in AL
 18376 00001557 CD13                    		int	13h		; DISK - QCACHE	- DISMOUNT
 18377 00001559 7216                    		jc	short MediaSenseEr ; error code	in AH
 18378 0000155B FE07                    		inc	byte [bx]	; Signal media type is default (bit 1)
 18379                                  DetermineMediaType:
 18380 0000155D FEC8                    		dec	al
 18381 0000155F 3C02                    		cmp	al, 2		; Chk for 720K ie: (3-1) = 2
 18382 00001561 740A                    		jz	short GotMediaType
 18383 00001563 0404                    		add	al, 4
 18384 00001565 3C07                    		cmp	al, 7		; Chk for 1.44M ie: (4-1+4) = 7
 18385 00001567 7404                    		jz	short GotMediaType
 18386 00001569 3C09                    		cmp	al, 9		; Chk for 2.88M	ie: (6-1+4) = 9
 18387 0000156B 7510                    		jnz	short UnknownMediaType ; Just didn't recognize media type
 18388                                  GotMediaType:
 18389 0000156D 884701                  		mov	[bx+1],	al	; Save the return value
 18390                                  		; 10/12/2022
 18391                                  		; cf = 0
 18392                                  		;clc			; Signal success
 18393 00001570 C3                      		retn
 18394                                  ; ---------------------------------------------------------------------------
 18395                                  
 18396                                  MediaSenseEr:
 18397 00001571 80FC32                  		cmp	ah, 32h		; See if not default media error
 18398 00001574 74E7                    		jz	short DetermineMediaType ; Not really an error
 18399 00001576 B002                    		mov	al, 2		; Now assume drive not ready
 18400 00001578 80FC31                  		cmp	ah, 31h		; See if media was present
 18401 0000157B 7402                    		jz	short SenseErrExit ; Return drive not ready
 18402                                  UnknownMediaType:
 18403 0000157D B007                    		mov	al, 7		; Just don't know the media type
 18404                                  SenseErrExit:
 18405 0000157F B481                    		mov	ah, 81h		; Signal error return
 18406 00001581 F9                      		stc
 18407 00001582 C3                      		retn
 18408                                  
 18409                                  ; ----------------------------------------------------------------------------
 18410                                  		; 10/12/2022
 18411                                  		;db    0
 18412                                  ; ----------------------------------------------------------------------------
 18413                                  
 18414                                  ;-----------------------------------------------------------------------------
 18415                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:15F2h
 18416                                  ;-----------------------------------------------------------------------------
 18417                                  ; 26/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 18418                                  
 18419                                  ; =============== S U B R O U T I N E =======================================
 18420                                  
 18421                                  SetLockState:
 18422 00001583 C51E[1200]              		lds	bx, [ptrsav]	; set media lock state
 18423 00001587 C55F13                  		lds	bx, [bx+13h]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 18424                                  		;mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 18425                                  		;call	check_int13h_exts_present
 18426                                  		; 26/12/2023
 18427 0000158A E82100                  		call	check_int13h_exts_p
 18428                                  		;mov	al, 3		; unknown command error
 18429 0000158D 721C                    		jc	short setlockst_ret
 18430 0000158F 8A07                    		mov	al, [bx]	; [bx+A_LOCKSTATE_CONTROL.LOCKSTATE_FUNCTIONS]
 18431 00001591 B445                    		mov	ah, 45h
 18432 00001593 CD13                    		int	13h		; DISK - IBM/MS Extension - LOCK/UNLOCK DRIVE
 18433                                  		; (DL - drive, [SI - disk address packet)
 18434 00001595 884701                  		mov	[bx+1], al	; 1 = locked, 0 = not locked
 18435                                  		; [bx+A_LOCKSTATE_CONTROL.LOCKSTATE_FLAG]
 18436                                  		
 18437                                  		; 26/12/2023
 18438 00001598 EB0A                    		jmp	short sls_em
 18439                                  
 18440                                  ;		jnc	short setlockst_ret
 18441                                  ;		mov	al, ah
 18442                                  ;		call	maperror
 18443                                  ;setlockst_ret:
 18444                                  ;		mov	ah, 81h		; Return this status in case of carry
 18445                                  ;		retn
 18446                                  
 18447                                  ; =============== S U B R O U T I N E =======================================
 18448                                  
 18449                                  EjectMedia:
 18450                                  		;mov	dl, [es:di+4]	; eject media in drive
 18451                                  		;			; [es:di+BDS.drivenum]
 18452                                  		;call	check_int13h_exts_present
 18453                                  		; 26/12/2023
 18454 0000159A E81100                  		call	check_int13h_exts_p
 18455                                  		;mov	al, 3		; unknown command error
 18456 0000159D 720C                    		jc	short ejectm_ret
 18457 0000159F B80046                  		mov	ax, 4600h
 18458 000015A2 CD13                    		int	13h		; DISK - IBM/MS Extension - EJECT MEDIA
 18459                                  		; (DL - drive)
 18460                                  sls_em:			; 26/12/2023
 18461 000015A4 7305                    		jnc	short ejectm_ret
 18462 000015A6 88E0                    		mov	al, ah
 18463 000015A8 E8FBF7                  		call	maperror
 18464                                  setlockst_ret:		; 26/12/2023
 18465                                  ejectm_ret:
 18466 000015AB B481                    		mov	ah, 81h		; Return this status in case of carry
 18467 000015AD C3                      		retn
 18468                                  
 18469                                  ; =============== S U B R O U T I N E =======================================
 18470                                  
 18471                                  		; 26/12/2023
 18472                                  check_int13h_exts_p:
 18473 000015AE 268A5504                		mov	dl, [es:di+4]
 18474                                  
 18475                                  check_int13h_exts_present:
 18476 000015B2 B441                    		mov	ah, 41h
 18477 000015B4 53                      		push	bx
 18478 000015B5 BBAA55                  		mov	bx, 55AAh
 18479 000015B8 CD13                    		int	13h		; DISK - Check for INT 13h Extensions
 18480                                  					; BX = 55AAh, DL = drive number
 18481                                  					; Return: CF set if not supported
 18482                                  					; AH = extensions version
 18483                                  					; BX = AA55h
 18484                                  					; CX = Interface support bit map
 18485 000015BA 81FB55AA                		cmp	bx, 0AA55h
 18486 000015BE 5B                      		pop	bx
 18487 000015BF 7505                    		jnz	short exts_notsupported
 18488 000015C1 F6C102                  		test	cl, 2		; bit 1 - drive locking and ejecting subset
 18489 000015C4 7503                    		jnz	short exts_supported
 18490                                  exts_notsupported:
 18491                                  		; 26/12/2023
 18492 000015C6 B003                    		mov	al, 3
 18493                                  		;
 18494 000015C8 F9                      		stc
 18495                                  exts_supported:
 18496 000015C9 C3                      		retn
 18497                                  
 18498                                  ; =============== S U B R O U T I N E =======================================
 18499                                  
 18500                                  GetDrvMapInfo:
 18501 000015CA 8CD9                    		mov	cx, ds		; get drive map information
 18502                                  					;
 18503                                  					; es:di points to BDS which belongs to
 18504                                  					;	  the requested logical/dos drive number
 18505                                  					;
 18506                                  					; Format of parameter block:
 18507                                  					; Offset  Description (Table 01570)
 18508                                  					;  00h    (call) length of this buffer (in bytes)
 18509                                  					;  01h    (ret) number of bytes in parameter block
 18510                                  					;	    actually used
 18511                                  					;  02h    (ret) drive flags
 18512                                  					;  03h    (ret) physical drive number
 18513                                  					;	    00h-7Fh floppy
 18514                                  					;	    80h-FEh hard
 18515                                  					;	    FFh no physical drive
 18516                                  					;  04h    (ret) bitmap of logical drives associated with
 18517                                  					;	    physical drive
 18518                                  					;	    bit 0 = drive A:, etc.
 18519                                  					;  08h    (ret) relative block address of partition start
 18520                                  					;	    qword
 18521                                  					;
 18522                                  					; Ref: Ralf Brown's Interrupt List, INTERRUP.G
 18523 000015CC C51E[1200]              		lds	bx, [ptrsav]
 18524 000015D0 C55F13                  		lds	bx, [bx+13h]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 18525 000015D3 B80381                  		mov	ax, 8103h	; ah = generic ioctl error code (81h)
 18526                                  					; al = unknown command error (03h)
 18527 000015D6 803F10                  		cmp	byte [bx], 10h	; parameter buffer length = 16 bytes
 18528 000015D9 7251                    		jb	short gdmi_4
 18529 000015DB 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 18530 000015DF 885703                  		mov	[bx+3], dl	; parameter block - offset 3 - physical drive number
 18531 000015E2 C6470110                		mov	byte [bx+1], 10h ; parameter block - actually used length
 18532 000015E6 268B4517                		mov	ax, [es:di+17h]	; [es:di+BDS.hiddensectors]
 18533 000015EA 894708                  		mov	[bx+8], ax	; parameter block - offset 8 - partition start LBA
 18534 000015ED 268B4519                		mov	ax, [es:di+19h]	; [es:di+BDS.hiddensectors+2]
 18535 000015F1 89470A                  		mov	[bx+0Ah], ax	; parameter block - offset 10
 18536 000015F4 31C0                    		xor	ax, ax ; 0
 18537 000015F6 884702                  		mov	[bx+2], al	; drive flags = 0 (protected mode flags etc.)
 18538 000015F9 89470C                  		mov	[bx+0Ch], ax	; high dword of partition start address (LBA) is 0
 18539 000015FC 89470E                  		mov	[bx+0Eh], ax
 18540 000015FF 894704                  		mov	[bx+4], ax	; logical drive bitmap of same physical drive
 18541                                  					; initialized as 0
 18542 00001602 894706                  		mov	[bx+6], ax ; 0
 18543 00001605 8EC1                    		mov	es, cx
 18544                                  		;les	di, dword ptr es:start_bds ; 1st BDS
 18545 00001607 26C43E[1901]            		les	di, [es:start_bds]
 18546 0000160C B90100                  		mov	cx, 1		; bit 0 (drive A:)
 18547                                  gdmi_1:
 18548 0000160F 83FFFF                  		cmp	di, 0FFFFh	; last BDS ?
 18549 00001612 7415                    		jz	short gdmi_3	; yes
 18550 00001614 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum], dl
 18551                                  					; is it same physical drive ?
 18552 00001618 7506                    		jnz	short gdmi_2	; no
 18553 0000161A 094F04                  		or	[bx+4], cx	; set bit for logical drive index of this BDS
 18554                                  					; (previously) shifted bit (which is 1/ON) is in ax:cx
 18555 0000161D 094706                  		or	[bx+6], ax
 18556                                  gdmi_2:
 18557 00001620 D1E1                    		shl	cx, 1		; shift one left for setting the next drive's bit
 18558 00001622 D1D0                    		rcl	ax, 1		; set high word of the bit select (set) value
 18559 00001624 26C43D                  		les	di, [es:di]	; next BDS
 18560 00001627 EBE6                    		jmp	short gdmi_1	; loop until di = -1 (last BDS sign)
 18561                                  gdmi_3:
 18562 00001629 B80001                  		mov	ax, 100h	; success
 18563                                  gdmi_4:
 18564 0000162C C3                      		retn
 18565                                  
 18566                                  ;-----------------------------------------------------------------------------
 18567                                  
 18568                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18569                                  ; 26/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 18570                                  
 18571                                  ;-----------------------------------------------------------------------------
 18572                                  ; MSINT13.ASM - MSDOS 6.0 - 1991
 18573                                  ;-----------------------------------------------------------------------------
 18574                                  ; 16/03/2019 - Retro DOS v4.0
 18575                                  
 18576                                  ;	int 2f function 13h allows the user to change the orig13 int_13 vector
 18577                                  ;	after booting. this allows testing and implementation of custom int_13
 18578                                  ;	handlers, without giving up ms-dos error recovery
 18579                                  ;	entry:	ds:dx	== addr. of new int_13 handler
 18580                                  ;		es:bx	== addr. of new int_13 vector used by warm boot (int19)
 18581                                  ;	exit:	orig13	== address of new int_13 handler
 18582                                  ;		ds:dx	== old orig13 value
 18583                                  ;		es:bx	== old old13  value
 18584                                  ;
 18585                                  ; int 2f handler for external block drivers to communicate with the internal
 18586                                  ; block driver in msdisk. the multiplex number chosen is 8. the handler
 18587                                  ; sets up the pointer to the request packet in [ptrsav] and then jumps to
 18588                                  ; dsk_entry, the entry point for all disk requests.
 18589                                  ;
 18590                                  ; on exit from this driver, we will return to the external driver
 18591                                  ; that issued this int 2f, and can then remove the flags from the stack.
 18592                                  ; this scheme allows us to have a small external device driver, and makes
 18593                                  ; the maintainance of the various drivers (driver and msbio) much easier,
 18594                                  ; since we only need to make changes in one place (most of the time).
 18595                                  ;
 18596                                  ;   ax=800h - check for installed handler - reserved
 18597                                  ;   ax=801h - install the bds into the linked list
 18598                                  ;   ax=802h - dos request
 18599                                  ;   ax=803h - return bds table starting pointer in ds:di
 18600                                  ;	   (ems device driver hooks int 13h to handle 16kb dma overrun
 18601                                  ;	    problem. bds table is going to be used to get head/sector
 18602                                  ;	    informations without calling generic ioctl get device parm call.)
 18603                                  
 18604                                  ;BIOSSEGMENT equ 70h
 18605                                  DOSBIOSSEG equ 0070h ; 17/10/2022
 18606                                  
 18607                                  ;;BIOSCODE:1302h (MSDOS 6.21, IO.SYS)
 18608                                  ;BIOSCODE:16AAh (PCDOS 7.1, IBMBIO.COM) ; 26/12/2023
 18609                                  
 18610                                  i2f_handler:				; here is 02C7h:1302h =	0070h:3872h
 18611 0000162D 80FC13                  		cmp	ah, 13h
 18612 00001630 7413                    		jz	short int2f_replace_int13
 18613 00001632 80FC08                  		cmp	ah, 8
 18614 00001635 7432                    		jz	short mine
 18615                                  
 18616                                  ; Check for WIN386 startup and return the BIOS instance data
 18617                                  
 18618 00001637 80FC16                  		cmp	ah, 16h		; MultWin386
 18619 0000163A 746D                    		jz	short win386call
 18620 0000163C 80FC4A                  		cmp	ah, 4Ah		; multMULT
 18621 0000163F 7503                    		jnz	short i2f_handler_iret
 18622 00001641 E99800                  		jmp	handle_multmult
 18623                                  ; ---------------------------------------------------------------------------
 18624                                  
 18625                                  i2f_handler_iret:			
 18626 00001644 CF                      		iret
 18627                                  ; ---------------------------------------------------------------------------
 18628                                  
 18629                                  int2f_replace_int13:
 18630 00001645 FA                      		cli	; 26/12/2023
 18631 00001646 50                      		push	ax	; free up a register for caller's ds
 18632 00001647 8CD8                    		mov	ax, ds	; then we can use ds: -> Bios_Data
 18633                                  		;;mov	ds, word [cs:0030h] ; 15/10/2022	
 18634                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 18635                                  					; = [02C7h:0030h] = [0070h:25A0h]
 18636 00001649 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 18637                                  		; 19/10/2022
 18638                                  		;push	word ptr ds:Orig13	; save old value of old13 and
 18639                                  		;push	word ptr ds:Orig13+2	; orig13 so that we can
 18640                                  		;push	word ptr ds:Old13	; return them to caller
 18641                                  		;push	word ptr ds:Old13+2
 18642                                  		
 18643                                  		; 02/09/2023 (PCDOS 7.1)
 18644                                  		;push	word [Orig13]
 18645 0000164E FF36[B600]              		push	word [Orig13+2]
 18646                                  		;push	word [Old13]
 18647 00001652 FF36[0801]              		push	word [Old13+2]
 18648                                  
 18649                                  		;mov	word ptr ds:Orig13, dx	; orig13 := addr. of new int_13
 18650                                  		;mov	word ptr ds:Orig13+2, ax
 18651                                  		;mov	word ptr ds:Old13, bx	; old13 := addr. of new boot_13
 18652                                  		;mov	word ptr ds:Old13+2, es
 18653                                  		
 18654                                  		;mov	[Orig13], dx
 18655                                  		; 02/09/2023
 18656 00001656 8716[B400]              		xchg	dx, [Orig13]
 18657 0000165A A3[B600]                		mov	[Orig13+2], ax
 18658                                  		;mov	[Old13], bx
 18659                                  		; 02/09/2023
 18660 0000165D 871E[0601]              		xchg	bx, [Old13]
 18661 00001661 8C06[0801]              		mov	[Old13+2], es
 18662                                  
 18663 00001665 07                      		pop	es			; es:bx := old old13 vector
 18664                                  		; 02/09/2023
 18665                                  		;pop	bx
 18666 00001666 1F                      		pop	ds			; ds:dx := old orig13 vector
 18667                                  		;pop	dx ; 02/09/2023
 18668 00001667 58                      		pop	ax
 18669                                  i2f_iret:
 18670 00001668 CF                      		iret
 18671                                  ; ---------------------------------------------------------------------------
 18672                                  
 18673                                  mine:
 18674 00001669 3CF8                    		cmp	al, 0F8h 		; iret on reserved functions
 18675 0000166B 73FB                    		jnb	short i2f_iret
 18676 0000166D 08C0                    		or	al, al			; a get installed state request?
 18677 0000166F 7503                    		jnz	short disp_func
 18678 00001671 B0FF                    		mov	al, 0FFh
 18679                                  		;jmp	short i2f_iret
 18680                                  		; 02/09/2023
 18681 00001673 CF                      		iret
 18682                                  ; ---------------------------------------------------------------------------
 18683                                  
 18684                                  disp_func:
 18685 00001674 3C01                    		cmp	al, 1			; request for installing bds?
 18686 00001676 7418                    		jz	short do_subfun_01
 18687 00001678 3C03                    		cmp	al, 3			; get bds vector?
 18688 0000167A 7423                    		jz	short do_get_bds_vector
 18689                                  
 18690                                  ; set up pointer to request packet
 18691                                  
 18692 0000167C 1E                      		push	ds
 18693 0000167D 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 18694                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 18695                                  					; = [0070h:25A0h] = [02C7h:0030h]
 18696                                  		; 19/10/2022
 18697                                  		;mov	word ptr ds:ptrsav, bx
 18698                                  		;mov	word ptr ds:ptrsav+2, es
 18699 00001682 891E[1200]              		mov	[ptrsav], bx
 18700 00001686 8C06[1400]              		mov	[ptrsav+2], es
 18701 0000168A 1F                      		pop	ds
 18702                                  		;jmp	far ptr	i2f_dskentry
 18703                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 18704                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1708h
 18705 0000168B EA[5E06]7000            		jmp	DOSBIOSSEG:dsk_entry ; BIOSDATA:dsk_entry
 18706                                  		;; 17/10/2022
 18707                                  		;;jmp	far DOSBIOSSEG:dsk_entry
 18708                                  		;jmp	DOSBIOSSEG:i2f_dskentry ; 70h:i2f_dskentry
 18709                                  					; NOTE: jump to a FAR function, not an
 18710                                  					;  IRET type function. Callers of
 18711                                  					;  this int2f subfunction will have
 18712                                  					;  to be careful to do a popf
 18713                                  
 18714                                  ; ---------------------------------------------------------------------------
 18715                                  
 18716                                  do_subfun_01:
 18717 00001690 06                      		push	es
 18718 00001691 1E                      		push	ds
 18719 00001692 1E                      		push	ds
 18720 00001693 07                      		pop	es
 18721                                  		; 17/10/2022
 18722 00001694 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 18723                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 18724                                  					; point	ds: -> Bios_Data
 18725 00001699 E8BC03                  		call	install_bds
 18726 0000169C 1F                      		pop	ds
 18727 0000169D 07                      		pop	es
 18728                                  		;jmp	short i2f_iret
 18729                                  		; 02/09/2023
 18730 0000169E CF                      		iret
 18731                                  ; ---------------------------------------------------------------------------
 18732                                  
 18733                                  do_get_bds_vector:
 18734                                  		; 17/10/2022
 18735 0000169F 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 18736                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 18737 000016A4 C53E[1901]              		lds	di, [start_bds]
 18738                                  		;lds	di, ds:start_bds
 18739                                  ;ii2f_iret:	; 10/12/2022
 18740                                  		;jmp	short i2f_iret
 18741                                  		; 02/09/2023
 18742 000016A8 CF                      		iret
 18743                                  ; ---------------------------------------------------------------------------
 18744                                  
 18745                                  ; 17/10/2022
 18746                                  ; 16/10/2022
 18747                                  
 18748                                  ; WIN386 startup stuff is done here. If starting up we set our WIN386 present
 18749                                  ; flag and return instance data. If exiting, we reset the WIN386 present flag
 18750                                  ; NOTE: We assume that the BIOS int 2fh is at the bottom of the chain.
 18751                                  
 18752                                  win386call:
 18753 000016A9 1E                      		push	ds
 18754 000016AA 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 18755                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 18756                                  					; at 2C7h:30h =	70h:25A0h
 18757 000016AF 3C05                    		cmp	al, 5		; Win386_Init
 18758                                  					; is it	win386 initializing?
 18759 000016B1 7410                    		jz	short Win386Init
 18760 000016B3 3C06                    		cmp	al, 6		; Win386_Exit
 18761                                  					; is it	win386 exiting?
 18762 000016B5 7523                    		jnz	short win_iret	; if not, continue int2f chain
 18763                                  		; 12/12/2022
 18764 000016B7 F6C201                  		test	dl, 1
 18765                                  		;test	dx, 1		; is it	win386 or win286 dos extender?
 18766 000016BA 751E                    		jnz	short win_iret	; if not win386, then continue
 18767                                  		;and	ds:IsWin386, 0	; indicate that	win386 is not present  
 18768 000016BC 8026[1208]00            		and	byte [IsWin386], 0 
 18769 000016C1 EB17                    		jmp	short win_iret
 18770                                  ; ---------------------------------------------------------------------------
 18771                                  
 18772                                  Win386Init:
 18773                                  		; 12/12/2022
 18774 000016C3 F6C201                  		test	dl, 1
 18775                                  		;test	dx, 1		; is it win386 or win286 dos extender?
 18776 000016C6 7512                    		jnz	short win_iret	; if not win386, then continue
 18777                                  		;or	ds:IsWin386, 1	; Indicate WIN386 present
 18778 000016C8 800E[1208]01            		or	byte [IsWin386], 1
 18779                                  		;mov	word ptr ds:SI_Next, bx	; Hook our structure into chain
 18780                                  		;mov	word ptr ds:SI_Next+2, es
 18781 000016CD 891E[E007]              		mov	[SI_Next], bx
 18782 000016D1 8C06[E207]              		mov	[SI_Next+2], es
 18783                                  		;mov	bx, offset Win386_SI ; point ES:BX to Win386_SI
 18784 000016D5 BB[DE07]                		mov	bx, Win386_SI	; 19/10/2022
 18785 000016D8 1E                      		push	ds
 18786 000016D9 07                      		pop	es
 18787                                  win_iret:
 18788 000016DA 1F                      		pop	ds
 18789                                  ii2f_iret:	; 10/12/2022
 18790                                  		;jmp	short i2f_iret	; return back up the chain
 18791                                  		; 02/09/2023
 18792 000016DB CF                      		iret
 18793                                  ; ---------------------------------------------------------------------------
 18794                                  
 18795                                  handle_multmult:
 18796 000016DC 3C01                    		cmp	al, 1
 18797 000016DE 7514                    		jnz	short try_2
 18798 000016E0 1E                      		push	ds
 18799 000016E1 E84500                  		call	HMAPtr		; get offset of free HMA
 18800                                  		; 10/12/2022
 18801                                  		;xor	bx, bx
 18802                                  		;dec	bx
 18803 000016E4 BBFFFF                  		mov	bx, 0FFFFh
 18804 000016E7 8EC3                    		mov	es, bx		; seg of HMA
 18805 000016E9 89FB                    		mov	bx, di
 18806 000016EB F7D3                    		not	bx
 18807 000016ED 09DB                    		or	bx, bx
 18808 000016EF 7401                    		jz	short try_1
 18809 000016F1 43                      		inc	bx
 18810                                  try_1:
 18811 000016F2 1F                      		pop	ds
 18812                                  		;jmp	short ii2f_iret
 18813                                  		; 02/09/2023
 18814 000016F3 CF                      		iret
 18815                                  ; ---------------------------------------------------------------------------
 18816                                  
 18817                                  try_2:
 18818 000016F4 3C02                    		cmp	al, 2		; multMULTALLOCHMA
 18819 000016F6 7530                    		jnz	short try_3
 18820 000016F8 1E                      		push	ds
 18821                                  		; 10/12/2022
 18822                                  		;xor	di, di
 18823                                  		;dec	di
 18824 000016F9 BFFFFF                  		mov	di, 0FFFFh	; assume not enough space
 18825 000016FC 8EC7                    		mov	es, di
 18826 000016FE E82800                  		call	HMAPtr		; get offset of free HMA
 18827 00001701 83FFFF                  		cmp	di, 0FFFFh
 18828 00001704 7421                    		jz	short InsuffHMA
 18829 00001706 F7DF                    		neg	di		; free space in HMA
 18830 00001708 39FB                    		cmp	bx, di
 18831 0000170A 7605                    		jbe	short try_4
 18832                                  		; 10/12/2022
 18833                                  		;sub	di, di
 18834                                  		;dec	di
 18835 0000170C BFFFFF                  		mov	di, 0FFFFh
 18836                                  		;jmp	short InsuffHMA
 18837                                  		; 02/09/2023
 18838 0000170F 1F                      		pop	ds
 18839 00001710 CF                      		iret
 18840                                  ; ---------------------------------------------------------------------------
 18841                                  
 18842                                  try_4:
 18843                                  		;mov	di, ds:FreeHMAPtr
 18844 00001711 8B3E[D707]              		mov	di, [FreeHMAPtr]
 18845 00001715 83C30F                  		add	bx, 15
 18846                                  		;and	bx, 0FFF0h
 18847                                  		; 10/12/2022
 18848 00001718 80E3F0                  		and	bl, 0F0h
 18849                                  		;add	ds:FreeHMAPtr, bx ; update the free pointer
 18850 0000171B 011E[D707]              		add	[FreeHMAPtr], bx
 18851 0000171F 7506                    		jnz	short InsuffHMA
 18852 00001721 C706[D707]FFFF          		mov	word [FreeHMAPtr], 0FFFFh ; -1
 18853                                  		;mov	ds:FreeHMAPtr, 0FFFFh
 18854                                  					; no more HMA if we have wrapped
 18855                                  InsuffHMA:
 18856 00001727 1F                      		pop	ds
 18857                                  		; 10/12/2022
 18858                                  try_3:
 18859                                  		;jmp	short ii2f_iret
 18860                                  		; 02/09/2023
 18861 00001728 CF                      		iret
 18862                                  ; ---------------------------------------------------------------------------
 18863                                  
 18864                                  		; 10/12/2022
 18865                                  ;try_3:
 18866                                  		;jmp	ii2f_iret
 18867                                  
 18868                                  ; =============== S U B	R O U T	I N E =======================================
 18869                                  
 18870                                  ; 16/10/2022
 18871                                  
 18872                                  ;--------------------------------------------------------------------------
 18873                                  ;
 18874                                  ; procedure : HMAPtr
 18875                                  ;
 18876                                  ;		Gets the offset of the free HMA area ( with respect to
 18877                                  ;							seg ffff )
 18878                                  ;		If DOS has not moved high, tries to move DOS high.
 18879                                  ;		In the course of doing this, it will allocate all the HMA
 18880                                  ;		and set the FreeHMAPtr to past the end of the BIOS and 
 18881                                  ;		DOS code. The call to MoveDOSIntoHMA (which is a pointer)
 18882                                  ;		enters the routine in sysinit1 called FTryToMovDOSHi.
 18883                                  ;
 18884                                  ;	RETURNS : offset of free HMA in DI
 18885                                  ;		  BIOS_DATA, seg in DS
 18886                                  ;
 18887                                  ;--------------------------------------------------------------------------
 18888                                  
 18889                                  		; 17/10/2022
 18890                                  HMAPtr:
 18891 00001729 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 18892                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 18893 0000172E 8B3E[D707]              		mov	di, [FreeHMAPtr]
 18894                                  		;mov	di, ds:FreeHMAPtr
 18895 00001732 83FFFF                  		cmp	di, 0FFFFh
 18896 00001735 750F                    		jnz	short HMAPtr_retn
 18897 00001737 803E[DD07]00            		cmp	byte [SysinitPresent], 0
 18898                                  		;cmp	ds:SysinitPresent, 0
 18899 0000173C 7408                    		jz	short HMAPtr_retn
 18900 0000173E FF1E[D907]              		call	far [MoveDOSIntoHMA]
 18901                                  		;call	ds:MoveDOSIntoHMA ; call far [MoveDOSIntoHMA]
 18902 00001742 8B3E[D707]              		mov	di, [FreeHMAPtr]
 18903                                  		;mov	di, ds:FreeHMAPtr
 18904                                  HMAPtr_retn:
 18905 00001746 C3                      		retn
 18906                                  
 18907                                  ; =============== S U B	R O U T	I N E =======================================
 18908                                  
 18909                                  ; 16/10/2022
 18910                                  
 18911                                  ; move a 512 byte sector from ds:si to es:di, do not trash cx
 18912                                  ; but go ahead and update direction flag, si, & di
 18913                                  
 18914                                  move_sector:
 18915                                  
 18916                                  ; The 80386 microprocessor considers an access to WORD 0FFFFh in
 18917                                  ; any segment to be a fault. Theoretically, this could be handled
 18918                                  ; by the fault handler and the behavior of an 8086 could be emulated
 18919                                  ; by wrapping the high byte to offset 0000h. This would be a lot
 18920                                  ; of work and was, indeed, blown off by the Win386 guys. COMPAQ
 18921                                  ; also handles the fault incorrectly in their ROM BIOS for real
 18922                                  ; mode. Their fault handler was only designed to deal with one
 18923                                  ; special case which occurred in a magazine benchmark, but didn't
 18924                                  ; handle the general case worth beans.
 18925                                  ;
 18926                                  ; Simply changing this code to do a byte loop would work okay but
 18927                                  ; would involve a general case performance hit. Therefore, we'll
 18928                                  ; check for either source or destination offsets being within one
 18929                                  ; sector of the end of their segments and only in that case fall
 18930                                  ; back to a byte move.
 18931                                  
 18932 00001747 FC                      		cld
 18933 00001748 51                      		push	cx
 18934 00001749 B90001                  		mov	cx, 256
 18935 0000174C 81FE00FE                		cmp	si, 0FE00h
 18936 00001750 770A                    		ja	short movsec_bytes
 18937 00001752 81FF00FE                		cmp	di, 0FE00h
 18938 00001756 7704                    		ja	short movsec_bytes
 18939 00001758 F3A5                    		rep movsw
 18940 0000175A 59                      		pop	cx
 18941 0000175B C3                      		retn
 18942                                  ; ---------------------------------------------------------------------------
 18943                                  
 18944                                  movsec_bytes:
 18945 0000175C D1E1                    		shl	cx, 1
 18946 0000175E F3A4                    		rep movsb
 18947 00001760 59                      		pop	cx
 18948 00001761 C3                      		retn
 18949                                  
 18950                                  ; =============== S U B	R O U T	I N E =======================================
 18951                                  
 18952                                  ; 16/10/2022
 18953                                  
 18954                                  ; check_wrap is a routine that adjusts the starting sector, starting head
 18955                                  ; and starting cylinder for an int 13 request that requests i/o of a lot
 18956                                  ; of sectors. it only does this for fixed disks. it is used in the sections
 18957                                  ; of code that handle ecc errors and dma errors. it is necessary, because
 18958                                  ; ordinarily the rom would take care of wraps around heads and cylinders,
 18959                                  ; but we break down a request when we get an ecc or dma error into several
 18960                                  ; i/o of one or more sectors. in this case, we may already be beyond the
 18961                                  ; number of sectors on a track on the medium, and the request would fail.
 18962                                  ;
 18963                                  ; input conditions:
 18964                                  ;	all registers set up for an int 13 request.
 18965                                  ;
 18966                                  ; output:
 18967                                  ;	dh - contains starting head number for request
 18968                                  ;	cx - contains starting sector and cylinder numbers
 18969                                  ;	(the above may or may not have been changed, and are 0-based)
 18970                                  ;	all other registers preserved.
 18971                                  
 18972                                  		; 26/12/2023 - Retro DOS 5.0
 18973                                  check_wrap:	
 18974 00001762 50                      		push	ax
 18975 00001763 53                      		push	bx
 18976 00001764 06                      		push	es
 18977 00001765 57                      		push	di
 18978 00001766 E86C00                  		call	find_bds	; get pointer to bds for drive in dl
 18979 00001769 725E                    		jb	short no_wrap	; finished if DOS doesn't use it
 18980                                  		; 26/12/2023
 18981 0000176B 26F6453F01              		test	byte [es:di+3Fh], 1
 18982                                  		; 12/12/2022
 18983                                  		;test	byte [es:di+23h], 1
 18984                                  		;;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 18985 00001770 7457                    		jz	short no_wrap	; no wrapping for removable media
 18986 00001772 268B5D13                		mov	bx, [es:di+13h]	; [es:di+BDS.secpertrack]
 18987 00001776 89C8                    		mov	ax, cx
 18988 00001778 83E03F                  		and	ax, 3Fh		; extract sector number
 18989 0000177B 39D8                    		cmp	ax, bx		; are we going to wrap?
 18990 0000177D 764A                    		jbe	short no_wrap
 18991 0000177F F6F3                    		div	bl		; ah=new sector	#, al=#	of head	wraps
 18992                                  
 18993                                  ; we need to be careful here. if the new sector # is 0, then we are on the
 18994                                  ; last sector on that track.
 18995                                  
 18996 00001781 08E4                    		or	ah, ah
 18997 00001783 7503                    		jnz	short not_on_bound
 18998                                  		; 18/12/2022
 18999 00001785 48                      		dec	ax ; *
 19000 00001786 88DC                    		mov	ah, bl		; set sector=BDS_BPB.BPB_SECTORSPERTRACK
 19001                                  					; if on	boundary
 19002                                  		;dec	al ; *		; also decrement # of head wraps
 19003                                  not_on_bound:
 19004 00001788 80E1C0                  		and	cl, 0C0h	; zero out sector #
 19005 0000178B 08E1                    		or	cl, ah		; or in	new sector #
 19006 0000178D 30E4                    		xor	ah, ah		; ax = # of head wraps
 19007 0000178F 40                      		inc	ax
 19008 00001790 00F0                    		add	al, dh		; add in starting head #
 19009 00001792 80D400                  		adc	ah, 0		; catch	any carry
 19010                                  		; 02/09/2023
 19011 00001795 268B5D15                		mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 19012 00001799 39D8                    		cmp	ax, bx
 19013                                  		;cmp	ax, [es:di+15h]	; [es:di+BDS.heads]
 19014                                  					; are we going to wrap around a	head?
 19015 0000179B 7632                    		jbe	short no_wrap_head ; do	not lose new head number!!
 19016 0000179D 52                      		push	dx		; preserve drive number and head number
 19017 0000179E 31D2                    		xor	dx, dx
 19018                                  		;mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 19019 000017A0 F7F3                    		div	bx		; dx=new head #, ax=# of cylinder wraps
 19020                                  
 19021                                  ; careful here! if new head # is 0, then we are on the last head.
 19022                                  
 19023 000017A2 09D2                    		or	dx, dx
 19024 000017A4 7507                    		jnz	short no_head_bound
 19025 000017A6 89DA                    		mov	dx, bx		; on boundary. set to BDS_BPB.BPB_HEADS
 19026                                  
 19027                                  ; if we had some cylinder wraps, we need to reduce them by one!!
 19028                                  
 19029 000017A8 09C0                    		or	ax, ax
 19030 000017AA 7401                    		jz	short no_head_bound
 19031 000017AC 48                      		dec	ax		; reduce number	of cylinder wraps
 19032                                  no_head_bound:				
 19033 000017AD 88D7                    		mov	bh, dl		; bh has new head number
 19034 000017AF 5A                      		pop	dx		; restore drive number and head number
 19035 000017B0 FECF                    		dec	bh		; get it 0-based
 19036 000017B2 88FE                    		mov	dh, bh		; set up new head number in dh
 19037 000017B4 88CF                    		mov	bh, cl
 19038 000017B6 80E73F                  		and	bh, 3Fh		; preserve sector number
 19039 000017B9 B306                    		mov	bl, 6
 19040 000017BB 86CB                    		xchg	cl, bl
 19041 000017BD D2EB                    		shr	bl, cl		; get ms cylinder bits to ls end
 19042 000017BF 00C5                    		add	ch, al		; add in cylinder wrap
 19043 000017C1 10E3                    		adc	bl, ah		; add in high byte
 19044 000017C3 D2E3                    		shl	bl, cl		; move up to ms	end
 19045 000017C5 86D9                    		xchg	bl, cl		; restore cylinder bits	into cl
 19046 000017C7 08F9                    		or	cl, bh		; or in	sector number
 19047                                  no_wrap:				
 19048 000017C9 F8                      		clc
 19049 000017CA 5F                      		pop	di
 19050 000017CB 07                      		pop	es
 19051 000017CC 5B                      		pop	bx
 19052 000017CD 58                      		pop	ax
 19053 000017CE C3                      		retn
 19054                                  ; ---------------------------------------------------------------------------
 19055                                  
 19056                                  no_wrap_head:				
 19057 000017CF 88C6                    		mov	dh, al		; do not lose new head number
 19058 000017D1 FECE                    		dec	dh		; get it 0-based
 19059 000017D3 EBF4                    		jmp	short no_wrap
 19060                                  
 19061                                  ; =============== S U B	R O U T	I N E =======================================
 19062                                  
 19063                                  ; 16/10/2022
 19064                                  
 19065                                  ; this is a special version of the bds lookup code which is
 19066                                  ; based on physical drives rather than the usual logical drives
 19067                                  ; carry is set if the physical drive in dl is found, es:di -> its bds
 19068                                  ; otherwise carry is clear
 19069                                  ;
 19070                                  ; guaranteed to trash no registers except es:di
 19071                                  
 19072                                  		; 19/10/2022
 19073                                  find_bds:	
 19074 000017D5 C43E[1901]              		les	di, [start_bds]	; point es:di to first bds
 19075                                  fbds_1:					
 19076 000017D9 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 19077 000017DD 7409                    		jz	short fdbs_2
 19078 000017DF 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 19079                                  					; go to next bds
 19080 000017E2 83FFFF                  		cmp	di, 0FFFFh
 19081 000017E5 75F2                    		jnz	short fbds_1
 19082 000017E7 F9                      		stc
 19083                                  fdbs_2:					
 19084 000017E8 C3                      		retn
 19085                                  
 19086                                  ; =============== S U B	R O U T	I N E =======================================
 19087                                  
 19088                                  ; 16/10/2022
 19089                                  		; 17/10/2022
 19090                                  doint:
 19091                                  		; 10/12/2022
 19092 000017E9 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 19093                                  					; get physical drive number
 19094                                  		; 19/10/2022 - Temporary !
 19095                                  		;db	8Ah, 96h, 8, 0	; mov dl, [bp+8]	
 19096                                  		
 19097 000017EC 30E4                    		xor	ah, ah
 19098 000017EE 08C0                    		or	al, al
 19099 000017F0 7410                    		jz	short dointdone	; if zero sectors, return ax=0
 19100                                  		; 10/12/2022
 19101 000017F2 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 19102                                  					; get request code
 19103                                  		;db	8Ah, 0A6h, 3, 0	; mov ah, [bp+3]
 19104 000017F5 FF7610                  		push	word [bp+10h]	; [bp+INT13FRAME.oldf]
 19105                                  		;db	0FFh, 0B6h, 10h, 0 ; push word [bp+10h]
 19106 000017F8 9D                      		popf
 19107                                  		;call	far 70h:797h ; MSDOS 6.21 IO.SYS BIOSCODE:14EAh
 19108                                  		; 17/10/2022
 19109 000017F9 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 19110                                  		;;call	call_orig13	; call far 70h:797h
 19111                                  					; call far KERNEL_SEGMENT:call_orig13
 19112 000017FE 9C                      		pushf
 19113                                  		; 10/12/2022
 19114 000017FF 8F4610                  		pop	word [bp+10h]	; [bp+INT13FRAME.oldf]
 19115                                  		;db	8Fh, 86h, 10h, 0 ; pop word [bp+10h]
 19116                                  dointdone:				
 19117 00001802 C3                      		retn
 19118                                  
 19119                                  ;----------------------------------------------------------------------------
 19120                                  
 19121                                  ; 16/10/2022
 19122                                  
 19123                                  ; this is the true int 13 handler. we parse the request to see if there is
 19124                                  ; a dma violation. if so, depending on the function, we:
 19125                                  ;   read/write break the request into three pieces and move the middle one
 19126                                  ;	       into our internal buffer.
 19127                                  ;
 19128                                  ;   format     copy the format table into the buffer
 19129                                  ;   verify     point the transfer address into the buffer
 19130                                  ;
 19131                                  ; this is the biggest bogosity of all. the ibm controller does not handle
 19132                                  ; operations that cross physical 64k boundaries. in these cases, we copy
 19133                                  ; the offending sector into the buffer below and do the i/o from there.
 19134                                  
 19135                                  ;struc INT13FRAME
 19136                                  ;.oldbp: resw
 19137                                  ;.oldax: resw 
 19138                                  ;.oldbx: resw
 19139                                  ;.oldcx: resw
 19140                                  ;.olddx: resw
 19141                                  ;.oldds: resw	; now we save caller's ds, too
 19142                                  ;.olddd: resd
 19143                                  ;.oldf:	resw
 19144                                  ;end struc
 19145                                  
 19146                                  ;----------------------------------------------------------------------------
 19147                                  
 19148                                  ;   entry conditions:
 19149                                  ;	ah = function
 19150                                  ;	al = number of sectors
 19151                                  ;	es:bx = dma address
 19152                                  ;	cx = packed track and sector
 19153                                  ;	dx = head and drive
 19154                                  ;   output conditions:
 19155                                  ;	no dma violation.
 19156                                  
 19157                                  ;	use extreme caution when working with this code. In general,
 19158                                  ;	  all registers are hot at all times.
 19159                                  ;
 19160                                  ;	question:  does this code handle cases where dma errors
 19161                                  ;	  occur during ecc retries, and where ecc errors occur during
 19162                                  ;	  dma breakdowns???? Hmmmmm.
 19163                                  
 19164                                  ;----------------------------------------------------------------------------
 19165                                  
 19166                                  ; ---------------------------------------------------------------------------
 19167                                  
 19168                                  		; 26/12/2023 - Retro DOS v5.0
 19169                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1889h
 19170                                  dtype_array:
 19171 00001803 90004000                		dd 400090h		; 40h:90h is drive type array addr
 19172                                  
 19173                                  ; 17/10/2022
 19174                                  ;DTYPEARRAY equ dtype_array - DOSBIOSEG_2C7h ; (14F5h for MSDOS 5.0 IO.SYS)
 19175                                  ; 09/12/2022
 19176                                  DTYPEARRAY equ dtype_array
 19177                                  
 19178                                  ; ---------------------------------------------------------------------------
 19179                                  
 19180                                  ; stick some special stuff out of mainline
 19181                                  
 19182                                  ; we know we're doing a format command. if we have changeline
 19183                                  ; support, then flag some special changed stuff and set changed
 19184                                  ; by format bit for all logical drives using this physical drive
 19185                                  
 19186                                  format_special_stuff:
 19187 00001807 803E[7700]00            		cmp	byte [fhave96], 0	; do we have changeline support?
 19188 0000180C 7459                    		jz	short format_special_stuff_done ; brif not
 19189 0000180E 53                      		push	bx
 19190 0000180F BB4001                  		mov	bx, 140h	; fchanged_by_format+fchanged
 19191 00001812 E85104                  		call	set_changed_dl	; indicate that media changed by format
 19192 00001815 5B                      		pop	bx
 19193 00001816 EB4F                    		jmp	short format_special_stuff_done
 19194                                  ; ---------------------------------------------------------------------------
 19195                                  
 19196                                  ; 16/10/2022
 19197                                  
 19198                                  ; we know we've got ec35's on the system. Now see if we're doing
 19199                                  ; a floppy. If so, create a mask and see if this particular
 19200                                  ; drive is an ec35. If so, set dtype_array[drive]=93h
 19201                                  
 19202                                  		; 19/10/2022
 19203                                  ec35_special_stuff:
 19204 00001818 84D2                    		test	dl, dl		; floppy or hard disk?
 19205 0000181A 7852                    		js	short ec35_special_stuff_done ;	if hard	drive, we're done
 19206 0000181C 50                      		push	ax		; see if this PARTICULAR drive is ec35
 19207 0000181D 51                      		push	cx
 19208 0000181E 88D1                    		mov	cl, dl		; turn drive number into bit map
 19209 00001820 B001                    		mov	al, 1		; assume drive 0
 19210 00001822 D2E0                    		shl	al, cl		; shift	over correct number of times
 19211 00001824 8406[A204]              		test	[ec35flag], al	; electrically compatible 3.5 incher?
 19212 00001828 59                      		pop	cx
 19213 00001829 58                      		pop	ax
 19214 0000182A 7442                    		jz	short ec35_special_stuff_done
 19215                                  					; done if this floppy is not an	ec35
 19216 0000182C 53                      		push	bx		; free up a far	pointer	(es:bx)
 19217 0000182D 06                      		push	es
 19218                                  		; 17/10/2022
 19219 0000182E 2EC41E[0318]            		les	bx, [cs:DTYPEARRAY]
 19220                                  		;les	bx, dword ptr cs:DTYPEARRAY ; [cs:dtype_array]
 19221                                  					; 0070h:3A65h =	2C7h:14F5h
 19222 00001833 00D3                    		add	bl, dl
 19223 00001835 80D700                  		adc	bh, 0		; find entry for this drive
 19224 00001838 26C60793                		mov	byte [es:bx], 93h ; establish drive type as:
 19225                                  					; (360k	disk in	360k drive,
 19226                                  					; no double-stepping, 250 kbs transfer rate)
 19227 0000183C 07                      		pop	es
 19228 0000183D 5B                      		pop	bx
 19229 0000183E EB2E                    		jmp	short ec35_special_stuff_done
 19230                                  ; ---------------------------------------------------------------------------
 19231                                  
 19232                                  ; 16/10/2022
 19233                                  
 19234                                  ; ps2_30 machine has some problem with ah=8h (read drive parm), int 13h.
 19235                                  ; this function does not reset the common buses after the execution.
 19236                                  ; to solve this problem, when we detect ah=8h, then we will save the result and
 19237                                  ; will issue ah=1 (read status) call to reset the buses.
 19238                                  
 19239                                  ps2_special_stuff:
 19240 00001840 803E[1E00]08            		cmp	byte [prevoper], 8 ; (ps2_30)
 19241                                  					; read driver parm ?
 19242 00001845 7407                    		jz	short ps2_30_problem
 19243 00001847 803E[1E00]15            		cmp	byte [prevoper], 15h
 19244                                  					; apparently function 15h fails, too
 19245 0000184C 752D                    		jnz	short ps2_special_stuff_done
 19246                                  ps2_30_problem:
 19247 0000184E 50                      		push	ax
 19248 0000184F B401                    		mov	ah, 1
 19249                                  		; 26/12/2023
 19250                                  		;call	70h:70Bh ; PCDOS 7.1 IBMBIO.COM BIOSCODE:18D7h
 19251                                  		;		 ; call BIOSDATA:call_orig13	
 19252                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1543h
 19253                                  		; 17/10/2022
 19254 00001851 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 19255                                  		;call	call_orig13	; call far 70:797h
 19256                                  					; call far KERNEL_SEGMENT:call_orig13
 19257 00001856 58                      		pop	ax
 19258 00001857 EB22                    		jmp	short ps2_special_stuff_done
 19259                                  ; ---------------------------------------------------------------------------
 19260                                  
 19261                                  ; 17/10/2022
 19262                                  ; 16/10/2022
 19263                                  
 19264                                  ; here is the actual int13 handler
 19265                                  
 19266                                  i13z:					; 0070h:3ABBh =	02C7h:154Bh
 19267                                  
 19268                                  ; cas -- inefficient! could push ds and load ds-> Bios_Data before
 19269                                  ; vectoring up here from Bios_Data
 19270                                  
 19271                                  		; 19/10/2022
 19272 00001859 1E                      		push	ds		; save caller's ds register first thing
 19273                                  		;;mov	ds, word [cs:0030h]
 19274                                  					; and set up our own ds -> Bios_Data
 19275 0000185A 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 19276                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 19277                                  					; = [02C7h:0030h] = [0070h:25A0h]
 19278                                  
 19279                                  ; let the operation proceed. if there is a dma violation, then we do things
 19280                                  
 19281 0000185F A3[1E00]                		mov	[prevoper], ax	; save request
 19282 00001862 80FC05                  		cmp	ah, 5		; romformat
 19283 00001865 74A0                    		jz	short format_special_stuff
 19284                                  					; go do special stuff for format
 19285                                  format_special_stuff_done:
 19286 00001867 803E[A204]00            		cmp	byte [ec35flag], 0 ; any electrically compat 3.5 inchers?
 19287 0000186C 75AA                    		jnz	short ec35_special_stuff
 19288                                  					; go handle it out of line if so
 19289                                  ec35_special_stuff_done:
 19290                                  		; 26/12/2023
 19291                                  		;call	70h:70Bh ; PCDOS 7.1 IBMBIO.COM BIOSCODE:18EDh
 19292                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1560h
 19293 0000186E 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 19294                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 19295                                  		
 19296 00001873 9C                      		pushf			; save result flags
 19297                                  		
 19298 00001874 803E[AF05]FA            		cmp	byte [model_byte], 0FAh ; is this a ps2/30?
 19299                                  					; mdl_ps2_30
 19300 00001879 74C5                    		jz	short ps2_special_stuff
 19301                                  					; exit mainline to address special
 19302                                  ps2_special_stuff_done:			; ps2/30 problem if so
 19303 0000187B 9D                      		popf
 19304 0000187C 7221                    		jb	short goterr13	; error	on original orig13 call-thru?
 19305                                  ret_from_i13:
 19306 0000187E 1F                      		pop	ds
 19307 0000187F CA0200                  		retf	2		; restore ds &	iret w/flags
 19308                                  ; ---------------------------------------------------------------------------
 19309                                  
 19310                                  ; most of our code exits through here. If carry isn't set, then
 19311                                  ; just do a simple exit. Else doublecheck that we aren't getting
 19312                                  ; a changeline error.
 19313                                  
 19314                                  i13ret_ck_chglinerr:			
 19315 00001882 73FA                    		jnb	short ret_from_i13 ; done if not an error termination
 19316                                  i13_ret_error:				
 19317 00001884 80FC06                  		cmp	ah, 6		; did i	see a change event?
 19318 00001887 7513                    		jnz	short int13b	; skip if wrong	error
 19319 00001889 08D2                    		or	dl, dl		; is this for the hard disk?
 19320 0000188B 780F                    		js	short int13b	; yes, ignore
 19321 0000188D 803E[7700]00            		cmp	byte [fhave96], 0
 19322 00001892 7408                    		jz	short int13b	; just in case ROM returned this
 19323                                  					; error	even though it told us it
 19324                                  					; never	would
 19325 00001894 53                      		push	bx
 19326 00001895 BB4000                  		mov	bx, 40h		; fchanged
 19327 00001898 E8CB03                  		call	set_changed_dl
 19328 0000189B 5B                      		pop	bx
 19329                                  int13b:
 19330 0000189C F9                      		stc			; now return the error
 19331 0000189D EBDF                    		jmp	short ret_from_i13
 19332                                  ; ---------------------------------------------------------------------------
 19333                                  
 19334                                  ; some kind of error occurred. see if it is dma violation
 19335                                  
 19336                                  goterr13:
 19337 0000189F 80FC09                  		cmp	ah, 9		; dma error?
 19338 000018A2 747C                    		jz	short gotdmaerr
 19339                                  goterr13_xxxx:
 19340 000018A4 80FC11                  		cmp	ah, 11h		; ecc error?
 19341 000018A7 75DB                    		jnz	short i13_ret_error ; other error. just	return back.
 19342 000018A9 803E[A905]01            		cmp	byte [media_set_for_format], 1 ; formatting?
 19343 000018AE 74D4                    		jz	short i13_ret_error
 19344                                  
 19345 000018B0 803E[1F00]02            		cmp	byte [prevoper+1], 2
 19346                                  		;cmp	byte ptr ds:prevoper+1,	2 ; ecc-corrected error
 19347                                  					; (2 = romread)
 19348                                  					; ECC correction only applies to reads
 19349 000018B5 75CD                    		jnz	short i13_ret_error
 19350                                  
 19351 000018B7 30E4                    		xor	ah, ah
 19352                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15ABh
 19353                                  		; 17/10/2022
 19354 000018B9 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 19355                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 19356                                  					; call far 70:797h
 19357 000018BE A1[1E00]                		mov	ax, [prevoper]
 19358 000018C1 30E4                    		xor	ah, ah		; return code =	no error
 19359 000018C3 3C01                    		cmp	al, 1		; if request for one sector, assume ok
 19360 000018C5 74B7                    		jz	short ret_from_i13 ; return with carry clear
 19361 000018C7 53                      		push	bx
 19362 000018C8 51                      		push	cx
 19363 000018C9 52                      		push	dx
 19364 000018CA A2[2000]                		mov	[number_of_sec], al
 19365                                  loop_ecc:
 19366 000018CD B80102                  		mov	ax, 201h	; read one sector
 19367                                  
 19368                                  ; we do reads one sector at a time. this ensures that we will eventually
 19369                                  ; finish the request since ecc errors on one sector do read in that sector.
 19370                                  ;
 19371                                  ; we need to put in some "intelligence" into the ecc handler to handle reads
 19372                                  ; that attempt to read more sectors than are available on a particular
 19373                                  ; track.
 19374                                  ;
 19375                                  ; we call check_wrap to set up the sector #, head # and cylinder # for
 19376                                  ; this request.
 19377                                  ;
 19378                                  ; at this point, all registers are set up for the call to orig13, except
 19379                                  ; that there may be a starting sector number that is bigger than the number
 19380                                  ; of sectors on a track.
 19381                                  ;
 19382 000018D0 E88FFE                  		call	check_wrap	; get correct parameters for int 13
 19383                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15C5h
 19384                                  		; 17/10/2022
 19385 000018D3 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 19386                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 19387 000018D8 730C                    		jnb	short ok11_op
 19388 000018DA 80FC09                  		cmp	ah, 9		; DMA error during ECC read?
 19389 000018DD 741B                    		jz	short handle_dma_during_ecc
 19390 000018DF 80FC11                  		cmp	ah, 11h		; only allow ecc errors
 19391 000018E2 7510                    		jnz	short ok11_exit_err
 19392                                  		; 10/12/2022
 19393                                  		; xor ax ax -> ah = 0
 19394                                  		;mov	ah, 0		; ecc error. reset the system again.
 19395 000018E4 31C0                    		xor	ax, ax		; clear	the error code so that if this
 19396                                  					; was the last sector, no error	code
 19397                                  					; will be returned for the corrected
 19398                                  					; read.	(clear carry too.)
 19399                                  ok11_op:
 19400 000018E6 FE0E[2000]              		dec	byte [number_of_sec]
 19401 000018EA 7409                    		jz	short ok11_exit	; all done?
 19402 000018EC FEC1                    		inc	cl		; advance sector number
 19403                                  					; add 200h to address
 19404 000018EE FEC7                    		inc	bh
 19405 000018F0 FEC7                    		inc	bh
 19406 000018F2 EBD9                    		jmp	short loop_ecc
 19407                                  ; ---------------------------------------------------------------------------
 19408                                  
 19409                                  ; locate error returns centrally
 19410                                  
 19411                                  ok11_exit_err:
 19412 000018F4 F9                      		stc			; set carry bit again.
 19413                                  ok11_exit:
 19414 000018F5 5A                      		pop	dx
 19415 000018F6 59                      		pop	cx
 19416 000018F7 5B                      		pop	bx
 19417 000018F8 EB88                    		jmp	short i13ret_ck_chglinerr
 19418                                  ; ---------------------------------------------------------------------------
 19419                                  
 19420                                  ; do the single sector read again, this time into our temporary
 19421                                  ; buffer, which is guaranteed not to have a DMA error, then
 19422                                  ; move the data to its proper location and proceed
 19423                                  
 19424                                  handle_dma_during_ecc:
 19425 000018FA 06                      		push	es
 19426 000018FB 53                      		push	bx
 19427 000018FC BB[5201]                		mov	bx, disksector
 19428 000018FF 1E                      		push	ds
 19429 00001900 07                      		pop	es		; point es:bx to buffer
 19430 00001901 B80102                  		mov	ax, 201h	; read one sector
 19431                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15F8h
 19432                                  		; 17/10/2022
 19433 00001904 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 19434                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 19435 00001909 5B                      		pop	bx
 19436 0000190A 07                      		pop	es
 19437 0000190B 7305                    		jnb	short handle_dma_during_ecc_noerr
 19438 0000190D 80FC11                  		cmp	ah, 11h
 19439 00001910 75E2                    		jnz	short ok11_exit_err ; if anything but ecc error, bomb out
 19440                                  
 19441                                  ; now we're kosher. Copy the data to where it belongs and resume
 19442                                  ; the ECC looping code.
 19443                                  
 19444                                  handle_dma_during_ecc_noerr:
 19445 00001912 56                      		push	si
 19446 00001913 57                      		push	di
 19447 00001914 89DF                    		mov	di, bx
 19448 00001916 BE[5201]                		mov	si, disksector
 19449 00001919 E82BFE                  		call	move_sector
 19450 0000191C 5F                      		pop	di
 19451 0000191D 5E                      		pop	si
 19452 0000191E EBC6                    		jmp	short ok11_op
 19453                                  ; ---------------------------------------------------------------------------
 19454                                  
 19455                                  ; we truly have a dma violation. restore register ax and retry the
 19456                                  ; operation as best we can.
 19457                                  
 19458                                  gotdmaerr:
 19459 00001920 A1[1E00]                		mov	ax, [prevoper]	; 19/10/2022
 19460 00001923 FB                      		sti
 19461 00001924 80FC02                  		cmp	ah, 2		; romread
 19462 00001927 723B                    		jb	short i13_done_dmaerr
 19463                                  					; just pass dma error thru for
 19464                                  					; functions we don't handle
 19465 00001929 80FC04                  		cmp	ah, 4		; romverify
 19466 0000192C 743C                    		jz	short intverify
 19467 0000192E 80FC05                  		cmp	ah, 5		; romformat
 19468 00001931 7448                    		jz	short intformat
 19469 00001933 772F                    		ja	short i13_done_dmaerr
 19470                                  
 19471                                  ; we are doing a read/write call. check for dma problems
 19472                                  
 19473                                  ;	******** set up stack frame here!!! ********
 19474                                  
 19475 00001935 52                      		push	dx
 19476 00001936 51                      		push	cx
 19477 00001937 53                      		push	bx
 19478 00001938 50                      		push	ax
 19479 00001939 55                      		push	bp
 19480 0000193A 89E5                    		mov	bp, sp
 19481 0000193C 8CC2                    		mov	dx, es		; check	for 64k	boundary error
 19482                                  		; 26/12/2023
 19483                                  		;add	dx, dx
 19484                                  		;add	dx, dx
 19485                                  		;add	dx, dx
 19486                                  		;add	dx, dx		; dx = dx*16
 19487 0000193E D1E2                    		shl	dx, 1
 19488 00001940 D1E2                    		shl	dx, 1
 19489 00001942 D1E2                    		shl	dx, 1
 19490 00001944 D1E2                    		shl	dx, 1		; segment converted to absolute	address
 19491 00001946 01DA                    		add	dx, bx		; combine with offset
 19492 00001948 81C2FF01                		add	dx, 511		; simulate a transfer
 19493                                  
 19494                                  ; if carry is set, then we are within 512 bytes of the end of the segment.
 19495                                  ; we skip the first transfer and perform the remaining buffering and transfer
 19496                                  
 19497 0000194C 7303                    		jnb	short no_skip_first
 19498 0000194E E98300                  		jmp	bufferx		; restore dh=head & do buffer
 19499                                  ; ---------------------------------------------------------------------------
 19500                                  
 19501                                  no_skip_first:
 19502 00001951 D0EE                    		shr	dh, 1		; dh = number of sectors before	address
 19503 00001953 B480                    		mov	ah, 128		; ah = max number of sectors in	segment
 19504 00001955 28F4                    		sub	ah, dh
 19505                                  
 19506                                  ; ah is now the number of sectors that we can successfully write in this
 19507                                  ; segment. if this number is above or equal to the requested number, then we
 19508                                  ; continue the operation as normal. otherwise, we break it into pieces.
 19509                                  ;
 19510                                  ; wait a sec. this is goofy. the whole reason we got here in the
 19511                                  ; first place is because we got a dma error. so it's impossible
 19512                                  ; for the whole block to fit, unless the dma error was returned
 19513                                  ; in error.
 19514                                  
 19515 00001957 38C4                    		cmp	ah, al		; can we fit it	in?
 19516 00001959 7236                    		jb	short doblock	; no, perform blocking.
 19517                                  
 19518                                  ; yes, the request fits. let it happen.
 19519                                  
 19520 0000195B 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 19521                                  					; set up head number
 19522 0000195E E888FE                  		call	doint
 19523 00001961 E9D900                  		jmp	bad13		; and return from this place
 19524                                  ; ---------------------------------------------------------------------------
 19525                                  
 19526                                  i13_done_dmaerr:
 19527 00001964 B409                    		mov	ah, 9		; pass dma error thru to caller
 19528 00001966 F9                      		stc
 19529 00001967 E914FF                  		jmp	ret_from_i13	; return with error,
 19530                                  					; we know it's not a changeline error
 19531                                  ; ---------------------------------------------------------------------------
 19532                                  
 19533                                  ; verify the given sectors. place the buffer pointer into our space.
 19534                                  
 19535                                  intverify:
 19536 0000196A 06                      		push	es		; save caller's dma address
 19537 0000196B 53                      		push	bx
 19538 0000196C 1E                      		push	ds		; es:bx	-> Bios_Data:disksector
 19539 0000196D 07                      		pop	es
 19540                                  dosimple:
 19541 0000196E BB[5201]                		mov	bx, disksector
 19542                                  					; do the i/o from Bios_Data:disksector
 19543                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1665h
 19544                                  		; 17/10/2022
 19545 00001971 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 19546                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 19547 00001976 5B                      		pop	bx
 19548 00001977 07                      		pop	es
 19549 00001978 E907FF                  		jmp	i13ret_ck_chglinerr
 19550                                  ; ---------------------------------------------------------------------------
 19551                                  
 19552                                  ; format operation. copy the parameter table into Bios_Data:disksector
 19553                                  
 19554                                  intformat:
 19555 0000197B 06                      		push	es
 19556 0000197C 53                      		push	bx
 19557 0000197D 56                      		push	si
 19558 0000197E 57                      		push	di
 19559 0000197F 1E                      		push	ds
 19560                                  
 19561                                  ; point ds to the caller's dma buffer, es to Bios_Data
 19562                                  ; in other words, swap (ds, es)
 19563                                  
 19564 00001980 06                      		push	es
 19565 00001981 1E                      		push	ds
 19566 00001982 07                      		pop	es
 19567 00001983 1F                      		pop	ds
 19568 00001984 89DE                    		mov	si, bx
 19569 00001986 BF[5201]                		mov	di, disksector
 19570 00001989 E8BBFD                  		call	move_sector	; user's data into Bios_Data:disksector
 19571 0000198C 1F                      		pop	ds
 19572 0000198D 5F                      		pop	di
 19573 0000198E 5E                      		pop	si		; do the i/o from
 19574 0000198F EBDD                    		jmp	short dosimple	; Bios_Data:disksector
 19575                                  ; ---------------------------------------------------------------------------
 19576                                  
 19577                                  ; we can't fit the request into the entire block. perform the operation on
 19578                                  ; the first block.
 19579                                  ;
 19580                                  ; doblock is modified to correctly handle multi-sector disk i/o.
 19581                                  ; old doblock had added the number of sectors i/oed (ah in old doblock) after
 19582                                  ; the doint call to cl. observing only the lower 6 bits of cl(=max. 64) can
 19583                                  ; represent a starting sector, if ah was big, then cl would be clobbered.
 19584                                  ; by the way, we still are going to use cl for this purpose since checkwrap
 19585                                  ; routine will use it as an input. to prevent cl from being clobbered, a
 19586                                  ; safe number of sectors should be calculated like "63 - # of sectors/track".
 19587                                  ; doblock will handle the first block of requested sectors within the
 19588                                  ; boundary of this safe value.
 19589                                  
 19590                                  		; 26/12/2023 - Retro DOS v5.0
 19591                                  doblock:
 19592                                  
 19593                                  ; try to get the # of sectors/track from bds via rom drive number.
 19594                                  ; for any mini disks installed, here we have to pray that they have the
 19595                                  ; same # of sector/track as the main dos partition disk drive.
 19596                                  				
 19597 00001991 8B5608                  		mov	dx, [bp+8]	; [bp+INT13FRAME.olddx]
 19598                                  					; get head #, drive #
 19599 00001994 51                      		push	cx
 19600 00001995 06                      		push	es
 19601 00001996 57                      		push	di		; ah - # of sectors before dma boundary
 19602                                  					; al - requested # of sectors for i/o.
 19603 00001997 E83BFE                  		call	find_bds
 19604 0000199A 268B4D13                		mov	cx, [es:di+13h]	; [es:di+BDS.secpertrack]
 19605                                  		; 26/12/2023
 19606 0000199E 26F6453F01              		test	byte [es:di+3Fh], 1
 19607                                  		; 12/12/2022
 19608                                  		;test	byte [es:di+23h], 1
 19609                                  		;;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 19610 000019A3 5F                      		pop	di
 19611 000019A4 07                      		pop	es
 19612 000019A5 88E0                    		mov	al, ah		; set al=ah for	floppies
 19613 000019A7 7404                    		jz	short doblockflop ; they are track by track operation
 19614 000019A9 B43F                    		mov	ah, 63		; ah = 63-secpt	(# safe	sectors??)
 19615 000019AB 28CC                    		sub	ah, cl		; al - # of sectors before dma boundary
 19616                                  doblockflop:
 19617 000019AD 59                      		pop	cx
 19618                                  doblockcontinue:
 19619 000019AE 38C4                    		cmp	ah, al		; if safe_# >= #_of_sectors_to_go_before dma,
 19620 000019B0 7305                    		jnb	short doblocklast ; then #_of_sectors_to_go as it is for doint.
 19621 000019B2 50                      		push	ax
 19622 000019B3 88E0                    		mov	al, ah		; otherwise, set al to ah to operate.
 19623 000019B5 EB03                    		jmp	short doblockdoint
 19624                                  ; ---------------------------------------------------------------------------
 19625                                  
 19626                                  doblocklast:
 19627 000019B7 88C4                    		mov	ah, al
 19628 000019B9 50                      		push	ax
 19629                                  doblockdoint:				; let ah = al =	# of sectors for this shot
 19630 000019BA E82CFE                  		call	doint
 19631 000019BD 727E                    		jb	short bad13	; something happened, bye!
 19632 000019BF 58                      		pop	ax
 19633 000019C0 286602                  		sub	[bp+2],	ah	; sub [bp+INT13FRAME.oldax], ah
 19634                                  					; decrement by the successful operation
 19635 000019C3 00E1                    		add	cl, ah		; advance sector #. safety gauranteed.
 19636 000019C5 00E7                    		add	bh, ah		; advance dma addres
 19637 000019C7 00E7                    		add	bh, ah		; twice	for 512	byte sectors
 19638 000019C9 38C4                    		cmp	ah, al		; check	the previous value
 19639 000019CB 740A                    		jz	short buffer	; if #_of_sectors_to_go	< safe_#,
 19640                                  					; then we are done already.
 19641 000019CD 28E0                    		sub	al, ah		; otherwise,
 19642                                  					; #_sector_to_go = #_of_sector_to_go - safe_#
 19643 000019CF E890FD                  		call	check_wrap	; get new cx, dh for the next operation.
 19644 000019D2 EBDA                    		jmp	short doblockcontinue ;	handles	next sectors left.
 19645                                  ; ---------------------------------------------------------------------------
 19646                                  
 19647                                  bufferx:
 19648 000019D4 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 19649                                  					; set up head number
 19650                                  buffer:
 19651 000019D7 53                      		push	bx
 19652 000019D8 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 19653 000019DB 80FC03                  		cmp	ah, 3		; romwrite
 19654 000019DE 7525                    		jnz	short doread	;
 19655                                  					
 19656                                  ; copy the offending sector into local buffer
 19657                                  
 19658 000019E0 06                      		push	es
 19659 000019E1 1E                      		push	ds
 19660 000019E2 56                      		push	si
 19661 000019E3 57                      		push	di
 19662 000019E4 1E                      		push	ds		; exchange segment registers
 19663 000019E5 06                      		push	es
 19664 000019E6 1F                      		pop	ds
 19665 000019E7 07                      		pop	es
 19666 000019E8 BF[5201]                		mov	di, disksector	; where to move
 19667 000019EB 57                      		push	di		; save it
 19668 000019EC 89DE                    		mov	si, bx		; source
 19669 000019EE E856FD                  		call	move_sector	; move sector into local buffer
 19670 000019F1 5B                      		pop	bx		; new transfer address
 19671                                  					; (es:bx = Bios_Data:diskbuffer)
 19672 000019F2 5F                      		pop	di		; restore caller's di & si
 19673 000019F3 5E                      		pop	si
 19674 000019F4 1F                      		pop	ds		; restore Bios_Data
 19675                                  
 19676                                  ; see if we are wrapping around a track or head
 19677                                  
 19678 000019F5 B001                    		mov	al, 1		; [bp+INT13FRAME.olddx]
 19679                                  					; get drive number
 19680 000019F7 8A5608                  		mov	dl, [bp+8]
 19681 000019FA E865FD                  		call	check_wrap	; sets up registers if wrap-around
 19682                                  					;
 19683                                  					; ah is	function
 19684                                  					; al is	1 for single sector transfer
 19685                                  					; es:bx	is local transfer addres
 19686                                  					; cx is	track/sector number
 19687                                  					; dx is	head/drive number
 19688                                  					; si,di	unchanged
 19689 000019FD E8E9FD                  		call	doint
 19690 00001A00 07                      		pop	es		; restore caller's dma segment
 19691 00001A01 723A                    		jb	short bad13	; go clean up
 19692 00001A03 EB22                    		jmp	short dotail
 19693                                  ; ---------------------------------------------------------------------------
 19694                                  
 19695                                  ; reading a sector. do int first, then move things around
 19696                                  
 19697                                  doread:
 19698 00001A05 06                      		push	es
 19699 00001A06 53                      		push	bx
 19700 00001A07 1E                      		push	ds		; es = Bios_Code
 19701 00001A08 07                      		pop	es
 19702 00001A09 BB[5201]                		mov	bx, disksector
 19703 00001A0C B001                    		mov	al, 1
 19704 00001A0E 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 19705                                  					; get drive number
 19706 00001A11 E84EFD                  		call	check_wrap	;
 19707                                  					; ah = function
 19708                                  					; al = 1 for single sector
 19709                                  					; es:bx	points to local	buffer
 19710                                  					; cx, dx are track/sector, head/drive
 19711 00001A14 E8D2FD                  		call	doint
 19712 00001A17 5B                      		pop	bx
 19713 00001A18 07                      		pop	es
 19714 00001A19 7222                    		jb	short bad13
 19715 00001A1B 56                      		push	si
 19716 00001A1C 57                      		push	di
 19717 00001A1D 89DF                    		mov	di, bx
 19718 00001A1F BE[5201]                		mov	si, disksector
 19719 00001A22 E822FD                  		call	move_sector
 19720 00001A25 5F                      		pop	di
 19721 00001A26 5E                      		pop	si
 19722                                  
 19723                                  ; note the fact that we've done 1 more sector
 19724                                  
 19725                                  dotail:
 19726 00001A27 5B                      		pop	bx		; retrieve new dma area
 19727 00001A28 80C702                  		add	bh, 2		; advance over sector
 19728 00001A2B 41                      		inc	cx
 19729 00001A2C 8A4602                  		mov	al, [bp+2]	; [bp+INT13FRAME.oldax]
 19730 00001A2F F8                      		clc
 19731 00001A30 FEC8                    		dec	al
 19732 00001A32 7409                    		jz	short bad13	; no more i/o
 19733                                  
 19734                                  ; see if we wrap around a track or head boundary with starting sector
 19735                                  ; we already have the correct head number to pass to check_wrap
 19736                                  
 19737 00001A34 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 19738 00001A37 E828FD                  		call	check_wrap
 19739 00001A3A E8ACFD                  		call	doint
 19740                                  
 19741                                  ; we are done. ax has the final code; we throw away what we got before
 19742                                  
 19743                                  ; M046  -- okay gang. Now we've either terminated our DMA loop,
 19744                                  ;	   or we've finished. If carry is set now, our only
 19745                                  ;	   hope for salvation is that it was a read operation
 19746                                  ;	   and the error code is ECC error. In that case, we'll
 19747                                  ;	   just pop the registers and go do the old ECC thing.
 19748                                  ;	   When the DMA error that got us here in the first
 19749                                  ;	   place occurs, it'll handle it.
 19750                                  
 19751                                  bad13:
 19752 00001A3D 89EC                    		mov	sp, bp
 19753 00001A3F 5D                      		pop	bp
 19754 00001A40 5B                      		pop	bx
 19755 00001A41 5B                      		pop	bx
 19756 00001A42 59                      		pop	cx
 19757 00001A43 5A                      		pop	dx
 19758 00001A44 7203                    		jb	short xgoterr13_xxxx ; go handle ECC errors
 19759 00001A46 E935FE                  		jmp	ret_from_i13	; non-error exit
 19760                                  ; ---------------------------------------------------------------------------
 19761                                  
 19762                                  xgoterr13_xxxx:	
 19763 00001A49 E958FE                  		jmp	goterr13_xxxx
 19764                                  
 19765                                  ; ---------------------------------------------------------------------------
 19766                                  		; 10/12/2022
 19767                                  		;db 	0
 19768                                  ; ---------------------------------------------------------------------------
 19769                                  
 19770                                  ;Bios_Code ends
 19771                                  
 19772                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19773                                  
 19774                                  ;-----------------------------------------------------------------------------
 19775                                  ; MSBIO2.ASM - MSDOS 6.0 - 1991
 19776                                  ;-----------------------------------------------------------------------------
 19777                                  ; 17/03/2019 - Retro DOS v4.0
 19778                                  
 19779                                  		; 19/10/2022
 19780                                  dsk_init:				; 2C7h:1742h = 70h:3CB2h
 19781 00001A4C 8A26[7500]              		mov	ah, [drvmax]
 19782 00001A50 BF[3C05]                		mov	di, dskdrvs
 19783 00001A53 1E                      		push	ds		; pass result in es:di
 19784 00001A54 07                      		pop	es
 19785 00001A55 E932EC                  		jmp	SetPtrSav
 19786                                  
 19787                                  ; =============== S U B	R O U T	I N E =======================================
 19788                                  
 19789                                  ;---------------------------------------------------------------------------
 19790                                  ; install_bds installs a bds at location es:di into the current linked list of
 19791                                  ; bds maintained by this device driver. it places the bds at the end of the
 19792                                  ; list. Trashes (at least) ax, bx, di, si
 19793                                  ;---------------------------------------------------------------------------
 19794                                  
 19795                                  		; 26/12/2023 - Retro DOS v5.0
 19796                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1AE0h
 19797                                  install_bds:
 19798 00001A58 1E                      		push	ds		; save Bios_Data segment
 19799 00001A59 BE[1901]                		mov	si, start_bds	; beginning of chain
 19800                                  
 19801                                  		; ds:si now points to link to first bds
 19802                                  		; assume bds list is non-empty
 19803                                  loop_next_bds:
 19804 00001A5C C534                    		lds	si, [si]	; [si+BDS.link]
 19805                                  					; fetch	next bds
 19806 00001A5E 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 19807 00001A62 384404                  		cmp	[si+4],	al	; does this one	share a	physical
 19808                                  					; drive	with new one?
 19809 00001A65 7518                    		jnz	short next_bds
 19810 00001A67 B310                    		mov	bl, 10h		; fi_am_mult
 19811                                  		; 26/12/2023
 19812 00001A69 26085D3F                		or	[es:di+3Fh], bl
 19813                                  		;or	[es:di+23h], bl	; [es:di+BDS.flags]
 19814                                  					; set both of them to i_am_mult	if so
 19815 00001A6D 085C3F                  		or	[si+3Fh], bl
 19816                                  		;or	[si+23h], bl	; [si+BDS.flags]
 19817 00001A70 2680653FDF              		and	byte [es:di+3Fh], 0DFh
 19818                                  		;and	byte [es:di+23h], 0DFh ; [es:di+BDS.flags],~fi_own_physical
 19819                                  					; we don't own it
 19820 00001A75 8A5C3F                  		mov	bl, [si+3Fh]
 19821                                  		;mov	bl, [si+23h]	; [si+BDS.flags]
 19822                                  					; determine if changeline available
 19823 00001A78 80E302                  		and	bl, 2		; fchangeline
 19824 00001A7B 26085D3F                		or	[es:di+3Fh], bl
 19825                                  		;or	[es:di+23h], bl	; [es:di+BDS.flags]
 19826                                  next_bds:
 19827                                  		; 02/09/2023 (PCDOS 7.1)
 19828 00001A7F B8FFFF                  		mov	ax, 0FFFFh	; -1
 19829 00001A82 3904                    		cmp	[si], ax	; [si+BDS.link],-1
 19830                                  		;cmp	word [si], 0FFFFh ; [si+BDS.link],-1
 19831                                  					; are we at end	of list?
 19832 00001A84 75D6                    		jnz	short loop_next_bds
 19833 00001A86 8C4402                  		mov	[si+2], es	; [si+BDS.link+2],es
 19834                                  					; install bds
 19835 00001A89 893C                    		mov	[si], di
 19836 00001A8B 268905                  		mov	[es:di], ax	; [es:di+BDS.link],-1
 19837                                  		;mov	word [es:di], 0FFFFh ; [es:di+BDS.link],-1
 19838                                  					; set next pointer to null
 19839 00001A8E 1F                      		pop	ds
 19840                                  
 19841                                  ; 01/07/2023 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS - BIOSCODE:1785h)
 19842                                  ; 16/10/2022 (MSDOS 6.0 Code)
 19843                                  
 19844                                  ; **** If the new drive has a higher EOT value, we must alter the
 19845                                  ;      'eot' variable appropriately.
 19846                                  
 19847                                  		; 26/12/2023
 19848 00001A8F 268A4550                		mov	al, [es:di+50h]	; [es:di+BDS.rsecpertrack]
 19849                                  		; 01/06/2019
 19850                                  		;mov	al,[es:di+52]
 19851                                  		; 22/07/2023
 19852                                  		;mov	al,[es:di+BDS.rsecpertrack]
 19853 00001A93 3A06[2C01]              		cmp	al,[eot]
 19854 00001A97 7603                    		jbe	short _eot_ok
 19855 00001A99 A2[2C01]                		mov	[eot],al
 19856                                  _eot_ok:
 19857 00001A9C C3                      		retn
 19858                                  
 19859                                  ; ---------------------------------------------------------------------------
 19860                                  
 19861                                  ; 17/10/2022
 19862                                  ;DRVLET	equ drvlet - DOSBIOSEG_2C7h
 19863                                  ;SNGMSG	equ sngmsg - DOSBIOSEG_2C7h
 19864                                  ; 09/12/2022
 19865                                  DRVLET equ drvlet
 19866                                  SNGMSG equ sngmsg
 19867                                  
 19868                                  ; 16/10/2022
 19869                                  
 19870                                  ;---------------------------------------------------------------------------
 19871                                  ;  ask to swap the disk in drive a:
 19872                                  ;	es:di -> bds
 19873                                  ;	ds -> Bios_Data
 19874                                  ;---------------------------------------------------------------------------
 19875                                  
 19876                                  		; 26/12/2023 - Retro DOS v5.0
 19877                                  
 19878                                  		; 19/10/2022
 19879 00001A9D F606[1208]01            swpdsk:		test	byte [IsWin386], 1
 19880                                  		;test	ds:IsWin386, 1	; Is win386 present?
 19881 00001AA2 7405                    		jz	short no_win386	; no, skip SetFocus
 19882                                  		
 19883                                  		; set focus to the correct VM
 19884                                  		;call	far ptr 70h:813h ; PCDOS 7.1 IBMBIO.COM BIOSCODE:1B2Ch
 19885                                  		;;call	far 70h:8D1h	; MSDOS 6.21 IO.SYS BIOSCODE:179Ah
 19886                                  		; 17/10/2022
 19887 00001AA4 9A[1308]7000            		call	DOSBIOSSEG:V86_Crit_SetFocus ; BIOSDATA:V86_Crit_SetFocus
 19888                                  		;call	far ptr	V86_Crit_SetFocus ; call far 70h:8D1h
 19889                                  					; call far KERNEL_SEGMENT:V86_Crit_SetFocus
 19890                                  no_win386:
 19891 00001AA9 51                      		push	cx
 19892 00001AAA 52                      		push	dx
 19893 00001AAB 268A5505                		mov	dl, [es:di+5]	; [es:di+BDS.drivelet]
 19894                                  					; get the drive	letter
 19895                                  
 19896                                  ; WARNING : next two instructions assume that if the new disk is for drive B
 19897                                  ;           then existing dsk is drive A & vice versa
 19898                                  
 19899 00001AAF 88D6                    		mov	dh, dl
 19900 00001AB1 80F601                  		xor	dh, 1
 19901 00001AB4 29C9                    		sub	cx, cx		; nobody has handled swap disk
 19902 00001AB6 B8004A                  		mov	ax, 4A00h	; multMULT<<8)|multMULTSWPDSK
 19903                                  					; broad	cast code for swap disk
 19904                                  					; Broadcast it
 19905 00001AB9 CD2F                    		int	2Fh
 19906 00001ABB 41                      		inc	cx		; cx == -1 ?
 19907 00001ABC 741E                    		jz	short swpdsk9	; somebody has handled it
 19908                                  
 19909                                  ; using a different drive in a one drive system so request the user change disks
 19910                                  
 19911 00001ABE 80C241                  		add	dl, 'A'
 19912                                  		; 17/10/2022
 19913 00001AC1 2E8816[FB1A]            		mov	[cs:DRVLET], dl	; "A: and press any key when ready\r\n\n"
 19914                                  		; 16/10/2022
 19915                                  		;;mov	byte [cs:drvlet], dl
 19916                                  		;mov	byte ptr cs:17E4h, dl ; [cs:drvlet]
 19917                                  					; 0070h:3D54h =	2C7h:17E4h
 19918 00001AC6 BE[DF1A]                		mov	si, SNGMSG	; "\r\nInsert diskette for drive "
 19919                                  		;mov	si, 17C8h	; sngmsg
 19920                                  					; 0070h:3D38h =	2C7h:17C8h
 19921 00001AC9 53                      		push	bx
 19922 00001ACA 2E                      		cs
 19923 00001ACB AC                      		lodsb			; get the next character of the message
 19924                                  		;lods	byte ptr cs:[si]
 19925                                  wrmsg_loop:
 19926 00001ACC CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
 19927                                  					; AL = character to display
 19928 00001ACE 2E                      		cs
 19929 00001ACF AC                      		lodsb
 19930                                  		;lods	byte ptr cs:[si] ; cs lodsb
 19931                                  					; get the next character of the	message
 19932 00001AD0 08C0                    		or	al, al
 19933 00001AD2 75F8                    		jnz	short wrmsg_loop
 19934 00001AD4 E831E7                  		call	con_flush	; flush out keyboard queue
 19935                                  					; call rom-bios
 19936 00001AD7 30E4                    		xor	ah, ah
 19937 00001AD9 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
 19938                                  					; Return: AH = scan code, AL = character
 19939 00001ADB 5B                      		pop	bx
 19940                                  swpdsk9:
 19941 00001ADC 5A                      		pop	dx
 19942 00001ADD 59                      		pop	cx
 19943 00001ADE C3                      		retn
 19944                                  
 19945                                  ; ---------------------------------------------------------------------------
 19946                                  
 19947                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19948                                  
 19949                                  ;--------------------------------------------------------
 19950                                  ; include msbio.cl2 (MSDOS 6.0, 1991)
 19951                                  ;--------------------------------------------------------
 19952                                  ; (MSDOS 6.21 IO.SYS BIOSCODE:17D5h)
 19953                                  ;--------------------------------------------------------
 19954                                  ; 17/03/2019 - Retro DOS v4.0
 19955                                  ; 26/12/2023 - Retro DOS v5.0
 19956                                  
 19957                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D38h or 02C7h:17C8h
 19958                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1B67h
 19959 00001ADF 0D0A                    sngmsg:		db 0Dh,0Ah
 19960 00001AE1 496E73657274206469-     		db 'Insert diskette for drive '
 19960 00001AEA 736B6574746520666F-
 19960 00001AF3 7220647269766520   
 19961                                  
 19962                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D54h or 02C7h:17E4h
 19963                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1B83h
 19964 00001AFB 413A20616E64207072-     drvlet:		db 'A: and press any key when ready',0Dh,0Ah
 19964 00001B04 65737320616E79206B-
 19964 00001B0D 6579207768656E2072-
 19964 00001B16 656164790D0A       
 19965 00001B1C 0A00                    		db 0Ah,0
 19966                                  
 19967                                  ; =============== S U B	R O U T	I N E =======================================
 19968                                  
 19969                                  ;---------------------------------------------------------------------------
 19970                                  ; input : es:di points to current bds for drive.
 19971                                  ; return : zero set if no open files
 19972                                  ;	   zero reset if open files
 19973                                  ;---------------------------------------------------------------------------
 19974                                  
 19975                                  		; 26/12/2023 - Retro DOS v5.0
 19976                                  chkopcnt:	
 19977 00001B1E 26837D3C00              		cmp     word [es:di+3Ch], 0
 19978                                  		;cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 19979 00001B23 C3                      		retn
 19980                                  
 19981                                  ; =============== S U B	R O U T	I N E =======================================
 19982                                  
 19983                                  ;---------------------------------------------------------------------------
 19984                                  ; at media check time, we need to really get down and check what the change is.
 19985                                  ; this is guaranteed to be expensive.
 19986                                  ;
 19987                                  ;	es:di -> bds, ds -> Bios_Data
 19988                                  ;---------------------------------------------------------------------------
 19989                                  
 19990                                  		; 26/12/2023 - Retro DOS v5.0
 19991                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1BA6h
 19992                                  mediacheck:
 19993 00001B24 E850EE                  		call	checksingle	; make sure correct disk is in place
 19994 00001B27 31F6                    		xor	si, si
 19995 00001B29 E86101                  		call	haschange
 19996 00001B2C 742F                    		jz	short mediaret
 19997                                  		; 26/12/2023
 19998                                  		;test	byte [es:di+3Fh], 40h ; [es:di+BDS.flags], fchanged ; 40h
 19999 00001B2E E85001                  		call	checkromchange
 20000 00001B31 752B                    		jnz	short mediadovolid
 20001 00001B33 50                      		push	ax
 20002 00001B34 52                      		push	dx
 20003 00001B35 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 20004                                  					; set logical drive number
 20005 00001B39 B416                    		mov	ah, 16h
 20006 00001B3B CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 20007                                  					; DL = drive to	check
 20008                                  					; Return: AH = disk change status
 20009 00001B3D 5A                      		pop	dx
 20010 00001B3E 58                      		pop	ax
 20011 00001B3F 721D                    		jb	short mediadovolid
 20012 00001B41 BE0100                  		mov	si, 1		; signal no change
 20013                                  
 20014                                  ; there are some drives with changeline that "lose" the changeline indication
 20015                                  ; if a different drive is accessed after the current one. in order to avoid
 20016                                  ; missing a media change, we return an "i don't know" to dos if the changeline
 20017                                  ; is not active and we are accessing a different drive from the last one.
 20018                                  ; if we are accessing the same drive, then we can safely rely on the changeline
 20019                                  ; status.
 20020                                  		; 19/10/2022
 20021 00001B44 8A1E[1E01]              		mov	bl, [tim_drv]	; get last drive accessed
 20022 00001B48 26385D04                		cmp	[es:di+4], bl	; [es:di+BDS.drivenum]
 20023                                  					; (If the last drive accessed is not current drive
 20024                                  					; media	change status may be incorrect.	So,
 20025                                  					; "I don't now" will be returned even if it is indicated
 20026                                  					; as media is not changed.)
 20027 00001B4C 740F                    		jz	short mediaret	; (same	drive,
 20028                                  					; media	changeline indication is reliable)
 20029                                  
 20030                                  ; do the 2 second twiddle. if time >= 2 seconds, do a volid check.
 20031                                  ; otherwise return "i don't know" (strictly speaking, we should return a
 20032                                  ; "not changed" here since the 2 second test said no change.)
 20033                                  
 20034 00001B4E 50                      		push	ax
 20035 00001B4F 51                      		push	cx
 20036 00001B50 52                      		push	dx
 20037 00001B51 E8D6EA                  		call	Check_Time_Of_Access
 20038 00001B54 5A                      		pop	dx
 20039 00001B55 59                      		pop	cx
 20040 00001B56 58                      		pop	ax
 20041 00001B57 09F6                    		or	si, si
 20042 00001B59 7403                    		jz	short mediadovolid ; check_time	says ">= 2 secs	passed"
 20043                                  					; (volume id will be checked)
 20044 00001B5B 31F6                    		xor	si, si		; return "i don't know"
 20045                                  mediaret:
 20046 00001B5D C3                      		retn
 20047                                  ; ---------------------------------------------------------------------------
 20048                                  
 20049                                  ; somehow the media was changed. look at vid to see. we do not look at fat
 20050                                  ; because this may be different since we only set medbyt when doing a read
 20051                                  ; or write.
 20052                                  
 20053                                  mediadovolid:
 20054 00001B5E E875EB                  		call	GetBp		; build	a new bpb in current bds
 20055 00001B61 72FA                    		jb	short mediaret
 20056 00001B63 E82D00                  		call	check_vid
 20057 00001B66 73F5                    		jnb	short mediaret
 20058 00001B68 E93BF2                  		jmp	maperror	; fix up al for	return to dos
 20059                                  ; ---------------------------------------------------------------------------
 20060                                  
 20061                                  ; simple, quick check of latched change. if no indication, then return
 20062                                  ; otherwise do expensive check. if the expensive test fails, pop off the
 20063                                  ; return and set al = 15 (for invalid media change) which will be returned to
 20064                                  ; dos.
 20065                                  ;
 20066                                  ; for dos 3.3, this will work only for the drive that has changeline.
 20067                                  
 20068                                  ;	call with es:di -> bds, ds -> Bios_Data
 20069                                  ;	***** warning:  this routine will return one level up on the stack
 20070                                  ;			if an error occurs!
 20071                                  
 20072                                  checklatchio:
 20073                                  
 20074                                  ; if returning fake bpb then assume the disk has not changed
 20075                                  
 20076                                  		; 26/12/2023
 20077                                  		;cmp	word [es:di+3Ch], 0 ; [es:di+BDS.opcnt]	
 20078 00001B6B E8B0FF                  		call	chkopcnt
 20079 00001B6E 741B                    		jz	short checkret	; done if zero
 20080                                  
 20081                                  ; check for past rom indications. if no rom change indicated, then return ok.
 20082                                  
 20083                                  		; 26/12/2023
 20084                                  		;test	word [es:di+3Fh], 40h
 20085                                  		;			; test [es:di+BDS.flags], fchanged ; 40h
 20086 00001B70 E80E01                  		call	checkromchange
 20087 00001B73 7416                    		jz	short checkret
 20088                                  
 20089                                  ; we now see that a change line has been seen in the past. let's do the
 20090                                  ; expensive verification.
 20091                                  
 20092 00001B75 E85EEB                  		call	GetBp		; build	bpb in current bds
 20093 00001B78 720F                    		jb	short ret_no_error_map ; getbp has already called maperror
 20094 00001B7A E81600                  		call	check_vid
 20095 00001B7D 7207                    		jb	short checklatchret ; disk error trying	to read	in.
 20096 00001B7F 09F6                    		or	si, si		; is changed for sure?
 20097 00001B81 7908                    		jns	short checkret
 20098 00001B83 E88F00                  		call	returnvid
 20099                                  checklatchret:
 20100 00001B86 E81DF2                  		call	maperror	; fix up al for	return to dos
 20101                                  ret_no_error_map:
 20102 00001B89 F9                      		stc
 20103 00001B8A 5E                      		pop	si		; pop off return address
 20104                                  checkret:
 20105 00001B8B C3                      		retn
 20106                                  ; ---------------------------------------------------------------------------
 20107                                  
 20108                                  ; check the fat and the vid. return in di -1 or 0. return with carry set
 20109                                  ; only if there was a disk error. return that error code in ax.
 20110                                  ;
 20111                                  ;	called with es:di -> bds, ds -> Bios_Data
 20112                                  
 20113                                  checkfatvid:
 20114 00001B8C E8D101                  		call	fat_check	; check	the fat	and the	vid
 20115 00001B8F 09F6                    		or	si, si
 20116 00001B91 7835                    		js	short changed_drv
 20117                                  
 20118                                  ; the fat was the same. fall into check_vid and check volume id.
 20119                                  
 20120                                  		; fall into check_vid
 20121                                  
 20122                                  ; =============== S U B	R O U T	I N E =======================================
 20123                                  
 20124                                  ; now with the extended boot record, the logic should be enhanced.
 20125                                  ;
 20126                                  ; if it is the extended boot record, then we check the volume serial
 20127                                  ; number instead of volume id. if it is different, then set si to -1.
 20128                                  ;
 20129                                  ; if it is same, then si= 1 (no change).
 20130                                  ;
 20131                                  ; if it is not the extended boot record, then just follows the old
 20132                                  ; logic. dos 4.00 will check if the # of fat in the boot record bpb
 20133                                  ; is not 0.  if it is 0 then it must be non_fat based system and
 20134                                  ; should have already covered by extended boot structure checking.
 20135                                  ; so, we will return "i don't know" by setting si to 0.
 20136                                  ;
 20137                                  ; this routine assume the newest valid boot record is in cs:[disksector].
 20138                                  ; (this will be gauranteed by a successful getbp call right before this
 20139                                  ; routine.)
 20140                                  ;
 20141                                  ;	called with es:di -> bds, ds -> bds
 20142                                  
 20143                                  		; 26/12/2023 - Retro DOS v5.0
 20144                                  		; 19/10/2022
 20145                                  check_vid:
 20146                                  
 20147                                  ; check the disksector.EXT_BOOT_SIG variable for the extended
 20148                                  ; boot signature. if it is set then go to do the extended
 20149                                  ; id check otherwise continue with code below
 20150                                  
 20151                                  		; 26/12/2023
 20152                                  		;;;
 20153 00001B93 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB_FATSz16
 20154 00001B98 7507                    		jnz     short chk_vid_1
 20155 00001B9A 803E[9401]29            		cmp     byte [disksector+42h], 29h ; BS_FAT32_BootSig
 20156                                  					; [disksector+EXT_BOOT.SIG],EXT_BOOT_SIGNATURE
 20157 00001B9F EB05                    		jmp     short chk_vid_2
 20158                                  chk_vid_1:
 20159                                  		;;;
 20160 00001BA1 803E[7801]29            		cmp	byte [disksector+26h], 29h
 20161                                  					; [disksector+EXT_BOOT.SIG],
 20162                                  					; EXT_BOOT_SIGNATURE
 20163                                  chk_vid_2:		; 26/12/2023
 20164 00001BA6 7427                    		jz	short do_ext_check_id
 20165 00001BA8 E8E200                  		call	haschange
 20166 00001BAB 74DE                    		jz	short checkret
 20167 00001BAD 31F6                    		xor	si, si
 20168 00001BAF 803E[6201]00            		cmp	byte [disksector+10h], 0 ; BPB_NumFATs
 20169                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
 20170 00001BB4 7411                    		jz	short checkfatret ; don't read vol id
 20171                                  					; if not fat system
 20172 00001BB6 E8F400                  		call	read_volume_id
 20173 00001BB9 720C                    		jb	short checkfatret
 20174 00001BBB E89901                  		call	check_volume_id
 20175 00001BBE BEFFFF                  		mov	si, 0FFFFh	; -1
 20176                                  					; definitely changed
 20177 00001BC1 7505                    		jnz	short changed_drv
 20178                                  
 20179 00001BC3 46                      		inc	si		; not changed
 20180                                  vid_no_changed:
 20181 00001BC4 E8C000                  		call	resetchanged
 20182                                  		; 12/12/2022
 20183                                  		; cf=0 ('and' instruction in 'resetchanged' clears cf) 
 20184                                  		;clc
 20185                                  checkfatret:
 20186 00001BC7 C3                      		retn
 20187                                  ; ---------------------------------------------------------------------------
 20188                                  
 20189                                  		; 12/12/2022
 20190                                  changed_drv:
 20191 00001BC8 F8                      		clc			; cas -- return	no error
 20192 00001BC9 C606[1E01]FF            		mov	byte  [tim_drv], 0FFh 
 20193                                  					; ensure that we ask rom for media
 20194 00001BCE C3                      		retn			; check	next time round
 20195                                  ; ---------------------------------------------------------------------------
 20196                                  
 20197                                  ; extended id check
 20198                                  
 20199                                  ; 16/10/2022
 20200                                  
 20201                                  ; the code to check extended id is basically a check to see if the
 20202                                  ; volume serial number is still the same. the volume serial number
 20203                                  ; previously read is in cs:disksector.EXT_BOOT_SERIAL
 20204                                  ; ds:di points to the bds of the drive under consideration.
 20205                                  ; the bds has fields containing the high and low words 
 20206                                  ; of the volume serial number of the media in the drive.
 20207                                  ; compare these fields to the fields mentioned above. if these fields
 20208                                  ; do not match the media has changed and so we should jump to the code
 20209                                  ; starting at ext_changed else return "i don't know" status
 20210                                  ; in the register used for the changeline status and continue executing
 20211                                  ; the code given below. for temporary storage use the register which
 20212                                  ; has been saved and restored around this block.
 20213                                  ;
 20214                                  ; bds fields in inc\msbds.inc
 20215                                  
 20216                                  		; 26/12/2023 - Retro DOS v5.0
 20217                                  		; 19/10/2022
 20218                                  do_ext_check_id:
 20219                                  		; 26/12/2023
 20220                                  		;push	ax
 20221                                  		;;mov	ax, word ptr ds:disksector+27h
 20222                                  		;			; [DiskSector+EXT_BOOT.SERIAL]
 20223                                  		;mov	ax, [disksector+27h]
 20224                                  ; 26/12/2023
 20225                                  %if 1
 20226                                  		;;;
 20227 00001BCF 57                      		push	di
 20228 00001BD0 BE[9501]                		mov	si, disksector+43h ; BS_FAT32_VolID
 20229                                  					; [DiskSector+FAT32_EXT_BOOT.SERIAL]
 20230 00001BD3 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB_FATSz16
 20231 00001BD8 7403                    		jz	short chk_vid_3
 20232 00001BDA 83EE1C                  		sub	si, 28		; BS_VolID
 20233                                  		; si = disksector+27h	; [DiskSector+EXT_BOOT.SERIAL]
 20234                                  chk_vid_3:
 20235                                  		; [es:di+89h] = [es:di+BDS.vol_serial]
 20236 00001BDD 81C78900                		add	di, 137		; BDS.vol_serial
 20237 00001BE1 A7                      		cmpsw	; [DiskSector+EXT_BOOT.SERIAL] ; (or FAT32_EXT_BOOT)
 20238                                  			;		= [di+BDS.vol_serial] ?
 20239 00001BE2 7501                    		jnz	short chk_vid_4
 20240 00001BE4 A7                      		cmpsw	; [DiskSector+EXT_BOOT.SERIAL+2] ; (or FAT32_EXT_BOOT)
 20241                                  			;		= [di+BDS.vol_serial+2] ?
 20242                                  chk_vid_4:
 20243 00001BE5 5F                      		pop	di
 20244                                  		;pop	ax
 20245 00001BE6 7504                    		jnz	short ext_changed ; not equal/same
 20246 00001BE8 31F6                    		xor	si, si 		 ; 0 ; don't know
 20247 00001BEA EBD8                    		jmp	short vid_no_changed ; reset the flag
 20248                                  		;;;
 20249                                  %else
 20250                                  		; 02/09/2023
 20251                                  		xor	si, si ; 0
 20252                                  		cmp	ax, [es:di+57h]	; [di+BDS.vol_serial]
 20253                                  		jnz	short ext_changed
 20254                                  		mov	ax, [disksector+29h] ; [DiskSector+EXT_BOOT.SERIAL+2]
 20255                                  		cmp	ax, [es:di+59h]	; [di+BDS.vol_serial+2]
 20256                                  		jnz	short ext_changed
 20257                                  		;xor	si, si		; 0
 20258                                  					; don't know
 20259                                  		pop	ax
 20260                                  		jmp	short vid_no_changed
 20261                                  					; reset the flag
 20262                                  %endif
 20263                                  
 20264                                  ; ---------------------------------------------------------------------------
 20265                                  
 20266                                  ext_changed:
 20267                                  		; 26/12/2023
 20268                                  		;pop	ax
 20269                                  		; 02/09/2023
 20270                                  		;dec	si ; mov si, 0FFFFh ; -1
 20271 00001BEC BEFFFF                  		mov	si, 0FFFFh	; -1
 20272                                  					; disk changed!
 20273                                  		; 12/12/2022
 20274                                  		; ('changed_drv' clears cf)
 20275                                  		;clc
 20276 00001BEF EBD7                    		jmp	short changed_drv
 20277                                  
 20278                                  ; ---------------------------------------------------------------------------
 20279                                  
 20280                                  ; at i/o time, we detected the error. now we need to determine whether the
 20281                                  ; media was truly changed or not. we return normally if media change unknown.
 20282                                  ; and we pop off the call and jmp to harderr if we see an error.
 20283                                  ;
 20284                                  ; es:di -> bds
 20285                                  
 20286                                  checkio:				
 20287 00001BF1 80FC06                  		cmp	ah, 6
 20288 00001BF4 75D1                    		jnz	short checkfatret
 20289 00001BF6 E825FF                  		call	chkopcnt
 20290 00001BF9 74CC                    		jz	short checkfatret
 20291 00001BFB E8D8EA                  		call	GetBp
 20292 00001BFE 7212                    		jb	short no_error_map
 20293 00001C00 E889FF                  		call	checkfatvid
 20294 00001C03 7209                    		jb	short checkioret ; disk	error trying to	read in.
 20295 00001C05 09F6                    		or	si, si		; is changed for sure?
 20296 00001C07 7802                    		js	short checkioerr ; yes changed
 20297 00001C09 45                      		inc	bp		; allow	a retry
 20298 00001C0A C3                      		retn
 20299                                  ; ---------------------------------------------------------------------------
 20300                                  
 20301                                  checkioerr:				
 20302 00001C0B E80700                  		call	returnvid
 20303                                  
 20304                                  checkioret:				
 20305 00001C0E F9                      		stc			; make sure carry gets passed through
 20306 00001C0F E950F1                  		jmp	harderr
 20307                                  ; ---------------------------------------------------------------------------
 20308                                  
 20309                                  no_error_map:				
 20310 00001C12 E950F1                  		jmp	harderr2
 20311                                  
 20312                                  ; =============== S U B	R O U T	I N E =======================================
 20313                                  
 20314                                  ; return vid sets up the vid for a return to dos.
 20315                                  ;  es:di -> bds, returns pointer in packet to bds_volid
 20316                                  ;  **** trashes si! ****
 20317                                  
 20318                                  returnvid:		
 20319 00001C15 BE1600                  		mov	si, 22		; extra
 20320                                  					; offset into pointer to return	value
 20321 00001C18 E80700                  		call	vid_into_packet
 20322 00001C1B B406                    		mov	ah, 6
 20323 00001C1D F9                      		stc
 20324 00001C1E C3                      		retn
 20325                                  
 20326                                  ; ---------------------------------------------------------------------------
 20327                                  
 20328                                  ; moves the pointer to the volid for the drive into the original request packet
 20329                                  ; no attempt is made to preserve registers.
 20330                                  ;
 20331                                  ; assumes es:di -> bds
 20332                                  ; **trashes si**
 20333                                  
 20334                                  media_set_vid:				
 20335 00001C1F BE0F00                  		mov	si, 15		; trans+1
 20336                                  					; return the value here	in packet
 20337                                  
 20338                                  		; fall into vid_into_packet
 20339                                  
 20340                                  ; =============== S U B	R O U T	I N E =======================================
 20341                                  
 20342                                  ; return pointer to vid in bds at es:di in packet[si]
 20343                                  
 20344                                  		; 19/10/2022
 20345                                  vid_into_packet:
 20346 00001C22 1E                      		push	ds		; return pointer to vid	in bds at es:di	in packet[si]
 20347 00001C23 C51E[1200]              		lds	bx, [ptrsav]
 20348 00001C27 83C74B                  		add	di, 75		; BDS.volid
 20349 00001C2A 8938                    		mov	[bx+si], di
 20350 00001C2C 83EF4B                  		sub	di, 75		; BDS.volid
 20351 00001C2F 8C4002                  		mov	[bx+si+2], es
 20352 00001C32 1F                      		pop	ds
 20353                                  dofloppy:	; 18/12/2022
 20354 00001C33 C3                      		retn
 20355                                  
 20356                                  ; ---------------------------------------------------------------------------
 20357                                  
 20358                                  ;----------------------------------------------------------------------------
 20359                                  ;   hidensity - examine a drive/media descriptor to set the media type. if
 20360                                  ;   the media descriptor is not f9 (not 96tpi or 3 1/2), we return and let the
 20361                                  ;   caller do the rest. otherwise, we pop off the return and jump to the tail
 20362                                  ;   of getbp. for 3.5" media, we just return.
 20363                                  ;
 20364                                  ;   inputs:	es:di point to correct bds for this drive
 20365                                  ;		ah has media byte
 20366                                  ;
 20367                                  ;   outputs:	carry clear
 20368                                  ;		    no registers modified
 20369                                  ;		carry set
 20370                                  ;		    al = sectors/fat
 20371                                  ;		    bh = number of root directory entries
 20372                                  ;		    bl = sectors per track
 20373                                  ;		    cx = number of sectors
 20374                                  ;		    dh = sectors per allocation unit
 20375                                  ;		    dl = number of heads
 20376                                  ;
 20377                                  ;----------------------------------------------------------------------------
 20378                                  
 20379                                  		; 26/12/2023 - Retro DOS v5.0
 20380                                  hidensity:
 20381                                  
 20382                                  ; check for correct drive
 20383                                  		
 20384                                  		; 26/12/2023
 20385 00001C34 26F6453F02              		test	byte [es:di+3Fh], 2 ; is it special?
 20386                                  		; 12/12/2022
 20387                                  		;test	byte [es:di+23h], 2
 20388                                  		;;test	word [es:di+23h], 2 ; is it special?
 20389                                  					; [es:di+BDS.flags], fchangeline
 20390 00001C39 74F8                    		jz	short dofloppy	; no, do normal floppy test
 20391                                  
 20392                                  ; we have a media byte that is pretty complex. examine drive information
 20393                                  ; table to see what kind it is.
 20394                                  
 20395                                  		; 26/12/2023
 20396 00001C3B 26807D3E02              		cmp	byte [es:di+3Eh], 2 ; is it single-media?
 20397                                  		;cmp	byte [es:di+22h], 2 ; is it single-media?
 20398 00001C40 74F1                    		jz	short dofloppy	; [es:di+BDS.formfactor], ffSmall
 20399                                  					; yes, use fatid...
 20400                                  ; 96 tpi drive?
 20401 00001C42 80FCF9                  		cmp	ah, 0F9h
 20402 00001C45 75EC                    		jnz	short dofloppy
 20403                                  
 20404                                  ;------ If formfactor of drive = ffother or ff288 it has to be
 20405                                  ;------ a 720K diskette
 20406                                  
 20407                                  		; 02/09/2023 (PCDOS 7.1)
 20408                                  		; 26/12/2023
 20409 00001C47 268A453E                		mov	al, [es:di+3Eh] ; [es:di+BDS.formfactor]
 20410                                  		;mov	al, [es:di+22h]	; [es:di+BDS.formfactor]
 20411 00001C4B 3C07                    		cmp	al, 7
 20412                                  		;cmp	byte [es:di+22h], 7 ; [es:di+BDS.formfactor]
 20413                                  					; ffOther
 20414 00001C4D 7413                    		jz	short Is720K
 20415 00001C4F 3C09                    		cmp	al, 9
 20416                                  		;cmp	byte [es:di+22h], 9 ; [es:di+BDS.formfactor]
 20417                                  					; ff288
 20418 00001C51 740F                    		jz	short Is720K
 20419 00001C53 B007                    		mov	al, 7		; seven	sectors	/ fat
 20420 00001C55 BB0FE0                  		mov	bx, 57359	; 224*256+0Fh
 20421                                  					; 224 root dir entries
 20422                                  					; & 0Fh sector max
 20423 00001C58 B96009                  		mov	cx, 2400	; 80*15*2
 20424                                  					; 80 tracks, 15 sectors/track,
 20425                                  					; 2 sides
 20426                                  		; 02/09/2023
 20427 00001C5B 5A                      		pop	dx		; pop off return address
 20428 00001C5C BA0201                  		mov	dx, 258		; 1*256+2
 20429                                  					; sectors/allocation unit
 20430                                  					; & head max
 20431                                  		;add	sp, 2		; pop off return address
 20432 00001C5F E9E8EA                  		jmp	Has1		; return to tail of getbp
 20433                                  ; ---------------------------------------------------------------------------
 20434                                  
 20435                                  Is720K:
 20436                                  		; 02/09/2023
 20437 00001C62 5B                      		pop	bx		; pop off return address
 20438                                  		;add	sp, 2		; pop off return address
 20439 00001C63 E9A7EA                  		jmp	Has720K		; return to 720K code
 20440                                  ; ---------------------------------------------------------------------------
 20441                                  
 20442                                  		; 18/12/2022
 20443                                  ;dofloppy:
 20444                                  		;retn
 20445                                  
 20446                                  ; =============== S U B	R O U T	I N E =======================================
 20447                                  
 20448                                  ; 16/10/2022
 20449                                  
 20450                                  ;---------------------------------------------------------------------------
 20451                                  ; set_changed_dl - sets flag bits according to bits set in bx.
 20452                                  ;		   essentially used to indicate changeline, or format.
 20453                                  ;
 20454                                  ;   inputs:	dl contains physical drive number
 20455                                  ;		bx contains bits to set in the flag field in the bdss
 20456                                  ;   outputs:	none
 20457                                  ;   registers modified: flags
 20458                                  ;
 20459                                  ;	called from int13 hooker.  Must preserve ALL registers!!!
 20460                                  ;
 20461                                  ; in the virtual drive system we *must* flag the other drives as being changed
 20462                                  ;---------------------------------------------------------------------------
 20463                                  
 20464                                  		; 26/12/2023 - Retro DOS v5.0
 20465                                  set_changed_dl:	
 20466 00001C66 06                      		push	es
 20467 00001C67 57                      		push	di
 20468                                  		;les	di, ds:start_bds
 20469                                  		; 19/10/2022
 20470 00001C68 C43E[1901]              		les	di, [start_bds]
 20471                                  
 20472                                  ; note: we assume that the list is non-empty
 20473                                  
 20474                                  scan_bds:
 20475 00001C6C 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 20476 00001C70 7504                    		jnz	short get_next_bds
 20477                                  
 20478                                  ; someone may complain, but this *always* must be done when a disk change is
 20479                                  ; noted. there are *no* other compromising circumstances.
 20480                                  
 20481                                  		; 26/12/2023
 20482 00001C72 26095D3F                		or	[es:di+3Fh], bx	; [es:di+BDS.flags]
 20483                                  		;or	[es:di+23h], bx	; [es:di+BDS.flags]
 20484                                  					; signal change	on other drive
 20485                                  get_next_bds:
 20486 00001C76 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 20487                                  					; go to	next bds
 20488 00001C79 83FFFF                  		cmp	di, 0FFFFh
 20489 00001C7C 75EE                    		jnz	short scan_bds	; loop unless we hit end of chain
 20490 00001C7E 5F                      		pop	di
 20491 00001C7F 07                      		pop	es
 20492 00001C80 C3                      		retn
 20493                                  
 20494                                  ; =============== S U B	R O U T	I N E =======================================
 20495                                  
 20496                                  ;---------------------------------------------------------------------------
 20497                                  ; checkromchange - see if external program has diddled rom change line.
 20498                                  ;
 20499                                  ;   inputs:	es:di points to current bds.
 20500                                  ;   outputs:	zero set - no change
 20501                                  ;		zero reset - change
 20502                                  ;   registers modified: none
 20503                                  ;---------------------------------------------------------------------------
 20504                                  
 20505                                  		; 26/12/2023 - Retro DOS v5.0
 20506                                  checkromchange:	
 20507                                  		;test	word [es:di+BDS.flags], fchanged ; 40h
 20508                                  		; 26/12/2023
 20509 00001C81 26F6453F40              		test	byte [es:di+3Fh], 40h
 20510                                  		; 10/12/2022
 20511                                  		;test	byte [es:di+23h], 40h
 20512                                  		;;test	word [es:di+23h], 40h ; [es:di+BDS.flags]
 20513                                  					; fchanged
 20514 00001C86 C3                      		retn
 20515                                  
 20516                                  ; =============== S U B	R O U T	I N E =======================================
 20517                                  
 20518                                  ;---------------------------------------------------------------------------
 20519                                  ; resetchanged - restore value of change line
 20520                                  ;
 20521                                  ;   inputs:	es:di points to current bds
 20522                                  ;   outputs:	none
 20523                                  ;   registers modified: none
 20524                                  ;---------------------------------------------------------------------------
 20525                                  
 20526                                  		; 26/12/2023 - Retro DOS v5.0
 20527                                  resetchanged:
 20528                                  		;and	word [es:di+BDS.flags], ~fchanged ; 0FFBFh
 20529                                  		; 26/12/2023
 20530 00001C87 2680653FBF              		and	byte [es:di+3Fh], 0BFh
 20531                                  		; 10/12/2022
 20532                                  		;and	byte [es:di+23h], 0BFh
 20533                                  		;;and	word [es:di+23h], 0FFBFh ; [es:di+BDS.flags]
 20534                                  					; ~fchanged
 20535 00001C8C C3                      		retn
 20536                                  
 20537                                  ; =============== S U B	R O U T	I N E =======================================
 20538                                  
 20539                                  ;---------------------------------------------------------------------------
 20540                                  ; haschange - see if drive can supply change line
 20541                                  ;
 20542                                  ;   inputs:	es:di points to current bds
 20543                                  ;   outputs:	zero set - no change line available
 20544                                  ;		zero reset - change line available
 20545                                  ;   registers modified: none
 20546                                  ;---------------------------------------------------------------------------
 20547                                  
 20548                                  		; 26/12/2023 - Retro DOS v5.0
 20549                                  haschange:
 20550                                  		;test	word [es:di+BDS.flags], fchangeline ; 2
 20551                                  		; 26/12/2023
 20552 00001C8D 26F6453F02              		test	byte [es:di+3Fh], 2
 20553                                  		; 10/12/2022
 20554                                  		;test	byte [es:di+23h], 2
 20555                                  		;;test	word [es:di+23h], 2 ; [es:di+BDS.flags]
 20556                                  					; fchangeline
 20557 00001C92 C3                      		retn
 20558                                  
 20559                                  ; ---------------------------------------------------------------------------
 20560                                  
 20561                                  ; 16/10/2022
 20562                                  
 20563                                  ;-------------------------------------------------------------------------
 20564                                  ; set_volume_id      -	main routine, calls other routines.
 20565                                  ; read_volume_id     -	read the volume id and tells if it has been changed.
 20566                                  ; transfer_volume_id -	copy the volume id from tmp to special drive.
 20567                                  ; check_volume_id    -	compare volume id in tmp area with one expected for drive.
 20568                                  ; fat_check          -	see of the fatid has changed in the specified drive.
 20569                                  ;-------------------------------------------------------------------------
 20570                                  
 20571                                  ; set_volume_id
 20572                                  ;   if drive has changeline support, read in and set the volume_id
 20573                                  ; and the last fat_id byte. if no change line support then do nothing.
 20574                                  ;
 20575                                  ;   on entry:
 20576                                  ;	es:di points to the bds for this disk.
 20577                                  ;	ah contains media byte
 20578                                  ;
 20579                                  ;   on exit:
 20580                                  ;	carry clear:
 20581                                  ;	   successful call
 20582                                  ;	carry set
 20583                                  ;	   error and ax has error code
 20584                                  
 20585                                  set_volume_id:
 20586 00001C93 52                      		push	dx		; save registers
 20587 00001C94 50                      		push	ax
 20588 00001C95 E8F5FF                  		call	haschange	; does drive have changeline support?
 20589 00001C98 740B                    		jz	short setvret	; no, get out
 20590 00001C9A E81000                  		call	read_volume_id
 20591 00001C9D 7209                    		jb	short seterr
 20592 00001C9F E8A900                  		call	transfer_volume_id ; copy the volume id	to special drive
 20593 00001CA2 E8E2FF                  		call	resetchanged	; restore value	of change line
 20594                                  setvret:				
 20595                                  		; 10/12/2022
 20596                                  		; cf = 0
 20597                                  		;clc			; no error, clear carry flag
 20598 00001CA5 58                      		pop	ax		; restore registers
 20599 00001CA6 5A                      		pop	dx
 20600 00001CA7 C3                      		retn
 20601                                  ; ---------------------------------------------------------------------------
 20602                                  
 20603                                  seterr:
 20604 00001CA8 5A                      		pop	dx		; pop stack but don't overwrite ax
 20605 00001CA9 5A                      		pop	dx		; restore dx
 20606 00001CAA C3                      		retn
 20607                                  ; ---------------------------------------------------------------------------
 20608 00001CAB 0000                    root_sec:	dw 0			; root sector #
 20609                                  
 20610                                  ; 16/10/2022
 20611                                  ;ROOTSEC equ root_sec - DOSBIOSEG_2C7h		
 20612                                  ; 09/12/2022
 20613                                  ROOTSEC equ root_sec
 20614                                  
 20615                                  ; =============== S U B	R O U T	I N E =======================================
 20616                                  
 20617                                  ; 16/10/2022
 20618                                  
 20619                                  ; read_volume_id read the volume id and tells if it has been changed.
 20620                                  ;
 20621                                  ;   on entry:
 20622                                  ;	es:di points to current bds for drive.
 20623                                  ;
 20624                                  ;   on exit:
 20625                                  ;	carry clear
 20626                                  ;	    si = 1  no change
 20627                                  ;	    si = 0  ?
 20628                                  ;	    si = -1 change
 20629                                  ;
 20630                                  ;	carry set:
 20631                                  ;	    error and ax has error code.
 20632                                  
 20633                                  read_volume_id:
 20634 00001CAD 52                      		push	dx		; preserve registers
 20635 00001CAE 51                      		push	cx
 20636 00001CAF 53                      		push	bx
 20637 00001CB0 50                      		push	ax
 20638 00001CB1 06                      		push	es		; stack the bds last
 20639 00001CB2 57                      		push	di
 20640 00001CB3 1E                      		push	ds		; point es to Bios_Data
 20641 00001CB4 07                      		pop	es
 20642 00001CB5 BF[4008]                		mov	di, tmp_vid	; "NO NAME	 "
 20643 00001CB8 BE[6305]                		mov	si, nul_vid	; "NO NAME	 "
 20644                                  		; 26/12/2023
 20645 00001CBB B90B00                  		mov	cx, 11		; PCDOS 7.1 - 02/09/2023
 20646                                  		;mov	cx, 12		; initialize tmp_vid to	null vi_id
 20647                                  		
 20648                                  		;rep	movsb
 20649                                  		; 26/12/2023
 20650                                  		;rep movs byte ptr es:[di], byte ptr cs:[si]
 20651                                  		;db 0FBh,2Eh,0A4h 
 20652                                  		;cs	; nul_vid is in BIOSCODE segment 
 20653                                  		;rep movsb
 20654 00001CBE F3                      		rep
 20655 00001CBF 2E                      		cs
 20656 00001CC0 A4                      		movsb	
 20657                                  		
 20658 00001CC1 5F                      		pop	di
 20659 00001CC2 07                      		pop	es
 20660 00001CC3 268A450B                		mov	al, [es:di+11]	; [es:di+BDS.fats]
 20661                                  					; # of fats
 20662 00001CC7 268B4D11                		mov	cx, [es:di+17]	; [es:di+BDS.fatsecs]
 20663                                  					; sectors / fat
 20664 00001CCB F6E1                    		mul	cl		; size taken by	fats
 20665 00001CCD 26034509                		add	ax, [es:di+9]	; [es:di+BDS.resectors]
 20666                                  					; add on reserved sectors
 20667                                  					;
 20668                                  					; ax is	now sector # (0	based)
 20669                                  		; 17/10/2022
 20670 00001CD1 2EA3[AB1C]              		mov	[cs:ROOTSEC], ax
 20671                                  		;mov	word ptr cs:198Fh, ax ; [cs:root_sec]
 20672                                  					; 0070h:3EFFh =	2C7h:198Fh
 20673 00001CD5 268B450C                		mov	ax, [es:di+12]	; [es:di+BDS.direntries]
 20674                                  					; # root dir entries
 20675 00001CD9 B104                    		mov	cl, 4		; 16 entries/sector
 20676 00001CDB D3E8                    		shr	ax, cl		; divide by 16
 20677                                  		;mov	cx, ax		; cx is	# of sectors to	scan
 20678                                  		; 02/09/2023 (PCDOS 7.1, one byte opcode)
 20679 00001CDD 91                      		xchg	ax, cx		; cx is	# of sectors to	scan
 20680                                  next_sec:
 20681 00001CDE 51                      		push	cx		; save outer loop counter
 20682 00001CDF 2EA1[AB1C]              		mov	ax, [cs:ROOTSEC]
 20683                                  		;mov	ax, word ptr cs:198Fh ; [cs:root_sec]
 20684                                  					; get sector #
 20685 00001CE3 268B4D13                		mov	cx, [es:di+19]	; [es:di+BDS.secpertrack]
 20686                                  					; sectors / track
 20687 00001CE7 31D2                    		xor	dx, dx
 20688 00001CE9 F7F1                    		div	cx
 20689                                  
 20690                                  ; set up registers for call to read_sector
 20691                                  
 20692 00001CEB 42                      		inc	dx		; dx= sectors into track
 20693                                  					; ax= track count from 0
 20694 00001CEC 88D1                    		mov	cl, dl		; sector to read
 20695 00001CEE 31D2                    		xor	dx, dx
 20696 00001CF0 26F77515                		div	word [es:di+21] ; [es:di+BDS.heads]
 20697                                  					; # heads on this disc
 20698 00001CF4 88D6                    		mov	dh, dl		; head number
 20699 00001CF6 88C5                    		mov	ch, al		; track	#
 20700 00001CF8 E8BBEB                  		call	read_sector	; get first sector of the root directory,
 20701                                  					; ds:bx	-> directory sector
 20702 00001CFB 723F                    		jb	short readviderr
 20703 00001CFD B91000                  		mov	cx, 16		; # of dir entries in a	block of root
 20704 00001D00 B008                    		mov	al, 8		; volume label bit
 20705                                  fvid_loop:
 20706                                  		; 02/09/2023 (PCDOS 7.1)
 20707 00001D02 382F                    		cmp	[bx], ch ; 0				
 20708                                  		;cmp	byte [bx], 0 ; end of dir?
 20709 00001D04 7433                    		jz	short no_vid	; yes, no vol id
 20710 00001D06 803FE5                  		cmp	byte [bx], 0E5h ; empty entry?
 20711 00001D09 7405                    		jz	short ent_loop	; yes, skip
 20712 00001D0B 84470B                  		test	[bx+11], al	; is volume label bit set in fcb?
 20713 00001D0E 750F                    		jnz	short found_vid	; jmp yes
 20714                                  ent_loop:
 20715 00001D10 83C320                  		add	bx, 32		; add length of	directory entry
 20716 00001D13 E2ED                    		loop	fvid_loop
 20717 00001D15 59                      		pop	cx		; outer loop
 20718 00001D16 2EFF06[AB1C]            		inc	word [cs:ROOTSEC]
 20719                                  		;inc	word ptr cs:198Fh ; inc word [root_sec]
 20720                                  					; next sector
 20721 00001D1B E2C1                    		loop	next_sec	; continue
 20722                                  notfound:
 20723                                  		; 02/09/2023
 20724                                  		;xor	si, si
 20725 00001D1D EB13                    		jmp	short fvid_ret
 20726                                  ; ---------------------------------------------------------------------------
 20727                                  
 20728                                  found_vid:
 20729                                  		; 02/09/2023
 20730                                  		; cf = 0  ('test' instruction clears cf)
 20731 00001D1F 59                      		pop	cx		; clean stack of outer loop counter
 20732 00001D20 89DE                    		mov	si, bx		; point	to volume_id
 20733 00001D22 06                      		push	es		; preserve current bds
 20734 00001D23 57                      		push	di
 20735 00001D24 1E                      		push	ds
 20736 00001D25 07                      		pop	es		; point es to Bios_Data
 20737 00001D26 BF[4008]                		mov	di, tmp_vid	; "NO NAME	 "
 20738 00001D29 B90B00                  		mov	cx, 11		; VOLID_SIZ-1
 20739                                  					; length of string minus nul
 20740 00001D2C F3A4                    		rep movsb		; mov volume label to tmp_vid
 20741                                  		;xor	al, al
 20742                                  		; 02/09/2023
 20743 00001D2E 91                      		xchg	ax, cx		; ax = 0
 20744 00001D2F AA                      		stosb			; null terminate
 20745                                  		;;xor	si, si
 20746                                  		; 02/09/2023
 20747                                  		;xchg	ax, si		; si = 0
 20748 00001D30 5F                      		pop	di		; restore current bds
 20749 00001D31 07                      		pop	es
 20750                                  fvid_ret:
 20751                                  		; 02/09/2023
 20752 00001D32 31F6                    		xor	si, si ; 0
 20753                                  				
 20754 00001D34 58                      		pop	ax
 20755                                  		; 10/12/2022
 20756                                  		; cf = 0
 20757                                  		;clc
 20758                                  rvidret:
 20759 00001D35 5B                      		pop	bx		; restore registers
 20760 00001D36 59                      		pop	cx
 20761 00001D37 5A                      		pop	dx
 20762 00001D38 C3                      		retn
 20763                                  ; ---------------------------------------------------------------------------
 20764                                  
 20765                                  no_vid:
 20766 00001D39 59                      		pop	cx		; clean stack of outer loop counter
 20767                                  		;jmp	short notfound	; not found
 20768                                  		; 02/09/2023
 20769 00001D3A EBF6                    		jmp	short fvid_ret
 20770                                  ; ---------------------------------------------------------------------------
 20771                                  
 20772                                  readviderr:
 20773 00001D3C 5E                      		pop	si		; trash the outer loop counter
 20774 00001D3D 5E                      		pop	si		; caller's ax, return error code instead
 20775 00001D3E EBF5                    		jmp	short rvidret
 20776                                  
 20777                                  ; ---------------------------------------------------------------------------
 20778                                  		; 26/12/2023 - Retro DOS v5.0
 20779                                  		; 02/09/2023 - Retro DOS v4.2 (IO.SYS optimization)
 20780                                  		; PCDOS 7.1 - IBMBIO.COM - BIOSCODE:1DCFh 
 20781                                  preset_volid_addr:
 20782 00001D40 BE[4008]                		mov	si, tmp_vid	; "NO NAME    "
 20783                                  		; 26/12/2023
 20784                                  		; PCDOS 7.1
 20785 00001D43 83C77D                  		add	di, 125		; BDS.volid
 20786 00001D46 B90B00                  		mov	cx, 11		; VOLID_SIZ (12 for MSDOS 5.0-6.22 versions)
 20787                                  		; MSDOS 6.21 (MSDOS 5.0 & 6.?)
 20788                                  		;add	di, 75		; BDS.volid
 20789                                  		;mov	cx, 12		; VOLID_SIZ
 20790                                  		;
 20791 00001D49 FC                      		cld
 20792 00001D4A C3                      		retn
 20793                                  
 20794                                  ; =============== S U B	R O U T	I N E =======================================
 20795                                  
 20796                                  ; transfer_volume_id - copy the volume id from tmp to special drive
 20797                                  ;
 20798                                  ; inputs:	es:di has current bds
 20799                                  ; outputs:	bds for drive has volume id from tmp
 20800                                  
 20801                                  		; 27/12/2023 - Retro DOS v5.0
 20802                                  transfer_volume_id:
 20803 00001D4B 57                      		push	di		; copy the volume id from tmp to special drive
 20804                                  		;push	si
 20805 00001D4C 51                      		push	cx
 20806                                  		; 27/12/2023
 20807 00001D4D 56                      		push	si
 20808                                  
 20809                                  		;mov	si, tmp_vid	; "NO NAME	 "
 20810                                  		;;add	di, BDS.volid
 20811                                  		;add	di, 75		; BDS.volid
 20812                                  		;;mov	cx, VOLID_SIZ
 20813                                  		;mov	cx, 12		; VOLID_SIZ
 20814                                  		;cld
 20815                                  		; 02/09/2023 (PCDOS 7.1)
 20816 00001D4E E8EFFF                  		call	preset_volid_addr
 20817                                  
 20818 00001D51 F3A4                    		rep movsb
 20819                                  		
 20820                                  		; 27/12/2023
 20821 00001D53 5E                      		pop	si
 20822                                  chk_volid_ok:
 20823 00001D54 59                      		pop	cx
 20824                                  		;pop	si
 20825 00001D55 5F                      		pop	di
 20826 00001D56 C3                      		retn
 20827                                  
 20828                                  ; =============== S U B	R O U T	I N E =======================================
 20829                                  
 20830                                  ;  check_volume_id - compare volume id in tmp area with
 20831                                  ;		     one expected for drive
 20832                                  ;
 20833                                  ;   inputs:	es:di has current bds for drive
 20834                                  ;   outputs:	zero true means it matched
 20835                                  
 20836                                  		; 27/12/2023 - Retro DOS v5.0
 20837                                  check_volume_id:
 20838 00001D57 57                      		push	di
 20839 00001D58 51                      		push	cx
 20840                                  		
 20841                                  		;mov	si, tmp_vid	; "NO NAME	 "
 20842                                  		;;add	di, BDS.volid
 20843                                  		;add	di, 75		; BDS.volid
 20844                                  		;;mov	cx, VOLID_SIZ
 20845                                  		;mov	cx, 12		; VOLID_SIZ
 20846                                  		;cld
 20847                                  		; 02/09/2023 (PCDOS 7.1)
 20848 00001D59 E8E4FF                  		call	preset_volid_addr
 20849                                  
 20850 00001D5C F3A6                    		repe cmpsb		; are the 2 volume_ids the same?
 20851                                  		
 20852                                  		; 27/12/2023
 20853                                  		;pop	cx
 20854                                  		;pop	di
 20855                                  		;retn
 20856 00001D5E EBF4                    		jmp	short chk_volid_ok
 20857                                  
 20858                                  ; =============== S U B	R O U T	I N E =======================================
 20859                                  
 20860                                  ;   fat_check - see of the fatid has changed in the specified drive.
 20861                                  ;	      - uses the fat id obtained from the boot sector.
 20862                                  ;
 20863                                  ;   inputs:	medbyt is expected fat id
 20864                                  ;		es:di points to current bds
 20865                                  ;
 20866                                  ;   output:	si = -1 if fat id different,
 20867                                  ;		si = 0 otherwise
 20868                                  ;
 20869                                  ;   no other registers changed.
 20870                                  
 20871                                  fat_check:
 20872 00001D60 50                      		push	ax
 20873 00001D61 31F6                    		xor	si, si		; say fat id's are same.
 20874 00001D63 A0[1F01]                		mov	al, [medbyt]	; 19/10/2022
 20875 00001D66 263A4510                		cmp	al, [es:di+10h]	; [es:di+BDS.media]
 20876                                  					; compare it with the bds medbyte
 20877 00001D6A 7401                    		jz	short okret1	; carry	clear
 20878 00001D6C 4E                      		dec	si
 20879                                  okret1:
 20880 00001D6D 58                      		pop	ax
 20881 00001D6E C3                      		retn
 20882                                  
 20883                                  ; ---------------------------------------------------------------------------
 20884                                  
 20885                                  ; BIOSCODE:1DFEh (PCDOS 7.1 IBMBIO.COM) ; 27/12/2023
 20886                                  		;times 2 db 0
 20887                                  
 20888                                  ; BIOSCODE:1A69h (MSDOS 6.21 IO.SYS) ((& MSDOS 6.22 IO.SYS))
 20889                                  		;times 7 db 0
 20890                                  
 20891                                  ; BIOSCODE:180Bh (MSDOS 5.0 IO.SYS)	
 20892                                  
 20893                                  		; 09/12/2022
 20894                                  		;times 4 db 0	; 17/10/2022
 20895                                  		;db 4 dup(0)	; times 4 db 0
 20896                                  
 20897                                  ; ---------------------------------------------------------------------------
 20898                                  
 20899                                  		; 09/12/2022
 20900                                  		;db 0
 20901                                  
 20902                                  number2div	equ ($-BCode_start)
 20903                                  number2mod	equ (number2div % 16)
 20904                                  
 20905                                  %if number2mod>0 & number2mod<16
 20906 00001D6F 00                      		times (16-number2mod) db 0
 20907                                  %endif
 20908                                  
 20909                                  ;align 16
 20910                                  
 20911                                  ; 09/12/2022
 20912                                  BCODE_END	equ $ - BCode_start
 20913                                  ; 31/03/2024
 20914                                  BCODEEND:
 20915                                  ;SYSINITSEG	equ IOSYSCODESEG+(BCODE_END>>4)
 20916                                  ; 13/12/2022
 20917                                  SYSINITOFFSET	equ BCODE_END
 20918                                  SYSINITSEG	equ IOSYSCODESEG+(SYSINITOFFSET>>4)
 20919                                  
 20920                                  ; 30/12/2022 - Retro DOS v4.2
 20921                                  ; (SYSINITSEG is 473h for MSDOS 6.21 IO.SYS)
 20922                                  
 20923                                  ;--- End of DOSBIOS code segment ---------------------------------------------
 20924                                  
 20925                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20926                                  ; 01/05/2019 - Retro DOS v4.0 
 20927                                  ; ============================================================================
 20928                                  ; end of BIOSCODE
 20929                                  
 20930                                  ; ----------------------------------------------------------------------------
 20931                                  ; %include sysinit5.s	; 09/12/2022
 20932                                  ; ----------------------------------------------------------------------------
 20933                                  
 20934                                  ;=============================================================================
 20935                                  ; (IO.SYS) SYSINIT SEGMENT 
 20936                                  ;=============================================================================
 20937                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20938                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 20939                                  ;
 20940                                  ; 27/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 20941                                  
 20942                                  section .SYSINIT vstart=0
 20943                                  
 20944                                  ; ****************************************************************************
 20945                                  ; SYSINIT.BIN (MSDOS 6.21 IO.SYS) - RETRO DOS v4.0 by ERDOGAN TAN - 21/10/2022
 20946                                  ; ----------------------------------------------------------------------------
 20947                                  ; Last Update: 04/01/2023 (Modified IO.SYS)  ((Previous: 30/12/2022))
 20948                                  ; ----------------------------------------------------------------------------
 20949                                  ; Beginning: 03/06/2018 (Retro DOS 3.0), 21/03/2019 (Retro DOS 4.0)
 20950                                  ; ----------------------------------------------------------------------------
 20951                                  ; Assembler: NASM version 2.15
 20952                                  ; ----------------------------------------------------------------------------
 20953                                  ;	   ((nasm sysinit6.s -l sysinit6.lst -o SYSINIT6.BIN -Z error.txt)) 	
 20954                                  ; ----------------------------------------------------------------------------
 20955                                  ; Modified from 'sysinit2.s' (SYSINIT2.BIN) file of Retro DOS v3.0 (6/7/2018)
 20956                                  ; ----------------------------------------------------------------------------
 20957                                  ; Derived from 'SYSINIT1.ASM' and 'SYSINIT2.ASM' files of MSDOS 6.0
 20958                                  ; source code by Microsoft, 1991 
 20959                                  ; ----------------------------------------------------------------------------
 20960                                  ; Derived from 'SYSINIT.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
 20961                                  ; by Microsoft, 12/10/1983
 20962                                  ; ****************************************************************************
 20963                                  ; main file: 'retrodos4.s'
 20964                                  ; incbin 'SYSINIT3.BIN' ; (SYINITSEG)
 20965                                  
 20966                                  ; 30/12/2022 - Retro DOS v4.2 
 20967                                  ; Retro DOS v4.0 - 2019
 20968                                  ; SYSINIT (MSDOS 6.21 IO.SYS) draft: 'sysinit3.s' (01/07/2019)
 20969                                   
 20970                                  ; 21/10/2022
 20971                                  ; ----------------------------------------------------------------------------
 20972                                  ; This source code (version) is based on SYSINIT source code of disassembled
 20973                                  ; MSDOS 5.0 IO.SYS file (SYSINIT.BIN) 
 20974                                  ; Dissassembler: Hex-Rays Interactive Disassembler (IDA)
 20975                                  ; ----------------------------------------------------------------------------
 20976                                  ; Binary file splitter & joiner: FFSJ v3.3
 20977                                  
 20978                                  ;--------------------------------------------------------------
 20979                                  ; SYSINIT.TXT (27/01/1983)
 20980                                  ;--------------------------------------------------------------
 20981                                  ;    SYSINIT is  a module linked behind the OEM bios.  It takes
 20982                                  ;over  the  system  initialization  after  the  OEM  bios   has
 20983                                  ;performed any  initialization  it  needs  to  do.   Control is
 20984                                  ;transfered with a long jump to the external  variable  SYSINIT
 20985                                  ;
 20986                                  ;
 20987                                  ;   The OEM  has  the  following  variables declared external:
 20988                                  ;
 20989                                  ;   CURRENT_DOS_LOCATION    WORD
 20990                                  ;
 20991                                  ;This word  contains  the  segment  number of the DOS before it
 20992                                  ;is relocated.  The OEM bios must set this value.
 20993                                  ;
 20994                                  ;   FINAL_DOS_LOCATION      WORD
 20995                                  ;
 20996                                  ;This word contains the segment number of the DOS after SYSINIT
 20997                                  ;moves it.  The OEM bios must set this value.
 20998                                  ;
 20999                                  ;   DEVICE_LIST             DWORD
 21000                                  ;
 21001                                  ;This  double  word  pointer  points  to  the  linked  list  of
 21002                                  ;character and block device drivers.  The  OEM  must  set  this
 21003                                  ;value.
 21004                                  ;
 21005                                  ;   MEMORY_SIZE             WORD
 21006                                  ;
 21007                                  ;This word  contains  the  number  of  RAM  paragraphs.  If the
 21008                                  ;bios doesn't set  this  variable  SYSINIT  will  automatically
 21009                                  ;calculate it.   NOTE:  systems with PARITY checked memory must
 21010                                  ;size memory in the BIOS.  SYSINITs method is to  write  memory
 21011                                  ;and read it back until it gets a mismatch.
 21012                                  ;
 21013                                  ;   DEFAULT_DRIVE           BYTE
 21014                                  ;
 21015                                  ;This is  the initial default drive when the system first comes
 21016                                  ;up.  drive a=0, drive b=1,  etc.   If  the  bios  doesn't  set
 21017                                  ;it then drive a is assumed.
 21018                                  ;
 21019                                  ;   BUFFERS                 BYTE
 21020                                  ;
 21021                                  ;This is  the  default  number of buffers for the system.  This
 21022                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 21023                                  ;It is DBed to 2 in SYSINIT it should be greater than 1.
 21024                                  ;
 21025                                  ;   FILES                   BYTE
 21026                                  ;
 21027                                  ;This is  the  default  number  of  files for the system.  This
 21028                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 21029                                  ;It is  DBed  to  8 in SYSINIT, values less than 5 are ignored.
 21030                                  ;
 21031                                  ;   SYSINIT                 FAR
 21032                                  ;
 21033                                  ;The entry  point  of  the  SYSINIT  module.  OEM BIOS jumps to
 21034                                  ;this label at the end of its INIT code.
 21035                                  ;
 21036                                  ;   The OEM  has  the  following  variables declared public:
 21037                                  ;
 21038                                  ;   RE_INIT                 FAR
 21039                                  ;
 21040                                  ;This is an entry point which allows the BIOS to do some INIT
 21041                                  ;work  after  the  DOS is initialized.  ALL REGISTERS MUST BE
 21042                                  ;PRESERVED.  On entry DS points to the first available memory
 21043                                  ;(after  the DOS).  DS:0 points to a 100H byte program header
 21044                                  ;prefix which represents  the  "program"  currently  running.
 21045                                  ;This  program  should  be  thought  of  as  the OEM BIOS and
 21046                                  ;SYSINIT taken together.  This is not  a  normal  program  in
 21047                                  ;that  no  memory  is  allocated to it, it is running in free
 21048                                  ;memory.
 21049                                  ;NOTES:
 21050                                  ;     At the time this routine is called SYSINIT occupies the
 21051                                  ;highest 10K of memory ("highest" is determined by the  value
 21052                                  ;of the MEMORY_SIZE variable), DO NOT DO WRITES THERE.
 21053                                  ;     Since this is called AFTER DOS is initialized, you can
 21054                                  ;make system calls.  This also implies that the code for this
 21055                                  ;routine    CANNOT   be   thrown   away   by   use   of   the
 21056                                  ;FINAL_DOS_LOCATION since the DOS has already been moved.
 21057                                  ;     If you don't want  anything done just set this to point
 21058                                  ;at a FAR RET instruction.
 21059                                  
 21060                                  ; ----------------------------------------------------------------------
 21061                                  ; TITLE   BIOS SYSTEM INITIALIZATION
 21062                                  ; ----------------------------------------------------------------------
 21063                                  
 21064                                  ;include version.inc
 21065                                  ; ----------------------------------------------------------------------
 21066                                  
 21067                                  ;FALSE   EQU     0
 21068                                  ;TRUE    EQU     0FFFFh
 21069                                  
 21070                                  ;IBMVER	    EQU     TRUE
 21071                                  ;IBMCOPYRIGHT EQU   FALSE
 21072                                  ;STACKSW    EQU	    TRUE		;Include Switchable Hardware Stacks
 21073                                  ;IBMJAPVER  EQU     FALSE		; If TRUE set KANJI true also
 21074                                  ;MSVER      EQU     FALSE
 21075                                  ;ALTVECT    EQU     FALSE		; Switch to build ALTVECT version
 21076                                  ;KANJI      EQU     FALSE
 21077                                  
 21078                                  ;(MSDOS 6.0, versiona.inc, 1991)
 21079                                  ; ----------------------------------------------------------------------
 21080                                  ;MAJOR_VERSION  EQU	6
 21081                                  ;;MINOR_VERSION	EQU	0	;6.00
 21082                                  ;MINOR_VERSION  EQU	21	;6.21  ; 21/03/2019 - Retro DOS v4.0
 21083                                  
 21084                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 21085                                  ; ----------------------------------------------------------------------
 21086                                  ;MAJOR_VERSION   EQU	5
 21087                                  ;MINOR_VERSION   EQU	0
 21088                                  
 21089                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21)
 21090                                  ;MAJOR_VERSION   EQU	6
 21091                                  ;MINOR_VERSION   EQU	22
 21092                                  
 21093                                  ; 21/02/2024 - Retro DOS v5.0 (Modified PCDOS 7.1)
 21094                                  MAJOR_VERSION   EQU	7
 21095                                  MINOR_VERSION   EQU	10
 21096                                  
 21097                                  expected_version equ	(MINOR_VERSION<<8)+MAJOR_VERSION
 21098                                  
 21099                                  ;DOSREVNM equ	00000000b       ; m037 - bits 0-2 = revision number of DOS
 21100                                  				; currently 0.
 21101                                  DOSREVNM equ	00000111b	; [[[ 7 for Retro DOS v4.0 ]]] (21/03/2019)	
 21102                                  DOSINROM equ	00001000B       ; bit 3 of ver flags returned in BH
 21103                                  DOSINHMA equ	00010000B       ; bit 4 of ver flags 
 21104                                  
 21105                                  ;      if1
 21106                                  ;      %OUT  ... for DOS Version 5.00 ...
 21107                                  ;      endif
 21108                                  
 21109                                         ;******************************
 21110                                         ;Each assembler program should:
 21111                                         ;  mov ah,030h                   ;DOS Get Version function
 21112                                         ;  int 021h                      ;Version ret. in AX,minor version first
 21113                                         ;  cmp ax,expected_version       ;ALL utilities should check for an
 21114                                         ;  jne error_handler             ; EXACT version match.
 21115                                         ;******************************
 21116                                  
 21117                                  ; ----------------------------------------------------------------------
 21118                                  ; device definitions
 21119                                  
 21120                                  ;Attribute bit masks
 21121                                  DEVTYP  EQU     8000h           ;Bit 15 - 1  if Char, 0 if block
 21122                                  DEVIOCTL EQU    4000h           ;Bit 14 - CONTROL mode bit
 21123                                  ISFATBYDEV EQU  2000h           ;Bit 13 - Device uses FAT ID bytes, comp media.
 21124                                  ISCIN   EQU     0001h           ;Bit 0 - This device is the console input.
 21125                                  ISCOUT  EQU     0002h           ;Bit 1 - This device is the console output.
 21126                                  ISNULL  EQU     0004h           ;Bit 2 - This device is the null device.
 21127                                  ISCLOCK EQU     0008h           ;Bit 3 - This device is the clock device.
 21128                                  ISIBM   EQU     0010h           ;Bit 4 - This device is special
 21129                                  
 21130                                  ; The device table list has the form:
 21131                                  struc	SYSDEV
 21132 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
 21133 00000004 ????                    .ATT:		resw 1		;Attributes of the device
 21134 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
 21135 00000008 ????                    .INT:		resw 1		;Interrupt entry point
 21136 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
 21137                                  .size:
 21138                                  endstruc
 21139                                  
 21140                                  ;Static Reguest Header
 21141                                  struc	SRHEAD
 21142 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
 21143 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
 21144 00000002 ??                      .REQFUNC:	resb 1		;Type of request
 21145 00000003 ????                    .REQSTAT:	resw 1		;Status Word
 21146 00000005 ????????????????                	resb 8		;Reserved for queue links
 21147                                  .size:
 21148                                  endstruc
 21149                                  
 21150                                  ;Status word masks
 21151                                  STERR   EQU     8000H           ;Bit 15 - Error
 21152                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
 21153                                  STDON   EQU     0100H           ;Bit 8 - Done
 21154                                  STECODE EQU     00FFH           ;Error code
 21155                                  WRECODE EQU     0
 21156                                  
 21157                                  ;Function codes
 21158                                  DEVINIT EQU     0               ;Initialization
 21159                                  DINITHL EQU     26              ;Size of init header
 21160                                  DEVMDCH EQU     1               ;Media check
 21161                                  DMEDHL  EQU     15              ;Size of media check header
 21162                                  DEVBPB  EQU     2               ;Get BPB
 21163                                  DEVRDIOCTL EQU  3               ;IOCTL read
 21164                                  DBPBHL  EQU     22              ;Size of Get BPB header
 21165                                  DEVRD   EQU     4               ;Read
 21166                                  DRDWRHL EQU     22              ;Size of RD/WR header
 21167                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
 21168                                  DRDNDHL EQU     14              ;Size of non destructive read header
 21169                                  DEVIST  EQU     6               ;Input status
 21170                                  DSTATHL EQU     13              ;Size of status header
 21171                                  DEVIFL  EQU     7               ;Input flush
 21172                                  ; 21/02/2024
 21173                                  ;DFLSHL EQU     15              ;Size of flush header
 21174                                  DFLSHL	equ	13	; PCDOS 7.1 IBMDOS.COM  ; 21/02/2024
 21175                                  DEVWRT  EQU     8               ;Write
 21176                                  DEVWRTV EQU     9               ;Write with verify
 21177                                  DEVOST  EQU     10              ;Output status
 21178                                  DEVOFL  EQU     11              ;Output flush
 21179                                  DEVWRIOCTL EQU  12              ;IOCTL write
 21180                                  
 21181                                  ; ----------------------------------------------------------------------
 21182                                  struc	SYS_FCB
 21183 00000000 ??                      .fcb_drive:	resb 1
 21184 00000001 ????????????????        .fcb_name:	resb 8
 21185 00000009 ??????                  .fcb_ext:	resb 3
 21186 0000000C ????                    .fcb_EXTENT:	resw 1
 21187 0000000E ????                    .fcb_RECSIZ:	resw 1	; Size of record (user settable)
 21188 00000010 ????                    .fcb_FILSIZ:	resw 1	; Size of file in bytes; used with the following
 21189                                                          ; word
 21190 00000012 ????                    .fcb_DRVBP:	resw 1	; BP for SEARCH FIRST and SEARCH NEXT
 21191 00000014 ????                    .fcb_FDATE:	resw 1	; Date of last writing
 21192 00000016 ????                    .fcb_FTIME:	resw 1	; Time of last writing
 21193 00000018 ??                      .fcb_DEVID:	resb 1	; Device ID number, bits 0-5 if file.
 21194                                                          ; bit 7=0 for file, bit 7=1 for I/O device
 21195                                                          ; If file, bit 6=0 if dirty
 21196                                                          ; If I/O device, bit 6=0 if EOF (input)
 21197                                                          ;               Bit 5=1 if Raw mode
 21198                                                          ;               Bit 0=1 if console input device
 21199                                                          ;               Bit 1=1 if console output device
 21200                                                          ;               Bit 2=1 if null device
 21201                                                          ;               Bit 3=1 if clock device
 21202 00000019 ????                    .fcb_FIRCLUS:	resw 1	; First cluster of file
 21203 0000001B ????                    .fcb_CLUSPOS:	resw 1	; Position of last cluster accessed
 21204 0000001D ????                    .fcb_LSTCLUS:	resw 1	; Last cluster accessed and directory
 21205 0000001F ??                                   	resb 1	; pack 2 12 bit numbers into 24 bits...
 21206 00000020 ??                      .fcb_NR:	resb 1	; Next record
 21207 00000021 ????????                .fcb_RR:	resb 4	; Random record
 21208                                  .size:
 21209                                  endstruc
 21210                                  
 21211                                  ; ----------------------------------------------------------------------
 21212                                  ; Field definition for I/O buffer information
 21213                                  
 21214                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, BUFFER.INC, 1991)
 21215                                  
 21216                                  	; 03/01/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMDOS.COM)
 21217                                  
 21218                                  struc BUFFINFO
 21219 00000000 ????                    .buf_next:	resw 1		; Pointer to next buffer in list
 21220 00000002 ????                    .buf_prev:	resw 1		; Pointer to prev buffer in list
 21221 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
 21222                                  				; SFT table index (bit 7 = 1)
 21223                                  				; = FFH if buffer free
 21224 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
 21225                                  				;	= 0 if Local device buffer
 21226                                  				; Bit 6 = 1 if buffer dirty
 21227                                  				; Bit 5 = Reserved
 21228                                  				; Bit 4 = Search bit (bit 7 = 1)
 21229                                  				; Bit 3 = 1 if buffer is DATA
 21230                                  				; Bit 2 = 1 if buffer is DIR
 21231                                  				; Bit 1 = 1 if buffer is FAT
 21232                                  				; Bit 0 = Reserved
 21233 00000006 ????????                .buf_sector:	resd 1		; Sector number of buffer (flags bit 7 = 0)
 21234                                  ; The next two items are often refed as a word (flags bit 7 = 0)
 21235 0000000A ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
 21236 0000000B ????                    .buf_wrtcntinc:	resw 1		; "   "     "   , # sectors between each write
 21237 0000000D ????                    		resw 1 ; * ; 03/01/2024 ; PCDOS 7.1
 21238                                  			   ; hw of sectors per FAT
 21239 0000000F ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
 21240 00000013 ????                    .buf_fill:	resw 1		; How full buffer is (flags bit 7 = 1)
 21241 00000015 ??                      .buf_reserved:	resb 1		; make DWORD boundary for 386
 21242 00000016 ????                    		resw 1 ; * ; 03/01/2024 ; PCDOS 7.1
 21243                                  			   ; reserved word for dword boundary
 21244                                  .size:	; 20 bytes ; MSDOS 5.0 to 6.22
 21245                                  	; 24 bytes ; PCDOS 7.1 ; 03/01/2024
 21246                                  endstruc
 21247                                  
 21248                                  %define buf_offset	BUFFINFO.buf_sector ; 22/07/2019
 21249                                  				;For buf_flags bit 7 = 1, this is the byte
 21250                                  				;offset of the start of the buffer in
 21251                                  				;the file pointed to by buf_ID. Thus
 21252                                  				;the buffer starts at location
 21253                                  				;buf_offset in the file and contains
 21254                                  				;buf_fill bytes.
 21255                                  
 21256                                  bufinsiz	equ	BUFFINFO.size	; Size of structure in bytes
 21257                                  
 21258                                  
 21259                                  buf_Free	equ	0FFh		; buf_id of free buffer
 21260                                  
 21261                                  ;Flag byte masks
 21262                                  buf_isnet	EQU	10000000B
 21263                                  buf_dirty	EQU	01000000B
 21264                                  ;***
 21265                                  buf_visit	EQU	00100000B
 21266                                  ;***
 21267                                  buf_snbuf	EQU	00010000B
 21268                                  
 21269                                  buf_isDATA	EQU	00001000B
 21270                                  buf_isDIR	EQU	00000100B
 21271                                  buf_isFAT	EQU	00000010B
 21272                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
 21273                                  
 21274                                  buf_NetID	EQU	bufinsiz
 21275                                  
 21276                                  ; ----------------------------------------------------------------------
 21277                                  
 21278                                  ; ----------------------------------------------------------------------
 21279                                  ;**	DPB - Drive Parameter Block
 21280                                  
 21281                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DPB.INC, 1991)
 21282                                  
 21283                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
 21284                                  ;	possibly inaccurate deductions from code study... - jgl
 21285                                  ;
 21286                                  ;	The DPB is DOS's main structure for describing block devices.
 21287                                  ;	It contains info about the "Drive" intermingled with info about
 21288                                  ;	the FAT file system which is presumably on the drive.  I don't know
 21289                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
 21290                                  ;
 21291                                  ;	The DPBs are statically allocated and chained off of DPBHead.
 21292                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
 21293                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
 21294                                  
 21295                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3, DPB.INC, 24/07/1987)
 21296                                  
 21297                                  ; 12/05/2019 - Retro DOS v4.0
 21298                                  
 21299                                  ; 01/01/2024
 21300                                  %if 0
 21301                                  
 21302                                  struc	DPB
 21303                                  .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
 21304                                  .UNIT:		resb 1		; Driver unit number of DPB
 21305                                  .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
 21306                                  .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
 21307                                  .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
 21308                                  .FIRST_FAT:	resw 1		; Starting record of FATs
 21309                                  .FAT_COUNT:	resb 1		; Number of FATs for this drive
 21310                                  .ROOT_ENTRIES:	resw 1		; Number of directory entries
 21311                                  .FIRST_SECTOR:	resw 1		; First sector of first cluster
 21312                                  .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
 21313                                  ; MSDOS 3.3
 21314                                  ;.FAT_SIZE:	resb 1		; Number of records occupied by FAT
 21315                                  ; MSDOS 6.0
 21316                                  .FAT_SIZE:	resw 1		; Number of records occupied by FAT
 21317                                  .DIR_SECTOR:	resw 1		; Starting record of directory
 21318                                  .DRIVER_ADDR:	resd 1		; Pointer to driver
 21319                                  .MEDIA:		resb 1		; Media byte
 21320                                  .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
 21321                                  				; check the first time this DPB is used
 21322                                  .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
 21323                                  .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
 21324                                  .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
 21325                                  .size:
 21326                                  endstruc
 21327                                  
 21328                                  %else
 21329                                  
 21330                                  ; 01/01/2024 - Retro DOS v5.0 (PCDOS 7.1)
 21331                                  
 21332                                  struc	DPB
 21333 00000000 ??                      .DRIVE:		resb 1	; 0	; Logical drive # assoc with DPB (A=0,B=1,...)
 21334 00000001 ??                      .UNIT:		resb 1	; 1	; Driver unit number of DPB
 21335 00000002 ????                    .SECTOR_SIZE:	resw 1	; 2	; Size of physical sector in bytes
 21336 00000004 ??                      .CLUSTER_MASK:	resb 1	; 4	; Sectors/cluster - 1
 21337 00000005 ??                      .CLUSTER_SHIFT:	resb 1	; 5	; Log2 of sectors/cluster
 21338 00000006 ????                    .FIRST_FAT:	resw 1	; 6	; Starting record of FATs
 21339 00000008 ??                      .FAT_COUNT:	resb 1	; 8	; Number of FATs for this drive
 21340 00000009 ????                    .ROOT_ENTRIES:	resw 1	; 9	; Number of directory entries
 21341 0000000B ????                    .FIRST_SECTOR:	resw 1	; 11	; First sector of first cluster
 21342 0000000D ????                    .MAX_CLUSTER:	resw 1	; 13	; Number of clusters on drive + 1
 21343 0000000F ????                    .FAT_SIZE:	resw 1	; 15	; Number of records occupied by FAT
 21344 00000011 ????                    .DIR_SECTOR:	resw 1	; 17	; Starting record of directory
 21345 00000013 ????????                .DRIVER_ADDR:	resd 1  ; 19	; Pointer to driver
 21346 00000017 ??                      .MEDIA:		resb 1	; 23	; Media byte
 21347 00000018 ??                      .FIRST_ACCESS:	resb 1	; 24	; This is initialized to -1 to force a media
 21348                                  				; check the first time this DPB is used
 21349 00000019 ????????                .NEXT_DPB:	resd 1	; 25	; Pointer to next Drive parameter block
 21350 0000001D ????                    .NEXT_FREE:	resw 1	; 29	; Cluster # of last allocated cluster
 21351 0000001F ????                    .FREE_CNT:	resw 1	; 31	; Count of free clusters, -1 if unknown
 21352                                  ; FAT32 fs ; 01/01/2024
 21353                                  ; ref: https://en.wikibooks.org/wiki/
 21354                                  ;      First_steps_towards_system_programming_under_MS-DOS_7/Appendix
 21355                                  ;   -- A.03-1. Structure of Drive Parameters Blocks (DPB) ---
 21356 00000021 ????                    .FREE_CNT_HW:	resw 1	; 33	; High word of free cluster count
 21357 00000023 ????                    .EXT_FLAGS:	resw 1	; 35	; FAT32 extended flags (active FAT number)
 21358 00000025 ????                    .FSINFO_SECTOR:	resw 1	; 37	; (FAT32 fs) FSINFO structure sector address
 21359 00000027 ????                    .BKBOOT_SECTOR:	resw 1	; 39	; (FAT32 fs) Backup Boot Sector address
 21360 00000029 ????????                .FCLUS_FSECTOR: resd 1	; 41	; The first cluster's first sector address
 21361 0000002D ????????                .LAST_CLUSTER:	resd 1	; 45	; The last cluster number
 21362 00000031 ????????                .FAT32_SIZE:	resd 1	; 49	; Number of FAT sectors (for FAT32 fs)	 
 21363 00000035 ????????                .ROOT_CLUSTER:	resd 1	; 53	; Root directory's cluster number (FAT32 fs)
 21364                                  ; 01/01/2024 - Retro DOS v5.0
 21365 00000039 ????????                .FAT32_NXTFREE:	resd 1  ; 57	; The next free cluster (for FAT32 fs)
 21366                                  .size:		; 61 bytes ; 01/01/2024 (PCDOS 7.1)
 21367                                  endstruc
 21368                                  
 21369                                  %endif
 21370                                  
 21371                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
 21372                                  
 21373                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
 21374                                  
 21375                                  ; ----------------------------------------------------------------------
 21376                                  ; 26/03/2018
 21377                                  
 21378                                  ; IOCTL SUB-FUNCTIONS
 21379                                  IOCTL_GET_DEVICE_INFO	EQU	0
 21380                                  IOCTL_SET_DEVICE_INFO	EQU	1
 21381                                  IOCTL_READ_HANDLE	EQU	2
 21382                                  IOCTL_WRITE_HANDLE	EQU	3
 21383                                  IOCTL_READ_DRIVE	EQU	4
 21384                                  IOCTL_WRITE_DRIVE	EQU	5
 21385                                  IOCTL_GET_INPUT_STATUS	EQU	6
 21386                                  IOCTL_GET_OUTPUT_STATUS EQU	7
 21387                                  IOCTL_CHANGEABLE?	EQU	8
 21388                                  IOCTL_SHARING_RETRY	EQU	11
 21389                                  GENERIC_IOCTL_HANDLE	EQU	12
 21390                                  GENERIC_IOCTL		EQU	13
 21391                                  
 21392                                  ; GENERIC IOCTL SUB-FUNCTIONS
 21393                                  RAWIO			EQU	8
 21394                                  
 21395                                  ; RAWIO SUB-FUNCTIONS
 21396                                  GET_DEVICE_PARAMETERS	EQU	60H
 21397                                  SET_DEVICE_PARAMETERS	EQU	40H
 21398                                  READ_TRACK		EQU	61H
 21399                                  WRITE_TRACK		EQU	41H
 21400                                  VERIFY_TRACK		EQU	62H
 21401                                  FORMAT_TRACK		EQU	42H
 21402                                  
 21403                                  ; DEVICETYPE VALUES
 21404                                  MAX_SECTORS_IN_TRACK	EQU	63
 21405                                  DEV_5INCH		EQU	0
 21406                                  DEV_5INCH96TPI		EQU	1
 21407                                  DEV_3INCH720KB		EQU	2
 21408                                  DEV_8INCHSS		EQU	3
 21409                                  DEV_8INCHDS		EQU	4
 21410                                  DEV_HARDDISK		EQU	5
 21411                                  DEV_OTHER		EQU	7
 21412                                  ;DEV_3INCH1440KB	EQU	7
 21413                                  DEV_3INCH2880KB		EQU	9
 21414                                  ; Retro DOS v2.0 - 26/03/2018
 21415                                  ;;DEV_TAPE		EQU	6
 21416                                  ;;DEV_ERIMO		EQU	8
 21417                                  ;DEV_3INCH2880KB	EQU	9
 21418                                  DEV_3INCH1440KB		EQU	10
 21419                                  
 21420                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
 21421                                  					; CURRENTLY SUPPORT.
 21422                                  MAX_DEV_TYPE		EQU	10
 21423                                  
 21424                                  struc A_SECTORTABLE
 21425 00000000 ????                    .ST_SECTORNUMBER:	resw	1
 21426 00000002 ????                    .ST_SECTORSIZE:		resw	1
 21427                                  .size:
 21428                                  endstruc
 21429                                  
 21430                                  ; 25/03/2019 - Retro DOS v4.0  (MSDOS 6.0, BPB.INC, IOCTL.INC)
 21431                                  
 21432                                  ;**	BIOS PARAMETER BLOCK DEFINITION
 21433                                  ;
 21434                                  ;	The BPB contains information about the disk structure.  It dates
 21435                                  ;	back to the earliest FAT systems and so FAT information is
 21436                                  ;	intermingled with physical driver information.
 21437                                  ;
 21438                                  ;	A boot sector contains a BPB for its device; for other disks
 21439                                  ;	the driver creates a BPB.  DOS keeps copies of some of this
 21440                                  ;	information in the DPB.
 21441                                  ;
 21442                                  ;	The BDS structure contains a BPB within it.
 21443                                  
 21444                                  ; 01/01/2024
 21445                                  %if 0
 21446                                  
 21447                                  struc A_BPB
 21448                                  .BPB_BYTESPERSECTOR:	resw	1
 21449                                  .BPB_SECTORSPERCLUSTER:	resb	1
 21450                                  .BPB_RESERVEDSECTORS:	resw	1
 21451                                  .BPB_NUMBEROFFATS:	resb	1
 21452                                  .BPB_ROOTENTRIES: 	resw	1
 21453                                  .BPB_TOTALSECTORS:	resw	1
 21454                                  .BPB_MEDIADESCRIPTOR:	resb	1
 21455                                  .BPB_SECTORSPERFAT:	resw	1
 21456                                  .BPB_SECTORSPERTRACK:	resw	1
 21457                                  .BPB_HEADS:		resw	1
 21458                                  .BPB_HIDDENSECTORS:	resw	1
 21459                                  			resw	1
 21460                                  .BPB_BIGTOTALSECTORS:	resw	1
 21461                                  			resw	1
 21462                                  			resb	6	; NOTE:  many times these
 21463                                  ;					; 	 6 bytes are omitted
 21464                                  ;					;	 when BPB manipulations
 21465                                  ;					;	 are performed!
 21466                                  .size:
 21467                                  endstruc
 21468                                  
 21469                                  %else
 21470                                  
 21471                                  ; 01/01/2024 - Retro DOS v5.0	
 21472                                  
 21473                                  struc A_BPB
 21474 00000000 ????                    .BYTESPERSECTOR:    resw 1
 21475 00000002 ??                      .SECTORSPERCLUSTER: resb 1
 21476 00000003 ????                    .RESERVEDSECTORS:   resw 1
 21477 00000005 ??                      .NUMBEROFFATS:	    resb 1
 21478 00000006 ????                    .ROOTENTRIES:	    resw 1
 21479 00000008 ????                    .TOTALSECTORS:	    resw 1
 21480 0000000A ??                      .MEDIADESCRIPTOR:   resb 1
 21481 0000000B ????                    .SECTORSPERFAT:	    resw 1
 21482 0000000D ????                    .SECTORSPERTRACK:   resw 1
 21483 0000000F ????                    .HEADS:		    resw 1
 21484 00000011 ????????                .HIDDENSECTORS:	    resd 1
 21485 00000015 ????????                .BIGTOTALSECTORS:   resd 1
 21486                                  ;............ FAT32 ......  + 28
 21487 00000019 ????????                .FATSIZE32:	    resd 1
 21488 0000001D ????                    .EXTFLAGS:	    resw 1
 21489 0000001F ????                    .FSVER:		    resw 1
 21490 00000021 ????????                .ROOTDIRCLUSTER:    resd 1
 21491 00000025 ????                    .FSINFOSECTOR:	    resw 1  ; (offset from FAT32 bs)
 21492 00000027 ????                    .BACKUPBOOTSECTOR:  resw 1  ; (offset from FAT32 bs)
 21493 00000029 <res Ch>                .RESERVEDBYTES:	    resb 12 ; (zero bytes)
 21494                                  .size:
 21495                                  endstruc
 21496                                  
 21497                                  %endif
 21498                                  
 21499                                  struc A_DEVICEPARAMETERS
 21500 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
 21501 00000001 ??                      .DP_DEVICETYPE:		resb	1
 21502 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
 21503 00000004 ????                    .DP_CYLINDERS:		resw	1
 21504 00000006 ??                      .DP_MEDIATYPE:		resb	1
 21505 00000007 <res 35h>               .DP_BPB:		resb	A_BPB.size
 21506 0000003C ????                    .DP_TRACKTABLEENTRIES:	resw	1
 21507 0000003E <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
 21508                                  endstruc
 21509                                  
 21510                                  ; ----------------------------------------------------------------------
 21511                                  ; structure, equates for devmark for mem command.
 21512                                  
 21513                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DEVMARK.INC, 1991)
 21514                                  
 21515                                  struc devmark
 21516 00000000 ??                       .id:	    resb 1
 21517 00000001 ????                     .seg:	    resw 1
 21518 00000003 ????                     .size:	    resw 1
 21519 00000005 ??????                   .dum:	    resb 3
 21520 00000008 ????????????????         .filename: resb 8
 21521                                  endstruc
 21522                                  
 21523                                  devmark_stk	equ	'S'
 21524                                  devmark_device	equ	'D'
 21525                                  devmark_ifs	equ	'I'
 21526                                  devmark_buf	equ	'B'
 21527                                  devmark_cds	equ	'L' ; lastdrive
 21528                                  devmark_files	equ	'F'
 21529                                  devmark_fcbs	equ	'X'
 21530                                  devmark_inst	equ	'T' ; used for sysinit base for install= command.
 21531                                  devmark_ems_stub equ	'E'
 21532                                  
 21533                                  setbrkdone	equ	00000001b
 21534                                  for_devmark	equ	00000010b
 21535                                  not_for_devmark equ	11111101b
 21536                                  
 21537                                  ; ----------------------------------------------------------------------
 21538                                  ; Memory arena structure
 21539                                  
 21540                                  ; 24/03/2019 - Retro DOS v4.0 
 21541                                  ; (MSDOS 6.0, ARENA.INC)
 21542                                  
 21543                                  ;** Arena Header
 21544                                  
 21545                                  struc ARENA
 21546 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
 21547 00000001 ????                    .OWNER:		resw 1		; owner of arena item
 21548 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
 21549 00000005 ??????                  .RESERVED	resb 3		; reserved
 21550 00000008 ????????????????        .NAME:		resb 8		; owner file name
 21551                                  endstruc
 21552                                  
 21553                                  ; 12/04/2019
 21554                                  
 21555                                  arena_owner_system	EQU 0	; free block indication
 21556                                  
 21557                                  arena_signature_normal	EQU 4Dh ; valid signature, not end of arena
 21558                                  arena_signature_end	EQU 5Ah ; valid signature, last block in arena
 21559                                  
 21560                                  ; ----------------------------------------------------------------------
 21561                                  ; Process data block (otherwise known as program header)
 21562                                  
 21563                                  ; 23/03/2019 - Retro DOS v4.0
 21564                                  
 21565                                  ; (MSDOS 6.0 - PDB.INC, 1991)
 21566                                  
 21567                                  FILPERPROC	EQU     20
 21568                                  
 21569                                  struc PDB	; Process_data_block
 21570 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
 21571 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
 21572 00000004 ??                                      resb 1
 21573 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
 21574 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
 21575 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
 21576 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
 21577 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
 21578 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
 21579 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
 21580 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
 21581 00000032 ????                    .JFN_LENGTH:	resw 1 		; number of handles allowed
 21582 00000034 ????????                .JFN_POINTER:	resd 1 		; pointer to JFN table
 21583 00000038 ????????                .NEXT_PDB:	resd 1		; pointer to nested PDB's
 21584 0000003C ??                      .INTERCON:	resb 1 		; *** jh-3/28/90 ***
 21585 0000003D ??                      .APPEND:	resb 1		; *** Not sure if still used ***
 21586 0000003E ????                    .NOVELL_USED:	resb 2		; Novell shell (redir) uses these
 21587 00000040 ????                    .VERSION:	resw 1		; DOS version reported to this app
 21588 00000042 <res Eh>                .PAD1:		resb 14		; 	
 21589 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
 21590 00000055 ??????????????          .PAD2:		resb 7 		; reserved so FCB 1 can be used as an extended FCB
 21591 0000005C <res 10h>               .FCB1:		resb 16		; default FCB 1
 21592 0000006C <res 10h>               .FCB2:		resb 16		; default FCB 2
 21593 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
 21594 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
 21595                                  ;.size:
 21596                                  endstruc
 21597                                  
 21598                                  ; ----------------------------------------------------------------------
 21599                                  ; <system call definitions>
 21600                                  
 21601                                  ; 23/03/2019 - Retro DOS v4.0
 21602                                  
 21603                                  ; (MSDOS 6.0 - SYSCALL.INC, 1991)
 21604                                  
 21605                                  ABORT                           EQU 0   ;  0      0
 21606                                  STD_CON_INPUT                   EQU 1   ;  1      1
 21607                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
 21608                                  STD_AUX_INPUT                   EQU 3   ;  3      3
 21609                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
 21610                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
 21611                                  RAW_CON_IO                      EQU 6   ;  6      6
 21612                                  RAW_CON_INPUT                   EQU 7   ;  7      7
 21613                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
 21614                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
 21615                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
 21616                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
 21617                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
 21618                                  DISK_RESET                      EQU 13  ; 13      D
 21619                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
 21620                                  FCB_OPEN                        EQU 15  ; 15      F
 21621                                  FCB_CLOSE                       EQU 16  ; 16     10
 21622                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
 21623                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
 21624                                  FCB_DELETE                      EQU 19  ; 19     13
 21625                                  FCB_SEQ_READ                    EQU 20  ; 20     14
 21626                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
 21627                                  FCB_CREATE                      EQU 22  ; 22     16
 21628                                  FCB_RENAME                      EQU 23  ; 23     17
 21629                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
 21630                                  SET_DMA                         EQU 26  ; 26     1A
 21631                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
 21632                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
 21633                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
 21634                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
 21635                                  GET_FCB_POSITION                EQU 36  ; 36     24
 21636                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
 21637                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
 21638                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
 21639                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
 21640                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
 21641                                  GET_DATE                        EQU 42  ; 42     2A
 21642                                  SET_DATE                        EQU 43  ; 43     2B
 21643                                  GET_TIME                        EQU 44  ; 44     2C
 21644                                  SET_TIME                        EQU 45  ; 45     2D
 21645                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
 21646                                  ; Extended functionality group
 21647                                  GET_DMA                         EQU 47  ; 47     2F
 21648                                  GET_VERSION                     EQU 48  ; 48     30
 21649                                  KEEP_PROCESS                    EQU 49  ; 49     31
 21650                                  GET_DPB                         EQU 50  ; 50     32
 21651                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
 21652                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
 21653                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
 21654                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
 21655                                  CHAR_OPER                       EQU 55  ; 55     37
 21656                                  INTERNATIONAL                   EQU 56  ; 56     38
 21657                                  ;   Directory Group
 21658                                  MKDIR                           EQU 57  ; 57     39
 21659                                  RMDIR                           EQU 58  ; 58     3A
 21660                                  CHDIR                           EQU 59  ; 59     3B
 21661                                  ;   File Group
 21662                                  CREAT                           EQU 60  ; 60     3C
 21663                                  OPEN                            EQU 61  ; 61     3D
 21664                                  CLOSE                           EQU 62  ; 62     3E
 21665                                  READ                            EQU 63  ; 63     3F
 21666                                  WRITE                           EQU 64  ; 64     40
 21667                                  UNLINK                          EQU 65  ; 65     41
 21668                                  LSEEK                           EQU 66  ; 66     42
 21669                                  CHMOD                           EQU 67  ; 67     43
 21670                                  IOCTL                           EQU 68  ; 68     44
 21671                                  XDUP                            EQU 69  ; 69     45
 21672                                  XDUP2                           EQU 70  ; 70     46
 21673                                  CURRENT_DIR                     EQU 71  ; 71     47
 21674                                  ;    Memory Group
 21675                                  ALLOC                           EQU 72  ; 72     48
 21676                                  DEALLOC                         EQU 73  ; 73     49
 21677                                  SETBLOCK                        EQU 74  ; 74     4A
 21678                                  ;    Process Group
 21679                                  EXEC                            EQU 75  ; 75     4B
 21680                                  EXIT                            EQU 76  ; 76     4C
 21681                                  WAITPROCESS			EQU 77  ; 77     4D
 21682                                  FIND_FIRST                      EQU 78  ; 78     4E
 21683                                  ;   Special Group
 21684                                  FIND_NEXT                       EQU 79  ; 79     4F
 21685                                  ; SPECIAL SYSTEM GROUP
 21686                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
 21687                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
 21688                                  GET_IN_VARS                     EQU 82  ; 82     52
 21689                                  SETDPB                          EQU 83  ; 83     53
 21690                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
 21691                                  DUP_PDB                         EQU 85  ; 85     55
 21692                                  RENAME                          EQU 86  ; 86     56
 21693                                  FILE_TIMES                      EQU 87  ; 87     57
 21694                                  ;
 21695                                  ALLOCOPER			EQU 88	; 88     58	
 21696                                  ; Network extention system calls
 21697                                  GetExtendedError		EQU 89	; 89	 59
 21698                                  CreateTempFile			EQU 90	; 90	 5A
 21699                                  CreateNewFile			EQU 91	; 91	 5B
 21700                                  LockOper			EQU 92	; 92	 5C Lock and Unlock
 21701                                  ServerCall			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
 21702                                  					;	    CloseByName, CloseUser,
 21703                                  					;	    CloseUserProcess,
 21704                                  					;	    GetOpenFileList
 21705                                  UserOper			EQU 94	; 94	 5E Get and Set
 21706                                  AssignOper			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
 21707                                  xNameTrans			EQU 96	; 96	 60
 21708                                  PathParse			EQU 97	; 97	 61
 21709                                  GetCurrentPSP			EQU 98	; 98	 62
 21710                                  Hongeul 			EQU 99	; 99	 63
 21711                                  ECS_CALL			EQU 99	; 99	 63  ;; DBCS support
 21712                                  Set_Printer_Flag		EQU 100 ; 100	 64
 21713                                  GetExtCntry			EQU 101 ; 101	 65
 21714                                  GetSetCdPg			EQU 102 ; 102	 66
 21715                                  ExtHandle			EQU 103 ; 103	 67
 21716                                  Commit				EQU 104 ; 104	 68
 21717                                  GetSetMediaID			EQU 105 ; 105	 69
 21718                                  IFS_IOCTL			EQU 107 ; 107	 6B
 21719                                  ExtOpen 			EQU 108 ; 108	 6C
 21720                                  ;
 21721                                  ;ifdef ROMEXEC
 21722                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
 21723                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
 21724                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F
 21725                                  ;endif
 21726                                  ;
 21727                                  Set_Oem_Handler 		EQU 248 ; 248	 F8
 21728                                  OEM_C1				EQU 249 ; 249	 F9
 21729                                  OEM_C2				EQU 250 ; 250	 FA
 21730                                  OEM_C3				EQU 251 ; 251	 FB
 21731                                  OEM_C4				EQU 252 ; 252	 FC
 21732                                  OEM_C5				EQU 253 ; 253	 FD
 21733                                  OEM_C6				EQU 254 ; 254	 FE
 21734                                  OEM_C7				EQU 255 ; 255	 FF
 21735                                  
 21736                                  ; ----------------------------------------------------------------------
 21737                                  ; SYSCONF.ASM (MSDOS 3.3 - 24/07/1987) 	
 21738                                  ; ----------------------------------------------------------------------
 21739                                  
 21740                                  ;;	IF	STACKSW
 21741                                  
 21742                                  ;;
 21743                                  ;; Internal Stack Parameters
 21744                                  ;EntrySize		equ	8
 21745                                  ;
 21746                                  ;MinCount		equ	8
 21747                                  ;DefaultCount		equ	9
 21748                                  ;MaxCount		equ	64
 21749                                  ;
 21750                                  ;MinSize 		equ	32
 21751                                  ;DefaultSize		equ	128
 21752                                  ;MaxSize 		equ	512
 21753                                  
 21754                                  ;;	ENDIF
 21755                                  
 21756                                  ; ----------------------------------------------------------------------
 21757                                  ; BIOSTRUC.INC (MSDOS 3.3 - 24/07/1987) 	
 21758                                  ; ----------------------------------------------------------------------
 21759                                  					  ;;Rev 3.30 Modification
 21760                                  ; ROM BIOS CALL PACKET STRUCTURES					  
 21761                                  									  
 21762                                  ;*******************************					  
 21763                                  ;System Service call ( Int 15h )					  
 21764                                  ;*******************************					  
 21765                                  ;Function AH = 0C0h, Return system configuration			  
 21766                                  ;For PC and PCJR on return:						  
 21767                                  ;	(AH)	= 80h							  
 21768                                  ;	(CY)	= 1							  
 21769                                  ;For PCXT, PC PORTABLE and PCAT on return:				  
 21770                                  ;	(AH)	= 86h							  
 21771                                  ;	(CY)	= 1							  
 21772                                  ;For all others:							  
 21773                                  ;	(AH)	= 0							  
 21774                                  ;	(CY)	= 0							  
 21775                                  ;	(ES:BX) = pointer to system descriptor vector in ROS		  
 21776                                  ; System descriptor :							  
 21777                                  ;	DW	xxxx		length of descriptor in bytes,		  
 21778                                  ;				minimum length = 8			  
 21779                                  ;	DB	xx		model byte				  
 21780                                  ;				0FFh	= PC				  
 21781                                  ;				0FEh	= PC/XT, Portable		  
 21782                                  ;				0FDh	= PC/JR 			  
 21783                                  ;				0FCh	= PC/AT				  
 21784                                  ;				0F9h	= Convertable			  
 21785                                  ;				0F8h	= Model 80			  
 21786                                  ;				0E0 thru 0EFh = reserved		  
 21787                                  ;									  
 21788                                  ;	DB	xx		secondary model byte			  
 21789                                  ;				000h	= PC1				  
 21790                                  ;				000h	= PC/XT, Portable		  
 21791                                  ;				000h	= PC/JR 			  
 21792                                  ;				000h	= PC/AT 			  
 21793                                  ;				001h	= PC/AT Model 339		  
 21794                                  ;				003h	= PC/RT				  
 21795                                  ;				000h	= Convertable			  
 21796                                  ;									  
 21797                                  ;	DB	xx		bios revision level			  
 21798                                  ;				00 for first release, subsequent release  
 21799                                  ;				of code with same model byte and	  
 21800                                  ;				secondary model byte require revison level
 21801                                  ;				to increase by one.			  
 21802                                  ;									  
 21803                                  ;	DB	xx		feature information byte 1		  
 21804                                  ;				X0000000 = 1, bios use DMA channel 3	  
 21805                                  ;					 = 0, DMA channel 3 not used	  
 21806                                  ;									  
 21807                                  ;				0X000000 = 1, 2nd Interrupt chip present  
 21808                                  ;					 = 0, 2nd Interrupt chip not present
 21809                                  ;									  
 21810                                  ;				00X00000 = 1, Real Time Clock present	  
 21811                                  ;					 = 0, Real Time Clock not present 
 21812                                  ;									  
 21813                                  ;				000X0000 = 1, Keyboard escape sequence(INT 15h)
 21814                                  ;						called in keyboard interrupt
 21815                                  ;						(Int 09h).		  
 21816                                  ;					 = 0, Keyboard escape sequence not
 21817                                  ;						called. 		  
 21818                                  ;				0000XXXX reserved			  
 21819                                  ;									  
 21820                                  ;	DB	xx		feature information byte 2 - reserved	  
 21821                                  ;									  
 21822                                  ;	DB	xx		feature information byte 2 - reserved	  
 21823                                  ;									  
 21824                                  ;	DB	xx		feature information byte 2 - reserved	  
 21825                                  ;									  
 21826                                  ;	DB	xx		feature information byte 2 - reserved	  
 21827                                  ;									  
 21828                                  
 21829                                  ; 22/03/2019
 21830                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR
 21831 00000000 ????                    .bios_sd_leng:		resw 1
 21832 00000002 ??                      .bios_sd_modelbyte:	resb 1
 21833                                  .bios_sd_scnd_modelbyte: 
 21834 00000003 ??                      			resb 1
 21835 00000004 ??                      			resb 1
 21836 00000005 ??                      .bios_sd_featurebyte1:	resb 1
 21837 00000006 ????????                			resb 4
 21838                                  endstruc
 21839                                  
 21840                                  ;FeatureByte1	bit map equates
 21841                                  DMAchannel3		equ 10000000b
 21842                                  ScndIntController	equ 01000000b
 21843                                  RealTimeClock		equ 00100000b
 21844                                  KeyEscapeSeq		equ 00010000b
 21845                                  					;;End of Modification
 21846                                  
 21847                                  ; ----------------------------------------------------------------------
 21848                                  ; SYSVAR.INC (MSDOS 6.0 - 1991) 	
 21849                                  ; ----------------------------------------------------------------------
 21850                                  ; 22/03/2019 - Retro DOS v4.0
 21851                                  
 21852                                  ;	SCCSID = @(#)sysvar.asm 1.1 85/04/10
 21853                                  
 21854                                  struc SysInitVars
 21855                                  ; MSDOS 3.3
 21856 00000000 ????????                .SYSI_DPB:    resd 1			; DPB chain
 21857 00000004 ????????                .SYSI_SFT:    resd 1			; SFT chain
 21858 00000008 ????????                .SYSI_CLOCK:  resd 1			; CLOCK device
 21859 0000000C ????????                .SYSI_CON:    resd 1			; CON device
 21860 00000010 ????                    .SYSI_MAXSEC: resw 1			; maximum sector size
 21861 00000012 ????????                .SYSI_BUF:    resd 1			; buffer chain
 21862 00000016 ????????                .SYSI_CDS:    resd 1			; CDS list
 21863 0000001A ????????                .SYSI_FCB:    resd 1			; FCB chain
 21864 0000001E ????                    .SYSI_KEEP:   resw 1			; keep count
 21865 00000020 ??                      .SYSI_NUMIO:  resb 1			; number of block devices
 21866 00000021 ??                      .SYSI_NCDS:   resb 1			; number of CDS's
 21867 00000022 ????????                .SYSI_DEV:    resd 1			; device list
 21868                                  ; MSDOS 6.0
 21869 00000026 ????                    .SYSI_ATTR:	    resw 1		; null device attribute word
 21870 00000028 ????                    .SYSI_STRAT:	    resw 1		; null device strategy entry point
 21871 0000002A ????                    .SYSI_INTER:	    resw 1		; null device interrupt entry point
 21872 0000002C ????????????????        .SYSI_NAME:	    resb 8		; null device name
 21873                                  .SYSI_SPLICE:	    resb 0		; TRUE -> splicees being done
 21874 00000034 ????                    .SYSI_IBMDOS_SIZE:  resw 1		; DOS size in paragraphs
 21875 00000036 ????????                .SYSI_IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
 21876 0000003A ????????                .SYSI_IFS:	    resd 1	 	; IFS header chain
 21877 0000003E ????????                .SYSI_BUFFERS:	    resw 2		; BUFFERS= values (m,n)
 21878 00000042 ??                      .SYSI_BOOT_DRIVE:   resb 1		; boot drive A=1 B=2,..
 21879 00000043 ??                      .SYSI_DWMOVE:	    resb 1		; 1 if 386 machine
 21880 00000044 ????                    .SYSI_EXT_MEM:	    resw 1		; Extended memory size in KB.
 21881                                  .size:
 21882                                  endstruc
 21883                                  
 21884                                  ;This is added for more information exchage between DOS, BIOS.
 21885                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
 21886                                  
 21887                                  ; 22/03/2019
 21888                                  struc SysInitVars_Ext
 21889 00000000 ????????                .SYSI_InitVars:	   resd 1	; Points to the above structure.
 21890 00000004 ????????                .SYSI_Country_Tab: resd 1	; DOS_Country_cdpg_info
 21891                                  endstruc
 21892                                  
 21893                                  ; 09/06/2018
 21894                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3)
 21895                                  SYSI_DPB    equ	0
 21896                                  SYSI_SFT    equ 4
 21897                                  SYSI_CLOCK  equ 8
 21898                                  SYSI_CON    equ 12
 21899                                  SYSI_MAXSEC equ 16
 21900                                  SYSI_BUF    equ 18
 21901                                  SYSI_CDS    equ 22
 21902                                  SYSI_FCB    equ 26
 21903                                  SYSI_KEEP   equ 30
 21904                                  SYSI_NUMIO  equ	32
 21905                                  SYSI_NCDS   equ	33
 21906                                  SYSI_DEV    equ 34
 21907                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0)
 21908                                  SYSI_ATTR	  equ 38
 21909                                  SYSI_STRAT	  equ 40
 21910                                  SYSI_INTER	  equ 42
 21911                                  SYSI_NAME	  equ 44
 21912                                  SYSI_SPLICE	  equ 52
 21913                                  SYSI_IBMDOS_SIZE  equ 53
 21914                                  SYSI_IFS_DOSCALL@ equ 55
 21915                                  SYSI_IFS	  equ 59
 21916                                  SYSI_BUFFERS	  equ 63
 21917                                  SYSI_BOOT_DRIVE   equ 67
 21918                                  SYSI_DWMOVE	  equ 68
 21919                                  SYSI_EXT_MEM	  equ 69
 21920                                  
 21921                                  ;The SYSI_BUF of SysInitVars points to the following structure
 21922                                  
 21923                                  EMS_MAP_BUFF_SIZE EQU 12	; EMS map buffer size
 21924                                  
 21925                                  struc BUFFINF 	; BUFFINFO
 21926 00000000 ????????                .Buff_Queue:	   resd	1	; Head of list of buffers
 21927 00000004 ????                    .Dirty_Buff_Count: resw 1	; number of dirty buffers in list
 21928 00000006 ????????                .Cache_ptr:	   resd 1	; pointer to secondary cache
 21929 0000000A ????                    .Cache_count:      resw 1	; number of secondary cache entries
 21930                                  
 21931 0000000C ??                      .Buff_In_HMA:	   resb 1	; flag to indicate that buffers
 21932                                  				; are in HMA
 21933 0000000D ????????                .Lo_Mem_Buff:	   resd 1	; Ptr to scratch buff in Low Mem
 21934                                  				;  used to read/write on disks
 21935 00000011 ????????                .UU_EMS_FIRST_PAGE:	resw 2
 21936 00000015 ????                    .UU_EMS_NPA640:		resw 1
 21937 00000017 ??                      .UU_EMS_mode:		resb 1	 ; no EMS = -1
 21938 00000018 ????                    .UU_EMS_handle:		resw 1	 ; EMS handle for buffers
 21939 0000001A ????                    .UU_EMS_PageFrame_Number: resw 1 ; EMS page frame number
 21940 0000001C ????                    .UU_EMS_Seg_Cnt:	resw 1	 ; EMS segment count
 21941 0000001E ????                    .UU_EMS_Page_Frame:	resw 1	 ; EMS page frame segment address
 21942 00000020 ????                    .UU_EMS_reserved:	resw 1	 ; EMS segment count
 21943 00000022 ??                      .UU_EMS_Map_Buff:	resb 1	 ; map buffer
 21944                                  .size:
 21945                                  endstruc
 21946                                  
 21947                                  ; ----------------------------------------------------------------------
 21948                                  ; CURDIR.INC (MSDOS 6.0 - 1991)
 21949                                  ; ----------------------------------------------------------------------
 21950                                  ; 22/03/2019 - Retro DOS v4.0
 21951                                  
 21952                                  ;**	CDS - Current Directory Structure
 21953                                  ;
 21954                                  ; CDS items are used bu the internal routines to store cluster numbers and
 21955                                  ; network identifiers for each logical name.  The ID field is used dually,
 21956                                  ; both as net ID and for a cluster number for local devices. In the case
 21957                                  ; of local devices, the cluster number will be -1 if there is a potential
 21958                                  ; of the disk being changed or if the path must be recracked.
 21959                                  ;
 21960                                  ;	Some pathnames have special preambles, such as
 21961                                  ;
 21962                                  ;		\\machine\sharename\...
 21963                                  ;	For these pathnames we can't allow ".." processing to back us
 21964                                  ;	up into the special front part of the name.  The CURDIR_END field
 21965                                  ;	holds the address of the seperator character which marks
 21966                                  ;	the split between the special preamble and the regular
 21967                                  ;	path list; ".." processing isn't allowed to back us up past
 21968                                  ;	(i.e., before) CURDIR_END
 21969                                  ;	For the root, it points at the leading /. For net
 21970                                  ;	assignments it points at the end (nul) of the initial assignment:
 21971                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
 21972                                  ;	  ^		 ^		     ^
 21973                                  
 21974                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
 21975                                  TEMPLEN 	EQU	DIRSTRLEN*2
 21976                                  
 21977                                  struc 		curdir_list
 21978                                  ; MSDOS 3.3
 21979 00000000 <res 43h>               .cdir_text	resb	DIRSTRLEN	; text of assignment and curdir
 21980 00000043 ????                    .cdir_flags	resw	1		; various flags
 21981 00000045 ????????                .cdir_devptr	resd	1		; local pointer to DPB or net device
 21982 00000049 ????????                .cdir_ID	resw	2		; cluster of current dir (net ID)
 21983 0000004D ????                    .cdir_usr_word	resw	1
 21984 0000004F ????                    .cdir_end	resw	1		; end of assignment
 21985                                  ; MSDOS 6.0
 21986 00000051 ??                      .cdir_type:	resb	1		; IFS drive (2=ifs, 4=netuse)
 21987 00000052 ????????                .cdir_ifd_hdr:	resd	1		; Ptr to File System Header
 21988 00000056 ????                    .cdir_fsda:	resb	2		; File System Dependent Data Area
 21989                                  .size:
 21990                                  endstruc
 21991                                  
 21992                                  curdirlen	EQU	curdir_list.size	; Needed for screwed up
 21993                                  						; ASM87 which doesn't allow
 21994                                  						; Size directive as a macro
 21995                                  						; argument
 21996                                  %define curdir_netID	dword [curdir_list.cdir_ID]
 21997                                  
 21998                                  ;**	Flag values for CURDIR_FLAGS
 21999                                  
 22000                                  ;Flag word masks
 22001                                  curdir_isnet	EQU	1000000000000000B
 22002                                  curdir_isifs	EQU	1000000000000000B
 22003                                  curdir_inuse	EQU	0100000000000000B
 22004                                  curdir_splice	EQU	0010000000000000B
 22005                                  curdir_local	EQU	0001000000000000B
 22006                                  
 22007                                  ; ----------------------------------------------------------------------
 22008                                  ; SF.INC (MSDOS 6.0 - 1991) 	
 22009                                  ; ----------------------------------------------------------------------
 22010                                  ; 25/03/2019 - Retro DOS v4.0
 22011                                  
 22012                                  ; 09/04/2024 - Retro DOS v4.2 (BugFix)
 22013                                  ; 09/04/2024 - Retro DOS v5.0
 22014                                  
 22015                                  ; system file table
 22016                                  
 22017                                  ;**	System File Table SuperStructure
 22018                                  ;
 22019                                  ;	The system file table entries are allocated in contiguous groups.
 22020                                  ;	There may be more than one such groups; the SF "superstructure"
 22021                                  ;	tracks the groups.
 22022                                  
 22023                                  struc	SF
 22024 00000000 ????????                .SFLink:	resd	1
 22025 00000004 ????                    .SFCount:	resw	1		; number of entries
 22026 00000006 ????                    .SFTable:	resw	1		; beginning of array of the following
 22027                                  .size:
 22028                                  endstruc
 22029                                  
 22030                                  ;**	System file table entry
 22031                                  ;
 22032                                  ;	These are the structures which are at SFTABLE in the SF structure.
 22033                                  
 22034                                  struc	SF_ENTRY
 22035 00000000 ????                    .sf_ref_count:	resw	1		; number of processes sharing entry
 22036                                  					;   if FCB then ref count
 22037 00000002 ????                    .sf_mode: 	resw	1		; mode of access or high bit on if FCB
 22038 00000004 ??                      .sf_attr: 	resb	1		; attribute of file
 22039 00000005 ????                    .sf_flags:	resw	1		;Bits 8-15
 22040                                  					; Bit 15 = 1 if remote file
 22041                                  					;	 = 0 if local file or device
 22042                                  					; Bit 14 = 1 if date/time is not to be
 22043                                  					;   set from clock at CLOSE.  Set by
 22044                                  					;   FILETIMES and FCB_CLOSE.  Reset by
 22045                                  					;   other reseters of the dirty bit
 22046                                  					;   (WRITE)
 22047                                  					; Bit 13 = Pipe bit (reserved)
 22048                                  					;
 22049                                  					; Bits 0-7 (old FCB_devid bits)
 22050                                  					; If remote file or local file, bit
 22051                                  					; 6=0 if dirty Device ID number, bits
 22052                                  					; 0-5 if local file.
 22053                                  					; bit 7=0 for local file, bit 7
 22054                                  					;      =1 for local I/O device
 22055                                  					; If local I/O device, bit 6=0 if EOF (input)
 22056                                  					;		Bit 5=1 if Raw mode
 22057                                  					;		Bit 0=1 if console input device
 22058                                  					;		Bit 1=1 if console output device
 22059                                  					;		Bit 2=1 if null device
 22060                                  					;		Bit 3=1 if clock device
 22061 00000007 ????????                .sf_devptr:	resd	1		; Points to DPB if local file, points
 22062                                  					; to device header if local device,
 22063                                  					; points to net device header if
 22064                                  					; remote
 22065 0000000B ????                    .sf_firclus:	resw	1		; First cluster of file (bit 15 = 0)
 22066                                  ;.sf_lstclus:	resw	1 ; *	
 22067 0000000D ????                    .sf_time: 	resw	1		; Time associated with file
 22068 0000000F ????                    .sf_date: 	resw	1		; Date associated with file
 22069 00000011 ????????                .sf_size: 	resd	1		; Size associated with file
 22070 00000015 ????????                .sf_position:	resd	1		; Read/Write pointer or LRU count for FCBs
 22071                                  ;
 22072                                  ; Starting here, the next 7 bytes may be used by the file system to store an
 22073                                  ; ID
 22074                                  ;
 22075 00000019 ????                    .sf_cluspos:	resw	1		; Position of last cluster accessed
 22076 0000001B ????????                .sf_dirsec:	resd	1 ; 09/04/2024	; Sector number of directory sector for this file
 22077 0000001F ??                      .sf_dirpos:	resb	1		; Offset of this entry in the above
 22078                                  ;
 22079                                  ; End of 7 bytes of file-system specific info.
 22080                                  ;
 22081 00000020 <res Bh>                .sf_name:	resb	11		; 11 character name that is in the
 22082                                  					; directory entry.  This is used by
 22083                                  					; close to detect file deleted and
 22084                                  					; disk changed errors.
 22085                                  ; SHARING INFO
 22086 0000002B ????????                .sf_chain:	resd	1		; link to next SF
 22087 0000002F ????                    .sf_UID:	resw	1
 22088 00000031 ????                    .sf_PID:	resw	1
 22089 00000033 ????                    .sf_MFT:	resw	1
 22090 00000035 ????                    .sf_lstclus:	resw	1 ; *		; Last cluster accessed
 22091 00000037 ????????                .sf_IFS_HDR:	resd 	1 ; **
 22092                                  .size:
 22093                                  endstruc
 22094                                  
 22095                                  ; ----------------------------------------------------------------------
 22096                                  ; DOSCNTRY.INC (MSDOS 3.3 - 24/07/1987)
 22097                                  ; ----------------------------------------------------------------------
 22098                                  ; 11/06/2018 - Retro DOS v3.0
 22099                                  
 22100                                  ;Equates for COUNTRY INFORMATION.
 22101                                  SetCountryInfo		EQU	1	;country info
 22102                                  SetUcase		EQU	2	;uppercase table
 22103                                  SetLcase		EQU	3	;lowercase table (Reserved)
 22104                                  SetUcaseFile		EQU	4	;uppercase file spec table
 22105                                  SetFileList		EQU	5	;valid file character list
 22106                                  SetCollate		EQU	6	;collating sequence
 22107                                  SetDBCS 		EQU	7	;double byte character set
 22108                                  SetALL			EQU	-1	;all the entries
 22109                                  
 22110                                  ;DOS country and code page information table structure.
 22111                                  ;Internally, IBMDOS gives a pointer to this table.
 22112                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
 22113                                  ;this structure.
 22114                                  
 22115                                  struc country_cdpg_info ; DOS_country_cdpg_info
 22116 00000000 ????????????????        .ccInfo_reserved :	resb	8	;reserved for internal use
 22117 00000008 <res 40h>               .ccPath_CountrySys:	resb	64	;path and filename for country info
 22118 00000048 ????                    .ccSysCodePage:		resw	1	;system code page id
 22119 0000004A ????                    .ccNumber_of_entries:	resw	1 ; dw 5
 22120 0000004C ??                      .ccSetUcase:		resb	1 ; db SetUcase ; = 2
 22121 0000004D ????????                .ccUcase_ptr:		resd	1	;pointer to Ucase table
 22122                                  
 22123 00000051 ??                      .ccSetUcaseFile:	resb	1 ; db SetUcaseFile ; = 4
 22124 00000052 ????????                .ccFileUcase_ptr: 	resd	1	;pointer to File Ucase table
 22125                                  
 22126 00000056 ??                      .ccSetFileList:		resb	1 ; db SetFileList ; = 5
 22127 00000057 ????????                .ccFileChar_ptr:	resd	1	;pointer to File char list table
 22128                                  
 22129 0000005B ??                      .ccSetCollate:		resb	1 ; db SetCollate ; = 6
 22130 0000005C ????????                .ccCollate_ptr:		resd	1	;pointer to collate table
 22131                                  
 22132 00000060 ??                      .ccSetCountryInfo:	resb	1 ; db SetCountryInfo ; = 1
 22133 00000061 ????                    .ccCountryInfoLen:	resw	1	;length of country info
 22134 00000063 ????                    .ccDosCountry:		resw	1	;system country code id
 22135 00000065 ????                    .ccDosCodePage:		resw	1	;system code page id
 22136 00000067 ????                    .ccDFormat:		resw	1	;date format
 22137 00000069 ??????????              .ccCurSymbol:		resb	5 ; db "    ",0
 22138                                  					;5 byte of (currency symbol+0)
 22139 0000006E ????                    .cc1000Sep:		resb	2 ; db " ",0 ;2 byte of (1000 sep. + 0)
 22140 00000070 ????                    .ccDecSep:		resb	2 ; db " ",0 ;2 byte of (Decimal sep. + 0)
 22141 00000072 ????                    .ccDateSep:		resb	2 ; db " ",0 ;2 byte of (date sep. + 0)
 22142 00000074 ????                    .ccTimeSep:		resb 	2 ; db " ",0 ;2 byte of (time sep. + 0)
 22143 00000076 ??                      .ccCFormat:		resb	1 	;currency format flags
 22144 00000077 ??                      .ccCSigDigits:		resb	1	;# of digits in currency
 22145 00000078 ??                      .ccTFormat:		resb	1	;time format
 22146 00000079 ????????                .ccMono_Ptr:		resd	1	;monocase routine entry point
 22147 0000007D ????                    .ccListSep:		resb	2 ; db " ",0 ;data list separator
 22148 0000007F <res Ah>                .ccReserved_area: 	resw	5 ; dw 5 dup(?) ;reserved
 22149                                  .size:
 22150                                  endstruc
 22151                                  
 22152                                  NEW_COUNTRY_SIZE    equ  country_cdpg_info.size - country_cdpg_info.ccDosCountry
 22153                                  
 22154                                  ; ======================================================================
 22155                                  ; retrodos4.s (offset addresses in MSDOS.SYS or RETRODOS.SYS)
 22156                                  ; ======================================================================
 22157                                  ; 21/03/2019 - Retro DOS v4.0
 22158                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 22159                                  
 22160                                  ;KERNEL_SEGMENT	equ 0070h  ; (IO.SYS loading segment, BIOS_DATA segment)
 22161                                  ; 21/10/2022
 22162                                  DOSBIODATASEG equ 0070h	; (IO.SYS loading segment, BIOS_DATA segment)
 22163                                  ; 22/10/2022
 22164                                  ;DOSBIOCODESEG equ 02C7h ; (MSDOS 5.0 IO.SYS, BIOS_CODE segment)
 22165                                  ; 09/12/2022
 22166                                  DOSBIOCODESEG equ IOSYSCODESEG
 22167                                  
 22168                                  ; Note: These offset addresses must be chanqed when the code 
 22169                                  ; 	in retrodos4.s (MSDOS.SYS) file will be changed.
 22170                                  
 22171                                  ; (following addresses can be verified by searching them in retrodos4.lst) 
 22172                                  
 22173                                  ; 09/12/2022
 22174                                  %if 0
 22175                                  
 22176                                  ; 13/05/2019
 22177                                  
 22178                                  ;IsWin386         equ 08CFh
 22179                                  ;V86_Crit_SetFocus equ 08D0h
 22180                                  ; 21/10/2022
 22181                                  IsWin386          equ 08D0h
 22182                                  V86_Crit_SetFocus equ 08D1h 
 22183                                  
 22184                                  ;seg_reinit	  equ 0772h ; not used in Retro DOS v4.0
 22185                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 22186                                  seg_reinit	  equ 0032h ; DOSBIOCODESEG:0032h
 22187                                  
 22188                                  ;SysinitPresent	  equ 08FCh
 22189                                  ; 21/10/2022
 22190                                  SysinitPresent	  equ 08FDh
 22191                                  
 22192                                  inHMA		  equ 000Dh
 22193                                  xms		  equ 000Eh
 22194                                  ;FreeHMAPtr	  equ 08F6h
 22195                                  ;multrk_flag	  equ 0533h
 22196                                  ;ec35_flag	  equ 0535h
 22197                                  ;EOT		  equ 012Eh
 22198                                  ; 21/10/2022
 22199                                  FreeHMAPtr	  equ 08F7h
 22200                                  multrk_flag	  equ 052Fh
 22201                                  ec35_flag	  equ 0531h
 22202                                  EOT		  equ 012Ch
 22203                                  
 22204                                  ;NextStack	  equ 08BFh
 22205                                  ;IT_StackLoc	  equ 08C5h
 22206                                  ;IT_StackSize	  equ 08C9h
 22207                                  ; 21/10/2022
 22208                                  NextStack	  equ 08C0h
 22209                                  IT_StackLoc	  equ 08C6h
 22210                                  IT_StackSize	  equ 08CAh
 22211                                  
 22212                                  ;MoveDOSIntoHMA	  equ 08F8h
 22213                                  ; 21/10/2022
 22214                                  MoveDOSIntoHMA	  equ 08F9h
 22215                                  
 22216                                  ;INT19SEM equ 0644h ; 01/05/2019 - retrodos4.lst
 22217                                  ;I19_LST  equ 0645h ; 27/03/2019 - retrodos4.lst
 22218                                  ; 21/10/2022
 22219                                  INT19SEM equ 0640h ; (iosys5.txt)
 22220                                  I19_LST  equ 0641h ; (iosys5.txt)
 22221                                  
 22222                                  %endif
 22223                                  
 22224                                  ; 09/12/2022
 22225                                  seg_reinit equ _seg_reinit
 22226                                  ec35_flag  equ ec35flag
 22227                                  INT19SEM   equ int19sem
 22228                                  I19_LST    equ i19_lst
 22229                                  
 22230                                  INT19OLD02 equ I19_LST+1 ; 0642h ; 21/10/2022
 22231                                  INT19OLD08 equ I19_LST+6
 22232                                  INT19OLD09 equ I19_LST+11
 22233                                  INT19OLD0A equ I19_LST+16
 22234                                  INT19OLD0B equ I19_LST+21
 22235                                  INT19OLD0C equ I19_LST+26
 22236                                  INT19OLD0D equ I19_LST+31
 22237                                  INT19OLD0E equ I19_LST+36
 22238                                  INT19OLD70 equ I19_LST+41
 22239                                  INT19OLD72 equ I19_LST+46
 22240                                  INT19OLD73 equ I19_LST+51
 22241                                  INT19OLD74 equ I19_LST+56
 22242                                  INT19OLD76 equ I19_LST+61
 22243                                  INT19OLD77 equ I19_LST+66 ; 0683h ; 21/10/2022
 22244                                  
 22245                                  ; 09/12/2022
 22246                                  %if 0
 22247                                  
 22248                                  ;keyrd_func	equ 04E9h
 22249                                  ;keysts_func	equ 04EAh
 22250                                  ;t_switch	equ 04F6h
 22251                                  ; 21/10/2022
 22252                                  keyrd_func	equ 04E5h
 22253                                  keysts_func	equ 04E6h
 22254                                  t_switch	equ 04F2h
 22255                                  
 22256                                  ; 22/10/2022
 22257                                  SYSINITSEG	equ 046Dh  ; SYSINIT segment
 22258                                  BCODE_END	equ (SYSINITSEG-DOSBIOCODESEG)*16 ; = 1A60h
 22259                                  BCODE_START	equ 30h  ; (offset BiosDataWord in DOSBIOCODESEG) 
 22260                                  RE_INIT		equ 089Bh ; (re_init offset in DOSBIODATASEG)
 22261                                  
 22262                                  %endif
 22263                                  
 22264                                  ; 09/12/2022
 22265                                  BCODESTART	equ BIOSDATAWORD
 22266                                  RE_INIT		equ re_init
 22267                                  
 22268                                  ; ----------------------------------------------------------------------
 22269                                  ; CONFIG.INC (MSDOS 6.0 - 1991)
 22270                                  ; ----------------------------------------------------------------------
 22271                                  ; 15/04/2019 - Retro DOS v4.0
 22272                                  
 22273                                  CONFIG_BEGIN        equ  '['
 22274                                  CONFIG_BREAK        equ  'C'
 22275                                  CONFIG_BUFFERS      equ  'B'
 22276                                  CONFIG_COMMENT      equ  'Y'
 22277                                  CONFIG_COUNTRY      equ  'Q'
 22278                                  CONFIG_DEVICE       equ  'D'
 22279                                  CONFIG_DEVICEHIGH   equ  'U'
 22280                                  CONFIG_DOS          equ  'H'
 22281                                  CONFIG_DRIVPARM     equ  'P'
 22282                                  CONFIG_FCBS         equ  'X'
 22283                                  CONFIG_FILES        equ  'F'
 22284                                  CONFIG_INCLUDE      equ  'J'
 22285                                  CONFIG_INSTALL      equ  'I'
 22286                                  CONFIG_INSTALLHIGH  equ  'W'
 22287                                  CONFIG_LASTDRIVE    equ  'L'
 22288                                  CONFIG_MENUCOLOR    equ  'R'
 22289                                  CONFIG_MENUDEFAULT  equ  'A'
 22290                                  CONFIG_MENUITEM     equ  'E'
 22291                                  CONFIG_MULTITRACK   equ  'M'
 22292                                  CONFIG_NUMLOCK      equ  'N'
 22293                                  CONFIG_REM          equ  '0'
 22294                                  CONFIG_SEMICOLON    equ  ';'
 22295                                  CONFIG_SET          equ  'V'
 22296                                  CONFIG_SHELL        equ  'S'
 22297                                  CONFIG_STACKS       equ  'K'
 22298                                  CONFIG_SUBMENU      equ  'O'
 22299                                  CONFIG_SWITCHES     equ  '1'
 22300                                  
 22301                                  CONFIG_UNKNOWN      equ  'Z'
 22302                                  
 22303                                  CONFIG_OPTION_QUERY equ 80h
 22304                                  
 22305                                  ; ----------------------------------------------------------------------
 22306                                  ; SYSINIT1.ASM (MSDOS 6.0 - 1991)
 22307                                  ; ----------------------------------------------------------------------
 22308                                  ; 21/03/2019 - Retro DOS v4.0
 22309                                  
 22310                                  true	equ	0FFFFh
 22311                                  false	equ	0
 22312                                  cr	equ	13
 22313                                  lf	equ	10
 22314                                  tab	equ	9
 22315                                  
 22316                                  multMULT	   equ	4Ah
 22317                                  multMULTGETHMAPTR  equ	1
 22318                                  multMULTALLOCHMA   equ	2
 22319                                  
 22320                                  ;NOEXEC    equ	FALSE
 22321                                  
 22322                                  stacksw    equ	true	;include switchable hardware stacks
 22323                                  mycds_size equ	88	;size of curdir_list. if it is not
 22324                                  			;the same, then will generate compile error.
 22325                                  
 22326                                  entrysize   equ     8
 22327                                  
 22328                                  mincount    equ     8
 22329                                  defaultcount equ    9
 22330                                  maxcount    equ     64
 22331                                  
 22332                                  minsize     equ     32
 22333                                  defaultsize equ     128
 22334                                  maxsize     equ     512
 22335                                  
 22336                                  ;%define allocbyte  byte [es:bp+0]
 22337                                  ;%define intlevel   byte [es:bp+1]
 22338                                  ;%define savedsp    word [es:bp+2]
 22339                                  ;%define savedss    word [es:bp+4]
 22340                                  ;%define newsp	    word [es:bp+6]
 22341                                  
 22342                                  allocbyte   equ     0
 22343                                  intlevel    equ     1
 22344                                  savedsp     equ     2
 22345                                  savedss     equ     4
 22346                                  newsp       equ     6
 22347                                  
 22348                                  free	    equ     0
 22349                                  allocated   equ     1
 22350                                  overflowed  equ     2
 22351                                  clobbered   equ     3
 22352                                  
 22353                                  ;---------------------------------------
 22354                                  ; external variable defined in ibmbio module for multi-track
 22355                                  
 22356                                  multrk_on equ	10000000b ;user specified mutitrack=on,or system turns
 22357                                  			  ; it on after handling config.sys file as a
 22358                                  			  ; default value,if multrk_flag = multrk_off1.
 22359                                  multrk_off1 equ 00000000b ;initial value. no "multitrack=" command entered.
 22360                                  multrk_off2 equ 00000001b ;user specified multitrack=off.
 22361                                  
 22362                                  ; SYSINITSEG	SEGMENT PUBLIC 'SYSTEM_INIT'
 22363                                  
 22364                                  SYSINIT$:
 22365                                  	;IF	STACKSW 
 22366                                  	; include MSSTACK.INC	;Main stack program and data definitions
 22367                                  	; include STKMES.INC	;Fatal stack error message
 22368                                  	;   public Endstackcode
 22369                                  ;Endstackcode	label byte
 22370                                  	;ENDIF
 22371                                  
 22372                                  ; 05/07/2018
 22373                                  ; ----------------------------------------------------------------------
 22374                                  ; 04/06/2018 - Retro DOS v3.0
 22375                                  
 22376                                  ; ----------------------------------------------------------------------
 22377                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS - SYSINIT)
 22378                                  ; ----------------------------------------------------------------------
 22379                                  
 22380                                  ;	MSStack.inc
 22381                                  ;
 22382                                  ;	Interrupt level 2, 3, 4, 5, 6, 7,(10, 11, 12, 14, 15 - AT level)
 22383                                  ;	should follow the standard Interrupt Sharing Scheme which has
 22384                                  ;	a standard header structure.
 22385                                  ;	Fyi, the following shows the relations between
 22386                                  ;	the interrupt vector and interrupt level.
 22387                                  ; VEC(Hex)    2  8  9  A  B  C	D  E  70  72  73  74  76  77
 22388                                  ; LVL(Deci)   9  0  1  2  3  4	5  6   8  10  11  12  14  15
 22389                                  ;	MSSTACK module modifies the following interrupt vectors
 22390                                  ;	to meet the standard Interrupt Sharing standard;
 22391                                  ;	  A, B, C, D, E, 72, 73, 74, 76, 77.
 22392                                  ;	Also, for interrupt level 7 and 15, the FirstFlag in a standard header
 22393                                  ;	should be initialized to indicat whether this interrupt handler is
 22394                                  ;	the first (= 80h) or not.  The FirstFlag entry of INT77h's
 22395                                  ;	program header is initialized in STKINIT.INC module.
 22396                                  ;	FirstFlag is only meaningful for interrupt level 7 and 15.
 22397                                  ;
 22398                                  
 22399                                  ;  User specifies the number of stack elements - default = 9
 22400                                  ;						 minimum = 8
 22401                                  ;						 maximum = 64
 22402                                  ;
 22403                                  ;  Intercepts Asynchronous Hardware Interrupts only
 22404                                  ;
 22405                                  ;  Picks a stack from pool of stacks and switches to it
 22406                                  ;
 22407                                  ;  Calls the previously saved interrupt vector after pushing flags
 22408                                  ;
 22409                                  ;  On return, returns the stack to the stack pool
 22410                                  ;
 22411                                  
 22412                                  ; This is a modification of STACKS:
 22413                                  ; 1. To fix a bug which was causing the program to take up too much space.
 22414                                  ; 2. To dispense stack space from hi-mem first rather than low-mem first.
 22415                                  ;    . Clobbers the stack that got too big instead of innocent stack
 22416                                  ;    . Allows system to work if the only stack that got too big was the most
 22417                                  ;      deeply nested one
 22418                                  ; 3. Disables NMI interrupts while setting the NMI vector.
 22419                                  ; 4. Does not intercept any interrupts on a PCjr.
 22420                                  ; 5. Double checks that a nested interrupt didn't get the same stack.
 22421                                  ; 6. Intercepts Ints 70, 72-77 for PC-ATs and other future products
 22422                                  
 22423                                  		;EVEN
 22424                                  ;align 2
 22425                                  		; 21/10/2022
 22426                                  
 22427 00000000 0000                    		dw	0	; spare field but leave these in order
 22428 00000002 0000                    stackcount:	dw	0
 22429 00000004 0000                    stackat: 	dw	0
 22430 00000006 0000                    stacksize:	dw	0
 22431 00000008 0000                    stacks:		dw	0
 22432 0000000A 0000                    		dw	0
 22433                                  
 22434 0000000C [0800]                  firstentry:	dw	stacks
 22435 0000000E [4800]                  lastentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 22436 00000010 [4800]                  nextentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 22437                                  
 22438                                  ;***********************************************************************
 22439                                  ; THESE ARE THE INDIVIDUAL INTERRUPT HANDLERS
 22440                                  
 22441                                  ; ----------------------------------------------------------------------
 22442                                  
 22443 00000012 00000000                old02:	dd	0
 22444                                  
 22445                                  int02:
 22446                                  
 22447                                  ; *********************************************************************
 22448                                  ;
 22449                                  ; this is special support for the pc convertible / nmi handler
 22450                                  ;
 22451                                  ;	on the pc convertible, there is a situation where an nmi can be 
 22452                                  ;	caused by using the "out" instructions to certain ports. when this
 22453                                  ;	occurs, the pc convertible hardware *guarantees* that **nothing** 
 22454                                  ;	can stop the nmi or interfere with getting to the nmi handler. this
 22455                                  ;	includes other type of interrupts (hardware and software), and
 22456                                  ;	also includes other type of nmi's. when any nmi has occured,
 22457                                  ;	no other interrtupt (hardware, software or nmi) can occur until
 22458                                  ;	the software takes specific steps to allow further interrupting.
 22459                                  ;
 22460                                  ;	for pc convertible, the situation where the nmi is generated by the
 22461                                  ;	"out" to a control port requires "fixing-up" and re-attempting. in
 22462                                  ;	otherwords, it is actually a "restartable exception". in this
 22463                                  ;	case, the software handler must be able to get to the stack in
 22464                                  ;	order to figure out what instruction caused the problem, where
 22465                                  ;	it was "out"ing to and what value it was "out"ing.  therefore,
 22466                                  ;	we will not switch stacks in this situation. this situation is
 22467                                  ;	detected by interrogating port 62h, and checking for a bit value
 22468                                  ;	of 80h. if set, *****do not switch stacks*****.
 22469                                  ;
 22470                                  ; *********************************************************************
 22471                                  
 22472 00000016 50                      	push	ax
 22473 00000017 06                      	push	es
 22474 00000018 B800F0                  	mov	ax,0F000h
 22475 0000001B 8EC0                    	mov	es,ax
 22476                                  	; 02/11/2022
 22477 0000001D 26803EFEFFF9            	cmp	byte [es:0FFFEh],0F9h ; mdl_convert ; check if convertible
 22478 00000023 07                      	pop	es
 22479 00000024 750C                    	jne	short normal02
 22480                                  
 22481 00000026 E462                    	in	al,62h		; PC/XT PPI port C. Bits:
 22482                                  				; 0-3: values of DIP switches
 22483                                  				; 5: 1=Timer 2 channel out
 22484                                  				; 6: 1=I/O channel check
 22485                                  				; 7: 1=RAM parity check error occurred.
 22486 00000028 A880                    	test	al,80h
 22487 0000002A 7406                    	jz	short normal02
 22488                                  special02:
 22489 0000002C 58                      	pop	ax
 22490 0000002D 2EFF2E[1200]            	jmp	far [cs:old02]
 22491                                  normal02:
 22492 00000032 58                      	pop	ax
 22493 00000033 E81101                  	call	do_int_stacks
 22494 00000036 [1200]                  	dw	old02
 22495                                  
 22496                                  ; ----------------------------------------------------------------------
 22497                                  
 22498 00000038 00000000                old08:	dd	0
 22499                                  
 22500                                  int08:
 22501 0000003C E80801                  	call	do_int_stacks
 22502 0000003F [3800]                  	dw	old08
 22503                                  
 22504                                  ; ----------------------------------------------------------------------
 22505                                  
 22506 00000041 00000000                old09:	dd	0
 22507                                  
 22508                                  int09:
 22509                                  
 22510                                  ; keyboard interrupt must have a three byte jump, a nop and a zero byte
 22511                                  ; as its first instruction for compatibility reasons
 22512                                  
 22513 00000045 EB02                    	jmp	short keyboard_lbl
 22514 00000047 90                      	nop
 22515 00000048 00                      	db	0
 22516                                  
 22517                                  keyboard_lbl:
 22518 00000049 E8FB00                  	call	do_int_stacks
 22519 0000004C [4100]                  	dw	old09
 22520                                  
 22521                                  ; ----------------------------------------------------------------------
 22522                                  
 22523 0000004E 00000000                old70:	dd	0
 22524                                  
 22525                                  int70:
 22526 00000052 E8F200                  	call	do_int_stacks
 22527 00000055 [4E00]                  	dw	old70
 22528                                  
 22529                                  ; ----------------------------------------------------------------------
 22530                                  
 22531                                  ;	irp	a,<0a,0b,0c,0d,0e,72,73,74,76,77>
 22532                                  ;public	int&a
 22533                                  ;public	old&a
 22534                                  ;public	firstflag&a
 22535                                  ;int&a	proc	far
 22536                                  ;	jmp	short entry_int&a&_stk
 22537                                  ;old&a	dd	  0		;forward pointer
 22538                                  ;	dw	  424bh 	;compatible signature for int. sharing
 22539                                  ;firstflag&a db   0		;the firstly hooked.
 22540                                  ;	jmp	short intret_&a	;reset routine. we don't care this.
 22541                                  ;	db	7 dup (0)	;reserved for future.
 22542                                  ;entry_int&a&_stk:
 22543                                  ;	call	do_int_stacks
 22544                                  ;	dw	old&a
 22545                                  ;intret_&a:
 22546                                  ;	iret
 22547                                  ;int&a	endp
 22548                                  ;	endm
 22549                                  
 22550                                  ; ----------------------------------------------------------------------
 22551                                  
 22552                                  int0A:
 22553 00000057 EB10                    	jmp	short entry_int0A_stk
 22554 00000059 00000000                old0A:	dd	0	
 22555 0000005D 4B42                    	dw	424Bh
 22556                                  firstflag0A:
 22557 0000005F 00                      	db	0
 22558 00000060 EB0C                    	jmp	short intret_0A
 22559 00000062 00<rep 7h>              	times	7 db 0
 22560                                  
 22561                                  entry_int0A_stk:
 22562 00000069 E8DB00                  	call	do_int_stacks
 22563 0000006C [5900]                  	dw	old0A
 22564                                  intret_0A:
 22565 0000006E CF                      	iret
 22566                                  
 22567                                  ; ----------------------------------------------------------------------
 22568                                  
 22569                                  int0B:
 22570 0000006F EB10                    	jmp	short entry_int0B_stk
 22571 00000071 00000000                old0B:	dd	0	
 22572 00000075 4B42                    	dw	424Bh
 22573                                  firstflag0B:
 22574 00000077 00                      	db	0
 22575 00000078 EB0C                    	jmp	short intret_0B
 22576 0000007A 00<rep 7h>              	times	7 db 0
 22577                                  
 22578                                  entry_int0B_stk:
 22579 00000081 E8C300                  	call	do_int_stacks
 22580 00000084 [7100]                  	dw	old0B
 22581                                  intret_0B:
 22582 00000086 CF                      	iret
 22583                                  
 22584                                  ; ----------------------------------------------------------------------
 22585                                  
 22586                                  int0C:
 22587 00000087 EB10                    	jmp	short entry_int0C_stk
 22588 00000089 00000000                old0C:	dd	0	
 22589 0000008D 4B42                    	dw	424Bh
 22590                                  firstflag0C:
 22591 0000008F 00                      	db	0
 22592 00000090 EB0C                    	jmp	short intret_0C
 22593 00000092 00<rep 7h>              	times	7 db 0
 22594                                  
 22595                                  entry_int0C_stk:
 22596 00000099 E8AB00                  	call	do_int_stacks
 22597 0000009C [8900]                  	dw	old0C
 22598                                  intret_0C:
 22599 0000009E CF                      	iret
 22600                                  
 22601                                  ; ----------------------------------------------------------------------
 22602                                  
 22603                                  int0D:
 22604 0000009F EB10                    	jmp	short entry_int0D_stk
 22605 000000A1 00000000                old0D:	dd	0	
 22606 000000A5 4B42                    	dw	424Bh
 22607                                  firstflag0D:
 22608 000000A7 00                      	db	0
 22609 000000A8 EB0C                    	jmp	short intret_0D
 22610 000000AA 00<rep 7h>              	times	7 db 0
 22611                                  
 22612                                  entry_int0D_stk:
 22613 000000B1 E89300                  	call	do_int_stacks
 22614 000000B4 [A100]                  	dw	old0D
 22615                                  intret_0D:
 22616 000000B6 CF                      	iret
 22617                                  
 22618                                  ; ----------------------------------------------------------------------
 22619                                  
 22620                                  int0E:
 22621 000000B7 EB10                    	jmp	short entry_int0E_stk
 22622 000000B9 00000000                old0E:	dd	0	
 22623 000000BD 4B42                    	dw	424Bh
 22624                                  firstflag0E:
 22625 000000BF 00                      	db	0
 22626 000000C0 EB0C                    	jmp	short intret_0E
 22627 000000C2 00<rep 7h>              	times	7 db 0
 22628                                  
 22629                                  entry_int0E_stk:
 22630 000000C9 E87B00                  	call	do_int_stacks
 22631 000000CC [B900]                  	dw	old0E
 22632                                  intret_0E:
 22633 000000CE CF                      	iret
 22634                                  
 22635                                  ; ----------------------------------------------------------------------
 22636                                  
 22637                                  int72:
 22638 000000CF EB10                    	jmp	short entry_int72_stk
 22639 000000D1 00000000                old72:	dd	0	
 22640 000000D5 4B42                    	dw	424Bh
 22641                                  firstflag72:
 22642 000000D7 00                      	db	0
 22643 000000D8 EB0C                    	jmp	short intret_72
 22644 000000DA 00<rep 7h>              	times	7 db 0
 22645                                  
 22646                                  entry_int72_stk:
 22647 000000E1 E86300                  	call	do_int_stacks
 22648 000000E4 [D100]                  	dw	old72
 22649                                  intret_72:
 22650 000000E6 CF                      	iret
 22651                                  
 22652                                  ; ----------------------------------------------------------------------
 22653                                  
 22654                                  int73:
 22655 000000E7 EB10                    	jmp	short entry_int73_stk
 22656 000000E9 00000000                old73:	dd	0	
 22657 000000ED 4B42                    	dw	424Bh
 22658                                  firstflag73:
 22659 000000EF 00                      	db	0
 22660 000000F0 EB0C                    	jmp	short intret_73
 22661 000000F2 00<rep 7h>              	times	7 db 0
 22662                                  
 22663                                  entry_int73_stk:
 22664 000000F9 E84B00                  	call	do_int_stacks
 22665 000000FC [E900]                  	dw	old73
 22666                                  intret_73:
 22667 000000FE CF                      	iret
 22668                                  
 22669                                  ; ----------------------------------------------------------------------
 22670                                  
 22671                                  int74:
 22672 000000FF EB10                    	jmp	short entry_int74_stk
 22673 00000101 00000000                old74:	dd	0	
 22674 00000105 4B42                    	dw	424Bh
 22675                                  firstflag74:
 22676 00000107 00                      	db	0
 22677 00000108 EB0C                    	jmp	short intret_74
 22678 0000010A 00<rep 7h>              	times	7 db 0
 22679                                  
 22680                                  entry_int74_stk:
 22681 00000111 E83300                  	call	do_int_stacks
 22682 00000114 [0101]                  	dw	old74
 22683                                  intret_74:
 22684 00000116 CF                      	iret
 22685                                  
 22686                                  ; ----------------------------------------------------------------------
 22687                                  
 22688                                  int76:
 22689 00000117 EB10                    	jmp	short entry_int76_stk
 22690 00000119 00000000                old76:	dd	0	
 22691 0000011D 4B42                    	dw	424Bh
 22692                                  firstflag76:
 22693 0000011F 00                      	db	0
 22694 00000120 EB0C                    	jmp	short intret_76
 22695 00000122 00<rep 7h>              	times	7 db 0
 22696                                  
 22697                                  entry_int76_stk:
 22698 00000129 E81B00                  	call	do_int_stacks
 22699 0000012C [1901]                  	dw	old76
 22700                                  intret_76:
 22701 0000012E CF                      	iret
 22702                                  
 22703                                  ; ----------------------------------------------------------------------
 22704                                  
 22705                                  int77:
 22706 0000012F EB10                    	jmp	short entry_int77_stk
 22707 00000131 00000000                old77:	dd	0	
 22708 00000135 4B42                    	dw	424Bh
 22709                                  firstflag77:
 22710 00000137 00                      	db	0
 22711 00000138 EB0C                    	jmp	short intret_77
 22712 0000013A 00<rep 7h>              	times	7 db 0
 22713                                  
 22714                                  entry_int77_stk:
 22715 00000141 E80300                  	call	do_int_stacks
 22716 00000144 [3101]                  	dw	old77
 22717                                  intret_77:
 22718 00000146 CF                      	iret
 22719                                  
 22720                                  ; ----------------------------------------------------------------------
 22721                                  
 22722                                  ;********************************************************************
 22723                                  ;common routines
 22724                                  ;********************************************************************
 22725                                  
 22726                                  ; do interrupt stack switching. the fake return address holds
 22727                                  ; a pointer to the far-pointer of the actual interrupt
 22728                                  ; service routine
 22729                                  
 22730                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 SYSINIT)
 22731                                  ; 21/03/2019 - Retro DOS v4.0
 22732                                  
 22733                                  ;allocbyte   equ 0
 22734                                  ;intlevel    equ 1
 22735                                  ;savedsp     equ 2
 22736                                  ;savedss     equ 4
 22737                                  ;newsp       equ 6
 22738                                  
 22739                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 SYSINIT)
 22740                                  ; (MSDOS 6.21 IO.SYS, SYSINIT:0147h)
 22741                                  
 22742                                  do_int_stacks:
 22743 00000147 50                      	push	ax
 22744 00000148 55                      	push	bp
 22745 00000149 06                      	push	es
 22746 0000014A 2E8E06[0A00]            	mov	es,[cs:stacks+2]	; Get segment of stacks
 22747 0000014F 2E8B2E[1000]            	mov	bp,[cs:nextentry]	; get most likely candidate
 22748 00000154 B001                    	mov	al,allocated ; 1
 22749                                  	; 21/10/2022
 22750                                  	;xchg	[es:bp+allocbyte],al 
 22751                                  	; 11/12/2022
 22752 00000156 26864600                	xchg	[es:bp],al		; grab the entry
 22753 0000015A 3C00                    	cmp	al,free ; 0		; still avail?
 22754 0000015C 7551                    	jne	short notfree02
 22755                                  
 22756 0000015E 2E832E[1000]08          	sub	word [cs:nextentry],entrysize ; set for next interrupt
 22757                                  
 22758                                  found02:
 22759 00000164 26896602                	mov	[es:bp+savedsp],sp	; save sp value
 22760 00000168 268C5604                	mov	[es:bp+savedss],ss	; save ss also
 22761                                  
 22762 0000016C 89E8                    	mov	ax,bp			; temp save of table offset
 22763                                  
 22764 0000016E 268B6E06                	mov	bp,[es:bp+newsp]	; get new SP value
 22765                                  	; 21/10/2022
 22766                                  	;mov	bp,[es:bp+6]
 22767                                  	; 11/12/2022
 22768                                  	;cmp	[es:bp+0],ax	
 22769 00000172 26394600                	cmp	[es:bp],ax		; check for offset into table
 22770 00000176 7544                    	jne	short foundbad02
 22771                                  
 22772                                  	; 02/07/2023 (MSDOS 6.21 SYSINIT code)
 22773 00000178 8CC0                    	mov	ax,es			; point ss,sp to the new stack
 22774 0000017A 8EC5                    	mov	es,bp
 22775 0000017C 89E5                    	mov	bp,sp
 22776 0000017E 8B6E06                  	mov	bp,[bp+6]
 22777 00000181 8ED0                    	mov	ss,ax
 22778 00000183 8CC4                    	mov	sp,es
 22779 00000185 8EC0                    	mov	es,ax
 22780 00000187 2E8B6E00                	mov	bp,[cs:bp]
 22781                                  
 22782                                  	; 21/10/2022 (MSDOS 5.0 SYSINIT code)
 22783                                  	;push    bp
 22784                                  	;mov     bp,sp
 22785                                  	;mov     ax,[bp+8]
 22786                                  	;pop     bp
 22787                                  	;push    es
 22788                                  	;pop     ss
 22789                                  	;mov     sp,bp
 22790                                  	;mov     bp,ax
 22791                                  	; 11/12/2022
 22792                                  	;;mov	bp,[cs:bp+0]	
 22793                                  	;mov	bp,[cs:bp]	
 22794                                  
 22795 0000018B 9C                      	pushf				; go execute the real interrupt handler
 22796                                  	; 11/12/2022
 22797 0000018C 2EFF5E00                	call	far [cs:bp]		;  which will iret back to here
 22798                                  	; 21/10/2022
 22799                                  	;call	far [cs:bp+0]
 22800                                  
 22801 00000190 89E5                    	mov	bp,sp			; retrieve the table offset for us
 22802                                  	; 11/12/2022
 22803 00000192 268B6E00                	mov	bp,[es:bp]		;  but leave it on the stack
 22804                                  	; 21/10/2022
 22805                                  	;mov	bp,[es:bp+0]
 22806 00000196 268E5604                	mov	ss,[es:bp+savedss]	; get old stack back
 22807 0000019A 268B6602                	mov	sp,[es:bp+savedsp]
 22808                                  
 22809                                  	; 11/12/2022
 22810                                  	;mov	byte [es:bp+allocbyte],free ; free the entry
 22811                                  	; 21/10/2022
 22812 0000019E 26C6460000              	mov	byte [es:bp],free ; 0
 22813 000001A3 2E892E[1000]            	mov	[cs:nextentry],bp	; setup to use next time
 22814                                  
 22815 000001A8 07                      	pop	es
 22816 000001A9 5D                      	pop	bp			; saved on entry
 22817 000001AA 58                      	pop	ax			; saved on entry
 22818 000001AB 83C402                  	add	sp,2
 22819 000001AE CF                      	iret				; done with this interrupt
 22820                                  
 22821                                  notfree02:
 22822 000001AF 3C01                    	cmp	al,allocated		; error flag
 22823 000001B1 7404                    	je	short findnext02	;  no, continue
 22824                                  	; 11/12/2022
 22825                                  	;xchg	[es:bp+allocbyte],al	;  yes, restore error value
 22826                                  	; 21/10/2022
 22827 000001B3 26864600                	xchg	[es:bp],al
 22828                                  
 22829                                  findnext02:
 22830 000001B7 E81200                  	call	longpath
 22831 000001BA EBA8                    	jmp	short found02
 22832                                  
 22833                                  foundbad02:
 22834 000001BC 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 22835 000001C1 72F4                    	jc	short findnext02
 22836 000001C3 89C5                    	mov	bp,ax			; flag this entry
 22837                                  	; 11/12/2022
 22838                                  	;mov	byte [es:bp+allocbyte],clobbered
 22839                                  	; 21/10/2022
 22840 000001C5 26C6460003              	mov	byte [es:bp],clobbered ; 3
 22841 000001CA EBEB                    	jmp	short findnext02	; keep looking
 22842                                  
 22843                                  ; ----------------------------------------------------------------------
 22844                                  
 22845                                  ; Common routines
 22846                                  
 22847                                  longpath:
 22848                                  	; 21/03/2019
 22849 000001CC 2E8B2E[0E00]            	mov	bp,[cs:lastentry]	; start with last entry in table
 22850                                  lploopp:
 22851                                  	; 11/12/2022
 22852                                  	;cmp	byte [es:bp+allocbyte],free ; is entry free?
 22853                                  	; 21/10/2022
 22854 000001D1 26807E0000              	cmp	byte [es:bp],free
 22855 000001D6 7512                    	jne	short inuse		;  no, try next one
 22856                                  
 22857 000001D8 B001                    	mov	al,allocated
 22858                                  	; 11/12/2022
 22859                                  	;xchg	[es:bp+allocbyte],al	; allocate entry
 22860                                  	; 21/10/2022
 22861 000001DA 26864600                	xchg	[es:bp],al
 22862 000001DE 3C00                    	cmp	al,free 		; is it still free?
 22863 000001E0 7414                    	je	short found		;  yes, go use it
 22864                                  
 22865 000001E2 3C01                    	cmp	al,allocated		; is it other than Allocated or Free?
 22866 000001E4 7404                    	je	short inuse		;  no, check the next one
 22867                                  
 22868                                  	; 11/12/2022
 22869                                  	;mov	[es:bp+allocbyte],al	;  yes, put back the error state
 22870                                  	; 21/10/2022
 22871 000001E6 26884600                	mov	[es:bp],al
 22872                                  inuse:
 22873 000001EA 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 22874 000001EF 7406                    	je	short fatal
 22875 000001F1 83ED08                  	sub	bp,entrysize
 22876 000001F4 EBDB                    	jmp	short lploopp
 22877                                  found:
 22878 000001F6 C3                      	retn
 22879                                  fatal:
 22880 000001F7 1E                      	push	ds
 22881 000001F8 B800F0                  	mov	ax,0F000h		;look at the model byte
 22882 000001FB 8ED8                    	mov	ds,ax
 22883 000001FD 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 22884 00000202 1F                      	pop	ds
 22885 00000203 7504                    	jne	short skip_nmis
 22886                                  
 22887 00000205 B007                    	mov	al,07h			; disable pc convertible nmis
 22888 00000207 E672                    	out	72h,al
 22889                                  
 22890                                  skip_nmis:
 22891 00000209 FA                      	cli				; disable and mask
 22892 0000020A B0FF                    	mov	al,0FFh			;   all other ints
 22893 0000020C E621                    	out	021h,al
 22894 0000020E E6A1                    	out	0A1h,al
 22895                                  
 22896 00000210 8CCE                    	mov	si,cs
 22897 00000212 8EDE                    	mov	ds,si
 22898 00000214 BE[3B02]                	mov	si,fatal_msg
 22899                                  ;SR;
 22900                                  ;   We set all foci to this VM to issue the stack failure message
 22901                                  ;
 22902 00000217 50                      	push	ax
 22903 00000218 1E                      	push	ds
 22904                                  	;;mov	ax,Bios_Data ; 0070h
 22905                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 22906                                  	; 21/10/2022
 22907 00000219 B87000                  	mov	ax,DOSBIODATASEG
 22908 0000021C 8ED8                    	mov	ds,ax
 22909                                  
 22910                                  	;test	byte [08D0h],1 	; (MSDOS 6.21, IO.SYS - SYSINIT:021Eh)
 22911 0000021E F606[1208]01            	test	byte [IsWin386],1 ; (retrodos4.sys, offset: ****h)
 22912 00000223 1F                      	pop	ds
 22913 00000224 58                      	pop	ax
 22914 00000225 7405                    	jz	short fatal_loop	; win386 not present, continue
 22915                                  
 22916                                  	;;call	far ptr 0070h:08D1h ; (MSDOS 621, IO.SYS - SYSINIT:0227h)
 22917                                  	;call	KERNEL_SEGMENT:V86_Crit_SetFocus ; set focus to this VM
 22918                                  	; 21/10/2022
 22919 00000227 9A[1308]7000            	call	DOSBIODATASEG:V86_Crit_SetFocus ; 0070h:08D1h
 22920                                  ;
 22921                                  ;SR; We do not bother about the returned status of this call. 
 22922                                  ;
 22923                                  fatal_loop:
 22924 0000022C AC                      	lodsb
 22925 0000022D 3C24                    	cmp	al,'$'
 22926 0000022F 7408                    	je	short fatal_done
 22927                                  
 22928 00000231 B307                    	mov	bl,7
 22929 00000233 B40E                    	mov	ah,14
 22930 00000235 CD10                    	int	10h			; whoops, this enables ints
 22931 00000237 EBF3                    	jmp	short fatal_loop
 22932                                  
 22933                                  fatal_done:
 22934 00000239 EBFE                    	jmp	short fatal_done
 22935                                  
 22936                                  
 22937                                  ; 21/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 22938                                  ; ----------------------------------------------------------------------
 22939                                  ;	include msbio.cl5		; fatal stack error message
 22940                                  
 22941                                  ; MSDOS 6.21, IO.SYS, SYSINIT:023Bh
 22942                                  
 22943                                  ; STKMES.INC - MSDOS 3.3 (24/07/1987)
 22944                                  ; ----------------------------------------------------------------------
 22945                                  ; 04/06/2018 - Retro DOS v3.0
 22946                                  
 22947                                  fatal_msg:
 22948 0000023B 0D0A                    	db	0Dh,0Ah
 22949 0000023D 070D0A                  	db	7,0Dh,0Ah
 22950 00000240 496E7465726E616C20-     	db	"Internal stack overflow",0Dh,0Ah
 22950 00000249 737461636B206F7665-
 22950 00000252 72666C6F770D0A     
 22951 00000259 53797374656D206861-     	db	"System halted",0Dh,0Ah,"$" 
 22951 00000262 6C7465640D0A24     
 22952                                  
 22953                                  endstackcode:
 22954                                  
 22955                                  ; ----------------------------------------------------------------------
 22956                                  ; SYINIT1.ASM (MSDOS 6.0, 1991) 'SYSINIT' jump addr from 'MSINIT.ASM'
 22957                                  ; ----------------------------------------------------------------------
 22958                                  ; 04/06/2018 - Retro DOS v3.0 (MSDOS 3.3, SYSINIT1.ASM, 24/07/1987)
 22959                                  
 22960                                  ; 22/03/2019 - Retro DOS v4.0
 22961                                  
 22962                                  ; SYSINIT:0269h (MSDOS 6.21 IO.SYS, SYSINIT segment, offset: 0269h)
 22963                                  
 22964                                  ; ('SYSINIT:' location/address is used in 'retrodos4.s'. If following
 22965                                  ; address will be changed, it must also be changed in 'retrodos4.s'.)
 22966                                  
 22967                                  ; 21/10/2022- Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 22968                                  ; ----------------------------------------------------------------------
 22969                                  ; SYSINITSEG:0267h (MSDOS 5.0 IO.SYS, SYSINIT segment, offset: 0267h)
 22970                                  
 22971                                  ; SYSINIT:0269h (MSDOS 6.22 IO.SYS, SYSINIT segment, offset: 0269h)
 22972                                  
 22973                                  ; 29/12/2023- Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 22974                                  ; ----------------------------------------------------------------------
 22975                                  ; SYSINITSEG:0269h (PCDOS 7.1 IBMBIO.COM, SYSINIT segment, offset: 0269h)
 22976                                  
 22977                                  SYSINIT:	
 22978 00000269 E9AD01                          JMP	GOINIT
 22979                                  	;JMP	SYSIN ; 25/02/2018 - Retro DOS 2.0 modification
 22980                                  
 22981                                  ; ----------------------------------------------------------------------
 22982                                  
 22983                                  struc DDHighInfo
 22984 00000000 ????????                 .ddhigh_CSegPtr resd 1	; pointer to code segment to be relocated
 22985 00000004 ????                     .ddhigh_CSegLen resw 1	; length of code segment to be relocated
 22986 00000006 ????????                 .ddhigh_CallBak resd 1	; pointer to the call back routine
 22987                                  endstruc
 22988                                  
 22989                                  ; 22/03/2019 - Retro DOS v4.0
 22990                                  
 22991 0000026C 00                      runhigh: db	0
 22992                                  
 22993                                  ; 02/11/2022
 22994                                  ;align 4
 22995                                  
 22996                                  DOSINFO: 
 22997 0000026D 00000000                	dd	0	; address of the DOS Sysini Variables
 22998                                  ;MSDOS:
 22999                                  dos_temp_location: ; dword ; MSDOS 6.0
 23000                                  dosinit:		; MSDOS 6.0
 23001 00000271 0000                    	dw	0
 23002                                  
 23003                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23004                                  ;FINAL_DOS_LOCATION: ; 20/04/2019 - Retro DOS v4.0
 23005                                  ;	dw	0
 23006                                  ;MSDOS 5.0 IO.SYS - SYSINIT:0271h
 23007                                  
 23008                                  CURRENT_DOS_LOCATION:
 23009 00000273 0000                    	dw	0
 23010                                  
 23011                                  ;DOSSIZE: ; Retro DOS 2.0 feature - 25/02/2018
 23012                                  ;	dw	0   ; 'MSDOS.BIN' kernel size in words
 23013                                  
 23014                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 23015                                  ; (MSDOS 5.0 MSDOS.SYS size is 37394 bytes)
 23016                                  ;DOSSIZE equ	0A000h	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 23017                                  ; 30/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 23018                                  ; 03/09/2023 (PCDOS 7.1 IBMDOS.COM size is 42566 bytes, 04/12/2003)
 23019                                  DOSSIZE equ	0B000h	; (PCDOS 7.1 - SYSINIT)
 23020                                  
 23021                                  DEVICE_LIST:
 23022 00000275 00000000                	dd	0
 23023                                  
 23024                                  ; 04/06/2018 - Retro DOS v3.0
 23025                                  ; 28/03/2018
 23026                                  ;; MSDOS 3.3 - SYSINIT1.ASM - 24/07/1987
 23027                                  ;
 23028                                  sysi_country:	
 23029 00000279 00000000                	dd	0 ; 5/29/86 Pointer to country table in DOS
 23030                                  
 23031                                  ; MSDOS 6.0
 23032 0000027D 00000000                dos_segreinit:	dw	0,0	; room for dword
 23033                                  
 23034 00000281 0000                    lo_doscod_size:	dw	0	; dos code size when in low mem
 23035 00000283 0000                    hi_doscod_size:	dw	0	; dos code size when in HMA
 23036                                  
 23037 00000285 0000                    def_php:	dw	0
 23038                                  
 23039                                  ; M022--
 23040                                  ; pointer for calling into Bios_Code for re-initializing segment values.
 23041                                  ;  call with ax = new segment for Bios_Code. Notice that we'll
 23042                                  ;  call it in its temporary home, cuz seg_reinit won't get moved to
 23043                                  ;  the new home.
 23044                                  
 23045                                  ;Bios_Code	equ	KERNEL_SEGMENT  ; 0070h
 23046                                  ; 21/10/2022
 23047                                  ;DOSBIOCODESEG	equ	02C7h ; (MSDOS 5.0 IO.SYS)
 23048                                  
 23049                                  ; 22/10/2022
 23050                                  seg_reinit_ptr:	; label dword
 23051 00000287 [3200]                  		dw	seg_reinit ; Bios_Code:0032h for MSDOS 6.21 IO.SYS
 23052                                  temp_bcode_seg:
 23053                                  		;dw	Bios_Code  ; 02CCh for MSDOS 6.21 IO.SYS
 23054                                  		; 22/10/2022
 23055 00000289 2D03                    		dw	DOSBIOCODESEG ; 02C7h for MSDOS 5.0 IO.SYS
 23056                                  				; 364h for PCDOS 7.1 IBMBIO.COM - 29/12/2023
 23057                                  fake_floppy_drv:
 23058 0000028B 00                      		db	0	; set to 1 if this machine
 23059                                  				; does not have any floppies!!!
 23060                                  
 23061                                  ; Internal Stack Parameters
 23062                                  
 23063 0000028C 0900                    stack_count:	dW	defaultcount ; 9
 23064 0000028E 8000                    stack_size:	dw	defaultsize  ; 128
 23065 00000290 00000000                stack_addr:	dd	0
 23066                                  
 23067                                  ; 05/06/2018 - Retro DOS v3.0
 23068                                  
 23069                                  ; various default values
 23070                                  
 23071 00000294 0100                    MEMORY_SIZE:	dw	1
 23072                                  
 23073                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0 source, MSDOS 6.21 disassembled src.)
 23074                                  
 23075 00000296 0000                    RPLMemTop:	dw	0  ; 22/10/2022 (MSDOS 5.0 IO.SYS SYSINIT:0294h)
 23076 00000298 00                      DEFAULT_DRIVE:	db	0	; initialized by ibminit.
 23077 00000299 FFFF                    buffers:	dw	0FFFFh	; initialized during buffer allocation
 23078 0000029B 0000                    h_buffers:	dw	0	; # of the heuristic buffers. initially 0.
 23079 0000029D 0000                    singlebuffersize: dw	0	; maximum sector size + buffer head
 23080                                  
 23081 0000029F 08                      FILES:	db	8	; enough files for pipe
 23082 000002A0 04                      FCBS:	db	4	; performance for recycling
 23083 000002A1 00                      KEEP:	db	0	; keep original set
 23084 000002A2 05                      NUM_CDS: db	5	; 5 net drives
 23085                                  
 23086                                  ; 22/10/2022 (MSDOS 5.0 SYSINIT)
 23087                                  ;;CONFBOT: dw	0
 23088                                  ;;ALLOCLIM: dw	0
 23089                                  ;CONFBOT: ; 02/11/2022
 23090                                  ;top_of_cdss: dw 0
 23091                                  
 23092                                  ; 30/12/2022 - Retrodos v4.2 (MSDOS 6.21 SYSINIT)
 23093                                  ; (SYSINIT:02A3h)
 23094 000002A3 0000                    CONFBOT: dw	0
 23095 000002A5 0000                    ALLOCLIM: dw	0
 23096 000002A7 0000                    top_of_cdss: dw 0
 23097                                  
 23098                                  ; 02/11/2022 (MSDOS 5.0 SYSINIT)
 23099                                  ; 30/12/2022 (MSDOS 6.21 SYSINIT)
 23100                                  ;ALLOCLIM: dw	0	; (SYSINIT:02A3h)	
 23101                                  
 23102 000002A9 413A5C00                DirStrng: db	"A:\",0	; string for the root directory of a drive
 23103                                  
 23104                                  ; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 SYSINIT)
 23105                                  %if 0
 23106                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23107                                  ; (SYSINIT:02A9h)
 23108                                  
 23109                                  command_line:
 23110                                  	db	2,0
 23111                                  	db	'P'
 23112                                  	db	0
 23113                                  	times	124 db 0 ; db 124 dup(0)
 23114                                  
 23115                                  %endif
 23116                                  
 23117                                  ; (SYSINIT:0329h)
 23118 000002AD 00                      ZERO:	db	0
 23119 000002AE 00                      sepchr:	db	0
 23120 000002AF 0000                    linecount: dw	0			; line count in config.sys
 23121 000002B1 20202020200D0A24        showcount: db	'     ',cr,lf,'$'	; used to convert linecount to ascii.
 23122 000002B9 0000                    buffer_linenum: dw	0		; line count for "buffers=" command if entered.
 23123                                  
 23124 000002BB FF                      sys_model_byte:	db	0FFh		; model byte used in sysinit
 23125 000002BC 00                      sys_scnd_model_byte: db 0		; secondary model byte used in sysinit
 23126                                  
 23127 000002BD 0000                    buf_prev_off:	dw	0
 23128                                  
 23129                                          ;IF      NOT NOEXEC
 23130                                  ;COMEXE EXEC0 <0,COMMAND_LINE,DEFAULT_DRIVE,ZERO>
 23131                                          ;ENDIF
 23132                                  
 23133                                  ; 29/12/2023
 23134                                  ; 01/05/2018
 23135                                  COMEXE:
 23136 000002BF 0000                    EXEC0.ENVIRON:	dw	0	; seg addr of environment
 23137 000002C1 [794A]                  EXEC0.COM_LINE:	dw	command_line ; pointer to asciz command line
 23138 000002C3 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 23139                                  				; SYSINIT segment (0544h for PCDOS 7.1 IBMBIO.COM)
 23140 000002C5 [9802]                  EXEC0.5C_FCB:	dw	DEFAULT_DRIVE ; default fcb at 5C
 23141 000002C7 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 23142 000002C9 [AD02]                  EXEC0.6C_FCB:	dw	ZERO	; default fcb at 6C
 23143 000002CB 0000                    		dw	0
 23144                                  
 23145                                  ; variables for install= command.
 23146                                  
 23147 000002CD 00                      multi_pass_id:	db	0		; parameter passed to multi_pass
 23148                                  					;  indicating the pass number
 23149                                  					; 0 - do scan for DOS=HIGH/LOW
 23150                                  					; 1 - load device drivers
 23151                                  					; 2 - was to load IFS
 23152                                  					;      now it is unused
 23153                                  					; 3 - do install=
 23154                                  					; >3 - nop
 23155 000002CE 0000                    install_flag:	dw	0
 23156                                  
 23157                                  have_install_cmd equ	00000001b	; config.sys has install= commands
 23158                                  has_installed	equ	00000010b	; sysinit_base installed.
 23159                                  
 23160 000002D0 0000                    config_size:	dw	0		; size of config.sys file. set by sysconf.asm
 23161 000002D2 00000000                sysinit_base_ptr: dd	0		; pointer to sysinit_base
 23162 000002D6 00000000                sysinit_ptr:	dd	0		; returning addr. from sysinit_base
 23163 000002DA 0000                    checksum:	dw	0		; used by sum_up
 23164                                  
 23165 000002DC 20<rep 14h>             ldexec_fcb:	times 20 db 20h ; db 20 dup (' ') ;big enough
 23166 000002F0 00                      ldexec_line:	db	0		;# of parm characters
 23167 000002F1 20                      ldexec_start:	db	' '
 23168 000002F2 00<rep 50h>             ldexec_parm:	times 80 db 0	; db 80 dup (0)
 23169                                  
 23170                                  ;instexe exec0	<0,ldexec_line,ldexec_fcb,ldexec_fcb>
 23171                                  
 23172                                  instexe:
 23173 00000342 0000                    iexec.environ:	dw	0		; seg addr of environment
 23174 00000344 [F002]                  iexec.ldexec_line: dw	ldexec_line ; pointer to asciz command line
 23175 00000346 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 23176                                  				; SYSINIT segment (0544h for PCDOS 7.1 IBMBIO.COM)
 23177 00000348 [DC02]                  iexec.ldexec_5c_fcb: dw	ldexec_fcb	; default fcb at 5C
 23178 0000034A 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.22 IO.SYS)
 23179 0000034C [DC02]                  iexec.ldexec_6c_fcb: dw	ldexec_fcb	; default fcb at 6C
 23180 0000034E 0000                    		dw	0
 23181                                  
 23182                                  ; variables for comment=
 23183                                  
 23184 00000350 00                      com_level:	db	0		; level of " " in command line
 23185 00000351 00                      cmmt:		db	0		; length of comment string token
 23186 00000352 00                      cmmt1:		db	0		; token
 23187 00000353 00                      cmmt2:		db	0		; token
 23188 00000354 00                      cmd_indicator:	db	0
 23189 00000355 00                      donotshownum:	db	0
 23190                                  
 23191 00000356 0000                    count:		dw	0
 23192 00000358 0000                    org_count:	dw	0
 23193 0000035A 0000                    chrptr:		dw	0
 23194 0000035C 0000                    cntryfilehandle: dw	0
 23195 0000035E 0000                    old_area:	dw	0
 23196 00000360 0000                    impossible_owner_size: dw 0		; paragraph
 23197                                  
 23198                                  bucketptr: ; label dword
 23199                                  bufptr:	   ; label dword		; leave this stuff in order!
 23200 00000362 0000                    memlo:	dw	0
 23201                                  prmblk:	   ; label word
 23202 00000364 0000                    memhi:	dw	0
 23203 00000366 0000                    ldoff:	dw	0
 23204 00000368 0000                    area:	dw	0
 23205                                  
 23206                                  ; 29/12/2023 - PCDOS 7.1 IBMBIO.COM - SYSINIT:036Ah
 23207 0000036A 0000                    prev_memhi:	dw 0
 23208 0000036C 0000                    prev_alloclim:	dw 0
 23209 0000036E 00                      dosdata_umb:	db 0
 23210                                  
 23211                                  ; Following is the request packet used to call INIT routines for 
 23212                                  ; all device drivers. Some fields may be accessed individually in
 23213                                  ; the code, and hence have individual labels, but they should not
 23214                                  ; be separated.
 23215                                  
 23216 0000036F 19                      packet:	db	25			; PCDOS 7.1 IBMBIO.COM
 23217                                  	;db	24			; was 22
 23218 00000370 00                      	db	0
 23219 00000371 00                      	db	0			; initialize code
 23220 00000372 0000                    	dw	0
 23221 00000374 00<rep 8h>              	times	8 db 0	; db 8 dup (?)
 23222                                  
 23223 0000037C 00                      unitcount:	db	0
 23224 0000037D 00000000                break_addr:	dd	0
 23225 00000381 00000000                bpb_addr:	dd	0
 23226                                  drivenumber:	; 22/10/2022
 23227 00000385 00                      devdrivenum:	db	0 
 23228 00000386 0000                    configmsgflag:	dw	0  ; used to control "error in config.sys line #" message
 23229                                  
 23230                                  ; end of request packet
 23231                                  
 23232                                  ;drivenumber:	db	0  ; 22/03/2019
 23233                                  
 23234                                  toomanydrivesflag:
 23235 00000388 00                      		db	0  ; >24 fixed disk partitions flag ; M029 
 23236 00000389 90                      align 2
 23237                                  
 23238                                  BCodeSeg:	; 21/10/2022
 23239 0000038A 2D03                    	dw	DOSBIOCODESEG ; (02C7h for MSDOS 5.0 IO.SYS)
 23240                                  			; 0364h for PCDOS 7.1 IBMBIO.COM - 29/12/2023
 23241                                  	;dw	Bios_Code  ; = KERNEL_SEGMENT = 0070h (for Retro DOS v4.0)
 23242                                  			   ; BCodeSeg = 2CCh (for MSDOS 6.21 IO.SYS)
 23243                                  
 23244                                  ; 30/12/2022
 23245                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0387h
 23246                                  ;
 23247                                  ; Magicbackdoor: dd 0
 23248                                  ; NullBackdoor: 
 23249                                  ;		retf
 23250                                  
 23251                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 23252                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 23253                                  ; 19/04/2019
 23254                                  _timer_lw_:
 23255 0000038C 0000                    	dw	0  ; MSDOS 6.21 IO.SYS - SYSINIT:038Ch
 23256                                  
 23257                                  ; 29/12/2023 - Retro DOS v5.0
 23258                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:038Eh
 23259                                  
 23260 0000038E 00                      F5_key:	db 0
 23261 0000038F 00                      F8_key:	db 0
 23262 00000390 00000000                MagicBackdoor:	dd 0
 23263                                  NullBackdoor:
 23264 00000394 CB                      		retf
 23265                                  
 23266                                  ;SR;
 23267                                  ; This is the communication block between the DOS and the BIOS. It starts at
 23268                                  ;the SysinitPresent flag. Any other data that needs to be communicated 
 23269                                  ;to the DOS should be added after SysinitPresent. The pointer to this block
 23270                                  ;is passed to DOS as part of the DOSINIT call.
 23271                                  ;
 23272                                  
 23273                                  BiosComBlock:
 23274                                  	;dd	Bios_Data:SysinitPresent 
 23275                                  		; 0070h:08FDh for MSDOS 6.21 IO.SYS
 23276 00000395 [DD07]                  	dw	SysinitPresent  ; (retrodos4.sys, offset: ****h)
 23277                                  	;dw	KERNEL_SEGMENT ; 0070h
 23278                                  	; 21/10/2022
 23279 00000397 7000                    	dw	DOSBIODATASEG ; 0070h
 23280                                  
 23281                                  ;align 2
 23282                                  
 23283                                  	; 22/10/2022 - (MSDOS 5.0 IO.SYS, SYSINIT:0406h)
 23284                                  	; 30/12/2022 - (MSDOS 6.21 IO.SYS, SYSINIT:0392h)
 23285                                  tempstack:	
 23286 00000399 00<rep 80h>             	times	128 db 0  ; db	80h dup (?)
 23287                                  
 23288                                  ; ----------------------------------------------------------------------------
 23289                                  
 23290                                  	; 29/12/2023 - Retro DOS v5.0
 23291                                  	; 22/10/2022 - Retro DOS v4.0
 23292                                  	;	; (MSDOS 5.0 IO.SYS, SYSINIT:0486h)
 23293                                  GOINIT:		; (MSDOS 6.22 IO.SYS, SYSINIT:0412h)
 23294                                  		; (PCDOS 7.1 IBMBIO.COM, SYSINIT:0419h)
 23295                                  	; 12/12/2023
 23296 00000419 0E                      	push	cs
 23297 0000041A 1F                      	pop	ds
 23298                                  
 23299                                  	; 12/12/2022
 23300                                  	; 22/03/2019 - Retro DOS v4.0
 23301                                  	; 06/07/2018
 23302                                  	; 04/06/2018 - Retro DOS v3.0
 23303                                  ; before doing anything else, let's set the model byte
 23304 0000041B B4C0                    	mov	ah,0C0h 		; get system configuration
 23305 0000041D CD15                    	int	15h			; 
 23306 0000041F 7214                    	jc	short no_rom_config
 23307                                  
 23308                                  	;cmp	ah,0			; double check
 23309                                  	;jne	short no_rom_config
 23310                                  	; 03/09/2023
 23311 00000421 08E4                    	or	ah,ah
 23312 00000423 7510                    	jnz	short no_rom_config
 23313                                  
 23314                                  	; 12/12/2023 ; *
 23315                                  	; ds = cs
 23316                                  
 23317 00000425 268A4702                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
 23318                                  	;mov	[cs:sys_model_byte],al 
 23319 00000429 A2[BB02]                	mov	[sys_model_byte],al ; *
 23320 0000042C 268A4703                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
 23321                                  	;mov	[cs:sys_scnd_model_byte],al
 23322 00000430 A2[BC02]                	mov	[sys_scnd_model_byte],al ; *
 23323                                  	;jmp	short SYSIN
 23324                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23325 00000433 EB29                    	jmp	short move_myself
 23326                                  
 23327                                  no_rom_config:				; Old ROM
 23328                                  	; 12/12/2023
 23329                                  	;mov	ax,0F000h
 23330                                  	;mov	ds,ax
 23331                                  	;mov	al,[0FFFEh]
 23332                                  	;mov	[cs:sys_model_byte],al	; set the model byte.
 23333                                  	; 12/12/2023
 23334                                  	; ds = cs
 23335 00000435 B800F0                  	mov	ax,0F000h
 23336 00000438 8EC0                    	mov	es,ax
 23337 0000043A 26A0FEFF                	mov	al,[es:0FFFEh]
 23338 0000043E A2[BB02]                	mov	[sys_model_byte],al	; set the model byte.
 23339                                  	
 23340                                  ; set fake_floppy_drv if there is no diskette drives in this machine.
 23341                                  ; execute the equipment determination interrupt and then
 23342                                  ; check the returned value to see if we have any floppy drives
 23343                                  ; if we have no floppy drive we set cs:fake_floppy_drv to 1
 23344                                  ; see the at tech ref bios listings for help on the equipment
 23345                                  ; flag interrupt (11h)	
 23346                                  
 23347                                  	; 22/10/2022
 23348                                  ;check_for_fake_floppy:			; entry point for rom_config above
 23349 00000441 CD11                    	int	11h			; check equipment flag
 23350                                  
 23351                                  	; 29/12/2023 - Retro DOS v5.0
 23352                                  	;jmp	short check_for_fake_floppy
 23353                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:0446h
 23354                                  	;db	52h	; 'RPS' sign
 23355                                  	;db	50h
 23356                                  	;db	53h
 23357                                  
 23358                                  check_for_fake_floppy:
 23359                                  	; 29/12/2023
 23360                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:0449h
 23361                                  	;or	ax, 1		; (nonsense! this may be overwritten/disabled
 23362                                  	;			; by using 'RPS' sign position)
 23363                                  	;			;		 03/07/2023 - Erdogan Tan
 23364                                  	;test	ax, 1		; have any floppies?
 23365                                  
 23366                                  	; 12/12/2022
 23367 00000443 A801                    	test	al,1		
 23368                                  	;test	ax,1			; have any floppies?
 23369 00000445 7517                    	jnz	short move_myself	; yes,normal system
 23370                                  
 23371                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
 23372                                  ; whether it is an old ROM BIOS or a new one
 23373                                  ;
 23374                                  ; WARNING !!!
 23375                                  ;
 23376                                  ; This sequence of code is present in MSINIT.ASM also. Any modification
 23377                                  ; here will require an equivalent modification in MSINIT.ASM also
 23378                                  
 23379                                  	; 12/12/2023
 23380                                  	;push	es  ; not necessary
 23381                                  
 23382 00000447 30C9                    	xor	cl,cl	
 23383 00000449 B408                    	mov	ah,8			; get disk parameters
 23384 0000044B B200                    	mov	dl,0			; of drive 0
 23385 0000044D CD13                    	int	13h
 23386                                  
 23387                                  	;pop	es  ; 12/12/2023	
 23388                                  
 23389 0000044F 720D                    	jc	short move_myself	; if error lets assume that the
 23390                                  					;  ROM BIOS lied
 23391                                  	;cmp	cl,0			; double check (max sec no cannot be 0)
 23392                                  	;je	short move_myself
 23393                                  	; 03/09/2023
 23394 00000451 08C9                    	or	cl,cl
 23395 00000453 7409                    	jz	short move_myself
 23396                                  
 23397 00000455 08D2                    	or	dl,dl			; number of flp drvs == 0?
 23398 00000457 7505                    	jnz	short move_myself	; no
 23399                                  
 23400                                  	;mov	byte [cs:fake_floppy_drv],1 ; set fake flag.
 23401                                  	; 12/12/2023
 23402                                  	; ds = cs
 23403 00000459 C606[8B02]01            	mov	byte [fake_floppy_drv],1 ; set fake flag.
 23404                                  
 23405                                  move_myself:
 23406                                  	; 12/12/2023
 23407                                  	;cld	; not necessary		; set up move
 23408                                  	;xor	si,si
 23409                                  	;mov	di,si
 23410                                  
 23411                                  	; 12/12/2023
 23412                                  	; ds = cs
 23413                                  	; 12/12/2022
 23414                                  	;push	cs
 23415                                  	;pop	ds
 23416                                  
 23417                                  	;mov	cx,[cs:MEMORY_SIZE]
 23418 0000045E 8B0E[9402]              	mov	cx,[MEMORY_SIZE] ; 12/12/2022
 23419                                  
 23420                                  	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 23421                                  ;;;	if	msver
 23422                                  ;	cmp	cx,1		; 1 means do scan
 23423                                  ;	jnz	short noscan
 23424                                  ;	mov	cx,2048		; start scanning at 32k boundary
 23425                                  ;	xor	bx,bx
 23426                                  ;
 23427                                  ;memscan:inc	cx
 23428                                  ;	jz	short setend
 23429                                  ;	mov	ds,cx
 23430                                  ;	mov	al,[bx]
 23431                                  ;	not	al
 23432                                  ;	mov	[bx],al
 23433                                  ;	cmp	al,[bx]
 23434                                  ;	not	al
 23435                                  ;	mov	[bx],al
 23436                                  ;	jz	short memscan
 23437                                  ;setend:
 23438                                  ;	mov	cs:[memory_size],cx
 23439                                  ;;;	endif
 23440                                  
 23441                                  ;noscan: 				; cx is mem size in para
 23442                                  ;;
 23443                                  ;;	cas -- a) if we got our memory size from the ROM, we should test it
 23444                                  ;;		  before we try to run.
 23445                                  ;;	       b) in any case, we should check for sufficient memory and give
 23446                                  ;;		  an appropriate error diagnostic if there isn't enough
 23447                                  ;
 23448                                  ;	push	cs
 23449                                  ;	pop	ds
 23450                                  ;
 23451                                  ;;	cas note:  It would be better to put dos + bios_code BELOW sysinit
 23452                                  ;;	  that way it would be easier to slide them down home in a minimal
 23453                                  ;;	  memory system after sysinit.  As it is, you need room to keep
 23454                                  ;;	  two full non-overlapping copies, since sysinit sits between the
 23455                                  ;;	  temporary home and the final one.  the problem with doing that
 23456                                  ;;	  is that sys*.asm are filled with "mov ax,cs, sub ax,11h" type stuff.
 23457                                  ;
 23458                                  ;	dec	cx			; one para for an arena at end of mem
 23459                                  ;					; in case of UMBs
 23460                                  
 23461                                  	; 22/10/2022
 23462                                  	; (MSDOS 5.0 IO.SYS SYSINIT:04DBh)
 23463                                  
 23464                                  	; 12/12/2022
 23465                                  	;push	cs
 23466                                  	;pop	ds
 23467                                  
 23468 00000462 49                      	dec	cx
 23469                                  
 23470                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
 23471                                  
 23472 00000463 31DB                    	xor	bx,bx
 23473 00000465 8EC3                    	mov	es,bx
 23474                                  	;mov	bx,[es:(2Fh*4)] ; INT 2Fh address (0:0BCh)
 23475                                  	;mov	es,[es:((2Fh*4)+2)] ; INT 2Fh segment (0:0BEh)
 23476                                  	; 29/09/2023
 23477 00000467 26C41EBC00              	les	bx,[es:(2Fh*4)]
 23478 0000046C 26817F035250            	cmp	word [es:bx+3],'RP'
 23479 00000472 751B                    	jne	short NoRPL
 23480 00000474 26807F054C              	cmp	byte [es:bx+5],'L'
 23481 00000479 7514                    	jne	short NoRPL
 23482                                  
 23483 0000047B 89CA                    	mov	dx,cx			; get TOM into DX
 23484 0000047D 52                      	push	dx
 23485 0000047E B8064A                  	mov	ax,4A06h
 23486                                  	;mov	ax,(multMULT<<8)+multMULTRPLTOM
 23487 00000481 CD2F                    	int	2Fh			; Get new TOM from any RPL
 23488 00000483 58                      	pop	ax
 23489 00000484 89D1                    	mov	cx,dx
 23490 00000486 39C2                    	cmp	dx,ax
 23491 00000488 7405                    	je	short NoRPL
 23492                                  	
 23493                                  	; 11/12/2022
 23494                                  	; ds = cs
 23495 0000048A 8916[9602]              	mov	[RPLMemTop],dx
 23496                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23497                                  	;mov	[cs:RPLMemTop],dx
 23498                                  	
 23499 0000048E 49                      	dec	cx
 23500                                  NoRPL:
 23501 0000048F B8[8052]                	mov	ax,SI_end		; need this much room for sysinit
 23502                                  					; (SI_end == sysinit code size)
 23503                                  					; 03/09/2023
 23504                                  					; (58A0h for MSDOS 6.21 IO.SYS)
 23505                                  					; (5B40h for PCDOS 7.1 IBMBIO.COM)
 23506 00000492 E80B09                  	call	off_to_para
 23507 00000495 29C1                    	sub	cx,ax
 23508                                  
 23509                                  ; we need to leave room for the DOS and (if not ROMDOS) for the BIOS
 23510                                  ; code above sysinit in memory
 23511                                  ;
 23512 00000497 81E9000B                	sub	cx,DOSSIZE/16 ; (0A00h)	; leave this much room for DOS
 23513                                  			      ; (0B00h) ; (PCDOS 7.1 IBMBIO.COM) -03/09/2023-	
 23514                                  
 23515 0000049B B8701D                  	mov	ax,BCODE_END 		; (1A60h for MSDOS 5.0 IO.SYS)
 23516                                  					; (1A70h for MSDOS 6.21 IO.SYS)
 23517                                  					; 03/09/2023
 23518                                  					; (1E00h for PCDOS 7.1 IBMBIO.COM)
 23519 0000049E E8FF08                  	call	off_to_para		; leave this much room for BIOS code
 23520 000004A1 29C1                    	sub	cx,ax
 23521 000004A3 8EC1                    	mov	es,cx			; segment where sysinit will be located
 23522                                  
 23523                                  	; 12/12/2023
 23524 000004A5 FC                      	cld	; not necessary		; set up move
 23525 000004A6 31F6                    	xor	si,si
 23526 000004A8 89F7                    	mov	di,si
 23527                                  
 23528 000004AA B9[8052]                	mov	cx,SI_end		; (sysinit code size)
 23529 000004AD D1E9                    	shr	cx,1			; divide by 2 to get words
 23530 000004AF F3A5                    	rep	movsw			; relocate sysinit
 23531                                  
 23532 000004B1 06                      	push	es			; push relocated segment
 23533 000004B2 B8[B704]                	mov	ax,SYSIN
 23534 000004B5 50                      	push	ax			; push relocated entry point
 23535                                  
 23536 000004B6 CB                      	retf				; far jump to relocated sysinit
 23537                                  
 23538                                  ; =============== S U B R O U T I N E ========================================
 23539                                  
 23540                                  ; 30/12/2023
 23541                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:04CEh
 23542                                  %if 0
 23543                                  get_cpu_type:
 23544                                  	pushf
 23545                                  	push	bx
 23546                                  	xor	bx,bx
 23547                                  	xor	ax,ax
 23548                                  	push	ax
 23549                                  	popf
 23550                                  	pushf
 23551                                  	pop	ax
 23552                                  	and	ax,0F000h
 23553                                  	cmp	ax,0F000h
 23554                                  	jz	short cpu_8086
 23555                                  	mov	ax,0F000h
 23556                                  	push	ax
 23557                                  	popf
 23558                                  	pushf
 23559                                  	pop	ax
 23560                                  	and	ax,0F000h
 23561                                  	jz	short cpu_286
 23562                                  cpu_386:
 23563                                  	inc	bx
 23564                                  cpu_286:
 23565                                  	inc	bx
 23566                                  cpu_8086:
 23567                                  	mov	ax,bx
 23568                                  	pop	bx
 23569                                  	popf
 23570                                  	retn
 23571                                  %endif
 23572                                  
 23573                                  ; ----------------------------------------------------------------------------
 23574                                  
 23575                                  ;	MOVE THE DOS TO ITS PROPER LOCATION
 23576                                  
 23577                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 23578                                  	; (SYSINIT:0533h)
 23579                                  	; 30/12/2022 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 23580                                  	; (SYSINIT:04BFh)
 23581                                  	; 03/09/2023 - Retro DOS 4.2 (5.0 - Modified PCDOS 7.1 IBMBIO.COM)
 23582                                  	; (SYSINIT:04F3h)
 23583                                  SYSIN:
 23584                                  	; Retro DOS 5.0 - 30/12/2023
 23585                                  	; Retro DOS 4.0 - 22/03/2019
 23586                                  	; Retro DOS 2.0 - 25/02/2018
 23587                                  
 23588                                  	; 23/04/2019
 23589                                  	;;mov	ax,Bios_Data
 23590                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 23591                                  	; 21/10/2022
 23592 000004B7 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 23593 000004BA 8ED8                    	mov	ds,ax
 23594                                  
 23595                                  	; 30/12/2023 - Retro DOS v5.0
 23596                                  	;;;
 23597                                  	;push	es
 23598                                  	;push	ax		; not needed (*) E.TAN - 03/07/2023
 23599                                  	;push	di
 23600                                  	
 23601                                  	;call	get_cpu_type	; determine if 386 system
 23602                                  	;
 23603                                  get_cpu_type:
 23604 000004BC 9C                      	pushf
 23605 000004BD 31C0                    	xor	ax,ax
 23606 000004BF 50                      	push	ax
 23607 000004C0 9D                      	popf
 23608 000004C1 9C                      	pushf
 23609 000004C2 58                      	pop	ax
 23610 000004C3 2500F0                  	and	ax,0F000h
 23611 000004C6 3D00F0                  	cmp	ax,0F000h
 23612 000004C9 740F                    	jz	short cpu_8086
 23613 000004CB B800F0                  	mov	ax,0F000h
 23614 000004CE 50                      	push	ax
 23615 000004CF 9D                      	popf
 23616 000004D0 9C                      	pushf
 23617 000004D1 58                      	pop	ax
 23618 000004D2 2500F0                  	and	ax,0F000h
 23619 000004D5 7402                    	jz	short cpu_286
 23620                                  cpu_386:
 23621 000004D7 29C0                    	sub	ax,ax
 23622                                  cpu_286:
 23623 000004D9 40                      	inc	ax
 23624                                  cpu_8086:	; ax = 0
 23625                                  	; 30/12/2023 - Retro DOS v5.0
 23626 000004DA 2EA2[B606]              	mov	[cs:cpu_type],al ; 07/04/2024
 23627 000004DE 9D                      	popf
 23628                                  	;
 23629                                  	;cmp	ax,2		; 0 = 8086, 1 = 286, 2 = 386
 23630 000004DF 3C02                    	cmp	al,2
 23631 000004E1 7512                    	jnz     short not_386_system
 23632 000004E3 FC                      	cld			; 80386
 23633 000004E4 1E                      	push	ds
 23634 000004E5 07                      	pop	es		; change A20 line on/off check code
 23635 000004E6 BF[4D07]                	mov	di,cpu386_cmpsd
 23636 000004E9 B8B904                  	mov	ax,04B9h	; mov cx,4 ; B90400
 23637 000004EC AB                      	stosw
 23638 000004ED B800F3                  	mov	ax,0F300h	; repz  ; F3
 23639 000004F0 AB                      	stosw
 23640 000004F1 B866A7                  	mov	ax,0A766h	; cmpsd ; 66A7
 23641 000004F4 AB                      	stosw
 23642                                  not_386_system:
 23643                                  	;pop	di
 23644                                  	;pop	ax
 23645                                  	;pop	es
 23646                                  	;;;
 23647                                  
 23648 000004F5 8C0E[DB07]              	mov	[MoveDOSIntoHMA+2],cs	; set seg of routine to move DOS
 23649 000004F9 C606[DD07]01            	mov	byte [SysinitPresent],1	; flag that MoveDOSIntoHMA can be called
 23650                                  
 23651                                  ; first move the MSDOS.SYS image up to a harmless place 
 23652                                  ; on top of our new sysinitseg
 23653                                  
 23654                                  	; 22/10/2022
 23655 000004FE B8[8052]                	mov	ax,SI_end		; how big is sysinitseg?
 23656 00000501 E89C08                  	call	off_to_para
 23657 00000504 8CC9                    	mov	cx,cs			; pick a buffer for msdos above us
 23658 00000506 01C8                    	add	ax,cx
 23659 00000508 8EC0                    	mov	es,ax
 23660                                  	
 23661 0000050A 31F6                    	xor	si,si
 23662 0000050C 89F7                    	mov	di,si
 23663                                  
 23664 0000050E 2E8E1E[7302]            	mov	ds,[cs:CURRENT_DOS_LOCATION] ; where it is (set by msinit)
 23665                                  
 23666                                  ; 05/04/2024 - temporary
 23667                                  ;mov	ax,[8E02h]
 23668                                  ;call	phex
 23669                                  
 23670                                  	;mov	ax,cs	
 23671                                  	;mov	ds,ax
 23672                                  
 23673                                  	;;;mov	cx,20480  ; MSDOS 6.21 IO.SYS - SYSINIT:04E2h
 23674                                  	;;mov	cx,dossize/2 ; MSDOS 6.0
 23675                                  	;mov	cx,[DOSSIZE] ; words (not bytes!)  ; Retro DOS v4.0 (3.0, 2.0)
 23676                                  	;mov	es,[FINAL_DOS_LOCATION] ; on top of SYSINIT code
 23677                                  	;mov	ds,[CURRENT_DOS_LOCATION]
 23678                                  
 23679                                  	; 22/10/2022
 23680 00000513 B90058                  	mov	cx,DOSSIZE/2 ; 5000h
 23681                                  			     ; 03/09/2023
 23682                                  			     ; 5800h (PCDOS 7.1)
 23683 00000516 F3A5                    	rep     movsw
 23684 00000518 2E8C06[7302]            	mov	[cs:CURRENT_DOS_LOCATION],es
 23685                                  
 23686                                  ; The DOS code is ORGed at a non-zero value to allow it to be located in
 23687                                  ; HIMEM. Thus, the DOS segment location must be adjusted accordingly.
 23688                                  ; If this is ROMDOS, however, only the init code is loaded into RAM, so
 23689                                  ; this ORG is not done. The entry point is at offset zero in the segment.
 23690                                  
 23691                                  	; 22/04/2019 (MSDOS 6.0 & MSDOS 6.21 kernel address modification)
 23692                                  	;mov	ax,cs
 23693                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 23694                                  	;mov	ds,ax
 23695                                  
 23696                                  ; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 23697                                  
 23698                                  ;	; 24/04/2019 
 23699                                  ;;ifndef ROMDOS
 23700                                  ;	mov	ax,[es:3] 		; get offset of dos
 23701                                  ;		; ax = 3DE0h for MSDOS 6.21 kernel (MSDOS.SYS, offset 3) 
 23702                                  ;	mov	[dosinit],ax		; that's the entry point offset
 23703                                  ;	call	off_to_para		; subtract this much from segment
 23704                                  ;	; 23/04/2019
 23705                                  ;	;sub	[CURRENT_DOS_LOCATION],ax
 23706                                  ;	sub	[FINAL_DOS_LOCATION],ax
 23707                                  ;;else
 23708                                  ;;	mov	word [dosinit],0	; entry to init is at zero
 23709                                  ;;
 23710                                  ;;endif ; ROMDOS
 23711                                  
 23712                                  	; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 23713                                  	; (! MSDOS6.BIN starts with DOSDATA ! - Retro DOS v4.0 modification) 
 23714                                  
 23715                                  	;mov	ax,[es:0] ; DOSCODE start address = DOSDATA size (= 136Ah)
 23716                                  	;		  ; (Valid for Retro DOS v4.0 only!)
 23717                                  
 23718                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 23719                                  	; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 23720                                  	; 03/09/2023 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 23721                                  	; (SYSINIT:04ECh for MSDOS 6.21 IO.SYS SYSINIT)
 23722                                  	; (SYSINIT:0540h for PCDOS 7.1 IBMBIO.COM SYSINIT)
 23723 0000051D A10300                  	mov	ax,[3]		; mov ax, word ptr ds:3
 23724                                  				; 30/12/2023
 23725                                  				; ax = 3F10h for IBMDOS 7.1 kernel
 23726                                  				;  (IBMDOS.SYS, offset 3)
 23727                                  
 23728 00000520 2EA3[7102]              	mov	[cs:dosinit],ax ; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 23729                                  	; 02/11/2022
 23730 00000524 E87908                  	call	off_to_para		; subtract this much from segment
 23731 00000527 2E2906[7302]            	sub	[cs:CURRENT_DOS_LOCATION],ax
 23732                                  
 23733                                  ; 31/03/2024 - TEMPORARY
 23734                                  ;mov ds,[cs:CURRENT_DOS_LOCATION]
 23735                                  ;mov si,3F13h
 23736                                  ;lodsw
 23737                                  ;cmp ax,3F10h
 23738                                  ;jne short bgec5
 23739                                  ;; 05/04/2024
 23740                                  ;mov si, 3F11h
 23741                                  ;lodsw
 23742                                  ;cmp ax, 8DFFh
 23743                                  ;jne short bgec5
 23744                                  ;;
 23745                                  ;call phex
 23746                                  ;	 	
 23747                                  ;mov si,0B800h
 23748                                  ;mov ds,si
 23749                                  ;xor si,si
 23750                                  ;mov al,'%'
 23751                                  ;mov ah,4Ch
 23752                                  ;mov [si],ax
 23753                                  ;sub ah,ah
 23754                                  ;int 16h
 23755                                  ;bgec5:
 23756                                  	; Current DOSCODE start address = dword [dosinit]
 23757                                  
 23758                                  ;; If this is not ROMDOS, then the BIOS code is moved to the top of memory
 23759                                  ;; until it is determined whether it will be running in HIMEM or not.
 23760                                  
 23761                                  ;ifndef ROMDOS
 23762                                  
 23763                                  ; now put Bios_Code up on top of that. Assume Bios_Code + dossize < 64k
 23764                                  
 23765                                  	; 22/10/2022
 23766 0000052C 8CC0                    	mov	ax,es
 23767 0000052E 05000B                  	add	ax,DOSSIZE/16		; get paragraph of end of dos
 23768 00000531 8EC0                    	mov	es,ax
 23769 00000533 2E8706[8902]            	xchg	ax,[cs:temp_bcode_seg]	; swap with original home of Bios_Code
 23770 00000538 8ED8                    	mov	ds,ax			; point to loaded image of Bios_Code
 23771                                  
 23772                                  	;mov	si,BCODE_START ; mov si,30h
 23773                                  	; 09/12/2022
 23774 0000053A BE[3000]                	mov	si,BCODESTART
 23775                                  	; 02/11/2022
 23776 0000053D 89F7                    	mov	di,si
 23777                                  	; 30/12/2023
 23778                                  	;mov	cx,1E00h	; BCODE_END = (SYSINITSEG-DOSBIOCODESEG)*16
 23779                                  	;			; (544h-364h)*10h = 1E00h (for PCDOS 7.1 IBMBIO.COM)
 23780                                  	;mov	cx,BCODE_END	; mov cx,1A60h ; mov cx,1A70h ; 30/12/2022
 23781                                  	;sub	cx,si
 23782                                  	; 31/03/2024
 23783                                  	BCODESIZE equ BCODEEND-BCODESTART
 23784 0000053F B9401D                  	mov	cx,BCODESIZE
 23785 00000542 D1E9                    	shr	cx,1
 23786 00000544 F3A5                    	rep	movsw			; move Bios_Code into place
 23787                                  
 23788 00000546 8CC0                    	mov	ax,es			; tell it what segment it's in
 23789 00000548 2EFF1E[8702]            	call	far [cs:seg_reinit_ptr]	; far call to seg_reinit in Bios_Code (M022)
 23790                                  
 23791                                  ; 05/04/2024 - temporary
 23792                                  ;call phex
 23793                                  
 23794                                  ;endif	; not ROMDOS
 23795                                  
 23796                                  ; now call dosinit while it's in its temporary home
 23797                                  
 23798                                  	;mov	ax,cs
 23799                                  	;mov	ds,ax	 
 23800                                  
 23801                                  	;mov	dx,[MEMORY_SIZE]	; set for call to dosinit
 23802                                  
 23803                                  	; 22/10/2022
 23804                                  
 23805 0000054D 2EC43E[9503]            	les	di,[cs:BiosComBlock]	; ptr to BIOS communication block
 23806                                  		; es = KERNEL_SEGMENT (70h), di = 'SysInitPresent' address
 23807 00000552 2EC536[7502]            	lds	si,[cs:DEVICE_LIST]	; set for call to dosinit
 23808                                  		; ds = KERNEL_SEGMENT (70h), si = 'res_dev_list' address
 23809                                  
 23810 00000557 2E8B16[9402]            	mov	dx,[cs:MEMORY_SIZE]	; set for call to dosinit
 23811                                  
 23812 0000055C FA                      	cli
 23813 0000055D 8CC8                    	mov	ax,cs
 23814 0000055F 8ED0                    	mov	ss,ax
 23815                                  
 23816                                  ; 30/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 23817                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM)
 23818                                  %define locstack ($ - SYSINIT$) & 0FFFEh  ; 532h in MSDOS 6.21 IO.SYS
 23819                                  					  ; 5A6h in MSDOS 5.0 IO.SYS SYSINIT
 23820                                  					  ; 586h in PCDOS 7.1 IBMBIO.COM SYSINIT
 23821                                  ;SYSINIT:0532h: 
 23822                                  
 23823                                  ; 22/10/2022
 23824                                  ; ----------------------------------------------------------------------------
 23825                                  ;SYSINIT:05A6h:
 23826                                  ;locstack:	; (at SYSINIT:05A6h for MSDOS 5.0 IO.SYS)
 23827                                  
 23828                                  ; 03/09/2023
 23829                                  ; (locstack at SYSINIT:0586h in PCDOS 7.1 IBMBIO.COM SYSINIT)
 23830                                  
 23831                                  	;mov	sp,05A6h
 23832 00000561 BC6005                  	mov     sp,locstack		; set stack
 23833                                  
 23834 00000564 FB                      	sti
 23835                                  
 23836                                  ;align 2
 23837                                  	; 30/03/2018
 23838                                  ;LOCSTACK:
 23839                                          ;CALL	FAR [CS:MSDOS]	; FINAL_DOS_LOCATION:0 
 23840                                  		       		;('jmp DOSINIT' in 'MSHEAD.ASM')
 23841                                  		       		;('DOSINIT:' is in 'MSINIT.ASM')
 23842                                  
 23843                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 23844                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21)
 23845                                  
 23846                                  ; 05/04/2024 - temporary
 23847                                  ;push ds
 23848                                  ;push si
 23849                                  ;mov ax,0FFFFh
 23850                                  ;call phex
 23851                                  ;;jmp short tempor1
 23852                                  ;lds si,[cs:dosinit]
 23853                                  ;mov ax,si
 23854                                  ;call phex
 23855                                  ;mov ax,ds
 23856                                  ;call phex
 23857                                  ;mov ax,[si+1] ; [3F11h] ; 8DFFh
 23858                                  ;;call phex
 23859                                  ;add ax,3 ; 8E02h
 23860                                  ;add si,ax ; si = CD12h
 23861                                  ;mov ax,[si]
 23862                                  ;call phex
 23863                                  ;pop si
 23864                                  ;pop ds
 23865                                  
 23866                                  ; This call to DOSINIT will relocate the DOS data from its present location
 23867                                  ; at the top of memory, to its final location in low memory just above the
 23868                                  ; BIOS data. It will then build important DOS data structures in low 
 23869                                  ; memory following the DOS data. It returns (among many other things) the
 23870                                  ; new starting address of free memory.
 23871                                  
 23872 00000565 2EFF1E[7102]            	call	far [cs:dosinit]	; call dosinit	
 23873                                  			 ; es:di -> sysinitvars_ext
 23874                                  
 23875 0000056A 2E8C1E[8502]            	mov	[cs:def_php],ds		; save pointer to PSP
 23876                                  	
 23877                                  	; 11/12/2022
 23878                                  	; 22/03/2019
 23879 0000056F 0E                      	push	cs
 23880 00000570 1F                      	pop	ds
 23881                                  	; 22/10/2022
 23882 00000571 A3[8302]                	mov	[hi_doscod_size],ax
 23883 00000574 890E[8102]              	mov	[lo_doscod_size],cx
 23884 00000578 8916[7D02]              	mov	[dos_segreinit],dx
 23885                                  
 23886                                  ; 05/04/2024 - temporary
 23887                                  ;tempor1:
 23888                                  ;;mov ax,dx
 23889                                  ;;call phex
 23890                                  ;mov ax,di
 23891                                  ;call phex
 23892                                  ;
 23893                                  ;; 31/03/2024 - temporary
 23894                                  ;;cmp ax, 8DCEh
 23895                                  ;cmp di, 0D58h
 23896                                  ;jne short bgec7
 23897                                  ;push ds
 23898                                  ;mov bx, 0B800h
 23899                                  ;mov ds, bx
 23900                                  ;mov ah, 4Eh
 23901                                  ;mov al, '='
 23902                                  ;xor bx, bx
 23903                                  ;mov [bx], ax
 23904                                  ;xor ah, ah
 23905                                  ;int 16h
 23906                                  ;pop ds
 23907                                  ;bgec7:
 23908                                  	
 23909                                  	; 11/12/2022
 23910                                  	; ds = cs
 23911                                  	;mov	[cs:hi_doscod_size],ax	; size of doscode (including exepatch)
 23912                                  	;mov	[cs:lo_doscod_size],cx	; (not including exepatch)
 23913                                  	;mov	[cs:dos_segreinit],dx	; save offset of segreinit
 23914                                  
 23915                                  	; 05/06/2018 - Retro DOS v3.0
 23916                                  	; ES:DI = Address of pointer to SYSINITVARS structure (MSDOS 3.3)
 23917                                  
 23918                                  	; 11/12/2022
 23919                                  	; ds = cs
 23920                                  	; 22/10/2022
 23921                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars] ; 5/29/86
 23922 0000057C 268B05                  	mov	ax,[es:di] ; 22/03/2019
 23923                                  	;mov	[cs:DOSINFO],ax
 23924 0000057F A3[6D02]                	mov	[DOSINFO],ax
 23925                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars+2]
 23926 00000582 268B4502                	mov	ax,[es:di+2]
 23927                                  	;mov	[cs:DOSINFO+2],ax
 23928 00000586 A3[6F02]                	mov	[DOSINFO+2],ax	; set the sysvar pointer
 23929                                  
 23930                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab]
 23931 00000589 268B4504                	mov	ax,[es:di+4]
 23932                                  	;mov	[cs:sysi_country],ax
 23933 0000058D A3[7902]                	mov	[sysi_country],ax
 23934                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab+2]
 23935 00000590 268B4506                	mov	ax,[es:di+6]
 23936                                  	;mov	[cs:sysi_country+2],ax
 23937 00000594 A3[7B02]                	mov	[sysi_country+2],ax	; set the SYSI_Country pointer
 23938                                  
 23939                                  	; 20/04/2019
 23940                                  	;mov	ax,[CURRENT_DOS_LOCATION]
 23941                                  	;;mov	es,[CURRENT_DOS_LOCATION]
 23942                                  	;mov	ax,[FINAL_DOS_LOCATION] ; give dos its temporary location
 23943                                  	; 22/10/2022
 23944                                  	;mov	ax,[cs:CURRENT_DOS_LOCATION]
 23945                                  	;;;mov	[dos_segreinit+2],es
 23946                                  	;;mov	[dos_segreinit+2],ax
 23947                                  	;mov	[cs:dos_segreinit+2],ax
 23948                                  	; 11/12/2022
 23949                                  	; ds = cs
 23950 00000597 8E06[7302]              	mov	es,[CURRENT_DOS_LOCATION]
 23951 0000059B 8C06[7F02]              	mov	[dos_segreinit+2],es
 23952                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23953                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]
 23954                                  	;mov	[cs:dos_segreinit+2],es
 23955                                  
 23956                                  ; temporary - 27/03/2024
 23957                                  ;call printx
 23958                                  
 23959                                  ; ----------------------------------------------------------------------------
 23960                                  
 23961                                  ;SYSINIT:0577h:
 23962                                  	; ... RPLArena ... MSDOS 6.21 IO.SYS (SYSINIT:0577h to SYSINIT:05D1h)
 23963                                  ;SYSINIT:05D1h:	; NoRPLArena 
 23964                                  
 23965                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 23966                                  ;------ Cover up RPL code with an arena
 23967                                  ;SYSINIT:05EBh:
 23968                                  	; 11/12/2022
 23969                                  	; ds = cs
 23970 0000059F 31DB                    	xor	bx,bx
 23971 000005A1 391E[9602]              	cmp	[RPLMemTop],bx ; 0
 23972                                  	;cmp	word [RPLMemTop],0
 23973                                  	;;cmp	word [cs:RPLMemTop],0
 23974 000005A5 7450                    	je	short NoRPLArena
 23975                                  
 23976                                  ;------ alloc all memory
 23977                                  
 23978                                  	; 11/12/2022
 23979                                  	;mov	bx,0FFFFh
 23980 000005A7 4B                      	dec	bx
 23981                                  	; bx = 0FFFFh
 23982 000005A8 B448                    	mov	ah,48h
 23983 000005AA CD21                    	int	21h
 23984                                  			; DOS - 2+ - ALLOCATE MEMORY
 23985                                  			; BX = number of 16-byte paragraphs desired
 23986 000005AC B448                    	mov	ah,48h
 23987 000005AE CD21                    	int	21h
 23988                                  
 23989 000005B0 8EC0                    	mov	es,ax			; get it into ES and save it
 23990 000005B2 06                      	push	es
 23991                                  
 23992                                  ;------ resize upto RPL mem
 23993                                  
 23994                                  	; 11/12/2022
 23995                                  	; ds = cs
 23996                                  	;sub	ax,[cs:RPLMemTop]
 23997 000005B3 2B06[9602]              	sub	ax,[RPLMemTop]
 23998 000005B7 F7D8                    	neg	ax
 23999 000005B9 48                      	dec	ax
 24000 000005BA 89C3                    	mov	bx,ax
 24001 000005BC B44A                    	mov	ah,4Ah
 24002 000005BE CD21                    	int	21h
 24003                                    			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 24004                                  			; ES = segment address of block to change
 24005                                  			; BX = new size in paragraphs
 24006                                  
 24007                                  ;------ allocate the free (RPL MEM)
 24008                                  
 24009 000005C0 BBFFFF                  	mov	bx,0FFFFh
 24010 000005C3 B448                    	mov	ah,48h
 24011 000005C5 CD21                    	int	21h
 24012 000005C7 B448                    	mov	ah,48h
 24013 000005C9 CD21                    	int	21h
 24014                                  
 24015                                  ;----- mark that it belongs to RPL
 24016                                  
 24017 000005CB 48                      	dec	ax
 24018 000005CC 8EC0                    	mov	es,ax
 24019                                  	;mov	word [es:arena_owner],8
 24020 000005CE 26C70601000800          	mov	word [es:1],8
 24021                                  	;mov	word [es:arena_name],'RP'
 24022 000005D5 26C70608005250          	mov	word [es:8],'RP'
 24023                                  	;mov	word [es:arena_name+2],'L'
 24024 000005DC 26C7060A004C00          	mov	word [es:10],'L'
 24025                                  	;mov	word [es:arena_name+4],0
 24026 000005E3 26C7060C000000          	mov	word [es:12],0
 24027                                  	;mov	word [es:arena_name+6],0
 24028 000005EA 26C7060E000000          	mov	word [es:14],0	
 24029                                  
 24030 000005F1 07                              pop     es                      ; get back ptr to first block
 24031 000005F2 B449                            mov     ah,49h	; Dealloc	; and free it
 24032 000005F4 CD21                    	int	21h		
 24033                                  					; DOS - 2+ - FREE MEMORY
 24034                                  					; ES = segment address of area to be freed
 24035                                  	; 11/12/2022
 24036 000005F6 F8                      	clc
 24037                                  
 24038                                  ; ----------------------------------------------------------------------------
 24039                                  
 24040                                  NoRPLArena:
 24041                                  	; 11/12/2022
 24042                                  	; ds = cs
 24043                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21, IO.SYS)
 24044 000005F7 C43E[6D02]              	les	di,[DOSINFO]	; es:di -> dosinfo
 24045                                  	; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 24046                                  	;les	di,[cs:DOSINFO]	; es:di -> dosinfo
 24047                                  
 24048                                  	; 11/12/2022
 24049                                  	;clc				; get the extended memory size
 24050                                  
 24051                                  ;	execute the get extended memory size subfunction in the bios int 15h
 24052                                  ;	if the function reports an error do nothing else store the extended
 24053                                  ;	memory size reported at the appropriate location in the dosinfo buffer
 24054                                  ;	currently pointed to by es:di. use the offsets specified in the
 24055                                  ;	definition of the sysinitvars struct in inc\sysvar.inc
 24056                                  
 24057 000005FB B488                    	mov	ah,88h
 24058 000005FD CD15                    	int	15h			; check extended memory size
 24059 000005FF 720B                    	jc	short no_ext_memory
 24060                                  			; Get Extended Memory Size
 24061                                  			; Return: CF clear on success
 24062                                  			; AX = size of memory above 1M in K	
 24063                                  	;mov	[es:di+SYSI_EXT_MEM],ax ; save extended memory size
 24064                                  	; 22/10/2022
 24065 00000601 26894545                	mov	[es:di+45h],ax ; save extended memory size
 24066 00000605 09C0                    	or	ax,ax
 24067 00000607 7403                    	jz	short no_ext_memory
 24068 00000609 E8F606                  	call	ClrVDISKHeader
 24069                                  no_ext_memory:
 24070                                  	;mov	ax,[es:di+SYSI_MAXSEC]	; get the sector size
 24071 0000060C 268B4510                	mov	ax,[es:di+10h]
 24072                                  	;add	ax,bufinsiz
 24073                                  	; 30/12/2023 - Retro DOS v5.0
 24074                                  	;add	ax,20		; size of buffer header
 24075 00000610 83C018                  	add     ax,24		; bufinsiz
 24076                                  				; size of buffer header = 24 (PCDOS v7.1 IBMBIO.COM)
 24077                                  				; (it was 20 in MSDOS 6.22 IO.SYS)
 24078                                  	; 11/12/2022
 24079                                  	; ds = cs
 24080 00000613 A3[9D02]                	mov	[singlebuffersize],ax	; total size for a buffer
 24081                                  	;mov	[cs:singlebuffersize],ax	
 24082                                  	; 11/12/2022
 24083 00000616 A0[9802]                	mov	al,[DEFAULT_DRIVE]	; get the 1 based boot drive number set by msinit
 24084                                  	;mov	al,[cs:DEFAULT_DRIVE]
 24085                                  	;mov	[es:di+SYSI_BOOT_DRIVE],al ; set sysi_boot_drive
 24086 00000619 26884543                	mov	[es:di+43h],al
 24087                                  
 24088                                  ; determine if 386 system...
 24089                                  
 24090                                  ; 30/12/2023
 24091                                  %if 0
 24092                                  	;get_cpu_type			; macro to determine cpu type
 24093                                  
 24094                                  get_cpu_type:
 24095                                  	; 11/12/2022
 24096                                  	pushf
 24097                                  	;push	bx
 24098                                  	;xor	bx,bx
 24099                                  	; 11/12/2022
 24100                                  	;xor	cx,cx
 24101                                  	;
 24102                                  	xor	ax,ax
 24103                                  	; ax = 0
 24104                                  	push    ax
 24105                                  	popf
 24106                                  	pushf
 24107                                  	pop	ax
 24108                                  	and	ax,0F000h
 24109                                  	;cmp	ax,0F000h
 24110                                  	cmp	ah,0F0h 
 24111                                  	je	short cpu_8086
 24112                                  	;mov	ax,0F000h
 24113                                  	mov	ah,0F0h
 24114                                  	; ax = 0F000h
 24115                                  	push	ax
 24116                                  	popf
 24117                                  	pushf
 24118                                  	pop	ax
 24119                                  	;and	ax,0F000h
 24120                                  	and	ah,0F0h
 24121                                  	jz	short cpu_286
 24122                                  cpu_386:
 24123                                  	; 11/12/2022
 24124                                  	;;inc	bx
 24125                                  	;inc	cx
 24126                                  	; 11/12/2022
 24127                                  	;mov	byte [es:di+SYSI_DWMOVE],1
 24128                                  	mov	byte [es:di+44h],1
 24129                                  
 24130                                  	; 03/09/2023 - Retro DOS v5.0 (PCDOS 7.1 Modified SYSINIT)
 24131                                  	; change A20 line on/off check code to the faster (for 32 bit cpu)
 24132                                  	;push	es
 24133                                  	;push	di
 24134                                  	;mov	ax,DOSBIODATASEG ; 0070h
 24135                                  	;mov	es,ax
 24136                                  	;cld
 24137                                  	;mov	di,cpu386_cmpsd ; (IsA20Off)
 24138                                  	;mov	ax,4B9h        ; mov cx,4 ; B90400
 24139                                  	;stosw
 24140                                  	;mov	ax,0F300h      ; repz  ; F3
 24141                                  	;stosw
 24142                                  	;mov	ax,0A766h      ; cmpsd ; 66A7
 24143                                  	;stosw
 24144                                  	;pop	di
 24145                                  	;pop	es
 24146                                  
 24147                                  cpu_286:
 24148                                  	;;;inc	bx
 24149                                  	;;inc	cx
 24150                                  cpu_8086:
 24151                                  	; 11/12/2022
 24152                                  	;;mov	ax,bx
 24153                                  	;pop	bx
 24154                                  	popf
 24155                                  %endif
 24156                                  	;...
 24157                                  
 24158                                  	; 11/12/2022
 24159                                  	;or	cl,cl
 24160                                  	;jz	short not_386_system
 24161                                  	; 11/12/202
 24162                                  	;cmp	cl,2
 24163                                  	;;cmp	ax,2			; is it a 386?
 24164                                  	;jne	short not_386_system	; no: don't mess with flag
 24165                                  
 24166                                  	; 30/12/2023 - Retro DOS v5.0
 24167 0000061D 803E[B606]02            	cmp	byte [cpu_type], 2	; is it a 386?
 24168 00000622 7505                    	jne	short _not_386_cpu	; no: don't mess with flag
 24169                                  	
 24170                                  	;mov	byte [es:di+SYSI_DWMOVE],1
 24171                                  	; 11/12/2022
 24172                                  	; 22/10/2022
 24173 00000624 26C6454401              	mov	byte [es:di+44h],1
 24174                                  _not_386_cpu:
 24175                                  	;mov	al,[es:di+SYSI_NUMIO]
 24176 00000629 268A4520                	mov	al,[es:di+20h]
 24177                                  	; 11/12/2022
 24178                                  	; ds = cs
 24179 0000062D A2[8503]                	mov	[drivenumber],al	; save start of installable block drvs
 24180                                  	;mov	[cs:drivenumber],al
 24181                                  
 24182 00000630 8CC8                    	mov	ax,cs
 24183 00000632 83E811                  	sub	ax,11h			; room for PSP we will copy shortly
 24184                                  	; 11/12/2022
 24185                                  	;mov	cx,[singlebuffersize]	; temporary single buffer area
 24186                                  	;;mov	cx,[cs:singlebuffersize]
 24187                                  	;shr	cx,1			
 24188                                  	;shr	cx,1			; divide size by 16...
 24189                                  	;shr	cx,1
 24190                                  	;shr	cx,1			; ...to get paragraphs...
 24191                                  	;inc	cx			; ... and round up
 24192                                  	; 11/12/2022
 24193 00000635 8B1E[9D02]              	mov	bx,[singlebuffersize]
 24194 00000639 B104                    	mov	cl,4
 24195 0000063B D3EB                    	shr	bx,cl
 24196 0000063D 43                      	inc	bx
 24197                                  
 24198                                  ;	cas note: this unorthodox paragraph rounding scheme wastes a byte
 24199                                  ;	  if [singlebuffersize] ever happens to be zero mod 16. Could this
 24200                                  ;	  ever happen? Only if the buffer overhead was zero mod 16, since
 24201                                  ;	  it is probably safe to assume that the sector size always will be.
 24202                                  ;
 24203                                  ;	 mohans also found a bug in CONFIG.SYS processing where it replaces
 24204                                  ;	  EOF's with cr,lf's, without checking for collision with [confbot].
 24205                                  ;	  perhaps the extra byte this code guarantees is what has kept that
 24206                                  ;	  other code from ever causing a problem???
 24207                                  
 24208                                  	; 11/12/2022
 24209 0000063E 29D8                    	sub	ax,bx
 24210                                  	;sub	ax,cx
 24211 00000640 A3[A702]                	mov	[top_of_cdss],ax	; temp "unsafe" location
 24212                                  	; 22/10/2022
 24213                                  	;mov	[cs:top_of_cdss],ax
 24214                                  
 24215                                  ;	chuckst -- 25 Jul 92 -- added code here to pre-allocate space
 24216                                  ;	for 26 temporary CDSs, which makes it easier to use alloclim
 24217                                  ;	for allocating memory for MagicDrv.
 24218                                  
 24219                                  	; 30/12/2023
 24220                                  	;push	es ; not necessary (!*)	; preserve pointer to dosinfo
 24221                                  	;push	di
 24222                                  
 24223                                  	; 22/10/2022
 24224                                  ;	mov	cx,ax			; save pointer for buffer
 24225                                  ;
 24226                                  ;;	now allocate space for 26 CDSs
 24227                                  ;
 24228                                  ;	sub	ax,((26 *(curdirlen))+15)/16
 24229                                  ;	mov	[ALLOCLIM],ax		; init top of free memory pointer
 24230                                  ;	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 24231                                  
 24232                                  	; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS)
 24233                                  	; (SYSINIT:064Ch)
 24234 00000643 89C1                    	mov	cx,ax ; (*)
 24235 00000645 2D8F00                  	sub	ax,((26*(curdirlen))+15)/16 ; sub ax,143
 24236 00000648 A3[A502]                	mov	[ALLOCLIM],ax		; init top of free memory pointer
 24237 0000064B A3[A302]                	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 24238                                  	 	
 24239                                  ; setup and initialize the temporary buffer at cx
 24240                                  
 24241                                  	;les	di,[es:di+SYSI_BUF]	; get the buffer chain entry pointer
 24242 0000064E 26C47D12                	les	di,[es:di+12h]
 24243                                  	; 11/12/2022
 24244 00000652 31DB                    	xor	bx,bx
 24245                                  	;xor	ax,ax
 24246                                  	;mov	[es:di+BUFFINF.Dirty_Buff_Count],ax ; 0
 24247                                  	;mov	word [es:di+4],0
 24248 00000654 26895D04                	mov	[es:di+4],bx ; 0
 24249                                  	;mov	[es:di+BUFFINF.Buff_Queue],ax ; 0
 24250                                  	;mov	word [es:di],0
 24251 00000658 26891D                  	mov	[es:di],bx ; 0
 24252                                  	;mov	[es:di+BUFFINF.Buff_Queue+2],cx ; cx = [top_of_cdss] ; 6.21
 24253                                  	;;mov	[es:di+BUFFINF.Buff_Queue+2],ax ; ax = [top_of_cdss] ; 5.0
 24254                                  	;mov	[es:di+2],ax
 24255                                  	;mov	es,ax	; [top_of_cdss] = [CONFBOT]
 24256                                  	; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS, SYSINIT)
 24257 0000065B 26894D02                	mov	[es:di+2],cx ; [top_of_cdss] ; (*)	
 24258 0000065F 8EC1                    	mov	es,cx
 24259                                  
 24260                                  	; 11/12/2022
 24261                                  	;xor	ax,ax
 24262                                  	;mov	di,ax			; es:di -> single buffer
 24263 00000661 89DF                    	mov	di,bx
 24264                                  	; di = 0
 24265                                  
 24266                                  	;mov	[es:di+buffinfo.buf_next],ax ; points to itself
 24267                                  	; 11/12/2022
 24268                                  	;mov	[es:di],ax ; 0
 24269 00000663 26891D                  	mov	[es:di],bx ; 0
 24270                                  	;mov	[es:di+buffinfo.buf_prev],ax ; points to itself
 24271                                  	; 11/12/2022
 24272                                  	;mov	[es:di+2],ax ; 0
 24273 00000666 26895D02                	mov	[es:di+2],bx ; 0 
 24274                                  
 24275                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS SYINIT)
 24276                                  	; MSDOS 5.0 IO.SYS - SYSINIT:06E0h
 24277                                  
 24278                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh ; free buffer,clear flag
 24279 0000066A 26C74504FF00            	mov	word [es:di+4],00FFh
 24280                                  ;SYSINIT:06E6h
 24281                                  	;;mov	[es:di+buffinfo.buf_sector],ax ; 0
 24282                                  	;mov	word [es:di+6],0
 24283                                  	; 11/12/2022
 24284                                  	;mov	[es:di+buffinfo.buf_sector],bx ; 0
 24285 00000670 26895D06                	mov	[es:di+6],bx ; 0
 24286                                  	;;mov	[es:di+buffinfo.buf_sector+2],ax ; 0
 24287                                  	;mov	word [es:di+8],0
 24288                                  	; 11/12/2022
 24289                                  	;mov	[es:di+buffinfo.buf_sector+2],bx ; 0
 24290 00000674 26895D08                	mov	[es:di+8],bx ; 0
 24291                                  
 24292                                  	; 30/12/2023 (!*)
 24293                                  	;pop	di			; restore pointer to DOSINFO data
 24294                                  	;pop	es
 24295                                  
 24296                                  	; 11/12/2022
 24297                                  	; ds = cs
 24298                                  	; 22/10/2022
 24299                                  	;push	cs
 24300                                  	;pop	ds
 24301                                  
 24302                                  ; 30/12/2023 - temporary
 24303                                  ;push ds
 24304                                  ;push bx
 24305                                  ;push ax
 24306                                  ;mov bx, 0B800h
 24307                                  ;mov ds, bx
 24308                                  ;mov ah, 4Eh
 24309                                  ;mov al, '$'
 24310                                  ;xor bx, bx
 24311                                  ;mov [bx], ax
 24312                                  ;xor ah, ah
 24313                                  ;int 16h
 24314                                  ;pop ax
 24315                                  ;pop bx
 24316                                  ;pop ds
 24317                                  ;;jmp short bunugec
 24318                                  
 24319 00000678 E82E07                  	call	TempCDS			; set up cdss so re_init and sysinit
 24320                                  					;  can make disk system calls
 24321                                  					; tempcds trashes ds
 24322                                  ;bunugec:
 24323                                  ; 30/12/2023 - temporary
 24324                                  ;push ds
 24325                                  ;push bx
 24326                                  ;push ax
 24327                                  ;mov bx, 0B800h
 24328                                  ;mov ds, bx
 24329                                  ;mov ah, 4Eh
 24330                                  ;mov al, 'M'
 24331                                  ;xor bx, bx
 24332                                  ;mov [bx], ax
 24333                                  ;xor ah, ah
 24334                                  ;int 16h
 24335                                  ;pop ax
 24336                                  ;pop bx
 24337                                  ;pop ds
 24338                                  
 24339                                  	; 10/05/2019
 24340 0000067B 2E8E1E[8502]            	mov	ds,[cs:def_php]		; retrieve pointer to PSP returned by DOSINIT
 24341                                  
 24342                                  	;if not ibmjapver
 24343                                  	;call	far KERNEL_SEGMENT:re_init ; re-call the bios
 24344                                  	;endif
 24345                                  
 24346                                  	; 22/10/2022
 24347                                  ;SYSINIT:06FEh:	; (MSDOS 5.0 IO.SYS, SYSINIT)
 24348                                  	; 30/12/2022
 24349                                  ;SYSINIT:0697h:	; (MSDOS 6.21 IO.SYS, SYSINIT)
 24350                                  	;call	far ptr 70h:89Bh
 24351 00000680 9A[2807]7000            	call	DOSBIODATASEG:RE_INIT
 24352                                  
 24353 00000685 FB                      	sti				; ints ok
 24354 00000686 FC                      	cld				; make sure
 24355                                  
 24356                                  ; 23/03/2019
 24357                                  
 24358                                  ;SYSINIT:069Eh	; 30/12/2022
 24359                                  
 24360                                  ; dosinit has set up a default "process" (php) at ds:0. we will move it out
 24361                                  ; of the way by putting it just below sysinit at end of memory.
 24362                                  
 24363 00000687 8CCB                    	mov	bx,cs
 24364 00000689 83EB10                  	sub	bx,10h
 24365 0000068C 8EC3                    	mov	es,bx
 24366 0000068E 31F6                    	xor	si,si
 24367 00000690 89F7                    	mov	di,si
 24368 00000692 B98000                  	mov	cx,128
 24369 00000695 F3A5                    	rep	movsw
 24370                                  
 24371                                  	;mov	[es:PDB.JFN_POINTER+2],es ; Relocate
 24372                                  	; 22/10/2022
 24373 00000697 268C063600              	mov	[es:36h],es
 24374                                  
 24375                                   	; Set Process Data Block - Program Segment Prefix address
 24376                                  	; BX = PDB/PSP segment
 24377 0000069C B450                            mov	ah,50h	; SET_CURRENT_PDB
 24378 0000069E CD21                    	int	21h			; tell DOS we moved it
 24379                                  			; DOS - 2+ internal - SET PSP SEGMENT
 24380                                  			; BX = segment address of new PSP
 24381                                  	; 22/10/2022
 24382                                  	; 27/03/2019
 24383                                  	; 30/12/2023
 24384                                  	;push	ds ; */			; preserve DS returned by DOSINIT
 24385                                  
 24386 000006A0 0E                      	push	cs	
 24387 000006A1 1F                      	pop	ds
 24388                                  
 24389                                  	; set up temp. critical error handler
 24390 000006A2 BA[3749]                	mov	dx,int24		; set up int 24 handler
 24391                                  	;;mov	ax,(SET_INTERRUPT_VECTOR*256)+24h
 24392                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)|24h
 24393 000006A5 B82425                  	mov	ax,2524h
 24394 000006A8 CD21                    	int	21h
 24395                                  
 24396 000006AA 803E[8803]00                    cmp     byte [toomanydrivesflag],0 ; Q: >24 partitions?      M029
 24397 000006AF 7406                            je      short no_err		   ;  N: continue            M029
 24398 000006B1 BA[0F52]                        mov     dx,TooManyDrivesMsg	   ;  Y: print error message M029
 24399                                          ; 22/10/2022
 24400                                  	;call	print 			   ;		             M029
 24401                                  	; 12/12/2022
 24402 000006B4 EB04                    	jmp	short p_dosinit_msg ; 23/03/2019 - Retro DOS v4.0
 24403                                  
 24404                                  	; 30/12/2023 - Retro DOS v5.0
 24405                                  cpu_type:
 24406 000006B6 FF                      	db 0FFh	; db 0
 24407                                  
 24408                                  no_err:
 24409                                  	; 12/05/2019
 24410                                  	;----------------------------------------------
 24411                                  	; 27/06/2018 - Retro DOS v3.0	; 23/03/2019 - Retro DOS v4.0
 24412                                  	; 22/10/2022 - Retro DOS v4.0
 24413                                  	; 12/12/2022
 24414                                  	; 30/12/2023 - Retro DOS v5.0
 24415 000006B7 BA[3B49]                	mov	dx,BOOTMES		; Display (fake) MSDOS version message
 24416                                  p_dosinit_msg:
 24417 000006BA E85542                  	call	print			; Print message
 24418                                  	;----------------------------------------------
 24419                                  	
 24420                                  	; 11/12/2022
 24421                                  	; 22/10/2022
 24422                                  	; 23/03/2019 - Retro DOS v4.0
 24423                                  	;pop	ds			; start of free memory
 24424                                  	;mov	dl,[cs:DEFAULT_DRIVE]
 24425                                  	
 24426                                  	; 11/12/2022
 24427                                  	; 27/03/2019
 24428 000006BD 8A16[9802]              	mov	dl,[DEFAULT_DRIVE]	
 24429                                  	; 30/12/2023
 24430                                  	;pop	ds ; */
 24431                                  
 24432 000006C1 08D2                    	or	dl,dl
 24433                                  	; 30/12/2023
 24434 000006C3 7405                    	jz	short nodrvset		; bios didn't say
 24435                                  	;jz	short ProcessConfig  ; (Retro DOS v4.0 does not contain DBLSPACE code)
 24436                                  	;dec	dl			; A = 0
 24437                                  	; 18/12/2022
 24438 000006C5 4A                      	dec	dx
 24439 000006C6 B40E                    	mov	ah,0Eh	; SET_DEFAULT_DRIVE
 24440 000006C8 CD21                    	int	21h			; select the disk
 24441                                  			; DOS - SELECT DISK
 24442                                  			; DL = new default drive number (0 = A, 1 = B, etc.)
 24443                                  			; Return: AL = number of logical drives
 24444                                  nodrvset:
 24445                                  	; 04/01/2023 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS SYINIT)
 24446                                  	; (SYSINIT:06DFh)
 24447                                  	
 24448                                  	; 30/12/2023 - Retro DOS 5.0
 24449                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:0733h)
 24450 000006CA 1E                      	push	ds
 24451 000006CB 29C0                    	sub	ax,ax
 24452 000006CD 8ED8                    	mov	ds,ax ; 0 ; ROM BIOS Data Area
 24453 000006CF A16C04                  	mov	ax,[46Ch] ; timer tick count (18.2 ticks per second)
 24454                                  	;mov	[cs:_timer_lw_],ax
 24455 000006D2 1F                      	pop	ds
 24456                                  	; ds = cs	
 24457 000006D3 A3[8C03]                	mov	[_timer_lw_],ax
 24458                                  
 24459                                  	; ---------------------
 24460                                  
 24461                                  	;ifdef	dblspace_hooks
 24462                                  	;	....
 24463                                  	;	....
 24464                                  	;endif
 24465                                  
 24466                                  	; ---------------------
 24467                                  
 24468                                  	; 30/12/2023 - Retro DOS 5.0 (Modified MSDOS 7.1 IBMBIO.COM SYS SYINIT)
 24469                                  ; ----------------------------------------------------------------------------
 24470                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:0740h
 24471                                  
 24472 000006D6 0E                      	push	cs
 24473 000006D7 07                      	pop	es
 24474                                  
 24475                                  	; 07/04/2024
 24476                                   	;mov	word [cs:MagicBackdoor+2],cs
 24477                                  	;mov	word [cs:MagicBackdoor], NullBackdoor
 24478 000006D8 8C0E[9203]               	mov	word [MagicBackdoor+2],cs
 24479 000006DC C706[9003][9403]        	mov	word [MagicBackdoor], NullBackdoor
 24480                                  
 24481                                  	; ds = es = cs = SYSINIT segment
 24482                                  set_drvspc_size:
 24483 000006E2 BE[0416]                	mov	si,MagicDDName		; "\DBLSPACE.BIN"
 24484                                  set_dblspc_size:
 24485 000006E5 E8372E                  	call	SizeDevice
 24486 000006E8 732B                    	jnc	short wait_for_key_2s
 24487                                  	;cmp	byte [cs:si], 'C'
 24488 000006EA 803C43                  	cmp	byte [si],'C'		; "C:\STACKER.BIN"
 24489 000006ED 740C                    	je	short set_drvspc_name
 24490                                  	;cmp	byte [cs:DEFAULT_DRIVE],3
 24491 000006EF 803E[9802]03            	cmp	byte [DEFAULT_DRIVE],3
 24492 000006F4 7405                    	je	short set_drvspc_name
 24493 000006F6 83EE02                  	sub	si,2			; "C:\DBLSPACE.BIN"
 24494 000006F9 EBEA                    	jmp	short set_dblspc_size
 24495                                  
 24496                                  set_drvspc_name:
 24497                                  	;cmp	byte [cs:MagicDDName+2],'R'	; "BLSPACE.BIN"
 24498 000006FB 803E[0616]52            	cmp	byte [MagicDDName+2],'R'
 24499 00000700 7408                    	je	short set_stacker_name
 24500                                  	;mov	word [cs:MagicDDName+2],'RV'	; "DRVSPACE.BIN"
 24501 00000702 C706[0616]5256          	mov	word [MagicDDName+2],'RV'
 24502 00000708 EBD8                    	jmp     short set_drvspc_size
 24503                                  
 24504                                  set_stacker_name:
 24505 0000070A 81FE[1216]              	cmp	si,StackerName		; "C:\STACKER.BIN"
 24506 0000070E 734B                    	jnb	short wfk2s_4
 24507 00000710 BE[1416]                	mov	si,StackerName+2	; "\STACKER.BIN"
 24508 00000713 EBD0                    	jmp	short set_dblspc_size
 24509                                  
 24510                                  wait_for_key_2s:
 24511                                  	;mov	[cs:MagicDDNamePtr],si
 24512 00000715 8936[0016]              	mov	[MagicDDNamePtr],si
 24513 00000719 1E                      	push	ds
 24514 0000071A 29C0                    	sub	ax,ax
 24515 0000071C 8ED8                    	mov	ds,ax	; 0		; ROMBIOS data area
 24516 0000071E 8B166C04                	mov	dx,[46Ch]		; Counter for Interrupt 1Ah
 24517                                  wfk2s_1:
 24518 00000722 B401                    	mov	ah,1
 24519 00000724 CD16                    	int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
 24520                                  				; Return: ZF clear if character in buffer
 24521                                  				; AH = scan code, AL = character
 24522                                  				; ZF set if no character in buffer
 24523 00000726 7511                    	jnz	short wfk2s_2
 24524 00000728 B402                    	mov	ah,2
 24525 0000072A CD16                    	int	16h			; KEYBOARD - GET SHIFT STATUS
 24526                                  					; AL = shift status bits
 24527 0000072C A803                    	test	al,3
 24528 0000072E 7509                    	jnz	short wfk2s_2
 24529 00000730 A16C04                  	mov	ax,[46Ch]		; tick count
 24530 00000733 29D0                    	sub	ax,dx
 24531 00000735 3C25                            cmp	al,37			; 2 seconds
 24532 00000737 72E9                    	jb	short wfk2s_1		; wait for user's key press
 24533                                  wfk2s_2:
 24534 00000739 1F                      	pop	ds			; read/check the pressed key
 24535 0000073A 29DB                    	sub	bx,bx	; bx = 0
 24536 0000073C B402                    	mov	ah,2
 24537 0000073E CD16                    	int	16h			; KEYBOARD - GET SHIFT STATUS
 24538                                  					; AL = shift status bits
 24539 00000740 A803                    	test	al,3			; Left or Right SHIFT key pressed ?
 24540 00000742 7402                    	jz	short wfk2s_3		; no
 24541 00000744 43                      	inc	bx
 24542 00000745 43                      	inc	bx	; bx = 2
 24543                                  wfk2s_3:
 24544 00000746 B401                    	mov	ah,1
 24545 00000748 CD16                    	int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
 24546                                  				; Return: ZF clear if character in buffer
 24547                                  				; AH = scan code, AL = character
 24548                                  				; ZF set if no character in buffer
 24549 0000074A 7418                    	jz	short wfk2s_6
 24550 0000074C 80FC65                  	cmp	ah,65h			; F8 key pressed ?
 24551 0000074F 740C                    	jz	short wfk2s_5
 24552 00000751 80FC62                  	cmp	ah,62h			; F5 key pressed ?
 24553 00000754 750E                    	jnz	short wfk2s_6
 24554                                  	;mov	byte [cs:F5_key],1
 24555 00000756 C606[8E03]01            	mov	byte [F5_key],1
 24556                                  wfk2s_4:
 24557 0000075B EB49                    	jmp	short ProcessConfig	; continue (as normal/default state)
 24558                                  
 24559                                  wfk2s_5:
 24560                                  	;mov	byte [cs:F8_key],1
 24561 0000075D C606[8F03]01            	mov	byte [F8_key],1
 24562 00000762 EB42                    	jmp	short ProcessConfig
 24563                                  
 24564                                  wfk2s_6:
 24565 00000764 E8B002                  	call	AllocFreeMem		; get the largest free block from DOS
 24566 00000767 E8C90E                  	call	MagicPreload		; **** PRE-LOAD MAGICDRV!!! ****
 24567                                  
 24568                                  	; 07/04/2024 - Retro DOS v5.0
 24569                                  	; (DS may not be same with CS here!)
 24570 0000076A 0E                      	push	cs
 24571 0000076B 1F                      	pop	ds ; *
 24572 0000076C 8E06[6803]              	mov	es,[area]
 24573                                                        
 24574 00000770 09C0                    	or	ax,ax			; error?
 24575 00000772 7406                    	jz	short wfk2s_7
 24576                                  PreloadFailed:
 24577 00000774 B449                    	mov	ah,49h			; Dealloc ; free the block if no load
 24578                                  	;;mov	es,[cs:area]
 24579                                  	;mov	es,[area]
 24580 00000776 CD21                    	int	21h		; DOS - 2+ - FREE MEMORY
 24581                                  				; ES = segment address of area to be freed
 24582 00000778 EB2C                    	jmp	short ProcessConfig
 24583                                  
 24584                                  wfk2s_7:
 24585                                  	;mov	bx,[cs:memhi]
 24586                                  	;mov	es,[cs:area]
 24587                                  	;sub	bx,[cs:area]		; get desired block size in paras
 24588                                  	; 07/04/2024 - Retro DOS v5.0
 24589                                  	; ds = cs ; *
 24590 0000077A 8CC3                    	mov	bx,es
 24591 0000077C F7DB                    	neg	bx		; bx = - [cs:area]
 24592 0000077E 031E[6403]              	add	bx,[memhi]	; bx = [cs:memhi] - [cs:area]
 24593                                  
 24594 00000782 B44A                    	mov	ah,4Ah
 24595 00000784 CD21                    	int	21h		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 24596                                  				; ES = segment address of block to change
 24597                                  				; BX = new size in paragraphs
 24598 00000786 8CC0                    	mov	ax,es
 24599 00000788 48                      	dec	ax
 24600 00000789 8EC0                    	mov	es,ax			; get Magicdrv arena
 24601                                  
 24602 0000078B 26C70601000800          	mov	word [es:1],8	; [es:arena_owner]
 24603                                  	;mov	word [es:ARENA.OWNER],8	; set impossible owner
 24604 00000792 26C70608005344          	mov     word [es:8],4453h ; [es:arena_name],'SD' ; System Data
 24605                                  	;mov	word [es:ARENA.NAME],'SD' ; 4453h
 24606 00000799 2603060300                      add	ax,[es:3]		; get MCB length
 24607                                  	;add	ax,[es:ARENA.SIZE]
 24608                                  
 24609                                  	;lds	si,[cs:DOSINFO]		; get to arena header
 24610 0000079E C536[6D02]              	lds	si,[DOSINFO]
 24611 000007A2 40                              inc     ax			; get addr of next MCB
 24612 000007A3 8944FE                          mov     [si-2], ax      	; store that
 24613                                  
 24614                                  ; ----------------------------------------------------------------------------
 24615                                  
 24616                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0744h
 24617                                  
 24618                                  ; 23/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 24619                                  ; ----------------------------------------------------------------------------
 24620                                  ; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 24621                                  ; ----------------------------------------------------------------------------
 24622                                  ; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS SYSINIT)
 24623                                  ; ----------------------------------------------------------------------------
 24624                                  ; 07/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM SYSINIT)
 24625                                  
 24626                                  ; (MSDOS 6.22 IO.SYS - SYSINIT:0744h)
 24627                                  
 24628                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:0820h
 24629                                  
 24630                                  ProcessConfig:
 24631                                  	;; ds = cs ; 27/03/2019
 24632                                  	; 11/12/2022
 24633                                  	; ds <> cs	
 24634                                  
 24635                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:0746h)
 24636                                  
 24637 000007A6 E8241C                  	call	doconf			; do pre-scan for dos=high/low
 24638                                  
 24639                                  	; 11/12/2022
 24640                                  	; 27/03/2019
 24641                                  	; ds = cs (at return from doconf)
 24642                                  
 24643                                  ; Now, if this is not romdos, we decide what to do with the DOS code.
 24644                                  ; It will either be relocated to low memory, above the DOS data structures,
 24645                                  ; or else it will be located in HiMem, in which case a stub with the DOS
 24646                                  ; code entry points will be located in low memory. Dos_segreinit is used
 24647                                  ; to tell the DOS data where the code has been placed, and to install the
 24648                                  ; low memory stub if necessary. If the DOS is going to go into HiMem, we
 24649                                  ; must first initialize it in its present location and load the installable
 24650                                  ; device drivers. Then, if a HiMem driver has been located, we can actually
 24651                                  ; relocate the DOS code into HiMem.
 24652                                  ;
 24653                                  ; For ROMDOS, if DOS=HIGH is indicated, then we need to call dos_segreinit
 24654                                  ; to install the low memory stub (this must be done before allowing any
 24655                                  ; device drivers to hook interrupt vectors). Otherwise, we don't need to 
 24656                                  ; call dos_segreinit at all, since the interrupt vector table has already 
 24657                                  ; been patched.
 24658                                  
 24659                                  	; 22/10/2022 - Retro DOS v4.0
 24660                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:0749h)
 24661                                  	;cmp	byte [cs:runhigh],0	; Did user choose to run low ?
 24662                                  	; 11/12/2022
 24663 000007A9 803E[6C02]00            	cmp	byte [runhigh],0
 24664 000007AE 740C                    	je	short dont_install_stub	; yes, don't install dos low mem stub
 24665                                  
 24666                                  ;------ user chose to load high
 24667                                  
 24668                                  	; 22/10/2022
 24669                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; MSDOS 6.21 (& MSDOS 6.0)
 24670                                  	; 11/12/2022
 24671                                  	; ds = cs
 24672 000007B0 8E06[7302]              	mov	es,[CURRENT_DOS_LOCATION]
 24673                                  
 24674                                  	;mov	es,[cs:FINAL_DOS_LOCATION] ; Retro DOS v4.0
 24675                                  	; 27/03/2019
 24676                                  	;;mov	es,[FINAL_DOS_LOCATION]
 24677                                  
 24678 000007B4 31C0                    	xor	ax,ax			; ax = 0 ---> install stub
 24679                                  	; 11/12/2022
 24680                                  	; ds = cs
 24681                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 24682 000007B6 FF1E[7D02]              	call	far [dos_segreinit]
 24683                                  
 24684 000007BA EB10                    	jmp	short do_multi_pass
 24685                                  
 24686                                  ;------ User chose to load dos low
 24687                                  
 24688                                  dont_install_stub:
 24689                                  	; 22/10/2022
 24690 000007BC 31DB                    	xor	bx,bx			; M012
 24691                                  					; don't use int 21 call to alloc mem
 24692 000007BE E80C03                  	call	MovDOSLo		; move it !
 24693                                  
 24694 000007C1 B80100                  	mov	ax,1			; dont install stub
 24695                                  	; 11/12/2022
 24696                                  	; ds = cs
 24697 000007C4 8E06[7302]              	mov	es,[CURRENT_DOS_LOCATION]
 24698                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; set_dos_final_position set it up
 24699                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 24700                                  	; 27/03/2019
 24701                                  ;do_multi_pass:
 24702                                  	;;mov	es,[FINAL_DOS_LOCATION] 
 24703                                  
 24704                                  	; 11/12/2022
 24705                                  	; ds =cs
 24706                                  	;call	far [cs:dos_segreinit]	; inform dos about new seg
 24707 000007C8 FF1E[7D02]              	call	far [dos_segreinit]
 24708                                  do_multi_pass:
 24709 000007CC E84802                  	call	AllocFreeMem		; allocate all the free mem
 24710                                  					; & update [memhi] & [area]
 24711                                  					; start of free memory.
 24712                                  	;ifdef	dblspace_hooks
 24713                                  	;mov	bx,0			; magic backdoor to place int hooks
 24714                                  	;call	cs:MagicBackdoor
 24715                                  	;endif
 24716                                  
 24717                                  	; 07/04/2024 - Retro DOS v5.0
 24718                                  	; (PCDOS 7.1 IBMBIO.COM)
 24719                                  	;cmp	byte [cs:F5_key],1
 24720 000007CF 803E[8E03]01            	cmp	byte [F5_key],1
 24721 000007D4 740D                    	je	short skip_magicbackdoor
 24722                                  	;cmp	byte [cs:F8_key],1
 24723 000007D6 803E[8F03]01            	cmp	byte [F8_key],1
 24724 000007DB 7406                    	je	short skip_magicbackdoor
 24725 000007DD 31DB                    	xor	bx,bx	; bx = 0	; magic backdoor to place int hooks
 24726                                  	;call	far [cs:MagicBackdoor]
 24727 000007DF FF1E[9003]              	call	far [MagicBackdoor]
 24728                                  
 24729                                  skip_magicbackdoor:
 24730                                  
 24731                                  ; Now, process config.sys some more.  
 24732                                  ; Load the device drivers and install programs
 24733                                  
 24734                                  	; 22/10/2022
 24735                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 1
 24736                                  	; 11/12/2022
 24737                                  	; ds = cs
 24738 000007E3 FE06[CD02]              	inc	byte [multi_pass_id]
 24739 000007E7 E87F1C                  	call	multi_pass		; load device drivers
 24740 000007EA E8A030                  	call	ShrinkUMB
 24741 000007ED E8C430                  	call	UnlinkUMB		; unlink all UMBs	;M002
 24742                                  	; 02/11/2022
 24743                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 2
 24744                                  	; 11/12/2022
 24745                                  	; ds = cs
 24746 000007F0 FE06[CD02]              	inc	byte [multi_pass_id]
 24747 000007F4 E8721C                  	call	multi_pass		; was load ifs (now does nothing)
 24748                                  
 24749                                  	;ifdef	dblspace_hooks
 24750                                  	;call	MagicPostload		; make sure Magicdrv is final placed
 24751                                  	;endif
 24752                                  
 24753                                  	; ds = cs
 24754                                  
 24755                                  	; 07/04/2024
 24756                                  	;call	endfile			; setup fcbs, files, buffers etc
 24757                                  
 24758                                  	;ifdef	dblspace_hooks
 24759                                  	;call	MagicSetCdss		; disable CDSs of reserved drives
 24760                                  	;endif
 24761                                  
 24762                                  	; 07/04/2024 - Retro DOS v5.0
 24763                                  	; (PCDOS 7.1 IBMBIO.COM)
 24764                                  	;cmp	byte [cs:F5_key],1
 24765 000007F7 803E[8E03]01            	cmp	byte [F5_key],1
 24766 000007FC 7412                    	je	short skip_magicpostload
 24767                                  	;cmp	byte [cs:F8_key],1
 24768 000007FE 803E[8F03]01            	cmp	byte [F8_key],1
 24769 00000803 740B                    	je	short skip_magicpostload
 24770 00000805 E83310                  	call	MagicPostload		; make sure Magicdrv is final placed
 24771 00000808 E83C06                  	call	endfile			; setup fcbs, files, buffers etc
 24772 0000080B E89610                  	call	MagicSetCdss		; disable CDSs of reserved drives
 24773 0000080E EB03                    	jmp	short _@_
 24774                                  
 24775                                  skip_magicpostload:
 24776                                  	
 24777 00000810 E83406                  	call	endfile			; setup fcbs, files, buffers etc
 24778                                  _@_:
 24779                                  
 24780                                  ;Reset SysinitPresent flag here. This is needed for the special fix for lying
 24781                                  ;to device drivers. This has been moved up to this point to avoid problems 
 24782                                  ;with overlays called from installed programs
 24783                                  
 24784                                  	; 11/12/2022
 24785                                  	; ds = cs
 24786                                  
 24787                                  	;;mov	ax,Bios_Data ; 0070h
 24788                                  	;mov	ax,KERNEL_SEGMENT
 24789                                  	; 21/10/2022
 24790 00000813 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 24791 00000816 8EC0                    	mov	es,ax			; point ES to bios data
 24792                                  
 24793 00000818 26C606[DD07]00          	mov	byte [es:SysinitPresent],0 ; clear SysinitPresent flag
 24794                                  
 24795                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24796                                  	;test	word [cs:install_flag],have_install_cmd ; 1
 24797                                  	;test	byte [cs:install_flag],1
 24798                                  	; 11/12/2022
 24799                                  	; ds = cs
 24800 0000081E F606[CE02]01            	test	byte [install_flag],1
 24801                                  	;test	byte [cs:install_flag],have_install_cmd
 24802                                  					; are there install commands?
 24803 00000823 7407                    	jz	short dolast		; no, no need for further processing
 24804                                  	;inc	byte [cs:multi_pass_id]	; mult_pass_id = 3
 24805                                  	; 11/12/2022
 24806                                  	; ds =cs
 24807 00000825 FE06[CD02]              	inc	byte [multi_pass_id]
 24808 00000829 E83D1C                  	call	multi_pass		; execute install= commands
 24809                                  
 24810                                  dolast:
 24811                                  	
 24812                                  ; [area] has the segment address for the allocated memory of sysinit, confbot.
 24813                                  ;  free the confbot area used for config.sys and sysinit itself.
 24814                                  
 24815                                  ; Now if DOS is supposed to run high, we actually move it into high memory 
 24816                                  ; (if HiMem manager is available). For ROMDOS, we don't actually move
 24817                                  ; anything, but just set up the ROM area for suballocation (or print
 24818                                  ; a message if HiMem is not available).
 24819                                  ;
 24820                                  ; There is also this little hack for CPM style DOS calls that needs to
 24821                                  ; be done when A20 is set...
 24822                                  
 24823                                  	; 11/12/2022
 24824                                  	; ds = cs
 24825                                  
 24826                                  	; 22/10/2022
 24827                                  	;cmp	byte [cs:runhigh],0FFh	; are we still waiting to be moved?
 24828                                  	; 11/12/2022
 24829 0000082C 803E[6C02]FF            	cmp	byte [runhigh],0FFh
 24830 00000831 7503                    	jne	short _@@_ ; 09/12/2022 ; no, our job is over
 24831 00000833 E84602                  	call	LoadDOSHiOrLo
 24832                                  _@@_:
 24833                                  	;cmp	byte [cs:runhigh],0	; are we running low
 24834                                  	; 11/12/2022
 24835                                  	; ds = cs
 24836 00000836 803E[6C02]00            	cmp	byte [runhigh],0
 24837                                  	;je	short _@@@
 24838 0000083B 7403                    	je	short ConfigDone	; yes, no CPM hack needed
 24839 0000083D E84A05                  	call	CPMHack			; make ffff:d0 same as 0:c0
 24840                                  _@@@:
 24841                                  
 24842                                  ; We are now done with CONFIG.SYS processing
 24843                                  
 24844                                  ConfigDone:
 24845                                  	; 12/12/2022
 24846                                  	; 22/10/2022
 24847                                  	;mov	byte [cs:donotshownum],1 
 24848                                  					; done with config.sys.
 24849                                  					; do not show line number message.
 24850                                  	;mov	es,[cs:area]
 24851                                  	; 12/12/2022
 24852                                  	; ds = cs
 24853                                  	; 27/03/2019
 24854 00000840 C606[5503]01            	mov	byte [donotshownum],1
 24855 00000845 8E06[6803]              	mov	es,[area]
 24856                                  
 24857 00000849 B449                            mov     ah,49h ; DEALLOC	; free allocated memory for command.com
 24858 0000084B CD21                    	int	21h
 24859                                  			; DOS - 2+ - FREE MEMORY
 24860                                  			; ES = segment address of area to be freed
 24861                                  
 24862                                  	; 22/10/2022
 24863                                  	;test	word [cs:install_flag],2
 24864                                  	;test	word [cs:install_flag],has_installed ; sysinit_base installed?
 24865                                  	;test	byte [cs:install_flag],has_installed
 24866                                  	; 11/12/2022
 24867                                  	; ds = cs
 24868 0000084D F606[CE02]02            	test	byte [install_flag],2 ; has_installed
 24869                                  	;test	byte [install_flag],has_installed
 24870 00000852 741F                    	jz	short skip_free_sysinitbase ; no.
 24871                                  
 24872                                  ; set block from the old_area with impossible_owner_size.
 24873                                  ; this will free the unnecessary sysinit_base that had been put in memory to
 24874                                  ; handle install= command.
 24875                                  
 24876                                  	; 12/12/2022
 24877                                          ;push	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 24878                                  	;push	bx
 24879                                  	
 24880                                  	; 22/10/2022
 24881                                  	;mov	es,[cs:old_area]
 24882                                  	;mov	bx,[cs:impossible_owner_size]
 24883                                  	; 12/12/2022
 24884                                  	; ds = cs
 24885 00000854 8E06[5E03]              	mov	es,[old_area]
 24886 00000858 8B1E[6003]              	mov	bx,[impossible_owner_size]
 24887                                  	
 24888 0000085C B44A                    	mov	ah,4Ah ; SETBLOCK
 24889 0000085E CD21                    	int	21h
 24890                                  			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 24891                                  			; ES = segment address of block to change
 24892                                  			; BX = new size in paragraphs
 24893 00000860 8CC0                    	mov	ax,es
 24894 00000862 48                      	dec	ax
 24895 00000863 8EC0                    	mov	es,ax			; point to arena
 24896                                  	;mov	word [es:ARENA.OWNER],8	; set impossible owner
 24897 00000865 26C70601000800          	mov	word [es:1],8
 24898                                  	;mov	word [es:ARENA.NAME],'SD' ; 4453h ; System Data
 24899 0000086C 26C70608005344          	mov	word [es:8],'SD'
 24900                                  	
 24901                                  	; 12/12/2022
 24902                                  	;pop	bx
 24903                                          ;pop     es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 24904                                  
 24905                                  skip_free_sysinitbase:
 24906                                  	; 22/10/2022
 24907                                  	;cmp	byte [cs:runhigh],0
 24908                                  	; 12/12/2022
 24909                                  	; ds = cs
 24910 00000873 803E[6C02]00            	cmp	byte [runhigh],0	
 24911 00000878 7403                    	je	short _@@@_ ; 04/07/2023
 24912                                  
 24913 0000087A E8DD03                  	call	InstVDiskHeader	; Install VDISK header (allocates some mem from DOS)
 24914                                  
 24915                                  ; ----------------------------------------------------------------------------
 24916                                  
 24917                                  _@@@_:
 24918                                  	; 12/12/2022
 24919                                  	; ds = cs
 24920                                  	; 22/10/2022
 24921                                  	; 27/03/2019
 24922                                  	;push	cs
 24923                                  	;pop	ds			; point DS to sysinitseg
 24924                                  
 24925                                  ; set up the parameters for command
 24926                                  
 24927                                  ;	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 24928                                  ;;ifdef	MULTI_CONFIG
 24929                                  ;	mov	byte [config_cmd],0	; set special code for query_user
 24930                                  ;       call    query_user		; to issue the AUTOEXEC prompt
 24931                                  ;	jnc	short process_autoexec	; we should process autoexec normally
 24932                                  ;	; !!!
 24933                                  ;	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 24934                                  ;       ; !!!
 24935                                  ;	call    disable_autoexec        ; no, we should disable it
 24936                                  ;process_autoexec:
 24937                                  ;;endif	; !!!
 24938                                  ;	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 24939                                  ;	; !!!
 24940                                  
 24941                                  	; 22/10/2022 
 24942                                  	;mov     cl,[command_line]
 24943                                          ;mov     ch,0
 24944                                          ;inc     cx
 24945                                          ;mov     si,command_line	
 24946                                  	;add     si,cx
 24947                                          ;mov     byte [si],cr	; cr-terminate command line
 24948                                  
 24949                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 24950                                  	; (SYSINIT:0809h)
 24951                                  
 24952                                  	;;;;
 24953                                  
 24954                                  	; 30/12/2022 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 24955                                  	; (SYSINIT:0813h)
 24956                                  	; ds = cs
 24957                                  	; push	cs
 24958                                  	; pop	ds
 24959                                  
 24960 0000087D C606[F018]00            	mov	byte [config_cmd],0	; set special code for query_user
 24961 00000882 E8553C                  	call    query_user		; to issue the AUTOEXEC prompt
 24962                                  	; 07/04/2024
 24963                                  	;jnc	short process_autoexec	; we should process autoexec normally
 24964                                  
 24965                                  	; 07/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 24966                                  	;;;
 24967 00000885 9C                      	pushf
 24968 00000886 F606[3F4B]01            	test	byte [bDisableUI],1
 24969 0000088B 7507                    	jnz	short _@@@@_	; F5 clean/interactive boot option (has been) disabled
 24970 0000088D 803E[8E03]01            	cmp	byte [F5_key],1
 24971 00000892 7405                    	je	short _@@@@@_	; F5 key pressed, bypass AUTOEXEC.BAT (clean boot)
 24972                                  _@@@@_:
 24973 00000894 9D                      	popf
 24974 00000895 730B                    	jnc	short process_autoexec	; we should process autoexec normally
 24975 00000897 EB01                    	jmp	short bypass_autoexec
 24976                                  _@@@@@_:
 24977 00000899 9D                      	popf			; cf status at the return from 'query_user' call
 24978                                  bypass_autoexec:
 24979                                  	;;;
 24980                                  
 24981                                  	; !!!
 24982 0000089A 800E[434B]04            	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 24983                                  	; !!!
 24984 0000089F E8333D                  	call    disable_autoexec        ; no, we should disable it
 24985                                  process_autoexec:
 24986                                  	; !!!
 24987 000008A2 E87B3D                  	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 24988                                  
 24989                                  	;mov     cl,[command_line]
 24990                                  	; 30/12/2022
 24991 000008A5 BE[794A]                	mov	si,command_line
 24992 000008A8 8A0C                    	mov	cl,[si]
 24993 000008AA B500                    	mov     ch,0
 24994 000008AC 41                      	inc     cx
 24995                                  	;mov	si,command_line
 24996 000008AD 01CE                    	add     si,cx
 24997 000008AF C6040D                  	mov     byte [si],cr ; 0Dh	; cr-terminate command line
 24998                                  	
 24999                                  	;;;;		
 25000                                  
 25001                                  ; 30/12/2022 - Retro DOS v4.2
 25002                                  %if 0
 25003                                  	;mov	si,(offset command_line+1)
 25004                                  	mov	si,command_line+1
 25005                                  	push    ds
 25006                                  	pop     es
 25007                                  	mov     di,si
 25008                                  	mov     cl,0FFh ; -1
 25009                                  _@_loop:
 25010                                  	inc     cl ; +1
 25011                                  	lodsb
 25012                                  	stosb
 25013                                  	or      al,al
 25014                                  	jnz     short _@_loop
 25015                                  	dec     di
 25016                                  	mov     al,0Dh
 25017                                  	stosb			; cr-terminate command line
 25018                                  	mov     [command_line],cl ; command line length (except CR)
 25019                                  
 25020                                  %endif
 25021                                  
 25022                                  ; ----------------------------------------------------------------------------
 25023                                  
 25024                                  ;   Once we get to this point, the above code, which is below "retry"
 25025                                  ;   in memory, can be trashed (and in fact is -- see references to retry
 25026                                  ;   which follow....)
 25027                                  
 25028                                  retry:		; PCDOS 7.1 IBMBIO.COM - SYSINIT:094Ch ; 07/04/2024
 25029 000008B2 BA[EB49]                	mov	dx,commnd	; now pointing to file description
 25030                                  
 25031                                  ; we are going to open the command interpreter and size it as is done in
 25032                                  ; ldfil. the reason we must do this is that sysinit is in free memory. if
 25033                                  ; there is not enough room for the command interpreter,exec will probably
 25034                                  ; overlay our stack and code so when it returns with an error sysinit won't be
 25035                                  ; here to catch it. this code is not perfect (for instance .exe command
 25036                                  ; interpreters are possible) because it does its sizing based on the
 25037                                  ; assumption that the file being loaded is a .com file. it is close enough to
 25038                                  ; correctness to be usable.
 25039                                  
 25040                                  ; first, find out where the command interpreter is going to go.
 25041                                  
 25042 000008B5 52                      	push	dx		; save pointer to name
 25043 000008B6 BBFFFF                  	mov	bx,0FFFFh
 25044 000008B9 B448                    	mov	ah,48h	; ALLOC
 25045 000008BB CD21                            int     21h             ; get biggest piece
 25046 000008BD B448                    	mov	ah,48h	; ALLOC
 25047 000008BF CD21                    	int	21h		; second time gets it
 25048 000008C1 726B                    	jc	short memerrjx	; oooops
 25049                                  
 25050 000008C3 8EC0                    	mov	es,ax
 25051 000008C5 B449                    	mov	ah,49h	; DEALLOC
 25052 000008C7 CD21                    	int	21h		; give it right back
 25053 000008C9 89DD                    	mov	bp,bx
 25054                                  
 25055                                  ; es:0 points to block,and bp is the size of the block in para.
 25056                                  
 25057                                  ; we will now adjust the size in bp down by the size of sysinit.
 25058                                  ; we need to do this because exec might get upset if some of the exec
 25059                                  ; data in sysinit is overlayed during the exec.
 25060                                  
 25061                                  	; 22/10/2022
 25062                                  	; (MSDOS 5.0 IO.SYS SYSINIT:083Bh)
 25063 000008CB 8B1E[9402]                      mov     bx,[MEMORY_SIZE] ; get location of end of memory
 25064 000008CF 8CC8                    	mov	ax,cs		 ; get location of beginning of sysinit
 25065                                  
 25066                                  ; Note that the "config_wrkseg" environment data is a segment in
 25067                                  ; unallocated memory (as of the Dealloc of [area], above). This is ideal
 25068                                  ; in one sense, because Exec is going to make a copy of it for COMMAND.COM
 25069                                  ; anyway, and no one has responsibility for freeing "config_wrkseg". But
 25070                                  ; we need to make sure that there's no way Exec will stomp on that data
 25071                                  ; before it can copy it, and one way to do that is to make the available
 25072                                  ; memory calculation even more "paranoid", by subtracting "config_wrkseg"
 25073                                  ; from the "memory_size" segment value (which is typically A000h) instead
 25074                                  ; of the current sysinit CS....
 25075                                  ;
 25076                                  ; The reason I use the term "paranoid" is because this code should have
 25077                                  ; slid the data required by Exec up to the very top of memory, because as
 25078                                  ; it stands, you have to have sizeof(COMMAND.COM) PLUS 64K to load just
 25079                                  ; COMMAND.COM (64k is about what sysinit, and all the goop above sysinit,
 25080                                  ; consumes). Now it's just a little worse (65K or more, depending on
 25081                                  ; the size of your CONFIG.SYS, since the size of the environment workspace
 25082                                  ; is determined by the size of CONFIG.SYS.... -JTP
 25083                                  
 25084                                  	; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21, IO.SYS)
 25085                                  	; (SYSINIT:0858h)
 25086 000008D1 8B0E[EC18]              	mov	cx,[config_envlen]
 25087 000008D5 E303                            jcxz	no_env		; use config_wrkseg only if there's env data
 25088 000008D7 A1[EE18]                        mov	ax,[config_wrkseg]	
 25089                                  
 25090                                  	; 22/10/2022
 25091                                  	;mov	cx,[config_envlen]
 25092                                          ;jcxz	no_env		; use config_wrkseg only if there's env data
 25093                                          ;mov	ax,[config_wrkseg]
 25094                                  ;no_env:
 25095                                  	; 22/10/2022
 25096                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0841h)
 25097                                  no_env:
 25098                                  	; 30/12/2022
 25099                                  	; (MSDOS 6.21 IO.SYS SYSINIT:0861h)
 25100 000008DA 29C3                      	sub     bx,ax           ; bx is size of sysinit in para
 25101 000008DC 83C311                  	add	bx,11h		; add the sysinit php
 25102 000008DF 29DD                    	sub	bp,bx		; sub sysinit size from amount of free memory
 25103 000008E1 724B                    	jc	short memerrjx	; if there isn't even this much memory, give up
 25104                                  
 25105                                          ;mov	ax,(OPEN<<8)	; open the file being execed
 25106 000008E3 B8003D                          mov	ax,3D00h
 25107 000008E6 F9                      	stc                     ; in case of int 24
 25108 000008E7 CD21                    	int	21h
 25109 000008E9 7270                    	jc	short comerr	; ooops
 25110                                  			; DOS - 2+ - OPEN DISK FILE WITH HANDLE
 25111                                  			; DS:DX -> ASCIZ filename
 25112                                  			; AL = access mode
 25113                                  			; 0 - read
 25114                                  	; 22/10/2022
 25115                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0852h)
 25116 000008EB 89C3                            mov     bx,ax           ; handle in bx
 25117                                  
 25118                                  ;   If the standard command interpreter is being used, verify it is correct
 25119                                  
 25120                                  	; 30/12/2022 - Retro DOS v4.2
 25121                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:0874h)
 25122 000008ED 803E[E849]00            	cmp	byte [newcmd],0	; was a new shell selected?
 25123 000008F2 7518                    	jne	short skip_validation ; yes
 25124                                  	; 07/04/2024 - Retro DOS v5.0
 25125                                  	; (PCDOS 7.1 IBMBIO.COM, SYSINIT:098Eh)
 25126 000008F4 BA[AE08]                	mov	dx,retry-4	; PCDOS 7.1 IBMBIO.COM - SYSINIT:0948h
 25127 000008F7 B90400                  	mov	cx,4		;
 25128 000008FA B43F                    	mov	ah,READ		;
 25129 000008FC CD21                    	int	21h		;
 25130 000008FE 803E[AE08]E9            	cmp	byte [retry-4],0E9h
 25131 00000903 7556                    	jne	short comerr
 25132                                  	; 20/04/2019 - Retro DOS v4.0
 25133                                  	; 30/12/2022 
 25134                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 25135                                  				; .. COMMAND.COM Version 6.20 (14h&0Fh)
 25136                                  	; 07/04/2024 - Retro DOS v5.0
 25137                                  	;;cmp	byte [retry-1],66h ; .. COMMAND.COM Version 6.22 (16h&0Fh)
 25138                                  	;cmp	byte [retry-1],7Ah ; PCDOS 7.1 IBMBIO.COM - SYSINIT:099Fh
 25139                                  				; .. COMMAND.COM Version 7.10 (0Ah&0Fh)
 25140 00000905 803E[B108]7A            	cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 25141 0000090A 754F                    	jne	short comerr	;
 25142                                  
 25143                                  	; 22/10/2022
 25144                                  	;cmp	byte [newcmd],0	; was a new shell selected?
 25145                                  	;jne	short skip_validation ; yes
 25146                                  	;mov	dx,retry-4
 25147                                  	;mov	cx,4		;
 25148                                  	;mov	ah,READ		;
 25149                                  	;int	21h		;
 25150                                  	;cmp	byte [retry-4],0E9h
 25151                                  	;jne	short comerr
 25152                                  	;; 20/04/2019 - Retro DOS v4.0
 25153                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 25154                                  	;;cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 25155                                  	;jne	short comerr	;
 25156                                  
 25157                                  ;skip_validation:
 25158                                  	; 22/10/2022
 25159                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0854h)
 25160                                  skip_validation:
 25161                                  	; 30/12/2022
 25162                                  	; (MSDOS 6.21 IO.SYS SYSINIT:0893h)
 25163 0000090C 31C9                    	xor	cx,cx
 25164 0000090E 31D2                    	xor	dx,dx
 25165                                  	;mov	ax,(LSEEK<<8)|2
 25166 00000910 B80242                  	mov	ax,4202h
 25167 00000913 F9                      	stc			; in case of int 24
 25168 00000914 CD21                    	int	21h		; get file size in dx:ax
 25169 00000916 7243                    	jc	short comerr
 25170                                  				; convert size in dx:ax to para in ax
 25171 00000918 83C00F                  	add	ax,15		; round up size for conversion to para
 25172 0000091B 83D200                  	adc	dx,0
 25173 0000091E E87F04                  	call	off_to_para
 25174 00000921 B10C                    	mov	cl,12
 25175 00000923 D3E2                    	shl	dx,cl		; low nibble of dx to high nibble
 25176 00000925 09D0                    	or	ax,dx		; ax is now # of para for file
 25177 00000927 83C010                  	add	ax,10h		; 100h byte php
 25178 0000092A 39E8                    	cmp	ax,bp		; will command fit in available mem?
 25179 0000092C 7208                    	jb	short okld	; jump if yes.
 25180                                  
 25181                                  ; 30/12/2022
 25182                                  %if 0
 25183                                  	; 22/10/2022
 25184                                  memerrjx:	; (MSDOS 5.0 IO.SYS SYSINIT:0876h)
 25185                                  	;jmp	memerr	; (MSDOS 5.0 IO.SYS SYSINIT:34D5h)
 25186                                  	; 02/11/2022
 25187                                  	;jmp	mem_err
 25188                                  	; 11/12/2022
 25189                                  	; ds = cs
 25190                                  	jmp	mem_err2
 25191                                  %endif
 25192                                  	; 30/12/2022
 25193                                  	; (MSDOS 6.21, IO.SYS, SYSINIT:08B5h)
 25194                                  memerrjx:
 25195 0000092E BA[C74F]                	mov	dx,badmem 	; "Configuration too large for memory"
 25196 00000931 E8DE3F                  	call	print
 25197 00000934 EB39                    	jmp     short continue
 25198                                  
 25199                                  okld:
 25200 00000936 B43E                    	mov	ah,3Eh ; CLOSE
 25201 00000938 CD21                    	int	21h		; close file
 25202                                  
 25203                                  	; 22/10/2022
 25204 0000093A 5A                      	pop	dx	; (MSDOS 5.0 IO.SYS SYSINIT:087Dh)
 25205                                  
 25206                                  	; 24/03/2019
 25207                                  
 25208 0000093B 0E                      	push	cs		; point es to sysinitseg
 25209 0000093C 07                      	pop	es
 25210 0000093D BB[BF02]                        mov     bx,COMEXE	; point to exec block
 25211                                  	; 22/10/2022
 25212                                  	;pop	dx              ; recover pointer to name
 25213                                  
 25214                                  ;;ifdef	MULTI_CONFIG
 25215                                  
 25216                                  ;   If there's any environment data in "config_wrkseg", pass it to shell;
 25217                                  ;   there will be data if there were any valid SET commands and/or if a menu
 25218                                  ;   selection was made (in which case the CONFIG environment variable will be
 25219                                  ;   set to that selection).
 25220                                  
 25221                                  	; 23/10/2022
 25222                                  	;mov	cx,[config_envlen]
 25223                                  	;jcxz	no_envdata
 25224                                          ;mov	cx,[config_wrkseg]
 25225                                  ;no_envdata:
 25226                                  	;;mov	[bx+EXEC0.ENVIRON],cx
 25227                                  	;mov	[bx],cx
 25228                                  
 25229                                  ;;endif	;MULTI_CONFIG
 25230                                  
 25231                                  	; 30/12/2022 - Retro DOS v4.2
 25232                                  	; (MSDOS 6.21 IO.SYS SYSINIT:08C7h)
 25233 00000940 8B0E[EC18]              	mov	cx,[config_envlen]
 25234 00000944 E304                    	jcxz	no_envdata
 25235 00000946 8B0E[EE18]                      mov	cx,[config_wrkseg]
 25236                                  no_envdata:
 25237                                  	;mov	[bx+EXEC0.ENVIRON],cx
 25238 0000094A 890F                    	mov	[bx],cx	
 25239                                  	
 25240                                  	; 23/10/2022
 25241                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0883h)
 25242                                  
 25243                                  	;mov	[bx+EXEC0.COM_LINE+2],cs ; set segments
 25244 0000094C 8C4F04                  	mov	[bx+4],cs
 25245                                  	;mov	[bx+EXEC0.5C_FCB+2],cs
 25246 0000094F 8C4F08                  	mov	[bx+8],cs
 25247                                  	;mov	[bx+EXEC0.6C_FCB+2],cs
 25248 00000952 8C4F0C                  	mov	[bx+12],cs
 25249                                  
 25250                                  	;mov	ax,(EXEC<<8) + 0
 25251                                  	; 23/10/2022
 25252                                  	;xor	ax,ax
 25253                                  	;mov	ah,4Bh
 25254                                  	; 04/07/2023
 25255                                  	;mov	ax,4B00h
 25256 00000955 B8004B                  	mov	ax,(EXEC<<8)
 25257                                  
 25258 00000958 F9                      	stc                     ; in case of int 24
 25259 00000959 CD21                            int     21h             ; go start up command
 25260                                  			; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 25261                                  			; DS:DX -> ASCIZ filename
 25262                                  			; ES:BX -> parameter block
 25263                                  			; AL = subfunc: load & execute program
 25264                                  	;push	cs
 25265                                  	;pop	ds
 25266                                  
 25267                                  	; 23/10/2022
 25268                                  	;push	dx		; push to balance fall-through pop
 25269                                  
 25270                                  ; note fall through if exec returns (an error)
 25271                                  comerr:
 25272                                  	; 23/10/2022
 25273                                  ;;ifdef	MULTI_CONFIG
 25274                                  	;cmp	byte [commnd4],0
 25275                                  	;je	short comerr2	; all defaults exhausted, print err msg
 25276                                  	;cmp	byte [newcmd],0
 25277                                  	;je	short continue	; don't print err msg for defaults just yet
 25278                                  ;comerr2:
 25279                                  ;;endif
 25280                                  
 25281                                  	; 30/12/2022 - Retro DOS v4.2
 25282                                  	;push	cs
 25283                                  	;pop	ds
 25284                                  	; 07/04/2024
 25285                                  	; ds = cs
 25286                                  
 25287 0000095B 803E[5C4A]00            	cmp	byte [commnd4],0
 25288 00000960 7407                    	je	short comerr2	; all defaults exhausted, print err msg
 25289 00000962 803E[E849]00            	cmp	byte [newcmd],0
 25290 00000967 7406                    	je	short continue	; don't print err msg for defaults just yet
 25291                                  comerr2:
 25292                                  	; 07/04/2024
 25293                                  	;push	dx ; 30/12/2022
 25294                                  
 25295                                  	; 23/10/2022
 25296 00000969 BA[434F]                        mov     dx,badcom	; want to print command error
 25297 0000096C E8773F                  	call	badfil
 25298                                  	
 25299                                  	; 07/04/2024
 25300                                  	;pop	dx  ; 30/12/2022
 25301                                  continue:
 25302                                  	; 23/10/2022
 25303                                  	;pop	dx
 25304                                  
 25305                                  ; 30/12/2022
 25306                                  %if 0
 25307                                  
 25308                                  ;;ifndef MULTI_CONFIG
 25309                                  	;jmp	stall
 25310                                  	; 24/10/2022
 25311                                  stall:		; (MSDOS 5.0 IO.SYS, SYSINIT:0899h)
 25312                                  	jmp	short stall
 25313                                  ;;else
 25314                                  
 25315                                  %endif
 25316                                  	
 25317                                  ; 30/12/2022 (MSDOS 6.21 SYSINIT, Retro DOS v4.2)
 25318                                  ;%if 1
 25319                                  ; 23/10/2022 (MSDOS 5.0 SYSINIT, Retrodos v4.0)
 25320                                  ;%if 0	
 25321 0000096F B419                    	mov	ah,GET_DEFAULT_DRIVE ; 19h
 25322 00000971 CD21                    	int	21h             ;
 25323 00000973 0441                    	add	al,'A'          ;
 25324 00000975 88C2                    	mov	dl,al           ; DL == default drive letter
 25325 00000977 BE[2B4A]                	mov	si,commnd2
 25326 0000097A 803E[E849]00            	cmp	byte [newcmd],0 ; if a SHELL= was given
 25327 0000097F 7505                    	jne	short do_def2	; then try the 2nd alternate;
 25328 00000981 C60400                  	mov	byte [si],0	; otherwise, the default SHELL= was tried,
 25329 00000984 EB05                    	jmp	short do_def3   ; which is the same as our 2nd alt, so skip it
 25330                                  do_def2:			
 25331 00000986 803C00                  	cmp	byte [si],0	; has 2nd alternate been tried?
 25332 00000989 7554                            jne	short do_alt    ; no
 25333                                  do_def3:
 25334 0000098B BE[3C4A]                	mov	si,commnd3
 25335 0000098E 803C00                  	cmp	byte [si],0	; has 3rd alternate been tried?
 25336 00000991 754C                    	jne	short do_alt	; no
 25337 00000993 BE[5C4A]                	mov	si,commnd4
 25338 00000996 803C00                  	cmp	byte [si],0	; has 4th alternate been tried?
 25339 00000999 7544                    	jne	short do_alt	; no
 25340 0000099B 52                      	push	dx              ;
 25341 0000099C BA[B251]                	mov	dx,badcomprmpt
 25342 0000099F E8703F                  	call	print		;
 25343 000009A2 5A                      	pop	dx              ; recover default drive letter in DL
 25344                                  request_input:			;
 25345 000009A3 B402                    	mov	ah,STD_CON_OUTPUT
 25346 000009A5 CD21                    	int	21h             ;
 25347 000009A7 52                      	push	dx              ;
 25348 000009A8 B23E                    	mov	dl,'>'          ;
 25349 000009AA CD21                    	int	21h             ;
 25350 000009AC 8A1E[EA49]              	mov	bl,[tmplate+1]	; [tmplate+1] = 12
 25351 000009B0 B700                    	mov	bh,0            ;
 25352 000009B2 C687[EB49]0D            	mov	byte [commnd+bx],0Dh
 25353 000009B7 BA[E949]                	mov	dx,tmplate
 25354 000009BA B40A                    	mov	ah,STD_CON_STRING_INPUT
 25355 000009BC CD21                    	int	21h             ; read a line of input
 25356 000009BE BA[EE4E]                	mov	dx,crlfm	;
 25357 000009C1 E84E3F                  	call	print           ;
 25358 000009C4 5A                      	pop	dx              ;
 25359 000009C5 8A1E[EA49]              	mov	bl,[tmplate+1]	;
 25360 000009C9 08DB                    	or	bl,bl           ; was anything typed?
 25361 000009CB 74D6                    	jz	short request_input ;
 25362 000009CD C606[E849]01            	mov	byte [newcmd],1 ; disable validation for user-specified binaries
 25363 000009D2 C687[EB49]00            	mov	byte [commnd+bx],0 ; NULL-terminate it before execing it
 25364 000009D7 C706[794A]000D          	mov	word [command_line],0D00h
 25365 000009DD EB35                    	jmp	short do_exec   ;
 25366                                  do_alt:
 25367 000009DF 1E                      	push	ds
 25368 000009E0 07                      	pop	es
 25369 000009E1 C606[E849]00            	mov	byte [newcmd],0 ; force validation for alternate binaries
 25370 000009E6 BF[EB49]                	mov	di,commnd	;
 25371                                  do_alt1:
 25372 000009E9 AC                      	lodsb			; copy the alternate, zapping it as we go,
 25373 000009EA C644FF00                	mov	byte [si-1],0	; so that we know it's been tried
 25374 000009EE AA                      	stosb 			;
 25375 000009EF 08C0                    	or	al,al		;
 25376 000009F1 75F6                    	jnz	short do_alt1	;
 25377 000009F3 BF[794A]                	mov	di,command_line
 25378 000009F6 807C023A                	cmp	byte [si+2],':'
 25379 000009FA 7503                    	jne	short do_alt2	;
 25380 000009FC 885401                  	mov	[si+1],dl	; stuff default drive into alt. command line
 25381                                  do_alt2:			;
 25382 000009FF AC                      	lodsb			;
 25383 00000A00 AA                      	stosb			;
 25384 00000A01 08C0                    	or	al,al           ;
 25385 00000A03 75FA                    	jnz	short do_alt2   ;
 25386 00000A05 C645FF0D                	mov	byte [di-1],cr
 25387                                  
 25388                                  ;;   Last but not least, see if we need to call disable_autoexec
 25389                                  
 25390                                  	; MSDOS 6.0 (SYSINIT1.ASM)
 25391                                  	;cmp	[command_line-1],0
 25392                                          ;jne	short do_exec   ;
 25393                                          ;mov	[command_line-1],'/'
 25394                                  	;call	disable_autoexec ;
 25395                                  
 25396                                  	; MSDOS 6.21 IO.SYS (SYSINIT:0994h)
 25397 00000A09 C606[394B]00            	mov	byte [dae_flag],0 ; 24/03/2019 - Retro DOS v4.0 	
 25398 00000A0E E8C43B                  	call	disable_autoexec
 25399 00000A11 E80C3C                  	call	CheckQueryOpt	; 24/03/2019 - Retro DOS v4.0
 25400                                  do_exec:
 25401 00000A14 E99BFE                  	jmp	retry		;
 25402                                  
 25403                                  ;;endif	;MULTI_CONFIG
 25404                                  
 25405                                  ;%endif ; 23/10/2022 (MSDOS 5.0 SYSINIT)
 25406                                  ;%endif ; 30/12/2022 (MSDOS 6.21 SYSINIT)
 25407                                  
 25408                                  ; 24/03/2019 - Retro DOS v4.0
 25409                                  
 25410                                  ; ----------------------------------------------------------------------
 25411                                  ; procedure : AllocFreeMem
 25412                                  ;
 25413                                  ; Allocate Max memory from DOS to find out where to load DOS.
 25414                                  ; DOS is at temporary location when this call is being made
 25415                                  ;
 25416                                  ; Inputs : None
 25417                                  ; Outputs: The biggest chunk of memory is allocated (all mem at init time)
 25418                                  ;	   [area] & [memhi] set to the para value of the start of the
 25419                                  ;	   free memory.
 25420                                  ;
 25421                                  ; Uses   : AX, BX
 25422                                  ;
 25423                                  ; ----------------------------------------------------------------------
 25424                                  	
 25425                                  	; 30/12/2022 - Retro DOS v4.2
 25426                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:09A2h)
 25427                                  
 25428                                  	; 08/04/2024 - Retro DOS v5.0
 25429                                  	; (PCDOS 7.1 IBMBIO.COM, SYSINIT:0AB5h)
 25430                                  
 25431                                  	; 23/10/2022
 25432                                  AllocFreeMem:
 25433 00000A17 BBFFFF                  	mov	bx,0FFFFh
 25434 00000A1A B448                    	mov	ah,48h ; ALLOC
 25435 00000A1C CD21                    	int	21h			; first time fails
 25436 00000A1E B448                    	mov	ah,48h ; ALLOC
 25437 00000A20 CD21                    	int	21h			; second time gets it
 25438                                  	; 11/12/2022
 25439                                  	; ds = cs
 25440                                  	;mov	[cs:area],ax
 25441                                  	;mov	[cs:memhi],ax		; memhi:memlo now points to
 25442 00000A22 A3[6803]                	mov	[area],ax
 25443 00000A25 A3[6403]                	mov	[memhi],ax		; memhi:memlo now points to			
 25444 00000A28 C3                      	retn				; start of free memory
 25445                                  				
 25446                                  	; include msbio.cl6
 25447                                  ; ----------------------------------------------------------------------
 25448                                  DOSLOMSG:
 25449 00000A29 484D41206E6F742061-     	db	'HMA not available: Loading DOS low',0Dh,0Ah,'$'
 25449 00000A32 7661696C61626C653A-
 25449 00000A3B 204C6F6164696E6720-
 25449 00000A44 444F53206C6F770D0A-
 25449 00000A4D 24                 
 25450                                  FEmsg:
 25451 00000A4E 466174616C20457272-     	db	'Fatal Error: Cannot allocate Memory for DOS',0Dh,0Ah,'$'
 25451 00000A57 6F723A2043616E6E6F-
 25451 00000A60 7420616C6C6F636174-
 25451 00000A69 65204D656D6F727920-
 25451 00000A72 666F7220444F530D0A-
 25451 00000A7B 24                 
 25452                                  
 25453                                  ; 07/04/2024
 25454                                  %if 0
 25455                                  ; 05/04/2024 - temporary
 25456                                  phex:	
 25457                                  	push	es
 25458                                  	push	ds
 25459                                  	push	bx
 25460                                  	push	cs
 25461                                  	pop	ds
 25462                                  	push	ds
 25463                                  	pop	es
 25464                                  	call	wordtohex
 25465                                  	mov	word [numstr],ax
 25466                                  	push	si
 25467                                  	push	cx
 25468                                  	mov	si,numstr
 25469                                  	mov	bx,0B800h
 25470                                  	mov	ah,4Eh
 25471                                  	mov	es,bx
 25472                                  	xor	bx,bx
 25473                                  	mov	cx,4
 25474                                  phexl:
 25475                                  	lodsb
 25476                                  	mov	[es:bx],ax
 25477                                  	inc	bx
 25478                                  	inc	bx
 25479                                  	loop	phexl
 25480                                  	xor	ah,ah
 25481                                  	int	16h
 25482                                  	sub	bx,6
 25483                                  	mov	ax,0720h
 25484                                  	mov	cl,3
 25485                                  phexl2:
 25486                                  	mov	[es:bx],ax
 25487                                  	inc	bx
 25488                                  	inc	bx
 25489                                  	loop	phexl2
 25490                                  	pop	cx
 25491                                  	pop	si
 25492                                  	pop	bx
 25493                                  	pop	ds
 25494                                  	pop	es
 25495                                  	retn
 25496                                  
 25497                                  bytetohex:
 25498                                  	; INPUT ->
 25499                                  	; 	AL = byte (binary number)
 25500                                  	; OUTPUT ->
 25501                                  	;	AX = hexadecimal string
 25502                                  	;
 25503                                  	;xor	bx, bx
 25504                                  	mov	bl, al
 25505                                  	shr	bl, 4
 25506                                  	mov	bl, [bx+hexchrs]
 25507                                  	xchg	bl, al
 25508                                  	and	bl, 0Fh
 25509                                  	mov	ah, [bx+hexchrs]
 25510                                  	retn
 25511                                  
 25512                                  wordtohex:
 25513                                  	; INPUT ->
 25514                                  	; 	AX = word (binary number)
 25515                                  	; OUTPUT ->
 25516                                  	;	EAX = hexadecimal string
 25517                                  	;
 25518                                  	xor	bx, bx
 25519                                  	xchg	ah, al
 25520                                  	push	ax ; * save ax
 25521                                  	mov	bl, ah
 25522                                  	shr	bl, 4
 25523                                  	mov	al, [bx+hexchrs]
 25524                                  	mov	bl, ah
 25525                                  	and	bl, 0Fh
 25526                                  	mov	ah, [bx+hexchrs]
 25527                                  	mov	[numstr+2], ax
 25528                                  	pop	ax ; * restore ax
 25529                                  	jmp	short bytetohex
 25530                                  
 25531                                  hexchrs:
 25532                                  	db '0123456789ABCDEF'
 25533                                  	db 0
 25534                                  	db 0
 25535                                  numstr: dd 0
 25536                                  	dw 0
 25537                                  
 25538                                  %endif
 25539                                  
 25540                                  ; ----------------------------------------------------------------------
 25541                                  ;
 25542                                  ; procedure : LoadDOSHiOrLo
 25543                                  ;
 25544                                  ;		Tries to move DOS into HMA. If it fails then loads
 25545                                  ;		DOS into Low memory. For ROMDOS, nothing is actually
 25546                                  ;		moved; this just tries to allocate the HMA, and prints
 25547                                  ;		a message if this is not possible.
 25548                                  ;
 25549                                  ; ----------------------------------------------------------------------
 25550                                  
 25551                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25552                                  LoadDOSHiOrLo:
 25553                                  	; 27/03/2019 - Retro DOS v4.0
 25554                                  	; ds = cs
 25555 00000A7C E81F00                  	call	TryToMovDOSHi		; Try moving it into HMA (M024)
 25556                                  	;jc	short LdngLo		; If that don't work...
 25557                                  	;retn
 25558                                  	; 18/12/2022
 25559 00000A7F 731C                    	jnc	short LoadDosHi_ok
 25560                                  LdngLo:
 25561                                  	; 23/10/2022
 25562                                  	;push	cs
 25563                                  	;pop	ds
 25564                                  	; 11/12/2022
 25565                                  	; ds = cs
 25566 00000A81 B409                    	mov	ah,9
 25567 00000A83 BA[290A]                	mov	dx,DOSLOMSG		; inform user that we are
 25568 00000A86 CD21                    	int	21h			; loading low
 25569                                  
 25570                                  ;ifndef ROMDOS
 25571                                  	; actually move the dos, and reinitialize it.
 25572                                  
 25573 00000A88 BB0100                  	mov	bx,1				; M012
 25574                                  						;  use int 21 alloc for mem
 25575 00000A8B E83F00                  	call	MovDOSLo
 25576                                  	; 11/12/2022
 25577                                  	; ds = cs
 25578                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]	; give dos its temporary loc.
 25579                                  	; 23/10/2022
 25580 00000A8E 8E06[7302]              	mov	es,[CURRENT_DOS_LOCATION]
 25581                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]  ; 24/03/2019 - Retro DOS v4.0
 25582                                  	;mov	es,[FINAL_DOS_LOCATION] ; 27/03/2019
 25583 00000A92 31C0                    	xor	ax,ax				; ax = 00 ---> install stub
 25584                                  	; 11/12/2022
 25585                                  	; ds = cs
 25586                                  	;call	far [cs:dos_segreinit]		; call dos segreinit
 25587 00000A94 FF1E[7D02]              	call	far [dos_segreinit] ; 27/03/2019
 25588                                  	
 25589                                  ;endif ; ROMDOS
 25590                                  	; 23/10/2022
 25591                                  	;mov	byte [cs:runhigh],0		; mark that we are running lo
 25592                                  	; 11/12/2022
 25593                                  	; ds = cs
 25594 00000A98 C606[6C02]00            	mov	byte [runhigh],0 ; 27/03/2019
 25595                                  LoadDosHi_ok:	; 18/12/2022
 25596 00000A9D C3                      	retn
 25597                                  
 25598                                  ; ----------------------------------------------------------------------
 25599                                  ;
 25600                                  ; procedure : TryToMovDOSHi
 25601                                  ;
 25602                                  ;		This tries to move DOS into HMA.
 25603                                  ;		Returns CY if it failed.
 25604                                  ;		If it succeeds returns with carry cleared.
 25605                                  ;
 25606                                  ;		For ROMDOS, dos_segreinit must be called again to allow
 25607                                  ;		the A20 switching code in the low mem stub to be installed.
 25608                                  ; 
 25609                                  ; ----------------------------------------------------------------------
 25610                                  
 25611                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25612                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:092Ah)
 25613                                  TryToMovDOSHi:
 25614                                  	; 11/12/2022
 25615                                  	; 27/03/2019 - Retro DOS v4.0
 25616                                  	; ds = cs
 25617 00000A9E E81300                  	call	MovDOSHi
 25618 00000AA1 7210                    	jc	short ttldhx
 25619                                  
 25620                                  ;ifndef ROMDOS
 25621                                  	; 23/10/2022
 25622                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; give dos its temporary loc.
 25623                                  	;;mov	es,[cs:FINAL_DOS_LOCATION] ; 24/03/2019 - Retro DOS v4.0
 25624                                  	; 11/12/2022
 25625                                  	; ds = cs
 25626 00000AA3 8E06[7302]              	mov	es,[CURRENT_DOS_LOCATION]
 25627                                  ;else
 25628                                  ;	..
 25629                                  ;endif ; ROMDOS
 25630                                  
 25631                                  	; 11/12/2022
 25632                                  	; ds = cs
 25633 00000AA7 31C0                    	xor	ax,ax			; ax = 00 ---> install stub
 25634                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 25635 00000AA9 FF1E[7D02]              	call	far [dos_segreinit]
 25636                                  	;mov	byte [cs:runhigh],1
 25637 00000AAD C606[6C02]01            	mov	byte [runhigh],1
 25638 00000AB2 F8                      	clc
 25639                                  ttldhx:
 25640 00000AB3 C3                      	retn
 25641                                  
 25642                                  ; ----------------------------------------------------------------------
 25643                                  ;
 25644                                  ; procedure : MovDOSHi
 25645                                  ;
 25646                                  ;		Tries to allocate HMA and Move DOS/BIOS code into HMA
 25647                                  ;		For ROMDOS, the code is not actually moved, but the
 25648                                  ;		HMA is allocated and prepared for sub-allocation.
 25649                                  ;
 25650                                  ;		Returns : CY if it failed
 25651                                  ;
 25652                                  ; ----------------------------------------------------------------------
 25653                                  
 25654                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25655                                  MovDOSHi:
 25656                                  	; 14/05/2019
 25657                                  	; 27/03/2019 - Retro DOS v4.0
 25658                                  	; ds = cs
 25659 00000AB4 E8D600                  	call	AllocHMA
 25660 00000AB7 7213                    	jc	short mdhx			; did we get HMA?
 25661 00000AB9 B8FFFF                  	mov	ax,0FFFFh			; yes, HMA seg = 0ffffh
 25662 00000ABC 8EC0                    	mov	es,ax
 25663                                  
 25664                                  ;ifndef ROMDOS
 25665                                  	; actually move the BIOS and DOS
 25666                                  
 25667                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 25668                                  	; 24/03/2019
 25669                                  	
 25670                                  	; 23/10/2022
 25671 00000ABE E83200                  	call	MovBIOS				; First move BIOS into HMA
 25672                                  
 25673                                  	; ES:DI points to free HMA after BIOS
 25674                                  	
 25675                                  	; 14/05/2019
 25676                                  	; 24/03/2019 - Retro DOS v4.0
 25677                                  	;xor	di,di
 25678                                  	
 25679                                  	; 23/10/2022
 25680                                  	;mov	cx,[cs:hi_doscod_size]		; pass the code size of DOS
 25681                                  	; 11/12/2022
 25682                                  	; ds = cs
 25683 00000AC1 8B0E[8302]              	mov	cx,[hi_doscod_size]		; when it is in HMA
 25684 00000AC5 E81100                  	call	MovDOS				; and move it
 25685                                  
 25686                                  	; ES:DI points to free HMA after DOS
 25687                                  ;else
 25688                                  ;	; allocate space at beginning of HMA to allow for CPMHack
 25689                                  ;
 25690                                  ;	mov	di,0E0h				; room for 5 bytes at ffff:d0
 25691                                  ;
 25692                                  ;endif ; ROMDOS
 25693                                  
 25694 00000AC8 E87602                  	call	SaveFreeHMAPtr			; Save the Free HMA ptr
 25695 00000ACB F8                      	clc
 25696                                  mdhx:
 25697 00000ACC C3                      	retn
 25698                                  
 25699                                  ; ----------------------------------------------------------------------
 25700                                  ;
 25701                                  ; procedure : MovDOSLo
 25702                                  ;
 25703                                  ;		Allocates memory from DOS and moves BIOS/DOS code into it
 25704                                  ;
 25705                                  ; ----------------------------------------------------------------------
 25706                                  
 25707                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25708                                  
 25709                                  ;ifndef ROMDOS
 25710                                  
 25711                                  MovDOSLo:
 25712                                  	; 14/05/2019
 25713                                  	; 27/03/2019 - Retro DOS v4.0
 25714                                  	; ds = cs
 25715 00000ACD E84500                  	call	AllocMemForDOS			; incestuosly!!!
 25716                                  	
 25717                                  	; 23/10/2022
 25718                                  	; 14/05/2019
 25719                                  	;inc	ax  ; skip MCB
 25720                                  	
 25721 00000AD0 8EC0                    	mov	es,ax				; pass the segment to MovBIOS
 25722                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 25723                                  	; 24/03/2019
 25724                                  	
 25725                                  	; 23/10/2022
 25726 00000AD2 E81E00                  	call	MovBIOS
 25727                                  
 25728                                  ;------ ES:DI points memory immediately after BIOS
 25729                                  
 25730                                  	; 14/05/2019
 25731                                  	; NOTE: 
 25732                                  	;     Order of (RETRO) DOS kernel sections at memory:
 25733                                  	;	BIOSDATA+BIOSCODE+BIOSDATAINIT+DOSDATA+DOSCODE(LOW)
 25734                                  
 25735                                  	; 24/03/2019 - Retro DOS v4.0
 25736                                  	;xor	di,di	
 25737                                  
 25738                                  	; 23/10/2022
 25739                                  	;mov	cx,[cs:lo_doscod_size]		; DOS code size when loaded
 25740                                  	; 11/12/2022
 25741                                  	; ds = cs
 25742 00000AD5 8B0E[8102]              	mov	cx,[lo_doscod_size]		; low
 25743                                  	;call	MovDOS
 25744                                  	;retn
 25745                                  	; 11/12/2022
 25746                                  	;jmp	short MovDOS
 25747                                  
 25748                                  ;endif ; ROMDOS
 25749                                  
 25750                                  ; 11/12/2022
 25751                                  
 25752                                  ; ----------------------------------------------------------------------
 25753                                  ;
 25754                                  ; procedure : MovDOS
 25755                                  ;
 25756                                  ;		Moves DOS code into requested area
 25757                                  ;
 25758                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 25759                                  ;	     CX    - size of DOS code to be moved
 25760                                  ;
 25761                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 25762                                  ;
 25763                                  ; ----------------------------------------------------------------------
 25764                                  
 25765                                  	; 11/12/2022
 25766                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25767                                  
 25768                                  ;ifndef ROMDOS
 25769                                  
 25770                                  MovDOS:
 25771                                  	; 14/05/2019
 25772                                  	; 27/03/2019 - Retro DOS v4.0
 25773                                  
 25774                                  	; 11/12/2022
 25775                                  	; ds = cs
 25776                                  
 25777                                  	; 23/10/2022
 25778                                  	;push	ds ; *//
 25779                                  	
 25780 00000AD9 06                      	push	es
 25781 00000ADA 57                      	push	di
 25782                                  
 25783                                  	; 11/12/2022
 25784 00000ADB 1E                      	push	ds ; *// ; 11/12/202
 25785                                  
 25786                                  	; 29/04/2019
 25787 00000ADC C536[7102]              	lds	si,[dosinit] ; 11/12/2022
 25788                                  	; 23/10/2022
 25789                                  	;lds	si,[cs:dosinit]
 25790                                  	; 03/09/2023
 25791 00000AE0 89F0                    	mov	ax,si
 25792                                  
 25793 00000AE2 F3A4                    	rep	movsb
 25794                                  
 25795 00000AE4 1F                      	pop	ds ; *// ; 11/12/2022
 25796                                  
 25797 00000AE5 5B                      	pop	bx				; get back offset into which
 25798                                  						;  DOS was moved
 25799                                  	; 03/09/2023
 25800                                  	;;mov	ax,[cs:dosinit]			; get the offset at which DOS
 25801                                  						;  wants to run
 25802                                  	; 03/09/2023
 25803                                  	;mov	ax,[dosinit]
 25804                                  	; ax = [dosinit]
 25805                                  
 25806 00000AE6 29D8                    	sub	ax,bx
 25807 00000AE8 E8B502                  	call	off_to_para
 25808 00000AEB 5B                      	pop	bx				; get the segment at which
 25809                                  						;  we moved DOS into
 25810 00000AEC 29C3                    	sub	bx,ax				; Adjust segment
 25811                                  	
 25812                                  	; 11/12/2022
 25813                                  	; 23/10/2022
 25814                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 25815                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 25816                                  	; 11/12/2022
 25817 00000AEE 891E[7302]              	mov	[CURRENT_DOS_LOCATION],bx
 25818                                  		
 25819                                  	; 27/03/2019
 25820                                  	;pop	ds ; *//
 25821                                  	; ds = cs
 25822                                  	;mov	[FINAL_DOS_LOCATION],bx
 25823                                  
 25824 00000AF2 C3                      	retn
 25825                                  
 25826                                  ;endif ;ROMDOS
 25827                                  
 25828                                  ; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 25829                                  ; 24/03/2019
 25830                                  ; ----------------------------------------------------------------------
 25831                                  ;
 25832                                  ; procedure : MovBIOS
 25833                                  ;
 25834                                  ;		Moves BIOS code into requested segment
 25835                                  ;
 25836                                  ;	In : ES - segment to which BIOS is to be moved
 25837                                  ;		  ( it moves always into offset BCode_Start)
 25838                                  ;
 25839                                  ;	Out : ES:DI - pointer to memory immediately after BIOS
 25840                                  ;
 25841                                  ; ----------------------------------------------------------------------
 25842                                  
 25843                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25844                                  	; 08/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 25845                                  
 25846                                  ;ifndef ROMDOS
 25847                                  
 25848                                  MovBIOS: ; proc	near
 25849                                  	; 11/12/2022
 25850 00000AF3 1E                      	push	ds ; ds = cs	
 25851                                  	;
 25852                                  	; 23/10/2022
 25853                                  	;mov	ds,[cs:temp_bcode_seg]		; current BIOS code seg
 25854                                  	; 17/09/2023 ; 08/04/2024
 25855 00000AF4 8E1E[8902]              	mov	ds,[temp_bcode_seg]
 25856                                  	;mov	si,BCODE_START ; mov si,30h
 25857                                  	; 09/12/2022
 25858 00000AF8 BE[3000]                	mov	si,BCODESTART ; 30h
 25859 00000AFB 89F7                    	mov	di,si
 25860                                  	;mov	cx,1E00h ; PCDOS 7.1 IBMBIO.COM ; 08/04/2024
 25861 00000AFD B9701D                  	mov	cx,BCODE_END ; mov cx,1A60h
 25862 00000B00 29F1                    	sub	cx,si				; size of BIOS
 25863 00000B02 D1E9                    	shr	cx,1				; Both the labels are para
 25864                                  						;  aligned
 25865 00000B04 F3A5                    	rep	movsw
 25866                                  	
 25867                                  	; 11/12/2022
 25868 00000B06 1F                      	pop	ds ; ds = cs
 25869                                  	;
 25870 00000B07 06                      	push	es
 25871 00000B08 57                      	push	di				; save end of BIOS
 25872 00000B09 8CC0                    	mov	ax,es
 25873                                  	;
 25874                                  	; 11/12/2022
 25875                                  	;mov	[cs:BCodeSeg],ax		; save it for later use
 25876                                  	;;call	dword ptr cs:_seg_reinit_ptr
 25877                                  	;call	far [cs:seg_reinit_ptr]		; far call to seg_reinit (M022)
 25878                                  	; ds = cs
 25879 00000B0B A3[8A03]                	mov	[BCodeSeg],ax
 25880 00000B0E FF1E[8702]              	call	far [seg_reinit_ptr]
 25881                                  	;
 25882 00000B12 5F                      	pop	di
 25883 00000B13 07                      	pop	es				; get back end of BIOS
 25884 00000B14 C3                      	retn
 25885                                  
 25886                                  ;MovBIOS endp
 25887                                  
 25888                                  ;endif ; ROMDOS
 25889                                  
 25890                                  ; 11/12/2022
 25891                                  %if 0
 25892                                  
 25893                                  ; 24/03/2019
 25894                                  
 25895                                  ; ----------------------------------------------------------------------
 25896                                  ;
 25897                                  ; procedure : MovDOS
 25898                                  ;
 25899                                  ;		Moves DOS code into requested area
 25900                                  ;
 25901                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 25902                                  ;	     CX    - size of DOS code to be moved
 25903                                  ;
 25904                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 25905                                  ;
 25906                                  ; ----------------------------------------------------------------------
 25907                                  
 25908                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25909                                  
 25910                                  ;ifndef ROMDOS
 25911                                  
 25912                                  MovDOS:
 25913                                  	; 14/05/2019
 25914                                  	; 27/03/2019 - Retro DOS v4.0
 25915                                  
 25916                                  	; 11/12/2022
 25917                                  	; ds = cs
 25918                                  
 25919                                  	; 23/10/2022
 25920                                  	;push	ds ; *//
 25921                                  	
 25922                                  	push	es
 25923                                  	push	di
 25924                                  
 25925                                  	; 11/12/2022
 25926                                  	push	ds ; *// ; 11/12/202
 25927                                  
 25928                                  	; 29/04/2019
 25929                                  	lds	si,[dosinit] ; 11/12/2022
 25930                                  	; 23/10/2022
 25931                                  	;lds	si,[cs:dosinit]
 25932                                  	; 03/09/2023
 25933                                  	mov	ax,si
 25934                                  
 25935                                  	rep	movsb
 25936                                  
 25937                                  	pop	ds ; *// ; 11/12/2022
 25938                                  
 25939                                  	pop	bx				; get back offset into which
 25940                                  						;  DOS was moved
 25941                                  	;mov	ax,[dosinit] ; 03/09/2023
 25942                                  	;;mov	ax,[cs:dosinit]			; get the offset at which DOS
 25943                                  						;  wants to run
 25944                                  	sub	ax,bx
 25945                                  	call	off_to_para
 25946                                  	pop	bx				; get the segment at which
 25947                                  						;  we moved DOS into
 25948                                  	sub	bx,ax				; Adjust segment
 25949                                  	
 25950                                  	; 11/12/2022
 25951                                  	; 23/10/2022
 25952                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 25953                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 25954                                  	; 11/12/2022
 25955                                  	mov	[CURRENT_DOS_LOCATION],bx
 25956                                  		
 25957                                  	; 27/03/2019
 25958                                  	;pop	ds ; *//
 25959                                  	; ds = cs
 25960                                  	;mov	[FINAL_DOS_LOCATION],bx
 25961                                  
 25962                                  	retn
 25963                                  
 25964                                  ;endif ;ROMDOS
 25965                                  
 25966                                  %endif
 25967                                  
 25968                                  ; ----------------------------------------------------------------------
 25969                                  ;
 25970                                  ; procedure : AllocMemForDOS
 25971                                  ;
 25972                                  ;		Allocate memory for DOS/BIOS code from DOS !!!
 25973                                  ;
 25974                                  ;	Out : AX - seg of allocated memoryblock
 25975                                  ;
 25976                                  ; ----------------------------------------------------------------------
 25977                                  
 25978                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25979                                  	; 08/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 25980                                  
 25981                                  ;ifndef ROMDOS
 25982                                  
 25983                                  AllocMemForDOS:
 25984                                  	; 11/12/2022
 25985                                  	; 14/05/2019
 25986                                  	; 27/03/2019 - Retro DOS v4.0
 25987                                  	; ds = cs
 25988                                  	;mov	ax,BCode_end
 25989                                  	;sub	ax,BCode_start		; BIOS code size
 25990                                  	; 23/10/2022
 25991 00000B15 B8701D                  	mov	ax,BCODE_END ; 1A60h	; 1A70h for MSDOS 6.21
 25992                                  					; 30/12/2022
 25993                                  	;mov	ax,1E00h ; PCDOS 7.1 IBMBIO.COM ; 08/04/2024
 25994                                  	;sub	ax,BCODE_START ; 30h
 25995                                  	; 09/12/2022
 25996 00000B18 2D[3000]                	sub	ax,BCODESTART ; sub ax,30h ; 08/04/2024
 25997                                  	; 24/03/2019 - Retro DOS v4.0 
 25998                                  	; 02/11/2022
 25999                                  	;add	ax,[cs:lo_doscod_size]	; DOS code size
 26000                                  	; 11/12/2022
 26001                                  	; ds = cs
 26002 00000B1B 0306[8102]              	add	ax,[lo_doscod_size]
 26003 00000B1F 83C00F                  	add	ax,15
 26004 00000B22 E87B02                  	call	off_to_para			; convert to para
 26005                                  	; 23/10/2022
 26006                                  	; 14/05/2019
 26007                                  	;inc	ax ; + 1 paragraph for MCB
 26008 00000B25 09DB                    	or	bx,bx				; M012
 26009 00000B27 89C3                    	mov	bx,ax				;  can we use int 21 for alloc
 26010 00000B29 741A                    	jz	short update_arena		; M012
 26011 00000B2B B448                    	mov	ah,48h				; request DOS
 26012 00000B2D CD21                    	int	21h
 26013 00000B2F 7250                    	jc	short FatalErr			; IF ERR WE ARE HOSED
 26014                                   	; 23/10/2022
 26015                                  	; 24/03/2019 - Retro DOS v4.0 (ORG 0)
 26016 00000B31 83E803                  	sub	ax,3				; Take care ORG 30h of
 26017                                  						;  BIOS code
 26018 00000B34 8EC0                    	mov	es,ax
 26019                                  	;mov	word [es:20h+ARENA.OWNER],08h	; mark it as system
 26020                                  	;mov	word [es:20h+ARENA.NAME],'SC'	;  code area
 26021                                  	; 14/05/2019
 26022                                  	;mov	word [es:ARENA.OWNER],08h	; mark it as system
 26023                                  	;mov	word [es:ARENA.NAME],'SC'	;  code area
 26024                                  	; 08/04/2024 (PCDOS 7.1 IBMBIO.COM)
 26025                                  	; 23/10/2022
 26026 00000B36 26C70621000800          	mov	word [es:20h+1],08h		; mark it as system
 26027 00000B3D 26C70628005343          	mov	word [es:20h+8],'SC' ; 4353h	;  code area
 26028                                  
 26029 00000B44 C3                      	retn
 26030                                  
 26031                                  ; BUGBUG -- 5 Aug 92 -- chuckst -- Allocating space for DOS
 26032                                  ;	  using DOS itself causes an arena to be generated.
 26033                                  ;	  Unfortunately, certain programs (like PROTMAN$)
 26034                                  ;	  assume that the device drivers are loaded into
 26035                                  ;	  the first arena. For this reason, MagicDrv's
 26036                                  ;	  main device driver header arena is manually
 26037                                  ;	  truncated from the arena chain, and the space
 26038                                  ;	  for DOS is allocated using the following
 26039                                  ;	  simple code, which also assumes that the
 26040                                  ;	  first arena is the free one where DOS's low
 26041                                  ;	  stub will go.
 26042                                  ;
 26043                                  ; M012 : BEGIN
 26044                                  
 26045                                  	; 23/10/2022
 26046                                  update_arena:
 26047 00000B45 1E                      	push	ds ; ds = cs
 26048 00000B46 57                      	push	di
 26049 00000B47 51                      	push	cx
 26050 00000B48 52                      	push	dx
 26051                                  	; 23/10/2022
 26052                                  	;lds	di,[cs:DOSINFO]			; get ptr to DOS var
 26053                                  	; 11/12/2022
 26054                                  	; ds = cs 
 26055 00000B49 C53E[6D02]              	lds	di,[DOSINFO] ; 27/03/2019	
 26056 00000B4D 4F                      	dec	di
 26057 00000B4E 4F                      	dec	di				; Arena head is immediately
 26058                                  						;  before sysvar
 26059 00000B4F 8E05                    	mov	es,[di]				; es = arena head
 26060                                  	;mov	cx,[es:ARENA.SIZE]		; cx = total low mem size
 26061 00000B51 268B0E0300              	mov	cx,[es:3]
 26062 00000B56 39D9                    	cmp	cx,bx				; is it sufficient ?
 26063 00000B58 7227                    	jb	short FatalErr			; no, fatal error
 26064                                  
 26065                                  	;mov	dl,[es:ARENA.SIGNATURE]
 26066 00000B5A 268A160000              	mov	dl,[es:0]
 26067 00000B5F 8CC0                    	mov	ax,es
 26068 00000B61 01D8                    	add	ax,bx				; ax = new arena head
 26069 00000B63 8905                    	mov	[di],ax				; store it in DOS data area
 26070 00000B65 8ED8                    	mov	ds,ax
 26071                                  	;mov	[ARENA.SIGNATURE],dl		; type of arena
 26072 00000B67 88160000                	mov	[0],dl
 26073                                  	;mov	word [ARENA.OWNER],0		; free
 26074 00000B6B C70601000000            	mov	word [1],0
 26075 00000B71 29D9                    	sub	cx,bx				; size of the new block
 26076                                  	;mov	[ARENA.SIZE],cx			; store it in the arena
 26077 00000B73 890E0300                	mov	[3],cx
 26078 00000B77 8CC0                    	mov	ax,es				; return seg to the caller
 26079                                  	; 23/10/2022
 26080                                  	;; 24/03/2019 - Retro DOS v4.0 (ORG 0)	; Take care ORG 30h of
 26081 00000B79 83E803                  	sub	ax,3				;  BIOS code
 26082 00000B7C 5A                      	pop	dx
 26083 00000B7D 59                      	pop	cx
 26084 00000B7E 5F                      	pop	di
 26085 00000B7F 1F                      	pop	ds ; ds = cs
 26086 00000B80 C3                      	retn
 26087                                  ;
 26088                                  ; M012 : END
 26089                                  ;
 26090                                  FatalErr:
 26091 00000B81 0E                      	push	cs
 26092 00000B82 1F                      	pop	ds
 26093 00000B83 BA[4E0A]                	mov	dx,FEmsg
 26094 00000B86 B409                    	mov	ah,9
 26095 00000B88 CD21                    	int	21h 		; DOS - PRINT STRING
 26096                                  				; DS:DX -> string terminated by "$"
 26097                                  	; 30/12/2022 (MSDOS 6.21 SYSINIT)
 26098 00000B8A E94307                  	jmp	stall
 26099                                  	; 23/10/2022 (MSDOS 5.0 SYSINIT)
 26100                                  	;cli
 26101                                  	;hlt
 26102                                  
 26103                                  ;endif ;ROMDOS
 26104                                  
 26105                                  ; 25/03/2019 - Retro DOS v4.0
 26106                                  
 26107                                  ; ----------------------------------------------------------------------
 26108                                  ;
 26109                                  ; procedure : AllocHMA
 26110                                  ;
 26111                                  ;	grab_the_hma tries to enable a20 and make sure there is memory
 26112                                  ;	  up there. If it gets any sort of error, it will return with
 26113                                  ;	  carry set so that we can resort to running low.
 26114                                  ;
 26115                                  ;	It also returns ES: -> 0ffffh if it returns success
 26116                                  ;
 26117                                  ; ----------------------------------------------------------------------
 26118                                  
 26119                                  AllocHMA:
 26120                                  ;	cas note:  The pre-286 check is no longer needed here since the
 26121                                  ;		   presence of XMS is sufficient. However, this code hasn't
 26122                                  ;		   been deleted because it can be recycled for skipping the
 26123                                  ;		   extra pass of CONFIG.SYS and assuming we're running low
 26124                                  ;		   in the case of a pre-286.
 26125                                  
 26126                                  ;;	see if we're running on a pre-286. If not, force low.
 26127                                  ;
 26128                                  ;	xor	ax,ax
 26129                                  ;	pushf			; save flags (like int)
 26130                                  ;	push	ax
 26131                                  ;	popf
 26132                                  ;	pushf
 26133                                  ;	pop	ax
 26134                                  ;	popf			; restore original flags (like int)
 26135                                  ;	and	ax,0F000h
 26136                                  ;	cmp	ax,0F000h	; 8088/8086?
 26137                                  ;	jz	short grab_hma_error
 26138                                  
 26139                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26140                                  	; (SYSINIT:0A26h)
 26141                                  
 26142 00000B8D 1E                      	push	ds
 26143                                  	;;mov	ax,Bios_Data
 26144                                  	;mov	ax,KERNEL_SEGMENT
 26145                                  	; 21/10/2022
 26146 00000B8E B87000                  	mov	ax,DOSBIODATASEG ; 70h
 26147 00000B91 8ED8                    	mov	ds,ax
 26148                                  
 26149 00000B93 E84A00                  	call	IsXMSLoaded
 26150 00000B96 7545                    	jnz	short grabhma_error
 26151                                  
 26152 00000B98 B81043                  	mov	ax,4310h
 26153 00000B9B CD2F                    	int	2Fh		; get the vector into es:bx
 26154                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 26155                                  		; Return: ES:BX -> driver entry point
 26156                                  
 26157 00000B9D 891E[0E00]              	mov	[xms],bx
 26158                                  	;mov	[0Eh], bx
 26159 00000BA1 8C06[1000]              	mov	[xms+2],es
 26160                                  	;mov	[10h],es
 26161                                  
 26162 00000BA5 B401                    	mov	ah,1		; request HMA
 26163 00000BA7 BAFFFF                  	mov	dx,0FFFFh
 26164                                  	;call	dword ptr ds:0Eh
 26165 00000BAA FF1E[0E00]              	call	far [xms]
 26166 00000BAE 48                      	dec	ax
 26167 00000BAF 7409                    	jz	short allocHMA_1 ; error if not able to allocate HMA
 26168                                  
 26169                                  ;------ Himem may be lying because it has allocated mem for int 15
 26170                                  
 26171 00000BB1 B488                    	mov	ah,88h
 26172 00000BB3 CD15                    	int	15h
 26173                                  		; Get Extended Memory Size
 26174                                  		; Return: CF clear on success
 26175                                  		; AX = size of memory above 1M in K
 26176 00000BB5 83F840                  	cmp	ax,64		; less than 64 K of hma ?
 26177                                  	;jb	short grabhma_error
 26178                                  	; 11/12/2022
 26179 00000BB8 7224                    	jb	short grabhma_err ; cf=1
 26180                                  allocHMA_1:
 26181 00000BBA B405                    	mov	ah,5		; localenableA20
 26182                                  	;call	dword ptr ds:0Eh
 26183 00000BBC FF1E[0E00]              	call	far [xms]
 26184 00000BC0 48                      	dec	ax
 26185 00000BC1 751A                    	jnz	short grabhma_error ; error if couldn't enable A20
 26186                                  
 26187 00000BC3 E89D01                  	call	IsVDiskInstalled
 26188 00000BC6 7415                    	jz	short grabhma_error ; yes, we cant use HMA
 26189                                  
 26190 00000BC8 B8FFFF                  	mov	ax,0FFFFh
 26191 00000BCB 8EC0                    	mov	es,ax
 26192 00000BCD 26C70610003412          	mov	word [es:10h],1234h ; see if we can really read/write there
 26193 00000BD4 26813E10003412          	cmp	word [es:10h],1234h
 26194                                  	;jne	short grabhma_error ; don't try to load there if XMS lied
 26195                                  	; 11/12/2022
 26196 00000BDB 7401                    	je	short allocHMA_ok	
 26197                                  
 26198                                  ; 11/12/2022
 26199                                  ;	; 11/12/2022
 26200                                  ;	; cf=0
 26201                                  ;	;clc
 26202                                  ;	pop	ds
 26203                                  ;	retn
 26204                                  
 26205                                  grabhma_error:
 26206 00000BDD F9                      	stc
 26207                                  	; 11/12/022
 26208                                  grabhma_err:	; cf=1
 26209                                  allocHMA_ok:	; cf=0
 26210 00000BDE 1F                      	pop	ds
 26211 00000BDF C3                      	retn
 26212                                  
 26213                                  ; ----------------------------------------------------------------------
 26214                                  ;
 26215                                  ; procedure : IsXMSLoaded
 26216                                  ;
 26217                                  ;             Checks whether a XMS driver is loaded
 26218                                  ;
 26219                                  ; Returns : Z flag set if XMS driver loaded
 26220                                  ;           Z flag reset if no XMS drivers are present
 26221                                  ;
 26222                                  ; ----------------------------------------------------------------------
 26223                                  
 26224                                  IsXMSLoaded:
 26225 00000BE0 B80043                  	mov	ax,4300h
 26226 00000BE3 CD2F                    	int	2Fh		; - Multiplex - XMS - INSTALLATION CHECK
 26227                                  				; Return: AL = 80h XMS driver installed
 26228                                  				; AL <> 80h no driver
 26229 00000BE5 3C80                    	cmp	al,80h		; XMS installed?
 26230 00000BE7 C3                      	retn
 26231                                  
 26232                                  ; ----------------------------------------------------------------------
 26233                                  ; procedure : FTryToMovDOSHi
 26234                                  ;
 26235                                  ;		Called from HMA suballoc calls
 26236                                  ;	
 26237                                  ; ----------------------------------------------------------------------
 26238                                  
 26239                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26240                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:0A84h)
 26241                                  
 26242                                  	; 08/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 26243                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:0C9Fh)
 26244                                  
 26245                                  	; ((MSDOS 6.22 IO.SYS - SYSINIT:0B8Ch))
 26246                                  
 26247                                  FTryToMovDOSHi:	; proc	far
 26248                                  
 26249 00000BE8 50                      	push	ax
 26250 00000BE9 53                      	push	bx
 26251 00000BEA 51                      	push	cx
 26252 00000BEB 52                      	push	dx
 26253 00000BEC 56                      	push	si
 26254 00000BED 57                      	push	di
 26255 00000BEE 1E                      	push	ds
 26256 00000BEF 06                      	push	es
 26257                                  
 26258                                  	; 23/10/2022
 26259                                  	; 27/03/2019 - Retro DOS v4.0
 26260                                  	; 11/12/2022
 26261 00000BF0 0E                      	push	cs
 26262 00000BF1 1F                      	pop	ds
 26263                                  
 26264                                  	;cmp	byte [cs:runhigh],0FFh
 26265                                  	; 11/12/2022
 26266 00000BF2 803E[6C02]FF            	cmp	byte [runhigh],0FFh
 26267 00000BF7 7503                    	jne	short _ftymdh_1
 26268                                  
 26269                                  	; ds = cs
 26270 00000BF9 E8A2FE                  	call	TryToMovDOSHi
 26271                                  _ftymdh_1:
 26272 00000BFC 07                      	pop	es
 26273 00000BFD 1F                      	pop	ds
 26274 00000BFE 5F                      	pop	di
 26275 00000BFF 5E                      	pop	si
 26276 00000C00 5A                      	pop	dx
 26277 00000C01 59                      	pop	cx
 26278 00000C02 5B                      	pop	bx
 26279 00000C03 58                      	pop	ax
 26280                                  
 26281 00000C04 CB                      	retf
 26282                                  
 26283                                  ; ----------------------------------------------------------------------
 26284                                  ;
 26285                                  ; following piece of code will be moved into a para boundary. And the para
 26286                                  ; address posted in seg of int 19h vector. Offset of int 19h will point to
 26287                                  ; VDint19. This is to protect HMA from apps which use VDISK header method
 26288                                  ; to determine free extended memory.
 26289                                  ;
 26290                                  ; For more details read "power programming" column by Ray Duncan in the
 26291                                  ; May 30 1989 issue of PC Magazine (pp 377-388) [USING EXTENDED MEMORY,PART 1]
 26292                                  ;
 26293                                  ; ----------------------------------------------------------------------
 26294                                  
 26295                                  	; 30/12/2023 - Retro DOS 5.0
 26296 00000C05 00                      	db	0
 26297                                  
 26298                                  	; 30/12/2023
 26299                                  	; PCDOS v7.1 IBMBIO.COM, SYSYINIT:0CBCh
 26300                                  
 26301                                  StartVDHead:
 26302                                  ;-------------- what follows is a dummy device driver header (not used by DOS)
 26303                                  
 26304 00000C06 00000000                	dd	0		; link to next device driver
 26305 00000C0A 0080                    	dw	8000h		; device attribute
 26306 00000C0C 0000                    	dw	0		; strategy routine offset
 26307 00000C0E 0000                    	dw	0		; interrupt routine offset
 26308 00000C10 01                      	db	1		; number of units
 26309                                  	;db	7 dup(0) 
 26310 00000C11 00<rep 7h>              	times	7 db 0 		; reserved area
 26311                                  VDiskSig1:
 26312 00000C18 564449534B              	db	'VDISK'
 26313                                  
 26314                                  VLEN1	equ	($-VDiskSig1)
 26315                                  
 26316 00000C1D 202056332E33            	db	'  V3.3'	; vdisk label
 26317                                  	;db	15 dup (0)	; pad
 26318 00000C23 00<rep Fh>              	times	15 db 0
 26319 00000C32 0000                    	dw	0		; bits 0-15 of free HMA
 26320 00000C34 11                      	db	11h		; bits 16-23 of free HMA (1M + 64K)
 26321                                  VDInt19:
 26322 00000C35 EA                      	db	0EAh		; jmp to old vector
 26323                                  OldVDInt19:
 26324 00000C36 00000000                	dd	0		; Saved int 19 vector
 26325                                  
 26326                                  EndVDHead: ; label byte
 26327                                  
 26328                                  VDiskHMAHead:	
 26329 00000C3A 000000                  	db	0,0,0		; non-bootable disk
 26330                                  VDiskSig2:
 26331 00000C3D 564449534B              	db	'VDISK'
 26332                                  
 26333                                  VLEN2	equ	($-VDiskSig2)
 26334                                  
 26335 00000C42 332E33                  	db	'3.3'		; OEM - signature
 26336 00000C45 8000                    	dw	128		; number of bytes/sector
 26337 00000C47 01                      	db	1		; sectors/cluster
 26338 00000C48 0100                    	dw	1		; reserved sectors
 26339 00000C4A 01                      	db	1		; number of FAT copies
 26340 00000C4B 4000                    	dw	64		; number of root dir entries
 26341 00000C4D 0002                    	dw	512		; number of sectors
 26342 00000C4F FE                      	db	0FEh		; media descriptor
 26343 00000C50 0600                    	dw	6		; number of sectors/FAT
 26344 00000C52 0800                    	dw	8		; sectors per track
 26345 00000C54 0100                    	dw	1		; number of heads
 26346 00000C56 0000                    	dw	0		; number of hidden sectors
 26347 00000C58 4004                    	dw	440h		; Start of free HMA in K (1M+64K)
 26348                                  
 26349                                  EndVDiskHMAHead: ; label byte
 26350                                  
 26351                                  ; ----------------------------------------------------------------------
 26352                                  ;
 26353                                  ; procedure : InstVDiskHeader
 26354                                  ;
 26355                                  ;             Installs the VDISK header to reserve the 64k of HMA
 26356                                  ;	      It puts a 32 byte header at 10000:0 and
 26357                                  ;	      another header at (seg of int19):0
 26358                                  ;
 26359                                  ; Inputs : None
 26360                                  ;
 26361                                  ; Outputs : None
 26362                                  ;
 26363                                  ; USES : DS,SI,AX,CX,DX
 26364                                  ;
 26365                                  ; ----------------------------------------------------------------------
 26366                                  
 26367                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26368                                  
 26369                                  InstVDiskHeader:
 26370 00000C5A 31C0                    	xor	ax,ax
 26371 00000C5C 8ED8                    	mov	ds,ax			; seg of int vect table
 26372                                  
 26373                                  ;-------------- save old int 19 vector
 26374                                  
 26375                                  	; 23/10/2022
 26376 00000C5E A16400                  	mov	ax,[19h*4]
 26377                                  	;mov	[OldVDInt19],ax
 26378 00000C61 2EA3[360C]              	mov	[cs:OldVDInt19],ax
 26379 00000C65 A16600                  	mov	ax,[19h*4+2]
 26380                                  	;mov	[OldVDInt19+2],ax
 26381 00000C68 2EA3[380C]              	mov	[cs:OldVDInt19+2],ax
 26382                                  
 26383                                  ;-------------- calculate seg of new int 19 handler
 26384                                  
 26385 00000C6C B448                    	mov	ah,48h			; allocate memory
 26386                                  	;mov	bx,(EndVDHead-StartVDHead+15)>>4
 26387                                  	; 23/10/2022
 26388 00000C6E BB0400                  	mov	bx,4
 26389 00000C71 CD21                    	int	21h
 26390                                  
 26391                                  ;	if carry, fatal hanging error!!!!!
 26392                                  
 26393 00000C73 48                      	dec	ax			; point to arena
 26394 00000C74 8EC0                    	mov	es,ax
 26395                                  	;mov	word [es:ARENA.OWNER],8	; owner = System
 26396 00000C76 26C70601000800          	mov	word [es:1],8
 26397                                  	;mov	word [es:ARENA.NAME],'SC' ; System Code
 26398 00000C7D 26C70608005343          	mov	word [es:8],'SC' ; 4353h
 26399 00000C84 40                      	inc	ax
 26400 00000C85 8EC0                    	mov	es,ax			; get back to allocated memory
 26401                                  
 26402                                  ;-------------- install new int 19 vector
 26403                                  
 26404 00000C87 FA                      	cli				; no reboots at this time
 26405                                  	;mov	word [19h*4],(VDInt19-StartVDHead)
 26406 00000C88 C70664002F00            	mov	word [19h*4],47
 26407 00000C8E A36600                  	mov	[19h*4+2],ax
 26408                                  
 26409                                  ;-------------- move the code into proper place
 26410                                  
 26411                                  	;mov	cx,(EndVDHead-StartVDHead)
 26412 00000C91 B93400                  	mov	cx,52
 26413 00000C94 BE[060C]                	mov	si,StartVDHead
 26414 00000C97 31FF                    	xor	di,di
 26415 00000C99 0E                      	push	cs
 26416 00000C9A 1F                      	pop	ds
 26417 00000C9B FC                      	cld
 26418 00000C9C F3A4                    	rep	movsb
 26419 00000C9E FB                      	sti				; BUGBUG is sti OK now?
 26420                                  
 26421                                  ;-------------- mov the HMA VDisk head into HMA
 26422                                  
 26423                                  	; 23/10/2022
 26424 00000C9F 57                      	push	di
 26425 00000CA0 06                      	push	es
 26426                                  
 26427                                  	;mov	ax,0FFFFh
 26428                                  	;mov	es,ax
 26429                                  	; 03/09/2023
 26430 00000CA1 49                      	dec	cx
 26431                                  	; cx = 0FFFFh
 26432 00000CA2 8EC1                    	mov	es,cx
 26433                                  
 26434 00000CA4 BF1000                  	mov	di,10h
 26435                                  	;mov	cx,(EndVDiskHMAHead-VDiskHMAHead)
 26436 00000CA7 B92000                  	mov	cx,32
 26437 00000CAA BE[3A0C]                	mov	si,VDiskHMAHead
 26438 00000CAD F3A4                    	rep	movsb			; ds already set to cs
 26439                                  
 26440 00000CAF 5F                      	pop	di
 26441 00000CB0 07                      	pop	es
 26442                                  
 26443 00000CB1 C3                      	retn
 26444                                  
 26445                                  ; ----------------------------------------------------------------------
 26446                                  ; procedure : ClrVDISKHeader
 26447                                  ;
 26448                                  ;		Clears the first 32 bytes at 1MB boundary
 26449                                  ;		So that DOS/HIMEM is not confused about the VDISK header
 26450                                  ;		left by previous DOS=HIGH session
 26451                                  ;
 26452                                  ; ----------------------------------------------------------------------
 26453                                  
 26454                                  struc desc
 26455 00000000 ????                     .seg_lim:	resw	1		; seg limit 64K 
 26456 00000002 ????                     .lo_word:	resw	1		; 24 bit seg physical 
 26457 00000004 ??                       .hi_byte:	resb 	1		; address
 26458 00000005 ??                       .acc_rights:	resb	1		; access rights ( CPL0 - R/W )
 26459 00000006 ????                     .reserved:	resw	1		;
 26460                                   .size:
 26461                                  endstruc
 26462                                  
 26463                                  		; 23/10/2022
 26464                                  bmove:		;label byte
 26465                                  
 26466                                  dummy:		;times desc.size db 0	; desc	<>
 26467 00000CB2 00<rep 8h>              		times 8 db 0		 
 26468                                  gdt:		;times desc.size db 0	; desc	<>
 26469 00000CBA 00<rep 8h>              		times 8 db 0
 26470 00000CC2 FFFF                    src_desc:	dw	0FFFFh		; desc	<0ffffh,0,0,93h,0>
 26471 00000CC4 0000                    		dw	0
 26472 00000CC6 00                      		db	0
 26473 00000CC7 93                      		db	93h
 26474 00000CC8 0000                    		dw	0
 26475 00000CCA FFFF                    tgt_desc:	dw	0FFFFh		; desc	<0ffffh,0,10h,93h,0>  ; 1MB
 26476 00000CCC 0000                    		dw	0
 26477 00000CCE 10                      		db	10h
 26478 00000CCF 93                      		db	93h
 26479 00000CD0 0000                    		dw	0
 26480                                  
 26481                                  rombios_code:	;times desc.size db 0	; desc	<>
 26482 00000CD2 00<rep 8h>              		times 8 db 0
 26483                                  temp_stack:	;times desc.size db 0	; desc	<>
 26484 00000CDA 00<rep 8h>              		times 8 db 0
 26485                                  
 26486 00000CE2 00<rep 20h>             ClrdVDISKHead:	times 32 db 0		; db 32 dup (0)
 26487                                  
 26488                                  
 26489                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.21 IO.SYS, MSDOS 6.0 SYSINIT1.ASM)
 26490                                  
 26491                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26492                                  ; (SYSINIT:0CA6h)
 26493                                  
 26494                                  ClrVDISKHeader:	; proc	near
 26495                                  
 26496                                  ;; 04/07/2023 - Retro DOS v4.2 IO.SYS (optimized)
 26497                                  ;;-----------------------------------------------------------	      ;I070
 26498                                  ;; The following workaround get around a problem with the	      ;I070
 26499                                  ;; Tortugas and PS/2 30-286 BIOS when password server mode	      ;I070
 26500                                  ;; is set. On those machines the INT 15h block move code	      ;I070
 26501                                  ;; goes through the 8042 to twiddle A20 instead of port 92h.	      ;I070
 26502                                  ;; In password server mode the 8042 is disabled so the block	      ;I070
 26503                                  ;; move crashes the system. We can do this because these	      ;I070
 26504                                  ;; systems clear all of memory on a cold boot.			      ;I070
 26505                                  ;								      ;I070
 26506                                  ;               in      al,64h         ; Test for password servr mode ;I070
 26507                                  ;               test    al,10h         ; Is keyboard inhibited?	      ;I070
 26508                                  ;               jnz     short ClrVDISKok ; No, go do block move.      ;I070
 26509                                  ;                                      ; Check for Tortugas...	      ;I070
 26510                                  ;               cmp     word [cs:sys_model_byte],19F8h                ;I070
 26511                                  ;               je      short ClrVDISKno                              ;I070
 26512                                  ;                                      ; Check for mod 30-286	      ;I070
 26513                                  ;               cmp     word [cs:sys_model_byte],09FCh                ;I070
 26514                                  ;               jne     short ClrVDISKok			      ;I070
 26515                                  ;ClrVDISKno: 	retn	               ; Return w/o block move.	      ;I070
 26516                                  ;								      ;I070
 26517                                  ;ClrVDISKok:							      ;I070
 26518                                  ;-----------------------------------------------------------	      ;I070
 26519                                  
 26520                                  	; 30/12/2023 - Retro DOS v5.0
 26521                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:0DBAh
 26522                                  ClrVDISKHeader:
 26523 00000D02 E464                    	in	al, 64h	 ; 8042 keyboard controller status register
 26524                                  			 ; 7:  PERR    1=parity error in data received from keyboard
 26525                                  			 ;    +----------- AT Mode ----------+------------ PS/2 Mode ------------+
 26526                                  			 ; 6: |RxTO    receive (Rx) timeout  | TO     general timeout (Rx or Tx) |
 26527                                  			 ; 5: |TxTO    transmit (Tx) timeout | MOBF   mouse output buffer full   |
 26528                                  			 ;    +------------------------------+-----------------------------------+
 26529                                  			 ; 4:  INH     0=keyboard communications inhibited
 26530                                  			 ; 3:  A2      0=60h was the port last written to, 1=64h was last
 26531                                  			 ; 2:  SYS     distinguishes reset types: 0=cold reboot, 1=warm reboot
 26532                                  			 ; 1:  IBF     1=input buffer full (keyboard can't accept data)
 26533                                  			 ; 0:  OBF     1=output buffer full (data from keyboard is available)
 26534 00000D04 A810                    	test	al, 10h  ; test bit 4 - Is keyboard inhibited?
 26535 00000D06 7511                    	jnz	short ClrVDISKok ; No, go do block move
 26536                                  	; 30/12/2023
 26537                                  	; ds = cs	
 26538 00000D08 813E[BB02]F819          	cmp	word [sys_model_byte], 19F8h ; check for TORTUGA models
 26539 00000D0E 7408                    	jz	short ClrVDISKno ; do not use INT 15h block move code
 26540                                  				 ; (while 8042 is disabled)
 26541 00000D10 813E[BB02]FC09          	cmp	word [sys_model_byte], 9FCh ; Check for PS/2 30-286 model
 26542 00000D16 7501                    	jnz	short ClrVDISKok
 26543                                  ClrVDISKno:
 26544 00000D18 C3                      	retn
 26545                                  ; ---------------------------------------------------------------------------
 26546                                  	; 30/12/2023
 26547                                  ClrVDISKok:
 26548                                  	; 12/12/2022
 26549                                  	; ds = cs
 26550                                  
 26551                                  	; 30/12/2022 - Retro DOS v4.2
 26552                                  	; (MSDOS 6.21 IO.SYS SYSINIT:0CBFh)
 26553                                  
 26554 00000D19 06                      	push	es
 26555 00000D1A 8CC8                    	mov	ax,cs
 26556 00000D1C 89C2                    	mov	dx,ax
 26557 00000D1E B10C                    	mov	cl,12
 26558 00000D20 D3EA                    	shr	dx,cl
 26559 00000D22 B104                    	mov	cl,4
 26560 00000D24 D3E0                    	shl	ax,cl
 26561 00000D26 05[E20C]                	add	ax,ClrdVDISKHead
 26562 00000D29 80D200                  	adc	dl,0
 26563                                  
 26564                                  	;; 23/10/2022
 26565                                  	;;mov	[cs:src_desc+desc.lo_word],ax
 26566                                  	;mov	[cs:src_desc+2],ax
 26567                                  	;;mov	[cs:src_desc+desc.hi_byte],dl
 26568                                  	;mov	[cs:src_desc+4],dl
 26569                                  	; 12/12/2022
 26570                                  	;mov	[src_desc+desc.lo_word],ax
 26571 00000D2C A3[C40C]                	mov	[src_desc+2],ax
 26572                                  	;mov	[src_desc+desc.hi_byte],dl
 26573 00000D2F 8816[C60C]              	mov	[src_desc+4],dl
 26574                                  
 26575 00000D33 B91000                  	mov	cx,16	; 16 words
 26576 00000D36 0E                      	push	cs
 26577 00000D37 07                      	pop	es
 26578 00000D38 BE[B20C]                	mov	si,bmove
 26579 00000D3B B487                    	mov	ah,87h
 26580 00000D3D CD15                    	int	15h	; EXTENDED MEMORY - BLOCK MOVE (AT,XT286,PS)
 26581                                  			; CX = number of words to move 
 26582                                  			; ES:SI -> global descriptor table
 26583                                  			; Return: CF set on error, AH = status
 26584 00000D3F 07                      	pop	es
 26585 00000D40 C3                      	retn
 26586                                  
 26587                                  ; ----------------------------------------------------------------------
 26588                                  ;
 26589                                  ; procedure : SaveFreeHMAPtr
 26590                                  ;
 26591                                  ;		Save the Free HMA pointer in BIOS variable for later use.
 26592                                  ;		(INT 2f ax==4a01 call returns pointer to free HMA)
 26593                                  ;		Normalizes the pointer to ffff:xxxx format and stores only
 26594                                  ;		the offset.
 26595                                  ;
 26596                                  ; Inputs : ES:DI - pointer to free HMA
 26597                                  ; Output : FreeHMAPtr in BIOS data segment updated
 26598                                  ;
 26599                                  ; ----------------------------------------------------------------------
 26600                                  
 26601                                  SaveFreeHMAPtr:
 26602                                  	; 03/09/2023
 26603 00000D41 1E                      	push	ds
 26604 00000D42 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 26605 00000D45 8ED8                    	mov	ds,ax
 26606                                  	;
 26607 00000D47 8CC3                    	mov	bx,es
 26608 00000D49 B8FFFF                  	mov	ax,0FFFFh	   ; HMA segment
 26609                                  	; 03/09/2023
 26610 00000D4C A2[0D00]                	mov	[inHMA],al ; 0FFh  ; (BIOSDATA:000Dh) ; 08/04/2024
 26611                                  	;
 26612 00000D4F 29D8                    	sub	ax,bx
 26613 00000D51 83C70F                  	add	di,15		   ; para round
 26614 00000D54 83E7F0                  	and	di,0FFF0h
 26615 00000D57 B104                    	mov	cl,4
 26616 00000D59 D3E0                    	shl	ax,cl
 26617 00000D5B 29C7                    	sub	di,ax
 26618                                  	;
 26619                                  	; 03/09/2023
 26620                                  	;push	ds
 26621                                  	;;mov	ax,Bios_Data ; 0070h
 26622                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 26623                                  	; 21/10/2022
 26624                                  	; 03/09/2023
 26625                                  	;mov	ax,DOSBIODATASEG ; 0070h
 26626                                  	;mov	ds,ax
 26627                                  		; (BIOSDATA:07D7h for PCDOS 7.1 IBMBIO.COM) ; 08/04/2024
 26628 00000D5D 893E[D707]              	mov	[FreeHMAPtr],di	   ; (ds:8F7h for MSDOS 6.21 IO.SYS)
 26629                                  	;mov	byte [inHMA],0FFh  ; (ds:0Dh)
 26630 00000D61 1F                      	pop	ds
 26631 00000D62 C3                      	retn
 26632                                  
 26633                                  ; ----------------------------------------------------------------------
 26634                                  ;
 26635                                  ; procedure : IsVDiskInstalled
 26636                                  ;
 26637                                  ;		Checks for the presence of VDISK header at 1MB boundary
 26638                                  ;		& INT 19 vector
 26639                                  ;
 26640                                  ; Inputs  : A20 flag should be ON
 26641                                  ; Outputs : Zero set if VDISK header found else Zero cleared
 26642                                  ;
 26643                                  ; ----------------------------------------------------------------------
 26644                                  
 26645                                  IsVDiskInstalled:
 26646 00000D63 31C0                    	xor	ax,ax
 26647 00000D65 8ED8                    	mov	ds,ax
 26648 00000D67 8E1E4E00                	mov	ds,[19*4+2]
 26649                                  	;mov	si,VDiskSig1-StartVDHead ; 12h
 26650                                  	; 23/10/2022
 26651 00000D6B BE1200                  	mov	si,12h ; 18
 26652                                  	;mov	cx,VLEN1 ; 5
 26653 00000D6E B90500                  	mov	cx,5
 26654 00000D71 0E                      	push	cs
 26655 00000D72 07                      	pop	es
 26656 00000D73 BF[180C]                	mov	di,VDiskSig1
 26657 00000D76 F3A6                    	rep	cmpsb
 26658 00000D78 740F                    	je	short ivdins_retn
 26659 00000D7A B8FFFF                  	mov	ax,0FFFFh
 26660 00000D7D 8ED8                    	mov	ds,ax
 26661                                  	;mov	si,10h+(VDiskSig2-VDiskHMAHead) ; 13h
 26662 00000D7F BE1300                  	mov	si,13h
 26663 00000D82 BF[3D0C]                	mov	di,VDiskSig2
 26664                                  	;;mov	cx,VLEN2  ; 5
 26665                                  	;mov	cx,5
 26666                                  	; 03/09/2023
 26667 00000D85 B105                    	mov	cl,5
 26668 00000D87 F3A6                    	rep	cmpsb
 26669                                  ivdins_retn: 
 26670 00000D89 C3                      	retn			; returns the Zero flag
 26671                                  
 26672                                  ; ----------------------------------------------------------------------
 26673                                  ;
 26674                                  ; procedure : CPMHack
 26675                                  ;
 26676                                  ;		Copies the code from 0:c0 into ffff:0d0h
 26677                                  ;		for CPM compatibility
 26678                                  ;
 26679                                  ; ----------------------------------------------------------------------
 26680                                  
 26681                                  	; 11/12/2022
 26682                                  CPMHack:
 26683 00000D8A 1E                      	push	ds
 26684 00000D8B B9FFFF                  	mov	cx,0FFFFh
 26685 00000D8E 8EC1                    	mov	es,cx		; ES = FFFF
 26686                                  	;xor	cx,cx
 26687                                  	; 11/12/2022
 26688 00000D90 41                      	inc	cx  ; cx = 0
 26689 00000D91 8ED9                    	mov	ds,cx		; DS = 0
 26690 00000D93 BEC000                  	mov	si,0C0h
 26691 00000D96 BFD000                  	mov	di,0D0h
 26692                                  	;mov	cx,5
 26693 00000D99 B105                    	mov	cl,5
 26694 00000D9B FC                      	cld
 26695 00000D9C F3A4                    	rep	movsb		; move 5 bytes from 0:C0 to FFFF:D0
 26696 00000D9E 1F                      	pop	ds
 26697 00000D9F C3                      	retn
 26698                                  
 26699                                  ; ----------------------------------------------------------------------
 26700                                  ;
 26701                                  ; procedure : off_to_para
 26702                                  ;
 26703                                  ; ----------------------------------------------------------------------
 26704                                  off_to_para:
 26705 00000DA0 D1E8                    	shr	ax,1
 26706 00000DA2 D1E8                    	shr	ax,1
 26707 00000DA4 D1E8                    	shr	ax,1
 26708 00000DA6 D1E8                    	shr	ax,1
 26709 00000DA8 C3                      	retn
 26710                                  
 26711                                  ; ----------------------------------------------------------------------
 26712                                  ;**	TempCDS - Create (Temporary?) CDS
 26713                                  ;
 26714                                  ;	ENTRY	?? BUGBUG
 26715                                  ;		(DS) = SysInitSeg
 26716                                  ;	EXIT	?? BUGBUG
 26717                                  ;	USES	?? BUGBUG
 26718                                  ; ----------------------------------------------------------------------
 26719                                  
 26720                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26721                                  	; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26722                                  	; 30/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 26723                                  TempCDS:
 26724 00000DA9 C43E[6D02]              	les	di,[DOSINFO]
 26725 00000DAD 268A4D20                	mov	cl,[es:di+SYSI_NUMIO]
 26726                                  
 26727                                  	;mov	cl,[es:di+20h]
 26728 00000DB1 30ED                    	xor	ch,ch			; (cx) = # of block devices
 26729                                  
 26730 00000DB3 26884D21                	mov	[es:di+SYSI_NCDS],cl	; one CDS per device
 26731                                  	;mov	[es:di+21h],cl	
 26732                                  
 26733                                  	;mov	al,cl
 26734                                  	;mov	ah,curdirlen ; curdir_list.size ; 88
 26735                                  	;;mov	ah,88
 26736                                  	;mul	ah			; (ax) = byte size for those CDSs
 26737                                  	; 30/12/2023
 26738 00000DB7 B058                    	mov	al,curdirlen ; curdir_list.size ; 88
 26739                                  	;mov	al,88
 26740 00000DB9 F6E1                    	mul	cl			; (ax) = byte size for those CDSs
 26741                                  
 26742 00000DBB E8D904                  	call	ParaRound		; (ax) = paragraph size for CDSs
 26743 00000DBE 8B36[A702]              	mov	si,[top_of_cdss] ; 31/12/2022
 26744                                  
 26745                                  ;	BUGBUG - we don't update confbot - won't someone else use it?
 26746                                  ;	chuckst -- answer: no. Confbot is used to access the CDSs,
 26747                                  ;	25 jul 92  which are stored BELOW it. Alloclim is the
 26748                                  ;		   variable which has the top of free memory for
 26749                                  ;		   device driver loads, etc.
 26750                                  
 26751 00000DC2 29C6                    	sub	si,ax
 26752                                  
 26753                                  ;	chuckst, 25 Jul 92 -- note: I'm removing the code here
 26754                                  ;		that automatically updates alloclim every time we
 26755                                  ;		set up some new CDSs. Instead, I've added code
 26756                                  ;		which pre-allocates space for 26 CDSs. This
 26757                                  ;	        way we've got room for worst case CDSs before
 26758                                  ;		we place MagicDrv.sys
 26759                                  ;
 26760                                  ;	mov	[ALLOCLIM],si		; can't alloc past here!
 26761                                  
 26762                                  	; 30/12/2022
 26763                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26764                                  	; (SYSINIT:0C52h)
 26765                                  	;mov	[ALLOCLIM],si ; (MSDOS 5.0 SYSINIT)
 26766                                  
 26767 00000DC4 26897518                	mov	[es:di+SYSI_CDS+2],si
 26768                                  	;mov	[es:di+18h],si
 26769 00000DC8 89F0                    	mov	ax,si
 26770 00000DCA 26C745160000            	mov	word [es:di+SYSI_CDS],0	; set address of CDS list
 26771                                  	;mov	[word es:di+16h],0
 26772                                  	;lds	si,[es:di+SYSI_DPB]	; (ds:si) = address of first DPB
 26773 00000DD0 26C535                  	lds	si,[es:di]
 26774 00000DD3 8EC0                    	mov	es,ax
 26775 00000DD5 31FF                    	xor	di,di			; (es:di) = address of 1st CDS
 26776                                  
 26777                                  ;*	Initialize our temporary CDSs. We'll init each CDS with the
 26778                                  ;	info from the corresponding DPB.
 26779                                  ;
 26780                                  ;	(cx) = count of CDSs left to process
 26781                                  ;	(es:di) = address of next CDS
 26782                                  
 26783                                  fooset:
 26784                                  	; 23/10/2022
 26785 00000DD7 2EA1[A902]              	mov	ax,[cs:DirStrng] ; "A:"
 26786 00000DDB AB                      	stosw				; setup the root as the curdir
 26787                                  	
 26788                                  	; 23/10/2022 (MSDOS 5.0 SYSINIT)
 26789                                  	;call	get_dpb_for_drive_al	; get dpb for drive in dpb
 26790                                  
 26791                                  	; 30/12/2022
 26792                                  	; (MSDOS 6.21 SYSINIT:0D8Bh)
 26793 00000DDC E85200                  	call	get_dpb_for_drive_al	; get dpb for drive in dpb
 26794                                  
 26795                                  ;	(ds:si) = address of DPB
 26796                                  ;		 (si) = -1 if no drive
 26797                                  
 26798 00000DDF 2EA1[AB02]              	mov	ax,[cs:DirStrng+2] ; "\",0
 26799 00000DE3 AB                      	stosw
 26800 00000DE4 2EFE06[A902]            	inc	byte [cs:DirStrng]
 26801 00000DE9 31C0                    	xor	ax,ax ; 0
 26802 00000DEB 51                      	push	cx
 26803                                  	;mov	cx,curdir_list.cdir_flags - 4 ; 63
 26804 00000DEC B93F00                  	mov	cx,63	; 23/10/2022
 26805 00000DEF F3AA                    	rep	stosb			; zero out rest of CURDIR_TEXTs
 26806                                  
 26807                                  ;	should handle the system that does not have any floppies.
 26808                                  ;	in this case,we are going to pretended there are two dummy floppies
 26809                                  ;	in the system. still they have dpb and cds,but we are going to
 26810                                  ;	0 out curdir_flags,curdir_devptr of cds so ibmdos can issue
 26811                                  ;	"invalid drive specification" message when the user try to
 26812                                  ;	access them.
 26813                                  ;
 26814                                  ;	(ax) = 0
 26815                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 26816                                  ;	(ds:si) = Next DPB (-1 if none)
 26817                                  
 26818 00000DF1 83FEFF                  	cmp	si,-1	; cmp si,0FFFFh
 26819 00000DF4 740C                    	je	short fooset_zero	; don't have any physical drive.
 26820                                  
 26821                                  ;	check to see if we are faking floppy drives. if not go to normcds.
 26822                                  ;	if we are faking floppy drives then see if this cds being initialised
 26823                                  ;	is for drive a: or b: by checking the appropriate field in the dpb
 26824                                  ;	pointed to by ds:si. if not for a: or b: then go to normcds. if
 26825                                  ;	for a: or b: then execute the code given below starting at fooset_zero.
 26826                                  ;	for dpb offsets look at inc\dpb.inc.
 26827                                  
 26828                                  	; 03/09/2023
 26829 00000DF6 41                      	inc	cx  ; cx = 1
 26830                                  
 26831 00000DF7 2E380E[8B02]            	cmp	[cs:fake_floppy_drv],cl ; 1 ; 03/09/2023
 26832                                  	;cmp	byte [cs:fake_floppy_drv],1
 26833 00000DFC 750A                    	jne	short normcds 		; machine has floppy drives
 26834                                  	;cmp	byte [si+DPB.drive],1	; if dpb_drive = 0 (a) or 1 (b).
 26835                                  	;cmp	byte [si],1
 26836 00000DFE 380C                    	cmp	[si],cl ; 1 ; 03/09/2023
 26837 00000E00 7706                    	ja	short normcds
 26838                                  
 26839                                  	; 30/12/2023
 26840                                  	; ax = 0
 26841                                  fooset_zero:
 26842 00000E02 B103                    	mov	cl,3			; the next dbp pointer
 26843                                  					; AX should be zero here
 26844 00000E04 F3AB                    	rep	stosw
 26845                                  	; 30/12/2023
 26846                                  	;pop	cx
 26847 00000E06 EB0F                    	jmp	short get_next_dpb ; findcds
 26848                                  
 26849                                  ;	(ax) = 0
 26850                                  
 26851                                  	; 30/12/2023
 26852                                  ;fooset_zero:
 26853                                  	;mov	cl,3
 26854                                  	;rep	stosw
 26855                                  	;pop	cx
 26856                                  	;jmp	short fincds
 26857                                  
 26858                                  ;*	We have a "normal" DPB and thus a normal CDS.
 26859                                  ;
 26860                                  ;	(ax) = 0
 26861                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 26862                                  ;	(ds:si) = Next DPB (-1 if none)
 26863                                  
 26864                                  normcds:
 26865                                  	; 30/12/2023
 26866                                  	;pop	cx
 26867                                  
 26868                                  ;	if a non-fat based media is detected (by dpb.numberoffat == 0), then
 26869                                  ;	set curdir_flags to 0. this is for signaling ibmdos and ifsfunc that
 26870                                  ;	this media is a non-fat based one.
 26871                                  
 26872                                  	;cmp	byte [si+DPB.FAT_COUNT],0 ; non fat system?
 26873                                  	; 23/10/2022
 26874                                  	;cmp	byte [si+8],0
 26875                                  	; 03/09/2023 (ax=0)
 26876 00000E08 384408                  	cmp	[si+8],al ; 0
 26877 00000E0B 7403                    	je	short setnormcds	; yes. set curdir_flags to 0. ax = 0 now.
 26878 00000E0D B80040                  	mov	ax,curdir_inuse ; 4000h	; else,fat system. set the flag to curdir_inuse.
 26879                                  	;mov	ax,4000h
 26880                                  setnormcds:
 26881 00000E10 AB                      	stosw				; curdir_flags
 26882 00000E11 89F0                    	mov	ax,si
 26883 00000E13 AB                      	stosw				; curdir_devptr
 26884 00000E14 8CD8                    	mov	ax,ds
 26885 00000E16 AB                      	stosw
 26886                                  
 26887                                  get_next_dpb:				; entry point for fake_fooset_zero
 26888                                  	; 30/12/2022
 26889                                  	; (MSDOS 6.21 SYSINIT:0DD1h)
 26890                                  	; 23/10/2022
 26891                                  	;lds	si,[si+19h] ; (MSDOS 5.0 SYSINIT)
 26892                                  	;;lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 26893                                  fincds:	; get_next_dpb
 26894                                  	; 30/12/2023
 26895 00000E17 59                      	pop	cx
 26896                                  	; 30/12/2022
 26897                                  	; (MSDOS 6.21 SYSINIT:0DD1h)
 26898 00000E18 B8FFFF                  	mov	ax,-1	; mov ax,0FFFFh
 26899 00000E1B AB                      	stosw				; curdir_id
 26900 00000E1C AB                      	stosw				; curdir_id
 26901 00000E1D AB                      	stosw				; curdir_user_word
 26902 00000E1E B80200                  	mov	ax,2
 26903 00000E21 AB                      	stosw				; curdir_end
 26904 00000E22 B000                    	mov	al,0			; clear out 7 bytes (curdir_type,
 26905 00000E24 AA                      	stosb
 26906 00000E25 AB                      	stosw				;  curdir_ifs_hdr,curdir_fsda)
 26907 00000E26 AB                      	stosw
 26908 00000E27 AB                      	stosw
 26909                                  
 26910                                  ; 30/12/2023 - temporary
 26911                                  ;push ds
 26912                                  ;push bx
 26913                                  ;push ax
 26914                                  ;mov bx, 0B800h
 26915                                  ;mov ds, bx
 26916                                  ;mov ah, 4Eh
 26917                                  ;mov al, cl
 26918                                  ;and al, 7
 26919                                  ;add al, '0'
 26920                                  ;xor bx, bx
 26921                                  ;mov [bx], ax
 26922                                  ;xor ah, ah
 26923                                  ;int 16h
 26924                                  ;pop ax
 26925                                  ;pop bx
 26926                                  ;pop ds
 26927                                  
 26928 00000E28 E2AD                    	loop	fooset
 26929                                  	
 26930 00000E2A 2EC606[A902]41          	mov	byte [cs:DirStrng],"A"	; "A:\"
 26931                                  	
 26932 00000E30 C3                      	retn
 26933                                  
 26934                                  ; ----------------------------------------------------------------------
 26935                                  ;***	get_dpb_for_drive_al -- lookup the DPB for drive in al
 26936                                  ;
 26937                                  ;	entry:
 26938                                  ;	   al == ASCII CAPS drive letter
 26939                                  ;
 26940                                  ;	exit:
 26941                                  ;	   ds:si -> DPB, or si = -1 if not found
 26942                                  ; ----------------------------------------------------------------------
 26943                                  
 26944                                  ; 30/12/2023
 26945                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:0EFEh
 26946                                  
 26947                                  	; 30/12/2022
 26948                                  	; (MSDOS 6.21 SYSINIT:0DEAh)
 26949                                  	; 23/10/2022
 26950                                  get_dpb_for_drive_al:
 26951 00000E31 2EC536[6D02]            	lds	si,[cs:DOSINFO]		; point to first DPB
 26952                                  	;lds	si,[si+SYSI_DPB]	; (ds:si) = address of first DPB
 26953 00000E36 C534                    	lds	si,[si]
 26954 00000E38 2C41                    	sub	al,'A'
 26955                                  
 26956                                  get_dpb_for_drive_1:
 26957                                  	;cmp	al,[si+DPB.DRIVE]	; match?
 26958 00000E3A 3A04                    	cmp	al,[si]
 26959 00000E3C 7408                    	je	short got_dpb_for_drive	;  done if so
 26960                                  
 26961 00000E3E C57419                  	lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 26962 00000E41 83FEFF                  	cmp	si,-1
 26963 00000E44 75F4                    	jne	short get_dpb_for_drive_1 ; loop until hit end of DPBs
 26964                                  
 26965                                  got_dpb_for_drive:
 26966 00000E46 C3                      	retn
 26967                                  
 26968                                  ;=======================================================================
 26969                                  
 26970                                  ;**	EndFile - Build DOS structures
 26971                                  ;
 26972                                  ; This procedure is called after the config.sys has been processed and
 26973                                  ; installable device drivers have been loaded (but before "install="
 26974                                  ; programs are loaded) to create the dos structures such as SFTs, buffers,
 26975                                  ; FCBs, CDSs, etc. It also loads the sysinit_base module in low memory
 26976                                  ; to allow for the safe EXECing of "install=" programs. All memory
 26977                                  ; above these structures is deallocated back to DOS.
 26978                                  ;
 26979                                  ;	ENTRY	?? BUGBUG
 26980                                  ;	EXIT	?? BUGBUG
 26981                                  ;	USES	?? BUGBUG
 26982                                  
 26983                                  ;=======================================================================
 26984                                  ; allocate files
 26985                                  ; ----------------------------------------------------------------------
 26986                                  
 26987                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26988                                  	; (SYSINIT:0CCDh)
 26989                                  
 26990                                  	; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26991                                  	; (SYSINIT:0E00h)
 26992                                  
 26993                                  	; 09/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 26994                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:0F14h)
 26995                                  	
 26996                                  	; ((MSDOS 6.22 IO.SYS - SYSINIT:0E00h))
 26997                                  
 26998                                  endfile:
 26999                                  ; we are now setting up final cdss,buffers,files,fcss strings etc. we no
 27000                                  ; longer need the space taken by the temp stuff below confbot,so set alloclim
 27001                                  ; to confbot.
 27002                                  
 27003                                  ;	if this procedure has been called to take care of install= command,
 27004                                  ;	   then we have to save es,si registers.
 27005                                  
 27006                                  	; 11/12/2022
 27007                                  	; ds = cs
 27008                                  
 27009                                  	; 23/10/2022
 27010                                  	; 31/03/2019
 27011 00000E47 1E                      	push	ds
 27012                                  
 27013                                  	;;mov	ax,Bios_Data ; 0070h
 27014                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 27015                                  	; 21/10/2022
 27016 00000E48 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 27017 00000E4B 8ED8                    	mov	ds,ax
 27018                                  
 27019                                  	;cmp	word [052Fh],0
 27020 00000E4D 833E[A004]00            	cmp	word [multrk_flag],multrk_off1 ;=0,multrack= command entered?
 27021 00000E52 7505                    	jne	short multrk_flag_done
 27022                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27023                                  	;or	word [multrk_flag],multrk_on ; 80h  ; default will be on.
 27024                                  	; 12/12/2022
 27025 00000E54 800E[A004]80            	or	byte [multrk_flag],multrk_on ; 80h
 27026                                  multrk_flag_done:
 27027                                  	; 23/10/2022
 27028                                  	; 31/03/2019
 27029 00000E59 1F                      	pop	ds
 27030                                  
 27031                                  	; 11/12/2022
 27032                                  	; ds = cs
 27033                                  	;mov	ax,[top_of_cdss] ; mov ax,[CONFBOT]
 27034                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27035                                  	; (SYSINIT:0E14h)
 27036 00000E5A A1[A302]                	mov	ax,[CONFBOT]
 27037 00000E5D A3[A502]                	mov	[ALLOCLIM],ax
 27038                                  	; 23/10/2022
 27039                                  	;mov	ax, [cs:top_of_cdss]
 27040                                  	;mov	[cs:ALLOCLIM], ax 
 27041                                  
 27042                                  	; 11/12/2022
 27043                                  	; ds = cs
 27044                                  	;push	cs
 27045                                  	;pop	ds
 27046                                  	
 27047                                  	;mov	ax,[CONFBOT]
 27048                                  	;mov	[ALLOCLIM],ax
 27049                                  
 27050                                  	; 09/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 27051                                  	;;;
 27052                                  	;;mov	ax,[cs:ALLOCLIM]
 27053                                  	;mov	ax,[ALLOCLIM]
 27054                                  	;mov	[cs:prev_alloclim],ax
 27055 00000E60 A3[6C03]                	mov	[prev_alloclim],ax
 27056                                  	;mov	ax,[cs:memhi]
 27057 00000E63 A1[6403]                	mov	ax,[memhi]
 27058                                  	;mov	[cs:prev_memhi],ax
 27059 00000E66 A3[6A03]                	mov	[prev_memhi],ax
 27060                                  dosfts:
 27061                                  	;;;
 27062                                  
 27063 00000E69 E84438                  	call	round
 27064                                  
 27065                                  	; 11/12/2022
 27066                                  	; ds = cs
 27067 00000E6C A0[9F02]                	mov	al,[FILES]
 27068                                  	; 23/10/2022
 27069                                  	;mov	al,[cs:FILES]
 27070 00000E6F 2C05                    	sub	al,5
 27071 00000E71 764B                    	jbe	short dofcbs
 27072                                  
 27073 00000E73 50                      	push	ax
 27074                                  	;mov	al,devmark_files ; 'F'
 27075 00000E74 B046                    	mov	al,'F'
 27076 00000E76 E86B07                  	call	setdevmark		; set devmark for sfts (files)
 27077 00000E79 58                      	pop	ax
 27078 00000E7A 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 27079                                  					;  it does sign extend.
 27080                                  	; 11/12/2022
 27081                                  	; ds = cs
 27082 00000E7C 8B1E[6203]              	mov	bx,[memlo]
 27083 00000E80 8B16[6403]              	mov	dx,[memhi]
 27084 00000E84 C53E[6D02]              	lds	di,[DOSINFO]		;get pointer to dos data
 27085                                  	; 23/10/2022
 27086                                  	;mov	bx,[cs:memlo]
 27087                                  	;mov	dx,[cs:memhi]
 27088                                  	;lds	di,[cs:DOSINFO]		
 27089                                  
 27090                                  	;lds	di,[di+SYSI_SFT]	;ds:bp points to sft
 27091 00000E88 C57D04                  	lds	di,[di+4]
 27092                                  
 27093                                  	;mov	[di+SF.SFLink],bx
 27094 00000E8B 891D                    	mov	[di],bx
 27095 00000E8D 895502                  	mov	[di+SF.SFLink+2],dx	;set pointer to new sft
 27096                                  
 27097 00000E90 0E                      	push	cs
 27098 00000E91 1F                      	pop	ds
 27099                                  
 27100                                  	; 11/12/2022
 27101                                  	; ds = cs
 27102 00000E92 C43E[6203]              	les	di,[memlo]		;point to new sft
 27103                                  	; 23/10/2022
 27104                                  	;les	di,[cs:memlo]
 27105                                  
 27106                                  	;mov	word [es:di+SF.SFLink],-1
 27107 00000E96 26C705FFFF              	mov	word [es:di],-1		; 0FFFFh
 27108                                  	;mov	[es:di+SF.SFCount],ax
 27109 00000E9B 26894504                	mov	[es:di+4],ax
 27110                                  	; 09/04/2024
 27111 00000E9F B33B                    	mov	bl,SF_ENTRY.size ; 59
 27112                                  	;mov	bl,59
 27113 00000EA1 F6E3                    	mul	bl			;ax = number of bytes to clear
 27114 00000EA3 89C1                    	mov	cx,ax
 27115                                  	; 11/12/2022
 27116                                  	; ds = cs
 27117 00000EA5 0106[6203]              	add	[memlo],ax		;allocate memory
 27118                                  	; 23/10/2022
 27119                                  	;add	[cs:memlo],ax
 27120 00000EA9 B80600                  	mov	ax,6
 27121                                  	; 11/12/2022
 27122 00000EAC 0106[6203]              	add	[memlo],ax		;remember the header too
 27123                                  	;add	[cs:memlo],ax
 27124                                  	; 11/12/2022
 27125 00000EB0 800E[F518]02            	or	byte [setdevmarkflag],for_devmark ; 2
 27126                                  	; 23/10/2022
 27127                                  	;or	byte [cs:setdevmarkflag],2
 27128 00000EB5 E8F837                  	call	round			; check for mem error before the stosb
 27129 00000EB8 01C7                    	add	di,ax
 27130 00000EBA 31C0                    	xor	ax,ax
 27131 00000EBC F3AA                    	rep	stosb			;clean out the stuff
 27132                                  
 27133                                  ; allocate fcbs
 27134                                  ; ----------------------------------------------------------------------
 27135                                  
 27136                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27137                                  	; (SYSINIT:0D48h)
 27138                                  dofcbs:
 27139                                  	; 11/12/2022
 27140                                  	; ds = cs
 27141                                  	;push	cs
 27142                                  	;pop	ds
 27143 00000EBE E8EF37                  	call	round
 27144                                  	;mov	al,devmark_fcbs	; 'X'	;='x'
 27145 00000EC1 B058                    	mov	al,'X'
 27146 00000EC3 E81E07                  	call	setdevmark
 27147                                  	; 11/12/2022
 27148                                  	; ds = cs
 27149 00000EC6 A0[A002]                	mov	al,[FCBS]
 27150                                  	;mov	al,[cs:FCBS]
 27151 00000EC9 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 27152                                  					;  it does sign extend.
 27153                                  	; 11/12/2022
 27154 00000ECB 8B1E[6203]              	mov	bx,[memlo]
 27155 00000ECF 8B16[6403]              	mov	dx,[memhi]
 27156 00000ED3 C53E[6D02]              	lds	di,[DOSINFO]		;get pointer to dos data
 27157                                  	; 23/10/2022
 27158                                  	;mov	bx,[cs:memlo]
 27159                                  	;mov	dx,[cs:memhi]
 27160                                  	;lds	di,[cs:DOSINFO]
 27161                                  
 27162                                  	;mov	[di+SYSI_FCB],bx
 27163                                  	;mov	[di+SYSI_FCB+2],dx ;set pointer to new table
 27164                                  	; 23/10/2022
 27165 00000ED7 895D1A                  	mov	[di+1Ah],bx		; [di+SYSI_FCB]
 27166 00000EDA 89551C                  	mov	[di+1Ch],dx		; [di+SYSI_FCB+2]
 27167                                  
 27168 00000EDD 2E8A1E[A102]            	mov	bl,[cs:KEEP]
 27169 00000EE2 30FF                    	xor	bh,bh
 27170                                  	;mov	[di+SYSI_KEEP],bx
 27171 00000EE4 895D1E                  	mov	[di+1Eh],bx		; [di+SYSI_KEEP]	
 27172                                  
 27173 00000EE7 0E                      	push	cs
 27174 00000EE8 1F                      	pop	ds
 27175                                  	
 27176 00000EE9 C43E[6203]              	les	di,[memlo]		;point to new table
 27177                                  	;mov	word [es:di+SF.SFLink],-1
 27178 00000EED 26C705FFFF              	mov	word [es:di],-1
 27179                                  	;mov	[es:di+SF.SFCount],ax
 27180                                  	; 02/11/2022
 27181 00000EF2 26894504                	mov	[es:di+4],ax
 27182 00000EF6 B33B                    	mov	bl,SF_ENTRY.size ; 59
 27183 00000EF8 89C1                    	mov	cx,ax
 27184 00000EFA F6E3                    	mul	bl			;ax = number of bytes to clear
 27185 00000EFC 0106[6203]              	add	[memlo],ax		;allocate memory
 27186                                  	;mov	ax,6
 27187 00000F00 B80600                  	mov	ax,SF.size-2 ; 6
 27188 00000F03 0106[6203]              	add	[memlo],ax		;remember the header too
 27189                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 27190 00000F07 800E[F518]02            	or	byte [setdevmarkflag],2
 27191 00000F0C E8A137                  	call	round			; check for mem error before the stosb
 27192 00000F0F 01C7                    	add	di,ax			;skip over header
 27193 00000F11 B041                    	mov	al,'A'
 27194                                  fillloop:
 27195 00000F13 51                      	push	cx			; save count
 27196 00000F14 B93B00                  	mov	cx,SF_ENTRY.size ; 59	; number of bytes to fill
 27197 00000F17 FC                      	cld
 27198 00000F18 F3AA                    	rep	stosb			; filled
 27199                                  
 27200                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],0  ; [es:di-59]
 27201                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],0   ; [es:di-38]	
 27202                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],0 ; [es:di-36]
 27203                                  
 27204                                  	; 18/12/2022
 27205                                  	;cx = 0
 27206 00000F1A 26894DC5                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],cx ;0  ; [es:di-59]
 27207 00000F1E 26894DDA                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],cx ;0   ; [es:di-38]	
 27208 00000F22 26894DDC                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],cx ;0 ; [es:di-36]
 27209                                  	
 27210                                  	; 23/10/2022	
 27211                                  	;mov     word [es:di-3Bh],0
 27212                                  	;mov     word [es:di-26h],0
 27213                                  	;mov     word [es:di-24h],0
 27214                                  
 27215 00000F26 59                      	pop	cx
 27216 00000F27 E2EA                    	loop	fillloop
 27217                                  
 27218                                  ; allocate buffers
 27219                                  ; ----------------------------------------------------------------------
 27220                                  
 27221                                  ; search through the list of media supported and allocate 3 buffers if the
 27222                                  ; capacity of the drive is > 360kb
 27223                                  
 27224                                  	; 18/12/2022
 27225                                  	; cx = 0
 27226 00000F29 833E[9902]FF            	cmp	word [buffers],-1	; has buffers been already set?
 27227 00000F2E 7403                    	je	short dodefaultbuff
 27228 00000F30 E98000                  	jmp	dobuff			; the user entered the buffers=.
 27229                                  
 27230                                  dodefaultbuff:
 27231                                  	; 18/12/2022
 27232 00000F33 890E[9B02]              	mov	[h_buffers],cx ; 0
 27233 00000F37 41                      	inc	cx
 27234 00000F38 41                      	inc	cx
 27235 00000F39 890E[9902]              	mov	[buffers],cx ; 2	
 27236                                  	
 27237                                  	;mov	word [h_buffers],0	; default is no heuristic buffers.
 27238                                  	;mov	word [buffers],2	; default to 2 buffers
 27239                                  
 27240                                  	; 23/10/2022
 27241                                  	; 04/09/2023
 27242                                  	;push	ax
 27243                                  	;push	ds ; 26/03/2019
 27244                                  
 27245                                  	; 04/09/2023
 27246                                  	; ds = cs
 27247 00000F3D C42E[6D02]              	les	bp,[DOSINFO]		; search through the dpb's
 27248                                  	;les	bp,[cs:DOSINFO]
 27249                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 27250                                  	; 11/12/2022
 27251 00000F41 26C46E00                	les	bp,[es:bp]
 27252                                  	; 23/10/2022
 27253                                  	;les	bp,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !	
 27254                                  
 27255                                  	; 04/09/2023
 27256                                  	; ds = cs
 27257                                  	;push	cs
 27258                                  	;pop	ds
 27259                                  ;SYSINIT:0DE2h:
 27260                                  nextdpb:				; test if the drive supports removeable media
 27261                                  	;mov	bl,[es:bp+DPB.drive]
 27262                                  	; 11/12/2022
 27263 00000F45 268A5E00                	mov	bl,[es:bp]
 27264                                  	; 23/10/2022
 27265                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 27266                                  
 27267                                  	;inc	bl
 27268                                  	; 18/12/2022
 27269 00000F49 43                      	inc	bx
 27270                                  
 27271                                  	;mov	ax,(IOCTL<<8)|8
 27272 00000F4A B80844                  	mov	ax,4408h
 27273 00000F4D CD21                    	int	21h		; DOS - 2+ - IOCTL -
 27274                                  
 27275                                  ; ignore fixed disks
 27276                                  
 27277 00000F4F 09C0                    	or	ax,ax			; ax is nonzero if disk is nonremoveable
 27278 00000F51 7534                    	jnz	short nosetbuf
 27279                                  
 27280                                  ; get parameters of drive
 27281                                  
 27282 00000F53 31DB                    	xor	bx,bx
 27283                                  	;;mov	bl,[es:bp+DPB.drive]
 27284                                  	; 11/12/2022
 27285 00000F55 268A5E00                	mov	bl,[es:bp]
 27286                                  	; 23/10/2022
 27287                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 27288                                  	
 27289                                  	;inc	bl
 27290                                  	; 18/12/2022
 27291 00000F59 43                      	inc	bx
 27292                                  
 27293 00000F5A BA[734C]                	mov	dx,deviceparameters
 27294                                  	;mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 27295 00000F5D B80D44                  	mov	ax,440Dh
 27296                                  	;mov	cx,(RAWIO<<8)|GET_DEVICE_PARAMETERS
 27297 00000F60 B96008                  	mov	cx,860h
 27298 00000F63 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 27299 00000F65 7220                    	jc	short nosetbuf		; get next dpb if driver doesn't support
 27300                                  					; generic ioctl
 27301                                  ; determine capacity of drive
 27302                                  ; media capacity = #sectors * bytes/sector
 27303                                  
 27304                                  	;mov	bx,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.TOTALSECTORS]
 27305                                  	; 23/10/2022
 27306 00000F67 8B1E[824C]              	mov	bx,[deviceparameters+15] ; total sectors (16 bit)
 27307                                  	
 27308                                  ; to keep the magnitude of the media capacity within a word,
 27309                                  ; scale the sector size
 27310                                  ; (ie. 1 -> 512 bytes,2 -> 1024 bytes,...)
 27311                                  
 27312                                  	;mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BYTESPERSECTOR]
 27313                                  	; 23/10/2022
 27314 00000F6B A1[7A4C]                	mov	ax, [deviceparameters+7] ; bytes per sector
 27315 00000F6E 31D2                    	xor	dx,dx
 27316 00000F70 B90002                  	mov	cx,512
 27317 00000F73 F7F1                    	div	cx			; scale sector size in factor of
 27318                                  					; 512 bytes
 27319 00000F75 F7E3                    	mul	bx			; ax = #sectors * size factor
 27320 00000F77 09D2                    	or	dx,dx			; just in case of large floppies
 27321 00000F79 7505                    	jnz	short setbuf
 27322 00000F7B 3DD002                  	cmp	ax,720			; 720 sectors * size factor of 1
 27323 00000F7E 7607                    	jbe	short nosetbuf
 27324                                  setbuf:
 27325                                  	; 18/12/2022
 27326                                  	; word [buffers] = 2
 27327 00000F80 C606[9902]03            	mov	byte [buffers],3
 27328                                  	;mov	word [buffers],3
 27329 00000F85 EB0D                    	jmp	short chk_memsize_for_buffers ; now check the memory size
 27330                                  					; for default buffer count
 27331                                  nosetbuf:
 27332                                  	; 23/10/2022
 27333                                  	;cmp	word [es:bp+DPB.NEXT_DPB],-1
 27334 00000F87 26837E19FF              	cmp	word [es:bp+19h], -1 ; 0FFFFh
 27335 00000F8C 7406                    	je	short chk_memsize_for_buffers
 27336                                  	;les	bp,[es:bp+DPB.NEXT_DPB] ; [es:bp+19h]
 27337 00000F8E 26C46E19                	les	bp,[es:bp+19h]
 27338 00000F92 EBB1                    	jmp	short nextdpb
 27339                                  
 27340                                  ;from dos 3.3,the default number of buffers will be changed according to the
 27341                                  ;memory size too.
 27342                                  ; default buffers = 2
 27343                                  ; if diskette media > 360 kb,then default buffers = 3
 27344                                  ; if memory size > 128 kb (2000h para),then default buffers = 5
 27345                                  ; if memory size > 256 kb (4000h para),then default buffers = 10
 27346                                  ; if memory size > 512 kb (8000h para),then default buffers = 15.
 27347                                  
 27348                                  chk_memsize_for_buffers:
 27349                                  	; 18/12/2022
 27350                                  	;cmp	word [MEMORY_SIZE],2000h
 27351                                  	;jbe	short bufset
 27352                                  	;mov	word [buffers],5
 27353                                  	;cmp	word [MEMORY_SIZE],4000h
 27354                                  	;jbe	short bufset
 27355                                  	;mov	word [buffers],10
 27356                                  	;cmp	word [MEMORY_SIZE],8000h
 27357                                  	;jbe	short bufset
 27358                                  	;mov	word [buffers],15
 27359                                  
 27360                                  	; 18/12/2022
 27361                                  	; word [buffers] = 3 or 2
 27362 00000F94 BB[9902]                	mov	bx,buffers
 27363 00000F97 A1[9402]                	mov	ax,[MEMORY_SIZE]
 27364 00000F9A 48                      	dec	ax	; [MEMORY_SIZE] - 1
 27365                                  
 27366 00000F9B 80FC20                  	cmp	ah,20h	; ax >= 2000h ([MEMORY_SIZE] > 2000h) ; *
 27367 00000F9E 7213                    	jb	short bufset
 27368 00000FA0 C6070F                  	mov	byte [bx],15 ; [buffers] = 15 ; ***
 27369 00000FA3 80FC80                  	cmp	ah,80h	; ax >= 8000h ([MEMORY_SIZE] > 8000h) ; ***
 27370 00000FA6 730B                    	jnb	short bufset
 27371 00000FA8 C6070A                  	mov	byte [bx],10 ; [buffers] = 10 ; **
 27372 00000FAB 80FC40                  	cmp	ah,40h	; ax >= 4000h ([MEMORY_SIZE] > 4000h) ; **
 27373 00000FAE 7303                    	jnb	short bufset
 27374 00000FB0 C60705                  	mov	byte [bx],5  ; [buffers] = 5 ; *
 27375                                  bufset:
 27376                                  	; 23/10/2022
 27377                                  	; 26/03/2019
 27378                                  	; 04/09/2023
 27379                                  	;pop	ds
 27380                                  	;pop	ax
 27381                                  
 27382                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 27383                                  ;j.k. here we should put extended stuff and new allocation scheme!!!
 27384                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 27385                                  
 27386                                  ; 26/03/2019
 27387                                  
 27388                                  ;*******************************************************************************
 27389                                  ;									       *
 27390                                  ; function: actually allocate buffers in the memory and initialize it. 	       *
 27391                                  ; input :								       *
 27392                                  ;    memhi:memlo - start of the next available memory			       *
 27393                                  ;    buffers = number of buffers					       *
 27394                                  ;    h_buffers = number of secondary buffers				       *
 27395                                  ;									       *
 27396                                  ; output:								       *
 27397                                  ;	buffinfo.cache_count - # of caches to be installed.		       *
 27398                                  ;	buffinfo set.							       *
 27399                                  ;	bufferqueue set.						       *
 27400                                  ;									       *
 27401                                  ; subroutines to be called:						       *
 27402                                  ;									       *
 27403                                  ;*******************************************************************************
 27404                                  
 27405                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27406                                  	; (SYSINIT:0E60h)
 27407                                  dobuff:
 27408                                  	; ds = cs ; 31/03/2019
 27409                                  	; 23/10/2022
 27410                                  	;lds	bx,[cs:DOSINFO]	; ds:bx -> sysinitvar
 27411                                  	; 04/09/2023
 27412 00000FB3 A1[9902]                	mov	ax,[buffers] ; 31/03/2019
 27413 00000FB6 8B0E[9B02]              	mov	cx,[h_buffers] ; *
 27414 00000FBA C51E[6D02]              	lds	bx,[DOSINFO]
 27415                                  	;mov	ax,[cs:buffers]	; set sysi_buffers
 27416                                  	;mov	[bx+SYSI_BUFFERS],ax ; [bx+3Fh]
 27417 00000FBE 89473F                  	mov	[bx+3Fh],ax
 27418                                  	; 04/09/2023
 27419                                  	;mov	ax,[cs:h_buffers]
 27420                                  	;;mov	[bx+SYSI_BUFFERS+2],ax ; [bx+41h]
 27421                                  	;mov	[bx+41h],ax
 27422                                  	; 04/09/2023
 27423 00000FC1 894F41                  	mov	[bx+41h],cx ; *
 27424 00000FC4 C55F12                  	lds	bx,[bx+12h]
 27425                                  	;lds	bx,[bx+SYSI_BUF] ; now,ds:bx -> buffinfo
 27426 00000FC7 E8E636                  	call	round		; get [memhi]:[memlo]
 27427                                  	;mov	al,devmark_buf	; ='B'
 27428 00000FCA B042                    	mov	al,'B'	
 27429 00000FCC E81506                  	call	setdevmark
 27430                                  
 27431                                  ;allocate buffers
 27432                                  
 27433 00000FCF 1E                      	push	ds			; save buffer info. ptr.
 27434 00000FD0 53                      	push	bx
 27435                                  
 27436 00000FD1 E85003                  	call	set_buffer
 27437                                  
 27438 00000FD4 5B                      	pop	bx
 27439 00000FD5 1F                      	pop	ds
 27440                                  
 27441                                  ;now set the secondary buffer if specified.
 27442                                  
 27443 00000FD6 2E833E[9B02]00          	cmp	word [cs:h_buffers],0
 27444 00000FDC 742D                    	je	short xif16
 27445 00000FDE E8CF36                  	call	round
 27446                                  	; 23/10/2022
 27447 00000FE1 2E8B0E[6203]            	mov	cx,[cs:memlo]
 27448                                  	;mov	[bx+BUFFINF.Cache_ptr],cx  ; [bx+6]
 27449 00000FE6 894F06                  	mov	[bx+6],cx
 27450 00000FE9 2E8B0E[6403]            	mov	cx,[cs:memhi]
 27451                                  	;mov	[bx+BUFFINF.Cache_ptr+2],cx ; [bx+8]
 27452 00000FEE 894F08                  	mov	[bx+8],cx
 27453 00000FF1 2E8B0E[9B02]            	mov	cx,[cs:h_buffers]
 27454                                  	;mov	[bx+BUFFINF.Cache_count],cx ; [bx+10]
 27455 00000FF6 894F0A                  	mov	[bx+10],cx
 27456 00000FF9 B80002                  	mov	ax,512			; 512 byte
 27457 00000FFC F7E1                    	mul	cx
 27458 00000FFE 2EA3[6203]              	mov	[cs:memlo],ax
 27459                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 27460 00001002 2E800E[F518]02          	or	byte [cs:setdevmarkflag],2
 27461 00001008 E8A536                  	call	round
 27462                                  xif16:
 27463                                  
 27464                                  ; ----------------------------------------------------------------------
 27465                                  ; allocate cdss
 27466                                  ; ----------------------------------------------------------------------
 27467                                  
 27468                                  buf1:
 27469 0000100B E8A236                  	call	round
 27470                                  
 27471 0000100E 50                      	push	ax
 27472                                  	; 23/10/2022
 27473                                  	;mov	ax,devmark_cds		;='L'
 27474 0000100F B84C00                  	mov	ax, 'L'
 27475 00001012 E8CF05                  	call	setdevmark
 27476 00001015 58                      	pop	ax
 27477                                  
 27478 00001016 2EC43E[6D02]            	les	di,[cs:DOSINFO]
 27479                                  	;mov	cl,[es:di+SYSI_NUMIO]
 27480 0000101B 268A4D20                	mov	cl,[es:di+20h]
 27481 0000101F 2E3A0E[A202]            	cmp	cl,[cs:NUM_CDS]
 27482 00001024 7305                    	jae	short gotncds 		; user setting must be at least numio
 27483 00001026 2E8A0E[A202]            	mov	cl,[cs:NUM_CDS]
 27484                                  gotncds:
 27485 0000102B 30ED                    	xor	ch,ch
 27486                                  	;mov	[es:di+SYSI_NCDS],cl	; [es:di+33]
 27487 0000102D 26884D21                	mov	[es:di+21h],cl
 27488 00001031 2EA1[6403]              	mov	ax,[cs:memhi]
 27489                                  	;mov	[es:di+SYSI_CDS+2],ax
 27490 00001035 26894518                	mov	[es:di+18h],ax
 27491 00001039 2EA1[6203]              	mov	ax,[cs:memlo]
 27492                                  	;mov	[es:di+SYSI_CDS],ax
 27493 0000103D 26894516                	mov	[es:di+16h],ax
 27494 00001041 88C8                    	mov	al,cl
 27495                                  	;mov	ah,curdirlen ; curdir_list.size
 27496 00001043 B458                    	mov	ah,88
 27497 00001045 F6E4                    	mul	ah
 27498 00001047 E84D02                  	call	ParaRound
 27499 0000104A 2E0106[6403]            	add	[cs:memhi],ax
 27500                                  
 27501                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 27502 0000104F 2E800E[F518]02          	or	byte [cs:setdevmarkflag],2
 27503 00001055 E85836                  	call	round			; check for mem error before initializing
 27504                                  	;lds	si,[es:di+SYSI_DPB] ; [es:di+0]
 27505 00001058 26C535                  	lds	si,[es:di]
 27506                                  	;les	di,[es:di+SYSI_CDS] ; [es:di+22]
 27507 0000105B 26C47D16                	les	di,[es:di+16h]
 27508 0000105F E875FD                  	call	fooset
 27509                                  
 27510                                  ; ----------------------------------------------------------------------
 27511                                  ; allocate space for internal stack
 27512                                  ; ----------------------------------------------------------------------
 27513                                  
 27514 00001062 0E                      	push	cs
 27515 00001063 1F                      	pop	ds
 27516                                  
 27517                                  ;	if the user did not entered stacks= command, as a default, do not install
 27518                                  ;	sytem stacks for pc1,pc xt,pc portable cases.
 27519                                  ;	otherwise,install it to the user specified value or to the default
 27520                                  ;	value of 9,128 for other systems.
 27521                                  
 27522 00001064 833E[9002]FF            	cmp	word [stack_addr],-1 ; has the user entered "stacks=" command?
 27523 00001069 740E                    	je	short doinstallstack	; then install as specified by the user
 27524 0000106B 803E[BC02]00            	cmp	byte [sys_scnd_model_byte],0 ; pc1,xt has the secondary model byte = 0
 27525 00001070 7507                    	jne	short doinstallstack	; other model should have default stack of 9,128
 27526 00001072 803E[BB02]FE            	cmp	byte [sys_model_byte],0FEh ; pc1, pc/xt or pc portable ?
 27527 00001077 736D                    	jae	short skipstack
 27528                                  doinstallstack:
 27529 00001079 A1[8C02]                	mov	ax,[stack_count]	; stack_count = 0?
 27530 0000107C 09C0                    	or	ax,ax			; then, stack size must be 0 too.
 27531 0000107E 7466                    	jz	short skipstack		; don't install stack.
 27532                                  
 27533                                  ;	dynamic relocation of stack code.
 27534                                  
 27535 00001080 E82D36                  	call	round			;[memhi] = seg. for stack code
 27536                                  					;[memlo] = 0
 27537                                  
 27538                                  ; set devmark block into memory for mem command
 27539                                  ; devmark_id = 's' for stack
 27540                                  
 27541                                  	;mov	al,devmark_stk	;='S'
 27542                                  	; 23/10/2022
 27543 00001083 B053                    	mov	al,'S'
 27544 00001085 E85C05                  	call	setdevmark
 27545                                  
 27546 00001088 A1[6403]                	mov	ax,[memhi]
 27547 0000108B 8EC0                    	mov	es,ax		;es -> seg. the stack code is going to move.
 27548                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27549                                  	; 11/12/2022
 27550                                  	; ds = cs
 27551                                  	;push	cs
 27552                                  	;pop	ds
 27553 0000108D 31F6                    	xor	si,si		;!!we know that stack code is at the beginning of sysinit.
 27554 0000108F 31FF                    	xor	di,di
 27555 00001091 B9[6902]                	mov	cx,endstackcode
 27556 00001094 890E[6203]              	mov	[memlo],cx
 27557 00001098 E81536                  	call	round		;have enough space for relocation?
 27558 0000109B F3A4                    	rep	movsb
 27559                                  
 27560 0000109D 1E                      	push	ds		; stick the location of the NextStack entry
 27561                                  	;;mov	ax,Bios_Data	; into the Win386 Instance Data tables
 27562                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 27563                                  	; 21/10/2022
 27564 0000109E B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 27565 000010A1 8ED8                    	mov	ds,ax
 27566 000010A3 C706[0208][1000]        	mov	word [NextStack],nextentry ; (8C0h for MSDOS 6.21 IO.SYS)
 27567 000010A9 8C06[0408]              	mov	[NextStack+2],es	   ; (8C2h for MSDOS 6.21 IO.SYS)
 27568                                  
 27569 000010AD 2EA1[6203]              	mov	ax,[cs:memlo]
 27570 000010B1 2EA3[9002]              	mov	[cs:stack_addr],ax ;set for stack area initialization
 27571 000010B5 A3[0808]                	mov	[IT_StackLoc],ax ; pass it as Instance Data, too
 27572 000010B8 2EA1[6403]              	mov	ax,[cs:memhi]	;this will be used by stack_init routine.
 27573 000010BC 2EA3[9202]              	mov	[cs:stack_addr+2],ax
 27574 000010C0 A3[0A08]                	mov	[IT_StackLoc+2],ax
 27575                                  
 27576                                  ;	space for internal stack area = stack_count(entrysize + stack_size)
 27577                                  
 27578                                  	;mov	ax,entrysize ; mov ax,8
 27579                                  	; 23/10/2022
 27580 000010C3 B80800                  	mov	ax,8
 27581 000010C6 2E0306[8E02]            	add	ax,[cs:stack_size]
 27582 000010CB 2EF726[8C02]            	mul	word [cs:stack_count]
 27583                                  
 27584 000010D0 A3[0C08]                	mov	[IT_StackSize],ax ; pass through to Instance Tables
 27585                                  
 27586 000010D3 1F                      	pop	ds		; no more need to access Instance Table
 27587                                  
 27588 000010D4 E8C001                  	call	ParaRound	; convert size to paragraphs
 27589                                  	
 27590                                  	; 11/12/2022
 27591                                  	; ds = cs
 27592                                  	;add	[cs:memhi],ax
 27593 000010D7 0106[6403]              	add	[memhi],ax
 27594                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 27595                                  	;or	byte [cs:setdevmarkflag],2
 27596 000010DB 800E[F518]02            	or	byte [setdevmarkflag],2
 27597                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 27598                                  				;to set the devmark_size for stack by round routine.
 27599 000010E0 E8CD35                  	call	round		; check for memory error before
 27600                                  				; continuing
 27601 000010E3 E8E502                  	call	stackinit	; initialize hardware stack. 
 27602                                  				; cs=ds=sysinitseg,es=relocated stack code & data
 27603                                  skipstack:
 27604                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27605                                  	; (SYSINIT:0F99h)
 27606                                  
 27607                                  	; 11/12/2022
 27608                                  	; ds = cs
 27609                                  	;push	cs
 27610                                  	;pop	ds
 27611                                  
 27612 000010E6 A0[9F02]                	mov	al,[FILES]
 27613 000010E9 30E4                    	xor	ah,ah		; do not use cbw instruction!!!!!
 27614                                  				;  it does sign extend.
 27615 000010EB 89C1                    	mov	cx,ax
 27616 000010ED 31DB                    	xor	bx,bx		;close standard input
 27617 000010EF B43E                    	mov	ah,3Eh ; CLOSE
 27618 000010F1 CD21                    	int	21h
 27619 000010F3 BB0200                  	mov	bx,2
 27620                                  rcclloop:			;close everybody but standard output
 27621 000010F6 B43E                    	mov	ah,3Eh ; CLOSE	; need output so we can print message
 27622 000010F8 CD21                    	int	21h		; in case we can't get new one open.
 27623 000010FA 43                      	inc	bx
 27624 000010FB E2F9                    	loop	rcclloop
 27625                                  
 27626 000010FD BA[8349]                	mov	dx,condev
 27627 00001100 B002                    	mov	al,2
 27628 00001102 B43D                    	mov	ah,3Dh ; OPEN 	;open con for read/write
 27629 00001104 F9                      	stc			; set for possible int 24
 27630 00001105 CD21                    	int	21h
 27631 00001107 7305                    	jnc	short goaux
 27632 00001109 E8DA37                  	call	badfil
 27633 0000110C EB13                    	jmp	short goaux2
 27634                                  goaux:	
 27635 0000110E 50                      	push	ax
 27636 0000110F BB0100                  	mov	bx,1		;close standard output
 27637 00001112 B43E                    	mov	ah,3Eh ; CLOSE
 27638 00001114 CD21                    	int	21h
 27639 00001116 58                      	pop	ax
 27640                                  
 27641 00001117 89C3                    	mov	bx,ax		;new device handle
 27642 00001119 B445                    	mov	ah,45h ; XDUP
 27643 0000111B CD21                    	int	21h		;dup to 1,stdout
 27644 0000111D B445                    	mov	ah,45h ; XDUP
 27645 0000111F CD21                    	int	21h		;dup to 2,stderr
 27646                                  goaux2: 
 27647 00001121 BA[8749]                	mov	dx,auxdev
 27648 00001124 B002                    	mov	al,2		;read/write access
 27649 00001126 E8EE37                  	call	open_dev
 27650                                  
 27651 00001129 BA[8B49]                	mov	dx,prndev
 27652 0000112C B001                    	mov	al,1		;write only
 27653 0000112E E8E637                  	call	open_dev
 27654                                  
 27655                                  ;global rearm command for shared interrupt devices attached in the system;
 27656                                  ;shared interrupt attachment has some problem when it issues interrupt
 27657                                  ;during a warm reboot. once the interrupt is presented by the attachment,
 27658                                  ;no further interrupts on that level will be presented until a global rearm
 27659                                  ;is issued. by the request of the system architecture group, msbio will
 27660                                  ;issue a global rearm after every device driver is loaded.
 27661                                  ;to issue a global rearm:	;for pc1,xt,palace
 27662                                  ;
 27663                                  ;			  out 02f2h,xx  ; interrupt level 2
 27664                                  ;			  out 02f3h,xx  ; interrupt level 3
 27665                                  ;			  out 02f4h,xx  ; interrupt level 4
 27666                                  ;			  out 02f5h,xx  ; interrupt level 5
 27667                                  ;			  out 02f6h,xx  ; interrupt level 6
 27668                                  ;			  out 02f7h,xx  ; interrupt level 7
 27669                                  ;
 27670                                  ;	for pc at,in addition to the above commands,
 27671                                  ;	need to handle the secondary interrupt handler
 27672                                  ;
 27673                                  ;			  out 06f2h,xx  ; interrupt level 10
 27674                                  ;			  out 06f3h,xx  ; interrupt level 11
 27675                                  ;			  out 06f4h,xx  ; interrupt level 12
 27676                                  ;			  out 06f6h,xx  ; interrupt level 14
 27677                                  ;			  out 06f7h,xx  ; interrupt level 15
 27678                                  ;
 27679                                  ;	for round-up machine
 27680                                  ;
 27681                                  ;			  none.
 27682                                  
 27683                                  ; where xx stands for any value.
 27684                                  ;
 27685                                  ; for your information,after naples level machine,the system service bios
 27686                                  ; call (int 15h),function ah=0c0h returns the system configuration parameters
 27687                                  
 27688                                  	; 24/10/2022
 27689                                  
 27690 00001131 50                      	push	ax
 27691 00001132 53                      	push	bx
 27692 00001133 52                      	push	dx
 27693 00001134 06                      	push	es
 27694                                  
 27695 00001135 B0FF                    	mov	al,0FFh 		;reset h/w by writing to port
 27696 00001137 BAF202                  	mov	dx,2F2h 		;get starting address
 27697 0000113A EE                      	out	dx,al			; out 02f2h,0ffh
 27698 0000113B 42                      	inc	dx
 27699 0000113C EE                      	out	dx,al			; out 02f3h,0ffh
 27700 0000113D 42                      	inc	dx
 27701 0000113E EE                      	out	dx,al			; out 02f4h,0ffh
 27702 0000113F 42                      	inc	dx
 27703 00001140 EE                      	out	dx,al			; out 02f5h,0ffh
 27704 00001141 42                      	inc	dx
 27705 00001142 EE                      	out	dx,al			; out 02f6h,0ffh
 27706 00001143 42                      	inc	dx
 27707 00001144 EE                      	out	dx,al			; out 02f7h,0ffh
 27708                                  
 27709                                  ;sb secondary global rearm
 27710                                  
 27711 00001145 B800F0                  	mov	ax,0F000h		;get machine type
 27712 00001148 8EC0                    	mov	es,ax
 27713 0000114A 26803EFEFFFC            	cmp	byte [es:0FFFEh],0FCh ;q:is it a at type machine
 27714 00001150 740D                    	je	short startrearm	; *if at no need to check
 27715                                  
 27716 00001152 B4C0                    	mov	ah,0C0h 		;get system configuration
 27717 00001154 CD15                    	int	15h			; *
 27718 00001156 7216                    	jc	short finishrearm	; *jmp if old rom
 27719                                  
 27720                                  ; test feature byte for secondary interrupt controller
 27721                                  
 27722 00001158 26F6470540              	test	byte [es:bx+5],40h
 27723                                  	; 24/10/2022
 27724                                  	;test	byte [es:bx+ROMBIOS_DESC.bios_sd_featurebyte1],ScndIntController
 27725 0000115D 740F                    	je	short finishrearm	;jmp if it is there
 27726                                  
 27727                                  startrearm:
 27728 0000115F B0FF                    	mov	al,0FFh 		;write any pattern to port
 27729 00001161 BAF206                  	mov	dx,6F2h 		;get starting address
 27730 00001164 EE                      	out	dx,al			;out 06f2h,0ffh
 27731 00001165 42                      	inc	dx			;bump address
 27732 00001166 EE                      	out	dx,al			;out 06f3h,0ffh
 27733 00001167 42                      	inc	dx			;bump address
 27734 00001168 EE                      	out	dx,al			;out 06f4h,0ffh
 27735 00001169 42                      	inc	dx			;bump address
 27736 0000116A 42                      	inc	dx			;bump address
 27737 0000116B EE                      	out	dx,al			;out 06f6h,0ffh
 27738 0000116C 42                      	inc	dx			;bump address
 27739 0000116D EE                      	out	dx,al			;out 06f7h,0ffh
 27740                                  
 27741                                  finishrearm:
 27742 0000116E 07                      	pop	es
 27743 0000116F 5A                      	pop	dx
 27744 00001170 5B                      	pop	bx
 27745 00001171 58                      	pop	ax
 27746                                  
 27747                                  ;    global rearm end *******************
 27748                                  
 27749                                  ; ----------------------------------------------------------------------
 27750                                  ; allocate sysinit_base for install= command
 27751                                  ; ----------------------------------------------------------------------
 27752                                  ; sysinit_base allocation.
 27753                                  ;   check if endfile has been called to handle install= command.
 27754                                  
 27755                                  set_sysinit_base:
 27756                                  
 27757                                  ; ----------------------------------------------------------------------
 27758                                  ;sysinit_base will be established in the secure area of
 27759                                  ;lower memory when it handles the first install= command.
 27760                                  ;sysinit_base is the place where the actual exec function will be called and
 27761                                  ;will check sysinit module in high memory if it is damaged by the application
 27762                                  ;program.  if sysinit module has been broken,then "memory error..." message
 27763                                  ;is displayed by sysinit_base.
 27764                                  ; ----------------------------------------------------------------------
 27765                                  
 27766                                  	; 24/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 27767                                  	; (SYSINIT:1028h)
 27768                                  
 27769                                  	; 11/12/2022
 27770                                  	; ds = cs
 27771 00001172 50                      	push	ax			; set devmark for mem command
 27772 00001173 A1[6403]                	mov	ax,[memhi]
 27773 00001176 2B06[6803]              	sub	ax,[area]
 27774 0000117A A3[6003]                	mov	[impossible_owner_size],ax ;remember the size in case.
 27775                                  	;mov	al,devmark_inst ; 'T'
 27776 0000117D B054                    	mov	al,'T'
 27777 0000117F E86204                  	call	setdevmark
 27778 00001182 58                      	pop	ax
 27779                                  
 27780 00001183 8B3E[6403]              	mov	di,[memhi]
 27781 00001187 8EC7                    	mov	es,di
 27782 00001189 893E[D402]              	mov	[sysinit_base_ptr+2],di ; save this entry for the next use.
 27783 0000118D 31FF                    	xor	di,di
 27784 0000118F 893E[D202]              	mov	[sysinit_base_ptr],di	; es:di -> destination.
 27785 00001193 BE[A312]                	mov	si,sysinit_base		;ds:si -> source code to be relocated.
 27786 00001196 B98100                  	mov	cx,end_sysinit_base-sysinit_base ; 129
 27787                                  	; 24/10/2022 
 27788                                  	;mov	cx,128	; 11DCh-115Ch 	; (MSDOS 5.0 IO.SYS, SYSINIT)
 27789 00001199 010E[6203]              	add	[memlo],cx
 27790                                  	;or	byte cs:[setdevmarkflag],for_devmark ; 2
 27791                                  	; 11/12/2022
 27792                                  	; ds = cs
 27793                                  	;or	byte [cs:setdevmarkflag],2
 27794 0000119D 800E[F518]02            	or	byte [setdevmarkflag],2
 27795                                  	;or	byte [setdevmarkflag],for_devmark
 27796 000011A2 E80B35                  	call	round			; check mem error. also,readjust memhi for the next use.
 27797 000011A5 F3A4                    	rep	movsb			; reallocate it.
 27798                                  
 27799 000011A7 C706[D602][8A12]        	mov	word [sysinit_ptr],sysinitptr ; returning address from
 27800 000011AD 8C0E[D802]              	mov	[sysinit_ptr+2],cs	 ; sysinit_base back to sysinit.
 27801                                  	;or	word [install_flag],has_installed ; set the flag.
 27802                                  	;or	byte [install_flag],has_installed ; 2
 27803                                  	; 11/12/2022
 27804 000011B1 800E[CE02]02            	or	byte [install_flag],2
 27805                                  	; 24/10/2022
 27806                                  	;or	word [install_flag],2	
 27807                                  
 27808                                  ; ----------------------------------------------------------------------
 27809                                  ; free the rest of the memory from memhi to confbot. still from confbot to
 27810                                  ; the top of the memory will be allocated for sysinit and config.sys if
 27811                                  ; have_install_cmd.
 27812                                  ; ----------------------------------------------------------------------
 27813                                  
 27814 000011B6 E8F734                  	call	round
 27815 000011B9 8B1E[6403]              	mov	bx,[memhi]
 27816 000011BD A1[6803]                	mov	ax,[area]
 27817 000011C0 A3[5E03]                	mov	[old_area],ax		; save [area]
 27818 000011C3 8EC0                    	mov	es,ax			;calc what we needed
 27819 000011C5 29C3                    	sub	bx,ax
 27820                                  	; 24/10/2022
 27821 000011C7 B44A                    	mov	ah,4Ah ; SETBLOCK
 27822 000011C9 CD21                    	int	21h			;give the rest back
 27823                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 27824                                  		; ES = segment address of block to change
 27825                                  		; BX = new size in paragraphs
 27826 000011CB 06                      	push	es
 27827 000011CC 8CC0                    	mov	ax,es
 27828 000011CE 48                      	dec	ax
 27829 000011CF 8EC0                    	mov	es,ax			;point to arena
 27830                                  	;mov	word [es:ARENA.OWNER],8	;set impossible owner
 27831                                  	;;mov	word [es:ARENA.NAME],4453h	; System Data
 27832                                  	;mov	word [es:ARENA.NAME],'SD'	; System Data
 27833                                  	; 24/10/2022
 27834 000011D1 26C70601000800          	mov	word [es:1],8		;set impossible owner
 27835 000011D8 26C70608005344          	mov	word [es:8],'SD'	; System Data
 27836 000011DF 07                      	pop	es
 27837                                  
 27838 000011E0 BBFFFF                  	mov	bx,0FFFFh
 27839 000011E3 B448                    	mov	ah,48h ; ALLOC
 27840 000011E5 CD21                    	int	21h
 27841 000011E7 B448                    	mov	ah,48h ; ALLOC
 27842 000011E9 CD21                    	int	21h			; allocate the rest of the memory
 27843                                  		; DOS - 2+ - ALLOCATE MEMORY
 27844                                  		; BX = number of 16-byte paragraphs desired
 27845 000011EB A3[6403]                	mov	[memhi],ax		; start of the allocated memory
 27846 000011EE C706[6203]0000          	mov	word [memlo],0		;  to be used next.
 27847                                  
 27848                                  ;;;; at this moment,memory from [memhi]:0 to top-of-the memory is
 27849                                  ;;;; allocated.
 27850                                  ;;;; to protect sysinit,confbot module (from confbot (or =alloclim at
 27851                                  ;;;; this time) to the top-of-the memory),here we are going to
 27852                                  ;;;; 1). "setblock" from memhi to confbot.
 27853                                  ;;;; 2). "alloc" from confbot to the top of the memory.
 27854                                  ;;;; 3). "free alloc memory" from memhi to confbot.
 27855                                  
 27856                                  ;memory allocation for sysinit,confbot module.
 27857                                  
 27858 000011F4 8EC0                    	mov	es,ax
 27859                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27860                                  	; (SYSINIT:11DFh)
 27861 000011F6 8B1E[A302]              	mov	bx,[CONFBOT]
 27862                                  	; 24/10/2022
 27863                                  	;mov	bx,[top_of_cdss] ; mov bx,[confbot]
 27864 000011FA 29C3                    	sub	bx,ax			; confbot - memhi
 27865 000011FC 4B                      	dec	bx			; make a room for the memory block id.
 27866 000011FD 4B                      	dec	bx			; make sure!!!.
 27867 000011FE B44A                    	mov	ah,4Ah ; SETBLOCK
 27868 00001200 CD21                    	int	21h			; this will free (confbot to top of memory)
 27869                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 27870                                  		; ES = segment address of block to change
 27871                                  		; BX = new size in paragraphs
 27872 00001202 BBFFFF                  	mov	bx,0FFFFh
 27873 00001205 B448                    	mov	ah,48h ; ALLOC
 27874 00001207 CD21                    	int	21h
 27875 00001209 B448                    	mov	ah,48h ; ALLOC
 27876 0000120B CD21                    	int	21h			; allocate (confbot to top of memory)
 27877                                  		; DOS - 2+ - ALLOCATE MEMORY
 27878                                  		; BX = number of 16-byte paragraphs desired
 27879 0000120D A3[6803]                	mov	[area],ax		; save allocated memory segment.
 27880                                  					; need this to free this area for command.com.
 27881 00001210 8E06[6403]              	mov	es,[memhi]
 27882 00001214 B449                    	mov	ah,49h			; free allocated memory.
 27883 00001216 CD21                    	int	21h			; free (memhi to confbot(=area))
 27884                                  		; DOS - 2+ - FREE MEMORY
 27885                                  		; ES = segment address of area to be freed
 27886                                  endfile_ret:
 27887 00001218 C3                      	retn
 27888                                  
 27889                                  ; End of "EndFile" DOS structure configuration.
 27890                                  
 27891                                  ; ----------------------------------------------------------------------
 27892                                  ; 26/03/2019 - Retro DOS v4.0
 27893                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)	
 27894                                  ; ----------------------------------------------------------------------
 27895                                  ; Do_Install_Exec
 27896                                  ;
 27897                                  ; This procedure is used to EXEC a program being loaded via the 
 27898                                  ; "install=" mechanism in config.sys. It does this by setting up
 27899                                  ; the parameters, and then jumping to sysinit_base, which has been
 27900                                  ; setup in low memory. When complete, sysinit_base will jump back
 27901                                  ; up to this procedure (if sysinit remains uncorrupted by the installed
 27902                                  ; program).
 27903                                  
 27904                                  ;SYSINIT:10CFh:
 27905                                  
 27906                                  do_install_exec:			; now,handles install= command.
 27907                                  
 27908 00001219 56                      	push	si			; save si for config.sys again.
 27909                                  
 27910                                  ; we are going to call load/exec function.
 27911                                  ; set es:bx to the parameter block here;;;;;;;
 27912                                  ; set ds:dx to the asciiz string. remember that we already has 0
 27913                                  ; after the filename. so parameter starts after that. if next
 27914                                  ; character is a line feed (i.e. 10),then assume that the 0
 27915                                  ; we already encountered used to be a carrage return. in this
 27916                                  ; case,let's set the length to 0 which will be followed by
 27917                                  ; carridge return.
 27918                                  
 27919                                  ; es:si -> command line in config.sys. points to the first non blank
 27920                                  ;character after =.
 27921                                  
 27922 0000121A 06                      	push	es
 27923 0000121B 1E                      	push	ds
 27924 0000121C 07                      	pop	es
 27925 0000121D 1F                      	pop	ds			; es->sysinitseg,ds->confbot seg
 27926 0000121E 89F2                    	mov	dx,si			; ds:dx->file name,0 in config.sys image.
 27927                                  
 27928 00001220 31C9                    	xor	cx,cx
 27929 00001222 FC                      	cld
 27930 00001223 2EC606[F102]20          	mov	byte [cs:ldexec_start],' ' ; clear out the parm area
 27931 00001229 BF[F202]                	mov	di,ldexec_parm
 27932                                  installfilename:			; skip the file name
 27933 0000122C AC                      	lodsb				; al = ds:si; si++
 27934                                  	; 05/09/2023
 27935 0000122D 08C0                    	or	al,al
 27936                                  	;cmp	al,0
 27937 0000122F 7402                    	je	short got_installparm
 27938 00001231 EBF9                    	jmp	short installfilename
 27939                                  got_installparm:			; copy the parameters to ldexec_parm
 27940 00001233 AC                      	lodsb
 27941 00001234 268805                  	mov	[es:di],al
 27942 00001237 3C0A                    	cmp	al,lf	; cmp al,0Ah	; line feed?
 27943 00001239 7405                    	je	short done_installparm
 27944 0000123B FEC1                    	inc	cl			; # of char. in the parm.
 27945 0000123D 47                      	inc	di
 27946 0000123E EBF3                    	jmp	short got_installparm
 27947                                  done_installparm:
 27948 00001240 2E880E[F002]            	mov	byte [cs:ldexec_line],cl ; length of the parm.
 27949                                  	; 05/09/2023
 27950 00001245 08C9                    	or	cl,cl
 27951                                  	;cmp	cl,0			; if no parm,then
 27952 00001247 7506                    	jne	short install_seg_set 	; let the parm area
 27953 00001249 2EC606[F102]0D          	mov	byte [cs:ldexec_start],cr ; 0Dh 
 27954                                  					; starts with cr.
 27955                                  install_seg_set:
 27956                                  	; 05/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 27957 0000124F 31DB                    	xor	bx, bx
 27958                                  	;mov	word [cs:0],0		; make a null environment segment
 27959 00001251 2E891F                  	mov	[cs:bx], bx ; 05/09/2023
 27960 00001254 8CC8                    	mov	ax,cs			; by overlap jmp instruction of sysinitseg.
 27961                                  
 27962                                  ;---------------------------------------------------M067----------------
 27963                                  ;
 27964                                  ; 	the environment pointer is made 0. so the current environment ptr.
 27965                                  ; 	will be the same as pdb_environ which after dosinit is 0.
 27966                                  ;
 27967                                  ; 	mov	cs:[instexe.exec0_environ],0 ; set the environment seg.
 27968                                  ;
 27969                                  ; 	instexe.exec0_environ need not be initialized to 0 above. It was
 27970                                  ; 	done as a fix for bug #529. The actual bug was in NLSFUNC and
 27971                                  ; 	was fixed. 
 27972                                  ;
 27973                                  ; ----------------------------------------------------------------------
 27974                                  
 27975                                  ;;ifdef MULTI_CONFIG
 27976                                  
 27977                                  ; If there's any environment data in "config_wrkseg", pass to app
 27978                                  
 27979                                  ; 30/12/2022 - Retro DOS v4.0 (Modified MSDOS 6.21 IO.SYS SYSINIT)
 27980                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 27981                                  ;%if 0
 27982 00001256 89C1                    	mov	cx,ax ; *
 27983                                  	; 05/09/2023
 27984 00001258 2E391E[EC18]            	cmp	[cs:config_envlen],bx ; 0
 27985                                  	;cmp	word [cs:config_envlen],0
 27986 0000125D 7405                    	je	short no_envdata2
 27987 0000125F 2E8B0E[EE18]            	mov	cx,[cs:config_wrkseg] ; *
 27988                                  no_envdata2:
 27989                                  ;;endif  ;MULTI_CONFIG
 27990                                  
 27991                                  ;%endif	; 24/10/2022
 27992                                  
 27993                                  	;mov	[cs:instexe.exec0_environ],cx ; set the environment seg.
 27994                                  	; 05/09/2023 (BugFix)
 27995                                  	; 24/10/2022
 27996 00001264 2E890E[4203]            	mov	[cs:iexec.environ],cx ; *
 27997                                  	; 02/11/2022
 27998                                  	;mov	[cs:iexec.environ],ax	; 05/09/2023
 27999                                  
 28000                                  	;mov	[cs:instexe.exec0_com_line+2],ax ; set the seg.
 28001 00001269 2EA3[4603]              	mov	[cs:iexec.ldexec_line+2],ax
 28002                                  	;mov	[cs:instexe.exec0_5c_fcb+2],ax
 28003 0000126D 2EA3[4A03]              	mov	[cs:iexec.ldexec_5c_fcb+2],ax
 28004                                  	;mov	[cs:instexe.exec0_6c_fcb+2],ax
 28005 00001271 2EA3[4E03]              	mov	[cs:iexec.ldexec_6c_fcb+2],ax
 28006 00001275 E86000                  	call	sum_up
 28007 00001278 26A3[DA02]              	mov	[es:checksum],ax	; save the value of the sum
 28008 0000127C 31C0                    	xor	ax,ax
 28009 0000127E B44B                    	mov	ah,4Bh ; EXEC		; load/exec
 28010 00001280 BB[4203]                	mov	bx,instexe		; es:bx -> parm block.
 28011 00001283 06                      	push	es			; save es,ds for load/exec
 28012 00001284 1E                      	push	ds			; these registers will be restored in sysinit_base.
 28013 00001285 2EFF2E[D202]            	jmp	far [cs:sysinit_base_ptr] ; jmp to sysinit_base to execute
 28014                                  					; load/exec function and check sum.
 28015                                  
 28016                                  ;----------------------------------------
 28017                                  
 28018                                  ;j.k. this is the returning address from sysinit_base.
 28019                                  
 28020                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 28021                                  
 28022                                  sysinitptr:				; returning far address from sysinit_base
 28023 0000128A 5E                      	pop	si			; restore si for config.sys file.
 28024 0000128B 06                      	push	es
 28025 0000128C 1E                      	push	ds
 28026 0000128D 07                      	pop	es
 28027 0000128E 1F                      	pop	ds			; now ds - sysinitseg, es - confbot
 28028 0000128F 7305                            jnc     short install_exit_ret
 28029                                  
 28030 00001291 56                      	push	si			; error in loading the file for install=.
 28031 00001292 E85536                  	call	badload 		; es:si-> path,filename,0.
 28032 00001295 5E                      	pop	si
 28033                                  
 28034                                  	; 24/10/2022
 28035                                  	;jmp	short sysinitptr_retn ; (MSDOS 5.0 IO.SYS, SYSINIT:1140h)
 28036                                  	; 11/12/2022
 28037                                  	; ds = cs
 28038                                  
 28039                                  	; 30/12/2022 - Retro DOS v4.2
 28040                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:1283h)
 28041                                  
 28042                                  install_exit_ret:
 28043 00001296 C3                      	retn
 28044                                  
 28045                                  ; 30/12/2022 - Retro DOS v4.2
 28046                                  %if 0
 28047                                  install_exit_ret:
 28048                                  	;retn		; retn (MSDOS 6.21 IO.SYS, SYSINIT:1283h) ; 18/12/2022
 28049                                  
 28050                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS SYSINIT)
 28051                                  ;SYSINIT:1142h:
 28052                                  	mov     ah,4Dh
 28053                                  	int     21h             ; DOS - 2+ - GET EXIT CODE OF SUBPROGRAM (WAIT)
 28054                                  	cmp     ah,3
 28055                                  	jz      short sysinitptr_retn
 28056                                  	call    error_line
 28057                                  	stc
 28058                                  sysinitptr_retn:	; (SYSINIT:114Fh)
 28059                                  	retn		
 28060                                  
 28061                                  %endif ; 24/10/2022
 28062                                  
 28063                                  ; ----------------------------------------------------------------------
 28064                                  
 28065                                  ;**	ParaRound - Round Up length to paragraph multiple
 28066                                  ;
 28067                                  ;	ParaRound rounds a byte count up to a multiple of 16, then divides
 28068                                  ;	by 16 yielding a "length in paragraphs" value.
 28069                                  ;
 28070                                  ;	ENTRY	(ax) = byte length
 28071                                  ;	EXIT	(ax) = rounded up length in paragraphs
 28072                                  ;	USES	ax, flags
 28073                                  
 28074                                  ParaRound:
 28075 00001297 83C00F                  	add	ax,15
 28076 0000129A D1D8                    	rcr	ax,1
 28077 0000129C D1E8                    	shr	ax,1
 28078 0000129E D1E8                    	shr	ax,1
 28079 000012A0 D1E8                    	shr	ax,1
 28080 000012A2 C3                      	retn
 28081                                  
 28082                                  ; ----------------------------------------------------------------------
 28083                                  ; sysinit_base module.
 28084                                  ;
 28085                                  ; This module is relocated by the routine EndFile to a location in low
 28086                                  ; memory. It is then called by SYSINIT to perform the EXEC of programs
 28087                                  ; that are being loaded by the "install=" command. After the EXEC call
 28088                                  ; completes, this module performs a checksum on the SYSINIT code (at the
 28089                                  ; top of memory) to be sure that the EXECed program did not damage it.
 28090                                  ; If it did, then this module will print an error message and stop the
 28091                                  ; system. Otherwise, it returns control to SYSINIT.
 28092                                  ;
 28093                                  ;in: after relocation,
 28094                                  ;    ax = 4b00h - load and execute the program dos function.
 28095                                  ;    ds = confbot. segment of config.sys file image
 28096                                  ;    es = sysinitseg. segment of sysinit module itself.
 28097                                  ;    ds:dx = pointer to asciiz string of the path,filename to be executed.
 28098                                  ;    es:bx = pointer to a parameter block for load.
 28099                                  ;    SI_end (byte) - offset vaule of end of sysinit module label
 28100                                  ;    bigsize (word) - # of word from confbot to SI_end.
 28101                                  ;    chksum (word) - sum of every byte from confbot to SI_end in a
 28102                                  ;			word boundary moduler form.
 28103                                  ;    sysinit_ptr (dword ptr) - return address to sysinit module.
 28104                                  ;
 28105                                  ;note: sysinit should save necessary registers and when the control is back
 28106                                  
 28107                                  	; 24/10/2022
 28108                                  	; (SYSINIT:115Ch for MSDOS 5.0 SYSINIT)
 28109                                  sysinit_base:				
 28110 000012A3 2E8C166200              	mov	[cs:sysinit_base_ss],ss	; save stack
 28111 000012A8 2E89266400              	mov	[cs:sysinit_base_sp],sp	
 28112 000012AD CD21                    	int	21h			; load/exec dos call.
 28113 000012AF 2E8E166200              	mov	ss,[cs:sysinit_base_ss]	; restore stack
 28114 000012B4 2E8B266400              	mov	sp,[cs:sysinit_base_sp]
 28115 000012B9 1F                      	pop	ds			; restore confbot seg
 28116 000012BA 07                      	pop	es			; restore sysinitseg
 28117 000012BB 7216                    	jc	short sysinit_base_end	; load/exec function failed.
 28118                                  					; at this time,i don't have to worry about
 28119                                  					; that sysinit module has been broken or not.
 28120 000012BD E81800                  	call	sum_up			; otherwise,check if it is good.
 28121 000012C0 263906[DA02]            	cmp	[es:checksum],ax
 28122 000012C5 740C                    	je	short sysinit_base_end
 28123                                  
 28124                                  ;	memory broken. show "memory allocation error" message and stall.
 28125                                  
 28126 000012C7 B409                    	mov	ah,9
 28127 000012C9 0E                      	push	cs
 28128 000012CA 1F                      	pop	ds
 28129                                  	; 30/12/2022
 28130                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:12B8h)
 28131                                  	;mov	dx, 102
 28132 000012CB BA6600                  	mov	dx,mem_alloc_err_msgx-sysinit_base ; 65h (for MSDOS 5.0 SYSINIT)
 28133                                  					; 66h (for MSDOS 6.21 SYSINIT)
 28134 000012CE CD21                    	int	21h
 28135                                  		; DOS - PRINT STRING
 28136                                  		; DS:DX -> string terminated by "$"
 28137                                  
 28138                                  	; 30/12/2022 - Retro DOS v4.2
 28139                                  stall:
 28140                                  	; 24/10/2022
 28141                                  _stall: 
 28142                                  	; 11/12/2022
 28143 000012D0 F4                      	hlt 
 28144                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28145                                  	;hlt				;use HLT to minimize energy consumption
 28146 000012D1 EBFD                            jmp	short _stall
 28147                                  
 28148                                  sysinit_base_end: 
 28149 000012D3 26FF2E[D602]            	jmp	far [es:sysinit_ptr]	;return back to sysinit module
 28150                                  
 28151                                  ;-------------------------------------
 28152                                  
 28153                                  sum_up:
 28154                                  
 28155                                  ;in:   es - sysinitseg.
 28156                                  ;out:  ax - result
 28157                                  ;
 28158                                  ;remark: since this routine will only check starting from "locstack" to the end of
 28159                                  ;	 sysinit segment,the data area, and the current stack area are not
 28160                                  ;	 coverd. in this sense,this check sum routine only gives a minimal
 28161                                  ;	 gaurantee to be safe.
 28162                                  ;
 28163                                  ;first sum up confbot seg.
 28164                                  
 28165 000012D8 1E                      	push	ds
 28166                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28167                                  	; (SYSINIT:12C6h)
 28168 000012D9 26A1[A302]              	mov	ax,[es:CONFBOT]
 28169                                  	; 24/10/2022
 28170                                  	;mov	ax,[es:top_of_cdss]
 28171 000012DD 8ED8                    	mov	ds,ax
 28172 000012DF 31F6                    	xor	si,si
 28173 000012E1 31C0                    	xor	ax,ax
 28174 000012E3 268B0E[D002]            	mov	cx,[es:config_size]	; if config_size has been broken,then this
 28175                                  					; whole test better fail.
 28176 000012E8 D1E9                    	shr	cx,1			; make it a word count
 28177 000012EA 7406                    	jz	short sum_sys_code	; when config.sys file not exist.
 28178                                  sum1:
 28179 000012EC 0304                    	add	ax,[si]
 28180 000012EE 46                      	inc	si
 28181 000012EF 46                      	inc	si
 28182 000012F0 E2FA                    	loop	sum1
 28183                                  ;now,sum up sysinit module.
 28184                                  sum_sys_code:
 28185                                  	; 24/10/2022
 28186 000012F2 BEF212                  	mov	si,locstack ; 5A6h (MSDOS 5.0 IO.SYS, SYSINIT)
 28187                                  			    ; 532h (MSDOS 6.21 IO.SYS, SYSINIT)
 28188                                  				        ; starting after the stack.  M069
 28189                                  					;  this does not cover the possible stack code!!!
 28190                                  	;;mov	cx,22688  ; for MSDOS 6.21 IO.SYS
 28191                                  	; 02/11/2022
 28192                                  	;mov	cx,3D20h  ; (15648) for MSDOS 5.0 IO.SYS (SYSINIT)	
 28193                                  	; 30/12/2022  
 28194 000012F5 B9[8052]                	mov	cx,SI_end ; (22688) 	; SI_end is the label at the end of sysinit
 28195 000012F8 29F1                    	sub	cx,si			;  from after_checksum to SI_end
 28196 000012FA D1E9                    	shr	cx,1
 28197                                  sum2:
 28198 000012FC 260304                  	add	ax,[es:si]
 28199 000012FF 46                      	inc	si
 28200 00001300 46                      	inc	si
 28201 00001301 E2F9                    	loop	sum2
 28202 00001303 1F                      	pop	ds
 28203 00001304 C3                      	retn
 28204                                  
 28205                                  ; 24/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 28206                                  ; 30/12/2022 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 28207                                  ; (SYSINIT:12F2h)
 28208                                  
 28209                                  sysinit_base_ss equ $-sysinit_base  ; = 61 (MSDOS 5.0 IO.SYS, SYSINIT:115Ch)
 28210                                  ;SYSINIT:11BDh:			    ; = 62 (MSDOS 6.21 IO.SYS, SYSINIT:1290h) 	
 28211 00001305 0000                    	dw	0
 28212                                  sysinit_base_sp equ $-sysinit_base  ; = 63 (MSDOS 5.0 IO.SYS, SYSINIT:1161h)
 28213                                  ;SYSINIT:11BFh:			    ; = 64 (MSDOS 6.21 IO.SYS, SYSINIT:1292h)
 28214 00001307 0000                    	dw	0	
 28215                                  
 28216                                  mem_alloc_err_msgx:
 28217                                  
 28218                                         ;include msbio.cl4		; memory allocation error message
 28219                                  
 28220                                  ;SYSINIT:12F6:  ; MSDOS 6.21 IO.SYS SYSINIT:12F6h
 28221 00001309 0D0A                    	db	0Dh,0Ah
 28222 0000130B 4D656D6F727920616C-     	db 	'Memory allocation error $'
 28222 00001314 6C6F636174696F6E20-
 28222 0000131D 6572726F722024     
 28223                                  
 28224                                  end_sysinit_base: ; label byte
 28225                                  	; 24/10/2022
 28226                                  	; (SYSINIT:11DCh for MSDOS 5.0 SYSINIT)
 28227                                  
 28228                                  ; ----------------------------------------------------------------------
 28229                                  ; Set_Buffer
 28230                                  ;
 28231                                  ;function: set buffers in the real memory.				  
 28232                                  ;	   lastly set the memhi,memlo for the next available free address.
 28233                                  ;
 28234                                  ;input:    ds:bx -> buffinfo.
 28235                                  ;	   [memhi]:[memlo = 0] = available space for the hash bucket.	  
 28236                                  ;	   singlebuffersize = buffer header size + sector size		  
 28237                                  ;
 28238                                  ;output:   buffers Queue established.	       				   
 28239                                  ;	   [memhi]:[memlo] = address of the next available free space.	   
 28240                                  ; ----------------------------------------------------------------------
 28241                                  
 28242                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 28243                                  	; (SYSINIT:11DCh)
 28244                                  
 28245                                  set_buffer:
 28246 00001324 30D2                    	xor	dl,dl				; assume buffers not in HMA
 28247 00001326 E85500                  	call	GetBufferAddr
 28248 00001329 7402                    	jz	short set_buff_1
 28249 0000132B B201                    	mov	dl,1				; buffers in HMA
 28250                                  set_buff_1:
 28251                                  	; 25/10/2022
 28252                                  	;mov	[bx+BUFFINF.Buff_Queue],di	; head of Buff Q
 28253 0000132D 893F                    	mov	[bx],di
 28254                                  	;mov	[bx+BUFFINF.Buff_Queue+2],es
 28255 0000132F 8C4702                  	mov	[bx+2],es
 28256                                  	;mov	word [bx+BUFFINF.Dirty_Buff_Count],0 ;set dirty_count to 0.
 28257 00001332 C747040000              	mov	word [bx+4],0
 28258                                  
 28259 00001337 89F8                    	mov	ax,di
 28260 00001339 2E8B0E[9902]            	mov	cx,[cs:buffers]
 28261 0000133E 57                      	push	di				; remember first buffer
 28262                                  
 28263                                  ;	for each buffer
 28264                                  
 28265                                  nxt_buff:
 28266 0000133F E86100                  	call	set_buffer_info 		; set buf_link,buf_id...
 28267 00001342 89C7                    	mov	di,ax
 28268 00001344 E2F9                    	loop	nxt_buff
 28269                                  
 28270 00001346 2E2B3E[9D02]            	sub	di,[cs:singlebuffersize]	; point to last buffer
 28271                                  
 28272 0000134B 59                      	pop	cx				; get first buffer
 28273                                  	;mov	[es:di+buffinfo.buf_next],cx	; last->next = first
 28274 0000134C 26890D                  	mov	[es:di],cx
 28275 0000134F 87CF                    	xchg	cx,di
 28276                                  	;mov	[es:di+buffinfo.buf_prev],cx	; first->prev = last
 28277                                  	; 25/10/2022
 28278 00001351 26894D02                	mov	[es:di+2],cx
 28279                                  
 28280 00001355 08D2                    	or	dl,dl				; In HMa ?
 28281 00001357 7417                    	jz	short set_buff_2		; no
 28282                                  	;mov	byte [bx+BUFFINF.Buff_In_HMA],1
 28283 00001359 C6470C01                	mov	byte [bx+12],1
 28284 0000135D 2EA1[6403]              	mov	ax,[cs:memhi]			; seg of scratch buff
 28285                                  	;mov	word [bx+BUFFINF.Lo_Mem_Buff],0	; offset of sctarch buff is 0
 28286 00001361 C7470D0000              	mov	word [bx+13],0
 28287                                  	;mov	[bx+BUFFINF.Lo_Mem_Buff+2],ax
 28288 00001366 89470F                  	mov	word [bx+15],ax
 28289 00001369 2EA1[9D02]              	mov	ax,[cs:singlebuffersize]	; size of scratch buff
 28290                                  	;; 05/09/2023
 28291                                  	;;sub	ax,24 ; bufinsiz		; (bufinsiz is 24 in PCDOS 7.1)
 28292 0000136D 83E814                  	sub	ax,20
 28293                                  set_buff_2:
 28294 00001370 2E0106[6203]            	add	[cs:memlo],ax
 28295                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 28296 00001375 2E800E[F518]02          	or	byte [cs:setdevmarkflag],2
 28297                                  	;call	round
 28298                                  	;retn
 28299                                  	; 12/12/2022
 28300 0000137B E93233                  	jmp	round
 28301                                  
 28302                                  ; ----------------------------------------------------------------------
 28303                                  ; procedure : GetBufferAddr
 28304                                  ;
 28305                                  ;	      Gets the buffer address either in HMA or in Lo Mem
 28306                                  ;
 28307                                  ; returns in es:di the buffer adress
 28308                                  ; returns NZ if allocated in HMA
 28309                                  ; ----------------------------------------------------------------------
 28310                                  
 28311                                  	; 25/10/2022 
 28312                                  GetBufferAddr:
 28313 0000137E 53                      	push	bx
 28314 0000137F 52                      	push	dx
 28315 00001380 2EA1[9D02]              	mov	ax, [cs:singlebuffersize]
 28316 00001384 2EF726[9902]            	mul	word [cs:buffers]
 28317                                  	;add	ax,0Fh
 28318 00001389 83C00F                  	add	ax,15 
 28319                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28320                                  	;and	ax,~15	; 0FFF0h	; para round
 28321                                  	; 12/12/2022
 28322 0000138C 24F0                    	and	al,~15	; 0F0h
 28323 0000138E 89C3                    	mov	bx,ax
 28324 00001390 B8024A                  	mov	ax,4A02h
 28325                                  	;mov	ax,((multMULT<<8)+multMULTALLOCHMA)
 28326 00001393 CD2F                    	int	2Fh
 28327 00001395 83FFFF                  	cmp	di,0FFFFh
 28328 00001398 7506                    	jne	short got_hma
 28329                                  	
 28330                                  	;mov	di,0			; dont xor di,di Z flag needed
 28331                                  	; 05/09/2023
 28332                                  	; zf=1
 28333 0000139A 47                      	inc	di ; 0FFFFh -> 0
 28334                                  	; zf=1
 28335                                  	
 28336                                  	;zf=1
 28337                                  	;xor	di,di	; 25/10/2022
 28338                                  	;zf=1
 28339 0000139B 2E8E06[6403]            	mov	es,[cs:memhi]
 28340                                  got_hma:
 28341 000013A0 5A                      	pop	dx
 28342 000013A1 5B                      	pop	bx
 28343 000013A2 C3                      	retn
 28344                                  
 28345                                  ; ----------------------------------------------------------------------
 28346                                  
 28347                                  set_buffer_info:
 28348                                  
 28349                                  ;function: set buf_link,buf_id,buf_sector
 28350                                  ;
 28351                                  ;in: es:di -> buffer header to be set.
 28352                                  ;    ax = di
 28353                                  ;
 28354                                  ;out:
 28355                                  ;    above entries set.
 28356                                  
 28357                                  	; 25/10/2022 
 28358 000013A3 2EFF36[BD02]            	push	word [cs:buf_prev_off]
 28359                                  	;pop	word [es:di+buffinfo.buf_prev]
 28360 000013A8 268F4502                	pop	word [es:di+2]
 28361 000013AC 2EA3[BD02]              	mov	[cs:buf_prev_off],ax
 28362 000013B0 2E0306[9D02]            	add	ax,[cs:singlebuffersize]	;adjust ax
 28363                                  	;mov	[es:di+buffinfo.buf_next],ax
 28364 000013B5 268905                  	mov	[es:di],ax
 28365                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh  ; new buffer free
 28366 000013B8 26C74504FF00            	mov	word [es:di+4],00FFh
 28367                                  	;mov	word [es:di+buffinfo.buf_sector],0   ; to compensate the masm 3 bug
 28368 000013BE 26C745060000            	mov	word [es:di+6],0
 28369                                  	;mov	word [es:di+buffinfo.buf_sector+2],0 ; to compensate the masm 3 bug
 28370 000013C4 26C745080000            	mov	word [es:di+8],0
 28371 000013CA C3                      	retn
 28372                                  
 28373                                  ; ======================================================================
 28374                                  ; MSSTACK initialization routine - MSDOS 6.0 - SYSDINIT1.ASM - 1991
 28375                                  ; ----------------------------------------------------------------------
 28376                                  ; 27/03/2019 - Retro DOS v4.0
 28377                                  
 28378                                  ; ----------------------------------------------------------------------
 28379                                  ; ibmstack initialization routine.
 28380                                  ;
 28381                                  ;	to follow the standard interrupt sharing scheme, msstack.asm
 28382                                  ;	has been modified. this initialization routine also has to
 28383                                  ;	be modified because for the interrupt level 7 and 15, firstflag
 28384                                  ;	should be set to signal that this interrupt handler is the
 28385                                  ;	first handler hooked to this interrupt vector.
 28386                                  ;	we determine this by looking at the instruction pointed by
 28387                                  ;	this vector. if it is iret, then this handler should be the
 28388                                  ;	first one. in our case, only the interrupt vector 77h is the
 28389                                  ;	interrupt level 15. (we don't hook interrupt level 7.)
 28390                                  ;
 28391                                  ;	the followings are mainly due to m.r.t; ptm fix of p886 12/3/86
 28392                                  ;	some design changes are needed to the above interrupt sharing
 28393                                  ;	method. the above sharing scheme assumes that 1). interrupt
 28394                                  ;	sharing is never done on levels that have bios support. 2). "phantom"
 28395                                  ;	interrupts would only be generated on levels 7 and 15.
 28396                                  ;	these assumptions are not true any more. we have to use the firstflag
 28397                                  ;	for every level of interrupt. we will set the firstflag on the following
 28398                                  ;	conditions:
 28399                                  ;
 28400                                  ;	 a.	 if the cs portion of the vector is 0000, then "first"
 28401                                  ;	 b. else if cs:ip points to valid shared header, then not "first"
 28402                                  ;	 c. else if cs:ip points to an iret, then "first"
 28403                                  ;	 d. else if cs:ip points to dummy, then "first"
 28404                                  ;
 28405                                  ;	where dummy is - the cs portion must be f000, and the ip portion must
 28406                                  ;	be equal to the value at f000:ff01. this location is the initial value
 28407                                  ;	from vector_table for interrupt 7, one of the preserved addresses in all
 28408                                  ;	the bioses for all of the machines.
 28409                                  ;
 28410                                  ;	system design group requests bios to handle the phantom interrupts.
 28411                                  ;
 28412                                  ;	the "phantom" interrupt is an illegal interrupt such as an interrupt
 28413                                  ;	produced by the bogus adapter card even without interrupt request is
 28414                                  ;	set.  more specifically, 1). the 8259 has a feature when running in
 28415                                  ;	edge triggered mode to latch a pulse and present the interrupt when
 28416                                  ;	the processor indicates interrupt acknowledge (inta). the interrupt
 28417                                  ;	pulse was exist at the time of inta to get a "phantom" interrupt.
 28418                                  ;	2). or, this is caused by adapter cards placing a glitch on the
 28419                                  ;	interrupt line.
 28420                                  ;
 28421                                  ;	to handle those "phantom" interrupts, the main stack code will check
 28422                                  ;	the own firstflag, and if it is not "first" (which means the forward
 28423                                  ;	pointer points to the legal shared interrupt handler), then pass the
 28424                                  ;	control. if it is the first, then the following action should be
 28425                                  ;	taken. we don't have to implement skack logic in this case.
 28426                                  ;
 28427                                  ;	to implement this logic, we rather choose a simple method.
 28428                                  ;	if ont of the above "firstflag" conditions is met, we are not
 28429                                  ;	going to hook this interrupt vector. the reason is if the original
 28430                                  ;	vector points to "iret" and do nothing, we don't need
 28431                                  ;	to implement the stack logic for it. this will simplify implementation
 28432                                  ;	while maintaining compatibility with the old version of dos.
 28433                                  ;	this implies that in the main stack code, there might be a stack code
 28434                                  ;	that will never be used, a dead code.
 28435                                  ;
 28436                                  ;in - cs, ds -> sysinitseg, es -> relocated stack code & data.
 28437                                  
 28438                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 28439                                  	; (SYSINIT:1287h)
 28440                                  
 28441                                  	; 14/12/2022
 28442                                  stackinit:
 28443 000013CB 50                      	push	ax
 28444 000013CC 1E                      	push	ds
 28445 000013CD 06                      	push	es
 28446 000013CE 53                      	push	bx
 28447 000013CF 51                      	push	cx
 28448 000013D0 52                      	push	dx
 28449 000013D1 57                      	push	di
 28450 000013D2 56                      	push	si
 28451 000013D3 55                      	push	bp
 28452                                  
 28453                                  ;currently es -> stack code area
 28454                                  
 28455                                  	; 12/12/2022
 28456                                  	; ds = cs
 28457 000013D4 A1[8C02]                	mov	ax,[stack_count]
 28458 000013D7 89C1                    	mov	cx,ax  ; *!*!*  
 28459                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28460                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1290h)
 28461                                  	;mov	ax,[cs:stack_count] ; !!	;defined in cs
 28462 000013D9 26A3[0200]              	mov	[es:stackcount],ax		;defined in stack code area
 28463                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1298h)
 28464 000013DD A1[8E02]                	mov	ax,[stack_size]	 ; !!		;in cs
 28465 000013E0 26A3[0600]              	mov	[es:stacksize],ax
 28466                                  	; 12/12/2022
 28467 000013E4 A1[9002]                	mov	ax,[stack_addr]			; offset
 28468                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28469                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 28470                                  	;mov	ax,[cs:stack_addr]  ; !!
 28471 000013E7 26A3[0800]              	mov	[es:stacks],ax
 28472                                  	; 12/12/2022
 28473 000013EB 89C5                    	mov	bp,ax ; *!*
 28474 000013ED A1[9202]                	mov	ax,[stack_addr+2]
 28475                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28476                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 28477                                  	;mov	ax,[cs:stack_addr+2] ; !!	; segment
 28478 000013F0 26A3[0A00]              	mov	[es:stacks+2],ax
 28479                                  
 28480                                  ; initialize the data fields with the parameters
 28481                                  
 28482                                  ; "firstentry" will always be at stacks
 28483                                  
 28484                                  	;mov	bp,[es:stacks]			; get offset of stack
 28485                                  	; 12/12/2022
 28486                                  	; bp = [es:stacks] ; *!*
 28487 000013F4 26892E[0C00]            	mov	[es:firstentry],bp
 28488                                  
 28489                                  ; the stacks will always immediately follow the table entries
 28490                                  
 28491 000013F9 B80800                  	mov	ax,entrysize ; 8
 28492                                  	;mov	cx,[es:stackcount]
 28493                                  	; 12/12/2022
 28494                                  	; cx = [es:stackcount] ; *!*!*
 28495 000013FC F7E1                    	mul	cx
 28496 000013FE 01E8                    	add	ax,bp
 28497 00001400 26A3[0400]              	mov	[es:stackat],ax
 28498 00001404 89C3                    	mov	bx,ax
 28499 00001406 83EB02                  	sub	bx,2
 28500                                  
 28501                                  ; zero the entire stack area to start with
 28502                                  
 28503 00001409 268B3E[0400]            	mov	di,[es:stackat]
 28504 0000140E 26A1[0600]              	mov	ax,[es:stacksize]
 28505 00001412 F7E1                    	mul	cx
 28506 00001414 89C1                    	mov	cx,ax
 28507 00001416 31C0                    	xor	ax,ax
 28508 00001418 06                      	push	es
 28509 00001419 1F                      	pop	ds				;ds = relocated stack code seg.
 28510                                  
 28511                                  ;now, ds -> stack code area
 28512                                  
 28513 0000141A 8E06[0A00]              	mov	es,[stacks+2]			; get segment of stack area.
 28514 0000141E FC                      	cld
 28515 0000141F F3AA                    	rep	stosb
 28516                                  
 28517 00001421 8B0E[0200]              	mov	cx,[stackcount]
 28518                                  
 28519                                  ; loop for "count" times, building a table entry
 28520                                  ;  cs = sysinitseg, ds = relocated stack code seg, es = segment of stack space
 28521                                  ;  cx = number of entries
 28522                                  ;  es:bp => base of stacks - 2
 28523                                  ;  es:bx => first table entry
 28524                                  
 28525                                  buildloop:
 28526                                  	; 11/12/2022
 28527                                  	;mov	byte [es:bp+allocbyte],free	; mov [es:bp+0],0
 28528                                  	; 25/10/2022
 28529                                  	;mov	byte [es:bp],free
 28530                                  	; 06/07/2023
 28531 00001425 26884600                	mov	[es:bp],al ; 0 ; free
 28532 00001429 26884601                	mov	[es:bp+intlevel],al	; ax = 0
 28533                                  	;mov	[es:bp+1],al
 28534 0000142D 26894602                	mov	[es:bp+savedsp],ax
 28535                                  	;mov	[es:bp2],ax
 28536 00001431 26894604                	mov	[es:bp+savedss],ax
 28537                                  	;mov	[es:bp+4],ax
 28538 00001435 031E[0600]              	add	bx,[stacksize]
 28539 00001439 26895E06                	mov	[es:bp+newsp],bx		; mov [es:bp+6],bx
 28540                                  	;mov	[es:bp+6],bx
 28541 0000143D 26892F                  	mov	[es:bx],bp
 28542 00001440 83C508                  	add	bp,entrysize ; 8
 28543                                  
 28544 00001443 E2E0                    	loop	buildloop
 28545                                  
 28546 00001445 83ED08                  	sub	bp,entrysize ; 8
 28547 00001448 892E[0E00]              	mov	[lastentry],bp
 28548 0000144C 892E[1000]              	mov	[nextentry],bp
 28549                                  
 28550 00001450 1E                      	push	ds
 28551                                  	;mov	ax,0F000h		;look at the model byte
 28552                                  	; 05/09/2023
 28553 00001451 B4F0                    	mov	ah,0F0h ; ax = 0F000h
 28554 00001453 8ED8                    	mov	ds,ax
 28555 00001455 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 28556 0000145A 1F                      	pop	ds
 28557 0000145B 7504                    	jne	short skip_disablenmis
 28558                                  
 28559 0000145D B007                    	mov	al,07h			; disable convertible nmis
 28560 0000145F E672                    	out	72h,al
 28561                                  
 28562                                  skip_disablenmis:
 28563 00001461 31C0                    	xor	ax,ax
 28564 00001463 8EC0                    	mov	es,ax			;es - segid of vector table at 0
 28565                                  					;ds - relocated stack code segment
 28566 00001465 FA                      	cli
 28567                                  
 28568                                  	;irp	aa,<02,08,09,70>
 28569                                  	;
 28570                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 28571                                  	;mov	di,offset int19old&aa	;we have to set old&aa for int19 handler too.
 28572                                  	;mov	bx,offset old&aa	;pass where to save original owner pointer
 28573                                  	;mov	dx,offset int&aa	;pass where new handler is
 28574                                  	;call	new_init_loop		;adjust the vector to new handler,
 28575                                  	;				;saving pointer to original owner
 28576                                  	;endm
 28577                                  
 28578                                  stkinit_02:
 28579 00001466 BE0800                  	mov	si,02h*4 ; 8
 28580 00001469 BF[B305]                	mov	di,INT19OLD02
 28581 0000146C BB[1200]                	mov	bx,old02
 28582 0000146F BA[1600]                	mov	dx,int02
 28583 00001472 E84801                  	call	new_init_loop
 28584                                  stkinit_08:
 28585 00001475 BE2000                  	mov	si,08h*4 ; 32
 28586 00001478 BF[B805]                	mov	di,INT19OLD08
 28587 0000147B BB[3800]                	mov	bx,old08
 28588 0000147E BA[3C00]                	mov	dx,int08
 28589 00001481 E83901                  	call	new_init_loop
 28590                                  stkinit_09:
 28591 00001484 BE2400                  	mov	si,09h*4 ; 36
 28592 00001487 BF[BD05]                	mov	di,INT19OLD09
 28593 0000148A BB[4100]                	mov	bx,old09
 28594 0000148D BA[4500]                	mov	dx,int09
 28595 00001490 E82A01                  	call	new_init_loop
 28596                                  stkinit_70:
 28597 00001493 BEC001                  	mov	si,70h*4 ; 448
 28598 00001496 BF[DB05]                	mov	di,INT19OLD70
 28599 00001499 BB[4E00]                	mov	bx,old70
 28600 0000149C BA[5200]                	mov	dx,int70
 28601 0000149F E81B01                  	call	new_init_loop
 28602                                  
 28603                                  	;irp	aa,<0a,0b,0c,0d,0e,72,73,74,76,77> ;shared interrupts
 28604                                  	;
 28605                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 28606                                  	;push	ds			;save relocated stack code segment
 28607                                  	;lds	bx, es:[si]		;ds:bx -> original interrupt handler
 28608                                  	;push	ds
 28609                                  	;pop	dx			;dx = segment value
 28610                                  	;	
 28611                                  	;cmp	dx,0
 28612                                  	;jz	int&aa&_first
 28613                                  	;
 28614                                  	;cmp	byte ptr ds:[bx],0cfh	;does vector point to an iret?
 28615                                  	;jz	int&aa&_first
 28616                                  	;
 28617                                  	;cmp	word ptr ds:[bx.6],424bh ;magic offset (see int&aa, msstack.inc)
 28618                                  	;jz	int&aa&_not_first
 28619                                  	;
 28620                                  	;cmp	dx,0f000h		;rom bios segment
 28621                                  	;jnz	int&aa&_not_first
 28622                                  	;
 28623                                  	;push	es
 28624                                  	;push	dx
 28625                                  	;mov	dx,0f000h
 28626                                  	;mov	es,dx
 28627                                  	;cmp	bx,word ptr es:0ff01h
 28628                                         	;pop	dx
 28629                                  	;pop	es
 28630                                  	;jz	int&aa&_first
 28631                                  	;
 28632                                  ;int&aa&_not_first:			;not the first. we are going to hook vector.
 28633                                  	;pop	ds
 28634                                  	;mov	di, offset int19old&aa	;we have to set old&aa for int19 handler too.
 28635                                  	;mov	bx, offset old&aa	;pass where to save original owner pointer
 28636                                  	;mov	dx, offset int&aa	;pass where new handler is
 28637                                  	;call	new_init_loop		;adjust the vector to new handler, saving
 28638                                  	;				;pointer to original owner.
 28639                                  	;jmp	short int&aa&_end
 28640                                  ;int&aa&_first:				;the first. don't have to hook stack code.
 28641                                  	;pop	ds
 28642                                  ;int&aa&_end:
 28643                                  	;
 28644                                  	;endm
 28645                                  
 28646                                  stkinit_0A:
 28647 000014A2 BE2800                  	mov	si,0Ah*4 ; 40
 28648                                  	
 28649                                  ; 14/12/2022
 28650                                  %if 0	
 28651                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 28652                                  	push	ds
 28653                                  	
 28654                                  	lds	bx,[es:si]
 28655                                  	push	ds
 28656                                  	pop	dx
 28657                                  		
 28658                                  	cmp	dx,0
 28659                                  	je	short int_0A_first
 28660                                  	
 28661                                  	cmp	byte [bx],0CFh
 28662                                  	je	short int_0A_first
 28663                                  	
 28664                                  	cmp	word [bx+6],424Bh
 28665                                  	je	short int_0A_not_first
 28666                                  	
 28667                                  	cmp	dx,0F000h
 28668                                  	jne	short int_0A_not_first
 28669                                  	
 28670                                  	push	es
 28671                                  	push	dx
 28672                                  	mov	dx,0F000h
 28673                                  	mov	es,dx
 28674                                  	cmp	bx,[es:0FF01h]
 28675                                         	pop	dx
 28676                                  	pop	es
 28677                                  	je	short int_0A_first
 28678                                  %Endif
 28679                                  
 28680                                  	; 14/12/2022
 28681                                  	; 25/10/2022
 28682 000014A5 E8EB00                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 28683 000014A8 730C                    	jnc	short int_0A_first
 28684                                  	
 28685                                  int_0A_not_first:
 28686                                  	; 14/12/2022
 28687                                  	; 25/10/2022
 28688                                  	;pop	ds
 28689 000014AA BF[C205]                	mov	di,INT19OLD0A
 28690 000014AD BB[5900]                	mov	bx,old0A
 28691 000014B0 BA[5700]                	mov	dx,int0A
 28692 000014B3 E80701                  	call	new_init_loop
 28693                                  	
 28694                                  	; 14/12/2022	
 28695                                  	;jmp	short int_0A_end
 28696                                  ;int_0A_first:
 28697                                  	; 25/10/2022
 28698                                  	;pop	ds
 28699                                  
 28700                                  	; 14/12/2022
 28701                                  int_0A_first:
 28702                                  int_0A_end:
 28703                                  
 28704                                  stkinit_0B:
 28705 000014B6 BE2C00                  	mov	si,0Bh*4 ; 44
 28706                                  	
 28707                                  	; 14/12/2022
 28708                                  	; 25/10/2022
 28709 000014B9 E8D700                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 28710 000014BC 730C                    	jnc	short int_0B_end ; int_0B_first
 28711                                  
 28712                                  ; 14/12/2022
 28713                                  %if 0	
 28714                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 28715                                  	push	ds
 28716                                  	lds	bx,[es:si]
 28717                                  	push	ds
 28718                                  	pop	dx
 28719                                  		
 28720                                  	cmp	dx,0
 28721                                  	je	short int_0B_first
 28722                                  
 28723                                  	cmp	byte [bx],0CFh
 28724                                  	je	short int_0B_first
 28725                                  	
 28726                                  	cmp	word [bx+6],424Bh
 28727                                  	je	short int_0B_not_first
 28728                                  	
 28729                                  	cmp	dx,0F000h
 28730                                  	jne	short int_0B_not_first
 28731                                  
 28732                                  	push	es
 28733                                  	push	dx
 28734                                  	mov	dx,0F000h
 28735                                  	mov	es,dx
 28736                                  	cmp	bx,[es:0FF01h]
 28737                                  	pop	dx
 28738                                  	pop	es
 28739                                  	je	short int_0B_first
 28740                                  %endif
 28741                                  
 28742                                  int_0B_not_first:
 28743                                  	; 14/12/2022
 28744                                  	; 25/10/2022
 28745                                  	;pop	ds
 28746 000014BE BF[C705]                	mov	di,INT19OLD0B
 28747 000014C1 BB[7100]                	mov	bx,old0B
 28748 000014C4 BA[6F00]                	mov	dx,int0B
 28749 000014C7 E8F300                  	call	new_init_loop
 28750                                  
 28751                                  	; 14/12/2022
 28752                                  	;jmp	short int_0B_end
 28753                                  ;int_0B_first:
 28754                                  	; 25/10/2022
 28755                                  	;pop	ds
 28756                                  
 28757                                  int_0B_end:
 28758                                  	
 28759                                  stkinit_0C:
 28760 000014CA BE3000                  	mov	si,0Ch*4 ; 48
 28761                                  	
 28762                                  	; 14/12/2022
 28763                                  	; 25/10/2022
 28764 000014CD E8C300                  	call	int_xx_first_check
 28765 000014D0 730C                    	jnc	short int_0C_end ; int_0C_first
 28766                                  
 28767                                  ; 14/12/2022
 28768                                  %if 0	
 28769                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 28770                                  	push	ds
 28771                                  	lds	bx,[es:si]
 28772                                  	push	ds
 28773                                  	pop	dx
 28774                                  		
 28775                                  	cmp	dx,0
 28776                                  	je	short int_0C_first
 28777                                  
 28778                                  	cmp	byte [bx],0CFh
 28779                                  	je	short int_0C_first
 28780                                  	
 28781                                  	cmp	word [bx+6],424Bh
 28782                                  	je	short int_0C_not_first
 28783                                  	
 28784                                  	cmp	dx,0F000h
 28785                                  	jne	short int_0C_not_first
 28786                                  
 28787                                  	push	es
 28788                                  	push	dx
 28789                                  	mov	dx,0F000h
 28790                                  	mov	es,dx
 28791                                  	cmp	bx,[es:0FF01h]
 28792                                  	pop	dx
 28793                                  	pop	es
 28794                                  	je	short int_0C_first
 28795                                  %endif
 28796                                  	
 28797                                  int_0C_not_first:
 28798                                  	; 14/12/2022
 28799                                  	; 25/10/2022
 28800                                  	;pop	ds
 28801 000014D2 BF[CC05]                	mov	di,INT19OLD0C
 28802 000014D5 BB[8900]                	mov	bx,old0C
 28803 000014D8 BA[8700]                	mov	dx,int0C
 28804 000014DB E8DF00                  	call	new_init_loop
 28805                                  
 28806                                  	; 14/12/2022
 28807                                  	;jmp	short int_0C_end
 28808                                  ;int_0C_first:
 28809                                  	; 25/10/2022
 28810                                  	;pop	ds
 28811                                  
 28812                                  int_0C_end:
 28813                                  
 28814                                  stkinit_0D:
 28815 000014DE BE3400                  	mov	si,0Dh*4 ; 52
 28816                                  
 28817                                  	; 14/12/2022	
 28818                                  	; 25/10/2022
 28819 000014E1 E8AF00                  	call	int_xx_first_check
 28820 000014E4 730C                    	jnc	short int_0D_end ; int_0D_first
 28821                                  
 28822                                  ; 14/12/2022
 28823                                  %if 0	
 28824                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 28825                                  	push	ds
 28826                                  	lds	bx,[es:si]
 28827                                  	push	ds
 28828                                  	pop	dx
 28829                                  		
 28830                                  	cmp	dx,0
 28831                                  	je	short int_0D_first
 28832                                  
 28833                                  	cmp	byte [bx],0CFh
 28834                                  	je	short int_0D_first
 28835                                  	
 28836                                  	cmp	word [bx+6],424Bh
 28837                                  	je	short int_0D_not_first
 28838                                  	
 28839                                  	cmp	dx,0F000h
 28840                                  	jne	short int_0D_not_first
 28841                                  
 28842                                  	push	es
 28843                                  	push	dx
 28844                                  	mov	dx,0F000h
 28845                                  	mov	es,dx
 28846                                  	cmp	bx,[es:0FF01h]
 28847                                  	pop	dx
 28848                                  	pop	es
 28849                                  	je	short int_0D_first
 28850                                  %endif
 28851                                  	
 28852                                  int_0D_not_first:
 28853                                  	; 14/12/2022
 28854                                  	; 25/10/2022
 28855                                  	;pop	ds
 28856 000014E6 BF[D105]                	mov	di,INT19OLD0D
 28857 000014E9 BB[A100]                	mov	bx,old0D
 28858 000014EC BA[9F00]                	mov	dx,int0D
 28859 000014EF E8CB00                  	call	new_init_loop
 28860                                  
 28861                                  	; 14/12/2022
 28862                                  	;jmp	short int_0D_end
 28863                                  	; 02/11/2022
 28864                                  ;int_0D_first:
 28865                                  	;pop	ds
 28866                                  
 28867                                  int_0D_end:
 28868                                  
 28869                                  stkinit_0E:
 28870 000014F2 BE3800                  	mov	si,0Eh*4 ; 56
 28871                                  
 28872                                  	; 14/12/2022	
 28873                                  	; 25/10/2022
 28874 000014F5 E89B00                  	call	int_xx_first_check
 28875 000014F8 730C                    	jnc	short int_0E_end ; int_0E_first
 28876                                  
 28877                                  ; 14/12/2022
 28878                                  %if 0	
 28879                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 28880                                  	push	ds
 28881                                  	lds	bx,[es:si]
 28882                                  	push	ds
 28883                                  	pop	dx
 28884                                  		
 28885                                  	cmp	dx,0
 28886                                  	je	short int_0E_first
 28887                                  
 28888                                  	cmp	byte [bx],0CFh
 28889                                  	je	short int_0E_first
 28890                                  	
 28891                                  	cmp	word [bx+6],424Bh
 28892                                  	je	short int_0E_not_first
 28893                                  	
 28894                                  	cmp	dx,0F000h
 28895                                  	jne	short int_0E_not_first
 28896                                  
 28897                                  	push	es
 28898                                  	push	dx
 28899                                  	mov	dx,0F000h
 28900                                  	mov	es,dx
 28901                                  	cmp	bx,[es:0FF01h]
 28902                                  	pop	dx
 28903                                  	pop	es
 28904                                  	je	short int_0E_first
 28905                                  %endif
 28906                                  	
 28907                                  int_0E_not_first:
 28908                                  	; 14/12/2022
 28909                                  	; 25/10/2022
 28910                                  	;pop	ds
 28911 000014FA BF[D605]                	mov	di,INT19OLD0E
 28912 000014FD BB[B900]                	mov	bx,old0E
 28913 00001500 BA[B700]                	mov	dx,int0E
 28914 00001503 E8B700                  	call	new_init_loop
 28915                                  
 28916                                  	; 14/12/2022
 28917                                  	;jmp	short int_0E_end
 28918                                  ;int_0E_first:
 28919                                  	; 25/10/2022
 28920                                  	;pop	ds	
 28921                                  
 28922                                  int_0E_end:
 28923                                  
 28924                                  stkinit_72:
 28925 00001506 BEC801                  	mov	si,72h*4 ; 456
 28926                                  	
 28927                                  	; 14/12/2022
 28928                                  	; 25/10/2022
 28929 00001509 E88700                  	call	int_xx_first_check
 28930 0000150C 730C                    	jnc	short int_72_end ; int_72_first
 28931                                  
 28932                                  ; 14/12/2022
 28933                                  %if 0	
 28934                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 28935                                  	push	ds
 28936                                  	lds	bx,[es:si]
 28937                                  	push	ds
 28938                                  	pop	dx
 28939                                  		
 28940                                  	cmp	dx,0
 28941                                  	je	short int_72_first
 28942                                  
 28943                                  	cmp	byte [bx],0CFh
 28944                                  	je	short int_72_first
 28945                                  	
 28946                                  	cmp	word [bx+6],424Bh
 28947                                  	je	short int_72_not_first
 28948                                  	
 28949                                  	cmp	dx,0F000h
 28950                                  	jne	short int_72_not_first
 28951                                  
 28952                                  	push	es
 28953                                  	push	dx
 28954                                  	mov	dx,0F000h
 28955                                  	mov	es,dx
 28956                                  	cmp	bx,[es:0FF01h]
 28957                                  	pop	dx
 28958                                  	pop	es
 28959                                  	je	short int_72_first
 28960                                  %endif
 28961                                  	
 28962                                  int_72_not_first:
 28963                                  	; 14/12/2022
 28964                                  	; 25/10/2022
 28965                                  	;pop	ds
 28966 0000150E BF[E005]                	mov	di,INT19OLD72
 28967 00001511 BB[D100]                	mov	bx,old72
 28968 00001514 BA[CF00]                	mov	dx,int72
 28969 00001517 E8A300                  	call	new_init_loop
 28970                                  
 28971                                  	; 14/12/2022
 28972                                  	;jmp	short int_72_end
 28973                                  ;int_72_first:
 28974                                  	; 25/10/2022
 28975                                  	;pop	ds
 28976                                  
 28977                                  int_72_end:
 28978                                  
 28979                                  stkinit_73:
 28980 0000151A BECC01                  	mov	si,73h*4 ; 460
 28981                                  	
 28982                                  	; 14/12/2022
 28983                                  	; 25/10/2022
 28984 0000151D E87300                  	call	int_xx_first_check
 28985 00001520 730C                    	jnc	short int_73_end ; int_73_first
 28986                                  
 28987                                  ; 14/12/2022
 28988                                  %if 0	
 28989                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 28990                                  	push	ds
 28991                                  	lds	bx,[es:si]
 28992                                  	push	ds
 28993                                  	pop	dx
 28994                                  		
 28995                                  	cmp	dx,0
 28996                                  	je	short int_73_first
 28997                                  
 28998                                  	cmp	byte [bx],0CFh
 28999                                  	je	short int_73_first
 29000                                  	
 29001                                  	cmp	word [bx+6],424Bh
 29002                                  	je	short int_73_not_first
 29003                                  	
 29004                                  	cmp	dx,0F000h
 29005                                  	jne	short int_73_not_first
 29006                                  
 29007                                  	push	es
 29008                                  	push	dx
 29009                                  	mov	dx,0F000h
 29010                                  	mov	es,dx
 29011                                  	cmp	bx,[es:0FF01h]
 29012                                  	pop	dx
 29013                                  	pop	es
 29014                                  	je	short int_73_first
 29015                                  %endif	
 29016                                  	
 29017                                  int_73_not_first:
 29018                                  	; 14/12/2022
 29019                                  	; 25/10/2022
 29020                                  	;pop	ds
 29021 00001522 BF[E505]                	mov	di,INT19OLD73
 29022 00001525 BB[E900]                	mov	bx,old73
 29023 00001528 BA[E700]                	mov	dx,int73
 29024 0000152B E88F00                  	call	new_init_loop
 29025                                  
 29026                                  	; 14/12/2022
 29027                                  	;jmp	short int_73_end
 29028                                  ;int_73_first:
 29029                                  	; 25/10/2022
 29030                                  	;pop	ds
 29031                                  
 29032                                  int_73_end:
 29033                                  
 29034                                  stkinit_74:
 29035 0000152E BED001                  	mov	si,74h*4 ; 464
 29036                                  	
 29037                                  	; 14/12/2022
 29038                                  	; 25/10/2022
 29039 00001531 E85F00                  	call	int_xx_first_check
 29040 00001534 730C                    	jnc	short int_74_end ; int_74_first
 29041                                  
 29042                                  ; 14/12/2022
 29043                                  %if 0		
 29044                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 29045                                  	push	ds
 29046                                  	lds	bx,[es:si]
 29047                                  	push	ds
 29048                                  	pop	dx
 29049                                  		
 29050                                  	cmp	dx,0
 29051                                  	je	short int_74_first
 29052                                  
 29053                                  	cmp	byte [bx],0CFh
 29054                                  	je	short int_74_first
 29055                                  	
 29056                                  	cmp	word [bx+6],424Bh
 29057                                  	je	short int_74_not_first
 29058                                  	
 29059                                  	cmp	dx,0F000h
 29060                                  	jne	short int_74_not_first
 29061                                  
 29062                                  	push	es
 29063                                  	push	dx
 29064                                  	mov	dx,0F000h
 29065                                  	mov	es,dx
 29066                                  	cmp	bx,[es:0FF01h]
 29067                                  	pop	dx
 29068                                  	pop	es
 29069                                  	je	short int_74_first
 29070                                  %endif
 29071                                  
 29072                                  int_74_not_first:
 29073                                  	; 14/12/2022
 29074                                  	; 25/10/2022
 29075                                  	;pop	ds
 29076 00001536 BF[EA05]                	mov	di,INT19OLD74
 29077 00001539 BB[0101]                	mov	bx,old74
 29078 0000153C BA[FF00]                	mov	dx,int74
 29079 0000153F E87B00                  	call	new_init_loop
 29080                                  	
 29081                                  	; 14/12/2022
 29082                                  	;jmp	short int_74_end
 29083                                  ;int_74_first:
 29084                                  	; 25/10/2022
 29085                                  	;pop	ds
 29086                                  
 29087                                  int_74_end:
 29088                                  
 29089                                  stkinit_76:
 29090 00001542 BED801                  	mov	si,76h*4 ; 472
 29091                                  	
 29092                                  	; 14/12/2022
 29093                                  	; 25/10/2022
 29094 00001545 E84B00                  	call	int_xx_first_check
 29095 00001548 730E                    	jnc	short int_76_end ; int_76_first
 29096                                  
 29097                                  ; 14/12/2022
 29098                                  %if 0	
 29099                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 29100                                  	push	ds
 29101                                  	lds	bx,[es:si]
 29102                                  	push	ds
 29103                                  	pop	dx
 29104                                  		
 29105                                  	cmp	dx,0
 29106                                  	je	short int_76_first
 29107                                  
 29108                                  	cmp	byte [bx],0CFh
 29109                                  	je	short int_76_first
 29110                                  	
 29111                                  	cmp	word [bx+6],424Bh
 29112                                  	je	short int_76_not_first
 29113                                  	
 29114                                  	cmp	dx,0F000h
 29115                                  	jne	short int_76_not_first
 29116                                  
 29117                                  	push	es
 29118                                  	push	dx
 29119                                  	mov	dx,0F000h
 29120                                  	mov	es,dx
 29121                                  	cmp	bx,[es:0FF01h]
 29122                                  	pop	dx
 29123                                  	pop	es
 29124                                  	je	short int_76_first
 29125                                  %endif
 29126                                  	
 29127                                  int_76_not_first:
 29128                                  	; 14/12/2022
 29129                                  	; 25/10/2022
 29130                                  	;pop	ds
 29131 0000154A BF[EF05]                	mov	di,INT19OLD76
 29132 0000154D BB[1901]                	mov	bx,old76
 29133 00001550 BA[1701]                	mov	dx,int76
 29134 00001553 E86700                  	call	new_init_loop
 29135                                  
 29136                                  	; 14/12/2022
 29137 00001556 EB00                    	jmp	short int_76_end
 29138                                  ;int_76_first:
 29139                                  	; 25/10/2022
 29140                                  	;pop	ds
 29141                                  
 29142                                  int_76_end:
 29143                                  
 29144                                  stkinit_77:
 29145 00001558 BEDC01                  	mov	si,77h*4 ; 476
 29146                                  	
 29147                                  	; 14/12/2022
 29148                                  	; 25/10/2022
 29149 0000155B E83500                  	call	int_xx_first_check
 29150 0000155E 730C                    	jnc	short int_77_end ; int_77_first
 29151                                  
 29152                                  ; 14/12/2022
 29153                                  %if 0	
 29154                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 29155                                  	push	ds
 29156                                  	lds	bx,[es:si]
 29157                                  	push	ds
 29158                                  	pop	dx
 29159                                  		
 29160                                  	cmp	dx,0
 29161                                  	je	short int_77_first
 29162                                  
 29163                                  	cmp	byte [bx],0CFh
 29164                                  	je	short int_77_first
 29165                                  	
 29166                                  	cmp	word [bx+6],424Bh
 29167                                  	je	short int_77_not_first
 29168                                  	
 29169                                  	cmp	dx,0F000h
 29170                                  	jne	short int_77_not_first
 29171                                  
 29172                                  	push	es
 29173                                  	push	dx
 29174                                  	mov	dx,0F000h
 29175                                  	mov	es,dx
 29176                                  	cmp	bx,[es:0FF01h]
 29177                                  	pop	dx
 29178                                  	pop	es
 29179                                  	je	short int_77_first
 29180                                  %endif
 29181                                  	
 29182                                  int_77_not_first:
 29183                                  	; 14/12/2022
 29184                                  	; 25/10/2022
 29185                                  	;pop	ds
 29186 00001560 BF[F405]                	mov	di,INT19OLD77
 29187 00001563 BB[3101]                	mov	bx,old77
 29188 00001566 BA[2F01]                	mov	dx,int77
 29189 00001569 E85100                  	call	new_init_loop
 29190                                  
 29191                                  	; 14/12/2022
 29192                                  	;jmp	short int_77_end
 29193                                  ;int_77_first:
 29194                                  	; 25/10/2022
 29195                                  	;pop	ds
 29196                                  
 29197                                  int_77_end:
 29198 0000156C 1E                      	push	ds
 29199 0000156D B800F0                  	mov	ax,0F000h		; look at the model byte
 29200 00001570 8ED8                    	mov	ds,ax
 29201 00001572 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; pc convertible?
 29202 00001577 1F                      	pop	ds
 29203 00001578 7504                    	jne	short skip_enablenmis
 29204                                  
 29205 0000157A B027                    	mov	al,27h			; enable convertible nmis
 29206 0000157C E672                    	out	72h,al
 29207                                  
 29208                                  ; 25/10/2022
 29209                                  ; (MSDOS 5.0 SYSINIT:15FBh)
 29210                                  
 29211                                  skip_enablenmis:
 29212 0000157E FB                      	sti
 29213                                  	;;mov	ax,Bios_Data ; 70h
 29214                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 29215                                  	; 21/10/2022
 29216 0000157F B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 29217 00001582 8ED8                    	mov	ds,ax
 29218                                  
 29219                                  	;mov	[640h],1 ; SYSINIT:1736h for MSDOS 6.21 IO.SYS
 29220                                  
 29221 00001584 C606[B105]01            	mov	byte [INT19SEM],1	; indicate that int 19
 29222                                  					; initialization is complete
 29223                                  
 29224 00001589 5D                      	pop	bp			; restore all
 29225 0000158A 5E                      	pop	si
 29226 0000158B 5F                      	pop	di
 29227 0000158C 5A                      	pop	dx
 29228 0000158D 59                      	pop	cx
 29229 0000158E 5B                      	pop	bx
 29230 0000158F 07                      	pop	es
 29231 00001590 1F                      	pop	ds
 29232 00001591 58                      	pop	ax
 29233 00001592 C3                      	retn
 29234                                  
 29235                                  ; 14/12/2022
 29236                                  ; ----------------------------------------------------------------------
 29237                                  
 29238                                  	; 14/12/2022
 29239                                  	; 25/10/2022
 29240                                  ;%if 0
 29241                                  	; 27/03/2019 - Retro DOS v4.0
 29242                                  int_xx_first_check:
 29243 00001593 1E                      	push	ds
 29244 00001594 26C51C                  	lds	bx,[es:si]
 29245 00001597 1E                      	push	ds
 29246 00001598 5A                      	pop	dx
 29247                                  		
 29248                                  	;cmp	dx,0
 29249                                  	;je	short int_xx_first
 29250                                  	; 05/09/2023
 29251 00001599 21D2                    	and	dx,dx
 29252 0000159B 741E                    	jz	short int_xx_first
 29253                                  	
 29254 0000159D 803FCF                  	cmp	byte [bx],0CFh
 29255 000015A0 7419                    	je	short int_xx_first
 29256                                  	
 29257 000015A2 817F064B42              	cmp	word [bx+6],424Bh
 29258 000015A7 7411                    	je	short int_xx_not_first
 29259                                  	
 29260 000015A9 81FA00F0                	cmp	dx,0F000h
 29261 000015AD 750B                    	jne	short int_xx_not_first
 29262                                  
 29263 000015AF 06                      	push	es
 29264                                  	;push	dx
 29265                                  	;mov	dx,0F000h
 29266 000015B0 8EC2                    	mov	es,dx
 29267 000015B2 263B1E01FF              	cmp	bx,[es:0FF01h]
 29268                                        	;pop	dx
 29269 000015B7 07                      	pop	es
 29270 000015B8 7401                    	je	short int_xx_first
 29271                                  
 29272                                  int_xx_not_first:
 29273 000015BA F9                      	stc
 29274                                  int_xx_first:
 29275 000015BB 1F                      	pop	ds
 29276 000015BC C3                      	retn
 29277                                  
 29278                                  ;%endif
 29279                                  
 29280                                  ; ----------------------------------------------------------------------
 29281                                  ; 27/03/2019 - Retro DOS v4.0
 29282                                  
 29283                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 29284                                  ; (SYSINIT:1610h)
 29285                                  
 29286                                  new_init_loop:
 29287                                  
 29288                                  ;input: si=ofset into vector table of the particular int vector being adjusted
 29289                                  ;	bx=ds:offset of oldxx, where will be saved the pointer to original owner
 29290                                  ;	dx=ds:offset of intxx, the new interrupt handler
 29291                                  ;	di=offset value of int19old&aa variable in bios.
 29292                                  ;	es=zero, segid of vector table
 29293                                  ;	ds=relocated stack code segment
 29294                                  
 29295 000015BD 268B04                  	mov	ax,[es:si]		;remember offset in vector
 29296 000015C0 8907                    	mov	[bx],ax			; to original owner in ds
 29297 000015C2 268B4402                	mov	ax,[es:si+2]		;remember segid in vector
 29298 000015C6 894702                  	mov	[bx+2],ax		; to original owner in ds
 29299                                  
 29300 000015C9 1E                      	push	ds
 29301                                  	;;mov	ax,Bios_Data ; 70h
 29302                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 29303                                  	; 21/10/2022
 29304 000015CA B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 29305 000015CD 8ED8                    	mov	ds,ax			;set int19oldxx value in bios for
 29306 000015CF 268B04                  	mov	ax,[es:si]		;int 19 handler
 29307 000015D2 8905                    	mov	[di],ax
 29308 000015D4 268B4402                	mov	ax,[es:si+2]
 29309 000015D8 894502                  	mov	[di+2],ax
 29310 000015DB 1F                      	pop	ds
 29311                                  
 29312 000015DC 268914                  	mov	[es:si],dx  	;set vector to point to new int handler
 29313 000015DF 268C5C02                	mov	[es:si+2],ds
 29314 000015E3 C3                      	retn
 29315                                  
 29316                                  ; End of STACK initialization routine
 29317                                  ; ----------------------------------------------------------------------
 29318                                  
 29319                                  ; ----------------------------------------------------------------------
 29320                                  ;set the devmark for mem command.
 29321                                  ;in: [memhi] - the address to place devmark
 29322                                  ;    [memlo] = 0
 29323                                  ;    al = id for devmark_id
 29324                                  ;out: devmark established.
 29325                                  ;     the address saved in cs:[devmark_addr]
 29326                                  ;     [memhi] increase by 1.
 29327                                  ; ----------------------------------------------------------------------
 29328                                  
 29329                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 29330                                  ; (SYSINIT:1637h)
 29331                                  ; 04/09/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 29332                                  ; (SYSINIT:176Ch)
 29333                                  
 29334                                  ; 04/09/2023 - PCDOS 7.1 - IBMBIO.COM (SYSINIT:1944h)
 29335                                  
 29336                                  setdevmark:
 29337                                  
 29338                                  	; 04/09/2023
 29339                                  	;push	es
 29340                                  	;push	cx
 29341                                  
 29342 000015E4 2E8B0E[6403]            	mov	cx,[cs:memhi]
 29343 000015E9 2E890E[F318]            	mov	[cs:devmark_addr],cx
 29344 000015EE 8EC1                    	mov	es,cx
 29345                                  	; 25/10/2022
 29346                                  	;mov	[es:devmark.id],al
 29347 000015F0 26A20000                	mov	[es:0],al
 29348 000015F4 41                      	inc	cx
 29349                                  	;mov	[es:devmark.seg],cx
 29350 000015F5 26890E0100              	mov	[es:1],cx
 29351                                  
 29352                                  	; 04/09/2023
 29353                                  	;pop	cx
 29354                                  	;pop	es
 29355                                  	
 29356 000015FA 2EFF06[6403]            	inc	word [cs:memhi]
 29357 000015FF C3                      	retn
 29358                                  
 29359                                  ; ----------------------------------------------------------------------
 29360                                  ; SYSPRE.ASM - MSDOS 6.0 - 1992
 29361                                  ; ----------------------------------------------------------------------
 29362                                  ;; pre-load and final placement of dblspace.bin
 29363                                  ;
 29364                                  ; 08/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 29365                                  ; ===========================================================
 29366                                  
 29367                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1964h)
 29368                                  ;;; --------------------------------------------------------------------
 29369 00001600 [0416]                  MagicDDNamePtr:	dw MagicDDName	; "\DBLSPACE.BIN"
 29370 00001602 433A                    		db 'C:'
 29371 00001604 5C44424C5350414345-     MagicDDName:	db '\DBLSPACE.BIN',0
 29371 0000160D 2E42494E00         
 29372 00001612 433A5C535441434B45-     StackerName:	db 'C:\STACKER.BIN',0
 29372 0000161B 522E42494E00       
 29373                                  tiny_stub_start:
 29374 00001621 FFFF                    		dw 0FFFFh	; phony device driver link
 29375 00001623 FFFF                    		dw 0FFFFh	; dw -1, -1
 29376 00001625 0080                    		dw 8000h	; mark as character device for MEM display
 29377 00001627 00000000                		dw 2 dup(0)	; strategy and interrupt
 29378 0000162B 44424C5342494E24        		db 'DBLSBIN$'	; magic default load
 29379                                  tiny_stub_end:			; (tiny_stub_end-tiny_stub_start = 18)
 29380                                  
 29381                                  ; =============== S U B R O U T I N E ==================================
 29382                                  
 29383                                  ; 08/04/2024 - Retro DOS v5.0
 29384                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1997h)
 29385                                  
 29386                                  ;***	MagicPreload - pre-load dblspace.bin
 29387                                  ;
 29388                                  ;	EXIT	ax = error code, 00 means none.
 29389                                  ;		ZF = true if ax == 0
 29390                                  
 29391                                  MagicPreload:
 29392 00001633 2EC606[F518]00          	mov	byte [cs:setdevmarkflag],0 ; not for devmark
 29393 00001639 E87430                  	call	round
 29394 0000163C 0E                      	push	cs
 29395 0000163D 07                      	pop	es
 29396 0000163E 2EC606[B723]00          	mov	byte [cs:DeviceHi],0	; not to be loaded in UMB
 29397 00001644 E8DC1D                  	call	InitDevLoad		; set up sub-arena, DevLoadAddr,
 29398                                  					;  DevLoadEnd, and DevEntry
 29399                                  					;  gets arena name from bpb_addr
 29400                                  
 29401                                  ;	check to make sure device driver fits our available space.
 29402                                  
 29403 00001647 2EA1[9B23]              	mov	ax,[cs:DevLoadAddr]
 29404 0000164B 2E0306[9923]            	add	ax,[cs:DevSize]		; calculate seg after DD load
 29405 00001650 7270                    	jc	short pre_exit_err	; choke if overflows address space
 29406 00001652 2E3B06[9D23]            	cmp	ax,[cs:DevLoadEnd]	; does it overflow available space?
 29407 00001657 7769                    	ja	short pre_exit_err
 29408                                  
 29409                                  _LoadDev:				; we're golden if not
 29410 00001659 0E                      	push	cs
 29411 0000165A 1F                      	pop	ds
 29412 0000165B 2E8B16[0016]            	mov	dx,[cs:MagicDDNamePtr]
 29413 00001660 E8011F                  	call	ExecDev			; load device driver using exec call
 29414 00001663 725D                    	jb	short pre_exit_err
 29415 00001665 2EC41E[9F23]            	les	bx,[cs:DevEntry]	; point to the Magic DD header
 29416 0000166A 26817F122C2E            	cmp	word [es:bx+12h],2E2Ch	; is it our stamp? ; ',.'
 29417 00001670 7550                    	jnz	short pre_exit_err
 29418 00001672 2EC706[9003]1400        	mov	word [cs:MagicBackdoor],14h ; save the backdoor entry.
 29419                                  			  		; (initial IP -EXE header offset 20-)
 29420 00001679 2E8C06[9203]            	mov	[cs:MagicBackdoor+2],es
 29421 0000167E 0E                      	push	cs
 29422 0000167F 07                      	pop	es
 29423 00001680 BB[6F03]                	mov	bx,packet
 29424 00001683 2EC706[7D03]0000        	mov	word [cs:break_addr],0
 29425 0000168A 2EA1[9D23]              	mov	ax,[cs:DevLoadEnd]
 29426 0000168E 2EA3[7F03]              	mov	[cs:break_addr+2],ax
 29427 00001692 2EA0[8503]              	mov	al,[cs:drivenumber]	; pass drive number to DBLSPACE as if
 29428 00001696 2EA2[8503]              	mov	[cs:devdrivenum],al	; it is a normal block device driver
 29429 0000169A B80A00                  	mov	ax,10			; DS_INTERNAL_REVISION
 29430                                  			  		; tell it what revision we expect
 29431 0000169D 2EFF1E[9003]            	call	far [cs:MagicBackdoor]	; first time call is init entry point
 29432                                  			  		; with a standard device driver
 29433                                  			  		; init packet at es:bx
 29434 000016A2 7322                    	jnb	short no_driver_version_fail ; skip if not a version failure
 29435 000016A4 B80600                  	mov	ax,6			; DS_INTERNAL_REVISION_6 ; (Stacker ?)
 29436                                  			  		; tell it what revision we expect
 29437 000016A7 2EFF1E[9003]            	call	far [cs:MagicBackdoor]
 29438 000016AC 7318                    	jnb	short no_driver_version_fail
 29439                                  
 29440                                  ;	In this case, we're going to display a message
 29441                                  
 29442 000016AE 0E                      	push	cs
 29443 000016AF 1F                      	pop	ds
 29444 000016B0 BA[4B52]                	mov	dx,baddblspace		; "Required system component is not instal"...
 29445 000016B3 E85C32                  	call	print			; display the message
 29446                                  
 29447                                  ;	point backdoor call back to safe far return
 29448                                  
 29449                                  fail_driver_load:
 29450 000016B6 2E8C0E[9203]            	mov	[cs:MagicBackdoor+2],cs
 29451 000016BB 2EC706[9003][9403]      	mov	word [cs:MagicBackdoor],NullBackdoor
 29452                                  pre_exit_err:
 29453 000016C2 B84000                  	mov	ax,40h			; SYSPRE_BADFILE_ERROR
 29454                                  			  		; (problem loading dblspace.bin)
 29455 000016C5 C3                      	retn
 29456                                  
 29457                                  no_driver_version_fail:
 29458 000016C6 09C0                    	or	ax,ax			; error code returned?
 29459 000016C8 75EC                    	jnz	short fail_driver_load
 29460                                  
 29461                                  magic_is_resident:
 29462 000016CA 2EA1[7D03]              	mov	ax,[cs:break_addr]
 29463 000016CE E8C6FB                  	call	ParaRound	 	; convert to paragraphs
 29464 000016D1 2E0306[7F03]            	add	ax,[cs:break_addr+2]
 29465 000016D6 2EA3[A523]              	mov	[cs:DevBrkAddr+2],ax
 29466 000016DA 2EC706[A323]0000        	mov	word [cs:DevBrkAddr],0	; store normalized end here
 29467 000016E1 BB0400                  	mov	bx,4			; inquire how many paragraphs it wants
 29468 000016E4 2EFF1E[9003]            	call	far [cs:MagicBackdoor]
 29469 000016E9 2E8B1E[A502]            	mov	bx,[cs:ALLOCLIM]	; get top of free memory
 29470 000016EE 29C3                    	sub	bx,ax			; see how much we'll lower it
 29471 000016F0 2E3B1E[A523]            	cmp	bx,[cs:DevBrkAddr+2]	; is there that much room free?
 29472 000016F5 7216                    	jb	short cant_move_driver
 29473                                  	;sub	[cs:ALLOCLIM],ax	; (mov [cs:ALLOCLIM],bx)
 29474 000016F7 2E891E[A502]            	mov	[cs:ALLOCLIM],bx ; Retro DOS v5.0 ; 08/04/2024
 29475 000016FC 2E8E06[A502]            	mov	es,[cs:ALLOCLIM]
 29476 00001701 BB0600                  	mov	bx,6			; tell the driver to move itself
 29477 00001704 2EFF1E[9003]            	call	far [cs:MagicBackdoor]
 29478 00001709 2EA3[A523]              	mov	[cs:DevBrkAddr+2],ax	; save end of low stub
 29479                                  
 29480                                  cant_move_driver:
 29481 0000170D 2EA1[A523]              	mov	ax,[cs:DevBrkAddr+2]	; get terminate segment
 29482 00001711 2E3B06[9D23]            	cmp	ax,[cs:DevLoadEnd]	; terminate size TOO big?
 29483 00001716 77AA                    	ja	short pre_exit_err	; error out if so
 29484                                  
 29485                                  ;------ deal with block device drivers
 29486                                  
 29487                                  _isblock:				; if no units found,erase the device
 29488 00001718 2EA0[7C03]              	mov	al,[cs:unitcount]
 29489 0000171C 08C0                    	or	al,al
 29490 0000171E 74A2                    	jz	short pre_exit_err
 29491 00001720 30E4                    	xor	ah,ah
 29492 00001722 2EC536[9F23]            	lds	si,[cs:DevEntry]	; set ds:si to header
 29493 00001727 88440A                  	mov	[si+10],al		; mov [si+SYSDEV.NAME],al
 29494                                  			 		; number of units in name field
 29495                                  			  		; device drivers are *supposed*
 29496                                  			  		; to do this for themselves.
 29497 0000172A 89C1                    	mov	cx,ax
 29498 0000172C 2EC43E[6D02]            	les	di,[cs:DOSINFO]		; es:di point to dos info
 29499 00001731 268A6520                	mov	ah,[es:di+20h]		; [es:di+SYSI_NUMIO]
 29500                                  			  		; get number of devices
 29501 00001735 88E2                    	mov	dl,ah
 29502 00001737 00C4                    	add	ah,al			; check for too many devices
 29503 00001739 80FC1A                  	cmp	ah,26			; 'A' - 'Z' is 26 devices
 29504 0000173C 7784                    	ja	short pre_exit_err
 29505 0000173E 2E800E[F518]02          	or	byte [cs:setdevmarkflag],2
 29506 00001744 E87D1E                  	call	DevSetBreak
 29507 00001747 7303                    	jnb	short _ok_block
 29508 00001749 E976FF                  	jmp	pre_exit_err
 29509                                  
 29510                                  _ok_block:
 29511 0000174C 26886520                	mov	[es:di+20h],ah		; [es:di+SYSI_NUMIO] ; update the amount
 29512                                  
 29513 00001750 2EC51E[8103]            	lds	bx,[cs:bpb_addr]	; point to bpb array (*)
 29514 00001755 30F6                    	xor	dh,dh
 29515                                  
 29516                                  _perunit:
 29517 00001757 2EC42E[6D02]            	les	bp,[cs:DOSINFO]
 29518 0000175C 26C46E00                	les	bp,[es:bp+0]		; [es:bp.sysi_dpb]
 29519                                  			  		; get first dpb
 29520                                  			  		; [es:bp+SysInitvars.SYSI_DPB] ; [es:bp+0]
 29521                                  _scandpb:
 29522 00001760 26837E19FF              	cmp	word [es:bp+19h],0FFFFh ; -1 ; [es:bp.dpb_next_dpb]
 29523 00001765 7406                    	jz	short _foundpb
 29524 00001767 26C46E19                	les	bp,[es:bp+19h]		; les bp,[es:bp.dpb_next_dpb]
 29525                                  			  		; [es:bp+DPB.NEXT_DPB]
 29526 0000176B EBF3                    	jmp	short _scandpb
 29527                                  
 29528                                  ;	We've found the end of the DPB chain. Now extend it.
 29529                                  
 29530                                  _foundpb:
 29531 0000176D 2EA1[A323]              	mov	ax,[cs:DevBrkAddr]
 29532 00001771 26894619                	mov	[es:bp+19h],ax		; [es:bp.dpb_next_dpb] ; DPB.NEXT_DPB
 29533 00001775 2EA1[A523]              	mov	ax,[cs:DevBrkAddr+2]
 29534 00001779 2689461B                	mov	[es:bp+1Bh],ax		; [es:bp.dpb_next_dpb+2] ; DPB.NEXT_DPB+2
 29535 0000177D 2EC42E[A323]            	les	bp,[cs:DevBrkAddr]
 29536 00001782 26C74619FFFF            	mov	word [es:bp+19h],0FFFFh ; -1
 29537 00001788 26C64618FF              	mov	byte [es:bp+18h],0FFh	; [es:bp.dpb_first_access],-1
 29538                                  			  		; DPB.FIRST_ACCESS
 29539 0000178D 2E8306[A323]3D          	add	word [cs:DevBrkAddr],61 ; DPBSIZ ; 3Dh
 29540 00001793 E80D1E                  	call	RoundBreakAddr
 29541 00001796 8B37                    	mov	si,[bx]	  		; ds:si points to bpb (*)
 29542                                  			 		 ; (mov si,[bx] ..and then.. add bx,2)
 29543                                  			  		; Note: If unit count > 1,bx points to a BPB in the BPB array,
 29544                                  			  		; the array address is in [bpb_addr] (*)
 29545                                  			  		; Erdogan Tan - 07/07/2023
 29546 00001798 26885600                	mov	[es:bp+0],dl   		; mov word [es:bp.dpb_drive],dx
 29547                                  			  		; [es:bp+DPB.DRIVE],dl
 29548 0000179C 26887601                	mov	[es:bp+1],dh   		; [es:bp+DPB.UNIT],dh
 29549 000017A0 52                      	push	dx
 29550 000017A1 51                      	push	cx
 29551 000017A2 BA5241                  	mov	dx,4152h		; DX = signature 4152h ('AR') for FAT32 extended BPB/DPB
 29552 000017A5 31C9                    	xor	cx,cx	; 0
 29553 000017A7 26894E1D                	mov	[es:bp+1Dh],cx		; DPB.NEXT_FREE ; last allocated cluster #
 29554 000017AB 394C0B                  	cmp	[si+0Bh],cx		; BPB.fatsecs16 ; [si+A_BPB.BPB_SECTORSPERFAT]
 29555 000017AE 7514                    	jnz	short _setdpb		; FAT DPB (33 bytes)
 29556                                  			  		; FAT32 DPB (61 bytes)
 29557 000017B0 26894E39                	mov	[es:bp+39h],cx		; DPB.RESERVED = 0
 29558 000017B4 26894E3B                	mov	[es:bp+3Bh],cx		; DPB.RESERVED+2 = 0
 29559 000017B8 49                      	dec	cx			; 0FFFFh ; -1
 29560 000017B9 26894E1F                	mov	[es:bp+1Fh],cx		; DPB.FREE_CNT (-1 = unknown)
 29561 000017BD 26894E21                	mov	[es:bp+21h],cx		; DPB.FREE_CNT+2 (-1 = unknown)
 29562 000017C1 B95845                  	mov	cx,4558h		; CX = signature 4558h ('EX') for FAT32 extended BPB/DPB
 29563                                  
 29564                                  _setdpb:
 29565 000017C4 B453                    	mov	ah,53h		; SETDPB ; hidden system call
 29566 000017C6 CD21                    	int	21h		; DOS - 2+ internal - TRANSLATE BIOS PARAMETER BLOCK
 29567                                  			  	; DS:SI -> BPB (BIOS Parameter Block)
 29568                                  			  	; ES:BP -> buffer for DOS Drive Parameter Block
 29569                                  			  	; (if CX=4558h & DX=4152h,FAT32 Extended DPB will be set)
 29570 000017C8 59                      	pop	cx
 29571 000017C9 5A                      	pop	dx
 29572 000017CA 268B4602                	mov	ax,[es:bp+2]		; [es:bp.dpb_sector_size]  ; [es:bp+DPB.SECTOR_SIZE]
 29573 000017CE 06                      	push	es
 29574 000017CF 2EC43E[6D02]            	les	di,[cs:DOSINFO]
 29575 000017D4 263B4510                	cmp	ax,[es:di+10h]		; [es:di.sysi_maxsec] ; [es:di+SysInitvars.SYSI_MAXSEC]
 29576 000017D8 07                      	pop	es
 29577 000017D9 7604                    	jbe	short _iblk_1
 29578 000017DB B84000                  	mov	ax,40h			; SYSPRE_BADFILE_ERROR ; (pre_exit_err)
 29579                                  					; (problem loading dblspace.bin)
 29580 000017DE C3                      	retn
 29581                                  
 29582                                  _iblk_1:
 29583 000017DF 1E                      	push	ds
 29584 000017E0 2EC506[9F23]            	lds	ax,[cs:DevEntry]
 29585 000017E5 26894613                	mov	[es:bp+13h],ax		; [es:bp+DPB.DRIVER_ADDR]
 29586 000017E9 268C5E15                	mov	[es:bp+15h],ds		; [es:bp+DPB.DRIVER_ADDR+2]
 29587 000017ED 1F                      	pop	ds
 29588 000017EE FEC2                    	inc	dl			; increment drive number
 29589 000017F0 FEC6                    	inc	dh			; increment unit number
 29590 000017F2 43                      	inc	bx
 29591 000017F3 43                      	inc	bx			; point to next BPB
 29592                                  					; (in the BPB array) (*) -add bx,2-
 29593 000017F4 49                      	dec	cx			; loop _foundpb
 29594 000017F5 7403                    	jz	short _linkit
 29595 000017F7 E973FF                  	jmp	_foundpb
 29596                                  
 29597                                  _linkit:
 29598 000017FA 0E                      	push	cs
 29599 000017FB 1F                      	pop	ds
 29600 000017FC E8AAF5                  	call	TempCDS			; set cds for new drives
 29601 000017FF 2EC43E[6D02]            	les	di,[cs:DOSINFO]		; es:di = dos table (SysInitVars)
 29602 00001804 268B4522                	mov	ax,[es:di+22h]		; [es:di+SYSI_DEV] ; dx:cx = head of list
 29603 00001808 268B5D24                	mov	bx,[es:di+24h]		; [es:di+SYSI_DEV+2]
 29604 0000180C 2EC536[9F23]            	lds	si,[cs:DevEntry]	; ds:si = device location
 29605 00001811 8904                    	mov	[si],ax			; link in the driver
 29606 00001813 895C02                  	mov	[si+2],bx
 29607 00001816 26897522                	mov	[es:di+22h],si		; [es:di+SYSI_DEV] ; set head of list in dos
 29608 0000181A 268C5D24                	mov	[es:di+24h],ds		; [es:di+SYSI_DEV+2]
 29609 0000181E E8C51D                  	call	DevBreak		; mark successful install
 29610 00001821 2E8B0E[A523]            	mov	cx,[cs:DevBrkAddr+2]	; pass it a work buffer
 29611 00001826 2E8B16[A502]            	mov	dx,[cs:ALLOCLIM]	; address in cx (segment)
 29612 0000182B 29CA                    	sub	dx,cx			; for len dx (paragraphs)
 29613 0000182D B80055                  	mov	ax,5500h		; we're shuffle aware,but don't move
 29614                                  					; any drives at this point.
 29615 00001830 BB0200                  	mov	bx,2			; switch what we can now
 29616 00001833 2EFF1E[9003]            	call	far [cs:MagicBackdoor]
 29617                                  pre_exit:				; no errors!
 29618 00001838 31C0                    	xor	ax,ax			; zf=1
 29619 0000183A C3                      	retn
 29620                                  
 29621                                  ; =============== S U B R O U T I N E ==================================
 29622                                  
 29623                                  ; 08/04/2024 - Retro DOS v5.0
 29624                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1B9Fh)
 29625                                  
 29626                                  ;***	MagicPostload -- called to clean up and make sure Magic is final placed
 29627                                  
 29628                                  MagicPostload:
 29629 0000183B E8A400                  	call	get_dblspace_version	; is it there?
 29630 0000183E 7563                    	jnz	short no_magic	     	; done if not
 29631 00001840 F7C20080                	test	dx,8000h		; is it already permanent?
 29632 00001844 745D                    	jz	short no_magic		; no,done if so (not in final position)
 29633 00001846 BBFFFF                  	mov	bx,0FFFFh ; -1		; how much space does it want?
 29634 00001849 B8114A                  	mov	ax,4A11h		; multMagicdrv
 29635                                  					; DBLSPACE.BIN - GET RELOCATION SIZE
 29636 0000184C CD2F                    	int	2Fh			; get paragraphs into ax
 29637 0000184E 40                      	inc	ax			; extra 2 paragraphs for the stub
 29638 0000184F 40                      	inc	ax			; ((tiny_stub_end-tiny_stub_start)+15)/16
 29639                                  					; (18+15)/16 = 2
 29640 00001850 2EA3[9923]              	mov	[cs:DevSize],ax		; store that (**)
 29641 00001854 2EC606[B723]00          	mov	byte [cs:DeviceHi],0	; not to be loaded in UMB
 29642 0000185A 2E8C0E[8303]            	mov	[cs:bpb_addr+2],cs   	; pass name so that
 29643                                  					; arena header can be set
 29644 0000185F 2EC706[8103][0416]      	mov	word [cs:bpb_addr],MagicDDName ; "\DBLSPACE.BIN"
 29645 00001866 E8472E                  	call	round			; normalize memhi:memlo
 29646 00001869 E8B71B                  	call	InitDevLoad		; set up sub-arena,DevLoadAddr,
 29647                                  			  		; DevLoadEnd,and DevEntry
 29648                                  					; gets arena name from bpb_addr
 29649 0000186C 2E8E06[9B23]            	mov	es,[cs:DevLoadAddr]	; (**) (InitDevload sets this)
 29650                                  
 29651                                  ;	First, move a little header in place so that this looks
 29652                                  ;	to the mem command like a legitimate driver load. Otherwise,
 29653                                  ;	it will display garbage for the device name
 29654                                  
 29655 00001871 31FF                    	xor	di,di			; move a little header in place
 29656                                  					; so that this looks to the mem command
 29657                                  					; like a legitimate driver load
 29658 00001873 BE[2116]                	mov	si,tiny_stub_start
 29659                                  	;mov	cx,18			; (tiny_stub_end-tiny_stub_start)
 29660 00001876 B91200                  	mov	cx,tiny_stub_end-tiny_stub_start
 29661 00001879 F3A4                    	rep movsb			; move it!
 29662 0000187B 8CC0                    	mov	ax,es			; advance es appropriately
 29663 0000187D 40                      	inc	ax			; add ax,((tiny_stub_end-tiny_stub_start)+15)/16
 29664 0000187E 40                      	inc	ax
 29665 0000187F 8EC0                    	mov	es,ax
 29666 00001881 BBFEFF                  	mov	bx,0FFFEh ; -2		; final placement!
 29667 00001884 B8114A                  	mov	ax,4A11h		; multMagicdrv
 29668 00001887 CD2F                    	int	2Fh			; DBLSPACE.BIN - RELOCATE
 29669                                  					; es = segment to which to relocate DBLSPACE.BIN
 29670 00001889 2EA1[9B23]              	mov	ax,[cs:DevLoadAddr] ; (**)
 29671 0000188D 2E0306[9923]            	add	ax,[cs:DevSize]		; calculate seg after DD load
 29672 00001892 2EA3[A523]              	mov	[cs:DevBrkAddr+2],ax	; save as ending address!
 29673 00001896 2EC706[A323]0000        	mov	word [cs:DevBrkAddr],0
 29674 0000189D E8241D                  	call	DevSetBreak		; go ahead and alloc mem for device
 29675 000018A0 E8431D                  	call	DevBreak
 29676                                  no_magic:
 29677 000018A3 C3                      	retn
 29678                                  
 29679                                  ; =============== S U B R O U T I N E ==================================
 29680                                  
 29681                                  ; 08/04/2024 - Retro DOS v5.0
 29682                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1C08h)
 29683                                  
 29684                                  ;***	MagicSetCdss -- disable CDSs for still unmounted DblSpace drives
 29685                                  ;
 29686                                  ;	entry:
 29687                                  ;	   CDSs are now persistent and in their final place
 29688                                  
 29689                                  MagicSetCdss:
 29690 000018A4 E83B00                  	call	get_dblspace_version	; is it there?
 29691 000018A7 7538                    	jnz	short magic_set_exit	; done if not
 29692                                  					; cl = first DblSpace drive in ASCII
 29693                                  					; ch = number of DblSpace drive letters
 29694 000018A9 2EC536[6D02]            	lds	si,[cs:DOSINFO]		; point to DOS data area (SysInitVars)
 29695 000018AE C57416                  	lds	si,[si+16h]		; lds si,[si+SYSI_CDS] ; fetch CDSs
 29696 000018B1 B458                    	mov	ah,88			; curdirLen
 29697 000018B3 80E941                  	sub	cl,'A'			; make it zero based.
 29698 000018B6 88C8                    	mov	al,cl			; get first DblSpace drive letter
 29699 000018B8 F6E4                    	mul	ah			; find first DblSpace CDS
 29700 000018BA 01C6                    	add	si,ax			; cds pointer
 29701 000018BC 88CA                    	mov	dl,cl			; save for drive testing loop
 29702 000018BE 88E9                    	mov	cl,ch			; get DblSpace drive count into cx
 29703 000018C0 30ED                    	xor	ch,ch
 29704                                  
 29705                                  ;	We know cx > 0, or else the driver wouldn't have stayed resident
 29706                                  
 29707                                  magic_set_cdss_1:
 29708 000018C2 51                      	push	cx
 29709 000018C3 52                      	push	dx
 29710 000018C4 1E                      	push	ds
 29711 000018C5 56                      	push	si
 29712 000018C6 B8114A                  	mov	ax,4A11h		; multMagicdrv
 29713 000018C9 BB0100                  	mov	bx,1			; MD_DRIVE_MAP ; inquire drive map
 29714 000018CC CD2F                    	int	2Fh			; DBLSPACE.BIN - "GetDriveMapping"
 29715                                  					; see if this is an unused DblSpace drive
 29716 000018CE 5E                      	pop	si
 29717 000018CF 1F                      	pop	ds
 29718 000018D0 5A                      	pop	dx
 29719 000018D1 59                      	pop	cx
 29720 000018D2 38DA                    	cmp	dl,bl			; if mapped to itself,it is vacant
 29721 000018D4 7504                    	jnz	short magic_set_cdss_2	; skip if used
 29722 000018D6 806444BF                	and	byte [si+44h],0BFh 	; Retro DOS v5.0 ; 08/04/2024
 29723                                  	;and	word [si+43h],0BFFFh
 29724                                  					; reset the bit in flags (curdir_inuse bit)
 29725                                  					; [si+curdir_list.cdir_flags],~curdir_inuse ; word
 29726                                  					; (.. [si+1+curdir_list.cdir_flags],0BFh ; byte)
 29727                                  magic_set_cdss_2:
 29728 000018DA 83C658                  	add	si,88			; curdirLen
 29729 000018DD FEC2                    	inc	dl			; next drive
 29730 000018DF E2E1                    	loop	magic_set_cdss_1
 29731                                  magic_set_exit:
 29732 000018E1 C3                      	retn
 29733                                  
 29734                                  ; =============== S U B R O U T I N E ==================================
 29735                                  
 29736                                  ; 08/04/2024 - Retro DOS v5.0
 29737                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1C47h)
 29738                                  
 29739                                  get_dblspace_version:
 29740 000018E2 B8114A                  	mov	ax,4A11h 	; multMagicdrv
 29741                                  				; DBLSPACE.BIN - "GetVersion" - INSTALLATION CHECK
 29742                                  			 	; (BX = 0)
 29743 000018E5 31DB                    	xor	bx,bx	 	; MD_VERSION = 0
 29744 000018E7 CD2F                    	int	2Fh	 	; Return:
 29745                                  			 	;  AX = 0000h (successful)
 29746                                  			 	;  BX = 444Dh ("DM")
 29747                                  			 	;  CL = first drive letter used by DBLSPACE (41h = A:)
 29748                                  			 	;  CH = number of drive letters used by DBLSPACE
 29749                                  			 	;  DX = internal DBLSPACE.BIN version number (bits 14-0)
 29750                                  			 	;  bit 15 set if DBLSPACE.BIN has not yet been relocated
 29751                                  			 	;  to final position in memory (i.e. DBLSPACE.SYS /MOVE)
 29752 000018E9 09C0                    	or	ax,ax	 	; ax = 0 (successful,zf=1)
 29753 000018EB C3                      	retn
 29754                                  
 29755                                  ; ----------------------------------------------------------------------
 29756                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 29757                                  ; ----------------------------------------------------------------------
 29758                                  ; 27/03/2019 - Retro DOS v4.0
 29759                                  
 29760                                  ;MULTI_CONFIG	equ 1
 29761                                  
 29762                                  HIGH_FIRST 	equ 080h		; from ARENA.INC - modifier for
 29763                                                                          ; allocation strategy call
 29764                                  
 29765                                  ;have_install_cmd equ 00000001b 	; config.sys has install= commands
 29766                                  ;has_installed	  equ 00000010b 	; sysinit_base installed.
 29767                                  
 29768                                  default_filenum equ 8
 29769                                  
 29770                                  ;stacksw	equ true		; include switchable hardware stacks
 29771                                  
 29772                                  ; external variable defined in ibmbio module for multi-track
 29773                                  
 29774                                  ;multrk_on	equ 10000000b		;user spcified mutitrack=on,or system turns
 29775                                  					; it on after handling config.sys file as a
 29776                                  					; default value,if multrk_flag = multrk_off1.
 29777                                  ;multrk_off1	equ 00000000b		;initial value. no "multitrack=" command entered.
 29778                                  ;multrk_off2	equ 00000001b		;user specified multitrack=off.
 29779                                  
 29780                                  ; if stacksw
 29781                                  
 29782                                  ; internal stack parameters
 29783                                  
 29784                                  ;entrysize	equ 8
 29785                                  
 29786                                  ;mincount	equ 8
 29787                                  ;defaultcount	equ 9
 29788                                  ;maxcount	equ 64
 29789                                  
 29790                                  ;minsize 	equ 32
 29791                                  ;defaultsize	equ 128
 29792                                  ;maxsize 	equ 512
 29793                                  
 29794                                  DOS_FLAG_OFFSET	equ 86h
 29795                                  
 29796                                  ;ifdef MULTI_CONFIG
 29797                                  ;
 29798                                  ;   config_envlen must immediately precede config_wrkseg, because they
 29799                                  ;   may be loaded as a dword ptr
 29800                                  
 29801                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 29802                                  ; 25/10/2022
 29803 000018EC 0000                    config_envlen:	dw  0  			; when config_wrkseg is being used as
 29804                                                 				;  a scratch env, this is its length
 29805 000018EE 0000                    config_wrkseg:	dw  0			; config work area (above confbot)
 29806                                                     			;  segment of work area
 29807                                  
 29808 000018F0 00                      config_cmd:	db  0  			; current config cmd
 29809                                                   			;  (with CONFIG_OPTION_QUERY bit intact)
 29810 000018F1 00                      config_multi:	db  0                   ; non-zero if multi-config config.sys
 29811                                  
 29812                                  ;endif ; MULTI_CONFIG
 29813                                  
 29814 000018F2 00                      multdeviceflag:	db  0
 29815                                  
 29816 000018F3 0000                    devmark_addr:	dw  0			;segment address for devmark.
 29817                                  
 29818 000018F5 00                      setdevmarkflag: db  0			;flag used for devmark
 29819                                  
 29820                                  ; 30/12/2022
 29821                                  ; 12/12/2022
 29822 000018F6 00                      driver_units:	db  0			;total unitcount for driver
 29823                                  
 29824                                  ; 12/12/2022
 29825                                  ;ems_stub_installed:
 29826                                  ;		db  0
 29827                                  
 29828                                  ; 12/12/2022	
 29829                                  ;align 2
 29830                                  
 29831                                  badparm_ptr:	; label	dword
 29832 000018F7 0000                    badparm_off:	dw  0
 29833 000018F9 0000                    badparm_seg:	dw  0
 29834                                  
 29835                                  ;******************************************************************************
 29836                                  ;take care of config.sys file.
 29837                                  ;system parser data and code.
 29838                                  ;******************************************************************************
 29839                                  
 29840                                  ;*******************************************************************
 29841                                  ; parser options set for msbio sysconf module
 29842                                  ;*******************************************************************
 29843                                  ;
 29844                                  ;**** default assemble swiches definition **************************
 29845                                  
 29846                                  ;farsw	equ 0		; near call expected
 29847                                  ;datesw	equ 0		; check date format
 29848                                  ;timesw	equ 0		; check time format
 29849                                  ;filesw	equ 1		; check file specification
 29850                                  ;capsw	equ 0		; perform caps if specified
 29851                                  ;cmpxsw	equ 0		; check complex list
 29852                                  ;numsw	equ 1		; check numeric value
 29853                                  ;keysw	equ 0		; support keywords
 29854                                  ;swsw	equ 1		; support switches
 29855                                  ;val1sw	equ 1		; support value definition 1
 29856                                  ;val2sw	equ 0		; support value definition 2
 29857                                  ;val3sw	equ 1		; support value definition 3
 29858                                  ;drvsw	equ 1		; support drive only format
 29859                                  ;qussw	equ 0		; support quoted string format
 29860                                  
 29861                                  ; psdata_seg equ cs
 29862                                  
 29863                                  	;.xlist
 29864                                  	;include parse.asm		;together with psdata.inc
 29865                                  	;.list
 29866                                  
 29867                                  ; PSDATA.INC - MSDOS 6.0 - 1991
 29868                                  ; ======================================================================
 29869                                  ; 27/03/2019 - Retro DOS v4.0
 29870                                  
 29871                                  ; 30/03/2019
 29872                                  ; VERSION.INC (MSDOS 6.0) 
 29873                                  ; Set DBCS Blank constant
 29874                                  
 29875                                  ; ifndef DBCS
 29876                                  DB_SPACE EQU 2020h
 29877                                  DB_SP_HI EQU 20h
 29878                                  DB_SP_LO EQU 20h
 29879                                  ; else
 29880                                  
 29881                                  ;*******************************************************************
 29882                                  ; Parser include file
 29883                                  ;*******************************************************************
 29884                                  
 29885                                  ;**** Equation field
 29886                                  ;-------- Character code definition
 29887                                  
 29888                                  _$P_DBSP1	   equ	DB_SP_HI	;AN000; 1st byte of DBCS blank
 29889                                  _$P_DBSP2	   equ	DB_SP_LO	;AN000; 2nd byte of DBCS blank
 29890                                  _$P_Period	   equ	"."             ;AN020;
 29891                                  _$P_Slash	   equ	"/"             ;AN020;
 29892                                  _$P_Space	   equ	" "             ;AN000; SBCS blank
 29893                                  _$P_Comma	   equ	","             ;AN000;
 29894                                  _$P_Switch	   equ	"/"             ;AN000;
 29895                                  _$P_Keyword	   equ	"="             ;AN000;
 29896                                  _$P_Colon	   equ	":"             ;AN000;
 29897                                  _$P_Plus 	   equ	"+"             ;AN000;
 29898                                  _$P_Minus	   equ	"-"             ;AN000;
 29899                                  _$P_Rparen	   equ	")"             ;AN000;
 29900                                  _$P_Lparen	   equ	"("             ;AN000;
 29901                                  ;_$P_SQuote        equ  "'"			;AN025; deleted
 29902                                  _$P_DQuote	   equ	'"'             ;AN000;
 29903                                  _$P_NULL 	   equ	0		;AN000;
 29904                                  _$P_TAB		   equ	9		;AN000;
 29905                                  _$P_CR		   equ	0Dh		;AN000;
 29906                                  _$P_LF		   equ	0Ah		;AN000;
 29907                                  _$P_ASCII80	   equ	80h		;AN000; ASCII 80h character code
 29908                                  
 29909                                  ;-------- Masks
 29910                                  _$P_Make_Lower	   equ	20h		;AN000; make lower case character
 29911                                  _$P_Make_Upper	   equ	0FFh-_$P_Make_Lower ;AN000; make upper case character
 29912                                  
 29913                                  ;-------- DOS function call related equs
 29914                                  
 29915                                  _$P_DOS_Get_CDI	   equ	3800h		;AN000; get country dependent information
 29916                                  					; by this call, following information
 29917                                  struc _$P_CDI	
 29918 00000000 ????                     .DateF: resw 1
 29919 00000002 ??????????               .Money: resb 5
 29920 00000007 ????                     .1000:	 resb 2
 29921 00000009 ????                     .Dec:	 resb 2
 29922 0000000B ????                     .DateS: resb 2
 29923 0000000D ????                     .TimeS: resb 2
 29924 0000000F ??                          	 resb 1
 29925 00000010 ??                      	 resb 1
 29926 00000011 ??                       .TimeF: resb 1	 
 29927 00000012 ????????                	 resw 2
 29928 00000016 ????                    	 resb 2
 29929 00000018 <res Ah>                	 resw 5
 29930                                   .size:
 29931                                  endstruc
 29932                                  
 29933                                  _$P_Date_MDY	   equ	0		;AN000;
 29934                                  _$P_Date_DMY	   equ	1		;AN000;
 29935                                  _$P_Date_YMD	   equ	2		;AN000;
 29936                                  ;-------------
 29937                                  _$P_DOS_GetEV	   equ	6300h		;AN000; get DBCS EV call
 29938                                  					;AN000; DS:SI will points to DBCS EV
 29939                                  ;-------------
 29940                                  _$P_DOS_Get_TBL	   equ	65h		;AN000; get uppercase table call
 29941                                  					;AN000; following parameters are set
 29942                                  					;AN000; to get casemap table.
 29943                                  _$P_DOSTBL_Def	   equ	-1		;AN000; get default
 29944                                  _$P_DOSTBL_BL	   equ	5		;AN000; buffer length for Tbl pointer
 29945                                  _$P_DOSTBL_File	   equ	4		;AN000; get file uppercase table
 29946                                  _$P_DOSTBL_Char	   equ	2		;AN000; get character uppercase table
 29947                                  					; By this call following information
 29948                                  					; is returned.
 29949                                  struc _$P_DOS_TBL
 29950 00000000 ??                       .InfoID: resb 1			;AN000; information id for the table
 29951 00000001 ????                     .Off:	 resw 1				;AN000; offset address of the table
 29952 00000003 ????                     .Seg:	 resw 1				;AN000; segment address of the table
 29953                                  endstruc
 29954                                  
 29955                                  ; ----------------------------------------------------------------------------
 29956                                  ; PARMS 	LABEL	BYTE
 29957                                  ;		DW	PARMSX
 29958                                  ;		DB	2		; NUMBER OF STRINGS (0, 1, 2)
 29959                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 29960                                  ;		DB	" .. "          ; EXTRA DELIMITER LIST,
 29961                                  ;					; TYPICAL ARE ";", "="
 29962                                  ;					; "," & WHITESPACE ALWAYS
 29963                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 29964                                  ;		DB	" .. "          ; EXTRA END OF LINE LIST, CR, LF OR 0 ALWAYS
 29965                                  ; ----------------------------------------------------------------------------
 29966                                  
 29967                                  ;-------------------------------- PARMS block structure
 29968                                  struc _$P_PARMS_Blk
 29969 00000000 ????                     .PARMSX_Address:  resw 1		;AN000; Address of PARMSX
 29970 00000002 ??                       .Num_Extra:	   resb 1		;AN000; Number of extra stuff
 29971 00000003 ??                       .Len_Extra_Delim: resb 1		;AN000; Length of extra delimiter
 29972                                  endstruc
 29973                                  
 29974                                  _$P_Len_PARMS	   equ	4		;AN000;
 29975                                  _$P_I_Use_Default  equ	0		;AN000; no extra stuff specified
 29976                                  _$P_I_Have_Delim   equ	1		;AN000; extra delimiter specified
 29977                                  _$P_I_Have_EOL	   equ	2		;AN000; extra EOL specified
 29978                                  
 29979                                  ; ----------------------------------------------------------------------------
 29980                                  ; PARMSX	LABEL	BYTE
 29981                                  ;		DB	minp,maxp	; MIN, MAX POSITIONAL OPERANDS ALLOWED
 29982                                  ;		DW	CONTROL 	; DESCRIPTION OF POSITIONAL 1
 29983                                  ;		:			; REPEATS maxp-1 TIMES
 29984                                  ;		DB	maxs		; # OF SWITCHES
 29985                                  ;		DW	CONTROL 	; DESCRIPTION OF SWITCH 1
 29986                                  ;		:			; REPEATS maxs-1 TIMES
 29987                                  ;		DB	maxk		; # OF KEYWORD
 29988                                  ;		DW	CONTROL 	; DESCRIPTION OF KEYWORD 1
 29989                                  ;		:			; REPEATS maxk-1 TIMES
 29990                                  ; ----------------------------------------------------------------------------
 29991                                  
 29992                                  ;-------------------------------- PARMSX block structure
 29993                                  struc _$P_PARMSX_Blk		;AN000;
 29994 00000000 ??                       .MinP: resb 1			;AN000; Minimum positional number
 29995 00000001 ??                       .MaxP:	resb 1			;AN000; Maximum positional number
 29996 00000002 ????                     .1st_Control: resw 1		;AN000; Address of the 1st CONTROL block
 29997                                  endstruc
 29998                                  
 29999                                  ; ----------------------------------------------------------------------------
 30000                                  ; << Control field definition  >>
 30001                                  ;
 30002                                  ;
 30003                                  ;CONTROL   LABEL   BYTE
 30004                                  ;	   DW	   MATCH_FLAGS	   ; CONTROLS TYPE MATCHED
 30005                                  ;				   ; 8000H=NUMERIC VALUE, (VALUE LIST WILL BE CHECKED)
 30006                                  ;				   ; 4000H=SIGNED NUMERIC VALUE (VALUE LIST WILL BE CHECKED)
 30007                                  ;				   ; 2000H=SIMPLE STRING(VALUE LIST WILL BE CHECKED)
 30008                                  ;				   ; 1000H=DATE STRING (VALUE LIST WON'T BE CHECKED)
 30009                                  ;				   ; 0800H=TIME STRING (VALUE LIST WON'T BE CHECKED)
 30010                                  ;				   ; 0400H=COMPLEX LIST (VALUE LIST WON'T BE CHECKED)
 30011                                  ;				   ; 0200H=FILE SPEC (VALUE LIST WON'T BE CHECKED)
 30012                                  ;				   ; 0100H=DRIVE ONLY (VALUE LIST WON'T BE CHECKED)
 30013                                  ;				   ; 0080H=QUOTED STRING (VALUE LIST WON'T BE CHECKED)
 30014                                  ;				   ; 0010H=IGNORE ":" AT END IN MATCH
 30015                                  ;				   ; 0002H=REPEATS ALLOWED
 30016                                  ;				   ; 0001H=OPTIONAL
 30017                                  ;	   DW	   FUNCTION_FLAGS
 30018                                  ;				   ; 0001H=CAP RESULT BY FILE TABLE
 30019                                  ;				   ; 0002H=CAP RESULT BY CHAR TABLE
 30020                                  ;				   ; 0010H=REMOVE ":" AT END
 30021                                  ; (tm10)			   ; 0020H=colon is not necessary for switch
 30022                                  ;	   DW	   RESULT	   ; RESULT BUFFER
 30023                                  ;	   DW	   VALUES	   ; VALUE LISTS
 30024                                  ;	   DB	   nid		   ; NUMBER OF KEYWORD/SWITCH SYNONYMS IN FOLLOWING LIST
 30025                                  ;	   DB	   "...",0         ; IF n >0, KEYWORD 1
 30026                                  ;	   :
 30027                                  ;
 30028                                  ;Note:
 30029                                  ;    - The MATCH_FLAG is bit significant. You can set, for example, TIME bit and
 30030                                  ;      DATE bit simalteniously.
 30031                                  ;
 30032                                  ;      The parser examins each bit along with the following priority.
 30033                                  ;
 30034                                  ;      COMPLEX -> DATE -> TIME -> NUMERIC VAL -> SIGNED NUMERIC VAL -> DRIVE ->
 30035                                  ;      FILE SPEC -> SIMPLE STRING.
 30036                                  ;
 30037                                  ;    - When the FUNCTION_FLAG is 0001 or 0002, the STRING pointed to by a pointer
 30038                                  ;      in the result buffer is capitalized.
 30039                                  ;
 30040                                  ;    - Match_Flags 0001H and 0002H have meaning only for the positional.
 30041                                  ;
 30042                                  ;    - The "...",0 (bottom most line) does require '=' or '/'. When you need a
 30043                                  ;      switch, for example, '/A', then STRING points to;
 30044                                  ;
 30045                                  ;			DB    1 	; number of following synonyms
 30046                                  ;			DB   '/A',0
 30047                                  ;
 30048                                  ;      When you need a keyword, for example, 'CODEPAGE=', then "...",0 will be;
 30049                                  ;
 30050                                  ;			DB    1 	; number of following synonyms
 30051                                  ;			DB   'CODEPAGE=',0
 30052                                  ;
 30053                                  ;    - "..." must consist of upper case characters only because the parser
 30054                                  ;      performs pattern matching after converting input to upper case (by
 30055                                  ;      using the current country upper case table)
 30056                                  ;
 30057                                  ;    - One "..." can contain only one switch or keyword. If you need, for
 30058                                  ;      example /A and /B, the format will be;
 30059                                  ;
 30060                                  ;			DB    2 	; number of following synonyms
 30061                                  ;			DB    '/A',0
 30062                                  ;			DB    '/B',0
 30063                                  ; ----------------------------------------------------------------------------
 30064                                  
 30065                                  ;**** Match_Flags
 30066                                  
 30067                                  _$P_Num_Val	   equ	8000h		;AN000; Numeric Value
 30068                                  _$P_SNum_Val	   equ	4000h		;AN000; Signed numeric value
 30069                                  _$P_Simple_S	   equ	2000h		;AN000; Simple string
 30070                                  _$P_Date_S	   equ	1000h		;AN000; Date string
 30071                                  _$P_Time_S	   equ	0800h		;AN000; Time string
 30072                                  _$P_Cmpx_S	   equ	0400h		;AN000; Complex string
 30073                                  _$P_File_Spc	   equ	0200h		;AN000; File Spec
 30074                                  _$P_Drv_Only	   equ	0100h		;AN000; Drive Only
 30075                                  _$P_Qu_String	   equ	0080h		;AN000; Quoted string
 30076                                  _$P_Ig_Colon	   equ	0010h		;AN000; Ignore colon at end in match
 30077                                  _$P_Repeat	   equ	0002h		;AN000; Repeat allowed
 30078                                  _$P_Optional	   equ	0001h		;AN000; Optional
 30079                                  
 30080                                  ;**** Function flags
 30081                                  
 30082                                  _$P_CAP_File	   equ	0001h		;AN000; CAP result by file table
 30083                                  _$P_CAP_Char	   equ	0002h		;AN000; CAP result by character table
 30084                                  _$P_Rm_Colon	   equ	0010h		;AN000; Remove ":" at the end
 30085                                  _$P_colon_is_not_necessary equ 0020h	;AN000;(tm10) /+10 and /+:10
 30086                                  
 30087                                  ;-------------------------------- Control block structure
 30088                                  struc _$P_Control_Blk
 30089 00000000 ????                     .Match_Flag:	 resw 1		;AN000; Controls type matched
 30090 00000002 ????                     .Function_Flag: resw 1		;AN000; Function should be taken
 30091 00000004 ????                     .Result_Buf:	 resw 1		; Result buffer address
 30092 00000006 ????                     .Value_List:	 resw 1		;AN000; Value list address
 30093 00000008 ??                       .nid:		 resb 1		;AN000; # of keyword/SW synonyms
 30094 00000009 ??                       .KEYorSW:	 resb 1		;AN000; keyword or sw
 30095                                  endstruc
 30096                                  
 30097                                  ; ----------------------------------------------------------------------------
 30098                                  ; << Value List Definition >>
 30099                                  ;
 30100                                  ;VALUES 	LABEL	BYTE
 30101                                  ;		DB	nval			; NUMBER OF VALUE DEFINITIONS (0 - 3)
 30102                                  ;	     +-
 30103                                  ;	     |	DB	nrng			; NUMBER OF RANGES
 30104                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF RANGE MATCHED
 30105                                  ;	     | +DD	X,Y			; RANGE OF VALUES
 30106                                  ;	     |	:
 30107                                  ;	     |	DB	nnval			; NUMBER OF CHOICES
 30108                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF NUMBER CHOICE MATCHED
 30109                                  ;	     | +DD	VALUE			; SPECIFIC CHOICE IF NUMBER
 30110                                  ;	     |	:
 30111                                  ;	     |	DB	nstrval 		; NUMBER OF CHOICES
 30112                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF STRING CHOICE MATCHED
 30113                                  ;	     | +DW	STRING			; SPECIFIC CHOICE IF STING
 30114                                  ;	     +-	:
 30115                                  ;
 30116                                  ;STRING 	DB	"...",0                 ; ASCIIZ STRING IMAGE
 30117                                  ;
 30118                                  ;Note:
 30119                                  ;    - ITEM_TAG must not be 0FFH, which will be used in the result buffer
 30120                                  ;      when no choice lists are provided.
 30121                                  ;
 30122                                  ;    - STRING must consist of upper case characters only because the parser
 30123                                  ;      performs pattern matching after converting input to upper case (by
 30124                                  ;      using the current country upper case table)
 30125                                  ; ----------------------------------------------------------------------------
 30126                                  
 30127                                  _$P_nval_None	   equ	0		;AN000; no value list ID
 30128                                  _$P_nval_Range	   equ	1		;AN000; range list ID
 30129                                  _$P_nval_Value	   equ	2		;AN000; value list ID
 30130                                  _$P_nval_String	   equ	3		;AN000; string list ID
 30131                                  _$P_Len_Range	   equ	9		;AN000; Length of a range choice(two DD plus one DB)
 30132                                  _$P_Len_Value	   equ	5		;AN000; Length of a value choice(one DD plus one DB)
 30133                                  _$P_Len_String	   equ	3		;AN000; Length of a string choice(one DW plus one DB)
 30134                                  _$P_No_nrng	   equ	0		;AN000; (tm07) no nrng. nnval must not be 0.
 30135                                  
 30136                                  struc _$P_Val_List
 30137 00000000 ??                       .NumofList: resb 1			;AN000; number of following choice
 30138 00000001 ????                     .Val_XL:    resw 1			;AN000; lower word of value
 30139 00000003 ????                     .Val_XH:    resw 1			;AN000; higher word of value
 30140 00000005 ????                     .Val_YL:    resw 1			;AN000; lower word of another value
 30141 00000007 ????                     .Val_YH:    resw 1			;AN000; higher word of another value
 30142                                  endstruc
 30143                                  
 30144                                  ; ----------------------------------------------------------------------------
 30145                                  ; << Result Buffer Definition  >>
 30146                                  ;
 30147                                  ;RESULT 	LABEL	BYTE			; BELOW FILLED IN FOR DEFAULTS
 30148                                  ;		DB	type			; TYPE RETURNED: 0=RESERVED,
 30149                                  ;						;	1=NUMBER, 2=LIST INDEX,
 30150                                  ;						;	3=STRING, 4=COMPLEX,
 30151                                  ;						;	5=FILESPEC, 6=DRIVE
 30152                                  ;						;	7=DATE, 8=TIME
 30153                                  ;						;	9=QUOTED STRING
 30154                                  ;		DB	ITEM_TAG		; MATCHED ITEM TAG
 30155                                  ;
 30156                                  ;		dw	synonym@		; es:@ points to found SYNONYM if provided.
 30157                                  ;
 30158                                  ;            +-
 30159                                  ;	    | DD	n			; VALUE IF NUMBER
 30160                                  ;	    | or
 30161                                  ;	    |	DW	i			; INDEX (OFFSET) INTO VALUE LIST
 30162                                  ;	    |					; (ES presents Segment address)
 30163                                  ;	    | or
 30164                                  ;	    |	DD	STRING			; OFFSET OF STRING VALUE
 30165                                  ;	    | or
 30166                                  ;	    |	DB	drv			; DRIVE NUMBER (1-A, 2-B,..., 26-Z)
 30167                                  ;	    | or
 30168                                  ;	    |	DW	YEAR	   ;(1980-2099)  IN CASE OF DATE
 30169                                  ;	    |	DB	MONTH	   ;(1-12)	 Note: Range check is not performed.
 30170                                  ;	    |	DB	DATE	   ;(1-31)	       0 is filled when the corresponding field was not specified.
 30171                                  ;	    | or
 30172                                  ;	    |	DB	HOUR	   ;(0-23)	  IN CASE OF TIME
 30173                                  ;	    |	DB	MINUTES    ;(0-59)	  Note: Range check is not performed .
 30174                                  ;	    |	DB	SECONDS    ;(0-59)		0 is filled when the corresponding field was not specified .
 30175                                  ;	    |	DB	HUNDREDTHS ;(0-99)
 30176                                  ;	    +-
 30177                                  ;
 30178                                  ;
 30179                                  ;Note: ITEM_TAG is 0FFH when the caller does not specify the choice
 30180                                  ;      list.
 30181                                  ;
 30182                                  ;      YEAR: If the input value for the year is less than 100, parser
 30183                                  ;	     adds 1900 to it.  For example, when 87 is input to parser for
 30184                                  ;	     the year value, he returns 1987.
 30185                                  ; ----------------------------------------------------------------------------
 30186                                  
 30187                                  ;-------------------------------- Result block structure
 30188                                  struc _$P_Result_Blk
 30189 00000000 ??                       .Type:        resb 1		;AN000; Type returned
 30190 00000001 ??                       .Item_Tag:    resb 1		;AN000; Matched item tag
 30191 00000002 ????                     .SYNONYM_Ptr: resw 1		;AN000; pointer to Synonym list returned
 30192 00000004 ????????                 .Picked_Val:  resb 4		;AN000; value
 30193                                  endstruc
 30194                                  
 30195                                  ;--------------------------------
 30196                                  ;**** values for the type field in the result block
 30197                                  
 30198                                  _$P_EOL		   equ	0		;AN000; End of line
 30199                                  _$P_Number	   equ	1		;AN000; Number
 30200                                  _$P_List_Idx	   equ	2		;AN000; List Index
 30201                                  _$P_String	   equ	3		;AN000; String
 30202                                  _$P_Complex	   equ	4		;AN000; Complex
 30203                                  _$P_File_Spec	   equ	5		;AN000; File Spec
 30204                                  _$P_Drive	   equ	6		;AN000; Drive
 30205                                  _$P_Date_F	   equ	7		;AN000; Date
 30206                                  _$P_Time_F	   equ	8		;AN000; Time
 30207                                  _$P_Quoted_String  equ	9		;AN000; Quoted String
 30208                                  
 30209                                  _$P_No_Tag	   equ	0FFh		;AN000; No ITEM_TAG found
 30210                                  
 30211                                  ;**** Return code
 30212                                  ;
 30213                                  ; following return code will be returned in the AX register.
 30214                                  
 30215                                  _$P_No_Error	   equ	0		;AN000; No error
 30216                                  _$P_Too_Many	   equ	1		;AN000; Too many operands
 30217                                  _$P_Op_Missing	   equ	2		;AN000; Required operand missing
 30218                                  _$P_Not_In_SW	   equ	3		;AN000; Not in switch list provided
 30219                                  _$P_Not_In_Key	   equ	4		;AN000; Not in keyword list provided
 30220                                  _$P_Out_Of_Range   equ	6		;AN000; Out of range specified
 30221                                  _$P_Not_In_Val	   equ	7		;AN000; Not in value list provided
 30222                                  _$P_Not_In_Str	   equ	8		;AN000; Not in string list provided
 30223                                  _$P_Syntax	   equ	9		;AN000; Syntax error
 30224                                  _$P_RC_EOL	   equ	-1		;AN000; End of command line
 30225                                  
 30226                                  ; DATA - Retro DOS v4.0 - 27/03/2019
 30227                                  
 30228                                  ; MSDOS 6.2 IO.SYS SYSINIT:179Ch
 30229                                  
 30230                                  ;********************** Local Data *************************************
 30231 000018FB 0000                    _$P_ORDINAL:	   dw	0		;AN000; Operand ordinal save area
 30232 000018FD 0000                    _$P_RC:		   dw	0		;AN000; Return code from parser
 30233 000018FF 0000                    _$P_SI_Save:	   dw	0		;AN000; Pointer of command buffer
 30234 00001901 0000                    _$P_DX:		   dw	0		;AN000; Return result buffer address
 30235 00001903 00                      _$P_Terminator:	   db	0		;AN000; Terminator code (ASCII)
 30236 00001904 0000                    _$P_DBCSEV_OFF:	   dw	0		;AN000; Offset of DBCS EV
 30237 00001906 0000                    _$P_DBCSEV_SEG:	   dw	0		;AN000; Segment of DBCS EV
 30238 00001908 0000                    _$P_Flags:	   dw	0		;AN000; Parser internal flags
 30239                                  %define _$P_Flags1 _$P_Flags		;AN038; to reference first byte flags
 30240                                  %define _$P_Flags2 _$P_Flags+1		;AN038; to reference second byte flags only
 30241                                  
 30242                                  ;in second byte of _$P_Flags, referenced as _$P_Flags2:
 30243                                  _$P_equ		   equ	01h	      ;AN000; "=" packed in string buffet
 30244                                  _$P_Neg		   equ	02h	      ;AN000; Negative value
 30245                                  _$P_Time12	   equ	04h	      ;AN000; set when PM is specified
 30246                                  _$P_Key_Cmp	   equ	08h	      ;AN000; set when keyword compare
 30247                                  _$P_SW_Cmp	   equ	10h	      ;AN000; set when switch compare
 30248                                  _$P_Extra	   equ	20h	      ;AN000; set when extra delimiter found
 30249                                  _$P_SW		   equ	40h	      ;AN000; set when switch found (tm08)
 30250                                  _$P_Signed	   equ	80h	      ;AN000; signed numeric specified
 30251                                  
 30252                                  ;in first byte of _$P_Flags, referenced as _$P_Flags1:
 30253                                  _$P_time12am	   equ	01h	      ;AN038; set when AM is specified on time
 30254                                  _$P_TIME_AGAIN	   equ	02h	      ;AN039; SET WHEN READY TO RE-PARSE TIME
 30255                                  
 30256 0000190A 0000                    _$P_SaveSI_Cmpx:   dw	0		;AN000; save si for later use by complex
 30257 0000190C 0000                    _$P_KEYorSW_Ptr:   dw	0		;AN000; points next to "=" or ":" code
 30258 0000190E 0000                    _$P_Save_EOB:	   dw	0		;AN000; save pointer to EOB
 30259 00001910 0000                    _$P_Found_SYNONYM: dw	0		;AN000; es:@ points to found synonym
 30260                                  
 30261 00001912 00<rep 80h>             _$P_STRING_BUF:	   times 128 db 0	;AN000; Pick a operand from command line
 30262                                  _$P_STRING_BUF_END equ	$		;AN000;
 30263                                  
 30264                                  ; 25/10/2022
 30265                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16F8h)
 30266                                  
 30267 00001992 FF                      _$P_Char_CAP_Ptr:  db	0FFh		;AN000; info id
 30268 00001993 0000                    		   dw	0		;AN000; offset	of char case map table
 30269 00001995 0000                    		   dw	0		;AN000; segment of char case map table
 30270                                  ; 25/10/2022
 30271                                  ;IF CAPSW
 30272                                  ;_$P_File_CAP_Ptr: db	0FFh		;AN000; info id
 30273                                  ;		   dw	0		;AN000; offset	of file case map table
 30274                                  ;		   dw	0		;AN000; segment of file case map table
 30275                                  ;ENDIF
 30276                                  
 30277                                  ; (tm06) IF FileSW			;AN000;(Check if file spec is supported)
 30278                                  ;
 30279                                  
 30280                                  ;M029
 30281                                  ;!!!WARNING!!!
 30282                                  ; In routine SYSPARSE (parse.asm), _$P_FileSp_Char is reinitialized using 
 30283                                  ;hardcoded strings. If the chars in the string are changed here, corresponding
 30284                                  ;changes need to be made in SYSPARSE
 30285                                  
 30286                                  ;IF FileSW+DrvSW 			;AN000;(Check if file spec is supported)
 30287                                  
 30288                                  ; 25/10/2022
 30289                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16FDh)
 30290                                  
 30291 00001997 5B5D7C3C3E2B3D3B22      _$P_FileSp_Char	   db	'[]|<>+=;"'     ;AN000; delimitter of file spec
 30292                                  _$P_FileSp_Len	   equ	$-_$P_FileSp_Char ;AN000;
 30293                                  
 30294                                  ;ENDIF					;AN000;(of FileSW)
 30295                                  
 30296                                  ; delimiter parsing
 30297                                  _$P_colon_period   equ	01h		;AN032; check for colon & period
 30298                                  _$P_period_only	   equ	02h		;AN032; check only for period
 30299                                  
 30300                                  ;filespec error flag
 30301 000019A0 00                      _$P_err_flag:	   db	0		;AN033; flag set if filespec parsing error
 30302                                  					;AN033;  was detected.
 30303                                  _$P_error_filespec equ	01h		;AN033; mask to set flag
 30304                                  
 30305                                  
 30306                                  ; PARSE.ASM - MSDOS 6.0 - 1991
 30307                                  ; ======================================================================
 30308                                  ; 27/03/2019 - Retro DOS v4.0
 30309                                  
 30310                                  ;***********************************************************************
 30311                                  ; SysParse;
 30312                                  ;
 30313                                  ;  Function : Parser Entry
 30314                                  ;
 30315                                  ;  Input: DS:SI -> command line
 30316                                  ;	  ES:DI -> parameter block
 30317                                  ;	  cs -> psdata.inc
 30318                                  ;	  CX = operand ordinal
 30319                                  ;
 30320                                  ;	  Note:  ES is the segment containing all the control blocks defined
 30321                                  ;		 by the caller, except for the DOS COMMAND line parms, which
 30322                                  ;		 is in DS.
 30323                                  ;
 30324                                  ;  Output: CY = 1   error of caller, means invalid parameter block or
 30325                                  ;		    invalid value list. But this parser does NOT implement
 30326                                  ;		    this feature. Therefore CY always zero.
 30327                                  ;
 30328                                  ;	   CY = 0   AX = return code
 30329                                  ;		    BL = terminated delimiter code
 30330                                  ;		    CX = new operand ordinal
 30331                                  ;		    SI = set past scaned operand
 30332                                  ;		    DX = selected result buffer
 30333                                  ;
 30334                                  ; Use:	_$P_Skip_Delim, _$P_Chk_EOL, _$P_Chk_Delim, _$P_Chk_DBCS
 30335                                  ;	_$P_Chk_Swtch, _$P_Chk_Pos_Control, _$P_Chk_Key_Control
 30336                                  ;	_$P_Chk_Sw_Control, _$P_Fill_Result
 30337                                  ;
 30338                                  ; Vars: _$P_Ordinal(RW), _$P_RC(RW), _$P_SI_Save(RW), _$P_DX(R), _$P_Terminator(R)
 30339                                  ;	_$P_SaveSI_Cmpx(W), _$P_Flags(RW), _$P_Found_SYNONYM(R), _$P_Save_EOB(W)
 30340                                  ;
 30341                                  ;-------- Modification History -----------------------------------------
 30342                                  ;
 30343                                  ;  4/04/87 : Created by K. K,
 30344                                  ;  4/28/87 : _$P_Val_YH assemble error (tm01)
 30345                                  ;	   : JMP SHORT assemble error (tm02)
 30346                                  ;  5/14/87 : Someone doesn't want to include psdata (tm03)
 30347                                  ;  6/12/87 : _$P_Bridge is missing when TimeSw equ 0 and (CmpxSw equ 1 or
 30348                                  ;	     DateSW equ 1)	      (tm04)
 30349                                  ;  6/12/87 : _$P_SorD_Quote is missing when QusSw equ 0 and CmpxSW equ 1
 30350                                  ;				      (tm05) in PSDATA.INC
 30351                                  ;  6/12/87 : _$P_FileSp_Char and _$P_FileSP_Len are missing
 30352                                  ;	     when FileSW equ 0 and DrvSW equ 1 (tm06) in PSDATA.INC
 30353                                  ;  6/18/87 : $VAL1 and $VAL3, $VAL2 and $VAL3 can be used in the same
 30354                                  ;	     value-list block	      (tm07)
 30355                                  ;  6/20/87 : Add _$P_SW to check if there's an omiting parameter after
 30356                                  ;	     switch (keyword) or not. If there is, backup si for next call
 30357                                  ;	     (tm08)
 30358                                  ;  6/24/87 : Complex Item checking does not work correctly when CmpSW equ 1
 30359                                  ;	     and DateSW equ 0 and TimeSW equ 0 (tm09)
 30360                                  ;  6/24/87 : New function flag _$P_colon_is_not_necessary for switch
 30361                                  ;	     /+15 and /+:15 are allowed for user (tm10)
 30362                                  ;  6/29/87 : ECS call changes DS register but it causes the address problem
 30363                                  ;	     in user's routines. _$P_Chk_DBCS (tm11)
 30364                                  ;  7/10/87 : Switch with no_match flag (0x0000H) does not work correctly
 30365                                  ;					  (tm12)
 30366                                  ;  7/10/87 : Invalid switch/keyword does not work correctly
 30367                                  ;					  (tm13)
 30368                                  ;  7/10/87 : Drive_only breaks 3 bytes after the result buffer
 30369                                  ;					  (tm14)
 30370                                  ;  7/12/87 : Too_Many_Operands sets DX=0 as the PARSE result
 30371                                  ;					  (tm15)
 30372                                  ;  7/24/87 : Negative lower bound on numeric ranges cause trouble
 30373                                  
 30374                                  ;  7/24/87 : Quoted strings being returned with quotes.
 30375                                  
 30376                                  ;  7/28/87 : Kerry S (;AN018;)
 30377                                  ;	     Non optional value on switch (match flags<>0 and <>1) not flagged
 30378                                  ;	     as an error when missing.	Solution: return error 2.  Modules
 30379                                  ;	     affected: _$P_Chk_SW_Control.
 30380                                  
 30381                                  ;  7/29/87 : Kerry S (;AN019;)
 30382                                  ;	     Now allow the optional bit in match flags for switches.  This
 30383                                  ;	     allows the switch to be encountered with a value or without a
 30384                                  ;	     value and no error is returned.
 30385                                  ;
 30386                                  
 30387                                  ;  8/28/87 : Ed K, Kerry S (;AN020;)
 30388                                  ;  9/14/87   In PROC _$P_Get_DecNum, when checking for field separators
 30389                                  ;	     within a date response, instead of checking just for the one
 30390                                  ;	     character defined by the COUNTRY DEPENDENT INFO, check for
 30391                                  ;	     all three chars, "-", "/", and ".". Change _$P_Chk_Switch to allow
 30392                                  ;	     slashes in date strings when DateSw (assembler switch) is set.
 30393                                  
 30394                                  ;  9/1/87  : Kerry S (;AN021)
 30395                                  ;	     In PROC _$P_String_Comp, when comparing the switch or keyword on
 30396                                  ;	     the command line with the string in the control block the
 30397                                  ;	     comparing was stopping at a colon (switch) or equal (keyword)
 30398                                  ;	     on the command line and assuming a match.	This allowed a shorter
 30399                                  ;	     string on the command line than in the synonym list in the control
 30400                                  ;	     block.  I put in a test for a null in the control block so the
 30401                                  ;	     string in the control block must be the same length as the string
 30402                                  ;	     preceeding the colon or equal on the command line.
 30403                                  
 30404                                  ;  8/28/87 : Kerry S (;AN022;)
 30405                                  ;	     All references to data in PSDATA.INC had CS overrides.  This caused
 30406                                  ;	     problems for people who included it themselves in a segment other
 30407                                  ;	     than CS.  Added switch to allow including PSDATA.INC in any
 30408                                  ;	     segment.
 30409                                  
 30410                                  ;  9/16/87 : Ed K (;AN023;) PTM1040
 30411                                  ;	     in _$P_set_cdi PROC, it assumes CS points to psdata. Change Push CS
 30412                                  ;	     into PUSH cs.  In _$P_Get_DecNum PROC, fix AN020
 30413                                  ;	     forced both TIME and DATE to use the delims, "-","/",".".
 30414                                  ;	     Created FLag, in _$P_time_Format PROC, to request the delim in
 30415                                  ;	     BL be used if TIME is being parsed.
 30416                                  
 30417                                  ;  9/24/87 : Ed K
 30418                                  ;	     Removed the include to STRUC.INC.	Replaced the STRUC macro
 30419                                  ;	     invocations with their normally expanded code; made comments
 30420                                  ;	     out of the STRUC macro invocation statements to maintain readability.
 30421                                  
 30422                                  ;  9/24/87 : Ed K (;AN024;) PTM1222
 30423                                  ;	     When no CONTROL for a keyword found, tried to fill in RESULT
 30424                                  ;	     pointed to by non-existant CONTROL.
 30425                                  
 30426                                  ; 10/15/87 : Ed K (;AN025;) PTM1672
 30427                                  ;	     A quoted text string can be framed only by double quote.  Remove
 30428                                  ;	     support to frame quoted text string with single quote.
 30429                                  ;	     (apostrophe) _$P_SorD_Quote is removed from PSDATA.INC.
 30430                                  ;	     _$P_SQuote EQU also removed from PSDATA.INC.  Any references to
 30431                                  ;	     single quote in PROC prologues are left as is for history reasons.
 30432                                  
 30433                                  ;	     This fixes another bug, not mentioned in p1672, in that two
 30434                                  ;	     quote chars within a quoted string is supposed to be reported as
 30435                                  ;	     one quote character, but is reported as two quotes.  This changed
 30436                                  ;	     two instructions in PROC _$P_Quoted_Str.
 30437                                  
 30438                                  ;	     Also fixed are several JMP that caused a NOP, these changed to
 30439                                  ;	     have the SHORT operator to avoid the unneeded NOP.
 30440                                  
 30441                                  ;	     The code and PSDATA.INC have been aligned for ease of reading.
 30442                                  
 30443                                  ; 10/26/87 : Ed K (;AN026;) PTM2041, DATE within SWITCH, BX reference to
 30444                                  ;	     psdata buffer should have cs.
 30445                                  
 30446                                  ; 10/27/87 : Ed K (;AN027;) PTM2042 comma between keywords implies
 30447                                  ;	     positional missing.
 30448                                  
 30449                                  ; 11/06/87 : Ed K (;AN028;) PTM 2315 Parser should not use line feed
 30450                                  ;	     as a line delimiter, should use carriage return.
 30451                                  ;	     Define switch: LFEOLSW, if on, accept LF as end of line char.
 30452                                  
 30453                                  ; 11/11/87 : Ed K (;AN029;) PTM 1651 GET RID OF WHITESPACE AROUND "=".
 30454                                  
 30455                                  ; 11/18/87 : Ed K (;AN030;) PTM 2551 If filename is just "", then
 30456                                  ;	     endless loop since SI is returned still pointing to start
 30457                                  ;	     of that parm.
 30458                                  
 30459                                  ; 11/19/87 : Ed K (;AN031;) PTM 2585 date & time getting bad values.
 30460                                  ;	     Vector to returned string has CS instead of cs, but
 30461                                  ;	     when tried to fix it on previous version, changed similar
 30462                                  ;	     but wrong place.
 30463                                  
 30464                                  ; 12/09/87 : Bill L (;AN032;) PTM 2772 colon and period are now valid
 30465                                  ;	     delimiters between hours, minutes, seconds for time. And period
 30466                                  ;	     and comma are valid delimiters between seconds and 100th second.
 30467                                  
 30468                                  ; 12/14/87 : Bill L (;AN033;) PTM 2722 if illegal delimiter characters
 30469                                  ;	     in a filespec, then flag an error.
 30470                                  
 30471                                  ; 12/22/87 : Bill L (;AN034;)	    All local data to parser is now
 30472                                  ;	     indexed off of the cs equate instead of the DS register.
 30473                                  ;	     Using this method, DS can point to the segment of PSP or to psdata
 30474                                  ;  -->	     local parser data. Why were some references to local data changed
 30475                                  ;	     to do this before, but not all ?????
 30476                                  
 30477                                  ; 02/02/88 : Ed K (;AC035;) INSPECT utility, suggests optimizations.
 30478                                  
 30479                                  ; 02/05/88 : Ed K (;AN036;) P3372-UPPERCASE TRANSLATION, cs HOSED.
 30480                                  ;
 30481                                  ; 02/08/88 : Ed K (;AN037;) P3410-AVOID POP OF CS, CHECK BASESW FIRST.
 30482                                  
 30483                                  ; 02/19/88 : Ed K (;AN038;) p3524 above noon and "am" should be error
 30484                                  
 30485                                  ; 02/23/88 : Ed K (;AN039;) p3518 accept "comma" and "period" as decimal
 30486                                  ;	     separator in TIME before hundredths field.
 30487                                  ;
 30488                                  ; 08/09/90 : SA	M005	Prevented parser from recognizing '=' signs within
 30489                                  ;			strings as keywords.
 30490                                  ;
 30491                                  ;***********************************************************************
 30492                                  
 30493                                  ;IF FarSW				;AN000;(Check if need far return)
 30494                                  ;SysParse proc far			;AN000;
 30495                                  ;ELSE					;AN000;
 30496                                  ;SysParse proc near			;AN000;
 30497                                  ;ENDIF					;AN000;(of FarSW)
 30498                                  
 30499                                  ; 27/03/2019 - Retro DOS v4.0
 30500                                  ; (MSDOS 6.21 IO.SYS - SYSINIT:1842h)
 30501                                  
 30502                                  ; 25/10/2022 - Retro DOS v4.0
 30503                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:1707h)
 30504                                  
 30505                                  ; 06/09/2023 - Retro DOS v4.2 IO.SYS Optimization (& Retro DOS v5.0 pre-work)
 30506                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1D08h)
 30507                                  
 30508                                  SysParse:
 30509                                  	; 06/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 30510                                  	; dx = 0
 30511 000019A1 1E                      	push	ds ; *!*
 30512 000019A2 0E                      	push	cs
 30513 000019A3 1F                      	pop	ds 
 30514                                  
 30515                                  	;mov	word [cs:_$P_Flags],0	;AC034; Clear all internal flags
 30516                                  	;cld				;AN000; confirm forward direction
 30517                                  	;mov	word [cs:_$P_ORDINAL],cx ;AC034; save operand ordinal
 30518                                  	;mov	word [cs:_$P_RC],_$P_No_Error ;AC034; Assume no error
 30519                                  	;mov	word [cs:_$P_Found_SYNONYM],0 ;AC034; initalize synonym pointer
 30520                                  	;
 30521                                  	;mov	word [cs:_$P_DX],0	;AC034; (tm15)
 30522                                  
 30523                                  	; 06/09/2023
 30524 000019A4 8916[0819]              	mov	[_$P_Flags],dx ; 0	;AC034; Clear all internal flags
 30525 000019A8 FC                      	cld				;AN000; confirm forward direction
 30526 000019A9 890E[FB18]              	mov	[_$P_ORDINAL],cx	;AC034; save operand ordinal
 30527 000019AD 8916[FD18]              	mov	[_$P_RC],dx ; $P_No_Error ;AC034; Assume no error
 30528 000019B1 8916[1019]              	mov	[_$P_Found_SYNONYM],dx	; 0 ;AC034; initalize synonym pointer
 30529 000019B5 8916[0119]              	mov	[_$P_DX],dx ; 0		;AC034; (tm15)
 30530                                  
 30531                                  ;M029 -- Begin changes
 30532                                  ; The table of special chars _$P_FileSp_Char should be initialized on every
 30533                                  ;entry to SysParse. This is in the non-checksum region and any program that
 30534                                  ;corrupts this table but does not corrupt the checksum region will leave
 30535                                  ;command.com parsing in an inconsistent state.
 30536                                  ; NB: The special characters string has been hardcoded here. If any change
 30537                                  ;is made to it in psdata.inc, a corresponding change needs to be made here.
 30538                                  
 30539                                  ;IF FileSW + DrvSW
 30540                                  	;mov	word [cs:_$P_FileSp_Char], ']['
 30541                                  	;mov	word [cs:_$P_FileSp_Char+2], '<|'
 30542                                  	;mov	word [cs:_$P_FileSp_Char+4], '+>'
 30543                                  	;mov 	word [cs:_$P_FileSp_Char+6], ';='
 30544                                  
 30545                                  	; 06/09/2023
 30546 000019B9 C706[9719]5D5B          	mov	word [_$P_FileSp_Char], ']['
 30547 000019BF C706[9919]3C7C          	mov	word [_$P_FileSp_Char+2], '<|'
 30548 000019C5 C706[9B19]2B3E          	mov	word [_$P_FileSp_Char+4], '+>'
 30549 000019CB C706[9D19]3B3D          	mov 	word [_$P_FileSp_Char+6], ';='
 30550                                  ;ENDIF
 30551                                  	; 06/09/2023
 30552 000019D1 1F                      	pop	ds ; *!*
 30553                                  
 30554                                  ;M029 -- End of changes
 30555                                  
 30556 000019D2 E88006                  	call	_$P_Skip_Delim		;AN000; Move si to 1st non white space
 30557 000019D5 7313                    	jnc	short _$P_Start		;AN000; If EOL is not encountered, do parse
 30558                                  ;--------------------------- End of Line
 30559 000019D7 B8FFFF                  	mov	ax,_$P_RC_EOL		;AN000; set exit code to -1
 30560 000019DA 53                      	push	bx			;AN000;
 30561                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address]
 30562                                  					;AN000; Get the PARMSX address to
 30563 000019DB 268B1D                  	mov	bx,[es:di]
 30564                                  	;cmp	cl,[es:bx+_$P_PARMSX_Blk.MinP]
 30565                                  					;AN000; check ORDINAL to see if the minimum
 30566 000019DE 263A0F                  	cmp	cl,[es:bx]	
 30567 000019E1 7303                    	jae	short _$P_Fin		;AN000; positional found.
 30568                                  
 30569 000019E3 B80200                  	mov	ax,_$P_Op_Missing	;AN000; If no, set exit code to missing operand
 30570                                  _$P_Fin: 				;AN000;
 30571 000019E6 5B                      	pop	bx			;AN000;
 30572 000019E7 E90A01                  	jmp	_$P_Single_Exit		;AN000; return to the caller
 30573                                  ;---------------------------
 30574                                  _$P_Start:				;AN000;
 30575 000019EA 2E8936[0A19]            	mov	[cs:_$P_SaveSI_Cmpx],si ;AN000;AC034; save ptr to command line for later use by complex,
 30576 000019EF 53                      	push	bx			;AN000; quoted string or file spec.
 30577 000019F0 57                      	push	di			;AN000;
 30578 000019F1 55                      	push	bp			;AN000;
 30579                                  	;;lea	bx,[cs:_$P_STRING_BUF] ;AC034; set buffer to copy from command string
 30580                                  	; 02/11/2022
 30581                                  	;lea	bx,[_$P_STRING_BUF]
 30582                                  	; 07/09/2023
 30583 000019F2 BB[1219]                	mov	bx,_$P_STRING_BUF
 30584 000019F5 2EF606[0919]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 extra delimiter encountered ?
 30585 000019FB 7543                    	jnz	short _$P_Pack_End	;AN000; 3/9 if yes, no need to copy
 30586                                  
 30587                                  _$P_Pack_Loop:				;AN000;
 30588 000019FD AC                      	lodsb				;AN000; Pick a operand from buffer
 30589 000019FE E8F906                  	call	_$P_Chk_Switch		;AN000; Check switch character
 30590 00001A01 723C                    	jc	short _$P_Pack_End_BY_EOL ;AN020; if carry set found delimiter type slash, need backup si, else continue
 30591                                  
 30592 00001A03 E87106                  	call	_$P_Chk_EOL		;AN000; Check EOL character
 30593 00001A06 7437                    	je	short _$P_Pack_End_BY_EOL ;AN000; need backup si
 30594                                  
 30595 00001A08 E8A106                  	call	_$P_Chk_Delim		;AN000; Check delimiter
 30596 00001A0B 7518                    	jne	short _$P_PL01 		;AN000; If no, process next byte
 30597                                  
 30598 00001A0D 2EF606[0919]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 If yes and white spec,
 30599                                  ; (tm08)jne	short _$P_Pack_End	;AN000; 3/9 then
 30600 00001A13 7505                    	jnz	short _$P_Pack_End_backup_si ;AN000; (tm08)
 30601                                  
 30602 00001A15 E83D06                  	call	_$P_Skip_Delim		;AN000; skip subsequent white space,too
 30603 00001A18 EB26                    	jmp	short _$P_Pack_End	;AN000; finish copy by placing NUL at end
 30604                                  
 30605                                  _$P_Pack_End_backup_si:			;AN000; (tm08)
 30606 00001A1A 2EF606[0919]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AN000;AC034;  (tm08)
 30607 00001A20 741E                    	jz	short _$P_Pack_End	;AN000; (tm08)
 30608                                  
 30609 00001A22 4E                      	dec	si			;AN000; (tm08)
 30610 00001A23 EB1B                    	jmp	short _$P_Pack_End	;AN025; (tm08)
 30611                                  
 30612                                  _$P_PL01:				;AN000;
 30613 00001A25 2E8807                  	mov	[cs:bx],al		;AN000; move byte to STRING_BUF
 30614 00001A28 3C3D                    	cmp	al,_$P_Keyword  ;'='	;AN000; if it is equal character,
 30615 00001A2A 7506                    	jne	short _$P_PL00 		;AN000; then
 30616                                  
 30617 00001A2C 2E800E[0919]01          	or	byte [cs:_$P_Flags2],_$P_equ ;AC034; remember it in flag
 30618                                  _$P_PL00:				;AN000;
 30619 00001A32 43                      	inc	bx			;AN000; ready to see next byte
 30620 00001A33 E8DD06                  	call	_$P_Chk_DBCS		;AN000; was it 1st byte of DBCS ?
 30621 00001A36 73C5                    	jnc	short _$P_Pack_Loop	;AN000; if no, process to next byte
 30622                                  
 30623 00001A38 AC                      	lodsb				;AN000; if yes, store
 30624 00001A39 2E8807                  	mov	[cs:bx],al		;AN000;    2nd byte of DBCS
 30625 00001A3C 43                      	inc	bx			;AN000; update pointer
 30626 00001A3D EBBE                    	jmp	short _$P_Pack_Loop	;AN000; process to next byte
 30627                                  
 30628                                  _$P_Pack_End_BY_EOL:			;AN000;
 30629 00001A3F 4E                      	dec	si			;AN000; backup si pointer
 30630                                  _$P_Pack_End:				;AN000;
 30631 00001A40 2E8936[FF18]            	mov	[cs:_$P_SI_Save],si     ;AC034; save next pointer, SI
 30632                                  	; 07/09/2023
 30633                                  	;mov	byte [cs:bx],_$P_NULL	;AN000; put NULL at the end
 30634 00001A45 30E4                    	xor	ah,ah ; 0 ; *
 30635 00001A47 2E8827                  	mov	[cs:bx],ah ; _$P_NULL	;AN000; put NULL at the end
 30636                                  	;
 30637 00001A4A 2E891E[0E19]            	mov	[cs:_$P_Save_EOB],bx    ;AC034; 3/17/87 keep the address for later use of complex
 30638                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address] ;AN000; get PARMSX address
 30639 00001A4F 268B1D                  	mov	bx,[es:di]
 30640                                  	;;lea	si,[cs:_$P_STRING_BUF]	;AC034;
 30641                                  	; 02/11/2022
 30642                                  	;lea	si,[_$P_STRING_BUF]
 30643                                  	; 07/09/2023
 30644 00001A52 BE[1219]                	mov	si,_$P_STRING_BUF
 30645 00001A55 2E803C2F                	cmp	byte [cs:si],_$P_Switch ;AN000; the operand begins w/ switch char ?
 30646 00001A59 7440                    	je	short _$P_SW_Manager	;AN000; if yes, process as switch
 30647                                  
 30648 00001A5B 2E803C22                	cmp	byte [cs:si],_$P_DQuote	;M005;is it a string?
 30649 00001A5F 7408                    	je	short _$P_Positional_Manager ;M005;if so, process as one!
 30650                                  
 30651 00001A61 2EF606[0919]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AC034; the operand includes equal char ?
 30652 00001A67 7552                    	jnz	short _$P_Key_Manager	;AN000; if yes, process as keyword
 30653                                  
 30654                                  _$P_Positional_Manager:			;AN000; else process as positional
 30655 00001A69 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 30656                                  	; 07/09/2023
 30657                                  	;xor	ah,ah			;AN000; ax = maxp
 30658 00001A6D 2E3906[FB18]            	cmp	[cs:_$P_ORDINAL],ax	;AC034; too many positional ?
 30659 00001A72 7312                    	jae	short _$P_Too_Many_Error ;AN000; if yes, set exit code to too many
 30660                                  
 30661 00001A74 2EA1[FB18]              	mov	ax,[cs:_$P_ORDINAL]	;AC034; see what the current ordinal
 30662 00001A78 D1E0                    	shl	ax,1			;AN000; ax = ax*2
 30663 00001A7A 43                      	inc	bx			;AC035; add '2' to
 30664 00001A7B 43                      	inc	bx			;AC035;  BX reg
 30665                                  					;AN000; now bx points to 1st CONTROL
 30666 00001A7C 01C3                    	add	bx,ax			;AN000; now bx points to specified CONTROL address
 30667 00001A7E 268B1F                  	mov	bx,[es:bx]		;AN000; now bx points to specified CONTROL itself
 30668 00001A81 E87200                  	call	_$P_Chk_Pos_Control	;AN000; Do process for positional
 30669 00001A84 EB53                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 30670                                  
 30671                                  _$P_Too_Many_Error:			;AN000;
 30672 00001A86 2EC706[FD18]0100        	mov	word [cs:_$P_RC],_$P_Too_Many ;AC034; set exit code
 30673 00001A8D EB4A                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 30674                                  
 30675                                  	; 07/09/2023 - Retro DOSD v4.2 IO.SYS (Optimization)
 30676                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1E06h)
 30677                                  get_maxp:
 30678                                  	;mov	al,[es:bx+1]
 30679 00001A8F 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 30680                                  	; 07/09/2023
 30681                                  	; ah=0 ; *
 30682                                  	;xor	ah,ah ; 0		;AN000; ax = maxp
 30683 00001A93 30ED                    	xor	ch,ch ; **
 30684 00001A95 40                      	inc	ax			;AN000;
 30685 00001A96 D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 30686 00001A98 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 30687 00001A9A C3                      	retn
 30688                                  
 30689                                  _$P_SW_Manager:				;AN000;
 30690                                  	; 07/09/2023
 30691                                  	;mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 30692                                  	;xor	ah,ah			;AN000; ax = maxp
 30693                                  	;inc	ax			;AN000;
 30694                                  	;shl	ax,1			;AN000; ax = (ax+1)*2
 30695                                  	;add	bx,ax			;AN000; now bx points to maxs
 30696 00001A9B E8F1FF                  	call	get_maxp ; 07/09/2023
 30697                                  
 30698 00001A9E 268A0F                  	mov	cl,[es:bx]		;AN000;
 30699                                  	; 07/09/2023
 30700                                  	;xor	ch,ch ; ** (ch=0)	;AN000; cx = maxs
 30701                                  	;or	cx,cx			;AN000; at least one switch ?
 30702                                  	;jz	short _$P_SW_Not_Found 	;AN000;
 30703                                  	; 07/07/2023
 30704 00001AA1 E30F                    	jcxz	_$P_SW_Not_Found	; no
 30705                                  
 30706 00001AA3 43                      	inc	bx			;AN000; now bx points to 1st CONTROL address
 30707                                  
 30708                                  _$P_SW_Mgr_Loop: 			;AN000;
 30709 00001AA4 53                      	push	bx			;AN000;
 30710 00001AA5 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to Switch CONTROL itself
 30711 00001AA8 E8A900                  	call	_$P_Chk_SW_Control	;AN000; do process for switch
 30712 00001AAB 5B                      	pop	bx			;AN000;
 30713 00001AAC 732B                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the switch, exit
 30714                                  
 30715 00001AAE 43                      	inc	bx			;AC035; add '2' to
 30716 00001AAF 43                      	inc	bx			;AC035;  BX reg
 30717                                  					;AN000; else bx points to the next CONTROL
 30718 00001AB0 E2F2                    	loop	_$P_SW_Mgr_Loop		;AN000; and loop
 30719                                  
 30720                                  _$P_SW_Not_Found:			;AN000;
 30721 00001AB2 2EC706[FD18]0300        	mov	word [cs:_$P_RC],_$P_Not_In_SW ;AC034; here no CONTROL for the switch has
 30722 00001AB9 EB1E                    	jmp	short _$P_Return_to_Caller ;AN000; not been found, means error.
 30723                                  
 30724                                  _$P_Key_Manager: 			;AN000;
 30725                                  	; 07/09/2023
 30726                                  	;mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 30727                                  	;xor	ah,ah			;AN000; ax = maxp
 30728                                  	;inc	ax			;AN000;
 30729                                  	;shl	ax,1			;AN000; ax = (ax+1)*2
 30730                                  	;add	bx,ax			;AN000; now bx points to maxs
 30731 00001ABB E8D1FF                  	call	get_maxp ; 07/09/2023
 30732                                  	
 30733 00001ABE 268A07                  	mov	al,[es:bx]		;AN000;
 30734 00001AC1 30E4                    	xor	ah,ah ; 0		;AN000; ax = maxs
 30735 00001AC3 D1E0                    	shl	ax,1			;AN000;
 30736 00001AC5 40                      	inc	ax			;AN000; ax = ax*2+1
 30737 00001AC6 01C3                    	add	bx,ax			;AN000; now bx points to maxk
 30738 00001AC8 268A0F                  	mov	cl,[es:bx]		;AN000;
 30739                                  	; 07/09/2023
 30740                                  	;xor	ch,ch ; ** (ch=0)	;AN000; cx = maxk
 30741                                  	;or	cx,cx			;AN000; at least one keyword ?
 30742                                  	;jz	short _$P_Key_Not_Found	;AN000;
 30743                                  	; 07/07/2023
 30744 00001ACB E305                    	jcxz	_$P_Key_Not_Found	; no
 30745                                  
 30746 00001ACD 43                      	inc	bx			;AN000; now bx points to 1st CONTROL
 30747                                  
 30748                                  _$P_Key_Mgr_Loop:			;AN000;
 30749                                  	; 07/09/2023
 30750                                  	; ('_$P_Chk_Key_Control' contains only 'stc' instruction)
 30751                                  	; (always returns with cf=1)
 30752                                  	;push	bx			;AN000;
 30753                                  	;mov	bx,[es:bx]		;AN000; bx points to keyword CONTROL itself
 30754                                  	;call	_$P_Chk_Key_Control	;AN000; do process for keyword
 30755                                  	;pop	bx			;AN000;
 30756                                  	;jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the keyword, exit
 30757                                  	; 07/09/2023
 30758                                  	; cf=1 (after 'call _$P_Chk_Key_Control')
 30759                                  
 30760 00001ACE 43                      	inc	bx			;AC035; add '2' to
 30761 00001ACF 43                      	inc	bx			;AC035;  BX reg
 30762                                  					;AN000; else bx points to the next CONTROL
 30763 00001AD0 E2FC                    	loop	_$P_Key_Mgr_Loop 	;AN000; and loop
 30764                                  
 30765                                  _$P_Key_Not_Found:			;AN000;
 30766 00001AD2 2EC706[FD18]0400        	mov	word [cs:_$P_RC],_$P_Not_In_Key ;AC034; here no CONTROL for the keyword has
 30767                                  _$P_Return_to_Caller:			;AN000;
 30768 00001AD9 5D                      	pop	bp			;AN000;
 30769 00001ADA 5F                      	pop	di			;AN000;
 30770 00001ADB 5B                      	pop	bx			;AN000;
 30771 00001ADC 2E8B0E[FB18]            	mov	cx,[cs:_$P_ORDINAL]	;AC034; return next ordinal
 30772 00001AE1 2EA1[FD18]              	mov	ax,[cs:_$P_RC]		;AC034; return exit code
 30773 00001AE5 2E8B36[FF18]            	mov	si,[cs:_$P_SI_Save]	;AC034; return next operand pointer
 30774 00001AEA 2E8B16[0119]            	mov	dx,[cs:_$P_DX]		;AC034; return result buffer address
 30775 00001AEF 2E8A1E[0319]            	mov	bl,[cs:_$P_Terminator]	;AC034; return delimiter code found
 30776                                  _$P_Single_Exit: 			;AN000;
 30777 00001AF4 F8                      	clc				;AN000;
 30778 00001AF5 C3                      	retn				;AN000;
 30779                                  
 30780                                  ;***********************************************************************
 30781                                  ; _$P_Chk_Pos_Control
 30782                                  ;
 30783                                  ; Function: Parse CONTROL block for a positional
 30784                                  ;
 30785                                  ; Input:     ES:BX -> CONTROL block
 30786                                  ;	     cs:SI -> _$P_STRING_BUF
 30787                                  ;
 30788                                  ; Output:    None
 30789                                  ;
 30790                                  ; Use:	 _$P_Fill_Result, _$P_Check_Match_Flags
 30791                                  ;
 30792                                  ; Vars: _$P_Ordinal(W), _$P_RC(W)
 30793                                  ;***********************************************************************
 30794                                  
 30795                                  _$P_Chk_Pos_Control:
 30796 00001AF6 50                      	push	ax			;AN000;
 30797                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag] ;AN000;
 30798 00001AF7 268B07                  	mov	ax,[es:bx]
 30799                                  	; 12/12/2022
 30800 00001AFA A802                    	test	al,_$P_Repeat
 30801                                  	;test	ax,_$P_Repeat		;AN000; repeat allowed ?
 30802 00001AFC 7505                    	jnz	short _$P_CPC00		;AN000; then do not increment ORDINAL
 30803                                  
 30804 00001AFE 2EFF06[FB18]            	inc	word [cs:_$P_ORDINAL]	;AC034; update the ordinal
 30805                                  _$P_CPC00:				;AN000;
 30806 00001B03 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; no data ?
 30807 00001B07 7517                    	jne	short _$P_CPC01		;AN000;
 30808                                  
 30809                                  	; 12/12/2022
 30810 00001B09 A801                    	test	al,_$P_Optional
 30811                                  	;test	ax,_$P_Optional		;AN000; yes, then is it optional ?
 30812 00001B0B 7509                    	jnz	short _$P_CPC02		;AN000;
 30813                                  
 30814 00001B0D 2EC706[FD18]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; no, then error 3/17/87
 30815 00001B14 EB0D                    	jmp	short _$P_CPC_Exit	;AN000;
 30816                                  
 30817                                  _$P_CPC02:				;AN000;
 30818 00001B16 50                      	push	ax			;AN000;
 30819                                  	;mov	al,_$P_String		;AN000; if it is optional return NULL
 30820                                  	;mov	ah,_$P_No_Tag		;AN000; no item tag indication
 30821                                  	; 07/07/2023
 30822 00001B17 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 30823 00001B1A E89600                  	call	_$P_Fill_Result		;AN000;
 30824 00001B1D 58                      	pop	ax			;AN000;
 30825 00001B1E EB03                    	jmp	short _$P_CPC_Exit	;AN000;
 30826                                  
 30827                                  _$P_CPC01:				;AN000;
 30828 00001B20 E81101                  	call	_$P_Check_Match_Flags	;AN000;
 30829                                  _$P_CPC_Exit:				;AN000;
 30830 00001B23 58                      	pop	ax			;AN000;
 30831 00001B24 C3                      	retn				;AN000;
 30832                                  
 30833                                  ;***********************************************************************
 30834                                  ; _$P_Chk_Key_Control
 30835                                  ;
 30836                                  ; Function: Parse CONTROL block for a keyword
 30837                                  ;
 30838                                  ; Input:     ES:BX -> CONTROL block
 30839                                  ;	     cs:SI -> _$P_STRING_BUF
 30840                                  ;
 30841                                  ; Output:    CY = 1 : not match
 30842                                  ;
 30843                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 30844                                  ;
 30845                                  ; Vars: _$P_RC(W), _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 30846                                  ;***********************************************************************
 30847                                  
 30848                                  ; 07/09/2023
 30849                                  ;_$P_Chk_Key_Control:
 30850                                  ;	stc				;AN000; this logic works when the KeySW
 30851                                  ;	retn				;AN000; is reset.
 30852                                  
 30853                                  ;***********************************************************************
 30854                                  ; _$P_Search_KEYorSW:
 30855                                  ;
 30856                                  ; Function: Seach specified keyword or switch from CONTROL
 30857                                  ;
 30858                                  ; Input:     ES:BX -> CONTROL block
 30859                                  ;	     cs:SI -> _$P_STRING_BUF
 30860                                  ;
 30861                                  ; Output:    CY = 1 : not match
 30862                                  ;
 30863                                  ; Use:	 _$P_String_Comp, _$P_MoveBP_NUL, _$P_Found_SYNONYM
 30864                                  ;***********************************************************************
 30865                                  
 30866                                  	; 25/10/2022 - Retro DOS v4.0
 30867                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:18B6h)
 30868                                  
 30869                                  _$P_Search_KEYorSW:			;AN000;
 30870 00001B25 55                      	push	bp			;AN000;
 30871 00001B26 51                      	push	cx			;AN000;
 30872 00001B27 268A4F08                	mov	cl,[es:bx+_$P_Control_Blk.nid] ;AN000; Get synonym count
 30873 00001B2B 30ED                    	xor	ch,ch			;AN000; and set it to cx
 30874                                  	;or	cx,cx			;AN000; No synonyms specified ?
 30875                                  	;jz	short _$P_KEYorSW_Not_Found ;AN000; then indicate not found by CY
 30876                                  	; 07/07/2023
 30877 00001B2D E30D                    	jcxz	_$P_KEYorSW_Not_Found
 30878                                  
 30879                                  	;lea	bp,[es:bx+_$P_Control_Blk.KEYorSW] ;AN000; BP points to the 1st synonym
 30880                                  	; 25/10/2022
 30881 00001B2F 8D6F09                  	lea	bp,[bx+_$P_Control_Blk.KEYorSW]
 30882                                  	;lea	bp,[bx+9]
 30883                                  _$P_KEYorSW_Loop:			;AN000;
 30884 00001B32 E8BD03                  	call	_$P_String_Comp		;AN000; compare string in buffer w/ the synonym
 30885 00001B35 7308                    	jnc	short _$P_KEYorSW_Found	;AN000; If match, set it to synonym pointer
 30886                                  
 30887 00001B37 E80E00                  	call	_$P_MoveBP_NUL		;AN000; else, bp points to the next string
 30888 00001B3A E2F6                    	loop	_$P_KEYorSW_Loop 	;AN000; loop nid times
 30889                                  _$P_KEYorSW_Not_Found:			;AN000;
 30890 00001B3C F9                      	stc				;AN000; indicate not found in synonym list
 30891 00001B3D EB06                    	jmp	short _$P_KEYorSW_Exit	;AN000; and exit
 30892                                  
 30893                                  _$P_KEYorSW_Found:			;AN000;
 30894 00001B3F 2E892E[1019]            	mov	[cs:_$P_Found_SYNONYM],bp ;AC034; set synonym pointer
 30895 00001B44 F8                      	clc				;AN000; indicate found
 30896                                  _$P_KEYorSW_Exit:			;AN000;
 30897 00001B45 59                      	pop	cx			;AN000;
 30898 00001B46 5D                      	pop	bp			;AN000;
 30899 00001B47 C3                      	retn				;AN000;
 30900                                   
 30901                                  ;***********************************************************************
 30902                                  ; _$P_MoveBP_NUL
 30903                                  ;***********************************************************************
 30904                                  
 30905                                  _$P_MoveBP_NUL:
 30906                                  _$P_MBP_Loop:				;AN000;
 30907                                  	; 11/12/2022
 30908 00001B48 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; Increment BP that points
 30909                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 30910                                  	; (SYSINIT:18DBh)
 30911                                   	;cmp     byte [es:bp+0],0
 30912 00001B4D 7403                    	je	short _$P_MBP_Exit	;AN000; to the synomym list
 30913                                  
 30914 00001B4F 45                      	inc	bp			;AN000; until
 30915 00001B50 EBF6                    	jmp	short _$P_MBP_Loop	;AN000; NULL encountered.
 30916                                  
 30917                                  _$P_MBP_Exit:				;AN000;
 30918 00001B52 45                      	inc	bp			;AN000; bp points to next to NULL
 30919 00001B53 C3                      	retn				;AN000;
 30920                                  
 30921                                  ;***********************************************************************
 30922                                  ; _$P_Chk_SW_Control
 30923                                  ;
 30924                                  ; Function: Parse CONTROL block for a switch
 30925                                  ;
 30926                                  ; Input:     ES:BX -> CONTROL block
 30927                                  ;	     cs:SI -> _$P_STRING_BUF
 30928                                  ;
 30929                                  ; Output:    CY = 1 : not match
 30930                                  ;
 30931                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 30932                                  ;
 30933                                  ; Vars:  _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 30934                                  ;***********************************************************************
 30935                                  
 30936                                  _$P_Chk_SW_Control:
 30937                                  
 30938                                  ;IF SwSW				;AN000;(Check if switch is supported)
 30939                                  	;or	byte [cs:_$P_Flags+1],10h
 30940 00001B54 2E800E[0919]10          	or	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; Indicate switch for later string comparison
 30941 00001B5A E8C8FF                  	call	_$P_Search_KEYorSW	;AN000; Search the switch in the CONTROL block
 30942 00001B5D 7248                    	jc	short _$P_Chk_SW_Err0	;AN000; not found, then try next CONTROL
 30943                                  
 30944                                  	;and	[cs:_$P_Flags+],0EFh
 30945 00001B5F 2E8026[0919]EF          	and	byte [cs:_$P_Flags2],0FFh-_$P_SW_Cmp 
 30946                                  					;AC034; reset the indicator previously set
 30947 00001B65 50                      	push	ax			;AN000; 	      /switch:
 30948 00001B66 2EA1[0C19]              	mov	ax,[cs:_$P_KEYorSW_Ptr] ;AC034;	      ^       ^
 30949 00001B6A 29F0                    	sub	ax,si			;AN000;  SI	KEYorSW
 30950 00001B6C 2E0106[0A19]            	add	[cs:_$P_SaveSI_Cmpx],ax	;AC034; update for complex list
 30951 00001B71 58                      	pop	ax			;AN000;
 30952                                  
 30953 00001B72 2E8B36[0C19]            	mov	si,[cs:_$P_KEYorSW_Ptr] ;AC034; set si at the end or colon
 30954 00001B77 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; any data after colon
 30955 00001B7B 7525                    	jne	short _$P_CSW00		;AN000; if yes, process match flags
 30956                                  
 30957 00001B7D 2E807CFF3A              	cmp	byte [cs:si-1],_$P_Colon ;AN000; if no, the switch terminated by colon ?
 30958 00001B82 7509                    	jne	short _$P_Chk_if_data_required ;AN000; if yes,
 30959                                  
 30960 00001B84 2EC706[FD18]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; return syntax error
 30961 00001B8B EB1C                    	jmp	short _$P_Chk_SW_Exit	;AN000;
 30962                                  
 30963                                  _$P_Chk_if_data_required:		;AN018; no data, no colon
 30964                                  	;cmp	word [es:bx+_$P_Control_Blk.Match_Flag],0 
 30965 00001B8D 26833F00                	cmp	word [es:bx],0		;AN018; should have data? zero match flag means switch followed by nothing is OK
 30966 00001B91 7416                    	je	short _$P_Chk_SW_Exit	;AN018; match flags not zero so should have something if optional bit is not on
 30967                                  
 30968                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional 
 30969                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYINIT compatibility)
 30970                                  	;test	word [es:bx],1
 30971                                  	; 12/12/2022
 30972                                  	;test	word [es:bx],_$P_Optional ;AN019; see if no value is valid
 30973 00001B93 26F60701                	test	byte [es:bx],_$P_Optional
 30974 00001B97 7510                    	jnz	short _$P_Chk_SW_Exit	;AN019; if so, then leave, else yell
 30975                                  
 30976 00001B99 2EC706[FD18]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; return required operand missing
 30977 00001BA0 EB07                    	jmp	short _$P_Chk_SW_Exit	;AN018;
 30978                                  
 30979                                  _$P_CSW00:				;AN000;
 30980 00001BA2 E88F00                  	call	_$P_Check_Match_Flags	;AN000; process match flag
 30981 00001BA5 F8                      	clc				;AN000; indicate match
 30982                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 30983                                  	; 12/12/2022
 30984 00001BA6 C3                      	retn
 30985                                  
 30986                                  _$P_Chk_SW_Err0: 			;AN000;
 30987 00001BA7 F9                      	stc				;AN000; not found in switch synonym list
 30988                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 30989                                  	; 12/12/2022
 30990 00001BA8 C3                      	retn	
 30991                                  
 30992                                  _$P_Chk_SW_Exit: 			;AN000;
 30993 00001BA9 50                      	push	ax			;AN000;
 30994                                  	;mov	al,_$P_String		;AN000;
 30995                                  	;mov	ah,_$P_No_Tag		;AN000;
 30996                                  	; 07/07/2023
 30997 00001BAA B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 30998 00001BAD E80300                  	call	_$P_Fill_Result		;AN000; set result buffer
 30999 00001BB0 58                      	pop	ax			;AN000;
 31000 00001BB1 F8                      	clc				;AN000;
 31001                                  _$P_Chk_SW_Single_Exit:			;AN000;
 31002 00001BB2 C3                      	retn				;AN000;
 31003                                  ;ELSE					;AN000;(of IF SwSW)
 31004                                  ;	stc				;AN000; this logic works when the SwSW
 31005                                  ;	retn				;AN000; is reset.
 31006                                  
 31007                                  ;***********************************************************************
 31008                                  ; _$P_Fill_Result
 31009                                  ;
 31010                                  ; Function: Fill the result buffer
 31011                                  ;
 31012                                  ; Input:    AH = Item tag
 31013                                  ;	    AL = type
 31014                                  ;		  AL = 1: CX,DX has 32bit number (CX = high)
 31015                                  ;		  AL = 2: DX has index(offset) into value list
 31016                                  ;		  AL = 6: DL has driver # (1-A, 2-B, ... , 26 - Z)
 31017                                  ;		  AL = 7: DX has year, CL has month and CH has date
 31018                                  ;		  AL = 8: DL has hours, DH has minutes, CL has seconds,
 31019                                  ;			  amd CH has hundredths
 31020                                  ;		  AL = else: cs:SI points to returned string buffer
 31021                                  ;	    ES:BX -> CONTROL block
 31022                                  ;
 31023                                  ; Output:   None
 31024                                  ;
 31025                                  ; Use:	_$P_Do_CAPS_String, _$P_Remove_Colon, _$P_Found_SYNONYM
 31026                                  ;
 31027                                  ; Vars: _$P_DX(W)
 31028                                  ;***********************************************************************
 31029                                  
 31030                                  _$P_Fill_Result:
 31031 00001BB3 57                      	push	di			;AN000;
 31032 00001BB4 268B7F04                	mov	di,[es:bx+_$P_Control_Blk.Result_Buf]
 31033                                  					;AN000; di points to result buffer
 31034 00001BB8 2E893E[0119]            	mov	[cs:_$P_DX],di		;AC034; set returned result address
 31035                                  	;mov	[es:di+_$P_Result_Blk.Type],al ;AN000; store type
 31036                                  	;mov	[es:di+_$P_Result_Blk.Item_Tag],ah ;AN000; store item tag
 31037                                  	; 07/09/2023
 31038                                  	;mov	[es:di+_$P_Result_Blk.Type], ax
 31039 00001BBD 268905                  	mov	[es:di],ax		; store type (al) and item tag (ah)
 31040                                  
 31041 00001BC0 50                      	push	ax			;AN000;
 31042 00001BC1 2EA1[1019]              	mov	ax,[cs:_$P_Found_SYNONYM] ;AC034; if yes,
 31043 00001BC5 26894502                	mov	[es:di+_$P_Result_Blk.SYNONYM_Ptr],ax 
 31044                                  					;AN000;   then set it to the result
 31045 00001BC9 58                      	pop	ax			;AN000;
 31046                                  _$P_RLT04:				;AN000;
 31047 00001BCA 3C01                    	cmp	al,_$P_Number		;AN000; if number
 31048 00001BCC 750A                    	jne	short _$P_RLT00		;AN000;
 31049                                  
 31050                                  _$P_RLT02:				;AN000;
 31051 00001BCE 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx ;AN000; then store 32bit
 31052 00001BD2 26894D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cx ;AN000; number
 31053 00001BD6 EB5A                    	jmp	short _$P_RLT_Exit	;AN000;
 31054                                  
 31055                                  _$P_RLT00:				;AN000;
 31056 00001BD8 3C02                    	cmp	al,_$P_List_Idx		;AN000; if list index
 31057 00001BDA 7506                    	jne	short _$P_RLT01		;AN000;
 31058                                  
 31059 00001BDC 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx 
 31060                                  					;AN000; then store list index
 31061 00001BE0 EB50                    	jmp	short _$P_RLT_Exit	;AN000;
 31062                                  
 31063                                  _$P_RLT01:				;AN000;
 31064 00001BE2 3C07                    	cmp	al,_$P_Date_F		;AN000; Date format ?
 31065 00001BE4 74E8                    	je	short _$P_RLT02		;AN000;
 31066                                  
 31067 00001BE6 3C08                    	cmp	al,_$P_Time_F		;AN000; Time format ?
 31068 00001BE8 74E4                    	je	short _$P_RLT02		;AN000;
 31069                                  
 31070 00001BEA 3C06                    	cmp	al,_$P_Drive		;AN000; drive format ?
 31071 00001BEC 7506                    	jne	short _$P_RLT03		;AN000;
 31072                                  
 31073 00001BEE 26885504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dl ;AN000; store drive number
 31074 00001BF2 EB3E                    	jmp	short _$P_RLT_Exit	;AN000;
 31075                                  
 31076                                  _$P_RLT03:				;AN000;
 31077 00001BF4 3C04                    	cmp	al,_$P_Complex		;AN000; complex format ?
 31078 00001BF6 750F                    	jne	short _$P_RLT05		;AN000;
 31079                                  
 31080 00001BF8 2EA1[0A19]              	mov	ax,[cs:_$P_SaveSI_Cmpx] ;AC034; then get pointer in command buffer
 31081 00001BFC 40                      	inc	ax			;AN000; skip left Parentheses
 31082 00001BFD 26894504                	mov	[es:di+_$P_Result_Blk.Picked_Val],ax ;AN000; store offset
 31083 00001C01 268C5D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],ds ;AN000; store segment
 31084 00001C05 EB2B                    	jmp	short _$P_RLT_Exit	;AN000;
 31085                                  
 31086                                  _$P_RLT05:				;AN000;
 31087                                  ;------------------------  AL = 3, 5, or 9
 31088 00001C07 26897504                	mov	[es:di+_$P_Result_Blk.Picked_Val],si 
 31089                                  					;AN000; store offset of STRING_BUF
 31090 00001C0B 268C4D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cs 
 31091                                  					;AN031; store segment of STRING_BUF
 31092 00001C0F 50                      	push	ax			;AN000;
 31093 00001C10 26F6470201              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_File 
 31094                                  					;AN000; need CAPS by file table?
 31095 00001C15 7404                    	jz	short _$P_RLT_CAP00	;AN000;
 31096                                  
 31097 00001C17 B004                    	mov	al,_$P_DOSTBL_File	;AN000; use file upper case table
 31098 00001C19 EB09                    	jmp	short _$P_RLT_CAP02	;AN000;
 31099                                  
 31100                                  _$P_RLT_CAP00:				;AN000;
 31101 00001C1B 26F6470202              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_Char 
 31102                                  					;AN000; need CAPS by char table ?
 31103 00001C20 7405                    	jz	short _$P_RLT_CAP01	;AN000;
 31104                                  
 31105 00001C22 B002                    	mov	al,_$P_DOSTBL_Char	;AN000; use character upper case table
 31106                                  _$P_RLT_CAP02:				;AN000;
 31107 00001C24 E8DF00                  	call	_$P_Do_CAPS_String	;AN000;  process CAPS along the table
 31108                                  _$P_RLT_CAP01:				;AN000;
 31109 00001C27 58                      	pop	ax			;AN000;
 31110 00001C28 26F6470210              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_Rm_Colon 
 31111                                  					;AN000; removing colon at end ?
 31112 00001C2D 7403                    	jz	short _$P_RLT_Exit	;AN000;
 31113                                  
 31114 00001C2F E8AE00                  	call	_$P_Remove_Colon 	;AN000; then process it.
 31115                                  _$P_RLT_Exit:				;AN000;
 31116 00001C32 5F                      	pop	di			;AN000;
 31117 00001C33 C3                      	retn				;AN000;
 31118                                  
 31119                                  ;***********************************************************************
 31120                                  ; _$P_Check_Match_Flags
 31121                                  ;
 31122                                  ; Function:  Check the mutch_flags and make the exit code and set the
 31123                                  ;	     result buffer
 31124                                  ;
 31125                                  ;	    Check for types in this order:
 31126                                  ;		Complex
 31127                                  ;		Date
 31128                                  ;		Time
 31129                                  ;		Drive
 31130                                  ;		Filespec
 31131                                  ;		Quoted String
 31132                                  ;		Simple String
 31133                                  ;
 31134                                  ; Input:     cs:SI -> _$P_STRING_BUF
 31135                                  ;	     ES:BX -> CONTROL block
 31136                                  ;
 31137                                  ; Output:    None
 31138                                  ;
 31139                                  ; Use:	     _$P_Value, P$_SValue, _$P_Simple_String, _$P_Date_Format
 31140                                  ;	     _$P_Time_Format, _$P_Complex_Format, _$P_File_Foemat
 31141                                  ;	     _$P_Drive_Format
 31142                                  ;***********************************************************************
 31143                                  
 31144                                  	; 25/10/2022 - Retro DOS v4.0
 31145                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:19CFh)
 31146                                  
 31147                                  	; 12/12/2022
 31148                                  _$P_Check_Match_Flags:
 31149 00001C34 2EC606[A019]00          	mov	byte [cs:_$P_err_flag],_$P_NULL 
 31150                                  					;AN033;AC034;; clear filespec error flag.
 31151 00001C3A 50                      	push	ax			;AN000;
 31152                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag]
 31153 00001C3B 268B07                  	mov	ax,[es:bx]		;AN000; load match flag(16bit) to ax
 31154 00001C3E 09C0                    	or	ax,ax			;AC035; test ax for zero
 31155 00001C40 7517                    	jnz	short _$P_Mat		;AN000; (tm12)
 31156 00001C42 50                      	push	ax			;AN000; (tm12)
 31157 00001C43 53                      	push	bx			;AN000; (tm12)
 31158 00001C44 52                      	push	dx			;AN000; (tm12)
 31159 00001C45 57                      	push	di			;AN000; (tm12)
 31160 00001C46 2EC706[FD18]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; (tm12)
 31161                                  	;mov	ah,_$P_No_Tag		;AN000; (tm12)
 31162                                  	;mov	al,_$P_String		;AN000; (tm12)
 31163                                  	; 07/07/2023
 31164 00001C4D B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 31165 00001C50 E860FF                  	call	_$P_Fill_Result		;AN000; (tm12)
 31166 00001C53 5F                      	pop	di			;AN000; (tm12)
 31167 00001C54 5A                      	pop	dx			;AN000; (tm12)
 31168 00001C55 5B                      	pop	bx			;AN000; (tm12)
 31169 00001C56 58                      	pop	ax			;AN000; (tm12)
 31170                                  	; 12/12/2022
 31171                                  	;jmp	short _$P_Bridge 	;AC035; (tm12)
 31172                                  	; 12/12/2022
 31173                                  ;_$P_Mat: 				;AN000; (tm12)
 31174                                  	;jmp	short _$P_Match03	;AN025; (tm09)
 31175                                  _$P_Bridge:
 31176 00001C57 EB6E                    	jmp	short _$P_Match_Exit	;AN000; (tm02)
 31177                                  	
 31178                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31179                                  	; (SYSINIT:19F9h)
 31180                                  	; 12/12/2022
 31181                                  	;nop	; db 90h
 31182                                  
 31183                                  ; 12/12/2022
 31184                                  _$P_Mat:
 31185                                  _$P_Match03:				;AN000;
 31186                                  	;test	ax,_$P_Num_Val ; 8000h	;AN000; Numeric value
 31187                                  	; 07/07/2023
 31188 00001C59 F6C480                  	test	ah,(_$P_Num_Val>>8) ; 80h
 31189 00001C5C 7412                    	jz	short _$P_Match04	;AN000;
 31190                                  
 31191 00001C5E 2EC706[FD18]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 31192 00001C65 E82201                  	call	_$P_Value		;AN000; do process
 31193 00001C68 2E833E[FD18]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 31194 00001C6E 7557                    	jne	short _$P_Match_Exit	;AN000;
 31195                                  _$P_Match04:				;AN000;
 31196                                  	;test	ax,_$P_SNum_Val ; 4000h	;AN000; Signed numeric value
 31197                                  	; 07/07/2023
 31198 00001C70 F6C440                  	test	ah,(_$P_SNum_Val>>8) ; 40h
 31199 00001C73 7412                    	jz	short _$P_Match05	;AN000;
 31200                                  
 31201 00001C75 2EC706[FD18]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 31202 00001C7C E8E700                  	call	_$P_SValue		;AN000; do process
 31203 00001C7F 2E833E[FD18]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 31204 00001C85 7540                    	jne	short _$P_Match_Exit	;AN000;
 31205                                  _$P_Match05:				;AN000;
 31206                                  	;test	ax,_$P_Drv_Only ; 100h	;AN000; Drive only
 31207                                  	; 07/07/2023
 31208 00001C87 F6C401                  	test	ah,(_$P_Drv_Only>>8) ; 1
 31209 00001C8A 7415                    	jz	short _$P_Match06	;AN000;
 31210                                  
 31211 00001C8C 2EC706[FD18]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 31212 00001C93 E8FA02                  	call	_$P_File_Format		;AN000; 1st, call file format
 31213 00001C96 E87A03                  	call	_$P_Drive_Format	;AN000; check drive format, next
 31214 00001C99 2E833E[FD18]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 31215 00001C9F 7526                    	jne	short _$P_Match_Exit	;AN000;
 31216                                  _$P_Match06:				;AN000;
 31217                                  	;test	ax,_$P_File_Spc ; 200h	;AN000; File spec
 31218                                  	; 07/07/2023
 31219 00001CA1 F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 31220 00001CA4 7412                    	jz	short _$P_Match07	;AN000;
 31221                                  
 31222 00001CA6 2EC706[FD18]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 31223 00001CAD E8E002                  	call	_$P_File_Format		;AN000; do process
 31224 00001CB0 2E833E[FD18]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 31225 00001CB6 750F                    	jne	short _$P_Match_Exit	;AN000;
 31226                                  _$P_Match07:				;AN000;
 31227                                  	;test	ax,_$P_Simple_S	; 2000h	;AN000; Simple string
 31228                                  	; 07/07/2023
 31229 00001CB8 F6C420                  	test	ah,(_$P_Simple_S>>8) ; 20h
 31230 00001CBB 740A                    	jz	short _$P_Match09	;AN000;
 31231                                  
 31232 00001CBD 2EC706[FD18]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 31233 00001CC4 E8C201                  	call	_$P_Simple_String	;AN000; do process
 31234                                  _$P_Match09:				;AN000;
 31235                                  _$P_Match_Exit:				;AN000;
 31236 00001CC7 2E833E[A019]01          	cmp	word [cs:_$P_err_flag],_$P_error_filespec ;AC034; bad filespec ?
 31237 00001CCD 750F                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 31238 00001CCF 2E833E[FD18]00          	cmp	word [cs:_$P_RC],_$P_No_Error ;AN033;AC034;; check for other errors ?
 31239 00001CD5 7507                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 31240 00001CD7 2EC706[FD18]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AN033;AC034;; set error flag
 31241                                  _$P_Match2_Exit: 			;AN033;
 31242 00001CDE 58                      	pop	ax			;AN000;
 31243 00001CDF C3                      	retn				;AN000;
 31244                                  
 31245                                  ;***********************************************************************
 31246                                  ; _$P_Remove_Colon;
 31247                                  ;
 31248                                  ; Function: Remove colon at end
 31249                                  ;
 31250                                  ; Input:    cs:SI points to string buffer to be examineed
 31251                                  ;
 31252                                  ; Output:   None
 31253                                  ;
 31254                                  ; Use:	_$P_Chk_DBCS
 31255                                  ;***********************************************************************
 31256                                  
 31257                                  _$P_Remove_Colon:
 31258 00001CE0 50                      	push	ax			;AN000;
 31259 00001CE1 56                      	push	si			;AN000;
 31260                                  _$P_RCOL_Loop:				;AN000;
 31261 00001CE2 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 31262 00001CE5 08C0                    	or	al,al			;AN000; end of string ?
 31263 00001CE7 741A                    	jz	short _$P_RCOL_Exit	;AN000; if yes, just exit
 31264                                  
 31265 00001CE9 3C3A                    	cmp	al,_$P_Colon		;AN000; is it colon ?
 31266 00001CEB 750D                    	jne	short _$P_RCOL00	;AN000;
 31267                                  
 31268 00001CED 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; if so, next is NULL ?
 31269 00001CF2 7506                    	jne	short _$P_RCOL00	;AN000; no, then next char
 31270                                  
 31271 00001CF4 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; yes, remove colon
 31272 00001CF8 EB09                    	jmp	short _$P_RCOL_Exit	;AN000; and exit.
 31273                                  
 31274                                  _$P_RCOL00:				;AN000;
 31275 00001CFA E81604                  	call	_$P_Chk_DBCS		;AN000; if not colon, then check if
 31276 00001CFD 7301                    	jnc	short _$P_RCOL01	;AN000; DBCS leading byte.
 31277                                  
 31278 00001CFF 46                      	inc	si			;AN000; if yes, skip trailing byte
 31279                                  _$P_RCOL01:				;AN000;
 31280 00001D00 46                      	inc	si			;AN000; si points to next byte
 31281 00001D01 EBDF                    	jmp	short _$P_RCOL_Loop	;AN000; loop until NULL encountered
 31282                                  
 31283                                  _$P_RCOL_Exit:				;AN000;
 31284 00001D03 5E                      	pop	si			;AN000;
 31285 00001D04 58                      	pop	ax			;AN000;
 31286 00001D05 C3                      	retn				;AN000;
 31287                                  
 31288                                  ;***********************************************************************
 31289                                  ; _$P_Do_CAPS_String;
 31290                                  ;
 31291                                  ; Function: Perform capitalization along with the file case map table
 31292                                  ;	    or character case map table.
 31293                                  ;
 31294                                  ; Input:    AL = 2 : Use character table
 31295                                  ;	    AL = 4 : Use file table
 31296                                  ;	    cs:SI points to string buffer to be capitalized
 31297                                  ;
 31298                                  ; Output:   None
 31299                                  ;
 31300                                  ; Use:	_$P_Do_CAPS_Char, _$P_Chk_DBCS
 31301                                  ;***********************************************************************
 31302                                  
 31303                                  _$P_Do_CAPS_String:
 31304 00001D06 56                      	push	si			;AN000;
 31305 00001D07 52                      	push	dx			;AN000;
 31306 00001D08 88C2                    	mov	dl,al			;AN000; save info id
 31307                                  
 31308                                  _$P_DCS_Loop:				;AN000;
 31309 00001D0A 2E8A04                  	mov	al,[cs:si]		;AN000; load charater and
 31310 00001D0D E80304                  	call	_$P_Chk_DBCS		;AN000; check if DBCS leading byte
 31311 00001D10 720C                    	jc	short _$P_DCS00		;AN000; if yes, do not need CAPS
 31312                                  
 31313 00001D12 08C0                    	or	al,al			;AN000; end of string ?
 31314 00001D14 740C                    	jz	short _$P_DCS_Exit	;AN000; then exit.
 31315                                  
 31316 00001D16 E80C00                  	call	_$P_Do_CAPS_Char 	;AN000; Here a SBCS char need to be CAPS
 31317 00001D19 2E8804                  	mov	[cs:si],al		;AN000; stored upper case char to buffer
 31318 00001D1C EB01                    	jmp	short _$P_DCS01		;AN000; process next
 31319                                  _$P_DCS00:				;AN000;
 31320 00001D1E 46                      	inc	si			;AN000; skip DBCS leading and trailing byte
 31321                                  _$P_DCS01:				;AN000;
 31322 00001D1F 46                      	inc	si			;AN000; si point to next byte
 31323 00001D20 EBE8                    	jmp	short _$P_DCS_Loop	;AN000; loop until NULL encountered
 31324                                  _$P_DCS_Exit:				;AN000;
 31325 00001D22 5A                      	pop	dx			;AN000;
 31326 00001D23 5E                      	pop	si			;AN000;
 31327 00001D24 C3                      	retn
 31328                                  
 31329                                  ;***********************************************************************
 31330                                  ; _$P_Do_CAPS_Char;
 31331                                  ;
 31332                                  ; Function: Perform capitalization along with the file case map table
 31333                                  ;	    or character case map table.
 31334                                  ;
 31335                                  ; Input:    DL = 2 : Use character table
 31336                                  ;	    DL = 4 : Use file table
 31337                                  ;	    AL = character to be capitalized
 31338                                  ;
 31339                                  ; Output:   None
 31340                                  ;
 31341                                  ; Use:	INT 21h /w AH=65h
 31342                                  ;***********************************************************************
 31343                                  
 31344                                  _$P_Do_CAPS_Char:
 31345 00001D25 3C80                    	cmp	al,_$P_ASCII80	;80h	;AN000; need upper case table ?
 31346 00001D27 730B                    	jae	short _$P_DCC_Go	;AN000;
 31347                                  
 31348 00001D29 3C61                    	cmp	al,"a"                  ;AN000; if no,
 31349 00001D2B 7238                    	jb	short _$P_CAPS_Ret	;AN000;   check if  "a" <= AL <= "z"
 31350                                  
 31351 00001D2D 3C7A                    	cmp	al,"z"                  ;AN000;
 31352 00001D2F 7734                    	ja	short _$P_CAPS_Ret	;AN000;   if yes, make CAPS
 31353                                  
 31354 00001D31 24DF                    	and	al,_$P_Make_Upper ;0DFh ;AN000;   else do nothing.
 31355                                  	;jmp	short _$P_CAPS_Ret	;AN000;
 31356                                  	; 07/07/2023
 31357 00001D33 C3                      	retn
 31358                                  
 31359                                  _$P_DCC_Go:				;AN000;
 31360 00001D34 53                      	push	bx			;AN000;
 31361 00001D35 06                      	push	es			;AN000;
 31362 00001D36 57                      	push	di			;AN000;
 31363                                  
 31364                                  	;;lea	di,[cs:_$P_Char_CAP_Ptr] ;AC034; or use char CAPS table ?
 31365                                  	;lea	di,[_$P_Char_CAP_Ptr]
 31366                                  	; 07/09/2023
 31367 00001D37 BF[9219]                	mov	di,_$P_Char_CAP_Ptr
 31368                                  _$P_DCC00:				;AN000;
 31369 00001D3A 2E3815                  	cmp	[cs:di],dl		;AN000; already got table address ?
 31370 00001D3D 7415                    	je	short _$P_DCC01		;AN000; if no,
 31371                                  
 31372                                  ;In this next section, ES will be used to pass a 5 byte workarea to INT 21h,
 31373                                  ; the GET COUNTYRY INFO call. This usage of ES is required by the function
 31374                                  ; call, regardless of what base register is currently be defined as cs.
 31375                                  
 31376 00001D3F 50                      	push	ax			;AN000; get CAPS table thru DOS call
 31377 00001D40 51                      	push	cx			;AN000;
 31378 00001D41 52                      	push	dx			;AN000;
 31379                                  
 31380 00001D42 0E                      	push	cs			;AC036; pass current base seg into
 31381                                  					;(Note: this used to push CS.  BUG...
 31382 00001D43 07                      	pop	es			;AN000;   ES reg, required for
 31383                                  					;get extended country information
 31384                                  	;mov	al,dl ; function	;AN000; upper case table
 31385                                  	; 07/07/2023
 31386 00001D44 92                      	xchg	ax,dx
 31387 00001D45 B465                    	mov	ah,_$P_DOS_Get_TBL ; 65h ;AN000; get extended CDI
 31388 00001D47 BBFFFF                  	mov	bx,_$P_DOSTBL_Def ; -1	;AN000; get active CON
 31389 00001D4A B90500                  	mov	cx,_$P_DOSTBL_BL ; 5	;AN000; buffer length
 31390                                  	;mov	dx,_$P_DOSTBL_Def	;AN000; get for default code page
 31391                                  	; 07/07/2023
 31392 00001D4D 89DA                    	mov	dx,bx ; 0FFFFh
 31393                                  					;DI already set to point to buffer
 31394 00001D4F CD21                    	int	21h			;AN000; es:di point to buffer that
 31395                                  					;now has been filled in with info
 31396 00001D51 5A                      	pop	dx			;AN000;
 31397 00001D52 59                      	pop	cx			;AN000;
 31398 00001D53 58                      	pop	ax			;AN000;
 31399                                  
 31400                                  _$P_DCC01:				;AN000;
 31401                                  
 31402                                  ;In this next section, ES will be used as the base of the XLAT table, provided
 31403                                  ; by the previous GET COUNTRY INFO DOS call.  This usage of ES is made
 31404                                  ; regardless of which base reg is currently the cs reg.
 31405                                  
 31406 00001D54 2E8B5D01                	mov	bx,[cs:di+_$P_DOS_TBL.Off] ;AN000; get offset of table
 31407                                  	;mov	bx,[cs:di+_$P_DOS_TBL.Off] ;AN000; get offset of table
 31408                                  	;mov	es,[cs:di+_$P_DOS_TBL.Seg] ;AN000; get segment of table
 31409                                  	; 07/07/2023
 31410 00001D58 2EC45D01                	les	bx,[cs:di+_$P_DOS_TBL.Off]
 31411 00001D5C 43                      	inc	bx			;AC035; add '2' to
 31412 00001D5D 43                      	inc	bx			;AC035;  BX reg
 31413                                  					;AN000; skip length field
 31414 00001D5E 2C80                    	sub	al,_$P_ASCII80 ; 80h	;AN000; make char to index
 31415                                  	;xlat	es:[bx] 		;AN000; perform case map
 31416 00001D60 26                      	es
 31417 00001D61 D7                      	xlat
 31418 00001D62 5F                      	pop	di			;AN000;
 31419 00001D63 07                      	pop	es			;AN000;
 31420 00001D64 5B                      	pop	bx			;AN000;
 31421                                  _$P_CAPS_Ret:				;AN000;
 31422 00001D65 C3                      	retn				;AN000;
 31423                                  
 31424                                  ;***********************************************************************
 31425                                  ; _$P_Value / _$P_SValue
 31426                                  ;
 31427                                  ; Function:  Make 32bit value from cs:SI and see value list
 31428                                  ;	     and make result buffer.
 31429                                  ;	     _$P_SValue is an entry point for the signed value
 31430                                  ;	     and this will simply call _$P_Value after the handling
 31431                                  ;	     of the sign character, "+" or "-"
 31432                                  ;
 31433                                  ; Input:     cs:SI -> _$P_STRING_BUF
 31434                                  ;	     ES:BX -> CONTROL block
 31435                                  ;
 31436                                  ; Output:    None
 31437                                  ;
 31438                                  ; Use:	_$P_Fill_Result, _$P_Check_OVF
 31439                                  ;
 31440                                  ; Vars: _$P_RC(W), _$P_Flags(RW)
 31441                                  ;***********************************************************************
 31442                                  
 31443                                  	; 26/10/2022 - Retro DOS v4.0
 31444                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1B0Bh)
 31445                                  
 31446                                  	; 07/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 31447                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:1C46h)  	
 31448                                  _$P_SValue:				;AN000; when signed value here
 31449 00001D66 50                      	push	ax			;AN000;
 31450 00001D67 2E800E[0919]80          	or	byte [cs:_$P_Flags2],_$P_Signed ;AC034; indicate a signed numeric
 31451 00001D6D 2E8026[0919]FD          	and	byte [cs:_$P_Flags2],0FFh-_$P_Neg ;AC034; assume positive value
 31452                                  	;and	byte [cs:_$P_Flags2],~_$P_Neg ; 07/07/2023 
 31453 00001D73 2E8A04                  	mov	al,[cs:si]		;AN000; get sign
 31454 00001D76 3C2B                    	cmp	al,_$P_Plus		;AN000; "+" ?
 31455 00001D78 740A                    	je	short _$P_SVal00	;AN000;
 31456                                  
 31457 00001D7A 3C2D                    	cmp	al,_$P_Minus		;AN000; "-" ?
 31458 00001D7C 7507                    	jne	short _$P_Sval01	;AN000; else
 31459                                  
 31460 00001D7E 2E800E[0919]02          	or	byte [cs:_$P_Flags2],_$P_Neg ;AC034; set this is negative value
 31461                                  _$P_SVal00:				;AN000;
 31462 00001D84 46                      	inc	si			;AN000; skip sign char
 31463                                  _$P_Sval01:				;AN000;
 31464 00001D85 E80200                  	call	_$P_Value		;AN000; and process value
 31465 00001D88 58                      	pop	ax			;AN000;
 31466 00001D89 C3                      	retn
 31467                                  
 31468                                  ;***********************************************************************
 31469                                  
 31470                                  	; 07/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 31471                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:1C6Ah)
 31472                                  
 31473                                  	; 26/10/2022
 31474                                  _$P_Value:				;AN000;
 31475 00001D8A 50                      	push	ax			;AN000;
 31476 00001D8B 51                      	push	cx			;AN000;
 31477 00001D8C 52                      	push	dx			;AN000;
 31478 00001D8D 56                      	push	si			;AN000;
 31479 00001D8E 31C9                    	xor	cx,cx			;AN000; cx = higher 16 bits
 31480 00001D90 31D2                    	xor	dx,dx			;AN000; dx = lower 16 bits
 31481 00001D92 53                      	push	bx			;AN000; save control pointer
 31482                                  _$P_Value_Loop:				;AN000;
 31483 00001D93 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 31484 00001D96 08C0                    	or	al,al			;AN000; end of line ?
 31485 00001D98 743C                    	jz	short _$P_Value00	;AN000;
 31486                                  
 31487 00001D9A E8E000                  	call	_$P_0099 		;AN000; make asc(0..9) to bin(0..9)
 31488 00001D9D 7233                    	jc	short _$P_Value_Err0	;AN000;
 31489                                  
 31490 00001D9F 30E4                    	xor	ah,ah			;AN000;
 31491 00001DA1 89C5                    	mov	bp,ax			;AN000; save binary number
 31492                                  
 31493                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 31494                                  ; Ref: Disassembled PCDOS 7.1 IBMBIO.COM SYSINIT code
 31495                                  ;				Erdogan Tan - July 2023 
 31496                                  %if 0
 31497                                  	shl	dx,1			;AN000; to have 2*x
 31498                                  	rcl	cx,1			;AN000; shift left w/ carry
 31499                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 31500                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 31501                                  
 31502                                  	mov	bx,dx			;AN000; save low(2*x)
 31503                                  	mov	ax,cx			;AN000; save high(2*x)
 31504                                  	shl	dx,1			;AN000; to have 4*x
 31505                                  	rcl	cx,1			;AN000; shift left w/ carry
 31506                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 31507                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 31508                                  
 31509                                  	shl	dx,1			;AN000; to have 8*x
 31510                                  	rcl	cx,1			;AN000; shift left w/ carry
 31511                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 31512                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 31513                                  
 31514                                  	add	dx,bx			;AN000; now have 10*x
 31515                                  	adc	cx,ax			;AN000; 32bit ADD
 31516                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 31517                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 31518                                  
 31519                                  	add	dx,bp			;AN000; Add the current one degree decimal
 31520                                  	adc	cx,0			;AN000; if carry, add 1 to high 16bit
 31521                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 31522                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 31523                                  
 31524                                  	inc	si			;AN000; update pointer
 31525                                  	jmp	short _$P_Value_Loop	;AN000; loop until NULL encountered
 31526                                  ;_$P_Value_Err0:
 31527                                  %endif
 31528                                  ;****
 31529                                  %if 1
 31530                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 31531                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:2130h)
 31532                                  
 31533 00001DA3 30E4                    	xor	ah,ah
 31534 00001DA5 89C5                    	mov	bp,ax			; save binary number
 31535 00001DA7 E81C00                  	call	_$P_Value_2x_OVF 	; multiply cx:dx by 2 and then check overflow
 31536 00001DAA 89D3                    	mov	bx,dx			; ax:bx = 2*(cx:dx)
 31537 00001DAC 89C8                    	mov	ax,cx
 31538 00001DAE E81500                  	call	_$P_Value_2x_OVF 	; multiply cx:dx by 2 and then check overflow
 31539 00001DB1 E81200                  	call	_$P_Value_2x_OVF 	; multiply cx:dx by 2 and then check overflow
 31540 00001DB4 01DA                    	add	dx,bx			; 8*(cx:dx)+2*(cx:dx) = 10*(cx:dx)
 31541 00001DB6 11C1                    	adc	cx,ax
 31542 00001DB8 E80F00                  	call	_$P_Value_Chk_Add_OVF
 31543 00001DBB 01EA                    	add	dx,bp			; Add the current one degree decimal
 31544                                  					; if carry, add 1 to high 16bit
 31545 00001DBD 83D100                  	adc	cx,0
 31546 00001DC0 E80700                  	call	_$P_Value_Chk_Add_OVF	; Overflow occurred ?
 31547                                  					; then error, exit (without return here)
 31548 00001DC3 46                      	inc	si			; update pointer
 31549 00001DC4 EBCD                    	jmp	short _$P_Value_Loop
 31550                                  
 31551                                  _$P_Value_2x_OVF:
 31552 00001DC6 D1E2                    	shl	dx,1 			; to have 2*x
 31553 00001DC8 D1D1                    	rcl	cx,1			; shift left w/ carry
 31554                                  _$P_Value_Chk_Add_OVF:
 31555 00001DCA E89E00                  	call	_$P_Check_OVF		; check overflow (for the last shift or add)
 31556 00001DCD 7201                    	jc	short _$P_Value_OVF
 31557 00001DCF C3                      	retn
 31558                                  _$P_Value_OVF:
 31559 00001DD0 44                      	inc	sp 			; skip "call" return address to the caller
 31560 00001DD1 44                      	inc	sp
 31561                                  
 31562                                  ;_$P_Value_Err0:	
 31563                                  %endif
 31564                                  ;****
 31565                                  
 31566                                  _$P_Value_Err0:				;AN000;
 31567 00001DD2 5B                      	pop	bx			;AN000;
 31568 00001DD3 E98300                  	jmp	_$P_Value_Err		;AN000; Bridge
 31569                                  ;
 31570                                  _$P_Value00:				;AN000;
 31571 00001DD6 5B                      	pop	bx			;AN000; restore control pointer
 31572 00001DD7 2EF606[0919]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; here cx,dx = 32bit value
 31573 00001DDD 740A                    	jz	short _$P_Value01	;AN000; was it negative ?
 31574                                  
 31575 00001DDF F7D1                    	not	cx			;AN000; +
 31576 00001DE1 F7D2                    	not	dx			;AN000; |- Make 2's complement
 31577 00001DE3 83C201                  	add	dx,1			;AN000; |
 31578 00001DE6 83D100                  	adc	cx,0			;AN000; +
 31579                                  
 31580                                  _$P_Value01:				;AN000; / nval = 0
 31581 00001DE9 268B7706                	mov	si,[es:bx+_$P_Control_Blk.Value_List] ;AN000; si points to value list
 31582 00001DED 268A04                  	mov	al,[es:si]		;AN000; get nval
 31583                                  	; 07/09/2023
 31584                                  	;cmp	al,_$P_nval_None ; 0	;AN000; no value list ?
 31585                                  	;;*jne	short _$P_Value02	;AN000;
 31586                                  	;;* 07/07/2023
 31587                                  	;je	short _$P_Value05
 31588                                  	; 07/09/2023
 31589 00001DF0 08C0                    	or	al,al
 31590 00001DF2 7459                    	jz	short _$P_Value05 ; _$P_nval_None
 31591                                  
 31592                                  	;mov	al,_$P_Number		;AN000; Set type
 31593                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 31594                                  	; 07/07/2023
 31595                                  	;*mov	ax,(_$P_No_Tag<<8)|_$P_Number
 31596                                  	;*jmp	short _$P_Value_Exit	;AN000;
 31597                                  
 31598                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS, SYSINIT compatibility)
 31599                                  	; (SYSINIT:1BA5h)
 31600                                  	; 12/12/2022
 31601                                  	;nop	; db  90h
 31602                                  
 31603                                  _$P_Value02:				;AN000; / nval = 1
 31604                                  ;IF	Val1SW				;AN000;(Check if value list id #1 is supported)
 31605                                  ;(tm07) cmp	al,_$P_nval_Range	;AN000; have range list ?
 31606                                  ;(tm07) jne	short _$P_Value03	;AN000;
 31607                                  
 31608 00001DF4 46                      	inc	si			;AN000;
 31609 00001DF5 268A04                  	mov	al,[es:si]		;AN000; al = number of range
 31610                                  	
 31611                                  	; 07/09/2023
 31612                                  	;cmp	al,_$P_No_nrng		;AN000; (tm07)
 31613                                  	;je	short _$P_Value03	;AN000; (tm07)
 31614 00001DF8 08C0                    	or	al,al
 31615 00001DFA 745D                    	jz	short _$P_Value03 ; _$P_No_nrng
 31616                                  
 31617 00001DFC 46                      	inc	si			;AN000; si points to 1st item_tag
 31618                                  _$P_Val02_Loop:				;AN000;
 31619 00001DFD 2EF606[0919]80          	test	byte [cs:_$P_Flags2],_$P_Signed ;AC034;
 31620 00001E03 751E                    	jnz	short _$P_Val02_Sign	;AN000;
 31621                                  
 31622 00001E05 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH] ;AN000; comp cx with XH
 31623 00001E09 7234                    	jb	short _$P_Val02_Next	;AN000;
 31624 00001E0B 7706                    	ja	short _$P_Val_In	;AN000;
 31625                                  
 31626 00001E0D 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL] ;AN000; comp dx with XL
 31627 00001E11 722C                    	jb	short _$P_Val02_Next	;AN000;
 31628                                  
 31629                                  _$P_Val_In:				;AN000;
 31630 00001E13 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH] ;AN000; comp cx with YH (tm01)
 31631 00001E17 7726                    	ja	short _$P_Val02_Next	;AN000;
 31632 00001E19 7237                    	jb	short _$P_Val_Found	;AN000;
 31633                                  
 31634 00001E1B 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL] ;AN000; comp dx with YL
 31635 00001E1F 771E                    	ja	short _$P_Val02_Next	;AN000;
 31636                                  
 31637 00001E21 EB2F                    	jmp	short _$P_Val_Found	;AN000;
 31638                                  
 31639                                  _$P_Val02_Sign:				;AN000;
 31640 00001E23 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH]	;AN000; comp cx with XH
 31641 00001E27 7C16                    	jl	short _$P_Val02_Next	;AN000;
 31642 00001E29 7F06                    	jg	short _$P_SVal_In	;AN000;
 31643                                  
 31644 00001E2B 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL]	;AN000; comp dx with XL
 31645 00001E2F 7C0E                    	jl	short _$P_Val02_Next	;AN000;
 31646                                  
 31647                                  _$P_SVal_In:				;AN000;
 31648 00001E31 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH]	;AN000; comp cx with YH
 31649 00001E35 7F08                    	jg	short _$P_Val02_Next	;AN000;
 31650                                  
 31651 00001E37 7C19                    	jl	short _$P_Val_Found	;AN000;
 31652                                  
 31653 00001E39 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL]	;AN000; comp dx with YL
 31654                                  	;jg	short _$P_Val02_Next	;AN000;
 31655                                  	;jmp	short _$P_Val_Found	;AN000;
 31656                                  	; 07/07/2023
 31657 00001E3D 7E13                    	jng	short _$P_Val_Found
 31658                                  
 31659                                  _$P_Val02_Next:				;AN000;
 31660 00001E3F 83C609                  	add	si,_$P_Len_Range 	;AN000;
 31661 00001E42 FEC8                    	dec	al			;AN000; loop nrng times in AL
 31662 00001E44 75B7                    	jne	short _$P_Val02_Loop	;AN000;
 31663                                  					; / Not found
 31664 00001E46 2EC706[FD18]0600        	mov	word [cs:_$P_RC],_$P_Out_Of_Range ;AC034;
 31665                                  	;mov	al,_$P_Number		;AN000;
 31666                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 31667                                  _$P_Value05:		;* 07/07/2023
 31668                                  	; 07/07/2023
 31669 00001E4D B801FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Number
 31670 00001E50 EB11                    	jmp	short _$P_Value_Exit	;AN000;
 31671                                  
 31672                                  _$P_Val_Found:				;AN000;
 31673 00001E52 B001                    	mov	al,_$P_Number		;AN000;
 31674 00001E54 268A24                  	mov	ah,[es:si]		;AN000; found ITEM_TAG set
 31675 00001E57 EB0A                    	jmp	short _$P_Value_Exit	;AN000;
 31676                                  
 31677                                  _$P_Value03:				;AN000; / nval = 2
 31678                                  
 31679                                  ;IF	Val2SW				;AN000;(Check if value list id #2 is supported)
 31680                                  ;;;;	cmp	al,$P_nval_Value	; have match list ? ASSUME nval=2,
 31681                                  ;;;;	jne	$P_Value04		; even if it is 3 or more.
 31682                                  ;(tm07) inc	si			;AN000;
 31683                                  ;(tm07) mov	al,es:[si]		;AN000; al = nrng
 31684                                  ;	mov	ah,$P_Len_Range 	;AN000;
 31685                                  ;	mul	ah			;AN000;  Skip nrng field
 31686                                  ;	inc	ax			;AN000;
 31687                                  ;	add	si,ax			;AN000; si points to nnval
 31688                                  ;	mov	al,es:[si]		;AN000; get nnval
 31689                                  ;	inc	si			;AN000; si points to 1st item_tag
 31690                                  ;$P_Val03_Loop:				;AN000;
 31691                                  ;	cmp	cx,es:[si+$P_Val_XH]	;AN000; comp cx with XH
 31692                                  ;	jne	$P_Val03_Next		;AN000;
 31693                                  ;
 31694                                  ;	cmp	dx,es:[si+$P_Val_XL]	;AN000; comp dx with XL
 31695                                  ;	je	$P_Val_Found		;AN000;
 31696                                  ;
 31697                                  ;$P_Val03_Next:				;AN000;
 31698                                  ;	add	si,$P_Len_Value 	;AN000; points to next value choice
 31699                                  ;	dec	al			;AN000; loop nval times in AL
 31700                                  ;	jne	$P_Val03_Loop		;AN000;
 31701                                  ;					;AN000; / Not found
 31702                                  ;	mov	psdata_seg:$P_RC,$P_Not_in_Val ;AC034;
 31703                                  ;	mov	al,$P_Number		;AN000;
 31704                                  ;	mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 31705                                  ;	jmp	short $P_Value_Exit	;AN000;
 31706                                  ;
 31707                                  ;ENDIF					;AN000;(of Val2SW)
 31708                                  ;$P_Value04:
 31709                                  
 31710                                  _$P_Value_Err:				;AN000;
 31711 00001E59 2EC706[FD18]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 31712                                  	;mov	al,_$P_String		;AN000; Set type
 31713                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 31714                                  	; 07/09/2023
 31715                                  	; 07/07/2023
 31716 00001E60 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 31717                                  _$P_Value_Exit:				;AN000;
 31718 00001E63 E84DFD                  	call	_$P_Fill_Result		;AN000;
 31719 00001E66 5E                      	pop	si			;AN000;
 31720 00001E67 5A                      	pop	dx			;AN000;
 31721 00001E68 59                      	pop	cx			;AN000;
 31722 00001E69 58                      	pop	ax			;AN000;
 31723 00001E6A C3                      	retn				;AN000;
 31724                                  
 31725                                  ; 28/03/2019 - Retro DOS v4.0
 31726                                  
 31727                                  ;***********************************************************************
 31728                                  ; _$P_Check_OVF
 31729                                  ;
 31730                                  ; Function:  Check if overflow is occurred with consideration of
 31731                                  ;	     signed or un-signed numeric value
 31732                                  ;
 31733                                  ; Input:     Flag register
 31734                                  ;
 31735                                  ; Output:    CY = 1  :	Overflow
 31736                                  ;
 31737                                  ; Vars:     _$P_Flags(R)
 31738                                  ;***********************************************************************
 31739                                  
 31740                                  	; 26/10/2022
 31741                                  _$P_Check_OVF:
 31742 00001E6B 9C                      	pushf				;AN000;
 31743 00001E6C 2EF606[0919]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; is it negative value ?
 31744 00001E72 7502                    	jnz	short _$P_COVF 		;AN000; if no, check overflow
 31745                                  
 31746 00001E74 9D                      	popf				;AN000; by the CY bit
 31747 00001E75 C3                      	retn				;AN000;
 31748                                  
 31749                                  _$P_COVF:				;AN000;
 31750 00001E76 9D                      	popf				;AN000; else,
 31751 00001E77 7002                    	jo	short _$P_COVF00	;AN000; check overflow by the OF
 31752                                  
 31753 00001E79 F8                      	clc				;AN000; indicate it with CY bit
 31754 00001E7A C3                      	retn				;AN000; CY=0 means no overflow
 31755                                  
 31756                                  _$P_COVF00:				;AN000;
 31757 00001E7B F9                      	stc				;AN000; and CY=1 means overflow
 31758 00001E7C C3                      	retn				;AN000;
 31759                                  
 31760                                  ;***********************************************************************
 31761                                  ; _$P_0099;
 31762                                  ;
 31763                                  ; Function:  Make ASCII 0-9 to Binary 0-9
 31764                                  ;
 31765                                  ; Input:     AL = character code
 31766                                  ;
 31767                                  ; Output:    CY = 1 : AL is not number
 31768                                  ;	     CY = 0 : AL contains binary value
 31769                                  ;***********************************************************************
 31770                                  
 31771                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 31772                                  %if 0
 31773                                  _$P_0099:
 31774                                  	cmp	al,"0"                  ;AN000;
 31775                                  	;jb	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 31776                                  	; 12/12/2022
 31777                                  	jb	short _$P_0099Err2  ; cf=1
 31778                                  
 31779                                  	cmp	al,"9"                  ;AN000;
 31780                                  	ja	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 31781                                  
 31782                                  	sub	al,"0"                  ;AN000; make char -> bin
 31783                                  	; 12/12/2022
 31784                                  	; cf=0	
 31785                                  	;clc				;AN000; indicate no error
 31786                                  	retn				;AN000;
 31787                                  
 31788                                  _$P_0099Err:				;AN000;
 31789                                  	stc				;AN000; indicate error
 31790                                  _$P_0099Err2: ; 12/12/2022	
 31791                                  	retn				;AN000;
 31792                                  %endif
 31793                                  
 31794                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 31795                                  %if 1
 31796                                  _$P_0099:
 31797 00001E7D 3C30                    	cmp	al,"0"                  ; cmp al,30h
 31798 00001E7F 7207                    	jb	short _$P_0099Err	; must be 0 =< al =< 9
 31799 00001E81 3C3A                    	cmp	al,"9"+1                ; cmp al,3Ah  
 31800 00001E83 F5                      	cmc				; cf=0 -> cf=1
 31801 00001E84 7202                    	jb	short _$P_0099Err
 31802 00001E86 2C30                    	sub	al,"0"	; sub al,30h 	; make char -> bin
 31803                                  	; cf=0
 31804                                  _$P_0099Err:	; cf=1
 31805 00001E88 C3                      	retn
 31806                                  %endif	
 31807                                  
 31808                                  ;***********************************************************************
 31809                                  ; _$P_Simple_String
 31810                                  ;
 31811                                  ; Function:  See value list for the simple string
 31812                                  ;	     and make result buffer.
 31813                                  ;
 31814                                  ; Input:     cs:SI -> _$P_STRING_BUF
 31815                                  ;	     ES:BX -> CONTROL block
 31816                                  ;
 31817                                  ; Output:    None
 31818                                  ;
 31819                                  ; Use:	_$P_Fill_Result, _$P_String_Comp
 31820                                  ;
 31821                                  ; Vars: _$P_RC(W)
 31822                                  ;***********************************************************************
 31823                                  
 31824                                  _$P_Simple_String:
 31825 00001E89 50                      	push	ax			;AN000;
 31826 00001E8A 53                      	push	bx			;AN000;
 31827 00001E8B 52                      	push	dx			;AN000;
 31828 00001E8C 57                      	push	di			;AN000;
 31829 00001E8D 268B7F06                	mov	di,[es:bx+_$P_Control_Blk.Value_List] ;AN000; di points to value list
 31830 00001E91 268A05                  	mov	al,[es:di]		;AN000; get nval
 31831 00001E94 08C0                    	or	al,al			;AN000; no value list ?
 31832 00001E96 7504                    	jnz	short _$P_Sim00		;AN000; then
 31833                                  
 31834 00001E98 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 31835 00001E9A EB4C                    	jmp	short _$P_Sim_Exit	;AN000; and set result buffer
 31836                                  
 31837                                  _$P_Sim00:				;AN000;
 31838                                  ;IF	Val3SW+KeySW			;AN000;(Check if keyword or value list id #3 is supported)
 31839 00001E9C 3C03                    	cmp	al,_$P_nval_String	;AN000; String choice list provided ?
 31840 00001E9E 753F                    	jne	short _$P_Sim01		;AN000; if no, syntax error
 31841                                  
 31842 00001EA0 47                      	inc	di			;AN000;
 31843 00001EA1 268A05                  	mov	al,[es:di]		;AN000; al = nrng
 31844 00001EA4 B409                    	mov	ah,_$P_Len_Range 	;AN000;
 31845 00001EA6 F6E4                    	mul	ah			;AN000; Skip nrng field
 31846 00001EA8 40                      	inc	ax			;AN000; ax = (nrng*9)+1
 31847 00001EA9 01C7                    	add	di,ax			;AN000; di points to nnval
 31848 00001EAB 268A05                  	mov	al,[es:di]		;AN000; get nnval
 31849 00001EAE B405                    	mov	ah,_$P_Len_Value 	;AN000;
 31850 00001EB0 F6E4                    	mul	ah			;AN000; Skip nnval field
 31851 00001EB2 40                      	inc	ax			;AN000; ax = (nnval*5)+1
 31852 00001EB3 01C7                    	add	di,ax			;AN000; di points to nstrval
 31853 00001EB5 268A05                  	mov	al,[es:di]		;AN000; get nstrval c
 31854 00001EB8 47                      	inc	di			;AC035; add '2' to
 31855 00001EB9 47                      	inc	di			;AC035;  DI reg
 31856                                  					;AN000; di points to 1st string in list
 31857                                  _$P_Sim_Loop:				;AN000;
 31858 00001EBA 268B2D                  	mov	bp,[es:di]		;AN000; get string pointer
 31859 00001EBD E83200                  	call	_$P_String_Comp		;AN000; compare it with operand
 31860 00001EC0 7312                    	jnc	short _$P_Sim_Found	;AN000; found on list ?
 31861                                  
 31862 00001EC2 83C703                  	add	di,_$P_Len_String ; 3	;AN000; if no, point to next choice
 31863 00001EC5 FEC8                    	dec	al			;AN000; loop nstval times in AL
 31864 00001EC7 75F1                    	jne	short _$P_Sim_Loop	;AN000;
 31865                                  					;AN000; / Not found
 31866 00001EC9 2EC706[FD18]0800        	mov	word [cs:_$P_RC],_$P_Not_In_Str ;AC034;
 31867 00001ED0 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 31868 00001ED2 EB14                    	jmp	short _$P_Sim_Exit	;AN000;
 31869                                  
 31870                                  _$P_Sim_Found:				;AN000;
 31871 00001ED4 268A65FF                	mov	ah,[es:di-1]		;AN000; set item_tag
 31872 00001ED8 B002                    	mov	al,_$P_List_Idx		;AN000;
 31873 00001EDA 268B15                  	mov	dx,[es:di]		;AN000; get address of STRING
 31874 00001EDD EB0B                    	jmp	short _$P_Sim_Exit0	;AN000;
 31875                                  ;ENDIF					;AN000;(of Val3SW+KeySW)
 31876                                  _$P_Sim01:				;AN000;
 31877 00001EDF 2EC706[FD18]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 31878 00001EE6 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 31879                                  _$P_Sim_Exit:				;AN000;
 31880 00001EE8 B003                    	mov	al,_$P_String		;AN000; Set type
 31881                                  _$P_Sim_Exit0:				;AN000;
 31882 00001EEA E8C6FC                  	call	_$P_Fill_Result		;AN000;
 31883 00001EED 5F                      	pop	di			;AN000;
 31884 00001EEE 5A                      	pop	dx			;AN000;
 31885 00001EEF 5B                      	pop	bx			;AN000;
 31886 00001EF0 58                      	pop	ax			;AN000;
 31887 00001EF1 C3                      	retn				;AN000;
 31888                                  
 31889                                  ;***********************************************************************
 31890                                  ; _$P_String_Comp:
 31891                                  ;
 31892                                  ; Function:  Compare two string
 31893                                  ;
 31894                                  ; Input:     cs:SI -> 1st string
 31895                                  ;	     ES:BP -> 2nd string  (Must be upper case)
 31896                                  ;	     ES:BX -> CONTROL block
 31897                                  ;
 31898                                  ; Output:    CY = 1 if not match
 31899                                  ;
 31900                                  ; Use:	_$P_Chk_DBCS, _$P_Do_CAPS_Char
 31901                                  ;
 31902                                  ; Vars: _$P_KEYor_SW_Ptr(W), _$P_Flags(R). _$P_KEYorSW_Ptr
 31903                                  ;***********************************************************************
 31904                                  
 31905                                  _$P_String_Comp:
 31906 00001EF2 50                      	push	ax			;AN000;
 31907 00001EF3 55                      	push	bp			;AN000;
 31908 00001EF4 52                      	push	dx			;AN000;
 31909 00001EF5 56                      	push	si			;AN000;
 31910 00001EF6 B202                    	mov	dl,_$P_DOSTBL_Char	;AN000; use character case map table
 31911                                  _$P_SCOM_Loop:				;AN000;
 31912 00001EF8 2E8A04                  	mov	al,[cs:si]		;AN000; get command character
 31913 00001EFB E81502                  	call	_$P_Chk_DBCS		;AN000; DBCS ?
 31914 00001EFE 723A                    	jc	short _$P_SCOM00	;AN000; yes,DBCS
 31915                                  
 31916 00001F00 E822FE                  	call	_$P_Do_CAPS_Char 	;AN000; else, upper case map before comparison
 31917                                  ;IF KeySW+SwSW				;AN000;(Check if keyword or switch is supported)
 31918 00001F03 2EF606[0919]08          	test	byte [cs:_$P_Flags2],_$P_Key_Cmp ;AC034; keyword search ?
 31919 00001F09 740D                    	jz	short _$P_SCOM04	;AN000;
 31920                                  
 31921 00001F0B 3C3D                    	cmp	al,_$P_Keyword		;AN000; "=" is delimiter
 31922 00001F0D 751F                    	jne	short _$P_SCOM03	;AN000; IF "=" on command line AND  (bp+1=> char after the "=" in synonym list)
 31923                                  
 31924 00001F0F 26807E0100              	cmp	byte [es:bp+1],_$P_NULL ;AN021;  at end of keyword string in the control block THEN
 31925 00001F14 756D                    	jne	short _$P_SCOM_Differ	;AN021;
 31926                                  
 31927 00001F16 EB13                    	jmp	short _$P_SCOM05 	;AN000; keyword found in synonym list
 31928                                  
 31929                                  _$P_SCOM04:				;AN000;
 31930 00001F18 2EF606[0919]10          	test	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; switch search ?
 31931 00001F1E 740E                    	jz	short _$P_SCOM03	;AN000;
 31932                                  
 31933 00001F20 3C3A                    	cmp	al,_$P_Colon		;AN000; ":" is delimiter, at end of switch on command line
 31934 00001F22 750A                    	jne	short _$P_SCOM03	;AN000; continue compares
 31935                                  
 31936                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31937                                  	;cmp	byte [es:bp+0],_$P_NULL
 31938                                  	; 11/12/2022
 31939 00001F24 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN021; IF at end of switch on command AND
 31940 00001F29 7558                    	jne	short _$P_SCOM_Differ	;AN021;   at end of switch string in the control block THEN
 31941                                  
 31942                                  _$P_SCOM05:				;AN000;   found a match
 31943 00001F2B 46                      	inc	si			;AN000; si points to just after "=" or ":"
 31944 00001F2C EB58                    	jmp	short _$P_SCOM_Same	;AN000; exit
 31945                                  
 31946                                  _$P_SCOM03:				;AN000;
 31947                                  ;ENDIF					;AN000;(of KeySW+SwSW)
 31948                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31949                                  	;cmp	al,[es:bp+0]
 31950                                  	; 11/12/2022
 31951 00001F2E 263A4600                	cmp	al,[es:bp]		;AN000; compare operand w/ a synonym
 31952 00001F32 751B                    	jne	short _$P_SCOM_Differ0 	;AN000; if different, check ignore colon option
 31953                                  
 31954 00001F34 08C0                    	or	al,al			;AN000; end of line
 31955 00001F36 744E                    	jz	short _$P_SCOM_Same	;AN000; if so, exit
 31956                                  
 31957                                  	; 12/12/2022
 31958                                  	;inc	si			;AN000; update operand pointer
 31959                                  	;inc	bp			;AN000;    and synonym pointer
 31960                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31961 00001F38 EB11                    	jmp	short _$P_SCOM01 	;AN000; loop until NULL or "=" or ":" found in case
 31962                                  
 31963                                  _$P_SCOM00:				;AN000; Here al is DBCS leading byte
 31964                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31965                                  	;cmp	al,[es:bp+0]
 31966                                  	; 11/12/2022
 31967 00001F3A 263A4600                	cmp	al,[es:bp]		;AN000; compare leading byte
 31968 00001F3E 7543                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different
 31969                                  
 31970 00001F40 46                      	inc	si			;AN000; else, load next byte
 31971 00001F41 2E8A04                  	mov	al,[cs:si]		;AN000; and
 31972 00001F44 45                      	inc	bp			;AN000;
 31973                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31974                                  	;cmp	al,[es:bp+0]
 31975                                  	; 11/12/2022
 31976 00001F45 263A4600                	cmp	al,[es:bp]		;AN000; compare 2nd byte
 31977 00001F49 7538                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different, too
 31978                                  
 31979                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31980                                  	; 12/12/2022
 31981                                  _$P_SCOM01:
 31982 00001F4B 46                      	inc	si			;AN000; else update operand pointer
 31983 00001F4C 45                      	inc	bp			;AN000; 		and synonym pointer
 31984                                  ;_$P_SCOM01:				;AN000;
 31985 00001F4D EBA9                    	jmp	short _$P_SCOM_Loop	;AN000; loop until NULL or "=" or "/" found in case
 31986                                  
 31987                                  _$P_SCOM_Differ0:			;AN000;
 31988                                  ;IF SwSW				;AN000;(tm10)
 31989 00001F4F 2EF606[0919]40          	test	byte [cs:_$P_Flags2],_$P_SW ;AC034;(tm10)
 31990 00001F55 740E                    	jz	short _$P_not_applicable ;AN000;(tm10)
 31991                                  
 31992                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31993                                  	;test	word [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary ;AN000;(tm10)
 31994                                  	; 12/12/2022
 31995 00001F57 26F6470220              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary
 31996 00001F5C 7407                    	je	short _$P_not_applicable ;AN000;(tm10)
 31997                                  
 31998                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 31999                                  	;cmp	byte [es:bp+0],_$P_NULL
 32000                                  	; 11/12/2022
 32001 00001F5E 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000;(tm10)
 32002                                  ;(deleted ;AN025;) jne short _$P_not_applicable ;AN000;(tm10)
 32003 00001F63 7421                    	je	short _$P_SCOM_Same	;AN025;(tm10)
 32004                                  
 32005                                  _$P_not_applicable:			;AN000;(tm10)
 32006                                  ;ENDIF					;AN000;(tm10)
 32007                                  
 32008                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 32009                                  					;AN000; ignore colon option specified ?
 32010                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon
 32011                                  	; 12/12/2022
 32012 00001F65 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 32013                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 32014                                  	;test	word [es:bx],_$P_Ig_Colon ; 10h
 32015 00001F69 7418                    	jz	short _$P_SCOM_Differ	;AN000; if no, say different.
 32016                                  
 32017 00001F6B 3C3A                    	cmp	al,_$P_Colon		;AN000; End up with ":" and
 32018 00001F6D 7509                    	jne	short _$P_SCOM02	;AN000;    subseqently
 32019                                  
 32020                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 32021                                  	;cmp	byte [es:bp+0],_$P_NULL
 32022                                  	; 11/12/2022
 32023 00001F6F 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; NULL ?
 32024 00001F74 750D                    	jne	short _$P_SCOM_Differ	;AN000; if no, say different
 32025                                  
 32026 00001F76 EB0E                    	jmp	short _$P_SCOM_Same	;AN000; else, say same
 32027                                  
 32028                                  _$P_SCOM02:				;AN000;
 32029 00001F78 3C00                    	cmp	al,_$P_NULL		;AN000; end up NULL and :
 32030 00001F7A 7507                    	jne	short _$P_SCOM_Differ	;AN000;
 32031                                  
 32032                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 32033                                  	;cmp	byte [es:bp+0],_$P_Colon
 32034                                  	; 11/12/2022
 32035 00001F7C 26807E003A              	cmp	byte [es:bp],_$P_Colon	;AN000; if no, say different
 32036 00001F81 7403                    	je	short _$P_SCOM_Same	;AN000; else, say same
 32037                                  
 32038                                  _$P_SCOM_Differ: 			;AN000;
 32039 00001F83 F9                      	stc				;AN000; indicate not found
 32040 00001F84 EB05                    	jmp	short _$P_SCOM_Exit	;AN000;
 32041                                  
 32042                                  _$P_SCOM_Same:				;AN000;
 32043                                  	; 12/12/2022
 32044                                  	; cf=0
 32045 00001F86 2E8936[0C19]            	mov	[cs:_$P_KEYorSW_Ptr],si ;AC034; for later use by keyword or switch
 32046                                  	; 12/12/2022
 32047                                  	;clc				;AN000; indicate found
 32048                                  _$P_SCOM_Exit:				;AN000;
 32049 00001F8B 5E                      	pop	si			;AN000;
 32050 00001F8C 5A                      	pop	dx			;AN000;
 32051 00001F8D 5D                      	pop	bp			;AN000;
 32052 00001F8E 58                      	pop	ax			;AN000;
 32053 00001F8F C3                      	retn
 32054                                  
 32055                                  ; 30/03/2019
 32056                                  
 32057                                  ;IF FileSW+DrvSW			;AN000;(Check if file spec or drive only is supported)
 32058                                  
 32059                                  ;***********************************************************************
 32060                                  ; _$P_File_Format;
 32061                                  ;
 32062                                  ; Function:  Check if the input string is valid file spec format.
 32063                                  ;	     And set the result buffer.
 32064                                  ;
 32065                                  ; Input:     cs:SI -> _$P_STRING_BUF
 32066                                  ;	     ES:BX -> CONTROL block
 32067                                  ;
 32068                                  ; Output:    None
 32069                                  ;
 32070                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS, _$P_FileSp_Chk
 32071                                  ;
 32072                                  ; Vars: _$P_RC(W), _$P_SI_Save(W), _$P_Terminator(W), _$P_SaveSI_Cmpx(R)
 32073                                  ;	_$P_SaveSI_Cmpx(R)
 32074                                  ;***********************************************************************
 32075                                  
 32076                                  _$P_File_Format:
 32077 00001F90 50                      	push	ax			;AN000;
 32078 00001F91 57                      	push	di			;AN000;
 32079 00001F92 56                      	push	si			;AN000;
 32080 00001F93 2E8B3E[0A19]            	mov	di,[cs:_$P_SaveSI_Cmpx]	;AC034; get user buffer address
 32081                                  _$P_FileF_Loop0: 			;AN000; / skip special characters
 32082 00001F98 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 32083 00001F9B 08C0                    	or	al,al			;AN000; end of line ?
 32084 00001F9D 7413                    	jz	short _$P_FileF_Err	;AN000; if yes, error exit
 32085                                  
 32086 00001F9F E85D00                  	call	_$P_FileSp_Chk		;AN000; else, check if file special character
 32087 00001FA2 7523                    	jne	short _$P_FileF03	;AN000; if yes,
 32088                                  
 32089 00001FA4 2EC606[A019]01          	mov	byte [cs:_$P_err_flag],_$P_error_filespec 
 32090                                  					;AN033;AC034;; set error flag- bad char.
 32091 00001FAA 5E                      	pop	si			;AN033;
 32092 00001FAB 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN033;
 32093 00001FAF 5F                      	pop	di			;AN033;
 32094 00001FB0 EB3E                    	jmp	short _$P_FileF02	;AN033;
 32095                                  
 32096                                  _$P_FileF_Err:				;AN000;
 32097 00001FB2 5E                      	pop	si			;AN000;
 32098 00001FB3 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000;
 32099 00001FB7 5F                      	pop	di			;AN000;
 32100                                  
 32101                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional ;AN000; is it optional ?
 32102                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional
 32103                                  	; 12/12/2022
 32104 00001FB8 26F60701                	test	byte [es:bx],_$P_Optional
 32105                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 32106                                  	;test	word [es:bx],_$P_Optional
 32107 00001FBC 7532                    	jnz	short _$P_FileF02	;AN000;
 32108                                  
 32109 00001FBE 2EC706[FD18]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; 3/17/87
 32110 00001FC5 EB29                    	jmp	short _$P_FileF02	;AN000;
 32111                                  
 32112                                  _$P_FileF03:				;AN000;
 32113 00001FC7 58                      	pop	ax			;AN000; discard save si
 32114 00001FC8 56                      	push	si			;AN000; save new si
 32115                                  _$P_FileF_Loop1: 			;AN000;
 32116 00001FC9 2E8A04                  	mov	al,[cs:si]		;AN000; load character (not special char)
 32117 00001FCC 08C0                    	or	al,al			;AN000; end of line ?
 32118 00001FCE 741E                    	jz	short _$P_FileF_RLT	;AN000;
 32119                                  
 32120 00001FD0 E82C00                  	call	_$P_FileSp_Chk		;AN000; File special character ?
 32121 00001FD3 740B                    	je	short _$P_FileF00	;AN000;
 32122                                  
 32123 00001FD5 E83B01                  	call	_$P_Chk_DBCS		;AN000; no, then DBCS ?
 32124 00001FD8 7302                    	jnc	short _$P_FileF01	;AN000;
 32125 00001FDA 47                      	inc	di			;AN000; if yes, skip next byte
 32126 00001FDB 46                      	inc	si			;AN000;
 32127                                  _$P_FileF01:				;AN000;
 32128 00001FDC 47                      	inc	di			;AN000;
 32129 00001FDD 46                      	inc	si			;AN000;
 32130 00001FDE EBE9                    	jmp	short _$P_FileF_Loop1	;AN000;
 32131                                  ;
 32132                                  _$P_FileF00:				;AN000;
 32133 00001FE0 2EA2[0319]              	mov	[cs:_$P_Terminator],al	;AC034;
 32134 00001FE4 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; update end of string
 32135 00001FE8 47                      	inc	di			;AN000;
 32136 00001FE9 2E893E[FF18]            	mov	[cs:_$P_SI_Save],di	;AC034; update next pointer in command line
 32137                                  _$P_FileF_RLT:				;AN000;
 32138 00001FEE 5E                      	pop	si			;AN000;
 32139 00001FEF 5F                      	pop	di			;AN000;
 32140                                  _$P_FileF02:				;AN000;
 32141 00001FF0 58                      	pop	ax			;AN000; (tm14)
 32142                                  	;test	ax,_$P_File_Spc	; 200h	;AN000; (tm14)
 32143                                  	; 08/07/2023
 32144 00001FF1 F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 32145 00001FF4 7408                    	jz	short _$P_Drv_Only_Exit	;AN000; (tm14)
 32146                                  
 32147 00001FF6 50                      	push	ax			;AN000; (tm14)
 32148                                  	;mov	ah,_$P_No_Tag		;AN000; set
 32149                                  	;mov	al,_$P_File_Spec 	;AN000; result
 32150                                  	; 08/07/2023
 32151 00001FF7 B805FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_File_Spec ; 0FF05h
 32152                                  					      ; set result
 32153 00001FFA E8B6FB                  	call	_$P_Fill_Result		;AN000; buffer to file spec
 32154 00001FFD 58                      	pop	ax			;AN000;
 32155                                  
 32156                                  _$P_Drv_Only_Exit:			;AN000; (tm14)
 32157 00001FFE C3                      	retn				;AN000;
 32158                                  
 32159                                  ;***********************************************************************
 32160                                  ; _$P_FileSp_Chk
 32161                                  ;
 32162                                  ; Function:  Check if the input byte is one of file special characters
 32163                                  ;
 32164                                  ; Input:     cs:SI -> _$P_STRING_BUF
 32165                                  ;	     AL = character code to be examineed
 32166                                  ;
 32167                                  ; Output:    ZF = 1 , AL is one of special characters
 32168                                  ;***********************************************************************
 32169                                  
 32170                                  _$P_FileSp_Chk:
 32171 00001FFF 53                      	push	bx			;AN000;
 32172 00002000 51                      	push	cx			;AN000;
 32173                                  	;;lea	bx,[cs:_$P_FileSp_Char] ;AC034; special character table
 32174                                  	;lea	bx,[_$P_FileSp_Char] 	; "[]|<>+=;\"" at
 32175                                  					; MSDOS 6.21 IO.SYS - SYSINIT:1838h
 32176                                  	; 07/09/2023
 32177 00002001 BB[9719]                	mov	bx,_$P_FileSp_Char
 32178 00002004 B90900                  	mov	cx,_$P_FileSp_Len ; 9	;AN000; load length of it
 32179                                  _$P_FileSp_Loop: 			;AN000;
 32180 00002007 2E3A07                  	cmp	al,[cs:bx]		;AN000; is it one of special character ?
 32181 0000200A 7404                    	je	short _$P_FileSp_Exit	;AN000;
 32182                                  
 32183 0000200C 43                      	inc	bx			;AN000;
 32184 0000200D E2F8                    	loop	_$P_FileSp_Loop		;AN000;
 32185                                  
 32186 0000200F 41                      	inc	cx			;AN000; reset ZF
 32187                                  _$P_FileSp_Exit: 			;AN000;
 32188 00002010 59                      	pop	cx			;AN000;
 32189 00002011 5B                      	pop	bx			;AN000;
 32190 00002012 C3                      	retn
 32191                                  
 32192                                  ;ENDIF					;AN000;(of FileSW+DrvSW)
 32193                                  
 32194                                  ;IF	DrvSW				;AN000;(Check if drive only is supported)
 32195                                  
 32196                                  ;***********************************************************************
 32197                                  ; _$P_Drive_Format;
 32198                                  ;
 32199                                  ; Function:  Check if the input string is valid drive only format.
 32200                                  ;	     And set the result buffer.
 32201                                  ;
 32202                                  ; Input:     cs:SI -> _$P_STRING_BUF
 32203                                  ;	     ES:BX -> CONTROL block
 32204                                  ;
 32205                                  ; Output:    None
 32206                                  ;
 32207                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS
 32208                                  ;
 32209                                  ; Vars: _$P_RC(W)
 32210                                  ;***********************************************************************
 32211                                  
 32212                                  _$P_Drive_Format:
 32213 00002013 50                      	push	ax			;AN000;
 32214 00002014 52                      	push	dx			;AN000;
 32215 00002015 2E8A04                  	mov	al,[cs:si]		;AN000;
 32216 00002018 08C0                    	or	al,al			;AN000; if null string
 32217 0000201A 7436                    	je	short _$P_Drv_Exit	;AN000; do nothing
 32218                                  
 32219 0000201C E8F400                  	call	_$P_Chk_DBCS		;AN000; is it leading byte ?
 32220 0000201F 722A                    	jc	short _$P_Drv_Err	;AN000;
 32221                                  
 32222 00002021 2E837C013A              	cmp	word [cs:si+1],_$P_Colon ;AN000; "d", ":", 0  ?
 32223 00002026 740D                    	je	short _$P_DrvF00	;AN000;
 32224                                  
 32225                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 32226                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon ;AN000; colon can be ignored?
 32227                                  	; 12/12/2022
 32228 00002028 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 32229                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 32230                                  	;test	word [es:bx],_$P_Ig_Colon
 32231 0000202C 741D                    	jz	short _$P_Drv_Err	;AN000;
 32232                                  
 32233 0000202E 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; "d", 0  ?
 32234 00002033 7516                    	jne	short _$P_Drv_Err	;AN000;
 32235                                  
 32236                                  _$P_DrvF00:				;AN000;
 32237 00002035 0C20                    	or	al,_$P_Make_Lower	;AN000; lower case
 32238 00002037 3C61                    	cmp	al,"a"                  ;AN000; drive letter must
 32239 00002039 7210                    	jb	short _$P_Drv_Err	;AN000; in range of
 32240                                  
 32241 0000203B 3C7A                    	cmp	al,"z"                  ;AN000; "a"-"z"
 32242 0000203D 770C                    	ja	short _$P_Drv_Err	;AN000; if no, error
 32243                                  
 32244 0000203F 2C60                    	sub	al,"a"-1                ;AN000; make text drive to binary drive
 32245 00002041 88C2                    	mov	dl,al			;AN000; set
 32246                                  	;mov	ah,_$P_No_Tag		;AN000; result
 32247                                  	;mov	al,_$P_Drive		;AN000; buffer
 32248                                  	; 08/07/2023
 32249 00002043 B806FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Drive ; 0FF06h
 32250                                  					      ; set result buffer
 32251 00002046 E86AFB                  	call	_$P_Fill_Result		;AN000; to drive
 32252 00002049 EB07                    	jmp	short _$P_Drv_Exit	;AN000;
 32253                                  
 32254                                  _$P_Drv_Err:				;AN000;
 32255 0000204B 2EC706[FD18]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 32256                                  _$P_Drv_Exit:				;AN000;
 32257 00002052 5A                      	pop	dx			;AN000;
 32258 00002053 58                      	pop	ax			;AN000;
 32259 00002054 C3                      	retn				;AN000;
 32260                                  
 32261                                  ;ENDIF					;AN000;(of DrvSW)
 32262                                  
 32263                                  ;***********************************************************************
 32264                                  ; _$P_Skip_Delim;
 32265                                  ;
 32266                                  ; Function: Skip delimiters specified in the PARMS list, white space
 32267                                  ;	    and comma.
 32268                                  ;
 32269                                  ; Input:    DS:SI -> Command String
 32270                                  ;	    ES:DI -> Parameter List
 32271                                  ;
 32272                                  ; Output:   CY = 1 if the end of line encounterd
 32273                                  ;	    CY = 0 then SI move to 1st non-delimiter character
 32274                                  ;	    AL = Last examineed character
 32275                                  ;
 32276                                  ; Use:	    _$P_Chk_EOL, _$P_Chk_Delim,
 32277                                  ;
 32278                                  ; Vars:     _$P_Flags(R)
 32279                                  ;***********************************************************************
 32280                                  
 32281                                  _$P_Skip_Delim:
 32282                                  _$P_Skip_Delim_Loop:			;AN000;
 32283 00002055 AC                      	lodsb				;AN000;
 32284 00002056 E81E00                  	call	_$P_Chk_EOL		;AN000; is it EOL character ?
 32285 00002059 7416                    	jz	short _$P_Skip_Delim_CY	;AN000; if yes, exit w/ CY on
 32286                                  
 32287 0000205B E84E00                  	call	_$P_Chk_Delim		;AN000; is it one of delimiters ?
 32288 0000205E 7514                    	jnz	short _$P_Skip_Delim_NCY ;AN000; if no, exit w/ CY off
 32289                                  
 32290 00002060 2EF606[0919]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; extra delim or comma found ?
 32291 00002066 74ED                    	jz	short _$P_Skip_Delim_Loop ;AN000; if no, loop
 32292                                  
 32293 00002068 2EF606[0919]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AC034; /x , or xxx=zzz , (tm08)
 32294                                  	;jz	short _$P_Exit_At_Extra	;AN000; no switch, no keyword (tm08)
 32295                                  	; 08/07/2023
 32296                                  	; cf=0
 32297 0000206E 7505                    	jnz	short _$P_Skip_Delim_Exit
 32298 00002070 C3                      	retn
 32299                                  
 32300                                  	;dec	si			;AN000; backup si for next call (tm08)
 32301                                  	;jmp	short _$P_Exit_At_Extra	;AN000; else exit w/ CY off
 32302                                  	; 12/12/2022
 32303                                  	; cf=0
 32304                                  	; 08/07/2023
 32305                                  	;jmp	short _$P_Skip_Delim_Exit
 32306                                  
 32307                                  _$P_Skip_Delim_CY:			;AN000;
 32308 00002071 F9                      	stc				;AN000; indicate EOL
 32309 00002072 EB01                    	jmp	short _$P_Skip_Delim_Exit ;AN000;
 32310                                  
 32311                                  _$P_Skip_Delim_NCY:			;AN000;
 32312 00002074 F8                      	clc				;AN000; indicate non delim
 32313                                  _$P_Skip_Delim_Exit:			;AN000; in this case, need
 32314 00002075 4E                      	dec	si			;AN000;  backup index pointer
 32315                                  	; 08/07/2023
 32316                                  	; 12/12/2022
 32317                                  ;_$P_Exit_At_Extra:	 ; cf=0
 32318 00002076 C3                      	retn				;AN000;
 32319                                  
 32320                                  	; 12/12/2022
 32321                                  ;_$P_Exit_At_Extra:			;AN000;
 32322                                  	;clc				;AN000; indicate extra delim
 32323                                  	;retn				;AN000;
 32324                                  
 32325                                  ;***********************************************************************
 32326                                  ; _$P_Chk_EOL;
 32327                                  ;
 32328                                  ; Function: Check if AL is one of End of Line characters.
 32329                                  ;
 32330                                  ; Input:    AL = character code
 32331                                  ;	    ES:DI -> Parameter List
 32332                                  ;
 32333                                  ; Output:   ZF = 1 if one of End of Line characters
 32334                                  ;**********************************************************************
 32335                                  
 32336                                  _$P_Chk_EOL:
 32337 00002077 53                      	push	bx			;AN000;
 32338 00002078 51                      	push	cx			;AN000;
 32339 00002079 3C0D                    	cmp	al,_$P_CR		;AN000; Carriage return ?
 32340 0000207B 742C                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 32341 0000207D 3C00                    	cmp	al,_$P_NULL		;AN000; zero ?
 32342 0000207F 7428                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 32343                                  ;IF LFEOLSW				;AN028; IF LF TO BE ACCEPTED AS EOL
 32344 00002081 3C0A                    	cmp	al,_$P_LF		;AN000; Line feed ?
 32345 00002083 7424                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 32346                                  ;ENDIF					;AN028;
 32347 00002085 26807D0202              	cmp	byte [es:di+_$P_PARMS_Blk.Num_Extra],_$P_I_Have_EOL 
 32348                                  					;AN000; EOL character specified ?
 32349 0000208A 721D                    	jb	short _$P_Chk_EOL_Exit 	;AN000;
 32350 0000208C 31DB                    	xor	bx,bx			;AN000;
 32351 0000208E 268A5D03                	mov	bl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim]
 32352                                  					;AN000; get length of delimiter list
 32353 00002092 83C304                  	add	bx,_$P_Len_PARMS 	;AN000; skip it
 32354                                  	; 08/07/2023
 32355 00002095 31C9                    	xor	cx,cx ; *
 32356 00002097 26803900                	cmp	byte [es:bx+di],_$P_I_Use_Default ;AN000; No extra EOL character ?
 32357 0000209B 740B                    	je	short _$P_Chk_EOL_NZ	;AN000;
 32358                                  	; 08/07/2023
 32359                                  	;;xor	cx,cx			;AN000; Get number of extra character
 32360                                  	;xor	ch,ch ; *
 32361 0000209D 268A09                  	mov	cl,[es:bx+di]		;AN000; 
 32362                                  _$P_Chk_EOL_Loop:			;AN000;
 32363 000020A0 43                      	inc	bx			;AN000;
 32364 000020A1 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra EOL character
 32365 000020A4 7403                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 32366 000020A6 E2F8                    	loop	_$P_Chk_EOL_Loop 	;AN000;
 32367                                  	; 08/07/2023
 32368                                  	; cx=0
 32369                                  _$P_Chk_EOL_NZ:				;AN000;
 32370                                  	;cmp	al,_$P_CR		;AN000; reset ZF
 32371                                  	; 08/07/2023
 32372 000020A8 41                      	inc	cx  ; zf=0  (cx=1) ; *
 32373                                  _$P_Chk_EOL_Exit:			;AN000;
 32374 000020A9 59                      	pop	cx			;AN000;
 32375 000020AA 5B                      	pop	bx			;AN000;
 32376 000020AB C3                      	retn
 32377                                  
 32378                                  ;***********************************************************************
 32379                                  ; _$P_Chk_Delim;
 32380                                  ;
 32381                                  ; Function: Check if AL is one of delimiter characters.
 32382                                  ;	    if AL+[si] is DBCS blank, it is replaced with two SBCS
 32383                                  ;	    blanks.
 32384                                  ;
 32385                                  ; Input:    AL = character code
 32386                                  ;	    DS:SI -> Next Character
 32387                                  ;	    ES:DI -> Parameter List
 32388                                  ;
 32389                                  ; Output:   ZF = 1 if one of delimiter characters
 32390                                  ;	    SI points to the next character
 32391                                  ; Vars:  _$P_Terminator(W), _$P_Flags(W)
 32392                                  ;***********************************************************************
 32393                                  
 32394                                  	; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 32395                                  	; MSDOS 6.21 IO.SYS - SYSINIT:1FAEh
 32396                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:2451h) ; (Retro DOS v5.0)
 32397                                  
 32398                                  _$P_Chk_Delim:
 32399 000020AC 53                      	push	bx			;AN000;
 32400 000020AD 51                      	push	cx			;AN000;
 32401 000020AE 2EC606[0319]20          	mov	byte [cs:_$P_Terminator],_$P_Space 
 32402                                  					;AC034; Assume terminated by space
 32403                                  	;and	byte [cs:_$P_Flags20,0DFh
 32404 000020B4 2E8026[0919]DF          	and	byte [cs:_$P_Flags2],0FFh-_$P_Extra ;AC034;
 32405 000020BA 3C20                    	cmp	al,_$P_Space ; 20h	;AN000; Space ?
 32406 000020BC 7423                    	je	short _$P_Chk_Delim_Exit ;AN000;
 32407                                  
 32408 000020BE 3C09                    	cmp	al,_$P_TAB		;AN000; TAB ?
 32409 000020C0 741F                    	je	short _$P_Chk_Delim_Exit ;AN000;
 32410                                  
 32411 000020C2 3C2C                    	cmp	al,_$P_Comma		;AN000; Comma ?
 32412 000020C4 741E                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 32413                                  
 32414                                  ; Note: _$P_Chk_Delim00 part of code is nonsense here
 32415                                  ;        because _$P_Space = _$P_DBSP1 = 20h
 32416                                  ;        Erdogan Tan - 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 32417                                  ;_$P_Chk_Delim00:
 32418                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:246Bh)
 32419                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:1FC8h)
 32420                                  %if 0
 32421                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32422                                  _$P_Chk_Delim00: 			;AN000;
 32423                                  	cmp	al,_$P_DBSP1	; 20h	;AN000; 1st byte of DBCS Space ?
 32424                                  	jne	short _$P_Chk_Delim01	;AN000;
 32425                                  
 32426                                  	cmp	byte [si],_$P_DBSP2 ; 20h ;AN000; 2nd byte of DBCS Space ?
 32427                                  	jne	short _$P_Chk_Delim01	;AN000;
 32428                                  
 32429                                  	mov	al,_$P_Space		;AN000;
 32430                                  	inc	si			;AN000; make si point to next character
 32431                                  	cmp	al,al			;AN000; Set ZF
 32432                                  	jmp	short _$P_Chk_Delim_Exit ;AN000;
 32433                                  %endif
 32434                                  
 32435                                  _$P_Chk_Delim01: 			;AN000;
 32436 000020C6 26807DFE01              	cmp	byte [es:di-_$P_PARMS_Blk.Num_Extra],_$P_I_Have_Delim 
 32437                                  					;AN000; delimiter character specified ?
 32438 000020CB 7214                    	jb	short _$P_Chk_Delim_Exit ;AN000;
 32439                                  
 32440                                  	;xor	cx,cx			;AN000;
 32441 000020CD 30ED                    	xor	ch,ch
 32442                                  	;mov	cl,[es:di+3]
 32443 000020CF 268A4D03                	mov	cl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim] 
 32444                                  					;AN000; get length of delimiter list
 32445                                  	;or	cx,cx			;AN000; No extra Delim character ?
 32446                                  	;jz	short _$P_Chk_Delim_NZ 	;AN000;
 32447                                  	; 08/07/2023
 32448 000020D3 E30B                    	jcxz	_$P_Chk_Delim_NZ
 32449                                  
 32450 000020D5 BB0300                  	mov	bx,_$P_Len_PARMS-1 ; 3	;AN000; set bx to 1st extra delimiter
 32451                                  _$P_Chk_Delim_Loop:			;AN000;
 32452 000020D8 43                      	inc	bx			;AN000;
 32453 000020D9 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra Delim character
 32454 000020DC 7406                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 32455                                  
 32456 000020DE E2F8                    	loop	_$P_Chk_Delim_Loop	;AN000; examine all extra delimiter
 32457                                  
 32458                                  _$P_Chk_Delim_NZ:			;AN000;
 32459                                  	;cmp	al,_$P_Space		;AN000; reset ZF
 32460                                  	; 08/07/2023
 32461                                  	; cx=0 here
 32462 000020E0 41                      	inc	cx ; cx=1, zf=0
 32463                                  _$P_Chk_Delim_Exit:			;AN000;
 32464                                  _$P_ChkDfin:				;AN000;
 32465 000020E1 59                      	pop	cx			;AN000;
 32466 000020E2 5B                      	pop	bx			;AN000;
 32467 000020E3 C3                      	retn				;AN000;
 32468                                  
 32469                                  _$P_Chk_Delim_Exit0:			;AN000;
 32470 000020E4 2EA2[0319]              	mov	[cs:_$P_Terminator],al ;AC034; keep terminated delimiter
 32471 000020E8 2EF606[0919]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AN027;AC034;; if terminating a key=
 32472 000020EE 7506                    	jnz	short _$P_No_Set_Extra 	;AN027; then do not set the EXTRA bit
 32473                                  
 32474 000020F0 2E800E[0919]20          	or	byte [cs:_$P_Flags2],_$P_Extra 
 32475                                  					;AC034; flag terminated extra delimiter or comma
 32476                                  _$P_No_Set_Extra:			;AN027;
 32477 000020F6 38C0                    	cmp	al,al			;AN000; set ZF
 32478 000020F8 EBE7                    	jmp	short _$P_Chk_Delim_Exit ;AN000;
 32479                                  
 32480                                  ;***********************************************************************
 32481                                  ; _$P_Chk_Switch;
 32482                                  ;
 32483                                  ; Function: Check if AL is the switch character not in first position of
 32484                                  ;	    _$P_STRING_BUF
 32485                                  ;
 32486                                  ; Input:    AL = character code
 32487                                  ;	    BX = current pointer within _$P_String_Buf
 32488                                  ;	    SI =>next char on command line (following the one in AL)
 32489                                  ;
 32490                                  ; Output:   CF = 1 (set)if AL is switch character, and not in first
 32491                                  ;		 position, and has no chance of being part of a date string,
 32492                                  ;		 i.e. should be treated as a delimiter.
 32493                                  
 32494                                  ;	    CF = 0 (reset, cleared) if AL is not a switch char, is in the first
 32495                                  ;		 position, or is a slash but may be part of a date string, i.e.
 32496                                  ;		 should not be treated as a delimiter.
 32497                                  ;
 32498                                  ; Vars:  _$P_Terminator(W)
 32499                                  
 32500                                  ; Use:	 _$P_0099
 32501                                  ;***********************************************************************
 32502                                  
 32503                                  _$P_Chk_Switch:
 32504                                  	;;lea	bp,[cs:_$P_STRING_BUF]	;AN020;AC034
 32505                                  	;lea	bp,[_$P_STRING_BUF]	;BP=OFFSET of _$P_String_Buf even in group addressing
 32506                                  	; 08/07/2023
 32507 000020FA BD[1219]                	mov	bp,_$P_STRING_BUF
 32508                                  
 32509                                  ;	.IF <BX NE BP> THEN		;AN020;IF not first char THEN
 32510 000020FD 39EB                    	cmp	bx,bp			;AN000;
 32511 000020FF 7406                    	je	short _$P_STRUC_L2	;AN000;
 32512                                  
 32513                                  ;	.IF <AL EQ _$P_Switch> THEN	;AN020;otherwise see if a slash
 32514 00002101 3C2F                    	cmp	al,_$P_Switch		;AN000;
 32515 00002103 750C                    	jne	short _$P_STRUC_L5 	;AN000;
 32516                                  
 32517 00002105 F9                      	stc				;AN020;not in first position and is slash
 32518                                  	;jmp     short _$P_STRUC_L1	;AN000;
 32519                                  	; 12/12/2022
 32520 00002106 C3                      	retn
 32521                                  
 32522                                  ; 12/12/2022
 32523                                  ;_$P_STRUC_L5:				;AN000;
 32524                                  ;	CLC				;AN020;not a slash
 32525                                  ;;	    .ENDIF			;AN020;
 32526                                  ;;	.ELSE				;AN020;is first char in the buffer, ZF=0
 32527                                  ;	jmp	short _$P_STRUC_L1	;AN000;
 32528                                  
 32529                                  _$P_STRUC_L2:				;AN000;
 32530                                  ;	.IF <AL EQ _$P_Switch> THEN	;AN020;
 32531 00002107 3C2F                    	cmp     al,_$P_Switch		;AN000;
 32532 00002109 7506                    	jne	short _$P_STRUC_L12	;AN000;
 32533                                  
 32534 0000210B 2E800E[0919]40          	or	byte [cs:_$P_Flags2],_$P_SW ;AN020 ;AC034;;could be valid switch, first char and is slash
 32535                                  ;	.ENDIF				;AN020;
 32536                                  
 32537                                  	; 12/12/2022
 32538                                  	; cf=0
 32539                                  	;retn
 32540                                  
 32541                                  _$P_STRUC_L5:
 32542                                  	; 12/12/2022
 32543                                  _$P_STRUC_L12:				;AN000;
 32544 00002111 F8                      	clc				;AN020;CF=0 indicating first char
 32545                                  ;	.ENDIF				;AN020;
 32546                                  _$P_STRUC_L1:				;AN000;
 32547 00002112 C3                      	retn				;AN000;
 32548                                  
 32549                                  ;**************************************************************************
 32550                                  ; _$P_Chk_DBCS:
 32551                                  ;
 32552                                  ;  Function: Check if a specified byte is in ranges of the DBCS lead bytes
 32553                                  ;
 32554                                  ;  Input:
 32555                                  ;	  AL	= Code to be examineed
 32556                                  ;
 32557                                  ;  Output:
 32558                                  ;	  If CF is on then a lead byte of DBCS
 32559                                  ;
 32560                                  ; Use: INT 21h w/AH=63
 32561                                  ;
 32562                                  ; Vars:  _$P_DBCSEV_Seg(RW), _$P_DBCSEV_Off(RW)
 32563                                  ;***************************************************************************
 32564                                  
 32565                                  _$P_Chk_DBCS:
 32566 00002113 1E                      	push	ds			;AN000;
 32567 00002114 56                      	push	si			;AN000;
 32568 00002115 53                      	push	bx			;AN000; (tm11)
 32569                                  	;cmp	word [cs:_$P_DBCSEV_SEG],0 ;AC034; ALREADY SET ?
 32570                                  	;jne	short _$P_DBCS00	;AN000;
 32571                                  	; 08/07/2023
 32572 00002116 2E8B36[0619]            	mov	si,[cs:_$P_DBCSEV_SEG]
 32573 0000211B 21F6                    	and	si,si ; 0 ?
 32574 0000211D 7525                    	jnz	short _$P_DBCS00 ; already set
 32575 0000211F 50                      	push	ax			;AN000;
 32576 00002120 1E                      	push	ds			;AN000; (tm11)
 32577 00002121 51                      	push	cx			;AN000;
 32578 00002122 52                      	push	dx			;AN000;
 32579 00002123 57                      	push	di			;AN000;
 32580 00002124 55                      	push	bp			;AN000;
 32581 00002125 06                      	push	es			;AN000;
 32582                                  	; si = 0 ; 08/07/2023
 32583                                  	;xor	si,si			;AN000;
 32584 00002126 8EDE                    	mov	ds,si ; 0		;AN000;
 32585 00002128 B80063                  	mov	ax,_$P_DOS_GetEV ; 6300h ;AN000; GET DBCS EV CALL
 32586 0000212B CD21                    	int	21h			;AN000;
 32587                                  		; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
 32588 0000212D 8CDB                    	mov	bx,ds			;AN000; (tm11)
 32589 0000212F 09DB                    	or	bx,bx			;AN000; (tm11)
 32590 00002131 07                      	pop	es			;AN000;
 32591 00002132 5D                      	pop	bp			;AN000;
 32592 00002133 5F                      	pop	di			;AN000;
 32593 00002134 5A                      	pop	dx			;AN000;
 32594 00002135 59                      	pop	cx			;AN000;
 32595 00002136 1F                      	pop	ds			;AN000; (tm11)
 32596 00002137 58                      	pop	ax			;AN000;
 32597 00002138 7424                    	jz	short _$P_NON_DBCS	;AN000;
 32598                                  _$P_DBCS02:				;AN000;
 32599 0000213A 2E8936[0419]            	mov	[cs:_$P_DBCSEV_OFF],si	;AC034; save EV offset
 32600 0000213F 2E891E[0619]            	mov	[cs:_$P_DBCSEV_SEG],bx	;AC034; save EV segment (tm11)
 32601                                  _$P_DBCS00:				;AN000;
 32602                                  	;mov	si,[cs:_$P_DBCSEV_OFF]	;AC034; load EV offset
 32603                                  	;mov	ds,[cs:_$P_DBCSEV_SEG]	;AC034; and segment
 32604                                  	; 08/07/2023
 32605 00002144 2EC536[0419]            	lds	si,[cs:_$P_DBCSEV_OFF]
 32606                                  _$P_DBCS_LOOP:				;AN000;
 32607 00002149 833C00                  	cmp	word [si],0		;AN000; zero vector ?
 32608 0000214C 7410                    	je	short _$P_NON_DBCS	;AN000; then exit
 32609 0000214E 3A04                    	cmp	al,[si] 		;AN000;
 32610 00002150 7208                    	jb	short _$P_DBCS01	;AN000; Check if AL is in
 32611 00002152 3A4401                  	cmp	al,[si+1]		;AN000;   range of
 32612 00002155 7703                    	ja	short _$P_DBCS01	;AN000;      the vector
 32613 00002157 F9                      	stc				;AN000; if yes, indicate DBCS and exit
 32614 00002158 EB04                    	jmp	short _$P_DBCS_EXIT	;AN000;
 32615                                  _$P_DBCS01:				;AN000;
 32616 0000215A 46                      	inc	si			;AC035; add '2' to
 32617 0000215B 46                      	inc	si			;AC035;  SI reg
 32618                                  					;AN000; get next vector
 32619 0000215C EBEB                    	jmp	short _$P_DBCS_LOOP	;AN000; loop until zero vector found
 32620                                  _$P_NON_DBCS:				;AN000;
 32621                                  	; 12/12/2022
 32622                                  	; cf=0
 32623                                  	;clc				;AN000; indicate SBCS
 32624                                  _$P_DBCS_EXIT:				;AN000;
 32625 0000215E 5B                      	pop	bx			;AN000; (tm11)
 32626 0000215F 5E                      	pop	si			;AN000;
 32627 00002160 1F                      	pop	ds			;AN000;
 32628 00002161 C3                      	retn				;AN000;
 32629                                  
 32630                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 32631                                  ; ======================================================================
 32632                                  ; 27/03/2019 - Retro DOS v4.0
 32633                                  
 32634                                  ;control block definitions for parser.
 32635                                  ;-----------------------------------------------------------------------
 32636                                  ; buffer = [n | n,m] {/e}
 32637                                  
 32638                                  ; 30/03/2019
 32639                                  
 32640                                  struc p_parms
 32641 00000000 ????                    	resw	1	; dw ?
 32642 00000002 ??                      	resb	1	; db 1	; an extra delimiter list
 32643 00000003 ??                      	resb	1	; db 1	; length is 1
 32644 00000004 ??                      	resb 	1	; db ';' ; delimiter
 32645                                  .size:
 32646                                  endstruc
 32647                                  
 32648                                  struc p_pos
 32649 00000000 ????                    	resw	1	; dw ?	; numeric value??
 32650 00000002 ????                    	resw	1	; dw ?	; function
 32651 00000004 ????                    	resw	1	; dw ?	; result value buffer
 32652                                  
 32653                                  ; note: by defining result_val before this structure, we could remove
 32654                                  ;  the "result_val" from every structure invocation
 32655                                  
 32656 00000006 ????                    	resw	1	; dw ?	; value list
 32657 00000008 ??                      	resb	1	; db 0	; no switches/keywords
 32658                                  .size:
 32659                                  endstruc
 32660                                  
 32661                                  struc	p_range
 32662 00000000 ??                      	resb	1	; db 1	; range definition
 32663 00000001 ??                      	resb 	1	; db 1	; 1 definition of range
 32664 00000002 ??                      	resb 	1	; db 1	; item tag for this range
 32665 00000003 ????????                	resd	1	; dd ?	; numeric min
 32666 00000007 ????????                	resd	1	; dd ?	; numeric max
 32667                                  .size:
 32668                                  endstruc
 32669                                  
 32670                                  ;-----------------------------------------------------------------------
 32671                                  
 32672                                  	; 26/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32673                                  	; (SYSINIT:1F48h)
 32674                                  
 32675                                  	; 08/07/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32676                                  	; MSDOS 6.21 IO.SYS - SYSINIT:2083h
 32677                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:251Dh) ; (Retro DOS v5.0)
 32678                                  
 32679                                  ; buffer = [n | n,m] {/e}
 32680                                  
 32681                                  ;buf_parms p_parms <buf_parmsx>
 32682                                  buf_parms: 
 32683 00002162 [6721]                  	dw	buf_parmsx
 32684 00002164 01                      	db	1	; an extra delimiter list
 32685 00002165 01                      	db	1	; length is 1
 32686 00002166 3B                      	db	';'	; delimiter
 32687                                  
 32688                                  buf_parmsx:
 32689 00002167 0102[7121][8521]        	dw	201h,buf_pos1,buf_pos2	; min 1, max 2 positionals
 32690 0000216D 01                      	db	1			; one switch
 32691 0000216E [9921]                  	dw	sw_x_ctrl
 32692 00002170 00                      	db	0			; no keywords
 32693                                  
 32694                                  ;buf_pos1 p_pos <8000h,0,result_val,buf_range_1>  ; numeric
 32695                                  buf_pos1:
 32696 00002171 0080                    	dw	8000h	; numeric value??
 32697 00002173 0000                    	dw	0	; function
 32698 00002175 [AB21]                  	dw	result_val ; result value buffer	
 32699 00002177 [7A21]                  	dw	buf_range_1 ; value list
 32700 00002179 00                      	db	0  	; no switches/keywords
 32701                                  
 32702                                  ;buf_range_1 p_range <,,,1,99>		; M050
 32703                                  buf_range_1:
 32704 0000217A 01                      	db	1	; range definition
 32705 0000217B 01                      	db	1	; 1 definition of range
 32706 0000217C 01                      	db	1	; item tag for this range
 32707 0000217D 01000000                	dd	1	; numeric min
 32708 00002181 63000000                	dd	99	; numeric max
 32709                                  
 32710                                  ;buf_pos2 p_pos <8001h,0,result_val,buf_range_2> ; optional num.
 32711                                  buf_pos2:
 32712 00002185 0180                    	dw	8001h
 32713 00002187 0000                    	dw	0
 32714 00002189 [AB21]                  	dw	result_val	
 32715 0000218B [8E21]                  	dw	buf_range_2
 32716 0000218D 00                      	db	0
 32717                                  
 32718                                  ;buf_range_2 p_range <,,,0,8>
 32719                                  buf_range_2:
 32720 0000218E 01                      	db	1
 32721 0000218F 01                      	db	1
 32722 00002190 01                      	db	1
 32723 00002191 00000000                	dd	0
 32724 00002195 08000000                	dd	8
 32725                                  
 32726                                  ;sw_x_ctrl p_pos <0,0,result_val,noval,1> ; followed by one switch
 32727                                  sw_x_ctrl:
 32728 00002199 0000                    	dw	0
 32729 0000219B 0000                    	dw	0
 32730 0000219D [AB21]                  	dw	result_val	
 32731 0000219F [AA21]                  	dw	noval
 32732 000021A1 01                      	db	1	; 1 switch
 32733                                  	
 32734                                  switch_x:
 32735 000021A2 2F5800                  	db	'/X',0		; M016
 32736                                  
 32737                                  p_buffers:
 32738 000021A5 0000                    	dw	0	; local variables
 32739                                  p_h_buffers:
 32740 000021A7 0000                    	dw	0
 32741                                  	; 26/10/2022  (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32742                                  p_buffer_slash_x:
 32743 000021A9 00                      	db	0 ; 31/03/2019
 32744                                  
 32745                                  ;-- common definitions -------------------------------------------------
 32746                                  
 32747 000021AA 00                      noval:	db	0
 32748                                  
 32749                                  result_val: 	;label	byte
 32750 000021AB 00                      	db	0		; type returned
 32751                                  result_val_itag:
 32752 000021AC 00                      	db	0		; item tag returned
 32753                                  result_val_swoff:
 32754 000021AD 0000                    	dw	0		; es:offset of the switch defined
 32755                                  rv_byte:	;label	byte
 32756 000021AF 00000000                rv_dword: dd	0		; value if number,or seg:offset to string.
 32757                                  
 32758                                  ;-----------------------------------------------------------------------
 32759                                  
 32760                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32761                                  	; (SYSINIT:1F99h)
 32762                                  
 32763                                  ; break = [ on | off ]
 32764                                  
 32765                                  ;brk_parms p_parms  <brk_parmsx>
 32766                                  brk_parms:
 32767 000021B3 [B821]                  	dw	brk_parmsx
 32768 000021B5 01                      	db	1	; an extra delimiter list
 32769 000021B6 01                      	db	1	; length is 1
 32770 000021B7 3B                      	db	';'	; delimiter
 32771                                  
 32772                                  brk_parmsx:
 32773 000021B8 0101[BE21]              	dw	101h,brk_pos	; min,max = 1 positional
 32774 000021BC 00                      	db	0		; no switches
 32775 000021BD 00                      	db	0		; no keywords
 32776                                  
 32777                                  ;brk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 32778                                  brk_pos:
 32779 000021BE 0020                    	dw	2000h
 32780 000021C0 0000                    	dw	0
 32781 000021C2 [AB21]                  	dw	result_val	
 32782 000021C4 [C721]                  	dw	on_off_string
 32783 000021C6 00                      	db	0
 32784                                  
 32785                                  on_off_string:	;label	byte
 32786 000021C7 03                      	db	3		; signals that there is a string choice
 32787 000021C8 00                      	db	0		; no range definition
 32788 000021C9 00                      	db	0		; no numeric values choice
 32789 000021CA 02                      	db	2		; 2 strings for choice
 32790 000021CB 01                      	db	1		; the 1st string tag
 32791 000021CC [D121]                  	dw	on_string
 32792 000021CE 02                      	db	2		; the 2nd string tag
 32793 000021CF [D421]                  	dw	off_string
 32794                                  
 32795                                  on_string:
 32796 000021D1 4F4E00                  	db	"ON",0
 32797                                  off_string:
 32798 000021D4 4F464600                	db	"OFF",0
 32799                                  
 32800                                  p_ctrl_break:
 32801 000021D8 00                      	db	0	; local variable
 32802                                  
 32803                                  ;-----------------------------------------------------------------------
 32804                                  
 32805                                  	; 27/10/2022
 32806                                  
 32807                                  ; country = n {m {path}}
 32808                                  ; or
 32809                                  ; country = n,,path
 32810                                  
 32811                                  ;cntry_parms p_parms <cntry_parmsx>
 32812                                  cntry_parms:
 32813 000021D9 [DE21]                  	dw	cntry_parmsx
 32814 000021DB 01                      	db	1
 32815 000021DC 01                      	db	1
 32816 000021DD 3B                      	db	';'
 32817                                  	
 32818                                  cntry_parmsx:
 32819 000021DE 0103[E821][FC21]-       	dw	301h,cntry_pos1,cntry_pos2,cntry_pos3 ; min 1, max 3 pos.
 32819 000021E4 [0522]             
 32820 000021E6 00                      	db	0		; no switches
 32821 000021E7 00                      	db	0		; no keywords
 32822                                  
 32823                                  ;cntry_pos1 p_pos <8000h,0,result_val,cc_range> ; numeric value
 32824                                  cntry_pos1:
 32825 000021E8 0080                    	dw	8000h
 32826 000021EA 0000                    	dw	0
 32827 000021EC [AB21]                  	dw	result_val	
 32828 000021EE [F121]                  	dw	cc_range
 32829 000021F0 00                      	db	0
 32830                                  
 32831                                  ;cc_range p_range <,,,1,999>
 32832                                  cc_range:
 32833 000021F1 01                      	db	1
 32834 000021F2 01                      	db	1
 32835 000021F3 01                      	db	1
 32836 000021F4 01000000                	dd	1
 32837 000021F8 E7030000                	dd	999
 32838                                  
 32839                                  ;cntry_pos2 p_pos <8001h,0,result_val,cc_range> ; optional num.
 32840                                  cntry_pos2:
 32841 000021FC 0180                    	dw	8001h
 32842 000021FE 0000                    	dw	0
 32843 00002200 [AB21]                  	dw	result_val	
 32844 00002202 [F121]                  	dw	cc_range
 32845 00002204 00                      	db	0
 32846                                  
 32847                                  ;cntry_pos3 p_pos <201h,0,result_val,noval>     ; optional filespec
 32848                                  cntry_pos3:
 32849 00002205 0102                    	dw	201h
 32850 00002207 0000                    	dw	0
 32851 00002209 [AB21]                  	dw	result_val	
 32852 0000220B [AA21]                  	dw	noval
 32853 0000220D 00                      	db	0	
 32854                                  
 32855                                  p_cntry_code:
 32856 0000220E 0000                    	dw	0	; local variable
 32857                                  p_code_page:
 32858 00002210 0000                    	dw	0	; local variable
 32859                                  
 32860                                  ;-----------------------------------------------------------------------
 32861                                  
 32862                                  	; 27/10/2022
 32863                                  
 32864                                  ; files = n
 32865                                  
 32866                                  ;files_parms p_parms <files_parmsx>
 32867                                  files_parms:
 32868 00002212 [1722]                  	dw	files_parmsx
 32869 00002214 01                      	db	1
 32870 00002215 01                      	db	1
 32871 00002216 3B                      	db	';'
 32872                                  
 32873                                  files_parmsx:
 32874 00002217 0101[1D22]              	dw	101h,files_pos	; min,max 1 positional
 32875 0000221B 00                      	db	0		; no switches
 32876 0000221C 00                      	db	0		; no keywords
 32877                                  
 32878                                  ;files_pos p_pos <8000h,0,result_val,files_range,0> ; numeric value
 32879                                  files_pos:
 32880 0000221D 0080                    	dw	8000h
 32881 0000221F 0000                    	dw	0
 32882 00002221 [AB21]                  	dw	result_val	
 32883 00002223 [2622]                  	dw	files_range
 32884 00002225 00                      	db	0
 32885                                  
 32886                                  ;files_range p_range <,,,8,255>
 32887                                  files_range:
 32888 00002226 01                      	db	1
 32889 00002227 01                      	db	1
 32890 00002228 01                      	db	1
 32891 00002229 08000000                	dd	8
 32892 0000222D FF000000                	dd	255
 32893                                  
 32894                                  p_files:
 32895 00002231 00                      	db	0		; local variable
 32896                                  
 32897                                  ;-----------------------------------------------------------------------
 32898                                  
 32899                                  	; 27/10/2022
 32900                                  
 32901                                  ; fcbs = n,m
 32902                                  
 32903                                  ;fcbs_parms p_parms <fcbs_parmsx>
 32904                                  fcbs_parms:
 32905 00002232 [3722]                  	dw	fcbs_parmsx
 32906 00002234 01                      	db	1
 32907 00002235 01                      	db	1
 32908 00002236 3B                      	db	';'
 32909                                  
 32910                                  fcbs_parmsx:
 32911 00002237 0102[3F22][5322]        	dw	201h,fcbs_pos_1,fcbs_pos_2 ; min,max = 2 positional
 32912 0000223D 00                      	db	0		; no switches
 32913 0000223E 00                      	db	0		; no keywords
 32914                                  
 32915                                  ;fcbs_pos_1 p_pos <8000h,0,result_val,fcbs_range> ; numeric value
 32916                                  fcbs_pos_1:
 32917 0000223F 0080                    	dw	8000h
 32918 00002241 0000                    	dw	0
 32919 00002243 [AB21]                  	dw	result_val	
 32920 00002245 [4822]                  	dw	fcbs_range
 32921 00002247 00                      	db	0
 32922                                  
 32923                                  ;fcbs_range p_range <,,,1,255>
 32924                                  fcbs_range:
 32925 00002248 01                      	db	1
 32926 00002249 01                      	db	1
 32927 0000224A 01                      	db	1
 32928 0000224B 01000000                	dd	1
 32929 0000224F FF000000                	dd	255
 32930                                  
 32931                                  ;fcbs_pos_2 p_pos <8000h,0,result_val,fcbs_keep_range> ; numeric value
 32932                                  fcbs_pos_2:
 32933 00002253 0080                    	dw	8000h
 32934 00002255 0000                    	dw	0
 32935 00002257 [AB21]                  	dw	result_val	
 32936 00002259 [5C22]                  	dw	fcbs_keep_range
 32937 0000225B 00                      	db	0
 32938                                  
 32939                                  ;fcbs_keep_range p_range <,,,0,255>
 32940                                  fcbs_keep_range:
 32941 0000225C 01                      	db	1
 32942 0000225D 01                      	db	1
 32943 0000225E 01                      	db	1
 32944 0000225F 00000000                	dd	0
 32945 00002263 FF000000                	dd	255
 32946                                  
 32947 00002267 00                      p_fcbs:	db	0		; local variable
 32948 00002268 00                      p_keep:	db	0		; local variable
 32949                                  
 32950                                  ;-----------------------------------------------------------------------
 32951                                  
 32952                                  	; 27/10/2022
 32953                                  
 32954                                  ; lastdrive = x
 32955                                  
 32956                                  ;ldrv_parms p_parms <ldrv_parmsx>
 32957                                  ldrv_parms:
 32958 00002269 [6E22]                  	dw	ldrv_parmsx
 32959 0000226B 01                      	db	1
 32960 0000226C 01                      	db	1
 32961 0000226D 3B                      	db	';'
 32962                                  
 32963                                  ldrv_parmsx:
 32964 0000226E 0101[7422]              	dw	101h,ldrv_pos	; min,max = 1 positional
 32965 00002272 00                      	db	0		; no switches
 32966 00002273 00                      	db	0		; no keywords
 32967                                  
 32968                                  ;ldrv_pos p_pos	<110h,10h,result_val,noval> ; drive only, ignore colon
 32969                                  ldrv_pos:				    ; remove colon at end
 32970 00002274 1001                    	dw	110h
 32971 00002276 1000                    	dw	10h
 32972 00002278 [AB21]                  	dw	result_val	
 32973 0000227A [AA21]                  	dw	noval
 32974 0000227C 00                      	db	0
 32975                                  	
 32976 0000227D 00                      p_ldrv:	db	0		; local variable
 32977                                  
 32978                                  ;-----------------------------------------------------------------------
 32979                                  
 32980                                  	; 27/10/2022
 32981                                  
 32982                                  ; stacks = n,m
 32983                                  
 32984                                  ;stks_parms p_parms <stks_parmsx>
 32985                                  stks_parms:
 32986 0000227E [8322]                  	dw	stks_parmsx
 32987 00002280 01                      	db	1
 32988 00002281 01                      	db	1
 32989 00002282 3B                      	db	';'
 32990                                  
 32991                                  stks_parmsx:
 32992 00002283 0202[8B22][9F22]        	dw	202h,stks_pos_1,stks_pos_2 ; min,max = 2 positionals
 32993 00002289 00                      	db	0		; no switches
 32994 0000228A 00                      	db	0		; no keywords
 32995                                  
 32996                                  ;stks_pos_1 p_pos <8000h,0,result_val,stks_range> ; numeric value
 32997                                  stks_pos_1:
 32998 0000228B 0080                    	dw	8000h
 32999 0000228D 0000                    	dw	0
 33000 0000228F [AB21]                  	dw	result_val	
 33001 00002291 [9422]                  	dw	stks_range
 33002 00002293 00                      	db	0
 33003                                  
 33004                                  ;stks_range p_range <,,,0,64>
 33005                                  stks_range:
 33006 00002294 01                      	db	1
 33007 00002295 01                      	db	1
 33008 00002296 01                      	db	1
 33009 00002297 00000000                	dd	0
 33010 0000229B 40000000                	dd	64
 33011                                  
 33012                                  ;stks_pos_2 p_pos <8000h,0,result_val,stk_size_range> ; numeric value
 33013                                  stks_pos_2:
 33014 0000229F 0080                    	dw	8000h
 33015 000022A1 0000                    	dw	0
 33016 000022A3 [AB21]                  	dw	result_val	
 33017 000022A5 [A822]                  	dw	stk_size_range
 33018 000022A7 00                      	db	0
 33019                                  
 33020                                  ;stk_size_range p_range <,,,0,512>
 33021                                  stk_size_range:
 33022 000022A8 01                      	db	1
 33023 000022A9 01                      	db	1
 33024 000022AA 01                      	db	1
 33025 000022AB 00000000                	dd	0
 33026 000022AF 00020000                	dd	512	
 33027                                  
 33028                                  p_stack_count:
 33029 000022B3 0000                    	dw	0	; local variable
 33030                                  p_stack_size:
 33031 000022B5 0000                    	dw	0	; local variable
 33032                                  
 33033                                  ;-----------------------------------------------------------------------
 33034                                  
 33035                                  	; 27/10/2022
 33036                                  
 33037                                  ; multitrack = [ on | off ]
 33038                                  
 33039                                  ;mtrk_parms p_parms <mtrk_parmsx>
 33040                                  mtrk_parms:
 33041 000022B7 [BC22]                  	dw	mtrk_parmsx
 33042 000022B9 01                      	db	1
 33043 000022BA 01                      	db	1
 33044 000022BB 3B                      	db	';'
 33045                                  
 33046                                  mtrk_parmsx:
 33047 000022BC 0101[C222]              	dw	101h,mtrk_pos	; min,max = 1 positional
 33048 000022C0 00                      	db	0		; no switches
 33049 000022C1 00                      	db	0		; no keywords
 33050                                  
 33051                                  ;mtrk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 33052                                  mtrk_pos:
 33053 000022C2 0020                    	dw	2000h
 33054 000022C4 0000                    	dw	0
 33055 000022C6 [AB21]                  	dw	result_val	
 33056 000022C8 [C721]                  	dw	on_off_string
 33057 000022CA 00                      	db	0
 33058                                  
 33059 000022CB 00                      p_mtrk:	db	0		; local variable
 33060                                  
 33061                                  ;-----------------------------------------------------------------------
 33062                                  
 33063                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33064                                  	; (SYSINIT:20B2h)
 33065                                  
 33066                                  ; switches=/k
 33067                                  
 33068                                  ;swit_parms p_parms <swit_parmsx>
 33069                                  swit_parms:
 33070 000022CC [D122]                  	dw	swit_parmsx
 33071 000022CE 01                      	db	1
 33072 000022CF 01                      	db	1
 33073 000022D0 3B                      	db	';'
 33074                                  
 33075                                  swit_parmsx:
 33076 000022D1 0000                    	dw	0		; no positionals
 33077                                  	; 08/07/2023 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS, SYSINIT)
 33078 000022D3 05                      	db	5               ; # of switches
 33079                                  	; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 33080                                  	;db	3
 33081 000022D4 [DF22]                  	dw	swit_k_ctrl	; /k control
 33082                                  	; 01/01/2023 - Retro DOS v4.2 ; *
 33083 000022D6 [EB22]                  	dw	swit_n_ctrl ; * ; /n control (for MULTI_CONFIG only)
 33084 000022D8 [F722]                  	dw	swit_f_ctrl ; * ; /f control (for MULTI_CONFIG only)
 33085 000022DA [0323]                  	dw	swit_t_ctrl     ; /t control
 33086 000022DC [0F23]                  	dw	swit_w_ctrl     ; /w control
 33087 000022DE 00                      	db	0		; no keywords
 33088                                  
 33089                                  ;swit_k_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 33090                                  swit_k_ctrl:
 33091 000022DF 00000000[AB21]-         	dw	0,0,result_val,noval
 33091 000022E5 [AA21]             
 33092 000022E7 01                      	db	1
 33093 000022E8 2F4B00                  swit_k:	db	'/K',0
 33094                                  
 33095                                  ; 01/01/2023 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS)
 33096                                  ; (SYSINIT:220Ch) ; *
 33097                                  
 33098                                  ; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 33099                                  ;
 33100                                  ;swit_n_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 33101                                  swit_n_ctrl: ; *
 33102 000022EB 00000000[AB21]-         	dw	0,0,result_val,noval
 33102 000022F1 [AA21]             
 33103 000022F3 01                      	db	1
 33104 000022F4 2F4E00                  swit_n: db	'/N',0
 33105                                  
 33106                                  ;swit_f_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 33107                                  swit_f_ctrl: ; *
 33108 000022F7 00000000[AB21]-         	dw	0,0,result_val,noval
 33108 000022FD [AA21]             
 33109 000022FF 01                      	db	1
 33110 00002300 2F4600                  swit_f: db 	'/F',0
 33111                                  
 33112                                  	; 27/10/2022
 33113                                  
 33114                                  ;swit_t_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M059
 33115                                  swit_t_ctrl:
 33116 00002303 00000000[AB21]-         	dw	0,0,result_val,noval
 33116 00002309 [AA21]             
 33117 0000230B 01                      	db	1
 33118 0000230C 2F5400                  swit_t:	db	'/T',0			   ;				M059
 33119                                  ;swit_w_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M063
 33120                                  swit_w_ctrl:
 33121 0000230F 00000000[AB21]-         	dw	0,0,result_val,noval
 33121 00002315 [AA21]             
 33122 00002317 01                      	db	1
 33123 00002318 2F5700                  swit_w:	db	'/W',0			   ;				M063
 33124                                  
 33125                                  ;   There doesn't need to be p_swit_n or p_swit_f because /N and /F are
 33126                                  ;   acted upon during MULTI_CONFIG processing; we only needed entries
 33127                                  ;   in the above table to prevent the parsing code from complaining about them
 33128                                  
 33129 0000231B 00                      p_swit_k:	db     0	; local variable
 33130 0000231C 00                      p_swit_t:	db     0	; local variable			M059
 33131 0000231D 00                      p_swit_w:	db     0	; local variable			M063
 33132                                  
 33133                                  ;-----------------------------------------------------------------------
 33134                                  
 33135                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33136                                  	; (SYSINIT:20E8h)
 33137                                  
 33138                                  ; DOS = [ high | low ]
 33139                                  
 33140                                  ;dos_parms p_parms  <dos_parmsx>
 33141                                  dos_parms:
 33142 0000231E [2323]                  	dw	dos_parmsx
 33143 00002320 01                      	db	1
 33144 00002321 01                      	db	1
 33145 00002322 3B                      	db	';'
 33146                                  dos_parmsx:
 33147 00002323 01                      	db	1		; min parameters
 33148 00002324 02                      	db	2		; max parameters
 33149 00002325 [2B23]                  	dw	dos_pos		; 
 33150 00002327 [2B23]                  	dw	dos_pos		; 
 33151 00002329 00                      	db	0		; no switches
 33152 0000232A 00                      	db	0		; no keywords
 33153                                  
 33154                                  ;dos_pos p_pos	<2000h,0,result_val,dos_strings> ; simple string
 33155                                  ;        p_pos	<2000h,0,result_val,dos_strings> ; simple string
 33156                                  dos_pos:
 33157 0000232B 00200000[AB21]-         	dw	2000h,0,result_val,dos_strings
 33157 00002331 [3D23]             
 33158 00002333 00                      	db	0
 33159 00002334 00200000[AB21]-         	dw	2000h,0,result_val,dos_strings
 33159 0000233A [3D23]             
 33160 0000233C 00                      	db	0	
 33161                                  
 33162                                  dos_strings:	;label	byte
 33163 0000233D 03                      	db	3		; signals that there is a string choice
 33164 0000233E 00                      	db	0		; no range definition
 33165 0000233F 00                      	db	0		; no numeric values choice
 33166 00002340 04                      	db	4		; 4 strings for choice
 33167 00002341 01                      	db	1		; the 1st string tag
 33168 00002342 [4D23]                  	dw	hi_string
 33169 00002344 02                      	db	2		; the 2nd string tag
 33170 00002345 [5223]                  	dw	lo_string
 33171 00002347 03                      	db	3
 33172 00002348 [5623]                  	dw	umb_string
 33173 0000234A 04                      	db	4
 33174 0000234B [5A23]                  	dw	noumb_string
 33175                                  
 33176 0000234D 4849474800              hi_string:	db	"HIGH",0
 33177 00002352 4C4F5700                lo_string:	db	"LOW",0
 33178 00002356 554D4200                umb_string:	db	"UMB",0
 33179 0000235A 4E4F554D4200            noumb_string:	db	"NOUMB",0
 33180                                  
 33181 00002360 00                      p_dos_hi:	db	0	; local variable
 33182                                  				; BUGBUG : I dont know whether PARSER uses
 33183                                  				;          this variable or not
 33184                                  
 33185                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33186                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33187                                  ;%if 0
 33188                                  
 33189                                  ;****************************************************************** RICHID ****
 33190                                  
 33191                                  ;include	highvar.inc	; devicehigh variables (used by loadhigh also)
 33192                                  
 33193                                  ; 30/03/2019 - Retro DOS v4.0
 33194                                  ;------------------------------------------------------------------------------
 33195                                  
 33196                                  ;   Module:   HIGHVAR.INC - Data common to LOADHIGH and DEVICEHIGH, res seg
 33197                                  ;
 33198                                  ;   Date:     May 14, 1992
 33199                                  ;
 33200                                  ;******************************************************************************
 33201                                  ;
 33202                                  ;   Modification log:
 33203                                  ;
 33204                                  ;     DATE    WHO      DESCRIPTION
 33205                                  ;   --------  -------  --------------------------------------------------------
 33206                                  ;   05/14/92  t-richj  Original
 33207                                  ;   06/21/92  t-richj  Final revisions before check-in
 33208                                  ;
 33209                                  ;******************************************************************************
 33210                                  ;
 33211                                  ; There are two primary definitions which need to be made, selectively, before
 33212                                  ; this include file should be used.  These are:
 33213                                  ;    HV_Extern - If this has been defined, variables for this module will be
 33214                                  ;                declared as external.  Otherwise, variables will be declared
 33215                                  ;                public, as well as defined, here.  LoadHigh declares HV_Extern
 33216                                  ;                in stub.asm and loadhi.asm, and does not declare it in
 33217                                  ;                rdata.asm... DeviceHigh does not declare HV_Extern anywhere
 33218                                  ;                (as only one module, sysconf.asm, includes this file).
 33219                                  ;    HV_LoadHigh - This should be defined when this module is going into
 33220                                  ;                  command.com, for LoadHigh.  All of loadhi.asm, stub.asm and
 33221                                  ;                  rdata.asm define this, while io.sys' sysconf.asm does not.
 33222                                  ;
 33223                                  ;******************************************************************************
 33224                                  
 33225                                  ; To keep track of which UMBs were specified on the DH/LH command lines, and
 33226                                  ; to keep track of the minimum sizes given for each, there're two arrays kept
 33227                                  ; in { IO.SYS: sysinitseg / COMMAND.COM: DATARES }... each is MAXUMB elements
 33228                                  ; big.  16 should be around 14 too many for most users, so there's no expected
 33229                                  ; space problem (it's just such a nice round number, eh?).
 33230                                  
 33231                                  MAXUMB	equ	16
 33232                                  
 33233                                  ; Memory elements owned by the system are marked as PSP address 8 in both the
 33234                                  ; USA and Japan; Japanese systems also use 9 under more bizzarre conditions.
 33235                                  
 33236                                  FreePSPOwner	equ	0	; Free MCBs all have an owner PSP address of 0
 33237                                  SystemPSPOwner	equ	8
 33238                                  ;JapanPSPOwner	equ	9
 33239                                  
 33240                                  ; for LoadHigh and DeviceHigh:
 33241                                  ;
 33242                                  ;	fInHigh - Is set to 1 during HideUMBs(), and back to zero in
 33243                                  ;	          UnHideUMBs().
 33244                                  ;	fUmbTiny - Is set to 1 iff the user has specified /S on the command-
 33245                                  ;	           line.
 33246                                  ;	SegLoad - Segment address for first UMB specified; set automatically.
 33247                                  ;	UmbLoad - The load UMB number; for example, this is 3 if the user has
 33248                                  ;	          given a command-line like "/L:3,500;4"
 33249                                  ;	UmbUsed - An array of characters, each of which is 1 iff the UMB
 33250                                  ;	          matching its index number was specified on the command-line;
 33251                                  ;	          for example, after "/L:3,500;4;7", UmbUsed[3], [4] and [7]
 33252                                  ;	          will be set to 1.  All others will be set to 0.
 33253                                  ;	UmbSize - An array of words, each of which is interpereted as a size
 33254                                  ;	          specified by the user for a UMB (in the above example, all
 33255                                  ;	          elements would be zero save UmbSize[3], which would be 500.
 33256                                  ;	fm_umb - Set to the old UMB link-state (0x80 or 0x00)
 33257                                  ;	fm_strat - Set to the old memory-allocation strategy (0$00000???)
 33258                                  ;	fm_argc  - Number of arguments received by ParseVar() (see ParseVar()
 33259                                  ;	           for details).
 33260                                  
 33261 00002361 00                      fInHigh:  db	0
 33262 00002362 00                      fUmbTiny: db	0
 33263 00002363 0000                    SegLoad:  dw	0
 33264 00002365 00                      UmbLoad:  db	0
 33265 00002366 00<rep 10h>             UmbUsed:  times MAXUMB db 0 ; times 16 db 0  ; db 16 dup(?)
 33266 00002376 0000<rep 10h>           UmbSize:  times MAXUMB dw 0 ; times 16 dw 0  ; dw 16 dup(?)
 33267 00002396 00                      fm_umb:   db	0
 33268 00002397 00                      fm_strat: db	0
 33269 00002398 00                      fm_argc:  db	0	
 33270                                  
 33271                                  ; UmbLoad is set to UNSPECIFED, below, until /L:umb is read; at which point
 33272                                  ; UmbLoad is set to the UMB number given.
 33273                                  
 33274                                  UNSPECIFIED	equ	-1
 33275                                  
 33276                                  ;%endif ; 27/10/2022
 33277                                  
 33278                                  ;****************************************************************** RICHID ****
 33279                                  
 33280                                  ; 30/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSCONF.ASM)
 33281                                  ; ((MSDOS 6.21 IO.SYS -> SYNINIT:22BAh))
 33282                                  
 33283                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33284                                  ; (SYSINIT:212Bh)	
 33285                                  
 33286                                  		;public	DevEntry
 33287                                  
 33288 00002399 0000                    DevSize:	dw	0	; size of the device driver being loaded(paras)
 33289 0000239B 0000                    DevLoadAddr:	dw	0	; Mem addr where the device driver is 2 b loaded
 33290 0000239D 0000                    DevLoadEnd:	dw	0	; MaxAddr to which device can be loaded
 33291 0000239F 00000000                DevEntry:	dd	0	; Entry point to the device driver
 33292 000023A3 00000000                DevBrkAddr:	dd	0	; Break address of the device driver
 33293                                  ; 30/12/2022
 33294                                  ; 27/10/2022 
 33295 000023A7 00                      ConvLoad:	db	0	; Use conventional (dos 5 -style) InitDevLoad?
 33296                                  ;
 33297 000023A8 00                      DevUMB:		db	0	; byte indicating whether to load DDs in UMBs
 33298 000023A9 0000                    DevUMBAddr:	dw	0	; cuurent UMB used fro loading devices (paras)
 33299 000023AB 0000                    DevUMBSize:	dw	0	; Size of the current UMB being used   (paras)
 33300 000023AD 0000                    DevUMBFree:	dw	0	; Start of free are in the current UMB (paras)
 33301                                  ;
 33302 000023AF 00000000                DevXMSAddr:	dd	0
 33303                                  ;
 33304 000023B3 0000                    DevExecAddr:	dw	0	; Device load address parameter to Exec call
 33305 000023B5 0000                    DevExecReloc:	dw	0	; Device load relocation factor
 33306                                  ;
 33307 000023B7 00                      DeviceHi:	db	0	; Flag indicating whther the current device
 33308                                  				;  is being loaded into UMB
 33309 000023B8 0000                    DevSizeOption:	dw	0	; SIZE= option
 33310                                  ;
 33311 000023BA 00                      Int12Lied:	db	0	; did we trap int 12 ?
 33312 000023BB 0000                    OldInt12Mem:	dw	0	; value in 40:13h (int 12 ram)
 33313 000023BD 50524F544D414E24        ThreeComName:	db	'PROTMAN$'	; 3Com Device name
 33314                                  ;
 33315 000023C5 00                      FirstUMBLinked:	db	0
 33316 000023C6 0000                    DevDOSData:	dw	0	; segment of DOS Data
 33317 000023C8 00000000                DevCmdLine:	dd	0	; Current Command line
 33318 000023CC 00                      DevSavedDelim:	db	0	; The delimiter which was replaced with null
 33319                                  				; to use the file name in the command line
 33320                                  ;
 33321                                  ;	ifdef	dblspace_hooks
 33322                                  ;MagicHomeFlag:	db	0	; set non-zero when MagicDrv is final placed
 33323                                  ;	endif
 33324                                  
 33325                                  ; ===========================================================================
 33326                                  
 33327                                  ; 31/03/2019 - Retro DOS v4.0
 33328                                  
 33329                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33330                                  ; (SYSINIT:215Eh)
 33331                                  
 33332                                  ;----------------------------------------------------------------------------
 33333                                  ;
 33334                                  ; procedure : doconf
 33335                                  ;
 33336                                  ;             Config file is parsed initially with this routine. For the
 33337                                  ;             Subsequent passes 'multi_pass' entry is used .
 33338                                  ;
 33339                                  ;----------------------------------------------------------------------------
 33340                                  
 33341                                  	; 27/10/2022
 33342                                  doconf:
 33343 000023CD 0E                      	push	cs
 33344 000023CE 1F                      	pop	ds
 33345                                  
 33346 000023CF B80037                  	mov	ax,3700h
 33347                                          ;mov	ax,(CHAR_OPER<<8)	; get switch character
 33348 000023D2 CD21                    	int	21h
 33349 000023D4 8816[7A4A]              	mov	[command_line+1],dl	; set in default command line
 33350                                  
 33351                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21  IO.SYS)
 33352                                  ; 27/10/2022
 33353                                  ;;ifdef	MULTI_CONFIG
 33354                                  ;	;mov	[command_line-1],dl     ; save default switchchar
 33355 000023D8 8816[784A]              	mov	[def_swchr],dl ; 31/03/2019 
 33356                                  ;;endif	;MULTI_CONFIG
 33357                                  
 33358 000023DC BA[8F49]                	mov	dx,config ;'\CONFIG.SYS' ;now pointing to file description
 33359 000023DF B8003D                  	mov	ax,3D00h
 33360                                  	;mov	ax,OPEN<<8		;open file "config.sys"
 33361 000023E2 F9                      	stc				;in case of int 24
 33362 000023E3 CD21                    	int	21h			;function request
 33363 000023E5 7309                    	jnc	short noprob		; brif opened okay
 33364                                  
 33365                                  ; 31/12/2022
 33366                                  ; 27/10/2022
 33367                                  ;;ifdef	MULTI_CONFIG
 33368 000023E7 E8F918                  	call	kbd_read		; we still want to give the guy
 33369                                  ;					; a chance to select clean boot!
 33370                                  ;;endif					; (ie, no autoexec.bat processing)
 33371 000023EA C606[CD02]0B            	mov	byte [multi_pass_id],11	; set it to unreasonable number
 33372 000023EF C3                      	retn
 33373                                  noprob: 				;get file size (note < 64k!!)
 33374 000023F0 89C3                    	mov	bx,ax  ; File handle
 33375 000023F2 31C9                    	xor	cx,cx			; 0
 33376 000023F4 31D2                    	xor	dx,dx			; 0
 33377                                  	;mov	ax,4202h
 33378 000023F6 B80242                  	mov	ax,(LSEEK<<8)|2
 33379 000023F9 CD21                    	int	21h
 33380 000023FB A3[5603]                	mov	[count],ax		; dx:ax = file size ; 08/09/2023
 33381                                  					; 08/09/2023 - Erdogan Tan - Note:
 33382 000023FE 31D2                    	xor	dx,dx			; dx already must be 0 here ; 08/09/2023
 33383                                  					; I am not removing 'xor dx,dx' here
 33384                                  					; for MSDOS compatibility.
 33385                                  					; ((Also PCDOS 7.1 has 'xor dx,dx' here))
 33386                                  					; (Error will be same if CONGIG.SYS file
 33387                                  					;  size > 64KB) 
 33388                                  	;mov	ax,4200h
 33389 00002400 B80042                  	mov	ax,LSEEK<<8		;reset pointer to beginning of file
 33390 00002403 CD21                    	int	21h
 33391                                  
 33392                                  	; 31/12/2022 - Retro DOS v4.2 
 33393 00002405 8B16[A502]              	mov	dx,[ALLOCLIM]		;use current alloclim value
 33394                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33395                                  	;mov	dx,[top_of_cdss] 
 33396                                  
 33397 00002409 A1[5603]                	mov	ax,[count]
 33398 0000240C A3[D002]                	mov	[config_size],ax	;save the size of config.sys file.
 33399 0000240F E885EE                  	call	ParaRound
 33400 00002412 29C2                    	sub	dx,ax
 33401                                  
 33402                                  ; 31/12/2022
 33403                                  ; 27/10/2022
 33404                                  ;ifdef	MULTI_CONFIG
 33405                                  ;
 33406                                  ;  The size of the CONFIG.SYS workspace (for recreating the in-memory
 33407                                  ;  CONFIG.SYS image, and later for building the initial environment) need
 33408                                  ;  not be any larger than CONFIG.SYS itself, EXCEPT for the fact that
 33409                                  ;  we (may) add a variable to the environment that does not explicity appear
 33410                                  ;  in CONFIG.SYS, and that variable is CONFIG (as in CONFIG=COMMON).
 33411                                  ;  The default setting for CONFIG cannot result in more than 1 paragraph
 33412                                  ;  of extra space, so here we account for it (the worst case of course is
 33413                                  ;  when CONFIG.SYS is some very small size, like 0 -JTP)
 33414                                  ;
 33415 00002414 4A                      	dec	dx                      ;reserve 1 additional paragraph
 33416 00002415 8916[EE18]              	mov	[config_wrkseg],dx      ;this is the segment to be used for
 33417 00002419 29C2                    	sub	dx,ax                   ;rebuilding the config.sys memory image
 33418                                  ;;endif	;MULTI_CONFIG
 33419                                  
 33420 0000241B 83EA11                  	sub	dx,11h			;room for header
 33421                                  	
 33422                                  	; 31/12/2022
 33423 0000241E 8916[A502]              	mov	[ALLOCLIM],dx		;config starts here. new alloclim value.
 33424 00002422 8916[A302]              	mov	[CONFBOT],dx
 33425                                  	
 33426                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33427                                  	;mov	[top_of_cdss],dx
 33428                                  	;call    TempCDS 
 33429                                  	; 31/12/2022
 33430                                  	; 11/12/2022
 33431                                  	; ds <> cs 
 33432                                  	;mov	dx,[cs:top_of_cdss]
 33433                                  
 33434                                  	; 08/09/2023
 33435                                  	; ds = cs
 33436 00002426 8B0E[5603]              	mov	cx,[count]
 33437                                  	
 33438 0000242A 8EDA                    	mov	ds,dx
 33439 0000242C 8EC2                    	mov	es,dx
 33440                                  
 33441 0000242E 31D2                    	xor	dx,dx
 33442                                  	; 08/09/2023
 33443                                  	;mov	cx,[cs:count]
 33444 00002430 B43F                    	mov	ah,3Fh
 33445                                  	;mov	ah,READ  ; 3Fh
 33446 00002432 F9                      	stc				;in case of int 24
 33447 00002433 CD21                    	int	21h			;function request
 33448 00002435 9C                      	pushf
 33449                                  
 33450                                  ; find the eof mark in the file. if present,then trim length.
 33451                                  
 33452 00002436 50                      	push	ax
 33453 00002437 57                      	push	di
 33454 00002438 51                      	push	cx
 33455 00002439 B01A                    	mov	al,1Ah			; eof mark
 33456 0000243B 89D7                    	mov	di,dx			; point to buffer
 33457 0000243D E305                    	jcxz	puteol			; no chars
 33458 0000243F F2AE                    	repnz	scasb			; find end
 33459 00002441 7501                    	jnz	short puteol		; none found and count exhausted
 33460                                  
 33461                                  ; we found a 1a. back up
 33462                                  
 33463 00002443 4F                      	dec	di			; backup past 1Ah
 33464                                  
 33465                                  ;  just for the halibut, stick in an extra eol
 33466                                  
 33467                                  puteol:
 33468 00002444 B00D                    	mov	al,cr ; 0Dh
 33469 00002446 AA                      	stosb
 33470 00002447 B00A                    	mov	al,lf  ;0Ah
 33471 00002449 AA                      	stosb
 33472 0000244A 29D7                    	sub	di,dx			; difference moved
 33473                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33474                                  	;mov	[cs:count],di		; new count
 33475                                  
 33476                                  	; 11/12/2022	
 33477                                  	; 31/03/2019 - Retro DOS v4.0
 33478 0000244C 0E                      	push	cs
 33479 0000244D 1F                      	pop	ds
 33480                                  
 33481 0000244E 893E[5603]              	mov	[count],di		; new count
 33482                                  
 33483 00002452 59                      	pop	cx
 33484 00002453 5F                      	pop	di
 33485 00002454 58                      	pop	ax
 33486                                  
 33487                                  	; 11/12/2022
 33488                                  	; 27/10/2022
 33489                                  	;push	cs
 33490                                  	;pop	ds
 33491                                  
 33492 00002455 50                      	push	ax
 33493                                  	;mov	ah,CLOSE
 33494 00002456 B43E                    	mov	ah,3Eh
 33495 00002458 CD21                    	int	21h
 33496 0000245A 58                      	pop	ax
 33497 0000245B 9D                      	popf
 33498 0000245C 7204                    	jc	short conferr 		;if not we've got a problem
 33499 0000245E 39C1                    	cmp	cx,ax
 33500 00002460 742D                    	jz	short getcom		;couldn't read the file
 33501                                  conferr:
 33502 00002462 BA[8F49]                	mov	dx,config		;want to print config error
 33503 00002465 E87E24                  	call	badfil
 33504                                  ;endconv:	; 01/01/2023
 33505 00002468 C3                      	retn
 33506                                  
 33507                                  ;----------------------------------------------------------------------------
 33508                                  ;
 33509                                  ; entry : multi_pass
 33510                                  ;
 33511                                  ;             called to execute device=,install= commands
 33512                                  ;
 33513                                  ;----------------------------------------------------------------------------
 33514                                  
 33515                                  	; 27/10/2022
 33516                                  multi_pass:
 33517 00002469 0E                      	push	cs
 33518 0000246A 1F                      	pop	ds
 33519                                  
 33520 0000246B 803E[CD02]0A            	cmp	byte [multi_pass_id],10
 33521                                  ;jae_endconv:
 33522 00002470 731C                    	jae	short endconv 		; do nothing. just return.
 33523                                  
 33524                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33525 00002472 FF36[A302]              	push	word [CONFBOT]
 33526                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33527                                  	;push	word [top_of_cdss]
 33528 00002476 07                      	pop	es			; es -> confbot
 33529                                  
 33530 00002477 8B36[5803]              	mov	si,[org_count]
 33531 0000247B 8936[5603]              	mov	[count],si		; set count
 33532 0000247F 31F6                    	xor	si,si ; 0
 33533 00002481 8936[5A03]                      mov     [chrptr],si		; reset chrptr
 33534 00002485 8936[AF02]                      mov     [linecount],si		; reset linecount
 33535                                  
 33536 00002489 E8E121                  	call	getchr
 33537 0000248C EB07                    	jmp	short conflp
 33538                                  
 33539                                  	; 01/01/2023
 33540                                  endconv:
 33541 0000248E C3                      	retn	
 33542                                  
 33543                                  getcom:
 33544                                  	; 03/01/2023
 33545                                  	; ds = cs
 33546 0000248F E81816                          call    organize                ; organize the file
 33547 00002492 E8D821                  	call	getchr
 33548                                  conflp: 
 33549 00002495 72F7                    	jc	short endconv
 33550                                  
 33551 00002497 FF06[AF02]                      inc     word [linecount]	; increase linecount
 33552                                  
 33553                                  	; 08/09/2023
 33554 0000249B 30E4                    	xor	ah,ah ; 0
 33555                                  	;mov	byte [multdeviceflag],0	; reset multdeviceflag.
 33556                                  	;mov	byte [setdevmarkflag],0	; reset setdevmarkflag.
 33557 0000249D 8826[F218]              	mov	[multdeviceflag],ah ; 0
 33558 000024A1 8826[F518]              	mov	[setdevmarkflag],ah ; 0
 33559                                  
 33560 000024A5 3C0A                    	cmp	al,lf			; linefeed?
 33561 000024A7 7448                    	je	short blank_line	;  then ignore this line.
 33562                                  
 33563                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33564                                  ; (SYSINIT:23CCh)
 33565                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33566                                  ;%if 0
 33567                                  
 33568                                  ;ifdef	MULTI_CONFIG
 33569                                  
 33570                                  ;   If this is a genuine CONFIG.SYS command, then there should be a line
 33571                                  ;   number immediately following it....
 33572                                  
 33573 000024A9 A2[F018]                        mov     [config_cmd],al         ; save original command code
 33574                                  	;and	al,NOT CONFIG_OPTION_QUERY
 33575 000024AC 247F                    	and	al,~CONFIG_OPTION_QUERY ; and al,7Fh
 33576                                  
 33577                                  	; 08/09/2023
 33578 000024AE 3826[F118]              	cmp	[config_multi],ah ; 0
 33579                                  	;cmp	byte [config_multi],0	; is this a multi-config config.sys?
 33580 000024B2 7427                            je      short not_final		; no, line number is not embedded
 33581                                  
 33582 000024B4 50                              push    ax                      ;
 33583 000024B5 E8B521                          call    getchr                  ; ignore end-of-image errors,
 33584 000024B8 88C4                            mov     ah,al                   ; because if there's an error
 33585 000024BA E8B021                          call    getchr                  ; fetching the line number that's
 33586 000024BD 86C4                            xchg    al,ah                   ; supposed to be there, the next
 33587 000024BF A3[AF02]                        mov     [linecount],ax          ; getchr call will get the same error
 33588 000024C2 58                              pop     ax
 33589                                  ;
 33590                                  ;   HACK: when 4DOS.COM is the shell and it doesn't have an environment from
 33591                                  ;   which to obtain its original program name, it grovels through all of
 33592                                  ;   memory to find the filename that was used to exec it; it wants to find
 33593                                  ;   the SHELL= line in the in-memory copy of CONFIG.SYS, and it knows that
 33594                                  ;   sysinit converts the SHELL= keyword to an 'S', so it expects to find an 'S'
 33595                                  ;   immediately before the filename, but since we are now storing line # info
 33596                                  ;   in the config.sys memory image, 4DOS fails to find the 'S' in the right
 33597                                  ;   spot.
 33598                                  ;
 33599                                  ;   So, on the final pass of CONFIG.SYS, copy the command code (eg, 'S')
 33600                                  ;   over the line number info, since we no longer need that info anyway. This
 33601                                  ;   relies on the fact that getchr leaves ES:SI pointing to the last byte
 33602                                  ;   retrieved.
 33603                                  ;
 33604 000024C3 803E[CD02]02                    cmp	byte [multi_pass_id],2	; final pass?
 33605 000024C8 7211                            jb	short not_final		; no
 33606                                          ;test	word [install_flag],have_install_cmd
 33607 000024CA F606[CE02]01            	test	byte [install_flag],have_install_cmd ; 1
 33608 000024CF 7407                            jz	short final		; no install cmds, so yes it is
 33609 000024D1 803E[CD02]03                    cmp	byte [multi_pass_id],3	; final pass?
 33610 000024D6 7203                            jb	short not_final		; no
 33611                                  final:                                  ;
 33612 000024D8 268804                  	mov	[es:si],al		; save backward-compatible command code
 33613                                  not_final:                              ;
 33614                                  ;endif
 33615                                  
 33616                                  ; 31/12/2022
 33617                                  ;%endif ; 27/10/2022
 33618                                  
 33619 000024DB 88C4                    	mov	ah,al
 33620 000024DD E88D21                  	call	getchr
 33621 000024E0 7314                    	jnc	short tryi
 33622                                  
 33623 000024E2 803E[CD02]02            	cmp	byte [multi_pass_id],2
 33624                                  	;jae	short jae_endconv	; do not show badop again for multi_pass.
 33625                                  	; 27/10/2022
 33626 000024E7 73A5                    	jnb	short endconv	
 33627 000024E9 E95608                  	jmp	badop
 33628                                  	
 33629                                  coff:	
 33630                                  	; 11/12/2022
 33631                                  	; ds = cs
 33632                                  	;push	cs
 33633                                  	;pop	ds
 33634 000024EC E87521                  	call	newline
 33635 000024EF EBA4                    	jmp	short conflp	; 13/05/2019
 33636                                  
 33637                                  blank_line:
 33638 000024F1 E87921                  	call	getchr
 33639 000024F4 EB9F                    	jmp	short conflp
 33640                                  
 33641                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33642                                  ; 11/12/2022
 33643                                  ; (there is not a jump or call to here from anywhere!)
 33644                                  ;coff_p:
 33645                                  	;push	cs
 33646                                  	;pop	ds
 33647                                  
 33648                                  ;to handle install= commands,we are going to use multi-pass.
 33649                                  ;the first pass handles the other commands and only set install_flag when
 33650                                  ;it finds any install command. the second pass will only handle the
 33651                                  ;install= command.
 33652                                  
 33653                                  ;------------------------------------------------------------------------------
 33654                                  ;install command
 33655                                  ;------------------------------------------------------------------------------
 33656                                  
 33657                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33658                                  	; (SYSINIT:2250h)
 33659                                  tryi:
 33660 000024F6 803E[CD02]00            	cmp	byte [multi_pass_id],0	; the initial pass for DOS=HI
 33661 000024FB 7503                    	jne	short not_init_pass
 33662 000024FD E97F01                  	jmp	multi_try_doshi
 33663                                  not_init_pass:
 33664 00002500 803E[CD02]02            	cmp	byte [multi_pass_id],2	; the second pass was for ifs=
 33665                                          ; 11/12/2022
 33666                                  	;je	short multi_pass_coff2	; now it is NOPs
 33667 00002505 74E5                    	je	short coff
 33668                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33669                                  	;je	short multi_pass_coff	
 33670                                  					; This pass can be made use of if
 33671                                  					; we want do some config.sys process
 33672                                  					; after device drivers are loaded
 33673                                  					; and before install= commands
 33674                                  					; are processed
 33675                                  
 33676 00002507 803E[CD02]03            	cmp	byte [multi_pass_id],3	; the third pass for install= ?
 33677 0000250C 741D                    	je	short multi_try_i
 33678 0000250E 80FC48                          cmp     ah, CONFIG_DOS  ; 'H'
 33679                                  	; 11/12/2022
 33680                                  	;je	short multi_pass_coff2
 33681 00002511 74D9                    	je	short coff
 33682                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33683                                  	;je	short multi_pass_coff	
 33684                                  
 33685                                  ;       make note of any INSTALL= or INSTALLHIGH= commands we find,
 33686                                  ;       but don't process them now.        
 33687                                          
 33688 00002513 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I'	; install= command?
 33689                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33690 00002516 7507                    	jne	short precheck_installhigh ; the first pass is for normal operation.
 33691                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33692                                  	;jne	short tryb	
 33693                                  	
 33694                                  	;or	word [install_flag],have_install_cmd ; set the flag
 33695 00002518 800E[CE02]01            	or	byte [install_flag],have_install_cmd ; 1
 33696                                  multi_pass_coff2:
 33697 0000251D EBCD                    	jmp	short coff ; 13/05/2019	; and handles the next command
 33698                                  
 33699                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33700                                  ; (SYSINIT:2448h)
 33701                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33702                                  ;%if 0
 33703                                  precheck_installhigh:
 33704 0000251F 80FC57                  	cmp     ah,CONFIG_INSTALLHIGH ; 'W' ; signifier for INSTALLHIGH
 33705 00002522 756B                    	jne     short tryb		; carry on with normal processing
 33706                                  	;or	word [install_flag],have_install_cmd
 33707 00002524 800E[CE02]01            	or	byte [install_flag],have_install_cmd ; 1
 33708 00002529 EBC1                    	jmp	short coff
 33709                                  ;%endif ; 27/10/2022
 33710                                  
 33711                                  multi_try_i:
 33712 0000252B 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I' ; install= command?
 33713                                  	; 31/12/2022 - Retro DOS v4.2
 33714 0000252E 750A                    	jne	short multi_try_n	; no, check for installhigh
 33715                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33716                                  	;jne	short multi_pass_filter
 33717                                  
 33718                                  ; 31/12/2022
 33719                                  ;%if 1 
 33720                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33721                                  ;%if 0
 33722                                  ;ifdef	MULTI_CONFIG
 33723 00002530 E8A71F                  	call	query_user              ; query the user if config_cmd
 33724 00002533 7241                    	jc	short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 33725                                  ;endif
 33726                                  ;%endif ; 27/10/2022
 33727                                  
 33728 00002535 E8E1EC                  	call	do_install_exec 	;install it.
 33729 00002538 EBB2                    	jmp	short coff		;to handle next install= command.
 33730                                  
 33731                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33732                                  ; (SYSINIT:2463h)
 33733                                  ;%if 1
 33734                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33735                                  ;%if 0
 33736                                  
 33737                                  multi_try_n:
 33738 0000253A 80FC57                          cmp     ah,CONFIG_INSTALLHIGH   ; installhigh= command?
 33739 0000253D 7537                            jne	short multi_pass_filter	; no. ignore this.
 33740                                  ;ifdef	MULTI_CONFIG
 33741 0000253F E8981F                          call    query_user              ; query the user if config_cmd
 33742 00002542 7232                            jc      short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 33743                                  ;endif
 33744                                  
 33745                                  ;       The memory environment is in its normal DOS state, so do
 33746                                  ;       the standard calls to set the alloc strategy for loading high
 33747                                  
 33748 00002544 B80058                  	mov	ax,(ALLOCOPER<<8)|0 ; 5800h
 33749 00002547 CD21                    	int	21h			;get alloc strategy
 33750 00002549 89C3                    	mov	bx,ax
 33751 0000254B 53                              push    bx                      ; save for the return
 33752                                  
 33753 0000254C 81CB8000                        or	bx,HIGH_FIRST  ; 80h	;set alloc to HighFirst
 33754 00002550 B80158                  	mov	ax,(ALLOCOPER<<8)|1 ; 5801h
 33755 00002553 CD21                    	int	21h			;set alloc strategy
 33756                                  
 33757 00002555 B80258                  	mov     ax,(ALLOCOPER<<8)|2 ; 5802h
 33758 00002558 CD21                            int     21h                     ; get link state
 33759 0000255A 30E4                            xor     ah,ah                   ; clear top byte
 33760 0000255C 50                              push    ax                      ; save for return
 33761                                  
 33762 0000255D B80358                          mov	ax,(ALLOCOPER<<8)|3 ; 5803h
 33763 00002560 BB0100                  	mov	bx,1
 33764 00002563 CD21                    	int	21h			;link in UMBs
 33765                                  
 33766 00002565 E8B1EC                  	call	do_install_exec 	;install it.
 33767                                  
 33768 00002568 B80358                          mov     ax,(ALLOCOPER<<8)|3
 33769 0000256B 5B                              pop     bx                      ; recover original link state
 33770 0000256C CD21                            int     21h
 33771 0000256E 5B                              pop     bx                      ; recover original alloc strategy
 33772 0000256F B80158                          mov     ax,(ALLOCOPER<<8)|1
 33773 00002572 CD21                            int     21h
 33774                                  
 33775                                  	;jmp	short coff		;to handle next install= command.
 33776                                  	; 01/01/2023
 33777 00002574 EBA7                    	jmp	short multi_pass_coff2
 33778                                  
 33779                                  ;%endif ; 27/10/2022
 33780                                  
 33781                                  multi_pass_filter:
 33782 00002576 80FC59                          cmp     ah,CONFIG_COMMENT ; 'Y' ; comment?
 33783 00002579 740A                    	je	short multi_pass_adjust
 33784 0000257B 80FC5A                          cmp     ah,CONFIG_UNKNOWN ; 'Z' ; bad command?
 33785 0000257E 7405                    	je	short multi_pass_adjust
 33786 00002580 80FC30                          cmp     ah,CONFIG_REM  ; '0' 	; rem?
 33787 00002583 7508                    	jne	short multi_pass_coff 	; ignore the rest of the commands.
 33788                                  
 33789                                  multi_pass_adjust:			; these commands need to
 33790 00002585 FF0E[5A03]              	dec	word [chrptr]		;  adjust chrptr,count
 33791 00002589 FF06[5603]              	inc	word [count]		;  for newline proc.
 33792                                  
 33793                                  multi_pass_coff:
 33794                                  	; 11/12/2022
 33795                                  	;jmp	short coff		; to handle next install= commands.
 33796                                  	; 01/01/2023
 33797 0000258D EB8E                    	jmp	short multi_pass_coff2
 33798                                  
 33799                                  ;------------------------------------------------------------------------------
 33800                                  ; buffer command
 33801                                  ;------------------------------------------------------------------------------
 33802                                  
 33803                                  ;******************************************************************************
 33804                                  ;									      *
 33805                                  ; function: parse the parameters of buffers= command.			      *
 33806                                  ;									      *
 33807                                  ; input :								      *
 33808                                  ;	es:si -> parameters in command line.				      *
 33809                                  ; output:								      *
 33810                                  ;	buffers set							      *
 33811                                  ;	buffer_slash_x	flag set if /x option chosen.			      *
 33812                                  ;	h_buffers set if secondary buffer cache specified.		      *
 33813                                  ;									      *
 33814                                  ; subroutines to be called:						      *
 33815                                  ;	sysinit_parse							      *
 33816                                  ; logic:								      *
 33817                                  ; {									      *
 33818                                  ;	set di points to buf_parms;  /*parse control definition*/	      *
 33819                                  ;	set dx,cx to 0; 						      *
 33820                                  ;	reset buffer_slash_x;						      *
 33821                                  ;	while (end of command line)					      *
 33822                                  ;	{ sysinit_parse;						      *
 33823                                  ;	  if (no error) then						      *
 33824                                  ;	       if (result_val._$P_synonym_ptr == slash_e) then /*not a switch *
 33825                                  ;		    buffer_slash_x = 1					      *
 33826                                  ;	       else if	 (cx == 1) then 	    /* first positional */    *
 33827                                  ;			  buffers = result_val._$P_picked_val;		      *
 33828                                  ;		    else  h_buffers = result_val._$P_picked_val; 	      *
 33829                                  ;	  else	{show error message;error exit} 			      *
 33830                                  ;	};								      *
 33831                                  ;	if (buffer_slash_x is off & buffers > 99) then show_error;	      *
 33832                                  ; };									      *
 33833                                  ;									      *
 33834                                  ;******************************************************************************
 33835                                  
 33836                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33837                                  	; (SYSINIT:229Ch)
 33838                                  tryb:
 33839 0000258F 80FC42                          cmp     ah,CONFIG_BUFFERS ; 'B'
 33840 00002592 755C                    	jne	short tryc
 33841                                  
 33842                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33843                                  ; (SYSINIT:24BFh)
 33844                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33845                                  ;%if 0
 33846                                  ;ifdef	MULTI_CONFIG
 33847 00002594 E8431F                  	call	query_user		; query the user if config_cmd
 33848 00002597 7257                    	jc	short tryc		; has the CONFIG_OPTION_QUERY bit set
 33849                                  ;endif
 33850                                  ;%endif ; 27/10/2022
 33851                                  
 33852                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33853                                  	; 18/12/2022
 33854 00002599 31C9                    	xor	cx,cx
 33855                                  	;mov	byte [p_buffer_slash_x],0 ; 31/03/2019
 33856 0000259B 880E[A921]              	mov	[p_buffer_slash_x],cl ; 0
 33857                                  
 33858 0000259F BF[6221]                	mov	di,buf_parms
 33859                                  	;xor	cx,cx	; 18/12/2022
 33860                                  	; 03/01/2023
 33861                                  	;mov	dx,cx
 33862                                  do7:
 33863 000025A2 E87E07                  	call	sysinit_parse
 33864 000025A5 7303                    	jnc	short if7		; parse error,
 33865                                  	;call	badparm_p		;  and show messages and end the search loop.
 33866                                  	;;jmp	short sr7
 33867                                  	; 31/12/2022
 33868                                  ;sr7:
 33869                                  	;jmp	coff
 33870                                  	; 03/01/2023
 33871 000025A7 E9A806                  	jmp	badparm_p_coff
 33872                                  if7:
 33873 000025AA 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 33874 000025AD 741A                    	je	short en7		;  then jmp to $endloop for semantic check
 33875                                  	;cmp	word [result_val_swoff],switch_x
 33876 000025AF 813E[AD21][A221]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],switch_x
 33877                                  	;jne	short if11
 33878                                  	; 31/12/2022
 33879 000025B5 74EB                    	je	short do7 ;je short en11
 33880                                  
 33881                                  ;	mov	byte [p_buffer_slash_x],1 ; set the flag M016
 33882                                  	;jmp	short en11 ; 31/12/2022
 33883                                  if11:
 33884                                  	;mov	ax,[rv_dword]
 33885 000025B7 A1[AF21]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 33886 000025BA 83F901                  	cmp	cx,1
 33887 000025BD 7505                    	jne	short if13
 33888                                  
 33889 000025BF A3[A521]                	mov	[p_buffers],ax
 33890                                  	;jmp	short en11
 33891                                  	; 31/12/2022
 33892 000025C2 EBDE                    	jmp	short do7
 33893                                  if13:
 33894 000025C4 A3[A721]                	mov	[p_h_buffers],ax
 33895                                  en11:
 33896 000025C7 EBD9                    	jmp	short do7
 33897                                  en7:
 33898 000025C9 833E[A521]63            	cmp	word [p_buffers],99
 33899 000025CE 760B                    	jbe	short if18
 33900                                  
 33901                                  ;	cmp	byte [p_buffer_slash_x],0 ; M016
 33902                                  ;	jne	short if18
 33903                                  
 33904 000025D0 E87B07                  	call	badparm_p
 33905 000025D3 C706[A721]0000          	mov	word [p_h_buffers],0
 33906 000025D9 EB12                    	jmp	short sr7
 33907                                  if18:
 33908 000025DB A1[A521]                	mov	ax,[p_buffers]	; we don't have any problem.
 33909 000025DE A3[9902]                	mov	[buffers],ax	; now,let's set it really.
 33910                                  
 33911 000025E1 A1[A721]                	mov	ax,[p_h_buffers]
 33912 000025E4 A3[9B02]                	mov	[h_buffers],ax
 33913                                  
 33914                                  ;	mov	al,[p_buffer_slash_x]	; M016
 33915                                  ;	mov	[buffer_slash_x],al
 33916                                  
 33917 000025E7 A1[AF02]                	mov	ax,[linecount]
 33918 000025EA A3[B902]                	mov	[buffer_linenum],ax ; save the line number for the future use.
 33919                                  	; 31/12/2022
 33920                                  	;jmp	short sr7
 33921                                  	; 03/01/2023
 33922                                  sr7:
 33923 000025ED E9FCFE                  	jmp	coff
 33924                                  
 33925                                  ;------------------------------------------------------------------------------
 33926                                  ; break command
 33927                                  ;------------------------------------------------------------------------------
 33928                                  
 33929                                  ;****************************************************************************
 33930                                  ;									    *
 33931                                  ; function: parse the parameters of break = command.			    *
 33932                                  ;									    *
 33933                                  ; input :								    *
 33934                                  ;	es:si -> parameters in command line.				    *
 33935                                  ; output:								    *
 33936                                  ;	turn the control-c check on or off.				    *
 33937                                  ;									    *
 33938                                  ; subroutines to be called:						    *
 33939                                  ;	sysinit_parse							    *
 33940                                  ; logic:								    *
 33941                                  ; {									    *
 33942                                  ;	set di to brk_parms;						    *
 33943                                  ;	set dx,cx to 0; 						    *
 33944                                  ;	while (end of command line)					    *
 33945                                  ;	{ sysinit_parse;						    *
 33946                                  ;	  if (no error) then						    *
 33947                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */ *
 33948                                  ;		   set p_ctrl_break,on;					    *
 33949                                  ;	       else					  /*off 	 */ *
 33950                                  ;		   set p_ctrl_break,off;				    *
 33951                                  ;	  else {show message;error_exit};				    *
 33952                                  ;	};								    *
 33953                                  ;	if (no error) then						    *
 33954                                  ;	   dos function call to set ctrl_break check according to	    *
 33955                                  ; };									    *
 33956                                  ;									    *
 33957                                  ;****************************************************************************
 33958                                  
 33959                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33960                                  	; (SYSINIT:22FFh)
 33961                                  tryc:
 33962 000025F0 80FC43                          cmp     ah,CONFIG_BREAK ; 'C'
 33963 000025F3 7539                    	jne	short trym
 33964                                  
 33965                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33966                                  ; (SYSINIT:2527h)
 33967                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33968                                  ;%if 0
 33969                                  ;ifdef	MULTI_CONFIG
 33970 000025F5 E8E21E                  	call	query_user              ; query the user if config_cmd
 33971 000025F8 7234                    	jc	short trym		; has the CONFIG_OPTION_QUERY bit set
 33972                                  ;endif
 33973                                  ;%endif ; 27/10/2022
 33974                                  
 33975 000025FA BF[B321]                	mov	di,brk_parms
 33976 000025FD 31C9                    	xor	cx,cx
 33977                                  	; 03/01/2023
 33978                                  	;mov	dx,cx
 33979                                  do22:
 33980 000025FF E82107                  	call	sysinit_parse
 33981 00002602 7303                    	jnc	short if22		; parse error
 33982                                  	;call	badparm_p		;  show message and end the search loop.
 33983                                  	;;jmp	short sr22
 33984                                  	; 31/12/2022
 33985                                  ;sr22:
 33986                                  	;jmp	coff
 33987                                  	; 03/01/2023
 33988 00002604 E94B06                  	jmp	badparm_p_coff
 33989                                  if22:
 33990 00002607 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 33991 0000260A 7415                    	je	short en22		; then end the $endloop
 33992                                  
 33993                                  	;cmp	byte [result_val_itag],1
 33994 0000260C 803E[AC21]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 33995 00002611 7507                    	jne	short if26
 33996                                  
 33997 00002613 C606[D821]01            	mov	byte [p_ctrl_break],1	; turn it on
 33998                                  	;jmp	short en26
 33999                                  	; 31/12/2022
 34000 00002618 EBE5                    	jmp	short do22
 34001                                  if26:
 34002 0000261A C606[D821]00            	mov	byte [p_ctrl_break],0	; turn it off
 34003                                  en26:
 34004 0000261F EBDE                    	jmp	short do22		; we actually set the ctrl break
 34005                                  en22:
 34006 00002621 B433                    	mov	ah,SET_CTRL_C_TRAPPING ; if we don't have any parse error.
 34007 00002623 B001                    	mov	al,1
 34008 00002625 8A16[D821]              	mov	dl,[p_ctrl_break]
 34009 00002629 CD21                    	int	21h
 34010                                  	; 31/12/2022
 34011                                  	;jmp	short sr22
 34012                                  	; 03/01/2023
 34013                                  sr22:
 34014 0000262B E9BEFE                  	jmp	coff
 34015                                  
 34016                                  ;------------------------------------------------------------------------------
 34017                                  ; multitrack command
 34018                                  ;------------------------------------------------------------------------------
 34019                                  
 34020                                  ;******************************************************************************
 34021                                  ;									      *
 34022                                  ; function: parse the parameters of multitrack= command.		      *
 34023                                  ;									      *
 34024                                  ; input :								      *
 34025                                  ;	es:si -> parameters in command line.				      *
 34026                                  ; output:								      *
 34027                                  ;	turn multrk_flag on or off.					      *
 34028                                  ;									      *
 34029                                  ; subroutines to be called:						      *
 34030                                  ;	sysinit_parse							      *
 34031                                  ; logic:								      *
 34032                                  ; {									      *
 34033                                  ;	set di to brk_parms;						      *
 34034                                  ;	set dx,cx to 0; 						      *
 34035                                  ;	while (end of command line)					      *
 34036                                  ;	{ sysinit_parse;						      *
 34037                                  ;	  if (no error) then						      *
 34038                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */   *
 34039                                  ;		   set p_mtrk,on;					      *
 34040                                  ;	       else					  /*off 	 */   *
 34041                                  ;		   set p_mtrk,off;					      *
 34042                                  ;	  else {show message;error_exit};				      *
 34043                                  ;	};								      *
 34044                                  ;	if (no error) then						      *
 34045                                  ;	   dos function call to set multrk_flag according to p_mtrk.	      *
 34046                                  ;									      *
 34047                                  ; };									      *
 34048                                  ;									      *
 34049                                  ;******************************************************************************
 34050                                  
 34051                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 34052                                  trym:
 34053 0000262E 80FC4D                          cmp     ah,CONFIG_MULTITRACK  ; 'M'
 34054 00002631 7573                    	jne	short tryu
 34055                                  
 34056                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34057                                  ; (SYSINIT:2569h)
 34058                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34059                                  ;%if 0
 34060                                  ;ifdef	MULTI_CONFIG
 34061 00002633 E8A41E                  	call	query_user      ; query the user if config_cmd
 34062 00002636 726E                    	jc	short tryu	; has the CONFIG_OPTION_QUERY bit set
 34063                                  ;endif
 34064                                  ;%endif	; 27/10/2022
 34065                                  
 34066 00002638 BF[B722]                	mov	di,mtrk_parms
 34067 0000263B 31C9                    	xor	cx,cx
 34068                                  	; 03/01/2023
 34069                                  	;mov	dx,cx
 34070                                  do31:
 34071 0000263D E8E306                  	call	sysinit_parse
 34072 00002640 7303                    	jnc	short if31	; parse error
 34073                                  	;call	badparm_p	;  show message and end the search loop.
 34074                                  	;;jmp	short sr31
 34075                                  	; 31/12/2022
 34076                                  ;sr31:
 34077                                  	;jmp	coff
 34078                                  	; 03/01/2023
 34079 00002642 E90D06                  	jmp	badparm_p_coff
 34080                                  if31:
 34081 00002645 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 34082 00002648 7415                    	je	short en31	; then end the $endloop
 34083                                  
 34084                                  	;cmp	byte [result_val_itag],1
 34085 0000264A 803E[AC21]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 34086 0000264F 7507                    	jne	short if35
 34087                                  
 34088 00002651 C606[CB22]01            	mov	byte [p_mtrk],1	; turn it on temporarily.
 34089                                  	;jmp	short en35
 34090                                  	; 31/12/2022
 34091 00002656 EBE5                    	jmp	short do31
 34092                                  if35:
 34093 00002658 C606[CB22]00            	mov	byte [p_mtrk],0	; turn it off temporarily.
 34094                                  en35:
 34095 0000265D EBDE                    	jmp	short do31	; we actually set the multrk_flag here
 34096                                  en31:
 34097 0000265F 1E                      	push	ds
 34098                                  	;;mov	ax,Bios_Data ; 70h
 34099                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 34100                                  	; 21/10/2022
 34101 00002660 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 34102 00002663 8ED8                    	mov	ds,ax
 34103                                  
 34104 00002665 2E803E[CB22]00          	cmp	byte [cs:p_mtrk],0
 34105 0000266B 7508                    	jne	short if39
 34106                                  
 34107 0000266D C706[A004]0100          	mov	word [multrk_flag],multrk_off2	; 0001h
 34108 00002673 EB06                    	jmp	short en39
 34109                                  if39:
 34110 00002675 C706[A004]8000          	mov	word [multrk_flag],multrk_on	; 0080h
 34111                                  en39:
 34112 0000267B 1F                      	pop	ds
 34113                                  	; 31/12/2022
 34114                                  	;jmp	short sr31
 34115                                  	; 03/01/2023
 34116                                  sr31:
 34117 0000267C E96DFE                  	jmp	coff
 34118                                  
 34119                                  ;----------------------------------------------------------------------------
 34120                                  ; DOS=HIGH/LOW command
 34121                                  ;----------------------------------------------------------------------------
 34122                                  
 34123                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 34124                                  multi_try_doshi:
 34125 0000267F 80FC48                          cmp     ah,CONFIG_DOS ; 'H'
 34126 00002682 7403                    	je	short it_is_h
 34127                                  skip_it:
 34128 00002684 E9EFFE                  	jmp	multi_pass_filter
 34129                                  it_is_h:				; M003 - removed initing DevUMB
 34130                                  					;	 & runhigh
 34131                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34132                                  ; (SYSINIT:25C1h)
 34133                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34134                                  ;%if 0
 34135                                  ;ifdef	MULTI_CONFIG
 34136 00002687 E8501E                  	call	query_user              ; query the user if config_cmd
 34137 0000268A 72F8                    	jc	short skip_it		; has the CONFIG_OPTION_QUERY bit set
 34138                                  ;endif
 34139                                  ;%endif ; 27/10/2022
 34140                                  
 34141 0000268C BF[1E23]                	mov	di,dos_parms
 34142 0000268F 31C9                    	xor	cx,cx
 34143                                  	; 03/01/2023
 34144                                  	;mov	dx,cx
 34145                                  h_do_parse:
 34146 00002691 E88F06                  	call	sysinit_parse
 34147 00002694 7303                    	jnc	short h_parse_ok	; parse error
 34148                                  h_badparm:
 34149                                  	; 03/01/2023
 34150                                  	;call	badparm_p		; show message and end the search loop.
 34151                                  	;;jmp	short h_end
 34152                                  	; 11/12/2022
 34153                                  ;h_end:
 34154                                  	;jmp	coff
 34155                                  	; 03/01/2023
 34156 00002696 E9B905                  	jmp	badparm_p_coff	
 34157                                  h_parse_ok:
 34158 00002699 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 34159 0000269C 7405                    	je	short h_end		; then end the $endloop
 34160 0000269E E80407                  	call	ProcDOS
 34161 000026A1 EBEE                    	jmp	short h_do_parse
 34162                                  	; 11/12/2022
 34163                                  	; 03/01/2023
 34164                                  h_end:
 34165 000026A3 E946FE                  	jmp	coff
 34166                                  
 34167                                  ;-----------------------------------------------------------------------------
 34168                                  ; devicehigh command
 34169                                  ;-----------------------------------------------------------------------------
 34170                                  
 34171                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 34172                                  tryu:
 34173 000026A6 80FC55                          cmp     ah,CONFIG_DEVICEHIGH ; 'U'
 34174 000026A9 7553                    	jne	short tryd
 34175                                  
 34176                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34177                                  ; (SYSINIT:25E9h)
 34178                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34179                                  ;%if 0
 34180                                  ;ifdef	MULTI_CONFIG
 34181 000026AB E82C1E                  	call	query_user              ; query the user if config_cmd
 34182 000026AE 724E                    	jc	short tryd		; has the CONFIG_OPTION_QUERY bit set
 34183                                  ;endif
 34184                                  ;%endif ; 28/10/2022
 34185                                  
 34186                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34187                                  ;%if 0
 34188                                  	; 01/01/2023
 34189                                  	; ds = cs
 34190                                  
 34191 000026B0 E88907                  	call	InitVar
 34192 000026B3 E85D0F                  	call	ParseSize		; process the size= option
 34193                                  	;jnc	short tryu_0
 34194                                  	; 31/12/2022
 34195 000026B6 720C                    	jc	short tryu_1 ; 31/03/2019 - Retro DOS v4.0
 34196                                  
 34197                                  ;%endif ; 28/10/2022
 34198                                  
 34199                                  ; 31/12/2022
 34200                                  %if 0
 34201                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34202                                  	;mov	[cs:badparm_off], si	; stash it there in case of an error
 34203                                  	;mov	[cs:badparm_seg], es
 34204                                  	; 11/12/2022
 34205                                  	; ds = cs
 34206                                  	mov	[badparm_off], si
 34207                                  	mov	[badparm_seg], es
 34208                                  
 34209                                  	; 31/12/2022
 34210                                  	;call	ParseSize
 34211                                  	;jnc	short tryu_2	; 28/10/2022
 34212                                  	
 34213                                  	;call	badparm_p
 34214                                  	;jmp	coff
 34215                                  	; 03/01/2023
 34216                                  	jmp	badparm_p_coff
 34217                                  %endif
 34218                                  
 34219                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34220                                  ; (SYSINIT:2606h)
 34221                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34222                                  ;%if 0
 34223                                  tryu_0:
 34224                                  	;mov	ax,[cs:DevSizeOption]
 34225                                  	; 31/12/2022
 34226 000026B8 A1[B823]                	mov	ax,[DevSizeOption] ; ds = cs
 34227 000026BB 09C0                    	or	ax,ax
 34228 000026BD 7510                    	jnz	short tryu_2
 34229                                  
 34230 000026BF E80C08                  	call	ParseVar
 34231 000026C2 730B                    	jnc	short tryu_2
 34232                                  tryu_1:
 34233                                  	; 31/12/2022
 34234                                  	; ds = cs
 34235 000026C4 8936[F718]              	mov	[badparm_off], si
 34236 000026C8 8C06[F918]              	mov	[badparm_seg], es
 34237                                  	;mov	[cs:badparm_off], si	; If ParseVar up there failed, then
 34238                                  	;mov	[cs:badparm_seg], es	; ES:SI points to its problem area...
 34239                                  	
 34240                                  	;call	badparm_p		; so all we have to do is choke and
 34241                                  	;jmp	coff			; die, rather verbosely.
 34242                                  	; 03/01/2023
 34243 000026CC E98305                  	jmp	badparm_p_coff
 34244                                  
 34245                                  ;%endif ; 28/10/2022
 34246                                  
 34247                                  tryu_2:	
 34248 000026CF 56                      	push	si
 34249 000026D0 06                      	push	es
 34250                                  
 34251                                  	; 08/09/2023 - Retro DOS 4.2 IO.SYS (Optimization)
 34252                                  	; MSDOS 6.21 IO.SYS - SYSINIT:2623h
 34253                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:2B17h
 34254                                  tryu_3:
 34255 000026D1 268A04                  	mov	al,[es:si]
 34256 000026D4 3C0D                    	cmp	al,cr
 34257 000026D6 740C                    	je	short tryu_4
 34258                                  	; 08/09/2023 - Retro DOS 5.0 (PCDOS 7.1 IBMBIO.COM)
 34259                                  	;je	short tryu_5
 34260 000026D8 3C0A                    	cmp	al,lf
 34261 000026DA 7408                    	je	short tryu_4
 34262 000026DC E8691F                  	call	delim
 34263 000026DF 7403                    	jz	short tryu_4
 34264 000026E1 46                      	inc	si
 34265 000026E2 EBED                    	jmp	short tryu_3
 34266                                  
 34267                                  	; 08/09/2023 - Retro DOS 5.0 (PCDOS 7.1 IBMBIO.COM)
 34268                                  ;tryu_5:
 34269                                  ;	mov     al, 20h ; ' '   ; blank instead of cr
 34270                                  
 34271                                  tryu_4:	
 34272                                  	; 11/12/2022
 34273                                  	; ds = cs
 34274 000026E4 A2[CC23]                	mov	[DevSavedDelim],al
 34275                                  	;mov	[cs:DevSavedDelim],al	; Save the delimiter before replacing
 34276                                  					;  it with null
 34277                                  	; 18/12/2022
 34278 000026E7 29DB                    	sub	bx,bx
 34279 000026E9 26881C                  	mov	[es:si],bl ; 0
 34280                                   	;mov	byte [es:si],0
 34281                                  
 34282 000026EC 07                      	pop	es
 34283 000026ED 5E                      	pop	si
 34284 000026EE 5E                      	pop	si
 34285                                  
 34286                                  ;------------------------------------------------------------------------------
 34287                                  ; BEGIN PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 34288                                  ;------------------------------------------------------------------------------
 34289                                  
 34290                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34291                                  ; (SYSINIT:2642h)
 34292                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34293                                  ;%if 0
 34294                                  ; 10/07/2023 - Retro DOS v4.2 IO.SYS (optimized)
 34295                                  ; MSDOS 6.21 IO.SYS - SYSINIT:2642h
 34296                                  %if 1
 34297                                  	; 01/01/2023
 34298                                  	; ds = cs
 34299 000026EF E8490C                  	call	UmbTest			; See if UMBs are around...
 34300                                  	; 01/01/2023
 34301                                  	;jnc	short NrmTst		; ...yep. So do that normal thang.
 34302                                  	
 34303                                  	;mov	byte [cs:DeviceHi],0	; ...nope... so load low.
 34304                                  	; 31/12/2022
 34305                                  	; ds = cs, bx = 0
 34306                                  	;mov	byte [DeviceHi],bl ; 0
 34307                                  	;jmp	short LoadDevice
 34308                                  	; 01/01/2023
 34309 000026F2 7222                    	jc	short LoadDevice ; bl = 0
 34310                                  %endif
 34311                                  ;%endif
 34312                                  ;------------------------------------------------------------------------------
 34313                                  ; END PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 34314                                  ;------------------------------------------------------------------------------
 34315                                  
 34316                                  NrmTst:
 34317                                  	; 11/12/2022
 34318                                  	; ds = cs
 34319                                  	;;mov	byte [cs:DeviceHi],0
 34320                                  	;mov	byte [DeviceHi],0
 34321                                  	; 18/12/2022
 34322                                  	; bx = 0
 34323 000026F4 381E[A823]              	cmp	[DevUMB],bl ; 0
 34324                                  	;cmp	byte [DevUMB],0
 34325                                  	;;cmp	byte [cs:DevUMB],0	; do we support UMBs
 34326 000026F8 741C                    	je	short LoadDevice	; no, we don't
 34327                                  	;mov	byte [cs:DeviceHi],1
 34328                                  	; 11/12/2022
 34329                                  	;mov	byte [DeviceHi],1
 34330                                  	; 18/12/2022
 34331 000026FA FEC3                    	inc	bl ; mov bl,1 ; (*)
 34332                                  	; 11/12/2022
 34333                                  	;jmp	short LoadDevice2	; 11/12/2022
 34334 000026FC EB18                    	jmp	short LoadDevice
 34335                                  
 34336                                  ;------------------------------------------------------------------------------
 34337                                  ; device command
 34338                                  ;------------------------------------------------------------------------------
 34339                                  
 34340                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34341                                  	; (SYSINIT:2665h)
 34342                                  
 34343                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 34344                                  	; (SYSINIT:2401h)
 34345                                  tryd:
 34346                                  	; 11/12/2022
 34347                                  	;xor 	bx,bx ; 31/12/2022
 34348                                  	;
 34349 000026FE 80FC44                          cmp     ah,CONFIG_DEVICE ; 'D'
 34350 00002701 7403                    	je	short gotd
 34351                                  skip_it2:
 34352 00002703 E99302                  	jmp	tryq
 34353                                  gotd:
 34354                                  
 34355                                  ; 31/12/2022 - Retro DOS v4.2
 34356                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34357                                  ;%if 0
 34358                                  ;ifdef	MULTI_CONFIG
 34359 00002706 E8D11D                  	call	query_user              ; query the user if config_cmd
 34360 00002709 72F8                    	jc	short skip_it2		; has the CONFIG_OPTION_QUERY bit set
 34361                                  ;endif
 34362                                  ;%endif ; 28/10/2022
 34363                                  
 34364                                  	; 31/12/2022
 34365 0000270B 29DB                    	sub	bx,bx
 34366                                  	; bx = 0
 34367                                  	; 11/12/2022
 34368                                  	; ds = cs
 34369                                  	;mov	byte [DeviceHi],0
 34370                                  	;mov	word [DevSizeOption],0
 34371 0000270D 891E[B823]              	mov	[DevSizeOption],bx ; 0
 34372 00002711 C606[CC23]20            	mov	byte [DevSavedDelim],' '
 34373                                  	;mov	byte [cs:DeviceHi],0	; not to be loaded in UMB ;M007
 34374                                  	;mov	word [cs:DevSizeOption],0
 34375                                  	;mov	byte [cs:DevSavedDelim],' ' ; In case of DEVICE= the null has to
 34376                                  					;  be replaced with a ' '
 34377                                  LoadDevice:                             ; device= or devicehigh= command.
 34378                                  	; 11/12/2022
 34379                                  	;mov	byte [DeviceHi],0
 34380 00002716 881E[B723]              	mov	byte [DeviceHi],bl	; 0 or 1 (*)
 34381                                  LoadDevice2:
 34382                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)        
 34383                                  	;
 34384                                  	;push    cs
 34385                                          ;pop     ds
 34386                                  	;
 34387                                  	;mov	[bpb_addr],si		; pass the command line to the dvice
 34388                                  	;mov	[bpb_addr+2],es
 34389                                  	;
 34390                                  	;mov	[DevCmdLine],si		; save it for ourself
 34391                                  	;mov	[DevCmdLine+2],es
 34392                                  	;
 34393                                  	;mov	byte [driver_units],0	; clear total block units for driver	
 34394                                  
 34395                                  	; 11/12/2022
 34396                                  	; ds = cs
 34397                                  	;mov	bx,cs
 34398                                  	;mov	ds,bx
 34399                                  
 34400                                  	;mov	[cs:bpb_addr],si	; pass the command line to the dvice
 34401 0000271A 8936[8103]              	mov	[bpb_addr],si
 34402                                  	;mov	[cs:bpb_addr+2],es
 34403 0000271E 8C06[8303]              	mov	[bpb_addr+2],es
 34404                                  
 34405                                  	;mov	[cs:DevCmdLine],si	; save it for ourself
 34406 00002722 8936[C823]              	mov	[DevCmdLine],si
 34407                                  	;mov	[cs:DevCmdLine+2],es	
 34408 00002726 8C06[CA23]              	mov	[DevCmdLine+2],es
 34409                                  
 34410                                  	; 31/12/2022 - Retro DOS v4.2
 34411 0000272A C606[F618]00            	mov	byte [driver_units],0	; clear total block units for driver	
 34412                                  
 34413 0000272F E87E1F                  	call	round
 34414                                  	
 34415 00002732 E8EA0D                  	call	SizeDevice
 34416 00002735 723F                    	jc	short BadFile
 34417                                  
 34418                                  	; 11/12/2022
 34419                                  	; ds = cs
 34420                                  
 34421                                  ; - Begin DeviceHigh primary logic changes ------------------------------------
 34422                                  
 34423                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34424                                  ; (SYSINIT:26A4h)
 34425                                  
 34426                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34427                                  ;%if 0
 34428 00002737 C606[A723]01            	mov	byte [ConvLoad],1	; Doesn't matter if DeviceHi==0
 34429                                  
 34430                                  	; 22/07/2023
 34431                                  	;mov	al,[DeviceHi]		; If not using upper memory,
 34432 0000273C 800E[B723]00            	or	byte [DeviceHi],0	; Skip all this and go on to
 34433                                  	; 10/07/2023
 34434                                  	;or	al,al
 34435 00002741 741E                    	jz	short DevConvLoad	; the actual load.
 34436                                  
 34437                                  	;call	GetLoadUMB		; Returns first UMB spec'ed in AX
 34438 00002743 A0[6523]                	mov	al,[UmbLoad]	; 19/04/2019 - Retro DOS v4.0
 34439                                  
 34440 00002746 3CFF                    	cmp	al,-1			; If umb0 not specified, it's old style
 34441 00002748 7417                    	jz	short DevConvLoad	; so load high even if SIZE= is smaller
 34442                                  
 34443 0000274A FE0E[A723]              	dec	byte [ConvLoad] ; 0 	; They specified /L, so use new loader
 34444                                  
 34445 0000274E E8B209                  	call	GetLoadSize		; Returns size of first UMB specified
 34446 00002751 09C0                    	or	ax,ax
 34447 00002753 7406                    	jz	short tryd_1		; If size1 not specified, nada to do:
 34448                                  
 34449 00002755 3B06[9923]              	cmp	ax,[DevSize]		; /L:...,Size < DevSize?
 34450 00002759 7D06                    	jge	short DevConvLoad
 34451                                  tryd_1:
 34452 0000275B A1[9923]                	mov	ax,[DevSize]		; Size < DevSize, so write DevSize as
 34453 0000275E E8AE09                  	call	StoLoadSize		; minsize for load UMB.
 34454                                  
 34455                                  ;%endif ; 28/10/2022
 34456                                  
 34457                                  ; - End DeviceHigh primary logic changes --------------------------------------
 34458                                  
 34459                                  DevConvLoad:
 34460                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34461 00002761 E8BF0C                  	call	InitDevLoad
 34462                                  
 34463                                  	; 11/12/2022
 34464                                  	; ds = cs
 34465 00002764 A1[9B23]                	mov	ax,[DevLoadAddr]
 34466 00002767 0306[9923]              	add	ax,[DevSize]
 34467 0000276B 7206                    	jc	short NoMem
 34468 0000276D 3906[9D23]              	cmp	[DevLoadEnd],ax
 34469 00002771 7315                    	jae	short LoadDev
 34470                                  	
 34471                                  	; 11/12/2022
 34472                                  	;mov	ax,[cs:DevLoadAddr]
 34473                                  	;add	ax,[cs:DevSize]
 34474                                  	;jc	short NoMem
 34475                                  	;cmp	[cs:DevLoadEnd],ax
 34476                                  	;jae	short LoadDev
 34477                                  NoMem:
 34478                                  	; 11/12/2022
 34479                                  	; ds = cs
 34480                                  	;jmp	mem_err
 34481 00002773 E9791F                  	jmp	mem_err2
 34482                                  
 34483                                  BadFile:
 34484                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34485                                  	;;call	RetFromUM		; Does nothing if didn't call HideUMBs
 34486                                  	;;cmp	byte [es:si],' '
 34487                                          ;;jae	short tryd_2
 34488                                  	; 31/12/2022	
 34489                                  	;cmp	byte [es:si],0Dh	; cr
 34490                                          ;jne	short tryd_2
 34491                                  	;jmp	badop
 34492                                  	; 31/12/2022
 34493                                  	; ds = cs
 34494                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34495                                  	; (SYSINIT:26E6h)
 34496 00002776 E8070E                  	call	RetFromUM		; Does nothing if didn't call HideUMBs
 34497 00002779 26803C20                	cmp	byte [es:si],' ' 
 34498                                  	;cmp	byte [es:si],20h ; space
 34499 0000277D 7303                    	jnb	short tryd_2
 34500 0000277F E9C005                  	jmp	badop
 34501                                  tryd_2:
 34502 00002782 E86521                  	call	badload
 34503 00002785 E964FD                  	jmp	coff
 34504                                  
 34505                                  LoadDev:
 34506 00002788 06                      	push	es
 34507 00002789 1F                      	pop	ds
 34508                                  
 34509 0000278A 89F2                    	mov	dx,si			;ds:dx points to file name
 34510 0000278C E8D50D                  	call	ExecDev			; load device driver using exec call
 34511                                  badldreset:
 34512 0000278F 1E                      	push	ds
 34513 00002790 07                      	pop	es			;es:si back to config.sys
 34514 00002791 0E                      	push	cs
 34515 00002792 1F                      	pop	ds			;ds back to sysinit
 34516 00002793 72E1                    	jc	short BadFile
 34517                                  goodld:
 34518                                  	; 11/12/2022
 34519                                  	; ds = cs
 34520                                  
 34521 00002795 06                      	push	es ; +	; 31/12/2022
 34522 00002796 56                      	push	si ; ++
 34523 00002797 E8F70D                  	call	RemoveNull
 34524 0000279A 06                      	push	es
 34525 0000279B 56                      	push	si
 34526                                  
 34527 0000279C 0E                      	push	cs
 34528 0000279D 07                      	pop	es
 34529                                  
 34530 0000279E 1E                      	push	ds ; **  ; ds = cs
 34531 0000279F 56                      	push	si
 34532                                  
 34533                                  	;lds	si,[cs:DevEntry]	; peeks the header attribute
 34534                                  	; 31/12/2022
 34535                                  	; ds = cs
 34536 000027A0 C536[9F23]              	lds	si,[DevEntry]
 34537                                  
 34538                                  	;test	word [si+4],8000h
 34539                                  	; 11/12/2022
 34540 000027A4 F6440580                	test	byte [si+SYSDEV.ATT+1],DEVTYP>>8
 34541                                  	;test	word [si+SYSDEV.ATT],DEVTYP ; block device driver?
 34542 000027A8 7514                    	jnz	short got_device_com_cont   ; no.
 34543                                  
 34544 000027AA 2EC536[6D02]            	lds	si,[cs:DOSINFO]		; ds:si -> sys_var
 34545                                  	;cmp	byte [si+32],26
 34546 000027AF 807C201A                	cmp	byte [si+SYSI_NUMIO],26	; no more than 26 drive number
 34547 000027B3 7209                    	jb	short got_device_com_cont
 34548                                  
 34549 000027B5 5E                      	pop	si
 34550 000027B6 1F                      	pop	ds ; **
 34551                                  
 34552 000027B7 5E                      	pop	si			; clear the stack
 34553 000027B8 07                      	pop	es
 34554                                  
 34555                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34556                                  	;call	RetFromUM
 34557                                  	; 31/12/2022
 34558                                  	; ds = cs ; **
 34559 000027B9 E8C40D                  	call	RetFromUM		; Do this before we leave
 34560                                  
 34561                                  	;jmp	short badnumblock
 34562                                  	; 31/12/2022
 34563 000027BC EB73                    	jmp	short badnumblock2  ; ds = cs
 34564                                  
 34565                                  got_device_com_cont:
 34566 000027BE 5E                      	pop	si
 34567 000027BF 1F                      	pop	ds
 34568                                  
 34569                                  	; 11/12/2022
 34570                                  	; ds = cs
 34571                                  
 34572 000027C0 E80506                  	call	LieInt12Mem
 34573 000027C3 E86406                  	call	UpdatePDB		; update the PSP:2 value M020
 34574                                  
 34575                                  	; 11/12/2022
 34576                                  	; ds = cs
 34577                                  	; 08/09/2023
 34578 000027C6 31C0                    	xor	ax, ax ; 0
 34579 000027C8 3806[F218]              	cmp	byte [multdeviceflag],al ; 0
 34580                                  	;cmp	byte [multdeviceflag],0
 34581                                  	;cmp	byte [cs:multdeviceflag],0 ; Pass limit only for the 1st device
 34582                                  					;  driver in the file ; M027
 34583 000027CC 750B                    	jne	short skip_pass_limit	;		      ; M027
 34584                                  
 34585                                  	; 11/12/2022
 34586                                  	; ds = cs
 34587                                  	;mov	word [cs:break_addr],0	; pass the limit to the DD
 34588                                  	;mov	bx,[cs:DevLoadEnd]
 34589                                  	;mov	[cs:break_addr+2],bx
 34590                                  
 34591                                  	;mov	word [break_addr],0
 34592                                  	; 08/09/2023
 34593 000027CE A3[7D03]                	mov	[break_addr],ax ; 0
 34594 000027D1 8B1E[9D23]              	mov	bx,[DevLoadEnd]
 34595 000027D5 891E[7F03]              	mov	[break_addr+2],bx
 34596                                  
 34597                                  skip_pass_limit:
 34598                                  ;	Note: sysi_numio (in DOS DATA) currently reflects the REAL
 34599                                  ;	number of installed devices (including DblSpace drives) where
 34600                                  ;	"drivenumber" is the number that the next block device will
 34601                                  ;	be assigned to. Because some naughty device drivers (like
 34602                                  ;	interlnk) look at the internal DOS variable instead of the
 34603                                  ;	value we pass it, we'll temporarily stick our value into
 34604                                  ;	DOS DATA while we're initializing the device drivers.
 34605                                  ;
 34606                                  ;	Note that this will make it impossible for this device
 34607                                  ;	driver to access the DblSpace drive letters, whether
 34608                                  ;	they are swapped-hosts or unswapped compressed drives,
 34609                                  ;	during its initialization phase.
 34610                                  
 34611                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34612                                  ; (SYSINIT:2752h)
 34613                                  ; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34614                                  ;%if 0
 34615                                  	; 31/12/2022
 34616                                  	;push	ds
 34617                                  	
 34618                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 34619                                  	; 31/12/2022
 34620                                  	; ds = cs
 34621                                  	; 08/09/2023
 34622                                  	;lds	bx,[DOSINFO]		; ds:bx -> sys_var
 34623                                  
 34624                                  	;mov	al,[cs:drivenumber]	; temporarily use this next drv value
 34625                                  	;mov	[cs:devdrivenum],al	; pass drive number in packet to driver
 34626                                  	;mov	ah,al
 34627                                  
 34628                                  	; 08/09/2023
 34629                                  	; ds = cs
 34630 000027D9 A0[8503]                	mov	al,[drivenumber]	; temporarily use this next drv value		
 34631 000027DC A2[8503]                	mov	[devdrivenum],al	; pass drive number in packet to driver
 34632 000027DF 88C4                    	mov	ah,al
 34633 000027E1 C51E[6D02]              	lds	bx,[DOSINFO]		; ds:bx -> sys_var
 34634                                  
 34635 000027E5 874720                  	xchg	ax,[bx+SYSI_NUMIO]	; swap with existing values
 34636                                  	; 31/12/2022
 34637                                  	;pop	ds
 34638                                  	
 34639 000027E8 50                      	push	ax			; save real sysi_numio/ncds in ax
 34640                                  
 34641                                  ;%endif ; 29/10/2022
 34642                                  
 34643                                  	; 29/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 34644                                  	; (SYSINIT:24B9h)
 34645                                  
 34646 000027E9 BB0600                  	mov	bx,SYSDEV.STRAT ; 6
 34647 000027EC E8091F                  	call	calldev 		; calldev (sdevstrat);
 34648 000027EF BB0800                  	mov	bx,SYSDEV.INT ; 8
 34649 000027F2 E8031F                  	call	calldev 		; calldev (sdevint);
 34650                                  
 34651                                  	; 11/12/2022
 34652                                  	; ds <> cs (from calldev) ; 31/12/2022
 34653                                  
 34654                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34655                                  ; (SYSINIT:2773h)
 34656                                  ; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34657                                  ;%if 0
 34658 000027F5 58                      	pop	ax			; get real sysi_numio value
 34659                                  	; 31/12/2022
 34660                                  	;push	ds
 34661 000027F6 2EC51E[6D02]            	lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 34662 000027FB 894720                  	mov	[bx+SYSI_NUMIO],ax	; swap with existing values
 34663                                  	; 31/12/2022
 34664                                  	;pop	ds
 34665                                  
 34666                                  ;%endif ; 29/10/2022
 34667                                  
 34668                                  	; 11/12/2022
 34669 000027FE 0E                      	push	cs
 34670 000027FF 1F                      	pop	ds
 34671                                  
 34672 00002800 E8F505                  	call	TrueInt12Mem
 34673                                  
 34674                                  	; 11/12/2022
 34675                                  	; ds = cs
 34676                                  	;mov	ax,[cs:break_addr]	; move break addr from the req packet
 34677                                  	;mov	[cs:DevBrkAddr],ax
 34678                                  	;mov	ax,[cs:break_addr+2]
 34679                                  	;mov	[cs:DevBrkAddr+2],ax
 34680 00002803 A1[7D03]                	mov	ax,[break_addr]	
 34681 00002806 A3[A323]                	mov	[DevBrkAddr],ax
 34682 00002809 A1[7F03]                	mov	ax,[break_addr+2]
 34683 0000280C A3[A523]                	mov	[DevBrkAddr+2],ax
 34684                                  
 34685                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34686                                  	;call	RetFromUM		; There we go... all done.
 34687                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34688                                  	; (SYSINIT:2791h)
 34689 0000280F E86E0D                  	call	RetFromUM		; There we go... all done.	
 34690                                  
 34691                                  	; 31/12/2022
 34692                                  	; ds = cs
 34693                                  
 34694                                  	; 11/12/2022
 34695 00002812 803E[A823]00            	cmp	byte [DevUMB],0	
 34696                                  	;cmp	byte [cs:DevUMB],0
 34697 00002817 7403                    	je	short tryd_3
 34698 00002819 E8590F                  	call	AllocUMB
 34699                                  	; 31/12/2022
 34700                                  	; ds = cs
 34701                                  tryd_3:
 34702                                  
 34703                                  ;ifndef ROMDOS
 34704                                  ;------ If we are waiting to be moved into hma lets try it now !!!
 34705                                  
 34706                                  	; 11/12/2022
 34707                                  	; ds = cs
 34708                                  	
 34709                                  	;cmp	byte [cs:runhigh],0FFh
 34710 0000281C 803E[6C02]FF            	cmp	byte [runhigh],0FFh ; 11/12/2022
 34711 00002821 7503                    	jne	short tryd_4
 34712                                  	
 34713                                  	; 11/12/2022
 34714                                  	; ds = cs
 34715 00002823 E878E2                  	call	TryToMovDOSHi		; move DOS into HMA if reqd
 34716                                  tryd_4:
 34717                                  ;endif ; ROMDOS
 34718                                  
 34719 00002826 5E                      	pop	si
 34720 00002827 1F                      	pop	ds
 34721 00002828 C60400                  	mov	byte [si],0		; *p = 0;
 34722                                  
 34723 0000282B 0E                      	push	cs
 34724 0000282C 1F                      	pop	ds
 34725                                  
 34726 0000282D EB1F                    	jmp	short was_device_com
 34727                                  
 34728                                  ;----------------------------------------------------------------------------
 34729                                  
 34730                                  ; 02/04/2019 - Retro DOS v4.0
 34731                                  
 34732                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34733                                  ; (SYSINIT:27B3h)
 34734                                  
 34735                                  badnumblock:
 34736 0000282F 0E                      	push	cs
 34737 00002830 1F                      	pop	ds
 34738                                  badnumblock2:	; 31/12/2022 (ds=cs)
 34739 00002831 BA[EE4F]                	mov	dx,badblock
 34740 00002834 E8DB20                  	call	print
 34741                                  
 34742                                  ;------ fall thru -----------------------------------------------------------
 34743                                  
 34744                                  	; 31/12/2022 - Retro DOS v4.2
 34745                                  
 34746                                  erase_dev_do:				; modified to show message "error in config.sys..."
 34747                                  	
 34748                                  	;call	CheckDoubleSpace ; MSDOS 6.21 IO.SYS SYSINIT:27BBh
 34749                                  				; (Note: 'call CheckDoubleSpace'
 34750                                  				; has been removed at 'erase_dev_do:' pos
 34751                                  				; in PCDOS 7.1 IBMBIO.COM - SYSINIT:2CBAh)
 34752                                  				; Erdogan Tan - 10/07/2023
 34753 00002837 5E                      	pop	si ; ++
 34754 00002838 07                      	pop	es ; + ; 31/12/2022
 34755                                  
 34756 00002839 0E                      	push	cs
 34757 0000283A 1F                      	pop	ds
 34758                                  
 34759                                  skip1_resetmemhi:
 34760                                  	; 11/12/2022
 34761                                  	; ds = cs
 34762 0000283B 833E[8603]00            	cmp	word [configmsgflag],0
 34763                                  	;cmp	word [cs:configmsgflag],0
 34764 00002840 7409                    	je	short no_error_line_msg
 34765                                  
 34766 00002842 E83105                  	call	error_line		; no "error in config.sys" msg for device driver. dcr d493
 34767                                  	; 11/12/2022
 34768                                  	; ds = cs
 34769                                  	;mov	word [cs:configmsgflag],0
 34770 00002845 C706[8603]0000          	mov	word [configmsgflag],0	; set the default value again.
 34771                                  
 34772                                  no_error_line_msg:
 34773 0000284B E99EFC                  	jmp	coff
 34774                                  
 34775                                  ;----------------------------------------------------------------------------
 34776                                  
 34777                                  was_device_com:
 34778                                  	; 14/12/2022
 34779                                  	; ds = cs
 34780 0000284E A1[A523]                	mov	ax,[DevBrkAddr+2]
 34781                                  	;mov	ax,[cs:DevBrkAddr+2] ; 13/05/2019
 34782 00002851 3B06[9D23]              	cmp	ax,[DevLoadEnd]
 34783                                  	;cmp	ax,[cs:DevLoadEnd]
 34784 00002855 7605                    	jbe	short breakok
 34785                                  
 34786 00002857 5E                      	pop	si
 34787 00002858 07                      	pop	es
 34788 00002859 E91AFF                  	jmp	BadFile
 34789                                  
 34790                                  breakok:
 34791                                  	; 14/12/2022
 34792                                  	; ds = cs
 34793 0000285C C43E[6D02]              	les	di,[DOSINFO] 
 34794 00002860 C516[9F23]              	lds	dx,[DevEntry]
 34795                                  	;lds	dx,[cs:DevEntry]	;set ds:dx to header
 34796 00002864 89D6                    	mov	si,dx
 34797                                  
 34798                                  	; 14/11/2022
 34799                                  	;les	di,[cs:DOSINFO] 	;es:di point to dos info
 34800                                  
 34801                                  	; 14/12/2022
 34802                                  	; ds <> cs
 34803                                  	
 34804                                  	;mov	ax,[si+4]
 34805 00002866 8B4404                  	mov	ax,[si+SYSDEV.ATT]	;get attributes
 34806                                  	; 12/12/2022
 34807 00002869 F6C480                  	test	ah,DEVTYP>>8 ; 80h 
 34808                                  	;test	ax,DEVTYP ; 8000h	;test if block dev
 34809 0000286C 7426                    	jz	short isblock
 34810                                  
 34811                                  ;------ lets deal with character devices
 34812                                  
 34813 0000286E 2E800E[F518]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 34814 00002874 E84D0D                  	call	DevSetBreak		;go ahead and alloc mem for device
 34815                                  jc_edd:
 34816 00002877 72BE                    	jc	short erase_dev_do	;device driver's init routine failed.
 34817                                  
 34818                                  	; 12/12/2022
 34819 00002879 A801                    	test	al,ISCIN
 34820                                  	;test	ax,ISCIN ; 1		;is it a console in?
 34821 0000287B 7408                    	jz	short tryclk
 34822                                  
 34823 0000287D 2689550C                	mov	[es:di+SYSI_CON],dx   ; es:di+12
 34824 00002881 268C5D0E                	mov	[es:di+SYSI_CON+2],ds ; es:di+14
 34825                                  tryclk: 
 34826                                  	; 12/12/2022
 34827 00002885 A808                    	test	al,ISCLOCK
 34828                                  	;test	ax,ISCLOCK ; 8		;is it a clock device?
 34829 00002887 7408                    	jz	short golink
 34830                                  
 34831 00002889 26895508                	mov	[es:di+SYSI_CLOCK],dx	; es:di+8
 34832 0000288D 268C5D0A                	mov	[es:di+SYSI_CLOCK+2],ds ; es:di+10
 34833                                  golink: 
 34834 00002891 E9B500                  	jmp	linkit
 34835                                  
 34836                                  ;------ deal with block device drivers
 34837                                  
 34838                                  isblock:
 34839 00002894 2EA0[7C03]              	mov	al,[cs:unitcount]	;if no units found,erase the device
 34840 00002898 08C0                    	or	al,al
 34841 0000289A 749B                    	jz	short erase_dev_do
 34842                                  	;mov	[si+10],al
 34843 0000289C 88440A                  	mov	[si+SYSDEV.NAME],al	; number of units in name field
 34844                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34845                                  	;add	[cs:driver_units],al
 34846                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34847 0000289F 2E0006[F618]            	add	[cs:driver_units],al	; keep total for all drivers in file
 34848                                  perdrv:
 34849 000028A4 98                      	cbw				; warning no device > 127 units
 34850 000028A5 89C1                    	mov	cx,ax
 34851 000028A7 88E6                    	mov	dh,ah
 34852                                  	;mov	dl,[es:di+32]
 34853 000028A9 268A5520                	mov	dl,[es:di+SYSI_NUMIO]	;get number of devices
 34854 000028AD 88D4                    	mov	ah,dl
 34855 000028AF 00C4                    	add	ah,al			; check for too many devices
 34856 000028B1 80FC1A                  	cmp	ah,26			; 'A' - 'Z' is 26 devices
 34857 000028B4 7603                    	jbe	short ok_block
 34858 000028B6 E976FF                  	jmp	badnumblock
 34859                                  
 34860                                  ok_block:
 34861 000028B9 2E800E[F518]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 34862 000028BF E8020D                  	call	DevSetBreak		; alloc the device
 34863 000028C2 72B3                    	jc	short jc_edd
 34864 000028C4 26004520                	add	[es:di+SYSI_NUMIO],al	; update the amount
 34865                                  
 34866 000028C8 2E0006[8503]            	add	[cs:drivenumber],al	; remember amount for next device
 34867 000028CD 2EC51E[8103]            	lds	bx,[cs:bpb_addr]	; point to bpb array
 34868                                  perunit:
 34869 000028D2 2EC42E[6D02]            	les	bp,[cs:DOSINFO]
 34870                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 34871                                  	; 11/12/2022
 34872 000028D7 26C46E00                	les	bp,[es:bp]
 34873                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34874                                  	;les	bp,[es:bp+0]		; [es:bp+SYSI_DPB]
 34875                                  scandpb:
 34876                                  	;cmp	word [es:bp+25],-1
 34877 000028DB 26837E19FF              	cmp	word [es:bp+DPB.NEXT_DPB],-1
 34878 000028E0 7406                    	je	short foundpb
 34879                                  	;les	bp,[es:bp+25]
 34880 000028E2 26C46E19                	les	bp,[es:bp+DPB.NEXT_DPB]
 34881 000028E6 EBF3                    	jmp	short scandpb
 34882                                  foundpb:
 34883 000028E8 2EA1[A323]              	mov	ax,[cs:DevBrkAddr]
 34884 000028EC 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 34885 000028F0 2EA1[A523]              	mov	ax,[cs:DevBrkAddr+2]
 34886 000028F4 2689461B                	mov	[es:bp+DPB.NEXT_DPB+2],ax
 34887                                  
 34888 000028F8 2EC42E[A323]            	les	bp,[cs:DevBrkAddr]
 34889 000028FD 2E8306[A323]3D          	add	word [cs:DevBrkAddr],DPBSIZ ; 33
 34890                                  				; 08/09/2023
 34891                                  				; (61 in PCDOS 7.1 IBMBIO.COM)
 34892 00002903 E89D0C                  	call	RoundBreakAddr
 34893                                  
 34894 00002906 26C74619FFFF            	mov	word [es:bp+DPB.NEXT_DPB],-1
 34895 0000290C 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 34896                                  
 34897 00002911 8B37                    	mov	si,[bx] 		;ds:si points to bpb
 34898 00002913 43                      	inc	bx
 34899 00002914 43                      	inc	bx			;point to next guy
 34900                                  	;mov	[es:bp+DPB.DRIVE],dx
 34901                                  	; 11/12/2022
 34902 00002915 26895600                	mov	[es:bp],dx ; 13/05/2019
 34903                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34904                                  	;mov	[es:bp+0],dx		; [es:bp+DPB.DRIVE]
 34905                                  	
 34906 00002919 B453                    	mov	ah,SETDPB ; 53h		;hidden system call
 34907 0000291B CD21                    	int	21h
 34908                                  			; DOS - 2+ internal - TRANSLATE BIOS PARAMETER BLOCK
 34909                                  			; DS:SI -> BPB (BIOS Parameter Block)
 34910                                  			; ES:BP -> buffer for DOS Drive Parameter Block
 34911                                  
 34912                                  	;mov	ax,[es:bp+2]
 34913 0000291D 268B4602                	mov	ax,[es:bp+DPB.SECTOR_SIZE]
 34914 00002921 06                      	push	es
 34915 00002922 2EC43E[6D02]            	les	di,[cs:DOSINFO] 	;es:di point to dos info
 34916                                  	;cmp	ax,[es:di+10h]
 34917 00002927 263B4510                	cmp	ax,[es:di+SYSI_MAXSEC]
 34918 0000292B 07                      	pop	es
 34919                                  	;jna	short iblk_1
 34920                                  	;jmp	short bad_bpb_size_sector
 34921                                  	; 29/10/2022
 34922 0000292C 775D                    	ja	short bad_bpb_size_sector
 34923                                  iblk_1:
 34924 0000292E 1E                      	push	ds
 34925 0000292F 52                      	push	dx
 34926                                  
 34927 00002930 2EC516[9F23]            	lds	dx,[cs:DevEntry]
 34928                                  	;mov	[es:bp+13h],dx
 34929 00002935 26895613                	mov	[es:bp+DPB.DRIVER_ADDR],dx
 34930                                  	;mov	[es:bp+15h],ds
 34931 00002939 268C5E15                	mov	[es:bp+DPB.DRIVER_ADDR+2],ds
 34932                                  
 34933 0000293D 5A                      	pop	dx
 34934 0000293E 1F                      	pop	ds
 34935                                  
 34936 0000293F 42                      	inc	dx
 34937 00002940 FEC6                    	inc	dh
 34938 00002942 E28E                    	loop	perunit
 34939                                  
 34940 00002944 0E                      	push	cs
 34941 00002945 1F                      	pop	ds
 34942                                  
 34943 00002946 E860E4                  	call	TempCDS 		; set cds for new drives
 34944                                  	; 31/12/2022
 34945                                  	; ds <> cs
 34946                                  linkit:
 34947 00002949 2EC43E[6D02]            	les	di,[cs:DOSINFO] 	;es:di = dos table
 34948 0000294E 268B4D22                	mov	cx,[es:di+SYSI_DEV]	;dx:cx = head of list
 34949 00002952 268B5524                	mov	dx,[es:di+SYSI_DEV+2]
 34950                                  
 34951 00002956 2EC536[9F23]            	lds	si,[cs:DevEntry]	;ds:si = device location
 34952 0000295B 26897522                	mov	[es:di+SYSI_DEV],si	;set head of list in dos
 34953 0000295F 268C5D24                	mov	[es:di+SYSI_DEV+2],ds
 34954 00002963 8B04                    	mov	ax,[si]			;get pointer to next device
 34955 00002965 2EA3[9F23]              	mov	[cs:DevEntry],ax	;and save it
 34956                                  
 34957 00002969 890C                    	mov	[si],cx			;link in the driver
 34958 0000296B 895402                  	mov	[si+2],dx
 34959                                  enddev:
 34960 0000296E 5E                      	pop	si
 34961 0000296F 07                      	pop	es
 34962 00002970 40                      	inc	ax			;ax = ffff (no more devs if yes)?
 34963 00002971 740B                    	jz	short coffj3
 34964                                  
 34965 00002973 2EFE06[F218]            	inc	byte [cs:multdeviceflag] ; possibly multiple device driver.
 34966 00002978 E86B0C                  	call	DevBreak		; M009
 34967                                  	; 11/12/2022
 34968                                  	; ds = cs (DevBreak)
 34969                                  
 34970                                  	; 03/04/2019 - Retro DOS v4.0
 34971                                  	; MSDOS 6.21 IO.SYS - SYSINIT:290Dh
 34972 0000297B E917FE                  	jmp	goodld			; otherwise pretend we loaded it in
 34973                                  coffj3: 
 34974                                  	; 18/12/2022
 34975                                  	; ax = 0
 34976 0000297E 2EA2[F218]              	mov	[cs:multdeviceflag],al ; 0
 34977                                  	;mov	byte [cs:multdeviceflag],0 ; reset the flag
 34978 00002982 E8610C                  	call	DevBreak
 34979                                  	; 11/12/2022
 34980                                  	; ds = cs (DevBreak)
 34981                                  	
 34982                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34983                                  	; (SYSINIT:2919h)
 34984                                  	; 11/07/2023
 34985 00002985 E88303                  	call	CheckProtmanArena
 34986                                  	
 34987                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS compatibility)
 34988                                  	;;call	CheckProtmanArena	; adjust alloclim if Protman$ just
 34989                                  ;					;  created a bogus arena to try
 34990                                  ;					;  to protect some of its resident-
 34991                                  ;					;  init code.
 34992                                  	;call	CheckDoubleSpace
 34993 00002988 E961FB                  	jmp	coff
 34994                                  
 34995                                  ;----------------------------------------------------------------------------
 34996                                  
 34997                                  ;CheckDoubleSpace:
 34998                                  ;;;;	ifdef	dblspace_hooks
 34999                                  ;
 35000                                  ;;	Now check for two special MagicDrv cases:
 35001                                  ;;
 35002                                  ;;       a) the last driver load was MagicDrv final placement:
 35003                                  ;;	   -> add number of MagicDrv reserved drives to drivenumber
 35004                                  ;;
 35005                                  ;;       b) MagicDrv is currently in temporary home:
 35006                                  ;;          -> call it to give it a chance to mount and shuffle drives
 35007                                  ;
 35008                                  ;	cmp	byte [cs:MagicHomeFlag],0 ; already home?
 35009                                  ;	jnz	short no_more_magic_calls ;  nothing more to do if so
 35010                                  ;
 35011                                  ;;	Now inquire of driver whether it is present, and final located
 35012                                  ;
 35013                                  ;	mov	ax,multMagicdrv ; 4A11h
 35014                                  ;	mov	bx,MD_VERSION ; 0
 35015                                  ;	int	2fh			; ch = number of MagicDrv drive letters
 35016                                  ;	or	ax,ax			; is it there?
 35017                                  ;	jnz	short no_more_magic_calls ; done if not
 35018                                  ;
 35019                                  ;	test	dx,8000h		; is it final placed?
 35020                                  ;	jnz	short magic_not_yet_home ;  skip if not
 35021                                  ;
 35022                                  ;;	Okay, now the driver is final placed!  Set the flag so we
 35023                                  ;;	don't keep checking it, and add its number of drive letters
 35024                                  ;;	to drivenumber.
 35025                                  ;
 35026                                  ;	mov	byte [cs:MagicHomeFlag],0ffh ; set the flag!
 35027                                  ;	add	[cs:drivenumber],ch	; add number of MagicDrv volumes to
 35028                                  ;;					;  the drive number we'll pass to the
 35029                                  ;;					;  next loadable block device.
 35030                                  ;
 35031                                  ;	jmp	short no_more_magic_calls ; and finished.
 35032                                  ;
 35033                                  ;magic_not_yet_home:
 35034                                  ;	push	es
 35035                                  ;	push	si
 35036                                  ;
 35037                                  ;	mov	cx,[cs:memhi]		; pass it a work buffer
 35038                                  ;	mov	dx,[cs:ALLOCLIM]	;   address in cx (segment)
 35039                                  ;	sub	dx,cx			;   for len dx (paragraphs)
 35040                                  ;
 35041                                  ;	mov	bx,2
 35042                                  ;	mov	al,[cs:driver_units]	; shuffle magicdrives and new drives
 35043                                  ;;					;   by this many units
 35044                                  ;
 35045                                  ;;BUGBUG 29-Oct-1992 bens Take this 55h out after Beta 4
 35046                                  ;	mov	ah,55h			; backdoor won't shuffle unless it
 35047                                  ;;					;  sees this, to prevent bad things
 35048                                  ;;					;  from happening if people run the
 35049                                  ;;					;  new driver with an old BIOS
 35050                                  ;	call	far [cs:MagicBackdoor]
 35051                                  ;
 35052                                  ;	pop	si
 35053                                  ;	pop	es
 35054                                  ;
 35055                                  ;no_more_magic_calls:
 35056                                  ;
 35057                                  ;;;;	endif
 35058                                  ;	retn
 35059                                  
 35060                                  ; 03/04/2019 - Retro DOS v4.0
 35061                                  
 35062                                  bad_bpb_size_sector:
 35063 0000298B 5E                      	pop	si
 35064 0000298C 07                      	pop	es
 35065 0000298D BA[104F]                	mov	dx,badsiz_pre
 35066 00002990 BB[EE4E]                	mov	bx,crlfm
 35067 00002993 E85A1F                  	call	prnerr
 35068                                  
 35069 00002996 E953FB                  	jmp	coff
 35070                                  
 35071                                  ;------------------------------------------------------------------------------
 35072                                  ; country command
 35073                                  ;      the syntax is:
 35074                                  ;	country=country id {,codepage {,path}}
 35075                                  ;	country=country id {,,path}	:default codepage id in dos
 35076                                  ;------------------------------------------------------------------------------
 35077                                  
 35078                                  	; 30/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 35079                                  	; (SYSINIT:2663h)
 35080                                  tryq:
 35081 00002999 80FC51                          cmp     ah,CONFIG_COUNTRY ; 'Q'
 35082 0000299C 7403                    	je	short tryq_cont
 35083                                  skip_it3:
 35084 0000299E E90D01                  	jmp	tryf
 35085                                  tryq_cont:
 35086                                  
 35087                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35088                                  ; (SYSINIT:297Eh)
 35089                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35090                                  ;%if 0
 35091                                  ;ifdef	MULTI_CONFIG
 35092 000029A1 E8361B                  	call	query_user		; query the user if config_cmd
 35093 000029A4 72F8                    	jc	short skip_it3		; has the CONFIG_OPTION_QUERY bit set
 35094                                  ;endif
 35095                                  ;%endif ; 02/11/2022
 35096                                  
 35097                                  	; 31/12/2022
 35098                                  	;xor	bx,bx
 35099 000029A6 31C9                    	xor	cx,cx
 35100                                  	; 14/12/2022
 35101                                  	; ds = cs
 35102                                  	; bx = 0
 35103                                  	;mov	byte [cs:cntry_drv],0	; reset the drive,path to default value.
 35104                                  	;mov	word [cs:p_code_page],0
 35105                                  	; 31/12/2022
 35106                                  	; cx = 0
 35107                                  	;mov	[cntry_drv],bl ; 0
 35108                                  	;mov	[p_code_page],bx ; 0
 35109 000029A8 880E[9B49]              	mov	[cntry_drv],cl ; 0
 35110 000029AC 890E[1022]              	mov	[p_code_page],cx ; 0	
 35111                                  
 35112 000029B0 BF[D921]                	mov	di,cntry_parms
 35113                                  	;xor	cx,cx	; 31/12/2022
 35114                                  	; 03/01/2023
 35115                                  	;mov	dx,cx
 35116                                  do52:
 35117 000029B3 E86D03                  	call	sysinit_parse
 35118 000029B6 730B                    	jnc	short if52		; parse error,check error code and
 35119                                  
 35120 000029B8 E8E000                  	call	cntry_error		; show message and end the search loop.
 35121                                  	; 14/12/2022
 35122                                  	; ds = cs
 35123 000029BB C706[0E22]FFFF          	mov	word [p_cntry_code],-1
 35124                                  	;mov	word [cs:p_cntry_code],-1 ; signals that parse error.
 35125 000029C1 EB34                    	jmp	short sr52
 35126                                  if52:
 35127 000029C3 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 35128 000029C6 742F                    	jz	short sr52		; then end the search loop
 35129                                  
 35130                                  	;cmp	byte [cs:result_val+_$P_Result_Blk.Type],_$P_number ; numeric?
 35131                                  	; 14/12/2022
 35132                                  	; ds = cs
 35133 000029C8 803E[AB21]01            	cmp	byte [result_val],_$P_Number	
 35134                                  	;cmp	byte [cs:result_val],_$P_Number
 35135 000029CD 7512                    	jnz	short if56
 35136                                  
 35137                                  	;;mov	ax,[cs:rw_dword]
 35138                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 35139                                  	; 14/12/2022
 35140 000029CF A1[AF21]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 35141 000029D2 83F901                  	cmp	cx,1
 35142 000029D5 7505                    	jne	short if57
 35143                                  
 35144                                  	;mov	[cs:p_cntry_code],ax
 35145                                  	; 14/12/2022
 35146 000029D7 A3[0E22]                	mov	[p_cntry_code],ax
 35147                                  
 35148                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35149                                  	;jmp	short en57
 35150                                  	; 12/12/2022
 35151                                  	;jmp	short en56
 35152 000029DA EBD7                    	jmp	short do52
 35153                                  if57:
 35154                                  	;mov	[cs:p_code_page],ax
 35155                                  	; 14/12/2022
 35156                                  	; ds = cs
 35157 000029DC A3[1022]                	mov	[p_code_page],ax
 35158                                  en57:
 35159                                  	;jmp	short en56		; path entered
 35160                                  	; 12/12/2022
 35161 000029DF EBD2                    	jmp	short do52
 35162                                  if56:
 35163 000029E1 1E                      	push	ds
 35164 000029E2 06                      	push	es
 35165 000029E3 56                      	push	si
 35166 000029E4 57                      	push	di
 35167                                  
 35168 000029E5 0E                      	push	cs
 35169 000029E6 07                      	pop	es
 35170                                  
 35171                                  	;lds	si,[cs:rv_dword]	; move the path to known place.
 35172                                  	; 14/12/2022
 35173 000029E7 C536[AF21]              	lds	si,[rv_dword]
 35174 000029EB BF[9B49]                	mov	di,cntry_drv
 35175 000029EE E8EE1E                  	call	move_asciiz
 35176                                  
 35177 000029F1 5F                      	pop	di
 35178 000029F2 5E                      	pop	si
 35179 000029F3 07                      	pop	es
 35180 000029F4 1F                      	pop	ds
 35181                                  en56:
 35182 000029F5 EBBC                    	jmp	short do52
 35183                                  sr52:
 35184                                  	; 14/12/2022
 35185                                  	; ds = cs
 35186 000029F7 833E[0E22]FF            	cmp	word [p_cntry_code],-1
 35187                                  	;cmp	word [cs:p_cntry_code],-1	; had a parse error?
 35188 000029FC 7509                    	jne	short tryq_open
 35189 000029FE E9EBFA                  	jmp	coff
 35190                                  
 35191                                  tryqbad:				;"invalid country code or code page"
 35192 00002A01 F9                      	stc
 35193 00002A02 BA[574F]                	mov     dx,badcountry
 35194 00002A05 EB79                    	jmp     tryqchkerr
 35195                                  
 35196                                  tryq_open:
 35197                                  	; 14/12/2022
 35198                                  	; ds = cs
 35199 00002A07 803E[9B49]00            	cmp	byte [cntry_drv],0
 35200                                  	;cmp	byte [cs:cntry_drv],0
 35201 00002A0C 7405                    	je	short tryq_def
 35202 00002A0E BA[9B49]                	mov	dx,cntry_drv
 35203 00002A11 EB03                    	jmp	short tryq_openit
 35204                                  
 35205                                  tryq_def:
 35206 00002A13 BA[9D49]                	mov	dx,cntry_root
 35207                                  tryq_openit:
 35208 00002A16 B8003D                  	mov	ax,3D00h		;open a file
 35209 00002A19 F9                      	stc
 35210 00002A1A CD21                    	int	21h
 35211 00002A1C 7242                    	jc	short tryqfilebad	;open failure
 35212                                  
 35213                                  	; 14/12/2022
 35214                                  	; ds = cs
 35215 00002A1E A3[5C03]                	mov	[cntryfilehandle],ax
 35216                                  	;mov	[cs:cntryfilehandle],ax	;save file handle
 35217 00002A21 89C3                    	mov	bx,ax
 35218 00002A23 A1[0E22]                	mov	ax,[p_cntry_code]
 35219 00002A26 8B16[1022]              	mov	dx,[p_code_page]
 35220                                  	;mov	ax,[cs:p_cntry_code]
 35221                                  	;mov	dx,[cs:p_code_page]	;now,ax=country id,bx=filehandle
 35222                                  	;mov	cx,[cs:memhi]
 35223 00002A2A 8B0E[6403]              	mov	cx,[memhi]
 35224 00002A2E 81C18001                	add	cx,384			;need 6k buffer to handle country.sys
 35225                                  					;M023
 35226                                  	; 14/12/2022
 35227                                  	; ds = cs
 35228 00002A32 3B0E[A502]              	cmp	cx,[ALLOCLIM]
 35229                                  	;cmp	cx,[cs:ALLOCLIM]
 35230 00002A36 7745                    	ja	short tryqmemory	;cannot allocate the buffer for country.sys
 35231                                  
 35232 00002A38 BE[9B49]                	mov	si,cntry_drv		;ds:si -> cntry_drv
 35233 00002A3B 803C00                  	cmp	byte [si],0 		;default path?
 35234 00002A3E 7502                    	jne	short tryq_set_for_dos
 35235                                  
 35236 00002A40 46                      	inc	si
 35237 00002A41 46                      	inc	si			;ds:si -> cntry_root
 35238                                  
 35239                                  tryq_set_for_dos:
 35240                                  	; 14/12/2022
 35241                                  	; ds = cs
 35242 00002A42 C43E[7902]              	les	di,[sysi_country]
 35243                                  	;les	di,[cs:sysi_country]	;es:di -> country info tab in dos
 35244 00002A46 57                      	push	di			;save di
 35245                                  	;add	di,8
 35246 00002A47 83C708                  	add	di,country_cdpg_info.ccPath_CountrySys ; 8
 35247 00002A4A E8921E                  	call	move_asciiz		;set the path to country.sys in dos.
 35248 00002A4D 5F                      	pop	di			;es:di -> country info tab again.
 35249                                  
 35250                                  	; 14/12/2022	
 35251 00002A4E 8B0E[6403]              	mov	cx,[memhi]
 35252                                  	;mov	cx,[cs:memhi]
 35253 00002A52 8ED9                    	mov	ds,cx
 35254 00002A54 31F6                    	xor	si,si			;ds:si -> 2k buffer to be used.
 35255 00002A56 E8221D                  	call	setdoscountryinfo	;now do the job!!!
 35256                                  	; ds <> cs ; 14/12/2022
 35257 00002A59 7325                    	jnc	short tryqchkerr	;read error or could not find country,code page combination
 35258                                  
 35259 00002A5B 83F9FF                  	cmp	cx,-1			;could not find matching country_id,code page?
 35260 00002A5E 74A1                    	je	short tryqbad 		;then "invalid country code or code page"
 35261                                  
 35262                                  tryqfilebad:
 35263 00002A60 0E                      	push	cs
 35264 00002A61 07                      	pop	es
 35265 00002A62 2E803E[9B49]00          	cmp	byte [cs:cntry_drv],0	;is the default file used?
 35266 00002A68 7405                    	je	short tryqdefbad
 35267                                  
 35268 00002A6A BE[9B49]                	mov	si,cntry_drv
 35269 00002A6D EB03                    	jmp	short tryqbadload
 35270                                  
 35271                                  tryqdefbad:				;default file has been used.
 35272 00002A6F BE[9D49]                	mov	si,cntry_root		;es:si -> \country.sys in sysinit_seg
 35273                                  tryqbadload:
 35274 00002A72 E8751E                  	call	badload 		;ds will be restored to sysinit_seg
 35275                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35276                                  	; (SYSINIT:2A69h)
 35277 00002A75 8B0E[A302]              	mov	cx,[CONFBOT] ; ds = cs (from badload)
 35278                                  	;mov	cx,[cs:CONFBOT]
 35279                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35280                                  	;mov	cx,[cs:top_of_cdss]
 35281                                  	; 11/12/2022
 35282                                  	; ds = cs
 35283                                  	;mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]	
 35284 00002A79 8EC1                    	mov	es,cx			;restore es -> confbot.
 35285 00002A7B EB13                    	jmp	short coffj4
 35286                                  
 35287                                  tryqmemory:
 35288 00002A7D BA[9A4F]                	mov	dx,insufmemory
 35289                                  tryqchkerr:
 35290                                  	;mov	cx,[cs:CONFBOT]
 35291                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35292                                  	;mov	cx,[cs:top_of_cdss]
 35293                                  	; 12/12/2022
 35294 00002A80 0E                      	push	cs
 35295 00002A81 1F                      	pop	ds
 35296                                  	; 31/12/2022 - Retro DOS v4.2
 35297 00002A82 8B0E[A302]              	mov	cx,[CONFBOT] ; (MSDOS 6.21 IO.SYS, SYSINIT)
 35298                                  	;mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]
 35299 00002A86 8EC1                    	mov	es,cx			;restore es -> confbot seg
 35300                                  	;push	cs
 35301                                  	;pop	ds			;restore ds to sysinit_seg
 35302 00002A88 7306                    	jnc	short coffj4		;if no error,then exit
 35303                                  
 35304 00002A8A E8851E                  	call	print			;else show error message
 35305 00002A8D E8E602                  	call	error_line
 35306                                  coffj4:
 35307                                  	;mov	bx,[cs:cntryfilehandle]
 35308                                  	; 11/12/2022
 35309                                  	; ds = cs
 35310 00002A90 8B1E[5C03]              	mov	bx,[cntryfilehandle]
 35311 00002A94 B43E                    	mov	ah,3Eh
 35312 00002A96 CD21                    	int	21h			;close a file. don't care even if it fails.
 35313 00002A98 E951FA                  	jmp	coff
 35314                                  
 35315                                  ;--------------------------------------------
 35316                                  
 35317                                  cntry_error:
 35318                                  
 35319                                  ;function: show "invalid country code or code page" messages,or
 35320                                  ;		"error in country command" depending on the error code
 35321                                  ;		in ax returned by sysparse;
 35322                                  ;in:	ax - error code
 35323                                  ;	ds - sysinitseg
 35324                                  ;	es - confbot
 35325                                  ;out:	show message.  dx destroyed.
 35326                                  
 35327 00002A9B 83F806                  	cmp	ax,_$P_Out_Of_Range ; 6
 35328 00002A9E 7505                    	jne	short if64
 35329 00002AA0 BA[574F]                	mov	dx,badcountry		;"invalid country code or code page"
 35330 00002AA3 EB03                    	jmp	short en64
 35331                                  if64:
 35332 00002AA5 BA[7D4F]                	mov	dx,badcountrycom	;"error in contry command"
 35333                                  en64:
 35334 00002AA8 E8671E                  	call	print
 35335                                  	;call	error_line
 35336                                  	;retn
 35337                                  	; 11/12/2022
 35338 00002AAB E9C802                  	jmp	error_line
 35339                                  
 35340                                  ;------------------------------------------------------------------------------
 35341                                  ; files command
 35342                                  ;------------------------------------------------------------------------------
 35343                                  
 35344                                  ;******************************************************************************
 35345                                  ; function: parse the parameters of files= command.			      *
 35346                                  ;									      *
 35347                                  ; input :								      *
 35348                                  ;	es:si -> parameters in command line.				      *
 35349                                  ; output:								      *
 35350                                  ;	variable files set.						      *
 35351                                  ;									      *
 35352                                  ; subroutines to be called:						      *
 35353                                  ;	sysinit_parse							      *
 35354                                  ; logic:								      *
 35355                                  ; {									      *
 35356                                  ;	set di points to files_parms;					      *
 35357                                  ;	set dx,cx to 0; 						      *
 35358                                  ;	while (end of command line)					      *
 35359                                  ;	{ sysinit_parse;						      *
 35360                                  ;	  if (no error) then						      *
 35361                                  ;	     files = result_val._$P_picked_val				      *
 35362                                  ;	  else								      *
 35363                                  ;	     error exit;						      *
 35364                                  ;	};								      *
 35365                                  ; };									      *
 35366                                  ;									      *
 35367                                  ;******************************************************************************
 35368                                  
 35369                                  tryf:
 35370 00002AAE 80FC46                          cmp     ah,CONFIG_FILES ;  'F'
 35371 00002AB1 7528                    	jne	short tryl
 35372                                  
 35373                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35374                                  ; (SYSINIT:2AABh)
 35375                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35376                                  ;%if 0
 35377                                  ;ifdef	MULTI_CONFIG
 35378 00002AB3 E8241A                  	call	query_user              ; query the user if config_cmd
 35379 00002AB6 7223                    	jc	short tryl		; has the CONFIG_OPTION_QUERY bit set
 35380                                  ;endif
 35381                                  ;%endif ; 30/10/2022
 35382                                  
 35383                                  	; 14/12/2022
 35384                                  	; ds = cs
 35385                                  
 35386 00002AB8 BF[1222]                	mov	di,files_parms
 35387 00002ABB 31C9                    	xor	cx,cx
 35388                                  	; 03/01/2023
 35389                                  	;mov	dx,cx
 35390                                  do67:
 35391 00002ABD E86302                  	call	sysinit_parse
 35392 00002AC0 7303                    	jnc	short if67		; parse error
 35393                                  	;call	badparm_p		;  and show messages and end the search loop.
 35394                                  	;jmp	short sr67
 35395                                  	; 03/01/2023
 35396 00002AC2 E98D01                  	jmp	badparm_p_coff
 35397                                  if67:
 35398 00002AC5 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 35399 00002AC8 7408                    	je	short en67		; then end the $endloop
 35400                                  
 35401                                  	; 14/12/2022
 35402                                  	; ds = cs
 35403                                  	;;mov	al,[cs:rv_dword]
 35404                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 35405                                  	;mov	[cs:p_files],al		; save it temporarily
 35406                                  	;mov	al,[rv_dword]
 35407 00002ACA A0[AF21]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 35408 00002ACD A2[3122]                	mov	[p_files],al
 35409                                  
 35410 00002AD0 EBEB                    	jmp	short do67
 35411                                  en67:
 35412                                  	; 14/12/2022
 35413                                  	; ds = cs
 35414 00002AD2 A0[3122]                	mov	al,[p_files]
 35415 00002AD5 A2[9F02]                	mov	[FILES],al	
 35416                                  	;mov	al,[cs:p_files]
 35417                                  	;mov	[cs:FILES],al		; no error. really set the value now.
 35418                                  sr67:
 35419 00002AD8 E911FA                  	jmp	coff
 35420                                  
 35421                                  ; 04/04/2019 - Retro DOS v4.0
 35422                                  
 35423                                  ;------------------------------------------------------------------------------
 35424                                  ; lastdrive command
 35425                                  ;------------------------------------------------------------------------------
 35426                                  
 35427                                  ;******************************************************************************
 35428                                  ; function: parse the parameters of lastdrive= command. 		      *
 35429                                  ;									      *
 35430                                  ; input :								      *
 35431                                  ;	es:si -> parameters in command line.				      *
 35432                                  ; output:								      *
 35433                                  ;	set the variable num_cds.					      *
 35434                                  ;									      *
 35435                                  ; subroutines to be called:						      *
 35436                                  ;	sysinit_parse							      *
 35437                                  ; logic:								      *
 35438                                  ; {									      *
 35439                                  ;	set di points to ldrv_parms;					      *
 35440                                  ;	set dx,cx to 0; 						      *
 35441                                  ;	while (end of command line)					      *
 35442                                  ;	{ sysinit_parse;						      *
 35443                                  ;	  if (no error) then						      *
 35444                                  ;	     set num_cds to the returned value; 			      *
 35445                                  ;	  else	/*error exit*/						      *
 35446                                  ;	     error exit;						      *
 35447                                  ;	};								      *
 35448                                  ; };									      *
 35449                                  ;									      *
 35450                                  ;******************************************************************************
 35451                                  
 35452                                  tryl:
 35453 00002ADB 80FC4C                          cmp     ah,CONFIG_LASTDRIVE ; 'L'
 35454 00002ADE 7528                    	jne	short tryp
 35455                                  
 35456                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35457                                  ; (SYSINIT:2AE0h)
 35458                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35459                                  ;%if 0
 35460 00002AE0 E8F719                  	call	query_user      ; query the user if config_cmd
 35461 00002AE3 7223                    	jc	short tryp	; has the CONFIG_OPTION_QUERY bit set
 35462                                  ;endif
 35463                                  ;%endif ; 30/10/2022
 35464                                  
 35465                                  	; 14/12/2022
 35466                                  	; ds = cs
 35467                                  
 35468 00002AE5 BF[6922]                	mov	di,ldrv_parms
 35469 00002AE8 31C9                    	xor	cx,cx
 35470                                  	; 03/01/2023
 35471                                  	;mov	dx,cx
 35472                                  do73:
 35473 00002AEA E83602                  	call	sysinit_parse
 35474 00002AED 7303                    	jnc	short if73	; parse error
 35475                                  	;call	badparm_p	;  and show messages and end the search loop.
 35476                                  	;jmp	short sr73
 35477                                  	; 03/01/2023
 35478 00002AEF E96001                  	jmp	badparm_p_coff
 35479                                  if73:
 35480 00002AF2 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 35481 00002AF5 7408                    	je	short en73	; then end the $endloop
 35482                                  
 35483                                  	; 14/12/2022
 35484                                  	; ds = cs
 35485                                  	;;mov	al,[cs:rv_dword]
 35486                                  	;mov	al,[cs:rv_byte]	; pick up the drive number
 35487                                  	;mov	[cs:p_ldrv],al	; save it temporarily
 35488                                  
 35489                                  	;mov	al,[rv_dword]
 35490 00002AF7 A0[AF21]                	mov	al,[rv_byte]
 35491 00002AFA A2[7D22]                	mov	[p_ldrv],al
 35492                                  
 35493 00002AFD EBEB                    	jmp	short do73
 35494                                  en73:
 35495                                  	; 14/12/2022
 35496                                  	; ds = cs
 35497 00002AFF A0[7D22]                	mov	al,[p_ldrv]
 35498 00002B02 A2[A202]                	mov	[NUM_CDS],al
 35499                                  	;mov	al,[cs:p_ldrv]
 35500                                  	;mov	[cs:NUM_CDS],al	; no error. really set the value now.
 35501                                  sr73:
 35502 00002B05 E9E4F9                  	jmp	coff
 35503                                  
 35504                                  ;--------------------------------------------------------------------------
 35505                                  ; setting drive parameters
 35506                                  ;--------------------------------------------------------------------------
 35507                                  
 35508                                  tryp:
 35509 00002B08 80FC50                          cmp     ah,CONFIG_DRIVPARM ; 'P'
 35510 00002B0B 7516                    	jne	short tryk
 35511                                  
 35512                                  ; 31/12/2022 - Retro DOS v4.2
 35513                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35514                                  ;%if 0
 35515                                  ;ifdef	MULTI_CONFIG
 35516 00002B0D E8CA19                  	call	query_user      ; query the user if config_cmd
 35517 00002B10 7211                    	jc	short tryk	; has the CONFIG_OPTION_QUERY bit set
 35518                                  ;endif
 35519                                  ;%endif ; 30/10/2022
 35520                                  
 35521 00002B12 E8AE0E                  	call	parseline
 35522 00002B15 7209                    	jc	short trypbad
 35523 00002B17 E8C70D                  	call	setparms
 35524 00002B1A E8090E                  	call	diddleback
 35525                                  
 35526                                  ; No error check here, because setparms and diddleback have no error 
 35527                                  ; returns, and setparms as coded now can return with carry set. 
 35528                                  ;       jc	short trypbad
 35529                                  
 35530                                  	; 12/12/2022
 35531                                  	; cf = 0
 35532                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35533                                  	;jc	short trypbad
 35534                                  	
 35535 00002B1D E9CCF9                  	jmp	coff
 35536                                  trypbad:
 35537 00002B20 E91F02                  	jmp	badop
 35538                                  
 35539                                  ;--------------------------------------------------------------------------
 35540                                  ; setting internal stack parameters
 35541                                  ; stacks=m,n where
 35542                                  ;	m is the number of stacks (range 8 to 64,default 9)
 35543                                  ;	n is the stack size (range 32 to 512 bytes,default 128)
 35544                                  ; j.k. 5/5/86: stacks=0,0 implies no stack installation.
 35545                                  ;	any combinations that are not within the specified limits will
 35546                                  ;	result in "unrecognized command" error.
 35547                                  ;--------------------------------------------------------------------------
 35548                                  
 35549                                  ;**************************************************************************
 35550                                  ;									  *
 35551                                  ; function: parse the parameters of stacks= command.			  *
 35552                                  ;	    the minimum value for "number of stacks" and "stack size" is  *
 35553                                  ;	    8 and 32 each.  in the definition of sysparse value list,they *
 35554                                  ;	    are set to 0.  this is for accepting the exceptional case of  *
 35555                                  ;	    stacks=0,0 case (,which means do not install the stack.)	  *
 35556                                  ;	    so,after sysparse is done,we have to check if the entered	  *
 35557                                  ;	    values (stack_count,stack_size) are within the actual range,  *
 35558                                  ;	    (or if "0,0" pair has been entered.)			  *
 35559                                  ; input :								  *
 35560                                  ;	es:si -> parameters in command line.				  *
 35561                                  ; output:								  *
 35562                                  ;	set the variables stack_count,stack_size.			  *
 35563                                  ;									  *
 35564                                  ; subroutines to be called:						  *
 35565                                  ;	sysinit_parse							  *
 35566                                  ; logic:								  *
 35567                                  ; {									  *
 35568                                  ;	set di points to stks_parms;					  *
 35569                                  ;	set dx,cx to 0; 						  *
 35570                                  ;	while (end of command line)					  *
 35571                                  ;	{ sysinit_parse;						  *
 35572                                  ;	  if (no error) then						  *
 35573                                  ;	     { if (cx == 1) then /* first positional = stack count */	  *
 35574                                  ;		   p_stack_count = result_val._$P_picked_val;		  *
 35575                                  ;	       if (cx == 2) then /* second positional = stack size */	  *
 35576                                  ;		   p_stack_size = result_val._$P_picked_val;		  *
 35577                                  ;	     }								  *
 35578                                  ;	  else	/*error exit*/						  *
 35579                                  ;	     error exit;						  *
 35580                                  ;	};								  *
 35581                                  ;	here check p_stack_count,p_stack_size if it meets the condition;  *
 35582                                  ;	if o.k.,then set stack_count,stack_size;			  *
 35583                                  ;	 else error_exit;						  *
 35584                                  ; };									  *
 35585                                  ;**************************************************************************
 35586                                  
 35587                                  tryk:
 35588                                          ;if      stacksw
 35589                                  
 35590 00002B23 80FC4B                          cmp     ah,CONFIG_STACKS ; 'K'
 35591 00002B26 7402                    	je	short do_tryk
 35592                                  skip_it4:
 35593 00002B28 EB79                    	jmp	short trys	; 15/12/2022
 35594                                  do_tryk:
 35595                                  
 35596                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35597                                  ; (SYSINIT:2B33h)
 35598                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35599                                  ;%if 0
 35600                                  ;ifdef	MULTI_CONFIG
 35601 00002B2A E8AD19                         call	query_user              ; query the user if config_cmd
 35602 00002B2D 72F9                           jc	short skip_it4		; has the CONFIG_OPTION_QUERY bit set
 35603                                  ;endif
 35604                                  ;%endif	; 30/10/2022
 35605                                  
 35606                                  	; 14/12/2022
 35607                                  	; ds = cs
 35608                                  
 35609 00002B2F BF[7E22]                	mov	di,stks_parms
 35610 00002B32 31C9                    	xor	cx,cx
 35611                                  	; 03/01/2023
 35612                                  	;mov	dx,cx
 35613                                  do79:
 35614 00002B34 E8EC01                  	call	sysinit_parse
 35615 00002B37 730B                    	jnc	short if79		; parse error
 35616                                  
 35617 00002B39 BA[0950]                	mov	dx,badstack		; "invalid stack parameter"
 35618 00002B3C E8D31D                  	call	print			;  and show messages and end the search loop.
 35619 00002B3F E83402                  	call	error_line
 35620                                  	;jmp	sr79
 35621                                  	; 11/12/2022
 35622 00002B42 EB39                    	jmp	short sr79
 35623                                  if79:
 35624 00002B44 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 35625 00002B47 7412                    	je	short en79		; then end the $endloop
 35626                                  
 35627                                  	; 14/12/2022
 35628                                  	; ds = cs
 35629                                  
 35630                                  	;;mov	ax,[cs:rv_dword]
 35631                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 35632                                  	;mov	ax,[rv_dword]
 35633 00002B49 A1[AF21]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 35634                                  
 35635 00002B4C 83F901                  	cmp	cx,1
 35636 00002B4F 7505                    	jne	short if83
 35637                                  
 35638                                  	; 14/12/2022
 35639                                  	;mov	[cs:p_stack_count],ax
 35640                                  	;jmp	short en83
 35641 00002B51 A3[B322]                	mov	[p_stack_count],ax
 35642 00002B54 EBDE                    	jmp	short do79
 35643                                  if83:
 35644                                  	; 14/12/2022
 35645                                  	;mov	[cs:p_stack_size],ax
 35646 00002B56 A3[B522]                	mov	[p_stack_size],ax
 35647                                  en83:
 35648 00002B59 EBD9                    	jmp	short do79
 35649                                  en79:
 35650                                  	; 14/12/2022
 35651                                  	; ds = cs
 35652 00002B5B A1[B322]                	mov	ax,[p_stack_count]
 35653 00002B5E 09C0                    	or	ax,ax
 35654 00002B60 741E                    	jz	short if87		
 35655                                  
 35656                                  	; 14/12/2022
 35657                                  	;cmp	word [p_stack_count],0
 35658                                  	;;cmp	word [cs:p_stack_count],0
 35659                                  	;je	short if87
 35660                                  
 35661                                  	; 14/12/2022
 35662 00002B62 83F808                  	cmp	ax, mincount ; 8
 35663                                  	;cmp	word [cs:p_stack_count],mincount ; 8
 35664                                  	; 15/12/2022
 35665 00002B65 721F                    	jb	short en87
 35666 00002B67 833E[B522]20            	cmp	word [p_stack_size],minsize ; 32
 35667                                  	;cmp	word [cs:p_stack_size],minsize ; 32
 35668                                  	; 15/12/2022
 35669 00002B6C 7218                    	jb	short en87
 35670                                  if94:
 35671                                  	; 14/12/2022
 35672                                  	; ds = cs
 35673                                  	; ax = [p_stack_count]
 35674                                  	;mov	ax,[p_stack_count]
 35675                                  	;;mov	ax,[cs:p_stack_count]
 35676 00002B6E A3[8C02]                	mov	[stack_count],ax
 35677                                  	;mov	[cs:stack_count],ax
 35678                                  	;mov	ax,[cs:p_stack_size]
 35679 00002B71 A1[B522]                	mov	ax,[p_stack_size]
 35680                                  	;mov	[cs:stack_size],ax
 35681 00002B74 A3[8E02]                	mov	[stack_size],ax
 35682                                  	;mov	word [cs:stack_addr],-1	; stacks= been accepted.
 35683 00002B77 C706[9002]FFFF          	mov	word [stack_addr],-1
 35684                                  sr79:
 35685 00002B7D E96CF9                  	jmp	coff
 35686                                  
 35687                                  if87:
 35688                                  	; 14/12/2022
 35689 00002B80 3906[B522]              	cmp	[p_stack_size],ax ; 0
 35690 00002B84 74E8                    	je	short if94 ; ax = [p_stack_count] = 0
 35691                                  	;cmp	word [cs:p_stack_size],0
 35692                                  	;je	short if94
 35693                                  en87:
 35694                                  	; 15/12/2022
 35695                                  	; ([p_stack_count] is invalid, use default values)
 35696                                  	; 14/12/2022
 35697                                  	; ds = cs
 35698 00002B86 C706[8C02]0900          	mov	word [stack_count],defaultcount ; 9
 35699 00002B8C C706[8E02]8000          	mov	word [stack_size],defaultsize ; 128
 35700 00002B92 C706[9002]0000          	mov	word [stack_addr],0
 35701                                  	;mov	word [cs:stack_count],defaultcount ; 9
 35702                                  	;				; reset to default value.
 35703                                  	;mov	word [cs:stack_size],defaultsize ; 128
 35704                                  	;mov	word [cs:stack_addr],0
 35705                                  
 35706 00002B98 BA[0950]                	mov	dx,badstack
 35707 00002B9B E8741D                  	call	print
 35708 00002B9E E8D501                  	call	error_line
 35709 00002BA1 EBDA                    	jmp	short sr79
 35710                                  
 35711                                  ; 15/12/2022
 35712                                  %if 0
 35713                                  	mov	di,stks_parms
 35714                                  	xor	cx,cx
 35715                                  	; 03/01/2023
 35716                                  	;mov	dx,cx
 35717                                  do79:
 35718                                  	call	sysinit_parse
 35719                                  	jnc	short if79		; parse error
 35720                                  
 35721                                  	mov	dx,badstack		; "invalid stack parameter"
 35722                                  	call	print			;  and show messages and end the search loop.
 35723                                  	call	error_line
 35724                                  	;jmp	sr79
 35725                                  	; 11/12/2022
 35726                                  	jmp	short sr79
 35727                                  if79:
 35728                                  	cmp	ax,_$P_RC_EOL		; end of line?
 35729                                  	je	short en79		; then end the $endloop
 35730                                  
 35731                                  	;mov	ax,[cs:rv_dword]
 35732                                  	mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 35733                                  	cmp	cx,1
 35734                                  	jne	short if83
 35735                                  
 35736                                  	mov	[cs:p_stack_count],ax
 35737                                  	jmp	short en83
 35738                                  if83:
 35739                                  	mov	[cs:p_stack_size],ax
 35740                                  en83:
 35741                                  	jmp	short do79
 35742                                  en79:
 35743                                  	cmp	word [cs:p_stack_count],0
 35744                                  	je	short if87
 35745                                  
 35746                                  	cmp	word [cs:p_stack_count],mincount ; 8
 35747                                  	jb	short ll88
 35748                                  	cmp	word [cs:p_stack_size],minsize ; 32
 35749                                  	jnb	short if88
 35750                                  ll88:
 35751                                  	mov	word [cs:p_stack_count],-1 ; invalid
 35752                                  if88:
 35753                                  	jmp	short en87
 35754                                  
 35755                                  	; 11/12/2022
 35756                                  if94:
 35757                                  	mov	ax,[cs:p_stack_count]
 35758                                  	mov	[cs:stack_count],ax
 35759                                  	mov	ax,[cs:p_stack_size]
 35760                                  	mov	[cs:stack_size],ax
 35761                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 35762                                  sr79:
 35763                                  	jmp	coff
 35764                                  
 35765                                  if87:
 35766                                  	cmp	word [cs:p_stack_size],0
 35767                                  	je	short en87
 35768                                  	mov	word [cs:p_stack_count],-1 ; invalid
 35769                                  en87:
 35770                                  	cmp	word [cs:p_stack_count],-1 ; invalid?
 35771                                  	jne	short if94
 35772                                  
 35773                                  	mov	word [cs:stack_count],defaultcount ; 9
 35774                                  					; reset to default value.
 35775                                  	mov	word [cs:stack_size],defaultsize ; 128
 35776                                  	mov	word [cs:stack_addr],0
 35777                                  
 35778                                  	mov	dx,badstack
 35779                                  	call	print
 35780                                  	call	error_line
 35781                                  	jmp	short sr79
 35782                                  
 35783                                  %endif
 35784                                  
 35785                                  ; 11/12/2022
 35786                                  %if 0 
 35787                                  if94:
 35788                                  	mov	ax,[cs:p_stack_count]
 35789                                  	mov	[cs:stack_count],ax
 35790                                  	mov	ax,[cs:p_stack_size]
 35791                                  	mov	[cs:stack_size],ax
 35792                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 35793                                  sr79:
 35794                                  	jmp	coff
 35795                                  %endif
 35796                                  	;endif
 35797                                  
 35798                                  ;------------------------------------------------------------------------
 35799                                  ; shell command
 35800                                  ;------------------------------------------------------------------------
 35801                                  
 35802                                  trys:
 35803 00002BA3 80FC53                          cmp     ah,CONFIG_SHELL ; 'S'
 35804 00002BA6 755B                    	jne	short tryx
 35805                                  
 35806                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35807                                  ; (SYSINIT:2BE1h)
 35808                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35809                                  ;%if 0
 35810                                  ;ifdef	MULTI_CONFIG
 35811 00002BA8 E82F19                  	call	query_user              ; query the user if config_cmd
 35812 00002BAB 7256                    	jc	short tryx		; has the CONFIG_OPTION_QUERY bit set
 35813 00002BAD 2EC606[E849]01          	mov	byte [cs:newcmd],1
 35814                                  ;endif
 35815                                  ;%endif ; 30/10/2022
 35816                                  
 35817                                  	;;mov	word [cs:command_line],0 ; zap length,first byte of command-line
 35818                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35819                                  	;mov	byte [cs:command_line+1],0
 35820                                  	; 15/12/2022
 35821                                  	; ds = cs
 35822                                  	; 08/09/2023
 35823                                  	;mov	byte [command_line+1],0
 35824 00002BB3 C706[794A]0000          	mov	word [command_line],0	; zap length,first byte of command-line
 35825                                  
 35826 00002BB9 BF[EC49]                        mov     di,commnd+1		; we already have the first char
 35827 00002BBC 8845FF                          mov     [di-1],al               ; of the new shell in AL, save it now
 35828                                  storeshell:
 35829 00002BBF E8AB1A                  	call	getchr
 35830 00002BC2 08C0                            or      al,al                   ; this is the normal case: "organize"
 35831 00002BC4 741C                            jz	short getshparms	; put a ZERO right after the filename
 35832                                  
 35833 00002BC6 3C20                            cmp     al," "                  ; this may happen if there are no args
 35834 00002BC8 7209                            jb	short endofshell	; I suppose...
 35835 00002BCA 8805                    	mov	[di],al
 35836 00002BCC 47                      	inc	di
 35837                                          ;cmp    di,commnd+63		; this makes sure we don't overflow
 35838                                          ;jb	short storeshell	; commnd (the filename)
 35839                                          ;jmp	short endofshell
 35840                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35841                                  	;jmp	short storeshell
 35842                                  	; 03/01/2023
 35843 00002BCD 81FF[2A4A]              	cmp	di,commnd+63		; this makes sure we don't overflow
 35844 00002BD1 72EC                            jb	short storeshell	; commnd (the filename)
 35845                                  	;jmp	short endofshell
 35846                                  
 35847                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35848                                  ;getshparms:
 35849                                  ;	mov     byte [di],0		; zero-terminate the filename
 35850                                  ;	mov     di,command_line+1	; prepare to process the command-line
 35851                                  ;
 35852                                  ;parmloop:
 35853                                  ;	call	getchr
 35854                                  ;	cmp	al," "
 35855                                  ;	jb	short endofparms
 35856                                  ;	mov	[di],al
 35857                                  ;	inc	di
 35858                                  ;	cmp     di,command_line+126
 35859                                  ;	jb	short parmloop
 35860                                  ;endofparms:
 35861                                  ;	mov     cx,di
 35862                                  ;	sub     cx,command_line+1
 35863                                  ;	mov     [cs:command_line],cl
 35864                                  ;
 35865                                  ;endofshell:
 35866                                  ;	mov     byte [di],0		; zero-terminate the filename (or
 35867                                  ;					; the command-line as the case may be)
 35868                                  ;skipline:
 35869                                  ;       cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 35870                                  ;       je	short endofline		; the line: watch for ever-present LF
 35871                                  ;call	getchr
 35872                                  ;       jnc	short skipline		; keep it up as long as there are chars
 35873                                  ;
 35874                                  ;endofline:
 35875                                  ;       jmp     conflp
 35876                                  
 35877                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35878                                  endofshell:
 35879 00002BD3 C60500                       	mov     byte [di],0		; zero-terminate the filename (or
 35880                                  					; the command-line as the case may be)
 35881                                  	; 11/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 35882                                  	; MSDOS 6.21 IO.SYS - SYSINIT:2C33h
 35883                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:314Eh
 35884                                  	;call	getchr
 35885                                  skipline:		; MSDOS 6.21 IO.SYS - SYSINIT:2C33h
 35886 00002BD6 3C0A                    	cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 35887 00002BD8 7405                    	je	short endofline		; the line: watch for ever-present LF
 35888 00002BDA E8901A                  	call	getchr
 35889                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.1 IO.SYS)
 35890                                  	; (SYSINIT:2C3Ah)
 35891 00002BDD 73F7                    	jnb	short skipline
 35892                                  	
 35893                                  endofline:
 35894 00002BDF E9B3F8                  	jmp     conflp
 35895                                  
 35896                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35897                                  getshparms:
 35898                                  	; 18/12/2022
 35899                                  	; al = 0
 35900 00002BE2 8805                    	mov	[di],al ; 0
 35901                                  	;mov	byte [di],0		; zero-terminate the filename
 35902 00002BE4 BF[7A4A]                	mov     di,command_line+1	; prepare to process the command-line
 35903                                  parmloop:
 35904 00002BE7 E8831A                  	call	getchr
 35905 00002BEA 3C20                    	cmp	al," " ; 20h
 35906                                  	;jb	short endofshell
 35907                                  	; 03/01/2023
 35908 00002BEC 7209                    	jb	short endofparms
 35909                                  
 35910 00002BEE 8805                    	mov	[di],al
 35911 00002BF0 47                      	inc	di
 35912                                  	;jmp	short parmloop
 35913                                  	; 03/01/2023 - Retro DOS v4.2
 35914 00002BF1 81FF[F74A]              	cmp     di,command_line+126
 35915 00002BF5 72F0                    	jb	short parmloop
 35916                                  
 35917                                  	; 03/01/2023 - Retro DOS v4.2
 35918                                  endofparms:
 35919 00002BF7 89F9                    	mov	cx,di
 35920 00002BF9 81E9[7A4A]              	sub	cx,command_line+1
 35921                                  	;mov	[cs:command_line],cl
 35922                                  	; 03/01/2023
 35923 00002BFD 880E[794A]              	mov	[command_line],cl
 35924 00002C01 EBD0                    	jmp	short endofshell
 35925                                  
 35926                                  ;------------------------------------------------------------------------
 35927                                  ; fcbs command
 35928                                  ;------------------------------------------------------------------------
 35929                                  
 35930                                  ;************************************************************************
 35931                                  ; function: parse the parameters of fcbs= command.			*
 35932                                  ;									*
 35933                                  ; input :								*
 35934                                  ;	es:si -> parameters in command line.				*
 35935                                  ; output:								*
 35936                                  ;	set the variables fcbs,keep.					*
 35937                                  ;									*
 35938                                  ; subroutines to be called:						*
 35939                                  ;	sysinit_parse							*
 35940                                  ; logic:								*
 35941                                  ; {									*
 35942                                  ;	set di points to fcbs_parms;					*
 35943                                  ;	set dx,cx to 0; 						*
 35944                                  ;	while (end of command line)					*
 35945                                  ;	{ sysparse;							*
 35946                                  ;	  if (no error) then						*
 35947                                  ;	     { if (cx == 1) then /* first positional = fcbs */		*
 35948                                  ;		   fcbs = result_val._$P_picked_val;			*
 35949                                  ;	       if (cx == 2) then /* second positional = keep */ 	*
 35950                                  ;		   keep = result_val._$P_picked_val;			*
 35951                                  ;	     }								*
 35952                                  ;	  else	/*error exit*/						*
 35953                                  ;	     error exit;						*
 35954                                  ;	};								*
 35955                                  ; };									*
 35956                                  ;************************************************************************
 35957                                  
 35958                                  tryx:
 35959 00002C03 80FC58                          cmp     ah,CONFIG_FCBS  ; 'X'
 35960                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35961 00002C06 7534                    	jne	short try1
 35962                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35963                                  	;jne	short tryy	; comment command
 35964                                  
 35965                                  ; 31/12/2022 - Retro DOS v4.2
 35966                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35967                                  ;%if 0
 35968                                  ;ifdef	MULTI_CONFIG
 35969 00002C08 E8CF18                  	call	query_user      ; query the user if config_cmd
 35970 00002C0B 722F                    	jc	short try1	; has the CONFIG_OPTION_QUERY bit set
 35971                                  ;endif
 35972                                  ;%endif ; 30/10/2022
 35973                                  
 35974 00002C0D BF[3222]                	mov	di,fcbs_parms
 35975 00002C10 31C9                    	xor	cx,cx
 35976                                  	; 03/01/2023
 35977                                  	;mov	dx,cx
 35978                                  do98:
 35979 00002C12 E80E01                  	call	sysinit_parse
 35980                                          ; 03/01/2023
 35981                                  	;jnc	short if98	; parse error
 35982                                          ;call	badparm_p	;  and show messages and end the search loop.
 35983                                  	;jmp	short sr98
 35984                                  	;------------------------
 35985                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35986 00002C15 723B                    	jc	short badparm_p_coff
 35987                                  if98:
 35988 00002C17 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 35989 00002C1A 7412                    	je	short en98	; then end the $endloop
 35990                                  
 35991                                  	;;mov	al,[cs:rv_dword]
 35992                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 35993                                  	; 15/12/2022
 35994                                  	; ds = cs
 35995 00002C1C A0[AF21]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 35996 00002C1F 83F901                  	cmp	cx,1		; the first positional?
 35997 00002C22 7505                    	jne	short if102
 35998                                  	;mov	[cs:p_fcbs],al
 35999                                  	; 15/12/2022
 36000 00002C24 A2[6722]                	mov	[p_fcbs],al
 36001                                  	;jmp	short en102
 36002 00002C27 EBE9                    	jmp	short do98
 36003                                  if102:
 36004                                  	;mov	[cs:p_keep],al
 36005                                  	; 15/12/2022
 36006 00002C29 A2[6822]                	mov	[p_keep],al
 36007                                  en102:
 36008 00002C2C EBE4                    	jmp	short do98
 36009                                  en98:
 36010                                  	; 15/12/2022
 36011                                  	; ds = cs
 36012 00002C2E A0[6722]                	mov	al,[p_fcbs]
 36013 00002C31 A2[A002]                	mov	[FCBS],al
 36014 00002C34 C606[A102]00            	mov	byte [KEEP],0
 36015                                  	;mov	al,[cs:p_fcbs]	 ; M017
 36016                                  	;mov	[cs:FCBS],al	 ; M017
 36017                                  	;mov	byte [cs:KEEP],0 ; M017
 36018                                  sr98:
 36019 00002C39 E9B0F8                  	jmp	coff
 36020                                  
 36021                                  ; 31/12/2022 - Retro DOS v4.2
 36022                                  %if 0
 36023                                  
 36024                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36025                                  ;-------------------------------------------------------------------------
 36026                                  ; comment= do nothing. just decrease chrptr,and increase count for correct
 36027                                  ;		line number
 36028                                  ;-------------------------------------------------------------------------
 36029                                  
 36030                                  tryy:
 36031                                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 36032                                  	jne	short try0
 36033                                  
 36034                                  donothing:
 36035                                  	; 15/12/2022
 36036                                  	; ds = cs
 36037                                  	dec	word [chrptr]
 36038                                  	inc	word [count]
 36039                                  	; 02/11/2022
 36040                                  	;dec	word [cs:chrptr]
 36041                                  	;inc	word [cs:count]
 36042                                  
 36043                                  	jmp	coff
 36044                                  
 36045                                  ;------------------------------------------------------------------------
 36046                                  ; rem command
 36047                                  ;------------------------------------------------------------------------
 36048                                  
 36049                                  try0:				; do nothing with this line.
 36050                                  	cmp     ah,CONFIG_REM ; '0'
 36051                                  	je	short donothing
 36052                                  
 36053                                  %endif
 36054                                  
 36055                                  ; 07/04/2019 - Retro DOS v4.0
 36056                                  
 36057                                  ;-----------------------------------------------------------------------
 36058                                  ; switches command
 36059                                  ;-----------------------------------------------------------------------
 36060                                  
 36061                                  ;***********************************************************************
 36062                                  ;								       *
 36063                                  ; function: parse the option switches specified.		       *
 36064                                  ; note - this command is intended for the future use also.	       *
 36065                                  ; when we need to set system data flag,use this command.	       *
 36066                                  ;								       *
 36067                                  ; input :							       *
 36068                                  ;	es:si -> parameters in command line.			       *
 36069                                  ; output:							       *
 36070                                  ;	p_swit_k set if /k option chosen.			       *
 36071                                  ;								       *
 36072                                  ; subroutines to be called:					       *
 36073                                  ;	sysinit_parse						       *
 36074                                  ; logic:							       *
 36075                                  ; {								       *
 36076                                  ;	set di points to swit_parms;  /*parse control definition*/     *
 36077                                  ;	set dx,cx to 0; 					       *
 36078                                  ;	while (end of command line)				       *
 36079                                  ;	{ sysinit_parse;					       *
 36080                                  ;	  if (no error) then					       *
 36081                                  ;	       if (result_val._$P_synonym_ptr == swit_k) then	       *
 36082                                  ;		    p_swit_k = 1				       *
 36083                                  ;	       endif						       *
 36084                                  ;	  else {show error message;error exit}			       *
 36085                                  ;	};							       *
 36086                                  ; };								       *
 36087                                  ;								       *
 36088                                  ;***********************************************************************
 36089                                  
 36090                                  SUPPRESS_WINA20	EQU 00000010b	; M025 ; (DOSSYM.INC, MSDOS 6.0)
 36091                                  
 36092                                  try1:
 36093 00002C3C 80FC31                          cmp     ah,CONFIG_SWITCHES ; '1'
 36094 00002C3F 7402                    	je	short do_try1	; switches= command entered?
 36095                                  skip_it5:
 36096                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36097                                  	; (SYSINIT:2C8Ah)
 36098 00002C41 EB7F                    	jmp	tryv
 36099                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36100                                  	;jmp	tryz
 36101                                  
 36102                                  do_try1:
 36103                                  
 36104                                  ; 31/12/2022 - Retro DOS v4.2
 36105                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36106                                  ;%if 0
 36107                                  ;ifdef	MULTI_CONFIG
 36108 00002C43 E89418                  	call	query_user      ; query the user if config_cmd
 36109 00002C46 72F9                    	jc	short skip_it5	; has the CONFIG_OPTION_QUERY bit set
 36110                                  ;endif
 36111                                  ;%endif ; 30/10/2022
 36112                                  
 36113 00002C48 BF[CC22]                	mov	di,swit_parms
 36114 00002C4B 31C9                    	xor	cx,cx
 36115                                  	; 03/01/2023
 36116                                  	;mov	dx,cx
 36117                                  do110:
 36118 00002C4D E8D300                  	call	sysinit_parse
 36119 00002C50 7306                    	jnc	short if110	; parse error
 36120                                  	;call	badparm_p	;  and show messages and end the search loop.
 36121                                  	;jmp	short sr110
 36122                                  	; -----------------------
 36123                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36124                                  badparm_p_coff:
 36125 00002C52 E8F900                  	call	badparm_p
 36126 00002C55 E994F8                  	jmp	coff
 36127                                  	;------------------------
 36128                                  if110:
 36129 00002C58 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 36130 00002C5B 742D                    	je	short en110	; then jmp to $endloop for semantic check
 36131                                  
 36132                                  	; 15/12/2022
 36133                                  	; ds = cs
 36134                                  	;;cmp	word [cs:result_val_swoff],swit_k
 36135                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 36136 00002C5D 813E[AD21][E822]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 36137 00002C63 7507                    	jne	short if115	;				;M059
 36138                                  	; 15/12/2022
 36139 00002C65 C606[1B23]01            	mov	byte [p_swit_k],1
 36140                                  	;mov	byte [cs:p_swit_k],1	; set the flag
 36141 00002C6A EBE1                    	jmp	short do110
 36142                                  if115:	
 36143                                  	; 15/12/2022							;M059
 36144                                  	;;cmp	word [cs:result_val_swoff],swit_t
 36145                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t	;M059
 36146 00002C6C 813E[AD21][0C23]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t
 36147 00002C72 7507                    	jne	short if116					;M059 M063
 36148                                  	; 15/12/2022
 36149 00002C74 C606[1C23]01            	mov	byte [p_swit_t],1
 36150                                  	;mov	byte [cs:p_swit_t],1				;M059
 36151 00002C79 EBD2                    	jmp	short do110					;M059
 36152                                  if116:
 36153                                  	; 15/12/2022
 36154                                  	;;cmp	word [cs:result_val_swoff],swit_w
 36155                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w	;M063
 36156 00002C7B 813E[AD21][1823]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w
 36157 00002C81 75CA                    	jne	short do110					;M063
 36158                                  	; 15/12/2022
 36159 00002C83 C606[1D23]01            	mov	byte [p_swit_w],1
 36160                                  	;mov	byte [cs:p_swit_w],1				;M063
 36161 00002C88 EBC3                    	jmp	short do110					;M063
 36162                                  en110:
 36163                                  	; 15/12/2022
 36164                                  	; ds = cs
 36165 00002C8A 803E[1B23]01            	cmp	byte [p_swit_k],1
 36166                                  	;cmp	byte [cs:p_swit_k],1	; if /k entered,
 36167 00002C8F 1E                      	push	ds
 36168                                  	;;mov	ax,Bios_Data
 36169                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 36170                                  	; 21/10/2022
 36171 00002C90 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 36172 00002C93 8ED8                    	mov	ds,ax
 36173 00002C95 750A                    	jne	short if117
 36174 00002C97 C606[7E04]00            	mov	byte [keyrd_func],0 ; 4E5h ; use the conventional keyboard functions
 36175 00002C9C C606[7F04]01            	mov	byte [keysts_func],1 ; 4E6h (for MSDOS 6.21 IO.SYS)
 36176                                  if117:
 36177                                  	; 15/12/2022
 36178                                  	; ds <> cs
 36179 00002CA1 2EA0[1C23]              	mov	al,[cs:p_swit_t]				;M059
 36180 00002CA5 A2[8B04]                	mov	[t_switch],al	; 4F2h (for MSDOS 6.21 IO.SYS)	;M059
 36181                                  
 36182 00002CA8 2E803E[1D23]00          	cmp	byte [cs:p_swit_w],0				;M063
 36183 00002CAE 740E                    	je	short skip_dos_flag				;M063
 36184 00002CB0 06                      	push	es
 36185 00002CB1 53                      	push	bx
 36186 00002CB2 B452                    	mov	ah,GET_IN_VARS ; 52h				;M063
 36187 00002CB4 CD21                    	int	21h						;M063
 36188                                  			; DOS - 2+ internal - GET LIST OF LISTS
 36189                                  			; Return: ES:BX -> DOS list of lists
 36190                                  	;or	bytes [es:86h],2
 36191 00002CB6 26800E860002            	or	byte [es:DOS_FLAG_OFFSET],SUPPRESS_WINA20 ; 2	;M063
 36192 00002CBC 5B                      	pop	bx
 36193 00002CBD 07                      	pop	es
 36194                                  skip_dos_flag:							;M063
 36195 00002CBE 1F                      	pop	ds
 36196                                  sr110:
 36197 00002CBF E92AF8                  	jmp	coff
 36198                                  
 36199                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36200                                  ; (SYSINIT:2D14h)
 36201                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36202                                  ;%if 0
 36203                                  
 36204                                  tryv:
 36205                                  
 36206                                  ;ifdef	MULTI_CONFIG
 36207                                  ;------------------------------------------------------------------------
 36208                                  ; set command (as in "set var=value<cr/lf>")
 36209                                  ;------------------------------------------------------------------------
 36210                                  
 36211 00002CC2 80FC56                  	cmp	ah,CONFIG_SET  ; 'V'
 36212 00002CC5 750F                    	jne	short tryn
 36213 00002CC7 E81018                  	call	query_user      ; query the user if config_cmd
 36214 00002CCA 720A                    	jc	short tryn 	; has the CONFIG_OPTION_QUERY bit set
 36215 00002CCC E80714                  	call	copy_envvar     ; copy var at ES:SI to "config_wrkseg"
 36216 00002CCF 73EE                    	jnc	short sr110	; no error
 36217                                  err:    
 36218 00002CD1 E8A200                  	call	error_line      ; whoops, display error in line XXX
 36219 00002CD4 EBE9                    	jmp	short sr110     ; jump to coff (to skip to next line)
 36220                                  
 36221                                  ;------------------------------------------------------------------------
 36222                                  ; numlock command (as in "numlock=on|off")
 36223                                  ;------------------------------------------------------------------------
 36224                                  tryn:
 36225 00002CD6 80FC4E                  	cmp	ah,CONFIG_NUMLOCK  ;'N'
 36226 00002CD9 750C                    	jne	short tryy            ;
 36227 00002CDB E8FC17                  	call	query_user      ; query thye user if config_cmd
 36228 00002CDE 7207                    	jc	short tryy	; has the CONFIG_OPTION_QUERY bit set
 36229 00002CE0 E88810                  	call	set_numlock
 36230 00002CE3 72EC                    	jc	short err
 36231 00002CE5 EBD8                    	jmp	short sr110	; all done
 36232                                  
 36233                                  ;endif	;MULTI_CONFIG
 36234                                  
 36235                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36236                                  ;-------------------------------------------------------------------------
 36237                                  ; comment= do nothing. just decrese chrptr,and increase count for correct
 36238                                  ;		line number
 36239                                  ;-------------------------------------------------------------------------
 36240                                  
 36241                                  	; 31/12/2022
 36242                                  tryy:
 36243 00002CE7 80FC59                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 36244 00002CEA 750B                    	jne	short try0
 36245                                  
 36246                                  donothing:
 36247                                  	; 15/12/2022
 36248                                  	; ds = cs
 36249 00002CEC FF0E[5A03]              	dec	word [chrptr]
 36250 00002CF0 FF06[5603]              	inc	word [count]
 36251                                  	; 02/11/2022
 36252                                  	;dec	word [cs:chrptr]
 36253                                  	;inc	word [cs:count]
 36254                                  
 36255 00002CF4 E9F5F7                  	jmp	coff
 36256                                  
 36257                                  ;------------------------------------------------------------------------
 36258                                  ; rem command
 36259                                  ;------------------------------------------------------------------------
 36260                                  
 36261                                  try0:				; do nothing with this line.
 36262 00002CF7 80FC30                  	cmp     ah,CONFIG_REM ; '0'
 36263 00002CFA 74F0                    	je	short donothing
 36264                                  
 36265                                  ;%endif	; 30/10/2022
 36266                                  
 36267                                  ; 30/10/2022
 36268                                  ; (MSSOS 5.0 IO.SYS - SYSINIT:29D7h)
 36269                                  
 36270                                  ;------------------------------------------------------------------------
 36271                                  ; bogus command
 36272                                  ;------------------------------------------------------------------------
 36273                                  
 36274                                  tryz:
 36275 00002CFC 80FCFF                          cmp     ah,0FFh		;null command? (BUGBUG - who sets FFh anyway?)
 36276                                  	; 31/12/2022
 36277 00002CFF 74EB                    	je	short donothing
 36278                                  	; 02/11/2022
 36279                                  	;je	short tryz_donothing
 36280                                  
 36281 00002D01 FF0E[5A03]              	dec	word [chrptr]
 36282 00002D05 FF06[5603]              	inc	word [count]
 36283 00002D09 EB37                    	jmp	short badop
 36284                                  
 36285                                  ; 31/12/2022
 36286                                  ;	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36287                                  ;tryz_donothing:
 36288                                  ;	jmp	donothing
 36289                                  
 36290                                  ; 07/04/2019 - Retro DOS v4.0
 36291                                  
 36292                                  ;------------------------------------------------------------------------------
 36293                                  
 36294                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36295                                  ; (SYSINIT:2D5Dh)
 36296                                  
 36297                                  ; 11/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 36298                                  
 36299                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36300                                  ;
 36301                                  ;***	CheckProtmanArena -- special hack for adjusting alloclim with Protman$
 36302                                  ;
 36303                                  ;	adjusts alloclim if Protman$ reduced our arena through a manual hack.
 36304                                  ;
 36305                                  CheckProtmanArena:
 36306                                  	; 08/09/2023
 36307                                  	; ds = cs
 36308 00002D0B 06                      	push	es
 36309                                  	;mov	ax,[cs:area]	; get our arena header
 36310 00002D0C A1[6803]                	mov	ax,[area] ; 08/09/2023
 36311 00002D0F 48                      	dec	ax
 36312 00002D10 8EC0                    	mov	es,ax
 36313                                  	;add	ax,[es:ARENA.SIZE]
 36314 00002D12 2603060300              	add	ax,[es:3]	; find end of arena
 36315 00002D17 40                      	inc	ax
 36316                                  	; 08/09/2023
 36317 00002D18 3B06[A502]              	cmp	ax,[ALLOCLIM]
 36318                                  	;cmp	ax,[cs:ALLOCLIM] ; is it less than alloclim?
 36319 00002D1C 7703                    	ja	short CheckProtmanDone
 36320                                  
 36321                                  	;mov	[cs:ALLOCLIM],ax ; reduce alloclim then
 36322                                  	; 08/09/2023
 36323 00002D1E A3[A502]                	mov	[ALLOCLIM],ax
 36324                                  CheckProtmanDone:
 36325 00002D21 07                      	pop	es
 36326 00002D22 C3                      	retn
 36327                                  
 36328                                  ;------------------------------------------------------------------------------
 36329                                  
 36330                                  sysinit_parse:
 36331                                  
 36332                                  ;------------------------------------------------------------------------------
 36333                                  ;set up registers for sysparse
 36334                                  ;in)	es:si -> command line in confbot
 36335                                  ;	di -> offset of the parse control definition.
 36336                                  ;
 36337                                  ;out)	calls sysparse.
 36338                                  ;	carry will set if parse error.
 36339                                  ;	*** the caller should check the eol condition by looking at ax
 36340                                  ;	*** after each call.
 36341                                  ;	*** if no parameters are found,then ax will contain a error code.
 36342                                  ;	*** if the caller needs to look at the synomym@ of the result,
 36343                                  ;	***  the caller should use cs:@ instead of es:@.
 36344                                  ;	cx register should be set to 0 at the first time the caller calls this
 36345                                  ;	 procedure.
 36346                                  ;	ax - exit code
 36347                                  ;	bl - terminated delimeter code
 36348                                  ;	cx - new positional ordinal
 36349                                  ;	si - set to pase scanned operand
 36350                                  ;	dx - selected result buffer
 36351                                  ;------------------------------------------------------------------------------
 36352                                  
 36353                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36354                                  	; (SYSINIT:2D78h)
 36355                                  
 36356                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 36357                                  	; ds = cs
 36358 00002D23 8C06[F918]              	mov	[badparm_seg],es	;save the pointer to the parm
 36359 00002D27 8936[F718]              	mov	[badparm_off],si	;we are about to parse for badparm msg.
 36360                                  
 36361                                  	; 24/10/2022
 36362 00002D2B 06                      	push	es			;save es,ds
 36363 00002D2C 1E                      	push	ds
 36364                                  
 36365 00002D2D 06                      	push	es
 36366 00002D2E 1F                      	pop	ds			;now ds:si -> command line
 36367                                  
 36368 00002D2F 0E                      	push	cs
 36369 00002D30 07                      	pop	es			;now es:di -> control definition
 36370                                  
 36371                                  	; 09/09/2023
 36372                                  	;mov	[cs:badparm_seg],ds	;save the pointer to the parm
 36373                                  	;mov	[cs:badparm_off],si	;we are about to parse for badparm msg.
 36374                                  	
 36375                                  	;mov	dx,0
 36376                                  	; 04/01/2023
 36377 00002D31 29D2                    	sub	dx,dx ; 0
 36378 00002D33 E86BEC                  	call	SysParse
 36379                                  	;cmp	ax,_$P_No_Error	; 0	;no error
 36380                                  	; 06/09/2023
 36381 00002D36 21C0                    	and	ax,ax
 36382                                  
 36383                                  ;**cas note: when zero true after cmp, carry clear
 36384                                  
 36385                                  	;je	short ll4
 36386                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS compatibility, SYSINIT:2A02h)
 36387                                  	; 12/12/2022
 36388 00002D38 7405                    	je	short en4 ; cf=0
 36389 00002D3A 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	;or the end of line?
 36390                                  	;jne	short if4
 36391                                  	; 12/12/2022
 36392 00002D3D 7400                    	je	short en4 ; cf=0
 36393                                  	; 06/09/2023
 36394                                  	; cf=1
 36395                                  
 36396                                  ; 12/12/2022
 36397                                  ;ll4:
 36398                                  ;	; 12/12/2022
 36399                                  ;	; cf=0
 36400                                  ;	;clc
 36401                                  ;	jmp	short en4
 36402                                  
 36403                                  if4:
 36404                                  	; 24/10/2022
 36405                                  	; 06/09/2023 (cf=1)
 36406                                  	;stc
 36407                                  en4:
 36408 00002D3F 1F                      	pop	ds
 36409 00002D40 07                      	pop	es
 36410 00002D41 C3                      	retn
 36411                                  
 36412                                  ; 11/12/2022
 36413                                  %if 0
 36414                                  
 36415                                  ;----------------------------------------------------------------------------
 36416                                  ;
 36417                                  ; procedure : badop_p
 36418                                  ;
 36419                                  ;             same thing as badop,but will make sure to set ds register back
 36420                                  ;             to sysinitseg and return back to the caller.
 36421                                  ;
 36422                                  ;----------------------------------------------------------------------------
 36423                                  
 36424                                  badop_p:
 36425                                  	push	cs
 36426                                  	pop	ds		;set ds to configsys seg.
 36427                                  	mov	dx,badopm
 36428                                  	call	print
 36429                                          ;call	error_line
 36430                                  	;retn
 36431                                  	; 11/12/2022
 36432                                  	jmp	error_line
 36433                                  
 36434                                  %endif
 36435                                  
 36436                                  ;----------------------------------------------------------------------------
 36437                                  ;
 36438                                  ; label : badop
 36439                                  ;
 36440                                  ;----------------------------------------------------------------------------
 36441                                  
 36442                                  badop:	
 36443 00002D42 BA[CA4E]                	mov	dx,badopm	;want to print command error "unrecognized command..."
 36444 00002D45 E8CA1B                  	call	print
 36445 00002D48 E82B00                  	call	error_line	;show "error in config.sys ..." .
 36446 00002D4B E99EF7                  	jmp	coff
 36447                                  
 36448                                  ;----------------------------------------------------------------------------
 36449                                  ;
 36450                                  ; procedure : badparm_p
 36451                                  ;
 36452                                  ;             show "bad command or parameters - xxxxxx"
 36453                                  ;             in badparm_seg,badparm_off -> xxxxx
 36454                                  ;
 36455                                  ;----------------------------------------------------------------------------
 36456                                  
 36457                                  	; 24/10/2022
 36458                                  badparm_p:
 36459                                  	; 11/12/2022
 36460                                  	; ds = cs
 36461                                  	; 11/12/2022
 36462                                  	;push	ds ; *
 36463 00002D4E 52                      	push	dx
 36464 00002D4F 56                      	push	si
 36465                                  
 36466                                  	; 11/12/2022
 36467                                  	; ds = cs
 36468                                  	;push	cs
 36469                                  	;pop	ds
 36470                                  
 36471 00002D50 BA[F14E]                	mov	dx,badparm
 36472 00002D53 E8BC1B                  	call	print			; "bad command or parameters - "
 36473 00002D56 C536[F718]              	lds	si,[badparm_ptr]
 36474                                  
 36475                                  ;	print "xxxx" until cr.
 36476                                  
 36477                                  do1:
 36478 00002D5A 8A14                    	mov	dl,[si]			; get next character
 36479 00002D5C 80FA0D                  	cmp	dl,cr ; 0Dh		; is a carriage return?
 36480 00002D5F 7407                    	je	short en1		; exit loop if so
 36481                                  
 36482 00002D61 B402                    	mov	ah,2 ; STD_CON_OUTPUT	; function 2
 36483 00002D63 CD21                    	int	21h			; display character
 36484 00002D65 46                      	inc	si			; next character
 36485 00002D66 EBF2                    	jmp	short do1
 36486                                  en1:
 36487 00002D68 0E                      	push	cs
 36488 00002D69 1F                      	pop	ds
 36489                                  
 36490 00002D6A BA[EE4E]                	mov	dx,crlfm
 36491 00002D6D E8A21B                  	call	print
 36492 00002D70 E80300                  	call	error_line
 36493                                  
 36494 00002D73 5E                      	pop	si
 36495 00002D74 5A                      	pop	dx
 36496                                  	; 11/12/2022
 36497                                  	;pop	ds ; *
 36498                                  badparmp_ret:
 36499 00002D75 C3                      	retn
 36500                                  
 36501                                  ; 10/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 36502                                  %if 0
 36503                                  
 36504                                  ;----------------------------------------------------------------------------
 36505                                  ;
 36506                                  ; procedure : getchr
 36507                                  ;
 36508                                  ;----------------------------------------------------------------------------
 36509                                  
 36510                                  	; 24/10/2022
 36511                                  getchr:
 36512                                  	; 12/12/2022
 36513                                  	;push	cx
 36514                                  	;mov	cx,[count]
 36515                                  	;jcxz	nochar
 36516                                  	; 12/12/2022
 36517                                  	cmp	word [count],1 
 36518                                  	jb	short nochar ; cf=1 ([count] = 0)
 36519                                  	
 36520                                  	mov	si,[chrptr]
 36521                                  	mov	al,[es:si]
 36522                                  	dec	word [count]
 36523                                  	inc	word [chrptr]
 36524                                  	; 12/12/202
 36525                                  	; cf=0
 36526                                  	;clc
 36527                                  ;get_ret:
 36528                                  	;pop	cx
 36529                                  	;retn
 36530                                  nochar: 
 36531                                  	; 12/12/2022
 36532                                  	; cf=1
 36533                                  	;stc
 36534                                  	;jmp	short get_ret
 36535                                  	
 36536                                  	retn
 36537                                  %endif
 36538                                  
 36539                                  ; 11/12/2022
 36540                                  %if 0
 36541                                  
 36542                                  ;----------------------------------------------------------------------------
 36543                                  ;
 36544                                  ; procedure : incorrect_order
 36545                                  ;
 36546                                  ;             show "incorrect order in config.sys ..." message.
 36547                                  ;
 36548                                  ;----------------------------------------------------------------------------
 36549                                  
 36550                                  incorrect_order:
 36551                                  	mov	dx,badorder
 36552                                  	call	print
 36553                                  	call	showlinenum
 36554                                  	retn
 36555                                  
 36556                                  %endif
 36557                                  
 36558                                  ;----------------------------------------------------------------------------
 36559                                  ;
 36560                                  ; procedure : error_line
 36561                                  ;
 36562                                  ;             show "error in config.sys ..." message.
 36563                                  ;
 36564                                  ;----------------------------------------------------------------------------
 36565                                  
 36566                                  	; 11/12/2022
 36567                                  	; 24/10/2022
 36568                                  error_line:
 36569                                  	; 11/12/2022
 36570                                  	; ds = cs
 36571                                  	;push	cs
 36572                                  	;pop	ds
 36573                                  
 36574 00002D76 BA[2650]                	mov	dx,errorcmd
 36575 00002D79 E8961B                  	call	print
 36576                                  	;call	showlinenum
 36577                                  	;retn
 36578                                  	; 11/12/2022
 36579                                  	;jmp	short shortlinemum
 36580                                  
 36581                                  ;----------------------------------------------------------------------------
 36582                                  ;
 36583                                  ; procedure : showlinenum
 36584                                  ;
 36585                                  ; convert the binary linecount to decimal ascii string in showcount
 36586                                  ; and display showcount at the current curser position.
 36587                                  ; in.) linecount
 36588                                  ;
 36589                                  ; out) the number is printed.
 36590                                  ;
 36591                                  ;----------------------------------------------------------------------------
 36592                                  
 36593                                  	; 11/12/2022
 36594                                  	; ds = cs
 36595                                  	; 24/10/2022
 36596                                  showlinenum:
 36597 00002D7C 06                      	push	es
 36598                                  	; 11/12/2022
 36599                                  	;push	ds
 36600 00002D7D 57                      	push	di
 36601                                  
 36602 00002D7E 0E                      	push	cs
 36603 00002D7F 07                      	pop	es		; es=cs
 36604                                  
 36605                                  	; 11/12/2022
 36606                                  	;push	cs
 36607                                  	;pop	ds
 36608                                  
 36609 00002D80 BF[B502]                	mov	di,showcount+4	; di -> the least significant decimal field.
 36610 00002D83 B90A00                  	mov	cx,10		; decimal divide factor
 36611                                  	;mov	ax,[cs:linecount]
 36612                                  	; 11/12/2022
 36613 00002D86 A1[AF02]                	mov	ax,[linecount]
 36614                                  sln_loop:
 36615                                  	; 11/12/2022
 36616 00002D89 39C8                    	cmp	ax,cx ; < 10 ?
 36617                                  	;cmp	ax,10		; < 10?
 36618 00002D8B 720C                    	jb	short sln_last
 36619                                  
 36620 00002D8D 31D2                    	xor	dx,dx
 36621 00002D8F F7F1                    	div	cx	; cx = 10
 36622 00002D91 80CA30                  	or	dl,30h		; add "0" (= 30h) to make it an ascii.
 36623 00002D94 8815                    	mov	[di],dl
 36624 00002D96 4F                      	dec	di
 36625 00002D97 EBF0                    	jmp	short sln_loop
 36626                                  
 36627                                  sln_last:
 36628 00002D99 0C30                    	or	al,30h	; "0"
 36629 00002D9B 8805                    	mov	[di],al
 36630 00002D9D 89FA                    	mov	dx,di
 36631 00002D9F E8701B                  	call	print		; show it.
 36632 00002DA2 5F                      	pop	di
 36633                                  	; 11/12/2022
 36634                                  	;pop	ds
 36635 00002DA3 07                      	pop	es
 36636 00002DA4 C3                      	retn
 36637                                  
 36638                                  ; 07/04/2019 - Retro DOS v4.0
 36639                                  ; (MSDOS 6.21 IO.SYS, SYSINIT:2E44h)
 36640                                  
 36641                                  ;----------------------------------------------------------------------------
 36642                                  ;
 36643                                  ; procedure : ProcDOS
 36644                                  ;
 36645                                  ;	Process the result of DOS= parsing
 36646                                  ;
 36647                                  ;	result_val._$P_item_tag	= 1 for DOS=HIGH
 36648                                  ;				= 2 for DOS=LOW
 36649                                  ;				= 3 for DOS=UMB
 36650                                  ;				= 4 for DOS=NOUMB
 36651                                  ;----------------------------------------------------------------------------
 36652                                  
 36653                                  	; 01/11/2022 - Retro DOS v4.0 (Modififed MSDOS 5.0 IO.SYS)
 36654                                  	; (SYTSINIT:2AB5h)
 36655                                  ProcDOS:
 36656                                  	; 01/01/2023
 36657                                  	; ds = cs
 36658 00002DA5 30E4                    	xor	ah,ah
 36659                                  	;;mov	al,[cs:result_val_itag]
 36660                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Item_Tag]
 36661                                  	; 01/01/2023
 36662 00002DA7 A0[AC21]                	mov	al,[result_val+_$P_Result_Blk.Item_Tag]
 36663 00002DAA 48                      	dec	ax
 36664 00002DAB 7415                    	jz	short pd_hi
 36665 00002DAD 48                      	dec	ax
 36666 00002DAE 740E                    	jz	short pd_lo
 36667 00002DB0 48                      	dec	ax
 36668 00002DB1 7405                    	jz	short pd_umb
 36669                                  	;;mov	byte [cs:DevUMB],0
 36670                                  	; 18/12/2022
 36671                                  	;mov	byte [cs:DevUMB],ah ; 0
 36672                                  	; 01/01/2023
 36673 00002DB3 8826[A823]              	mov	byte [DevUMB],ah ; 0
 36674 00002DB7 C3                      	retn
 36675                                  pd_umb:
 36676                                  	; 01/01/2023
 36677 00002DB8 C606[A823]FF            	mov	byte [DevUMB],0FFh
 36678                                  	;mov	byte [cs:DevUMB],0FFh
 36679 00002DBD C3                      	retn
 36680                                  pd_lo:
 36681                                  	; 01/01/2023
 36682 00002DBE A2[6C02]                	mov	[runhigh],al ; 0
 36683                                  	; 18/12/2022
 36684                                  	;mov	[cs:runhigh],al ; 0
 36685                                  	;;mov	byte [cs:runhigh],0
 36686 00002DC1 C3                      	retn
 36687                                  pd_hi:
 36688                                  	; 01/01/2023
 36689 00002DC2 C606[6C02]FF            	mov	byte [runhigh],0FFh
 36690                                  	;mov	byte [cs:runhigh],0FFh
 36691                                  limx:	; 11/12/2022
 36692 00002DC7 C3                      	retn
 36693                                  
 36694                                  ;----------------------------------------------------------------------------
 36695                                  ;
 36696                                  ; procedure : LieInt12Mem
 36697                                  ;
 36698                                  ;	Input : DevEntry points to Device Start address (offset == 0)
 36699                                  ;		alloclim set to the limit of low memory.
 36700                                  ;
 36701                                  ;	Output : none
 36702                                  ;
 36703                                  ;	Changes the ROM BIOS variable which stores the total low memory
 36704                                  ;	If a 3com device driver (any character device with name 'PROTMAN$')
 36705                                  ;	is being loaded alloclim is converted into Ks and stored in 40:13h
 36706                                  ;	Else if a device driver being loaded into UMB the DevLoadEnd is
 36707                                  ;	converted into Ks and stored in 40:13h
 36708                                  ;
 36709                                  ;----------------------------------------------------------------------------
 36710                                  
 36711                                  LieInt12Mem:
 36712                                  	; 11/12/2022
 36713                                  	; ds = cs
 36714 00002DC8 A1[A502]                	mov	ax,[ALLOCLIM]
 36715                                  	;mov	ax,[cs:ALLOCLIM]	; lie INT 12 as alloclim
 36716                                  					; assuming that it is 3Com
 36717 00002DCB E84400                  	call	IsIt3Com		; Is it 3Com driver?
 36718 00002DCE 740A                    	jz	short lim_set		; yes, lie to him differently
 36719                                  	; 13/05/2019
 36720                                  	;cmp	byte [cs:DeviceHi],0	; Is the DD being loaded in UMB
 36721                                  	;je	short limx		; no, don't lie
 36722                                  	;mov	ax,[cs:DevLoadEnd]	; lie INT 12 as end of UMB
 36723                                  	; 11/12/2022
 36724                                  	; ds = cs
 36725 00002DD0 803E[B723]00            	cmp	byte [DeviceHi],0
 36726 00002DD5 74F0                    	je	short limx
 36727 00002DD7 A1[9D23]                	mov	ax,[DevLoadEnd]
 36728                                  lim_set:
 36729                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36730                                  	; 11/12/2022
 36731                                  	;call	SetInt12Mem
 36732                                  ;limx:
 36733                                  	;retn
 36734                                  	
 36735                                  	;jmp	short SetInt12Mem 
 36736                                  
 36737                                  ;----------------------------------------------------------------------------
 36738                                  ;
 36739                                  ; procedure : SetInt12Mem
 36740                                  ;
 36741                                  ;	Input : AX = Memory size to be set (in paras)
 36742                                  ;	Output : none
 36743                                  ;
 36744                                  ;	Sets the variable 40:13 to the memory size passed in AX
 36745                                  ;	It saves the old value in 40:13 in OldInt12Mem,
 36746                                  ;	It also sets a flag Int12Lied to 0ffh, which is checked before
 36747                                  ;	restoring the value of 40:13
 36748                                  ;
 36749                                  ;----------------------------------------------------------------------------
 36750                                  
 36751                                  	; 01/11/2022
 36752                                  SetInt12Mem:
 36753 00002DDA 1E                      	push	ds
 36754 00002DDB BB4000                  	mov	bx,40h
 36755 00002DDE 8EDB                    	mov	ds,bx			; ROM BIOS Data Segment
 36756 00002DE0 8B1E1300                	mov	bx,[13h]		; INT 12 memory variable
 36757 00002DE4 2E891E[BB23]            	mov	[cs:OldInt12Mem],bx	; save it
 36758 00002DE9 B106                    	mov	cl,6
 36759 00002DEB D3E8                    	shr	ax,cl			; convert paras into Ks
 36760 00002DED A31300                  	mov	[13h],ax		; Lie
 36761 00002DF0 2EC606[BA23]FF          	mov	byte [cs:Int12Lied],0FFh ; mark that we are lying
 36762 00002DF6 1F                      	pop	ds
 36763                                  ;limx:
 36764 00002DF7 C3                      	retn
 36765                                  
 36766                                  ;----------------------------------------------------------------------------
 36767                                  ;
 36768                                  ; procedure : TrueInt12Mem
 36769                                  ;
 36770                                  ;	Input : Int12Lied = 0 if we are not lying currently
 36771                                  ;			  = 0ffh if we are lying
 36772                                  ;		OldInt12Mem = Saved value of 40:13h
 36773                                  ;
 36774                                  ;	Output : none
 36775                                  ;
 36776                                  ;	Resets the INT 12 Memory variable if we were lying about int 12
 36777                                  ;	and resets the flag which indicates that we were lying
 36778                                  ;
 36779                                  ;----------------------------------------------------------------------------
 36780                                  
 36781                                  TrueInt12Mem:
 36782                                  	; 11/12/2022
 36783                                  	; ds = cs
 36784 00002DF8 803E[BA23]00            	cmp	byte [Int12Lied],0
 36785                                  	;cmp	byte [cs:Int12Lied],0	; were we lying so far?
 36786                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS, SYS.INIT:2B1Dh)
 36787                                  	;mov	byte [cs:Int12Lied],0	; reset it anyway
 36788 00002DFD 7412                    	je	short timx		; no, we weren't
 36789                                  	; 18/12/2022
 36790 00002DFF B84000                  	mov	ax,40h
 36791 00002E02 8826[BA23]              	mov	[Int12Lied],ah ; 0
 36792                                  	;mov	byte [Int12Lied],0
 36793                                  	;mov	byte [cs:Int12Lied],0
 36794 00002E06 1E                      	push	ds
 36795                                  	;mov	ax,40h
 36796 00002E07 8ED8                    	mov	ds,ax
 36797 00002E09 2EA1[BB23]              	mov	ax,[cs:OldInt12Mem]
 36798 00002E0D A31300                  	mov	[13h],ax		; restore INT 12 memory
 36799 00002E10 1F                      	pop	ds
 36800                                  timx:
 36801 00002E11 C3                      	retn
 36802                                  
 36803                                  ;----------------------------------------------------------------------------
 36804                                  ;
 36805                                  ; procedure : IsIt3Com?
 36806                                  ;
 36807                                  ;	Input : DevEntry = Seg:0 of device driver
 36808                                  ;	Output : Zero flag set if device name is 'PROTMAN$'
 36809                                  ;		 else Zero flag is reset
 36810                                  ;
 36811                                  ;----------------------------------------------------------------------------
 36812                                  
 36813                                  IsIt3Com:
 36814                                  	; 11/12/2022
 36815                                  	; ds = cs
 36816 00002E12 1E                      	push	ds
 36817 00002E13 06                      	push	es
 36818 00002E14 56                      	push	si
 36819                                  	; 11/12/2022
 36820 00002E15 C536[9F23]              	lds	si,[DevEntry]
 36821                                  	;lds	si,[cs:DevEntry]	; ptr to device header
 36822 00002E19 83C60A                  	add	si,SYSDEV.NAME ; 10 	; ptr device name
 36823 00002E1C 0E                      	push	cs
 36824 00002E1D 07                      	pop	es
 36825 00002E1E BF[BD23]                	mov	di,ThreeComName
 36826 00002E21 B90800                  	mov	cx,8			; name length
 36827 00002E24 F3A6                    	rep	cmpsb
 36828 00002E26 5E                      	pop	si
 36829 00002E27 07                      	pop	es
 36830 00002E28 1F                      	pop	ds
 36831 00002E29 C3                      	retn
 36832                                  
 36833                                  ;M020 : BEGIN
 36834                                  ;----------------------------------------------------------------------------
 36835                                  
 36836                                  UpdatePDB:
 36837 00002E2A 1E                      	push	ds
 36838 00002E2B B462                    	mov	ah,62h
 36839 00002E2D CD21                    	int	21h	; DOS - 3+ - GET PSP ADDRESS
 36840 00002E2F 8EDB                    	mov	ds,bx
 36841 00002E31 2E8B1E[A502]            	mov	bx,[cs:ALLOCLIM]
 36842                                  	;mov	[2],bx
 36843 00002E36 891E0200                	mov	[PDB.BLOCK_LEN],bx
 36844 00002E3A 1F                      	pop	ds
 36845 00002E3B C3                      	retn
 36846                                  
 36847                                  ; M020 : END
 36848                                  
 36849                                  ;----------------------------------------------------------------------------
 36850                                  
 36851                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36852                                  ;%if 0
 36853                                  
 36854                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36855                                  ; (SYSINIT:2EEEh)
 36856                                  
 36857                                  ;include highload.inc	; Routines for devicehigh parsing, control of HIDDEN
 36858                                  ;include highexit.inc	; umb's, etc
 36859                                  
 36860                                  ; ----------------------------------------------------------------------
 36861                                  ; HIGHLOAD.INC (MSDOS 6.0 - 1991) 	
 36862                                  ; ----------------------------------------------------------------------
 36863                                  ; 07/04/2019 - Retro DOS v4.0
 36864                                  
 36865                                  ;******************************************************************************
 36866                                  ;
 36867                                  ; This file contains routines needed to parse and implement user-given
 36868                                  ; command-line options of the form "/S/L:3,0x500;2;7,127;0x0BE4". InitVar()
 36869                                  ; and Parsevar() are used to parse this data and place it in encoded form into
 36870                                  ; the variables in highvar.inc, for use by the rest of the routines.
 36871                                  ;
 36872                                  ; DeviceHigh accepts this command-line (handled in sysconf.asm, not here):
 36873                                  ;    DEVICEHIGH SIZE=hhhhhh module opts
 36874                                  ; Or, DeviceHigh and LoadHigh accept any of the following:
 36875                                  ;    DH/LH module opts
 36876                                  ;    DH/LH [/S][/L:umb[,size][;umb[,size]]*] module opts
 36877                                  ;    DH/LH [/L:umb[,size][;umb[,size]]*][/S] module opts
 36878                                  ; The initial UMB,SIZE pair designates the module's load address; the remainder
 36879                                  ; of the UMB and SIZE pairs are used to indicate specific UMBs to be left
 36880                                  ; available during the load.
 36881                                  ;
 36882                                  ; When an actual load is ready to be performed, a call to HideUMBs() will
 36883                                  ; temporarily allocate (as owner 8+"HIDDEN  ") all free elements in any
 36884                                  ; upper-memory block which was not specified by the user... in addition, if
 36885                                  ; UMBs were marked to shrink (/S option) to a certain size ("umb,size"), any
 36886                                  ; elements in that umb SAVE the lower-half of the newly-shrunken one are also
 36887                                  ; allocated. After the load, the function UnHideUMBs() (in highexit.inc) will
 36888                                  ; free any UMBs so allocated.
 36889                                  ;
 36890                                  ; When a device driver loads, there is the additional problem of allocating its
 36891                                  ; initial load site; this should be restricted to the first UMB specified on
 36892                                  ; the command-line. The function FreezeUM temporarily allocates all remaining
 36893                                  ; free upper-memory elements (as owner 8+"FROZEN  "), except those in the load
 36894                                  ; UMB. Then the initial allocation may be made, and a call to UnFreeze will
 36895                                  ; return any so-allocated memory elements to FREE, for the true load. Note
 36896                                  ; that UnFreeze leaves HIDDEN elements allocated; it only frees FROZEN ones.
 36897                                  ;
 36898                                  ;******************************************************************************
 36899                                  
 36900                                  SWTCH	equ	'/'		; Switch character
 36901                                  
 36902                                  DOS_CHECK_STRATEGY  equ	5800h	; Int 21h, Func 58h, Svc 0 = check alloc strat
 36903                                  DOS_SET_STRATEGY    equ	5801h	; Int 21h, Func 58h, Svc 1 = set alloc strategy
 36904                                  DOS_CHECK_UMBLINK   equ	5802h	; Int 21h, Func 58h, Svc 2 = check link state
 36905                                  DOS_GET_UMBLINK	    equ 5802h ; 20/04/2019
 36906                                  DOS_SET_UMBLINK     equ	5803h	; Int 21h, Func 58h, Svc 3 = set link state
 36907                                  DOS_GET_DOS_LISTS   equ	  52h	; Int 21h, Func 52h = return list of lists
 36908                                  DOS_UMB_HEAD        equ	  8Ch	; Offset from ES (after func52h) to get UMBHead
 36909                                  
 36910                                  CR	equ	0Dh		; Carriage Return
 36911                                  LF	equ	0Ah		; Line Feed
 36912                                  TAB	equ	09h		; Tab character (^I)
 36913                                  
 36914                                  ; -----------------------------------------------------------------------------
 36915                                  ;*** InitVar - initializes all the variables used in ParseVar and HideUMBs
 36916                                  ; -----------------------------------------------------------------------------
 36917                                  ; ENTRY:       None
 36918                                  ; EXIT:        Variables listed in highvar.inc are initialized
 36919                                  ; ERROR EXIT:  None
 36920                                  ; USES:        Flags, variables in highvar.inc
 36921                                  ; -----------------------------------------------------------------------------
 36922                                  ; Note that element 0 references UMB 0 (conventional), not UMB 1. Its contents
 36923                                  ; are largely ignored, but it is initialized nonetheless.
 36924                                  ; -----------------------------------------------------------------------------
 36925                                  
 36926                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36927                                  ; (SYSINIT:2EEEh)
 36928                                  
 36929                                  InitVar:
 36930                                  	; 01/01/2023
 36931                                  	; ds = cs
 36932                                  
 36933                                  	;pushreg <ax, cx, di, es>
 36934                                  	; 03/01/2023
 36935                                  	;push	ax
 36936                                  	;push	cx
 36937                                  	;push	di
 36938 00002E3C 06                      	push	es
 36939                                  
 36940                                  	;dataseg es			;Point ES into appropriate data segment
 36941 00002E3D 0E                      	push	cs
 36942 00002E3E 07                      	pop	es
 36943                                  
 36944 00002E3F 31C0                    	xor	ax,ax
 36945                                  	;mov	[es:fUmbTiny],al	;Shrink UMBs? (made 1 if /S given)
 36946                                  	;mov	[es:fInHigh],al		;Set to 1 when DH/LH has been called
 36947                                  	;mov	[es:SegLoad],ax		;Load Address (seg), used for DH only
 36948                                  	;mov	byte [es:UmbLoad],UNSPECIFIED ; 0FFh
 36949                                  	;				;Later is the # of the 1st spec'd UMB
 36950                                  	;mov	[es:fm_argc], al	;Start with zero args having been read
 36951                                  
 36952                                  	; 01/01/2023
 36953                                  	; ds = cs
 36954 00002E41 A2[6223]                	mov	[fUmbTiny],al		;Shrink UMBs? (made 1 if /S given)
 36955 00002E44 A2[6123]                	mov	[fInHigh],al		;Set to 1 when DH/LH has been called
 36956 00002E47 A3[6323]                	mov	[SegLoad],ax		;Load Address (seg), used for DH only
 36957 00002E4A C606[6523]FF            	mov	byte [UmbLoad],UNSPECIFIED ; 0FFh
 36958                                  					;Later is the # of the 1st spec'd UMB
 36959 00002E4F A2[9823]                	mov	[fm_argc], al		;Start with zero args having been read
 36960                                  
 36961 00002E52 FC                      	cld
 36962                                  
 36963 00002E53 B91000                  	mov	cx,MAXUMB ; 16		;For each entry
 36964 00002E56 BF[6623]                	mov	di,UmbUsed		;on the UmbUsed array,
 36965 00002E59 F3AA                    	rep	stosb			;	Store 0
 36966                                  
 36967                                  	;mov	cx,MAXUMB ; 16		;Okay... for each entry
 36968                                  	; 01/01/2033
 36969 00002E5B B110                    	mov	cl,MAXUMB ; 16
 36970 00002E5D BF[7623]                	mov	di,UmbSize		;on the UmbSize array,
 36971 00002E60 F3AB                    	rep	stosw			;	Store 0
 36972                                  
 36973                                  	;normseg es			; Return ES
 36974                                  
 36975                                  	;popreg	<es, di, cx, ax>
 36976 00002E62 07                      	pop	es
 36977                                  	; 03/01/2023
 36978                                  	;pop	di
 36979                                  	;pop	cx
 36980                                  	;pop	ax	 	
 36981                                  
 36982 00002E63 C3                      	retn
 36983                                  
 36984                                  ; -----------------------------------------------------------------------------
 36985                                  ;*** FixMem - scans the upper memory chain and concatenates adjacent free MCBs
 36986                                  ; -----------------------------------------------------------------------------
 36987                                  ; ENTRY   : None
 36988                                  ; EXIT    : None
 36989                                  ; ERROR   : None
 36990                                  ; USES    : Flags, fm_umb, fm_strat
 36991                                  ; -----------------------------------------------------------------------------
 36992                                  
 36993                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36994                                  	; (SYSINIT:2F22h)
 36995                                  FixMem:
 36996                                  	; 01/01/2023
 36997                                  	;push	ax
 36998                                  	;push	bx
 36999                                  	;push	cx
 37000                                  	;push	dx
 37001 00002E64 06                      	push	es
 37002                                  
 37003 00002E65 E84900                  	call	fm_link		; Link in UMBs
 37004                                  
 37005 00002E68 E80002                  	call	UmbHead		; Get first upper-memory MCB address (0x9FFF)
 37006 00002E6B 723F                    	jc	short fmX	; (if couldn't get it, leave now).
 37007                                  
 37008 00002E6D 8EC0                    	mov	es,ax		; It returns in AX, so move it to ES.
 37009                                  
 37010                                  ; - Walk MCB Chain ------------------------------------------------------------
 37011                                  
 37012 00002E6F 31D2                    	xor	dx,dx		; We're keeping the address of the last MCB
 37013 00002E71 89D1                    	mov 	cx,dx		; in CX... and the last owner
 37014 00002E73 42                      	inc	dx		; in dx as we go through the loop:
 37015                                  
 37016                                  ; ------------------------------------------
 37017                                  ; FM10--DX  = last MCB's owner's PSP address
 37018                                  ;       CX  = last MCB's address (segment)
 37019                                  ; ------------------------------------------
 37020                                  
 37021 00002E74 26A00000                fm10:	mov	al,[es:ARENA.SIGNATURE] ; if 'Z', don't repeat loop
 37022 00002E78 268B1E0100              	mov	bx,[es:ARENA.OWNER]	; if not zero, do nothing
 37023 00002E7D 09D3                    	or	bx,dx			; dx was owner of previous MCB
 37024 00002E7F 7516                    	jnz	short fm30		; If not both zero, don't cat.
 37025                                  
 37026                                  	; - Coalesce memory blocks at ES:00 and CX:00 -------------------------
 37027                                  
 37028 00002E81 268B1E0300              fm20:	mov	bx,[es:ARENA.SIZE]	; Grab this block's Size,
 37029 00002E86 8EC1                    	mov	es,cx			; Go back to prev MCB's address
 37030 00002E88 26A20000                	mov	[es:ARENA.SIGNATURE],al ; & move the SECOND sig here
 37031                                  
 37032 00002E8C 26031E0300              	add	bx,[es:ARENA.SIZE]	; Size += first MCB's size
 37033                                  	;add	bx,1			; And add one for the header
 37034                                  	; 11/07/2023
 37035 00002E91 43                      	inc	bx
 37036 00002E92 26891E0300              	mov	[es:ARENA.SIZE],bx	; Write the size
 37037                                  
 37038                                  	; ---------------------------------------------------------------------
 37039                                  
 37040 00002E97 8CC1                    fm30:	mov	cx,es			; Put this address on the stack
 37041 00002E99 268B160100              	mov	dx,[es:ARENA.OWNER]	; And remember its owner
 37042                                  
 37043 00002E9E 8CC3                    	mov	bx,es			; Move to the next MCB
 37044 00002EA0 26031E0300              	add	bx,[es:ARENA.SIZE]
 37045 00002EA5 43                      	inc	bx
 37046 00002EA6 8EC3                    	mov	es,bx
 37047                                  
 37048                                  	;cmp	al,'Z'
 37049 00002EA8 3C5A                    	cmp	al,arena_signature_end
 37050 00002EAA 75C8                    	jne	short fm10		; If signature != 'Z', there are more.
 37051                                  fmX:	
 37052 00002EAC E81300                  	call	fm_unlink		; Unlink UMBs
 37053                                  
 37054 00002EAF 07                      	pop	es
 37055                                  	; 01/01/2023
 37056                                  	;pop	dx
 37057                                  	;pop	cx
 37058                                  	;pop	bx
 37059                                  	;pop	ax
 37060                                  
 37061 00002EB0 C3                      	retn
 37062                                  
 37063                                  ; -----------------------------------------------------------------------------
 37064                                  ;*** fm_link - links UMBs not already linked in
 37065                                  ; -----------------------------------------------------------------------------
 37066                                  ; ENTRY:    None
 37067                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 37068                                  ; ERROR:    None
 37069                                  ; USES:     AX, BX, fm_umb
 37070                                  ; -----------------------------------------------------------------------------
 37071                                  
 37072                                  	; 01/01/2023 - Retro DOS v4.2
 37073                                  fm_link:
 37074 00002EB1 B80258                  	mov	ax,DOS_CHECK_UMBLINK ; 5802h
 37075 00002EB4 CD21                    	int	21h			; Current link-state is now in al
 37076                                  
 37077                                  	;putdata fm_umb,al		; So store it in fm_umb for later
 37078                                  	;
 37079                                  	;push	es
 37080                                  	;push	cs
 37081                                  	;pop	es
 37082                                  	;mov	[es:fm_umb],al
 37083                                  	;pop	es
 37084                                  	
 37085                                  	; 01/01/2023
 37086                                  	; ds = cs
 37087                                  	;mov	[cs:fm_umb],al
 37088 00002EB6 A2[9623]                	mov	[fm_umb],al
 37089                                  
 37090 00002EB9 B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 37091 00002EBC BB0100                  	mov	bx,1
 37092 00002EBF CD21                    	int	21h
 37093 00002EC1 C3                      	retn
 37094                                  
 37095                                  ; -----------------------------------------------------------------------------
 37096                                  ;*** fm_unlink - unlinks UMBs if fm_umb is set to 0
 37097                                  ; -----------------------------------------------------------------------------
 37098                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 37099                                  ; EXIT:     None
 37100                                  ; ERROR:    None
 37101                                  ; USES:     AX, BX
 37102                                  ; -----------------------------------------------------------------------------
 37103                                  
 37104                                  	; 01/01/2023 - Retro DOS v4.2
 37105                                  fm_unlink:
 37106 00002EC2 31DB                    	xor	bx,bx
 37107                                  	
 37108                                  	;getdata bl,fm_umb		; fm_umb already has the old link-state
 37109                                  	;
 37110                                  	;push	ds
 37111                                  	;push	cs
 37112                                  	;pop	ds
 37113                                  	;mov	bl,[fm_umb]	
 37114                                  	;pop	ds
 37115                                  	
 37116                                  	; 01/01/2023
 37117                                  	; ds = cs
 37118                                  	;mov	bl,[cs:fm_umb]
 37119 00002EC4 8A1E[9623]              	mov	bl,[fm_umb]
 37120                                  
 37121 00002EC8 B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 37122 00002ECB CD21                    	int	21h			; so just use that, and call int 21h
 37123 00002ECD C3                      	retn
 37124                                  
 37125                                  ; 08/04/2019 - Retro DOS v4.0
 37126                                  
 37127                                  ; -----------------------------------------------------------------------------
 37128                                  ;*** ParseVar - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 37129                                  ; laid out in highvar.inc
 37130                                  ; -----------------------------------------------------------------------------
 37131                                  ; ENTRY:    ES:SI points to command tail of LoadHigh/DeviceHigh (whitespace ok)
 37132                                  ; EXIT:     ES:SI points to first character in child program name
 37133                                  ; ERROR:    ES:SI points to character which caused error, carry set, AX == code
 37134                                  ; USES:     ES:SI, AX, flags, variables in highvar.inc
 37135                                  ; -----------------------------------------------------------------------------
 37136                                  ; Error codes (in AX if carry set on return):
 37137                                  ;
 37138                                  PV_InvArg	equ	1	; Invalid argument passed
 37139                                  PV_BadUMB	equ	2	; Bad UMB number passed (duplicate?)
 37140                                  PV_InvSwt	equ	3	; Unrecognized switch passed
 37141                                  ;
 37142                                  ; This routine exects ES:SI to point to a string much like the following:
 37143                                  ;    "/S/L:1,200;2 module options"
 37144                                  ; Optionally, the string can begin with whitespace; neither /S nor /L is
 37145                                  ; required, though that's what this routine is supposed to parse.
 37146                                  ;
 37147                                  optS		equ	'S'	; /S
 37148                                  optL		equ	'L'	; /L:...
 37149                                  ;
 37150                                  ; -----------------------------------------------------------------------------
 37151                                  ; LoadHigh has a list of arguments, returned by cparse, which is used to create
 37152                                  ; a command-line for spawning a child process. For a typical LH command, say,
 37153                                  ;     lh /l:1,1000;2 print/d:lpt2
 37154                                  ; the arguments would look like (one per line):
 37155                                  ;     lh
 37156                                  ;     /l
 37157                                  ;     1
 37158                                  ;     1000
 37159                                  ;     2
 37160                                  ;     print
 37161                                  ;     /d
 37162                                  ;     :lpt2
 37163                                  ; In short, if "print" were, say, "43", there'd be no way to determine which
 37164                                  ; arg was the filename. So, inside this routine, we keep a running counter
 37165                                  ; of the number of arguments LH will need to skip in order to get to the
 37166                                  ; program name. The "lh" is implicit--it'll always have to skip that. So if
 37167                                  ; there's no "/l" or "/s", fm_argc will be 0 ... other than that, 1 is added
 37168                                  ; for:
 37169                                  ;    Each /L
 37170                                  ;    Each /S (there should be only one)
 37171                                  ;    Each UMB number (they follow ":" or ";")
 37172                                  ;    Each UMB size   (they follow ",")
 37173                                  ; So, in the above example, fm_argc would be 4-- and LH would skip right to
 37174                                  ; "print".  Note that InitVar initializes fm_argc to zero.
 37175                                  ; -----------------------------------------------------------------------------
 37176                                  
 37177                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37178                                  	; (SYSINIT:2F9Fh)
 37179                                  
 37180                                  ParseVar:
 37181                                  	;pushreg <di, ds, es>
 37182                                  	; 01/01/2023
 37183                                  	;push	di ; * ; (not required) ; 01/01/2023
 37184 00002ECE 1E                      	push	ds
 37185 00002ECF 06                      	push	es
 37186                                  
 37187 00002ED0 06                      	push	es		; Make DS:SI point to it, as well as ES:SI
 37188 00002ED1 1F                      	pop	ds		; (regardless if we're in devhigh or loadhigh)
 37189 00002ED2 FC                      	cld
 37190                                  
 37191                                  ; ------------------------------------------------
 37192                                  ; PV10--ES:SI = any whitespace on the command-line
 37193                                  ; ------------------------------------------------
 37194                                  
 37195 00002ED3 AC                      pv10:	lodsb			; here, ES:SI=="  /L..."--must eat whitespace
 37196 00002ED4 E8A200                  	call	isWhite
 37197 00002ED7 74FA                    	jz	short pv10	;       ES:SI==" /L..."--keep eating.
 37198                                  	;cmp	al,'/'
 37199 00002ED9 3C2F                    	cmp	al,SWTCH
 37200 00002EDB 7404                    	je	short pv20	;       ES:SI=="/L..."--go process a switch
 37201                                  
 37202 00002EDD 4E                      	dec	si		; Backup--it's now "odule options", and we need
 37203 00002EDE F8                      	clc			; that "m" we just read (or whatever it is).
 37204 00002EDF EB2B                    	jmp	short pvX	; Then return with carry clear == we're done.
 37205                                  
 37206 00002EE1 AC                      pv20:	lodsb			; Just read 'S' or 'L', hopefully
 37207                                  	;toUpper al		; So we make it upper-case, and...
 37208 00002EE2 24DF                    	and	al,0DFh
 37209                                  	;cmp	al,'S'
 37210 00002EE4 3C53                    	cmp	al,optS		; just read 'S'?
 37211 00002EE6 750D                    	jne	short pv30
 37212                                  
 37213                                  	;call	incArgc		; If it's /S, it's another arg for LH to skip.
 37214 00002EE8 2EFE06[9823]            	inc	byte [cs:fm_argc] ; 19/04/2019
 37215                                  
 37216                                  	;putdata fUmbTiny,1	; /S, so ES:SI=="  /L..." or " module opts", or
 37217                                  	;
 37218                                  	;push	es
 37219                                  	;push	cs
 37220                                  	;pop	es
 37221                                  	;mov	[es:fUmbTiny],1	
 37222                                  	;pop	es
 37223                                  
 37224 00002EED 2EC606[6223]01          	mov	byte [cs:fUmbTiny],1
 37225                                  
 37226 00002EF3 EBDE                    	jmp	short pv10	; possibly even "/L...".
 37227                                  
 37228                                  pv30:	;cmp	al,'L'
 37229 00002EF5 3C4C                    	cmp	al,optL		; If it's not 'L' either, then 'tis a bad
 37230 00002EF7 750D                    	jne	short pvE1		; switch!
 37231                                  
 37232                                  	;call	incArgc		; If it's /L, it's another arg for LH to skip.
 37233 00002EF9 2EFE06[9823]            	inc	byte [cs:fm_argc] ; 19/04/2019
 37234                                  
 37235 00002EFE E80E00                  	call	parseL
 37236 00002F01 73D0                    	jnc	short pv10	; If no carry, go back and look for more
 37237                                  
 37238 00002F03 4E                      	dec	si		; Else, back up and exit.
 37239 00002F04 EB03                    	jmp	short pvErr	; AX has already been set by parseL
 37240                                  
 37241                                  pvE1:	;mov	ax,3
 37242 00002F06 B80300                  	mov	ax,PV_InvSwt	; Unrecognized switch passed
 37243 00002F09 4E                      pvErr:	dec	si
 37244 00002F0A 4E                      	dec	si
 37245 00002F0B F9                      	stc
 37246                                  pvX:	;popreg	<es, ds, di>
 37247 00002F0C 07                      	pop	es
 37248 00002F0D 1F                      	pop	ds
 37249                                  	; 01/01/2023
 37250                                  	;pop	di ; * ; (not required) ; 01/01/2023
 37251 00002F0E C3                      	retn
 37252                                  
 37253                                  ; -----------------------------------------------------------------------------
 37254                                  ;*** parseL - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 37255                                  ; -----------------------------------------------------------------------------
 37256                                  ; ENTRY:    ES:SI points to colon
 37257                                  ; EXIT:     ES:SI points to first character not parsed
 37258                                  ; ERROR:    Carry set; rewind three characters and return (see ParseVar)
 37259                                  ; USES:     ES:SI, flags, AX, CX, DX, variables in highvar.inc
 37260                                  ; -----------------------------------------------------------------------------
 37261                                  ; If the string here is terminated with anything other than whitespace or a
 37262                                  ; switchchar (perhaps it's /S or another /L:... ), then we return with carry
 37263                                  ; set, indicating that they've screwed up the syntax.  The 3-character rewind
 37264                                  ; makes sure the app /L: is reported as being the culprit.
 37265                                  ; -----------------------------------------------------------------------------
 37266                                  
 37267                                  parseL:
 37268 00002F0F AC                      	lodsb
 37269 00002F10 3C3A                    	cmp	al,':'		; Make sure they did /L:
 37270 00002F12 754E                    	jne	short plE1	; If they didn't, return with carry set.
 37271                                  
 37272                                  ; ------------------------------------------
 37273                                  ; PL10--ES:SI = a UMB number, after /L: or ;
 37274                                  ; ------------------------------------------
 37275                                  
 37276 00002F14 E8DB00                  pl10:	call	GetXNum		; After this, 'tis ",size" or ";umb" or " mod"
 37277 00002F17 724F                    	jc	short plE2	; And error if it's a bad number.
 37278 00002F19 E89D01                  	call	convUMB		; Convert any address to a UMB number
 37279                                  
 37280 00002F1C 88C1                    	mov	cl,al		; Remember the UMB number
 37281 00002F1E E87600                  	call	stowUMB		; Mark this UMB # as used;
 37282 00002F21 7245                    	jc	short plE2	; If it was already marked, it'll error
 37283                                  
 37284                                  	;call	incArgc		; Each UMB number is another arg for LH to skip
 37285 00002F23 2EFE06[9823]            	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 37286                                  
 37287 00002F28 AC                      	lodsb
 37288 00002F29 3C3B                    	cmp	al,';'		; Did "umb;" ?
 37289 00002F2B 74E7                    	je	short pl10	; Yep: go back and get another UMB.
 37290                                  
 37291 00002F2D E84900                  	call	isWhite		; Did "umb " ?
 37292 00002F30 743B                    	jz	short plX	; Yep: return (it'll go back to whitespace)
 37293                                  
 37294 00002F32 E83900                  	call	isEOL		; Did "umb" ?
 37295 00002F35 7435                    	jz	short plSwX	; If so, backup and exit like everything's ok
 37296                                  
 37297                                  	;cmp	al,'/'
 37298 00002F37 3C2F                    	cmp	al,SWTCH 	; Did "umb/" ? (as in, "/L:1,100;2/S")
 37299 00002F39 7431                    	je	short plSwX	; If so, back up ES:SI one character and return
 37300                                  
 37301 00002F3B 3C2C                    	cmp	al,','		; Did "umb," ?
 37302 00002F3D 7523                    	jne	short plE1	; Just what the heck DID they do? Return error.
 37303                                  
 37304                                  ; --- Read a size -------------------------------------------------------------
 37305                                  
 37306 00002F3F E8B000                  	call	GetXNum		; Stop on "size;" or "size " or anything else
 37307 00002F42 721E                    	jc	short plE1	; And error if it's a bad size.
 37308                                  
 37309 00002F44 E81601                  	call	toPara		; Convert from bytes to paragraphs
 37310                                  
 37311 00002F47 E8CE01                  	call	stowSiz		; CL still has the UMB number for this routine
 37312                                  
 37313                                  	;call	incArgc		; Each UMB size is another arg for LH to skip
 37314 00002F4A 2EFE06[9823]            	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 37315                                  
 37316 00002F4F AC                      	lodsb
 37317 00002F50 3C3B                    	cmp	al,';'		; They did "umb,size;", so get another UMB.
 37318 00002F52 74C0                    	je	short pl10	;
 37319                                  
 37320 00002F54 E82200                  	call	isWhite		; Did it end with whitespace?
 37321 00002F57 7414                    	jz	short plX	; If so, we're done here--go back.
 37322                                  
 37323 00002F59 E81200                  	call	isEOL		; Did they do "umb,size" and end??? (stupid)
 37324 00002F5C 740E                    	jz	short plSwX	; If so, backup and exit like everything's ok
 37325                                  
 37326                                  	;cmp	al,'/'
 37327 00002F5E 3C2F                    	cmp	al,SWTCH	; Did they do "umb,size/" ?
 37328 00002F60 740A                    	je	short plSwX	; If so, again, we're done here.
 37329                                  plE1:	
 37330                                  	;mov	ax,1
 37331 00002F62 B80100                  	mov	ax,PV_InvArg	; If not, we don't know WHAT they did...
 37332 00002F65 4E                      	dec	si
 37333 00002F66 F9                      	stc
 37334 00002F67 C3                      	retn
 37335                                  
 37336                                  plE2:	;mov	ax,2
 37337 00002F68 B80200                  	mov	ax,PV_BadUMB	; In this case, they've specified a UMB twice
 37338                                  	; 12/12/2022
 37339                                  	; cf=1
 37340                                  	;stc
 37341 00002F6B C3                      	retn
 37342                                  plSwX:	
 37343 00002F6C 4E                      	dec	si		; If we hit a '/' character, back up one char
 37344                                  				; so the whitespace checker will see it too.
 37345                                  plX:	; 12/12/2022
 37346                                  	; cf=0
 37347                                  	;clc			; Then just return with carry clear, so
 37348 00002F6D C3                      	retn			; ParseVar will go about its business.
 37349                                  
 37350                                  ; -----------------------------------------------------------------------------
 37351                                  ;*** incArgc - increments fm_argc, for use with LoadHigh command-line parsing
 37352                                  ; -----------------------------------------------------------------------------
 37353                                  ; ENTRY:    None
 37354                                  ; EXIT:     None
 37355                                  ; ERROR:    None
 37356                                  ; USES:     fm_argc, flags
 37357                                  ; -----------------------------------------------------------------------------
 37358                                  
 37359                                  ;incArgc:
 37360                                  	;push	ax
 37361                                  
 37362                                  	;;getdata al, fm_argc	; Obtain previous value of fm_argc,
 37363                                  
 37364                                  	;mov	al,[cs:fm_argc]
 37365                                  
 37366                                  	;inc	al		; Increment it,
 37367                                  
 37368                                  	;;putdata fm_argc, al	; And store it right back.
 37369                                  
 37370                                  	;mov	[cs:fm_argc],al
 37371                                  
 37372                                  	;pop	ax
 37373                                  	;retn
 37374                                  
 37375                                  ; -----------------------------------------------------------------------------
 37376                                  ;*** isEOL - returns with ZF set if AL contains CR or LF, or 0
 37377                                  ; -----------------------------------------------------------------------------
 37378                                  ; ENTRY:    AL contains character to test
 37379                                  ; EXIT:     ZF set iff AL contains CR or LF, or 0
 37380                                  ; ERROR:    None
 37381                                  ; USES:     ZF
 37382                                  ; -----------------------------------------------------------------------------
 37383                                  
 37384                                  isEOL:
 37385 00002F6E 3C00                    	cmp	al,0		; Null-terminator
 37386 00002F70 7406                    	je	short ieX
 37387 00002F72 3C0D                    	cmp	al,CR ; 0Dh	; Carriage Return
 37388 00002F74 7402                    	je	short ieX
 37389 00002F76 3C0A                    	cmp	al,LF ; 0Ah	; LineFeed
 37390                                  ieX:	
 37391 00002F78 C3                      	retn
 37392                                  
 37393                                  ; -----------------------------------------------------------------------------
 37394                                  ;*** isWhite - returns with ZF set if AL contains whitespace (or "=")
 37395                                  ; -----------------------------------------------------------------------------
 37396                                  ; ENTRY:    AL contains character to test
 37397                                  ; EXIT:     ZF set iff AL contains space, tab, or equals
 37398                                  ; ERROR:    None
 37399                                  ; USES:     ZF
 37400                                  ; -----------------------------------------------------------------------------
 37401                                  
 37402                                  isWhite:
 37403 00002F79 3C20                    	cmp	al,' '		; Space
 37404 00002F7B 7406                    	je	short iwX
 37405 00002F7D 3C3D                    	cmp	al,'='		; Equals (treat as whitespace)
 37406 00002F7F 7402                    	je	short iwX
 37407 00002F81 3C09                    	cmp	al,tab ; 9	; Tab
 37408                                  iwX:	
 37409 00002F83 C3                      	retn
 37410                                  
 37411                                  ; -----------------------------------------------------------------------------
 37412                                  ;*** unMarkUMB - marks a given UMB as unused, even if previously marked used
 37413                                  ; -----------------------------------------------------------------------------
 37414                                  ; ENTRY:    AL contains UMB number
 37415                                  ; EXIT:     None
 37416                                  ; ERROR:    None
 37417                                  ; USES:     Flags, variables in highvar.inc
 37418                                  ; -----------------------------------------------------------------------------
 37419                                  
 37420                                  	; 02/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37421                                  
 37422                                  unMarkUMB:
 37423                                  	; 02/01/2023
 37424                                  	;push	ax
 37425                                  	;push	bx
 37426                                  	;push	di
 37427                                  	;push	es
 37428                                  	;
 37429                                  	;push	cs
 37430                                  	;pop	es
 37431                                  
 37432 00002F84 30E4                    	xor	ah,ah
 37433 00002F86 89C3                    	mov	bx,ax
 37434                                  
 37435                                  	; 19/04/2019
 37436                                  	
 37437                                  	;;mov	byte [es:bx+UmbUsed],0
 37438                                  	;mov	[es:bx+UmbUsed],ah ; 0
 37439                                  	; 02/01/2023
 37440                                  	; ds= cs
 37441                                  	;mov	[cs:bx+UmbUsed],ah ; 0
 37442 00002F88 88A7[6623]              	mov	[bx+UmbUsed],ah ; 0
 37443                                  
 37444 00002F8C 3806[6523]              	cmp	[UmbLoad],al
 37445                                  	;cmp	[cs:UmbLoad],al
 37446                                  	;;cmp	[es:UmbLoad],al
 37447 00002F90 7504                    	jne	short umu10
 37448                                  
 37449                                  	;;mov	[es:UmbLoad],0	; If unmarked the load UMB, load into convent.
 37450                                  	;mov	[es:UmbLoad],ah ; 0
 37451                                  	; 02/01/2023
 37452                                  	; ds = cs
 37453                                  	;mov	[cs:UmbLoad],ah ; 0
 37454 00002F92 8826[6523]              	mov	[UmbLoad],ah ; 0
 37455                                  umu10:	
 37456                                  	;pop	es
 37457                                  	;pop	di
 37458                                  	;pop	bx
 37459                                  	;pop	ax
 37460 00002F96 C3                      	retn
 37461                                  
 37462                                  ; -----------------------------------------------------------------------------
 37463                                  ;*** stowUMB - marks a given UMB as used, if it hasn't been so marked before
 37464                                  ;            -- accepts a UMB # in AL, and makes sure it hasn't yet been
 37465                                  ; listed in the /L:... chain. If it's the first one specified, it sets UmbLoad
 37466                                  ; to that UMB #... and in any case, it marks the UMB as specified.
 37467                                  ; -----------------------------------------------------------------------------
 37468                                  ; ENTRY:    AL contains UMB number, as specified by the user
 37469                                  ; EXIT:     None
 37470                                  ; ERROR:    Carry set if UMB # is less than 0 or >= MAXUMB (see highvar.inc)
 37471                                  ; USES:     AX, Flags, variables in highvar.inc
 37472                                  ; -----------------------------------------------------------------------------
 37473                                  
 37474                                  	; 01/01/2023 - Retro DOS v4.2
 37475                                  stowUMB:
 37476 00002F97 3C10                    	cmp	al,MAXUMB ; 16
 37477 00002F99 7202                    	jb	short su10
 37478 00002F9B F9                      	stc
 37479 00002F9C C3                      	retn			; Ooops-- UMB>=MAXUMB
 37480                                  su10:	
 37481                                  	; 01/01/2023
 37482                                  	;push	bx
 37483                                  	;push	di
 37484                                  	;push	si
 37485                                  	;push	ds
 37486                                  	;push	es
 37487                                  	;push	cs
 37488                                  	;pop	es
 37489                                  	;push	cs
 37490                                  	;pop	ds
 37491                                  
 37492                                  	; 01/01/2023
 37493                                  	; ds <> cs
 37494                                  	;cmp	byte [cs:UmbLoad],0FFh
 37495 00002F9D 2E803E[6523]FF          	cmp	byte [cs:UmbLoad],UNSPECIFIED
 37496                                  				; If this, we haven't been here before
 37497 00002FA3 7504                    	jne	short su20
 37498 00002FA5 2EA2[6523]              	mov	[cs:UmbLoad],al	; So remember this UMB as the load UMB slot.
 37499                                  
 37500                                  	;;cmp	byte [UmbLoad],0FFh
 37501                                  	;cmp	byte [UmbLoad],UNSPECIFIED ; If this, we haven't been here before
 37502                                  	;jne	short su20
 37503                                  	;mov	[UmbLoad],al	; So remember this UMB as the load UMB slot.
 37504                                  su20:	
 37505 00002FA9 08C0                    	or	al,al		; If they gave UMB 0, there's really nothing
 37506 00002FAB 740E                    	jz	short su30	; that we should do here.
 37507                                  
 37508                                  	;mov	bl,al
 37509                                  	;xor	bh,bh
 37510                                  	;mov	ax,1		; Now, AX = 1, and BX = UMB Number
 37511                                  	; 01/01/2023
 37512 00002FAD 30E4                    	xor	ah,ah
 37513 00002FAF 89C3                    	mov	bx,ax
 37514 00002FB1 B001                    	mov	al,1
 37515                                  
 37516                                  	;xchg	[es:bx+UmbUsed],al
 37517                                  	; 01/01/2023
 37518 00002FB3 2E8687[6623]            	xchg	[cs:bx+UmbUsed],al
 37519                                  
 37520                                  	;or	al,al		; If it was already 1, then al==1... and that
 37521                                  	;jz	short su30	; means an error.
 37522                                  	;
 37523                                  	;stc			; OOOPS!  This one's been used before.  :(
 37524                                  	
 37525                                  	; 01/01/2023
 37526 00002FB8 3C01                    	cmp	al,1
 37527 00002FBA F5                      	cmc 	; if al > 0 -> cf = 1
 37528                                  su30:	
 37529                                  	; 01/01/2023
 37530                                  	;pop	es
 37531                                  	;pop	ds
 37532                                  	;pop	si
 37533                                  	;pop	di
 37534                                  	;pop	bx
 37535 00002FBB C3                      	retn
 37536                                  
 37537                                  ; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 37538                                  %if 0
 37539                                  ; -----------------------------------------------------------------------------
 37540                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 37541                                  ; -----------------------------------------------------------------------------
 37542                                  ; ENTRY:    CL contains UMB number, AX contains size
 37543                                  ; EXIT:     None
 37544                                  ; ERROR:    None
 37545                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 37546                                  ; -----------------------------------------------------------------------------
 37547                                  
 37548                                  ; 13/05/2019
 37549                                  
 37550                                  	; 01/01/2023 - Retro DOS v4.2
 37551                                  stowSiz:
 37552                                  	; 01/01/2023
 37553                                  	;push	bx
 37554                                  	;;push	di ; ?
 37555                                  	;push	es
 37556                                  
 37557                                  	;push	cs
 37558                                  	;pop	es	
 37559                                  
 37560                                  	mov	bl,cl			; Now bl==UMB number, AX==size
 37561                                  	mov	bh,0			;     bx==UMB number, AX==size
 37562                                  	shl	bl,1			;     bx==offset into array, AX=size
 37563                                  	;mov	[es:bx+UmbSize],ax	; Store the size
 37564                                  	; 01/01/2023
 37565                                  	mov	[cs:bx+UmbSize],ax	; Store the size
 37566                                  
 37567                                  	; 01/01/2023
 37568                                  	;pop	es
 37569                                  	;;pop	di ; ?
 37570                                  	;pop	bx
 37571                                  
 37572                                  	retn
 37573                                  %endif
 37574                                  
 37575                                  ; -----------------------------------------------------------------------------
 37576                                  ;*** toDigit - converts a character-digit to its binary counterpart
 37577                                  ;            -- verifies that CL contains a valid character-digit; if so, it
 37578                                  ; changes CL to its counterpart binary digit ((CL-'0') or (CL-'A'+10)).
 37579                                  ; A-F are considered valid iff gnradix is 16.
 37580                                  ; -----------------------------------------------------------------------------
 37581                                  ; ENTRY:    CL contains a digit ('0' to '9' or, if gnradix==16, 'A' to 'F')
 37582                                  ; EXIT:     CL contains digit in binary (0 to 9 or, if gnradix==16, 0 to 15)
 37583                                  ; ERROR:    Carry set indicates invalid digit; carry clear indicates good digit
 37584                                  ; USES:     CL, Flags
 37585                                  ; -----------------------------------------------------------------------------
 37586                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 37587                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 37588                                  ; will be 10 or 16.
 37589                                  ; -----------------------------------------------------------------------------
 37590                                  
 37591                                  gnradix:
 37592 00002FBC 0000                    	dw	0		; Must be a word--16x16 multiplication
 37593                                  
 37594                                  toDigit:
 37595 00002FBE 2E833E[BC2F]10          	cmp	word [cs:gnradix],16
 37596 00002FC4 751C                    	jne	short td20	; Don't check hex digits if radix isn't 16
 37597                                  
 37598                                  toDigit_hex:
 37599 00002FC6 80F961                  	cmp	cl,'a'	; 61h
 37600 00002FC9 7209                    	jb	short td10
 37601 00002FCB 80F966                  	cmp	cl,'f'	; 66h
 37602 00002FCE 7720                    	ja	short tdE	; Nothing valid above 'z' at all...
 37603 00002FD0 80E957                  	sub	cl,'a'-10 ; 57h	; Make 'a'==10 and return.
 37604                                  	;clc			; <- CLC is implicit from last SUB
 37605 00002FD3 C3                      	retn
 37606                                  td10:	
 37607 00002FD4 80F941                  	cmp	cl,'A'  ; 41h
 37608 00002FD7 7209                    	jb	short td20	; Below 'A'?  Not a letter...
 37609 00002FD9 80F946                  	cmp	cl,'F'	; 46h
 37610 00002FDC 7712                    	ja	short tdE	; Above 'F'?  Not a digit.
 37611 00002FDE 80E937                  	sub	cl,'A'-10 ; 37h	; Make 'A'==10 and return.
 37612                                  	;clc			; <- CLC is implicit from last SUB
 37613 00002FE1 C3                      	retn
 37614                                  toDigit_dec:
 37615                                  td20:	
 37616 00002FE2 80F930                  	cmp	cl,'0'		; If less than zero,
 37617                                  	;jb	short tdE	; Done.
 37618 00002FE5 720A                    	jb	short tdEr ; 08/04/2019
 37619 00002FE7 80F939                  	cmp	cl,'9'		; Or, if greater than nine,
 37620 00002FEA 7704                    	ja	short tdE	; Done.
 37621 00002FEC 80E930                  	sub	cl,'0'	; 30h	; Okay--make '0'==0 and return.
 37622                                  	;clc			; <- CLC is implicit from last SUB
 37623 00002FEF C3                      	retn
 37624                                  tdE:	
 37625 00002FF0 F9                      	stc
 37626                                  tdEr:		; 08/04/2019 - Retro DOS v4.0	
 37627 00002FF1 C3                      	retn
 37628                                  
 37629                                  ; -----------------------------------------------------------------------------
 37630                                  ;*** GetXNum - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 37631                                  ; -----------------------------------------------------------------------------
 37632                                  ; ENTRY:    ES:SI points to an ascii string to scan
 37633                                  ; EXIT:     ES:SI moved to first invalid digit, DX:AX contains value read
 37634                                  ; ERROR:    Carry set if # is too big, or has no digits (EOL possibly)
 37635                                  ; USES:     ES:SI, DX, AX, Flags, gnradix
 37636                                  ; -----------------------------------------------------------------------------
 37637                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 37638                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 37639                                  ; will be 10 or 16.
 37640                                  ; -----------------------------------------------------------------------------
 37641                                  
 37642                                  ; 08/04/2019 - Retro DOS v4.0
 37643                                  
 37644                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37645                                  ; (SYSINIT:3109h)
 37646                                  
 37647                                  GetXNum:
 37648                                  	;pushreg <bx, cx, ds>
 37649                                  	; 01/01/2023
 37650                                  	;push	bx
 37651 00002FF2 51                      	push	cx ; *
 37652                                  	;push	ds
 37653                                  
 37654 00002FF3 FC                      	cld
 37655 00002FF4 31C0                    	xor	ax,ax
 37656 00002FF6 31DB                    	xor	bx,bx
 37657 00002FF8 31C9                    	xor	cx,cx
 37658 00002FFA 31D2                    	xor	dx,dx			; Start with 0 (makes sense)
 37659                                  
 37660 00002FFC 2EC706[BC2F]0A00        	mov	word [cs:gnradix],10	; And default to a radix of 10 (dec)
 37661                                  
 37662 00003003 268A0C                  	mov	cl,[es:si]		; Now AX=0, BX=0, CH=0/CL=char, DX=0
 37663                                  	;call	toDigit
 37664 00003006 E8D9FF                  	call	toDigit_dec
 37665                                  	;jc	short gxnE		; If it's not a digit, leave now.
 37666                                  	; 01/01/2023
 37667 00003009 7233                    	jc	short gxnX
 37668                                  
 37669 0000300B 08C9                    	or	cl,cl
 37670 0000300D 7517                    	jnz	short gxn20		; Doesn't have '0x'
 37671 0000300F 268A4C01                	mov	cl,[es:si+1]
 37672 00003013 80F978                  	cmp	cl,'x'			; Either 'x'...
 37673 00003016 7405                    	je	short gxn10
 37674 00003018 80F958                  	cmp	cl,'X'			; ...or 'X' means it's hexadecimal
 37675 0000301B 7509                    	jne	short gxn20
 37676                                  
 37677                                  gxn10:	
 37678 0000301D 2EC706[BC2F]1000        	mov	word [cs:gnradix], 16
 37679 00003024 46                      	inc	si			; Since we read "0x", march over it.
 37680 00003025 46                      	inc	si
 37681                                  
 37682                                  ; ------------------------------------------------------
 37683                                  ; GXN20--ES:SI = a digit in a number; if not, we're done
 37684                                  ;        DX:AX = current total
 37685                                  ;        BX    = 0
 37686                                  ;        CH    = 0
 37687                                  ; ------------------------------------------------------
 37688                                  
 37689                                  gxn20:	
 37690 00003026 268A0C                  	mov	cl,[es:si]	; Now DX:AX=current total, CH=0/CL=char
 37691 00003029 46                      	inc	si
 37692                                  
 37693 0000302A E891FF                  	call	toDigit		; Accepts only valid digits, A-F -> 10-16
 37694 0000302D 720D                    	jc	short gxnQ	; <- Ah... wasn't a digit. Stop.
 37695                                  
 37696 0000302F E80E00                  	call	mul32		; Multiply DX:AX by gnradix
 37697 00003032 720A                    	jc	short gxnX	; (if it's too big, error out)
 37698                                  
 37699 00003034 01C8                    	add	ax,cx		; Add the digit
 37700 00003036 11DA                    	adc	dx,bx		; (BX is 0!)--Adds 1 iff last add wrapped
 37701                                  	;jc	short gxnX	; If _that_ wrapped, it's too big.
 37702                                  	;jmp	short gxn20
 37703 00003038 73EC                    	jnc	short gxn20
 37704                                  gxnE:	
 37705                                  	;stc			; In this case, we need to set the carry
 37706 0000303A EB02                    	jmp	short gxnX	; and leave--there were no digits given.
 37707                                  gxnQ:	
 37708 0000303C 4E                      	dec	si		; Don't read in the offensive character.
 37709 0000303D F8                      	clc			; And clear carry, so they know it's okay.
 37710                                  gxnX:	
 37711                                  	; 01/01/2023
 37712                                  	;pop	ds
 37713 0000303E 59                      	pop	cx ; *
 37714                                  	;pop	bx
 37715 0000303F C3                      	retn
 37716                                  
 37717                                  ; -----------------------------------------------------------------------------
 37718                                  ;*** mul32 - multiplies the number in DX:AX by gnradix
 37719                                  ; -----------------------------------------------------------------------------
 37720                                  ; ENTRY:   DX:AX = the number to be multiplied, BX = 0, gnradix = multiplier
 37721                                  ; EXIT:    DX:AX has been multiplied by gnradix if carry clear; BX still 0
 37722                                  ; ERROR:   Carry set if number was too large
 37723                                  ; USES:    Flags, AX, DX
 37724                                  ; -----------------------------------------------------------------------------
 37725                                  
 37726                                  mul32:
 37727 00003040 50                      	push	ax		; DX=old:hi, AX=old:lo, TOS=old:lo, BX=0
 37728 00003041 89D0                    	mov	ax,dx		; DX=old:hi, AX=old:hi, TOS=old:lo, BX=0
 37729 00003043 2EF726[BC2F]            	mul	word [cs:gnradix] ; DX=?, AX=new:hi, TOS=old:lo, BX=0
 37730 00003048 7211                    	jc	short m32E	; Too big?
 37731                                  
 37732 0000304A 89C2                    	mov	dx,ax		; DX=new:hi, AX=new:hi, TOS=old:lo, BX=0
 37733 0000304C 58                      	pop	ax		; DX=new:hi, AX=old:lo, TOS=orig, BX=0
 37734                                  
 37735 0000304D 87D3                    	xchg	dx,bx		; DX=0, AX=old:lo, TOS=orig, BX=new:hi
 37736 0000304F 2EF726[BC2F]            	mul	word [cs:gnradix] ; DX=carry,  AX=new:lo, TOS=orig, BX=new:hi
 37737 00003054 87D3                    	xchg	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 37738 00003056 01DA                    	add	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 37739 00003058 31DB                    	xor	bx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=0
 37740 0000305A C3                      	retn
 37741                                  m32E:	
 37742 0000305B 58                      	pop	ax
 37743 0000305C C3                      	retn
 37744                                  
 37745                                  ; -----------------------------------------------------------------------------
 37746                                  ;*** toPara - divides DX:AX by 16; result in AX only (discards extra DX data)
 37747                                  ; -----------------------------------------------------------------------------
 37748                                  ; ENTRY:   DX:AX = the number to be divided
 37749                                  ; EXIT:    Interpereting DX:AX as bytes, AX=paragraph equivalent, 0xFFFF max
 37750                                  ; ERROR:   None
 37751                                  ; USES:    Flags, AX, DX
 37752                                  ; -----------------------------------------------------------------------------
 37753                                  ; Note: The 386 has a 32-bit SHR, which would work perfectly for this... but we
 37754                                  ;       can't ensure a 386 host machine. Sorry.
 37755                                  ; -----------------------------------------------------------------------------
 37756                                  
 37757                                  	; 01/01/2023 - Retro DOS v4.2
 37758                                  toPara:
 37759 0000305D 51                      	push	cx		; DX:AX=HHHH hhhh hhhh hhhh:LLLL llll llll llll
 37760                                  
 37761 0000305E B104                    	mov	cl,4		;
 37762 00003060 D3E8                    	shr	ax,cl		; DX:AX=HHHH hhhh hhhh hhhh:0000 LLLL llll llll
 37763 00003062 92                      	xchg	ax,dx		; DX:AX=0000 LLLL llll llll:HHHH hhhh hhhh hhhh
 37764 00003063 B10C                    	mov	cl,12
 37765 00003065 D3E0                    	shl	ax,cl		; DX:AX=0000 LLLL llll llll:hhhh 0000 0000 0000
 37766 00003067 09D0                    	or	ax,dx		;    AX=hhhh LLLL llll llll
 37767                                  
 37768 00003069 59                      	pop	cx
 37769 0000306A C3                      	retn
 37770                                  
 37771                                  ; -----------------------------------------------------------------------------
 37772                                  ;*** UmbHead - returns in AX the address of the first UMB block (0x9FFF)
 37773                                  ; -----------------------------------------------------------------------------
 37774                                  ; ENTRY:  Nothing
 37775                                  ; EXIT:   AX contains 0x9FFF for most systems
 37776                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 37777                                  ; USES:   Flags, AX
 37778                                  ; -----------------------------------------------------------------------------
 37779                                  ; Early in the boot-cycle, the pointer used to obtain this value isn't set up;
 37780                                  ; to be precise, before a UMB provider is around. In this event, the pointer
 37781                                  ; is always set to 0xFFFF; it changes once a provider is around. On most
 37782                                  ; machines (all of 'em I've seen), it changes to 0x9FFF at that point.
 37783                                  ; -----------------------------------------------------------------------------
 37784                                  
 37785                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37786                                  UmbHead:
 37787                                  	; 13/05/2019 (because of callers, pushs & pops are not needed here)
 37788                                  
 37789                                  	;push	si ; ?
 37790                                  	;push	ds ; ? 
 37791                                  	;push	es
 37792                                  	;push	bx ; *	
 37793                                  
 37794                                  	; 09/04/2019
 37795                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 37796                                  
 37797 0000306B B452                    	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 37798 0000306D CD21                    	int	21h
 37799                                  
 37800 0000306F 26A18C00                	mov	ax,[es:DOS_UMB_HEAD]	; And read what's in ES:[008C]
 37801                                  	
 37802                                  	; 01/01/2023
 37803 00003073 83F8FF                  	cmp	ax,0FFFFh
 37804 00003076 F5                      	cmc
 37805                                  	; if AX=0FFFFh -> CF=1
 37806 00003077 C3                      	retn
 37807                                  
 37808                                  ; 01/01/2023
 37809                                  ;%if 0
 37810                                  ;	cmp	ax,0FFFFh
 37811                                  ;	je	short uhE		; If it's 0xFFFF, it's an error...
 37812                                  ;
 37813                                  ;	clc				; Else, it isn't (CLC done by prev cmp)
 37814                                  ;	;jmp	short uhX
 37815                                  ;	; 12/12/2022
 37816                                  ;	retn
 37817                                  ;uhE:	
 37818                                  ;	stc
 37819                                  ;uhX:	
 37820                                  ;	;pop	bx ; *
 37821                                  ;	;pop	es
 37822                                  ;	;pop	ds ; ?
 37823                                  ;	;pop	si ; ?
 37824                                  ;	retn
 37825                                  ;%endif
 37826                                  
 37827                                  ; -----------------------------------------------------------------------------
 37828                                  ;*** isSysMCB - sets ZF if ES points to an MCB owned by "SC" + (8 or 9)
 37829                                  ; -----------------------------------------------------------------------------
 37830                                  ; ENTRY:  ES:0 should point to a valid MCB
 37831                                  ; EXIT:   ZF set if owned by SC+8 or SC+9 (for japan)
 37832                                  ; USES:   Flags
 37833                                  ; -----------------------------------------------------------------------------
 37834                                  
 37835                                  isSysMCB:
 37836                                  	;push	ax
 37837                                  
 37838                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 37839                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 37840                                  	;je	short ism10
 37841                                  	;cmp	ax,JapanPSPOwner	; 9 (for Japan) is valid
 37842                                  	;;je	short ism10
 37843                                  	;;jmp	short ismX		; Anything else isn't.
 37844                                  	;jne	short ismX
 37845 00003078 26833E010008            	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; 8  ; 09/04/2019
 37846 0000307E 7507                    	jne	short ismX 
 37847                                  ism10:	
 37848                                  	;mov	ax,[es:ARENA.NAME]	; Check the name...
 37849                                  	;cmp	ax,'SC' ; 4353h
 37850 00003080 26813E08005343          	cmp	word [es:ARENA.NAME],'SC'
 37851                                  ismX:	
 37852                                  	;pop	ax
 37853 00003087 C3                      	retn
 37854                                  
 37855                                  ; 09/04/2019 - Retro DOS v4.0
 37856                                  
 37857                                  ; -----------------------------------------------------------------------------
 37858                                  ;*** AddrToUmb - converts a segment address in AX to its appropriate UMB number
 37859                                  ; -----------------------------------------------------------------------------
 37860                                  ; ENTRY:  AX contains a segment address
 37861                                  ; EXIT:   AX will contain the UMB number which contains the address (0==conv)
 37862                                  ; ERROR:  If the address is above UM Range, AX will return as FFFF.
 37863                                  ; USES:   Flags, AX
 37864                                  ; -----------------------------------------------------------------------------
 37865                                  ; An address in the following areas is treated as:
 37866                                  ;    0      <-> umbhead (0x9FFF)          = Conventional memory
 37867                                  ;    0x9FFF <-> addr of first UM sys MCB  = UMB #1
 37868                                  ;      ...
 37869                                  ;    addr of last UM sys MCB <-> TOM      = invalid; returns #0xFFFF
 37870                                  ; -----------------------------------------------------------------------------
 37871                                  
 37872                                  	; 01/01/2023 - Retro DOS v4.2
 37873                                  AddrToUmb:
 37874                                  	; 01/01/2023
 37875                                  	;push	cx
 37876                                  	;push	dx
 37877 00003088 06                      	push	es
 37878                                  
 37879 00003089 89C2                    	mov	dx,ax		; DX = address to search for
 37880                                  
 37881 0000308B E8DDFF                  	call	UmbHead		; AX = first segment
 37882 0000308E 7222                    	jc	short atuE	; If it couldn't get it, error out.
 37883                                  
 37884                                  	; 22/07/2023
 37885                                  	;mov	es,ax ; *	; ES = first UMB segment
 37886 00003090 31C9                    	xor	cx,cx ; 0	; Pretend we're on UMB 0 for now... (cx = UMB#)
 37887                                  
 37888                                  	; 22/07/2023
 37889                                  atu10:
 37890 00003092 8EC0                    	mov	es,ax ; * ; ** ; 22/07/2023
 37891                                  ; ----------------------------------------
 37892                                  ; ATU10--ES - Current MCB address
 37893                                  ;        DX - Address given for conversion
 37894                                  ;        CX - Current UMB #
 37895                                  ; ----------------------------------------
 37896                                  
 37897                                  ;atu10:	
 37898                                  	;mov	ax,es ; * ; 18/07/2023
 37899 00003094 39D0                            cmp	ax,dx		; Present segment >= given segment?
 37900 00003096 731D                    	jae	short atuX	; Yep--done.
 37901                                  
 37902 00003098 E8DDFF                  	call	isSysMCB	; Returns with ZF set if this is a system MCB
 37903 0000309B 7501                    	jnz	short atu20
 37904                                  
 37905 0000309D 41                      	inc	cx		; If it _was_ a system MCB, we're in a new UMB.
 37906                                  atu20:	
 37907                                  	;mov	al,[es:ARENA.SIGNATURE]
 37908                                  	;cmp	al,arena_signature_end  ; 'Z'
 37909                                  	; 22/07/2023
 37910                                  	; ax = es
 37911                                  	;mov	ax,es ; **
 37912 0000309E 2603060300              	add	ax,[es:ARENA.SIZE]
 37913 000030A3 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end
 37914 000030A9 7403                    	je	short atu30		; 'Z' means this was the last MCB... that's it.
 37915                                  
 37916                                  	;NextMCB es,ax
 37917                                  
 37918                                  	;mov	ax,es ; **
 37919                                  	;;add	ax,[es:3]
 37920                                  	;add	ax,[es:ARENA.SIZE]
 37921 000030AB 40                      	inc	ax
 37922                                  	; 22/07/2023
 37923                                  	;mov	es,ax ; *
 37924 000030AC EBE4                    	jmp	short atu10
 37925                                  
 37926                                  ; -----------------------------------------------------------------------------
 37927                                  ; if we get to atu30, they specified a number that was past the last MCB.
 37928                                  ; make sure it's not _inside_ that MCB before we return an error condition.
 37929                                  ; -----------------------------------------------------------------------------
 37930                                  
 37931                                  atu30:	
 37932                                  	; 22/07/2023
 37933                                  	; ax = es + [es:ARENA.SIZE] 
 37934                                  	;mov	ax,es ; **
 37935                                  	;add	ax,[es:ARENA.SIZE] ; **
 37936 000030AE 39D0                    	cmp	ax,dx		; Present >= given?
 37937 000030B0 7303                    	jae	short atuX	; Yep! It _was_ inside.
 37938                                  atuE:	
 37939 000030B2 31C9                    	xor	cx,cx ; 0	; Else, fall through with UMB # == -1
 37940 000030B4 49                      	dec	cx		; (that makes it return 0xFFFF and sets CF)
 37941                                  atuX:	
 37942 000030B5 89C8                    	mov	ax,cx		; Return the UMB number in AX
 37943                                  	
 37944 000030B7 07                      	pop	es	
 37945                                  	; 01/01/2023
 37946                                  	;pop	dx
 37947                                  	;pop	cx
 37948 000030B8 C3                      	retn
 37949                                  
 37950                                  ; -----------------------------------------------------------------------------
 37951                                  ;*** convUMB - checks after GetXNum to convert an address to a UMB number
 37952                                  ;            -- if GetXNum read a hex number, we interperete that as a segment
 37953                                  ; address rather than a UMB number... and use that address to look up a UMB.
 37954                                  ; This routine checks for that condition and calls AddrToUmb if necessary.
 37955                                  ; -----------------------------------------------------------------------------
 37956                                  ; ENTRY:  AX contains a UMB number or segment, gnradix has been set by GetXNum
 37957                                  ; EXIT:   AX will contain a UMB number
 37958                                  ; ERROR:  None
 37959                                  ; USES:   Flags, AX
 37960                                  ; -----------------------------------------------------------------------------
 37961                                  
 37962                                  	; 01/01/2023 - Retro DOS v4.2
 37963                                  convUMB:
 37964 000030B9 2E833E[BC2F]10          	cmp	word [cs:gnradix],16
 37965 000030BF 7507                    	jne	short cu10	; If it didn't read in hex, it's not an address
 37966 000030C1 E8C4FF                  	call	AddrToUmb	; Else, convert the address to a UMB number
 37967                                  	;cmp	ax,0FFFFh
 37968                                  	;jne	short cu10
 37969                                  	;inc	ax		; If too high, ignore it (make it conventional)
 37970                                  	; 01/01/2023
 37971 000030C4 40                      	inc	ax
 37972 000030C5 7401                    	jz	short cu10	; If too high, ignore it (make it conventional)
 37973 000030C7 48                      	dec	ax
 37974                                  cu10:	
 37975 000030C8 C3                      	retn
 37976                                  
 37977                                  ; 01/01/2023 - Retro DOS v4.2
 37978                                  ;%if 0
 37979                                  ;
 37980                                  ;; -----------------------------------------------------------------------------
 37981                                  ;;*** setUMBs - links umbs and sets allocation strategy for a load
 37982                                  ;;            -- if LoadHigh, the allocation strategy MAY be LOW_FIRST instead
 37983                                  ;; of the usual HIGH_FIRST. See the code.
 37984                                  ;; -----------------------------------------------------------------------------
 37985                                  ;; ENTRY:  None
 37986                                  ;; EXIT:   None
 37987                                  ;; ERROR:  None
 37988                                  ;; USES:   Flags, fm_umb, fm_strat
 37989                                  ;; -----------------------------------------------------------------------------
 37990                                  ;
 37991                                  ;setUMBs:
 37992                                  ;	push	ax
 37993                                  ;	push	bx
 37994                                  ;	call	fm_link
 37995                                  ;	pop	bx
 37996                                  ;	pop	ax
 37997                                  ;	retn
 37998                                  ;
 37999                                  ;%endif
 38000                                  
 38001                                  ; 18/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 38002                                  ; loadLow subroutine is not used anywhere of IO.SYS 6.22 (& 5.0)
 38003                                  %if 0
 38004                                  
 38005                                  ; -----------------------------------------------------------------------------
 38006                                  ;*** loadLow - returns AL==0 if UMB0 == 0, else AL==1
 38007                                  ; -----------------------------------------------------------------------------
 38008                                  ; ENTRY:  None
 38009                                  ; EXIT:   AL==0 if mem strategy should be set to LOW_FIRST, else AL==1
 38010                                  ;         Carry set if UMB0 not specified (_NOT_ an error)
 38011                                  ; ERROR:  None
 38012                                  ; USES:   Flags, fm_strat, fm_umb
 38013                                  ; -----------------------------------------------------------------------------
 38014                                  ; We want to set the memory strategy to LOW_FIRST if the user specified a
 38015                                  ; load UMB, and it is 0. That 0 can be either from the user having _specified_
 38016                                  ; zero (/L:0;...), or from having specified a too-big min size (/L:1,99999999)
 38017                                  ; such that the load UMB is too small, and shouldn't be used.
 38018                                  ; -----------------------------------------------------------------------------
 38019                                  
 38020                                  loadLow:
 38021                                  	;push	ds
 38022                                  	;push	cs		; Point DS into appropriate data segment
 38023                                  	;pop	ds	
 38024                                  
 38025                                  	;mov	al,[UmbLoad]
 38026                                  	mov	al,[cs:UmbLoad]
 38027                                  	cmp	al,UNSPECIFIED ; 0FFh, -1
 38028                                  	jne	short ll10
 38029                                  
 38030                                  	stc
 38031                                  ll15:
 38032                                  	mov	al,1		; Return with AL==1 && STC if no UMBs specified
 38033                                  	;stc
 38034                                  	;jmp	short llX
 38035                                  	retn
 38036                                  ll10:	
 38037                                  	or	al,al		; AL=the load UMB: Is it == 0?
 38038                                  	;jz	short llX	; Yep... CF==0 (from OR) && AL=0, so just exit
 38039                                  
 38040                                  	jnz	short ll15	; 09/04/2019 - Retro DOS v4.0
 38041                                  	retn
 38042                                  
 38043                                  	;mov	al,1
 38044                                  	;clc
 38045                                  ;llX:
 38046                                  	;pop	ds		; Return DS to where it was
 38047                                  	;retn
 38048                                  
 38049                                  %endif
 38050                                  
 38051                                  ; -----------------------------------------------------------------------------
 38052                                  ;*** HideUMBs - links UMBs and hides upper-memory as appropriate
 38053                                  ; -----------------------------------------------------------------------------
 38054                                  ; ENTRY:  None
 38055                                  ; EXIT:   None
 38056                                  ; ERROR:  None
 38057                                  ; USES:   Flags, fm_strat, fm_umb
 38058                                  ; -----------------------------------------------------------------------------
 38059                                  
 38060                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38061                                  	; (SYSINIT:322Fh)
 38062                                  HideUMBs:
 38063                                  	; 01/01/2023
 38064                                  	;push	ax
 38065                                  	;push	cx
 38066                                  	;push	ds
 38067 000030C9 06                      	push	es
 38068                                  
 38069                                  	; 01/01/2023
 38070                                  	; ds = cs
 38071                                  
 38072 000030CA E86E02                  	call	UmbTest		; See if we REALLY linked in anything...
 38073 000030CD 7232                    	jc	short husX	; ...if not, there's nothing for us to do.
 38074                                  
 38075 000030CF E892FD                  	call	FixMem		; Concatenate adjacent free MCBs in upper mem
 38076                                  	
 38077                                  	;call	setUMBs		; Link UMBs and set memory-allocation strategy
 38078                                  	; 01/01/2023
 38079 000030D2 E8DCFD                  	call	fm_link
 38080                                  
 38081                                  	;putdata fInHigh,1	; Remember that we're now running high
 38082                                  	;mov	byte [cs:fInHigh],1
 38083                                  	; 01/01/2023
 38084 000030D5 C606[6123]01            	mov	byte [fInHigh],1
 38085                                  
 38086                                  	;call	GetLoadUMB	; See if they gave us a list to leave free
 38087                                  	;mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0
 38088                                  	; 01/01/2023
 38089 000030DA A0[6523]                	mov	al,[UmbLoad]
 38090                                  
 38091 000030DD 3CFF                    	cmp	al,UNSPECIFIED	; If they didn't,
 38092 000030DF 7420                    	je	short husX	; then we shouldn't do this loop:
 38093                                  
 38094 000030E1 31C9                    	xor	cx,cx
 38095                                  
 38096                                  ; -----------------------------------------------
 38097                                  ; HUS10-CX - UMB number (after inc, 1==first UMB)
 38098                                  ; -----------------------------------------------
 38099                                  
 38100 000030E3 41                      hus10:	inc	cx		; For each UMB:
 38101                                  	; 01/01/2023
 38102 000030E4 80F910                  	cmp	cl,MAXUMB
 38103                                  	;cmp	cx,MAXUMB ; 16
 38104 000030E7 730E                    	jae	short hus20
 38105                                  
 38106 000030E9 88C8                    	mov	al,cl		; (stopping as soon as we're outside of the
 38107 000030EB 06                      	push	es
 38108 000030EC E8A200                  	call	findUMB		; valid range of UMBs)
 38109 000030EF 07                      	pop	es		; push/pop: trash what findumb finds. :-)
 38110 000030F0 7205                    	jc	short hus20
 38111                                  	
 38112                                  	; 02/01/2023
 38113                                  	;push	cx ; *
 38114 000030F2 E84F01                  	call	_hideUMB_	; hide what we need to hide.
 38115                                  	;pop	cx ; *
 38116                                  
 38117 000030F5 EBEC                    	jmp	short hus10
 38118                                  hus20:	
 38119                                  	;call	GetLoadUMB	; Now check if they offered /L:0
 38120                                  	; 01/01/2023
 38121                                  	; ds = cs
 38122                                  	;mov	al,[UmbLoad]
 38123                                  	;;mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0	
 38124 000030F7 800E[6523]00            	or	byte [UmbLoad],0
 38125                                  	;or	al,al		; --Is the load UMB 0? (-1==unspecified)
 38126 000030FC 7503                    	jnz	short husX	; If not, we're done.
 38127                                  
 38128 000030FE E86802                  	call	hl_unlink	; If so, however, fix UMBs and strategy.
 38129                                  husX:	
 38130 00003101 07                      	pop	es
 38131                                  	; 01/01/2023
 38132                                  	;pop	ds
 38133                                  	;pop	cx
 38134                                  	;pop	ax
 38135 00003102 C3                      	retn
 38136                                  
 38137                                  ; -----------------------------------------------------------------------------
 38138                                  ;*** GetLoadUMB - Returns the load UMB number in AL (-1 if not specified)
 38139                                  ; -----------------------------------------------------------------------------
 38140                                  ; ENTRY:  None
 38141                                  ; EXIT:   AL == load UMB
 38142                                  ; ERROR:  None
 38143                                  ; USES:   Flags, AX
 38144                                  ; -----------------------------------------------------------------------------
 38145                                  
 38146                                  ;GetLoadUMB:
 38147                                  ;	;getdata al, UmbLoad
 38148                                  ;	push	ds
 38149                                  ;	push	cs
 38150                                  ;	pop	ds
 38151                                  ;	mov	al,[UmLoad]
 38152                                  ;	pop	ds
 38153                                  ;	retn
 38154                                  
 38155                                  ; -----------------------------------------------------------------------------
 38156                                  ;*** GetLoadSize - Returns the load UMB minimum size (0 if not specified)
 38157                                  ; -----------------------------------------------------------------------------
 38158                                  ; ENTRY:  None
 38159                                  ; EXIT:   AX == load UMB minimum size
 38160                                  ; ERROR:  None
 38161                                  ; USES:   Flags, AX
 38162                                  ; -----------------------------------------------------------------------------
 38163                                  
 38164                                  ; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 38165                                  %if 0
 38166                                  	; 01/01/2023 - Retro DOS v4.2
 38167                                  GetLoadSize:
 38168                                  	; 09/04/2019 - Retro DOS v4.0
 38169                                  	;mov	al,[cs:UmbLoad]
 38170                                  	; 01/01/2023
 38171                                  	; ds = cs
 38172                                  	mov	al,[UmbLoad] 
 38173                                  	;jmp	short GetSize
 38174                                  
 38175                                  	;push	bx
 38176                                  	;;push	si
 38177                                  	;push	ds
 38178                                  	;push	cs
 38179                                  	;pop	ds
 38180                                  
 38181                                  	;mov	al,[UmbLoad]
 38182                                  
 38183                                  	;xor	ah,ah			;    ax==UMB
 38184                                  	;mov	bx,UmbSize		;    bx==array
 38185                                  	;shl	al,1	                ;    ax==offset
 38186                                  	;;add	ax,bx			;    ax==element index
 38187                                  	;;mov	si,ax			; ds:si==element index
 38188                                  
 38189                                  	;;lodsw				;    hh
 38190                                  
 38191                                  	;add	bx,ax
 38192                                  	;mov	ax,[bx]
 38193                                  
 38194                                  	;pop	ds
 38195                                  	;;pop	si
 38196                                  	;pop	bx
 38197                                  	;retn
 38198                                  %endif
 38199                                  
 38200                                  ; -----------------------------------------------------------------------------
 38201                                  ;*** GetSize - Returns the UMB in AL's minimum size (0 if not specified)
 38202                                  ; -----------------------------------------------------------------------------
 38203                                  ; ENTRY:  AL == a UMB number
 38204                                  ; EXIT:   AX == UMB minimum size, as specified by the user
 38205                                  ; ERROR:  None
 38206                                  ; USES:   Flags, AX
 38207                                  ; -----------------------------------------------------------------------------
 38208                                  
 38209                                  ; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 38210                                  GetLoadSize:
 38211                                  	; ds = cs
 38212                                  	;mov	al,[UmbLoad]
 38213                                  	; al = [UmbLoad] 
 38214                                  	; ....
 38215                                  
 38216                                  	; 01/01/2023 - Retro DOS v4.2
 38217                                  GetSize:
 38218                                  	; 09/04/2019 - Retro DOS v4.0
 38219                                  
 38220                                  	;push	bx ; 01/01/2023
 38221                                  	;push	si
 38222                                  	;push	ds
 38223                                  	;push	cs
 38224                                  	;pop	ds
 38225                                  
 38226 00003103 30E4                    	xor	ah,ah			;    ax==UMB
 38227 00003105 BB[7623]                	mov	bx,UmbSize		;    bx==array
 38228 00003108 D0E0                    	shl	al,1	                ;    ax==offset
 38229                                  	;add	ax,bx			;    ax==element index
 38230                                  	;mov	si,ax			; ds:si==element index
 38231                                  
 38232                                  	;lodsw				;    ax==size
 38233                                  
 38234 0000310A 01C3                    	add	bx,ax
 38235                                  	; 01/01/2023
 38236                                  	; ds = cs
 38237 0000310C 8B07                    	mov	ax,[bx]
 38238                                  	;mov	ax,[cs:bx]
 38239                                  
 38240                                  	;pop	ds
 38241                                  	;pop	si
 38242                                  	;pop	bx ; 01/01/2023
 38243                                  sls10:	; 08/09/2023
 38244 0000310E C3                      	retn
 38245                                  
 38246                                  ; -----------------------------------------------------------------------------
 38247                                  ;*** StoLoadUMB - Overrides the load UMB number with what's in AL
 38248                                  ; -----------------------------------------------------------------------------
 38249                                  ; ENTRY:   AL == new load UMB
 38250                                  ; EXIT:    None
 38251                                  ; ERROR:   None
 38252                                  ; USES:    Flags, AX
 38253                                  ; -----------------------------------------------------------------------------
 38254                                  ; CAUTION: Should only be used if /L:... was used.  Logically, that is the only
 38255                                  ;          time you would ever need this, so that's okay.
 38256                                  ; -----------------------------------------------------------------------------
 38257                                  
 38258                                  ; StoLoadUMB subroutine is not used anywhere
 38259                                  ; of PCDOS 7.1 IBMBIO.COM (& MSDOS 6.21 IO.SYS)
 38260                                  ; Erdogan Tan - 18/07/2023
 38261                                  
 38262                                  ;StoLoadUMB:
 38263                                  ;	;putdata UmbLoad, al
 38264                                  ;	push	es
 38265                                  ;	push	cs
 38266                                  ;	pop	es		; mov [cs:UmbLoad], al !!!! ; 08/09/2023
 38267                                  ;	mov	[es:UmbLoad],al
 38268                                  ;	pop	es
 38269                                  ;	retn
 38270                                  
 38271                                  ; -----------------------------------------------------------------------------
 38272                                  ;*** StoLoadSize - Overrides the load UMB minimum size with what's in AX
 38273                                  ; -----------------------------------------------------------------------------
 38274                                  ; ENTRY:  AL == new load size
 38275                                  ; EXIT:   None
 38276                                  ; ERROR:  None
 38277                                  ; USES:   Flags, AX
 38278                                  ; -----------------------------------------------------------------------------
 38279                                  	; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization) 
 38280                                  	; 01/01/2023 - Retro DOS v4.2
 38281                                  StoLoadSize:
 38282                                  	; 01/01/2023
 38283                                  	;push	dx
 38284                                  
 38285                                  	;getdata dl, UmbLoad		; Put UMB# in DL and size in AX
 38286                                  	;
 38287                                  	;push	ds
 38288                                  	;push	cs
 38289                                  	;pop	ds
 38290                                  	;mov	dl,[UmbLoad]
 38291                                  	;pop	ds	
 38292                                  
 38293                                  	; 08/09/2023
 38294                                  	; MSDOS 6.21 IO.SYS - SYSINIT:32B6h
 38295                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:3831h
 38296                                  
 38297                                  	;;mov	dl,[UmbLoad]		; BUG ! CL would/must be used here
 38298                                  					; instead of DL (*) ; 18/07/2023
 38299                                  	;mov	dl,[cs:UmbLoad] ; Retro DOS v4.0, v4.1, v4.2
 38300                                  	;cmp	dl,UNSPECIFIED ; 0FFh
 38301                                  	;je	short sls10
 38302                                  			
 38303                                  		; BUG ! stowSiz uses CL instead of DL !
 38304                                  		; (CL is set in ParseL which calls stowSiz)
 38305                                  		; (This BUG existing in PCDOS 7.1 IBMBIO.COM also)
 38306                                  		; Erdogan Tan - 18/07/2023
 38307                                  
 38308                                  	; 08/09/2023 (BugFix)
 38309                                  	;mov	cl,[cs:UmbLoad]
 38310                                  	; 08/09/2023 
 38311                                  	; ds = cs
 38312 0000310F 8A0E[6523]              	mov	cl,[UmbLoad]
 38313 00003113 80F9FF                  	cmp	cl,UNSPECIFIED ; 0FFh
 38314 00003116 74F6                    	je	short sls10 
 38315                                  
 38316                                  	; 08/09/2023
 38317                                  ;	call	stowSiz			; We've got a function to do just this
 38318                                  ;sls10:	
 38319                                  ;	; 01/01/2023
 38320                                  ;	;pop	dx
 38321                                  ;	retn
 38322                                  	
 38323                                  	; 08/09/2023
 38324                                  	;;jmp	stowSiz
 38325                                  	;jmp	short stowSiz
 38326                                  
 38327                                  ; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 38328                                  %if 1
 38329                                  ; -----------------------------------------------------------------------------
 38330                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 38331                                  ; -----------------------------------------------------------------------------
 38332                                  ; ENTRY:    CL contains UMB number, AX contains size
 38333                                  ; EXIT:     None
 38334                                  ; ERROR:    None
 38335                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 38336                                  ; -----------------------------------------------------------------------------
 38337                                  
 38338                                  ; 13/05/2019
 38339                                  
 38340                                  	; 01/01/2023 - Retro DOS v4.2
 38341                                  stowSiz:
 38342                                  	; 01/01/2023
 38343                                  	;push	bx
 38344                                  	;;push	di ; ?
 38345                                  	;push	es
 38346                                  
 38347                                  	;push	cs
 38348                                  	;pop	es	
 38349                                  
 38350 00003118 88CB                    	mov	bl,cl			; Now bl==UMB number, AX==size
 38351 0000311A B700                    	mov	bh,0			;     bx==UMB number, AX==size
 38352 0000311C D0E3                    	shl	bl,1			;     bx==offset into array, AX=size
 38353                                  	;mov	[es:bx+UmbSize],ax	; Store the size
 38354                                  	; 01/01/2023
 38355 0000311E 2E8987[7623]            	mov	[cs:bx+UmbSize],ax	; Store the size
 38356                                  
 38357                                  	; 01/01/2023
 38358                                  	;pop	es
 38359                                  	;;pop	di ; ?
 38360                                  	;pop	bx
 38361                                  
 38362 00003123 C3                      	retn
 38363                                  %endif
 38364                                  
 38365                                  ; -----------------------------------------------------------------------------
 38366                                  ;*** hideUMB - marks as HIDDEN all FREE elements in UMB passed as AL
 38367                                  ; -----------------------------------------------------------------------------
 38368                                  ; ENTRY:    AL must indicate a valid UMB; 0==conv && is invalid.
 38369                                  ; EXIT:     None; free elements in UMB marked as hidden
 38370                                  ; ERROR:    None
 38371                                  ; USES:     Flags
 38372                                  ; -----------------------------------------------------------------------------
 38373                                  
 38374                                  	; 01/01/2023 - Retro DOS v4.2
 38375                                  hideUMB:
 38376                                  	; 02/01/2023
 38377 00003124 52                      	push	dx ; (*)
 38378                                  	; 01/01/2023
 38379                                  	;push	ax
 38380 00003125 06                      	push	es
 38381                                  
 38382 00003126 E86800                  	call	findUMB	; (*)	; Returns with carry if err, else ES == MCB
 38383 00003129 7224                    	jc	short huX
 38384                                  
 38385                                  ; ------------------------------------------------
 38386                                  ; HU10--ES - MCB inside UMB; if it's a system MCB,
 38387                                  ;            we're not in the same UMB, so exit.
 38388                                  ; ------------------------------------------------
 38389                                  
 38390 0000312B E84AFF                  hu10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 38391 0000312E 741F                    	jz	short huX	; If it is, we've finished the UMB.
 38392                                  	;call	isFreeMCB	; Returns with ZF set if owner is 0
 38393 00003130 26830E010000            	or	word [es:ARENA.OWNER],0
 38394 00003136 7503                    	jnz	short hu20
 38395                                  
 38396 00003138 E81700                  	call	hideMCB
 38397                                  hu20:	
 38398                                  	;mov	al,[es:ARENA.SIGNATURE]
 38399                                  	;cmp	al,arena_signature_end  ;'Z'
 38400                                  	; 19/07/2023
 38401 0000313B 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],'Z'
 38402 00003141 740C                    	jz	short huX	; 'Z' means this was the last MCB... that's it.
 38403                                  
 38404                                  	;NextMCB es,ax		; Go on forward.
 38405 00003143 8CC0                    	mov     ax,es
 38406                                  	;add	ax,[es:3]
 38407 00003145 2603060300              	add     ax,[es:ARENA.SIZE]
 38408 0000314A 40                      	inc     ax
 38409 0000314B 8EC0                    	mov     es,ax
 38410                                  
 38411 0000314D EBDC                    	jmp	short hu10
 38412                                  huX:	
 38413 0000314F 07                      	pop	es
 38414                                  	; 01/01/2023
 38415                                  	;pop	ax
 38416                                  	; 02/01/2023
 38417 00003150 5A                      	pop	dx ; (*)
 38418 00003151 C3                      	retn
 38419                                  
 38420                                  ; 02/01/2023
 38421                                  %if 0
 38422                                  
 38423                                  ; -----------------------------------------------------------------------------
 38424                                  ;*** isTiny - returns with ZF set if user didn't specify /S
 38425                                  ; -----------------------------------------------------------------------------
 38426                                  ; ENTRY:    None
 38427                                  ; EXIT:     ZF set if user DIDN'T specify /S
 38428                                  ; ERROR:    None
 38429                                  ; USES:     Flags
 38430                                  ; -----------------------------------------------------------------------------
 38431                                  
 38432                                  	; 02/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38433                                  isTiny:
 38434                                  	; 02/01/2023
 38435                                  	;push	ax
 38436                                  
 38437                                  	;getdata al,fUmbTiny
 38438                                  	;
 38439                                  	;push	ds
 38440                                  	;push	cs
 38441                                  	;pop	ds
 38442                                  	;mov	al,[fUmbTiny]
 38443                                  	;pop	ds
 38444                                  
 38445                                  	; 09/09/2023
 38446                                  	;mov	al,[cs:fUmbTiny]
 38447                                  	; 02/01/2023
 38448                                  	; ds = cs
 38449                                  	mov	al,[fUmbTiny]
 38450                                  
 38451                                  	or	al,al
 38452                                  	; 02/01/2023
 38453                                  	;pop	ax
 38454                                  	retn
 38455                                  
 38456                                  %endif
 38457                                  
 38458                                  ; -----------------------------------------------------------------------------
 38459                                  ;*** isFreeMCB - returns with ZF set if current MCB (ES:0) is FREE
 38460                                  ; -----------------------------------------------------------------------------
 38461                                  ; ENTRY:    ES:0 should point to an MCB
 38462                                  ; EXIT:     ZF set if MCB is free, else !ZF
 38463                                  ; ERROR:    None
 38464                                  ; USES:     Flags
 38465                                  ; -----------------------------------------------------------------------------
 38466                                  
 38467                                  ;isFreeMCB:
 38468                                  ;	or	word [es:ARENA.OWNER],0
 38469                                  ;	retn
 38470                                  
 38471                                  ; -----------------------------------------------------------------------------
 38472                                  ;*** hideMCB - marks as HIDDEN the MCB at ES:0
 38473                                  ; -----------------------------------------------------------------------------
 38474                                  ; ENTRY:    ES:0 should point to an MCB
 38475                                  ; EXIT:     None; MCB marked as HIDDEN
 38476                                  ; ERROR:    None
 38477                                  ; USES:     None
 38478                                  ; -----------------------------------------------------------------------------
 38479                                  
 38480                                  hideMCB:
 38481 00003152 26C70601000800          	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 38482 00003159 26C70608004849          	mov	word [es:ARENA.NAME+0], 'HI' ; 4948h
 38483 00003160 26C7060A004444          	mov	word [es:ARENA.NAME+2], 'DD' ; 4444h
 38484 00003167 26C7060C00454E          	mov	word [es:ARENA.NAME+4], 'EN' ; 4E45h
 38485 0000316E 26C7060E002020          	mov	word [es:ARENA.NAME+6], '  ' ; 2020h	
 38486 00003175 C3                      	retn
 38487                                  
 38488                                  ; -----------------------------------------------------------------------------
 38489                                  ;*** unHideMCB - marks as FREE the MCB at ES:0
 38490                                  ; -----------------------------------------------------------------------------
 38491                                  ; ENTRY:    ES:0 should point to an MCB
 38492                                  ; EXIT:     None; MCB marked as FREE
 38493                                  ; ERROR:    None
 38494                                  ; USES:     None
 38495                                  ; -----------------------------------------------------------------------------
 38496                                  
 38497                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38498                                  
 38499                                  unHideMCB:
 38500                                  	; 03/01/2023
 38501                                  	;push	ax
 38502 00003176 26C70601000000          	mov	word [es:ARENA.OWNER],FreePSPOwner ; 0
 38503 0000317D B82020                  	mov	ax,'  ' ; 2020h
 38504 00003180 26A30800                	mov	[es:ARENA.NAME+0],ax
 38505 00003184 26A30A00                	mov	[es:ARENA.NAME+2],ax
 38506 00003188 26A30C00                	mov	[es:ARENA.NAME+4],ax
 38507 0000318C 26A30E00                	mov	[es:ARENA.NAME+6],ax
 38508                                  	; 03/01/2023
 38509                                  	;pop	ax
 38510 00003190 C3                      	retn
 38511                                  
 38512                                  ; -----------------------------------------------------------------------------
 38513                                  ;*** findUMB - makes ES:0 point to the first MCB in UMB given as AL
 38514                                  ;            -- returns UmbHEAD pointer (0x9FFF) if passed AL==0
 38515                                  ; -----------------------------------------------------------------------------
 38516                                  ; ENTRY:    AL should be to a valid UMB number
 38517                                  ; EXIT:     ES:0 points to first MCB in UMB (_not_ the 8+SC MCB that heads it)
 38518                                  ; ERROR:    Carry set if couldn't reach UMB (too high)
 38519                                  ; USES:     Flags, ES
 38520                                  ; -----------------------------------------------------------------------------
 38521                                  
 38522                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38523                                  	; (SYSINIT:3344h)
 38524                                  findUMB:
 38525                                  	; 01/01/2023
 38526                                  	;push	ax
 38527                                  	; 02/01/2023
 38528 00003191 51                      	push	cx ; *
 38529                                  	;push	dx
 38530                                  
 38531 00003192 30E4                    	xor	ah,ah		; Zap ah, so al==ax
 38532                                  
 38533 00003194 89C2                    	mov	dx,ax		; Store the to-be-found UMB number in DX
 38534                                  
 38535 00003196 E8D2FE                  	call	UmbHead		; Returns first UMB segment in AX
 38536                                  	; 22/07/2023
 38537                                  	;mov	es,ax ; *
 38538 00003199 31C9                    	xor	cx,cx		; Pretend we're on UMB 0 for now...
 38539                                  
 38540                                  	; 22/07/2023
 38541                                  fu10:
 38542 0000319B 8EC0                    	mov	es,ax ; * ; **
 38543                                  ; ---------------------------------------------
 38544                                  ; FU10--CX - This UMB number; 0 == conventional
 38545                                  ;       DX - The UMB number they're looking for
 38546                                  ;       ES - The current MCB address
 38547                                  ; ---------------------------------------------
 38548                                  
 38549                                  ;fu10:	
 38550 0000319D 39D1                    	cmp	cx,dx		; If CX==DX, we've found the UMB we're
 38551 0000319F 7417                    	je	short fuX	; searching for--so exit.
 38552                                  
 38553 000031A1 E8D4FE                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 38554 000031A4 7501                    	jnz	short fu20
 38555                                  
 38556 000031A6 41                      	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 38557                                  fu20:	
 38558                                  	;mov	al,[es:ARENA.SIGNATURE]
 38559                                  	;cmp	al,arena_signature_end ; 'Z'
 38560                                  	; 19/07/2023
 38561 000031A7 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end 
 38562 000031AD 7408                    	je	short fuE	; 'Z' means this was the last MCB... that's it.
 38563                                  
 38564                                  	;NextMCB es,ax		; Go on forward.
 38565                                  	; 22/07/2023
 38566                                  	; ax = es
 38567                                  	;mov	ax,es ; * ; 22/07/2023
 38568                                  	;add	ax,[es:3]
 38569 000031AF 2603060300              	add	ax,[es:ARENA.SIZE]
 38570 000031B4 40                      	inc	ax
 38571                                  	; 22/07/2023
 38572                                  	;mov	es,ax ; **
 38573 000031B5 EBE4                    	jmp	short fu10
 38574                                  fuE:	
 38575 000031B7 F9                      	stc
 38576                                  fuX:
 38577                                  	; 01/01/2023
 38578                                  	;pop	dx
 38579                                  	; 02/01/2023
 38580 000031B8 59                      	pop	cx ; *
 38581                                  	;pop	ax		; The address is already in ES.
 38582 000031B9 C3                      	retn
 38583                                  
 38584                                  ; -----------------------------------------------------------------------------
 38585                                  ;*** BigFree - makes ES:0 point to the largest free MCB in UMB given as AL
 38586                                  ; -----------------------------------------------------------------------------
 38587                                  ; ENTRY:    AL should be to a valid UMB number
 38588                                  ; EXIT:     ES:0 points to largest free MCB in UMB, AX returns its size
 38589                                  ; ERROR:    Carry set if couldn't reach UMB (0 or too high)
 38590                                  ; USES:     Flags, ES
 38591                                  ; -----------------------------------------------------------------------------
 38592                                  
 38593                                  	; 01/01/2023 - Retro DOS v4.2
 38594                                  BigFree:
 38595                                  	; 01/01/2023
 38596                                  	;push	bx
 38597 000031BA 51                      	push	cx
 38598                                  
 38599 000031BB E8D3FF                  	call	findUMB			; Returns with CF if err, else ES==MCB
 38600 000031BE 723A                    	jc	short bfX		; (would be "jc bfE"; it just does stc)
 38601                                  
 38602 000031C0 31DB                    	xor	bx,bx			; Segment address of largest free MCB
 38603 000031C2 31C9                    	xor	cx,cx			; Size of largest free MCB
 38604                                  
 38605                                  ; ---------------------------------------------
 38606                                  ; BF10--ES - Current MCB address
 38607                                  ;       BX - Address of largest free MCB so far
 38608                                  ;       CX - Size of largest free MCB so far
 38609                                  ; ---------------------------------------------
 38610                                  
 38611                                  bf10:	
 38612 000031C4 E8B1FE                  	call	isSysMCB		; If we've left the MCB, we're done.
 38613 000031C7 7428                    	jz	short bf30
 38614                                  
 38615                                  	;call	isFreeMCB		; Returns with ZF set if owner is 0
 38616 000031C9 26830E010000            	or	word [es:ARENA.OWNER],0
 38617 000031CF 750C                    	jnz	short bf20
 38618                                  
 38619 000031D1 26A10300                	mov	ax,[es:ARENA.SIZE]
 38620                                  	;cmp	cx,[es:ARENA.SIZE]	; Compare sizes...
 38621 000031D5 39C1                    	cmp	cx,ax
 38622                                  	;jg	short bf20		; Unless we're bigger,
 38623                                  	; 19/07/2023
 38624 000031D7 7D04                    	jge	short bf20
 38625                                  
 38626 000031D9 8CC3                    	mov	bx,es			; Store this new element's address,
 38627                                  	;mov	cx,[es:ARENA.SIZE]	; and its size.
 38628 000031DB 89C1                    	mov	cx,ax
 38629                                  
 38630                                  bf20:	
 38631                                  	;mov	al,[es:ARENA.SIGNATURE]
 38632                                  	;cmp	al,arena_signature_end	; 'Z'
 38633                                  	; 19/07/2023
 38634                                  	;cmp	byte [es:0],'Z'
 38635 000031DD 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end
 38636 000031E3 740C                    	jz	short bf30		; 'Z' means this was the last MCB.
 38637                                  
 38638                                  	;NextMCB es,ax			; Go on forward.
 38639 000031E5 8CC0                    	mov     ax,es
 38640                                  	;add	ax,[es:3]
 38641 000031E7 2603060300              	add     ax,[es:ARENA.SIZE]
 38642 000031EC 40                      	inc     ax
 38643 000031ED 8EC0                    	mov     es,ax
 38644                                  
 38645 000031EF EBD3                    	jmp	short bf10
 38646                                  
 38647 000031F1 8EC3                    bf30:	mov	es,bx			; Return the address
 38648 000031F3 89C8                    	mov	ax,cx			; Return the size
 38649 000031F5 09DB                    	or	bx,bx
 38650 000031F7 7501                    	jnz	short bfX		; (if size==0, there's nothing free)
 38651                                  bfE:	
 38652 000031F9 F9                      	stc
 38653                                  bfX:
 38654 000031FA 59                      	pop	cx
 38655                                  	; 01/01/2023
 38656                                  	;pop	bx
 38657 000031FB C3                      	retn
 38658                                  
 38659                                  ; -----------------------------------------------------------------------------
 38660                                  ;*** isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 38661                                  ; -----------------------------------------------------------------------------
 38662                                  ; ENTRY:    AL should be to a valid UMB number
 38663                                  ; EXIT:     ZF set if UMB wasn't specified, ZF clear if it was
 38664                                  ; ERROR:    None
 38665                                  ; USES:     Flags
 38666                                  ; -----------------------------------------------------------------------------
 38667                                  
 38668                                  	; 02/01/2023 - Retro DOS v4.2
 38669                                  
 38670                                  isSpecified:
 38671                                  	; 02/01/2023
 38672                                  	;push	ax
 38673                                  
 38674 000031FC 30FF                    	xor	bh,bh
 38675 000031FE 88C3                    	mov	bl,al
 38676                                  
 38677                                  	;getdata al,DS:UmbUsed[bx]
 38678                                  	;
 38679                                  	;push	ds
 38680                                  	;push	cs
 38681                                  	;pop	ds
 38682                                  	;mov	al,[bx+UmbUsed]
 38683                                  	;pop	ds
 38684                                  	
 38685                                  	;mov	al,[cs:bx+UmbUsed]
 38686                                  	; 02/01/2023
 38687                                  	; ds = cs
 38688 00003200 8A87[6623]              	mov	al,[bx+UmbUsed]
 38689                                  
 38690 00003204 08C0                    	or	al,al			; Sets ZF if al==0 (ie, if unspecified)
 38691                                  
 38692                                  	; 09/09/2023
 38693                                  	; 02/01/2023
 38694                                  	;pop	ax
 38695                                  
 38696 00003206 C3                      	retn
 38697                                  
 38698                                  ; -----------------------------------------------------------------------------
 38699                                  ;*** shrinkMCB - breaks an MCB into two pieces, the lowest one's size==AX
 38700                                  ; -----------------------------------------------------------------------------
 38701                                  ; ENTRY:    AX == new size, ES:0 == current MCB
 38702                                  ; EXIT:     None; MCB broken if carry clear
 38703                                  ; ERROR:    Carry set if MCB isn't as large as AX+0x20 (not a useful split)
 38704                                  ; USES:     Flags
 38705                                  ; -----------------------------------------------------------------------------
 38706                                  ; If the size of the to-be-split MCB isn't at least 0x20 bytes greater than
 38707                                  ; the specified new size, the split is useless; if it's only 0x10 bytes, that
 38708                                  ; 0x10 will be used to make a header that mentions a 0-byte free space, and
 38709                                  ; that just sucks up 0x10 bytes for nothing. So we make 0x20 bytes the
 38710                                  ; minimum for performing a split.
 38711                                  ; -----------------------------------------------------------------------------
 38712                                  
 38713                                  MIN_SPLIT_SIZE	equ	20h
 38714                                  
 38715                                  	; 02/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38716                                  
 38717                                  shrinkMCB:
 38718                                  	;pushreg <bx,cx,es>
 38719                                  	; 02/01/2023
 38720                                  	;push	bx
 38721 00003207 51                      	push	cx
 38722 00003208 06                      	push	es
 38723                                  
 38724 00003209 89C3                    	mov	bx,ax			; Move things around... and
 38725                                  	; 02/01/2023
 38726                                  	;mov	ax,es			; save this one for later.
 38727                                  
 38728 0000320B 268B0E0300              	mov	cx,[es:ARENA.SIZE]
 38729                                  	; 02/01/2023
 38730 00003210 89C8                    	mov	ax,cx 
 38731                                  
 38732 00003212 83E820                  	sub	ax,MIN_SPLIT_SIZE ; 32
 38733                                  	;sub	cx,MIN_SPLIT_SIZE ; 32
 38734                                  	;;cmp	bx,cx			; {New size} vs {Current Size-20h}
 38735                                  	;ja	short smE		; if wanted_size > cur-20h, abort.
 38736                                  	; 18/12/2022
 38737                                  	;cmp	cx,bx
 38738                                  	; 02/01/2023
 38739 00003215 39D8                    	cmp	ax,bx
 38740 00003217 7228                    	jb	short smE ; (*)
 38741                                  
 38742 00003219 268A160000              	mov	dl,[es:ARENA.SIGNATURE]
 38743                                  	
 38744                                  	;mov	cx,[es:ARENA.SIZE]
 38745                                  	; 02/01/2023
 38746 0000321E 8CC0                    	mov	ax,es
 38747                                  
 38748 00003220 26891E0300              	mov	[es:ARENA.SIZE],bx
 38749 00003225 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],'M'
 38750                                  
 38751 0000322B 01D8                    	add	ax,bx
 38752 0000322D 40                      	inc	ax
 38753 0000322E 8EC0                    	mov	es,ax			; Move to new arena area
 38754                                  
 38755 00003230 89C8                    	mov	ax,cx
 38756 00003232 29D8                    	sub	ax,bx
 38757                                  	; 12/12/2022
 38758                                  	; ax > 0
 38759 00003234 48                      	dec	ax			; And prepare the new size
 38760                                  
 38761                                  	; 18/12/2022
 38762 00003235 2688160000              	mov	[es:ARENA.SIGNATURE],dl
 38763                                  	;mov	word [es:ARENA.OWNER],0 ; (**)
 38764 0000323A 26A30300                	mov	[es:ARENA.SIZE],ax
 38765                                  	;mov	ax,'  ' ; 2020h
 38766                                  	;mov	[es:ARENA.NAME+0],ax ; (**)
 38767                                  	;mov	[es:ARENA.NAME+2],ax ; (**)
 38768                                  	;mov	[es:ARENA.NAME+4],ax ; (**)
 38769                                  	;mov	[es:ARENA.NAME+6],ax ; (**)
 38770                                  
 38771                                  	; 18/12/2022
 38772 0000323E E8A801                  	call	freeMCB	; (**)
 38773                                  
 38774                                  	; 12/12/2022
 38775                                  	; cf=0
 38776                                  	;clc
 38777                                  	; 18/12/2022
 38778                                  	;jmp	short smX
 38779                                  smE:	
 38780                                  	; 18/12/2022
 38781                                  	; cf=1 (*)
 38782                                  	;stc
 38783                                  smX:	
 38784                                  	;popreg	<es,cx,bx>
 38785 00003241 07                      	pop	es
 38786 00003242 59                      	pop	cx
 38787                                  	; 02/01/2023
 38788                                  	;pop	bx
 38789 00003243 C3                      	retn
 38790                                  
 38791                                  ; -----------------------------------------------------------------------------
 38792                                  ;*** hideUMB? - hides as appropriate the UMB in CL
 38793                                  ; -----------------------------------------------------------------------------
 38794                                  ; ENTRY:    CL should be to a valid UMB number, and AX to its address (findUMB)
 38795                                  ; EXIT:     None; UMB is hidden as necessary
 38796                                  ; ERROR:    None
 38797                                  ; USES:     Flags, AX, CX
 38798                                  ; -----------------------------------------------------------------------------
 38799                                  ; PRIMARY LOGIC:
 38800                                  ;
 38801                                  ; If the UMB is specified in the DH/LH statement, then:
 38802                                  ;    If the largest free segment is too small (check specified size), then:
 38803                                  ;       Pretend it wasn't ever specified, and fall out of this IF.
 38804                                  ;    Else, if largest free segment is LARGER than specified size, then:
 38805                                  ;       If /S was given on the command-line, then:
 38806                                  ;          Break that element into two pieces
 38807                                  ;          Set a flag that we're shrinking
 38808                                  ;       Endif
 38809                                  ;    Endif
 38810                                  ; Endif
 38811                                  ; If the UMB is NOT specified (or was removed by the above):
 38812                                  ;    Hide all free elements in the UMB
 38813                                  ;    If the flag that we're shrinking was set, then:
 38814                                  ;       UN-hide the lower portion of the shrunken UMB
 38815                                  ;    ENDIF
 38816                                  ; ENDIF
 38817                                  ; -----------------------------------------------------------------------------
 38818                                  
 38819                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38820                                  	; (SYSINIT:3426h)
 38821                                  _hideUMB_:
 38822                                  	; 02/01/2023
 38823                                  	; ds = cs
 38824                                  
 38825                                  	; 01/01/2023
 38826                                  	;push	bx
 38827                                  	;push	dx
 38828 00003244 06                      	push	es
 38829                                  
 38830 00003245 88C8                    	mov	al,cl
 38831 00003247 E8B2FF                  	call	isSpecified	; Returns ZF set if al's umb was NOT specified
 38832 0000324A 742D                    	jz	short hu_20
 38833                                  
 38834 0000324C 88C8                    	mov	al,cl		; Retrieve the size of the largest
 38835 0000324E E869FF                  	call	BigFree		; free element in AX; put its address in ES
 38836 00003251 7226                    	jc	short hu_20	; Oops. Errors mean skip this part.
 38837                                  
 38838 00003253 50                      	push	ax		; TOS==size of BigFree in UMB (popped as BX)
 38839 00003254 88C8                    	mov	al,cl		; Retrieve the user's specified
 38840 00003256 E8AAFE                  	call	GetSize		; minimum size for this umb (into AX)
 38841 00003259 5B                      	pop	bx		; Now BX==BigFree, AX==Specified Size
 38842                                  
 38843 0000325A 09C0                    	or	ax,ax		; If they didn't specify one,
 38844 0000325C 741B                    	jz	short hu_20	; Skip over all this.
 38845                                  
 38846 0000325E 39D8                    	cmp	ax,bx		; Ah... if (specified > max free)
 38847 00003260 7607                    	jbe	short hu_10
 38848                                  
 38849 00003262 88C8                    	mov	al,cl		;  Then mark that UMB as unused. Nya nya.
 38850 00003264 E81DFD                  	call	unMarkUMB
 38851 00003267 EB10                    	jmp	short hu_20
 38852                                  hu_10:	
 38853                                  	;call	isTiny		; Returns ZF clear if user specified /S
 38854                                  	;jz	short hu_20
 38855                                  	; 02/01/2023
 38856                                  ;isTiny:
 38857                                  	;mov	al,[fUmbTiny] ; ds = cs
 38858                                  	;or	al,al
 38859 00003269 800E[6223]00            	or	byte [fUmbTiny],0
 38860 0000326E 7409                    	jz	short hu_20
 38861                                  
 38862 00003270 E894FF                  	call	shrinkMCB	; They specified /S, so shrink the MCB to AX
 38863 00003273 7204                    	jc	short hu_20	; Ah... if didn't shrink after all, skip this:
 38864                                  
 38865 00003275 8CC2                    	mov	dx,es
 38866 00003277 EB09                    	jmp	short hu_30	; Skip the spec check.. we wanna hide this one.
 38867                                  
 38868 00003279 89C8                    hu_20:	mov	ax,cx
 38869 0000327B E87EFF                  	call	isSpecified	; If they specified this UMB, we're done...
 38870 0000327E 7510                    	jnz	short hu_X	; so leave.
 38871                                  
 38872 00003280 31D2                    	xor	dx,dx
 38873                                  hu_30:	
 38874 00003282 88C8                    	mov	al,cl
 38875                                  
 38876 00003284 E89DFE                  	call	hideUMB		; Hides everything in UMB #al
 38877                                  
 38878 00003287 09D2                    	or	dx,dx		; Did we shrink a UMB? If not, DX==0,
 38879 00003289 7405                    	jz	short hu_X	; So we should leave.
 38880                                  
 38881 0000328B 8EC2                    	mov	es,dx		; Ah, but if it isn't, DX==the MCB's address;
 38882 0000328D E8E6FE                  	call	unHideMCB	; Un-hides the lower portion of that MCB.
 38883                                  hu_X:	
 38884 00003290 07                      	pop	es
 38885                                  	; 01/01/2023
 38886                                  	;pop	dx
 38887                                  	;pop	bx
 38888 00003291 C3                      	retn
 38889                                  
 38890                                  ; -----------------------------------------------------------------------------
 38891                                  ;*** UnFreeze - Marks FROZEN elements as FREE
 38892                                  ; -----------------------------------------------------------------------------
 38893                                  ; Entry:  None
 38894                                  ; Exit:   None; all 8+FROZEN elements are marked as FREE, from any UMB.
 38895                                  ; Error:  None
 38896                                  ; Uses:   Flags
 38897                                  ; -----------------------------------------------------------------------------
 38898                                  
 38899                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38900                                  UnFreeze:
 38901                                  	; 03/01/2023
 38902                                  	;push	ax
 38903 00003292 06                      	push	es
 38904                                  
 38905 00003293 E8D5FD                  	call	UmbHead		; Returns with carry if err, else ES == MCB
 38906 00003296 721C                    	jc	short ufX
 38907                                  
 38908                                  	; 22/07/2023
 38909                                  uf10:
 38910 00003298 8EC0                    	mov	es,ax ; *
 38911                                  
 38912                                  ; ------------------------------
 38913                                  ; UF10--ES - Current MCB address
 38914                                  ; ------------------------------
 38915                                  
 38916                                  ;uf10:	
 38917 0000329A E81900                  	call	isFrozMCB	; Returns with ZF set if MCB is FROZEN
 38918 0000329D 7505                    	jnz	short uf20
 38919 0000329F E8D4FE                  	call	unHideMCB
 38920                                  	; 09/09/2023
 38921                                  	; ax <> es
 38922 000032A2 8CC0                    	mov	ax,es ; *
 38923                                  uf20:	
 38924                                  	;mov	al,[es:ARENA.SIGNATURE]
 38925                                  	;cmp	al,arena_signature_end ; 'Z'
 38926                                  	; 22/07/2023
 38927 000032A4 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 38928 000032AA 7408                    	jz	short ufX	; 'Z' means this was the last MCB.. that's it.
 38929                                  
 38930                                  	;NextMCB es,ax		; Go on forward.
 38931                                  	; 22/07/2023
 38932                                  	; ax = es
 38933                                  	;mov	ax,es ; *
 38934                                  	;add	ax,[es:3]
 38935 000032AC 2603060300              	add	ax,[es:ARENA.SIZE]
 38936 000032B1 40                      	inc	ax
 38937                                  	; 22/07/2023
 38938                                  	;mov	es,ax
 38939 000032B2 EBE4                    	jmp	short uf10
 38940                                  ufX:	
 38941 000032B4 07                      	pop	es
 38942                                  	; 03/01/2023
 38943                                  	;pop	ax
 38944 000032B5 C3                      	retn
 38945                                  
 38946                                  ; -----------------------------------------------------------------------------
 38947                                  ;*** isFrozMCB - returns with ZF set if current MCB (ES:0) is FROZEN
 38948                                  ; -----------------------------------------------------------------------------
 38949                                  ; ENTRY:    ES:0 should point to an MCB
 38950                                  ; EXIT:     ZF set if MCB is frozen, else !ZF
 38951                                  ; ERROR:    None
 38952                                  ; USES:     Flags
 38953                                  ; -----------------------------------------------------------------------------
 38954                                  
 38955                                  isFrozMCB:
 38956                                  	;push	ax
 38957                                  
 38958                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 38959                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 38960 000032B6 26833E010008            	cmp	word [es:ARENA.OWNER],SystemPSPOwner
 38961 000032BC 7522                    	jne	short ifmX
 38962                                  
 38963                                  	;mov	ax,[es:ARENA.NAME+0]
 38964                                  	;cmp	ax,'FR' ; 5246h
 38965 000032BE 26813E08004652          	cmp	word [es:ARENA.NAME+0],'FR'
 38966 000032C5 7519                    	jne	short ifmX
 38967                                  	;mov	ax,[es:ARENA.NAME+2]
 38968                                  	;cmp	ax,'OZ' ; 5A4Fh
 38969 000032C7 26813E0A004F5A          	cmp	word [es:ARENA.NAME+2],'OZ'
 38970 000032CE 7510                    	jne	short ifmX
 38971                                  	;mov	ax,[es:ARENA.NAME+4]
 38972                                  	;cmp	ax,'EN' ; 4E45h
 38973 000032D0 26813E0C00454E          	cmp	word [es:ARENA.NAME+4],'EN'
 38974 000032D7 7507                    	jne	short ifmX
 38975                                  	;mov	ax,[es:ARENA.NAME+6]
 38976                                  	;cmp	ax,'  ' ; 2020h
 38977 000032D9 26813E0E002020          	cmp	word [es:ARENA.NAME+6],'  '
 38978                                  ifmX:	
 38979                                  	;pop	ax
 38980 000032E0 C3                      	retn
 38981                                  
 38982                                  ; -----------------------------------------------------------------------------
 38983                                  ;*** frezMCB - marks as 8+FROZEN the MCB at ES:0
 38984                                  ; -----------------------------------------------------------------------------
 38985                                  ; ENTRY:    ES:0 should point to an MCB
 38986                                  ; EXIT:     None; MCB frozen
 38987                                  ; ERROR:    None
 38988                                  ; USES:     None
 38989                                  ; -----------------------------------------------------------------------------
 38990                                  
 38991                                  frezMCB:
 38992 000032E1 26C70601000800          	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 38993 000032E8 26C70608004652          	mov	word [es:ARENA.NAME+0],'FR'
 38994 000032EF 26C7060A004F5A          	mov	word [es:ARENA.NAME+2],'OZ'
 38995 000032F6 26C7060C00454E          	mov	word [es:ARENA.NAME+4],'EN'
 38996 000032FD 26C7060E002020          	mov	word [es:ARENA.NAME+6],'  '
 38997 00003304 C3                      	retn
 38998                                  
 38999                                  ; -----------------------------------------------------------------------------
 39000                                  ;*** FreezeUM - Marks FROZEN all UM elements now FREE, save those in load UMB
 39001                                  ; -----------------------------------------------------------------------------
 39002                                  ; Entry:  None
 39003                                  ; Exit:   None; all free elements not in load UMB marked as 8+FROZEN
 39004                                  ; Error:  None
 39005                                  ; Uses:   Flags
 39006                                  ; -----------------------------------------------------------------------------
 39007                                  
 39008                                  	; 01/01/2023 - Retro DOS v4.2  
 39009                                  FreezeUM:
 39010                                  	; 01/01/2023
 39011                                  	;push	ax
 39012                                  	;push	cx
 39013                                  	;push	dx
 39014 00003305 06                      	push	es
 39015                                  
 39016                                  	;;call	GetLoadUMB
 39017                                  	; 01/01/2023
 39018                                  	; ds = cs
 39019                                  	;mov	al,[cs:UmbLoad] ; 19/04/2019 - Retro DOS v4.0
 39020 00003306 A0[6523]                	mov	al,[UmbLoad] 	
 39021                                  
 39022 00003309 30E4                    	xor	ah,ah		; Zap ah, so al==ax
 39023 0000330B 89C2                    	mov	dx,ax		; Store the load UMB in DX, so we can skip it
 39024                                  
 39025 0000330D E85BFD                  	call	UmbHead		; Returns first UMB segment in AX
 39026                                  	; 22/07/2023
 39027                                  	;mov	es,ax ; *
 39028 00003310 31C9                    	xor	cx,cx		; Pretend we're on UMB 0 for now...
 39029                                  
 39030                                  	; 22/07/2023
 39031                                  fum10:
 39032 00003312 8EC0                    	mov	es,ax ; *
 39033                                  
 39034                                  ; -----------------------------------------
 39035                                  ; FUM10--ES - Current MCB address
 39036                                  ;        CX - Current UMB number
 39037                                  ;        DX - UMB number to skip (load UMB)
 39038                                  ; -----------------------------------------
 39039                                  
 39040                                  ;fum10:	
 39041 00003314 E861FD                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 39042 00003317 7501                    	jnz	short fum20
 39043                                  
 39044 00003319 41                      	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 39045                                  fum20:	
 39046 0000331A 39D1                    	cmp	cx,dx		; If this is the load UMB, we don't want to
 39047 0000331C 740B                    	je	short fum30	; freeze anything... so skip that section.
 39048                                  
 39049                                  	;call	isFreeMCB	; Oh. If it's not free, we can't freeze it
 39050 0000331E 26830E010000            	or	word [es:ARENA.OWNER],0
 39051 00003324 7503                    	jnz	short fum30	; either.
 39052                                  
 39053 00003326 E8B8FF                  	call	frezMCB
 39054                                  fum30:	
 39055                                  	;mov	al,[es:ARENA.SIGNATURE]
 39056                                  	;cmp	al,arena_signature_end ; 'Z'
 39057                                  	; 22/07/2023
 39058 00003329 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 39059 0000332F 7408                    	je	short fumX	; 'Z' means this was the last MCB.. that's it.
 39060                                  
 39061                                  	;NextMCB es, ax		; Go on forward.
 39062                                  	; 22/07/2023
 39063                                  	; ax = es
 39064                                  	;mov	ax,es
 39065                                  	;add	ax,[es:3]
 39066 00003331 2603060300              	add	ax,[es:ARENA.SIZE]
 39067 00003336 40                      	inc	ax
 39068                                  	; 22/07/2023
 39069                                  	;mov	es,ax ; *
 39070 00003337 EBD9                    	jmp	short fum10
 39071                                  
 39072 00003339 07                      fumX:	pop	es
 39073                                  	; 01/01/2023
 39074                                  	;pop	dx
 39075                                  	;pop	cx
 39076                                  	;pop	ax
 39077 0000333A C3                      	retn
 39078                                  
 39079                                  ; -----------------------------------------------------------------------------
 39080                                  ;*** UmbTest - returns with carry set if UMBs are not available, else CF==false
 39081                                  ; -----------------------------------------------------------------------------
 39082                                  ; ENTRY:    None
 39083                                  ; EXIT:     Carry is clear if UMBs are available, or set if they are not
 39084                                  ; ERROR:    None
 39085                                  ; USES:     CF (AX,BX,DS,ES pushed 'cause they're used by others)
 39086                                  ; -----------------------------------------------------------------------------
 39087                                  
 39088                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 39089                                  UmbTest:
 39090                                  	; 01/01/2023
 39091                                  	;push	ax
 39092 0000333B 53                      	push	bx ; *
 39093                                  	;push	ds
 39094 0000333C 06                      	push	es ; **
 39095                                  
 39096                                  	; 01/01/2023
 39097                                  	; ds = cs
 39098                                  
 39099 0000333D E871FB                  	call	fm_link			; Link in UMBs (if not already linked)
 39100 00003340 E80800                  	call	WalkMem			; Check to see if they're really linked
 39101 00003343 9C                      	pushf				; And remember what we found out
 39102 00003344 E87BFB                  	call	fm_unlink		; Unlink UMBs (if WE have linked 'em)
 39103 00003347 9D                      	popf				; And restore what we found out.
 39104                                  
 39105 00003348 07                      	pop	es ; **
 39106                                  	; 01/01/2023
 39107                                  	;pop	ds
 39108 00003349 5B                      	pop	bx ; *
 39109                                  	;pop	ax
 39110 0000334A C3                      	retn
 39111                                  
 39112                                  ; -----------------------------------------------------------------------------
 39113                                  ;*** WalkMem - travels memory chain and returns carry clear iff UMBs are linked
 39114                                  ; -----------------------------------------------------------------------------
 39115                                  ; ENTRY:    None
 39116                                  ; EXIT:     Carry SET if MCB chain stops before 9FFF, CLEAR if stops >= 9FFF.
 39117                                  ; ERROR:    None
 39118                                  ; USES:     Flags
 39119                                  ; -----------------------------------------------------------------------------
 39120                                  
 39121                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 39122                                  	; (SYSINIT:3541h)
 39123                                  
 39124                                  WalkMem:
 39125                                  	;push	ax ; ?
 39126                                  	;push	bx ; ?
 39127                                  	;;push	ds ; ? ; 01/01/2023 (MSDOS 6.21 IO.SYS, SYSINIT:352Fh)
 39128                                  	;push	es ; ? no need to save contents of these registers ?
 39129                                  		   	
 39130 0000334B B452                    	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 39131 0000334D CD21                    	int	21h
 39132                                  
 39133 0000334F 268B47FE                	mov	ax,[es:bx-2]
 39134                                  	; 22/07/2023
 39135                                  um10:
 39136 00003353 8EC0                    	mov	es,ax ; * ; **
 39137                                  
 39138                                  ; ------------------------------
 39139                                  ; UM10: ES = Current MCB pointer
 39140                                  ; ------------------------------
 39141                                  
 39142                                  ;um10:
 39143                                  	;mov	al,[es:ARENA.SIGNATURE]
 39144                                  	;cmp	al,arena_signature_end ; 'Z'
 39145                                  	; 22/07/2023
 39146 00003355 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 39147 0000335B 7408                    	je	short um20		; If signature == 'Z', hay no more.
 39148                                  
 39149                                  	;NextMCB es,bx			; Move to the next MCB
 39150                                  
 39151                                  	;mov	bx,es
 39152                                  	;;add	bx,[es:3]
 39153                                  	;add	bx,[es:ARENA.SIZE]
 39154                                  	;inc	bx
 39155                                  	;mov	es,bx
 39156                                  	; 22/07/2023
 39157                                  	; ax = es
 39158                                  	;mov	ax,es ; *
 39159 0000335D 2603060300              	add	ax,[es:ARENA.SIZE]
 39160 00003362 40                      	inc	ax
 39161                                  	;mov	es,ax ; **
 39162                                  	
 39163 00003363 EBEE                    	jmp	short um10		; And restart the loop.
 39164                                  um20:	
 39165                                  	; 22/07/2023
 39166                                  	; ax = es
 39167                                  	;mov	ax,es
 39168                                  
 39169 00003365 3DFF9F                  	cmp	ax,9FFFh		; This sets CF if ax < 9FFF.
 39170                                  
 39171                                  	;pop	es ; ?
 39172                                  	;;pop	ds ; ? ; 01/01/2023 (MSDOS 6.21 IO.SYS, SYSINIT:353Dh)
 39173                                  	;pop	bx ; ?
 39174                                  	;pop	ax ; ?
 39175                                  	
 39176 00003368 C3                      	retn
 39177                                  
 39178                                  ; -----------------------------------------------------------------------------
 39179                                  ;*** hl_unlink - unlinks UMBs if fm_umb is set to 0; restores strategy too
 39180                                  ; -----------------------------------------------------------------------------
 39181                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 39182                                  ; EXIT:     None
 39183                                  ; ERROR:    None
 39184                                  ; USES:     AX, BX
 39185                                  ; -----------------------------------------------------------------------------
 39186                                  
 39187                                  	; 01/01/2023 - Retro DOS v4.2
 39188                                  hl_unlink:
 39189 00003369 30FF                    	xor	bh,bh
 39190                                  
 39191                                  	;getdata bl,fm_umb		; Restore original link-state
 39192                                  	;
 39193                                  	;push	ds
 39194                                  	;push	cs
 39195                                  	;pop	ds
 39196                                  	;mov	bl,[fm_umb]
 39197                                  	;pop	ds
 39198                                  
 39199                                  	; 01/01/2023
 39200                                  	; ds = cs
 39201                                  	;mov	bl,[cs:fm_umb]
 39202 0000336B 8A1E[9623]              	mov	bl,[fm_umb]
 39203                                  
 39204 0000336F B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 39205 00003372 CD21                    	int	21h
 39206 00003374 C3                      	retn
 39207                                  
 39208                                  ; ----------------------------------------------------------------------
 39209                                  ; HIGHEXIT.INC (MSDOS 6.0 - 1991) 	
 39210                                  ; ----------------------------------------------------------------------
 39211                                  ; 09/04/2019 - Retro DOS v4.0
 39212                                  
 39213                                  ;   Module:   HIGHEXIT.INC - Code executed after LoadHigh or DeviceHigh
 39214                                  ;   Date:     May 14, 1992
 39215                                  
 39216                                  ;   Modification log:
 39217                                  ;
 39218                                  ;     DATE    WHO      DESCRIPTION
 39219                                  ;   --------  -------  --------------------------------------------------------
 39220                                  ;   05/14/92  t-richj  Original
 39221                                  ;   06/21/92  t-richj  Final revisions before check-in
 39222                                  
 39223                                  UMB_HeadIdx	equ	8Ch	; Offset from ES (after func52h) to get UMBHead
 39224                                  
 39225                                  ; -----------------------------------------------------------------------------
 39226                                  ;*** UnHideUMBs - Marks HIDDEN elements as FREE
 39227                                  ; -----------------------------------------------------------------------------
 39228                                  ; ENTRY:  None; perhaps, earlier, HideUMBs was called... if not, we have
 39229                                  ;               very little to do, as no elelments will be marked as HIDDEN.
 39230                                  ; EXIT:   Sets InHigh to zero; carry clear if HideUMBs was called earlier.
 39231                                  ; ERROR:  None
 39232                                  ; USES:   fInHigh (from highvar.inc), carry flag
 39233                                  ; -----------------------------------------------------------------------------
 39234                                  
 39235                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 39236                                  	; (SYSINIT:357Bh)
 39237                                  
 39238                                  UnHideUMBs:
 39239 00003375 50                      	push	ax		; Save ax for what we're about to do
 39240                                  
 39241                                  ; -----------------------------------------------------------------------------
 39242                                  ; BUGBUG t-richj 11-8-92: The following six lines were commented out for a good
 39243                                  ;    length of time. Those six constitute a check of whether or not we should
 39244                                  ;    indeed clean up the upper-memory chain; without such a check, COMMAND.COM
 39245                                  ;    will destroy the current link-state and memory-allocation strategy after
 39246                                  ;    every command execution.
 39247                                  ; -----------------------------------------------------------------------------
 39248                                  
 39249                                  	;getdata al,fInHigh	; Get InHigh from data segment
 39250                                  	;
 39251                                  	;push	ds
 39252                                  	;push	cs
 39253                                  	;pop	ds
 39254                                  	;mov	al,[fInHigh]
 39255                                  	;pop	ds	
 39256                                  
 39257                                  	;mov	al,[cs:fInHigh]
 39258                                  	; 31/12/2022
 39259                                  	; ds = cs
 39260 00003376 A0[6123]                	mov	al,[fInHigh]	
 39261                                  
 39262 00003379 08C0                    	or	al,al
 39263 0000337B 7503                    	jnz	short uhu10	; If didn't call loadhigh/devicehigh earlier,
 39264                                  
 39265 0000337D 58                      	pop	ax		; then there's nothing to do here... so
 39266 0000337E F9                      	stc			; restore everything and return. Just like
 39267 0000337F C3                      	retn			; that.
 39268                                  uhu10:	
 39269 00003380 E88E00                  	call	linkumb		; Make sure UMBs are linked in.
 39270 00003383 E81200                  	call	FreeUMBs
 39271                                  
 39272                                  	;putdata fInHigh,0	; We're leaving, so update fInHigh.
 39273                                  	;
 39274                                  	;push	es
 39275                                  	;push	cs
 39276                                  	;pop	es
 39277                                  	;mov	byte [es:fInHigh],0
 39278                                  	;pop	ds
 39279                                  
 39280                                  	; 31/12/2022
 39281                                  	; ds = cs	
 39282                                  	;mov	byte [cs:fInHigh],0
 39283 00003386 C606[6123]00            	mov	byte [fInHigh],0
 39284                                  
 39285                                  	;call	he_unlink	; Unlink UMBs
 39286                                  	; 31/12/2022
 39287                                  ;;he_unlink:
 39288 0000338B 30FF                    	xor	bh,bh
 39289                                  
 39290                                  	;getdata bl,fm_umb	; Restore original link-state
 39291                                  	;mov	bl,[cs:fm_umb]	
 39292 0000338D 8A1E[9623]              	mov	bl,[fm_umb]
 39293                                  
 39294 00003391 B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 39295 00003394 CD21                    	int	21h
 39296                                  	;;retn
 39297                                  
 39298 00003396 58                      	pop	ax
 39299                                  	; 12/12/2022
 39300                                  	;clc	; 12/12/2022 (this clc may not be necessary!?)
 39301 00003397 C3                      	retn
 39302                                  
 39303                                  ; 31/12/2022
 39304                                  ;%if 0
 39305                                  ;
 39306                                  ;; -----------------------------------------------------------------------------
 39307                                  ;;*** he_unlink - unlinks UMBs if fm_umb is set to 0
 39308                                  ;; -----------------------------------------------------------------------------
 39309                                  ;; ENTRY:    fm_umb == 1 : leave linked, else unlink
 39310                                  ;; EXIT:     None
 39311                                  ;; ERROR:    None
 39312                                  ;; USES:     AX, BX
 39313                                  ;; -----------------------------------------------------------------------------
 39314                                  ;
 39315                                  ;he_unlink:
 39316                                  ;	xor	bh, bh
 39317                                  ;
 39318                                  ;	;getdata bl, fm_umb	; Restore original link-state
 39319                                  ;	mov	bl,[cs:fm_umb]	
 39320                                  ;
 39321                                  ;	mov	ax,DOS_SET_UMBLINK ; 5803h
 39322                                  ;	int	21h
 39323                                  ;	retn
 39324                                  ;
 39325                                  ;%endif
 39326                                  
 39327                                  ; -----------------------------------------------------------------------------
 39328                                  ;*** freeUMBs - frees all HIDDEN memory elements in upper-memory.
 39329                                  ; -----------------------------------------------------------------------------
 39330                                  ; ENTRY:    None
 39331                                  ; EXIT:     None; HIDDEN memory elements returned to FREE
 39332                                  ; ERROR:    None (ignore CF)
 39333                                  ; USES:     Flags
 39334                                  ; -----------------------------------------------------------------------------
 39335                                  
 39336                                  FreeUMBs:
 39337 00003398 50                      	push	ax
 39338 00003399 06                      	push	es
 39339                                  
 39340 0000339A E86700                  	call	HeadUmb		; Returns with carry if err, else ES == MCB
 39341 0000339D 721C                    	jc	short fusX
 39342                                  fus10:
 39343 0000339F 8EC0                    	mov	es,ax		; Prepare for the loop; ES = current MCB addr.
 39344                                  ;fus10:	
 39345 000033A1 E81A00                  	call	isHideMCB	; Returns with ZF set if owner is 0
 39346 000033A4 7505                    	jnz	short fus20
 39347 000033A6 E84000                  	call	freeMCB
 39348                                  	; 09/09/2023
 39349                                  	; ax <> es
 39350 000033A9 8CC0                    	mov	ax,es
 39351                                  fus20:	   
 39352                                  	;mov	al,[es:ARENA.SIGNATURE]
 39353                                  	;cmp	al,arena_signature_end ; 'Z'
 39354                                  	; 22/07/2023
 39355 000033AB 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 39356 000033B1 7408                    	jz	short fusX	; That means this was the last MCB--that's it.
 39357                                  	
 39358                                  	; 22/07/2023
 39359                                  	; ax = es
 39360                                  	;mov	ax,es
 39361 000033B3 2603060300              	add	ax,[es:ARENA.SIZE]
 39362 000033B8 40                      	inc	ax
 39363                                  	; 22/07/2023
 39364                                  	;mov	es,ax
 39365 000033B9 EBE4                    	jmp	short fus10	; Go on forward.
 39366                                  fusX:	
 39367 000033BB 07                      	pop	es
 39368 000033BC 58                      	pop	ax
 39369 000033BD C3                      	retn
 39370                                  
 39371                                  ; -----------------------------------------------------------------------------
 39372                                  ;*** isHideMCB - returns with ZF set if current MCB (ES:0) is HIDDEN
 39373                                  ; -----------------------------------------------------------------------------
 39374                                  ; ENTRY:    ES:0 should point to an MCB
 39375                                  ; EXIT:     ZF set if MCB is hidden, else !ZF
 39376                                  ; ERROR:    None
 39377                                  ; USES:     Flags
 39378                                  ; -----------------------------------------------------------------------------
 39379                                  
 39380                                  isHideMCB:
 39381                                  	;push	ax
 39382                                  
 39383 000033BE 26833E010008            	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; If the owner's SYSTEM
 39384 000033C4 7522                    	jne	short ihm_x				; then check for HIDDEN
 39385                                  
 39386                                  	;mov	ax,[es:ARENA.NAME]
 39387                                  	;cmp	ax,'HI' ; 4948h
 39388 000033C6 26813E08004849          	cmp	word [es:ARENA.NAME+0],'HI'
 39389 000033CD 7519                    	jne	short ihm_x
 39390                                  	;mov	ax,[es:ARENA.NAME+2]
 39391                                  	;cmp	ax,'DD' ; 4444h
 39392 000033CF 26813E0A004444          	cmp	word [es:ARENA.NAME+2],'DD'
 39393 000033D6 7510                    	jne	short ihm_x
 39394                                  	;mov	ax,[es:ARENA.NAME+4]
 39395                                  	;cmp	ax,'EN' ; 4E45h
 39396 000033D8 26813E0C00454E          	cmp	word [es:ARENA.NAME+4],'EN'
 39397 000033DF 7507                    	jne	short ihm_x
 39398                                  	;mov	ax,[es:ARENA.NAME+6]
 39399                                  	;cmp	ax,'  ' ; 2020h
 39400 000033E1 26813E0E002020          	cmp	word [es:ARENA.NAME+6],'  '
 39401                                  ihm_x:	
 39402                                  	;pop	ax
 39403 000033E8 C3                      	retn
 39404                                  
 39405                                  ; -----------------------------------------------------------------------------
 39406                                  ;*** freeMCB - marks as free the MCB at ES:0
 39407                                  ; -----------------------------------------------------------------------------
 39408                                  ; ENTRY:    ES:0 should point to an MCB
 39409                                  ; EXIT:     None; MCB free'd
 39410                                  ; ERROR:    None
 39411                                  ; USES:     AX
 39412                                  ; -----------------------------------------------------------------------------
 39413                                  
 39414                                  freeMCB:
 39415 000033E9 26C70601000000          	mov	word [es:ARENA.OWNER],0
 39416 000033F0 B82020                  	mov	ax,'  ' ; mov ax,2020h ; 31/12/2022
 39417 000033F3 26A30800                	mov	[es:ARENA.NAME+0],ax
 39418 000033F7 26A30A00                	mov	[es:ARENA.NAME+2],ax
 39419 000033FB 26A30C00                	mov	[es:ARENA.NAME+4],ax
 39420 000033FF 26A30E00                	mov	[es:ARENA.NAME+6],ax
 39421 00003403 C3                      	retn
 39422                                  
 39423                                  ; -----------------------------------------------------------------------------
 39424                                  ;*** HeadUmb - returns in AX the address of the first UMB block (0x9FFF)
 39425                                  ; -----------------------------------------------------------------------------
 39426                                  ; ENTRY:  Nothing
 39427                                  ; EXIT:   AX contains 0x9FFF for most systems
 39428                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 39429                                  ; USES:   Flags, AX
 39430                                  ; -----------------------------------------------------------------------------
 39431                                  
 39432                                  HeadUmb:
 39433                                  	; 13/05/2019
 39434                                  
 39435                                  	;push	si ; ?
 39436                                  	;push	ds ; ?
 39437                                  	;push	es
 39438                                  	;push	bx ; *
 39439                                  
 39440                                  	; 09/04/2019
 39441                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 39442                                  
 39443 00003404 B452                    	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 39444 00003406 CD21                    	int	21h
 39445                                  			; DOS - 2+ internal - GET LIST OF LISTS
 39446                                  			; Return: ES:BX -> DOS list of lists
 39447                                  	;mov	ax,[es:8Ch]
 39448 00003408 26A18C00                	mov	ax,[es:UMB_HeadIdx]	; And read what's in ES:008C
 39449 0000340C 83F8FF                  	cmp	ax,0FFFFh
 39450                                  	;je	short xhu_e		; If it's 0xFFFF, it's an error...
 39451                                  
 39452                                  	;clc				; Else, it isn't.
 39453                                  	;jmp	short xhu_x
 39454                                  xhu_e:	
 39455                                  	;stc
 39456 0000340F F5                      	cmc	; 09/04/2019 - Retro DOS v4.0 ; *
 39457                                  xhu_x:	
 39458                                  	;pop	bx ; *
 39459                                  	;pop	es	
 39460                                  	;pop	ds ; ?
 39461                                  	;pop	si ; ?
 39462 00003410 C3                      	retn
 39463                                  
 39464                                  ; -----------------------------------------------------------------------------
 39465                                  ;*** linkumb - links UMBs not already linked in; updates fm_umb as needed
 39466                                  ; -----------------------------------------------------------------------------
 39467                                  ; ENTRY:    None
 39468                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 39469                                  ; ERROR:    None
 39470                                  ; USES:     AX, BX, fm_umb
 39471                                  ; -----------------------------------------------------------------------------
 39472                                  
 39473                                  linkumb:
 39474 00003411 B80258                  	mov	ax,DOS_GET_UMBLINK ; 5802h
 39475 00003414 CD21                    	int	21h			; Current link-state is now in al
 39476                                  
 39477 00003416 08C0                    	or	al,al			; BUGBUG: proper check?
 39478 00003418 7508                    	jnz	short lumbX		; Jumps if UMBs already linked in
 39479                                  
 39480 0000341A B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 39481 0000341D BB0100                  	mov	bx,1
 39482 00003420 CD21                    	int	21h
 39483                                  lumbX:
 39484 00003422 C3                      	retn
 39485                                  
 39486                                  ;%endif
 39487                                  
 39488                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 39489                                  ; (SYSINIT:2B5Fh)
 39490                                  
 39491                                  ; ----------------------------------------------------------------------
 39492                                  ; SYSCONF.ASM (MSDOS 6.0 - 1991) 	
 39493                                  ; ----------------------------------------------------------------------
 39494                                  ; 09/04/2019 - Retro DOS v4.0
 39495                                  
 39496                                  ;----------------------------------------------------------------------------
 39497                                  ;
 39498                                  ; procedure : InitDevLoad
 39499                                  ;
 39500                                  ;	Input : DeviceHi = 0 indicates load DD in low memory
 39501                                  ;			 = 1 indicates load in UMB:
 39502                                  ;		           ConvLoad = 0 indicates a new-style load (see below)
 39503                                  ;		                    = 1 indicates a DOS 5-style load
 39504                                  ;		DevSize  = Size of the device driver file in paras
 39505                                  ;
 39506                                  ;	Output : none
 39507                                  ;
 39508                                  ;	Initializes DevLoadAddr, DevLoadEnd & DevEntry.
 39509                                  ;	Also sets up a header for the Device driver entry for mem utility
 39510                                  ;
 39511                                  ;----------------------------------------------------------------------------
 39512                                  ; For a "new-style load", we break off the current DevEntry and link the umbs
 39513                                  ; as we see fit, using HideUMBs (and UnHideUMBs at exit, though _it_ decides
 39514                                  ; whether it's entitled to do anything). HideUMBs uses the chart built by
 39515                                  ; ParseVar to determine which UMBs to leave FREE, and which not.
 39516                                  ;----------------------------------------------------------------------------
 39517                                  
 39518                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 39519                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 39520                                  	; (SYSINIT:364Ah)
 39521                                  InitDevLoad:
 39522                                  	; 01/01/2023
 39523                                  	;push	es ; *
 39524                                  
 39525                                  	; 11/12/2022
 39526                                  	; ds = cs
 39527 00003423 803E[B723]00            	cmp	byte [DeviceHi],0
 39528                                  	;cmp	byte [cs:DeviceHi],0	; Are we loading in UMB ?
 39529                                  	;je	short InitForLo		; no, init for lo mem
 39530 00003428 7439                    	je	short initforlo_x ; 09/04/2019
 39531                                  
 39532                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 39533                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39534                                  ; %if 0
 39535                                  	; 01/01/2023
 39536 0000342A 803E[A723]01            	cmp	byte [ConvLoad],1	; Are we loading as per DOS 5?
 39537                                  	;cmp	byte [cs:ConvLoad],1	; Are we loading as per DOS 5?
 39538 0000342F 7413                    	je	short InitForConv
 39539                                  
 39540                                  ; There are two stages to preparing upper-memory; first, we mark as 8+HIDDEN
 39541                                  ; any areas not specified on the /L:... chain. Second, we mark as 8+FROZEN
 39542                                  ; any areas left in upper-memory, except for elements in the load UMB...
 39543                                  ; we then malloc space as per Dos-5 style, and mark as free any spaces which
 39544                                  ; are 8+FROZEN (but leave 8+HIDDEN still hidden). The load is performed,
 39545                                  ; and UnHideUMBs later on marks all 8+HIDDEN as free.
 39546                                  
 39547 00003431 E85904                  	call	ShrinkUMB		; Stop using the old device arena
 39548                                  
 39549 00003434 E892FC                  	call	HideUMBs		; Mark up the UM area as we see fit
 39550 00003437 E8CBFE                  	call	FreezeUM		; Hide everything BUT the load area
 39551 0000343A E85700                  	call	GetUMBForDev		; And grab that load area as needed
 39552 0000343D 9C                      	pushf
 39553 0000343E E851FE                  	call	UnFreeze		; Then unhide everything frozen
 39554 00003441 9D                      	popf
 39555                                  	;jc	short InitForLo		; (if carry, it's loading low)
 39556                                  	;jmp	short InitForHi
 39557                                  	; 06/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 39558 00003442 EB0B                    	jmp	short idl0
 39559                                  
 39560                                  ;%endif ; 01/11/2022
 39561                                  
 39562                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 39563                                  	; (SYSINIT:2B67h)
 39564                                  InitForConv:
 39565                                  	; 11/12/2022
 39566                                  	; ds = cs
 39567 00003444 E83700                  	call	SpaceInUMB		; Do we have space left in the
 39568                                  					;  current UMB ?
 39569 00003447 7308                    	jnc	short InitForHi		; yes, we have
 39570 00003449 E84104                  	call	ShrinkUMB		; shrink the current UMB in use
 39571 0000344C E84500                  	call	GetUMBForDev		; else try to allocate new UMB
 39572                                  idl0: ; 06/07/2023
 39573 0000344F 720D                    	jc	short InitForLo		; we didn't succeed, so load
 39574                                  					;  in low memory
 39575                                  InitForHi:
 39576                                  	; 11/12/2022
 39577                                  	; ds = cs
 39578                                  	;mov	ax,[cs:DevUMBFree]	; get Para addr of free mem
 39579                                  	;mov	dx,[cs:DevUMBAddr]	; UMB start addr
 39580                                  	;add	dx,[cs:DevUMBSize]	; DX = UMB End addr
 39581 00003451 A1[AD23]                	mov	ax,[DevUMBFree]
 39582 00003454 8B16[A923]              	mov	dx,[DevUMBAddr]
 39583 00003458 0316[AB23]              	add	dx,[DevUMBSize]
 39584 0000345C EB0C                    	jmp	short idl1
 39585                                  
 39586                                  InitForLo:
 39587                                  	; 11/12/2022
 39588                                  	; ds = cs
 39589                                  	;mov	byte [cs:DeviceHi],0	; in case we failed to load
 39590 0000345E C606[B723]00            	mov	byte [DeviceHi],0
 39591                                  initforlo_x:
 39592                                  	; 11/12/2022
 39593                                  	; ds = cs
 39594                                  					;  into UMB indicate that
 39595                                  					;  we are loading low
 39596                                  	;mov	ax,[cs:memhi]		; AX = start of Low memory
 39597                                  	;mov	dx,[cs:ALLOCLIM]	; DX = End of Low memory
 39598 00003463 A1[6403]                	mov	ax,[memhi]
 39599 00003466 8B16[A502]              	mov	dx,[ALLOCLIM]
 39600                                  idl1:
 39601 0000346A E86600                  	call	DevSetMark		; setup a sub-arena for DD
 39602                                  	; 11/12/2022
 39603                                  	; ds = cs
 39604                                  	;mov	[cs:DevLoadAddr],ax	; init the Device load address
 39605                                  	;mov	[cs:DevLoadEnd],dx	; init the limit of the block
 39606                                  	;mov	word [cs:DevEntry],0	; init Entry point to DD
 39607                                  	;mov	[cs:DevEntry+2],ax
 39608 0000346D A3[9B23]                	mov	[DevLoadAddr],ax
 39609 00003470 8916[9D23]              	mov	[DevLoadEnd],dx
 39610 00003474 C706[9F23]0000          	mov	word [DevEntry],0
 39611 0000347A A3[A123]                	mov	[DevEntry+2],ax
 39612                                  	; 01/01/2023
 39613                                  	;pop	es ; *
 39614 0000347D C3                      	retn
 39615                                  
 39616                                  ;----------------------------------------------------------------------------
 39617                                  ;
 39618                                  ; procedure : SpaceInUMB?
 39619                                  ;
 39620                                  ;	Input : DevUMBAddr, DevUMBSize, DevUMBFree & DevSize
 39621                                  ;	Output : Carry set if no space in UMB
 39622                                  ;		 Carry clear if Space is available for the device in
 39623                                  ;		   current UMB
 39624                                  ;
 39625                                  ;----------------------------------------------------------------------------
 39626                                  
 39627                                  SpaceInUMB:
 39628                                  	; 11/12/2022
 39629                                  	; ds = cs
 39630                                  	;mov	ax,[cs:DevUMBSize]
 39631                                  	;add	ax,[cs:DevUMBAddr]	; End of UMB
 39632                                  	;sub	ax,[cs:DevUMBFree]	; - Free = Remaining space
 39633 0000347E A1[AB23]                	mov	ax,[DevUMBSize]
 39634 00003481 0306[A923]              	add	ax,[DevUMBAddr]		; End of UMB
 39635 00003485 2B06[AD23]              	sub	ax,[DevUMBFree]		; - Free = Remaining space
 39636                                  	; 11/12/2022
 39637                                  	;or	ax,ax			; Nospace ?
 39638                                  	;jnz	short spcinumb1
 39639                                  	;stc
 39640                                  	;retn
 39641                                  	; 11/12/2022
 39642 00003489 83F801                  	cmp	ax,1
 39643 0000348C 7205                    	jb	short spcinumb2	; cf=1
 39644                                  spcinumb1:
 39645 0000348E 48                      	dec	ax			; space for sub-arena
 39646                                  	; 11/12/2022
 39647                                  	; ds = cs
 39648 0000348F 3B06[9923]              	cmp	ax,[DevSize]
 39649                                  	;cmp	ax,[cs:DevSize]		; do we have space ?
 39650                                  spcinumb2:
 39651 00003493 C3                      	retn
 39652                                  
 39653                                  ;----------------------------------------------------------------------------
 39654                                  ;
 39655                                  ; procedure : PrepareMark
 39656                                  ;
 39657                                  ;	Input : AX==Address of MCB (not addr of free space), BX==Size
 39658                                  ;	Output : None; MCB marked appropriately and DevUMB* set as needed.
 39659                                  ;
 39660                                  ;----------------------------------------------------------------------------
 39661                                  
 39662                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39663                                  ;
 39664                                  ;PrepareMark:
 39665                                  ;	push	ds
 39666                                  ;	mov	ds,ax
 39667                                  ;	mov	word [ARENA.OWNER],8
 39668                                  ;	mov	word [ARENA.NAME],'SD' ; 4453h
 39669                                  ;	pop	ds
 39670                                  ;
 39671                                  ;	inc	ax
 39672                                  ;	mov	[cs:DevUMBAddr],ax
 39673                                  ;	mov	[cs:DevUMBFree],ax
 39674                                  ;	mov	[cs:DevUMBSize],bx	; update the UMB Variables
 39675                                  ;	retn
 39676                                  
 39677                                  ;----------------------------------------------------------------------------
 39678                                  ;
 39679                                  ; procedure : GetUMBForDev
 39680                                  ;
 39681                                  ;	Input : DevSize
 39682                                  ;	Output : Carry set if couldn't allocate a UMB to fit the
 39683                                  ;		 the device.
 39684                                  ;		 If success carry clear
 39685                                  ;
 39686                                  ;	Allocates the biggest UMB for loading devices and updates
 39687                                  ;	DevUMBSize, DevUMBAddr & DevUMBFree if it succeeded in allocating
 39688                                  ;	UMB.
 39689                                  ;
 39690                                  ;	This routine relies on the fact that all of the low memory
 39691                                  ;	is allocated, and any DOS alloc calls should return memory
 39692                                  ;	from the UMB pool.
 39693                                  ;
 39694                                  ;----------------------------------------------------------------------------
 39695                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 39696                                  	; (SYSINIT:2BC6h)
 39697                                  
 39698                                  GetUMBForDev:
 39699                                  	; 11/12/2022
 39700                                  	; ds = cs
 39701 00003494 BBFFFF                  	mov	bx,0FFFFh
 39702 00003497 B80048                  	mov	ax,4800h
 39703 0000349A CD21                    	int	21h
 39704                                  		; DOS - 2+ - ALLOCATE MEMORY
 39705                                  		; BX = number of 16-byte paragraphs desired
 39706                                  
 39707 0000349C 09DB                    	or	bx,bx
 39708                                  	;jz	short gufd_err
 39709                                  	; 09/09/2023
 39710 0000349E 742E                    	jz	short gufd_error ; bx = 0
 39711                                  
 39712 000034A0 4B                      	dec	bx
 39713                                  	; 11/12/2022
 39714                                  	; ds = cs
 39715 000034A1 391E[9923]              	cmp	[DevSize],bx
 39716                                  	;cmp	[cs:DevSize],bx
 39717 000034A5 7725                    	ja	short gufd_err
 39718                                  
 39719 000034A7 43                      	inc	bx
 39720                                  
 39721 000034A8 B80048                  	mov	ax,4800h
 39722 000034AB CD21                    	int	21h
 39723 000034AD 721D                    	jc	short gufd_err
 39724                                  
 39725                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39726                                  	;dec	ax
 39727                                  	;call	PrepareMark
 39728                                  	;
 39729                                  PrepareMark:
 39730 000034AF 1E                      	push	ds
 39731 000034B0 48                      	dec	ax
 39732 000034B1 8ED8                    	mov	ds,ax
 39733 000034B3 C70601000800            	mov	word [ARENA.OWNER],8
 39734 000034B9 C70608005344            	mov	word [ARENA.NAME],'SD' ; 4453h
 39735 000034BF 40                      	inc	ax
 39736 000034C0 1F                      	pop	ds
 39737                                  	; 11/12/2022
 39738                                  	; ds = cs
 39739                                  	;mov	[cs:DevUMBSize],bx	; update the UMB Variables
 39740                                  	;mov	[cs:DevUMBAddr],ax
 39741                                  	;mov	[cs:DevUMBFree],ax
 39742                                  gufd_x:		; 09/09/2023
 39743 000034C1 891E[AB23]              	mov	[DevUMBSize],bx		; update the UMB Variables
 39744 000034C5 A3[A923]                	mov	[DevUMBAddr],ax
 39745 000034C8 A3[AD23]                	mov	[DevUMBFree],ax
 39746                                  	;
 39747                                  	; 11/12/2022
 39748                                  	; cf=0
 39749                                  	;clc				; mark no error
 39750 000034CB C3                      	retn
 39751                                  
 39752                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 39753                                  %if 1
 39754                                  gufd_err:
 39755 000034CC 31DB                    	xor	bx,bx ; 0
 39756                                  gufd_error:
 39757 000034CE 31C0                    	xor	ax,ax ; 0
 39758 000034D0 F9                      	stc	; cf=1
 39759 000034D1 EBEE                    	jmp	short gufd_x	
 39760                                  %endif
 39761                                  
 39762                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 39763                                  %if 0
 39764                                  gufd_err:
 39765                                  	xor	ax,ax ; 0
 39766                                  	; 11/12/2022
 39767                                  	; ds = cs
 39768                                  	;mov	[cs:DevUMBSize],ax	; erase the previous values
 39769                                  	;mov	[cs:DevUMBAddr],ax
 39770                                  	;mov	[cs:DevUMBFree],ax
 39771                                  	mov	[DevUMBSize],ax		; erase the previous values
 39772                                  	mov	[DevUMBAddr],ax
 39773                                  	mov	[DevUMBFree],ax
 39774                                  	stc
 39775                                  	retn
 39776                                  %endif
 39777                                  
 39778                                  ;----------------------------------------------------------------------------
 39779                                  ;
 39780                                  ; procedure : DevSetMark
 39781                                  ;
 39782                                  ;	Input : AX - Free segment were device is going to be loaded
 39783                                  ;	Output : AX - Segment at which device can be loaded (AX=AX+1)
 39784                                  ;
 39785                                  ;	Creates a sub-arena for the device driver
 39786                                  ;	puts 'D' marker in the sub-arena
 39787                                  ;	Put the owner of the sub-arena as (AX+1)
 39788                                  ;	Copies the file name into sub-arena name field
 39789                                  ;
 39790                                  ;	Size field of the sub-arena will be set only at succesful
 39791                                  ;	completion of Device load.
 39792                                  ;
 39793                                  ;----------------------------------------------------------------------------
 39794                                  
 39795                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 39796                                  	; (SYSINIT:2C13h)
 39797                                  
 39798                                  DevSetMark:
 39799 000034D3 06                      	push	es
 39800                                  	; 03/01/2023
 39801                                  	;push	di
 39802 000034D4 1E                      	push	ds
 39803 000034D5 56                      	push	si
 39804 000034D6 8EC0                    	mov	es,ax
 39805 000034D8 26C606000044            	mov	byte [es:devmark.id],devmark_device ; 'D'
 39806 000034DE 40                      	inc	ax
 39807 000034DF 26A30100                	mov	[es:devmark.seg],ax
 39808                                  
 39809                                  ;-------------- Copy file name
 39810                                  
 39811 000034E3 50                      	push	ax			; save load addr
 39812                                  
 39813                                  	; 09/09/2023
 39814                                  	; ds = cs
 39815                                  	;lds	si,[cs:bpb_addr]	; command line is still there
 39816 000034E4 C536[8103]              	lds	si,[bpb_addr]
 39817                                  
 39818 000034E8 89F7                    	mov	di,si
 39819 000034EA FC                      	cld
 39820                                  dsm_again:
 39821 000034EB AC                      	lodsb
 39822 000034EC 3C3A                    	cmp	al,':'
 39823 000034EE 7504                    	jne	short isit_slash
 39824 000034F0 89F7                    	mov	di,si
 39825 000034F2 EBF7                    	jmp	short dsm_again
 39826                                  isit_slash:
 39827 000034F4 3C5C                    	cmp	al, '\'
 39828 000034F6 7504                    	jne	short isit_null
 39829 000034F8 89F7                    	mov	di,si
 39830 000034FA EBEF                    	jmp	short dsm_again
 39831                                  isit_null:
 39832 000034FC 08C0                    	or	al,al
 39833 000034FE 75EB                    	jnz	short dsm_again
 39834 00003500 89FE                    	mov	si,di
 39835                                  
 39836 00003502 BF0800                  	mov	di,devmark.filename ; 8
 39837 00003505 B90800                  	mov	cx,8			; maximum 8 characters
 39838                                  dsm_next_char:
 39839 00003508 AC                      	lodsb
 39840 00003509 08C0                    	or	al, al
 39841 0000350B 7407                    	jz	short blankout
 39842 0000350D 3C2E                    	cmp	al, '.'
 39843 0000350F 7403                    	je	short blankout
 39844 00003511 AA                      	stosb
 39845 00003512 E2F4                    	loop	dsm_next_char
 39846                                  blankout:
 39847 00003514 E304                    	jcxz	dsm_exit
 39848 00003516 B020                    	mov	al, ' '
 39849 00003518 F3AA                    	rep	stosb			; blank out the rest
 39850                                  dsm_exit:
 39851 0000351A 58                      	pop	ax			; restore load addr
 39852 0000351B 5E                      	pop	si
 39853 0000351C 1F                      	pop	ds
 39854                                  	; 03/01/2023
 39855                                  	;pop	di
 39856 0000351D 07                      	pop	es
 39857 0000351E C3                      	retn
 39858                                  
 39859                                  ;----------------------------------------------------------------------------
 39860                                  ;
 39861                                  ; procedure : SizeDevice
 39862                                  ;
 39863                                  ;	Input : ES:SI - points to device file to be sized
 39864                                  ;
 39865                                  ;	Output : Carry set if file cannot be opened or if it is an OS2EXE file
 39866                                  ;
 39867                                  ;	Calculates the size of the device file in paras and stores it
 39868                                  ;	in DevSize
 39869                                  ;
 39870                                  ;----------------------------------------------------------------------------
 39871                                  
 39872                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 39873                                  SizeDevice:
 39874                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39875                                  	; 11/12/2022 ; *
 39876 0000351F 1E                      	push	ds ; *
 39877 00003520 06                      	push	es
 39878 00003521 1F                      	pop	ds
 39879 00003522 89F2                    	mov	dx,si			; ds:dx -> file name
 39880 00003524 B8003D                  	mov	ax,3D00h		; open
 39881 00003527 CD21                    	int	21h
 39882 00003529 7237                    	jc	short sd_err		; open failed
 39883                                  
 39884 0000352B 89C3                    	mov	bx,ax			; BX - file handle
 39885 0000352D B80242                  	mov	ax,4202h		; seek
 39886 00003530 31C9                    	xor	cx,cx
 39887 00003532 89CA                    	mov	dx,cx			; to end of file
 39888 00003534 CD21                    	int	21h
 39889 00003536 7223                    	jc	short sd_close		; did seek fail (impossible)
 39890 00003538 83C00F                  	add	ax,15			; para convert
 39891 0000353B 83D200                  	adc	dx,0
 39892 0000353E F7C2F0FF                	test	dx,0FFF0h		; size > 0ffffh paras ?
 39893                                  	;jz	short szdev1		; no
 39894                                  	; 22/07/2023
 39895 00003542 7409                    	jz	short sd_ctp
 39896 00003544 2EC706[9923]FFFF        	mov	word [cs:DevSize],0FFFFh ; invalid device size
 39897                                  					; assuming that we fail later
 39898 0000354B EB0E                    	jmp	short sd_close
 39899                                  sd_ctp:	
 39900                                  	; 22/07/2023
 39901                                  ;szdev1:
 39902 0000354D B104                    	mov	cl,4			; convert it to paras
 39903 0000354F D3E8                    	shr	ax,cl
 39904 00003551 B10C                    	mov	cl,12
 39905 00003553 D3E2                    	shl	dx,cl
 39906 00003555 09D0                    	or	ax,dx ; * ; cf=0
 39907                                  	;
 39908                                  	; 22/07/2023 - Retro DOS v4.2 IO.SYS (optimized)
 39909                                  	; MSDOS 6.21 IO.SYS - SYSINIT:37A6h 
 39910                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39911                                  	;cmp	ax,[cs:DevSizeOption]
 39912                                  	;ja	short szdev2
 39913                                  	;mov	ax,[cs:DevSizeOption]
 39914                                  	; 12/12/2022
 39915                                  	;clc
 39916                                  ;szdev2:
 39917 00003557 2EA3[9923]              	mov	[cs:DevSize],ax		; save file size (in paragraps)
 39918                                  	; 22/07/2023
 39919                                  	;clc ; cf=0 ; *	; CLC is not needed here
 39920                                  			; (OR instruction clears CF) - E.TAN 22/07/2023
 39921                                  
 39922                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39923                                  	; 12/12/2022
 39924                                  	; cf=0
 39925                                  	;clc
 39926                                  sd_close:
 39927 0000355B 9C                      	pushf				; let close not spoil our
 39928                                  					;  carry flag
 39929 0000355C B8003E                  	mov	ax,3E00h		; close
 39930 0000355F CD21                    	int	21h			; we are not checking for err
 39931 00003561 9D                      	popf
 39932                                  sd_err:
 39933                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39934                                  	; 11/12/2022 ; *
 39935 00003562 1F                      	pop     ds ; *
 39936 00003563 C3                      	retn
 39937                                  
 39938                                  ;----------------------------------------------------------------------------
 39939                                  ;
 39940                                  ; procedure : ExecDev
 39941                                  ;
 39942                                  ;	Input : ds:dx -> device to be executed
 39943                                  ;		DevLoadAddr - contains where device has to be loaded
 39944                                  ;
 39945                                  ;	Output : Carry if error
 39946                                  ;		 Carry clear if no error
 39947                                  ;
 39948                                  ;	Loads a device driver using the 4b03h function call
 39949                                  ;
 39950                                  ;----------------------------------------------------------------------------
 39951                                  
 39952                                  	; 01/11/2022
 39953                                  ExecDev:
 39954 00003564 2E8B1E[9B23]            	mov	bx,[cs:DevLoadAddr]
 39955 00003569 2E891E[B323]            	mov	[cs:DevExecAddr],bx	; Load the parameter block
 39956                                  					;  block for exec with
 39957                                  					;  load address
 39958 0000356E 2E891E[B523]            	mov	[cs:DevExecReloc],bx
 39959 00003573 8CCB                    	mov	bx,cs
 39960 00003575 8EC3                    	mov	es,bx
 39961 00003577 BB[B323]                	mov	bx,DevExecAddr		; es:bx points to parameters
 39962                                  	;mov	al,3	; (load program only)
 39963                                  	;mov	ah,EXEC ; 4Bh
 39964                                  	; 04/07/2023
 39965 0000357A B8034B                  	mov	ax,(EXEC<<8)|03h
 39966 0000357D CD21                    	int	21h			; load in the device driver
 39967                                   		; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 39968                                  		; DS:DX -> ASCIZ filename
 39969                                  		; ES:BX -> parameter block
 39970                                  		; AL = subfunction 
 39971 0000357F C3                      	retn
 39972                                  
 39973                                  ;----------------------------------------------------------------------------
 39974                                  ;
 39975                                  ; procedure : RetFromUM
 39976                                  ;
 39977                                  ;	Input : None
 39978                                  ;	Output : ConvLoad set if didn't previously call HideUMBs
 39979                                  ;		 ConvLoad clear if did.
 39980                                  ;
 39981                                  ;	Prepares memory for more devices after returning from loading one
 39982                                  ;	using the DOS 6 options (/L:... etc).
 39983                                  ;
 39984                                  ;----------------------------------------------------------------------------
 39985                                  
 39986                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 39987                                  ;  (SYSINIT:37D1h)
 39988                                  
 39989                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39990                                  ;%if 0
 39991                                  RetFromUM:
 39992                                  	; 31/12/2022
 39993                                  	; ds = cs
 39994 00003580 9C                      	pushf
 39995                                  	;mov	byte [cs:ConvLoad],1
 39996 00003581 C606[A723]01            	mov	byte [ConvLoad],1
 39997 00003586 E8ECFD                  	call	UnHideUMBs
 39998 00003589 7204                    	jc	short rfUM1		; Skip this if didn't HideUMBs
 39999                                  	; 31/12/2022
 40000                                  	; ds = cs
 40001                                  	;;mov	byte [cs:ConvLoad],0
 40002                                  	;mov	byte [ConvLoad],0
 40003                                  	; 09/09/2023
 40004 0000358B FE0E[A723]              	dec	byte [ConvLoad] ; -> 0
 40005                                  rfUM1:	
 40006 0000358F 9D                      	popf
 40007 00003590 C3                      	retn
 40008                                  
 40009                                  ;%endif ; 01/11/2022
 40010                                  
 40011                                  ;----------------------------------------------------------------------------
 40012                                  ;
 40013                                  ; procedure : RemoveNull
 40014                                  ;
 40015                                  ;	Input : ES:SI points to a null terminated string
 40016                                  ;
 40017                                  ;	Output : none
 40018                                  ;
 40019                                  ;	Replaces the null at the end of a string with blank
 40020                                  ;
 40021                                  ;----------------------------------------------------------------------------
 40022                                  
 40023                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 40024                                  	; (SYSINIT:2CCEh)
 40025                                  RemoveNull:
 40026                                  	; 11/12/2022
 40027                                  	; ds = cs
 40028                                  rn_next:
 40029 00003591 268A1C                  	mov	bl,[es:si]
 40030 00003594 08DB                    	or	bl,bl			; null ?
 40031 00003596 7403                    	jz	short rn_gotnull
 40032 00003598 46                      	inc	si			; advance the pointer
 40033 00003599 EBF6                    	jmp	short rn_next
 40034                                  rn_gotnull:
 40035                                  	; 11/12/2022
 40036 0000359B 8A1E[CC23]              	mov	bl,[DevSavedDelim]
 40037                                  	;mov	bl,[cs:DevSavedDelim]
 40038 0000359F 26881C                  	mov	[es:si],bl		; replace null with blank
 40039                                  	; 02/11/2022
 40040                                  ; 11/12/2022
 40041                                  rba_ok:		; 10/04/2019
 40042 000035A2 C3                      	retn
 40043                                  
 40044                                  ;----------------------------------------------------------------------------
 40045                                  ;
 40046                                  ; procedure : RoundBreakAddr
 40047                                  ;
 40048                                  ;	Input : DevBrkAddr
 40049                                  ;	Output : DevBrkAddr
 40050                                  ;
 40051                                  ;	Rounds DevBrkAddr to a para address so that it is of the form xxxx:0
 40052                                  ;
 40053                                  ;----------------------------------------------------------------------------
 40054                                  
 40055                                  RoundBreakAddr:
 40056 000035A3 2EA1[A323]              	mov	ax,[cs:DevBrkAddr]
 40057 000035A7 E8EDDC                  	call	ParaRound
 40058 000035AA 2E0106[A523]            	add	[cs:DevBrkAddr+2],ax
 40059 000035AF 2EC706[A323]0000        	mov	word [cs:DevBrkAddr],0
 40060 000035B6 2EA1[9D23]              	mov	ax,[cs:DevLoadEnd]
 40061 000035BA 2E3906[A523]            	cmp	[cs:DevBrkAddr+2],ax
 40062 000035BF 76E1                    	jbe	short rba_ok
 40063 000035C1 E92911                  	jmp	mem_err
 40064                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40065                                  	; 11/12/2022
 40066                                  ;rba_ok:
 40067                                  ;	retn
 40068                                  
 40069                                  ;----------------------------------------------------------------------------
 40070                                  ;
 40071                                  ; procedure : DevSetBreak
 40072                                  ;
 40073                                  ;	Input : DevBrkAddr
 40074                                  ;	Output : Carry set if Device returned Init failed
 40075                                  ;		 Else carry clear
 40076                                  ;
 40077                                  ;----------------------------------------------------------------------------
 40078                                  
 40079                                  DevSetBreak:
 40080 000035C4 50                      	push	ax
 40081                                  
 40082 000035C5 2EA1[A523]              	mov	ax,[cs:DevBrkAddr+2]	 ;remove the init code
 40083 000035C9 2E803E[F218]00          	cmp	byte [cs:multdeviceflag],0
 40084 000035CF 750F                    	jne	short set_break_continue ;do not check it.
 40085 000035D1 2E3B06[9B23]            	cmp	ax,[cs:DevLoadAddr]
 40086 000035D6 7508                    	jne	short set_break_continue ;if not same, then o.k.
 40087                                  
 40088                                  	;cmp	word [cs:DevBrkAddr],0
 40089                                  	;je	short break_failed	;[DevBrkAddr+2]=[memhi] & [DevBrkAddr]=0
 40090                                  	; 12/12/2022
 40091 000035D8 2E833E[A323]01          	cmp	word [cs:DevBrkAddr],1
 40092 000035DE 7204                    	jb	short break_failed
 40093                                  
 40094                                  set_break_continue:
 40095 000035E0 E8C0FF                  	call	RoundBreakAddr
 40096                                  	; 12/12/2022
 40097 000035E3 F8                      	clc
 40098                                  break_failed:
 40099 000035E4 58                      	pop	ax
 40100                                  	;clc
 40101 000035E5 C3                      	retn
 40102                                  
 40103                                  	; 12/12/2022
 40104                                  ;break_failed:
 40105                                  	;pop	ax
 40106                                  	;stc
 40107                                  	;retn
 40108                                  
 40109                                  ;----------------------------------------------------------------------------
 40110                                  ;
 40111                                  ; procedure : DevBreak
 40112                                  ;
 40113                                  ;	Input : DevLoadAddr & DevBrkAddr
 40114                                  ;	Output : none
 40115                                  ;
 40116                                  ;	Marks a succesful install of a device driver
 40117                                  ;	Sets device size field in sub-arena &
 40118                                  ;	Updates Free ptr in UMB or adjusts memhi
 40119                                  ;
 40120                                  ;----------------------------------------------------------------------------
 40121                                  
 40122                                  	; 11/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 40123                                  DevBreak:
 40124                                  	;push	ds ; 11/12/2022
 40125                                  
 40126                                  	; 11/12/2022
 40127 000035E6 0E                      	push	cs
 40128 000035E7 1F                      	pop	ds
 40129                                  	;mov	ax,[cs:DevLoadAddr]
 40130                                  	;mov	bx,[cs:DevBrkAddr+2]
 40131 000035E8 A1[9B23]                	mov	ax,[DevLoadAddr]
 40132 000035EB 8B1E[A523]              	mov	bx,[DevBrkAddr+2]
 40133                                  	; 11/12/2022
 40134 000035EF 1E                      	push	ds
 40135                                  
 40136 000035F0 48                      	dec	ax			; seg of sub-arena
 40137 000035F1 8ED8                    	mov	ds,ax
 40138 000035F3 40                      	inc	ax			; Back to Device segment
 40139 000035F4 29D8                    	sub	ax,bx
 40140 000035F6 F7D8                    	neg	ax			; size of device in paras
 40141 000035F8 A30300                  	mov	[devmark.size],ax	; store it in sub-arena
 40142                                  	
 40143                                  	; 11/12/2022
 40144 000035FB 1F                      	pop	ds
 40145                                  	; ds = cs
 40146                                   	
 40147 000035FC 803E[B723]00            	cmp	byte [DeviceHi],0
 40148                                  	;cmp	byte [cs:DeviceHi],0
 40149 00003601 7405                    	je	short db_lo
 40150                                  	;mov	[cs:DevUMBFree],bx	; update Free ptr in UMB
 40151                                  	;jmp	short db_exit
 40152                                  	; 11/12/2022
 40153 00003603 891E[AD23]              	mov	[DevUMBFree],bx
 40154 00003607 C3                      	retn	
 40155                                  db_lo:
 40156                                  	; 11/12/2022
 40157                                  	; ds = cs
 40158                                  	;mov	[cs:memhi],bx
 40159                                  	;mov	word [cs:memlo],0
 40160 00003608 891E[6403]              	mov	[memhi],bx
 40161 0000360C C706[6203]0000          	mov	word [memlo],0 ; 18/12/2022
 40162                                  db_exit:
 40163                                  	;pop	ds ; 11/12/2022
 40164                                  sd_ret:		; 09/09/2023
 40165 00003612 C3                      	retn
 40166                                  
 40167                                  ; 10/04/2019 - Retro DOS v4.0
 40168                                  
 40169                                  ;----------------------------------------------------------------------------
 40170                                  ;
 40171                                  ; procedure : ParseSize
 40172                                  ;
 40173                                  ;	Parses the command line for SIZE= command
 40174                                  ;
 40175                                  ;	ES:SI = command line to parsed
 40176                                  ;
 40177                                  ;	returns ptr to command line after SIZE= option in ES:SI
 40178                                  ;	updates the DevSizeOption variable with value supplied
 40179                                  ;	in SIZE=option
 40180                                  ;	Returns carry if the SIZE option was invalid
 40181                                  ;
 40182                                  ;----------------------------------------------------------------------------
 40183                                  
 40184                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 40185                                  	; (SYSINIT:2D5Ah)
 40186                                  
 40187                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization) ((&BugFix))
 40188                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:3871h) - Retro DOS v4.2 -
 40189                                  	; (PCDOS 7.1 IO.SYS - SYSINIT:3D6Eh)  - Retro DOS v5.0 -
 40190                                  ParseSize:
 40191                                  	;push	bx
 40192                                  	;mov	bx,si
 40193                                  
 40194                                  	; 09/09/2023
 40195 00003613 56                      	push	si ; * ; mov bx,si
 40196                                  
 40197                                  	; 11/12/2022
 40198                                  	; ds = cs
 40199                                  	;mov	word [cs:DevSizeOption],0 ; init the value
 40200                                  	;mov	[cs:DevCmdLine],si
 40201                                  	;mov	[cs:DevCmdLine+2],es
 40202 00003614 C706[B823]0000          	mov	word [DevSizeOption],0 ; init the value
 40203 0000361A 8936[C823]              	mov	[DevCmdLine],si
 40204 0000361E 8C06[CA23]              	mov	[DevCmdLine+2],es	
 40205 00003622 E82400                  	call	SkipDelim
 40206 00003625 26813C5349              	cmp	word [es:si],'SI' ; 4953h
 40207 0000362A 7528                    	jne	short ps_no_size
 40208 0000362C 26817C025A45            	cmp	word [es:si+2],'ZE' ; 455Ah
 40209 00003632 7520                    	jne	short ps_no_size
 40210 00003634 268A4404                	mov	al,[es:si+4]
 40211 00003638 E80D10                  	call	delim
 40212                                  	;jne	short ps_no_size
 40213                                  	; 22/07/2023
 40214 0000363B 7518                    	jne	short ps_no_size_2 ; cf=0 here
 40215 0000363D 83C605                  	add	si,5
 40216 00003640 E81400                  	call	GetHexNum
 40217 00003643 7210                    	jc	short ps_err
 40218                                  	; 11/12/2022
 40219                                  	; ds = cs
 40220                                  	;mov	[cs:DevSizeOption],ax
 40221 00003645 A3[B823]                	mov	[DevSizeOption],ax
 40222                                  	
 40223                                  	; 09/09/2023
 40224 00003648 58                      	pop	ax  ; * (discard previous si value on top of stack)
 40225                                  
 40226                                  ;	call	SkipDelim ; **
 40227                                  ;	
 40228                                  ;	; 22/07/2023
 40229                                  ;;ps_no_size_2:
 40230                                  ;	; cf = 0
 40231                                  ;	retn
 40232                                  
 40233                                  	; 09/09/2023
 40234                                  	;jmp	short SkipDelim
 40235                                  
 40236                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 40237                                  %if 1
 40238                                  	; 01/11/2022
 40239                                  SkipDelim:
 40240                                  sd_next_char:
 40241 00003649 268A04                  	mov	al,[es:si]
 40242 0000364C E8F90F                  	call	delim
 40243 0000364F 75C1                    	jnz	short sd_ret ; cf=0 ; 09/09/2023
 40244 00003651 46                      	inc	si
 40245 00003652 EBF5                    	jmp	short sd_next_char ; 01/11/2022
 40246                                  	; 11/12/2022
 40247                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40248                                  ;sd_ret:
 40249                                  	;retn
 40250                                  %endif
 40251                                  
 40252                                  	;;;call	SkipDelim ; **
 40253                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40254                                  	;mov	bx,si
 40255                                  ps_no_size:
 40256                                  	;mov	si,bx
 40257                                  	;pop	bx
 40258 00003654 F8                      	clc	; cf=0
 40259                                  	;retn
 40260                                  	; 11/12/2022
 40261                                  ps_err:		; cf=1
 40262                                  ps_no_size_2:	; 09/09/2023 (cf=0)
 40263                                  	; 09/09/2023
 40264 00003655 5E                      	pop	si ; * ; mov si,bx
 40265                                  ;sd_ret:	; cf=?
 40266 00003656 C3                      	retn
 40267                                  
 40268                                  ;ps_err:
 40269                                  	; 02/11/2022
 40270                                  	;pop	bx
 40271                                  	;stc
 40272                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40273                                  	; 11/12/2022
 40274                                  	; cf=1
 40275                                  	;stc
 40276                                  	; 11/12/2022
 40277                                  ;sd_ret: 
 40278                                  	; 22/07/2023
 40279                                  	; 12/04/2019
 40280                                  	;retn
 40281                                  
 40282                                  ; 12/04/2019 - Retro DOS v4.0
 40283                                  
 40284                                  ;----------------------------------------------------------------------------
 40285                                  ;
 40286                                  ; procedure : SkipDelim
 40287                                  ;
 40288                                  ;	Skips delimiters in the string pointed to by ES:SI
 40289                                  ;	Returns ptr to first non-delimiter character in ES:SI
 40290                                  ;
 40291                                  ;----------------------------------------------------------------------------
 40292                                  
 40293                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 40294                                  %if 0
 40295                                  	; 01/11/2022
 40296                                  SkipDelim:
 40297                                  sd_next_char:
 40298                                  	mov	al,[es:si]
 40299                                  	call	delim
 40300                                  	jnz	short sd_ret
 40301                                  	inc	si
 40302                                  	jmp	short sd_next_char ; 01/11/2022
 40303                                  	; 11/12/2022
 40304                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40305                                  ;sd_ret:
 40306                                  	;retn
 40307                                  %endif
 40308                                  
 40309                                  ;----------------------------------------------------------------------------
 40310                                  ;
 40311                                  ; procedure : GetHexNum
 40312                                  ;
 40313                                  ;	Converts an ascii string terminated by a delimiter into binary.
 40314                                  ;	Assumes that the ES:SI points to a Hexadecimal string
 40315                                  ;
 40316                                  ;	Returns in AX the number number of paras equivalent to the
 40317                                  ;	hex number of bytes specified by the hexadecimal string.
 40318                                  ;
 40319                                  ;	Returns carry in case it encountered a non-hex character or
 40320                                  ;	if it encountered crlf
 40321                                  ;
 40322                                  ;----------------------------------------------------------------------------
 40323                                  
 40324                                  ; 13/05/2019
 40325                                  
 40326                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 40327                                  	; (SYSINIT:38C5h)
 40328                                  
 40329                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 40330                                  	; (SYSINIT:2DA5h)
 40331                                  GetHexNum:
 40332 00003657 31C0                    	xor	ax,ax
 40333 00003659 31D2                    	xor	dx,dx
 40334                                  ghn_next:
 40335 0000365B 268A1C                  	mov	bl,[es:si]
 40336 0000365E 80FB0D                  	cmp	bl,cr  ; 0Dh
 40337 00003661 7436                    	je	short ghn_err
 40338 00003663 80FB0A                  	cmp	bl,lf  ; 0Ah
 40339 00003666 7431                    	je	short ghn_err
 40340 00003668 50                      	push	ax
 40341 00003669 88D8                    	mov	al,bl
 40342 0000366B E8DA0F                  	call	delim
 40343 0000366E 58                      	pop	ax
 40344                                  	; 03/01/2023
 40345 0000366F B90400                  	mov	cx,4
 40346 00003672 7410                    	jz	short ghn_into_paras
 40347 00003674 E82400                  	call	GetNibble
 40348                                  	;jc	short ghn_err
 40349                                  	; 11/12/2022
 40350 00003677 7221                    	jc	short ghn_ret ; cf=1
 40351                                  	; 03/01/2023
 40352                                  	;mov	cx,4
 40353                                  ghn_shift1:
 40354 00003679 D1E0                    	shl	ax,1
 40355 0000367B D1D2                    	rcl	dx,1
 40356 0000367D E2FA                    	loop	ghn_shift1
 40357 0000367F 08D8                    	or	al,bl
 40358 00003681 46                      	inc	si
 40359 00003682 EBD7                    	jmp	short ghn_next
 40360                                  ghn_into_paras:
 40361 00003684 83C00F                  	add	ax,15
 40362 00003687 83D200                  	adc	dx,0
 40363 0000368A F7C2F0FF                	test	dx,0FFF0h
 40364 0000368E 7509                    	jnz	short ghn_err
 40365                                  	; 03/01/2023
 40366                                  	;mov	cx,4
 40367                                  ghn_shift2:
 40368 00003690 F8                      	clc
 40369 00003691 D1DA                    	rcr	dx,1
 40370 00003693 D1D8                    	rcr	ax,1
 40371 00003695 E2F9                    	loop	ghn_shift2
 40372 00003697 F8                      	clc
 40373 00003698 C3                      	retn
 40374                                  	; 11/12/2022
 40375                                  ghn_err:
 40376                                  gnib_err:
 40377 00003699 F9                      	stc
 40378                                  ghn_ret:
 40379                                  gnib_ret:
 40380 0000369A C3                      	retn
 40381                                  
 40382                                  ;----------------------------------------------------------------------------
 40383                                  ;
 40384                                  ; procedure : GetNibble
 40385                                  ;
 40386                                  ;	Convert one nibble (hex digit) in BL into binary
 40387                                  ;
 40388                                  ;	Returns binary value in BL
 40389                                  ;
 40390                                  ;	Returns carry if BL contains non-hex digit
 40391                                  ;
 40392                                  ;----------------------------------------------------------------------------
 40393                                  
 40394                                  GetNibble:
 40395 0000369B 80FB30                  	cmp	bl,'0'
 40396                                  	;jb	short gnib_err
 40397                                  	; 11/12/2022
 40398 0000369E 72FA                    	jb	short gnib_ret ; cf=1
 40399 000036A0 80FB39                  	cmp	bl,'9'
 40400 000036A3 7704                    	ja	short is_it_hex
 40401 000036A5 80EB30                  	sub	bl,'0'		; clc
 40402 000036A8 C3                      	retn
 40403                                  is_it_hex:
 40404 000036A9 80FB41                  	cmp	bl,'A'
 40405                                  	;jb	short gnib_err
 40406                                  	; 11/12/2022
 40407 000036AC 72EC                    	jb	short gnib_ret ; cf=1
 40408 000036AE 80FB46                  	cmp	bl,'F'
 40409 000036B1 77E6                    	ja	short gnib_err ; 11/12/2022
 40410 000036B3 80EB37                  	sub	bl,'A'- 10	; clc
 40411 000036B6 C3                      	retn
 40412                                  
 40413                                  	; 11/12/2022
 40414                                  ;gnib_err:
 40415                                  ;	stc
 40416                                  ;gnib_ret:
 40417                                  ;	retn
 40418                                  
 40419                                  ;============================================================================
 40420                                  
 40421                                  ; 12/04/2019 - Retro DOS v4.0
 40422                                  
 40423                                  ; umb.inc (MSDOS 6.0, 1991)
 40424                                  DOS_ARENA	equ 24h		; offset of arena_head var in DOS data segm.
 40425                                  UMB_ARENA	equ 8Ch		; offset of umb_head in DOS data
 40426                                  
 40427                                  XMM_REQUEST_UMB	equ 10h
 40428                                  XMM_RELEASE_UMB	equ 11h
 40429                                  
 40430                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 40431                                  
 40432                                  ;---------------------------------------------------------------------------
 40433                                  ;
 40434                                  ; Procedure Name	: umb_insert
 40435                                  ;
 40436                                  ; Inputs		: DOSDATA:UMB_HEAD = start of umb chain
 40437                                  ;			: BX = seg address of UMB to be linked in
 40438                                  ;			: DX = size of UMB to be linked in paras
 40439                                  ;			; DS = data
 40440                                  ;
 40441                                  ; Outputs		: links the UMB into the arena chain
 40442                                  ;
 40443                                  ; Uses			: AX, CX, ES, DX, BX
 40444                                  ;
 40445                                  ;---------------------------------------------------------------------------
 40446                                  
 40447                                  umb_insert:
 40448 000036B7 1E                      	push	ds
 40449                                  
 40450                                  	; 31/12/2022
 40451                                  	; ds = cs
 40452                                  
 40453                                  	;mov	ds,[cs:DevDOSData]
 40454 000036B8 8E1E[C623]              	mov	ds,[DevDOSData] ; 31/12/2022 
 40455                                  	;mov	ds,[8Ch]
 40456 000036BC 8E1E8C00                	mov	ds,[UMB_ARENA]		; es = UMB_HEAD
 40457 000036C0 8CD8                    	mov	ax,ds
 40458 000036C2 8EC0                    	mov	es,ax
 40459                                  ui_next:
 40460 000036C4 39D8                    	cmp	ax,bx			; Q: is current block above
 40461                                  					;    new block
 40462 000036C6 770F                    	ja	short ui_insert		; Y: insert it
 40463                                  					; Q: is current block the
 40464                                  					;    last
 40465 000036C8 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 40466 000036CE 745C                    	je	short ui_append		; Y: append new block to chain
 40467                                  					; N: get next block
 40468 000036D0 8ED8                    	mov	ds,ax			; M005
 40469                                  	;call	get_next		; ax = es = next block
 40470 000036D2 E83B01                  	call	_get_next_ ; 13/04/2019 - Retro DOS v4.0
 40471 000036D5 EBED                    	jmp	short ui_next
 40472                                  
 40473                                  ui_insert:
 40474 000036D7 8CD9                    	mov	cx,ds			; ds = previous arena
 40475 000036D9 41                      	inc	cx			; top of previous block
 40476                                  
 40477 000036DA 29D9                    	sub	cx,bx
 40478 000036DC F7D9                    	neg	cx			; cx = size of used block
 40479                                  	;mov	byte [0],'M'
 40480 000036DE C60600004D              	mov	byte [ARENA.SIGNATURE],arena_signature_normal ; 'M'
 40481                                  	;mov	word [1],8
 40482 000036E3 C70601000800            	mov	word [ARENA.OWNER],8	; mark as system owned
 40483                                  	;mov	[3],cx
 40484 000036E9 890E0300                	mov	[ARENA.SIZE],cx	
 40485                                  	;mov	word [8],4353h ; 'SC'
 40486 000036ED C70608005343            	mov	word [ARENA.NAME],'SC' ; 4353h
 40487                                  
 40488                                  ; prepare the arena at start of new block
 40489                                  
 40490 000036F3 8EC3                    	mov	es,bx
 40491 000036F5 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 40492 000036FB 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0
 40493                                  					; mark as free
 40494 00003702 83EA02                  	sub	dx,2			; make room for arena at
 40495                                  					; start & end of new block
 40496 00003705 2689160300              	mov	[es:ARENA.SIZE],dx
 40497                                  
 40498                                  ; prepare arena at end of new block
 40499                                  	
 40500 0000370A 01D3                    	add	bx,dx
 40501 0000370C 43                      	inc	bx
 40502 0000370D 8EC3                    	mov	es,bx			; es=arena at top of new block
 40503 0000370F 43                      	inc	bx			; bx=top of new block
 40504                                  
 40505                                  					; ax contains arena just above
 40506                                  					; this block
 40507 00003710 29D8                    	sub	ax,bx			; ax = size of used block
 40508                                  	
 40509 00003712 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 40510 00003718 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 40511 0000371F 26A30300                	mov	[es:ARENA.SIZE],ax	
 40512 00003723 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 40513                                  
 40514 0000372A EB47                    	jmp	short ui_done
 40515                                  
 40516                                  ui_append:
 40517                                  					; es = arena of last block	
 40518 0000372C 2603060300              	add	ax,[es:ARENA.SIZE]	; ax=top of last block-1 para
 40519 00003731 26832E030001            	sub	word [es:ARENA.SIZE],1	; reflect the space we are
 40520                                  					; going to rsrv on top of this 
 40521                                  					; block for the next arena.
 40522                                  	; 13/05/2019
 40523 00003737 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 40524                                  
 40525 0000373D 89C1                    	mov	cx,ax			; cx=top of prev block-1
 40526 0000373F 40                      	inc	ax
 40527 00003740 29D8                    	sub	ax,bx			; ax=top of prev block - 
 40528                                  					;    seg. address of new block
 40529 00003742 F7D8                    	neg	ax
 40530                                  
 40531 00003744 8EC1                    	mov	es,cx			; ds = arena of unused block
 40532                                  
 40533 00003746 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 40534 0000374C 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 40535 00003753 26A30300                	mov	[es:ARENA.SIZE],ax	
 40536 00003757 26C70608005343          	mov	word [es:ARENA.NAME],'SC'
 40537                                  
 40538                                  ; prepare the arena at start of new block
 40539 0000375E 8EC3                    	mov	es,bx
 40540 00003760 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end
 40541 00003766 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system
 40542                                  					; mark as free
 40543 0000376D 4A                      	dec	dx			; make room for arena
 40544 0000376E 2689160300              	mov	[es:ARENA.SIZE],dx	
 40545                                  ui_done:
 40546                                  uc_done: ; 31/12/2022 ; *!
 40547 00003773 1F                      	pop	ds
 40548                                  	; ds = cs ; 31/12/2022
 40549                                  ;uc_done:	; 18/12/2022
 40550                                  au_exit:	; 09/09/2023
 40551 00003774 C3                      	retn
 40552                                  
 40553                                  ;----------------------------------------------------------------------------
 40554                                  ;
 40555                                  ; procedure : AllocUMB
 40556                                  ;
 40557                                  ;	Allocate all UMBs and link it to DOS arena chain
 40558                                  ;
 40559                                  ;----------------------------------------------------------------------------
 40560                                  
 40561                                  AllocUMB:
 40562                                  	; 31/12/2022
 40563                                  	; ds = cs
 40564 00003775 E84700                  	call	InitAllocUMB		; link in the first UMB
 40565 00003778 72FA                    	jc	short au_exit		; quit on error
 40566                                  au_next:
 40567 0000377A E87000                  	call	umb_allocate		; allocate
 40568 0000377D 7205                    	jc	short au_coalesce
 40569 0000377F E835FF                  	call	umb_insert		; & insert till no UMBs
 40570 00003782 EBF6                    	jmp	short au_next
 40571                                  au_coalesce:
 40572                                  	; 09/09/2023
 40573                                  ;	call	umb_coalesce		; coalesce all UMBs
 40574                                  ;au_exit:
 40575                                  ;	; 31/12/2022
 40576                                  ;	; ds = cs
 40577                                  ;	retn
 40578                                  
 40579                                  	; 09/09/2023
 40580                                  	;jmp	short umb_coalesce
 40581                                  
 40582                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 40583                                  
 40584                                  ; 13/04/2019 - Retro DOS v4.0
 40585                                  
 40586                                  ;----------------------------------------------------------------------------
 40587                                  ;
 40588                                  ;**	umb_coalesce - Combine free blocks ahead with current block
 40589                                  ;
 40590                                  ;	Coalesce adds the block following the argument to the argument block,
 40591                                  ;	if it's free. Coalesce is usually used to join free blocks, but
 40592                                  ;	some callers (such as $setblock) use it to join a free block to it's
 40593                                  ;	preceeding allocated block.
 40594                                  ;
 40595                                  ;	EXIT	'C' clear if OK
 40596                                  ;		  (ds) unchanged, this block updated
 40597                                  ;		  (ax) = address of next block, IF not at end
 40598                                  ;		'C' set if arena trashed
 40599                                  ;	USES	cx, di, ds, es
 40600                                  ;
 40601                                  ;----------------------------------------------------------------------------
 40602                                  
 40603                                  umb_coalesce:
 40604                                  	; 31/12/2022
 40605                                  	; ds = cs
 40606 00003784 1E                      	push	ds ; *!
 40607                                  
 40608 00003785 31FF                    	xor	di, di
 40609                                  
 40610                                  	;mov	es,[cs:DevDOSData]
 40611                                  	; 31/12/2022
 40612 00003787 8E06[C623]              	mov	es,[DevDOSData]
 40613 0000378B 268E068C00              	mov	es,[es:UMB_ARENA]	; es = UMB_HEAD
 40614                                  uc_nextfree:
 40615 00003790 8CC0                    	mov	ax,es
 40616 00003792 8ED8                    	mov	ds,ax
 40617                                  	;cmp	[es:1],di
 40618 00003794 26393E0100              	cmp	[es:ARENA.OWNER],di	; Q: is current arena free
 40619 00003799 7407                    	je	short uc_again		; Y: try to coalesce with next block
 40620                                  					; N: get next arena
 40621 0000379B E86B00                  	call	get_next		; es, ax = next arena
 40622 0000379E 72D3                    	jc	short uc_done	; *!
 40623 000037A0 EBEE                    	jmp	short uc_nextfree
 40624                                  uc_again:
 40625 000037A2 E86400                  	call	get_next		; es, ax = next arena
 40626 000037A5 72CC                    	jc	short uc_done	; *!
 40627                                  uc_check:
 40628 000037A7 26393E0100              	cmp     [es:ARENA.OWNER],di	; Q: is arena free
 40629 000037AC 75E2                    	jne	short uc_nextfree	; N: get next free arena
 40630                                  					; Y: coalesce
 40631 000037AE 268B0E0300              	mov     cx,[es:ARENA.SIZE]      ; cx <- next block size
 40632 000037B3 41                      	inc     cx                      ; cx <- cx + 1 (for header size)
 40633                                  	;add	[3],cx
 40634 000037B4 010E0300                	add     [ARENA.SIZE],cx		; current size <- current size + cx
 40635 000037B8 268A0D                  	mov     cl,[es:di]              ; move up signature
 40636 000037BB 880D                    	mov     [di],cl
 40637 000037BD EBE3                    	jmp     short uc_again		; try again
 40638                                  
 40639                                  	; 18/12/2022
 40640                                  ;uc_done:
 40641                                  	;retn
 40642                                  
 40643                                  ;----------------------------------------------------------------------------
 40644                                  ;
 40645                                  ; procedure : InitAllocUMB
 40646                                  ;
 40647                                  ;----------------------------------------------------------------------------
 40648                                  
 40649                                  InitAllocUMB:
 40650                                  	; 31/12/2022
 40651                                  	; ds = cs
 40652 000037BF E81ED4                  	call	IsXMSLoaded
 40653 000037C2 7527                    	jnz	short iau_err		; quit on no XMS driver
 40654 000037C4 B452                    	mov	ah,52h
 40655 000037C6 CD21                    	int	21h			; get DOS DATA seg
 40656                                  	; 31/12/2022
 40657                                  	; ds = cs
 40658                                  	;mov	[cs:DevDOSData],es	; & save it for later
 40659 000037C8 8C06[C623]              	mov	[DevDOSData],es		; & save it for later
 40660 000037CC B81043                  	mov	ax,4310h
 40661 000037CF CD2F                    	int	2Fh
 40662                                  	;mov	[cs:DevXMSAddr],bx	; get XMS driver address
 40663                                  	;mov	[cs:DevXMSAddr+2],es
 40664 000037D1 891E[AF23]              	mov	[DevXMSAddr],bx		; get XMS driver address
 40665 000037D5 8C06[B123]              	mov	[DevXMSAddr+2],es	
 40666                                  	; 31/12/2022
 40667 000037D9 803E[C523]00            	cmp	byte [FirstUMBLinked],0 
 40668                                  	;cmp	byte [cs:FirstUMBLinked],0 ; have we already linked a UMB?
 40669                                  	;jne	short ia_1		; quit if we already did it
 40670                                  	; 12/12/2022
 40671 000037DE 770A                    	ja	short ia_1 ; cf=0
 40672 000037E0 E83900                  	call	LinkFirstUMB		; else link the first UMB
 40673                                  	;jc	short iau_err
 40674                                  	; 12/12/2022
 40675 000037E3 7207                    	jc	short iau_err2  ; cf=1
 40676                                  	; 31/12/2022
 40677                                  	; ds = cs
 40678 000037E5 C606[C523]FF            	mov	byte [FirstUMBLinked],0FFh ; mark that 1st UMB linked
 40679                                  	;mov	byte [cs:FirstUMBLinked],0FFh ; mark that 1st UMB linked
 40680                                  ia_1:
 40681                                  	; 12/12/2022
 40682                                  	; cf=0
 40683                                  	;clc
 40684 000037EA C3                      	retn
 40685                                  iau_err:
 40686 000037EB F9                      	stc
 40687                                  iau_err2:
 40688 000037EC C3                      	retn
 40689                                  
 40690                                  ;-------------------------------------------------------------------------
 40691                                  ;
 40692                                  ; Procedure Name	: umb_allocate
 40693                                  ;
 40694                                  ; Inputs		: DS = data
 40695                                  ;
 40696                                  ; Outputs		: if UMB available
 40697                                  ;				Allocates the largest available UMB and 
 40698                                  ;			  	BX = segment of allocated block
 40699                                  ;				DX = size of allocated block
 40700                                  ;				NC
 40701                                  ;			  else 
 40702                                  ;				CY
 40703                                  ;
 40704                                  ; Uses			: BX, DX
 40705                                  ;
 40706                                  ;-------------------------------------------------------------------------
 40707                                  
 40708                                  umb_allocate:
 40709                                  	; 31/12/2022
 40710                                  	; ds = cs
 40711 000037ED 50                      	push	ax
 40712 000037EE B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 40713 000037F0 BAFFFF                  	mov	dx,0FFFFh		; try to allocate largest
 40714                                  					;   possible
 40715                                  	; 31/12/2022
 40716 000037F3 FF1E[AF23]              	call	far [DevXMSAddr]
 40717                                  	;call	far [cs:DevXMSAddr]
 40718                                  					; dx now contains the size of
 40719                                  					; the largest UMB
 40720 000037F7 09D2                    	or	dx,dx
 40721 000037F9 740B                    	jz	short ua_err
 40722                                  	
 40723 000037FB B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 40724                                  
 40725                                  	; 31/12/2022
 40726 000037FD FF1E[AF23]              	call	far [DevXMSAddr]
 40727                                  	;call	far [cs:DevXMSAddr]
 40728                                  
 40729 00003801 83F801                  	cmp	ax,1			; Q: was the reqst successful
 40730                                  	;jne	short ua_err		; N: error
 40731                                  	; 27/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 40732 00003804 7601                    	jna	short ua_done ; if ax=1 then cf=0, else cf=1 (ax=0)
 40733                                  ua_err:
 40734 00003806 F9                      	stc	
 40735                                  
 40736                                  	;clc
 40737                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40738                                  	; 12/12/2022
 40739                                  	; cf=0
 40740                                  	;clc 
 40741                                  ua_done:
 40742 00003807 58                      	pop	ax
 40743 00003808 C3                      	retn
 40744                                  	; 27/07/2023
 40745                                  ;ua_err:
 40746                                  	;stc
 40747                                  	;jmp	short ua_done
 40748                                  
 40749                                  ;----------------------------------------------------------------------------
 40750                                  ;
 40751                                  ;**	get_next - Find Next item in Arena
 40752                                  ;
 40753                                  ;	ENTRY	dS - pointer to block head
 40754                                  ;	EXIT	AX,ES - pointers to next head
 40755                                  ;		'C' set if arena damaged
 40756                                  ;
 40757                                  ;----------------------------------------------------------------------------
 40758                                  
 40759                                  	; 01/11/2022
 40760                                  get_next:
 40761 00003809 803E00005A              	cmp	byte [0],arena_signature_end ; 'Z'
 40762 0000380E 740A                    	je	short gn_err
 40763                                  _get_next_:
 40764 00003810 8CD8                    	mov     ax,ds                   ; ax=current block
 40765 00003812 03060300                	add     ax,[ARENA.SIZE]		; ax=ax + current block length
 40766 00003816 40                      	inc     ax                      ; remember that header!
 40767 00003817 8EC0                    	mov	es,ax
 40768                                  	;clc
 40769                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40770                                  	; 11/12/2022
 40771                                  	; cf=0
 40772                                  	;clc
 40773 00003819 C3                      	retn
 40774                                  gn_err:
 40775 0000381A F9                      	stc
 40776                                  	; 11/12/2022	
 40777                                  lfu_err:	 ; cf=1
 40778 0000381B C3                      	retn
 40779                                  
 40780                                  ;----------------------------------------------------------------------------
 40781                                  ;
 40782                                  ; procedure : LinkFirstUMB
 40783                                  ;
 40784                                  ;----------------------------------------------------------------------------
 40785                                  
 40786                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 40787                                  	; (SYSINIT:2F81h)
 40788                                  LinkFirstUMB:
 40789                                  	; 31/12/2022
 40790                                  	; ds = cs
 40791 0000381C E8CEFF                  	call	umb_allocate
 40792 0000381F 72FA                    	jc	short lfu_err  ; ds = cs ; 31/12/2022
 40793                                  
 40794                                  ; bx = segment of allocated UMB
 40795                                  ; dx = size of UMB
 40796                                  
 40797                                  	; 31/12/2022
 40798                                  	; ds = cs
 40799                                  
 40800 00003821 CD12                    	int	12h			; ax = size of memory
 40801 00003823 B106                    	mov	cl,6
 40802 00003825 D3E0                    	shl	ax,cl			; ax = size in paragraphs
 40803                                  
 40804 00003827 89C1                    	mov	cx,ax			; cx = size in paras
 40805 00003829 29D8                    	sub	ax,bx			; ax = - size of unused block
 40806                                  
 40807 0000382B F7D8                    	neg	ax
 40808                                  
 40809                                  	;sub	cx,1			; cx = first umb_arena
 40810                                  	; 09/09/2023
 40811 0000382D 49                      	dec	cx
 40812 0000382E 8EC1                    	mov	es,cx			; es = first umb_arena
 40813                                  	
 40814 00003830 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 40815 00003836 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 40816                                  					
 40817 0000383D 26A30300                	mov	[es:ARENA.SIZE],ax	
 40818 00003841 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 40819                                  
 40820                                  ; put in the arena for the first UMB
 40821                                  
 40822 00003848 8EC3                    	mov	es,bx			; es has first free umb seg
 40823 0000384A 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 40824 00003850 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0	
 40825                                  					; mark as free 
 40826 00003857 4A                      	dec	dx			; make room for arena
 40827 00003858 2689160300              	mov	[es:ARENA.SIZE],dx	
 40828                                  
 40829                                  	;mov	es,[cs:DevDOSData]
 40830                                  	; 31/12/2022
 40831 0000385D 8E06[C623]              	mov	es,[DevDOSData] ; ds = cs
 40832 00003861 BF8C00                  	mov	di,UMB_ARENA ; 8Ch
 40833 00003864 26890D                  	mov	[es:di],cx		; initialize umb_head in DOS
 40834                                  					;  data segment with the arena
 40835                                  					;  just below Top of Mem
 40836                                  
 40837                                  ; we must now scan the arena chain and update the size of the last arena
 40838                                  
 40839 00003867 BF2400                  	mov	di,DOS_ARENA ; 24h
 40840 0000386A 268E05                  	mov	es,[es:di]		; es = start arena
 40841 0000386D 31FF                    	xor	di,di
 40842                                  ;scan_next
 40843                                  ; 09/12/2022
 40844                                  scannext:
 40845 0000386F 26803D5A                	cmp	byte [es:di],arena_signature_end  ; 'Z'
 40846 00003873 740C                    	je	short got_last
 40847                                  	
 40848 00003875 8CC0                    	mov	ax,es
 40849 00003877 2603060300              	add	ax,[es:ARENA.SIZE]
 40850 0000387C 40                      	inc	ax
 40851 0000387D 8EC0                    	mov	es,ax
 40852                                  	;jmp	short scan_next
 40853                                  	; 09/12/2022
 40854 0000387F EBEE                    	jmp	short scannext
 40855                                  got_last:
 40856                                  	;sub	word [es:ARENA.SIZE],1
 40857                                  	; 09/09/2023
 40858 00003881 26FF0E0300              	dec	word [es:ARENA.SIZE]
 40859                                  
 40860 00003886 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 40861                                  	;clc
 40862                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40863                                  	; 11/12/2022
 40864                                  	; cf=0
 40865                                  	;clc
 40866 0000388C C3                      	retn
 40867                                  
 40868                                  ; 11/12/2022
 40869                                  ;;lfu_err:
 40870                                  ;	;stc
 40871                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40872                                  ;	; 11/12/2022
 40873                                  ;	; cf=1
 40874                                  ;	;stc
 40875                                  ;	retn
 40876                                  
 40877                                  ;----------------------------------------------------------------------------
 40878                                  ;
 40879                                  ; procedure : ShrinkUMB
 40880                                  ;
 40881                                  ;	Shrinks the current UMB in use, so that the unused portions
 40882                                  ;	of the UMB is given back to the DOS free mem pool
 40883                                  ;
 40884                                  ;----------------------------------------------------------------------------
 40885                                  
 40886                                  ShrinkUMB:
 40887                                  	; 12/12/2022
 40888                                  	; ds = cs
 40889 0000388D 833E[A923]00            	cmp	word [DevUMBAddr],0
 40890                                  	;cmp	word [cs:DevUMBAddr],0
 40891 00003892 741F                    	je	short su_exit
 40892 00003894 06                      	push	es
 40893                                  	; 01/01/2023
 40894                                  	;push	bx
 40895                                  	; 12/12/2022
 40896                                  	;mov	bx,[cs:DevUMBFree]
 40897                                  	;sub	bx,[cs:DevUMBAddr]
 40898                                  	;mov	es,[cs:DevUMBAddr]
 40899 00003895 8B1E[AD23]              	mov	bx,[DevUMBFree]
 40900 00003899 2B1E[A923]              	sub	bx,[DevUMBAddr]
 40901 0000389D 8E06[A923]              	mov	es,[DevUMBAddr]
 40902                                  	
 40903 000038A1 B8004A                  	mov	ax,4A00h
 40904 000038A4 CD21                    	int	21h
 40905                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 40906                                  		; ES = segment address of block to change
 40907                                  		; BX = new size in paragraphs
 40908 000038A6 8CC0                    	mov	ax,es
 40909 000038A8 48                      	dec	ax
 40910 000038A9 8EC0                    	mov	es,ax
 40911 000038AB 26C70601000800          	mov	word [es:ARENA.OWNER],8
 40912                                  	; 01/01/2023
 40913                                  	;pop	bx
 40914 000038B2 07                      	pop	es
 40915                                  su_exit:
 40916 000038B3 C3                      	retn
 40917                                  
 40918                                  ;----------------------------------------------------------------------------
 40919                                  ;
 40920                                  ; procedure : UnlinkUMB
 40921                                  ;
 40922                                  ;	Unlinks the UMBs from the DOS arena chain
 40923                                  ;
 40924                                  ;----------------------------------------------------------------------------
 40925                                  
 40926                                  UnlinkUMB:
 40927                                  	; 12/12/2022
 40928                                  	; ds = cs
 40929 000038B4 1E                      	push	ds
 40930 000038B5 06                      	push	es
 40931                                  	; 12/12/2022
 40932 000038B6 803E[C523]00            	cmp	byte [FirstUMBLinked],0
 40933                                  	;cmp	byte [cs:FirstUMBLinked],0
 40934 000038BB 7420                    	je	short ulu_x		; nothing to unlink
 40935                                  	; 12/12/2022
 40936 000038BD 8E06[C623]              	mov	es,[DevDOSData]
 40937                                  	;mov	es,[cs:DevDOSData]	; get DOS data seg
 40938 000038C1 268E1E2400              	mov	ds,[es:DOS_ARENA]
 40939 000038C6 268B3E8C00              	mov	di,[es:UMB_ARENA]
 40940                                  ulu_next:
 40941 000038CB E83BFF                  	call	get_next
 40942 000038CE 720D                    	jc	short ulu_x
 40943 000038D0 39C7                    	cmp	di,ax			; is the next one UMB ?
 40944 000038D2 7404                    	je	short ulu_found
 40945 000038D4 8ED8                    	mov	ds,ax
 40946 000038D6 EBF3                    	jmp	short ulu_next
 40947                                  ulu_found:
 40948                                  	;mov	byte [0],'Z'
 40949 000038D8 C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end ; 'Z'
 40950                                  ulu_x:
 40951 000038DD 07                      	pop	es
 40952 000038DE 1F                      	pop	ds
 40953 000038DF C3                      	retn
 40954                                  
 40955                                  ; ----------------------------------------------------------------------
 40956                                  ; SYSINIT2.ASM - MSDOS 6.0 - 1991
 40957                                  ; ----------------------------------------------------------------------
 40958                                  ; 14/04/2019 - Retro DOS v4.0
 40959                                  
 40960                                  ; Multiple configuration block support  Created 16-Mar-1992 by JeffPar
 40961                                  ;
 40962                                  ; Summary:
 40963                                  ;
 40964                                  ;   The procedure "organize" crunches the in-memory copy of config.sys
 40965                                  ;   into lines delimited by CR/LF (sometimes no CR, but *always* an LF)
 40966                                  ;   with the leading "keyword=" replaced by single character codes (eg, B
 40967                                  ;   for BUFFERS, D for DEVICE, Z for any unrecognized keyword); see comtab
 40968                                  ;   and/or config.inc for the full list.
 40969                                  ;
 40970                                  ;   [blockname] and INCLUDE are the major syntactical additions for multi-
 40971                                  ;   configuration support. blockname is either MENU, which contains one
 40972                                  ;   or more MENUITEM lines, an optional MENUDEFAULT (which includes optional
 40973                                  ;   time-out), or any user-defined keyword, such as NETWORK, CD-ROM, etc.
 40974                                  ;   INCLUDE allows the current block to name another block for inclusion
 40975                                  ;   during the processing phase of CONFIG.SYS. An INCLUDE is only honored
 40976                                  ;   once, precluding nasty infinite-loop scenarios. If blocks are present
 40977                                  ;   without a MENU block, then only lines inside COMMON blocks are processed.
 40978                                  ;
 40979                                  ; Example:
 40980                                  ;
 40981                                  ;   [menu]
 40982                                  ;   menuitem=misc,Miscellaneous
 40983                                  ;   menuitem=network,Network Configuration
 40984                                  ;   menudefault=network,15
 40985                                  ;
 40986                                  ;   [network]
 40987                                  ;   include misc
 40988                                  ;   device=foo
 40989                                  ;
 40990                                  ;   [misc]
 40991                                  ;   device=bar
 40992                                  ;   include alternate
 40993                                  ;
 40994                                  ;   [alternate]
 40995                                  ;   device=tar
 40996                                  ;
 40997                                  ;
 40998                                  ;   When the menu is displayed
 40999                                  ;
 41000                                  ;    1. Miscellaneous
 41001                                  ;    2. Network Configuration
 41002                                  ;
 41003                                  ;   #2 is highlighted as the default option, and will be automatically
 41004                                  ;   selected after 15 seconds. It will invoke the following lines in the
 41005                                  ;   following order:
 41006                                  ;
 41007                                  ;       DEVICE=BAR
 41008                                  ;       DEVICE=TAR
 41009                                  ;       DEVICE=FOO
 41010                                  ;
 41011                                  
 41012                                  ;MULTI_CONFIG equ 1
 41013                                  
 41014                                  ; the following depend on the positions of the various letters in switchlist
 41015                                  
 41016                                  switchnum	equ 11111000b ; 0F8h	; which switches require number
 41017                                  
 41018                                  flagec35	equ 00000100b ; 4	; electrically compatible 3.5 inch disk drive
 41019                                  flagdrive	equ 00001000b ; 8 
 41020                                  flagcyln	equ 00010000b ; 16
 41021                                  flagseclim	equ 00100000b ; 32
 41022                                  flagheads	equ 01000000b ; 64
 41023                                  flagff		equ 10000000b ; 128
 41024                                  
 41025                                  ;----------------------------------------------------------------------------
 41026                                  ; 19/04/2019 - Retro DOS v4.0
 41027                                  
 41028                                  ; MSDOS 6.21 IO.SYS - SYSINIT:3E78h
 41029                                  
 41030                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 41031                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3054h
 41032                                  
 41033 000038E0 00                      insert_blank:	db 	0
 41034                                  
 41035                                  ;----------------------------------------------------------------------------
 41036                                  ;
 41037                                  ; procedure : setparms
 41038                                  ;
 41039                                  ; the following set of routines is used to parse the drivparm = command in
 41040                                  ; the config.sys file to change the default drive parameters.
 41041                                  ;
 41042                                  ;----------------------------------------------------------------------------
 41043                                  
 41044                                  setparms:
 41045 000038E1 1E                      	push	ds
 41046 000038E2 50                      	push	ax
 41047 000038E3 53                      	push	bx
 41048 000038E4 51                      	push	cx
 41049 000038E5 52                      	push	dx
 41050                                  
 41051 000038E6 0E                      	push	cs
 41052 000038E7 1F                      	pop	ds
 41053                                  
 41054 000038E8 31DB                    	xor	bx,bx
 41055 000038EA 8A1E[9B4D]              	mov	bl,[drive]
 41056                                  	; 18/12/2022
 41057 000038EE 43                      	inc	bx
 41058                                  	;inc	bl			; get it correct for ioctl call
 41059                                  					; (1=a,2=b...)
 41060 000038EF BA[734C]                	mov	dx,deviceparameters
 41061                                  	;mov	ah,IOCTL ; 44h
 41062                                  	;mov	al,GENERIC_IOCTL ; 0Dh
 41063                                  	; 04/07/2023
 41064 000038F2 B80D44                  	mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 41065                                  	;mov	ch,RAWIO ; 8
 41066                                  	;mov	cl,SET_DEVICE_PARAMETERS ; 40h
 41067                                  	; 04/07/2023
 41068 000038F5 B94008                  	mov	cx,(RAWIO<<8)|SET_DEVICE_PARAMETERS 
 41069 000038F8 CD21                    	int	21h
 41070                                  
 41071                                  ; 27/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 41072 000038FA 8A26[9C4D]              	mov	ah,[switches]
 41073                                  	;mov	al,[deviceparameters+20]
 41074 000038FE A0[874C]                	mov	al,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK]
 41075 00003901 8A0E[9B4D]              	mov	cl,[drive]
 41076                                  ;
 41077                                  ;; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41078                                  ;	;;mov	ax,Bios_Data		; get Bios_Data segment
 41079                                  ;	;mov	ax,KERNEL_SEGMENT ; 70h
 41080                                  ;	; 21/10/2022
 41081                                  ;	;mov	ax,DOSBIODATASEG ; 0070h	
 41082                                  ;	;mov	ds,ax			; set Bios_Data segment
 41083                                  ;
 41084                                  ;	; 27/07/2023
 41085                                  ;	;;test	word [cs:switches],flagec35 ; 4
 41086                                  ;	;test	byte [cs:switches],flagec35
 41087                                  ;	;jz	short not_ec35
 41088                                  ;
 41089                                  ;	; 27/07/2023
 41090                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41091                                  ;	;;test	word [switches],flagec35 ; 4
 41092                                  ;	; 12/12/2022
 41093                                  ;	;test	byte [switches],flagec35 ; 4
 41094                                  ;	;jz	short eot_ok
 41095                                  ;	
 41096                                  	;mov	cl,[cs:drive]		; which drive was this for?
 41097                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41098                                  	;mov	cl,[drive]
 41099                                  	; 27/07/2023
 41100                                  	;mov	ax,DOSBIODATASEG ; 0070h	
 41101                                  	;mov	ds,ax
 41102                                  
 41103 00003905 BA7000                  	mov	dx,DOSBIODATASEG
 41104 00003908 8EDA                    	mov	ds,dx
 41105                                  
 41106 0000390A F6C404                  	test	ah,flagec35	; test byte [cs:switches],flagec35
 41107 0000390D 7408                    	jz	short not_ec35
 41108                                  
 41109                                  	;mov	al,1			; assume drive 0
 41110                                  	;shl	al,cl			; set proper bit depending on drive
 41111                                  	;;or	[531h],al ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EACh)
 41112                                  	;or	[ec35_flag],al		; set the bit in the permanent flags
 41113                                  	; 27/07/2023
 41114 0000390F B401                    	mov	ah,1
 41115 00003911 D2E4                    	shl	ah,cl
 41116 00003913 0826[A204]              	or	[ec35_flag],ah
 41117                                  
 41118                                  ; 07/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 41119                                  ;	MSDOS 6.21 IO.SYS - SYINIT:3EB0h	
 41120                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41121                                  not_ec35:
 41122                                  ;	Now adjust the BIOS's EOT variable if our new drive has more
 41123                                  ;	sectors per track than any old ones.
 41124                                  
 41125                                  	; 27/07/2023
 41126                                  	;;mov	al,[cs:deviceparameters+20]
 41127                                  	;mov	al,[cs:deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK]
 41128                                  	
 41129                                  	;cmp	al,[12Ch] ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EB4h)
 41130 00003917 3A06[2C01]              	cmp	al,[eot]
 41131 0000391B 7603                    	jbe	short eot_ok
 41132 0000391D A2[2C01]                	mov	[eot],al
 41133                                  eot_ok:
 41134 00003920 5A                      	pop	dx			; fix up all the registers
 41135 00003921 59                      	pop	cx
 41136 00003922 5B                      	pop	bx
 41137 00003923 58                      	pop	ax
 41138 00003924 1F                      	pop	ds ; 13/05/2019
 41139 00003925 C3                      	retn
 41140                                  
 41141                                  ;----------------------------------------------------------------------------
 41142                                  ;
 41143                                  ; procedure : diddleback
 41144                                  ;
 41145                                  ; replace default values for further drivparm commands
 41146                                  ;
 41147                                  ;----------------------------------------------------------------------------
 41148                                  
 41149                                  diddleback:
 41150 00003926 1E                      	push	ds
 41151 00003927 0E                      	push	cs
 41152 00003928 1F                      	pop	ds
 41153                                  	;mov	word [deviceparameters+4],80
 41154 00003929 C706[774C]5000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 41155                                  	;mov	byte [deviceparameters+1],2
 41156 0000392F C606[744C]02            	mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_3INCH720KB ; 2
 41157                                  	;mov	word [deviceparameters+2],0
 41158 00003934 C706[754C]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],0
 41159 0000393A C706[9C4D]0000          	mov	word [switches],0	    ; zero all switches
 41160 00003940 1F                      	pop	ds
 41161 00003941 C3                      	retn
 41162                                  
 41163                                  
 41164                                  ; 03/01/2023
 41165                                  %if 0
 41166                                  
 41167                                  ; 15/04/2019 - Retro DOS v4.0
 41168                                  
 41169                                  ;----------------------------------------------------------------------------
 41170                                  ;
 41171                                  ; procedure : parseline
 41172                                  ;
 41173                                  ; entry point is parseline. al contains the first character in command line.
 41174                                  ;
 41175                                  ;----------------------------------------------------------------------------
 41176                                  
 41177                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 41178                                  	; (SYSINIT:3EDFh)
 41179                                  
 41180                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 41181                                  	; (SYSINIT:30ACh)
 41182                                  parseline:
 41183                                  	; 03/01/2023
 41184                                  	; ds = cs ; *
 41185                                  
 41186                                  	;push	ds ; *
 41187                                  
 41188                                  	;push	cs ; *
 41189                                  	;pop	ds ; *
 41190                                  
 41191                                  nextswtch:
 41192                                  	cmp	al,cr			; carriage return?
 41193                                  	je	short done_line
 41194                                  	cmp	al,lf			; linefeed?
 41195                                  	je	short put_back		; put it back and done
 41196                                  
 41197                                  ; anything less or equal to a space is ignored.
 41198                                  
 41199                                  	cmp	al,' '                  ; space?
 41200                                  	jbe	short getnext		; skip over space
 41201                                  	cmp	al,'/'
 41202                                  	je	short getparm
 41203                                  	stc				; mark error invalid-character-in-input
 41204                                  	;jmp	short exitpl
 41205                                  	; 03/01/2023
 41206                                  swterr:
 41207                                  	retn
 41208                                  
 41209                                  getparm:
 41210                                  	call	check_switch
 41211                                  	mov	[switches],bx		; save switches read so far
 41212                                  	jc	short swterr
 41213                                  getnext:
 41214                                  	call	getchr
 41215                                  	;jc	short done_line
 41216                                  	;jmp	short nextswtch
 41217                                  	; 03/01/2023
 41218                                  	jnc	short nextswtch
 41219                                  ;swterr:
 41220                                  	;jmp	short exitpl		; exit if error
 41221                                  
 41222                                  done_line:
 41223                                  	; 12/12/2022
 41224                                  	test	byte [switches],flagdrive ; 8
 41225                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 41226                                  	jnz	short okay
 41227                                  	stc				; mark error no-drive-specified
 41228                                  	;jmp	short exitpl
 41229                                  	; 03/01/2023
 41230                                  	retn
 41231                                  
 41232                                  okay:
 41233                                  	mov	ax,[switches]
 41234                                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 41235                                  	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 41236                                  	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 41237                                  	;clc			    ; everything is fine
 41238                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41239                                  	; 12/12/2022
 41240                                  	; cf=0
 41241                                  	;clc
 41242                                  	;call	setdeviceparameters
 41243                                  	; 03/01/2023
 41244                                  	jmp	setdeviceparameters
 41245                                  ;exitpl:
 41246                                  	; 03/01/2023
 41247                                  	; ds = cs
 41248                                  	;pop	ds ; *
 41249                                  	retn
 41250                                  put_back:
 41251                                  	inc	word [count]		; one more char to scan
 41252                                  	dec	word [chrptr]		; back up over linefeed
 41253                                  	jmp	short done_line
 41254                                  
 41255                                  %endif
 41256                                  
 41257                                  ;----------------------------------------------------------------------------
 41258                                  ;
 41259                                  ; procedure : check_switch
 41260                                  ;
 41261                                  ; processes a switch in the input. it ensures that the switch is valid, and
 41262                                  ; gets the number, if any required, following the switch. the switch and the
 41263                                  ; number *must* be separated by a colon. carry is set if there is any kind of
 41264                                  ; error.
 41265                                  ;
 41266                                  ;----------------------------------------------------------------------------
 41267                                  
 41268                                  ; 09/09/2023
 41269                                  
 41270                                  err_swtch:
 41271 00003942 31CB                    	xor	bx,cx			; remove this switch from the records
 41272                                  err_check:
 41273 00003944 F9                      	stc
 41274                                  err_chk:
 41275                                  done_swtch:	; 09/09/2023 (cf=0)
 41276 00003945 C3                      	retn
 41277                                  
 41278                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 41279                                  
 41280                                  check_switch:
 41281 00003946 E8240D                  	call	getchr
 41282                                  	;jc	short err_check
 41283 00003949 72FA                    	jc	short err_chk
 41284 0000394B 24DF                            and     al,0DFh                 ; convert it to upper case
 41285 0000394D 3C41                    	cmp	al,'A'
 41286                                  	;jb	short err_check
 41287 0000394F 72F4                    	jb	short err_chk ; 15/04/2019 - Retro DOS v4.0
 41288 00003951 3C5A                    	cmp	al,'Z'
 41289 00003953 77EF                    	ja	short err_check
 41290                                  
 41291 00003955 06                      	push	es
 41292                                  
 41293 00003956 0E                      	push	cs
 41294 00003957 07                      	pop	es
 41295                                  
 41296                                  	;mov	cl,[switchlist]		; get number of valid switches
 41297                                  	;mov	ch,0
 41298                                  	;mov	di,1+switchlist		; point to string of valid switches
 41299                                  	; 09/09/2023
 41300 00003958 BF[C04E]                	mov	di,switchlist
 41301 0000395B 8A0D                    	mov	cl,[di]
 41302 0000395D B500                    	mov	ch,0
 41303 0000395F 47                      	inc	di	; 1+switchlist
 41304                                  
 41305 00003960 F2AE                    	repne	scasb
 41306                                  
 41307 00003962 07                      	pop	es
 41308 00003963 75DF                    	jnz	short err_check
 41309                                  
 41310 00003965 B80100                  	mov	ax,1
 41311 00003968 D3E0                    	shl	ax,cl			; set bit to indicate switch
 41312 0000396A 8B1E[9C4D]              	mov	bx,[switches]		; get switches so far
 41313 0000396E 09C3                    	or	bx,ax			; save this with other switches
 41314 00003970 89C1                    	mov	cx,ax
 41315                                  	; 12/12/2022
 41316 00003972 A8F8                    	test	al,switchnum ; 0F8h
 41317                                  	;test	ax,switchnum ; 0F8h	; test against switches that require number to follow
 41318 00003974 74CF                    	jz	short done_swtch
 41319                                  
 41320 00003976 E8F40C                  	call	getchr
 41321 00003979 72C7                    	jc	short err_swtch
 41322                                  
 41323 0000397B 3C3A                    	cmp	al,':'
 41324 0000397D 75C3                    	jne	short err_swtch
 41325                                  
 41326 0000397F E8EB0C                  	call	getchr
 41327 00003982 53                      	push	bx			; preserve switches
 41328                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41329                                  	;mov	byte [cs:sepchr],' '	; allow space separators
 41330                                  	; 12/12/2022
 41331                                  	; ds = cs
 41332 00003983 C606[AE02]20            	mov	byte [sepchr],' '
 41333 00003988 E8980D                  	call	getnum
 41334                                  	;mov	byte [cs:sepchr],0
 41335                                  	; 12/12/2022
 41336 0000398B C606[AE02]00            	mov	byte [sepchr],0
 41337 00003990 5B                      	pop	bx			; restore switches
 41338                                  
 41339                                  ; because getnum does not consider carriage-return or line-feed as ok, we do
 41340                                  ; not check for carry set here. if there is an error, it will be detected
 41341                                  ; further on (hopefully).
 41342                                  
 41343                                  	; 09/09/2023
 41344                                  	;call	process_num
 41345                                  	;jmp	short process_num
 41346                                  
 41347                                  ;done_swtch:
 41348                                  ;	;clc
 41349                                  ;	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41350                                  ;	; 12/12/2022
 41351                                  ;	; cf=0
 41352                                  ;	;clc
 41353                                  ;	retn
 41354                                  
 41355                                  ;----------------------------------------------------------------------------
 41356                                  ;
 41357                                  ; procedure : process_num
 41358                                  ;
 41359                                  ; this routine takes the switch just input, and the number following (if any),
 41360                                  ; and sets the value in the appropriate variable. if the number input is zero
 41361                                  ; then it does nothing - it assumes the default value that is present in the
 41362                                  ; variable at the beginning. zero is ok for form factor and drive, however.
 41363                                  ;
 41364                                  ;----------------------------------------------------------------------------
 41365                                  
 41366                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 41367                                  	; (SYSINIT:3156h)
 41368                                  process_num:
 41369 00003991 850E[9C4D]              	test	[switches],cx		; if this switch has been done before,
 41370 00003995 752B                    	jnz	short done_ret		; ignore this one.
 41371                                  	; 12/12/2022
 41372 00003997 F6C108                  	test	cl,flagdrive ; 8
 41373                                  	;test	cx,flagdrive ; 8
 41374 0000399A 7404                    	jz	short try_f
 41375 0000399C A2[9B4D]                	mov	byte [drive],al
 41376                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41377                                  	;jmp	short done_ret
 41378                                  	; 12/12/2022
 41379                                  	; cf=0
 41380 0000399F C3                      	retn	; 13/05/2019
 41381                                  try_f:
 41382                                  	; 12/12/2022
 41383 000039A0 F6C180                  	test	cl,flagff ; 80h
 41384                                  	;test	cx,flagff ; 80h
 41385 000039A3 7404                    	jz	short try_t
 41386                                  
 41387                                  ; ensure that we do not get bogus form factors that are not supported
 41388                                  
 41389                                  	;mov	[deviceparameters+1],al
 41390 000039A5 A2[744C]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],al
 41391                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41392                                  	;jmp	short done_ret
 41393                                  	; 12/12/2022
 41394                                  	; cf=0
 41395 000039A8 C3                      	retn	; 13/05/2019
 41396                                  try_t:
 41397 000039A9 09C0                    	or	ax,ax
 41398 000039AB 7415                    	jz	short done_ret		; if number entered was 0, assume default value
 41399                                  	; 12/12/2022
 41400 000039AD F6C110                  	test	cl,flagcyln ; 10h
 41401                                  	;test	cx,flagcyln ; 10h
 41402 000039B0 7404                    	jz	short try_s
 41403                                  
 41404                                  	;mov	[deviceparameters+4],ax
 41405 000039B2 A3[774C]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],ax
 41406                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41407                                  	;jmp	short done_ret
 41408                                  	; 12/12/2022
 41409                                  	; cf=0
 41410 000039B5 C3                      	retn	; 13/05/2019
 41411                                  try_s:
 41412                                  	; 12/12/2022
 41413 000039B6 F6C120                  	test	cl,flagseclim ; 20h
 41414                                  	;test	cx,flagseclim ; 20h
 41415 000039B9 7404                    	jz	short try_h
 41416 000039BB A3[994D]                	mov	[slim],ax
 41417                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41418                                  	;jmp	short done_ret
 41419                                  	; 12/12/2022
 41420                                  	; cf=0
 41421 000039BE C3                      	retn	; 13/05/2019
 41422                                  
 41423                                  ; must be for number of heads
 41424                                  
 41425                                  try_h:
 41426 000039BF A3[974D]                	mov	[hlim],ax
 41427                                  done_ret:
 41428                                  	;clc
 41429                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41430                                  	; 12/12/2022
 41431                                  	; cf=0 (test instruction resets cf)
 41432                                  	;clc
 41433 000039C2 C3                      	retn
 41434                                  
 41435                                  
 41436                                  ; 03/01/2023 - Retro DOS v4.2
 41437                                  %if 1
 41438                                  
 41439                                  ; 15/04/2019 - Retro DOS v4.0
 41440                                  
 41441                                  ;----------------------------------------------------------------------------
 41442                                  ;
 41443                                  ; procedure : parseline
 41444                                  ;
 41445                                  ; entry point is parseline. al contains the first character in command line.
 41446                                  ;
 41447                                  ;----------------------------------------------------------------------------
 41448                                  
 41449                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 41450                                  	; (SYSINIT:3EDFh)
 41451                                  
 41452                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 41453                                  	; (SYSINIT:30ACh)
 41454                                  parseline:
 41455                                  	; 03/01/2023
 41456                                  	; ds = cs ; *
 41457                                  
 41458                                  	;push	ds ; *
 41459                                  
 41460                                  	;push	cs ; *
 41461                                  	;pop	ds ; *
 41462                                  
 41463                                  nextswtch:
 41464 000039C3 3C0D                    	cmp	al,cr			; carriage return?
 41465 000039C5 741C                    	je	short done_line
 41466 000039C7 3C0A                    	cmp	al,lf			; linefeed?
 41467 000039C9 7421                    	je	short put_back		; put it back and done
 41468                                  
 41469                                  ; anything less or equal to a space is ignored.
 41470                                  
 41471 000039CB 3C20                    	cmp	al,' '                  ; space?
 41472 000039CD 760F                    	jbe	short getnext		; skip over space
 41473 000039CF 3C2F                    	cmp	al,'/'
 41474 000039D1 7402                    	je	short getparm
 41475 000039D3 F9                      	stc				; mark error invalid-character-in-input
 41476                                  	;jmp	short exitpl
 41477                                  	; 03/01/2023
 41478                                  swterr:
 41479 000039D4 C3                      	retn
 41480                                  
 41481                                  getparm:
 41482 000039D5 E86EFF                  	call	check_switch
 41483 000039D8 891E[9C4D]              	mov	[switches],bx		; save switches read so far
 41484 000039DC 72F6                    	jc	short swterr
 41485                                  getnext:
 41486 000039DE E88C0C                  	call	getchr
 41487                                  	;jc	short done_line
 41488                                  	;jmp	short nextswtch
 41489                                  	; 03/01/2023
 41490 000039E1 73E0                    	jnc	short nextswtch
 41491                                  ;swterr:
 41492                                  	;jmp	short exitpl		; exit if error
 41493                                  
 41494                                  done_line:
 41495                                  	; 12/12/2022
 41496 000039E3 F606[9C4D]08            	test	byte [switches],flagdrive ; 8
 41497                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 41498 000039E8 750C                    	jnz	short okay
 41499 000039EA F9                      	stc				; mark error no-drive-specified
 41500                                  	;jmp	short exitpl
 41501                                  	; 03/01/2023
 41502 000039EB C3                      	retn
 41503                                  
 41504                                  ;exitpl:
 41505                                  	; 03/01/2023
 41506                                  	; ds = cs
 41507                                  	;;pop	ds ; *
 41508                                  	;retn
 41509                                  
 41510                                  put_back:
 41511 000039EC FF06[5603]              	inc	word [count]		; one more char to scan
 41512 000039F0 FF0E[5A03]              	dec	word [chrptr]		; back up over linefeed
 41513 000039F4 EBED                    	jmp	short done_line
 41514                                  
 41515                                  okay:
 41516 000039F6 A1[9C4D]                	mov	ax,[switches]
 41517 000039F9 83E003                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 41518 000039FC A3[754C]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 41519 000039FF C706[AF4C]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 41520                                  	;clc			    ; everything is fine
 41521                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41522                                  	; 12/12/2022
 41523                                  	; cf=0
 41524                                  	;clc
 41525                                  	;call	setdeviceparameters
 41526                                  	; 03/01/2023
 41527                                  	;jmp	short setdeviceparameters
 41528                                  
 41529                                  %endif
 41530                                  
 41531                                  ;	M047 -- Begin modifications (too numerous to mark specifically)
 41532                                  
 41533                                  ;----------------------------------------------------------------------------
 41534                                  ;
 41535                                  ; procedure : setdeviceparameters
 41536                                  ;
 41537                                  ; setdeviceparameters sets up the recommended bpb in each bds in the
 41538                                  ; system based on the form factor. it is assumed that the bpbs for the
 41539                                  ; various form factors are present in the bpbtable. for hard files,
 41540                                  ; the recommended bpb is the same as the bpb on the drive.
 41541                                  ; no attempt is made to preserve registers since we are going to jump to
 41542                                  ; sysinit straight after this routine.
 41543                                  ;
 41544                                  ;	if we return carry, the DRIVPARM will be aborted, but presently
 41545                                  ;	  we always return no carry
 41546                                  ;
 41547                                  ;	note:  there is a routine by the same name in msdioctl.asm
 41548                                  ;
 41549                                  ;----------------------------------------------------------------------------
 41550                                  
 41551                                  ; 15/04/2019 - Retro DOS v4.0
 41552                                  
 41553                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 41554                                  
 41555                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 41556                                  	; (SYSINIT:3FC4h)
 41557                                  
 41558                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 41559                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4236h)
 41560                                  
 41561                                  setdeviceparameters:
 41562                                  	; 03/01/2023
 41563                                  	; ds = cs
 41564                                  
 41565 00003A05 06                      	push	es
 41566                                  
 41567 00003A06 0E                      	push	cs
 41568 00003A07 07                      	pop	es
 41569                                  
 41570 00003A08 31DB                    	xor	bx,bx
 41571 00003A0A 8A1E[744C]              	mov	bl,[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 41572 00003A0E 80FB00                  	cmp	bl,DEV_5INCH ; 0
 41573 00003A11 7506                    	jne	short got_80
 41574                                  
 41575 00003A13 C706[774C]2800          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 41576                                  							; 48 tpi=40 cyl
 41577                                  got_80:
 41578 00003A19 D1E3                    	shl	bx,1			; get index into bpb table
 41579 00003A1B 8BB7[AC4E]              	mov	si,[bpbtable+bx]	; get address of bpb
 41580                                  
 41581                                  	;mov	di,deviceparameters+7	
 41582                                  	; 02/11/2022
 41583 00003A1F BF[7A4C]                	mov	di,deviceparameters+A_DEVICEPARAMETERS.DP_BPB ; es:di -> bpb
 41584 00003A22 B93500                  	mov	cx,A_BPB.size ; 31
 41585                                  	; 09/09/2023
 41586                                  	;mov	cx,59 ; PCDOS 7.1 IBMBIO.COM A_BPB.size
 41587 00003A25 FC                      	cld
 41588                                  	;repe	movsb
 41589                                  	; 02/11/2022
 41590 00003A26 F3A4                    	rep	movsb
 41591                                  
 41592 00003A28 07                      	pop	es
 41593                                  
 41594                                  	; 12/12/2022
 41595 00003A29 F606[9C4D]20            	test	byte [switches],flagseclim ; 20h
 41596                                  	;test	word [switches],flagseclim ; 20h
 41597 00003A2E 7406                    	jz	short see_heads
 41598                                  
 41599 00003A30 A1[994D]                	mov	ax,[slim]
 41600                                  	;mov	[deviceparameters+20],ax
 41601 00003A33 A3[874C]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK],ax
 41602                                  
 41603                                  see_heads:
 41604                                  	; 12/12/2022
 41605 00003A36 F606[9C4D]40            	test	byte [switches],flagheads ; 40h
 41606                                  	;test	word [switches],flagheads ; 40h
 41607 00003A3B 7406                    	jz	short heads_not_altered
 41608                                  
 41609 00003A3D A1[974D]                	mov	ax,[hlim]
 41610                                  	;mov	[deviceparameters+22],ax	
 41611 00003A40 A3[894C]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.HEADS],ax
 41612                                  
 41613                                  heads_not_altered:
 41614                                  
 41615                                  ; set up correct media descriptor byte and sectors/cluster
 41616                                  ;   sectors/cluster is always 2 except for any one sided disk or 1.44M
 41617                                  
 41618                                  	;mov	byte [deviceparameters+9],2
 41619                                  	; 02/11/2022
 41620                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERCLUSTER],2
 41621                                  	; 03/01/2023
 41622 00003A43 B80200                  	mov	ax,2	
 41623 00003A46 A2[7C4C]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERCLUSTER],al ; 2
 41624                                  
 41625 00003A49 B3F0                    	mov	bl,0F0h			; get default mediabyte
 41626                                  
 41627                                  ;	preload the mediadescriptor from the bpb into bh for convenient access
 41628                                  
 41629                                  	;mov	bh,[deviceparameters+17]
 41630                                  	; 02/11/2022
 41631 00003A4B 8A3E[844C]              	mov	bh,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.MEDIADESCRIPTOR]
 41632                                  	
 41633                                  	; 03/01/2023
 41634                                  	; ax = 2
 41635 00003A4F 3906[894C]              	cmp	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.HEADS],ax ; >2 heads?
 41636                                  	;cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.HEADS],2 ; >2 heads?
 41637 00003A53 773C                    	ja	short got_correct_mediad ; just use default if heads>2
 41638                                  
 41639 00003A55 7524                    	jne	short only_one_head	; one head, do one head stuff
 41640                                  
 41641                                  ;	two head drives will use the mediadescriptor from the bpb
 41642                                  
 41643 00003A57 88FB                    	mov	bl,bh			; get mediadescriptor from bpb
 41644                                  
 41645                                  ;	two sided drives have two special cases to look for. One is
 41646                                  ;	   a 320K diskette (40 tracks, 8 secs per track). It uses
 41647                                  ;	   a mediaid of 0fch. The other is 1.44M, which uses only
 41648                                  ;	   one sector/cluster.
 41649                                  
 41650                                  ;	any drive with 18secs/trk, 2 heads, 80 tracks, will be assumed
 41651                                  ;	   to be a 1.44M and use only 1 sector per cluster. Any other
 41652                                  ;	   type of 2 headed drive is all set.
 41653                                  
 41654 00003A59 833E[874C]12            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK],18
 41655 00003A5E 7509                    	jne	short not_144m
 41656 00003A60 833E[774C]50            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 41657 00003A65 7502                    	jne	short not_144m
 41658                                  
 41659                                  ;	We've got cyl=80, heads=2, secpertrack=18. Set cluster size to 1.
 41660                                  
 41661 00003A67 EB24                    	jmp	short got_one_secperclus_drive
 41662                                  
 41663                                  ;	check for 320K
 41664                                  
 41665                                  not_144m:
 41666 00003A69 833E[774C]28            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 41667 00003A6E 7521                    	jne	short got_correct_mediad
 41668 00003A70 833E[874C]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK],8
 41669 00003A75 751A                    	jne	short got_correct_mediad
 41670                                  
 41671 00003A77 B3FC                    	mov	bl,0FCh
 41672 00003A79 EB16                    	jmp	short got_correct_mediad
 41673                                  
 41674                                  only_one_head:
 41675                                  
 41676                                  ;	if we don't have a 360K drive, then just go use 0f0h as media descr.
 41677                                  
 41678 00003A7B 803E[744C]00            	cmp	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_5INCH ; 0
 41679 00003A80 740B                    	je	short got_one_secperclus_drive
 41680                                  
 41681                                  ;	single sided 360K drive uses either 0fch or 0feh, depending on
 41682                                  ;	  whether sectorspertrack is 8 or 9. For our purposes, anything
 41683                                  ;	  besides 8 will be considered 0fch
 41684                                  
 41685 00003A82 B3FC                    	mov	bl,0FCh			; single sided 9 sector media id
 41686 00003A84 833E[874C]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK],8
 41687                                  	; 12/12/2022
 41688 00003A89 7502                    	jne	short got_one_secperclus_drive ; okay if anything besides 8
 41689                                  
 41690 00003A8B B3FE                    	mov	bl,0FEh			; 160K mediaid
 41691                                  
 41692                                  ;	we've either got a one sided drive, or a 1.44M drive
 41693                                  ;	  either case we'll use 1 sector per cluster instead of 2
 41694                                  
 41695                                  got_one_secperclus_drive:
 41696                                  	; 03/01/2023
 41697                                  	; ax = 2
 41698 00003A8D 48                      	dec	ax  ; ax = 1
 41699 00003A8E A2[7C4C]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERCLUSTER],al ; 1
 41700                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERCLUSTER],1
 41701                                  
 41702                                  got_correct_mediad:
 41703 00003A91 881E[844C]              	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.MEDIADESCRIPTOR],bl
 41704                                  
 41705                                  ;	 Calculate the correct number of Total Sectors on medium
 41706                                  
 41707 00003A95 A1[774C]                	mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS]
 41708 00003A98 F726[894C]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.HEADS]
 41709 00003A9C F726[874C]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK]
 41710 00003AA0 A3[824C]                	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.TOTALSECTORS],ax
 41711 00003AA3 F8                      	clc				; we currently return no errors
 41712                                  
 41713 00003AA4 C3                      	retn
 41714                                  
 41715                                  ;	M047 -- end rewritten routine
 41716                                  
 41717                                  ;----------------------------------------------------------------------------
 41718                                  ;
 41719                                  ; procedure : organize
 41720                                  ;
 41721                                  ;----------------------------------------------------------------------------
 41722                                  
 41723                                  ; 09/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 41724                                  %if 1
 41725                                  end_commd_line:
 41726 00003AA5 AA                      	stosb				; store line feed char in buffer for the linecount.
 41727                                  	;mov	byte [cs:com_level],0	; reset the command level.
 41728                                  	; 03/01/2023
 41729                                  	; ds = cs
 41730                                  	;mov	byte [com_level],0
 41731                                  	;jmp	short org1
 41732                                  	; 09/09/2023
 41733 00003AA6 EB0E                    	jmp	short org0
 41734                                  nochar1:
 41735 00003AA8 F9                      	stc
 41736 00003AA9 C3                      	retn
 41737                                  %endif
 41738                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 41739                                  	; (SYSINIT:3234h)
 41740                                  
 41741                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 41742                                  	; (SYSINIT:4067h)
 41743                                  
 41744                                  	; 09/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 41745                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:42D9h)
 41746                                  
 41747                                  organize:
 41748                                  	; 03/01/2023
 41749                                  	; ds = cs
 41750 00003AAA 8B0E[5603]              	mov	cx,[count]
 41751                                  	;mov	cx,[cs:count]
 41752 00003AAE E3F8                    	jcxz	nochar1
 41753                                  
 41754                                  ;ifndef	MULTI_CONFIG
 41755                                  ;
 41756                                  ;;   In MULTI_CONFIG, we map to upper case on a line-by-line basis,
 41757                                  ;;   because we the case of values in SET commands preserved
 41758                                  ;
 41759                                  ;	call	mapcase
 41760                                  ;endif
 41761                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41762                                  	; 03/01/2023 - Retro DOS v4.2
 41763                                  	;call	mapcase
 41764                                  
 41765 00003AB0 31F6                    	xor	si,si
 41766 00003AB2 89F7                    	mov	di,si
 41767 00003AB4 31C0                    	xor	ax,ax
 41768                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 41769                                  	;;mov	byte [cs:com_level],0
 41770                                  	; 12/12/2022
 41771                                  	;mov	[cs:com_level],al ; 0
 41772                                  	; 03/01/2023
 41773                                  	; ds = cs
 41774                                  	; 09/09/2023
 41775                                  	;mov	[com_level],al ; 0
 41776                                  org0:
 41777 00003AB6 C606[5003]00            	mov	byte [com_level],0 ; 09/09/2023
 41778                                  org1:
 41779 00003ABB E8EF01                  	call	skip_comment
 41780 00003ABE 74E5                    	jz	short end_commd_line	; found a comment string and skipped.
 41781 00003AC0 E8D001                  	call	get2			; not a comment string. then get a char.
 41782 00003AC3 3C0A                    	cmp	al,lf ; 0Ah
 41783 00003AC5 74DE                    	je	short end_commd_line	; starts with a blank line.
 41784 00003AC7 3C20                    	cmp	al,' ' ; 20h
 41785 00003AC9 76F0                    	jbe	short org1		; skip leading control characters
 41786                                  	; 09/09/2023
 41787                                  	;jmp	short findit
 41788                                  
 41789                                  ; 09/09/2023
 41790                                  %if 0
 41791                                  end_commd_line:
 41792                                  	stosb				; store line feed char in buffer for the linecount.
 41793                                  	;mov	byte [cs:com_level],0	; reset the command level.
 41794                                  	; 03/01/2023
 41795                                  	; ds = cs
 41796                                  	mov	byte [com_level],0
 41797                                  	jmp	short org1
 41798                                  
 41799                                  nochar1:
 41800                                  	stc
 41801                                  	retn
 41802                                  %endif
 41803                                  
 41804                                  findit:
 41805 00003ACB 51                      	push	cx
 41806 00003ACC 56                      	push	si
 41807 00003ACD 57                      	push	di
 41808 00003ACE 89F5                    	mov	bp,si
 41809 00003AD0 4D                      	dec	bp
 41810 00003AD1 BE[904B]                        mov     si,comtab		; prepare to search command table
 41811 00003AD4 B500                    	mov	ch,0
 41812                                  findcom:
 41813 00003AD6 89EF                    	mov	di,bp
 41814 00003AD8 8A0C                    	mov	cl,[si]
 41815 00003ADA 46                      	inc	si
 41816 00003ADB E345                    	jcxz	nocom
 41817                                  
 41818                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41819                                  
 41820                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 41821                                  
 41822                                  ;ifdef	MULTI_CONFIG
 41823                                  
 41824                                  ;   Simplify future parsing by collapsing ";" onto "REM", and at the same
 41825                                  ;   time skip the upcoming delimiter test (since ";" need not be followed by
 41826                                  ;   anything in particular)
 41827                                  
 41828 00003ADD 26803D3B                	cmp	byte [es:di],CONFIG_SEMICOLON  ; ';'
 41829 00003AE1 7430                    	je	short semicolon
 41830                                  loopcom:
 41831                                  	;mov	al,[es:di]
 41832                                  	;inc	di
 41833                                  	;and	al,~20h ; 0DFh		; force upper case
 41834                                  	;inc	si                      ; compare to byte @es:di
 41835                                  	;cmp	al,[si-1]
 41836                                  	; 28/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 41837 00003AE3 268A25                  	mov	ah,[es:di]
 41838 00003AE6 47                      	inc	di
 41839 00003AE7 80E4DF                  	and	ah,~20h ; 0DFh		
 41840 00003AEA AC                      	lodsb			; mov al,[si]
 41841                                  				; inc si
 41842                                  	;cmp	al,ah
 41843                                  	;loope	loopcom
 41844                                  	; 28/07/2023
 41845 00003AEB 30C4                    	xor	ah,al		; result: ah = 0 (*) if ah = al
 41846 00003AED E1F4                    	loopz	loopcom
 41847                                  ;else
 41848                                  ;	repe	cmpsb
 41849                                  ;endif
 41850                                  	; 02/11/2022
 41851                                  	; 03/01/2023 - Retro DOS v4.2
 41852                                  	;repe	cmpsb
 41853                                  
 41854                                  	; 28/07/2023
 41855                                  	;lahf
 41856 00003AEF 01CE                            add     si,cx                   ; bump to next position without affecting flags
 41857                                  	;sahf
 41858 00003AF1 AC                              lodsb                           ; get indicator letter
 41859                                  	;jnz	short findcom
 41860                                          ; 28/07/2023
 41861 00003AF2 08E4                    	or	ah,ah			; (*)
 41862 00003AF4 75E0                    	jnz	short findcom		
 41863                                  	
 41864 00003AF6 26803D0D                	cmp     byte [es:di],cr		; the next char might be cr,lf
 41865 00003AFA 7421                    	je	short gotcom0 		; such as in "rem",cr,lf case.
 41866 00003AFC 26803D0A                	cmp	byte [es:di],lf
 41867 00003B00 741B                    	je	short gotcom0
 41868                                  
 41869                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41870                                  
 41871                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 41872                                  
 41873                                  ;ifdef	MULTI_CONFIG
 41874                                  
 41875                                  ; Skip the delimiter test for the BEGIN identifier (it doesn't have one).
 41876                                  
 41877 00003B02 3C5B                    	cmp	al,CONFIG_BEGIN  ; '['
 41878 00003B04 7417                    	je	short gotcom0
 41879                                  ;endif
 41880 00003B06 50                      	push	ax
 41881 00003B07 268A05                  	mov	al,[es:di]		; now the next char. should be a delim.
 41882                                  
 41883                                  ;ifdef	MULTI_CONFIG
 41884                                  
 41885                                  ;   If keyword is *immediately* followed by a question mark (?), then
 41886                                  ;   set the high bit of the ASCII command code (CONFIG_OPTION_QUERY) that is
 41887                                  ;   stored in the CONFIG.SYS memory image.
 41888                                  
 41889 00003B0A 3C3F                    	cmp	al,'?'                  ; explicit interactive command?
 41890 00003B0C 7509                    	jne	short no_query		; no
 41891 00003B0E 58                      	pop	ax                      ; yes, so retrieve the original code
 41892                                  	;or	al,80h ; 03/01/2023
 41893 00003B0F 0C80                    	or	al,CONFIG_OPTION_QUERY  ; and set the QUERY bit
 41894 00003B11 EB0A                    	jmp	short gotcom0           ;
 41895                                  semicolon:
 41896 00003B13 B030                    	mov	al,CONFIG_REM ; '0'
 41897 00003B15 EB06                    	jmp	short gotcom0
 41898                                  no_query:
 41899                                  ;endif  ;MULTI_CONFIG
 41900                                  
 41901                                  	; 02/11/2022
 41902                                  	; 03/01/2023 - Retro DOS v4.2
 41903                                  	;push	ax
 41904                                  	;mov	al,[es:di]		; now the next char. should be a delim.
 41905                                  
 41906 00003B17 E82E0B                  	call	delim
 41907                                  no_delim:
 41908 00003B1A 58                      	pop	ax
 41909 00003B1B 75B9                    	jnz	short findcom
 41910                                  gotcom0:
 41911 00003B1D 5F                      	pop	di
 41912 00003B1E 5E                      	pop	si
 41913 00003B1F 59                      	pop	cx
 41914 00003B20 EB10                    	jmp	short gotcom
 41915                                  nocom:
 41916 00003B22 5F                      	pop	di
 41917 00003B23 5E                      	pop	si
 41918 00003B24 59                      	pop	cx
 41919 00003B25 B05A                            mov     al,CONFIG_UNKNOWN  ; 'Z'
 41920 00003B27 AA                      	stosb				; save indicator char.
 41921                                  _skipline:
 41922 00003B28 E86801                  	call	get2
 41923 00003B2B 3C0A                    	cmp	al,lf ; 0Ah		; skip this bad command line
 41924 00003B2D 75F9                            jne     short _skipline
 41925                                  	;jmp	short end_commd_line	; handle next command line
 41926                                  	; 09/09/2023
 41927 00003B2F E973FF                  	jmp	end_commd_line
 41928                                  gotcom:
 41929 00003B32 AA                              stosb                           ; save indicator char in buffer
 41930                                  
 41931                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41932                                  
 41933                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 41934                                  
 41935                                  ;ifdef	MULTI_CONFIG
 41936                                  
 41937                                  ;   Don't pollute "cmd_indicator" with the CONFIG_OPTION_QUERY bit though;
 41938                                  ;   it screws up the direct comparisons below.
 41939                                  
 41940 00003B33 247F                    	and	al,~CONFIG_OPTION_QUERY ; 7Fh
 41941                                  ;endif
 41942                                  	;mov	[cs:cmd_indicator],al	; save it for the future use.
 41943                                  	; 03/01/2023
 41944                                  	; ds = cs
 41945 00003B35 A2[5403]                	mov	[cmd_indicator],al	; save it for the future use.
 41946                                  
 41947                                  ;ifdef	MULTI_CONFIG
 41948                                  
 41949                                  ;   There is no whitespace/delimiter between the "begin block" character
 41950                                  ;   ([) and the name of block (eg, [menu]), therefore skip this delimiter
 41951                                  ;   skipping code
 41952                                  
 41953 00003B38 3C5B                    	cmp	al,CONFIG_BEGIN
 41954 00003B3A 7455                    	je	short org31
 41955 00003B3C 3C4F                    	cmp	al,CONFIG_SUBMENU ; 'O'
 41956 00003B3E 740F                    	je	short no_mapcase
 41957 00003B40 3C45                    	cmp	al,CONFIG_MENUITEM ; 'E'
 41958 00003B42 740B                    	je	short no_mapcase
 41959 00003B44 3C41                    	cmp	al,CONFIG_MENUDEFAULT ; 'A'
 41960 00003B46 7407                    	je	short no_mapcase
 41961 00003B48 3C4A                    	cmp	al,CONFIG_INCLUDE ; 'J'
 41962 00003B4A 7403                    	je	short no_mapcase
 41963 00003B4C E8350B                  	call	mapcase			; map case of rest of line to UPPER
 41964                                  no_mapcase:
 41965                                  ;endif
 41966                                  	;; 02/11/2022
 41967                                  	;;mov	[cs:cmd_indicator],al	; save it for the future use.
 41968                                  	;; 03/01/2023
 41969                                  	;; ds = cs
 41970                                  	;mov	[cmd_indicator],al
 41971                                  org2:	
 41972 00003B4F E84101                  	call    get2                    ; skip the command name until delimiter
 41973 00003B52 3C0A                            cmp     al,lf 	    ; 0Ah
 41974 00003B54 740F                    	je	short org21
 41975 00003B56 3C0D                    	cmp	al,cr 	    ; 0Dh	
 41976 00003B58 740B                    	je	short org21
 41977                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41978                                  	; 03/01/2023 - Retro DOS v4.2
 41979 00003B5A 3C2F                    	cmp	al, '/'			; T-RICHJ: Added to allow DEVHIGH/L:...
 41980 00003B5C 7407                    	je	short org21		; T-RICHJ: to be parsed properly.
 41981                                  
 41982 00003B5E E8E70A                  	call	delim
 41983 00003B61 75EC                            jnz	short org2
 41984 00003B63 EB02                    	jmp	short org3
 41985                                  org21:					;if cr or lf then
 41986 00003B65 4E                      	dec	si			; undo si, cx register
 41987 00003B66 41                      	inc	cx			;  and continue
 41988                                  org3:	
 41989                                  	;cmp	byte [cs:cmd_indicator],CONFIG_COMMENT ; 'Y'
 41990                                  	;je	short get_cmt_token
 41991                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41992                                  	; 03/01/2023 - Retro DOS v4.2	
 41993                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 41994                                  	;je	short org_file
 41995                                  	;cmp	byte [cs:cmd_indicator],CONFIG_INSTALL ; 'I'
 41996                                  	;je	short org_file
 41997                                  	;cmp	byte [cs:cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 41998                                  	;je	short org_file
 41999                                  	; 02/11/2022
 42000                                  	; 03/01/2023 - Retro DOS v4.2
 42001                                  	;;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 42002                                  	;;je	short org_file
 42003                                  	;cmp	byte [cs:cmd_indicator],CONFIG_SHELL ; 'S'
 42004                                  	;je	short org_file
 42005                                          ;cmp	byte [cs:cmd_indicator],CONFIG_SWITCHES ; '1'
 42006                                  	;je	short org_switch
 42007                                  
 42008                                  	; 03/01/2023
 42009                                  	; ds = cs
 42010                                  
 42011 00003B67 803E[5403]59            	cmp	byte [cmd_indicator],CONFIG_COMMENT ; 'Y'
 42012 00003B6C 745D                    	je	short get_cmt_token
 42013                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 42014                                  	; 03/01/2023 - Retro DOS v4.2	
 42015 00003B6E 803E[5403]44            	cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 42016 00003B73 7430                    	je	short org_file
 42017 00003B75 803E[5403]49            	cmp	byte [cmd_indicator],CONFIG_INSTALL ; 'I'
 42018 00003B7A 7429                    	je	short org_file
 42019 00003B7C 803E[5403]57            	cmp	byte [cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 42020 00003B81 7422                    	je	short org_file
 42021                                  	; 02/11/2022
 42022                                  	; 03/01/2023 - Retro DOS v4.2
 42023                                  	;cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 42024                                  	;je	short org_file
 42025 00003B83 803E[5403]53                    cmp	byte [cmd_indicator],CONFIG_SHELL ; 'S'
 42026 00003B88 741B                    	je	short org_file
 42027 00003B8A 803E[5403]31                    cmp	byte [cmd_indicator],CONFIG_SWITCHES ; '1'
 42028 00003B8F 7403                    	je	short org_switch
 42029                                  	
 42030                                  org31:
 42031 00003B91 E99500                  	jmp	org4
 42032                                  
 42033                                  org_switch:
 42034 00003B94 E81601                  	call	skip_comment
 42035 00003B97 7472                    	jz	short end_commd_line_brdg
 42036                                  
 42037 00003B99 E8F700                  	call	get2
 42038 00003B9C E8B10A                  	call	org_delim
 42039 00003B9F 74F3                    	jz	short org_switch
 42040                                  
 42041 00003BA1 AA                      	stosb
 42042 00003BA2 E99300                  	jmp	org5
 42043                                  
 42044                                  org_file:			; get the filename and put 0 at end
 42045 00003BA5 E80501                  	call	skip_comment
 42046 00003BA8 7464                    	jz	short org_put_zero
 42047                                  
 42048 00003BAA E8E600                  	call	get2		; not a comment
 42049 00003BAD E8980A                  	call	delim
 42050 00003BB0 74F3                    	jz	short org_file	; skip the possible delimiters
 42051                                  
 42052 00003BB2 AA                      	stosb			; copy the first non delim char found in buffer
 42053                                  
 42054                                  org_copy_file:
 42055 00003BB3 E8F700                  	call	skip_comment	; comment char in the filename?
 42056 00003BB6 7456                    	jz	short org_put_zero ; then stop copying filename at that point
 42057                                  
 42058 00003BB8 E8D800                  	call	get2
 42059 00003BBB 3C2F                    	cmp	al,'/'		; a switch char? (device=filename/xxx)
 42060 00003BBD 7457                    	je	short end_file_slash ; this will be the special case.
 42061                                  
 42062 00003BBF AA                      	stosb			; save the char. in buffer
 42063 00003BC0 E8850A                  	call	delim
 42064 00003BC3 7459                    	jz	short end_copy_file
 42065                                  
 42066 00003BC5 3C20                    	cmp	al, ' '
 42067 00003BC7 77EA                    	ja	short org_copy_file ; keep copying
 42068 00003BC9 EB53                    	jmp	short end_copy_file ; otherwise, assume end of the filename.
 42069                                  
 42070                                  get_cmt_token:			; get the token. just max. 2 char.
 42071 00003BCB E8C500                  	call	get2
 42072 00003BCE 3C20                    	cmp	al,' '		; skip white spaces or "=" char.
 42073 00003BD0 74F9                    	je	short get_cmt_token ; (we are allowing the other special
 42074 00003BD2 3C09                    	cmp	al,tab ; 9 	;  characters can used for comment id.
 42075 00003BD4 74F5                    	je	short get_cmt_token ;  character.)
 42076 00003BD6 3C3D                    	cmp	al,'='		; = is special in this case.
 42077 00003BD8 74F1                    	je	short get_cmt_token
 42078 00003BDA 3C0D                    	cmp	al,cr
 42079 00003BDC 7426                    	je	short get_cmt_end ; cannot accept the carriage return
 42080 00003BDE 3C0A                    	cmp	al,lf
 42081 00003BE0 7422                    	je	short get_cmt_end
 42082                                  
 42083                                  	; 03/01/2023
 42084                                  	; ds = cs
 42085                                  	;mov	[cs:cmmt1],al	; store it
 42086                                  	;mov	byte [cs:cmmt],1 ; 1 char. so far.
 42087 00003BE2 A2[5203]                	mov	[cmmt1],al	; store it
 42088 00003BE5 C606[5103]01            	mov	byte [cmmt],1	; 1 char. so far.
 42089 00003BEA E8A600                  	call	get2
 42090 00003BED 3C20                    	cmp	al,' ' ; 20h
 42091 00003BEF 7413                    	je	short get_cmt_end
 42092 00003BF1 3C09                    	cmp	al,tab ; 9
 42093 00003BF3 740F                    	je	short get_cmt_end
 42094 00003BF5 3C0D                    	cmp	al,cr  ; 0Dh
 42095 00003BF7 740B                    	je	short get_cmt_end
 42096 00003BF9 3C0A                    	cmp	al,lf  ; 0Ah
 42097 00003BFB 740E                    	je	short end_commd_line_brdg
 42098                                  
 42099                                  	;mov	[cs:cmmt2],al
 42100                                  	;inc	byte [cs:cmmt]
 42101                                  	; 03/01/2023
 42102 00003BFD A2[5303]                	mov	[cmmt2],al
 42103 00003C00 FE06[5103]              	inc	byte [cmmt]
 42104                                  
 42105                                  get_cmt_end:
 42106 00003C04 E88C00                  	call	get2
 42107 00003C07 3C0A                    	cmp	al,lf
 42108 00003C09 75F9                    	jne	short get_cmt_end	; skip it.
 42109                                  end_commd_line_brdg: 
 42110 00003C0B E997FE                  	jmp	end_commd_line		; else jmp to end_commd_line
 42111                                  
 42112                                  org_put_zero:				; make the filename in front of
 42113 00003C0E 26C60500                	mov	byte [es:di],0		;  the comment string to be an asciiz.
 42114 00003C12 47                      	inc	di
 42115 00003C13 E98FFE                  	jmp	end_commd_line		;  (maybe null if device=/*)
 42116                                  
 42117                                  end_file_slash: 			; al = "/" option char.
 42118 00003C16 26C60500                	mov	byte [es:di],0		; make a filename an asciiz
 42119 00003C1A 47                      	inc	di			; and
 42120 00003C1B AA                      	stosb				; store "/" after that.
 42121 00003C1C EB1A                    	jmp	short org5		; continue with the rest of the line
 42122                                  
 42123                                  end_copy_file:
 42124 00003C1E 26C645FF00              	mov	byte [es:di-1],0	; make it an asciiz and handle the next char.
 42125 00003C23 3C0A                    	cmp	al,lf
 42126 00003C25 74E4                    	je	short end_commd_line_brdg
 42127 00003C27 EB0F                    	jmp	short org5
 42128                                  
 42129                                  org4:					; org4 skips all delimiters after the command name except for '/'
 42130 00003C29 E88100                  	call	skip_comment
 42131 00003C2C 74DD                    	jz	short end_commd_line_brdg
 42132                                  
 42133 00003C2E E86200                  	call	get2
 42134 00003C31 E81C0A                  	call	org_delim		; skip delimiters except '/' (mrw 4/88)
 42135 00003C34 74F3                    	jz	short org4
 42136 00003C36 EB08                    	jmp	short org51
 42137                                  
 42138                                  org5:					; rest of the line
 42139 00003C38 E87200                  	call	skip_comment		; comment?
 42140 00003C3B 74CE                    	jz	short end_commd_line_brdg
 42141 00003C3D E85300                  	call	get2			; not a comment.
 42142                                  
 42143                                  org51:
 42144 00003C40 AA                      	stosb				; copy the character
 42145 00003C41 3C22                    	cmp	al,'"' 	; 22h		; a quote ?
 42146 00003C43 743A                    	je	short at_quote
 42147 00003C45 3C20                    	cmp	al,' '  ; 20h
 42148 00003C47 77EF                    	ja	short org5
 42149                                  
 42150                                  	; 09/09/2023
 42151                                  	; (Note: PCDOS 7.1 IBMBIO.COM does not contain M051 modification)
 42152                                  
 42153                                  					; M051 - Start
 42154                                  	; 03/01/2023
 42155                                  	; ds = cs
 42156 00003C49 803E[5403]55                    cmp	byte [cmd_indicator],CONFIG_DEVICEHIGH
 42157                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICEHIGH ; Q: is this devicehigh
 42158 00003C4E 7514                    	jne	short not_dh		; N: 
 42159 00003C50 3C0A                    	cmp	al,lf			; Q: is this line feed
 42160 00003C52 7416                    	je	short org_dhlf		; Y: stuff a blank before the lf
 42161 00003C54 3C0D                    	cmp	al,cr			; Q: is this a cr
 42162 00003C56 75E0                    	jne	short org5		; N: 
 42163 00003C58 26C645FF20              	mov	byte [es:di-1],' '	; overwrite cr with blank
 42164 00003C5D AA                      	stosb				; put cr after blank
 42165 00003C5E FE06[E038]              	inc	byte [insert_blank]
 42166                                  	;inc	byte [cs:insert_blank]	; indicate that blank has been 
 42167                                  					; inserted
 42168 00003C62 EBD4                    	jmp	short org5
 42169                                  not_dh:					; M051 - End
 42170                                  
 42171 00003C64 3C0A                    	cmp	al,lf			; line feed?
 42172 00003C66 740F                    	je	short org1_brdg		; handles the next command line.
 42173 00003C68 EBCE                    	jmp	short org5		; handles next char in this line.
 42174                                  
 42175                                  org_dhlf:				; M051 - Start
 42176                                  	; 03/01/2023
 42177                                  	; ds = cs
 42178 00003C6A 803E[E038]01            	cmp	byte [insert_blank],1
 42179                                  	;cmp	byte [cs:insert_blank],1 ; Q:has a blank already been inserted
 42180 00003C6F 7406                    	je	short org1_brdg		; Y:
 42181 00003C71 26C645FF20              	mov	byte [es:di-1],' '	; overwrite lf with blank
 42182 00003C76 AA                      	stosb				; put lf after blank
 42183                                  					; M051 - End
 42184                                  org1_brdg:
 42185 00003C77 C606[E038]00            	mov	byte [insert_blank],0 
 42186                                  	;mov	byte [cs:insert_blank],0 ; M051: clear blank indicator for 
 42187                                  					; M051: devicehigh
 42188 00003C7C E93CFE                  	jmp	org1
 42189                                  
 42190                                  at_quote:
 42191 00003C7F 803E[5003]00            	cmp	byte [com_level],0
 42192                                  	;cmp	byte [cs:com_level],0
 42193 00003C84 7407                    	je	short up_level
 42194                                  	;mov	byte [cs:com_level],0	; reset it.
 42195 00003C86 C606[5003]00            	mov	byte [com_level],0
 42196 00003C8B EBAB                    	jmp	short org5
 42197                                  
 42198                                  up_level:
 42199                                  	;inc	byte [cs:com_level]	; set it.
 42200 00003C8D FE06[5003]              	inc	byte [com_level]
 42201 00003C91 EBA5                    	jmp	short org5
 42202                                  
 42203                                  ;----------------------------------------------------------------------------
 42204                                  ;
 42205                                  ; procedure : get2
 42206                                  ;
 42207                                  ;----------------------------------------------------------------------------
 42208                                  
 42209                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 42210                                  	; (SYSINIT:33FAh)
 42211                                  
 42212                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 42213                                  	; (SYSINIT:4270h)
 42214                                  get2:
 42215 00003C93 E304                    	jcxz	noget
 42216                                  	;
 42217                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 42218                                  	;;lods	byte ptr es:[si]
 42219                                  	; 12/12/2022
 42220 00003C95 26                      	es	
 42221 00003C96 AC                      	lodsb
 42222                                  	;mov	al, [es:si]
 42223                                  	;inc	si
 42224                                  	;
 42225 00003C97 49                      	dec	cx
 42226 00003C98 C3                      	retn
 42227                                  noget:
 42228 00003C99 59                      	pop	cx
 42229                                  	; 03/01/2023
 42230                                  	; ds = cs
 42231                                  	;mov	[cs:count],di ; 13/05/2019
 42232                                  	;mov	[cs:org_count],di
 42233 00003C9A 893E[5603]              	mov	[count],di
 42234 00003C9E 893E[5803]              	mov	[org_count],di
 42235 00003CA2 31F6                    	xor	si,si
 42236                                  	;mov	[cs:chrptr],si
 42237 00003CA4 8936[5A03]              	mov	[chrptr],si
 42238                                  
 42239                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 42240                                  
 42241                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 42242                                  
 42243                                  ;ifndef MULTI_CONFIG
 42244                                  ;	retn
 42245                                  ;else
 42246                                  
 42247                                  ;   This was the rather kludgy way out of procedure "organize", but instead
 42248                                  ;   of returning to doconf, we now want to check config.sys BEGIN/END blocks
 42249                                  ;   and the new boot menu stuff...
 42250                                  
 42251 00003CA8 89F9                    	mov     cx,di
 42252 00003CAA E9E300                  	jmp     menu_check
 42253                                  
 42254                                  ;endif
 42255                                  	; 02/11/2022
 42256                                  	; 03/01/2023 - Retro DOS v4.2
 42257                                  	;retn
 42258                                  
 42259                                  ;----------------------------------------------------------------------------
 42260                                  ;
 42261                                  ; procedure : skip_comment
 42262                                  ;
 42263                                  ;skip the commented string until lf, if current es:si-> a comment string.
 42264                                  ;in) es:si-> string
 42265                                  ;	 cx -> length.
 42266                                  ;out) zero flag not set if not found a comment string.
 42267                                  ;	  zero flag set if found a comment string and skipped it. al will contain
 42268                                  ;	  the line feed character at this moment when return.
 42269                                  ;	  ax register destroyed.
 42270                                  ;	  if found, si, cx register adjusted accordingly.
 42271                                  ;
 42272                                  ;----------------------------------------------------------------------------
 42273                                  
 42274                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 42275                                  	; (SYSINIT:428Dh)
 42276                                  
 42277                                  skip_comment:
 42278 00003CAD E3EA                    	jcxz	noget		; get out of the organize routine.
 42279                                  
 42280                                  	; 03/01/2023
 42281                                  	; ds = cs	
 42282                                  
 42283 00003CAF 803E[5003]00            	cmp	byte [com_level],0
 42284                                  	;cmp	byte [cs:com_level],0 ; only check it if parameter level is 0.
 42285 00003CB4 752C                    	jne	short no_commt	 ; (not inside quotations)
 42286                                  
 42287 00003CB6 803E[5103]01            	cmp	byte [cmmt],1
 42288                                  	;cmp	byte [cs:cmmt],1
 42289 00003CBB 7225                    	jb	short no_commt
 42290                                  
 42291 00003CBD 268A04                  	mov	al,[es:si]
 42292                                  	
 42293 00003CC0 3806[5203]              	cmp	[cmmt1],al
 42294                                  	;cmp	[cs:cmmt1],al
 42295 00003CC4 751C                    	jne	short no_commt
 42296                                  
 42297 00003CC6 803E[5103]02            	cmp	byte [cmmt],2
 42298                                  	;cmp	byte [cs:cmmt],2
 42299 00003CCB 750A                    	jne	short skip_cmmt
 42300                                  
 42301 00003CCD 268A4401                	mov	al,[es:si+1]
 42302                                  	
 42303 00003CD1 3806[5303]              	cmp	[cmmt2],al
 42304                                  	;cmp	[cs:cmmt2],al
 42305 00003CD5 750B                    	jne	short no_commt
 42306                                  skip_cmmt:
 42307 00003CD7 E3C0                    	jcxz	noget		; get out of organize routine.
 42308 00003CD9 268A04                  	mov	al,[es:si]
 42309 00003CDC 46                      	inc	si
 42310 00003CDD 49                      	dec	cx
 42311 00003CDE 3C0A                    	cmp	al,lf		; line feed?
 42312 00003CE0 75F5                    	jne	short skip_cmmt
 42313                                  no_commt:
 42314 00003CE2 C3                      	retn
 42315                                  
 42316                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 42317                                  ; (SYSINIT:42C8h)
 42318                                  
 42319                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 42320                                  ;%if 0
 42321                                  
 42322                                  ;ifdef	MULTI_CONFIG
 42323                                  
 42324                                  ;----------------------------------------------------------------------------
 42325                                  ;
 42326                                  ;   kbd_read: wait for keystroke
 42327                                  ;
 42328                                  ;   INPUT
 42329                                  ;       DS == CS == sysinitseg
 42330                                  ;
 42331                                  ;   OUTPUT
 42332                                  ;       Carry SET to clean boot, CLEAR otherwise
 42333                                  ;
 42334                                  ;   OTHER REGS USED
 42335                                  ;       All
 42336                                  ;
 42337                                  ;   HISTORY
 42338                                  ;       Created 16-Nov-1992 by JeffPar
 42339                                  ;
 42340                                  ;----------------------------------------------------------------------------
 42341                                  
 42342                                  kbd_read:
 42343 00003CE3 F606[3F4B]02                    test    byte [bDisableUI],2
 42344 00003CE8 7520                            jnz     short kbd_nodelay
 42345                                  
 42346 00003CEA 1E                              push    ds              ; the bios timer tick count is incremented
 42347 00003CEB 29C0                            sub     ax,ax           ; 18.2 times per second;
 42348 00003CED 8ED8                            mov     ds,ax           ; watch the timer tick count for 37 transitions
 42349                                  	;mov	dx,[046Ch]	; get initial value
 42350                                  kbd_loop:
 42351 00003CEF B401                            mov     ah,1            ;
 42352 00003CF1 CD16                            int     16h             ; peek the keyboard
 42353 00003CF3 7514                            jnz	short kbd_loopdone ; something's there, get out
 42354 00003CF5 B402                            mov     ah,2            ; peek the shift states
 42355 00003CF7 CD16                            int     16h             ;
 42356 00003CF9 A803                            test    al,03h          ; either right or left shift key bits set?
 42357 00003CFB 750C                            jnz	short kbd_loopdone ; yes
 42358 00003CFD A16C04                          mov     ax,[046Ch]	;
 42359                                  	;sub	ax,dx           ; get difference
 42360                                  	; 15/04/2019 - Retro DOS v4.0
 42361 00003D00 2E2B06[8C03]            	sub	ax,[cs:_timer_lw_] ; MSDOS 6.21 IO.SYS - SYSINIT:42E5h        
 42362                                  
 42363 00003D05 3C25                    	cmp     al,37           ; reached limit?  ; (2 seconds)
 42364 00003D07 72E6                            jb	short kbd_loop	; not yet
 42365                                  kbd_loopdone:
 42366 00003D09 1F                              pop     ds              ; delay complete!
 42367                                  kbd_nodelay:
 42368 00003D0A 29DB                            sub     bx,bx           ; assume clean boot
 42369 00003D0C B402                            mov     ah,2            ; peek the shift states
 42370 00003D0E CD16                            int     16h             ;
 42371 00003D10 A803                            test    al,03h          ; either right or left shift key bits set?
 42372 00003D12 7407                            jz      short kbd_notshift ; no
 42373 00003D14 43                              inc     bx              ; yes
 42374 00003D15 43                              inc     bx
 42375                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4301h
 42376 00003D16 800E[434B]04            	or	byte [bQueryOpt],4
 42377                                  kbd_notshift:                   ;
 42378 00003D1B B401                            mov     ah,1            ; peek the keyboard
 42379 00003D1D CD16                            int     16h             ;
 42380 00003D1F 743E                            jz	short kbd_test	; no key present
 42381 00003D21 08C0                            or      al,al           ; is it a function key?
 42382 00003D23 753A                            jnz	short kbd_test	; no
 42383                                  
 42384                                  	; MSDOS 6.21 IO.SYS - SYSINIT:430Bh
 42385 00003D25 80FC62                          cmp     ah,62h          ; CTRL F5
 42386 00003D28 7405                            je	short kbd_cfg_bypass
 42387                                  	
 42388 00003D2A 80FC3F                          cmp     ah,3Fh          ; F5 function key?
 42389 00003D2D 750D                            jne	short kbd_notf5	; no
 42390                                  kbd_cfg_bypass:
 42391 00003D2F BA[7A50]                        mov     dx,_$CleanMsg
 42392 00003D32 E8DD0B                          call    print
 42393                                  	; MSDOS 6.21 IO.SYS - SYSINIT:431Bh
 42394 00003D35 800E[434B]04            	or	byte [bQueryOpt],4 
 42395 00003D3A EB16                            jmp     short kbd_eat   ; yes, clean boot selected
 42396                                  kbd_notf5:
 42397                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4322h
 42398 00003D3C 80FC65                          cmp     ah,65h          ; CTRL F8
 42399 00003D3F 7405                            je	short kbd_cfg_confirm
 42400                                  
 42401 00003D41 80FC42                          cmp     ah,42h          ; F8 function key?
 42402 00003D44 7523                            jne	short kbd_exit	; no
 42403                                  kbd_cfg_confirm:
 42404 00003D46 BA[B850]                        mov     dx,_$InterMsg
 42405 00003D49 E8C60B                          call    print           ;
 42406 00003D4C B301                            mov     bl,1            ; yes, interactive-boot option enabled
 42407 00003D4E 881E[434B]                      mov     [bQueryOpt],bl  ; change default setting
 42408                                  kbd_eat:                        ;
 42409 00003D52 B400                            mov     ah,0            ;
 42410 00003D54 CD16                            int     16h             ; eat the key we assumed was a signal
 42411 00003D56 C606[494B]FF                    mov	byte [secElapsed],-1
 42412 00003D5B 09DB                            or      bx,bx           ;
 42413 00003D5D 7405                            jz	short kbd_clean	;
 42414                                  kbd_test:                       ;
 42415 00003D5F 80FB02                          cmp     bl,2            ;
 42416 00003D62 7205                            jb	short kbd_exit	;
 42417                                  kbd_clean:                      ;
 42418 00003D64 E86E08                          call    disable_autoexec; yes, tell COMMAND to skip autoexec.bat
 42419 00003D67 F9                              stc                     ; set carry to indicate abort
 42420 00003D68 C3                              retn			;
 42421                                  kbd_exit:                       ;
 42422 00003D69 F8                              clc                     ; clear carry to indicate success
 42423 00003D6A C3                              retn			;
 42424                                  
 42425                                  ;----------------------------------------------------------------------------
 42426                                  ;
 42427                                  ;   set_numlock: set numlock LED
 42428                                  ;
 42429                                  ;   INPUT
 42430                                  ;       ES:SI -> numlock setting (ie, "ON" or "OFF")
 42431                                  ;
 42432                                  ;   OUTPUT
 42433                                  ;       None
 42434                                  ;
 42435                                  ;   OTHER REGS USED
 42436                                  ;       None
 42437                                  ;
 42438                                  ;   HISTORY
 42439                                  ;       Created 16-Nov-1992 by JeffPar
 42440                                  ;
 42441                                  ;----------------------------------------------------------------------------
 42442                                  
 42443                                  	; 04/01/2023 - Retro DOS v4.2
 42444                                  
 42445                                  set_numlock:
 42446                                          ; 04/01/2023
 42447                                  	;push	ax
 42448 00003D6B 1E                              push    ds
 42449 00003D6C 29C0                            sub     ax,ax
 42450 00003D6E 8ED8                            mov     ds,ax
 42451 00003D70 268B04                          mov     ax,[es:si]      ; get 1st 2 bytes of value (ON or OF)
 42452 00003D73 2E3B06[4250]                    cmp     ax,[cs:OnOff+2]	; should we turn it off?
 42453 00003D78 7507                            jne	short not_off	; no
 42454 00003D7A 80261704DF                      and     byte [0417h],~20h ; 0DFh
 42455 00003D7F EB0D                            jmp     short set_done
 42456                                  not_off:
 42457 00003D81 2E3B06[4050]                    cmp     ax,[cs:OnOff]	; should we turn it on?
 42458 00003D86 F9                              stc
 42459 00003D87 7505                            jne	short set_done	; no
 42460 00003D89 800E170420                      or      byte [0417h],20h
 42461                                  set_done:
 42462 00003D8E 1F                              pop     ds
 42463                                  	; 04/01/2023
 42464                                  	;pop	ax
 42465 00003D8F C3                              retn
 42466                                  
 42467                                  ; 16/04/2019 - Retro DOS v4.0
 42468                                  
 42469                                  ;----------------------------------------------------------------------------
 42470                                  ;
 42471                                  ;   menu_check:  check for presence of menu (and other) configuration blocks
 42472                                  ;
 42473                                  ;   INPUT
 42474                                  ;       CX == "organized" config.sys memory image length
 42475                                  ;    ES:SI -> "organized" config.sys memory image
 42476                                  ;       DS == CS == sysinitseg
 42477                                  ;
 42478                                  ;   OUTPUT
 42479                                  ;       Same as above; the idea is that menu_check simply transforms
 42480                                  ;       a block-structured config.sys image into a conventional image,
 42481                                  ;       based on the user's block selection and any other boot-time options
 42482                                  ;       the user may have employed...
 42483                                  ;
 42484                                  ;   OTHER REGS USED
 42485                                  ;       All
 42486                                  ;
 42487                                  ;   NOTES
 42488                                  ;       [count] and [org_count] are set to the new config.sys image length
 42489                                  ;
 42490                                  ;   HISTORY
 42491                                  ;       Created 16-Mar-1992 by JeffPar
 42492                                  ;
 42493                                  ;----------------------------------------------------------------------------
 42494                                  
 42495                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 42496                                  	; (SYSINIT:4378h)
 42497                                  
 42498                                  menu_check:
 42499                                  
 42500                                  ;   Search for SWITCHES, determine if /N or /F are present; if so, then
 42501                                  ;   disable clean/interactive boot options
 42502                                  
 42503 00003D90 51                              push    cx              ;
 42504 00003D91 56                              push    si              ;
 42505 00003D92 29DB                            sub     bx,bx           ; remains ZERO until first block
 42506                                  swchk_loop:                     ;
 42507 00003D94 E83507                          call    get_char        ; get first char of current line
 42508 00003D97 724C                            jc	short swchk_end	; hit eof
 42509 00003D99 3C5B                            cmp     al,CONFIG_BEGIN ; '['
 42510 00003D9B 7503                            jne	short swchk_next1 ;
 42511 00003D9D 43                              inc     bx              ; remember that we've seen a block
 42512 00003D9E EB40                            jmp     short swchk_nextline
 42513                                  swchk_next1:                    ;
 42514 00003DA0 3C4E                            cmp     al,CONFIG_NUMLOCK
 42515 00003DA2 750E                            jne	short swchk_next2 ;
 42516 00003DA4 09DB                            or      bx,bx           ; only do NUMLOCK commands that exist
 42517 00003DA6 7538                            jnz	short swchk_nextline ; before the first block
 42518 00003DA8 E8C0FF                          call    set_numlock     ; REM it out so we don't act on it later, too
 42519 00003DAB 26C644FF30                      mov     byte [es:si-1],CONFIG_REM
 42520 00003DB0 EB2E                            jmp     short swchk_nextline
 42521                                  swchk_next2:                    ;
 42522 00003DB2 3C31                            cmp     al,CONFIG_SWITCHES
 42523 00003DB4 752A                            jne	short swchk_nextline ; this line ain't it
 42524                                  swchk_scan:                     ;
 42525 00003DB6 E81307                          call    get_char        ; look for /N or /F
 42526                                  swchk_scan1:                    ;
 42527 00003DB9 3C0A                            cmp     al,LF           ; end of line?
 42528 00003DBB 7423                            je	short swchk_nextline ; yes
 42529 00003DBD 3C2F                            cmp     al,'/'          ; switch-char?
 42530 00003DBF 75F5                            jne	short swchk_scan ; no
 42531 00003DC1 E80807                          call    get_char        ;
 42532 00003DC4 24DF                            and     al,~20h ; 0DFh	; convert to upper case
 42533 00003DC6 3A06[F522]                      cmp     al,[swit_n+1]	; 'N'
 42534 00003DCA 7507                            jne	short swchk_scan2 ; no
 42535 00003DCC 800E[3F4B]01                    or      byte [bDisableUI],1
 42536 00003DD1 EBE3                            jmp	short swchk_scan ; continue looking for switches of interest
 42537                                  swchk_scan2:                    ;
 42538 00003DD3 3A06[0123]                      cmp     al,[swit_f+1]	; 'F'
 42539 00003DD7 75E0                            jne	short swchk_scan1 ; no
 42540 00003DD9 800E[3F4B]02                    or      byte [bDisableUI],2
 42541 00003DDE EBD6                            jmp     short swchk_scan ; continue looking for switches of interest
 42542                                  swchk_nextline:                 ;
 42543 00003DE0 E8C306                          call    skip_opt_line   ;
 42544 00003DE3 EBAF                            jmp     short swchk_loop ;
 42545                                  swchk_end:                      ;
 42546 00003DE5 5E                              pop     si              ;
 42547 00003DE6 59                              pop     cx              ;
 42548                                  
 42549                                  ;   Do the keyboard tests for clean/interactive boot now, but only if
 42550                                  ;   the DisableUI flag is still clear
 42551                                  
 42552 00003DE7 F606[3F4B]01                    test    byte [bDisableUI],1
 42553 00003DEC 7508                            jnz	short menu_search
 42554                                  ;
 42555                                  ;   Wait for 2 seconds first, UNLESS the /F bit was set in bDisableUI, or
 42556                                  ;   there is anything at all in the keyboard buffer
 42557                                  ;
 42558 00003DEE E8F2FE                          call    kbd_read
 42559 00003DF1 7303                            jnc	short menu_search
 42560 00003DF3 E9EE01                          jmp	menu_abort
 42561                                  
 42562                                  ;   Search for MENU block; it is allowed to be anywhere in config.sys
 42563                                  
 42564                                  menu_search:
 42565 00003DF6 29DB                            sub     bx,bx           ; if no MENU, default to zero for no_selection
 42566 00003DF8 BF[844B]                        mov     di,szMenu	;
 42567 00003DFB E80304                          call    find_block      ; find the MENU block
 42568 00003DFE 7337                            jnc	short menu_found ;
 42569 00003E00 C606[7C4B]00                    mov     byte [szBoot],0
 42570 00003E05 E90C02                          jmp	no_selection ; not found
 42571                                  
 42572                                  ;   Process the requested menu color(s)
 42573                                  
 42574                                  menu_color:
 42575 00003E08 51                      	push	cx              ;
 42576 00003E09 52                      	push	dx              ;
 42577                                  	;;mov	dx,0007h        ; default color setting
 42578                                  	; 10/09/2023
 42579                                  	;mov	dl,7 ; !*!
 42580 00003E0A E89E06                  	call	get_number	; get first number
 42581 00003E0D 80E30F                  	and	bl,0Fh  ; !**!	; first # is foreground color (for low nibble)
 42582 00003E10 88DD                    	mov	ch,bl           ; save it in CH
 42583                                  	; 01/08/2023 - Retro DOS v4.2 IO.SYS (optimization) by Erdogan Tan 
 42584                                  	; (high nibble of dl is 0)
 42585                                  	;and	dl,0F0h	; !*!	; (low nibble of dl would be zero)
 42586                                  	;or	dl,bl		; (low nibble of dl is 7) ! 14/08/2023
 42587 00003E12 88DA                    	mov	dl,bl	; 14/08/2023
 42588 00003E14 E83108                  	call	delim           ; did we hit a delimiter
 42589 00003E17 750E                    	jne	short check_color ; no, all done
 42590 00003E19 E88F06                  	call	get_number	; get next number
 42591 00003E1C 80E30F                  	and	bl,0Fh		; second # is background color (for high nibble)
 42592 00003E1F 88DE                    	mov	dh,bl           ; save it in DH
 42593                                  	; 10/09/2023
 42594                                  	;and	dl,0Fh	; !**!	;
 42595 00003E21 B104                    	mov	cl,4            ;
 42596 00003E23 D2E3                    	shl	bl,cl           ;
 42597 00003E25 08DA                    	or	dl,bl           ;
 42598                                  check_color:
 42599 00003E27 38F5                    	cmp	ch,dh           ; are foreground/background the same?
 42600 00003E29 7503                    	jne	short set_color	; no
 42601 00003E2B 80F208                  	xor	dl,08h          ; yes, so modify the fgnd intensity
 42602                                  set_color:
 42603 00003E2E 8816[3A4B]              	mov	[bMenuColor],dl ;
 42604 00003E32 5A                      	pop	dx              ;
 42605 00003E33 59                      	pop	cx              ;
 42606 00003E34 E9A900                  	jmp	menu_nextitem
 42607                                  
 42608                                  ;   Back to our regularly scheduled program (the COLOR and other goop
 42609                                  ;   above is there simply to alleviate short jump problems)
 42610                                  
 42611                                  menu_found:
 42612 00003E37 C606[444B]01                    mov     byte [bDefBlock],1
 42613                                          ;mov	word [offDefBlock],0
 42614 00003E3C C606[484B]FF                    mov     byte [secTimeOut],-1
 42615 00003E41 8026[434B]FD                    and     byte [bQueryOpt],~2 ; 0FDh
 42616                                  	; 10/09/2023
 42617 00003E46 29D2                    	sub	dx,dx
 42618 00003E48 8916[464B]              	mov	[offDefBlock],dx ; 0
 42619                                  
 42620 00003E4C E85706                          call    skip_opt_line   ; skip to next line
 42621                                  	; 10/09/2023
 42622                                  	;sub	dx,dx		; initialize total block count (0 => none yet)
 42623                                  
 42624                                  ;   Process the menu block now
 42625                                  
 42626                                  menu_process:
 42627 00003E4F E87A06                          call    get_char        ; get first char of current line
 42628 00003E52 722E                            jc	short to_menu_getdefault ; could happen if menu block at end (rare)
 42629 00003E54 247F                            and     al,~CONFIG_OPTION_QUERY ; 7Fh
 42630 00003E56 3C5B                            cmp     al,CONFIG_BEGIN ; BEGIN implies END
 42631 00003E58 7428                            je	short to_menu_getdefault
 42632 00003E5A 3C4F                            cmp     al,CONFIG_SUBMENU
 42633 00003E5C 744D                            je	short menu_item	; go process sub-menu
 42634 00003E5E 3C45                            cmp     al,CONFIG_MENUITEM
 42635 00003E60 7449                            je	short menu_item	; go process menu item
 42636 00003E62 3C41                            cmp     al,CONFIG_MENUDEFAULT
 42637 00003E64 741E                            je	short menu_default ; go process menu default
 42638 00003E66 3C52                            cmp     al,CONFIG_MENUCOLOR
 42639 00003E68 749E                            je	short menu_color ; go process menu color
 42640 00003E6A 3C4E                            cmp     al,CONFIG_NUMLOCK
 42641 00003E6C 740F                            je	short menu_numlock ;
 42642 00003E6E 3C30                            cmp     al,CONFIG_REM   ; allow remarks in menu block
 42643 00003E70 746E                            je	short menu_nextitem ;
 42644 00003E72 E8C307                          call    any_delim       ; allow blank lines and such
 42645 00003E75 7469                            je	short menu_nextitem ;
 42646 00003E77 F9                              stc                     ;
 42647 00003E78 E82607                          call    print_error     ; non-MENU command!
 42648 00003E7B EB63                            jmp     short menu_nextitem
 42649                                  menu_numlock:
 42650 00003E7D E8EBFE                          call    set_numlock
 42651 00003E80 EB5E                            jmp     short menu_nextitem
 42652                                  to_menu_getdefault:
 42653 00003E82 EB62                            jmp     short menu_getdefault
 42654                                  
 42655                                  ;   Save the offset of the default block name, we'll need it later
 42656                                  
 42657                                  menu_default:
 42658 00003E84 8936[464B]                      mov     [offDefBlock],si; save address of default block name
 42659 00003E88 803E[494B]00                    cmp     byte [secElapsed],0
 42660 00003E8D 751A                            jne	short timeout_skip ; secElapsed is only zero for the FIRST menu,
 42661 00003E8F E8EA05                          call    skip_token      ; and for subsequent menus IF nothing was typed;
 42662 00003E92 724C                            jc	short menu_nextitem ; secElapsed becomes -1 forever as soon as
 42663 00003E94 E8FB05                          call    skip_delim      ; something is typed
 42664 00003E97 7247                            jc	short menu_nextitem ;
 42665 00003E99 89DE                            mov     si,bx           ;
 42666 00003E9B E80D06                          call    get_number      ; get number (of seconds for timeout)
 42667 00003E9E 80FB5A                          cmp     bl,90           ; limit it to a reasonable number
 42668                                  	;jb	short timeout_ok ; (besides, 99 is the largest # my simple
 42669 00003EA1 7602                            jna	short timeout_ok ; 01/08/2023
 42670 00003EA3 B35A                    	mov     bl,90           ;  display function can handle)
 42671                                  timeout_ok:                    ;
 42672 00003EA5 881E[484B]                      mov     [secTimeOut],bl ;
 42673                                  timeout_skip:
 42674 00003EA9 EB35                            jmp     short menu_nextitem
 42675                                  
 42676                                  ;   Verify that this is a valid menu item by searching for the named block
 42677                                  
 42678                                  menu_item:
 42679                                  	;cmp	dl,9	; 04/01/2023
 42680 00003EAB 80FA09                          cmp     dl,MAX_MULTI_CONFIG ; have we reached the max # of items yet?
 42681 00003EAE 7330                            jae	short menu_nextitem ;
 42682 00003EB0 89F7                            mov     di,si           ; DS:DI -> block name to search for
 42683 00003EB2 E83303                          call    srch_block      ;
 42684 00003EB5 7406                            je	short menu_itemfound ;
 42685 00003EB7 F9                              stc                     ;
 42686 00003EB8 E8E606                          call    print_error     ; print error and pause
 42687 00003EBB EB23                            jmp     short menu_nextitem ; if not found, ignore this menu item
 42688                                  
 42689                                  ;   srch_block, having succeeded, returns DI -> past the token that it
 42690                                  ;   just matched, which in this case should be a descriptive string; ES:SI
 42691                                  ;   and CX are unmodified
 42692                                  
 42693                                  menu_itemfound:
 42694 00003EBD 42                              inc     dx              ; otherwise, increment total block count
 42695 00003EBE 89D3                            mov     bx,dx           ; and use it to index the arrays of offsets
 42696 00003EC0 8887[4A4B]                      mov	[abBlockType+bx],al
 42697 00003EC4 01DB                            add     bx,bx           ; of recorded block names and descriptions
 42698                                  
 42699                                  ;   There should be a description immediately following the block name on
 42700                                  ;   MENUITEM line; failing that, we'll just use the block name as the
 42701                                  ;   description...
 42702                                  
 42703 00003EC6 89B7[544B]                      mov     [aoffBlockName+bx],si
 42704 00003ECA 89B7[684B]                      mov     [aoffBlockDesc+bx],si
 42705 00003ECE 89DF                            mov     di,bx           ; skip_delim modifies BX, so stash it in DI
 42706 00003ED0 E8A905                          call    skip_token      ;
 42707 00003ED3 720B                            jc	short menu_nextitem ; hit eol/eof
 42708 00003ED5 E8BA05                          call    skip_delim      ;
 42709 00003ED8 7206                            jc	short menu_nextitem ; hit eol/eof
 42710 00003EDA 87DF                            xchg    bx,di           ;
 42711 00003EDC 89BF[684B]                      mov     [aoffBlockDesc+bx],di
 42712                                  
 42713                                  menu_nextitem:
 42714 00003EE0 E8C305                          call    skip_opt_line   ;
 42715 00003EE3 E969FF                          jmp     menu_process    ; go back for more lines
 42716                                  
 42717                                  ;   Display menu items now, after determining which one is default
 42718                                  
 42719                                  menu_getdefault:
 42720 00003EE6 08D2                            or      dl,dl           ; where there any valid blocks at all?
 42721 00003EE8 7505                            jnz	short menu_valid ; yes
 42722 00003EEA 29DB                            sub     bx,bx           ; no, so force autoselect of 0
 42723 00003EEC E9ED00                          jmp     menu_autoselect ; (meaning: process common blocks only)
 42724                                  menu_valid:
 42725 00003EEF 29DB                            sub     bx,bx           ;
 42726 00003EF1 8816[454B]                      mov     [bMaxBlock],dl  ; first, record how many blocks we found
 42727 00003EF5 8B3E[464B]                      mov     di,[offDefBlock];
 42728 00003EF9 09FF                            or      di,di           ; does a default block exist?
 42729 00003EFB 741C                            jz	short menu_nodefault ; no
 42730 00003EFD 43                              inc     bx              ; yes, walk name table, looking for default
 42731                                  menu_chkdefault:
 42732 00003EFE 53                              push    bx              ;
 42733 00003EFF 01DB                            add     bx,bx           ;
 42734 00003F01 8BB7[544B]                      mov     si,[aoffBlockName+bx]
 42735 00003F05 B98000                          mov     cx,128          ; arbitrary maximum length of a name
 42736 00003F08 1E                              push    ds              ;
 42737 00003F09 06                              push    es              ;
 42738 00003F0A 1F                              pop     ds              ;
 42739 00003F0B E81A03                          call    comp_names      ; is this block the same as the default?
 42740 00003F0E 1F                              pop     ds              ;
 42741 00003F0F 5B                              pop     bx              ;
 42742 00003F10 7409                            je	short menu_setdefault ; yes
 42743 00003F12 43                              inc     bx              ;
 42744 00003F13 3A1E[454B]                      cmp     bl,[bMaxBlock]  ; all done searching?
 42745 00003F17 76E5                            jbe	short menu_chkdefault ; not yet
 42746                                  menu_nodefault:
 42747 00003F19 B301                            mov     bl,1            ; if no default, force default to #1
 42748                                  menu_setdefault:
 42749 00003F1B 881E[444B]                      mov     [bDefBlock],bl  ; yes, this will be the initial current block
 42750                                  
 42751                                  ;   If the timeout was explicitly set to 0 (or technically, anything that
 42752                                  ;   failed to resolve to a number, like "NONE" or "EAT POTATOES"), then we're
 42753                                  ;   supposed to skip menu display and run with the specified default block;
 42754                                  ;   however, if the user hit Enter prior to boot, thereby requesting fully
 42755                                  ;   INTERACTIVE boot, then we shall display the menu block anyway (though still
 42756                                  ;   with no timeout)
 42757                                  
 42758 00003F1F 803E[484B]00                    cmp     byte [secTimeOut],0 ; is timeout zero? (ie, assume default)
 42759 00003F24 750A                            jne	short menu_display ; no
 42760 00003F26 F606[434B]01                    test    byte [bQueryOpt],1 ; yes, but was INTERACTIVE requested?
 42761 00003F2B 7503                            jnz	short menu_display ; yes, so *don't* assume default after all
 42762 00003F2D E9C700                          jmp     not_topmenu	;
 42763                                  
 42764                                  ;   Reset the mode, so that we know screen is clean and cursor is home
 42765                                  
 42766                                  menu_display:
 42767 00003F30 B40F                            mov     ah,0Fh          ; get current video mode
 42768 00003F32 CD10                            int     10h             ;
 42769 00003F34 B400                            mov     ah,00h          ; just re-select that mode
 42770 00003F36 CD10                            int     10h             ;
 42771 00003F38 06                              push    es              ;
 42772 00003F39 B84000                          mov     ax,40h          ; reach down into the ROM BIOS data area
 42773 00003F3C 8EC0                            mov     es,ax           ; and save the current (default) video page
 42774 00003F3E 26A14E00                        mov     ax,[es:004Eh]   ; start address and page #, in case the
 42775 00003F42 A3[414B]                        mov     [wCRTStart],ax  ; undocumented QUIET option was enabled
 42776 00003F45 26A06200                        mov     al,[es:0062h]   ;
 42777 00003F49 A2[404B]                        mov     [bCRTPage],al   ;
 42778 00003F4C A1[3B4B]                        mov     ax,[bMenuPage]	; select new page for menu
 42779 00003F4F CD10                            int     10h             ;
 42780 00003F51 B80006                          mov     ax,0600h        ; clear entire screen
 42781 00003F54 8A3E[3A4B]                      mov     bh,[bMenuColor] ; using this color
 42782 00003F58 29C9                            sub     cx,cx           ; upper left row/col
 42783                                          ;mov	dl,[es:CRT_Cols] 
 42784 00003F5A 268A164A00                      mov	dl,[es:4Ah]
 42785 00003F5F FECA                    	dec     dl              ;
 42786                                          ;mov	dh,[es:CRT_Rows];
 42787 00003F61 268A368400                      mov	dh,[es:84h]
 42788 00003F66 08F6                    	or      dh,dh           ; # of rows valid?
 42789 00003F68 7504                            jnz	short menu_clear ; hopefully
 42790 00003F6A 8A36[3E4B]                      mov     dh,[bLastRow]   ; no, use a default
 42791                                  menu_clear:
 42792 00003F6E CD10                            int     10h             ; clear the screen using the req. attribute
 42793 00003F70 07                              pop     es              ;
 42794 00003F71 8836[3E4B]                      mov     [bLastRow],dh   ; save DH
 42795 00003F75 BA[F550]                        mov     dx,_$MenuHeader
 42796 00003F78 E89709                          call    print           ; cursor now on row 3 (numbered from 0)
 42797                                  
 42798 00003F7B F606[3F4B]01                    test    byte [bDisableUI],1
 42799 00003F80 751F                            jnz     short menu_nostatus
 42800 00003F82 8A3E[3B4B]                      mov     bh,[bMenuPage]  ;
 42801 00003F86 8A36[3E4B]                      mov     dh,[bLastRow]   ; restore DH
 42802 00003F8A B200                            mov     dl,0            ; print the status line on row DH, col 0,
 42803 00003F8C B402                            mov     ah,02h          ; now that we can trash the cursor position
 42804 00003F8E CD10                            int     10h             ;
 42805 00003F90 BA[4151]                        mov     dx,_$StatusLine
 42806 00003F93 E87C09                          call    print           ;
 42807 00003F96 B403                            mov     ah,3            ; get cursor position
 42808 00003F98 CD10                            int     10h             ;
 42809 00003F9A 80EA02                          sub     dl,2            ;
 42810 00003F9D 8816[3D4B]                      mov     [bLastCol],dl   ; save column where status char will go
 42811                                  
 42812                                  menu_nostatus:
 42813 00003FA1 BB0100                          mov     bx,1            ; now prepare to display all the menu items
 42814                                  menu_disploop:
 42815 00003FA4 E8B002                          call    print_item	; print item #BL
 42816 00003FA7 43                              inc     bx              ; why "inc bx"? because it's a 1-byte opcode
 42817 00003FA8 3A1E[454B]                      cmp     bl,[bMaxBlock]  ; all done?
 42818 00003FAC 76F6                            jbe	short menu_disploop ; not yet
 42819                                  
 42820                                  ;   Set cursor position to just below the menu items
 42821                                  
 42822 00003FAE B200                            mov     dl,0            ; select column
 42823 00003FB0 88DE                            mov     dh,bl           ;
 42824 00003FB2 80C604                          add     dh,4            ; select row below menu
 42825 00003FB5 8A3E[3B4B]                      mov     bh,[bMenuPage]  ;
 42826 00003FB9 B402                            mov     ah,02h          ; set cursor position beneath the block list
 42827 00003FBB CD10                            int     10h             ;
 42828                                  
 42829 00003FBD BA[2E51]                        mov     dx,_$MenuPrmpt
 42830 00003FC0 E84F09                          call    print           ;
 42831 00003FC3 E82903                          call    select_item     ; make a selection, return # in BX
 42832 00003FC6 BA[EE4E]                        mov     dx,crlfm	
 42833 00003FC9 E84609                          call    print           ;
 42834 00003FCC FF36[3F4B]                      push    word [bDisableUI]
 42835 00003FD0 800E[3F4B]01                    or      byte [bDisableUI],1
 42836 00003FD5 E86704                          call    show_status     ; clear the status line now
 42837 00003FD8 8F06[3F4B]                      pop     word [bDisableUI]
 42838                                  
 42839                                  ;   Now begins the "re-organization" process...
 42840                                  
 42841                                  menu_autoselect:
 42842 00003FDC 83FBFF                          cmp     bx,-1 ; 0FFFFh	; clean boot requested?
 42843 00003FDF 7508                            jne	short normal_boot ; no
 42844 00003FE1 E8F105                          call    disable_autoexec; basically, add a /D to the command.com line
 42845                                  menu_abort:
 42846 00003FE4 29C9                            sub     cx,cx           ; then immediately exit with 0 config.sys image
 42847 00003FE6 E9E400                          jmp	menu_exit	;
 42848                                  
 42849                                  normal_boot:
 42850 00003FE9 83FBFE                          cmp     bx,-2 ; 0FFFEh	; back to top-level menu?
 42851 00003FEC 7509                            jne	short not_topmenu ; no
 42852 00003FEE 8B0E[5603]                      mov     cx,[count]      ; yes, start all over
 42853 00003FF2 29F6                            sub     si,si           ;
 42854 00003FF4 E9FFFD                          jmp     menu_search
 42855                                  
 42856                                  not_topmenu:
 42857 00003FF7 80BF[4A4B]4F                    cmp     byte [abBlockType+bx],CONFIG_SUBMENU
 42858 00003FFC 7510                            jne	short not_submenu
 42859 00003FFE 01DB                            add     bx,bx           ;
 42860 00004000 8BBF[544B]                      mov     di,[aoffBlockName+bx]
 42861 00004004 E8E101                          call    srch_block      ; THIS CANNOT FAIL!
 42862 00004007 89FE                            mov     si,di           ;
 42863 00004009 89D9                            mov     cx,bx           ; ES:SI and CX are ready for another round
 42864 0000400B E929FE                          jmp     menu_found
 42865                                  
 42866                                  not_submenu:
 42867 0000400E 01DB                            add     bx,bx           ; get BX -> name of selected block
 42868 00004010 8B9F[544B]                      mov     bx,[aoffBlockName+bx]
 42869                                  
 42870                                  ;   BX should now either be ZERO (meaning no block has been selected) or
 42871                                  ;   the offset relative to ES of the block name to be processed (along with
 42872                                  ;   all the "common" lines of course)
 42873                                  
 42874                                  no_selection:
 42875 00004014 891E[464B]                      mov     [offDefBlock],bx; save selection
 42876 00004018 8B0E[5603]                      mov     cx,[count]      ; reset ES:SI and CX for reprocessing
 42877 0000401C 29F6                            sub     si,si           ;
 42878 0000401E 1E                              push    ds              ;
 42879 0000401F 8E1E[EE18]                      mov     ds,[config_wrkseg]; this is where we'll store new config.sys image
 42880 00004023 29FF                            sub     di,di           ;
 42881                                  
 42882                                  ;   ES:SI-> config.sys, DS:DI -> new config.sys workspace
 42883                                  ;
 42884                                  ;   Work our way through the config.sys image again, this time copying
 42885                                  ;   all lines that are (A) "common" lines outside any block or (B) lines
 42886                                  ;   within the requested block. Lines inside INCLUDEd blocks are transparently
 42887                                  ;   copied by copy_block in a recursive fashion; the amount of recursion is
 42888                                  ;   limited by the fact INCLUDE statements are REMed by copy_block as they are
 42889                                  ;   processed and by the number of unique INCLUDE stmts in config.sys...
 42890                                  ;
 42891                                  ;   BUGBUG 20-Mar-1992 JeffPar: If we can figure out the lower bound of the
 42892                                  ;   stack we're running on, then we should check it inside copy_block
 42893                                  
 42894                                  copyblock_loop:
 42895 00004025 53                              push    bx              ; save selected block name
 42896 00004026 E82F01                          call    copy_block      ; process (named or common) block
 42897 00004029 5B                              pop     bx              ;
 42898 0000402A 7232                            jc	short move_config ; hit eof
 42899                                  
 42900                                  ;   copy_block can only return for two reasons: it hit eof or a new block
 42901                                  
 42902                                  copyblock_begin:
 42903                                  
 42904                                  ; 10/09/2023
 42905                                  %if 0
 42906                                          push    ax              ;
 42907                                          push    cx              ;
 42908                                          push    si              ;
 42909                                          push    di              ; always do "common" blocks
 42910                                          mov     di,szCommon
 42911                                          push    ds              ;
 42912                                          push    cs              ;
 42913                                          pop     ds              ;
 42914                                          call    comp_names      ;
 42915                                          pop     ds              ;
 42916                                          pop     di              ;
 42917                                          pop     si              ;
 42918                                          pop     cx              ;
 42919                                          pop     ax              ;
 42920                                          je	short copyblock_check
 42921                                  %endif
 42922                                  	; 10/09/2023
 42923 0000402C 57                      	push	di
 42924 0000402D BF[894B]                	mov	di,szCommon	; always do "common" blocks
 42925 00004030 E81602                  	call	comp_names_x	; (comp_names_safe)
 42926 00004033 5F                      	pop	di
 42927 00004034 740F                    	je	short copyblock_check
 42928                                  
 42929 00004036 09DB                            or      bx,bx           ; is there a block name to check?
 42930 00004038 7414                            jz	short copyblock_skip ; no
 42931 0000403A 57                              push    di              ;
 42932 0000403B 89DF                            mov     di,bx           ; check block against given block name
 42933 0000403D 1E                              push    ds              ;
 42934 0000403E 06                              push    es              ;
 42935 0000403F 1F                              pop     ds              ;
 42936 00004040 E8E501                          call    comp_names      ; is this the block we really want to do?
 42937 00004043 1F                              pop     ds              ;
 42938 00004044 5F                              pop     di              ;
 42939                                  copyblock_check:
 42940 00004045 7217                            jc	short move_config ; hit eof
 42941 00004047 7505                            jne	short copyblock_skip ;
 42942 00004049 E85A04                          call    skip_opt_line   ;
 42943 0000404C EBD7                            jmp	short copyblock_loop
 42944                                  
 42945                                  copyblock_skip:                 ;
 42946 0000404E E85504                          call    skip_opt_line   ; this ain't the block we wanted, so skip it
 42947 00004051 E87804                          call    get_char        ;
 42948 00004054 7208                            jc	short move_config ; hit eof
 42949 00004056 247F                            and     al,~CONFIG_OPTION_QUERY ; 7Fh
 42950 00004058 3C5B                            cmp     al,CONFIG_BEGIN ;
 42951 0000405A 74D0                            je	short copyblock_begin
 42952 0000405C EBF0                            jmp     short copyblock_skip ; anything else is just skipped
 42953                                  ;
 42954                                  ;   To create as little risk to the rest of SysInit as little as possible,
 42955                                  ;   and to free the workspace at "config_wrkseg" for creating an environment,
 42956                                  ;   copy the new config.sys image to "confbot"
 42957                                  ;
 42958                                  move_config:
 42959 0000405E 89F9                            mov     cx,di           ; now copy workspace at DS:DI to "confbot"
 42960 00004060 51                              push    cx              ;
 42961                                  ;
 42962                                  ;   But first, copy the CONFIG=<configuration><0> string to the workspace,
 42963                                  ;   since the configuration name only currently exists in the "confbot" area
 42964                                  ;
 42965                                   	;mov	cx,7
 42966 00004061 B90700                  	mov     cx,szMenu-szBoot-1
 42967 00004064 BE[7C4B]                        mov     si,szBoot	; first copy the CONFIG= part
 42968 00004067 47                              inc     di              ; skip a byte, in case absolutely nothing
 42969                                                                  ; was copied to the workspace, because we always
 42970                                                                  ; zero the first byte of the workspace (below)
 42971                                  copy_boot: 
 42972                                  	;lods    byte ptr cs:[si];
 42973 00004068 2E                              cs
 42974 00004069 AC                      	lodsb
 42975 0000406A 8805                    	mov     [di],al         ;
 42976 0000406C 47                              inc     di              ;
 42977 0000406D E2F9                            loop    copy_boot       ;
 42978                                  
 42979 0000406F 06                              push    es              ; then copy the configuration name
 42980                                          ;mov	cx,128-7	; put an upper limit on the name, to be safe
 42981                                  	; 04/01/2023
 42982 00004070 B179                    	mov	cl,128-7
 42983 00004072 2E8B36[464B]            	mov     si,[cs:offDefBlock]; ES:SI -> default block name
 42984 00004077 09F6                            or      si,si           ; valid?
 42985 00004079 7505                            jnz	short l1	; yes
 42986 0000407B 0E                              push    cs              ;
 42987 0000407C 07                              pop     es              ;
 42988 0000407D BE[894B]                        mov     si,szCommon
 42989 00004080 268A04                  l1:     mov     al,[es:si]      ;
 42990 00004083 E8B205                          call    any_delim       ;
 42991 00004086 7406                            je	short l2	;
 42992 00004088 8805                            mov     [di],al         ;
 42993 0000408A 46                              inc     si              ;
 42994 0000408B 47                              inc     di              ;
 42995 0000408C E2F2                            loop    l1              ;
 42996 0000408E C6050A                  l2:     mov     byte [di],lf	; terminate the configuration string
 42997 00004091 07                              pop     es              ;
 42998                                  
 42999                                  ;   Now we can copy "config_wrkseg" (DS) to "confbot" (ES)
 43000                                  
 43001 00004092 29FF                            sub     di,di           ;
 43002 00004094 2E893E[EC18]                    mov     [cs:config_envlen],di
 43003 00004099 29F6                            sub     si,si           ;
 43004 0000409B 59                              pop     cx              ; recover the size of "config_wrkseg"
 43005                                  
 43006 0000409C 51                              push    cx              ;
 43007 0000409D F3A4                            rep     movsb           ; moved!
 43008 0000409F 59                              pop     cx              ;
 43009 000040A0 8CD8                            mov     ax,ds           ;
 43010 000040A2 1F                              pop     ds              ;
 43011                                  
 43012                                  ;   Now that the config_wrkseg is available once again, we shall
 43013                                  ;   use it to create an environment. The first thing to go in will be
 43014                                  ;   the "CONFIG=configuration" thing. It is also important to zero
 43015                                  ;   the first byte of the workspace, so that copy_envvar knows the buffer
 43016                                  ;   is empty.
 43017                                  
 43018 000040A3 06                              push    es              ;
 43019 000040A4 8EC0                            mov     es,ax           ;
 43020 000040A6 46                              inc     si              ; ES:SI -> "CONFIG=configuration"
 43021 000040A7 26C606000000                    mov     byte [es:0],0	;empty the environment block
 43022 000040AD E82600                          call    copy_envvar     ; copy envvar at ES:SI to "config_wrkseg"
 43023 000040B0 07                              pop     es
 43024                                  
 43025                                  ;   Before returning, restore the default video page setting but do NOT
 43026                                  ;   do it using INT 10h's Set Active Page function, because if the menu was
 43027                                  ;   displayed on a different page, then it's because we don't want to see
 43028                                  ;   all the device driver/TSR goop (which goes to the default page)
 43029                                  
 43030                                  menu_done:
 43031 000040B1 803E[3B4B]00                    cmp     byte [bMenuPage],0
 43032 000040B6 7415                            je	short menu_exit	;
 43033 000040B8 06                              push    es              ;
 43034 000040B9 B84000                          mov     ax,40h          ;
 43035 000040BC 8EC0                            mov     es,ax           ;
 43036 000040BE A1[414B]                        mov     ax,[wCRTStart]  ;
 43037 000040C1 26A34E00                        mov     [es:004Eh],ax   ;
 43038 000040C5 A0[404B]                        mov     al,[bCRTPage]   ;
 43039 000040C8 26A26200                        mov     [es:0062h],al   ;
 43040 000040CC 07                              pop     es              ;
 43041                                  menu_exit:
 43042 000040CD 890E[5603]                      mov     [count],cx      ; set new counts
 43043 000040D1 890E[5803]                      mov     [org_count],cx  ;
 43044                                          ; 10/09/2023 (*) - Erdogan Tan
 43045                                  	; MSDOS 6.21 IO.SYS - SYSINIT:46D3h
 43046                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:491Ah
 43047                                  	;sub	si,si           ; always return ES:SI pointing to config.sys
 43048 000040D5 C3                      	retn
 43049                                  
 43050                                  ; (*) NOTE: MSDOS 6.0 source code (SYSINIT2.ASM) contains 'sub si,si' at this
 43051                                  ;	position (then 'retn' just after it)
 43052                                  ;	but MSDOS 6.21 and PCDOS 7.1 SYSINITs contain only 'retn' here.
 43053                                  
 43054                                  ;----------------------------------------------------------------------------
 43055                                  ;
 43056                                  ;   copy_envvar:  copy the envvar at ES:SI to "config_wrkseg"
 43057                                  ;
 43058                                  ;   INPUT
 43059                                  ;    ES:SI -> environment variable (in the form "var=string<cr/lf>")
 43060                                  ;
 43061                                  ;   OUTPUT
 43062                                  ;       config_envlen (ie, where to put next envvar) updated appropriately
 43063                                  ;       carry set if error (eg, missing =); clear otherwise
 43064                                  ;
 43065                                  ;   OTHER REGS USED
 43066                                  ;       None
 43067                                  ;
 43068                                  ;   NOTES
 43069                                  ;       None
 43070                                  ;
 43071                                  ;   HISTORY
 43072                                  ;       Created 29-Mar-1992 by JeffPar
 43073                                  ;
 43074                                  ;----------------------------------------------------------------------------
 43075                                  
 43076                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 43077                                  	; (SYSINIT:46D4h)
 43078                                  
 43079                                  copy_envvar:
 43080 000040D6 51                              push    cx              ;
 43081 000040D7 56                              push    si              ;
 43082 000040D8 1E                              push    ds              ;
 43083 000040D9 06                              push    es              ;
 43084 000040DA 06                              push    es              ;
 43085 000040DB 8E06[EE18]                      mov     es,[config_wrkseg] ; ES:DI to point to next available byte
 43086 000040DF 1F                              pop     ds                 ; DS:SI to point to envvar
 43087                                  
 43088                                  ;   Have to calculate the length of the variable name (and if we hit
 43089                                  ;   the end of the line before we hit '=', then it's curtains for this
 43090                                  ;   config.sys line)
 43091                                  ;
 43092                                  ;   The check for NULL is important because copy_envvar is also used to copy
 43093                                  ;   the initial CONFIG= setting, which will have been zapped by a NULL if no
 43094                                  ;   menu block existed (in order to prevent the creation of an environment)
 43095                                  
 43096 000040E0 29C9                            sub     cx,cx           ;
 43097                                  copy_varlen:                    ;
 43098 000040E2 AC                              lodsb                   ;
 43099 000040E3 08C0                            or      al,al           ; NULL?
 43100                                          ;stc	; 10/09/2023 (x)
 43101 000040E5 746B                            jz	short copy_envexit ; yes, abort
 43102 000040E7 3C0D                            cmp     al,cr           ;
 43103                                          ;stc	; 10/09/2023 (x)
 43104 000040E9 7467                            je	short copy_envexit
 43105 000040EB 3C0A                            cmp     al,lf           ;
 43106                                          ;stc	; 10/09/2023 (x)
 43107 000040ED 7463                            je	short copy_envexit
 43108 000040EF 41                              inc     cx              ;
 43109 000040F0 3C3D                            cmp     al,'='          ;
 43110 000040F2 75EE                            jne	short copy_varlen
 43111 000040F4 B000                            mov     al,0            ;
 43112 000040F6 8A24                            mov     ah,[si]         ; save char after '='
 43113 000040F8 29CE                            sub     si,cx           ; back up to given varname
 43114 000040FA 49                              dec     cx              ; CX == # of bytes in varname
 43115 000040FB 29FF                            sub     di,di           ; start looking for DS:SI at ES:0
 43116                                  copy_varsrch:
 43117 000040FD 263805                          cmp     byte [es:di],al
 43118 00004100 7425                            je	short copy_envprep ; search failed, just copy var
 43119 00004102 89FB                            mov     bx,di           ; ES:BX -> start of this varname
 43120 00004104 51                              push    cx              ;
 43121 00004105 56                              push    si              ;
 43122 00004106 F3A6                            repe    cmpsb           ;
 43123 00004108 5E                              pop     si              ;
 43124 00004109 59                              pop     cx              ;
 43125 0000410A 7531                            jne	short copy_varnext ; no match, skip to next varname
 43126 0000410C 26803D3D                        cmp     byte [es:di],'='
 43127 00004110 752B                            jne     short copy_varnext ; no match, there's more characters
 43128                                  
 43129                                  ;   Previous occurrence of variable has been found; determine the
 43130                                  ;   entire length and then destroy it
 43131                                  
 43132 00004112 B9FFFF                          mov     cx,-1           ;
 43133 00004115 F2AE                            repne   scasb           ; guaranteed to get null (since we put it there)
 43134 00004117 56                              push    si              ;
 43135 00004118 89FE                            mov     si,di           ;
 43136 0000411A 89DF                            mov     di,bx           ;
 43137 0000411C 2E8B0E[EC18]                    mov     cx,[cs:config_envlen]
 43138 00004121 29F1                            sub     cx,si           ; destroy variable now
 43139                                  	;rep movs byte ptr es:[di],byte ptr es:[si]
 43140                                  	;;db 0F3h,26h,0A4h ; MSDOS 6.21 IO.SYS - SYSINIT:4724h
 43141                                  
 43142 00004123 F3                      	rep	; 0F3h
 43143 00004124 26                      	es	; 26h
 43144 00004125 A4                      	movsb	; 0A4h
 43145                                  
 43146 00004126 5E                      	pop     si
 43147                                  copy_envprep:
 43148 00004127 80FC0D                          cmp     ah,cr          ; if there is nothing after the '='
 43149 0000412A 741D                            je	short copy_envdel ; then just exit with variable deleted
 43150 0000412C 80FC0A                          cmp     ah,lf           ;
 43151 0000412F 7418                            je	short copy_envdel
 43152                                          ;jmp	short copy_envloop
 43153                                  	; 04/01/2023
 43154                                  copy_envloop:                  ;
 43155 00004131 AC                      	lodsb                   ;
 43156 00004132 3C0D                    	cmp	al,cr           ;
 43157 00004134 7410                    	je	short copy_envdone
 43158 00004136 3C0A                    	cmp	al,lf           ;
 43159 00004138 740C                    	je	short copy_envdone
 43160 0000413A AA                      	stosb                   ;
 43161 0000413B EBF4                    	jmp	short copy_envloop
 43162                                  
 43163                                  copy_varnext:                   ;
 43164 0000413D 51                              push    cx              ;
 43165 0000413E B9FFFF                          mov     cx,-1           ;
 43166 00004141 F2AE                            repne   scasb           ;
 43167 00004143 59                              pop     cx              ;
 43168 00004144 EBB7                            jmp	short copy_varsrch
 43169                                  
 43170                                  	; 04/01/2023
 43171                                  ;copy_envloop:                  ;
 43172                                  ;	lodsb                   ;
 43173                                  ;	cmp	al,cr           ;
 43174                                  ;	je	short copy_envdone
 43175                                  ;	cmp	al,lf           ;
 43176                                  ;	je	short copy_envdone
 43177                                  ;	stosb                   ;
 43178                                  ;	jmp	short copy_envloop
 43179                                  
 43180                                  copy_envdone:                   ;
 43181 00004146 28C0                            sub     al,al           ; do SUB to clear carry as well
 43182 00004148 AA                              stosb                   ; always null-terminate these puppies
 43183                                  copy_envdel:                    ;
 43184 00004149 268805                          mov     [es:di],al      ; and stick another null to terminate the env.
 43185 0000414C 2E893E[EC18]                    mov     [cs:config_envlen],di
 43186                                  	; 10/09/2023 (x) - Erdogan Tan
 43187 00004151 F9                      	stc ; in order to clear carry flag via cmc (compact code trick!)
 43188                                  copy_envexit:                   ;
 43189 00004152 F5                      	cmc ; (x) ; reverse carry flag status (je -> cf=1)
 43190 00004153 07                              pop     es              ;
 43191 00004154 1F                              pop     ds              ;
 43192 00004155 5E                              pop     si              ;
 43193 00004156 59                              pop     cx              ;
 43194                                  
 43195                                  copy_done:	; 18/12/2022
 43196 00004157 C3                              retn
 43197                                  
 43198                                  ;----------------------------------------------------------------------------
 43199                                  ;
 43200                                  ;   copy_block:  copy the current block to the new config.sys workspace
 43201                                  ;
 43202                                  ;   INPUT
 43203                                  ;       CX == remaining bytes in "organized" config.sys memory image
 43204                                  ;    ES:SI -> remaining bytes in "organized" config.sys memory image
 43205                                  ;    DS:DI -> new config.sys workspace (equal in size to the original
 43206                                  ;             config.sys image) where the current block is to be copied
 43207                                  ;
 43208                                  ;   OUTPUT
 43209                                  ;       Same as above
 43210                                  ;       AL also equals the last character read from the organized image
 43211                                  ;
 43212                                  ;   OTHER REGS USED
 43213                                  ;       All
 43214                                  ;
 43215                                  ;   NOTES
 43216                                  ;       None
 43217                                  ;
 43218                                  ;   HISTORY
 43219                                  ;       Created 16-Mar-1992 by JeffPar
 43220                                  ;
 43221                                  ;----------------------------------------------------------------------------
 43222                                  
 43223                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 43224                                  	; (SYSINIT:4759h)
 43225                                  
 43226                                  copy_block:
 43227 00004158 E87103                          call    get_char        ; check for include
 43228 0000415B 72FA                            jc	short copy_done	;
 43229 0000415D 247F                    	and     al,~CONFIG_OPTION_QUERY ; 7Fh
 43230 0000415F 3C5B                    	cmp     al,CONFIG_BEGIN ; another BEGIN implies END as well
 43231 00004161 74F4                            je	short copy_done ;
 43232                                  
 43233 00004163 3C4A                            cmp     al,CONFIG_INCLUDE ; 'J'
 43234 00004165 88E0                            mov     al,ah           ; AL == the original line code
 43235 00004167 753A                            jne	short copy_line	; not an "include" line
 43236                                  
 43237                                  ;   We have hit an "INCLUDE" line; first, REM out the line so that we
 43238                                  ;   never try to include the block again (no infinite include loops please),
 43239                                  ;   then search for the named block and call copy_block again.
 43240                                  
 43241 00004169 26C644FF30                      mov     byte [es:si-1],CONFIG_REM ; '0'
 43242 0000416E 57                              push    di              ;
 43243                                  
 43244 0000416F BF[844B]                        mov     di,szMenu
 43245 00004172 E8D400                          call    comp_names_safe ; don't allow INCLUDE MENU
 43246 00004175 7426                            je	short copy_skip	;
 43247                                  
 43248 00004177 BF[894B]                        mov     di,szCommon
 43249 0000417A E8CC00                          call    comp_names_safe ; don't allow INCLUDE COMMON
 43250 0000417D 741E                            je	short copy_skip	;
 43251                                  
 43252 0000417F 89F7                            mov     di,si           ; try to find the block
 43253 00004181 E86400                          call    srch_block      ;
 43254 00004184 89FA                            mov     dx,di           ;
 43255                                  	; 10/09/2023
 43256                                  	;pop    di              ;
 43257 00004186 7514                            jne	short copy_error ; no such block
 43258 00004188 5F                      	pop	di  ; 10/09/2023
 43259 00004189 51                              push    cx              ;
 43260 0000418A 89D9                            mov     cx,bx           ;
 43261 0000418C 56                              push    si              ;
 43262 0000418D 4A                              dec     dx              ;
 43263 0000418E 89D6                            mov     si,dx           ;
 43264 00004190 E80E03                          call    skip_line       ; skip the rest of the "block name" line
 43265 00004193 E8C2FF                          call    copy_block      ; and copy in the rest of that block
 43266 00004196 5E                              pop     si              ;
 43267 00004197 59                              pop     cx              ;
 43268 00004198 28C0                            sub     al,al           ; force skip_opt_line to skip...
 43269 0000419A EB2B                            jmp     short copy_nextline
 43270                                  
 43271                                  copy_error:
 43272                                  	; 10/09/2023
 43273 0000419C F8                      	clc
 43274                                  copy_skip:
 43275 0000419D 5F                              pop     di
 43276                                  ;copy_error:
 43277                                  	; 10/09/2023 (cf=0)
 43278                                  	;clc                    ;
 43279 0000419E E80004                          call    print_error     ; note that carry is clear, no pause
 43280 000041A1 EB24                            jmp     short copy_nextline
 43281                                  
 43282                                  ;   Copy the line at ES:SI to the current location at DS:DI
 43283                                  
 43284                                  copy_line:
 43285 000041A3 8805                            mov     [di],al         ;
 43286 000041A5 47                              inc     di              ;
 43287 000041A6 3C20                            cmp     al,' '          ; is this is a "real" line with a "real" code?
 43288 000041A8 721D                            jb	short copy_nextline ; no
 43289 000041AA 2E803E[F118]00                  cmp     byte [cs:config_multi],0
 43290 000041B0 7409                            je	short copy_loop	; not a multi-config config.sys, don't embed #s
 43291 000041B2 E81700                          call    get_linenum	; BX == line # of line @ES:SI
 43292 000041B5 891D                            mov     [di],bx         ; stash it immediately following the line code
 43293 000041B7 47                              inc     di              ;
 43294 000041B8 47                              inc     di              ;
 43295 000041B9 EB08                            jmp     short copy_next ;
 43296                                  copy_loop:                      ;
 43297 000041BB E80E03                          call    get_char        ;
 43298 000041BE 7297                            jc	short copy_done ; end of file
 43299 000041C0 8805                            mov     [di],al         ;
 43300 000041C2 47                              inc     di              ;
 43301                                  copy_next:
 43302 000041C3 3C0A                            cmp     al,lf ; 0Ah	; done with line?
 43303 000041C5 75F4                            jne	short copy_loop	; nope
 43304                                  
 43305                                  copy_nextline:
 43306 000041C7 E8DC02                          call    skip_opt_line   ;
 43307 000041CA EB8C                            jmp     short copy_block
 43308                                  
 43309                                  	; 18/12/2022
 43310                                  ;copy_done:
 43311                                          ;retn
 43312                                  
 43313                                  ;----------------------------------------------------------------------------
 43314                                  ;
 43315                                  ;   get_linenum:  return line # (in BX) of current line (@ES:SI)
 43316                                  ;
 43317                                  ;   INPUT
 43318                                  ;    ES:SI -> some line in the config.sys memory image
 43319                                  ;
 43320                                  ;   OUTPUT
 43321                                  ;       BX == line # (relative to 1)
 43322                                  ;
 43323                                  ;   OTHER REGS USED
 43324                                  ;       DX
 43325                                  ;
 43326                                  ;   NOTES
 43327                                  ;       None
 43328                                  ;
 43329                                  ;   HISTORY
 43330                                  ;       Created 16-Mar-1992 by JeffPar
 43331                                  ;
 43332                                  ;----------------------------------------------------------------------------
 43333                                  
 43334                                  get_linenum:
 43335 000041CC 50                              push    ax              ;
 43336 000041CD 29DB                            sub     bx,bx           ; BX == line # (to be returned)
 43337 000041CF 51                              push    cx              ;
 43338 000041D0 89F2                            mov     dx,si           ; DX == the offset we're looking for
 43339 000041D2 56                              push    si              ;
 43340 000041D3 2E8B0E[5603]                    mov     cx,[cs:count]   ;
 43341 000041D8 29F6                            sub     si,si           ; prepare to scan entire file
 43342                                  get_linenum_loop:               ;
 43343 000041DA E8C402                          call    skip_line       ;
 43344 000041DD 7205                            jc	short get_linenum_done
 43345 000041DF 43                              inc     bx              ;
 43346 000041E0 39D6                            cmp     si,dx           ; have we exceeded the desired offset yet?
 43347 000041E2 72F6                            jb	short get_linenum_loop ; no
 43348                                  get_linenum_done:               ;
 43349 000041E4 5E                              pop     si              ;
 43350 000041E5 59                              pop     cx              ;
 43351 000041E6 58                              pop     ax              ;
 43352 000041E7 C3                              retn
 43353                                  
 43354                                  ;----------------------------------------------------------------------------
 43355                                  ;
 43356                                  ;   srch_block:  searches entire config.sys for block name @ES:DI
 43357                                  ;
 43358                                  ;   INPUT
 43359                                  ;       ES -> config.sys image
 43360                                  ;    ES:DI -> block name to find
 43361                                  ;
 43362                                  ;   OUTPUT
 43363                                  ;       ZF flag set, if found
 43364                                  ;    ES:DI -> just past the name in the block heading, if found
 43365                                  ;       BX == # bytes remaining from that point, if found
 43366                                  ;
 43367                                  ;   OTHER REGS USED
 43368                                  ;       None
 43369                                  ;
 43370                                  ;   NOTES
 43371                                  ;       This differs from "find_block" in that it searches the ENTIRE
 43372                                  ;       config.sys image, not merely the remaining portion, and that it
 43373                                  ;       takes a pointer to block name that is *elsewhere* in the image
 43374                                  ;       (ie, ES) as opposed to some string constant in our own segment (DS).
 43375                                  ;
 43376                                  ;   HISTORY
 43377                                  ;       Created 16-Mar-1992 by JeffPar
 43378                                  ;
 43379                                  ;----------------------------------------------------------------------------
 43380                                  
 43381                                  srch_block:	          ; returns BX -> named block in CONFIG.SYS
 43382 000041E8 50                              push    ax              ;
 43383 000041E9 51                              push    cx              ;
 43384 000041EA 2E8B0E[5603]                    mov     cx,[cs:count]   ;
 43385 000041EF 56                              push    si              ;
 43386 000041F0 29F6                            sub     si,si           ;
 43387 000041F2 1E                              push    ds              ;
 43388 000041F3 06                              push    es              ;
 43389 000041F4 1F                              pop     ds              ;
 43390 000041F5 E80900                          call    find_block      ;
 43391 000041F8 89F7                            mov     di,si           ;
 43392 000041FA 89CB                            mov     bx,cx           ;
 43393 000041FC 1F                              pop     ds              ;
 43394 000041FD 5E                              pop     si              ;
 43395 000041FE 59                              pop     cx              ;
 43396 000041FF 58                              pop     ax              ;
 43397                                  find_exit: ; 16/04/2019
 43398 00004200 C3                              retn			;
 43399                                  
 43400                                  ;----------------------------------------------------------------------------
 43401                                  ;
 43402                                  ;   find_block:  searches rest of config.sys for block name @DS:DI
 43403                                  ;
 43404                                  ;   INPUT
 43405                                  ;    DS:DI -> block name to find
 43406                                  ;    ES:SI -> remainder of config.sys image
 43407                                  ;       CX == remaining size of config.sys image
 43408                                  ;
 43409                                  ;   OUTPUT
 43410                                  ;       ZF flag set, if found (also, CF set if EOF)
 43411                                  ;    ES:SI -> where the search stopped (at end of block name or EOF)
 43412                                  ;       CX == # bytes remaining from that point
 43413                                  ;
 43414                                  ;   OTHER REGS USED
 43415                                  ;       AX
 43416                                  ;
 43417                                  ;   NOTES
 43418                                  ;       This differs from "srch_block" in that it searches only the
 43419                                  ;       remaining portion of the config.sys image and leaves SI and CX
 43420                                  ;       pointing to where the search left off, and that it takes a pointer
 43421                                  ;       to search string in our own segment (DS:DI instead of ES:DI).
 43422                                  ;
 43423                                  ;   HISTORY
 43424                                  ;       Created 16-Mar-1992 by JeffPar
 43425                                  ;
 43426                                  ;----------------------------------------------------------------------------
 43427                                  
 43428                                  find_block:
 43429 00004201 E8C802                          call    get_char        ; get line code
 43430 00004204 72FA                            jc	short find_exit	; end of file
 43431 00004206 247F                            and     al,~CONFIG_OPTION_QUERY
 43432 00004208 3C5B                            cmp     al,CONFIG_BEGIN ; beginning of a block?
 43433 0000420A 740C                            je	short check_line ; no
 43434 0000420C 3C4A                            cmp     al,CONFIG_INCLUDE
 43435 0000420E 7513                            jne	short next_line	;
 43436 00004210 2E800E[F118]01                  or	byte [cs:config_multi],1
 43437 00004216 EB0B                            jmp     short next_line ;
 43438                                  check_line:
 43439 00004218 2E800E[F118]01                  or      byte [cs:config_multi],1
 43440 0000421E E80700                          call    comp_names      ; compare block names
 43441 00004221 76DD                            jbe	short find_exit	; end of file, or names matched
 43442                                  next_line:
 43443 00004223 E88002                          call    skip_opt_line   ; no, so skip to next line
 43444 00004226 EBD9                            jmp	short find_block  ;
 43445                                  ;find_exit:
 43446                                  ;	retn
 43447                                  
 43448                                  ;----------------------------------------------------------------------------
 43449                                  ;
 43450                                  ;   comp_names:  compares keyword @DS:DI to position in config.sys @ES:SI
 43451                                  ;
 43452                                  ;   INPUT
 43453                                  ;    DS:DI -> keyword to compare
 43454                                  ;    ES:SI -> position in config.sys
 43455                                  ;       CX == remaining bytes in config.sys
 43456                                  ;
 43457                                  ;   OUTPUT
 43458                                  ;       ZF flag set, if match (also, CF set if EOF)
 43459                                  ;    ES:SI -> where the comparison stopped (at end of block name or EOF)
 43460                                  ;       CX == # bytes remaining from that point
 43461                                  ;
 43462                                  ;   OTHER REGS USED
 43463                                  ;       AX
 43464                                  ;
 43465                                  ;   NOTES
 43466                                  ;       None
 43467                                  ;
 43468                                  ;   HISTORY
 43469                                  ;       Created 16-Mar-1992 by JeffPar
 43470                                  ;
 43471                                  ;----------------------------------------------------------------------------
 43472                                  
 43473                                  comp_names:
 43474 00004228 57                              push    di              ;
 43475                                  comp_loop:                      ;
 43476 00004229 E8A002                          call    get_char        ;
 43477 0000422C 7210                            jc	short comp_exit	;
 43478 0000422E E80704                          call    any_delim       ; is next character a delimiter?
 43479 00004231 8A25                            mov     ah,[di]         ; (get next character we're supposed to match)
 43480 00004233 740B                            je	short comp_almost ; yes, it *could* be a match
 43481 00004235 47                              inc     di              ;
 43482 00004236 25DFDF                          and     ax,~2020h ; 0DFDFh 
 43483                                  				; BUGBUG -- assumes both names are alphanumeric -JTP
 43484 00004239 38E0                            cmp     al,ah           ; match?
 43485 0000423B 74EC                            je	short comp_loop ; yes, keep looking at the characters
 43486 0000423D F8                              clc                     ; prevent erroneous eof indication: clear carry
 43487                                  comp_exit:                      ;
 43488 0000423E 5F                              pop     di              ;
 43489 0000423F C3                              retn			;
 43490                                  comp_almost:                    ;
 43491 00004240 86C4                            xchg    al,ah           ; we don't know for sure if it's a match
 43492 00004242 E8F303                          call    any_delim       ; until we verify that the second string has
 43493 00004245 86C4                            xchg    al,ah           ; been exhausted also...
 43494 00004247 EBF5                            jmp     short comp_exit ; if we are, this call to any_delim will tell...
 43495                                  
 43496                                  ;----------------------------------------------------------------------------
 43497                                  
 43498                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 43499                                  comp_names_x:
 43500                                  	;
 43501                                  comp_names_safe:
 43502 00004249 50                              push    ax
 43503 0000424A 51                              push    cx
 43504 0000424B 56                              push	si
 43505 0000424C 1E                              push    ds
 43506 0000424D 0E                              push    cs
 43507 0000424E 1F                              pop     ds
 43508 0000424F E8D6FF                          call    comp_names
 43509 00004252 1F                              pop     ds
 43510 00004253 5E                      	pop	si
 43511 00004254 59                              pop     cx
 43512 00004255 58                              pop     ax
 43513 00004256 C3                              retn
 43514                                  
 43515                                  ;----------------------------------------------------------------------------
 43516                                  ;
 43517                                  ;   print_item:  display menu item #BL
 43518                                  ;
 43519                                  ;   INPUT
 43520                                  ;       BL == menu item # to display
 43521                                  ;
 43522                                  ;   OUTPUT
 43523                                  ;       Menu item displayed, with appropriate highlighting if BL == bDefBlock
 43524                                  ;
 43525                                  ;   OTHER REGS USED
 43526                                  ;       None
 43527                                  ;
 43528                                  ;   NOTES
 43529                                  ;       This function saves/restores the current cursor position, so you
 43530                                  ;       needn't worry about it.
 43531                                  ;
 43532                                  ;   HISTORY
 43533                                  ;       Created 16-Mar-1992 by JeffPar
 43534                                  ;
 43535                                  ;----------------------------------------------------------------------------
 43536                                  
 43537                                  	; 04/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 43538                                  	; (SYSINIT:485Ah)
 43539                                  
 43540                                  print_item:		; prints menu item #BL (1 to N)
 43541 00004257 50                              push    ax              ;
 43542 00004258 53                              push    bx              ;
 43543 00004259 51                              push    cx              ;
 43544 0000425A 52                              push    dx              ;
 43545 0000425B 56                              push    si              ;
 43546 0000425C B403                            mov     ah,03h          ; get cursor position
 43547 0000425E 8A3E[3B4B]                      mov     bh,[bMenuPage]  ; always page zero
 43548 00004262 CD10                            int     10h             ; DH/DL = row/column
 43549 00004264 52                              push    dx              ; save it
 43550 00004265 B402                            mov     ah,02h          ; set cursor position
 43551 00004267 88DE                            mov     dh,bl           ;
 43552 00004269 80C603                          add     dh,3            ;
 43553 0000426C B205                            mov     dl,5            ;
 43554 0000426E CD10                            int     10h             ; set cursor position for correct row/col
 43555 00004270 88D8                            mov     al,bl           ;
 43556 00004272 0430                            add     al,'0'          ; convert menu item # to ASCII digit
 43557 00004274 8A26[3A4B]                      mov     ah,[bMenuColor] ; normal attribute
 43558 00004278 3A1E[444B]                      cmp     bl,[bDefBlock]  ; are we printing the current block?
 43559 0000427C 7510                            jne	short print_other ; no
 43560 0000427E 80CC70                          or      ah,70h          ; yes, set bgnd color to white
 43561 00004281 88E5                            mov     ch,ah           ;
 43562 00004283 B104                            mov     cl,4            ;
 43563 00004285 D2C5                            rol     ch,cl           ;
 43564 00004287 38E5                            cmp     ch,ah           ; are fgnd/bgnd the same?
 43565 00004289 7503                            jne	short print_other ; no
 43566 0000428B 80F408                          xor     ah,08h          ; yes, so modify the fgnd intensity
 43567                                  print_other:                    ;
 43568 0000428E B700                            mov     bh,0            ;
 43569 00004290 01DB                            add     bx,bx           ;
 43570 00004292 8BBF[684B]                      mov     di,[aoffBlockDesc+bx]
 43571 00004296 88E3                            mov     bl,ah           ; put the attribute in the correct register now
 43572 00004298 8A3E[3B4B]                      mov     bh,[bMenuPage]  ; get correct video page #
 43573 0000429C B409                            mov     ah,09h          ; write char/attr
 43574 0000429E B90100                          mov     cx,1            ;
 43575 000042A1 CD10                            int     10h             ;
 43576 000042A3 FEC2                            inc     dl              ; increment column
 43577 000042A5 B402                            mov     ah,02h          ;
 43578 000042A7 CD10                            int     10h             ;
 43579                                          ;mov	ax,0900h+'.'    ;
 43580 000042A9 B82E09                          mov	ax,092Eh
 43581 000042AC CD10                    	int     10h             ; display '.'
 43582 000042AE FEC2                            inc     dl              ; increment column
 43583 000042B0 B402                            mov     ah,02h          ;
 43584 000042B2 CD10                            int     10h             ;
 43585                                          ;mov	ax,0900h+' '    ;
 43586 000042B4 B82009                          mov	ax,0920h
 43587 000042B7 CD10                    	int     10h             ; display ' '
 43588 000042B9 FEC2                            inc     dl              ; increment column
 43589 000042BB B402                            mov     ah,02h          ;
 43590 000042BD CD10                            int     10h             ;
 43591 000042BF 06                              push    es              ;
 43592                                  print_loop:                     ;
 43593 000042C0 268A05                          mov     al,[es:di]	; get a character of the description
 43594 000042C3 47                              inc     di              ;
 43595 000042C4 3C09                            cmp     al,TAB ; 9	; substitute spaces for tabs
 43596 000042C6 7502                            jne	short print_nontab ;
 43597 000042C8 B020                            mov     al,' '          ;
 43598                                  print_nontab:                   ;
 43599 000042CA 3C20                            cmp     al,' '          ;
 43600 000042CC 7215                            jb	short print_done ; stop at the 1st character < space
 43601 000042CE 3C24                            cmp     al,'$'          ;
 43602 000042D0 7411                            je	short print_done ; also stop on $
 43603 000042D2 B409                            mov     ah,09h          ; display function #
 43604 000042D4 CD10                            int     10h             ;
 43605 000042D6 FEC2                            inc     dl              ; increment column
 43606 000042D8 80FA4E                          cmp     dl,78           ; far enough?
 43607 000042DB 7306                            jae	short print_done ; yes
 43608 000042DD B402                            mov     ah,02h          ;
 43609 000042DF CD10                            int     10h             ;
 43610 000042E1 EBDD                            jmp	short  print_loop
 43611                                  print_done:                     ;
 43612 000042E3 07                              pop     es              ;
 43613 000042E4 5A                              pop     dx              ;
 43614 000042E5 B402                            mov     ah,02h          ;
 43615 000042E7 CD10                            int     10h             ; restore previous row/col
 43616 000042E9 5E                              pop     si              ;
 43617 000042EA 5A                              pop     dx              ;
 43618 000042EB 59                              pop     cx              ;
 43619 000042EC 5B                              pop     bx              ;
 43620 000042ED 58                              pop     ax              ;
 43621 000042EE C3                              retn			;
 43622                                  
 43623                                  ;----------------------------------------------------------------------------
 43624                                  ;
 43625                                  ;   select_item:  wait for user to select menu item, with time-out
 43626                                  ;
 43627                                  ;   INPUT
 43628                                  ;       None
 43629                                  ;
 43630                                  ;   OUTPUT
 43631                                  ;       BX == menu item # (1-N), or -1 for clean boot
 43632                                  ;       Selected menu item highlighted
 43633                                  ;       Cursor positioned beneath menu, ready for tty-style output now
 43634                                  ;
 43635                                  ;   OTHER REGS USED
 43636                                  ;       None
 43637                                  ;
 43638                                  ;   NOTES
 43639                                  ;       None
 43640                                  ;
 43641                                  ;   HISTORY
 43642                                  ;       Created 16-Mar-1992 by JeffPar
 43643                                  ;
 43644                                  ;----------------------------------------------------------------------------
 43645                                  
 43646                                  select_item:		; returns digit value in BX (trashes AX/CX/DX)
 43647 000042EF 8A1E[444B]                      mov     bl,[bDefBlock]  ; BL will be the default block #
 43648 000042F3 88D8                            mov     al,bl           ;
 43649 000042F5 E83701                          call    disp_num        ;
 43650 000042F8 E84401                          call    show_status     ; display current interactive status
 43651 000042FB 803E[484B]FF                    cmp     byte [secTimeOut],-1
 43652 00004300 7452                            je	short input_key	; no time-out, just go to input
 43653 00004302 B42C                            mov     ah,GET_TIME ; 2Ch
 43654 00004304 CD21                            int     21h             ;
 43655 00004306 88F7                            mov     bh,dh           ; BH = initial # of seconds
 43656                                  check_time:
 43657 00004308 A0[484B]                        mov     al,[secTimeOut] ;
 43658 0000430B 2A06[494B]                      sub     al,[secElapsed] ;
 43659 0000430F 730D                            jae	short show_time	;
 43660 00004311 800E[434B]02                    or      byte [bQueryOpt],2  ; disable all further prompting
 43661 00004316 C606[494B]00                    mov     byte [secElapsed],0
 43662 0000431B E9F600                          jmp	select_done	; time's up!
 43663                                  show_time:
 43664 0000431E 53                              push    bx              ;
 43665 0000431F 88C3                            mov     bl,al           ; save # in BL
 43666 00004321 8A3E[3B4B]                      mov     bh,[bMenuPage]  ;
 43667 00004325 B403                            mov     ah,03h          ; get cursor position
 43668 00004327 CD10                            int     10h             ;
 43669 00004329 52                              push    dx              ;
 43670 0000432A 80C208                  	add	dl,8		; move cursor to the right
 43671 0000432D B402                            mov     ah,02h          ; set cursor position
 43672 0000432F CD10                            int     10h             ;
 43673 00004331 BA[A151]                        mov     dx,_$TimeOut
 43674 00004334 E8DB05                          call    print           ; print the "Time remaining: " prompt
 43675 00004337 88D8                            mov     al,bl           ; recover # from BL
 43676 00004339 98                              cbw                     ; this works because AL is always <= 90
 43677 0000433A B10A                            mov     cl,10           ;
 43678 0000433C F6F1                            div     cl              ; AL = tens digit, AH = ones digit
 43679 0000433E 88E1                            mov     cl,ah           ;
 43680 00004340 0430                            add     al,'0'          ;
 43681 00004342 B40E                            mov     ah,0Eh          ;
 43682 00004344 CD10                            int     10h             ; write TTY tens digit
 43683 00004346 88C8                            mov     al,cl           ;
 43684 00004348 0430                            add     al,'0'          ;
 43685 0000434A B40E                            mov     ah,0Eh          ;
 43686 0000434C CD10                            int     10h             ; write TTY ones digit
 43687 0000434E 5A                              pop     dx
 43688 0000434F B402                            mov     ah,02h          ; set cursor position back to where it was
 43689 00004351 CD10                            int     10h             ;
 43690 00004353 5B                              pop     bx              ;
 43691                                  input_key:
 43692 00004354 B406                            mov     ah,RAW_CON_IO ; 6
 43693 00004356 B2FF                            mov     dl,0FFh         ; input request
 43694 00004358 CD21                            int     21h             ;
 43695 0000435A 751F                            jnz	short got_key	;
 43696 0000435C 803E[484B]FF                    cmp     byte [secTimeOut],-1; is there a time-out?
 43697 00004361 74F1                            je	short input_key	; no, just go back to input
 43698 00004363 B42C                            mov     ah,GET_TIME     ;
 43699 00004365 CD21                            int     21h             ; DH = seconds
 43700 00004367 88F4                            mov     ah,dh           ;
 43701 00004369 28FE                            sub     dh,bh           ; should generally be zero or one
 43702 0000436B 88E7                            mov     bh,ah           ;
 43703 0000436D 7302                            jnc	short got_time	;
 43704 0000436F B601                            mov     dh,1            ; it wrapped back to zero, so assume one
 43705                                  got_time:
 43706 00004371 08F6                            or      dh,dh           ; any change?
 43707 00004373 74DF                            jz	short input_key	; no
 43708 00004375 0036[494B]                      add     [secElapsed],dh ;
 43709 00004379 EB8D                            jmp	short check_time ;
 43710                                  got_key:
 43711 0000437B 50                              push    ax              ;
 43712 0000437C B8FFFF                          mov     ax,-1           ; zap both secTimeOut and secElapsed
 43713 0000437F 8706[484B]                      xchg    [secTimeOut],ax
 43714 00004383 3CFF                            cmp     al,-1           ; was time-out already disabled?
 43715 00004385 740E                            je	short timeout_disabled ; yes
 43716 00004387 53                              push    bx              ; let's disable # seconds display
 43717 00004388 B8200A                          mov     ax,0A20h        ; write multiple spaces
 43718 0000438B 8B1E[3A4B]                      mov     bx,[bMenuColor]
 43719 0000438F B95000                          mov     cx,80           ; 80 of them, to be safe
 43720 00004392 CD10                            int     10h             ; to completely obliterate # seconds display
 43721 00004394 5B                              pop     bx   		;
 43722                                  
 43723                                  timeout_disabled:
 43724 00004395 58                              pop     ax              ;
 43725 00004396 08C0                            or      al,al           ; extended key pressed?
 43726 00004398 755A                            jnz	short normal_key ; no
 43727 0000439A CD21                            int     21h             ; get the next part of the key then
 43728 0000439C 74B6                            jz	short input_key	; hmmm, what happened to the second part?
 43729                                  
 43730 0000439E 3C48                            cmp     al,48h          ; up arrow?
 43731 000043A0 7510                            jne	short not_up	; no
 43732 000043A2 80FB01                          cmp     bl,1            ; are we as up as up can get?
 43733 000043A5 76AD                            jbe	short input_key	; yes, ignore it
 43734 000043A7 FE0E[444B]                      dec     byte [bDefBlock] ;
 43735 000043AB E8A9FE                          call    print_item      ; re-print the current item
 43736 000043AE FECB                            dec     bl              ; and then print the new current item
 43737 000043B0 EB12                            jmp     short print1
 43738                                  not_up:
 43739 000043B2 3C50                            cmp     al,50h          ; down arrow?
 43740 000043B4 7518                            jne	short not_down	; no
 43741 000043B6 3A1E[454B]                      cmp     bl,[bMaxBlock]  ; are we as down as down can get?
 43742 000043BA 7310                            jae	short to_input_key ; yes, ignore it
 43743 000043BC FE06[444B]                      inc     byte [bDefBlock] ;
 43744 000043C0 E894FE                          call    print_item      ; re-print the current item
 43745 000043C3 43                              inc     bx              ; and then print the new current item
 43746                                  print1: 
 43747 000043C4 88D8                    	mov     al,bl           ;
 43748                                  print2: 
 43749 000043C6 E88EFE                  	call    print_item      ;
 43750 000043C9 E86300                          call    disp_num        ;
 43751                                  to_input_key:
 43752 000043CC EB86                            jmp	short input_key ; 10/09/2023
 43753                                  not_down:
 43754 000043CE F606[3F4B]01                    test    byte [bDisableUI],1
 43755 000043D3 75F7                            jnz	short to_input_key ; don't allow F8 or F5
 43756 000043D5 3C42                            cmp     al,42h          ; F8 function key?
 43757 000043D7 750B                            jne	short not_f8	; no
 43758 000043D9 8036[434B]01                    xor     byte [bQueryOpt],1
 43759 000043DE E85E00                          call    show_status     ;
 43760 000043E1 E970FF                          jmp     input_key	;
 43761                                  not_f8:
 43762 000043E4 3C3F                            cmp     al,3Fh          ; F5 function key?
 43763 000043E6 75E4                            jne	short to_input_key ; no
 43764                                  	; 02/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 43765                                  	; MSDOS 6.21 IO.SYS - SYSINIT:49EBh
 43766                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4C32h)
 43767 000043E8 800E[434B]04            	or	byte [bQueryOpt],4 ; no more queries
 43768 000043ED BBFFFF                          mov     bx,-1           ; special return code (-1) indicating clean boot
 43769 000043F0 B020                            mov     al,' '          ; don't want to display anything really;
 43770 000043F2 EB26                            jmp     short disp_input ; just want to display the cr/lf sequence...
 43771                                  
 43772                                  normal_key:
 43773 000043F4 3C0D                            cmp     al,0Dh          ; Enter?
 43774 000043F6 741C                            je	short select_done ; yes
 43775 000043F8 3C08                            cmp     al,08h          ; backspace?
 43776 000043FA 7504                            jne	short not_backspace ; no
 43777 000043FC BBFEFF                          mov     bx,-2 ; 0FFFEh	; yes, special return code
 43778 000043FF C3                              retn			;
 43779                                  not_backspace:
 43780 00004400 2C30                            sub     al,'0'          ; is greater than '0'?
 43781 00004402 76C8                            jbe	short to_input_key ; no
 43782 00004404 3A06[454B]                      cmp     al,[bMaxBlock]  ; is less than or equal to the maximum digit?
 43783 00004408 77C2                            ja	short to_input_key ; no
 43784 0000440A A2[444B]                        mov	[bDefBlock],al  ;
 43785 0000440D E847FE                          call    print_item      ; redisplay the current selection
 43786 00004410 88C3                            mov     bl,al           ; set new selection
 43787 00004412 EBB2                            jmp	short print2
 43788                                  
 43789                                  select_done:
 43790 00004414 B700                            mov     bh,0            ; return a full 16-bit value (for indexing)
 43791 00004416 88D8                            mov     al,bl           ;
 43792 00004418 0430                            add     al,'0'          ; convert it into a digit, then display it
 43793                                  
 43794                                  	; fall into disp_input
 43795                                  
 43796                                  ; 16/04/2019 - Retro DOS v4.0
 43797                                  
 43798                                  ;----------------------------------------------------------------------------
 43799                                  ;
 43800                                  ;   disp_input:  display a single character + cr/lf
 43801                                  ;
 43802                                  ;   INPUT
 43803                                  ;       AL == character to display
 43804                                  ;
 43805                                  ;   OUTPUT
 43806                                  ;       None
 43807                                  ;
 43808                                  ;   OTHER REGS USED
 43809                                  ;       None
 43810                                  ;
 43811                                  ;   NOTES
 43812                                  ;       This function is used not only for the menu input selection but
 43813                                  ;       also for the interactive line prompting (the y/n/a thing).
 43814                                  ;
 43815                                  ;   HISTORY
 43816                                  ;       Created 16-Mar-1992 by JeffPar
 43817                                  ;
 43818                                  ;----------------------------------------------------------------------------
 43819                                  
 43820                                  
 43821                                  disp_input:
 43822 0000441A 50                      	push	ax
 43823                                  	;cmp	al,' '
 43824                                  	;jae	short disp_ok
 43825                                  	;mov	al,' '
 43826                                  	; 10/09/2023 - Retro DOS v4.2 IO:SYS (Optimization)
 43827 0000441B B220                    	mov	dl,' ' ; 20h
 43828 0000441D 38D0                    	cmp	al,dl
 43829 0000441F 7602                    	jna	short disp_input_ok
 43830                                  disp_ok:
 43831 00004421 88C2                    	mov	dl,al
 43832                                  disp_input_ok:
 43833 00004423 B402                    	mov	ah,STD_CON_OUTPUT ; 2
 43834 00004425 CD21                    	int	21h
 43835 00004427 BA[EE4E]                	mov	dx,crlfm
 43836 0000442A E8E504                  	call	print
 43837 0000442D 58                      	pop	ax
 43838 0000442E C3                      	retn
 43839                                  
 43840                                  ;----------------------------------------------------------------------------
 43841                                  
 43842                                  disp_num:
 43843 0000442F 53                              push    bx
 43844 00004430 0430                            add     al,'0'
 43845 00004432 B40A                            mov     ah,0Ah
 43846 00004434 8B1E[3A4B]                      mov     bx,[bMenuColor]
 43847 00004438 B90100                          mov     cx,1
 43848 0000443B CD10                            int     10h
 43849 0000443D 5B                              pop     bx
 43850 0000443E C3                              retn
 43851                                  
 43852                                  ;----------------------------------------------------------------------------
 43853                                  ;
 43854                                  ;   show_status:  display current interactive mode setting (on/off/none)
 43855                                  ;
 43856                                  ;   INPUT
 43857                                  ;       None
 43858                                  ;
 43859                                  ;   OUTPUT
 43860                                  ;       None
 43861                                  ;
 43862                                  ;   OTHER REGS USED
 43863                                  ;       None
 43864                                  ;
 43865                                  ;   NOTES
 43866                                  ;       None
 43867                                  ;
 43868                                  ;   HISTORY
 43869                                  ;       Created 16-Mar-1992 by JeffPar
 43870                                  ;
 43871                                  ;----------------------------------------------------------------------------
 43872                                  
 43873                                  show_status:
 43874 0000443F 53                              push    bx              ; BL = video page #
 43875 00004440 8B1E[3A4B]                      mov     bx,[bMenuColor]
 43876 00004444 B403                            mov     ah,03h          ; get cursor position
 43877 00004446 CD10                            int     10h             ;
 43878 00004448 52                              push    dx              ; save it
 43879 00004449 B402                            mov     ah,02h          ; set cursor position
 43880 0000444B 8B16[3D4B]                      mov     dx,[bLastCol]   ; set correct row/col
 43881 0000444F F606[3F4B]01                    test    byte [bDisableUI],1
 43882 00004454 740C                            jz	short show_onoff ; just show on/off
 43883 00004456 B200                            mov     dl,0            ;
 43884 00004458 CD10                            int     10h             ;
 43885 0000445A B8200A                          mov     ax,0A20h        ; write multiple spaces
 43886 0000445D B95000                          mov     cx,80           ; 80 of them, to be exact
 43887                                  	; 10/09/2023
 43888                                  	;int	10h             ; to obliterate the status line
 43889 00004460 EB11                            jmp     short show_done ;
 43890                                  show_onoff: 
 43891 00004462 CD10                            int     10h
 43892                                  		; - VIDEO - WRITE CHARACTERS ONLY AT CURSOR POSITION
 43893                                  		; AL = character, BH = display page - alpha mode
 43894                                  		; BL = color of character (graphics mode, PCjr only)
 43895                                  		; CX = number of times to write character
 43896                                  
 43897 00004464 A0[9D51]                        mov     al,[_$NO]	; assume OFF
 43898 00004467 803E[434B]01                    cmp     byte [bQueryOpt],1 ; is interactive mode on?
 43899 0000446C 7503                            jne	short show_noton ; no
 43900 0000446E A0[9951]                        mov     al,[_$YES]	; yes
 43901                                  show_noton:                     ;
 43902 00004471 B40E                            mov     ah,0Eh          ; write TTY
 43903                                  show_done:	; 10/09/2023
 43904 00004473 CD10                            int     10h             ;
 43905                                  ;show_done:                     ;
 43906 00004475 5A                              pop     dx              ;
 43907 00004476 B402                            mov     ah,02h          ;
 43908 00004478 CD10                            int     10h             ; restore original cursor position
 43909 0000447A 5B                              pop     bx              ;
 43910 0000447B C3                              retn			;
 43911                                  
 43912                                  ; 16/04/2019 - Retro DOS v4.0
 43913                                  
 43914                                  ;----------------------------------------------------------------------------
 43915                                  ;
 43916                                  ;   skip_token: advances ES:SI/CX past the current token
 43917                                  ;
 43918                                  ;   INPUT
 43919                                  ;    ES:SI -> position in config.sys
 43920                                  ;       CX == remaining bytes in config.sys
 43921                                  ;
 43922                                  ;   OUTPUT
 43923                                  ;       CF set if EOL/EOF hit
 43924                                  ;       AL == 1st char of delimiter
 43925                                  ;    ES:SI -> just past the delimiter
 43926                                  ;       CX == # bytes remaining from that point
 43927                                  ;
 43928                                  ;   OTHER REGS USED
 43929                                  ;       AX
 43930                                  ;
 43931                                  ;   NOTES
 43932                                  ;       None
 43933                                  ;
 43934                                  ;   HISTORY
 43935                                  ;       Created 16-Mar-1992 by JeffPar
 43936                                  ;
 43937                                  ;----------------------------------------------------------------------------
 43938                                  
 43939                                  skip_token:
 43940 0000447C E84D00                          call    get_char
 43941 0000447F 7210                            jc	short skip_token_done
 43942 00004481 E8B401                          call    any_delim
 43943 00004484 75F6                            jne	short skip_token
 43944                                  skip_check_eol:
 43945 00004486 3C0D                            cmp     al,cr ; 0Dh
 43946 00004488 7406                            je	short skip_token_eol
 43947 0000448A 3C0A                            cmp     al,lf ; 0Ah
 43948 0000448C 7402                            je	short skip_token_eol
 43949 0000448E F8                              clc
 43950                                          ;jmp	short skip_token_done
 43951 0000448F C3                      	retn
 43952                                  skip_token_eol:
 43953 00004490 F9                              stc
 43954                                  skip_token_done:
 43955 00004491 C3                              retn
 43956                                  
 43957                                  ;----------------------------------------------------------------------------
 43958                                  ;
 43959                                  ;   skip_delim: advances ES:SI/CX past the current delimiter
 43960                                  ;
 43961                                  ;   INPUT
 43962                                  ;    ES:SI -> position in config.sys
 43963                                  ;       CX == remaining bytes in config.sys
 43964                                  ;
 43965                                  ;   OUTPUT
 43966                                  ;       CF set if EOF hit
 43967                                  ;       AL == 1st char of token
 43968                                  ;    ES:SI -> just past the token
 43969                                  ;       CX == # bytes remaining from that point
 43970                                  ;    ES:BX -> new token (since ES:SI is already pointing 1 byte past token)
 43971                                  ;
 43972                                  ;   OTHER REGS USED
 43973                                  ;       AX
 43974                                  ;
 43975                                  ;   NOTES
 43976                                  ;       None
 43977                                  ;
 43978                                  ;   HISTORY
 43979                                  ;       Created 16-Mar-1992 by JeffPar
 43980                                  ;
 43981                                  ;----------------------------------------------------------------------------
 43982                                  
 43983                                  skip_delim:	; returns carry set if eol/eof
 43984 00004492 E83700                          call    get_char        ;
 43985 00004495 8D5CFF                          lea     bx,[si-1]       ; also returns BX -> next token
 43986 00004498 72F7                            jc	short skip_token_done ;
 43987 0000449A E8AB01                          call    delim           ;
 43988 0000449D 74F3                            je	short skip_delim ;
 43989 0000449F EBE5                            jmp	short skip_check_eol  ; 13/05/2019
 43990                                  
 43991                                  ;----------------------------------------------------------------------------
 43992                                  ;
 43993                                  ;   skip_opt_line: same as skip_line provided AL != LF
 43994                                  ;
 43995                                  ;   INPUT
 43996                                  ;       AL == last character read
 43997                                  ;    ES:SI -> position in config.sys
 43998                                  ;       CX == remaining bytes in config.sys
 43999                                  ;
 44000                                  ;   OUTPUT
 44001                                  ;       CF set if EOF hit
 44002                                  ;       AL == 1st char of new line
 44003                                  ;    ES:SI -> just past 1st char of new line
 44004                                  ;       CX == # bytes remaining from that point
 44005                                  ;
 44006                                  ;   OTHER REGS USED
 44007                                  ;       AX
 44008                                  ;
 44009                                  ;   NOTES
 44010                                  ;       In other words, the purpose here is to skip to the next line,
 44011                                  ;       unless ES:SI is already sitting at the front of the next line (which
 44012                                  ;       it would be if the last character fetched -- AL -- was a linefeed)
 44013                                  ;
 44014                                  ;   HISTORY
 44015                                  ;       Created 16-Mar-1992 by JeffPar
 44016                                  ;
 44017                                  ;----------------------------------------------------------------------------
 44018                                  
 44019                                  ; 03/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 44020                                  ;skip_opt_line:
 44021                                  ;	cmp     al,lf ; 0Ah
 44022                                  ;	je	short skip_line_done
 44023                                       
 44024                                  	; fall into skip_line
 44025                                  
 44026                                  ;----------------------------------------------------------------------------
 44027                                  ;
 44028                                  ;   skip_line: skip to the next line
 44029                                  ;
 44030                                  ;   INPUT
 44031                                  ;    ES:SI -> position in config.sys
 44032                                  ;       CX == remaining bytes in config.sys
 44033                                  ;
 44034                                  ;   OUTPUT
 44035                                  ;       CF set if EOF hit
 44036                                  ;    ES:SI -> just past 1st char of new line
 44037                                  ;       CX == # bytes remaining from that point
 44038                                  ;
 44039                                  ;   OTHER REGS USED
 44040                                  ;       AX
 44041                                  ;
 44042                                  ;   NOTES
 44043                                  ;       None
 44044                                  ;
 44045                                  ;   HISTORY
 44046                                  ;       Created 16-Mar-1992 by JeffPar
 44047                                  ;
 44048                                  ;----------------------------------------------------------------------------
 44049                                  
 44050                                  skip_line:
 44051 000044A1 E82800                          call    get_char
 44052 000044A4 7204                            jc	short skip_line_done
 44053                                  skip_opt_line:	; 03/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 44054 000044A6 3C0A                            cmp     al,lf ; 0Ah
 44055 000044A8 75F7                            jne	short skip_line
 44056                                  skip_line_done:
 44057                                  num_done:	; 18/12/2022
 44058 000044AA C3                              retn
 44059                                  
 44060                                  ;----------------------------------------------------------------------------
 44061                                  ;
 44062                                  ;   get_number: return binary equivalent of numeric string
 44063                                  ;
 44064                                  ;   INPUT
 44065                                  ;    ES:SI -> position in config.sys
 44066                                  ;       CX == remaining bytes in config.sys
 44067                                  ;
 44068                                  ;   OUTPUT
 44069                                  ;       AL == non-digit encountered
 44070                                  ;       BX == binary #
 44071                                  ;    ES:SI -> just past 1st non-digit
 44072                                  ;       CX == # bytes remaining from that point
 44073                                  ;
 44074                                  ;   OTHER REGS USED
 44075                                  ;       AX
 44076                                  ;
 44077                                  ;   NOTES
 44078                                  ;       None
 44079                                  ;
 44080                                  ;   HISTORY
 44081                                  ;       Created 16-Mar-1992 by JeffPar
 44082                                  ;
 44083                                  ;----------------------------------------------------------------------------
 44084                                  
 44085                                  ; 13/05/2019
 44086                                  
 44087                                  get_number:
 44088 000044AB 29DB                            sub     bx,bx           ; BX = result
 44089                                  num_loop:
 44090 000044AD E81C00                          call    get_char        ;
 44091 000044B0 72F8                            jc	short num_done	;
 44092 000044B2 3C30                            cmp     al,'0'          ; convert to value
 44093 000044B4 72F4                            jb	short num_done	; no more number
 44094 000044B6 3C39                            cmp     al,'9'          ;
 44095 000044B8 77F0                            ja	short num_done	;
 44096 000044BA 50                              push    ax              ;
 44097 000044BB B80A00                          mov     ax,10           ;
 44098 000044BE 52                              push    dx              ;
 44099 000044BF F7E3                            mul     bx              ;
 44100 000044C1 5A                              pop     dx              ;
 44101 000044C2 89C3                            mov     bx,ax           ;
 44102 000044C4 58                              pop     ax              ;
 44103 000044C5 2C30                            sub     al,'0'          ;
 44104 000044C7 98                              cbw                     ;
 44105 000044C8 01C3                            add     bx,ax           ;
 44106 000044CA EBE1                            jmp	short num_loop	;
 44107                                  
 44108                                  	; 18/12/2022
 44109                                  ;num_done:
 44110                                          ;retn
 44111                                  
 44112                                  ;----------------------------------------------------------------------------
 44113                                  ;
 44114                                  ;   get_char:  return next character, advance ES:SI, and decrement CX
 44115                                  ;
 44116                                  ;   INPUT
 44117                                  ;    ES:SI -> position in config.sys
 44118                                  ;       CX == remaining bytes in config.sys
 44119                                  ;
 44120                                  ;   OUTPUT
 44121                                  ;       AL == next character
 44122                                  ;    ES:SI -> just past next character
 44123                                  ;       CX == # bytes remaining from that point
 44124                                  ;
 44125                                  ;   OTHER REGS USED
 44126                                  ;       AX
 44127                                  ;
 44128                                  ;   NOTES
 44129                                  ;       None
 44130                                  ;
 44131                                  ;   HISTORY
 44132                                  ;       Created 16-Mar-1992 by JeffPar
 44133                                  ;
 44134                                  ;----------------------------------------------------------------------------
 44135                                  
 44136                                  get_char:
 44137 000044CC 83E901                          sub     cx,1            ; use SUB to set carry,zero
 44138 000044CF 7205                            jb	short get_fail	; out of data
 44139                                          ;lods	byte ptr es:[si] ;
 44140 000044D1 26                      	es	
 44141 000044D2 AC                      	lodsb
 44142 000044D3 88C4                            mov     ah,al           ;
 44143 000044D5 C3                              retn			;
 44144                                  get_fail:                       ; restore CX to zero
 44145 000044D6 B90000                          mov     cx,0            ; leave carry set, zero not set
 44146                                  nearby_ret:
 44147 000044D9 C3                              retn
 44148                                  
 44149                                  ;----------------------------------------------------------------------------
 44150                                  ;
 44151                                  ;   query_user: ask user whether to execute current config.sys command
 44152                                  ;
 44153                                  ;   INPUT
 44154                                  ;       AL == current command code
 44155                                  ;    ES:SI -> current command line in config.sys
 44156                                  ;    config_cmd == current command code, but with QUERY bit intact
 44157                                  ;                  (00h used to generate "Process AUTOEXEC.BAT" prompt)
 44158                                  ;
 44159                                  ;   OUTPUT
 44160                                  ;       CF set if command should be ignored (it is also REM'ed out)
 44161                                  ;
 44162                                  ;   OTHER REGS USED
 44163                                  ;       BX, CX, DX, DI
 44164                                  ;
 44165                                  ;   NOTES
 44166                                  ;       None
 44167                                  ;
 44168                                  ;   HISTORY
 44169                                  ;       Created 16-Mar-1992 by JeffPar
 44170                                  ;
 44171                                  ;----------------------------------------------------------------------------
 44172                                  
 44173                                  	; 31/12/2022 - Retro UNIX 386 v4.2 (Modified MSDOS 6.21 IO.SYS)
 44174                                  	; (SYSINIT:4AE5h)
 44175                                  
 44176                                  	; 12/12/2022
 44177                                  query_user:
 44178 000044DA F606[434B]04                    test    byte [bQueryOpt],4	; answer no to everything?
 44179                                  	; 01/01/2023
 44180 000044DF 7403                    	jz	short qu_1		;
 44181 000044E1 E9B900                  	jmp	skip_all
 44182                                  	; 12/12/2022
 44183                                  	;;jmp	short skip_all		;
 44184                                  	;jnz	short skip_all
 44185                                  qu_1:
 44186 000044E4 F606[434B]02            	test    byte [bQueryOpt],2	; answer yes to everything?
 44187 000044E9 75EE                            jnz	short nearby_ret	; yes (and return carry clear!)
 44188 000044EB 50                              push    ax                      ;
 44189 000044EC A0[F018]                        mov     al,[config_cmd]         ;
 44190 000044EF F606[434B]01                    test    byte [bQueryOpt],1	; query every command?
 44191 000044F4 7506                            jnz	short query_all		; yes
 44192 000044F6 A880                            test    al,CONFIG_OPTION_QUERY  ;
 44193                                  	; 01/01/2023
 44194 000044F8 7502                    	jnz	short query_all		;
 44195                                  	; 12/12/2022
 44196                                  	;;jmp	short do_cmd		;
 44197                                  	;jz	short do_cmd ; cf=0
 44198                                  
 44199                                  	; 01/01/2023
 44200 000044FA 58                      	pop	ax
 44201 000044FB C3                      	retn
 44202                                  
 44203                                  query_all:
 44204                                  
 44205                                  ;   Search for the command code (AL) in "comtab", and then print
 44206                                  ;   out the corresponding keyword, followed by the rest of the actual
 44207                                  ;   line pointed to by ES:SI
 44208                                  
 44209 000044FC 56                              push    si                      ; save pointer to rest of CONFIG.SYS line
 44210 000044FD BA[F351]                        mov     dx,_$AutoPrmpt    	;
 44211 00004500 247F                            and     al,~CONFIG_OPTION_QUERY ; 7Fh
 44212 00004502 7450                            jz	short generic_prompt	; config_cmd must have been 0
 44213                                  
 44214 00004504 88C6                            mov     dh,al                   ; save config_cmd in DH
 44215 00004506 29DB                            sub     bx,bx                   ;
 44216 00004508 BF[904B]                        mov     di,comtab		;
 44217                                  find_match:                             ;
 44218 0000450B 8A1D                            mov     bl,[di]                 ; get size of current keyword
 44219 0000450D 08DB                            or      bl,bl                   ;
 44220 0000450F 7425                            jz	short line_print	; end of table
 44221 00004511 47                              inc     di                      ;
 44222 00004512 3A01                            cmp     al,[di+bx]              ; match?
 44223 00004514 7405                            je	short cmd_match		; yes
 44224 00004516 8D7901                          lea     di,[di+bx+1]            ; otherwise, skip this command code
 44225                                  	; 13/05/2019	
 44226 00004519 EBF0                            jmp	short find_match	; loop
 44227                                  cmd_match:                              ;
 44228 0000451B 8A4DFF                          mov     cl,[di-1]               ;
 44229 0000451E B500                            mov	ch,0                    ;
 44230 00004520 B402                            mov     ah,STD_CON_OUTPUT ; 2
 44231                                  cmd_print:                              ;
 44232 00004522 8A05                            mov     al,[di]                 ;
 44233 00004524 47                              inc     di                      ;
 44234 00004525 88C2                            mov     dl,al                   ;
 44235 00004527 CD21                            int     21h                     ;
 44236 00004529 E2F7                            loop    cmd_print               ;
 44237 0000452B B23D                            mov     dl,'='                  ;
 44238 0000452D 80FE56                          cmp     dh,CONFIG_SET  ; 'V'    ; for SET commands, don't display a '='
 44239 00004530 7502                            jne	short cmd_notset	;
 44240 00004532 B220                            mov     dl,' '                  ;
 44241                                  cmd_notset:
 44242 00004534 CD21                            int     21h                     ; '=' looks funny on SET commands
 44243                                  line_print:                             ;
 44244                                  	;lods	byte ptr es:[si]        ;
 44245 00004536 26                              es
 44246 00004537 AC                      	lodsb
 44247 00004538 08C0                    	or      al,al                   ;
 44248 0000453A 7502                            jnz	short non_null		;
 44249 0000453C B020                            mov     al,' '                  ;
 44250                                  non_null:                               ;
 44251 0000453E 3C20                            cmp     al,' '                  ; control code?
 44252 00004540 720F                            jb	short prompt_user	; yes, assume end of line
 44253 00004542 7505                            jne	short non_space		;
 44254                                          ; 10/09/2023
 44255 00004544 263804                  	cmp	[es:si],al ; 20h
 44256                                  	;cmp	byte [es:si],' '	;
 44257 00004547 7208                            jb	short prompt_user	;
 44258                                  non_space:                              ;
 44259 00004549 88C2                            mov     dl,al                   ;
 44260 0000454B B402                            mov     ah,STD_CON_OUTPUT ; 2	;
 44261 0000454D CD21                            int     21h                     ;
 44262 0000454F EBE5                            jmp	short line_print	;
 44263                                  
 44264                                  prompt_user:                            ;
 44265 00004551 BA[9151]                        mov     dx,_$InterPrmpt		;
 44266                                  
 44267                                  generic_prompt:
 44268 00004554 E8BB03                          call    print                   ;
 44269                                  input_loop:                             ;
 44270 00004557 B400                            mov     ah,0                    ; read a key
 44271 00004559 CD16                            int     16h                     ;
 44272 0000455B 08C0                            or      al,al                   ; is it a function key?
 44273 0000455D 750F                            jnz	short not_func		; no
 44274 0000455F 80FC3F                          cmp     ah,3Fh                  ; F5 function key?
 44275 00004562 75F3                            jne	short input_loop	; no
 44276 00004564 A0[9D51]                        mov     al,[_$NO]                  ;
 44277 00004567 800E[434B]04                    or      byte [bQueryOpt],4	; no more queries
 44278 0000456C EB21                            jmp     short legal_char        ;
 44279                                  not_func:
 44280 0000456E 24DF                            and     al,~20h ; 0DFh		; converting to upper case
 44281 00004570 3A06[9D51]                      cmp     al,[_$NO]		; verify character is legal
 44282 00004574 7419                            je	short legal_char	;
 44283 00004576 3A06[9951]                      cmp     al,[_$YES]		;
 44284 0000457A 7413                            je	short legal_char	;
 44285 0000457C 803E[F018]00                    cmp     byte [config_cmd],0	;
 44286 00004581 74D4                            je	short input_loop	; don't allow Esc on this query
 44287 00004583 3C1B                            cmp     al,1Bh                  ; Esc?
 44288 00004585 75D0                            jne	short input_loop	;
 44289 00004587 800E[434B]02                    or      byte [bQueryOpt],2	; no more interactive boot prompts
 44290 0000458C A0[9951]                        mov     al,[_$YES]
 44291                                  legal_char:                             ;
 44292 0000458F E888FE                          call    disp_input              ;
 44293 00004592 5E                              pop     si                      ; restore pointer to rest of CONFIG.SYS line
 44294                                  
 44295 00004593 3A06[9D51]                      cmp     al,[_$NO]		; process line?
 44296 00004597 7403                            je	short skip_cmd		; no
 44297                                  	; 12/12/2022
 44298 00004599 F8                      	clc
 44299                                  do_cmd:
 44300 0000459A 58                      	pop     ax			;
 44301                                  	; 12/12/2022
 44302                                  	; cf=0
 44303                                  	;clc				; just do the command
 44304 0000459B C3                      	retn
 44305                                  
 44306                                  skip_cmd:
 44307 0000459C 58                      	pop     ax			;
 44308                                  skip_all:
 44309 0000459D B430                    	mov     ah,CONFIG_REM ; '0'	; fake out the rest of sysinit's processing
 44310 0000459F F9                      	stc
 44311 000045A0 C3                      	retn
 44312                                  
 44313                                  ;----------------------------------------------------------------------------
 44314                                  ;
 44315                                  ;   print_error: displays multi-config error conditions
 44316                                  ;
 44317                                  ;   INPUT
 44318                                  ;    Carry set to pause, clear to not
 44319                                  ;    ES:SI -> current command line in config.sys
 44320                                  ;
 44321                                  ;   OUTPUT
 44322                                  ;       None
 44323                                  ;
 44324                                  ;   OTHER REGS USED
 44325                                  ;       None
 44326                                  ;
 44327                                  ;   NOTES
 44328                                  ;       None
 44329                                  ;
 44330                                  ;   HISTORY
 44331                                  ;       Created 16-Mar-1992 by JeffPar
 44332                                  ;
 44333                                  ;----------------------------------------------------------------------------
 44334                                  
 44335                                  print_error:
 44336 000045A1 50                              push    ax
 44337 000045A2 53                              push    bx
 44338 000045A3 51                              push    cx
 44339 000045A4 52                              push    dx
 44340 000045A5 1E                              push    ds
 44341 000045A6 0E                              push    cs
 44342 000045A7 1F                              pop     ds
 44343 000045A8 9C                              pushf
 44344 000045A9 E820FC                          call    get_linenum
 44345 000045AC 891E[AF02]                      mov     [linecount],bx
 44346 000045B0 E8C3E7                          call    error_line
 44347 000045B3 9D                              popf
 44348 000045B4 7319                            jnc	short pe_ret
 44349 000045B6 BA[5B50]                        mov     dx,_$PauseMsg
 44350 000045B9 E85603                          call    print
 44351 000045BC B8070C                          mov     ax,0C07h		; flush input buffer, then wait for key
 44352 000045BF CD21                            int     21h			; wait for a key
 44353 000045C1 08C0                            or      al,al			; extended key?
 44354 000045C3 7504                            jnz	short pe_1		; no
 44355 000045C5 B407                            mov     ah,07h			; yes
 44356 000045C7 CD21                            int     21h			; eat it too
 44357                                  pe_1:     
 44358 000045C9 BA[EE4E]                	mov     dx,crlfm
 44359 000045CC E84303                          call    print
 44360                                  pe_ret: 
 44361 000045CF 1F                      	pop     ds
 44362 000045D0 5A                              pop     dx
 44363 000045D1 59                              pop     cx
 44364 000045D2 5B                              pop     bx
 44365 000045D3 58                              pop     ax
 44366 000045D4 C3                      	retn
 44367                                  
 44368                                  ;----------------------------------------------------------------------------
 44369                                  
 44370                                  ;   This function is very simple: it merely prepends a "/D" to the
 44371                                  ;   command-line for the shell; this (undocumented) switch disables
 44372                                  ;   AUTOEXEC.BAT processing and the date/time prompt that is usually
 44373                                  ;   displayed when there's no AUTOEXEC.BAT.
 44374                                  
 44375                                  disable_autoexec:
 44376                                  	; MSDOS 6.21 IO.SYS -  SYSINIT:4BE2h
 44377                                  	; 17/04/2019 - Retro DOS v4.0
 44378                                  
 44379 000045D5 F606[434B]04            	test	byte [bQueryOpt],4
 44380 000045DA 7443                    	jz	short disable_exit
 44381 000045DC F606[394B]01            	test	byte [dae_flag],1
 44382 000045E1 753C                    	jnz	short disable_exit
 44383 000045E3 800E[394B]01            	or	byte [dae_flag],1
 44384                                          ;or	byte [bQueryOpt],2 ; MSDOS 6.0 
 44385 000045E8 810E[434B]0201          	or      word [bQueryOpt],102h	; [bDefBlock] = 1
 44386 000045EE BA4420                  	mov     dx,'D ' ; 2044h
 44387                                  dae_1:
 44388                                  	; 03/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 44389 000045F1 A0[784A]                        mov	al,[def_swchr]
 44390                                  	;mov	al,[command_line-1]     ; get default switchchar
 44391 000045F4 08C0                            or      al,al                   ; anything there?
 44392 000045F6 7427                            jz	short disable_exit	; no, disable_autoexec already called
 44393 000045F8 8A1E[794A]                      mov     bl,[command_line]       ;
 44394 000045FC B700                            mov     bh,0                    ; BX == command-line length
 44395 000045FE 89D9                            mov     cx,bx                   ;
 44396 00004600 80C303                          add     bl,3                    ;
 44397 00004603 80FB7E                          cmp     bl,126                  ;
 44398 00004606 7717                            ja	short disable_exit	;
 44399 00004608 881E[794A]                      mov     [command_line],bl       ; update length
 44400 0000460C 81C3[7A4A]                      add     bx,command_line+1	; make sure we move the NULL too
 44401 00004610 41                              inc     cx                      ; (just for consistency sake)
 44402                                  disable_loop:                           ;
 44403 00004611 8A67FD                          mov     ah,[bx-3]               ;
 44404 00004614 8827                            mov     [bx],ah                 ;
 44405 00004616 4B                              dec     bx                      ;
 44406 00004617 E2F8                            loop    disable_loop            ;
 44407 00004619 8847FE                          mov     [bx-2],al               ;
 44408                                  	;mov	word [bx-1],'D ' ; 2044h ; /D is stuffed into place now
 44409 0000461C 8957FF                  	mov	[bx-1],dx  ; MSDOS 6.21 IO.SYS - SYSINIT:4C29h		
 44410                                          ;mov	byte [command_line-1],0 ;
 44411                                  disable_exit:                           ;
 44412 0000461F C3                              retn
 44413                                  
 44414                                  CheckQueryOpt:	; MSDOS 6.21 IO.YSYS - SYSINIT:4C2Dh
 44415 00004620 803E[434B]01            	cmp     byte [bQueryOpt],1
 44416 00004625 75F8                    	jnz     short disable_exit
 44417 00004627 F606[394B]02            	test	byte [dae_flag],2
 44418 0000462C 75F1                    	jnz     short disable_exit
 44419 0000462E 800E[394B]02            	or      byte [dae_flag],2
 44420                                  	;mov	dx,' Y' ; (MASM syntax) ; 2059h
 44421                                  	; 10/09/2023 (BugFix)
 44422 00004633 BA5920                  	mov	dx,'Y ' ; (NASM syntax) ; 2059h
 44423 00004636 EBB9                    	jmp     short dae_1
 44424                                  
 44425                                  ;endif  ;MULTI_CONFIG
 44426                                  
 44427                                  ;%endif	; 02/11/2022
 44428                                  
 44429                                  
 44430                                  ; 19/04/2019 - Retro DOS v4.0
 44431                                  
 44432                                  ;----------------------------------------------------------------------------
 44433                                  ;
 44434                                  ; procedure : delim
 44435                                  ;
 44436                                  ;----------------------------------------------------------------------------
 44437                                  
 44438                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 44439                                  ; (SYSINIT:4C45h)
 44440                                  
 44441                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 44442                                  ;%if 0
 44443                                  ;;ifdef	MULTI_CONFIG
 44444                                  ;
 44445                                  any_delim:
 44446 00004638 3C0D                    	cmp	al,cr
 44447 0000463A 7427                    	je	short delim_ret
 44448 0000463C 3C0A                    	cmp	al,lf
 44449 0000463E 7423                    	je	short delim_ret
 44450 00004640 3C5B                    	cmp	al,'['
 44451 00004642 741F                    	je	short delim_ret
 44452 00004644 3C5D                    	cmp	al,']'
 44453 00004646 741B                    	je	short delim_ret
 44454                                  ;
 44455                                  ;;endif ;MULTI_CONFIG
 44456                                  ;%endif ; 02/11/2022
 44457                                  
 44458                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 44459                                  	; (SYSINIT:3450h)	
 44460                                  delim:
 44461 00004648 3C2F                    	cmp	al,'/'		; ibm will assume "/" as an delimeter.
 44462 0000464A 7417                    	je	short delim_ret
 44463                                  
 44464 0000464C 3C00                    	cmp	al,0		; special case for sysinit!!!
 44465 0000464E 7413                    	je	short delim_ret
 44466                                  
 44467                                  org_delim:			; used by organize routine except for getting
 44468 00004650 3C20                    	cmp	al,' '          ; the filename.
 44469 00004652 740F                    	je	short delim_ret
 44470 00004654 3C09                            cmp     al,tab ; 9
 44471 00004656 740B                    	je	short delim_ret
 44472 00004658 3C3D                    	cmp	al,'='
 44473 0000465A 7407                    	je	short delim_ret
 44474 0000465C 3C2C                    	cmp	al,','
 44475 0000465E 7403                    	je	short delim_ret
 44476 00004660 3C3B                    	cmp	al,';'
 44477                                  
 44478                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 44479                                  
 44480                                  ; 04/01/2023 - Retro DOS v4.2
 44481                                  ;ifdef	MULTI_CONFIG
 44482                                  ;   Make sure there's no chance of a false EOF indication
 44483 00004662 F8                      	clc
 44484                                  ;endif
 44485                                  	; 02/11/2022
 44486                                  delim_ret:
 44487                                  	; 04/01/2023
 44488                                  	; cf = 0
 44489                                  nl_ret:	; 10/09/2023
 44490 00004663 C3                      	retn
 44491                                  
 44492                                  ;----------------------------------------------------------------------------
 44493                                  ;
 44494                                  ; procedure : newline
 44495                                  ;
 44496                                  ;  newline returns with first character of next line
 44497                                  ;
 44498                                  ;----------------------------------------------------------------------------
 44499                                  
 44500                                  newline:
 44501 00004664 E80600                  	call	getchr			;skip non-control characters
 44502 00004667 72FA                    	jc	short nl_ret
 44503 00004669 3C0A                    	cmp	al,lf			;look for line feed
 44504 0000466B 75F7                    	jne	short newline
 44505                                  
 44506                                  	; 10/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 44507                                  	;call	getchr
 44508                                  ;nl_ret:
 44509                                  	;retn
 44510                                  	; 10/09/2023
 44511                                  	;jmp	short getchr
 44512                                  
 44513                                  ; 10/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 44514                                  %if 1
 44515                                  
 44516                                  ;----------------------------------------------------------------------------
 44517                                  ;
 44518                                  ; procedure : getchr
 44519                                  ;
 44520                                  ;----------------------------------------------------------------------------
 44521                                  
 44522                                  	; 24/10/2022
 44523                                  getchr:
 44524                                  	; 12/12/2022
 44525                                  	;push	cx
 44526                                  	;mov	cx,[count]
 44527                                  	;jcxz	nochar
 44528                                  	; 12/12/2022
 44529 0000466D 833E[5603]01            	cmp	word [count],1 
 44530 00004672 720F                    	jb	short nochar ; cf=1 ([count] = 0)
 44531                                  	
 44532 00004674 8B36[5A03]              	mov	si,[chrptr]
 44533 00004678 268A04                  	mov	al,[es:si]
 44534 0000467B FF0E[5603]              	dec	word [count]
 44535 0000467F FF06[5A03]              	inc	word [chrptr]
 44536                                  	; 12/12/202
 44537                                  	; cf=0
 44538                                  	;clc
 44539                                  ;get_ret:
 44540                                  	;pop	cx
 44541                                  	;retn
 44542                                  nochar: 
 44543                                  	; 12/12/2022
 44544                                  	; cf=1
 44545                                  	;stc
 44546                                  	;jmp	short get_ret
 44547                                  	
 44548 00004683 C3                      	retn
 44549                                  %endif
 44550                                  
 44551                                  ;----------------------------------------------------------------------------
 44552                                  ; 
 44553                                  ; procedure : mapcase
 44554                                  ;
 44555                                  ;----------------------------------------------------------------------------
 44556                                  
 44557                                  	; 02/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 44558                                  
 44559                                  	; 04/01/2023 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 44560                                  	; (SYSINIT:4C7Eh)
 44561                                  mapcase:
 44562 00004684 51                      	push	cx
 44563 00004685 56                      	push	si
 44564 00004686 1E                      	push	ds
 44565                                  
 44566 00004687 06                      	push	es
 44567 00004688 1F                      	pop	ds
 44568                                  
 44569                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 44570                                  
 44571                                  ; 04/01/2023 - Retro DOS 4.2
 44572                                  
 44573                                  ;ifdef	MULTI_CONFIG
 44574 00004689 88C3                    	mov	bl,al			; same cmd code this line
 44575                                  ;else
 44576                                  ;	xor	si,si
 44577                                  ;endif
 44578                                  	; 02/11/2022
 44579                                  	; 04/01/2023 - Retro DOS 4.2
 44580                                  	;xor	si, si
 44581                                  
 44582                                  convloop:
 44583 0000468B AC                      	lodsb
 44584 0000468C 3C61                    	cmp	al,'a'
 44585 0000468E 7209                    	jb	short noconv
 44586 00004690 3C7A                    	cmp	al,'z'
 44587 00004692 7705                    	ja	short noconv
 44588 00004694 2C20                    	sub	al,20h
 44589 00004696 8844FF                  	mov	[si-1],al
 44590                                  noconv:
 44591                                  
 44592                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 44593                                  
 44594                                  ; 04/01/2023 - Retro DOS 4.2
 44595                                  ;ifdef	MULTI_CONFIG
 44596                                  
 44597                                  ;   When MULTI_CONFIG enabled, "mapcase" is used to map everything to
 44598                                  ;   upper-case a line at a time, after we've been able to figure out whether
 44599                                  ;   the line is a SET command or not (since we don't want to upper-case
 44600                                  ;   anything after the "=" in a SET)
 44601                                  ;
 44602 00004699 80FB56                  	cmp	bl,CONFIG_SET  ; 'V'	; preserve case for part of the line?
 44603 0000469C 7504                    	jne	short check_eol		; no, just check for end-of-line
 44604 0000469E 3C3D                    	cmp	al,'='                  ; separator between SET var and value?
 44605 000046A0 740A                    	je	short convdone		; yes
 44606                                  check_eol:
 44607 000046A2 3C0D                    	cmp	al,cr
 44608 000046A4 7406                    	je	short convdone
 44609 000046A6 3C0A                    	cmp	al,lf
 44610 000046A8 7402                    	je	short convdone
 44611                                  ;endif
 44612                                  	; 02/11/2022
 44613 000046AA E2DF                    	loop	convloop
 44614                                  convdone:
 44615 000046AC 1F                      	pop	ds
 44616 000046AD 5E                      	pop	si
 44617 000046AE 59                      	pop	cx
 44618 000046AF C3                      	retn
 44619                                  
 44620                                  ;----------------------------------------------------------------------------
 44621                                  ;
 44622                                  ; procedure : round
 44623                                  ;
 44624                                  ; round the values in memlo and memhi to paragraph boundary.
 44625                                  ; perform bounds check.
 44626                                  ;
 44627                                  ;----------------------------------------------------------------------------
 44628                                  
 44629                                  round:
 44630                                  	; 10/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 44631 000046B0 1E                      	push	ds
 44632 000046B1 0E                      	push	cs
 44633 000046B2 1F                      	pop	ds
 44634                                  
 44635 000046B3 50                      	push	ax
 44636                                  	;mov	ax,[cs:memlo]
 44637 000046B4 A1[6203]                	mov	ax,[memlo]
 44638                                  
 44639 000046B7 E8DDCB                  	call	ParaRound		; para round up
 44640                                  
 44641                                  	;add	[cs:memhi],ax
 44642 000046BA 0106[6403]              	add	[memhi],ax
 44643                                  	;mov	word [cs:memlo],0
 44644 000046BE C706[6203]0000          	mov	word [memlo],0
 44645                                  	;mov	ax,[cs:memhi]		; ax = new memhi
 44646 000046C4 A1[6403]                	mov	ax,[memhi]
 44647                                  	;cmp	ax,[cs:ALLOCLIM]	; if new memhi >= alloclim, error
 44648 000046C7 3B06[A502]              	cmp	ax,[ALLOCLIM]
 44649 000046CB 7320                    	jae	short mem_err
 44650                                  	;test	byte [cs:setdevmarkflag],for_devmark ; 2
 44651 000046CD F606[F518]02            	test	byte [setdevmarkflag],for_devmark ; 2
 44652 000046D2 7416                    	jz	short skip_set_devmarksize
 44653 000046D4 06                      	push	es
 44654 000046D5 56                      	push	si
 44655                                  	;mov	si,[cs:devmark_addr]
 44656 000046D6 8B36[F318]              	mov	si,[devmark_addr]
 44657 000046DA 8EC6                    	mov	es,si
 44658 000046DC 29F0                    	sub	ax,si
 44659 000046DE 48                      	dec	ax
 44660                                  	;mov	[es:3],ax
 44661 000046DF 26A30300                	mov	[es:devmark.size],ax	; paragraph
 44662                                  	;and	byte [cs:setdevmarkflag],not_for_devmark ; 0FDh
 44663 000046E3 8026[F518]FD            	and	byte [setdevmarkflag],not_for_devmark ; 0FDh
 44664 000046E8 5E                      	pop	si
 44665 000046E9 07                      	pop	es
 44666                                  skip_set_devmarksize:
 44667 000046EA 58                      	pop	ax
 44668                                  
 44669                                  	; 10/09/2023
 44670 000046EB 1F                      	pop	ds
 44671                                  
 44672                                  	; 11/12/2022
 44673                                  	; cf = 0
 44674                                  	; 02/11/2022
 44675                                  	;clc	; ? (not needed here)	; clear carry
 44676 000046EC C3                      	retn
 44677                                  
 44678                                  ;----------------------------------------------------------------------------
 44679                                  
 44680                                  mem_err:
 44681                                  	; 11/12/2022
 44682 000046ED 0E                      	push	cs
 44683 000046EE 1F                      	pop	ds
 44684                                  mem_err2:
 44685 000046EF BA[C74F]                	mov	dx,badmem
 44686                                  	;push	cs
 44687                                  	;pop	ds
 44688 000046F2 E81D02                  	call	print
 44689 000046F5 E9D8CB                  	jmp	stall
 44690                                  
 44691                                  ;----------------------------------------------------------------------------
 44692                                  ;
 44693                                  ; procedure : calldev
 44694                                  ;
 44695                                  ;----------------------------------------------------------------------------
 44696                                  
 44697                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 44698                                  	; (SYSINIT:34E0h)
 44699                                  calldev:
 44700 000046F8 2E8E1E[A123]            	mov	ds,[cs:DevEntry+2]
 44701 000046FD 2E031E[9F23]            	add	bx,[cs:DevEntry]	; do a little relocation
 44702 00004702 8B07                    	mov	ax,[bx]
 44703                                  
 44704 00004704 2EFF36[9F23]            	push	word [cs:DevEntry]
 44705 00004709 2EA3[9F23]              	mov	[cs:DevEntry],ax
 44706 0000470D BB[6F03]                	mov	bx,packet
 44707 00004710 2EFF1E[9F23]            	call	far [cs:DevEntry]
 44708 00004715 2E8F06[9F23]            	pop	word [cs:DevEntry]
 44709 0000471A C3                      	retn
 44710                                  
 44711                                  ;----------------------------------------------------------------------------
 44712                                  ;
 44713                                  ; procedure : todigit
 44714                                  ;
 44715                                  ;----------------------------------------------------------------------------
 44716                                  
 44717                                  todigit:
 44718 0000471B 2C30                    	sub	al,'0'
 44719                                  	;jb	short notdig  ; 02/11/2022
 44720                                  	; 12/12/2022
 44721 0000471D 7203                    	jb	short notdig2
 44722                                  	;cmp	al,9
 44723                                  	;ja	short notdig
 44724                                  	;clc
 44725                                  	;retn
 44726                                  	; 12/12/2022
 44727 0000471F 3C0A                    	cmp	al,10
 44728 00004721 F5                      	cmc
 44729                                  notdig:
 44730                                  	;stc
 44731                                  notdig2:
 44732 00004722 C3                      	retn
 44733                                  
 44734                                  ;----------------------------------------------------------------------------
 44735                                  ;
 44736                                  ; procedure : getnum
 44737                                  ;
 44738                                  ; getnum parses a decimal number.
 44739                                  ; returns it in ax, sets zero flag if ax = 0 (may be considered an
 44740                                  ; error), if number is bad carry is set, zero is set, ax=0.
 44741                                  ;
 44742                                  ;----------------------------------------------------------------------------
 44743                                  
 44744                                  getnum:
 44745 00004723 53                      	push	bx
 44746 00004724 31DB                    	xor	bx,bx			; running count is zero
 44747                                  b2:
 44748 00004726 E8F2FF                  	call	todigit 		; do we have a digit ?
 44749 00004729 7247                    	jc	short badnum		; no, bomb
 44750                                  
 44751 0000472B 93                      	xchg	ax,bx			; put total in ax
 44752 0000472C 53                      	push	bx			; save digit (0 to 9)
 44753                                  	;mov	bx,10			; base of arithmetic
 44754                                  	; 12/12/2022
 44755 0000472D B30A                    	mov	bl,10
 44756 0000472F F7E3                    	mul	bx			; shift by one decimal digit
 44757 00004731 5B                      	pop	bx			; get back digit (0 to 9)
 44758 00004732 00D8                    	add	al,bl			; get total
 44759 00004734 80D400                  	adc	ah,0			; make that 16 bits
 44760 00004737 7239                    	jc	short badnum		; too big a number
 44761                                  
 44762 00004739 93                      	xchg	ax,bx			; stash total
 44763                                  
 44764 0000473A E830FF                  	call	getchr			;get next digit
 44765 0000473D 722D                    	jc	short b1		; no more characters
 44766 0000473F 3C20                    	cmp	al,' ' 			; space?
 44767 00004741 741F                    	je	short b15		; then end of digits
 44768 00004743 3C2C                    	cmp	al,',' 			; ',' is a seperator!!!
 44769 00004745 741B                    	je	short b15		; then end of digits.
 44770 00004747 3C09                    	cmp	al, tab ; 9		; tab
 44771 00004749 7417                    	je	short b15
 44772 0000474B 2E3A06[AE02]            	cmp	al,[cs:sepchr]		; allow 0 or special separators
 44773 00004750 7410                    	je	short b15
 44774 00004752 3C2F                    	cmp	al,'/'			; see if another switch follows
 44775                                  	; 12/12/2022
 44776                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 44777                                  	;nop				; cas - remnant of old bad code
 44778                                  	;nop
 44779 00004754 740C                    	je	short b15
 44780 00004756 3C0A                    	cmp	al,lf			; line-feed?
 44781 00004758 7408                    	je	short b15
 44782 0000475A 3C0D                    	cmp	al,cr			; carriage return?
 44783 0000475C 7404                    	je	short b15
 44784 0000475E 08C0                    	or	al,al			; end of line separator?
 44785 00004760 75C4                    	jnz	short b2		; no, try as a valid char...
 44786                                  b15:
 44787 00004762 2EFF06[5603]            	inc	word [cs:count]		; one more character to s...
 44788 00004767 2EFF0E[5A03]            	dec	word [cs:chrptr]	; back up over separator
 44789                                  b1:
 44790 0000476C 89D8                    	mov	ax,bx			; get proper count
 44791 0000476E 09C0                    	or	ax,ax			; clears carry, sets zero accordingly
 44792 00004770 5B                      	pop	bx
 44793 00004771 C3                      	retn
 44794                                  badnum:
 44795                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 44796                                  	;mov	byte [cs:sepchr],0
 44797 00004772 31C0                    	xor	ax,ax			; set zero flag, and ax = 0
 44798                                  	; 12 /12/2022
 44799 00004774 2EA2[AE02]              	mov	[cs:sepchr],al ; 0
 44800 00004778 5B                      	pop	bx
 44801 00004779 F9                      	stc				; and carry set
 44802 0000477A C3                      	retn
 44803                                  
 44804                                  ;****************************************************************************
 44805                                  
 44806                                  setdoscountryinfo:
 44807                                  
 44808                                  ;----------------------------------------------------------------------------
 44809                                  ;input: es:di -> pointer to dos_country_cdpg_info
 44810                                  ;	ds:0  -> buffer.
 44811                                  ;	si = 0
 44812                                  ;	ax = country id
 44813                                  ;	dx = code page id. (if 0, then use ccsyscodepage as a default.)
 44814                                  ;	bx = file handle
 44815                                  ;	this routine can handle maximum 438 country_data entries.
 44816                                  ;
 44817                                  ;output: dos_country_cdpg_info set.
 44818                                  ;	 carry set if any file read failure or wrong information in the file.
 44819                                  ;	 carry set and cx = -1 if cannot find the matching country_id, 
 44820                                  ;	 codepage_id in the file.
 44821                                  ;----------------------------------------------------------------------------
 44822                                  
 44823                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 44824                                  	; (SYSINIT:4D83h)
 44825                                  
 44826                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 44827                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4FCAh)	
 44828                                  
 44829 0000477B 57                      	push	di
 44830 0000477C 50                      	push	ax
 44831 0000477D 52                      	push	dx
 44832                                  
 44833 0000477E 31C9                    	xor	cx,cx
 44834 00004780 31D2                    	xor	dx,dx
 44835 00004782 B80002                  	mov	ax,512			;read 512 bytes
 44836 00004785 E84301                  	call	readincontrolbuffer	;read the file header
 44837 00004788 724A                    	jc	short setdosdata_fail
 44838                                  
 44839 0000478A 06                      	push	es
 44840 0000478B 56                      	push	si
 44841                                  
 44842 0000478C 0E                      	push	cs
 44843 0000478D 07                      	pop	es
 44844                                  
 44845 0000478E BF[DE49]                	mov	di,country_file_signature ; db 0FFh,'COUNTRY'
 44846 00004791 B90800                  	mov	cx,8			;length of the signature
 44847 00004794 F3A6                    	repz	cmpsb
 44848                                  
 44849 00004796 5E                      	pop	si
 44850 00004797 07                      	pop	es
 44851 00004798 753A                    	jnz	short setdosdata_fail 	;signature mismatch
 44852                                  
 44853 0000479A 83C612                  	add	si,18			;si -> county info type
 44854 0000479D 803C01                  	cmp	byte [si],1		;only accept type 1 (currently only 1 header type)
 44855 000047A0 7532                    	jne	short setdosdata_fail 	;cannot proceed. error return
 44856                                  
 44857 000047A2 46                      	inc	si			;si -> file offset
 44858 000047A3 8B14                    	mov	dx,[si]			;get the info file offset.
 44859 000047A5 8B4C02                  	mov	cx,[si+2]
 44860 000047A8 B80018                  	mov	ax,6144			;read 6144 bytes.
 44861 000047AB E81D01                  	call	readincontrolbuffer	;read info
 44862 000047AE 7224                    	jc	short setdosdata_fail
 44863                                  
 44864 000047B0 8B0C                    	mov	cx,[si]			;get the # of country, codepage combination entries
 44865 000047B2 81F9B601                	cmp	cx,438			;cannot handle more than 438 entries.
 44866 000047B6 771C                    	ja	short setdosdata_fail
 44867                                  
 44868 000047B8 46                      	inc	si
 44869 000047B9 46                      	inc	si			;si -> entry information packet
 44870 000047BA 5A                      	pop	dx			;restore code page id
 44871 000047BB 58                      	pop	ax			;restore country id
 44872 000047BC 5F                      	pop	di
 44873                                  
 44874                                  setdoscntry_find:			;search for desired country_id,codepage_id.
 44875 000047BD 3B4402                  	cmp	ax,[si+2]		;compare country_id
 44876 000047C0 7509                    	jne	short setdoscntry_next
 44877                                  
 44878                                  	;cmp	dx,0			;no user specified code page ?
 44879                                  	;je	short setdoscntry_any_codepage ;then no need to match code page id.
 44880                                  	; 10/09/2023
 44881 000047C2 09D2                    	or	dx,dx ; cmp dx,0
 44882 000047C4 7413                    	jz	short setdoscntry_any_codepage
 44883 000047C6 3B5404                  	cmp	dx,[si+4]		;compare code page id
 44884 000047C9 7411                    	je	short setdoscntry_got_it
 44885                                  
 44886                                  setdoscntry_next:
 44887 000047CB 0334                    	add	si,[si]			;next entry
 44888 000047CD 46                      	inc	si
 44889 000047CE 46                      	inc	si			;take a word for size of entry itself
 44890 000047CF E2EC                    	loop	setdoscntry_find
 44891                                  
 44892                                  	;mov	cx,-1			;signals that bad country id entered.
 44893                                  	; 10/09/2023
 44894 000047D1 49                      	dec	cx ; 0 -> -1
 44895                                  setdoscntry_fail:
 44896 000047D2 F9                      	stc
 44897 000047D3 C3                      	retn
 44898                                  
 44899                                  setdosdata_fail:
 44900 000047D4 5E                      	pop	si
 44901 000047D5 59                      	pop	cx
 44902 000047D6 5F                      	pop	di
 44903 000047D7 EBF9                    	jmp	short setdoscntry_fail
 44904                                  
 44905                                  setdoscntry_any_codepage:		;use the code_page_id of the country_id found.
 44906 000047D9 8B5404                  	mov	dx,[si+4]
 44907                                  
 44908                                  setdoscntry_got_it:			;found the matching entry
 44909 000047DC 2E8916[E649]            	mov	[cs:cntrycodepage_id],dx ;save code page id for this country.
 44910 000047E1 8B540A                  	mov	dx,[si+10]		;get the file offset of country data
 44911 000047E4 8B4C0C                  	mov	cx,[si+12]
 44912 000047E7 B80002                  	mov	ax,512 			;read 512 bytes
 44913 000047EA E8DE00                  	call	readincontrolbuffer
 44914 000047ED 72E3                    	jc	short setdoscntry_fail
 44915                                  
 44916 000047EF 8B0C                    	mov	cx,[si]			;get the number of entries to handle.
 44917 000047F1 46                      	inc	si
 44918 000047F2 46                      	inc	si			;si -> first entry
 44919                                  
 44920                                  setdoscntry_data:
 44921 000047F3 57                      	push	di			;es:di -> dos_country_cdpg_info
 44922 000047F4 51                      	push	cx			;save # of entry left
 44923 000047F5 56                      	push	si			;si -> current entry in control buffer
 44924                                  
 44925 000047F6 8A4402                  	mov	al,[si+2]		;get data entry id
 44926 000047F9 E8A400                  	call	getcountrydestination	;get the address of destination in es:di
 44927 000047FC 727C                    	jc	short setdoscntry_data_next ;no matching data entry id in dos
 44928                                  
 44929 000047FE 8B5404                  	mov	dx,[si+4]		;get offset of data
 44930 00004801 8B4C06                  	mov	cx,[si+6]
 44931 00004804 B80042                  	mov	ax,4200h
 44932 00004807 F9                      	stc
 44933 00004808 CD21                    	int	21h			;move pointer
 44934 0000480A 72C8                    	jc	short setdosdata_fail
 44935                                  
 44936 0000480C BA0002                  	mov	dx,512			;start of data buffer
 44937 0000480F B91400                  	mov	cx,20			;read 20 bytes only. we only need to
 44938 00004812 B43F                    	mov	ah,3Fh			;look at the length of the data in the file.
 44939 00004814 F9                      	stc
 44940 00004815 CD21                    	int	21h			;read the country.sys data
 44941 00004817 72BB                    	jc	short setdosdata_fail 	;read failure
 44942                                  
 44943 00004819 39C8                    	cmp	ax,cx
 44944 0000481B 75B7                    	jne	short setdosdata_fail ; 13/05/2019
 44945                                  
 44946 0000481D 8B5404                  	mov	dx,[si+4]		;get offset of data again.
 44947 00004820 8B4C06                  	mov	cx,[si+6]
 44948 00004823 B80042                  	mov	ax,4200h
 44949 00004826 F9                      	stc
 44950 00004827 CD21                    	int	21h			;move pointer back again
 44951 00004829 72A9                    	jc	short setdosdata_fail
 44952                                  
 44953 0000482B 56                      	push	si
 44954 0000482C BE0802                  	mov	si,(512+8)		;get length of the data from the file
 44955 0000482F 8B0C                    	mov	cx,[si]
 44956 00004831 5E                      	pop	si
 44957 00004832 BA0002                  	mov	dx,512			;start of data buffer
 44958 00004835 83C10A                  	add	cx,10			;signature + a word for the length itself
 44959 00004838 B43F                    	mov	ah,3Fh			;read the data from the file.
 44960 0000483A F9                      	stc
 44961 0000483B CD21                    	int	21h
 44962 0000483D 7295                    	jc	short setdosdata_fail
 44963                                  
 44964 0000483F 39C8                    	cmp	ax,cx
 44965 00004841 7591                    	jne	short setdosdata_fail
 44966                                  
 44967 00004843 8A4402                  	mov	al,[si+2]		;save data id for future use.
 44968 00004846 BE0802                  	mov	si,(512+8)		;si-> data buffer + id tag field
 44969 00004849 8B0C                    	mov	cx,[si]			;get the length of the file
 44970 0000484B 41                      	inc	cx			;take care of a word for lenght of tab
 44971 0000484C 41                      	inc	cx			;itself.
 44972 0000484D 81F9F805                	cmp	cx,(2048-512-8)	; 1528	;fit into the buffer?
 44973 00004851 7781                    	ja	short setdosdata_fail
 44974                                  
 44975                                  	;if	bugfix
 44976 00004853 E83100                  	call	setdbcs_before_copy
 44977                                  	;endif
 44978                                  
 44979 00004856 3C01                    	cmp	al,SetCountryInfo ; 1	;is the data for setcountryinfo table?
 44980 00004858 7511                    	jne	short setdoscntry_mov 	;no, don't worry
 44981                                  
 44982 0000485A 26FF7518                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen]  
 44983                                  	;push	word [es:di+24]		;cannot destroy ccmono_ptr address. save them.
 44984 0000485E 26FF751A                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2] 
 44985                                  	;push	word [es:di+26]		;at this time di -> cccountryinfolen
 44986                                  	
 44987 00004862 57                      	push	di			;save di
 44988                                  
 44989                                  	;push	ax
 44990                                  	;mov	ax,[cs:cntrycodepage_id] ;do not use the code page info in country_info
 44991                                  	;mov	[si+4],ax		;use the saved one for this !!!!
 44992                                  	;pop	ax
 44993                                  	; 10/09/2023
 44994 00004863 2EFF36[E649]            	push	word [cs:cntrycodepage_id]
 44995 00004868 8F4404                  	pop	word [si+4]
 44996                                  
 44997                                  setdoscntry_mov:
 44998 0000486B F3A4                    	rep	movsb			;copy the table into dos
 44999 0000486D 3C01                    	cmp	al,SetCountryInfo	;was the ccmono_ptr saved?
 45000 0000486F 7509                    	jne	short setdoscntry_data_next
 45001                                  
 45002 00004871 5F                      	pop	di			;restore di
 45003 00004872 268F451A                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2]
 45004                                  	;pop	word [es:di+26]		;restore
 45005 00004876 268F4518                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen] 
 45006                                  	;pop	word [es:di+24]
 45007                                  
 45008                                  setdoscntry_data_next:
 45009 0000487A 5E                      	pop	si			;restore control buffer pointer
 45010 0000487B 59                      	pop	cx			;restore # of entries left
 45011 0000487C 5F                      	pop	di			;restore pointer to dso_country_cdpg
 45012 0000487D 0334                    	add	si,[si]			;try to get the next entry
 45013 0000487F 46                      	inc	si
 45014 00004880 46                      	inc	si			;take a word of entry length itself
 45015 00004881 49                      	dec	cx
 45016                                  	; 10/09/2023
 45017 00004882 741B                    	jz	short setdoscntry_ok 
 45018                                  	;cmp	cx,0
 45019                                  	;je	short setdoscntry_ok
 45020 00004884 E96CFF                  	jmp	setdoscntry_data
 45021                                  
 45022                                  	; 18/12/2022
 45023                                  ;setdoscntry_ok:
 45024                                  	;retn
 45025                                  
 45026                                  ;----------------------------------------------------------------------------
 45027                                  	
 45028                                  	;if	bugfix
 45029                                  
 45030                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 45031                                  
 45032                                  setdbcs_before_copy:
 45033 00004887 3C07                    	cmp	al,SetDBCS ; 7		; dbcs vector set?
 45034 00004889 7514                    	jne	short sdbcsbc		; jump if not
 45035                                  	
 45036                                  	; 10/09/2023
 45037 0000488B 50                      	push	ax
 45038 0000488C 31C0                    	xor	ax,ax
 45039 0000488E 263905                  	cmp	[es:di],ax ; 0
 45040 00004891 740B                    	je	short sdbcsbc_pop
 45041                                  	
 45042                                  	;cmp	word [es:di],0		; zero byte data block?
 45043                                  	;je	short sdbcsbc		; jump if so
 45044                                  
 45045 00004893 57                      	push	di
 45046                                  	; 10/09/2023
 45047                                  	;push	ax
 45048 00004894 51                      	push	cx
 45049 00004895 268B0D                  	mov	cx,[es:di]		; load block length
 45050                                  	;add	di,2			; points actual data
 45051 00004898 47                      	inc	di
 45052 00004899 47                      	inc	di
 45053                                  	;xor	al,al			; fill bytes
 45054 0000489A F3AA                    	rep	stosb			; clear data block
 45055 0000489C 59                      	pop	cx
 45056                                  	;pop	ax
 45057 0000489D 5F                      	pop	di
 45058                                  
 45059                                  sdbcsbc_pop:	; 10/09/2023
 45060 0000489E 58                      	pop	ax
 45061                                  sdbcsbc:
 45062                                  setdoscntry_ok:	; 18/12/2022
 45063 0000489F C3                      	retn
 45064                                  
 45065                                  	;endif
 45066                                  
 45067                                  ;----------------------------------------------------------------------------
 45068                                  
 45069                                  getcountrydestination:
 45070                                  
 45071                                  ;----------------------------------------------------------------------------
 45072                                  ;get the destination address in the dos country info table.
 45073                                  ;
 45074                                  ;input: al - data id
 45075                                  ;	es:di -> dos_country_cdpg_info
 45076                                  ;on return:
 45077                                  ;	es:di -> destination address of the matching data id
 45078                                  ;	carry set if no matching data id found in dos.
 45079                                  ;----------------------------------------------------------------------------
 45080                                  
 45081                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 45082                                  	; (SYSINIT:4EB2h)
 45083                                  
 45084                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 45085                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:50F9h)
 45086                                  
 45087 000048A0 51                      	push	cx
 45088                                  	;add	di,74
 45089 000048A1 83C74A                  	add	di,country_cdpg_info.ccNumber_of_entries	
 45090                                  					;skip the reserved area, syscodepage etc.
 45091 000048A4 268B0D                  	mov	cx,[es:di]		;get the number of entries
 45092 000048A7 47                      	inc	di
 45093 000048A8 47                      	inc	di			;si -> the first start entry id
 45094                                  
 45095                                  getcntrydest:
 45096 000048A9 263805                  	cmp	byte [es:di],al
 45097 000048AC 7413                    	je	short getcntrydest_ok
 45098                                  
 45099 000048AE 26803D01                	cmp	byte [es:di],SetCountryInfo ;was it setcountryinfo entry?
 45100 000048B2 7405                    	je	short getcntrydest_1
 45101                                  
 45102 000048B4 83C705                  	add	di,5			;next data id
 45103 000048B7 EB03                    	jmp	short getcntrydest_loop
 45104                                  
 45105                                  getcntrydest_1:
 45106                                  	;add	di,41
 45107 000048B9 83C729                  	add	di,NEW_COUNTRY_SIZE+3	;next data id
 45108                                  getcntrydest_loop:
 45109 000048BC E2EB                    	loop	getcntrydest
 45110 000048BE F9                      	stc
 45111                                  	;jmp	short getcntrydest_exit
 45112                                  getcntrydest_exit:
 45113                                  	; 10/09/2023
 45114 000048BF 59                      	pop	cx
 45115 000048C0 C3                      	retn
 45116                                  
 45117                                  getcntrydest_ok:
 45118                                  	; 10/09/2023
 45119 000048C1 47                      	inc	di
 45120                                  
 45121                                  ;	cmp	al,SetCountryInfo ; 1	;select country info?
 45122                                  ;	jne	short getcntrydest_ok1
 45123                                  ;
 45124                                  ;	;inc	di			;now di -> cccountryinfolen
 45125                                  ;	jmp	short getcntrydest_exit
 45126                                  
 45127                                  	; 10/09/2023
 45128 000048C2 3C01                    	cmp	al,SetCountryInfo ; 1	;select country info?
 45129 000048C4 74F9                    	je	short getcntrydest_exit
 45130                                  
 45131                                  getcntrydest_ok1:
 45132                                  	;les	di,[es:di+1]		;get the destination in es:di
 45133                                  	; 10/09/2023
 45134 000048C6 26C43D                  	les	di,[es:di]
 45135                                  ;getcntrydest_exit:
 45136 000048C9 59                      	pop	cx
 45137 000048CA C3                      	retn
 45138                                  
 45139                                  ;----------------------------------------------------------------------------
 45140                                  
 45141                                  readincontrolbuffer:
 45142                                  
 45143                                  ;----------------------------------------------------------------------------
 45144                                  ;move file pointer to cx:dx
 45145                                  ;read ax bytes into the control buffer. (should be less than 2 kb)
 45146                                  ;si will be set to 0 hence ds:si points to the control buffer.
 45147                                  ;
 45148                                  ;entry:  cx,dx offset from the start of the file where the read/write pointer
 45149                                  ;	 be moved.
 45150                                  ;	 ax - # of bytes to read
 45151                                  ;	 bx - file handle
 45152                                  ;	 ds - buffer seg.
 45153                                  ;return: the control data information is read into ds:0 - ds:0200.
 45154                                  ;	 cx,dx value destroyed.
 45155                                  ;	 carry set if error in reading file.
 45156                                  ;----------------------------------------------------------------------------
 45157                                  
 45158 000048CB 50                      	push	ax			;# of bytes to read
 45159 000048CC B80042                  	mov	ax,4200h
 45160 000048CF F9                      	stc
 45161 000048D0 CD21                    	int	21h			;move pointer
 45162 000048D2 59                      	pop	cx			;# of bytes to read
 45163 000048D3 7209                    	jc	short ricb_exit
 45164                                  
 45165 000048D5 31D2                    	xor	dx,dx			;ds:dx -> control buffer
 45166 000048D7 31F6                    	xor	si,si
 45167 000048D9 B43F                    	mov	ah,3Fh			;read into the buffer
 45168 000048DB F9                      	stc
 45169 000048DC CD21                    	int	21h			;should be less than 1024 bytes.
 45170                                  ricb_exit:
 45171 000048DE C3                      	retn
 45172                                  
 45173                                  ;----------------------------------------------------------------------------
 45174                                  
 45175                                  ;! set_country_path procedure is not called from anywhere !
 45176                                  ; Erdogan Tan - 04/08/2023
 45177                                  %if 0
 45178                                  
 45179                                  set_country_path:
 45180                                  
 45181                                  ;----------------------------------------------------------------------------
 45182                                  ;in:  ds - sysinitseg, es - confbot, si -> start of the asciiz path string
 45183                                  ;     dosinfo_ext, cntry_drv, cntry_root, cntry_path
 45184                                  ;     assumes current directory is the root directory.
 45185                                  ;out: ds:di -> full path (cntry_drv).
 45186                                  ;     set the cntry_drv string from the country=,,path command.
 45187                                  ;     ds, es, si value saved.
 45188                                  ;----------------------------------------------------------------------------
 45189                                  
 45190                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 45191                                  	; (SYSINIT:4EF4h)
 45192                                  
 45193                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 45194                                  	; (Retrodos v5.0 Pre-Works)
 45195                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:513Bh)
 45196                                  
 45197                                  	push	si
 45198                                  
 45199                                  	push	ds			;switch ds, es
 45200                                  	push	es
 45201                                  	pop	ds
 45202                                  	pop	es			;now ds -> confbot, es -> sysinitseg
 45203                                  
 45204                                  	call	chk_drive_letter	;current ds:[si] is a drive letter?
 45205                                  	jc	short scp_default_drv 	;no, use current default drive.
 45206                                  
 45207                                  	mov	al,[si]
 45208                                  	inc	si
 45209                                  	inc	si			;si -> next char after ":"
 45210                                  	jmp	short scp_setdrv
 45211                                  
 45212                                  scp_default_drv:
 45213                                  	mov	ah,19h
 45214                                  	int	21h
 45215                                  	add	al,"A"			;convert it to a character.
 45216                                  
 45217                                  scp_setdrv:
 45218                                  	mov	[cs:cntry_drv],al	;set the drive letter.
 45219                                  	mov	di,cntry_path
 45220                                  	mov	al,[si]
 45221                                  	cmp	al, "\"
 45222                                  	je	short scp_root_dir
 45223                                  
 45224                                  	cmp	al,"/"			;let's accept "/" as an directory delim
 45225                                  	;je	short scp_root_dir
 45226                                  	;jmp	short scp_path
 45227                                  	; 04/01/2023
 45228                                  	jne	short scp_path
 45229                                  
 45230                                  scp_root_dir:
 45231                                  	dec	di			;di -> cntry_root
 45232                                  scp_path:
 45233                                  	call	move_asciiz		;copy it
 45234                                  
 45235                                  	mov	di,cntry_drv
 45236                                  scpath_exit:
 45237                                  
 45238                                  	push	ds			;switch ds, es
 45239                                  	push	es
 45240                                  	pop	ds
 45241                                  	pop	es			;ds, es value restored
 45242                                  
 45243                                  	pop	si
 45244                                  	retn
 45245                                  
 45246                                  ;----------------------------------------------------------------------------
 45247                                  
 45248                                  chk_drive_letter:
 45249                                  
 45250                                  ;check if ds:[si] is a drive letter followed by ":".
 45251                                  ;assume that every alpha character is already converted to upper case.
 45252                                  ;carry set if not.
 45253                                  
 45254                                  	; 04/01/2023 - Retrodos v4.2
 45255                                  
 45256                                  	push	ax
 45257                                  	cmp	byte [si],"A"
 45258                                  	;jb	short cdletter_no
 45259                                  	jb	short cdletter_exit
 45260                                  	cmp	byte [si],"Z"
 45261                                  	ja	short cdletter_no
 45262                                  	cmp	byte [si+1],":"
 45263                                  	;jne	short cdletter_no
 45264                                  	;jmp	short cdletter_exit
 45265                                  	; 04/01/2023
 45266                                  	je	short cdletter_exit
 45267                                  
 45268                                  cdletter_no:
 45269                                  	stc
 45270                                  cdletter_exit:
 45271                                  	pop	ax
 45272                                  	retn
 45273                                  
 45274                                  %endif
 45275                                  
 45276                                  ;----------------------------------------------------------------------------
 45277                                  
 45278                                  move_asciiz:
 45279                                  
 45280                                  ;in: ds:si -> source es:di -> target
 45281                                  ;out: copy the string until 0.
 45282                                  ;assumes there exists a 0.
 45283                                  
 45284                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 45285                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:4F40h)
 45286                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:5187h)
 45287                                  
 45288                                  masciiz_loop:
 45289                                  	; 10/09/2023
 45290 000048DF F604FF                  	test	byte [si],0FFh
 45291 000048E2 A4                      	movsb
 45292                                  	;cmp	byte [si-1],0	; was it 0?
 45293                                  	;jne	short masciiz_loop
 45294 000048E3 75FA                    	jnz	short masciiz_loop ; 10/09/2023
 45295 000048E5 C3                      	retn
 45296                                  
 45297                                  ;----------------------------------------------------------------------------
 45298                                  
 45299                                  ;	ds:dx points to string to output (asciz)
 45300                                  ;
 45301                                  ;	prints <badld_pre> <string> <badld_post>
 45302                                  
 45303                                  badfil:
 45304 000048E6 0E                      	push	cs
 45305 000048E7 07                      	pop	es
 45306                                  
 45307 000048E8 89D6                    	mov	si,dx
 45308                                  badload:
 45309 000048EA BA[314F]                	mov	dx,badld_pre	; want to print config error
 45310 000048ED BB[EE4E]                	mov	bx,crlfm
 45311                                  prnerr:
 45312 000048F0 0E                      	push	cs
 45313 000048F1 1F                      	pop	ds ; *
 45314 000048F2 E81D00                  	call	print
 45315                                  prn1:
 45316 000048F5 268A14                  	mov	dl,[es:si]
 45317 000048F8 08D2                    	or	dl,dl
 45318 000048FA 7407                    	jz	short prn2
 45319 000048FC B402                    	mov	ah,STD_CON_OUTPUT ; 2 
 45320 000048FE CD21                    	int	21h
 45321 00004900 46                      	inc	si
 45322 00004901 EBF2                    	jmp	short prn1
 45323                                  prn2:
 45324 00004903 89DA                    	mov	dx,bx
 45325 00004905 E80A00                  	call	print
 45326                                  	; 11/12/2022
 45327                                  	; ds = cs ; *
 45328 00004908 803E[5503]01            	cmp	byte [donotshownum],1
 45329                                  				; suppress line number when handling command.com
 45330                                  	;cmp	byte [cs:donotshownum],1 
 45331 0000490D 7407                    	je	short prnexit
 45332                                  	
 45333                                  	; 18/12/2022
 45334                                  	;call	error_line
 45335 0000490F E964E4                  	jmp	error_line
 45336                                  ;prnexit:
 45337                                  	;retn
 45338                                  
 45339                                  ;----------------------------------------------------------------------------
 45340                                  
 45341                                  print:
 45342 00004912 B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9
 45343 00004914 CD21                    	int	21h
 45344                                  prnexit:	; 18/12/2022
 45345 00004916 C3                      	retn
 45346                                  
 45347                                  ;----------------------------------------------------------------------------
 45348                                  
 45349                                  ;  open device pointed to by dx, al has access code
 45350                                  ;   if unable to open do a device open null device instead
 45351                                  
 45352                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 45353                                  	; (SYSINIT:3764h)
 45354                                  open_dev:
 45355 00004917 E80500                  	call	open_file
 45356 0000491A 7309                    	jnc	short open_dev3
 45357                                  
 45358                                  open_dev1:
 45359 0000491C BA[7F49]                	mov	dx,nuldev
 45360                                  	; 18/12/2022
 45361                                  	;call	open_file
 45362                                  ;of_retn:
 45363                                  	;retn
 45364                                  	; 18/12/2022
 45365                                  	;jmp	short open_file
 45366                                  open_file:
 45367 0000491F B43D                    	mov	ah,OPEN	; 3Dh
 45368 00004921 F9                      	stc
 45369 00004922 CD21                    	int	21h
 45370                                  of_retn:	; 18/12/2022
 45371 00004924 C3                      	retn
 45372                                  
 45373                                  open_dev3:
 45374 00004925 89C3                    	mov	bx,ax			; handle from open to bx
 45375                                  	;;xor	ax,ax			; get device info
 45376                                  	;;mov	ah,IOCTL ; 44h
 45377                                  	;mov	ax,(IOCTL<<8) ; 13/05/2019
 45378                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 45379                                  	;xor	ax,ax
 45380                                  	;mov	ah,44h	; IOCTL
 45381                                  	; 11/12/2022
 45382 00004927 B80044                  	mov	ax,4400h ; IOCTL<<8 
 45383                                  
 45384 0000492A CD21                    	int	21h
 45385                                  
 45386 0000492C F6C280                  	test	dl,10000000b ; 80h
 45387 0000492F 75F3                    	jnz	short of_retn
 45388                                  
 45389 00004931 B43E                    	mov	ah,CLOSE ; 3Eh
 45390 00004933 CD21                    	int	21h
 45391 00004935 EBE5                    	jmp	short open_dev1
 45392                                  
 45393                                  ;----------------------------------------------------------------------------
 45394                                  
 45395                                  ; 18/12/2022
 45396                                  %if 0
 45397                                  open_file:
 45398                                  	mov	ah,OPEN	; 3Dh
 45399                                  	stc
 45400                                  	int	21h
 45401                                  	retn
 45402                                  %endif
 45403                                  
 45404                                  ;----------------------------------------------------------------------------
 45405                                  
 45406                                  ; test int24. return back to dos with the fake user response of "fail"
 45407                                  
 45408                                  int24:
 45409 00004937 B003                    	mov	al,3			; fail the system call
 45410 00004939 CF                      	iret				; return back to dos.
 45411                                  
 45412                                  ; 07/04/2024
 45413                                  %if 0
 45414                                  ; 27/03/2024 - temporary
 45415                                  printx:
 45416                                  	push ax
 45417                                  	push ds
 45418                                  	push bx
 45419                                  	mov al,'X'
 45420                                  yx:
 45421                                  	mov ah,4Eh
 45422                                  	mov bx,0B800h
 45423                                  	mov ds,bx
 45424                                  	xor bx,bx
 45425                                  	mov [bx],ax
 45426                                  	xor ah,ah
 45427                                  	int 16h
 45428                                  	pop bx
 45429                                  	pop ds
 45430                                  	pop ax
 45431                                  	retn
 45432                                  printy:
 45433                                  	push ax
 45434                                  	push ds
 45435                                  	push bx
 45436                                  	mov al,'Y'
 45437                                  	jmp short yx
 45438                                  %endif	
 45439                                  
 45440                                  ; 19/04/2019 - Retro DOS v4.0
 45441                                  
 45442                                  ;----------------------------------------------------------------------------
 45443                                  ; DATA
 45444                                  ;----------------------------------------------------------------------------
 45445                                  
 45446                                  ;include copyrigh.inc			; copyright statement
 45447                                  
 45448                                  ; MSDOS 6.21 IO.SYS - SYSINIT:4FA3h
 45449                                  
 45450                                  ;MsDosVersion6Copyr:
 45451                                  ;	db	'MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp '
 45452                                  ;	db	'Licensed Material - Property of Microsoft All rights reserved '
 45453                                  
 45454                                  ; 22/10/2022
 45455                                  ; MSDOS 5.0 IO.SYS - SYSINIT:378Ch
 45456                                  
 45457                                  ; 28/12/2022
 45458                                  %if 0
 45459                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 45460                                  MsDosVersion5Copyr:
 45461                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
 45462                                  	db	'Licensed Material - Property of Microsoft All rights reserved '
 45463                                  %endif
 45464                                  
 45465                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 45466                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 45467                                  ; 20/04/2019 - Retro DOS v4.0
 45468                                  ;BOOTMES:
 45469                                  ;	db      13
 45470                                  ;	db      10
 45471                                  ;	db      "MS-DOS version "
 45472                                  ;	db      MAJOR_VERSION + "0"
 45473                                  ;	db      "."
 45474                                  ;	db      (MINOR_VERSION / 10) + "0"
 45475                                  ;	db      (MINOR_VERSION % 10) + "0"
 45476                                  ;	db      13,10
 45477                                  ;	;db	"Copyright 1981-1993 Microsoft Corp.",13,10,"$"
 45478                                  ;	; 22/10/2022
 45479                                  ;	db	"Copyright 1981-1991 Microsoft Corp.",13,10,"$"
 45480                                  ;	;
 45481                                  ;	db	0
 45482                                  
 45483                                  	; 01/01/2023 - Retro DOS v4.2
 45484                                  
 45485                                  	; 28/12/2022 - Retro DOS v4.1
 45486                                  ;MsDosVersion5Copyr:
 45487                                  ;  	db	13,10,"MS DOS Version 5.0"
 45488                                  ;	db	13,10,"Copyright 1981-1991 Microsoft Corp.",13,10,"$",0	
 45489                                  
 45490                                  	; 12/12/2022
 45491 0000493A 00                      	db	0
 45492                                  ; 12/12/2022
 45493                                  BOOTMES:
 45494 0000493B 0D0A                    	db	13,10
 45495                                  	;;;db 	"Retro DOS v4.0 (Modified MSDOS 5.0) "
 45496                                  	; 28/12/2022
 45497                                  	;;db 	"Retro DOS v4.1 (Modified MSDOS 5.0) "
 45498                                  	; 01/01/2023
 45499                                  	;db 	"Retro DOS v4.2 (Modified MSDOS 6.22) "
 45500                                  	; 30/12/2023
 45501 0000493D 526574726F20444F53-     	db 	"Retro DOS v5.0 (Modified PCDOS 7.1) "
 45501 00004946 2076352E3020284D6F-
 45501 0000494F 646966696564205043-
 45501 00004958 444F5320372E312920 
 45502                                  	
 45503 00004961 0D0A                    	db	13,10
 45504 00004963 6279204572646F6761-     	db	"by Erdogan Tan [2024] " ; 01/01/2024
 45504 0000496C 6E2054616E205B3230-
 45504 00004975 32345D20           
 45505 00004979 0D0A                    	db	13,10
 45506 0000497B 0D0A2400                	db	13,10,"$",0
 45507                                  
 45508 0000497F 4E554C00                nuldev:	db	"NUL",0
 45509 00004983 434F4E00                condev:	db	"CON",0
 45510 00004987 41555800                auxdev:	db	"AUX",0
 45511 0000498B 50524E00                prndev:	db	"PRN",0
 45512                                  
 45513                                  ;IFDEF	CONFIGPROC
 45514 0000498F 5C434F4E4649472E53-     config:	db	"\CONFIG.SYS",0
 45514 00004998 595300             
 45515                                  
 45516 0000499B 413A                    cntry_drv:  db	"A:"
 45517 0000499D 5C                      cntry_root: db	"\"
 45518 0000499E 434F554E5452592E53-     cntry_path: db	"COUNTRY.SYS",0
 45518 000049A7 595300             
 45519                                  	    ;db	52 dup (0)
 45520 000049AA 00<rep 34h>             	    times 52 db 0	
 45521                                  
 45522                                  country_file_signature:
 45523 000049DE FF434F554E545259        	db	0FFh,'COUNTRY'
 45524                                  
 45525                                  cntrycodepage_id: 
 45526 000049E6 0000                    	dw	0 	
 45527                                  
 45528                                  ;ENDIF ; CONFIGPROC
 45529                                  
 45530                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 45531                                  ; (SYSINIT:5081h)
 45532                                  
 45533                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 45534                                  ;ifdef	MULTI_CONFIG
 45535 000049E8 00                      newcmd:  db	0			; non-zero if non-std shell specified
 45536 000049E9 40                      tmplate: db	64                      ; must precede commnd
 45537                                  ;endif
 45538                                  
 45539                                  ;ifdef ROMEXEC
 45540                                  ;	db      7                       ; size of commnd line (excl. null)
 45541                                  ;commnd: db	"COMMAND",0
 45542                                  ;	db	56 dup (0)
 45543                                  ;else
 45544                                  	; 02/11/2022
 45545 000049EA 0C                      	db	12                      ; size of commnd line (excl. null)
 45546 000049EB 5C434F4D4D414E442E-     commnd:	db	"\COMMAND.COM",0
 45546 000049F4 434F4D00           
 45547                                  	;db	51 dup (0)
 45548 000049F8 00<rep 33h>             	times	51 db 0
 45549                                  ;endif
 45550                                  
 45551                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 45552                                  ;ifdef	MULTI_CONFIG
 45553 00004A2B 5C434F4D4D414E442E-     commnd2: db 	"\COMMAND.COM",0	; alternate commands to exec,
 45553 00004A34 434F4D00           
 45554 00004A38 022F5000                	 db	2,"/P",0 		; followed by their respective alternate
 45555 00004A3C 5C4D53444F535C434F-     commnd3: db	"\MSDOS\COMMAND.COM",0	; command lines
 45555 00004A45 4D4D414E442E434F4D-
 45555 00004A4E 00                 
 45556 00004A4F 0B413A5C4D53444F53-     	 db	11,"A:\MSDOS /P",0 	;(the drive letter are dynamically replaced)
 45556 00004A58 202F5000           
 45557 00004A5C 5C444F535C434F4D4D-     commnd4: db	"\DOS\COMMAND.COM",0 	;
 45557 00004A65 414E442E434F4D00   
 45558 00004A6D 09413A5C444F53202F-     	 db	9,"A:\DOS /P",0		;
 45558 00004A76 5000               
 45559                                  def_swchr:	
 45560 00004A78 00                      	 db	0			; default switchchar (referenced as command_line-1)
 45561                                  ;endif
 45562                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 45563                                  command_line:
 45564 00004A79 022F50                  	db	2,"/P"			; default command.com args
 45565                                  	;db	125 dup (0)
 45566 00004A7C 00<rep 7Dh>             	times	125 db 0
 45567                                  
 45568                                  pathstring:
 45569                                  	;db	64 dup (0)
 45570 00004AF9 00<rep 40h>             	times	64 db 0
 45571                                  
 45572                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 45573                                  ; (SYSINIT:51D3h)
 45574                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 45575                                  ;%if 0
 45576                                  
 45577                                  dae_flag:
 45578 00004B39 00                      	db	0 ; MSDOS 6.21 IO.SYS - SYSINIT:51D2h 	
 45579                                  
 45580                                  ;ifdef	MULTI_CONFIG
 45581                                  
 45582                                  ; 04/03/2022- Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 45583                                  MAX_MULTI_CONFIG equ 9	; max # of multi-config menu items supported
 45584                                  
 45585                                  ;   Beware of byte pairs accessed as words (see all "KEEP AFTER" notes below)
 45586                                  
 45587 00004B3A 07                      bMenuColor:	db      07h ; 1Fh       ; default fgnd/bgnd color
 45588 00004B3B 00                      bMenuPage:	db      0               ; menu video page (KEEP AFTER bMenuColor)
 45589 00004B3C 05                      		db      5               ; video page function # (KEEP AFTER bMenuPage)
 45590 00004B3D 00                      bLastCol:	db      0               ; ending column on status line
 45591 00004B3E 18                      bLastRow:	db      24              ; row # of status line (KEEP AFTER bLastCol)
 45592 00004B3F 00                      bDisableUI:	db      0               ; 1=disable clean/interactive
 45593                                                                          ; 2=disable default 2-second delay
 45594 00004B40 00                      bCRTPage:	db      0               ; value saved from BIOS data area
 45595 00004B41 0000                    wCRTStart:	dw      0               ; value saved from BIOS data area
 45596 00004B43 00                      bQueryOpt:	db      0               ; 0=off, 1=prompt all, 2=prompt none, 4=skip all
 45597 00004B44 01                      bDefBlock:	db      1               ; default block #
 45598 00004B45 00                      bMaxBlock:	db      0               ; maxmimum block #
 45599 00004B46 0000                    offDefBlock:	dw      0               ; offset of name of default block (if any)
 45600 00004B48 FF                      secTimeOut:	db      -1 ; 0FFh       ; # of seconds for timeout (-1 == indefinite)
 45601 00004B49 00                      secElapsed:	db      0               ; # of seconds elapsed so far (KEEP AFTER secTimeOut)
 45602 00004B4A 00<rep Ah>              abBlockType:	times MAX_MULTI_CONFIG+1 db 0 ; array of block types
 45603 00004B54 0000<rep Ah>            aoffBlockName:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block names
 45604 00004B68 0000<rep Ah>            aoffBlockDesc:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block descriptions
 45605                                  
 45606 00004B7C 434F4E4649473D00        szBoot:		db      "CONFIG=",0
 45607 00004B84 4D454E5500              szMenu:		db      "MENU",0
 45608 00004B89 434F4D4D4F4E00          szCommon:	db      "COMMON",0
 45609                                  
 45610                                  ;endif	;MULTI_CONFIG
 45611                                  
 45612                                  	; 10/09/2023
 45613                                  	; MSDOS 6.21 IO.SYS - SYSINIT:5229h 	
 45614                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:546Eh)
 45615                                  
 45616                                  comtab:	 ; label byte
 45617                                  
 45618                                  ;            cmd len    command         cmd code
 45619                                  ;            -------    -------         --------
 45620                                  
 45621                                  ;ifdef MULTI_CONFIG
 45622 00004B90 015B5B                          db      1,      "[",            CONFIG_BEGIN
 45623                                  ;endif
 45624 00004B93 05425245414B43                  db      5,      "BREAK",        CONFIG_BREAK
 45625 00004B9A 074255464645525342              db      7,      "BUFFERS",      CONFIG_BUFFERS
 45626 00004BA3 07434F4D4D454E5459              db      7,      "COMMENT",      CONFIG_COMMENT
 45627 00004BAC 07434F554E54525951              db      7,      "COUNTRY",      CONFIG_COUNTRY
 45628 00004BB5 0644455649434544                db      6,      "DEVICE",       CONFIG_DEVICE
 45629 00004BBD 0A4445564943454849-             db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 45629 00004BC6 474855             
 45630 00004BC9 03444F5348                      db      3,      "DOS",          CONFIG_DOS
 45631 00004BCE 08445249565041524D-             db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 45631 00004BD7 50                 
 45632 00004BD8 044643425358                    db      4,      "FCBS",         CONFIG_FCBS
 45633 00004BDE 0546494C455346                  db      5,      "FILES",        CONFIG_FILES
 45634                                  ;ifdef MULTI_CONFIG
 45635 00004BE5 07494E434C5544454A              db      7,      "INCLUDE",      CONFIG_INCLUDE
 45636                                  ;endif
 45637 00004BEE 07494E5354414C4C49              db      7,      "INSTALL",      CONFIG_INSTALL
 45638 00004BF7 0B494E5354414C4C48-             db      11,     "INSTALLHIGH",  CONFIG_INSTALLHIGH
 45638 00004C00 49474857           
 45639 00004C04 094C41535444524956-             db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 45639 00004C0D 454C               
 45640                                  ;ifdef MULTI_CONFIG
 45641 00004C0F 075355424D454E554F              db      7,      "SUBMENU",      CONFIG_SUBMENU
 45642 00004C18 094D454E55434F4C4F-             db      9,      "MENUCOLOR",    CONFIG_MENUCOLOR
 45642 00004C21 5252               
 45643 00004C23 0B4D454E5544454641-             db      11,     "MENUDEFAULT",  CONFIG_MENUDEFAULT
 45643 00004C2C 554C5441           
 45644 00004C30 084D454E554954454D-             db      8,      "MENUITEM",     CONFIG_MENUITEM
 45644 00004C39 45                 
 45645                                  ;endif
 45646 00004C3A 0A4D554C5449545241-             db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 45646 00004C43 434B4D             
 45647                                  ;ifdef MULTI_CONFIG
 45648 00004C46 074E554D4C4F434B4E              db      7,      "NUMLOCK",      CONFIG_NUMLOCK
 45649                                  ;endif
 45650 00004C4F 0352454D30                      db      3,      "REM",          CONFIG_REM
 45651                                  ;ifdef MULTI_CONFIG
 45652 00004C54 0353455456                      db      3,      "SET",          CONFIG_SET
 45653                                  ;endif
 45654 00004C59 055348454C4C53                  db      5,      "SHELL",        CONFIG_SHELL
 45655                                  ;if    STACKSW
 45656 00004C60 06535441434B534B                db      6,      "STACKS",       CONFIG_STACKS
 45657                                  ;endif
 45658 00004C68 085357495443484553-             db      8,      "SWITCHES",     CONFIG_SWITCHES
 45658 00004C71 31                 
 45659 00004C72 00                      	db	0
 45660                                  
 45661                                  	; 10/09/2023
 45662                                  ;aDosdata:  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:5550h 	
 45663                                  	;db	7,	"DOSDATA"	CONFIG_DOSDATRA ;  'T'
 45664                                  	;db	0
 45665                                  
 45666                                  ;%endif ; 02/11/2022
 45667                                  
 45668                                  ; 01/01/2023 - Retro DOS v4.2
 45669                                  %if 0
 45670                                  
 45671                                  comtab:
 45672                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 45673                                  	; (SYSINIT:38EDh)
 45674                                  	db      7,      "BUFFERS",      CONFIG_BUFFERS
 45675                                  	db      5,      "BREAK",        CONFIG_BREAK
 45676                                  	db      6,      "DEVICE",       CONFIG_DEVICE
 45677                                  	db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 45678                                  	db      5,      "FILES",        CONFIG_FILES
 45679                                  	db      4,      "FCBS",         CONFIG_FCBS
 45680                                  	db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 45681                                  	db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 45682                                  	db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 45683                                  	db      6,      "STACKS",       CONFIG_STACKS
 45684                                  	db      7,      "COUNTRY",      CONFIG_COUNTRY
 45685                                  	db      5,      "SHELL",        CONFIG_SHELL
 45686                                  	db      7,      "INSTALL",      CONFIG_INSTALL
 45687                                  	db      7,      "COMMENT",      CONFIG_COMMENT
 45688                                  	db      3,      "REM",          CONFIG_REM
 45689                                  	db      8,      "SWITCHES",     CONFIG_SWITCHES
 45690                                  	db      3,      "DOS",          CONFIG_DOS
 45691                                  	db	0
 45692                                  
 45693                                  %endif
 45694                                  
 45695                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 45696                                  ; (SYSINIT:530Ch)
 45697                                  
 45698                                  deviceparameters:	
 45699                                  	; A_DEVICEPARAMETERS <0,dev_3inch720kb,0,80>
 45700                                  devp.specialfunc:	; deviceparameters +
 45701 00004C73 00                      	db	0	; A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS
 45702                                  devp.devtype:
 45703 00004C74 02                      	db	2	; A_DEVICEPARAMETERS.DP_DEVICETYPE
 45704                                  devp.devattr:
 45705 00004C75 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES
 45706                                  devp.cylinders:
 45707 00004C77 5000                    	dw	80	; A_DEVICEPARAMETERS.DP_CYLINDERS
 45708                                  
 45709                                  ; 04/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 45710                                  
 45711                                  	;times	286	db 0
 45712                                  devp.mediatype:		; A_DEVICEPARAMETERS.DP_MEDIATYPE
 45713 00004C79 00                      	db	0
 45714                                  devp.bpb:		; A_DEVICEPARAMETERS.DP_BPB
 45715                                  devp.bps:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BYTESPERSECTOR
 45716 00004C7A 0000                    	dw	0
 45717                                  devp.secperclus:	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERCLUSTER	
 45718 00004C7C 00                      	db	0	
 45719 00004C7D 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.RESERVEDSECTORS
 45720 00004C7F 00                      	db	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.NUMBEROFFATS
 45721 00004C80 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.ROOTENTRIES
 45722                                  devp.totalsecs:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.TOTALSECTORS
 45723 00004C82 0000                    	dw	0
 45724                                  devp.mediaid:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.MEDIADESCRIPTOR
 45725 00004C84 00                      	db	0
 45726 00004C85 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERFAT
 45727                                  devp.spt:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK
 45728 00004C87 0000                    	dw	0
 45729                                  devp.heads:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.HEADS
 45730 00004C89 0000                    	dw	0	
 45731                                  
 45732                                  	;times	68 db 0	; PCDOS 7.1  (FAT32 BPB)
 45733                                  	;times	14 db 0	; MSDOS 6.21
 45734 00004C8B 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.HIDDENSECTORS
 45735 00004C8D 0000                    	dw	0
 45736 00004C8F 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BIGTOTALSECTORS
 45737 00004C91 0000                    	dw	0
 45738 00004C93 00<rep 6h>              	times	6 db 0	
 45739                                  
 45740                                  devp.trktblents:
 45741 00004C99 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES
 45742                                  devp.sectbl:		; A_DEVICEPARAMETERS.DP_SECTORTABLE
 45743 00004C9B 00<rep FCh>             	times	252 db 0 ; MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
 45744                                  			; 63*4 bytes
 45745                                  
 45746                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 45747                                  ; (SYSINIT:5430h)
 45748                                  	
 45749 00004D97 0200                    hlim:	dw	2
 45750 00004D99 0900                    slim:	dw	9
 45751                                  
 45752 00004D9B 00                      drive:	db	0
 45753                                  
 45754                                  switches:
 45755 00004D9C 0000                    	dw	0
 45756                                  
 45757                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 45758                                  ; (SYSINIT:5437h)
 45759                                  
 45760                                  ; the following are the recommended bpbs for the media that
 45761                                  ; we know of so far.
 45762                                  
 45763                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 45764                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3AA9h
 45765                                  
 45766                                  ; 27/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 45767                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:56BBh	
 45768                                  
 45769                                  ; 48 tpi diskettes
 45770                                  
 45771 00004D9E 0002                    bpb48t	dw	512
 45772 00004DA0 02                      	db	2
 45773 00004DA1 0100                    	dw	1
 45774 00004DA3 02                      	db	2
 45775 00004DA4 7000                    	dw	112
 45776 00004DA6 D002                    	dw	2*9*40 ; 720
 45777 00004DA8 FD                      	db	0FDh
 45778 00004DA9 0200                    	dw	2
 45779 00004DAB 0900                    	dw	9
 45780 00004DAD 0200                    	dw	2
 45781 00004DAF 00000000                	dd	0
 45782 00004DB3 00000000                        dd      0
 45783                                  	; 27/12/2023
 45784 00004DB7 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 45785 00004DD3 90                      	db	90h	
 45786                                  
 45787                                  ; 96tpi diskettes
 45788                                  
 45789 00004DD4 0002                    bpb96t:	dw	512
 45790 00004DD6 01                      	db	1
 45791 00004DD7 0100                    	dw	1
 45792 00004DD9 02                      	db	2
 45793 00004DDA E000                    	dw	224
 45794 00004DDC 6009                    	dw	2*15*80 ; 2400
 45795 00004DDE F9                      	db	0F9h
 45796 00004DDF 0700                    	dw	7
 45797 00004DE1 0F00                    	dw	15
 45798 00004DE3 0200                    	dw	2
 45799 00004DE5 00000000                	dd	0
 45800 00004DE9 00000000                        dd      0
 45801                                  	; 27/12/2023
 45802 00004DED 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 45803 00004E09 90                      	db	90h	
 45804                                  
 45805                                  ; 3 1/2 inch diskette bpb
 45806                                  
 45807 00004E0A 0002                    bpb35:	dw	512
 45808 00004E0C 02                      	db	2
 45809 00004E0D 0100                    	dw	1
 45810 00004E0F 02                      	db	2
 45811 00004E10 7000                    	dw	112
 45812 00004E12 A005                    	dw	2*9*80 ; 1440
 45813 00004E14 F9                      	db	0F9h
 45814 00004E15 0300                    	dw	3
 45815 00004E17 0900                    	dw	9
 45816 00004E19 0200                    	dw	2
 45817 00004E1B 00000000                	dd	0
 45818 00004E1F 00000000                        dd      0
 45819                                  	; 27/12/2023
 45820 00004E23 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 45821 00004E3F 90                      	db	90h
 45822                                        
 45823 00004E40 0002                    bpb35h:	dw	512
 45824 00004E42 01                      	db	1
 45825 00004E43 0100                    	dw	1
 45826 00004E45 02                      	db	2
 45827 00004E46 E000                    	dw	224
 45828 00004E48 400B                    	dw	2*18*80 ; 2880
 45829 00004E4A F0                      	db	0F0h
 45830 00004E4B 0900                    	dw	9
 45831 00004E4D 1200                    	dw	18
 45832 00004E4F 0200                    	dw	2
 45833 00004E51 00000000                	dd	0
 45834 00004E55 00000000                        dd      0
 45835                                  	; 27/12/2023
 45836 00004E59 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 45837 00004E75 90                      	db	90h
 45838                                  
 45839                                  ; m037 - BEGIN
 45840                                  
 45841 00004E76 0002                    bpb288:	dw	512
 45842 00004E78 02                      	db	2
 45843 00004E79 0100                    	dw	1
 45844 00004E7B 02                      	db	2
 45845 00004E7C F000                    	dw	240
 45846 00004E7E 8016                    	dw	2*36*80 ; 5760
 45847 00004E80 F0                      	db	0F0h
 45848 00004E81 0900                    	dw	9
 45849 00004E83 2400                    	dw	36
 45850 00004E85 0200                    	dw	2
 45851 00004E87 00000000                	dd	0
 45852 00004E8B 00000000                        dd      0
 45853                                  	; 27/12/2023
 45854 00004E8F 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 45855 00004EAB 90                      	db	90h
 45856                                  
 45857                                  ; m037 - END
 45858                                  
 45859                                  ; 12/05/2019
 45860                                  
 45861                                  align 2
 45862                                  
 45863                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 45864                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B26h
 45865                                  
 45866 00004EAC [9E4D]                  bpbtable:   dw	    bpb48t		; 48tpi drives
 45867 00004EAE [D44D]                  	    dw	    bpb96t		; 96tpi drives
 45868 00004EB0 [0A4E]                  	    dw	    bpb35		; 3.5" drives
 45869                                  ; the following are not supported, so default to 3.5" media layout
 45870 00004EB2 [0A4E]                  	    dw	    bpb35		; not used - 8" drives
 45871 00004EB4 [0A4E]                  	    dw	    bpb35		; not used - 8" drives
 45872 00004EB6 [0A4E]                  	    dw	    bpb35		; not used - hard files
 45873 00004EB8 [0A4E]                  	    dw	    bpb35		; not used - tape drives
 45874 00004EBA [404E]                  	    dw	    bpb35h		; 3-1/2" 1.44mb drive
 45875 00004EBC [0A4E]                  	    dw	    bpb35		; ERIMO				m037
 45876 00004EBE [764E]                  	    dw	    bpb288		; 2.88 MB diskette drives	m037
 45877                                  
 45878                                  switchlist: 
 45879 00004EC0 08464853544449434E      	db	8,"FHSTDICN"	     ; preserve the positions of n and c.
 45880                                  
 45881                                  ;----------------------------------------------------------------------------
 45882                                  ; Messages
 45883                                  ;----------------------------------------------------------------------------
 45884                                  
 45885                                  ; 19/04/2019 - Retro DOS v4.0
 45886                                  
 45887                                  ; MSDOS 6.21 IO.SYS - SYSINIT:54D1h
 45888                                  
 45889 00004EC9 00                      	db 	0
 45890                                  
 45891                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 45892                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B44h
 45893                                  
 45894                                  badopm:
 45895 00004ECA 0D0A                    	db	0Dh,0Ah 
 45896 00004ECC 556E7265636F676E69-     	db	'Unrecognized command in CONFIG.SYS'
 45896 00004ED5 7A656420636F6D6D61-
 45896 00004EDE 6E6420696E20434F4E-
 45896 00004EE7 4649472E535953     
 45897                                  crlfm:
 45898 00004EEE 0D0A24                  	db	0Dh,0Ah,'$'
 45899                                  badparm:
 45900 00004EF1 0D0A                    	db	0Dh,0Ah
 45901 00004EF3 42616420636F6D6D61-     	db	'Bad command or parameters - $'
 45901 00004EFC 6E64206F7220706172-
 45901 00004F05 616D6574657273202D-
 45901 00004F0E 2024               
 45902                                  badsiz_pre:
 45903 00004F10 0D0A                    	db	0Dh,0Ah
 45904 00004F12 536563746F72207369-     	db	'Sector size too large in file $'
 45904 00004F1B 7A6520746F6F206C61-
 45904 00004F24 72676520696E206669-
 45904 00004F2D 6C652024           
 45905                                  badld_pre:
 45906 00004F31 0D0A                    	db	0Dh,0Ah
 45907 00004F33 426164206F72206D69-     	db	'Bad or missing $'
 45907 00004F3C 7373696E672024     
 45908                                  badcom:
 45909 00004F43 436F6D6D616E642049-     	db	'Command Interpreter',0
 45909 00004F4C 6E7465727072657465-
 45909 00004F55 7200               
 45910                                  badcountry:
 45911 00004F57 0D0A                    	db	0Dh,0Ah
 45912 00004F59 496E76616C69642063-     	db	'Invalid country code or code page',0Dh,0Ah,'$'
 45912 00004F62 6F756E74727920636F-
 45912 00004F6B 6465206F7220636F64-
 45912 00004F74 6520706167650D0A24 
 45913                                  badcountrycom:
 45914 00004F7D 0D0A                    	db	0Dh,0Ah
 45915 00004F7F 4572726F7220696E20-     	db	'Error in COUNTRY command',0Dh,0Ah,'$'
 45915 00004F88 434F554E5452592063-
 45915 00004F91 6F6D6D616E640D0A24 
 45916                                  insufmemory:
 45917 00004F9A 0D0A                    	db	0Dh,0Ah
 45918 00004F9C 496E73756666696369-     	db	'Insufficient memory for COUNTRY.SYS file',0Dh,0Ah,'$'
 45918 00004FA5 656E74206D656D6F72-
 45918 00004FAE 7920666F7220434F55-
 45918 00004FB7 4E5452592E53595320-
 45918 00004FC0 66696C650D0A24     
 45919                                  badmem:
 45920 00004FC7 0D0A                    	db	0Dh,0Ah
 45921 00004FC9 436F6E666967757261-     	db	'Configuration too large for memory',0Dh,0Ah,'$'
 45921 00004FD2 74696F6E20746F6F20-
 45921 00004FDB 6C6172676520666F72-
 45921 00004FE4 206D656D6F72790D0A-
 45921 00004FED 24                 
 45922                                  badblock:
 45923 00004FEE 0D0A                    	db	0Dh,0Ah
 45924 00004FF0 546F6F206D616E7920-     	db	'Too many block devices',0Dh,0Ah,'$'
 45924 00004FF9 626C6F636B20646576-
 45924 00005002 696365730D0A24     
 45925                                  badstack:
 45926 00005009 0D0A                    	db	0Dh,0Ah
 45927 0000500B 496E76616C69642053-     	db	'Invalid STACK parameters',0Dh,0Ah,'$'
 45927 00005014 5441434B2070617261-
 45927 0000501D 6D65746572730D0A24 
 45928                                  	; 18/12/2022
 45929                                  ;badorder:
 45930                                  	;db	0Dh,0Ah
 45931                                  	;db	'Incorrect order in CONFIG.SYS line $'
 45932                                  errorcmd:
 45933 00005026 4572726F7220696E20-     	db	'Error in CONFIG.SYS line $'
 45933 0000502F 434F4E4649472E5359-
 45933 00005038 53206C696E652024   
 45934                                  
 45935                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 45936                                  ; (SYSINIT:566Eh)
 45937                                  
 45938                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 45939                                  ;%if 0
 45940                                  
 45941 00005040 4F4E                    OnOff:	db	'ON'
 45942 00005042 4F4646                  OnOff2:	db	'OFF'
 45943                                  
 45944                                  	; 04/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 45945                                  	; (SYSINIT:5673h)
 45946                                  ;StartMsg:
 45947                                  ;	db	'Starting MS-DOS...',0Dh,0Ah
 45948                                  ;	db	0Ah,0
 45949                                  
 45950                                  	; 17/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 45951                                  	; (SYSINIT:58F7h)
 45952                                  StartMsg:
 45953 00005045 5374617274696E6720-     	db	'Starting PC DOS...',0Dh,0Ah
 45953 0000504E 504320444F532E2E2E-
 45953 00005057 0D0A               
 45954 00005059 0A00                    	db	0Ah,0
 45955                                  
 45956                                  _$PauseMsg:
 45957                                  	; 17/12/2023
 45958                                  	;db	'Press any key to continue . . .',0Dh,0Ah,'$'
 45959                                  	; 04/08/2023 (PCDOS 7.10 - IBMBIO.COM SYSINIT:590Dh)
 45960 0000505B 507265737320616E79-     	db	'Press any key to continue...',0Dh,0Ah,'$'
 45960 00005064 206B657920746F2063-
 45960 0000506D 6F6E74696E75652E2E-
 45960 00005076 2E0D0A24           
 45961                                  _$CleanMsg:
 45962                                  	;db	'MS-DOS is bypassing your CONFIG.SYS and AUTOEXEC.BAT files.',0Dh,0Ah,'$'
 45963                                  	; 17/12/2023
 45964 0000507A 504320444F53206973-     	db	'PC DOS is bypassing your CONFIG.SYS and AUTOEXEC.BAT files.',0Dh,0Ah,'$'
 45964 00005083 20627970617373696E-
 45964 0000508C 6720796F757220434F-
 45964 00005095 4E4649472E53595320-
 45964 0000509E 616E64204155544F45-
 45964 000050A7 5845432E4241542066-
 45964 000050B0 696C65732E0D0A24   
 45965                                  _$InterMsg:
 45966                                  	;db	'MS-DOS will prompt you to confirm each CONFIG.SYS command.',0Dh,0Ah,'$'
 45967                                  	; 17/12/2023
 45968 000050B8 504320444F53207769-     	db	'PC DOS will prompt you to confirm each CONFIG.SYS command.',0Dh,0Ah,'$'
 45968 000050C1 6C6C2070726F6D7074-
 45968 000050CA 20796F7520746F2063-
 45968 000050D3 6F6E6669726D206561-
 45968 000050DC 636820434F4E464947-
 45968 000050E5 2E53595320636F6D6D-
 45968 000050EE 616E642E0D0A24     
 45969                                  _$MenuHeader:
 45970 000050F5 0D0A                    	db	0Dh,0Ah
 45971                                  	; 17/12/2023
 45972                                  	;db	'  MS-DOS 6.2 Startup Menu',0Dh,0Ah
 45973                                  	;db	'  '
 45974                                  	;times	23 db (0CDh)  ; ALT 205 ; '=======================' ; 06/08/2023
 45975                                  	;db 	0Dh,0Ah,'$'
 45976                                  	; 04/08/2023 (PCDOS 7.10 - IBMBIO.COM SYSINIT:59A7h)
 45977 000050F7 2020504320444F5320-     	db	'  PC DOS 7.1 Startup Menu',0Dh,0Ah
 45977 00005100 372E31205374617274-
 45977 00005109 7570204D656E750D0A 
 45978 00005112 2020                    	db	'  '
 45979 00005114 CD<rep 17h>             	times	23 db (0CDh)  ; ALT 205 ; '=======================' ; 06/08/2023
 45980 0000512B 0D0A24                  	db 	0Dh,0Ah,'$'
 45981                                  _$MenuPrmpt:
 45982 0000512E 2020456E7465722061-     	db	'  Enter a choice: $'
 45982 00005137 2063686F6963653A20-
 45982 00005140 24                 
 45983                                  _$StatusLine:
 45984 00005141 46353D427970617373-     	db	'F5=Bypass startup files F8=Confirm each line of CONFIG.SYS '
 45984 0000514A 207374617274757020-
 45984 00005153 66696C65732046383D-
 45984 0000515C 436F6E6669726D2065-
 45984 00005165 616368206C696E6520-
 45984 0000516E 6F6620434F4E464947-
 45984 00005177 2E53595320         
 45985 0000517C 616E64204155544F45-     	db	'and AUTOEXEC.BAT [ ]$'
 45985 00005185 5845432E424154205B-
 45985 0000518E 205D24             
 45986                                  _$InterPrmpt:
 45987 00005191 205B592C4E5D3F24        	db	' [Y,N]?$'
 45988                                  	; 04/08/2023
 45989                                  	;db	' [Y,N,ESC]?$' ; PCDOS 7.1 - IBMBIO.COM 
 45990 00005199 59455324                _$YES:	db	'YES$'
 45991 0000519D 4E4F2024                _$NO:	db	'NO $'
 45992                                  _$TimeOut:
 45993 000051A1 54696D652072656D61-     	db	'Time remaining: $'
 45993 000051AA 696E696E673A2024   
 45994                                  badcomprmpt:
 45995 000051B2 456E74657220636F72-     	db	'Enter correct name of Command Interpreter (eg, C:\COMMAND.COM)'
 45995 000051BB 72656374206E616D65-
 45995 000051C4 206F6620436F6D6D61-
 45995 000051CD 6E6420496E74657270-
 45995 000051D6 726574657220286567-
 45995 000051DF 2C20433A5C434F4D4D-
 45995 000051E8 414E442E434F4D29   
 45996 000051F0 0D0A24                  	db	0Dh,0Ah,'$'
 45997                                  _$AutoPrmpt:
 45998 000051F3 50726F636573732041-     	db	'Process AUTOEXEC.BAT [Y,N]?$'
 45998 000051FC 55544F455845432E42-
 45998 00005205 4154205B592C4E5D3F-
 45998 0000520E 24                 
 45999                                  
 46000                                  ;%endif ; 02/11/2022
 46001                                  
 46002                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 46003                                  ; (SYSINIT:5840h)
 46004                                  
 46005                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 46006                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3CE0h
 46007                                  
 46008                                  TooManyDrivesMsg:
 46009 0000520F 5741524E494E472120-     	db	'WARNING! Logical drives past Z: exist and will be ignored',0Dh,0Ah,'$'
 46009 00005218 4C6F676963616C2064-
 46009 00005221 726976657320706173-
 46009 0000522A 74205A3A2065786973-
 46009 00005233 7420616E642077696C-
 46009 0000523C 6C2062652069676E6F-
 46009 00005245 7265640D0A24       
 46010                                  
 46011                                  ; MSDOS 6.21 IO.SYS - SYSINIT:587Ch
 46012                                  	;db	'Wrong DBLSPACE.BIN version',0Dh,0Ah,'$'
 46013                                  	;db	7 dup(0)
 46014                                  
 46015                                  	;times	7 db 0
 46016                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 46017                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3D1Ch
 46018                                  	; 09/12/2022
 46019                                  	;times 4 db 0
 46020                                  
 46021                                  	; 08/04/2024 - Retro DOS v5.0
 46022                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:5B0Bh
 46023                                  baddblspace:
 46024 0000524B 526571756972656420-     	db	'Required system component is not installed',0Dh,0Ah,'$',0
 46024 00005254 73797374656D20636F-
 46024 0000525D 6D706F6E656E742069-
 46024 00005266 73206E6F7420696E73-
 46024 0000526F 74616C6C65640D0A24-
 46024 00005278 00                 
 46025                                  	;db	7 dup(0)
 46026                                  
 46027                                  ;----------------------------------------------------------------------------
 46028                                  		; 09/12/2022
 46029                                  		;db 0
 46030                                  
 46031                                  number3div	equ ($-SYSINIT$)
 46032                                  number3mod	equ (number3div % 16)
 46033                                  
 46034                                  %if number3mod>0 & number3mod<16
 46035 00005279 00<rep 7h>              		times (16-number3mod) db 0
 46036                                  %endif
 46037                                  
 46038                                  ;---------------------------------------------------------------------------- 
 46039                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS 
 46040                                  ;---------------------------------------------------------------------------- 
 46041                                  
 46042                                  ;MSDOS 6.21 IO.SYS - SYSINIT:5899h
 46043                                  
 46044                                  ;----------------------------------------------------------------------------
 46045                                  ; 20/04/2019 - Retro DOS v4.0
 46046                                  
 46047                                  ; 09/12/2022
 46048                                  ;
 46049                                  ;bss_start:
 46050                                  ;
 46051                                  ;ABSOLUTE bss_start
 46052                                  ;
 46053                                  ;alignb 16
 46054                                  
 46055                                  SI_end:  ; SI_end equ $
 46056                                  
 46057                                  ;----------------------------------------------------------------------------
 46058                                  
 46059                                  ;sysinitseg	ends
 46060                                  
 46061                                  ; ***************************************************************************
 46062                                  
 46063                                  ; 04/01/2023 - MSDOS 6.21 SYSINIT:SI_end = SYSINIT:58A0h (IOSYS:9F46h)
 46064                                  ; 09/12/2022 - MSDOS 5.0 SYSINIT:SI_end = SYSINIT:3D20h
 46065                                  
 46066                                  SYSINITSIZE	equ SI_end - SYSINIT$
 46067                                  DOSLOADSEG	equ SYSINITSEG+((SYSINITSIZE+15)/16)
 46068                                  
 46069                                  ;----------------------------------------------------------------------------
 46070                                  ; End of Retro DOS v4.2 IO.SYS source by Erdogan Tan - 04/01/2023 -
 46071                                  ;----------------------------------------------------------------------------
