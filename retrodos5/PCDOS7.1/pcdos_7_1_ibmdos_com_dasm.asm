

;
; +-------------------------------------------------------------------------+
; |   This file has been generated by The Interactive Disassembler (IDA)    |
; |           Copyright (c) 2018 Hex-Rays, <support@hex-rays.com>           |
; |                            Freeware version                             |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : F426A13B1E2E5A05BC7E56A18D551608D3BDC4CB14045324468860A3725E2084
; Input MD5    : 7F03764471D91E450F960EAE084831A6
; Input CRC32  : 4C51484C


                .386
                .model flat

; ===========================================================================

; Segment type: Regular
DOSDATA         segment byte public 'DOSDATA' use16
                assume cs:DOSDATA
                assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
byte_0          db 4 dup(0)             ; DATA XREF: DOSDATA:Instance_Data_Ptr↓o
                                        ; patch_offset+5↓w ...
DataVersion     dw 1
WinoldPatch1    db 8 dup(0)             ; DATA XREF: DOSCODE:47DC↓o
                                        ; DOSCODE:47F9↓o
MYNUM           dw 0
FCBLRU          dw 0                    ; DATA XREF: DOSDATA:1127↓r
                                        ; sub_5DAE+94↓r ...
OpenLRU         dw 0
OEM_HANDLER     dd 0FFFFFFFFh
LeaveAddr       dw offset LeaveDOS
RetryCount      dw 3                    ; DATA XREF: $IOCTL+9F↓w
RetryLoop       dw 1                    ; DATA XREF: Idle+9↓r
                                        ; $IOCTL:loc_68B2↓w
LastBuffer      dd 0FFFFFFFFh           ; DATA XREF: DOSCODE:5355↓w
                                        ; GETCURHEAD+5↓w ...
CONTPOS         dw 0                    ; DATA XREF: DOSDATA:Instance_Table↓o
                                        ; DOSDATA:1104↓o ...
arena_head      dw 0                    ; DATA XREF: sub_B44A↓r
                                        ; $ALLOC+3↓r ...
DPBHEAD         dd 0                    ; DATA XREF: DOSDATA:SysInitTable↓o
                                        ; DOSCODE:5229↓o ...
SFT_ADDR        dd SFTABL               ; DATA XREF: find_sft_entry_index+A↓r
                                        ; DOSCODE:CFC6↓w
BCLOCK          dd 0                    ; DATA XREF: $SET_TIME+28↓r
                                        ; $SET_TIME+3C↓r ...
BCON            dd 0                    ; DATA XREF: DOSDATA:0EFD↓o
                                        ; DOSDATA:110A↓o ...
MAXSEC          dw 128                  ; DATA XREF: DOSCODE:B98E↓r
                                        ; DOSCODE:CEA2↓r ...
BUFFHEAD        dd 0                    ; DATA XREF: DOSCODE:CFDD↓w
                                        ; DOSCODE:CFD5↓w
CDSADDR         dd 0                    ; DATA XREF: FATREAD_CDS+1D↓r
SFTFCB          dd 0                    ; DATA XREF: EnsureA20ON+50↓r
                                        ; EnsureA20ON+59↓r ...
KEEPCOUNT       dw 0
NUMIO           db 0                    ; DATA XREF: DOSCODE:CE57↓r
                                        ; DOSCODE:CE5E↓w
CDSCOUNT        db 0                    ; DATA XREF: DOSCODE:SETRET↓r
                                        ; FATREAD_CDS+13↓r
NULDEV          dw 2 dup(0)             ; DATA XREF: DOSCODE:CD92↓w
                                        ; DOSCODE:CD8E↓w
word_4C         dw 8004h                ; Null device attributes = DEVTYP|ISNULL
off_4E          dw offset SNULDEV       ; Strategy entry point
off_50          dw offset INULDEV       ; Interrupt entry point
asc_52          db 'NUL     '           ; Name of null device
SPLICES         db 0
Special_Entries dw 0
UU_IFS_DOS_CALL dd 0
ChkCopyProt     dw 0                    ; DATA XREF: DOSCODE:CD76↓w
A20OFF_PSP      dw 0                    ; DATA XREF: STATCHK:disa20↓r
                                        ; DOSCODE:B2E8↓w
                dw 0
                dw 0
BOOTDRIVE       db 0                    ; DATA XREF: STATCHK-5EAB↓r
                                        ; DOSCODE:Dont_Supress↓r
DDMOVE          db 0
EXT_MEM_SIZE    dw 0
BufferQueue     dd 0                    ; DATA XREF: GETCURHEAD↓r
                                        ; DOSCODE:CFDA↓o
DirtyBufferCount dw 0                   ; DATA XREF: DskRdBufScan↓r
                                        ; PACK+54↓w ...
SC_CACHE_PTR    dd 0
SC_CACHE_COUNT  dw 0                    ; DATA XREF: FAT_GOT_DPB+F9↓r
BuffInHMA       db 0                    ; DATA XREF: update_fat32_fsinfo+20↓r
                                        ; FAT_GOT_DPB+158↓r ...
LoMemBuff       dd 0                    ; DATA XREF: update_fat32_fsinfo+28↓r
                                        ; FAT_GOT_DPB+150↓r ...
UU_BUF_EMS_FIRST_PAGE db 0, 0, 0
CL0FATENTRY     dw 0FFFFh               ; DATA XREF: UNPACK-9↓r
                                        ; PACK-5↓w
IoStatFail      db 0
ALLOCMSAVE      db 0                    ; DATA XREF: DOSCODE:46C5↓r
                                        ; DOSCODE:46DE↓r ...
A20OFF_COUNT    db 0                    ; DATA XREF: STATCHK-5D28↓r
                                        ; STATCHK-5CED↓w ...
DOS_FLAG        db 0                    ; DATA XREF: DOSDATA:0F21↓o
                                        ; STATCHK:scct_6↓w ...
UNPACK_OFFSET   dw 0                    ; DATA XREF: DOSCODE:B283↓w
UMBFLAG         db 0                    ; DATA XREF: DOSDATA:0F15↓o
word_8A         dw 0                    ; DATA XREF: DOSCODE:B287↓w
UMB_HEAD        dw 0FFFFh               ; DATA XREF: DOSDATA:0F1B↓o
                                        ; DOSDATA:0F59↓o ...
START_ARENA     dw 1                    ; DATA XREF: $ALLOC+D↓w
                                        ; $ALLOC+1C↓w ...
JShare          dd BadCall              ; DATA XREF: DOSDATA:1014↓r
                                        ; sub_A242+60↓r
MFT_enter       dd OKCall
MFTClose        dd OKCall               ; DATA XREF: ShareEnd↓r
                dd BadCall
MFTCloseP       dd BadCall              ; DATA XREF: DOSDATA:LowInt28↓r
                                        ; sub_7685+1B↓r ...
MFTCloN         dd BadCall              ; DATA XREF: sub_5AE7+27↓r
set_block       dd BadCall              ; DATA XREF: STATCHK-5D5D↓r
                                        ; AbsSetup+43↓r ...
off_AC          dd BadCall
                dd OKCall
                dd BadCall
ShSave          dd BadCall              ; DATA XREF: sub_5DAE:loc_5E21↓r
ShChk           dd BadCall              ; DATA XREF: international_get+10↓r
                                        ; international_get:stcdpg↓r ...
ShCol           dd OKCall
ShCloseFile     dd BadCall              ; DATA XREF: REN_DEL_Check+31↓r
ShSU            dd BadCall
SFTABL          dd 0FFFFFFFFh           ; DATA XREF: DOSDATA:SFT_ADDR↑o
                dw 5
SFT0_SFTable    db 295 dup(0)           ; DATA XREF: DOSCODE:CDCF↓o
                                        ; DOSCODE:D003↓o
CARPOS          db 0                    ; DATA XREF: DOSDATA:0F03↓o
                                        ; DOSDATA:0F43↓o ...
STARTPOS        db 0                    ; DATA XREF: $STD_CON_STRING_INPUT+21↓w
                                        ; $STD_CON_STRING_INPUT+B0↓r ...
INBUF           db 128 dup(0)           ; DATA XREF: DOSCODE:4636↓o
CONBUF          db 131 dup(0)           ; DATA XREF: DOS_READ+1E8↓r
                                        ; DOS_READ+1EF↓w
PFLAG           db 0                    ; DATA XREF: OUTT+21↓r
                                        ; OUTT+4F↓w
VDERFLG         db 0                    ; DATA XREF: DOSCODE:$GET_VERIFY_ON_WRITE↓r
                                        ; DOSCODE:4B88↓w
CHARCO          db 3                    ; DATA XREF: DOSDATA:0F09↓o
                                        ; DOSDATA:1116↓o ...
chSwitch        db '/'
AllocMethod     db 0                    ; DATA XREF: $ALLOC+7↓r
                                        ; DOSCODE:loc_B67D↓r
fShare          db 0                    ; DATA XREF: REN_DEL_Check+35↓r
DIFFNAM         db 1
MYNAME          db 10h dup(20h)
CritPatch       dw offset redir_patch   ; DATA XREF: DOSDATA:0F57↓o
                dw offset redir_patch
                dw offset redir_patch
                dw offset redir_patch
                dw 0
                db 90h                  ; SWAPPABLE DATA AREA
ERRORMODE       db 0                    ; DATA XREF: STATCHK:IOROUT↓r
                                        ; STATCHK-5D65↓w ...
                                        ; critical error flag
INDOS           db 0                    ; DATA XREF: DOSDATA:0F53↓o
                                        ; DOSDATA:1028↓w ...
WPERR           db 0FFh                 ; DATA XREF: STATCHK-5D6B↓w
                                        ; HARDERR+F↓w ...
                                        ; drive on which current critical error occurred
EXTERR_LOCUS    db 0                    ; DATA XREF: CAL_LK+30↓w
                                        ; SetBad+9↓w ...
                                        ; locus of last error
EXTERR          dw 0                    ; DATA XREF: AbsSetup:errdriv↓w
                                        ; GETBP+12↓w ...
                                        ; extended error code of last error
EXTERR_ACTION   db 0                    ; DATA XREF: CAL_LK+20↓w
                                        ; $GetSetCdPg+3B↓w ...
                                        ; suggested action for last error
EXTERR_CLASS    db 0                    ; DATA XREF: CAL_LK+28↓w
                                        ; $GetSetCdPg+40↓w
                                        ; class of last error
EXTERRPT        dd 0                    ; DATA XREF: DOSCODE:4E81↓r
                                        ; HARDERRRW+B↓w ...
                                        ; Extended Error pointer
DMAADD          dd 80h                  ; DATA XREF: DOSCODE:$GET_DMA↓r
                                        ; DOSCODE:$SET_DMA↓w ...
                                        ; current DTA (Disk Transfer Address)
CurrentPDB      dw 0                    ; DATA XREF: STATCHK-5E74↓w
                                        ; STATCHK-5E68↓r ...
ConC_Spsave     dw 0
exit_code       dw 0                    ; DATA XREF: DOSCODE:AD7A↓w
CURDRV          db 0                    ; DATA XREF: DOSCODE:$GET_DEFAULT_DRIVE↓r
                                        ; DOSCODE:4E21↓w ...
CNTCFLAG        db 0                    ; DATA XREF: STATCHK-5ED0↓o
                                        ; STATCHK-5D52↓r
                db 0
                db 0
USER_IN_AX      dw 0                    ; DATA XREF: STATCHK:DSKROUT↓w
                                        ; sub_5F6A:loc_5F7F↓r ...
PROC_ID         dw 0                    ; DATA XREF: STATCHK-5DC3↓w
                                        ; sub_5F6A+52↓r ...
USER_ID         dw 0                    ; DATA XREF: DOSDATA:0F55↓o
                                        ; STATCHK-5DD9↓w ...
FirstArena      dw 0                    ; DATA XREF: $ALLOC+24↓w
BestArena       dw 0                    ; DATA XREF: $ALLOC+28↓w
LastArena       dw 0                    ; DATA XREF: $ALLOC+2C↓w
ENDMEM          dw 0                    ; DATA XREF: DOSCODE:CD5C↓w
                                        ; DOSCODE:CEFD↓r ...
LASTENT         dw 0                    ; DATA XREF: DOS_SEARCH_FIRST+68↓w
                                        ; DOS_CHDIR+D6↓w
FAILERR         db 0                    ; DATA XREF: STATCHK-5D95↓w
                                        ; ErrorMap+4↓r ...
ALLOWED         db 0                    ; DATA XREF: update_fat32_fsinfo+46↓w
                                        ; DOSCODE:79A3↓w ...
NoSetDir        db 0                    ; DATA XREF: STATCHK-5D98↓w
                                        ; DOSCODE:6685↓w ...
DidCTRLC        db 0                    ; DATA XREF: DOSCODE:B3F6↓w
SpaceFlag       db 0
                db 90h
DAY             db 0                    ; DATA XREF: $GET_DATE+8↓r
                                        ; DATE16+25↓r ...
MONTH           db 0                    ; DATA XREF: DATE16+1B↓r
                                        ; READTIME+63↓w
YEAR            dw 0                    ; DATA XREF: $GET_DATE+5↓r
                                        ; SETYEAR+5↓w ...
                                        ; YEAR (and CENTURY)
DAYCNT          dw 0FFFFh               ; DATA XREF: READTIME+2A↓r
                                        ; READTIME+35↓w ...
WEEKDAY         db 0                    ; DATA XREF: $GET_DATE+18↓r
                                        ; DODATE+7C↓w
CONSWAP         db 0                    ; DATA XREF: STATCHK-5D9B↓w
                                        ; sub_A242+E6↓r
IDLEINT         db 1                    ; DATA XREF: STATCHK-5D91↓w
                                        ; STATCHK-5D5A↓w
byte_359        db 0
DEVCALL_REQLEN  db 0                    ; DATA XREF: SETREAD+B↓o
                                        ; SETREAD+35↓o ...
                                        ; offset DEVCALL
DEVCALL_REQUNIT db 0                    ; DATA XREF: CHARINIT+6↓w
DEVCALL_REQFUNC db 0                    ; DATA XREF: FAT_GOT_DPB+E↓w
                                        ; FAT_GOT_DPB+186↓w ...
DEVCALL_REQSTAT dw 0                    ; DATA XREF: DOS_READ+86↓r
                                        ; DOS_READ+DC↓r ...
                db 8 dup(0)
CALLUNIT        db 0                    ; DATA XREF: FAT_GOT_DPB+20↓w
                                        ; FAT_GOT_DPB+19A↓w ...
CALLBR          db 0                    ; DATA XREF: DOS_READ:loc_7C84↓w
                                        ; FAT_GOT_DPB:CHECK_BYT↓r ...
CALLVIDM        db 0                    ; DATA XREF: FAT_GOT_DPB+7B↓r
CALLXAD_2       dw 0                    ; DATA XREF: DOS_READ+106↓r
                                        ; FAT_GOT_DPB+173↓w
CALLBPB         dw 0                    ; DATA XREF: DOS_READ+94↓r
                                        ; DOS_READ+99↓r ...
CALLSSEC        dw 0                    ; DATA XREF: DEVIOCALL2+26↓w
CALLVIDRW       dd 0                    ; DATA XREF: HARDERRRW+6↓r
CALLNEWSC       dw 2 dup(0)             ; DATA XREF: DEVIOCALL2+2B↓w
                                        ; DEVIOCALL2+33↓w
CALLDEVAD       dd 0                    ; DATA XREF: DEVIOCALL2+49↓w
                                        ; DEVIOCALL2+52↓r ...
IOCALL          db 0                    ; DATA XREF: $IOCTL+138↓w
                                        ; $IOCTL+181↓w ...
IOCALL_REQUNI   db 0                    ; DATA XREF: $IOCTL+13D↓w
                                        ; $IOCTL+2EF↓r
IOCALL_REQFUNC  db 0                    ; DATA XREF: $IOCTL+121↓w
                                        ; $IOCTL+131↓w ...
IOCALL_REQSTAT  dw 0                    ; DATA XREF: $IOCTL+187↓w
                                        ; $IOCTL+19B↓r ...
                db 8 dup(0)
IOMED           db 0                    ; DATA XREF: $IOCTL+141↓w
                                        ; $IOCTL+239↓w
IOXAD           dd 0                    ; DATA XREF: $IOCTL+145↓w
                                        ; $IOCTL+240↓w
IOSCNT          dw 0                    ; DATA XREF: $IOCTL+23C↓w
IOSSEC          dw 0
DSKSTCALL       db 14
                db 0
DSKSTCOM        db 5
DSKSTST         dw 0
                db 8 dup(0)
DSKCHRET        db 0
DEVIOBUF_PTR    dw offset DEVIOBUF
DOSSEG_INIT     dw 0                    ; DATA XREF: DOSCODE:CF01↓w
                dw 1
                dw 0
Lock_Buffer     dd 0                    ; DATA XREF: $DUP_PDB+5↓w
                                        ; $DUP_PDB+39↓r
                dd 0
                db 0
byte_3B1        db 90h                  ; DATA XREF: $IOCTL+B8↓w
                                        ; $IOCTL:loc_68EA↓w ...
USERNUM         dd 0                    ; DATA XREF: $GET_VERSION↓r
TIMEBUF         dw 3 dup(0)             ; DATA XREF: $SET_TIME+1A↓o
                                        ; READTIME+8↓o ...
DEVIOBUF        dw 0                    ; DATA XREF: DOSDATA:DEVIOBUF_PTR↑o
OPENBUF         db 128 dup(0)           ; DATA XREF: AbsSetup+32↓o
                                        ; DOSCODE:659B↓o ...
RENBUF          db 128 dup(0)           ; DATA XREF: DOSCODE:C314↓o
SEARCHBUF       db 53 dup(0)            ; DATA XREF: DOSCODE:64AB↓o
                                        ; DOSCODE:65AD↓o ...
DUMMYCDS        db 88 dup(0)            ; DATA XREF: DOS_SEARCH_NEXT+15↓o
NAME1           db 12 dup(0)            ; DATA XREF: DOSCODE:6D11↓o
                                        ; DOS_RENAME+FB↓o ...
NAME2           db 13 dup(0)            ; DATA XREF: DOS_RENAME+F8↓o
                                        ; DOS_RENAME+117↓o
DESTSTART_HW    dw 0                    ; DATA XREF: DOS_RENAME+10C↓w
                                        ; DOS_RENAME+137↓r ...
                db 5 dup(0)
ATTRIB          db 0                    ; DATA XREF: DOSCODE:loc_5D0D↓w
                                        ; DOSCODE:5D22↓r ...
EXTFCB          db 0                    ; DATA XREF: DOSCODE:64D2↓r
                                        ; DOSCODE:64F7↓r ...
SATTRIB         db 0                    ; DATA XREF: DOSCODE:6508↓r
                                        ; DOSCODE:6523↓w ...
                db 0
                db 0
FOUND_DEV       db 0                    ; DATA XREF: DOS_RENAME+38↓w
                                        ; DOS_RENAME+75↓r ...
                db 0
FSHARING        db 0                    ; DATA XREF: STATCHK-5DDE↓w
                                        ; Idle↓r ...
SECCLUSPOS      db 0                    ; DATA XREF: SETDIRSRCH+4E↓w
                                        ; SETDIRSRCH_FAT+4C↓w
                db 0
READOP          db 0                    ; DATA XREF: DREAD+5↓w
                                        ; DWRITE:dwrite1↓w ...
THISDRV         db 0                    ; DATA XREF: DOS_RENAME+CB↓r
                                        ; DOS_SEARCH_NEXT+3A↓w ...
CLUSFAC         db 0                    ; DATA XREF: SETDIRSRCH+1E↓w
                                        ; SETDIRSRCH_FAT+60↓w
CLUSSPLIT       db 0                    ; DATA XREF: PACK:yesdirty11↓r
                                        ; MAPCLUSTER↓w ...
INSMODE         db 0                    ; DATA XREF: $STD_CON_STRING_INPUT+29↓w
                                        ; $STD_CON_STRING_INPUT+68↓r ...
CMETA           db 0                    ; DATA XREF: DOSCODE:loc_66DC↓r
                                        ; DOSCODE:ChDirCrack↓r ...
                db 0
EXIT_TYPE       dw 0                    ; DATA XREF: sub_A242+F7↓w
                                        ; DOSCODE:B3BD↓w ...
CREATING        dw 0                    ; DATA XREF: DOS_RENAME+AF↓w
                                        ; DOS_RENAME+125↓w ...
dword_580       dd 0
USER_SP         dw 0                    ; DATA XREF: DOSDATA:1051↓r
                                        ; DOSDATA:105E↓w ...
USER_SS         dw 0                    ; DATA XREF: DOSDATA:104D↓r
                                        ; DOSDATA:1062↓w ...
word_588        dw 0
THISDPB         dd 0                    ; DATA XREF: GOTDPB↓w
                                        ; REN_DEL_Check:CheckDone↓r ...
CLUSSAVE        dw 0                    ; DATA XREF: PACK+70↓r
                                        ; MAPCLUSTER+97↓w ...
CLUSSEC         dd 0                    ; DATA XREF: PACK+7C↓r
                                        ; MAPCLUSTER+9A↓w ...
                dw 0
                dw 0
FATBYTE         dw 0                    ; DATA XREF: DOSCODE:51F2↓w
DEVPT           dd 0                    ; DATA XREF: sub_5F6A+83↓r
THISSFT         dd 0                    ; DATA XREF: $DUP_PDB+65↓w
                                        ; DOSCODE:5D4D↓r ...
THISCDS         dd 0                    ; DATA XREF: GETBP:GETBP_@f↓r
                                        ; DOSCODE:loc_5252↓r ...
THISFC          dd 0                    ; DATA XREF: DOSCODE:$DIR_SEARCH_FIRST↓w
                                        ; DOSCODE:64CE↓r ...
SFN             dw 0FFFFh               ; DATA XREF: sub_A242+1E↓r
                                        ; sub_A242+B7↓r ...
                dw 0
dword_5AE       dd 0
WFP_START       dw 0                    ; DATA XREF: DOSCODE:5D8E↓r
                                        ; Check_PathLen↓r ...
REN_WFP         dw 0                    ; DATA XREF: DOSCODE:5D93↓w
                                        ; DOSCODE:6D0C↓r ...
CURR_DIR_END    dw 0                    ; DATA XREF: DOS_RENAME+A9↓w
word_5B8        dw 0                    ; DATA XREF: DOS_READ+1CA↓w
                dw 0
CLUSNUM         dw 0                    ; DATA XREF: SETDIRSRCH:loc_89F3↓w
                                        ; SETDIRSRCH_FAT+50↓w
DIRSEC          dw 2 dup(0)             ; DATA XREF: SETDIRSRCH+5D↓w
                                        ; SETDIRSRCH_FAT+63↓w ...
DIRSTART        dw 0                    ; DATA XREF: DOS_RENAME+109↓r
                                        ; DOSCODE:7951↓w ...
                dw 0
                dd 0
                dd 0
                dw 0
                dd 0
                dw 0
                dw 0
                dw 0
                dw 0
word_5DC        dw 0
GROWCNT         dd 0
CURBUF          dd 0                    ; DATA XREF: DISK_INFO:dsk_info_2↓r
                                        ; sub_7873+2B↓r ...
CONSFT          dd 0
SAVEBX          dw 0                    ; DATA XREF: DOSDATA:0F51↓o
                                        ; STATCHK-5DF2↓w ...
SAVEDS          dw 0                    ; DATA XREF: DOSDATA:0F4F↓o
                                        ; DOSCODE:41B8↓w ...
RESTORE_TMP     dw 0                    ; DATA XREF: restore_world+5↓w
                                        ; restore_world+12↓r ...
NSS             dw 0                    ; DATA XREF: DOSDATA:105A↓r
                                        ; STATCHK-5DE8↓w ...
NSP             dw 0                    ; DATA XREF: STATCHK-5DEE↓w
EXTOPEN_FLAG    dw 0                    ; DATA XREF: DOSCODE:$Extended_Open↓w
                                        ; DOSCODE:C470↓r
EXTOPEN_ON      db 0                    ; DATA XREF: STATCHK-5DA4↓w
                                        ; sub_71A7↓r ...
EXTOPEN_IO_MODE dw 0                    ; DATA XREF: DOSCODE:C443↓w
SAVE_DI         dw 0                    ; DATA XREF: DOSCODE:C46B↓w
SAVE_ES         dw 0                    ; DATA XREF: DOSCODE:C466↓w
SAVE_DX         dw 0                    ; DATA XREF: DOSCODE:C475↓w
SAVE_CX         dw 0                    ; DATA XREF: DOSCODE:C47A↓w
SAVE_BX         dw 0                    ; DATA XREF: REN_DEL_Check+21↓w
                                        ; sub_71A7+9↓r ...
SAVE_SI         dw 0                    ; DATA XREF: DOSCODE:C489↓w
SAVE_DS         dw 0                    ; DATA XREF: DOSCODE:C484↓w
HIGH_SECTOR     dw 0                    ; DATA XREF: AbsSetup:AbsSetup2↓w
                                        ; RW32_CONVERT+31↓w ...
OffsetMagicPatch dw offset MagicPatch   ; DATA XREF: sub_9AC5+1↓r
DISK_FULL       db 0                    ; DATA XREF: DOSCODE:629B↓r
                                        ; DOSCODE:62A3↓w
TEMP_VAR        dw 0                    ; DATA XREF: FAT32_ABSDWRT-5F↓w
TEMP_VAR2       dw 0                    ; DATA XREF: FAT32_ABSDWRT-64↓w
DrvErr          db 0                    ; DATA XREF: DOSCODE:6677↓r
                                        ; GETTHISDRV+44↓w
DOS34_FLAG      dw 0                    ; DATA XREF: STATCHK-5DA1↓w
                                        ; DOSCODE:5329↓w ...
dword_613       dd 0                    ; DATA XREF: GETTHISDRV+1A↓o
                dd 0
AbsRdWr_SS      dw 0                    ; DATA XREF: FAT32_ABSDWRT-9A↓w
                                        ; FAT32_ABSDWRT-1A↓r
AbsRdWr_SP      dw 0                    ; DATA XREF: FAT32_ABSDWRT-96↓w
                                        ; FAT32_ABSDWRT-15↓r
                db 0
RENAMEDMA       db 384 dup(0)
AUXSTACK        db 384 dup(0)           ; DATA XREF: EnsureA20ON+32↓o
                                        ; STATCHK:REDISP↓o
DSKSTACK        db '@#IBM:12.01.2003.build_1.32#@ IBMDOS.COM(USA)',0
                                        ; DATA XREF: STATCHK-5D55↓o
                                        ; FAT32_ABSDWRT-8D↓o ...
                db 338 dup(0)           ; IOSTACK (just after DSKSTACK)
PRINTER_FLAG    db 0                    ; DATA XREF: STATCHK-5E5C↓w
                                        ; STATCHK-5D73↓o ...
VOLCHNG_FLAG    db 0FFh                 ; DATA XREF: FAT_GOT_DPB+4A↓r
                                        ; FAT_GOT_DPB+50↓w
                db 0
TEMP_DOSLOC     dw 0FFFFh               ; DATA XREF: DOSCODE:CD8B↓w
                                        ; DOSCODE:CF06↓r ...
                db 54 dup(0)
absdrw_extd     db 0                    ; DATA XREF: AbsSetup↓w
                                        ; FAT32_ABSDWRT-34↓r
DIRSTART_HW     dw 0                    ; DATA XREF: DOS_RENAME+103↓r
                                        ; DOSCODE:794D↓w ...
word_ADE        dw 0                    ; DATA XREF: SETDIRSRCH+38↓w
                                        ; SETDIRSRCH_FAT+53↓w
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
DESTSTART       dw 0                    ; DATA XREF: DOS_RENAME+106↓w
                                        ; DOS_RENAME+12F↓r ...
CLUSTNUM_HW     dw 0                    ; DATA XREF: DOS_DELETE:loc_6BDB↓w
                                        ; DISK_INFO+2A↓w ...
CL0FATENTRY_SIG dw 0                    ; DATA XREF: PACK-C↓r
CCONTENT_HW     dw 0                    ; DATA XREF: DISK_INFO+80↓r
                                        ; DISK_INFO+89↓w ...
ROOTCLUST_HW    dw 0                    ; DATA XREF: DOS_RENAME+133↓w
                                        ; sub_7639:loc_7666↓w ...
                dw 0
word_AF2        dw 0                    ; DATA XREF: DOSCODE:7989↓w
                                        ; DOSCODE:7998↓w
                dw 0
                dw 0
                dw 0
UCASE_TAB       dw 128                  ; DATA XREF: DOSDATA:1277↓o
UCASE_TAB_2     db 128,154, 69, 65,142, 65,143,128
                                        ; DATA XREF: DOSDATA:0D73↓o
                                        ; $GetExtCntry+8↓o
                db  69, 69, 69, 73, 73, 73,142,143
                db 144,146,146, 79,153, 79, 85, 85
                db  89,153,154,155,156,157,158,159
                db  65, 73, 79, 85,165,165,166,167
                db 168,169,170,171,172,173,174,175
                db 176,177,178,179,180,181,182,183
                db 184,185,186,187,188,189,190,191
                db 192,193,194,195,196,197,198,199
                db 200,201,202,203,204,205,206,207
                db 208,209,210,211,212,213,214,215
                db 216,217,218,219,220,221,222,223
                db 224,225,226,227,228,229,230,231
                db 232,233,234,235,236,237,238,239
                db 240,241,242,243,244,245,246,247
                db 248,249,250,251,252,253,254,255
FILE_UCASE_TAB  dw 128                  ; DATA XREF: DOSDATA:127C↓o
FILE_UCASE_TAB_2 db 128,154, 69, 65,142, 65,143,128
                                        ; DATA XREF: $GetExtCntry+F↓o
                db  69, 69, 69, 73, 73, 73,142,143
                db 144,146,146, 79,153, 79, 85, 85
                db  89,153,154,155,156,157,158,159
                db  65, 73, 79, 85,165,165,166,167
                db 168,169,170,171,172,173,174,175
                db 176,177,178,179,180,181,182,183
                db 184,185,186,187,188,189,190,191
                db 192,193,194,195,196,197,198,199
                db 200,201,202,203,204,205,206,207
                db 208,209,210,211,212,213,214,215
                db 216,217,218,219,220,221,222,223
                db 224,225,226,227,228,229,230,231
                db 232,233,234,235,236,237,238,239
                db 240,241,242,243,244,245,246,247
                db 248,249,250,251,252,253,254,255
COLLATE_TAB     dw 256                  ; DATA XREF: DOSDATA:1286↓o
                db  0, 1, 2, 3, 4, 5, 6, 7
                db  8, 9,10,11,12,13,14,15
                db 16,17,18,19,20,21,22,23
                db 24,25,26,27,28,29,30,31
                db ' !"#$%&',27h,'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ'
                db '[\]^_`ABCDEFGHIJKLMNOPQRSTUVWXYZ{|}~'
                db 127
                db 'CUEAAAACEEEIIIAAEAAOOOUUYOU$$$$$AIOUNN'
                db 166,167
                db '?'
                db 169,170,171,172
                db '!','"','"'
                db 176,177,178,179,180,181,182,183
                db 184,185,186,187,188,189,190,191
                db 192,193,194,195,196,197,198,199
                db 200,201,202,203,204,205,206,207
                db 208,209,210,211,212,213,214,215
                db 216,217,218,219,220,221,222,223
                db 224
                db 'S'
                db 226,227,228,229,230,231,232,233
                db 234,235,236,237,238,239,240,241
                db 242,243,244,245,246,247,248,249
                db 250,251,252,253,254,255
DBCS_TAB        dw 0                    ; DATA XREF: DOSDATA:128B↓o
DBCS_TAB_2      db 16 dup(0)            ; DATA XREF: DOSCODE:4EA3↓o
IBMDOSVERSION   db 7
                db 10                   ; MSVERSION
YRTAB           db 200,166,200,165,200,165,200,165
                                        ; DATA XREF: READTIME+4A↓o
                                        ; DODATE+28↓o ...
MONTAB          db 31                   ; DATA XREF: READTIME+5D↓o
                                        ; DODATE+34↓o
february        db 28                   ; DATA XREF: SETYEAR:SAVFEB↓w
                db 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
FILE_CHAR_TAB   dw 22                   ; DATA XREF: DOSDATA:1281↓o
                                        ; length
                db 1                    ; include all
                db 0
                db 255
                db 0                    ; exclude 0 - 20h
                db 0
                db 20h
                db 2
                db 14                   ; exclude 14 special
                db '."/\[]:|<>+=;,'
                db 24 dup(0)            ; reserved
SysInitTable    dw offset DPBHEAD       ; DATA XREF: DOSCODE:CFCA↓o
                                        ; DOSCODE:D00A↓o
                                        ; SYSINITVARS
                dw 0
                dw offset COUNTRY_CDPG
                dw 0
                db 3 dup(0)
TEMPSEG         dw 0                    ; DATA XREF: FAT32_ABSDWRT-AA↓w
                                        ; FAT32_ABSDWRT:absdrd_4↓r
redir_patch     db 0                    ; DATA XREF: DOSDATA:CritPatch↑o
                                        ; DOSDATA:0317↑o ...
DosHasHMA       db 0                    ; DATA XREF: STATCHK-5E99↓r
                                        ; sub_A242+58↓r ...
FixExePatch     dw 0                    ; DATA XREF: DOSCODE:CD70↓w
UnknownPatch    dw 0                    ; DATA XREF: DOSCODE:CD73↓w
; ---------------------------------------------------------------------------

MAP_CASE:                               ; DATA XREF: DOSDATA:12A8↓o
                cmp     al, 80h
                jb      short Map_Case_retn ; Map no chars below 80H ever

Map1:                                   ;
                sub     al, 80h         ; Turn into index value
                push    ds
                push    bx
                mov     bx, offset UCASE_TAB_2 ; UCASE_TAB+2
                push    cs
                pop     ds
                assume ds:DOSCODE
                xlat                    ; Get upper case character
                pop     bx
                pop     ds
                assume ds:nothing

Map_Case_retn:                          ; CODE XREF: DOSDATA:0D6D↑j
                retf
; ---------------------------------------------------------------------------
                db 0
                db 0
                db 0
                dw 0
                db 0
                db 5 dup(0)
                db 23 dup(0)
USER_SP_2F      dw offset FAKE_STACK_2F ; DATA XREF: Fake_User_Stack↓r
FAKE_STACK_2F   dw 14 dup(0)            ; DATA XREF: DOSDATA:USER_SP_2F↑o
SCAN_FLAG       db 0                    ; DATA XREF: $STD_CON_INPUT_NO_ECHO+48↓w
                                        ; $STD_CON_INPUT_NO_ECHO+52↓w
DATE_FLAG       dw 0                    ; DATA XREF: READTIME↓w
                                        ; $STD_CON_INPUT_NO_ECHO+18↓r ...
AbsDskErr       dw 0                    ; DATA XREF: AbsSetup+51↓w
                                        ; FAT32_ABSDWRT-3F↓w ...
                                        ; Storage for Abs dsk read/write err
NO_NAME_ID      db 'NO NAME    '        ; null media id
                db    0
; ---------------------------------------------------------------------------

SNULDEV:                                ; DATA XREF: DOSDATA:off_4E↑o
                or      word ptr es:[bx+3], 100h ; [es:bx+SRHEAD.REQSTAT+1],(STDON>>8)

INULDEV:                                ; DATA XREF: DOSDATA:off_50↑o
                retf
; ---------------------------------------------------------------------------
                db 0
UmbSave2        db 5 dup(0)             ; DATA XREF: DOSCODE:468F↓o
UmbSaveFlag     db 0                    ; DATA XREF: DOSCODE:4678↓w
                                        ; DOSCODE:Win386_Leaving_c↓r ...
ERR_TABLE_21    db    1,   7,   4,0FFh  ; DATA XREF: ErrorMap+1↓o
                db    2,   8,   3,   2  ; CLASS ACTION and LOCUS info for the INT 21h errors
                db    3,   8,   3,   2
                db    4,   1,   4,   1
                db    5,   3,   3,0FFh
                db    6,   7,   4,   1
                db    7,   7,   5,   5
                db    8,   1,   4,   5
                db    9,   7,   4,   5
                db  0Ah,   7,   4,   5
                db  0Bh,   9,   3,   1
                db  0Ch,   7,   4,   1
                db  0Dh,   9,   4,   1
                db  0Fh,   8,   3,   2
                db  10h,   3,   3,   2
                db  11h, 0Dh,   3,   2
                db  12h,   8,   3,   2
                db  50h, 0Ch,   3,   2
                db  20h, 0Ah,   2,   2
                db  21h, 0Ah,   2,   2
                db  54h,   1,   4,0FFh
                db  56h,   3,   3,   1
                db  52h,   1,   4,   2
                db  32h,   9,   3,   3
                db  55h, 0Ch,   3,   3
                db  57h,   9,   3,   1
                db  53h, 0Dh,   4,   1
                db  24h,   1,   4,   5
                db  26h,   1,   4,   1
                db  27h,   1,   4,   1
                db  5Ah, 0Dh,   4,   2
                db 0FFh,0FFh,0FFh,0FFh
ERR_TABLE_24    db  13h, 0Bh,   7,   2  ; CLASS ACTION and LOCUS info for the INT 24h errors
                db  14h,   4,   5,   1
                db  15h,   5,   7,0FFh
                db  16h,   4,   5,   1
                db  17h, 0Bh,   4,   2
                db  18h,   4,   5,   1
                db  19h,   5,   1,   2
                db  1Ah, 0Bh,   7,   2
                db  1Bh, 0Bh,   4,   2
                db  1Ch,   2,   7,   4
                db  1Dh,   5,   4,0FFh
                db  1Eh,   5,   4,0FFh
                db  1Fh, 0Dh,   4,0FFh
                db  20h, 0Ah,   2,   2
                db  21h, 0Ah,   2,   2
                db  22h, 0Bh,   7,   2
                db  32h,   9,   3,   3
                db  23h,   7,   4,   1
                db  24h,   1,   4,   5
                db 0FFh, 0Dh,   5,0FFh
ErrMap24        db  13h, 14h, 15h, 16h, 17h, 18h, 19h, 1Ah
                db  1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 1Fh, 1Fh, 22h
SPECIAL_VERSION dw 0                    ; DATA XREF: DOSCODE:B21C↓r
OLD_FIRSTCLUS   dw 0                    ; DATA XREF: DOSCODE:7796↓w
                                        ; DOSCODE:7806↓r ...
exec_init_SP    dd 0                    ; DATA XREF: DOSDATA:0F0F↓o
                                        ; DOSDATA:111C↓o ...
exec_init_IP    dd 0                    ; DATA XREF: DOSCODE:B2B6↓r
                                        ; DOSCODE:exec_go↓r
                dw 0
                dw 0
                dw 0
                dw 0
                dw 0
                dw 0
                dw 0
                dw 0
                dw 0
                dw 0
                dw 0
                dw 0
                dw 0
Win386_Info     db 4, 0                 ; DATA XREF: DOSCODE:46F0↓o
                                        ; DOSCODE:470A↓o
                                        ; WIN386_SIS version
                dd 0                    ; .Next_Dev_Ptr
Win386_Inf_Virt_Dev_Ptr dd 0            ; DATA XREF: DOSCODE:Win386_vchk↓w
                                        ; DOSCODE:465D↓w
                                        ; .Virt_Dev_File_Ptr
                dd 0                    ; .Reference_Data
Instance_Data_Ptr dw offset Instance_Table, offset byte_0
                                        ; DATA XREF: DOSCODE:CD96↓w
                dw offset Unknown_Ptr
                dw 0                    ; Win386_IIS.size
Instance_Table  dw offset CONTPOS       ; DATA XREF: DOSDATA:Instance_Data_Ptr↑o
InsTBL_CONTPOS_seg dw 0                 ; DATA XREF: DOSCODE:CD9E↓o
                dw 2
                dw offset BCON
                dw 0
                dw 4
                dw offset CARPOS
                dw 0
                dw 106h
                dw offset CHARCO
                dw 0
                dw 1
                dw offset exec_init_SP
                dw 0
                dw 22h
                dw offset UMBFLAG
                dw 0
                dw 1
                dw offset UMB_HEAD
                dw 0
                dw 2
                dw offset DOS_FLAG
                dw 0C9h
                dw 1
                dw offset INDOS_FLAG    ; what for ?
                dw 0C9h
                dw 1
                dw offset DEVIO_IN_PROGRESS ; "devio call in progress" status flag ptr
                dw 0C9h
                dw 1
                dw 0
                dw 0
                dw 0FFFFh
                dw 0FFFFh
CL0FATENTRY_HW  dw 0FFFFh               ; DATA XREF: UNPACK-13↓r
                                        ; PACK-9↓w
Unknown_Ptr     dw 0                    ; DATA XREF: DOSDATA:0EF3↑o
                dw 0C9h
                dw 0CCh
                dw offset CARPOS
                dw 0C9h
                dw offset UNKNOWN1      ; ?
                dw 0
                dw 0
Win386_DOSVars  db 5                    ; DATA XREF: DOSCODE:4755↓o
                                        ; Major_version
                db 0                    ; Minor_version
                dw offset SAVEDS
                dw offset SAVEBX
                dw offset INDOS
                dw offset USER_ID
                dw offset CritPatch
                dw offset UMB_HEAD
IsWin386        db 2 dup(0)             ; DATA XREF: STATCHK-5DE3↓r
                                        ; DOSCODE:noVxD31↓w ...
                db 36h,0F6h, 6,20h, 3,0FFh ; Patch for Sidekick
                db 75h, 0Ch
                db 36h, 0FFh, 36h, 58h, 3
                db 0CDh, 28h
                db 80h,3Eh,20h, 3, 0    ; Patch for PortOfEntry
                db 75h, 37h
                db 0BCh, 0A0h, 0Ah
LocalSFT        dd 0                    ; DATA XREF: DOSCODE:63C2↓w
                                        ; DOSCODE:63C7↓w
DOSINTTABLE     dd DIVOV                ; DATA XREF: DOSDATA:divov_cont↓r
DOSINTTABLE_4   dd QUIT                 ; DATA XREF: DOSDATA:quit_cont↓r
DOSINTTABLE_8   dd COMMAND              ; DATA XREF: DOSDATA:command_cont↓r
DOSINTTABLE_12  dd ABSDRD               ; DATA XREF: DOSDATA:absdrd_cont↓r
DOSINTTABLE_16  dd ABSDWRT              ; DATA XREF: DOSDATA:absdwrt_cont↓r
DOSINTTABLE_20  dd stay_resident        ; DATA XREF: DOSDATA:sr_cont↓r
DOSINTTABLE_24  dd INT2F                ; DATA XREF: DOSDATA:int2f_cont↓r
DOSINTTABLE_28  dd CALL_ENTRY           ; DATA XREF: DOSDATA:callentry_cont↓r
SS_Save         dw 0                    ; DATA XREF: EnsureA20ON+26↓w
                                        ; EnsureA20ON+40↓r
SP_Save         dw 0                    ; DATA XREF: EnsureA20ON+2B↓w
                                        ; EnsureA20ON+45↓r
; ---------------------------------------------------------------------------

ldivov:                                 ; DATA XREF: patch_offset+5↓o
                                        ; DOSCODE:patch_table↓o
                jmp     short divov_cont
; ---------------------------------------------------------------------------
                call    EnsureA20ON

divov_cont:                             ; CODE XREF: DOSDATA:ldivov↑j
                jmp     cs:DOSINTTABLE
; ---------------------------------------------------------------------------

lquit:                                  ; DATA XREF: patch_offset+53↓o
                                        ; DOSCODE:D1EB↓o
                jmp     short quit_cont
; ---------------------------------------------------------------------------
                call    EnsureA20ON

quit_cont:                              ; CODE XREF: DOSDATA:lquit↑j
                jmp     cs:DOSINTTABLE_4
; ---------------------------------------------------------------------------

lcommand:                               ; DATA XREF: patch_offset+5A↓o
                                        ; DOSCODE:D1ED↓o
                jmp     short command_cont
; ---------------------------------------------------------------------------
                call    EnsureA20ON

command_cont:                           ; CODE XREF: DOSDATA:lcommand↑j
                jmp     cs:DOSINTTABLE_8
; ---------------------------------------------------------------------------

labsdrd:                                ; DATA XREF: patch_offset+61↓o
                                        ; DOSCODE:D1EF↓o
                jmp     short absdrd_cont
; ---------------------------------------------------------------------------
                call    EnsureA20ON

absdrd_cont:                            ; CODE XREF: DOSDATA:labsdrd↑j
                jmp     cs:DOSINTTABLE_12
; ---------------------------------------------------------------------------

labsdwrt:                               ; DATA XREF: patch_offset+68↓o
                                        ; DOSCODE:D1F1↓o
                jmp     short absdwrt_cont
; ---------------------------------------------------------------------------
                call    EnsureA20ON

absdwrt_cont:                           ; CODE XREF: DOSDATA:labsdwrt↑j
                jmp     cs:DOSINTTABLE_16
; ---------------------------------------------------------------------------

lstay_resident:                         ; DATA XREF: patch_offset+6F↓o
                                        ; DOSCODE:D1F3↓o
                jmp     short sr_cont
; ---------------------------------------------------------------------------
                call    EnsureA20ON

sr_cont:                                ; CODE XREF: DOSDATA:lstay_resident↑j
                jmp     cs:DOSINTTABLE_20
; ---------------------------------------------------------------------------

lint2f:                                 ; DATA XREF: patch_offset+3F↓o
                                        ; DOSCODE:D1F5↓o
                jmp     short int2f_cont
; ---------------------------------------------------------------------------
                call    EnsureA20ON

int2f_cont:                             ; CODE XREF: DOSDATA:lint2f↑j
                jmp     cs:DOSINTTABLE_24
; ---------------------------------------------------------------------------

lcall_entry:                            ; DATA XREF: patch_offset+4C↓o
                                        ; DOSCODE:D1F7↓o
                jmp     short callentry_cont
; ---------------------------------------------------------------------------
                call    EnsureA20ON

callentry_cont:                         ; CODE XREF: DOSDATA:lcall_entry↑j
                jmp     cs:DOSINTTABLE_28
; ---------------------------------------------------------------------------
DosRetAddr23    dd 0                    ; DATA XREF: DOSDATA:LowInt23↓w
                                        ; DOSDATA:1005↓r ...
DosRetAddr24    dd 0                    ; DATA XREF: DOSDATA:LowInt24↓w
                                        ; DOSDATA:1019↓r ...
; ---------------------------------------------------------------------------

LowInt23:                               ; DATA XREF: DOSCODE:LowInt23Addr↓o
                pop     word ptr cs:DosRetAddr23
                pop     word ptr cs:DosRetAddr23+2
                int     23h             ; DOS - CONTROL "C" EXIT ADDRESS
                                        ; Return: return via RETF 2 with CF set
                                        ; DOS will abort program with errorlevel 0
                                        ; else
                                        ; interrupted DOS call continues
                call    EnsureA20ON
                jmp     cs:DosRetAddr23
; ---------------------------------------------------------------------------

LowInt24:                               ; DATA XREF: DOSCODE:LowInt24Addr↓o
                pop     word ptr cs:DosRetAddr24
                pop     word ptr cs:DosRetAddr24+2
                int     24h             ; DOS - FATAL ERROR HANDLER ADDRESS
                                        ; Automatically called upon detection of unrecoverable I/O error.
                call    EnsureA20ON
                jmp     cs:DosRetAddr24
; ---------------------------------------------------------------------------

LowInt28:                               ; DATA XREF: DOSCODE:LowInt28Addr↓o
                int     28h             ; DOS 2+ internal - KEYBOARD BUSY LOOP
                call    EnsureA20ON
                retf
; ---------------------------------------------------------------------------

disa20_xfer:                            ; DATA XREF: DOSCODE:B2F0↓o
                call    XMMDisableA20
                cli
                mov     cs:INDOS, 0
                mov     ss:INDOS_FLAG, 0
                mov     ss, ax
                mov     sp, di
                sti
                push    ds
                push    si
                mov     es, dx
                mov     ds, dx
                mov     ax, bx
                retf
; ---------------------------------------------------------------------------

disa20_iret:                            ; DATA XREF: STATCHK-5CE8↓o
                call    XMMDisableA20
                dec     ds:INDOS
                dec     ds:INDOS_FLAG
                mov     ss, ds:USER_SS
                mov     sp, ds:USER_SP
                mov     bp, sp
                mov     [bp+0], al
                les     ax, dword ptr ds:NSS
                mov     ds:USER_SP, es
                mov     ds:USER_SS, ax
                pop     ax
                pop     bx
                pop     cx
                pop     dx
                pop     si
                pop     di
                pop     bp
                pop     ds
                pop     es

lirett:                                 ; DATA XREF: patch_offset+F↓o
                iret

; =============== S U B R O U T I N E =======================================


XMMDisableA20   proc near               ; CODE XREF: DOSDATA:disa20_xfer↑p
                                        ; DOSDATA:disa20_iret↑p
                push    bx
                push    ax
                mov     ah, 6
                call    cs:XMMcontrol
                pop     ax
                pop     bx
                retn
XMMDisableA20   endp

; ---------------------------------------------------------------------------
XMMcontrol      dd 0                    ; DATA XREF: XMMDisableA20+4↑r
                                        ; EnsureA20ON+37↓r ...
byte_107F       db 6 dup(   0)          ; DATA XREF: DOSCODE:loc_5348↓w

; =============== S U B R O U T I N E =======================================


EnsureA20ON     proc near               ; CODE XREF: DOSDATA:0FA0↑p
                                        ; DOSDATA:0FAA↑p ...
                pushf
                push    ds
                push    es
                push    cx
                push    si
                push    di
                xor     si, si
                mov     ds, si
                assume ds:DOSCODE
                dec     si
                mov     di, 90h
                mov     es, si
                mov     si, 80h
                mov     cx, 4
                cld
                repe cmpsw
                jz      short loc_10A7

loc_10A0:                               ; CODE XREF: EnsureA20ON+4C↓j
                pop     di
                pop     si
                pop     cx
                pop     es
                pop     ds
                assume ds:nothing
                popf
                retn
; ---------------------------------------------------------------------------

loc_10A7:                               ; CODE XREF: EnsureA20ON+19↑j
                push    bx
                push    ax
                mov     ax, cs
                mov     cs:SS_Save, ss
                mov     cs:SP_Save, sp
                mov     ss, ax
                assume ss:DOSCODE
                mov     sp, offset AUXSTACK
                mov     ah, 5
                call    cs:XMMcontrol
                or      ax, ax
                jz      short loc_10D3
                mov     ss, cs:SS_Save
                assume ss:nothing
                mov     sp, cs:SP_Save
                pop     ax
                pop     bx
                jmp     short loc_10A0
; ---------------------------------------------------------------------------

loc_10D3:                               ; CODE XREF: EnsureA20ON+3E↑j
                mov     ah, 0Fh
                int     10h             ; - VIDEO - GET CURRENT VIDEO MODE
                                        ; Return: AH = number of columns on screen
                                        ; AL = current video mode
                                        ; BH = current active display page
                cmp     al, 7
                jz      short loc_10E0
                mov     ax, 2
                int     10h             ; - VIDEO - SET VIDEO MODE
                                        ; AL = mode

loc_10E0:                               ; CODE XREF: EnsureA20ON+54↑j
                mov     ax, 500h
                int     10h             ; - VIDEO - SELECT DISPLAY PAGE
                                        ; AL = display page, 0-7  for modes 0 & 1, 0-3  for modes 2 & 3
                mov     si, 1213h
                push    cs
                pop     ds
                assume ds:DOSCODE
                cld

loc_10EB:                               ; CODE XREF: EnsureA20ON+72↓j
                lodsb
                cmp     al, 24h ; '$'
                jz      short loc_10F9
                mov     ah, 0Eh
                mov     bx, 7
                int     10h             ; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
                                        ; AL = character, BH = display page (alpha modes)
                                        ; BL = foreground color (graphics modes)
                jmp     short loc_10EB
; ---------------------------------------------------------------------------

loc_10F9:                               ; CODE XREF: EnsureA20ON+69↑j
                                        ; EnsureA20ON+75↓j
                sti
                jmp     short loc_10F9
EnsureA20ON     endp

; ---------------------------------------------------------------------------
OldInstanceJunk dw 70h                  ; DATA XREF: DOSCODE:475D↓o
                                        ; segment of BIOS
                dw 0                    ; indicate stacks in SYSINIT area
                dw 6                    ; 6 instance items
OldInstanceJunk_6 dw 0                  ; DATA XREF: DOSCODE:CDAB↓o
                dw offset CONTPOS
                dw 2
                dw 0
                dw offset BCON
                dw 4
                dw 0
                dw offset CARPOS
                dw 106h
                dw 0
                dw offset CHARCO
                dw 1
                dw 0
                dw offset exec_init_SP
                dw 34
                dw 70h
                dw 0Ch                  ; ALTAH byte in dos bios
                dw 1
; ---------------------------------------------------------------------------
                push    cx
                mov     cx, FCBLRU

loc_112B:                               ; CODE XREF: DOSDATA:loc_112B↓j
                loop    loc_112B
                pop     cx
                retf
; ---------------------------------------------------------------------------
UmbSave1        db 11 dup(0)            ; DATA XREF: DOSCODE:4687↓o
OLD_FIRSTCLUS_HW dw 0                   ; DATA XREF: DOSCODE:779E↓w
                                        ; DOSCODE:loc_77FF↓r ...
FastOpenTable   dw 2                    ; DATA XREF: patch_misc_segments+36↓o
FastTable_2     dw offset FastRet       ; DATA XREF: DOSCODE:5779↓o
                                        ; FastOpen_Update:fastinvoke↓o ...
                dw 0
                dw offset FastRet
                dw 0
FastOpenFlg     db 0                    ; DATA XREF: Fastxxx_Purge+9↓r
                                        ; sub_7062↓w ...
                db  0, 0, 0, 0, 0, 0
UNKNOWN1        dw 0                    ; DATA XREF: DOSDATA:0F47↑o
                db  0, 0, 0, 0, 0
word_1154       dw 'C'                  ; DATA XREF: DOSCODE:5DA0↓w
                                        ; DOSCODE:loc_6713↓w ...
                db  0, 0, 0, 0, 0, 0, 0, 0
                db  0, 0, 0, 0, 0, 0, 0, 0
                db  0, 0, 0, 0, 0, 0, 0, 0
                db  0, 0, 0, 0, 0, 0, 0
CurSC_DRIVE     db 0FFh                 ; DATA XREF: FAT32_ABSDWRT-74↓w
                                        ; FAT32_ABSDWRT+34↓w ...
WinoldPatch2    db 8 dup(0)             ; DATA XREF: DOSCODE:47E7↓o
                                        ; DOSCODE:4804↓o
FIRST_BUFF_ADDR dw 0                    ; DATA XREF: DskWrtBufPurge:bufq6↓r
                                        ; FAT_GOT_DPB+BE↓r ...
DOSP1_ID        db 36h,0C5h,36h         ; Windows 3.1 patches
                db 36h, 5,0C5h,74h, 7,0E8h
                db 90h,90h
DOSP12_ID       db 36h,0C5h,36h
                db 36h, 5,0C5h,74h, 7,0E8h
DOSP3_ID        db 51h, 6,57h,0BAh
                db 29h, 2,0E8h
                db 9Ah,0E3h,5Fh, 7
DOSP4_ID        db 59h
DOSP5_ID        db 51h
                db 0ACh,3Ch,1Ah,74h, 5
                db 0E8h
DOSP7_ID        db 2Eh,8Ch,1Eh
                db 7Eh, 5
                db 2Eh,89h,1Eh
                db 7Ch, 5
                db 8Ch,0CBh
                db 8Eh,0DBh
                db 0FEh, 6
                db 0CFh, 2
                db 33h,0C0h
DOSP8_ID        db 50h,36h,0A1h
                db 0EAh, 2,26h,3Bh,45h
                db 2Fh,58h
DOSP10_ID       db  6,1Fh
                db 8Bh,0DFh
                db 33h,0C0h,8Bh,0D0h,0E8h
                db 0DFh,0Eh
                db 1Eh,36h,0C5h,36h,36h, 5,0E8h,0AFh
                db 0Eh,8Bh,0D7h,0B4h,86h,36h,8Bh,3Eh
                db  9, 3,0F7h,0C7h, 0,80h,74h,19h
                db 0E8h,47h,17h,8Bh,0FAh,0Ah,0C0h,74h
                db 10h,3Ch, 3,74h, 3,1Fh,0EBh,0CFh
                db 5Fh
                db 36h,0C4h,3Eh,36h, 5,0E9h,0A1h, 4
                db 5Fh, 8Bh, 0FAh
DOSP13_ID       db 0ACh,3Ch,24h,74h, 8,0B3h, 7,0B4h
                db 0Eh,0CDh,10h,0EBh,0F3h,0EBh,0FEh
XMMERRMSG       db 0Dh,0Ah
                db 'A20 Hardware Error',0Dh,0Ah,'$'
COUNTRY_CDPG    db 0, 0, 0, 0, 0, 0, 0, 0
                                        ; DATA XREF: DOSDATA:0D5C↑o
                                        ; $INTERNATIONAL+17↓o ...
                                        ; reserved words
                db '\COUNTRY.SYS',0     ; path name of country.sys
                db 51 dup(0)
                dw 437                  ; system code page id
                dw 6                    ; number of entries
COUNTRY_CDPG_76 db 2                    ; DATA XREF: $GetExtCntry+C7↓o
                                        ; SetUcase
                dw offset UCASE_TAB
                dw 0
                db 4                    ; SetUcaseFile
                dw offset FILE_UCASE_TAB
                dw 0
                db 5                    ; SetFileList
                dw offset FILE_CHAR_TAB
                dw 0
                db 6                    ; SetCollate
                dw offset COLLATE_TAB
                dw 0
                db 7                    ; SetDBCS
                dw offset DBCS_TAB
                dw 0
                db 1                    ; SetCountryInfo
                dw 38                   ; NEW_COUNTRY_SIZE
_COUNTRY_ID     dw 1                    ; DATA XREF: DOSCODE:4C19↓o
                                        ; USA country id
                dw 437                  ; USA system code page id
COUNTRY_CDPG_108 dw 0                   ; DATA XREF: $INTERNATIONAL+59↓o
                                        ; date format
                db '$',0,0,0,0          ; currency symbol
                db ',',0                ; thousand separator
                db '.',0                ; decimal separator
                db '-',0                ; date separator
                db ':',0                ; time separator
                db 0                    ; currency format flag
                db 2                    ; # of digits after decimal in currency
                db 0                    ; time format
                dw offset MAP_CASE      ; mono case routine entry point
                dw 0                    ; segment of entry point
                db ',',0                ; data list separator
                dw 5 dup(0)             ; reserved
INDOS_FLAG      db 0                    ; DATA XREF: DOSDATA:0F27↑o
                                        ; DOSDATA:102E↑w ...
DEVIO_IN_PROGRESS db 0                  ; DATA XREF: DOSDATA:0F2D↑o
                                        ; DEVIOCALL2:chardev2↓w ...
_ENU            db 'ENU',0              ; DATA XREF: DOSCODE:4C2C↓o
                                        ; DOSCODE:4C32↓o
_USA            db 'USA',0
_US             db 'US'
                dw 1
                dw 2
                dw 0
_AM             db 'AM',0
_PM             db 'PM',0
_MMDDYY         db 'M/d/yy     dddd,MMMMdd,yyyy         '
                db 0
                db 0
                dw 0
VxDpath         db 'c:\wina20.386',0    ; DATA XREF: DOSCODE:46B1↓w
                                        ; DOSCODE:46BF↓o ...
                dw 0
drive_flags     db 26 dup(0)            ; DATA XREF: DOSDATA:1330↓o
                                        ; FAT32_ABSDWRT+F↓r ...
                db 1
BiosComBlockPtr dw 2 dup(0)             ; DATA XREF: DOSCODE:CD40↓w
                                        ; DOSCODE:CD44↓w
                db 5 dup(0)
                dw 4
                dw offset INDOS_FLAG
                dw offset drive_flags
                dw offset NLS_YES
                dw offset unknown_zero_dd
NLS_YES         db 'Y'                  ; DATA XREF: DOSDATA:1332↑o
                                        ; $GetExtCntry+29↓r
NLS_NO          db 'N'                  ; DATA XREF: $GetExtCntry+37↓r
NLS_yes2        db 'y'                  ; DATA XREF: $GetExtCntry+30↓r
NLS_no2         db 'n'                  ; DATA XREF: $GetExtCntry+3E↓r
unknown_zero_dd dd 0                    ; DATA XREF: DOSDATA:1334↑o
Rational386PatchPtr dw 0                ; DATA XREF: DOSCODE:di_set_patch↓w
; ---------------------------------------------------------------------------

MagicPatch:                             ; DATA XREF: DOSDATA:OffsetMagicPatch↑o
                retf
; ---------------------------------------------------------------------------
                db  90h
                db  90h
                db  90h
                db  90h
                db  90h
DOSDATA         ends

; ---------------------------------------------------------------------------
; File Name   : C:\Yedek\pcdos_7_1\IBMDOS.COM
; Format      : Binary file
; Base Address: 0000h Range: 0000h - A646h Loaded length: A646h
; ===========================================================================

; Segment type: Regular
DOSCODE         segment byte public 'DOSCODE' use16
                assume cs:DOSCODE
                ;org 3F10h
                assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

$STARTCODE:                             ; DATA XREF: DOSCODE:3F13↓o
                                        ; DOSCODE:D016↓o ...
                jmp     DOSINIT
; ---------------------------------------------------------------------------
                dw offset $STARTCODE
BioDataSeg      dw 70h
DosDSeg         dw 0                    ; DATA XREF: STATCHK-5ED7↓r
                                        ; STATCHK-5E79↓r ...
                                        ; DOSDATA segment address
MSMAJOR         db 7                    ; DOS_MAJOR_VERSION
MSMINOR         db 10                   ; DOS_MINOR_VERSION
I21_MAP_E_TAB   db 38h, 2, 1, 2, 39h, 3, 3, 2
                                        ; DATA XREF: ETAB_LK+9↓o
                db 5, 3Ah, 4, 10h, 3, 2, 5, 3Bh ; INT 21h Error code mapping table
                db 2, 2, 3, 3Ch, 4, 3, 2, 4
                db 5, 3Dh, 6, 3, 2, 0Ch, 4, 1Ah
                db 5, 3Eh, 1, 6, 3Fh, 2, 6, 5
                db 40h, 2, 6, 5, 41h, 3, 3, 2
                db 5, 42h, 2, 6, 1, 43h, 4, 3
                db 2, 1, 5, 44h, 5, 0Fh, 0Dh, 1
                db 6, 5, 45h, 2, 6, 4, 46h, 2
                db 6, 4, 47h, 2, 1Ah, 0Fh, 48h, 2
                db 7, 8, 49h, 2, 7, 9, 4Ah, 3
                db 7, 9, 8, 4Bh, 8, 3, 1, 2
                db 4, 0Bh, 0Ah, 8, 5, 4Eh, 3, 3
                db 2, 12h, 4Fh, 1, 12h, 56h, 5, 11h
                db 3, 2, 10h, 5, 57h, 4, 6, 8
                db 0Dh, 1, 58h, 1, 1, 5Ah, 4, 3
                db 2, 4, 5, 5Bh, 5, 50h, 3, 2
                db 4, 5, 5Ch, 4, 6, 1, 24h, 21h
                db 65h, 2, 1, 2, 66h, 2, 1, 2
                db 68h, 1, 6, 67h, 3, 4, 8, 1
                db 6Ch, 0Ah, 3, 2, 0Ch, 4, 50h, 8
                db 1Ah, 0Dh, 1, 5, 69h, 4, 0Fh, 0Dh
                db 1, 5, 70h, 1, 1, 0FFh
                db 0
DISPATCH        dw offset $ABORT        ; DATA XREF: STATCHK:DISPCALL↓r
                                        ; Standard Functions (INT 21h System Calls)
                dw offset $STD_CON_INPUT
                dw offset $STD_CON_OUTPUT
                dw offset $STD_AUX_INPUT
                dw offset $STD_AUX_OUTPUT
                dw offset $STD_PRINTER_OUTPUT
                dw offset $RAW_CON_IO
                dw offset $RAW_CON_INPUT
                dw offset $STD_CON_INPUT_NO_ECHO
                dw offset $STD_CON_STRING_OUTPUT
                dw offset $STD_CON_STRING_INPUT
                dw offset $STD_CON_INPUT_STATUS
                dw offset $STD_CON_INPUT_FLUSH
                dw offset $DISK_RESET
                dw offset $SET_DEFAULT_DRIVE
                dw offset $FCB_OPEN
                dw offset $FCB_CLOSE
                dw offset $DIR_SEARCH_FIRST
                dw offset $DIR_SEARCH_NEXT
                dw offset $FCB_DELETE
                dw offset $FCB_SEQ_READ
                dw offset $FCB_SEQ_WRITE
                dw offset $FCB_CREATE
                dw offset $FCB_RENAME
                dw offset NO_OP
                dw offset $GET_DEFAULT_DRIVE
                dw offset $SET_DMA
                dw offset $SLEAZEFUNC
                dw offset $SLEAZEFUNCDL
                dw offset NO_OP
                dw offset NO_OP
                dw offset $GET_DEFAULT_DPB
                dw offset NO_OP
                dw offset $FCB_RANDOM_READ
                dw offset $FCB_RANDOM_WRITE
                dw offset $GET_FCB_FILE_LENGTH
                dw offset $GET_FCB_POSITION
                dw offset $SET_INTERRUPT_VECTOR
                dw offset $CREATE_PROCESS_DATA_BLOCK
                dw offset $FCB_RANDOM_READ_BLOCK
                dw offset $FCB_RANDOM_WRITE_BLOCK
                dw offset $PARSE_FILE_DESCRIPTOR
                dw offset $GET_DATE
                dw offset $SET_DATE
                dw offset $GET_TIME
                dw offset $SET_TIME
                dw offset $SET_VERIFY_ON_WRITE
                dw offset $GET_DMA
                dw offset $GET_VERSION
                dw offset $KEEP_PROCESS
                dw offset $GET_DPB
                dw offset $SET_CTRL_C_TRAPPING
                dw offset $GET_INDOS_FLAG
                dw offset $GET_INTERRUPT_VECTOR
                dw offset $GET_DRIVE_FREESPACE
                dw offset $CHAR_OPER
                dw offset $INTERNATIONAL
                dw offset $MKDIR
                dw offset $RMDIR
                dw offset $CHDIR
                dw offset $CREAT
                dw offset $OPEN
                dw offset $CLOSE
                dw offset $READ
                dw offset $WRITE
                dw offset $UNLINK
                dw offset $LSEEK
                dw offset $CHMOD
                dw offset $IOCTL
                dw offset $DUP
                dw offset $DUP2
                dw offset $CURRENT_DIR
                dw offset $ALLOC
                dw offset $DEALLOC
                dw offset $SETBLOCK
                dw offset $EXEC
                dw offset $EXIT
                dw offset $WAIT
                dw offset $FIND_FIRST
                dw offset $FIND_NEXT
                dw offset $SET_CURRENT_PDB
                dw offset $GET_CURRENT_PDB
                dw offset $GET_IN_VARS
                dw offset $SETDPB
                dw offset $GET_VERIFY_ON_WRITE
                dw offset $DUP_PDB
                dw offset $RENAME
                dw offset $FILE_TIMES
                dw offset $ALLOCOPER
                dw offset $GetExtendedError
                dw offset $CreateTempFile
                dw offset $CreateNewFile
                dw offset $LockOper
                dw offset $ServerCall
                dw offset $UserOper
                dw offset $AssignOper
                dw offset $NameTrans
                dw offset NO_OP
                dw offset $GET_CURRENT_PDB
                dw offset $ECS_Call
                dw offset $SET_PRINTER_FLAG
                dw offset $GetExtCntry
                dw offset $GetSetCdPg
                dw offset $ExtHandle
                dw offset $COMMIT
                dw offset $GSetMediaID
                dw offset $COMMIT
                dw offset NO_OP
                dw offset $Extended_Open ; 6Ch
                dw offset NO_OP         ; 6Dh, OS/2 "DosMkDir2" - ROM DOS: Find first ROM program
                dw offset NO_OP         ; 6Eh, OS/2 "DosEnumAttrib" - ROM DOS: Find next ROM program
                dw offset NO_OP         ; 6Fh, OS/2 "DosQMaxEASize" - ROM DOS: Get/set searched ROM area
                dw offset $ExtCountryInfo ; 70h, MSDOS 7 (WIN 95) - Get/set extended country information
                                        ;         GET/SET INTERNATIONALIZATION INFORMATION
                dw offset $LONGNAME     ; 71h, MSDOS 7 (WIN 95) LONG FILENAME FUNCTIONS
                dw offset $LONGNAME     ; 72h, MSDOS 7 (WIN 95) LFN-FindClose
                dw offset $FAT32EXT     ; 73h, MSDOS 7 - FAT32 extended drive functions
FOO             dw offset Leave2F       ; DATA XREF: DOSCODE:DispatchDOS↓r
DTab            dw offset DOSTable      ; DATA XREF: DOSCODE:4847↓r
DOSTable        db 50                   ; DATA XREF: DOSCODE:DTab↑o
                dw offset DOSInstall
                dw offset DOS_CLOSE
                dw offset RECSET
                dw offset DOSGetGroup
                dw offset PATHCHRCMP
                dw offset OUTT
                dw offset NET_I24_ENTRY
                dw offset PLACEBUF
                dw offset FREE_SFT
                dw offset BUFWRITE
                dw offset SHARE_VIOLATION
                dw offset SHARE_ERROR
                dw offset SET_SFT_MODE
                dw offset DATE16
                dw offset Idle
                dw offset SCANPLACE
                dw offset Idle
                dw offset StrCpy
                dw offset StrLen
                dw offset UCase
                dw offset POINTCOMP
                dw offset CHECKFLUSH
                dw offset SFFromSFN
                dw offset GetCDSFromDrv
                dw offset Get_User_Stack
                dw offset GETTHISDRV
                dw offset DriveFromText
                dw offset SETYEAR
                dw offset DSUM
                dw offset DSLIDE
                dw offset StrCmp
                dw offset InitCDS
                dw offset pJFNFromHandle
                dw offset $NameTrans
                dw offset CAL_LK
                dw offset DEVNAME
                dw offset Idle
                dw offset DStrLen
                dw offset NLS_OPEN
                dw offset $CLOSE
                dw offset NLS_LSEEK
                dw offset $READ
                dw offset FastInit
                dw offset NLS_IOCTL
                dw offset GetDevList
                dw offset NLS_GETEXT
                dw offset MSG_RETRIEVAL
                dw offset NO_OP
                dw offset int_2Fh_1230h
                dw offset int_2Fh_1231h
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR STATCHK

$SET_CTRL_C_TRAPPING:                   ; CODE XREF: STATCHK:SetCtrlShortEntry↓j
                                        ; DATA XREF: DOSCODE:4038↑o
                cmp     al, 7           ; Is this a valid subfunction?
                jbe     short scct_1    ; yes
                mov     al, 0FFh
                iret
; ---------------------------------------------------------------------------

scct_1:                                 ; CODE XREF: STATCHK-5EDD↑j
                push    ds
                mov     ds, cs:DosDSeg
                push    ax
                push    si
                mov     si, offset CNTCFLAG
                xor     ah, ah
                or      ax, ax          ; Check for subfunction 0
                jnz     short scct_2
                mov     dl, [si]        ; DS:SI --> Ctrl C Status byte
                jmp     short scct_9s
; ---------------------------------------------------------------------------

scct_2:                                 ; CODE XREF: STATCHK-5EC9↑j
                dec     ax
                jnz     short scct_3
                and     dl, 1           ; mask off bit 0 of DL and
                mov     [si], dl        ; save it as new Ctrl C status
                jmp     short scct_9s
; ---------------------------------------------------------------------------

scct_3:                                 ; CODE XREF: STATCHK-5EC2↑j
                dec     ax
                jnz     short scct_4
                and     dl, 1           ; mask off bit 0 of DL and
                xchg    dl, [si]        ; exchange DL with old status byte
                jmp     short scct_9s
; ---------------------------------------------------------------------------

scct_4:                                 ; CODE XREF: STATCHK-5EB8↑j
                cmp     al, 3           ; test for 5 after it was dec twice
                jnz     short scct_5
                mov     dl, ds:BOOTDRIVE ; return boot drive in DL
                jmp     short scct_9s
; ---------------------------------------------------------------------------

scct_5:                                 ; CODE XREF: STATCHK-5EAD↑j
                jb      short scct_9s
                cmp     al, 4           ; test for 6 after it was dec twice
                jnz     short scct_6
                mov     bx, 0A07h       ; 7.10 ; (MINOR_VERSION<<8)+MAJOR_VERSION
                mov     dx, 0           ; DOSREVNM
                cmp     ds:DosHasHMA, dh ; is DOS in HMA? no
                jz      short scct_9s
                mov     dh, 10h         ; yes
                jmp     short scct_9s   ; return version & 'DOS in HMA' status
; ---------------------------------------------------------------------------

scct_6:                                 ; CODE XREF: STATCHK-5EA1↑j
                and     ds:DOS_FLAG, 0DFh ; clear bit 5 of DOS flag
                cmp     dl, 1
                jnz     short scct_9s
                or      ds:DOS_FLAG, 20h ; set bit 5 of DOS flag

scct_9s:                                ; CODE XREF: STATCHK-5EC5↑j
                                        ; STATCHK-5EBB↑j ...
                pop     si
                pop     ax
                pop     ds
                iret
; ---------------------------------------------------------------------------

SetCtrlShortEntry:                      ; CODE XREF: STATCHK-5E20↓j
                jmp     short $SET_CTRL_C_TRAPPING
; ---------------------------------------------------------------------------

$SET_CURRENT_PDB:                       ; CODE XREF: STATCHK-5E0F↓j
                                        ; DATA XREF: DOSCODE:4072↑o
                push    ds
                mov     ds, cs:DosDSeg
                mov     ds:CurrentPDB, bx
                pop     ds
                iret
; ---------------------------------------------------------------------------

$GET_CURRENT_PDB:                       ; CODE XREF: STATCHK-5E14↓j
                                        ; STATCHK-5E0A↓j
                                        ; DATA XREF: ...
                push    ds
                mov     ds, cs:DosDSeg
                mov     bx, ds:CurrentPDB
                pop     ds
                iret
; ---------------------------------------------------------------------------

$SET_PRINTER_FLAG:                      ; CODE XREF: STATCHK-5E19↓j
                                        ; DATA XREF: DOSCODE:409A↑o
                push    ds
                mov     ds, cs:DosDSeg
                mov     ds:PRINTER_FLAG, al
                pop     ds
                iret
; END OF FUNCTION CHUNK FOR STATCHK
; ---------------------------------------------------------------------------

QUIT:                                   ; CODE XREF: DOSDATA:quit_cont↑J
                                        ; DATA XREF: DOSDATA:DOSINTTABLE_4↑o ...
                xor     ah, ah
                jmp     short SAVREGS
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR STATCHK

BADCALL:                                ; CODE XREF: DOSCODE:41D1↓j
                                        ; STATCHK-5E27↓j
                xor     al, al

irett:                                  ; DATA XREF: DOSCODE:CF38↓o
                iret
; END OF FUNCTION CHUNK FOR STATCHK
; ---------------------------------------------------------------------------

CALL_ENTRY:                             ; CODE XREF: DOSDATA:callentry_cont↑J
                                        ; DATA XREF: DOSDATA:DOSINTTABLE_28↑o ...
                push    ds              ; System call entry point and dispatcher
                                        ; ***
                                        ; An alternative method of entering the system
                                        ; is to perform a CALL 5 in the program segment prefix
                                        ; with the contents of CL indicating what system call
                                        ; the user would like
                mov     ds, cs:DosDSeg
                pop     ds:SAVEDS
                pop     ax
                pop     ax
                pop     ds:USER_SP
                pushf                   ; Re-order the stack
                                        ; to simulate an interrupt 21h.
                cli
                push    ax
                push    ds:USER_SP      ; Stack now ordered as if INT had been used
                push    ds:SAVEDS
                pop     ds
                cmp     cl, 36          ; MAXCALL
                                        ; This entry point doesn't get as many calls
                ja      short BADCALL
                mov     ah, cl
                jmp     short SAVREGS
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR STATCHK

COMMAND:                                ; CODE XREF: DOSDATA:command_cont↑J
                                        ; STATCHK:loc_A108↓j ...
                cli                     ; This is the normal INT 21h entry point.
                                        ; We first perform a quick test to see if
                                        ; we need to perform expensive DOS-entry
                                        ; functions. Certain system calls are done
                                        ; without interrupts being enabled.
                cmp     ah, 73h
                ja      short BADCALL

SAVREGS:                                ; CODE XREF: DOSCODE:41AD↑j
                                        ; DOSCODE:41D5↑j
                cmp     ah, 33h         ; Check Minimum special case number
                jb      short SaveAllRegs
                jz      short SetCtrlShortEntry
                cmp     ah, 64h         ; Check Maximum case number
                ja      short SaveAllRegs
                jz      short $SET_PRINTER_FLAG
                cmp     ah, 51h
                jz      short $GET_CURRENT_PDB
                cmp     ah, 50h
                jz      short $SET_CURRENT_PDB
                cmp     ah, 62h
                jz      short $GET_CURRENT_PDB

SaveAllRegs:                            ; CODE XREF: STATCHK-5E22↑j
                                        ; STATCHK-5E1B↑j
                push    es
                push    ds
                push    bp
                push    di
                push    si
                push    dx
                push    cx
                push    bx
                push    ax
                mov     ax, ds
                mov     ds, cs:DosDSeg
                mov     ds:SAVEDS, ax
                mov     ax, ds:USER_SP
                mov     ds:SAVEBX, bx
                mov     ds:NSP, ax
                mov     ax, ds:USER_SS
                mov     ds:NSS, ax
                xor     ax, ax          ; 0
                test    ds:IsWin386, 1  ; WIN386 patch. Do not update USER_ID
                mov     ds:FSHARING, al ; allow redirection
                jnz     short set_indos_flag ; if win386 present
                mov     ds:USER_ID, ax

set_indos_flag:                         ; CODE XREF: STATCHK-5DDB↑j
                inc     ds:INDOS        ; Flag that we're in the DOS
                inc     ds:INDOS_FLAG   ; duplicated INDOS flag (what for ?)
                mov     ax, ds:CurrentPDB
                mov     ds:USER_SP, sp
                mov     ds:USER_SS, ss
                mov     ds:PROC_ID, ax
                mov     ds, ax
                pop     ax
                push    ax
                mov     word ptr ds:2Eh, sp ; [PDB.USER_STACK]
                mov     word ptr ds:30h, ss ; [PDB.USER_STACK+2]
                mov     ss, cs:DosDSeg

REDISP:                                 ; CODE XREF: DOSCODE:5C8B↓j
                                        ; DOSCODE:B812↓j
                mov     sp, offset AUXSTACK
                sti
                mov     bx, ss
                mov     ds, bx
                xchg    ax, bx
                xor     ax, ax
                mov     ds:EXTOPEN_ON, al ; Clear extended open flag
                and     ds:DOS34_FLAG, 800h ; EXEC_AWARE_REDIR
                                        ; clear all bits except bit 11
                mov     ds:CONSWAP, al  ; random clean up of possibly mis-set flags
                mov     ds:NoSetDir, al ; set directories on search
                mov     ds:FAILERR, al  ; FAIL not in progress
                inc     ax
                mov     ds:IDLEINT, al  ; presume that we can issue INT 28h
                xchg    ax, bx          ; Restore AX and BX = 1
                mov     bl, ah
                add     bx, bx          ; 2 bytes per call in table
                cld
                or      ah, ah
                jz      short DSKROUT
                cmp     ah, 59h         ; GETEXTENDEDERROR
                jz      short DISPCALL
                cmp     ah, 0Ch         ; STD_CON_INPUT_FLUSH ; 12
                ja      short DSKROUT

IOROUT:                                 ;
                cmp     ds:ERRORMODE, 0 ; Are we in an INT 24h
                jnz     short DISPCALL  ; Stay on AUXSTACK if INT 24h
                mov     sp, offset PRINTER_FLAG ; mov sp,IOSTACK
                jmp     short DISPCALL
; ---------------------------------------------------------------------------

DSKROUT:                                ; CODE XREF: STATCHK-5D86↑j
                                        ; STATCHK-5D7C↑j
                mov     ds:USER_IN_AX, ax
                mov     word ptr ds:WPERR, 1FFh
                mov     ds:ERRORMODE, 0
                push    ax
                mov     ah, 82h
                int     2Ah             ; Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
                pop     ax
                mov     ds:IDLEINT, 0
                mov     sp, offset DSKSTACK ; "@#IBM:12.01.2003.build_1.32#@ IBMDOS.CO"...
                test    ds:CNTCFLAG, 0FFh
                jz      short DISPCALL
                push    ax
                call    DSKSTATCHK
                pop     ax

DISPCALL:                               ; CODE XREF: STATCHK-5D81↑j
                                        ; STATCHK-5D75↑j ...
                mov     bx, cs:DISPATCH[bx]
                xchg    bx, ds:SAVEBX
                mov     ds, ds:SAVEDS
                call    ss:SAVEBX
                and     ss:DOS_FLAG, 0DBh

LeaveDOS:                               ; DATA XREF: DOSDATA:LeaveAddr↑o
                                        ; DOSCODE:AD8D↓o
                cli
                mov     ds, cs:DosDSeg
                cmp     ds:A20OFF_COUNT, 0
                jnz     short disa20

LeaveA20On:                             ; CODE XREF: STATCHK-5CEF↓j
                dec     ds:INDOS
                dec     ds:INDOS_FLAG
                mov     ss, ds:USER_SS
                mov     sp, ds:USER_SP
                mov     bp, sp
                mov     [bp+0], al
                les     ax, dword ptr ds:NSS
                mov     ds:USER_SS, ax
                mov     ds:USER_SP, es
                pop     ax
                pop     bx
                pop     cx
                pop     dx
                pop     si
                pop     di
                pop     bp
                pop     ds
                pop     es
                iret
; ---------------------------------------------------------------------------

disa20:                                 ; CODE XREF: STATCHK-5D23↑j
                mov     bx, ds:A20OFF_PSP
                cmp     bx, ds:CurrentPDB
                jnz     short LeaveA20On
                dec     ds:A20OFF_COUNT
                push    ds
                mov     bx, offset disa20_iret
                push    bx
                retf
; END OF FUNCTION CHUNK FOR STATCHK

; =============== S U B R O U T I N E =======================================


restore_world   proc near               ; CODE XREF: FAT32_ABSDWRT-39↓p
                                        ; sub_5E7C:loc_5F4E↓p ...
                mov     es, cs:DosDSeg
                pop     es:RESTORE_TMP
                pop     ax
                pop     bx
                pop     cx
                pop     dx
                pop     si
                pop     di
                pop     bp
                pop     ds
                jmp     es:RESTORE_TMP
restore_world   endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


save_world      proc near               ; CODE XREF: FAT32_ABSDWRT-85↓p
                                        ; sub_5E7C+1↓p ...
                mov     es, cs:DosDSeg
                pop     es:RESTORE_TMP
                push    ds
                push    bp
                push    di
                push    si
                push    dx
                push    cx
                push    bx
                push    ax
                push    es:RESTORE_TMP
                push    bp
                mov     bp, sp
                mov     es, word ptr [bp+20]
                pop     bp
                retn
save_world      endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


Get_User_Stack  proc near               ; CODE XREF: $IOCTL:SYS_RET_OK↓p
                                        ; $IOCTL:From_GetSet↓p ...
                mov     ds, cs:DosDSeg
                lds     si, dword ptr ds:USER_SP
                retn
Get_User_Stack  endp

; ---------------------------------------------------------------------------
ERRIN           db 2                    ; DATA XREF: FAT32_ABSDWRT-4B↓o
                db 6
                db 0Ch
                db 4
                db 8
                db 0
ERROUT          db 80h
                db 40h
                db 2
                db 10h
                db 4
                db 3

; =============== S U B R O U T I N E =======================================


AbsSetup        proc near               ; CODE XREF: FAT32_ABSDWRT:absdrd_5↓p
                                        ; FAT32_ABSDWRT:absdrwt_3↓p
                mov     ss:absdrw_extd, ah ; Extended ABS Disk Read/Write flag
                                        ; (AH=1 for INT 21h ax=7305h function)
                or      ah, ah
                jnz     short AbsSetup1 ; INT 21h AX=7305h
                                        ; INT 25h
                inc     ss:INDOS_FLAG   ; Windows DOSBOX's INDOS flag ?
                inc     ss:INDOS

AbsSetup1:                              ; CODE XREF: AbsSetup+7↑j
                sti
                cld
                push    ds
                push    ss
                pop     ds
                call    GETBP
                pop     ds
                jb      short errdriv

AbsSetup2:
                mov     ss:HIGH_SECTOR, 0
                call    RW32_CONVERT
                jb      short errdriv
                call    null_sub
                push    ds
                push    si
                push    ax
                push    ss
                pop     ds
                mov     si, offset OPENBUF
                mov     [si], al
                add     byte ptr [si], 41h ; 'A'
                mov     word ptr [si+1], 3Ah ; ':'
                mov     ax, 300h
                clc
                int     2Ah             ; Microsoft Networks - CHECK DIRECT I/O
                                        ; DS:SI -> ASCIZ disk device name (may be full path or only drive
                                        ; specifier--must include the colon)
                                        ; Return: CF clear if absolute disk access allowed
                pop     ax
                pop     si
                pop     ds
                jnb     short AbsSetup_retn

errdriv:                                ; CODE XREF: AbsSetup+1C↑j
                                        ; AbsSetup+28↑j ...
                mov     ss:EXTERR, 32h  ; error_not_supported
                mov     ss:AbsDskErr, 207h ; disk error ? (bad address mark)

AbsSetup_retn:                          ; CODE XREF: AbsSetup+48↑j
                retn
AbsSetup        endp

; ---------------------------------------------------------------------------

ABSDRD:                                 ; CODE XREF: DOSDATA:absdrd_cont↑J
                                        ; DATA XREF: DOSDATA:DOSINTTABLE_12↑o ...
                xor     ah, ah          ; Interrupt 25h handler (ah=0)
                xor     si, si          ; clear read/write mode flags
                                        ; (used with INT 21h ax=7305h)

FAT32_ABSDRD:                           ; CODE XREF: DOSCODE:function_5_read↓p
                cli                     ; ah=1
                clc
; START OF FUNCTION CHUNK FOR FAT32_ABSDWRT

absdrd_1:                               ; CODE XREF: FAT32_ABSDWRT+26↓j
                push    ax
                mov     ax, ds
                mov     ds, cs:DosDSeg
                mov     ds:TEMPSEG, ax
                pop     ax
                push    es
                jnb     short absdrd_2  ; (not jumped from ABSDWRT) absolute disk read
                                        ; (jumped from ABSDRWT)
                or      ah, ah
                stc                     ; absolute disk write
                jmp     short absdrd_3
; ---------------------------------------------------------------------------

absdrd_2:                               ; CODE XREF: FAT32_ABSDWRT-A5↑j
                or      ah, ah

absdrd_3:                               ; CODE XREF: FAT32_ABSDWRT-A0↑j
                jnz     short absdrd_4  ; EXTENDED ABSOLUTE DISK READ/WRITE
                mov     ds:AbsRdWr_SS, ss
                mov     ds:AbsRdWr_SP, sp
                mov     ss, cs:DosDSeg
                mov     sp, offset DSKSTACK ; "@#IBM:12.01.2003.build_1.32#@ IBMDOS.CO"...

absdrd_4:                               ; CODE XREF: FAT32_ABSDWRT:absdrd_3↑j
                mov     ds, ds:TEMPSEG
                push    es
                call    save_world
                push    es
                jnb     short absdrd_5  ; absolute disk read
                jmp     absdrwt_3       ; (jumping back to) absolute disk write
; ---------------------------------------------------------------------------

absdrd_5:                               ; CODE XREF: FAT32_ABSDWRT-81↑j
                call    AbsSetup
                jb      short ILEAVE
                call    ECritDisk
                mov     ss:CurSC_DRIVE, 0FFh ; invalidate secondary cache
                call    LCritDisk
                call    DSKREAD
                jnz     short ERR_LEAVE
                mov     cx, di
                mov     ss:TEMP_VAR2, ds
                mov     ss:TEMP_VAR, bx ; CX = # of contiguous sectors read
                                        ; ES:BP -> Drive Parameter Block (DPB)
                                        ; [HIGH_SECTOR]:DX = physical sector # of 1st sector in extent
                                        ; [TEMP_VAR2]:[TEMP_VAR] = Transfer address
                call    DskRdBufScan
                jmp     short ILEAVE
; ---------------------------------------------------------------------------

TLEAVE:                                 ; CODE XREF: FAT32_ABSDWRT+48↓j
                jz      short ILEAVE

ERR_LEAVE:                              ; CODE XREF: FAT32_ABSDWRT-68↑j
                push    es
                push    cs
                pop     es
                assume es:DOSCODE
                xor     ah, ah
                mov     cx, 6
                mov     di, offset ERRIN
                repne scasb
                jnz     short LEAVECODE
                mov     ah, es:[di+5]   ; [ES:DI+NUMERR-1]

LEAVECODE:                              ; CODE XREF: FAT32_ABSDWRT-46↑j
                pop     es
                assume es:nothing
                mov     ss:AbsDskErr, ax
                stc

ILEAVE:                                 ; CODE XREF: FAT32_ABSDWRT-79↑j
                                        ; FAT32_ABSDWRT-57↑j ...
                pop     es
                call    restore_world
                pop     es
                pushf
                cmp     ss:absdrw_extd, 0 ; FAT32- EXTENDED ABSOLUTE DISK READ/WRITE flag
                jnz     short ILEAVE_EXTD ; INT 21h AX=7305h
                                        ; INT 25h
                popf
                cli
                mov     ax, ss:AbsDskErr
                dec     ss:INDOS
                dec     ss:INDOS_FLAG
                push    ss
                pop     es
                mov     ss, es:AbsRdWr_SS
                assume ss:DOSCODE
                mov     sp, es:AbsRdWr_SP
                pop     es
                sti
                retf
; ---------------------------------------------------------------------------

ILEAVE_EXTD:                            ; CODE XREF: FAT32_ABSDWRT-2E↑j
                popf
                mov     ax, ss:AbsDskErr
                pop     es
                sti
                retn
; END OF FUNCTION CHUNK FOR FAT32_ABSDWRT
; ---------------------------------------------------------------------------

ABSDWRT:                                ; CODE XREF: DOSDATA:absdwrt_cont↑J
                                        ; DATA XREF: DOSDATA:DOSINTTABLE_16↑o ...
                xor     ah, ah
                mov     si, 1

; =============== S U B R O U T I N E =======================================


FAT32_ABSDWRT   proc far                ; CODE XREF: DOSCODE:4EE7↓p

; FUNCTION CHUNK AT 43CA SIZE 000000AD BYTES

                cmp     al, 2
                jb      short absdrwt_2 ; floppy disk
                                        ; hard disk
                push    bx
                push    ds
                mov     ds, cs:DosDSeg
                xor     bh, bh
                mov     bl, al          ;
                                        ; NOTE: PCDOS 7.1 kernel does not set
                                        ; DOS_FLAG bit 6 or drive_flags bit 7
                                        ; (It appears that these bits are set
                                        ; by Windows or a system utility or
                                        ; driver that knows the addresses of
                                        ; these FLAGs in the DOSDATA segment.)
                                        ; Erdogan Tan - 03/01/2024
                test    ds:drive_flags[bx], 80h ; test bit 7
                                        ; (removable and/or writable disk bit?)
                jnz     short absdwrt_1 ; allowed
                test    ds:DOS_FLAG, 40h ; test bit 6 (large disk support bit?)
                                        ; NOTE: Retro DOS v5 kernel must set this bit.

absdwrt_1:                              ; CODE XREF: FAT32_ABSDWRT+14↑j
                pop     ds
                pop     bx
                jnz     short absdrwt_2 ; allowed
                stc
                call    errdriv         ; error
                retf
; ---------------------------------------------------------------------------

absdrwt_2:                              ; CODE XREF: FAT32_ABSDWRT+2↑j
                                        ; FAT32_ABSDWRT+1D↑j
                cli
                stc                     ; writable disk
                                        ; ('jumped from ABSDWRT' sign for common r/w code)
                jmp     absdrd_1        ; jump to ABSDRD (common r/w) code
; ---------------------------------------------------------------------------

absdrwt_3:                              ; CODE XREF: FAT32_ABSDWRT-7F↑j
                call    AbsSetup
                jb      short ILEAVE
                call    chk_set_first_access
                call    ECritDisk
                mov     ss:CurSC_DRIVE, 0FFh ; invalidate secondary cache
                call    Fastxxx_Purge   ; purge fatopen
                call    LCritDisk
                push    ds
                call    DskWrtBufPurge
                pop     ds
                call    DSKWRITE
                jmp     TLEAVE
FAT32_ABSDWRT   endp


; =============== S U B R O U T I N E =======================================


GETBP           proc near               ; CODE XREF: AbsSetup+18↑p
                push    ax              ; logical unit number
                add     al, 1           ; no increment; need carry flag
                jb      short SKIPGET
                call    GETTHISDRV
                jnb     short SKIPGET   ; good drive
                xor     ah, ah
                cmp     ax, 1Ah         ; error_not_DOS_disk
                jz      short SKIPGET   ; unknown media
                stc
                mov     ds:EXTERR, ax   ; invalid drive or Non DOS drive
                mov     ds:AbsDskErr, 201h

SKIPGET:                                ; CODE XREF: GETBP+3↑j
                                        ; GETBP+8↑j ...
                pop     ax
                jnb     short GETBP_@f
                retn
; ---------------------------------------------------------------------------

GETBP_@f:                               ; CODE XREF: GETBP+1C↑j
                les     bp, ds:THISCDS
                test    byte ptr es:[bp+44h], 80h ; [es:bp+curdir.flags+1],
                                        ; curdir_isnet>>8
                jz      short GETBP_CDS

GETBP_err:                              ; CODE XREF: GETBP+3C↓j
                mov     ds:EXTERR, 32h ; '2' ; error_not_supported
                stc
                retn
; ---------------------------------------------------------------------------

GETBP_CDS:                              ; CODE XREF: GETBP+28↑j
                les     bp, es:[bp+45h] ; [ES:BP+curdir.devptr]
                push    ax
                mov     ax, es
                or      ax, bp
                pop     ax
                jz      short GETBP_err ; zero address, error
GETBP           endp


; =============== S U B R O U T I N E =======================================


GOTDPB          proc near               ; CODE XREF: FATREAD_SFT+B↓p
                mov     word ptr ds:THISDPB, bp
                mov     word ptr ds:THISDPB+2, es
                retn
GOTDPB          endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR $IOCTL

SYS_RET_OK:                             ; CODE XREF: $INTERNATIONAL+6D↓j
                                        ; $GetExtCntry:nono↓j ...
                call    Get_User_Stack
                and     word ptr [si+16h], 0FFFEh ; [SI+user_env.user_F],~f_Carry

DO_RET:                                 ; CODE XREF: $IOCTL-22F3↓j
                mov     [si], ax
                retn
; ---------------------------------------------------------------------------

SYS_RET_ERR:                            ; CODE XREF: $INTERNATIONAL:errtn1↓j
                                        ; $GetExtCntry:NLSERROR↓j ...
                xor     ah, ah          ; hack to allow for smaller error rets
                call    ETAB_LK         ; Make sure code is OK, EXTERR gets set
                call    ErrorMap

From_GetSet:                            ; CODE XREF: $GetSetCdPg+4A↓j
                                        ; $OPEN+D5↓j
                call    Get_User_Stack
                or      word ptr [si+16h], 1 ; [SI+user_env.user_F],f_Carry
                stc
                jmp     short DO_RET
; END OF FUNCTION CHUNK FOR $IOCTL
; ---------------------------------------------------------------------------

NO_OP:                                  ; CODE XREF: DOSCODE:loc_5CA3↓j
                                        ; DOSCODE:6514↓j
                                        ; DATA XREF: ...
                xor     al, al          ; obsolete system calls dispatch to here
                retn

; =============== S U B R O U T I N E =======================================


FCB_RET_ERR     proc near               ; CODE XREF: DOSCODE:BADFDRV↓p
                                        ; DOSCODE:func_73_3_err1↓p ...
                xor     ah, ah
                mov     ss:EXTERR, ax
                call    ErrorMap
                mov     al, 0FFh        ; -1
                retn
FCB_RET_ERR     endp


; =============== S U B R O U T I N E =======================================


ErrorMap        proc near               ; CODE XREF: $IOCTL-22FE↑p
                                        ; FCB_RET_ERR+6↑p
                push    si
                mov     si, offset ERR_TABLE_21
                cmp     ss:FAILERR, 0   ; Check for SPECIAL case.
                jz      short EXTENDED_NORMAL ; All is OK.
                mov     ss:EXTERR, 53h  ; error_FAIL_I24 ; real reason

EXTENDED_NORMAL:                        ; CODE XREF: ErrorMap+A↑j
                call    CAL_LK          ; Set CLASS,ACTION,LOCUS for EXTERR
                pop     si
                retn
ErrorMap        endp


; =============== S U B R O U T I N E =======================================


CAL_LK          proc near               ; CODE XREF: ErrorMap:EXTENDED_NORMAL↑p
                                        ; sub_A3E5+22↓p
                                        ; DATA XREF: ...
                push    ds              ; Look up and set CLASS ACTION and LOCUS values
                                        ;  for GetExtendedError
                push    ax
                push    bx
                mov     ds, cs:DosDSeg  ; DOSDATA segment
                mov     bx, ds:EXTERR   ; Get error in BL

TABLK1:                                 ; CODE XREF: CAL_LK+18↓j
                lodsb
                cmp     al, 0FFh
                jz      short GOT_VALS  ; End of table
                cmp     al, bl
                jz      short GOT_VALS  ; Got entry
                add     si, 3           ; Next table entry
                jmp     short TABLK1
; ---------------------------------------------------------------------------

GOT_VALS:                               ; CODE XREF: CAL_LK+F↑j
                                        ; CAL_LK+13↑j
                lodsw
                cmp     ah, 0FFh
                jz      short NO_SET_ACT
                mov     ds:EXTERR_ACTION, ah ; Set ACTION

NO_SET_ACT:                             ; CODE XREF: CAL_LK+1E↑j
                cmp     al, 0FFh
                jz      short NO_SET_CLS
                mov     ds:EXTERR_CLASS, al ; Set CLASS

NO_SET_CLS:                             ; CODE XREF: CAL_LK+26↑j
                lodsb                   ; Get LOCUS
                cmp     al, 0FFh
                jz      short NO_SET_LOC
                mov     ds:EXTERR_LOCUS, al

NO_SET_LOC:                             ; CODE XREF: CAL_LK+2E↑j
                pop     bx
                pop     ax
                pop     ds
                retn
CAL_LK          endp


; =============== S U B R O U T I N E =======================================


ETAB_LK         proc near               ; CODE XREF: $IOCTL-2301↑p
                push    ds              ; check for appropriate error code
                push    si
                push    cx
                push    bx
                push    ss
                pop     ds
                assume ds:DOSCODE
                mov     EXTERR, ax      ; Set EXTERR with "real" error
                mov     si, offset I21_MAP_E_TAB
                mov     bh, al          ; Real code to BH
                mov     bl, byte ptr USER_IN_AX+1 ; Sys call to BL

TABLK2:                                 ; CODE XREF: ETAB_LK+22↓j
                lods    word ptr cs:[si]
                cmp     al, 0FFh        ; End of table?
                jz      short NOT_IN_TABLE
                cmp     al, bl          ; Found call?
                jz      short GOT_CALL  ; Yes
                xchg    ah, al
                xor     ah, ah
                add     si, ax          ; Next table entry
                jmp     short TABLK2
; ---------------------------------------------------------------------------

NOT_IN_TABLE:                           ; CODE XREF: ETAB_LK+16↑j
                mov     al, bh          ; Restore original code
                jmp     short NO_MAP
; ---------------------------------------------------------------------------

GOT_CALL:                               ; CODE XREF: ETAB_LK+1A↑j
                mov     cl, ah
                xor     ch, ch          ; Count of valid err codes to CX

CHECK_CODE:                             ; CODE XREF: ETAB_LK+32↓j
                lods    byte ptr cs:[si]
                cmp     al, bh          ; Code OK?
                jz      short NO_MAP    ; Yes
                loop    CHECK_CODE

NO_MAP:                                 ; CODE XREF: ETAB_LK+26↑j
                                        ; ETAB_LK+30↑j
                xor     ah, ah          ; AX is now valid code
                pop     bx
                pop     cx
                pop     si
                pop     ds
                assume ds:nothing
                retn
ETAB_LK         endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


SetBad          proc near               ; CODE XREF: BadCall↓p
                                        ; DOSCODE:BadFunc↓p
                mov     ax, 1           ; error_invalid_function
                push    ds
                mov     ds, cs:DosDSeg
                mov     ds:EXTERR_LOCUS, 1 ; errLOC_Unk
                pop     ds
                stc
                retn
SetBad          endp


; =============== S U B R O U T I N E =======================================


BadCall         proc far                ; CODE XREF: ECritDevice-1C↓P
                                        ; sub_5AE7+27↓P ...
                call    SetBad
                retf
BadCall         endp


; =============== S U B R O U T I N E =======================================


OKCall          proc far                ; CODE XREF: ShareEnd↓P
                                        ; DATA XREF: DOSDATA:MFT_enter↑o ...
                clc
                retf
OKCall          endp

; ---------------------------------------------------------------------------

INT2F:                                  ; CODE XREF: DOSDATA:int2f_cont↑J
                                        ; DATA XREF: DOSDATA:DOSINTTABLE_24↑o ...
                sti
                cmp     ah, 11h         ; MultNET
                jnz     short INT2FSHR

TestInstall:                            ; CODE XREF: DOSCODE:45ED↓j
                                        ; DOSCODE:45F2↓j
                or      al, al
                jz      short Leave2F

BadFunc:                                ; CODE XREF: DOSCODE:4857↓j
                call    SetBad

Leave2F:                                ; CODE XREF: DOSCODE:45E2↑j
                                        ; DATA XREF: DOSCODE:FOO↑o
                retf    2
; ---------------------------------------------------------------------------

INT2FSHR:                               ; CODE XREF: DOSCODE:45DE↑j
                cmp     ah, 10h         ; MultSHARE
                jz      short TestInstall
                cmp     ah, 14h         ; NLSFUNC
                jz      short TestInstall
                cmp     ah, 12h         ; MultDOS
                jnz     short check_win
                jmp     DispatchDOS
; ---------------------------------------------------------------------------

check_win:                              ; CODE XREF: DOSCODE:45F7↑j
                cmp     ah, 16h         ; MultWin386
                jz      short Win386_Msg
                cmp     ah, 46h         ; WINOLDAP
                jnz     short next_i2f
                jmp     Winold_swap
; ---------------------------------------------------------------------------

next_i2f:                               ; CODE XREF: DOSCODE:4604↑j
                                        ; DOSCODE:win_nexti2f2↓j ...
                jmp     far ptr 70h:5
; ---------------------------------------------------------------------------

Win386_Msg:                             ; CODE XREF: DOSCODE:45FF↑j
                push    ds
                mov     ds, cs:DosDSeg
                cmp     al, 3           ; win386 2.xx instance data call?
                jnz     short Win386_Msg_exit
                jmp     OldWin386Init   ; yes, return instance data
; ---------------------------------------------------------------------------

Win386_Msg_exit:                        ; CODE XREF: DOSCODE:4616↑j
                cmp     al, 6           ; Win386_Exit  ; is it an exit call?
                jnz     short Win386_Msg_devcall
                jmp     Win386_Leaving
; ---------------------------------------------------------------------------

Win386_Msg_devcall:                     ; CODE XREF: DOSCODE:461D↑j
                cmp     al, 7           ; Win386_Devcall ; is it call from DOSMGR?
                jnz     short Win386_Msg_init
                jmp     Win386_Query
; ---------------------------------------------------------------------------

Win386_Msg_init:                        ; CODE XREF: DOSCODE:4624↑j
                cmp     al, 5           ; Win386_Init ; is it an init call?
                jz      short Win386_Starting
                jmp     win_nexti2f
; ---------------------------------------------------------------------------

Win386_Starting:                        ; CODE XREF: DOSCODE:462B↑j
                push    ax
                push    cx
                push    di
                push    es
                push    ds
                pop     es
                mov     di, offset INBUF
                mov     cx, 5
                cld

Win386_s_floop:                         ; CODE XREF: DOSCODE:4648↓j
                mov     ax, 'OC'        ; 4F43h ('CO' in NASM syntax)
                stosw
                mov     ax, ' N'        ; 204Eh ('N ' in NASM syntax)
                stosw
                add     di, 55
                loop    Win386_s_floop
                pop     es
                pop     di
                pop     cx
                pop     ax
                test    dx, 1           ; is this really win386?
                jz      short Win386_vchk ; yes
                jmp     win_nexti2f     ; win 286 dos extender
; ---------------------------------------------------------------------------

Win386_vchk:                            ; CODE XREF: DOSCODE:4652↑j
                mov     word ptr ds:Win386_Inf_Virt_Dev_Ptr, 0
                mov     word ptr ds:Win386_Inf_Virt_Dev_Ptr+2, 0
                cmp     di, 400h        ; version >= 400
                jnb     short jmp_to_noVxD31

Win386_vxd:
                push    ax
                push    bx
                push    cx
                push    dx
                push    si
                mov     bx, ds:UMB_HEAD
                push    di
                cmp     bx, 0FFFFh
                jz      short Vxd31
                mov     ds:UmbSaveFlag, 1
                push    ds
                push    es
                push    ds
                pop     es
                mov     ds, bx
                xor     si, si
                clc                     ; not necessary (XOR already clears CF)

restore_ubmhead:                        ; CODE XREF: DOSCODE:4737↓j
                cld                     ; !! PCDOS 7.1 bug !!
                                        ; jump from 'Win386_Leaving' here was/is wrong
                                        ; (DI and SI would be reversed for 'Win386_Leaving')
                                        ; Erdogan Tan - 05/01/2024
                mov     di, offset UmbSave1
                mov     cx, 11
                rep movsb
                mov     di, offset UmbSave2
                mov     cl, 5
                rep movsb
                jnb     short restore_ubmhead_c ; (not jumped from 'Win386_Leaving')
                jmp     restore_ubmhead_ok ; (jumped from 'Win386_Leaving' just after 'stc')
; ---------------------------------------------------------------------------

restore_ubmhead_c:                      ; CODE XREF: DOSCODE:4696↑j
                pop     es
                pop     ds

Vxd31:                                  ; CODE XREF: DOSCODE:4676↑j
                test    ds:DOS_FLAG, 2  ; SUPPRESS_WINA20
                jz      short Dont_Supress
                pop     di
                pop     si
                pop     dx
                pop     cx
                pop     bx
                pop     ax

jmp_to_noVxD31:                         ; CODE XREF: DOSCODE:4667↑j
                jmp     short noVxD31
; ---------------------------------------------------------------------------

Dont_Supress:                           ; CODE XREF: DOSCODE:46A2↑j
                mov     al, ds:BOOTDRIVE
                add     al, 40h ; '@'   ; 'A'-1
                mov     byte ptr ds:VxDpath, al ; "c:\\wina20.386"
                mov     ax, 6C00h       ; ExtOpen<<8
                mov     bx, 2080h       ; read access, compatibility mode
                                        ; no inherit, suppress crit err
                mov     cx, 7           ; hidden,system,read-only attr
                cwd
                inc     dx              ; dx bit 0 = 1 ; fail if file does not exist
                mov     si, offset VxDpath ; "c:\\wina20.386"
                mov     di, 0FFFFh
                int     21h             ; DOS - 4.0 - EXTENDED OPEN/CREATE
                                        ; BL = open mode as in AL for normal open (INT 21h/AH=3Dh)
                                        ; BH = flags, CX = create attribute, DL = action if file exists/does not exists
                                        ; DH = 00h (reserved), DS:SI -> ASCIZ file name
                pop     di
                pop     si
                pop     dx
                pop     cx
                jnb     short VxDthere  ; we found the VxD, go ahead
                push    dx
                push    ds
                push    si
                mov     si, offset NoVxDErrMsg ; "You must have the file WINA20.386 in th"...
                push    cs
                pop     ds
                assume ds:DOSCODE
                mov     cx, 99          ; VxDMesLen
                mov     ah, 2           ; write char to console
                cld

vxdlp:                                  ; CODE XREF: DOSCODE:46E0↓j
                lodsb
                xchg    dl, al
                int     21h             ; DOS - DISPLAY OUTPUT
                                        ; DL = character to send to standard output
                loop    vxdlp
                pop     si
                pop     ds
                assume ds:nothing
                pop     dx
                pop     bx
                pop     ax
                inc     cx
                jmp     short jmp_to_win_nexti2f
; ---------------------------------------------------------------------------

VxDthere:                               ; CODE XREF: DOSCODE:46CB↑j
                mov     bx, ax
                mov     ah, 3Eh
                int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                        ; BX = file handle
                mov     bx, offset Win386_Info
                mov     word ptr [bx+6], offset VxDpath ; "c:\\wina20.386"
                mov     word ptr [bx+8], ds
                pop     bx
                pop     ax

noVxD31:                                ; CODE XREF: DOSCODE:jmp_to_noVxD31↑j
                or      ds:IsWin386, 1
                or      ds:redir_patch, 1
                push    dx
                mov     dx, bx
                mov     bx, offset Win386_Info
                mov     [bx+2], dx
                mov     word ptr [bx+4], es
                pop     dx
                push    ds
                pop     es

jmp_to_win_nexti2f:                     ; CODE XREF: DOSCODE:46E8↑j
                                        ; DOSCODE:471D↓j
                jmp     win_nexti2f
; ---------------------------------------------------------------------------

Win386_Leaving:                         ; CODE XREF: DOSCODE:461F↑j
                test    dx, 1           ; is this really win386?
                jnz     short jmp_to_win_nexti2f ; NO! It's win 286 dos extender!

Win386_Leaving_c:                       ; was umb_arena saved at win start up ?
                cmp     ds:UmbSaveFlag, 1
                jnz     short noumb     ; not saved
                mov     ds:UmbSaveFlag, 0 ; clear UmbSaveFlag
                                        ; and restore previously saved umb_head
                push    ax
                push    es
                push    cx
                push    si
                push    di
                mov     es, ds:UMB_HEAD
                assume es:nothing
                xor     di, di
                stc                     ; CF=1 is a sign to jump 'restore_ubmhead_ok' address
                                        ; from -the common code at- 'restore_ubmhead' address
                                        ; (.. but this is a BUG!)
                                        ; ;
                jmp     restore_ubmhead ; !! PCDOS 7.1 bug !!
                                        ; (jumped code does not restore umbhead,
                                        ; MSDOS 6.22 code was correct, modification is wrong)
                                        ; Erdogan Tan - 05/01/2024
                                        ;
                                        ; Correct code here, would be:
                                        ;    cld
                                        ;    mov  si,UmbSave1
                                        ;    mov  cx,11
                                        ;    rep  movsb
                                        ;    mov  si,UmbSave2
                                        ;    mov  cl,5
                                        ;    rep  movsb
; ---------------------------------------------------------------------------

restore_ubmhead_ok:                     ; CODE XREF: DOSCODE:4698↑j
                pop     di
                pop     si
                pop     cx
                pop     es
                assume es:nothing
                pop     ax

noumb:                                  ; CODE XREF: DOSCODE:4724↑j
                and     ds:IsWin386, 0FEh
                and     ds:redir_patch, 0
                jmp     short win_nexti2f
; ---------------------------------------------------------------------------

Win386_Query:                           ; CODE XREF: DOSCODE:4626↑j
                cmp     bx, 15h         ; Win386_DOSMGR ; is this from DOSMGR?
                jnz     short win_nexti2f ; no, ignore it & chain to next
                or      cx, cx          ; is it an instance query?
                jnz     short dosmgr_func ; no, some DOSMGR query
                inc     cx              ; indicate that data is instanced
                mov     bx, offset Win386_DOSVars
                push    ds
                pop     es              ; es:bx points at offset table
                jmp     short PopIret
; ---------------------------------------------------------------------------

OldWin386Init:                          ; CODE XREF: DOSCODE:4618↑j
                pop     ax
                mov     si, offset OldInstanceJunk ; ds:si = instance table
                mov     ax, 5248h       ; 'HR' ; indicate instance data present
                jmp     short win_nexti2f2
; ---------------------------------------------------------------------------

dosmgr_func:                            ; CODE XREF: DOSCODE:4752↑j
                dec     cx
                jz      short win386_patch ; call to patch DOS
                dec     cx
                jz      short PopIret   ; remove DOS patches, ignore
                dec     cx
                jz      short win386_size ; get size of DOS data structures
                dec     cx
                jz      short jmp_to_win386_inst ; instance more data
                loop    PopIret         ; no functions above this
                mov     ax, es          ; Get DOS device driver size
                                        ; ax = device header segment
                dec     ax              ; get arena header
                push    es
                mov     es, ax          ; arena header for device driver
                assume es:nothing
                cmp     byte ptr es:[di], 44h ; 'D' ; is it a device arena?
                jnz     short cantsize  ; no
                inc     ax              ; get back device header segment
                cmp     es:[di+1], ax   ; owner field pointing at driver?
                jnz     short cantsize  ; no
                mov     ax, es:[di+3]   ; get arena size in paragraphs
                pop     es
                assume es:nothing
                mov     bx, 16
                mul     bx
                mov     cx, ax
                mov     bx, dx
                jmp     short win386_done ; return with device driver size
; ---------------------------------------------------------------------------

cantsize:                               ; CODE XREF: DOSCODE:477D↑j
                                        ; DOSCODE:4784↑j
                pop     es
                xor     ax, ax

win386_inst:                            ; CODE XREF: DOSCODE:jmp_to_win386_inst↓j
                xor     dx, dx          ; ask DOSMGR to use its methods
                jmp     short PopIret
; ---------------------------------------------------------------------------

win386_patch:                           ; CODE XREF: DOSCODE:4766↑j
                mov     bx, dx          ; move patch bitfield to bx
                jmp     short win386_done ; done, return
; ---------------------------------------------------------------------------

win386_size:                            ; CODE XREF: DOSCODE:476C↑j
                test    dl, 1           ; check for CDS size bit
                jz      short PopIret   ; no, unknown structure -- return
                mov     cl, 88          ; cx = CDS size
                jmp     short win386_done ; return with the size
; ---------------------------------------------------------------------------

jmp_to_win386_inst:                     ; CODE XREF: DOSCODE:476F↑j
                jmp     short win386_inst
; ---------------------------------------------------------------------------

win386_done:                            ; CODE XREF: DOSCODE:4794↑j
                                        ; DOSCODE:479F↑j ...
                mov     ax, 0B97Ch      ; WIN_OP_DONE
                mov     dx, 0A2ABh      ; DOSMGR_OP_DONE

PopIret:                                ; CODE XREF: DOSCODE:475A↑j
                                        ; DOSCODE:4769↑j ...
                pop     ds
                iret
; ---------------------------------------------------------------------------

win_nexti2f:                            ; CODE XREF: DOSCODE:462D↑j
                                        ; DOSCODE:4654↑j ...
                pop     ds

win_nexti2f2:                           ; CODE XREF: DOSCODE:4763↑j
                jmp     next_i2f

; =============== S U B R O U T I N E =======================================


getwinlast      proc near               ; CODE XREF: DOSCODE:47D3↓p
                                        ; DOSCODE:47F2↓p
                mov     si, ds:CurrentPDB
                dec     si
                mov     es, si
                add     si, es:3
                retn
getwinlast      endp

; ---------------------------------------------------------------------------

Winold_swap:                            ; CODE XREF: DOSCODE:4606↑j
                push    ds
                push    es
                push    si
                push    di
                push    cx
                mov     ds, cs:DosDSeg
                cmp     al, 1           ; swap Windows out call
                jnz     short swapin    ; no, check if Swap in call
                call    getwinlast
                push    ds
                pop     es
                mov     ds, si          ; ds = memory arena of Windows
                xor     si, si
                mov     di, offset WinoldPatch1
                mov     cx, 8
                cld
                rep movsb               ; save first 8 bytes
                mov     cl, 8
                mov     di, offset WinoldPatch2
                rep movsb               ; save next 8 bytes
                jmp     short winold_done
; ---------------------------------------------------------------------------

swapin:                                 ; CODE XREF: DOSCODE:47D1↑j
                cmp     al, 2           ; swap Windows in call?
                jnz     short winold_done ; no, something else, pass it on
                call    getwinlast
                mov     es, si
                xor     di, di
                mov     si, offset WinoldPatch1
                mov     cx, 8
                cld
                rep movsb               ; restore first 8 bytes
                mov     cl, 8
                mov     si, offset WinoldPatch2
                rep movsb               ; restore next 8 bytes

winold_done:                            ; CODE XREF: DOSCODE:47EC↑j
                                        ; DOSCODE:47F0↑j
                pop     cx
                pop     di
                pop     si
                pop     es
                pop     ds
                jmp     next_i2f        ; chain on
; ---------------------------------------------------------------------------

int_2Fh_1231h:                          ; DATA XREF: DOSCODE:4121↑o
                push    ds              ; Windows95 - SET/CLEAR "REPORT WINDOWS TO DOS PROGRAMS" FLAG
                mov     ds, cs:DosDSeg
                xor     ax, ax
                or      dl, dl
                jnz     short not_1231_dl_0
                mov     ds:IsWin386+1, 1 ; set byte after "IsWIN386" to 01h
                jmp     short int_2f_1231h_retn
; ---------------------------------------------------------------------------
                nop

not_1231_dl_0:                          ; CODE XREF: DOSCODE:481B↑j
                cmp     dl, 1
                jnz     short not_1231_dl_1 ; clear "IsWIN386" bit 1
                or      ds:IsWin386, 2  ; set "IsWIN386" bit 1
                jmp     short int_2f_1231h_retn
; ---------------------------------------------------------------------------
                nop

not_1231_dl_1:                          ; CODE XREF: DOSCODE:4828↑j
                cmp     dl, 2
                jnz     short not_1231_dl_2
                and     ds:IsWin386, 0FDh ; clear bit 1
                jmp     short int_2f_1231h_retn
; ---------------------------------------------------------------------------

not_1231_dl_2:                          ; CODE XREF: DOSCODE:4835↑j
                inc     ax              ; return error, ax = 1
                stc

int_2f_1231h_retn:                      ; CODE XREF: DOSCODE:4822↑j
                                        ; DOSCODE:482F↑j ...
                pop     ds
                retn
; ---------------------------------------------------------------------------

DispatchDOS:                            ; CODE XREF: DOSCODE:45F9↑j
                push    cs:FOO          ; push return address
                push    cs:DTab         ; push table address
                push    ax              ; push index
                push    bp
                mov     bp, sp          ; stack looks like:
                                        ;  0  BP
                                        ;  2  DISPATCH
                                        ;  4  TABLE
                                        ;  6  RETURN
                                        ;  8  LONG-RETURN
                                        ;  C  FLAGS
                                        ;  E  AX
                mov     ax, [bp+14]     ; get AX value
                pop     bp
                call    TableDispatch
                jmp     BadFunc         ; return indicates invalid function
; ---------------------------------------------------------------------------

DOSGetGroup:                            ; DATA XREF: DOSCODE:40C5↑o
                mov     ds, cs:DosDSeg
                retn
; ---------------------------------------------------------------------------

DOSInstall:                             ; DATA XREF: DOSCODE:40BF↑o
                mov     al, 0FFh
                retn

; =============== S U B R O U T I N E =======================================


RW32_CONVERT    proc near               ; CODE XREF: AbsSetup+25↑p
                inc     cx              ; -1 -> 0
                jz      short new32format
                dec     cx
                cmp     word ptr es:[bp+0Fh], 0 ; [es:bp+DPB.FAT_SIZE]
                jz      short rw32_conv_err ; FAT32 fs
                push    ax
                push    dx
                mov     dl, es:[bp+4]   ; [es:bp+DPB.CLUSTER_MASK]
                mov     ax, es:[bp+0Dh] ; [es:bp+DPB.MAX_CLUSTER]
                cmp     dl, 0FEh        ; 254 ; Sectors/cluster - 1
                jz      short letold    ; removable
                inc     dl
                xor     dh, dh
                mul     dx
                or      dx, dx          ; > 32mb ?

letold:                                 ; CODE XREF: RW32_CONVERT+18↑j
                pop     dx
                pop     ax
                jz      short old_style ; no

rw32_conv_err:                          ; CODE XREF: RW32_CONVERT+9↑j
                stc
                retn
; ---------------------------------------------------------------------------

new32format:                            ; CODE XREF: RW32_CONVERT+1↑j
                mov     dx, [bx+2]      ; [BX+ABS_32RW.SECTOR_RBA+2]
                push    ds
                mov     ds, cs:DosDSeg  ; set up ds to DOSDATA
                mov     ds:HIGH_SECTOR, dx
                pop     ds
                mov     dx, [bx]        ; [BX+ABS_32RW.SECTOR_RBA]
                mov     cx, [bx+4]      ; [BX+ABS_32RW.ABS_RW_COUNT]
                lds     bx, [bx+6]      ; [BX+ABS_32RW.BUFFER_ADDR]

old_style:                              ; CODE XREF: RW32_CONVERT+24↑j
                clc
                retn
RW32_CONVERT    endp


; =============== S U B R O U T I N E =======================================


Fastxxx_Purge   proc near               ; CODE XREF: FAT32_ABSDWRT+3A↑p
                push    ax
                push    si
                push    dx
                push    ds
                mov     ds, cs:DosDSeg
                test    ds:FastOpenFlg, 80h ; Fast_yes ; fastopen installed ?
                pop     ds
                jz      short nofast    ; no
                mov     ah, 1           ; FastOpen_ID
                mov     al, 5           ; FONC_purge
                mov     dl, es:[bp+0]   ; set up drive number
                call    Fast_Dispatch   ; call fastopen/seek

nofast:                                 ; CODE XREF: Fastxxx_Purge+F↑j
                pop     dx
                pop     si
                pop     ax
                retn
Fastxxx_Purge   endp

; ---------------------------------------------------------------------------
DIVMES          db 0Dh,0Ah
                db 'Divide overflow',0Dh,0Ah
DivMesLen       dw 19                   ; DATA XREF: DOSCODE:A128↓r
NoVxDErrMsg     db 'You must have the file WINA20.386 in the root of your boot drive',0Dh
                                        ; DATA XREF: DOSCODE:46D0↑o
                db 0Ah
                db 'to run Windows in Enhanced Mode',0Dh,0Ah
CANCHAR         db 1Bh                  ; DATA XREF: $STD_CON_STRING_INPUT+57↓r
                                        ; CANCEL ; Cancel line character
ESCCHAR         db 0                    ; DATA XREF: $STD_CON_STRING_INPUT+40↓r
                                        ; $STD_CON_STRING_INPUT:TWOESC↓r ...
                                        ; ESCCH ; Lead-in character for escape sequences
ESCTAB          db 40h                  ; DATA XREF: $STD_CON_STRING_INPUT-F67↓o
                                        ; Ctrl-Z - F6
                db 4Dh                  ; Copy one char - -->
                db 3Bh                  ; Copy one char - F1
                db 53h                  ; Skip one char - DEL
                db 3Ch                  ; Copy to char - F2
                db 3Eh                  ; Skip to char - F4
                db 3Dh                  ; Copy line - F3
                db 3Dh                  ; Kill line (no change to template ) - Not used
                db 3Fh                  ; Reedit line (new template) - F5
                db 4Bh                  ; Backspace - <--
                db 52h                  ; Enter insert mode - INS (toggle)
                db 52h                  ; Exit insert mode - INS (toggle)
                db 41h                  ; Escape character - F7
                db 41h                  ; End of table
ESCFUNC         dw offset GETCH         ; DATA XREF: $STD_CON_STRING_INPUT-F59↓r
                                        ; Ignore the escape sequence
                dw offset TWOESC
                dw offset EXITINS
                dw offset EXITINS       ; ENTERINS
                dw offset BACKSP
                dw offset REEDIT
                dw offset KILNEW
                dw offset COPYLIN
                dw offset SKIPSTR
                dw offset COPYSTR
                dw offset SKIPONE
                dw offset COPYONE
                dw offset COPYONE
                dw offset CTRLZ
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR $STD_CON_STRING_INPUT

OEMFunctionKey:                         ; CODE XREF: $STD_CON_STRING_INPUT:loc_5954↓j
                call    $STD_CON_INPUT_NO_ECHO
                mov     cl, 14          ; ESCTABLEN
                push    di
                mov     di, offset ESCTAB
                push    es
                push    cs
                pop     es
                assume es:DOSCODE
                repne scasb
                pop     es
                assume es:nothing
                pop     di
                shl     cx, 1
                mov     bp, cx
                jmp     cs:ESCFUNC[bp]
; END OF FUNCTION CHUNK FOR $STD_CON_STRING_INPUT

; =============== S U B R O U T I N E =======================================


$GET_DATE       proc near               ; DATA XREF: DOSCODE:4026↑o
                push    ss
                pop     ds
                assume ds:DOSCODE
                call    READTIME
                mov     ax, YEAR
                mov     bx, word ptr DAY
                call    Get_User_Stack
                mov     [si+6], bx      ; [SI+user_env.user_DX]
                add     ax, 1980
                mov     [si+4], ax      ; [SI+user_env.user_CX]
                mov     al, ss:WEEKDAY

_RET24:                                 ; CODE XREF: $SET_DATE+6↓j
                                        ; $SET_DATE+F↓j ...
                retn
$GET_DATE       endp


; =============== S U B R O U T I N E =======================================


$SET_DATE       proc near               ; DATA XREF: DOSCODE:4028↑o
                mov     al, 0FFh        ; -1
                sub     cx, 1980        ; Fix bias in year
                jb      short _RET24    ; Error if not big enough
                cmp     cx, 119         ; Year must be less than 2100
                ja      short RET24
                or      dh, dh
                jz      short _RET24
                or      dl, dl
                jz      short _RET24    ; Error if either month or day is 0
                cmp     dh, 12          ; Check against max. month
                ja      short RET24
                push    ss
                pop     ds
                call    DODATE

RET24:                                  ; CODE XREF: $SET_DATE+B↑j
                                        ; $SET_DATE+18↑j
                retn
$SET_DATE       endp


; =============== S U B R O U T I N E =======================================


$GET_TIME       proc near               ; DATA XREF: DOSCODE:402A↑o
                push    ss
                pop     ds
                call    READTIME
                call    Get_User_Stack  ; Get pointer to user registers
                mov     [si+6], dx      ; [SI+user_env.user_DX]
                mov     [si+4], cx      ; [SI+user_env.user_CX]

set_time_ok:                            ; CODE XREF: $SET_TIME+43↓j
                xor     al, al

RET26:                                  ; CODE XREF: $SET_TIME+5↓j
                                        ; $SET_TIME+A↓j ...
                retn
$GET_TIME       endp


; =============== S U B R O U T I N E =======================================


$SET_TIME       proc near               ; DATA XREF: DOSCODE:402C↑o
                mov     al, 0FFh        ; Flag in case of error
                cmp     ch, 24          ; Check hours
                jnb     short RET26
                cmp     cl, 60          ; Check minutes
                jnb     short RET26
                cmp     dh, 60          ; Check seconds
                jnb     short RET26
                cmp     dl, 100         ; Check 1/100's
                jnb     short RET26
                push    cx
                push    dx
                push    ss
                pop     ds
                mov     bx, offset TIMEBUF
                mov     cx, 6
                xor     ax, ax
                cwd
                push    bx
                call    SETREAD
                push    ds
                lds     si, BCLOCK
                assume ds:nothing
                call    DEVIOCALL2      ; Get correct day count
                pop     ds
                pop     bx
                call    SETWRITE
                pop     ds:TIMEBUF+4
                pop     ds:TIMEBUF+2
                lds     si, ds:BCLOCK
                call    DEVIOCALL2      ; Set the time
                jmp     short set_time_ok
$SET_TIME       endp


; =============== S U B R O U T I N E =======================================


DATE16          proc near               ; CODE XREF: DOSCODE:6342↓p
                                        ; DOSCODE:774F↓p ...
                mov     ds, cs:DosDSeg
                push    cx
                push    es
                call    READTIME
                pop     es
                add     cl, cl
                add     cl, cl
                add     cx, cx
                add     cx, cx
                add     cx, cx
                shr     dh, 1
                or      cl, dh
                mov     dx, cx
                mov     ax, word ptr ds:MONTH
                mov     cl, 4
                shl     al, cl
                add     ax, ax
                pop     cx
                or      al, ds:DAY

RET21:                                  ; CODE XREF: READTIME+2E↓j
                retn
DATE16          endp


; =============== S U B R O U T I N E =======================================


READTIME        proc near               ; CODE XREF: $GET_DATE+2↑p
                                        ; $GET_TIME+2↑p ...
                mov     ds:DATE_FLAG, 0 ; reset date flag for CPMIO
                push    si
                push    bx
                mov     bx, offset TIMEBUF
                mov     cx, 6
                xor     ax, ax
                cwd
                call    SETREAD
                push    ds
                lds     si, ds:BCLOCK
                call    DEVIOCALL2      ; Get correct date and time
                pop     ds
                pop     bx
                pop     si
                mov     ax, ds:TIMEBUF
                mov     cx, ds:TIMEBUF+2
                mov     dx, ds:TIMEBUF+4
                cmp     ax, ds:DAYCNT   ; See if day count is the same
                jz      short RET21
                cmp     ax, 43830       ; FOURYEARS*30 ; Number of days in 120 years
                jnb     short RET22     ; Ignore if too large
                mov     ds:DAYCNT, ax
                push    si
                push    cx
                push    dx
                xor     dx, dx
                mov     cx, 1461        ; FOURYEARS ; Number of days in 4 years
                div     cx
                add     ax, ax
                add     ax, ax
                add     ax, ax          ; Multiply by 8 (no. of half-years)
                mov     cx, ax          ; <240 implies AH=0
                mov     si, offset YRTAB ; Table of days in each year
                call    DSLIDE          ; Find out which of four years we're in
                shr     cx, 1           ; Convert half-years to whole years
                jnb     short SK        ; Extra half-year?
                add     dx, 200

SK:                                     ; CODE XREF: READTIME+52↑j
                call    SETYEAR
                mov     cl, 1           ; At least at first month in year
                mov     si, offset MONTAB ; Table of days in each month
                call    DSLIDE          ; Find out which month we're in
                mov     ds:MONTH, cl
                inc     dx              ; Remainder is day of month (start with one)
                mov     ds:DAY, dl
                call    WKDAY           ; Set day of week
                pop     dx
                pop     cx
                pop     si

RET22:                                  ; CODE XREF: READTIME+33↑j
                                        ; DSLIDE+5↓j
                retn
READTIME        endp


; =============== S U B R O U T I N E =======================================


DSLIDE          proc near               ; CODE XREF: READTIME+4D↑p
                                        ; READTIME+60↑p
                                        ; DATA XREF: ...
                mov     ah, 0           ; (AH is already ZERO here!) 6/1/2024

DSLIDE1:                                ; CODE XREF: DSLIDE+A↓j
                lodsb                   ; Get count of days
                cmp     dx, ax          ; See if it will fit
                jb      short RET22
                sub     dx, ax
                inc     cx              ; Count one more month/year
                jmp     short DSLIDE1
DSLIDE          endp


; =============== S U B R O U T I N E =======================================


SETYEAR         proc near               ; CODE XREF: READTIME:SK↑p
                                        ; DODATE+F↓p
                                        ; DATA XREF: ...
                mov     ds, cs:DosDSeg
                mov     byte ptr ds:YEAR, cl

CHKYR:                                  ; CODE XREF: DODATE↓p
                test    cl, 3           ; Check for leap year
                mov     al, 28          ; 28 days if no leap year
                jnz     short SAVFEB
                inc     al              ; Add leap day

SAVFEB:                                 ; CODE XREF: SETYEAR+E↑j
                mov     ds:february, al ; [MONTAB+1],AL ; Store for February

RET23:                                  ; CODE XREF: DODATE+D↓j
                retn
SETYEAR         endp


; =============== S U B R O U T I N E =======================================


DODATE          proc near               ; CODE XREF: $SET_DATE+1C↑p
                call    CHKYR           ; Set Feb. up for new year
                mov     al, dh
                mov     bx, (offset YRTAB+7) ; MONTAB-1
                xlat                    ; Look up days in month
                cmp     al, dl
                mov     al, 0FFh        ; -1
                jb      short RET23     ; Error if too many days
                call    SETYEAR
                mov     word ptr ds:DAY, dx ; Set both day and month
                shr     cx, 1
                shr     cx, 1
                mov     ax, 1461        ; FOURYEARS
                mov     bx, dx
                mul     cx
                mov     cl, byte ptr ds:YEAR
                and     cl, 3
                mov     si, offset YRTAB
                mov     dx, ax
                add     cx, cx          ; Two entries per year, so double count
                call    DSUM            ; Add up the days in each year
                mov     cl, bh          ; Month of year
                mov     si, offset MONTAB
                dec     cx              ; Account for months starting with one
                call    DSUM            ; Add up days in each month
                mov     cl, bl          ; Day of month
                dec     cx              ; Account for days starting with one
                add     dx, cx          ; Add in to day total
                xchg    ax, dx          ; Get day count in AX
                mov     ds:DAYCNT, ax
                push    si
                push    bx
                push    ax
                mov     bx, offset TIMEBUF
                mov     cx, 6
                xor     ax, ax
                cwd
                push    bx
                call    SETREAD
                push    ds
                lds     si, ds:BCLOCK
                call    DEVIOCALL2      ; Get correct date and time
                pop     ds
                pop     bx
                call    SETWRITE
                pop     ds:TIMEBUF
                push    ds
                lds     si, ds:BCLOCK
                call    DEVIOCALL2      ; Set the date
                pop     ds
                pop     bx
                pop     si

WKDAY:                                  ; CODE XREF: READTIME+6C↑p
                mov     ax, ds:DAYCNT
                xor     dx, dx
                mov     cx, 7
                inc     ax
                inc     ax              ; First day was Tuesday
                div     cx              ; Compute day of week
                mov     ds:WEEKDAY, dl
                xor     al, al          ; Flag OK
                retn
DODATE          endp


; =============== S U B R O U T I N E =======================================


DSUM            proc near               ; CODE XREF: DODATE+2F↑p
                                        ; DODATE+38↑p
                                        ; DATA XREF: ...
                mov     ah, 0
                jcxz    short DSUM9

DSUM1:                                  ; CODE XREF: DSUM+7↓j
                lodsb
                add     dx, ax
                loop    DSUM1

DSUM9:                                  ; CODE XREF: DSUM+2↑j
                retn
DSUM            endp


; =============== S U B R O U T I N E =======================================


$GET_VERSION    proc near               ; DATA XREF: DOSCODE:4032↑o
                lds     cx, ss:USERNUM
                mov     bx, ds
                push    ss
                pop     ds
                assume ds:DOSCODE
                cmp     al, 1
                jnz     short Norm_Vers
                xor     bh, bh          ; return 0 (not ROMDOS version)

Norm_Vers:                              ; CODE XREF: $GET_VERSION+B↑j
                mov     ds, CurrentPDB  ; Get the version number from the
                                        ; current app's PSP segment
                assume ds:nothing
                mov     ax, word ptr ds:40h ; [PDB.Version]
                                        ; AX = DOS version number
                call    Get_User_Stack

gdrvfspc_ret:                           ; CODE XREF: DOSCODE:4DEA↓j
                mov     [si], ax        ; [SI+user_env.user_AX]
                mov     [si+4], cx      ; [SI+user_env.user_CX]

set_user_bx:                            ; CODE XREF: $INTERNATIONAL+68↓p
                                        ; $GetSetCdPg+12↓p ...
                mov     [si+2], bx      ; [SI+user_env.user_BX]
                retn
$GET_VERSION    endp

; ---------------------------------------------------------------------------

$GET_VERIFY_ON_WRITE:                   ; DATA XREF: DOSCODE:407A↑o
                mov     al, ss:VDERFLG
                retn
; ---------------------------------------------------------------------------

$SET_VERIFY_ON_WRITE:                   ; DATA XREF: DOSCODE:402E↑o
                and     al, 1
                mov     ss:VDERFLG, al

RET27:                                  ; CODE XREF: international_get+7↓j
                                        ; international_get+22↓j
                retn

; =============== S U B R O U T I N E =======================================


$INTERNATIONAL  proc near               ; DATA XREF: DOSCODE:4042↑o

; FUNCTION CHUNK AT 4BE2 SIZE 0000002E BYTES

                cmp     al, 0FFh        ; -1 means country code is in BX
                jz      short BX_HAS_CODE
                mov     bl, al          ; Put AL country code in BX
                xor     bh, bh

BX_HAS_CODE:                            ; CODE XREF: $INTERNATIONAL+2↑j
                push    ds
                pop     es
                push    dx
                pop     di              ; User buffer to ES:DI
                push    ss
                pop     ds
                assume ds:DOSCODE
                cmp     di, 0FFFFh      ; -1
                jz      short international_set
                or      bx, bx
                jnz     short international_find
                mov     si, offset COUNTRY_CDPG
                jmp     short international_copy
; ---------------------------------------------------------------------------

international_find:                     ; CODE XREF: $INTERNATIONAL+15↑j
                xor     bp, bp          ; 0 ; flag it for GetCntry only
                call    international_get
                jb      short errtn
                or      bx, bx          ; nlsfunc finished it ?
                jnz     short international_copy ; no, copy by myself
                mov     bx, dx          ; put country back
                jmp     short international_ok3
$INTERNATIONAL  endp


; =============== S U B R O U T I N E =======================================


international_get proc near             ; CODE XREF: $INTERNATIONAL+1E↑p
                                        ; $INTERNATIONAL+73↓p
                mov     si, offset COUNTRY_CDPG
                cmp     bx, ss:[si+68h] ; [SI+DOS_CCDPG.ccDosCountry]
                jz      short RET27     ; = current country id
                mov     dx, bx
                xor     bx, bx          ; bx = 0, default code page
                mov     ax, 1400h
                int     2Fh             ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
                                        ; Return: AL = 00h not installed, OK to install
                                        ; 01h not installed, not OK
                                        ; FFh installed
                cmp     al, 0FFh        ; not in memory
                jnz     short interr
                mov     ax, 1403h       ; set country info
                or      bp, bp          ; GetCntry ?
                jnz     short stcdpg
                inc     ax              ; AX = 1404h ; get country info

stcdpg:                                 ; CODE XREF: international_get+1B↑j
                int     2Fh             ; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
                                        ; BX = code page, DX = country code, DS:SI -> internal code page structure
                                        ; ES:DI -> user buffer
                                        ; Return: AL = status
                or      al, al
                jz      short RET27

setcarry:                               ; CODE XREF: international_get+28↓j
                stc
                retn
; ---------------------------------------------------------------------------

interr:                                 ; CODE XREF: international_get+14↑j
                mov     al, 0FFh
                jmp     short setcarry
international_get endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR $INTERNATIONAL

international_copy:                     ; CODE XREF: $INTERNATIONAL+1A↑j
                                        ; $INTERNATIONAL+25↑j
                mov     bx, ss:[si+68h] ; [ss:SI+DOS_CCDPG.ccDosCountry]
                mov     si, offset COUNTRY_CDPG_108 ; COUNTRY_CDPG+DOS_CCDPG.ccDFormat
                mov     cx, 12          ; OLD_COUNTRY_SIZE/2
                push    ds
                push    ss
                pop     ds
                rep movsw
                pop     ds
                assume ds:nothing

international_ok3:                      ; CODE XREF: $INTERNATIONAL+29↑j
                call    Get_User_Stack
                call    set_user_bx     ; MOV [SI+user_env.user_BX],BX

international_ok:                       ; CODE XREF: $INTERNATIONAL+76↓j
                mov     ax, bx
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

international_set:                      ; CODE XREF: $INTERNATIONAL+11↑j
                mov     bp, 1
                call    international_get
                jnb     short international_ok

errtn:                                  ; CODE XREF: $INTERNATIONAL+21↑j
                cmp     al, 0FFh
                jz      short errtn2

errtn1:                                 ; CODE XREF: $INTERNATIONAL+81↓j
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------

errtn2:                                 ; CODE XREF: $INTERNATIONAL+7A↑j
                                        ; DOSCODE:4C12↓j ...
                mov     al, 1           ; error_invalid_function
                jmp     short errtn1    ; NLSFUNC not existent
; END OF FUNCTION CHUNK FOR $INTERNATIONAL
; ---------------------------------------------------------------------------

$ExtCountryInfo:                        ; DATA XREF: DOSCODE:40B2↑o
                cmp     al, 2           ; INT 21h, AH = 70h (06/01/2024 - Erdogan Tan)
                                        ; GET/SET INTERNATIONALIZATION INFORMATION
                                        ; ****
                                        ; AL = subfunction
                                        ; 00h SET general internationalization info
                                        ;     CX = buffer size (up to 38 bytes)
                                        ;     DS:SI -> buffer containing internationalization info
                                        ;  first three bytes are skipped, the rest is copied to somewhere
                                        ;  in the DOS data segment
                                        ; 01h SET extended internationalization info
                                        ;     CX = number of bytes to set (up to 58 bytes)
                                        ;     DS:SI -> buffer containing internationalization info
                                        ; 02h GET extended internationalization info
                                        ;     CX = buffer size in bytes (up to 58 bytes used)
                                        ;     ES:DI -> buffer
                                        ; ****
                                        ; (Ref: Ralf Brown's Interrupt List) - had some mistakes -
                ja      short errtn2
                push    es
                push    ss
                jnz     short ext_cntry_inf_1
                pop     es              ; AX = GET 35 bytes info (from offset 3 to 37)
                                        ; (38 bytes buffer is used)
                mov     di, offset _COUNTRY_ID
                mov     ax, es:[di-2]   ; NEW_COUNTRY_SIZE = 38
                mov     bx, 3           ; skip the 1st 3 bytes of the buffer
                add     si, bx
                jmp     short ext_cntry_inf_4
; ---------------------------------------------------------------------------

ext_cntry_inf_1:                        ; CODE XREF: DOSCODE:4C16↑j
                dec     al
                jnz     short ext_cntry_inf_2 ; AX = 2
                pop     es              ; AX = 1 (set)
                mov     di, offset _ENU ; "ENU"
                jmp     short ext_cntry_inf_3
; ---------------------------------------------------------------------------

ext_cntry_inf_2:                        ; CODE XREF: DOSCODE:4C29↑j
                pop     ds              ; AX = 2 (get)
                mov     si, offset _ENU ; "ENU"

ext_cntry_inf_3:                        ; CODE XREF: DOSCODE:4C2F↑j
                xor     bx, bx          ; 0
                mov     ax, 58          ; 3Ah

ext_cntry_inf_4:                        ; CODE XREF: DOSCODE:4C25↑j
                cmp     cx, ax          ; > 38 ? (58)
                jb      short ext_cntry_inf_5 ; no
                mov     cx, ax          ; yes, decrease size to 38 (58)

ext_cntry_inf_5:                        ; CODE XREF: DOSCODE:4C3C↑j
                mov     ax, cx          ; buffer (filled) size
                sub     cx, bx          ; copy byte count
                rep movsb
                pop     es
                jmp     return_ax_to_user

; =============== S U B R O U T I N E =======================================


$GetExtCntry    proc near               ; DATA XREF: DOSCODE:409C↑o
                cmp     al, 20h         ; CAP_ONE_CHAR  ; < 20h
                jb      short notcap
                test    al, 80h         ; UPPER_TABLE
                jnz     short fileupper ; file upper case
                mov     bx, offset UCASE_TAB_2 ; UCASE_TAB+2
                                        ; get normal upper case
                jmp     short capit
; ---------------------------------------------------------------------------

fileupper:                              ; CODE XREF: $GetExtCntry+6↑j
                and     al, 7Fh
                mov     bx, offset FILE_UCASE_TAB_2 ; FILE_UCASE_TAB+2
                                        ; get file upper case

capit:                                  ; CODE XREF: $GetExtCntry+B↑j
                cmp     al, 20h         ; CAP_ONE_CHAR ; cap one char ?
                jnz     short chkyes
                mov     al, dl          ; set up AL
                call    GETLET3         ; upper case it
                call    Get_User_Stack  ; get user stack
                mov     [si+6], al      ; [SI+user_env.user_DX]
                jmp     short nono      ; done
; ---------------------------------------------------------------------------

chkyes:                                 ; CODE XREF: $GetExtCntry+14↑j
                cmp     al, 23h         ; CHECK_YES_NO
                jnz     short capstring ; no
                                        ; Yes/No
                xor     ax, ax          ; presume NO
                cmp     dl, ss:NLS_YES
                jz      short yesyes    ; Y(ES)
                cmp     dl, ss:NLS_yes2
                jz      short yesyes    ; y(es)
                cmp     dl, ss:NLS_NO
                jz      short nono      ; N(O)
                cmp     dl, ss:NLS_no2
                jz      short nono      ; n(o)
                inc     ax              ; not YES or NO

yesyes:                                 ; CODE XREF: $GetExtCntry+2E↑j
                                        ; $GetExtCntry+35↑j
                inc     ax              ; YES = 1

nono:                                   ; CODE XREF: $GetExtCntry+21↑j
                                        ; $GetExtCntry+3C↑j ...
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

capstring:                              ; CODE XREF: $GetExtCntry+25↑j
                mov     si, dx
                cmp     al, 21h         ; CAP_STRING
                jnz     short capascii
                jcxz    short nono

concap:                                 ; CODE XREF: $GetExtCntry+59↓j
                lodsb                   ; get char
                call    GETLET3         ; upper case it
                mov     [si-1], al      ; store back
                loop    concap          ; continue
                jmp     short nono      ; done
; ---------------------------------------------------------------------------

capascii:                               ; CODE XREF: $GetExtCntry+4E↑j
                cmp     al, 22h         ; CAP_ASCIIZ
                jnz     short capinval

concap2:                                ; CODE XREF: $GetExtCntry+6C↓j
                lodsb                   ; get char
                or      al, al          ; end of string ?
                jz      short nono      ; yes
                call    GETLET3         ; upper case it
                mov     [si-1], al      ; store back
                jmp     short concap2   ; continue
; ---------------------------------------------------------------------------

notcap:                                 ; CODE XREF: $GetExtCntry+2↑j
                cmp     cx, 5           ; minimum size is 5
                jb      short capinval  ; sizeerror

GEC_CONT:
                push    ss
                pop     ds
                assume ds:DOSCODE
                mov     si, offset COUNTRY_CDPG
                or      al, al
                jnz     short gec_c2    ;
                                        ; AL = 0 (INT 21h, AX=6500h)
                                        ; Set extended country-dependent information
                                        ; (SET GENERAL INTERNATIONALIZATION INFO)
                sub     cx, 7           ; minimum 8 bytes
                jbe     short capinval  ; error_invalid_function
                mov     bx, [si+48h]    ; [SI+DOS_CCDPG.ccSysCodePage]
                lea     si, [si+66h]    ; SI+DOS_CCDPG.ccCountryInfoLen
                mov     ax, [si]
                sub     ax, 4
                cmp     cx, ax
                jbe     short gec_c1
                mov     cx, ax

gec_c1:                                 ; CODE XREF: $GetExtCntry+8E↑j
                mov     ax, cx
                add     ax, 4
                mov     es:[di+1], ax   ; info length/size (will be written)
                add     si, 6           ; DOS_CCDPG.ccDFormat
                add     di, 7           ; points to date format
                call    xchg_esdi_dssi  ; ds:si = user's buffer + 6
                                        ; es:di = country info buffer + 7
                jmp     short OK_RETN
; ---------------------------------------------------------------------------

gec_c2:                                 ; CODE XREF: $GetExtCntry+7A↑j
                cmp     dx, 0FFFFh      ; -1 ; active country ?
                jnz     short gec_c3
                mov     dx, [si+68h]    ; [SI+DOS_CCDPG.ccDosCountry]

gec_c3:                                 ; CODE XREF: $GetExtCntry+A9↑j
                cmp     bx, 0FFFFh      ; -1 ; active code page?
                jnz     short CHKAGAIN
                mov     bx, [si+6Ah]    ; [SI+DOS_CCDPG.ccDosCodePage] ; get active code page

CHKAGAIN:                               ; CODE XREF: $GetExtCntry+B1↑j
                cmp     dx, [si+68h]    ; [SI+DOS_CCDPG.ccDosCountry] ; same ?
                jnz     short CHKNLS    ; no
                cmp     bx, [si+6Ah]    ; [SI+DOS_CCDPG.ccDosCodePage] ; same ?
                jnz     short CHKNLS    ; no

CHKTYPE:                                ; yes, same code page and same country id
                mov     bx, [si+48h]    ; [SI+DOS_CCDPG.ccSysCodePage]
                push    cx
                mov     cx, [si+4Ah]    ; [SI+DOS_CCDPG.ccNumber_of_entries]
                mov     si, offset COUNTRY_CDPG_76 ; COUNTRY_CDPG+DOS_CCDPG.ccSetUcase

NXTENTRY:                               ; CODE XREF: $GetExtCntry+D1↓j
                cmp     al, [si]        ; compare info type
                jz      short FOUNDIT
                add     si, 5           ; next entry
                loop    NXTENTRY
                pop     cx

capinval:                               ; CODE XREF: $GetExtCntry+5F↑j
                                        ; $GetExtCntry+71↑j ...
                jmp     errtn2          ; error_invalid_function
; ---------------------------------------------------------------------------

FOUNDIT:                                ; CODE XREF: $GetExtCntry+CC↑j
                movsb                   ; move info id byte
                pop     cx              ; restore char count
                cmp     al, 1           ; SetCountryInfo ; select country info type ?
                jz      short setsize   ; yes
                mov     cx, 4           ; 4 bytes will be moved
                mov     ax, 5           ; 5 bytes will be returned in CX

OK_RETN:                                ; CODE XREF: $GetExtCntry+A4↑j
                                        ; $GetExtCntry+107↓j
                rep movsb               ; copy info
                mov     cx, ax          ; CX = actual length returned
                mov     ax, bx          ; return sys code page in ax

GETDONE:                                ; CODE XREF: $GetExtCntry+124↓j
                call    Get_User_Stack  ; return actual length to user's CX
                mov     [si+4], cx      ; [SI+user_env.user_CX]

nono_jmp:                               ; CODE XREF: $GetSetCdPg:OK_RETURN↓j
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

setsize:                                ; CODE XREF: $GetExtCntry+DB↑j
                sub     cx, 3           ; size after length field
                cmp     [si], cx        ; less than table size
                jnb     short setsize2  ; no
                mov     cx, [si]        ; truncate to table size

setsize2:                               ; CODE XREF: $GetExtCntry+F7↑j
                mov     es:[di], cx     ; copy actual length to user's buffer
                inc     di              ; update index
                inc     di
                inc     si
                inc     si
                mov     ax, cx
                add     ax, 3           ; AX has the actual length
                jmp     short OK_RETN
; ---------------------------------------------------------------------------

CHKNLS:                                 ; CODE XREF: $GetExtCntry+B9↑j
                                        ; $GetExtCntry+BE↑j
                xor     ah, ah
                mov     bp, ax
                mov     ax, 1400h
                int     2Fh             ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
                                        ; Return: AL = 00h not installed, OK to install
                                        ; 01h not installed, not OK
                                        ; FFh installed
                cmp     al, 0FFh
                jz      short NLSNXT    ; in memory

sizeerror:                              ; CODE XREF: $GetSetCdPg:nomem↓j
                jmp     short capinval
; ---------------------------------------------------------------------------

NLSNXT:                                 ; CODE XREF: $GetExtCntry+114↑j
                mov     ax, 1402h
                int     2Fh             ; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
                                        ; BP = subfunction, BX = code page
                                        ; DX = country code, DS:SI -> internal code page structure
                                        ; ES:DI -> user buffer, CX = size of user buffer
                                        ; Return: AL = status
                                        ; 00h successful
                                        ; else DOS error code
                cmp     al, 0
                jnz     short NLSERROR
                mov     ax, [si+48h]    ; [SI+DOS_CCDPG.ccSysCodePage]
                jmp     short GETDONE
; ---------------------------------------------------------------------------

NLSERROR:                               ; CODE XREF: $GetExtCntry+11F↑j
                                        ; $GetSetCdPg:seterr↓j
                jmp     SYS_RET_ERR
$GetExtCntry    endp


; =============== S U B R O U T I N E =======================================


$GetSetCdPg     proc near               ; DATA XREF: DOSCODE:409E↑o
                push    ss
                pop     ds
                mov     si, offset COUNTRY_CDPG
                cmp     al, 1           ; get global code page
                jnz     short setglpg
                mov     bx, [si+6Ah]    ; [SI+DOS_CCDPG.ccDosCodePage]
                mov     dx, [si+48h]    ; [SI+DOS_CCDPG.ccSysCodePage]
                call    Get_User_Stack
                call    set_user_bx
                mov     [si+6], dx      ; [SI+user_env.user_DX]

OK_RETURN:                              ; CODE XREF: $GetSetCdPg+31↓j
                jmp     short nono_jmp
; ---------------------------------------------------------------------------

setglpg:                                ; CODE XREF: $GetSetCdPg+7↑j
                cmp     al, 2           ; set global codepage
                jnz     short nomem
                mov     dx, [si+68h]    ; [SI+DOS_CCDPG.ccDosCountry]
                mov     ax, 1400h
                int     2Fh             ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
                                        ; Return: AL = 00h not installed, OK to install
                                        ; 01h not installed, not OK
                                        ; FFh installed
                cmp     al, 0FFh
                jnz     short nomem
                mov     ax, 1401h
                int     2Fh             ; - Multiplex - NLSFUNC.COM - CHANGE CODE PAGE
                                        ; DS:SI -> internal code page structure
                                        ; BX = new code page, DX = country code???
                                        ; Return: AL = status
                                        ; 00h successful
                                        ; else DOS error code
                or      al, al
                jz      short OK_RETURN
                cmp     al, 41h         ; set device code page failed
                jnz     short seterr
                cbw
                mov     EXTERR, ax
                mov     EXTERR_ACTION, 6 ; errACT_Ignore
                mov     EXTERR_CLASS, 5 ; errCLASS_HrdFail
                mov     EXTERR_LOCUS, 4 ; errLOC_SerDev
                jmp     From_GetSet
; ---------------------------------------------------------------------------

seterr:                                 ; CODE XREF: $GetSetCdPg+35↑j
                jmp     short NLSERROR  ; transfer SYS_RET_ERR
; ---------------------------------------------------------------------------

nomem:                                  ; CODE XREF: $GetSetCdPg+1C↑j
                                        ; $GetSetCdPg+28↑j
                jmp     short sizeerror ; function not defined
$GetSetCdPg     endp

; ---------------------------------------------------------------------------

$GET_DRIVE_FREESPACE:                   ; DATA XREF: DOSCODE:403E↑o
                push    ss
                pop     ds
                mov     al, dl
                call    GETTHISDRV
                jb      short BADFDRV
                call    DISK_INFO
                jnb     short gdrvfspc_1
                xchg    dx, bx
                jmp     short BADFDRV
; ---------------------------------------------------------------------------

gdrvfspc_1:                             ; CODE XREF: DOSCODE:4DD0↑j
                xor     ah, ah
                push    di
                call    TestNet
                pop     di
                jb      short gdrvfspc_2
                call    loc_7431

gdrvfspc_2:                             ; CODE XREF: DOSCODE:4DDD↑j
                xchg    dx, bx

DoSt:                                   ; CODE XREF: DOSCODE:4DF3↓j
                call    Get_User_Stack
                mov     [si+6], dx
                jmp     gdrvfspc_ret
; ---------------------------------------------------------------------------

BADFDRV:                                ; CODE XREF: DOSCODE:4DCB↑j
                                        ; DOSCODE:4DD4↑j
                call    FCB_RET_ERR
                mov     ax, 0FFFFh      ; -1
                jmp     short DoSt
; ---------------------------------------------------------------------------

$GET_DMA:                               ; DATA XREF: DOSCODE:4030↑o
                mov     bx, word ptr ss:DMAADD
                mov     cx, word ptr ss:DMAADD+2
                call    Get_User_Stack
                mov     [si+10h], cx
                jmp     set_user_bx
; ---------------------------------------------------------------------------

$SET_DMA:                               ; DATA XREF: DOSCODE:4006↑o
                mov     word ptr ss:DMAADD, dx
                mov     word ptr ss:DMAADD+2, ds
                retn
; ---------------------------------------------------------------------------

$GET_DEFAULT_DRIVE:                     ; DATA XREF: DOSCODE:4004↑o
                mov     al, ss:CURDRV
                retn
; ---------------------------------------------------------------------------

$SET_DEFAULT_DRIVE:                     ; DATA XREF: DOSCODE:3FEE↑o
                mov     al, dl
                inc     al
                call    GetVisDrv
                jb      short SETRET
                mov     ss:CURDRV, al

SETRET:                                 ; CODE XREF: DOSCODE:4E1F↑j
                mov     al, ss:CDSCOUNT
                retn

; =============== S U B R O U T I N E =======================================


$GET_INTERRUPT_VECTOR proc near         ; CODE XREF: sub_A242+113↓p
                                        ; DATA XREF: DOSCODE:403C↑o
                call    RECSET
                les     bx, es:[bx]
                call    Get_User_Stack

loc_4E33:                               ; CODE XREF: DOSCODE:4E93↓p
                mov     word ptr [si+10h], es
                jmp     set_user_bx
$GET_INTERRUPT_VECTOR endp

; ---------------------------------------------------------------------------

$SET_INTERRUPT_VECTOR:                  ; DATA XREF: DOSCODE:401C↑o
                call    RECSET
                cli
                mov     es:[bx], dx
                mov     word ptr es:[bx+2], ds
                sti
                test    ss:DOS_FLAG, 4
                jnz     short loc_4E4E
                retn
; ---------------------------------------------------------------------------

loc_4E4E:                               ; CODE XREF: DOSCODE:4E4B↑j
                cmp     ss:A20OFF_COUNT, 0
                jnz     short locret_4E5C
                mov     ss:A20OFF_COUNT, 1

locret_4E5C:                            ; CODE XREF: DOSCODE:4E54↑j
                retn

; =============== S U B R O U T I N E =======================================


RECSET          proc near               ; CODE XREF: $GET_INTERRUPT_VECTOR↑p
                                        ; DOSCODE:$SET_INTERRUPT_VECTOR↑p
                                        ; DATA XREF: ...
                xor     bx, bx
                mov     es, bx
                assume es:DOSCODE
                mov     bl, al
                shl     bx, 1
                shl     bx, 1
                retn
RECSET          endp

; ---------------------------------------------------------------------------

$CHAR_OPER:                             ; DATA XREF: DOSCODE:4040↑o
                or      al, al
                mov     dl, '/'
                jz      short loc_4E75
                cmp     al, 2
                mov     dl, 0FFh
                jz      short loc_4E75
                retn
; ---------------------------------------------------------------------------

loc_4E75:                               ; CODE XREF: DOSCODE:4E6C↑j
                                        ; DOSCODE:4E72↑j
                call    Get_User_Stack
                mov     [si+6], dx
                retn
; ---------------------------------------------------------------------------

$GetExtendedError:                      ; DATA XREF: DOSCODE:4084↑o
                push    ss
                pop     ds
                mov     ax, EXTERR
                les     di, EXTERRPT
                assume es:nothing
                mov     bx, word ptr EXTERR_ACTION
                mov     ch, EXTERR_LOCUS
                call    Get_User_Stack
                mov     [si+0Ah], di
                call    loc_4E33
                mov     [si+4], cx

_jmp_to_SYS_RET_OK:                     ; CODE XREF: DOSCODE:_okok↓j
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

$ECS_Call:                              ; DATA XREF: DOSCODE:4098↑o
                or      al, al
                jnz     short _okok
                call    Get_User_Stack
                mov     word ptr [si+8], offset DBCS_TAB_2
                push    es
                mov     es, cs:DosDSeg
                mov     word ptr [si+14], es
                pop     es

_okok:                                  ; CODE XREF: DOSCODE:4E9E↑j
                jmp     short _jmp_to_SYS_RET_OK
; ---------------------------------------------------------------------------

$LONGNAME:                              ; DATA XREF: DOSCODE:40B4↑o
                                        ; DOSCODE:40B6↑o
                xor     al, al          ; longname functions are not supported

lfn_error:                              ; CODE XREF: DOSCODE:fat32_absdrw_ret↓j
                call    Get_User_Stack
                or      word ptr [si+16h], 1
                stc
                mov     [si], ax
                retn
; ---------------------------------------------------------------------------

$FAT32EXT:                              ; DATA XREF: DOSCODE:40B8↑o
                cmp     al, 5           ; INT 21h AX = 7305h
                jbe     short valid_fat32_ext_function
                mov     al, 1           ; error_invalid_function

fat32_ext_func_err:                     ; CODE XREF: DOSCODE:fat32_ext_func_err_j↓j
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------

function_5_invalid_cx:                  ; CODE XREF: DOSCODE:4ED3↓j
                                        ; DOSCODE:4ED9↓j
                mov     al, 57h

fat32_ext_func_err_j:                   ; CODE XREF: DOSCODE:drv_lock_flush_err↓j
                jmp     short fat32_ext_func_err
; ---------------------------------------------------------------------------

valid_fat32_ext_function:               ; CODE XREF: DOSCODE:4EC3↑j
                jnz     short not_function_5
                cmp     cx, 0FFFFh      ; Function 5 - FAT32 - EXTENDED ABSOLUTE DISK READ/WRITE
                jnz     short function_5_invalid_cx
                test    si, 9FFEh       ; read/write mode flags
                jnz     short function_5_invalid_cx
                mov     al, dl          ; drive number, 1 = A
                dec     al
                mov     ah, 1
                test    si, 1
                jz      short function_5_read
                call    near ptr FAT32_ABSDWRT ; INT 21h AX = 7305h (SI bit 0 = 1)
                jmp     short fat32_absdrw_ret
; ---------------------------------------------------------------------------

function_5_read:                        ; CODE XREF: DOSCODE:4EE5↑j
                call    FAT32_ABSDRD    ; INT 21h AX = 7305h (SI bit 0 = 0)

fat32_absdrw_ret:                       ; CODE XREF: DOSCODE:4EEA↑j
                jb      short lfn_error
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

not_function_5:                         ; CODE XREF: DOSCODE:valid_fat32_ext_function↑j
                cmp     al, 3
                jz      short function_73_3 ; Function 3 - FAT32 - GET EXTENDED FREE SPACE ON DRIVE
                cmp     al, 2
                jb      short chk_drive_lock_flush
                jmp     $GET_DPB        ; Function 2 - FAT32 - "Get_ExtDPB" - GET EXTENDED DPB
                                        ; Function 4 - FAT32 - Set DPB TO USE FOR FORMATTING
; ---------------------------------------------------------------------------

chk_drive_lock_flush:                   ; CODE XREF: DOSCODE:4EFA↑j
                cmp     dl, 26          ; MSDOS 7 - DRIVE LOCKING AND FLUSHING
                jbe     short drv_lock_flush_1
                mov     al, 0Fh         ; invalid drive number

drv_lock_flush_err:                     ; CODE XREF: DOSCODE:4F1C↓j
                jmp     short fat32_ext_func_err_j ; ax = error code
; ---------------------------------------------------------------------------

drv_lock_flush_1:                       ; CODE XREF: DOSCODE:4F02↑j
                dec     dl
                jns     short drv_lock_flush_2
                mov     dl, ss:CURDRV   ; 0 = default/current drive)

drv_lock_flush_2:                       ; CODE XREF: DOSCODE:4F0A↑j
                mov     dh, 0
                mov     bx, dx
                cmp     cl, 1           ; which flag to get or set
                jbe     short drv_lock_flush_3
                mov     al, 1           ; error_invalid_function
                jmp     short drv_lock_flush_err
; ---------------------------------------------------------------------------

drv_lock_flush_3:                       ; CODE XREF: DOSCODE:4F18↑j
                mov     ah, ss:drive_flags[bx]
                or      cl, cl
                jz      short get_set_indctd_flag ; use bit 1 and bit 2
                or      al, al          ; get drive's dirty-buffers flag
                jz      short get_dirty_buf_flag ; use bit 3
                and     ah, 0F7h        ; clear bit 3
                and     ch, 8           ; izolate bit 3 of the new flag value
                or      ah, ch          ; set AH bit 3 according to CH bit 3
                mov     ss:drive_flags[bx], ah ; set or reset dirty buffer flag
                test    ah, 8
                jnz     short set_dirty_flag_ok ; bit 3 is set/1
                mov     al, 0FFh
                call    FLUSHBUF

set_dirty_flag_ok:                      ; CODE XREF: DOSCODE:4F3B↑j
                jmp     short jmp_to_SYS_RET_OK
; ---------------------------------------------------------------------------

get_dirty_buf_flag:                     ; CODE XREF: DOSCODE:4F29↑j
                and     ah, 8           ; izolate dirty buffers flag
                jmp     short mov_flag_cl_to_al ; AH = new flag and 08h (bit 3 used)
; ---------------------------------------------------------------------------

get_set_indctd_flag:                    ; CODE XREF: DOSCODE:4F25↑j
                or      al, al
                jz      short get_indicated_flag
                and     ah, 0F9h        ; clear bit 1 and bit 2
                test    ch, 2           ; new value for indicated flag
                jz      short reset_indctd_flags ; bit 1 is zero
                or      ah, 6           ; set bit 1 and bit 2

reset_indctd_flags:                     ; CODE XREF: DOSCODE:4F53↑j
                mov     ss:drive_flags[bx], ah
                jmp     short jmp_to_SYS_RET_OK
; ---------------------------------------------------------------------------

get_indicated_flag:                     ; CODE XREF: DOSCODE:4F4B↑j
                and     ah, 6           ; AH = new flag and 06h (bits 1 and 2 used)

mov_flag_cl_to_al:                      ; CODE XREF: DOSCODE:4F47↑j
                mov     al, cl          ; value of CL on entry

return_ax_to_user:                      ; CODE XREF: DOSCODE:4C47↑j
                call    Get_User_Stack
                mov     [si+4], ax      ; requested flag

jmp_to_SYS_RET_OK:                      ; CODE XREF: DOSCODE:set_dirty_flag_ok↑j
                                        ; DOSCODE:4F5D↑j
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

function_73_3:                          ; CODE XREF: DOSCODE:4EF6↑j
                mov     si, dx          ; FAT32 - GET EXTENDED FREE SPACE ON DRIVE
                                        ; AX = 7303h
                                        ; DS:DX -> ASCIZ string for drive ("C:\" or "\\SERVER\Share")
                                        ; ES:DI -> buffer for extended free space structure
                                        ; CX = length of buffer for extended free space
                call    DriveFromText
                xchg    ax, dx
                lodsw
                dec     dl
                cmp     dl, 26
                jnb     short func_73_3_err2
                or      ah, ah
                jnz     short func_73_3_err2
                call    PATHCHRCMP
                jnz     short func_73_3_err2
                inc     dl
                cmp     cx, 44          ; buffer (Structure) size must be 44
                jb      short func_73_3_err4
                cmp     word ptr es:[di+2], 0 ; buffer structure version (must be 0)
                jnz     short func_73_3_err3
                push    ss
                pop     ds
                mov     al, dl
                call    GETTHISDRV
                jnb     short fill_efs_struc_b

func_73_3_err1:                         ; CODE XREF: DOSCODE:4FAE↓j
                call    FCB_RET_ERR

func_73_3_err2:                         ; CODE XREF: DOSCODE:4F79↑j
                                        ; DOSCODE:4F7D↑j ...
                mov     al, 0Fh         ; error_invalid_drive

jmp_to_SYS_RET_ERR:                     ; CODE XREF: DOSCODE:jmp_to_jmp_SYS_RET_ERR↓j
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------

func_73_3_err3:                         ; CODE XREF: DOSCODE:4F90↑j
                mov     al, 57h         ; error_invalid_parameter

jmp_to_jmp_SYS_RET_ERR:                 ; CODE XREF: DOSCODE:4FA9↓j
                jmp     short jmp_to_SYS_RET_ERR
; ---------------------------------------------------------------------------

func_73_3_err4:                         ; CODE XREF: DOSCODE:4F89↑j
                mov     al, 18h         ; error_bad_length
                jmp     short jmp_to_jmp_SYS_RET_ERR
; ---------------------------------------------------------------------------

fill_efs_struc_b:                       ; CODE XREF: DOSCODE:4F99↑j
                call    DISK_INFO
                jb      short func_73_3_err1
                xor     ah, ah
                push    si              ; si:dx = free cluster count
                push    di              ; di:bx = number of clusters
                call    Get_User_Stack
                mov     es, word ptr [si+10h] ; user's buffer segment (in ES)
                mov     di, [si+0Ah]    ; user's buffer offset/address (in DI)
                mov     es:[di+10h], bx ; total number of clusters on the drive
                mov     es:[di+20h], bx ; total allocation units, without adjustment for compression
                pop     bx
                mov     es:[di+12h], bx ; total number of clusters on the drive, hw
                mov     es:[di+22h], bx ; total allocation units, hw
                mov     es:[di+0Ch], dx ; number of available clusters
                mov     es:[di+1Ch], dx ; number of available allocation units, without adjustment
                pop     dx
                mov     es:[di+0Eh], dx ; number of available clusters, hw
                mov     es:[di+1Eh], dx ; number of available allocation units, hw
                mov     es:[di+8], cx   ; bytes per sector
                mov     es:[di+4], ax   ; sectors per cluster (with adjustment for compression)
                mov     cx, ax
                mul     bx              ; 32 bit multiplication
                jb      short dsk_cap_calc_overf ; disk capacity calculation overflow error
                mov     bx, ax
                mov     ax, es:[di+20h] ; total allocation units, lw
                mul     cx
                add     dx, bx
                jnb     short dsk_cap_calc_ok

dsk_cap_calc_overf:                     ; CODE XREF: DOSCODE:4FEB↑j
                mov     ax, 0FFFFh      ; set to 0FFFFFFFFh
                mov     dx, ax

dsk_cap_calc_ok:                        ; CODE XREF: DOSCODE:4FF7↑j
                mov     es:[di+1Ah], dx
                mov     es:[di+18h], ax ; total number of physical sectors on the drive,
                                        ; without adjustment for compression
                mov     ax, cx          ; 32 bit multiplication
                mul     word ptr es:[di+0Eh] ; number of available clusters, hw
                jb      short dsk_free_calc_overf
                mov     bx, ax
                mov     ax, es:[di+0Ch] ; number of available clusters, lw
                mul     cx
                add     dx, bx
                jnb     short dsk_free_calc_ok

dsk_free_calc_overf:                    ; CODE XREF: DOSCODE:500C↑j
                mov     ax, 0FFFFh
                mov     dx, ax

dsk_free_calc_ok:                       ; CODE XREF: DOSCODE:5018↑j
                mov     es:[di+16h], dx ; hw
                mov     es:[di+14h], ax ; number of physical sectors available on the drive,
                                        ; without adjustment for compression
                xor     ax, ax          ; 0
                mov     es:[di+0Ah], ax ; number of bytes per sector, high word = 0
                mov     es:[di+6], ax   ; number of sectors per cluster, high word = 0
                mov     es:[di+24h], ax ; reserved, 8 bytes zero
                mov     es:[di+26h], ax
                mov     es:[di+28h], ax
                mov     es:[di+2Ah], ax
                mov     ax, 44
                mov     es:[di], ax     ; size of returned structure = 44
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

loc_504A:                               ; CODE XREF: DOSCODE:5273↓j
                cmp     word ptr [si+4], 18h
                jnb     short loc_5055
                mov     al, 18h

loc_5052:                               ; CODE XREF: DOSCODE:5078↓j
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------

loc_5055:                               ; CODE XREF: DOSCODE:504E↑j
                push    es
                push    bp
                mov     es, word ptr [si+10h]
                mov     di, [si+0Ah]
                pop     si
                pop     ds
                assume ds:nothing
                mov     ax, es:[di+4]
                cmp     word ptr es:[di+2], 0
                jnz     short loc_5076
                cmp     word ptr es:[di+6], 0
                jnz     short loc_5076
                cmp     ax, 4
                jbe     short loc_507A

loc_5076:                               ; CODE XREF: DOSCODE:5068↑j
                                        ; DOSCODE:506F↑j ...
                mov     al, 57h ; 'W'
                jmp     short loc_5052
; ---------------------------------------------------------------------------

loc_507A:                               ; CODE XREF: DOSCODE:5074↑j
                mov     word ptr es:[di], 18h
                or      al, al
                jz      short loc_5086
                jmp     loc_510A
; ---------------------------------------------------------------------------

loc_5086:                               ; CODE XREF: DOSCODE:5081↑j
                xor     dx, dx
                mov     bx, [si+0Dh]
                cmp     word ptr [si+0Fh], 0
                jnz     short loc_5097
                mov     dx, [si+2Fh]
                mov     bx, [si+2Dh]

loc_5097:                               ; CODE XREF: DOSCODE:508F↑j
                mov     ax, es:[di+0Ah]
                mov     cx, es:[di+8]
                or      ax, ax
                jnz     short loc_50A5
                jcxz    short loc_50C7

loc_50A5:                               ; CODE XREF: DOSCODE:50A1↑j
                cmp     ax, 0FFFFh
                jnz     short loc_50AF
                cmp     cx, 0FFFFh
                jz      short loc_50B7

loc_50AF:                               ; CODE XREF: DOSCODE:50A8↑j
                cmp     ax, dx
                jnz     short loc_50B5
                cmp     cx, bx

loc_50B5:                               ; CODE XREF: DOSCODE:50B1↑j
                jnb     short loc_5076

loc_50B7:                               ; CODE XREF: DOSCODE:50AD↑j
                or      byte ptr [si+18h], 1
                mov     [si+1Fh], cx
                cmp     word ptr [si+0Fh], 0
                jnz     short loc_50C7
                mov     [si+21h], ax

loc_50C7:                               ; CODE XREF: DOSCODE:50A3↑j
                                        ; DOSCODE:50C2↑j
                mov     ax, es:[di+0Eh]
                mov     cx, es:[di+0Ch]
                or      ax, ax
                jnz     short loc_50D5
                jcxz    short loc_5104

loc_50D5:                               ; CODE XREF: DOSCODE:50D1↑j
                cmp     ax, 0FFFFh
                jnz     short loc_50DF
                cmp     cx, 0FFFFh
                jz      short loc_50F1

loc_50DF:                               ; CODE XREF: DOSCODE:50D8↑j
                cmp     ax, 0
                jnz     short loc_50E7
                cmp     cx, 2

loc_50E7:                               ; CODE XREF: DOSCODE:50E2↑j
                jb      short loc_5076
                cmp     ax, dx
                jnz     short loc_50EF
                cmp     cx, bx

loc_50EF:                               ; CODE XREF: DOSCODE:50EB↑j
                ja      short loc_5076

loc_50F1:                               ; CODE XREF: DOSCODE:50DD↑j
                or      byte ptr [si+18h], 1
                mov     [si+1Dh], cx
                cmp     word ptr [si+0Fh], 0
                jnz     short loc_5104
                mov     [si+3Bh], ax
                mov     [si+39h], cx

loc_5104:                               ; CODE XREF: DOSCODE:50D3↑j
                                        ; DOSCODE:50FC↑j
                mov     ax, 7304h
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

loc_510A:                               ; CODE XREF: DOSCODE:5083↑j
                dec     al
                jnz     short loc_5122
                push    ds
                push    si
                lds     si, es:[di+8]
                pop     bp
                pop     es
                mov     cx, 4558h
                mov     dx, 4152h
                call    $SETDPB
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

loc_5122:                               ; CODE XREF: DOSCODE:510C↑j
                dec     al
                jnz     short loc_512D
                or      byte ptr [si+18h], 80h
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

loc_512D:                               ; CODE XREF: DOSCODE:5124↑j
                cmp     word ptr [si+0Fh], 0
                jz      short loc_5138
                mov     al, 0Fh

loc_5135:                               ; CODE XREF: DOSCODE:loc_518E↓j
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------

loc_5138:                               ; CODE XREF: DOSCODE:5131↑j
                dec     al
                jz      short loc_5193
                mov     ax, [si+35h]
                mov     es:[di+0Ch], ax
                mov     ax, [si+37h]
                mov     es:[di+0Eh], ax
                mov     cx, es:[di+0Ah]
                mov     ax, es:[di+8]
                cmp     ax, 0FFFFh
                jnz     short loc_515C
                cmp     cx, 0FFFFh
                jz      short loc_5190

loc_515C:                               ; CODE XREF: DOSCODE:5155↑j
                cmp     cx, 0
                jnz     short loc_5164
                cmp     ax, 2

loc_5164:                               ; CODE XREF: DOSCODE:515F↑j
                jnb     short loc_5169

loc_5166:                               ; CODE XREF: DOSCODE:loc_5171↓j
                jmp     loc_5076
; ---------------------------------------------------------------------------

loc_5169:                               ; CODE XREF: DOSCODE:loc_5164↑j
                cmp     cx, [si+2Fh]
                jnz     short loc_5171
                cmp     ax, [si+2Dh]

loc_5171:                               ; CODE XREF: DOSCODE:516C↑j
                ja      short loc_5166
                mov     [si+37h], cx
                mov     [si+35h], ax
                or      byte ptr [si+18h], 2
                push    ds
                push    si
                pop     bp
                pop     es
                call    ECritDisk
                call    update_fat32_fsinfo
                call    LCritDisk
                jnb     short loc_5190
                mov     al, 1Fh

loc_518E:                               ; CODE XREF: DOSCODE:loc_51B9↓j
                jmp     short loc_5135
; ---------------------------------------------------------------------------

loc_5190:                               ; CODE XREF: DOSCODE:515A↑j
                                        ; DOSCODE:518A↑j
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

loc_5193:                               ; CODE XREF: DOSCODE:513A↑j
                and     word ptr [si+23h], 8Fh
                mov     cx, [si+23h]
                mov     es:[di+0Ch], cx
                mov     word ptr es:[di+0Eh], 0
                mov     dx, es:[di+8]
                cmp     dx, 0FFFFh
                jnz     short loc_51B1
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

loc_51B1:                               ; CODE XREF: DOSCODE:51AC↑j
                test    dx, 0FF70h
                jz      short loc_51BB
                mov     al, 57h ; 'W'

loc_51B9:                               ; CODE XREF: DOSCODE:51BD↓j
                jmp     short loc_518E
; ---------------------------------------------------------------------------

loc_51BB:                               ; CODE XREF: DOSCODE:51B5↑j
                mov     al, 1
                jmp     short loc_51B9
; ---------------------------------------------------------------------------

$PARSE_FILE_DESCRIPTOR:                 ; DATA XREF: DOSCODE:4024↑o
                call    sub_9DB0
                push    si
                call    Get_User_Stack
                pop     word ptr [si+8]
                retn

; =============== S U B R O U T I N E =======================================


sub_51CA        proc near               ; CODE XREF: sub_6FE3:loc_6FE8↓p
                                        ; DOSCODE:70A4↓p ...
                push    ax
                mov     al, 1

set_exerr_locus:                        ; CODE XREF: set_exerr_locus_disk+3↓j
                                        ; sub_51D8+3↓j ...
                mov     ss:EXTERR_LOCUS, al
                pop     ax
                retn
sub_51CA        endp


; =============== S U B R O U T I N E =======================================


set_exerr_locus_disk proc near          ; CODE XREF: $IOCTL:loc_685E↓p
                                        ; $IOCTL:loc_68DA↓p ...
                push    ax
                mov     al, 2           ; errLOC_Disk
                jmp     short set_exerr_locus
set_exerr_locus_disk endp


; =============== S U B R O U T I N E =======================================


sub_51D8        proc near               ; CODE XREF: $IOCTL+39↓p
                                        ; $IOCTL+4C↓p ...
                push    ax
                mov     al, 4
                jmp     short set_exerr_locus
sub_51D8        endp


; =============== S U B R O U T I N E =======================================


sub_51DD        proc near               ; CODE XREF: DOSCODE:loc_B676↓p
                                        ; sub_B6D9+3B↓p
                push    ax
                mov     al, 5
                jmp     short set_exerr_locus
sub_51DD        endp

; ---------------------------------------------------------------------------

$SLEAZEFUNC:                            ; DATA XREF: DOSCODE:4008↑o
                mov     dl, 0

$SLEAZEFUNCDL:                          ; DATA XREF: DOSCODE:400A↑o
                push    ss
                pop     ds
                assume ds:DOSCODE
                mov     al, dl
                call    GETTHISDRV
                jb      short loc_5217
                call    DISK_INFO
                jb      short loc_5217
                mov     byte ptr FATBYTE, ah
                xor     ah, ah
                push    di
                call    TestNet
                pop     di
                jb      short loc_5204
                push    cx
                call    loc_7431
                pop     cx

loc_5204:                               ; CODE XREF: DOSCODE:51FD↑j
                mov     di, 598h
                call    Get_User_Stack
                mov     [si+4], cx
                mov     [si+6], bx
                mov     [si+2], di
                mov     word ptr [si+0Eh], ss
                retn
; ---------------------------------------------------------------------------

loc_5217:                               ; CODE XREF: DOSCODE:51EB↑j
                                        ; DOSCODE:51F0↑j
                jmp     FCB_RET_ERR
; ---------------------------------------------------------------------------

$GET_INDOS_FLAG:                        ; DATA XREF: DOSCODE:403A↑o
                call    Get_User_Stack
                mov     word ptr [si+2], offset INDOS

loc_5222:                               ; CODE XREF: DOSCODE:522E↓j
                mov     word ptr [si+10h], ss
                retn
; ---------------------------------------------------------------------------

$GET_IN_VARS:                           ; DATA XREF: DOSCODE:4076↑o
                call    Get_User_Stack
                mov     word ptr [si+2], offset DPBHEAD
                jmp     short loc_5222
; ---------------------------------------------------------------------------

$GET_DEFAULT_DPB:                       ; DATA XREF: DOSCODE:4010↑o
                mov     dl, 0

$GET_DPB:                               ; CODE XREF: DOSCODE:4EFC↑j
                                        ; DATA XREF: DOSCODE:4036↑o
                push    ss
                pop     ds
                mov     al, dl
                call    GETTHISDRV
                mov     al, 0Fh
                jnb     short loc_5252

loc_523D:                               ; CODE XREF: DOSCODE:525B↓j
                                        ; DOSCODE:5268↓j ...
                call    Get_User_Stack
                cmp     word ptr [si], 7302h
                jz      short loc_524C
                cmp     word ptr [si], 7304h
                jnz     short loc_524F

loc_524C:                               ; CODE XREF: DOSCODE:5244↑j
                                        ; DOSCODE:5292↓j
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------

loc_524F:                               ; CODE XREF: DOSCODE:524A↑j
                mov     al, 0FFh
                retn
; ---------------------------------------------------------------------------

loc_5252:                               ; CODE XREF: DOSCODE:523B↑j
                les     di, THISCDS
                test    byte ptr es:[di+44h], 80h
                jnz     short loc_523D
                call    ECritDisk
                call    FATREAD_CDS
                call    LCritDisk
                mov     al, 53h ; 'S'
                jb      short loc_523D
                call    Get_User_Stack
                cmp     word ptr [si], 7304h
                jnz     short loc_5276
                jmp     loc_504A
; ---------------------------------------------------------------------------

loc_5276:                               ; CODE XREF: DOSCODE:5271↑j
                cmp     word ptr [si], 7302h
                jz      short loc_528C
                cmp     word ptr es:[bp+0Fh], 0
                jz      short loc_523D
                mov     [si+2], bp
                mov     word ptr [si+0Eh], es
                xor     al, al
                retn
; ---------------------------------------------------------------------------

loc_528C:                               ; CODE XREF: DOSCODE:527A↑j
                mov     al, 18h
                cmp     word ptr [si+4], 3Fh ; '?'
                jb      short loc_524C
                push    es
                push    bp
                mov     es, word ptr [si+10h]
                mov     di, [si+0Ah]
                mov     bx, [si+8]
                pop     si
                pop     ds
                assume ds:nothing
                mov     ax, 3Dh ; '='
                stosw
                mov     cx, ax
                push    di
                rep movsb
                pop     di
                cmp     bx, 0F1A6h
                jz      short loc_52C4
                xor     ax, ax
                dec     ax
                mov     es:[di+19h], ax
                mov     es:[di+1Bh], ax
                mov     es:[di+13h], ax
                mov     es:[di+15h], ax

loc_52C4:                               ; CODE XREF: DOSCODE:52AF↑j
                cmp     word ptr es:[di+0Fh], 0
                jz      short loc_531D
                mov     ax, es:[di+0Dh]
                mov     es:[di+2Dh], ax
                mov     ax, es:[di+0Fh]
                mov     es:[di+31h], ax
                mov     ax, es:[di+1Dh]
                mov     es:[di+39h], ax
                mov     ax, es:[di+0Bh]
                mov     es:[di+29h], ax
                xor     ax, ax
                mov     es:[di+2Fh], ax
                mov     es:[di+33h], ax
                mov     es:[di+3Bh], ax
                mov     es:[di+2Bh], ax
                mov     es:[di+35h], ax
                mov     es:[di+37h], ax
                mov     es:[di+23h], ax
                dec     ax
                mov     es:[di+25h], ax
                mov     es:[di+27h], ax
                cmp     ax, es:[di+1Fh]
                jz      short loc_5319
                inc     ax

loc_5319:                               ; CODE XREF: DOSCODE:5316↑j
                mov     es:[di+21h], ax

loc_531D:                               ; CODE XREF: DOSCODE:52C9↑j
                xor     ax, ax
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

$DISK_RESET:                            ; DATA XREF: DOSCODE:3FEC↑o
                mov     al, 0FFh
                push    ss
                pop     ds
                assume ds:DOSCODE
                call    ECritDisk
                or      byte ptr DOS34_FLAG, 4
                call    FLUSHBUF
                and     byte ptr DOS34_FLAG, 0FBh
                les     bp, DPBHEAD

loc_533A:                               ; CODE XREF: DOSCODE:5346↓j
                cmp     bp, 0FFFFh
                jz      short loc_5348
                call    update_fat32_fsinfo
                les     bp, es:[bp+19h]
                jmp     short loc_533A
; ---------------------------------------------------------------------------

loc_5348:                               ; CODE XREF: DOSCODE:533D↑j
                mov     word ptr byte_107F+4, 0
                mov     bx, 0FFFFh
                mov     word ptr LastBuffer+2, bx
                mov     word ptr LastBuffer, bx
                call    LCritDisk
                mov     ax, 0FFFFh
                push    ax
                mov     ax, 1120h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS
                                        ; DS = DOS CS
                                        ; Return: CF clear (successful)
                pop     ax
                retn
; ---------------------------------------------------------------------------
word3           dw 3                    ; DATA XREF: $SETDPB+154↓r

; =============== S U B R O U T I N E =======================================


$SETDPB         proc near               ; CODE XREF: DOSCODE:511C↑p
                                        ; FAT_GOT_DPB:gotgetbuf3↓p ...
                mov     di, bp          ; Buffer address (es:bp)
                inc     di              ; Skip over dpb_drive and dpb_UNIT
                inc     di
                lodsw                   ; dpb_sector_size ; bytes per sector
                stosw                   ; .BPB_BYTESPERSECTOR
                cmp     cx, 4558h       ; 'XE' (NASM syntax)
                                        ; CX = signature 4558h ('EX') for FAT32 extended BPB/DPB
                jnz     short not_fat32_extension
                cmp     dx, 4152h       ; 'RA' (NASM syntax)
                                        ; DX = signature 4152h ('AR') for FAT32 extended BPB/DPB
                jz      short chk_fat32_conditions

not_fat32_extension:                    ; CODE XREF: $SETDPB+A↑j
                xor     cx, cx          ; 0 ; (Do not use FAT32 extensions -32 bit parameters-)

chk_fat32_conditions:                   ; CODE XREF: $SETDPB+10↑j
                push    cx              ; (*)
                cmp     byte ptr [si+3], 0 ; .BPB_NUMBEROFFATS
                jz      short nofat
                cmp     word ptr [si+9], 0 ; .BPB_SECTORSPERFAT ; BPB_FATSz16
                jnz     short yesfat
                cmp     word ptr [si+29], 0 ; .BPB_FAT32VERSION ; BPB_FSVer
                jz      short yesfat

nofat:                                  ; CODE XREF: $SETDPB+19↑j
                                        ; $SETDPB+41↓j
                xor     ax, ax
                mov     es:[di+4], al   ; DPB.FAT_COUNT = 0
                add     di, 15          ; DPB.DRIVER_ADDR
                add     si, 11          ; .BPB_SECTORSPERTRACK
                mov     es:[bp+15], ax  ; DPB.FAT_SIZE = 0
                jmp     setend
; ---------------------------------------------------------------------------

yesfat:                                 ; CODE XREF: $SETDPB+1F↑j
                                        ; $SETDPB+25↑j
                mov     dx, ax          ; bytes per sector
                lodsb                   ; .BPB_SECTORSPERCLUSTER
                xor     ah, ah
                or      ax, ax
                jz      short nofat
                dec     al
                stosb                   ; DPB.CLUSTER_MASK ; Sectors/cluster - 1
                inc     al

LOG2LOOP:                               ; CODE XREF: $SETDPB+50↓j
                test    al, 1
                jnz     short SAVLOG
                inc     ah
                shr     al, 1
                jmp     short LOG2LOOP
; ---------------------------------------------------------------------------

SAVLOG:                                 ; CODE XREF: $SETDPB+4A↑j
                mov     al, ah
                stosb                   ; DPB.CLUSTER_SHIFT ; Log2 of sectors/cluster
                mov     bl, al
                movsw                   ; .BPB_RESERVEDSECTORS -> DPB.FIRST_FAT
                lodsb                   ; .BPB_NUMBEROFFATS
                stosb                   ; DPB.FAT_COUNT
                mov     bh, al
                lodsw                   ; .BPB_ROOTENTRIES
                stosw                   ; DPB.ROOT_ENTRIES
                mov     cl, 5
                shr     dx, cl          ; Directory entries per sector
                dec     ax
                add     ax, dx          ; Round Up
                mov     cx, dx
                xor     dx, dx
                div     cx
                mov     cx, ax          ; Number of root directory sectors
                inc     di
                inc     di
                movsw                   ; .BPB_TOTALSECTORS -> DPB.MAX_CLUSTER (temporary)
                lodsb                   ; .BPB_MEDIADESCRIPTOR
                mov     es:[bp+23], al  ; DPB.MEDIA
                lodsw                   ; .BPB_SECTORSPERFAT
                stosw                   ; DPB.FAT_SIZE
                xor     dx, dx
                or      ax, ax
                jnz     short savlog1   ; 16 bit FAT size
                pop     dx              ; (*) FAT32 extensions
                                        ; (use 32 bit FAT and Root Dir size if >0)
                push    dx              ; (*)
                or      dx, dx
                jz      short savlog1   ; Do not use FAT32 extensions
                                        ; (do not use 32 bit FAT size field)
                mov     ax, [si+12]     ; .BPB_SECTORSPERFAT32 ; BPB_FATSz32
                mov     dx, [si+14]     ; .BPB_SECTORSPERFAT32+2

savlog1:                                ; CODE XREF: $SETDPB+7B↑j
                                        ; $SETDPB+81↑j
                push    cx              ; (**) Root directory sectors
                mov     cx, ax          ; 32 bit multiply
                mov     al, bh          ; FAT count
                xor     ah, ah
                mul     dx
                xchg    ax, cx
                mov     dl, bh          ; FAT count
                xor     dh, dh
                mul     dx
                add     dx, cx
                pop     cx              ; (**)
                cmp     ax, dx
                jnz     short savlog2
                or      ax, ax
                jnz     short savlog2
                inc     di
                inc     di
                jmp     short setend
; ---------------------------------------------------------------------------

savlog2:                                ; CODE XREF: $SETDPB+9E↑j
                                        ; $SETDPB+A2↑j
                add     ax, es:[bp+6]   ; dx:ax = (total) FAT sectors
                adc     dx, 0
                stosw                   ; DPB.DIR_SECTOR
                add     ax, cx          ; + root directory size
                mov     es:[bp+11], ax  ; DPB.FIRST_SECTOR ; First data sector
                adc     dx, 0
                pop     cx              ; (*)
                push    cx
                jcxz    short savlog3
                mov     es:[bp+41], ax  ; DPB.BIG_FIRST_SECTOR ; FAT32 first sector field
                mov     es:[bp+43], dx

savlog3:                                ; CODE XREF: $SETDPB+BB↑j
                mov     cl, bl          ; cluster shift
                cmp     word ptr es:[bp+13], 0 ; DPB.MAX_CLUSTER
                                        ; (contains 16 bit .BPB_TOTALSECTORS as temporary)
                jnz     short normal_dpb
                xor     ch, ch
                push    dx
                mov     bx, [si+8]      ; SI points to .BPB_SECTORSPERTRACK and SI+8 is
                                        ; .BPB_BIGTOTALSECTORS (32 bit total sectors)
                mov     dx, [si+10]
                sub     bx, ax
                pop     ax
                sbb     dx, ax          ; dx:bx = data sectors (for cluster count calc)
                or      cx, cx
                jz      short norot

rott:                                   ; CODE XREF: $SETDPB+E5↓j
                clc
                rcr     dx, 1
                rcr     bx, 1
                loop    rott

norot:                                  ; CODE XREF: $SETDPB+DE↑j
                mov     ax, bx          ; dx:ax = cluster count
                jmp     short setend
; ---------------------------------------------------------------------------

normal_dpb:                             ; CODE XREF: $SETDPB+CC↑j
                sub     ax, es:[bp+13]  ; first sector - total sectors
                xor     dx, dx
                neg     ax              ; data sectors = total sectors - first sector
                shr     ax, cl          ; cluster count

setend:                                 ; CODE XREF: $SETDPB+37↑j
                                        ; $SETDPB+A6↑j ...
                pop     cx              ; (*) 0 = not 32 bit fat sectors
                push    cx              ; (*)
                add     ax, 1
                adc     dx, 0           ; calculated # clusters HW
                mov     bx, ax          ; calculated # clusters LW
                mov     ax, es:[bp+15]  ; FAT size (16 bit)
                jcxz    short setend1   ; Do not use 32 bit FAT sectors field
                xor     cx, cx
                or      ax, ax
                jnz     short setend1
                mov     ax, [si+12]     ; .BPB_SECTORSPERFAT32  ; 32 bit FAT size field.
                mov     cx, [si+14]     ; .BPB_SECTORSPERFAT32+2

setend1:                                ; CODE XREF: $SETDPB+103↑j
                                        ; $SETDPB+109↑j
                push    dx              ; cx:ax = FAT size (in sectors)
                                        ; dx:bx = calculated number of clusters
                xchg    ax, cx
                mul     word ptr es:[bp+2] ; DPB.SECTOR_SIZE
                xchg    ax, cx
                mul     word ptr es:[bp+2]
                add     dx, cx          ; dx:ax = FAT size in bytes
                pop     cx              ; calculated # clusters HW
                or      cx, cx
                jnz     short setend2   ; FAT32
                cmp     bx, 0FF6h
                jb      short setend_fat12 ; FAT12

setend2:                                ; CODE XREF: $SETDPB+121↑j
                or      cx, cx          ; HW of calculated cluster count
                jnz     short setend3
                cmp     bx, 0FFF6h
                jb      short setend4   ; FAT16

setend3:                                ; CODE XREF: $SETDPB+12B↑j
                shr     dx, 1           ; FAT32 ; 4 byte (32 bit) cluster number
                                        ; fatsiz/4 = # of fat entries
                rcr     ax, 1
                shr     dx, 1
                jz      short setend5   ; dx = 0
                rcr     ax, 1
                jmp     short setend_fat16
; ---------------------------------------------------------------------------

setend4:                                ; CODE XREF: $SETDPB+130↑j
                shr     dx, 1           ; FAT16 ; 2 byte (16 bit) cluster number
                                        ; fatsiz/2 = # of fat entries
                jnz     short setend_faterr ; dx > 0

setend5:                                ; CODE XREF: $SETDPB+138↑j
                rcr     ax, 1           ; FAT16 ; 2 byte (16 bit) cluster number
                                        ; fatsiz/2 = # of fat entries
                cmp     ax, 0FF7h       ; 4096-10+1
                jb      short setend_faterr
                jmp     short setend_fat16
; ---------------------------------------------------------------------------

setend_fat12:                           ; CODE XREF: $SETDPB+127↑j
                add     ax, ax          ; FAT12 ; 1.5 byte (12 bit) cluster number
                                        ; (fatsiz*2)/3 = # of fat entries
                adc     dx, dx
                cmp     dx, 3           ; if our fatspace is more than we need
                                        ; use calculated size
                jnb     short setend_faterr
                div     cs:word3

setend_fat16:                           ; CODE XREF: $SETDPB+13C↑j
                                        ; $SETDPB+149↑j
                sub     ax, 1
                sbb     dx, 0
                cmp     dx, cx          ; is fat big enough?
                ja      short setend_faterr
                cmp     ax, bx
                jbe     short setend_fat32 ; use max value that'll fit

setend_faterr:                          ; CODE XREF: $SETDPB+140↑j
                                        ; $SETDPB+147↑j ...
                mov     ax, bx          ; use calculated value
                mov     dx, cx

setend_fat32:                           ; CODE XREF: $SETDPB+165↑j
                cmp     word ptr es:[bp+15], 0 ; DPB.FAT_SIZE ; 16 bit FAT size
                jnz     short setend6
                mov     word ptr es:[bp+17], 0FFFFh ; DPB.DIR_SECTOR
                                        ; (16 bit directory sector field)
                mov     word ptr es:[bp+13], 0 ; DPB.MAX_CLUSTER (16 bit)
                jmp     short setend7
; ---------------------------------------------------------------------------

setend6:                                ; CODE XREF: $SETDPB+170↑j
                mov     es:[bp+13], ax  ; DPB.MAX_CLUSTER = calculated last cluster number

setend7:                                ; CODE XREF: $SETDPB+17E↑j
                pop     cx              ; ; (*) 1 = use FAT32 extensions
                                        ;       0 = don't use FAT32 extensions (32 bit fields)
                jcxz    short setend_fat ; do not use FAT32 extensions
                mov     es:[bp+45], ax  ; DPB.MAX_CLUSTER32 ; dx:ax = last cluster number
                mov     es:[bp+47], dx
                mov     ax, 0FFFFh
                lea     di, [bp+33]     ; DPB.FAT32_EXT ; FAT32 extensions
                                        ; -1 = ready
                stosw
                lea     si, [si+16]     ; FAT32 flags
                movsw                   ; DPB FAT32 flags ; [bp+23h]
                add     si, 6
                lodsw                   ; FSINFO structure sector number
                mov     dx, [si-24h]    ; .BPB_RESERVEDSECTORS ; Number of reserved sectors.
                or      ax, ax
                jz      short setend8
                cmp     ax, dx
                jb      short setend9

setend8:                                ; CODE XREF: $SETDPB+1A3↑j
                mov     ax, 0FFFFh      ; -1 ; invalid

setend9:                                ; CODE XREF: $SETDPB+1A7↑j
                stosw                   ; DPB FSINFO structure sector number
                                        ; [bp+25h]
                lodsw                   ; Sector number of the backup boot sector
                or      ax, ax
                jz      short setend10
                cmp     ax, dx
                jb      short setend11

setend10:                               ; CODE XREF: $SETDPB+1B0↑j
                mov     ax, 0FFFFh      ; -1 ; invalid

setend11:                               ; CODE XREF: $SETDPB+1B4↑j
                stosw                   ; DPB backup boot sector address
                                        ; [bp+27h]
                add     di, 8           ; [bp+31h]
                xor     dx, dx
                mov     ax, es:[di-34]  ; [bp+0Fh] ; DPB.MAX_CLUSTER
                cmp     ax, dx
                jnz     short setend12  ; > 0 (not FAT32)
                mov     ax, [si-16]     ; FAT32 Sectors per FAT ; .BPB_SECTORSPERFAT32
                mov     dx, [si-14]

setend12:                               ; CODE XREF: $SETDPB+1C5↑j
                stosw                   ; DPB FAT32 FAT size in sectors ; [bp+31h]
                mov     ax, dx
                stosw
                sub     si, 8           ; Root directory cluster number
                movsw                   ; DPB Root Dir Cluster ; [bp+35h]
                movsw
                xor     ax, ax          ; DPB reserved ; [bp+39h]
                stosw
                stosw

setend_fat:                             ; CODE XREF: $SETDPB+185↑j
                xor     ax, ax
                mov     es:[bp+29], ax  ; DPB.NEXT_FREE ; last allocated cluster #
                dec     ax
                mov     es:[bp+31], ax  ; DPB.FREE_CNT (-1 = unknown)
                retn
$SETDPB         endp


; =============== S U B R O U T I N E =======================================


$DUP_PDB        proc near               ; CODE XREF: DOSCODE:B210↓p
                                        ; DATA XREF: DOSCODE:407C↑o
                mov     ds, cs:DosDSeg
                assume ds:nothing
                mov     byte ptr ds:Lock_Buffer, 0FFh
                mov     ds, ds:CurrentPDB
                push    si
                jmp     short CreateCopy
; ---------------------------------------------------------------------------

$CREATE_PROCESS_DATA_BLOCK:             ; DATA XREF: DOSCODE:401E↑o
                call    Get_User_Stack
                mov     ds, word ptr [si+14h]
                push    word ptr ds:2

CreateCopy:                             ; CODE XREF: $DUP_PDB+F↑j
                mov     es, dx
                xor     si, si
                mov     di, si
                mov     cx, 128
                rep movsw
                mov     cx, 20
                mov     di, 18h
                push    ds
                lds     si, ds:BCON+2
                rep movsb
                pop     ds
                mov     ds, cs:DosDSeg
                cmp     byte ptr ds:Lock_Buffer, 0
                jz      short loc_55DC
                mov     ds, cs:DosDSeg
                xor     bx, bx
                mov     cx, 20

Create_dup_jfn:                         ; CODE XREF: $DUP_PDB+7C↓j
                push    es
                call    SFFromHandle
                mov     al, 0FFh
                jb      short CreateStash
                test    byte ptr es:[di+6], 10h
                jnz     short CreateStash
                mov     ah, es:[di+2]
                and     ah, 0F0h
                cmp     ah, 70h
                jz      short CreateStash
                mov     word ptr ds:THISSFT, di
                mov     word ptr ds:THISSFT+2, es
                call    DOS_DUP
                call    pJFNFromHandle
                mov     al, es:[di]

CreateStash:                            ; CODE XREF: $DUP_PDB+50↑j
                                        ; $DUP_PDB+57↑j ...
                pop     es
                mov     es:[bx+18h], al
                inc     bx
                loop    Create_dup_jfn
                mov     bx, ds:330h
                mov     es:16h, bx
                mov     word ptr ds:330h, es
                mov     ds, bx

loc_55DC:                               ; CODE XREF: $DUP_PDB+3E↑j
                push    ds
                mov     ds, cs:DosDSeg
                mov     byte ptr ds:3A8h, 0
                pop     ds
                pop     ax
$DUP_PDB        endp


; =============== S U B R O U T I N E =======================================


SETMEM          proc near               ; CODE XREF: DOSCODE:CFB1↓p
                xor     cx, cx
                mov     ds, cx
                assume ds:DOSCODE
                mov     es, dx
                mov     si, 88h
                mov     di, 0Ah
                mov     cl, 6
                rep movsw
                mov     es:2, ax
                sub     ax, dx
                cmp     ax, 0FFFh
                jbe     short loc_5607
                mov     ax, 0FFFh

loc_5607:                               ; CODE XREF: SETMEM+19↑j
                sub     ax, 10h
                mov     bx, 0Ch
                sub     bx, ax
                mov     cl, 4
                shl     ax, cl
                mov     ds, dx
                assume ds:nothing
                mov     ds:6, ax
                mov     ds:8, bx
                cmp     ax, 0FEF0h
                jz      short addr_ok
                mov     word ptr ds:6, 0C0h
                mov     word ptr ds:8, 0

addr_ok:                                ; CODE XREF: SETMEM+36↑j
                mov     word ptr ds:0, 20CDh
                mov     byte ptr ds:5, 9Ah
                mov     word ptr ds:50h, 21CDh
                mov     byte ptr ds:52h, 0CBh
                mov     word ptr ds:34h, 18h
                mov     word ptr ds:36h, ds
                mov     word ptr ds:32h, 14h
                mov     word ptr ds:38h, 0FFFFh
                mov     word ptr ds:3Ah, 0FFFFh
                mov     word ptr es:40h, 0A07h
                retn
SETMEM          endp

; ---------------------------------------------------------------------------

$GSetMediaID:                           ; DATA XREF: DOSCODE:40A4↑o
                push    ds
                push    si
                lds     si, ss:THISCDS
                lds     si, [si+45h]
                mov     si, [si+0Fh]
                mov     cx, 866h
                cmp     al, 1
                jb      short doioctl1
                ja      short errorfunc
                mov     cl, 46h
                or      si, si
                jz      short doioctl2

doioctl1:                               ; CODE XREF: DOSCODE:5679↑j
                or      si, si
                jnz     short doioctl
                pop     ds
                push    ds
                mov     si, dx
                cmp     word ptr [si+11h], 4146h ; 'FA'
                jnz     short doioctl
                cmp     word ptr [si+13h], 3354h ; 'T3'
                jnz     short doioctl
                cmp     word ptr [si+15h], 2032h ; '2 '
                jnz     short doioctl
                cmp     word ptr [si+17h], 2020h ; '  '
                jnz     short doioctl

doioctl2:                               ; CODE XREF: DOSCODE:5681↑j
                mov     ch, 48h

doioctl:                                ; CODE XREF: DOSCODE:5685↑j
                                        ; DOSCODE:5690↑j ...
                pop     si
                pop     ds
                mov     al, 0Dh
                call    $IOCTL
                retn
; ---------------------------------------------------------------------------

errorfunc:                              ; CODE XREF: DOSCODE:567B↑j
                mov     al, 1
                jmp     SYS_RET_ERR

; =============== S U B R O U T I N E =======================================


StrCmp          proc near               ; CODE XREF: DOSCODE:66F4↓p
                                        ; DOSCODE:C356↓p
                                        ; DATA XREF: ...
                push    si
                push    di
                push    ax

loc_56B9:                               ; CODE XREF: StrCmp+1C↓j
                lodsb
                call    UCase
                call    PATHCHRCMP
                mov     ah, al
                mov     al, es:[di]
                inc     di
                call    UCase
                call    PATHCHRCMP
                cmp     ah, al
                jnz     short loc_56D4
                or      al, al
                jnz     short loc_56B9

loc_56D4:                               ; CODE XREF: StrCmp+18↑j
                pop     ax
                pop     di
                pop     si
                retn
StrCmp          endp


; =============== S U B R O U T I N E =======================================


StrCpy          proc near               ; CODE XREF: TransPathSet+C6↓p
                                        ; DATA XREF: DOSCODE:40E1↑o
                push    ax

loc_56D9:                               ; CODE XREF: StrCpy+B↓j
                lodsb
                call    UCase
                call    PATHCHRCMP
                stosb
                or      al, al
                jnz     short loc_56D9
                pop     ax
                retn
StrCpy          endp


; =============== S U B R O U T I N E =======================================


FStrCpy         proc near               ; CODE XREF: DOSCODE:loc_67A8↓p
                                        ; ValidateCDS+2A↓p ...
                push    ax

loc_56E8:                               ; CODE XREF: FStrCpy+5↓j
                lodsb
                stosb
                or      al, al
                jnz     short loc_56E8
                pop     ax
                retn
FStrCpy         endp


; =============== S U B R O U T I N E =======================================


StrLen          proc near               ; CODE XREF: DStrLen+3↓p
                                        ; REN_DEL_Check+17↓p ...
                push    di
                push    ax
                mov     cx, 0FFFFh
                xor     al, al
                repne scasb
                not     cx
                pop     ax
                pop     di
                retn
StrLen          endp


; =============== S U B R O U T I N E =======================================


DStrLen         proc near               ; CODE XREF: sub_67E9+4↓p
                                        ; DOSCODE:ADCD↓p ...
                call    xchg_esdi_dssi
                call    StrLen
                call    xchg_esdi_dssi
                retn
DStrLen         endp


; =============== S U B R O U T I N E =======================================


xchg_esdi_dssi  proc near               ; CODE XREF: $GetExtCntry+A1↑p
                                        ; DStrLen↑p ...
                push    ds
                push    es
                pop     ds
                pop     es
                xchg    si, di

idle_fsharing_ret:                      ; CODE XREF: Idle+6↓j
                retn
xchg_esdi_dssi  endp


; =============== S U B R O U T I N E =======================================


Idle            proc near               ; CODE XREF: sub_72DE+E↓p
                                        ; sub_C5C7+E↓p ...
                cmp     ss:FSHARING, 0
                jnz     short idle_fsharing_ret
                push    cx
                mov     cx, ss:RetryLoop
                jcxz    short loc_5727

loc_571F:                               ; CODE XREF: Idle+16↓j
                push    cx
                xor     cx, cx

loc_5722:                               ; CODE XREF: Idle:loc_5722↓j
                loop    loc_5722
                pop     cx
                loop    loc_571F

loc_5727:                               ; CODE XREF: Idle+E↑j
                pop     cx
                retn
Idle            endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

TableDispatch   proc near               ; CODE XREF: DOSCODE:4854↑p
                                        ; DOSCODE:B762↓p

arg_0           = byte ptr  4
arg_2           = word ptr  6

                push    bp
                mov     bp, sp
                push    bx
                mov     bx, [bp+arg_2]
                mov     bl, cs:[bx]
                cmp     [bp+arg_0], bl
                jnb     short loc_574F
                mov     bl, [bp+arg_0]
                xor     bh, bh
                shl     bx, 1
                inc     bx
                add     bx, [bp+arg_2]
                mov     bx, cs:[bx]
                mov     [bp+arg_2], bx
                pop     bx
                pop     bp
                add     sp, 4
                retn
; ---------------------------------------------------------------------------

loc_574F:                               ; CODE XREF: TableDispatch+D↑j
                pop     bx
                pop     bp
                retn    6
TableDispatch   endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


TestNet         proc near               ; CODE XREF: DOSCODE:4DD9↑p
                                        ; DOSCODE:51F9↑p ...
                mov     es, cs:DosDSeg
                les     di, es:THISCDS
                cmp     di, 0FFFFh
                jz      short TestNet_ret
                test    byte ptr es:[di+44h], 80h
                jnz     short TestNet_ret
                retn
; ---------------------------------------------------------------------------

TestNet_ret:                            ; CODE XREF: TestNet+D↑j
                                        ; TestNet+14↑j
                cmc
                retn
TestNet         endp


; =============== S U B R O U T I N E =======================================


sub_576D        proc near               ; CODE XREF: sub_5DAE+5↓p
                                        ; DOSCODE:loc_63B8↓p ...
                test    byte ptr es:[di+6], 80h
                retn
sub_576D        endp

; ---------------------------------------------------------------------------

FastInit:                               ; DATA XREF: DOSCODE:4113↑o
                push    es
                mov     es, cs:DosDSeg
                mov     di, offset FastTable_2
                dec     bx
                mov     dx, bx
                shl     bx, 1
                shl     bx, 1
                add     di, bx
                mov     ax, es:[di+2]
                mov     cx, cs
                cmp     ax, cx
                jz      short loc_5794
                or      ax, ax
                stc
                jnz     short loc_57AB

loc_5794:                               ; CODE XREF: DOSCODE:578D↑j
                cmp     si, 0FFFFh
                jz      short loc_57AB
                mov     cx, ds
                mov     es:[di+2], cx
                mov     es:[di], si
                mov     di, 1146h
                add     di, dx
                or      byte ptr es:[di], 80h

loc_57AB:                               ; CODE XREF: DOSCODE:5792↑j
                                        ; DOSCODE:5797↑j
                pop     es
                retn
; ---------------------------------------------------------------------------

FastRet:                                ; DATA XREF: DOSDATA:FastTable_2↑o
                                        ; DOSDATA:1142↑o
                stc
                sbb     ax, ax
                retf
; ---------------------------------------------------------------------------

NLS_OPEN:                               ; DATA XREF: DOSCODE:410B↑o
                mov     al, cl
                call    $OPEN
                retn
; ---------------------------------------------------------------------------

NLS_LSEEK:                              ; DATA XREF: DOSCODE:410F↑o
                push    ss:USER_SP
                push    ss:USER_SS
                call    Fake_User_Stack
                mov     ax, bp
                call    $LSEEK

NLS_SEEK_RET:                           ; CODE XREF: DOSCODE:5806↓j
                pop     ss:USER_SS
                pop     ss:USER_SP
                retn

; =============== S U B R O U T I N E =======================================


Fake_User_Stack proc near               ; CODE XREF: DOSCODE:57C1↑p
                                        ; DOSCODE:57FE↓p
                mov     ax, ss:USER_SP_2F
                mov     ss:USER_SP, ax
                mov     ax, ss
                mov     ss:USER_SS, ax
                retn
Fake_User_Stack endp

; ---------------------------------------------------------------------------

GetDevList:                             ; DATA XREF: DOSCODE:4117↑o
                mov     si, 0D58h
                mov     ds, cs:DosDSeg
                lds     si, [si]
                mov     ax, [si+22h]
                mov     bx, [si+24h]
                retn
; ---------------------------------------------------------------------------

NLS_IOCTL:                              ; DATA XREF: DOSCODE:4115↑o
                push    ss:USER_SP
                push    ss:USER_SS
                call    Fake_User_Stack
                mov     ax, bp
                call    $IOCTL
                jmp     short NLS_SEEK_RET
; ---------------------------------------------------------------------------

NLS_GETEXT:                             ; DATA XREF: DOSCODE:4119↑o
                mov     ax, ss:EXTERR

MSG_RETRIEVAL:                          ; DATA XREF: DOSCODE:411B↑o
                retn

; =============== S U B R O U T I N E =======================================


ECritDisk       proc near               ; CODE XREF: FAT32_ABSDWRT-77↑p
                                        ; FAT32_ABSDWRT+31↑p ...
                push    cx
                mov     ch, 0
                mov     cl, ss:redir_patch
                jcxz    short ECritDisk_3
                pop     cx
                push    ax
                mov     ax, 8001h
ECritDisk       endp ; sp-analysis failed

; START OF FUNCTION CHUNK FOR ECritDevice

ECritDisk_1:                            ; CODE XREF: LCritDisk+F↓j
                                        ; ECritDevice+F↓j ...
                push    cx
                mov     ch, 0
                mov     cl, ss:IsWin386
                jcxz    short ECritDisk_2
                pop     cx
                int     2Ah             ; Microsoft Networks - BEGIN DOS CRITICAL SECTION
                                        ; AL = critical section number (00h-0Fh)
                pop     ax
                retn
; ---------------------------------------------------------------------------

ECritDisk_2:                            ; CODE XREF: ECritDevice-2A↑j
                push    es
                mov     cx, 0
                mov     es, cx
                assume es:DOSCODE
                pushf                   ; simulate INT 2Ah
                call    es:00A8h        ; call  far (INT 2Ah vector)
                pop     es
                assume es:nothing
                pop     cx
                pop     ax
                retn
; ---------------------------------------------------------------------------

ECritDisk_3:                            ; CODE XREF: ECritDisk+8↑j
                                        ; LCritDisk+8↓j ...
                pop     cx
                retn
; END OF FUNCTION CHUNK FOR ECritDevice

; =============== S U B R O U T I N E =======================================


LCritDisk       proc near               ; CODE XREF: FAT32_ABSDWRT-6E↑p
                                        ; FAT32_ABSDWRT+3D↑p ...
                push    cx
                mov     ch, 0
                mov     cl, ss:redir_patch
                jcxz    short ECritDisk_3
                pop     cx
                push    ax
                mov     ax, 8101h
                jmp     short ECritDisk_1
LCritDisk       endp


; =============== S U B R O U T I N E =======================================


ECritDevice     proc near               ; CODE XREF: DEVIOCALL2↓p

; FUNCTION CHUNK AT 581C SIZE 00000021 BYTES

                push    cx
                mov     ch, 0
                mov     cl, ss:redir_patch
                jcxz    short ECritDisk_3
                pop     cx
                push    ax
                mov     ax, 8002h
                jmp     short ECritDisk_1
ECritDevice     endp


; =============== S U B R O U T I N E =======================================


LCritDevice     proc near               ; CODE XREF: DEVIOCALL2:dev_exit↓p
                push    cx
                mov     ch, 0
                mov     cl, ss:redir_patch
                jcxz    short ECritDisk_3
                pop     cx
                push    ax
                mov     ax, 8102h
                jmp     short ECritDisk_1
LCritDevice     endp


; =============== S U B R O U T I N E =======================================


$STD_CON_INPUT_NO_ECHO proc near        ; CODE XREF: $STD_CON_STRING_INPUT:OEMFunctionKey↑p
                                        ; $STD_CON_STRING_INPUT+32↓p ...
                push    ds
                push    si

INTEST:                                 ; CODE XREF: $STD_CON_INPUT_NO_ECHO+3F↓j
                call    near ptr STATCHK
                jnz     short GET
                cmp     ss:PRINTER_FLAG, 0
                jnz     short no_sys_wait
                mov     ah, 5
                call    IOFUNC

no_sys_wait:                            ; CODE XREF: $STD_CON_INPUT_NO_ECHO+D↑j
                mov     ah, 84h
                int     2Ah             ; Microsoft Networks - KEYBOARD BUSY LOOP
                cmp     byte ptr ss:DATE_FLAG, 0FFh
                jnz     short NoUpdate
                push    ax
                push    bx
                push    cx
                push    dx
                push    ds
                push    ss
                pop     ds
                assume ds:DOSCODE
                xor     ax, ax
                call    Save_Restore_Packet
                call    READTIME
                mov     ax, 1
                call    Save_Restore_Packet
                pop     ds
                assume ds:nothing
                pop     dx
                pop     cx
                pop     bx
                pop     ax

NoUpdate:                               ; CODE XREF: $STD_CON_INPUT_NO_ECHO+1E↑j
                inc     ss:DATE_FLAG
                jmp     short INTEST
; ---------------------------------------------------------------------------

GET:                                    ; CODE XREF: $STD_CON_INPUT_NO_ECHO+5↑j
                xor     ah, ah
                call    IOFUNC
                pop     si
                pop     ds
                mov     ss:SCAN_FLAG, 0
                cmp     al, 0
                jnz     short noscan
                inc     ss:SCAN_FLAG

noscan:                                 ; CODE XREF: $STD_CON_INPUT_NO_ECHO+50↑j
                                        ; DOSCODE:58CD↓j ...
                retn
$STD_CON_INPUT_NO_ECHO endp

; ---------------------------------------------------------------------------

$STD_CON_STRING_OUTPUT:                 ; DATA XREF: DOSCODE:3FE4↑o
                mov     si, dx

loc_58CA:                               ; CODE XREF: DOSCODE:58D2↓j
                lodsb
                cmp     al, 24h ; '$'
                jz      short noscan
                call    OUTT
                jmp     short loc_58CA

; =============== S U B R O U T I N E =======================================


$STD_CON_STRING_INPUT proc near         ; CODE XREF: DOS_READ+1FB↓p
                                        ; DATA XREF: DOSCODE:3FE6↑o

; FUNCTION CHUNK AT 4967 SIZE 00000019 BYTES
; FUNCTION CHUNK AT 596D SIZE 00000005 BYTES
; FUNCTION CHUNK AT 597B SIZE 00000018 BYTES
; FUNCTION CHUNK AT 5A04 SIZE 00000042 BYTES
; FUNCTION CHUNK AT 5A75 SIZE 00000020 BYTES

                push    ss
                pop     es
                assume es:DOSCODE
                mov     si, dx
                xor     ch, ch
                lodsw
                or      al, al
                jz      short noscan
                mov     bl, ah
                mov     bh, ch
                cmp     al, bl
                jbe     short loc_58EC
                cmp     byte ptr [bx+si], 0Dh
                jz      short loc_58EE

loc_58EC:                               ; CODE XREF: $STD_CON_STRING_INPUT+11↑j
                mov     bl, ch

loc_58EE:                               ; CODE XREF: $STD_CON_STRING_INPUT+16↑j
                mov     dl, al
                dec     dx

loc_58F1:                               ; CODE XREF: $STD_CON_STRING_INPUT+B7↓j
                mov     al, ss:CARPOS
                mov     ss:STARTPOS, al
                push    si
                mov     di, 1FBh
                mov     ss:INSMODE, ch
                mov     bh, ch
                mov     dh, ch
                call    $STD_CON_INPUT_NO_ECHO
                cmp     al, 0Ah
                jnz     short loc_5910

GETCH:                                  ; CODE XREF: $STD_CON_STRING_INPUT-F59↑j
                                        ; $STD_CON_STRING_INPUT+3E↓j ...
                call    $STD_CON_INPUT_NO_ECHO

loc_5910:                               ; CODE XREF: $STD_CON_STRING_INPUT+37↑j
                cmp     al, 6
                jz      short GETCH
                cmp     al, cs:ESCCHAR
                jz      short loc_5954
                cmp     al, 7Fh
                jz      short BACKSP
                cmp     al, 8
                jz      short BACKSP
                cmp     al, 0Dh
                jz      short loc_5957
                cmp     al, 0Ah
                jz      short loc_596D
                cmp     al, cs:CANCHAR
                jz      short KILNEW

loc_5932:                               ; CODE XREF: $STD_CON_STRING_INPUT+134↓j
                                        ; $STD_CON_STRING_INPUT+1BE↓j
                cmp     dh, dl
                jnb     short loc_594D
                stosb
                inc     dh
                call    sub_5C04
                cmp     ss:INSMODE, 0
                jnz     short GETCH
                cmp     bh, bl
                jnb     short GETCH
                inc     si
                inc     bh
                jmp     short GETCH
; ---------------------------------------------------------------------------

loc_594D:                               ; CODE XREF: $STD_CON_STRING_INPUT+60↑j
                mov     al, 7
                call    OUTT
                jmp     short GETCH
; ---------------------------------------------------------------------------

loc_5954:                               ; CODE XREF: $STD_CON_STRING_INPUT+45↑j
                jmp     OEMFunctionKey
; ---------------------------------------------------------------------------

loc_5957:                               ; CODE XREF: $STD_CON_STRING_INPUT+51↑j
                stosb
                call    OUTT
                pop     di
                mov     [di-1], dh
                inc     dh
$STD_CON_STRING_INPUT endp


; =============== S U B R O U T I N E =======================================


sub_5961        proc near               ; CODE XREF: $STD_CON_STRING_INPUT+1AA↓p
                push    ds
                push    es
                pop     ds
                assume ds:DOSCODE
                pop     es
                assume es:nothing
                mov     si, 1FBh
                mov     cl, dh
                rep movsb

locret_596C:                            ; CODE XREF: sub_5993+23↓j
                                        ; sub_5993+27↓j
                retn
sub_5961        endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR $STD_CON_STRING_INPUT

loc_596D:                               ; CODE XREF: $STD_CON_STRING_INPUT+55↑j
                call    sub_5A95

loc_5970:                               ; CODE XREF: $STD_CON_STRING_INPUT+BD↓j
                jmp     short GETCH
; END OF FUNCTION CHUNK FOR $STD_CON_STRING_INPUT
; ---------------------------------------------------------------------------
                db  0Ah
                db 0F6h
                db  74h ; t
                db  97h
                db 0E8h
                db  1Ah
                db    0
                db 0EBh
                db 0F7h
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR $STD_CON_STRING_INPUT

KILNEW:                                 ; CODE XREF: $STD_CON_STRING_INPUT-F59↑j
                                        ; $STD_CON_STRING_INPUT+5C↑j
                                        ; DATA XREF: ...
                mov     al, 5Ch ; '\'
                call    OUTT
                pop     si

loc_5981:                               ; CODE XREF: $STD_CON_STRING_INPUT+1B2↓j
                call    sub_5A95
                mov     al, ss:STARTPOS
                call    sub_5BE1
                jmp     loc_58F1
; ---------------------------------------------------------------------------

BACKSP:                                 ; CODE XREF: $STD_CON_STRING_INPUT-F59↑j
                                        ; $STD_CON_STRING_INPUT+49↑j ...
                call    sub_5993
                jmp     short loc_5970
; END OF FUNCTION CHUNK FOR $STD_CON_STRING_INPUT

; =============== S U B R O U T I N E =======================================


sub_5993        proc near               ; CODE XREF: $STD_CON_STRING_INPUT:BACKSP↑p
                or      dh, dh
                jz      short loc_59B0
                call    sub_59F2
                mov     al, es:[di]
                cmp     al, 20h ; ' '
                jnb     short loc_59B0
                cmp     al, 9
                jz      short loc_59C0
                cmp     al, 15h
                jz      short loc_59B0
                cmp     al, 14h
                jz      short loc_59B0
                call    sub_59F5

loc_59B0:                               ; CODE XREF: sub_5993+2↑j
                                        ; sub_5993+C↑j ...
                cmp     ss:INSMODE, 0
                jnz     short locret_596C
                or      bh, bh
                jz      short locret_596C
                dec     bh
                dec     si
                retn
; ---------------------------------------------------------------------------

loc_59C0:                               ; CODE XREF: sub_5993+10↑j
                push    di
                dec     di
                std
                mov     cl, dh
                mov     al, 20h ; ' '
                push    bx
                mov     bl, 7
                jcxz    short loc_59DA

loc_59CC:                               ; CODE XREF: sub_5993:loc_59D8↓j
                scasb
                jbe     short loc_59D8
                cmp     byte ptr es:[di+1], 9
                jz      short loc_59DF
                dec     bl

loc_59D8:                               ; CODE XREF: sub_5993+3A↑j
                loop    loc_59CC

loc_59DA:                               ; CODE XREF: sub_5993+37↑j
                sub     bl, ss:STARTPOS

loc_59DF:                               ; CODE XREF: sub_5993+41↑j
                sub     bl, dh
                add     cl, bl
                and     cl, 7
                cld
                pop     bx
                pop     di
                jz      short loc_59B0

loc_59EB:                               ; CODE XREF: sub_5993+5B↓j
                call    sub_59F5
                loop    loc_59EB
                jmp     short loc_59B0
sub_5993        endp


; =============== S U B R O U T I N E =======================================


sub_59F2        proc near               ; CODE XREF: sub_5993+4↑p
                dec     dh
                dec     di
sub_59F2        endp


; =============== S U B R O U T I N E =======================================


sub_59F5        proc near               ; CODE XREF: sub_5993+1A↑p
                                        ; sub_5993:loc_59EB↑p
                mov     al, 8
                call    OUTT
                mov     al, 20h ; ' '
                call    OUTT
                mov     al, 8
                jmp     OUTT
sub_59F5        endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR $STD_CON_STRING_INPUT

TWOESC:                                 ; CODE XREF: $STD_CON_STRING_INPUT-F59↑j
                                        ; DATA XREF: DOSCODE:494D↑o
                mov     al, cs:ESCCHAR
                jmp     loc_5932
; ---------------------------------------------------------------------------

COPYLIN:                                ; CODE XREF: $STD_CON_STRING_INPUT-F59↑j
                                        ; DATA XREF: DOSCODE:4959↑o
                mov     cl, bl
                sub     cl, bh
                jmp     short loc_5A18
; ---------------------------------------------------------------------------

COPYSTR:                                ; CODE XREF: $STD_CON_STRING_INPUT-F59↑j
                                        ; DATA XREF: DOSCODE:495D↑o
                call    sub_5A46
                jmp     short loc_5A18
; ---------------------------------------------------------------------------

COPYONE:                                ; CODE XREF: $STD_CON_STRING_INPUT-F59↑j
                                        ; DATA XREF: DOSCODE:4961↑o ...
                mov     cl, 1

loc_5A18:                               ; CODE XREF: $STD_CON_STRING_INPUT+13B↑j
                                        ; $STD_CON_STRING_INPUT+140↑j ...
                mov     ss:INSMODE, 0
                cmp     dh, dl
                jz      short loc_5A31
                cmp     bh, bl
                jz      short loc_5A31
                lodsb
                stosb
                call    sub_5C04
                inc     bh
                inc     dh
                loop    loc_5A18

loc_5A31:                               ; CODE XREF: $STD_CON_STRING_INPUT+14C↑j
                                        ; $STD_CON_STRING_INPUT+150↑j ...
                jmp     GETCH
; ---------------------------------------------------------------------------

SKIPONE:                                ; CODE XREF: $STD_CON_STRING_INPUT-F59↑j
                                        ; DATA XREF: DOSCODE:495F↑o
                cmp     bh, bl
                jz      short loc_5A31
                inc     bh
                inc     si
                jmp     short loc_5A31
; ---------------------------------------------------------------------------

SKIPSTR:                                ; CODE XREF: $STD_CON_STRING_INPUT-F59↑j
                                        ; DATA XREF: DOSCODE:495B↑o
                call    sub_5A46
                add     si, cx
                add     bh, cl
                jmp     short loc_5A31
; END OF FUNCTION CHUNK FOR $STD_CON_STRING_INPUT

; =============== S U B R O U T I N E =======================================


sub_5A46        proc near               ; CODE XREF: $STD_CON_STRING_INPUT:COPYSTR↑p
                                        ; $STD_CON_STRING_INPUT:SKIPSTR↑p
                call    $STD_CON_INPUT_NO_ECHO
                cmp     al, cs:ESCCHAR
                jnz     short loc_5A55
                call    $STD_CON_INPUT_NO_ECHO
                jmp     short loc_5A72
; ---------------------------------------------------------------------------

loc_5A55:                               ; CODE XREF: sub_5A46+8↑j
                mov     cl, bl
                sub     cl, bh
                jz      short loc_5A72
                dec     cx
                jz      short loc_5A72
                push    es
                push    ds
                pop     es
                assume es:DOSCODE
                push    di
                mov     di, si
                inc     di
                repne scasb
                pop     di
                pop     es
                assume es:nothing
                jnz     short loc_5A72
                not     cl
                add     cl, bl
                sub     cl, bh

locret_5A71:                            ; CODE XREF: DOSCODE:5AAF↓j
                retn
; ---------------------------------------------------------------------------

loc_5A72:                               ; CODE XREF: sub_5A46+D↑j
                                        ; sub_5A46+13↑j ...
                pop     bp

loc_5A73:                               ; CODE XREF: $STD_CON_STRING_INPUT+1BA↓j
                jmp     short loc_5A31
sub_5A46        endp ; sp-analysis failed

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR $STD_CON_STRING_INPUT

REEDIT:                                 ; CODE XREF: $STD_CON_STRING_INPUT-F59↑j
                                        ; DATA XREF: DOSCODE:4955↑o
                mov     al, 40h ; '@'
                call    OUTT
                pop     di
                push    di
                push    es
                push    ds
                call    sub_5961
                pop     ds
                assume ds:nothing
                pop     es
                pop     si
                mov     bl, dh
                jmp     loc_5981
; ---------------------------------------------------------------------------

EXITINS:                                ; CODE XREF: $STD_CON_STRING_INPUT-F59↑j
                                        ; DATA XREF: DOSCODE:494F↑o ...
                not     ss:INSMODE
                jmp     short loc_5A73
; ---------------------------------------------------------------------------

CTRLZ:                                  ; CODE XREF: $STD_CON_STRING_INPUT-F59↑j
                                        ; DATA XREF: DOSCODE:4965↑o
                mov     al, 1Ah
                jmp     loc_5932
; END OF FUNCTION CHUNK FOR $STD_CON_STRING_INPUT

; =============== S U B R O U T I N E =======================================


sub_5A95        proc near               ; CODE XREF: $STD_CON_STRING_INPUT:loc_596D↑p
                                        ; $STD_CON_STRING_INPUT:loc_5981↑p ...
                mov     al, 0Dh
                call    OUTT
                mov     al, 0Ah
                jmp     OUTT
sub_5A95        endp

; ---------------------------------------------------------------------------

$RAW_CON_IO:                            ; DATA XREF: DOSCODE:3FDE↑o
                mov     al, dl
                cmp     al, 0FFh
                jnz     short sub_5AE7
                les     di, dword ptr ss:USER_SP
                xor     bx, bx
                call    sub_7EE1
                jb      short locret_5A71
                mov     ah, 1
                call    IOFUNC
                jnz     short loc_5AC3
                call    sub_9FD4
                or      byte ptr es:[di+16h], 40h
                xor     al, al

locret_5AC2:                            ; CODE XREF: DOSCODE:5AD2↓j
                retn
; ---------------------------------------------------------------------------

loc_5AC3:                               ; CODE XREF: DOSCODE:5AB6↑j
                and     byte ptr es:[di+16h], 0BFh

loc_5AC8:                               ; CODE XREF: DOSCODE:5ADF↓j
                call    sub_9FD4

$RAW_CON_INPUT:                         ; DATA XREF: DOSCODE:3FE0↑o
                push    bx
                xor     bx, bx
                call    sub_7EE1
                pop     bx
                jb      short locret_5AC2
                mov     ah, 1
                call    IOFUNC
                jnz     short loc_5AE1
                mov     ah, 84h
                int     2Ah             ; Microsoft Networks - KEYBOARD BUSY LOOP
                jmp     short loc_5AC8
; ---------------------------------------------------------------------------

loc_5AE1:                               ; CODE XREF: DOSCODE:5AD9↑j
                xor     ah, ah
                call    IOFUNC
                retn

; =============== S U B R O U T I N E =======================================


sub_5AE7        proc near               ; CODE XREF: DOSCODE:5AA3↑j
                                        ; OUTT:loc_5B8E↓p
                push    bx
                mov     bx, 1
                call    sub_7EE1
                jb      short loc_5B14
                mov     bx, [si+5]
                and     bx, 8080h
                cmp     bx, 80h
                jnz     short loc_5B16
                push    ds
                lds     bx, [si+7]
                test    byte ptr [bx+4], 10h
                pop     ds
                jz      short loc_5B16
                push    ds
                xor     bx, bx
                mov     ds, bx
                assume ds:DOSCODE
                pushf
                call    MFTCloN
                pop     ds
                assume ds:nothing

loc_5B13:                               ; CODE XREF: sub_5AE7+32↓j
                clc

loc_5B14:                               ; CODE XREF: sub_5AE7+7↑j
                pop     bx

locret_5B15:                            ; CODE XREF: sub_5B1B+3↓j
                retn
; ---------------------------------------------------------------------------

loc_5B16:                               ; CODE XREF: sub_5AE7+14↑j
                                        ; sub_5AE7+1F↑j
                call    sub_5B20
                jmp     short loc_5B13
sub_5AE7        endp


; =============== S U B R O U T I N E =======================================


sub_5B1B        proc near               ; CODE XREF: OUTT:loc_5C51↓p
                call    sub_7EE1
                jb      short locret_5B15
sub_5B1B        endp


; =============== S U B R O U T I N E =======================================


sub_5B20        proc near               ; CODE XREF: sub_5AE7:loc_5B16↑p
                push    ax
                jmp     short loc_5B30
; ---------------------------------------------------------------------------

loc_5B23:                               ; CODE XREF: sub_5B20+15↓j
                call    sub_9FD4
                or      ss:DOS34_FLAG, 200h
                call    DSKSTATCHK

loc_5B30:                               ; CODE XREF: sub_5B20+1↑j
                mov     ah, 3
                call    IOFUNC
                jz      short loc_5B23
                inc     ax
                pop     ax
                jz      short loc_5B40
                mov     ah, 2
                call    IOFUNC

loc_5B40:                               ; CODE XREF: sub_5B20+19↑j
                clc
                retn
sub_5B20        endp


; =============== S U B R O U T I N E =======================================


Save_Restore_Packet proc near           ; CODE XREF: $STD_CON_INPUT_NO_ECHO+29↑p
                                        ; $STD_CON_INPUT_NO_ECHO+32↑p
                push    ds
                push    es
                push    si
                push    di
                mov     di, 0DA0h
                mov     si, 35Ah
                or      ax, ax
                jz      short loc_5B52
                xchg    si, di

loc_5B52:                               ; CODE XREF: Save_Restore_Packet+C↑j
                push    ss
                pop     ds
                assume ds:DOSCODE
                push    ss
                pop     es
                assume es:DOSCODE
                mov     cx, 0Bh
                rep movsw
                pop     di
                pop     si
                pop     es
                assume es:nothing
                pop     ds
                assume ds:nothing
                retn
Save_Restore_Packet endp

; ---------------------------------------------------------------------------

$STD_CON_INPUT:                         ; DATA XREF: DOSCODE:3FD4↑o
                call    $STD_CON_INPUT_NO_ECHO
                push    ax
                call    OUTT
                pop     ax

locret_5B68:                            ; CODE XREF: OUTT+27↓j
                retn
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR OUTT

loc_5B69:                               ; CODE XREF: OUTT+1A↓j
                push    ax
                call    near ptr STATCHK
                pop     ax
                jmp     short loc_5B8E
; END OF FUNCTION CHUNK FOR OUTT
; ---------------------------------------------------------------------------

$STD_CON_OUTPUT:                        ; DATA XREF: DOSCODE:3FD6↑o
                mov     al, dl

; =============== S U B R O U T I N E =======================================


OUTT            proc near               ; CODE XREF: DOSCODE:58CF↑p
                                        ; $STD_CON_STRING_INPUT+7B↑p ...

; FUNCTION CHUNK AT 5B69 SIZE 00000007 BYTES
; FUNCTION CHUNK AT 5BF1 SIZE 00000008 BYTES
; FUNCTION CHUNK AT 5BFC SIZE 00000008 BYTES
; FUNCTION CHUNK AT 5C51 SIZE 00000007 BYTES

                cmp     al, 20h ; ' '
                jb      short loc_5BCD
                cmp     al, 7Fh
                jz      short loc_5B7F
                inc     ss:CARPOS

loc_5B7F:                               ; CODE XREF: OUTT+6↑j
                                        ; OUTT+65↓j ...
                push    ds
                push    si
                inc     ss:CHARCO
                and     ss:CHARCO, 3Fh
                jz      short loc_5B69

loc_5B8E:                               ; CODE XREF: OUTT-4↑j
                call    sub_5AE7
                pop     si
                pop     ds
                test    ss:PFLAG, 0FFh
                jz      short locret_5B68
                push    bx
                push    ds
                push    si
                mov     bx, 1
                call    sub_7EE1
                jb      short loc_5BC7
                mov     bx, [si+5]
                test    bh, 80h
                jnz     short loc_5BC7
                test    bl, 80h
                jz      short loc_5BC7
                mov     bx, 4
                call    sub_7EE1
                jb      short loc_5BC7
                test    byte ptr [si+6], 8
                jz      short loc_5BCA
                mov     ss:PFLAG, 0

loc_5BC7:                               ; CODE XREF: OUTT+32↑j
                                        ; OUTT+3A↑j ...
                jmp     loc_5C54
; ---------------------------------------------------------------------------

loc_5BCA:                               ; CODE XREF: OUTT+4D↑j
                jmp     loc_5C51
; ---------------------------------------------------------------------------

loc_5BCD:                               ; CODE XREF: OUTT+2↑j
                cmp     al, 0Dh
                jz      short loc_5BF1
                cmp     al, 8
                jz      short loc_5BFC
                cmp     al, 9
                jnz     short loc_5B7F
                mov     al, ss:CARPOS
                or      al, 0F8h
                neg     al
OUTT            endp


; =============== S U B R O U T I N E =======================================


sub_5BE1        proc near               ; CODE XREF: $STD_CON_STRING_INPUT+B4↑p
                push    cx
                mov     cl, al
                mov     ch, 0
                jcxz    short loc_5BEF

loc_5BE8:                               ; CODE XREF: sub_5BE1+C↓j
                mov     al, 20h ; ' '
                call    OUTT
                loop    loc_5BE8

loc_5BEF:                               ; CODE XREF: sub_5BE1+5↑j
                pop     cx
                retn
sub_5BE1        endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR OUTT

loc_5BF1:                               ; CODE XREF: OUTT+5D↑j
                mov     ss:CARPOS, 0
                jmp     short loc_5B7F
; END OF FUNCTION CHUNK FOR OUTT
; [00000003 BYTES: COLLAPSED FUNCTION j_OUTT. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR OUTT

loc_5BFC:                               ; CODE XREF: OUTT+61↑j
                dec     ss:CARPOS
                jmp     loc_5B7F
; END OF FUNCTION CHUNK FOR OUTT

; =============== S U B R O U T I N E =======================================


sub_5C04        proc near               ; CODE XREF: $STD_CON_STRING_INPUT+65↑p
                                        ; $STD_CON_STRING_INPUT+154↑p ...
                cmp     al, 20h ; ' '
                jnb     short j_OUTT
                cmp     al, 9
                jz      short j_OUTT
                cmp     al, 15h
                jz      short loc_5C1D
                cmp     al, 14h
                jz      short loc_5C1D
                push    ax
                mov     al, 5Eh ; '^'
                call    OUTT
                pop     ax
                or      al, 40h

loc_5C1D:                               ; CODE XREF: sub_5C04+A↑j
                                        ; sub_5C04+E↑j
                call    OUTT

locret_5C20:                            ; CODE XREF: DOSCODE:5C2A↓j
                retn
sub_5C04        endp

; ---------------------------------------------------------------------------

$STD_AUX_INPUT:                         ; DATA XREF: DOSCODE:3FD8↑o
                call    near ptr STATCHK
                mov     bx, 3
                call    sub_7EE1
                jb      short locret_5C20
                jmp     short loc_5C31
; ---------------------------------------------------------------------------

loc_5C2E:                               ; CODE XREF: DOSCODE:5C36↓j
                call    sub_9FD4

loc_5C31:                               ; CODE XREF: DOSCODE:5C2C↑j
                mov     ah, 1
                call    IOFUNC
                jz      short loc_5C2E
                xor     ah, ah
                call    IOFUNC
                retn
; ---------------------------------------------------------------------------

$STD_AUX_OUTPUT:                        ; DATA XREF: DOSCODE:3FDA↑o
                push    bx
                mov     bx, 3
                jmp     short loc_5C48
; ---------------------------------------------------------------------------

$STD_PRINTER_OUTPUT:                    ; DATA XREF: DOSCODE:3FDC↑o
                push    bx
                mov     bx, 4

loc_5C48:                               ; CODE XREF: DOSCODE:5C42↑j
                mov     al, dl
                push    ax
                call    near ptr STATCHK
                pop     ax
                push    ds
                push    si
; START OF FUNCTION CHUNK FOR OUTT

loc_5C51:                               ; CODE XREF: OUTT:loc_5BCA↑j
                call    sub_5B1B

loc_5C54:                               ; CODE XREF: OUTT:loc_5BC7↑j
                pop     si
                pop     ds
                pop     bx

locret_5C57:                            ; CODE XREF: DOSCODE:5C5D↓j
                retn
; END OF FUNCTION CHUNK FOR OUTT
; ---------------------------------------------------------------------------

$STD_CON_INPUT_STATUS:                  ; DATA XREF: DOSCODE:3FE8↑o
                call    near ptr STATCHK
                mov     al, 0
                jz      short locret_5C57
                dec     ax
                retn
; ---------------------------------------------------------------------------

$STD_CON_INPUT_FLUSH:                   ; DATA XREF: DOSCODE:3FEA↑o
                push    ax
                push    dx
                xor     bx, bx
                call    sub_7EE1
                jb      short loc_5C6F
                mov     ah, 4
                call    IOFUNC

loc_5C6F:                               ; CODE XREF: DOSCODE:5C68↑j
                pop     dx
                pop     ax
                mov     ah, al
                cmp     al, 1
                jz      short loc_5C8A
                cmp     al, 6
                jz      short loc_5C8A
                cmp     al, 7
                jz      short loc_5C8A
                cmp     al, 8
                jz      short loc_5C8A
                cmp     al, 0Ah
                jz      short loc_5C8A
                mov     al, 0
                retn
; ---------------------------------------------------------------------------

loc_5C8A:                               ; CODE XREF: DOSCODE:5C75↑j
                                        ; DOSCODE:5C79↑j ...
                cli
                jmp     REDISP
; ---------------------------------------------------------------------------

$GET_FCB_POSITION:                      ; DATA XREF: DOSCODE:401A↑o
                call    sub_6199
                call    sub_616D
                mov     [si+21h], ax
                mov     [si+23h], dl
                cmp     word ptr [si+0Eh], 40h ; '@'
                jnb     short loc_5CA3
                mov     [si+24h], dh

loc_5CA3:                               ; CODE XREF: DOSCODE:5C9E↑j
                                        ; DOSCODE:5CB3↓j ...
                jmp     NO_OP
; ---------------------------------------------------------------------------

$FCB_DELETE:                            ; DATA XREF: DOSCODE:3FF8↑o
                mov     di, 3BEh
                call    sub_BDBB
                jb      short loc_5CB5
                push    ss
                pop     ds
                assume ds:DOSCODE
                call    DOS_DELETE
                jnb     short loc_5CA3

loc_5CB5:                               ; CODE XREF: DOSCODE:5CAC↑j
                                        ; DOSCODE:5CC5↓j ...
                jmp     FCB_RET_ERR
; ---------------------------------------------------------------------------

$GET_FCB_FILE_LENGTH:                   ; DATA XREF: DOSCODE:4018↑o
                call    sub_6199
                mov     di, 3BEh
                push    ds
                push    si
                call    sub_BDBB
                pop     si
                pop     ds
                assume ds:nothing
                jb      short loc_5CB5
                push    ds
                push    si
                push    ss
                pop     ds
                assume ds:DOSCODE
                call    sub_6F82
                pop     si
                pop     ds
                assume ds:nothing
                jb      short loc_5CB5
                mov     dx, bx
                mov     ax, di
                mov     bx, [si+0Eh]
                or      bx, bx
                jnz     short loc_5CDF
                mov     bl, 80h

loc_5CDF:                               ; CODE XREF: DOSCODE:5CDB↑j
                xchg    ax, dx
                xor     dx, dx
                div     bx
                push    ax
                mov     ax, di
                div     bx
                mov     cx, dx
                pop     dx
                jcxz    short loc_5CF4
                add     ax, 1
                adc     dx, 0

loc_5CF4:                               ; CODE XREF: DOSCODE:5CEC↑j
                mov     [si+21h], ax
                mov     [si+23h], dl
                or      dh, dh
                jz      short loc_5CA3
                mov     [si+24h], dh

loc_5D01:                               ; CODE XREF: DOSCODE:5D14↓j
                                        ; DOSCODE:loc_5D65↓j ...
                jmp     short loc_5CA3
; ---------------------------------------------------------------------------

$FCB_CLOSE:                             ; DATA XREF: DOSCODE:3FF2↑o
                xor     al, al
                call    sub_6199
                jz      short loc_5D0D
                mov     al, [si-1]

loc_5D0D:                               ; CODE XREF: DOSCODE:5D08↑j
                mov     ss:ATTRIB, al
                call    sub_60EC
                jb      short loc_5D01
                mov     al, es:[di+4]
                xor     ah, ah
                push    ax
                call    sub_C61D
                jnz     short loc_5D2A
                mov     al, ss:ATTRIB
                mov     es:[di+4], al

loc_5D2A:                               ; CODE XREF: DOSCODE:5D20↑j
                push    ds
                lds     ax, [si+14h]
                mov     es:[di+0Fh], ax
                mov     word ptr es:[di+0Dh], ds
                pop     ds
                lds     ax, [si+10h]
                mov     es:[di+11h], ax
                mov     word ptr es:[di+13h], ds
                or      word ptr es:[di+5], 4000h
                push    ss
                pop     ds
                assume ds:DOSCODE
                call    DOS_CLOSE
                les     di, THISSFT
                pop     cx
                mov     es:[di+4], cl
                pushf
                cmp     word ptr es:[di], 0
                jnz     short loc_5D64
                push    ax
                mov     al, 4Dh ; 'M'
                call    sub_6065
                pop     ax

loc_5D64:                               ; CODE XREF: DOSCODE:5D5B↑j
                popf

loc_5D65:                               ; CODE XREF: DOSCODE:5DAC↓j
                jnb     short loc_5D01
                cmp     al, 6
                jz      short loc_5D01
                mov     al, 2

loc_5D6D:                               ; CODE XREF: DOSCODE:5D8C↓j
                                        ; DOSCODE:5D9E↓j ...
                jmp     FCB_RET_ERR
; ---------------------------------------------------------------------------

$FCB_RENAME:                            ; DATA XREF: DOSCODE:4000↑o
                call    sub_6199
                push    dx
                mov     al, [si]
                add     si, 10h
                mov     di, 43Eh
                push    word ptr [si]
                push    ds
                push    si
                mov     [si], al
                mov     dx, si
                call    sub_BDBB
                pop     si
                pop     ds
                assume ds:nothing
                pop     word ptr [si]
                pop     dx
                jb      short loc_5D6D
                mov     si, ss:WFP_START
                mov     ss:REN_WFP, si
                mov     di, 3BEh
                call    sub_BDBB
                jb      short loc_5D6D
                mov     ss:word_1154, 43h ; 'C'
                call    DOS_RENAME
                jb      short loc_5D6D
                jmp     short loc_5D65

; =============== S U B R O U T I N E =======================================


sub_5DAE        proc near               ; CODE XREF: DOSCODE:62AC↓p
                                        ; DOSCODE:63F4↓p
                les     di, ss:THISSFT
                call    sub_576D
                jz      short loc_5DC3
                mov     ax, es:[di+0Bh]
                mov     [si+1Ch], ax
                mov     bl, 80h
                jmp     short loc_5E26
; ---------------------------------------------------------------------------

loc_5DC3:                               ; CODE XREF: sub_5DAE+8↑j
                call    sub_C61D
                jnz     short loc_5E21
                test    byte ptr es:[di+5], 80h
                jnz     short loc_5E11
                mov     ax, es:[di+1Bh]
                mov     [si+1Dh], ax
                mov     ax, es:[di+1Dh]
                mov     bl, es:[di+4]
                mov     bh, bl
                ror     bl, 1
                add     bh, bh
                or      bl, bh
                and     bl, 0C0h
                or      al, bl
                mov     [si+18h], al
                mov     al, es:[di+1Fh]
                mov     [si+1Fh], al
                mov     ax, es:[di+2Bh]
                mov     [si+1Bh], ax
                mov     bl, 0

loc_5DFE:                               ; CODE XREF: sub_5DAE+71↓j
                mov     ax, es:[di+5]
                and     al, 0C0h
                or      al, es:[di+2]
                mov     [si+1Ah], al
                or      bl, bl
                jz      short loc_5E37
                jmp     short loc_5E26
; ---------------------------------------------------------------------------

loc_5E11:                               ; CODE XREF: sub_5DAE+1F↑j
                push    es
                les     ax, es:[di+7]
                mov     [si+1Ah], ax
                mov     word ptr [si+1Ch], es
                pop     es
                mov     bl, 40h ; '@'
                jmp     short loc_5DFE
; ---------------------------------------------------------------------------

loc_5E21:                               ; CODE XREF: sub_5DAE+18↑j
                call    ss:ShSave

loc_5E26:                               ; CODE XREF: sub_5DAE+13↑j
                                        ; sub_5DAE+61↑j
                lea     ax, [di-6]
                sub     ax, word ptr ss:SFTFCB
                push    bx
                mov     bl, 3Bh ; ';'
                div     bl
                mov     [si+18h], al
                pop     bx

loc_5E37:                               ; CODE XREF: sub_5DAE+5F↑j
                mov     ax, es:[di+5]
                and     al, 3Fh
                or      al, bl
                mov     [si+19h], al
                mov     ax, ss:FCBLRU
                inc     ax
                mov     es:[di+15h], ax
                jnz     short loc_5E53
                mov     bx, 15h
                call    sub_5E58

loc_5E53:                               ; CODE XREF: sub_5DAE+9D↑j
                mov     ss:FCBLRU, ax
                retn
sub_5DAE        endp


; =============== S U B R O U T I N E =======================================


sub_5E58        proc near               ; CODE XREF: sub_5DAE+A2↑p
                mov     ax, 8000h
                push    es
                push    di
                les     di, ss:SFTFCB
                mov     cx, es:[di+4]
                lea     di, [di+6]

loc_5E69:                               ; CODE XREF: sub_5E58+1C↓j
                sub     es:[bx+di], ax
                ja      short loc_5E71
                mov     es:[bx+di], ax

loc_5E71:                               ; CODE XREF: sub_5E58+14↑j
                add     di, 3Bh ; ';'
                loop    loc_5E69
                pop     di
                pop     es
                mov     es:[bx+di], ax
                retn
sub_5E58        endp


; =============== S U B R O U T I N E =======================================


sub_5E7C        proc near               ; CODE XREF: sub_5F6A+2B↓p
                                        ; DOSCODE:6381↓p
                push    es
                call    save_world
                mov     ds, cs:DosDSeg
                or      al, al
                jnz     short loc_5E9F
                les     di, ds:0F76h
                mov     cx, es
                or      cx, di
                jz      short loc_5E9F

loc_5E93:                               ; CODE XREF: sub_5E7C+5A↓j
                                        ; sub_5E7C:loc_5F20↓j
                mov     ds:59Eh, di
                mov     word ptr ds:5A0h, es
                clc
                jmp     loc_5F49
; ---------------------------------------------------------------------------

loc_5E9F:                               ; CODE XREF: sub_5E7C+B↑j
                                        ; sub_5E7C+15↑j
                les     di, ds:40h
                mov     cx, es:[di+4]
                lea     di, [di+6]
                mov     bx, 0FFFFh
                mov     si, bx
                mov     dx, bx
                mov     bp, bx

loc_5EB3:                               ; CODE XREF: sub_5E7C+6B↓j
                or      word ptr es:[di], 0
                jz      short loc_5F06
                cmp     word ptr es:[di], 0FFFFh
                jz      short loc_5F06
                test    word ptr es:[di+5], 8000h
                jnz     short loc_5EF8
                call    sub_C61D
                jnz     short loc_5EF8

loc_5ECC:                               ; CODE XREF: sub_5E7C+8C↓j
                mov     ds:0F76h, di
                mov     word ptr ds:0F78h, es
                or      al, al
                jz      short loc_5E93
                cmp     es:[di+15h], bx
                jnb     short loc_5EE4
                mov     bx, es:[di+15h]
                mov     si, di

loc_5EE4:                               ; CODE XREF: sub_5E7C+60↑j
                                        ; sub_5E7C+80↓j ...
                add     di, 3Bh ; ';'
                loop    loc_5EB3
                dec     cx
                mov     di, si
                cmp     si, cx
                jnz     short loc_5F06
                mov     di, bp
                cmp     bp, cx
                jnz     short loc_5F23
                jmp     short loc_5F46
; ---------------------------------------------------------------------------

loc_5EF8:                               ; CODE XREF: sub_5E7C+49↑j
                                        ; sub_5E7C+4E↑j
                cmp     es:[di+15h], dx
                jnb     short loc_5EE4
                mov     dx, es:[di+15h]
                mov     bp, di
                jmp     short loc_5EE4
; ---------------------------------------------------------------------------

loc_5F06:                               ; CODE XREF: sub_5E7C+3B↑j
                                        ; sub_5E7C+41↑j ...
                or      al, al
                jz      short loc_5ECC
                mov     ax, es
                cmp     ds:0F76h, di
                jnz     short loc_5F20
                cmp     ds:0F78h, ax
                jnz     short loc_5F20
                xor     ax, ax
                mov     ds:0F76h, ax
                mov     ds:0F78h, ax

loc_5F20:                               ; CODE XREF: sub_5E7C+94↑j
                                        ; sub_5E7C+9A↑j
                jmp     loc_5E93
; ---------------------------------------------------------------------------

loc_5F23:                               ; CODE XREF: sub_5E7C+78↑j
                or      al, al
                jnz     short loc_5F2F
                mov     ds:0F76h, di
                mov     word ptr ds:0F78h, es

loc_5F2F:                               ; CODE XREF: sub_5E7C+A9↑j
                mov     ds:59Eh, di
                mov     word ptr ds:5A0h, es

loc_5F37:                               ; CODE XREF: sub_5E7C+C4↓j
                                        ; sub_5E7C+C8↓j
                cmp     word ptr es:[di], 0
                jz      short loc_5F49
                call    DOS_CLOSE
                jnb     short loc_5F37
                cmp     al, 6
                jz      short loc_5F37

loc_5F46:                               ; CODE XREF: sub_5E7C+7A↑j
                stc
                jmp     short loc_5F4E
; ---------------------------------------------------------------------------

loc_5F49:                               ; CODE XREF: sub_5E7C+20↑j
                                        ; sub_5E7C+BF↑j
                xor     al, al
                call    sub_6065

loc_5F4E:                               ; CODE XREF: sub_5E7C+CB↑j
                call    restore_world
                pop     es
                mov     es, cs:DosDSeg
                les     di, es:59Eh
                jb      short loc_5F5F
                retn
; ---------------------------------------------------------------------------

loc_5F5F:                               ; CODE XREF: sub_5E7C+E0↑j
                mov     al, 23h ; '#'
                retn
sub_5E7C        endp


; =============== S U B R O U T I N E =======================================


sub_5F62        proc near               ; CODE XREF: sub_5F62+5↓j
                                        ; sub_5F6A+67↓p ...
                lodsb
                call    UCase
                stosb
                loop    sub_5F62
                retn
sub_5F62        endp


; =============== S U B R O U T I N E =======================================


sub_5F6A        proc near               ; CODE XREF: sub_60EC+1A↓p

; FUNCTION CHUNK AT 5FFB SIZE 0000006A BYTES

                mov     al, [si+19h]
                test    al, 80h
                jz      short loc_5F8D
                call    sub_C61D
                jnz     short loc_5F7F
                mov     ax, 1100h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - INSTALLATION CHECK
                                        ; Return: AL = 00h  not installed, OK to install
                                        ; 01h  not installed, not OK to install
                                        ; FFh  installed
                or      al, al
                jz      short loc_5F8B

loc_5F7F:                               ; CODE XREF: sub_5F6A+A↑j
                                        ; sub_5F6A+26↓j
                mov     ax, ss:USER_IN_AX
                cmp     ah, 10h
                jz      short loc_5F8B
                call    sub_6122

loc_5F8B:                               ; CODE XREF: sub_5F6A+13↑j
                                        ; sub_5F6A+1C↑j ...
                stc

locret_5F8C:                            ; CODE XREF: sub_5F6A+2F↓j
                retn
; ---------------------------------------------------------------------------

loc_5F8D:                               ; CODE XREF: sub_5F6A+5↑j
                call    sub_C61D
                jnz     short loc_5F7F
                push    ax
                mov     al, 0
                call    sub_5E7C
                pop     ax
                jb      short locret_5F8C
                mov     word ptr es:[di+2], 8002h
                and     al, 3Fh
                cbw
                or      ax, 4000h
                mov     cl, [si+1Ah]
                mov     ch, cl
                and     ch, 0C0h
                or      al, ch
                and     cl, 0Fh
                mov     es:[di+2], cl
                mov     es:[di+5], ax
                mov     ax, ss:PROC_ID
                mov     es:[di+31h], ax
                push    ds
                push    si
                push    es
                push    di
                push    ss
                pop     es
                assume es:DOSCODE
                mov     di, 54Bh
                mov     cx, 8
                inc     si
                call    sub_5F62
                push    ss
                pop     ds
                assume ds:DOSCODE
                mov     ATTRIB, 16h
                call    DEVNAME
                pop     di
                pop     es
                assume es:nothing
                pop     si
                pop     ds
                assume ds:nothing
                jb      short loc_5FFD
                mov     es:[di+5], bh
                mov     byte ptr es:[di+4], 0
                lds     si, ss:DEVPT
sub_5F6A        endp


; =============== S U B R O U T I N E =======================================


sub_5FF2        proc near               ; CODE XREF: sub_5F6A+9F↓p
                mov     es:[di+7], si
                mov     word ptr es:[di+9], ds
                retn
sub_5FF2        endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR sub_5F6A

loc_5FFB:                               ; CODE XREF: sub_5F6A+A4↓j
                jmp     short loc_5F8B
; ---------------------------------------------------------------------------

loc_5FFD:                               ; CODE XREF: sub_5F6A+78↑j
                mov     ax, es:[di+5]
                and     ax, 3Fh
                push    ds
                push    si
                call    sub_BC7C
                call    sub_5FF2
                pop     si
                pop     ds
                jb      short loc_5FFB
                mov     ax, [si+1Dh]
                mov     es:[di+1Bh], ax
                mov     al, [si+18h]
                and     al, 0C0h
                mov     ah, al
                rol     ah, 1
                shr     al, 1
                or      al, ah
                and     al, 3Fh
                mov     es:[di+4], al
                mov     al, [si+18h]
                and     al, 3Fh
                sub     ah, ah
                mov     es:[di+1Dh], ax
                mov     ax, [si+1Bh]
                mov     es:[di+2Bh], ax
                mov     es:[di+35h], ax
                xor     ax, ax
                mov     es:[di+2Dh], ax
                mov     es:[di+37h], ax
                mov     al, [si+1Fh]
                mov     es:[di+1Fh], al
                inc     word ptr es:[di]
                call    sub_8A90
                lea     si, [si+1]
                lea     di, [di+20h]
                mov     cx, 0Bh
                call    sub_5F62
                clc
                retn
; END OF FUNCTION CHUNK FOR sub_5F6A

; =============== S U B R O U T I N E =======================================


sub_6065        proc near               ; CODE XREF: DOSCODE:5D60↑p
                                        ; sub_5E7C+CF↑p ...
                call    SFT_FREE
                push    di
                mov     cx, 3Bh ; ';'
                rep stosb
                pop     di
                sub     ax, ax
                mov     es:[di], ax
                mov     es:[di+15h], ax
                dec     ax
                mov     es:[di+17h], ax
                retn
sub_6065        endp


; =============== S U B R O U T I N E =======================================


sub_607E        proc near               ; CODE XREF: sub_60EC+5↓p
                                        ; DOSCODE:6438↓p
                test    byte ptr [si+19h], 0C0h
                jz      short loc_60CC
                les     di, ss:SFTFCB
                cmp     es:[di+4], al
                jb      short loc_60CC
                mov     bl, 3Bh ; ';'
                mul     bl
                lea     di, [di+6]
                add     di, ax
                mov     ax, ss:PROC_ID
                cmp     es:[di+31h], ax
                jnz     short loc_60CC
                cmp     word ptr es:[di], 0
                jz      short loc_60CC
                mov     al, [si+19h]
                test    al, 80h
                jz      short loc_60D8
                push    ax
                and     al, 0C0h
                cmp     al, 0C0h
                pop     ax
                jnz     short loc_60CE
                call    ss:ShChk
                jb      short loc_60CC

loc_60BE:                               ; CODE XREF: sub_607E+6C↓j
                and     al, 3Fh
                mov     ah, es:[di+5]
                and     ah, 3Fh
                cmp     ah, al
                jnz     short loc_60CC

locret_60CB:                            ; CODE XREF: sub_60EC+25↓j
                retn
; ---------------------------------------------------------------------------

loc_60CC:                               ; CODE XREF: sub_607E+4↑j
                                        ; sub_607E+F↑j ...
                stc
                retn
; ---------------------------------------------------------------------------

loc_60CE:                               ; CODE XREF: sub_607E+37↑j
                mov     ax, [si+1Ch]
                cmp     ax, es:[di+0Bh]
                jnz     short loc_60CC
                retn
; ---------------------------------------------------------------------------

loc_60D8:                               ; CODE XREF: sub_607E+2F↑j
                mov     bx, [si+1Ah]
                cmp     bx, es:[di+7]
                jnz     short loc_60CC
                mov     bx, [si+1Ch]
                cmp     bx, es:[di+9]
                jnz     short loc_60CC
                jmp     short loc_60BE
sub_607E        endp


; =============== S U B R O U T I N E =======================================


sub_60EC        proc near               ; CODE XREF: DOSCODE:5D11↑p
                                        ; DOSCODE:loc_6251↓p
                push    ax
                push    bx
                mov     al, [si+18h]
                call    sub_607E
                pop     bx
                pop     ax
                mov     word ptr ss:THISSFT, di
                mov     word ptr ss:THISSFT+2, es
                jnb     short loc_6113
                push    es
                call    save_world
                call    sub_5F6A
                call    restore_world
                pop     es
                mov     ax, ss:EXTERR
                jb      short locret_60CB

loc_6113:                               ; CODE XREF: sub_60EC+14↑j
                les     di, ss:THISSFT
                push    ss:PROC_ID
                pop     word ptr es:[di+31h]
                retn
sub_60EC        endp


; =============== S U B R O U T I N E =======================================


sub_6122        proc near               ; CODE XREF: sub_5F6A+1E↑p
                                        ; DOSCODE:63B2↓p
                mov     es, cs:DosDSeg
                mov     ax, 23h ; '#'
                mov     byte ptr es:34Bh, 8
                les     bp, es:58Ah
                mov     di, 1
                mov     cx, di
                xor     dx, dx
                cmp     es:[bp+0Fh], dx
                jz      short loc_614D
                mov     es:607h, dx
                mov     dx, es:[bp+0Bh]
                jmp     short loc_615A
; ---------------------------------------------------------------------------

loc_614D:                               ; CODE XREF: sub_6122+1E↑j
                mov     dx, es:[bp+2Bh]
                mov     es:607h, dx
                mov     dx, es:[bp+29h]

loc_615A:                               ; CODE XREF: sub_6122+29↑j
                call    HARDERR
                stc
                retn
sub_6122        endp


; =============== S U B R O U T I N E =======================================


sub_615F        proc near               ; CODE XREF: DOSCODE:61F4↓p
                mov     ax, [si+21h]
                mov     dx, [si+23h]
                cmp     bx, 40h ; '@'
                jb      short nullsub_18
sub_615F        endp

; START OF FUNCTION CHUNK FOR sub_616D

loc_616A:                               ; CODE XREF: sub_616D+10↓j
                xor     dh, dh
; END OF FUNCTION CHUNK FOR sub_616D
; [00000001 BYTES: COLLAPSED FUNCTION nullsub_18. PRESS CTRL-NUMPAD+ TO EXPAND]

; =============== S U B R O U T I N E =======================================


sub_616D        proc near               ; CODE XREF: DOSCODE:5C91↑p
                                        ; DOSCODE:61E5↓p

; FUNCTION CHUNK AT 616A SIZE 00000002 BYTES

                mov     al, [si+20h]
                mov     dx, [si+0Ch]
                shl     al, 1
                shr     dx, 1
                rcr     al, 1
                mov     ah, dl
                mov     dl, dh
                jmp     short loc_616A
sub_616D        endp


; =============== S U B R O U T I N E =======================================


sub_617F        proc near               ; CODE XREF: DOSCODE:61FD↓p
                                        ; DOSCODE:loc_6323↓p
                push    ax
                push    dx
                mov     cx, ax
                and     al, 7Fh
                mov     [si+20h], al
                and     cl, 80h
                shl     cx, 1
                rcl     dx, 1
                mov     al, ch
                mov     ah, dl
                mov     [si+0Ch], ax
                pop     dx
                pop     ax
                retn
sub_617F        endp


; =============== S U B R O U T I N E =======================================


sub_6199        proc near               ; CODE XREF: DOSCODE:$GET_FCB_POSITION↑p
                                        ; DOSCODE:$GET_FCB_FILE_LENGTH↑p ...
                mov     si, dx
                cmp     byte ptr [si], 0FFh
                jnz     short loc_61A3
                add     si, 7

loc_61A3:                               ; CODE XREF: sub_6199+5↑j
                cmp     si, dx

locret_61A5:                            ; CODE XREF: sub_61A6+5↓j
                retn
sub_6199        endp


; =============== S U B R O U T I N E =======================================


sub_61A6        proc near               ; CODE XREF: DOSCODE:61E8↓p
                mov     bx, [si+0Eh]
                or      bx, bx
                jnz     short locret_61A5
                mov     bl, 80h
                mov     [si+0Eh], bx
                retn
sub_61A6        endp

; ---------------------------------------------------------------------------

$FCB_RANDOM_WRITE_BLOCK:                ; DATA XREF: DOSCODE:4022↑o
                mov     al, 0Ah
                jmp     short loc_61C9
; ---------------------------------------------------------------------------

$FCB_RANDOM_READ_BLOCK:                 ; DATA XREF: DOSCODE:4020↑o
                mov     al, 0Eh
                jmp     short loc_61C9
; ---------------------------------------------------------------------------

$FCB_SEQ_READ:                          ; DATA XREF: DOSCODE:3FFA↑o
                mov     al, 4
                jmp     short loc_61C9
; ---------------------------------------------------------------------------

$FCB_SEQ_WRITE:                         ; DATA XREF: DOSCODE:3FFC↑o
                mov     al, 0
                jmp     short loc_61C9
; ---------------------------------------------------------------------------

$FCB_RANDOM_READ:                       ; DATA XREF: DOSCODE:4014↑o
                mov     al, 6
                jmp     short loc_61C9
; ---------------------------------------------------------------------------

$FCB_RANDOM_WRITE:                      ; DATA XREF: DOSCODE:4016↑o
                mov     al, 2

loc_61C9:                               ; CODE XREF: DOSCODE:61B5↑j
                                        ; DOSCODE:61B9↑j ...
                push    bp
                mov     bp, sp
                sub     sp, 14h
                mov     [bp-14h], al
                mov     byte ptr [bp-1], 0
                call    sub_6199
                test    byte ptr [bp-14h], 8
                jnz     short loc_61E2
                mov     cx, 1

loc_61E2:                               ; CODE XREF: DOSCODE:61DD↑j
                mov     [bp-3], cx
                call    sub_616D
                call    sub_61A6
                mov     [bp-9], bx
                test    byte ptr [bp-14h], 2
                jz      short loc_61F7
                call    sub_615F

loc_61F7:                               ; CODE XREF: DOSCODE:61F2↑j
                mov     [bp-7], ax
                mov     [bp-5], dx
                call    sub_617F
                mov     ax, [bp-5]
                mul     bx
                mov     di, ax
                mov     ax, [bp-7]
                mul     bx
                add     dx, di
                mov     [bp-0Dh], ax
                mov     [bp-0Bh], dx
                mov     ax, [bp-3]
                mul     bx
                mov     [bp-0Fh], ax
                add     ax, word ptr ss:DMAADD
                adc     dx, 0
                jz      short loc_623F
                mov     byte ptr [bp-1], 2
                mov     ax, word ptr ss:DMAADD
                neg     ax
                jnz     short loc_6233
                dec     ax

loc_6233:                               ; CODE XREF: DOSCODE:6230↑j
                xor     dx, dx
                div     bx
                mov     [bp-3], ax
                mul     bx
                mov     [bp-0Fh], ax

loc_623F:                               ; CODE XREF: DOSCODE:6224↑j
                xor     bx, bx
                mov     [bp-11h], bx
                cmp     [bp-0Fh], bx
                jnz     short loc_6251
                test    byte ptr [bp-1], 2
                jz      short loc_6251
                jmp     short loc_62BF
; ---------------------------------------------------------------------------

loc_6251:                               ; CODE XREF: DOSCODE:6247↑j
                                        ; DOSCODE:624D↑j
                call    sub_60EC
                jnb     short loc_6265

loc_6256:                               ; CODE XREF: DOSCODE:6299↓j
                call    FCB_RET_ERR
                mov     word ptr [bp-13h], 0
                mov     byte ptr [bp-1], 1
                jmp     loc_634C
; ---------------------------------------------------------------------------

loc_6265:                               ; CODE XREF: DOSCODE:6254↑j
                push    ds
                lds     ax, [si+10h]
                mov     es:[di+11h], ax
                mov     word ptr es:[di+13h], ds
                lds     ax, [bp-0Dh]
                mov     dx, ds
                pop     ds
                mov     es:[di+15h], ax
                xchg    dx, es:[di+17h]
                push    dx
                mov     cx, [bp-0Fh]
                mov     di, 7B76h
                test    byte ptr [bp-14h], 4
                jnz     short loc_628F
                mov     di, 7D8Fh

loc_628F:                               ; CODE XREF: DOSCODE:628A↑j
                push    bp
                push    ds
                push    si
                push    ss
                pop     ds
                assume ds:DOSCODE
                call    di ; DOS_READ
                pop     si
                pop     ds
                assume ds:nothing
                pop     bp
                jb      short loc_6256
                cmp     ss:DISK_FULL, 0
                jz      short loc_62A9
                mov     ss:DISK_FULL, 0

loc_62A9:                               ; CODE XREF: DOSCODE:62A1↑j
                mov     [bp-11h], cx
                call    sub_5DAE
                pop     word ptr es:[di+17h]
                push    es
                les     ax, es:[di+11h]
                mov     [si+10h], ax
                mov     word ptr [si+12h], es
                pop     es

loc_62BF:                               ; CODE XREF: DOSCODE:624F↑j
                mov     ax, [bp-11h]
                xor     dx, dx
                div     word ptr [bp-9]
                mov     [bp-13h], ax
                add     [bp-7], ax
                adc     word ptr [bp-5], 0
                cmp     ax, [bp-3]
                jz      short loc_62E7
                test    byte ptr [bp-14h], 4
                jnz     short loc_62E3
                test    byte ptr es:[di+5], 80h
                jnz     short loc_62E7

loc_62E3:                               ; CODE XREF: DOSCODE:62DA↑j
                mov     byte ptr [bp-1], 1

loc_62E7:                               ; CODE XREF: DOSCODE:62D4↑j
                                        ; DOSCODE:62E1↑j
                or      dx, dx
                jz      short loc_6311
                add     word ptr [bp-7], 1
                adc     word ptr [bp-5], 0
                test    byte ptr [bp-14h], 4
                jz      short loc_6311
                inc     word ptr [bp-13h]
                mov     byte ptr [bp-1], 3
                mov     cx, [bp-9]
                sub     cx, dx
                xor     al, al
                les     di, ss:DMAADD
                add     di, [bp-11h]
                rep stosb

loc_6311:                               ; CODE XREF: DOSCODE:62E9↑j
                                        ; DOSCODE:62F7↑j
                mov     dx, [bp-5]
                mov     ax, [bp-7]
                test    byte ptr [bp-14h], 2
                jz      short loc_6323
                test    byte ptr [bp-14h], 8
                jz      short loc_6326

loc_6323:                               ; CODE XREF: DOSCODE:631B↑j
                call    sub_617F

loc_6326:                               ; CODE XREF: DOSCODE:6321↑j
                test    byte ptr [bp-14h], 8
                jz      short loc_633B
                mov     [si+21h], ax
                mov     [si+23h], dl
                cmp     word ptr [si+0Eh], 40h ; '@'
                jnb     short loc_633B
                mov     [si+24h], dh

loc_633B:                               ; CODE XREF: DOSCODE:632A↑j
                                        ; DOSCODE:6336↑j
                test    byte ptr [bp-14h], 4
                jnz     short loc_634C
                push    ds
                call    DATE16
                pop     ds
                mov     [si+14h], ax
                mov     [si+16h], dx

loc_634C:                               ; CODE XREF: DOSCODE:6262↑j
                                        ; DOSCODE:633F↑j
                test    byte ptr [bp-14h], 8
                jz      short loc_635B
                mov     cx, [bp-13h]
                call    Get_User_Stack
                mov     [si+4], cx

loc_635B:                               ; CODE XREF: DOSCODE:6350↑j
                mov     al, [bp-1]
                mov     sp, bp
                pop     bp
                retn
; ---------------------------------------------------------------------------

$FCB_OPEN:                              ; DATA XREF: DOSCODE:3FF0↑o
                mov     ax, 2
                mov     cx, 71BBh

loc_6368:                               ; CODE XREF: DOSCODE:loc_6478↓j
                push    ds
                push    dx
                push    cx
                push    ax
                mov     di, 3BEh
                call    sub_BDBB
                pop     ax
                pop     cx
                pop     dx
                pop     ds
                jnb     short loc_637B

loc_6378:                               ; CODE XREF: DOSCODE:loc_63B6↓j
                jmp     FCB_RET_ERR
; ---------------------------------------------------------------------------

loc_637B:                               ; CODE XREF: DOSCODE:6376↑j
                call    sub_6199
                push    ax
                mov     al, 1
                call    sub_5E7C
                pop     ax
                jb      short loc_63B1
                mov     word ptr es:[di+2], 8000h
                push    ds
                push    si
                push    bx
                mov     si, cx
                push    ss
                pop     ds
                assume ds:DOSCODE
                call    si
                pop     bx
                pop     si
                pop     ds
                assume ds:nothing
                les     di, ss:THISSFT
                jnb     short loc_63B8

loc_63A0:                               ; CODE XREF: DOSCODE:63EC↓j
                push    ax
                mov     al, 52h ; 'R'
                call    sub_6065
                pop     ax
                cmp     ax, 4
                jz      short loc_63B1
                cmp     ax, 24h ; '$'
                jnz     short loc_63B6

loc_63B1:                               ; CODE XREF: DOSCODE:6385↑j
                                        ; DOSCODE:63AA↑j
                push    ax
                call    sub_6122
                pop     ax

loc_63B6:                               ; CODE XREF: DOSCODE:63AF↑j
                jmp     short loc_6378
; ---------------------------------------------------------------------------

loc_63B8:                               ; CODE XREF: DOSCODE:639E↑j
                call    sub_576D
                jnz     short loc_63EE
                call    sub_C61D
                jnz     short loc_63CC
                mov     word ptr ss:LocalSFT, di
                mov     word ptr ss:LocalSFT+2, es

loc_63CC:                               ; CODE XREF: DOSCODE:63C0↑j
                test    byte ptr es:[di+5], 80h
                jnz     short loc_63EE
                test    byte ptr es:[di+4], 8
                jnz     short loc_63EE
                push    es
                push    di
                les     di, es:[di+7]
                cmp     word ptr es:[di+0Fh], 0
                pop     di
                pop     es
                jnz     short loc_63EE
                mov     ax, 0Fh
                jmp     short loc_63A0
; ---------------------------------------------------------------------------

loc_63EE:                               ; CODE XREF: DOSCODE:63BB↑j
                                        ; DOSCODE:63D1↑j ...
                inc     word ptr es:[di]
                call    sub_8A90
                call    sub_5DAE
                test    byte ptr es:[di+5], 80h
                jnz     short loc_6407
                mov     al, [si]
                call    GETTHISDRV
                inc     al
                mov     [si], al

loc_6407:                               ; CODE XREF: DOSCODE:63FC↑j
                mov     word ptr [si+0Eh], 80h
                push    es
                les     ax, es:[di+0Dh]
                mov     [si+16h], ax
                mov     word ptr [si+14h], es
                pop     es
                push    es
                les     ax, es:[di+11h]
                mov     [si+10h], ax
                mov     word ptr [si+12h], es
                pop     es
                xor     ax, ax
                mov     [si+0Ch], ax
                les     di, ss:SFTFCB
                mov     ah, es:[di+4]

loc_6432:                               ; CODE XREF: DOSCODE:6442↓j
                cmp     al, [si+18h]
                jz      short loc_643E
                push    ax
                call    sub_607E
                pop     ax
                jnb     short loc_6447

loc_643E:                               ; CODE XREF: DOSCODE:6435↑j
                inc     al
                cmp     al, ah
                jnz     short loc_6432

loc_6444:                               ; CODE XREF: DOSCODE:6469↓j
                xor     al, al
                retn
; ---------------------------------------------------------------------------

loc_6447:                               ; CODE XREF: DOSCODE:643C↑j
                mov     [si+18h], al
                inc     word ptr es:[di]
                call    sub_8A90
                mov     ax, ss:FCBLRU
                mov     es:[di+15h], ax
                push    ss
                pop     ds
                assume ds:DOSCODE
                les     di, THISSFT
                dec     word ptr es:[di]
                call    ShareEnd
                mov     al, 43h ; 'C'
                call    sub_6065
                jmp     short loc_6444
; ---------------------------------------------------------------------------

$FCB_CREATE:                            ; DATA XREF: DOSCODE:3FFE↑o
                mov     cx, 708Ah
                xor     ax, ax
                call    sub_6199
                jz      short loc_6478
                mov     al, [si-1]

loc_6478:                               ; CODE XREF: DOSCODE:6473↑j
                jmp     loc_6368
; ---------------------------------------------------------------------------

$DIR_SEARCH_FIRST:                      ; DATA XREF: DOSCODE:3FF4↑o
                mov     word ptr ss:THISFC, dx
                mov     word ptr ss:THISFC+2, ds
                mov     si, dx
                cmp     byte ptr [si], 0FFh
                jnz     short loc_648F
                add     si, 7

loc_648F:                               ; CODE XREF: DOSCODE:648A↑j
                push    word ptr [si]
                mov     di, ss
                mov     es, di
                assume es:DOSCODE
                mov     di, 3BEh
                call    sub_BDBB
                jnb     short loc_64A1
                pop     bx

loc_649E:                               ; CODE XREF: DOSCODE:64C9↓j
                jmp     FCB_RET_ERR
; ---------------------------------------------------------------------------

loc_64A1:                               ; CODE XREF: DOSCODE:649B↑j
                mov     di, ss
                mov     ds, di
                les     di, DMAADD
                assume es:nothing
                push    di
                push    es
                mov     word ptr DMAADD, offset SEARCHBUF
                mov     word ptr DMAADD+2, ds
                or      DOS34_FLAG, 400h
                call    DOS_SEARCH_FIRST
                pop     word ptr DMAADD+2
                pop     word ptr DMAADD
                jnb     short loc_64CB
                pop     bx
                jmp     short loc_649E
; ---------------------------------------------------------------------------

loc_64CB:                               ; CODE XREF: DOSCODE:64C6↑j
                                        ; DOSCODE:6577↓j
                mov     si, 4BEh
                les     di, THISFC
                test    EXTFCB, 0FFh
                jz      short loc_64DC
                add     di, 7

loc_64DC:                               ; CODE XREF: DOSCODE:64D7↑j
                pop     bx
                or      bl, bl
                jnz     short loc_64E7
                mov     bl, CURDRV
                inc     bl

loc_64E7:                               ; CODE XREF: DOSCODE:64DF↑j
                lodsb
                xchg    al, bl
                inc     di
                mov     cx, 0Ah
                rep movsw
                xchg    al, bl
                stosb
                les     di, DMAADD
                test    EXTFCB, 0FFh
                jz      short loc_650C
                mov     al, 0FFh
                stosb
                inc     al
                mov     ah, al
                stosb
                stosw
                stosw
                mov     al, SATTRIB
                stosb

loc_650C:                               ; CODE XREF: DOSCODE:64FC↑j
                mov     al, bl
                stosb
                mov     cx, 10h
                rep movsw
                jmp     NO_OP
; ---------------------------------------------------------------------------

$DIR_SEARCH_NEXT:                       ; DATA XREF: DOSCODE:3FF6↑o
                mov     word ptr ss:THISFC, dx
                mov     word ptr ss:THISFC+2, ds
                mov     al, 0
                mov     ss:SATTRIB, al
                mov     ss:EXTFCB, al
                mov     di, ss
                mov     es, di
                assume es:DOSCODE
                mov     di, 4BEh
                mov     si, dx
                cmp     byte ptr [si], 0FFh
                jnz     short loc_6546
                add     si, 6
                lodsb
                mov     ss:SATTRIB, al
                dec     ss:EXTFCB

loc_6546:                               ; CODE XREF: DOSCODE:6537↑j
                lodsb
                push    ax
                mov     al, [si+14h]
                stosb
                mov     cx, 0Ah
                rep movsw
                mov     di, ss
                mov     ds, di
                les     di, DMAADD
                assume es:nothing
                push    di
                push    es
                mov     di, 4BEh
                mov     word ptr DMAADD, di
                mov     word ptr DMAADD+2, ds
                mov     ax, ds
                mov     es, ax
                assume es:DOSCODE
                call    DOS_SEARCH_NEXT
                pop     word ptr DMAADD+2
                pop     word ptr DMAADD
                jb      short loc_657A
                jmp     loc_64CB
; ---------------------------------------------------------------------------

loc_657A:                               ; CODE XREF: DOSCODE:6575↑j
                les     di, THISFC
                assume es:nothing
                test    EXTFCB, 0FFh
                jz      short loc_6588
                add     di, 7

loc_6588:                               ; CODE XREF: DOSCODE:6583↑j
                pop     bx
                mov     es:[di], bl
                jmp     FCB_RET_ERR
; ---------------------------------------------------------------------------

loc_658F:                               ; CODE XREF: DOSCODE:65A1↓j
                mov     al, 3

loc_6591:                               ; CODE XREF: DOSCODE:65C8↓j
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------

$FIND_FIRST:                            ; DATA XREF: DOSCODE:406E↑o
                mov     si, dx
                mov     ss:SATTRIB, cl
                mov     di, offset OPENBUF
                call    TransPathSet
                jb      short loc_658F
                mov     di, ss
                mov     ds, di
                les     di, DMAADD
                push    di
                push    es
                mov     word ptr DMAADD, offset SEARCHBUF
                mov     word ptr DMAADD+2, ds
                or      DOS34_FLAG, 400h
                call    DOS_SEARCH_FIRST
                pop     word ptr DMAADD+2
                pop     word ptr DMAADD
                jb      short loc_6591

FindSet:                                ; CODE XREF: DOSCODE:6622↓j
                mov     si, 4BEh
                les     di, DMAADD
                mov     cx, 0Ah
                rep movsw
                movsb
                push    si
                mov     al, [si+0Bh]
                stosb
                add     si, 16h
                movsw
                movsw
                inc     si
                inc     si
                movsw
                movsw
                pop     si
                call    PackName
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

$FIND_NEXT:                             ; DATA XREF: DOSCODE:4070↑o
                mov     di, ss
                mov     es, di
                assume es:DOSCODE
                mov     di, offset SEARCHBUF
                lds     si, ss:DMAADD
                assume ds:nothing
                mov     cx, 10
                rep movsw
                movsb
                mov     di, ss
                mov     ds, di
                assume ds:DOSCODE
                les     di, DMAADD
                assume es:nothing
                push    di
                push    es
                mov     di, offset SEARCHBUF
                mov     word ptr DMAADD, di
                mov     word ptr DMAADD+2, ds
                mov     ax, ds
                mov     es, ax
                assume es:DOSCODE
                call    DOS_SEARCH_NEXT
                pop     word ptr DMAADD+2
                pop     word ptr DMAADD
                jnb     short FindSet
                jmp     SYS_RET_ERR

; =============== S U B R O U T I N E =======================================


PackName        proc near               ; CODE XREF: DOSCODE:65E6↑p
                                        ; REN_DEL_Check+26↓p ...
                mov     cx, 4
                rep movsw

loc_662C:                               ; CODE XREF: PackName+11↓j
                cmp     byte ptr es:[di-1], 20h ; ' '
                jnz     short loc_663A
                dec     di
                inc     cx
                cmp     cx, 8
                jb      short loc_662C

loc_663A:                               ; CODE XREF: PackName+A↑j
                cmp     word ptr [si], 2020h
                jnz     short loc_6646
                cmp     byte ptr [si+2], 20h ; ' '
                jz      short loc_6655

loc_6646:                               ; CODE XREF: PackName+17↑j
                mov     al, 2Eh ; '.'
                stosb
                movsw
                movsb

loc_664B:                               ; CODE XREF: PackName+2C↓j
                cmp     byte ptr es:[di-1], 20h ; ' '
                jnz     short loc_6655
                dec     di
                jmp     short loc_664B
; ---------------------------------------------------------------------------

loc_6655:                               ; CODE XREF: PackName+1D↑j
                                        ; PackName+29↑j
                xor     ax, ax
                stosb
                retn
PackName        endp

; ---------------------------------------------------------------------------
                or      ss:DOS34_FLAG, 400h
                call    DOS_SEARCH_FIRST
                retn
; ---------------------------------------------------------------------------

$CURRENT_DIR:                           ; DATA XREF: DOSCODE:4060↑o
                call    ECritDisk
                mov     al, dl
                call    GetVisDrv
                jnb     short CurrentValidate

CurdirErr:                              ; CODE XREF: DOSCODE:6696↓j
                call    LCritDisk
                push    ds
                mov     ds, cs:DosDSeg
                assume ds:nothing
                mov     al, ds:DrvErr
                pop     ds

curdir_errj:                            ; CODE XREF: DOSCODE:loc_66DA↓j
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------

CurrentValidate:                        ; CODE XREF: DOSCODE:666C↑j
                push    ds
                push    si
                mov     ds, cs:DosDSeg
                mov     ds:NoSetDir, 0
                mov     di, offset OPENBUF
                call    ValidateCDS
                push    es
                push    di
                pop     si
                pop     ds
                pop     di
                pop     es
                assume es:nothing
                jb      short CurdirErr
                add     si, [si+4Fh]
                cmp     byte ptr [si], 5Ch ; '\'
                jnz     short loc_66A1
                inc     si

loc_66A1:                               ; CODE XREF: DOSCODE:669E↑j
                push    ax
                lodsb
                or      al, al
                jz      short loc_66BA
                cmp     al, 5
                jz      short loc_66B8
                jmp     short loc_66AE
; ---------------------------------------------------------------------------

loc_66AD:                               ; CODE XREF: DOSCODE:66BD↓j
                lodsb

loc_66AE:                               ; CODE XREF: DOSCODE:66AB↑j
                cmp     al, 5Ch ; '\'
                jnz     short loc_66BA
                stosb
                lodsb
                cmp     al, 5
                jnz     short loc_66BA

loc_66B8:                               ; CODE XREF: DOSCODE:66A9↑j
                mov     al, 0E5h

loc_66BA:                               ; CODE XREF: DOSCODE:66A5↑j
                                        ; DOSCODE:66B0↑j ...
                stosb
                or      al, al
                jnz     short loc_66AD
                pop     ax
                xor     al, al
                call    LCritDisk
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

$RMDIR:                                 ; DATA XREF: DOSCODE:4046↑o
                push    dx
                push    ds
                mov     si, dx
                mov     di, 3BEh
                push    di
                call    TransPathNoSet
                pop     di
                jnb     short loc_66DC
                pop     ds
                pop     dx
                mov     al, 3

loc_66DA:                               ; CODE XREF: DOSCODE:loc_6701↓j
                jmp     short curdir_errj
; ---------------------------------------------------------------------------

loc_66DC:                               ; CODE XREF: DOSCODE:66D4↑j
                cmp     ss:CMETA, 0FFh
                jnz     short loc_66FD
                push    ss
                pop     es
                assume es:DOSCODE
                xor     al, al

loc_66E8:                               ; CODE XREF: DOSCODE:66FB↓j
                call    GetCDSFromDrv
                jb      short loc_6703
                test    word ptr [si+43h], 4000h
                jz      short loc_66F9
                call    StrCmp
                jz      short loc_66FD

loc_66F9:                               ; CODE XREF: DOSCODE:66F2↑j
                inc     al
                jmp     short loc_66E8
; ---------------------------------------------------------------------------

loc_66FD:                               ; CODE XREF: DOSCODE:66E2↑j
                                        ; DOSCODE:66F7↑j
                pop     ds
                pop     dx
                mov     al, 10h

loc_6701:                               ; CODE XREF: DOSCODE:loc_672E↓j
                jmp     short loc_66DA
; ---------------------------------------------------------------------------

loc_6703:                               ; CODE XREF: DOSCODE:66EB↑j
                pop     ds
                pop     dx
                mov     si, 7A6Bh
                call    TestNet
                mov     di, 43h ; 'C'
                jnb     short loc_6713
                mov     di, 80h

loc_6713:                               ; CODE XREF: DOSCODE:670E↑j
                mov     ss:word_1154, di
                jmp     loc_67BA
; ---------------------------------------------------------------------------

$CHDIR:                                 ; DATA XREF: DOSCODE:4048↑o
                mov     ss:word_1154, 43h ; 'C'
                mov     di, offset OPENBUF
                mov     si, dx
                call    TransPath
                jnb     short ChDirCrack

ChDirErrP:                              ; CODE XREF: DOSCODE:6735↓j
                                        ; DOSCODE:673E↓j ...
                mov     al, 3

loc_672E:                               ; CODE XREF: DOSCODE:6743↓j
                jmp     short loc_6701
; ---------------------------------------------------------------------------

ChDirCrack:                             ; CODE XREF: DOSCODE:672A↑j
                cmp     ds:CMETA, 0FFh
                jnz     short ChDirErrP
                les     di, ds:THISCDS
                assume es:nothing
                cmp     di, 0FFFFh
                jz      short ChDirErrP
                call    DOS_CHDIR
                jb      short loc_672E
                les     di, ds:THISCDS
                test    word ptr es:[di+43h], 2000h
                mov     dx, ds:0ADCh
                jz      short GotCDS
                push    es
                push    di
                push    dx
                push    cx
                call    Get_User_Stack
                mov     di, [si+6]
                mov     ds, word ptr [si+0Eh]
                mov     si, 3BEh
                xchg    si, di
                xor     al, al
                push    di
                call    TransPathNoSet
                pop     si
                les     di, ds:THISCDS
                mov     word ptr es:[di+49h], 0FFFFh
                mov     word ptr es:[di+4Bh], 0FFFFh
                pop     cx
                pop     dx
                pop     di
                pop     es

GotCDS:                                 ; CODE XREF: DOSCODE:6753↑j
                call    Check_PathLen
                ja      short ChDirErrP
                test    word ptr es:[di+43h], 8000h
                jnz     short loc_67A8
                test    word ptr es:[di+43h], 2000h
                jz      short loc_679C
                mov     cx, 0FFFFh
                mov     dx, cx

loc_679C:                               ; CODE XREF: DOSCODE:6795↑j
                mov     es:[di+49h], cx
                mov     es:[di+4Bh], dx
                les     di, ds:THISCDS

loc_67A8:                               ; CODE XREF: DOSCODE:678D↑j
                call    FStrCpy
                xor     al, al

loc_67AD:                               ; CODE XREF: DOSCODE:67E2↓j
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

$MKDIR:                                 ; DATA XREF: DOSCODE:4044↑o
                mov     ss:word_1154, 43h ; 'C'

loc_67B7:                               ; CODE XREF: DOSCODE:C294↓j
                mov     si, offset DOS_MKDIR

loc_67BA:                               ; CODE XREF: DOSCODE:6718↑j
                mov     di, offset OPENBUF
                push    si
                mov     si, dx
                call    TransPath
                pop     si
                jnb     short MkDirCrack

loc_67C6:                               ; CODE XREF: DOSCODE:67D1↓j
                mov     al, 3

loc_67C8:                               ; CODE XREF: DOSCODE:67DC↓j
                                        ; DOSCODE:67E0↓j
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------

MkDirCrack:                             ; CODE XREF: DOSCODE:67C4↑j
                cmp     ss:CMETA, 0FFh
                jnz     short loc_67C6
                push    si
                call    Check_PathLen
                pop     si
                jbe     short loc_67DE
                mov     al, 5
                jmp     short loc_67C8
; ---------------------------------------------------------------------------

loc_67DE:                               ; CODE XREF: DOSCODE:67D8↑j
                call    si
                jb      short loc_67C8
                jmp     short loc_67AD

; =============== S U B R O U T I N E =======================================


Check_PathLen   proc near               ; CODE XREF: DOSCODE:GotCDS↑p
                                        ; DOSCODE:67D4↑p
                mov     si, ss:WFP_START
Check_PathLen   endp


; =============== S U B R O U T I N E =======================================


sub_67E9        proc near               ; CODE XREF: DOS_RENAME+6F↓p
                push    ss
                pop     ds
                assume ds:DOSCODE
                push    cx
                push    dx
                call    DStrLen
                pop     dx
                cmp     cx, word_1154
                pop     cx
                retn
sub_67E9        endp

; ---------------------------------------------------------------------------
off_67F7        dw offset loc_6833      ; DATA XREF: $IOCTL+10↓r
                dw offset loc_6833
                dw offset loc_687C
                dw offset loc_687C
                dw offset loc_6A2E
                dw offset loc_6A2E
                dw offset loc_6894
                dw offset loc_6894
                dw offset loc_6986
                dw offset loc_69C4
                dw offset loc_6A1D
                dw offset loc_68B2
                dw offset loc_68C0
                dw offset loc_68DA
                dw offset loc_6ACC
                dw offset loc_6ACC
                dw offset loc_68C0
                dw offset loc_68DA

; =============== S U B R O U T I N E =======================================


$IOCTL          proc near               ; CODE XREF: DOSCODE:56AD↑p
                                        ; DOSCODE:5803↑p ...

; FUNCTION CHUNK AT 450E SIZE 0000001C BYTES
; FUNCTION CHUNK AT 6AC7 SIZE 0000004A BYTES

                mov     si, ds
                push    ss
                pop     ds
                cmp     al, 11h
                ja      short loc_6830
                mov     di, ax
                and     di, 0FFh
                add     di, di
                jmp     cs:off_67F7[di]
; ---------------------------------------------------------------------------

loc_6830:                               ; CODE XREF: $IOCTL+6↑j
                                        ; $IOCTL+34↓j ...
                jmp     loc_697E
; ---------------------------------------------------------------------------

loc_6833:                               ; CODE XREF: $IOCTL+10↑j
                                        ; DATA XREF: DOSCODE:off_67F7↑o ...
                call    SFFromHandle
                jnb     short loc_683D

loc_6838:                               ; CODE XREF: $IOCTL+64↓j
                                        ; $IOCTL:loc_68A3↓j ...
                mov     al, 6

loc_683A:                               ; CODE XREF: $IOCTL+30↓j
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------

loc_683D:                               ; CODE XREF: $IOCTL+1B↑j
                cmp     al, 0
                mov     al, es:[di+5]
                jz      short loc_685E
                or      dh, dh
                jz      short loc_684D
                mov     al, 0Dh
                jmp     short loc_683A
; ---------------------------------------------------------------------------

loc_684D:                               ; CODE XREF: $IOCTL+2C↑j
                test    al, 80h
                jz      short loc_6830
                or      dl, 80h
                call    sub_51D8
                mov     es:[di+5], dl

loc_685B:                               ; CODE XREF: $IOCTL:loc_687A↓j
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

loc_685E:                               ; CODE XREF: $IOCTL+28↑j
                call    set_exerr_locus_disk
                xor     ah, ah
                test    al, 80h
                jz      short loc_6872
                call    sub_51D8
                les     di, es:[di+7]
                mov     ah, es:[di+5]

loc_6872:                               ; CODE XREF: $IOCTL+4A↑j
                mov     dx, ax
                call    Get_User_Stack
                mov     [si+6], dx

loc_687A:                               ; CODE XREF: $IOCTL:loc_68B0↓j
                jmp     short loc_685B
; ---------------------------------------------------------------------------

loc_687C:                               ; CODE XREF: $IOCTL+10↑j
                                        ; DATA XREF: DOSCODE:67FB↑o ...
                call    SFFromHandle
                jb      short loc_6838
                test    byte ptr es:[di+5], 80h

loc_6886:                               ; CODE XREF: $IOCTL+9D↓j
                jz      short loc_6830
                call    sub_51D8
                les     di, es:[di+7]
                xor     bl, bl
                jmp     loc_6A33
; ---------------------------------------------------------------------------

loc_6894:                               ; CODE XREF: $IOCTL+10↑j
                                        ; DATA XREF: DOSCODE:6803↑o ...
                mov     ah, 1
                sub     al, 6
                jz      short loc_689C
                mov     ah, 3

loc_689C:                               ; CODE XREF: $IOCTL+7D↑j
                push    ax
                call    sub_7EE1
                pop     ax
                jnb     short loc_68A5

loc_68A3:                               ; CODE XREF: $IOCTL+A8↓j
                jmp     short loc_6838
; ---------------------------------------------------------------------------

loc_68A5:                               ; CODE XREF: $IOCTL+86↑j
                call    IOFUNC
                mov     ah, al
                mov     al, 0FFh
                jnz     short loc_68B0
                inc     al

loc_68B0:                               ; CODE XREF: $IOCTL+91↑j
                                        ; $IOCTL+A3↓j
                jmp     short loc_687A
; ---------------------------------------------------------------------------

loc_68B2:                               ; CODE XREF: $IOCTL+10↑j
                                        ; DATA XREF: DOSCODE:680D↑o
                mov     RetryLoop, cx
                or      dx, dx
                jz      short loc_6886
                mov     RetryCount, dx
                jmp     short loc_68B0
; ---------------------------------------------------------------------------

loc_68C0:                               ; CODE XREF: $IOCTL+10↑j
                                        ; DATA XREF: DOSCODE:680F↑o ...
                call    SFFromHandle
                jb      short loc_68A3
                test    byte ptr es:[di+6], 80h
                jnz     short loc_68E7
                call    sub_51D8
                les     di, es:[di+7]
                mov     byte_3B1, 0FFh
                jmp     short loc_68F3
; ---------------------------------------------------------------------------

loc_68DA:                               ; CODE XREF: $IOCTL+10↑j
                                        ; DATA XREF: DOSCODE:6811↑o ...
                call    set_exerr_locus_disk
                cmp     ch, 48h ; 'H'
                jz      short loc_68EA
                cmp     ch, 8
                jz      short loc_68EA

loc_68E7:                               ; CODE XREF: $IOCTL+AF↑j
                                        ; $IOCTL+D6↓j
                jmp     loc_697E
; ---------------------------------------------------------------------------

loc_68EA:                               ; CODE XREF: $IOCTL+C5↑j
                                        ; $IOCTL+CA↑j
                mov     byte_3B1, bl
                call    sub_6ABD
                jnz     short loc_68E7

loc_68F3:                               ; CODE XREF: $IOCTL+BD↑j
                cmp     ch, 48h ; 'H'
                jz      short loc_68FD
                cmp     ch, 8
                jnz     short loc_6935

loc_68FD:                               ; CODE XREF: $IOCTL+DB↑j
                cmp     cl, 6Ah ; 'j'
                jz      short loc_6907
                cmp     cl, 4Ah ; 'J'
                jnz     short loc_6935

loc_6907:                               ; CODE XREF: $IOCTL+E5↑j
                cmp     cl, 4Ah ; 'J'
                jnz     short loc_6915
                cmp     bh, 4
                jz      short loc_6915
                or      bh, bh
                jnz     short loc_697E

loc_6915:                               ; CODE XREF: $IOCTL+EF↑j
                                        ; $IOCTL+F4↑j
                mov     bl, byte_3B1
                xor     bh, bh
                dec     bx
                cmp     bl, 1Ah
                jnb     short loc_697E
                cmp     cl, 6Ah ; 'j'
                jnz     short loc_692D
                and     byte ptr [bx+1308h], 7Fh
                jmp     short loc_6932
; ---------------------------------------------------------------------------

loc_692D:                               ; CODE XREF: $IOCTL+109↑j
                or      byte ptr [bx+1308h], 80h

loc_6932:                               ; CODE XREF: $IOCTL+110↑j
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

loc_6935:                               ; CODE XREF: $IOCTL+E0↑j
                                        ; $IOCTL+EA↑j
                test    byte ptr es:[di+4], 40h
                jz      short loc_697E
                mov     IOCALL_REQFUNC, 13h
                cmp     al, 10h
                jl      short loc_6951
                test    byte ptr es:[di+4], 80h
                jz      short loc_697E
                mov     IOCALL_REQFUNC, 19h

loc_6951:                               ; CODE XREF: $IOCTL+128↑j
                push    es
                push    di
                mov     IOCALL, 17h
                mov     IOCALL_REQUNI, bl
                mov     IOMED, ch
                mov     byte ptr IOXAD, cl
; ---------------------------------------------------------------------------
                db  89h
                db  36h ; 6
                db  8Bh
                db    3
                db  89h
                db  3Eh ; >
                db  8Dh
                db    3
                db  89h
                db  16h
                db  8Fh
                db    3
                db  89h
                db  36h ; 6
                db  91h
                db    3
                db 0BBh
                db  7Ch ; |
                db    3
                db  16h
                db    7
                db  5Eh ; ^
                db  1Fh
                db 0E9h
                db 0EEh
                db    0
; ---------------------------------------------------------------------------

loc_697E:                               ; CODE XREF: $IOCTL:loc_6830↑j
                                        ; $IOCTL:loc_68E7↑j ...
                mov     al, 1
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------
                db 0E9h
                db 0B2h
                db 0FEh
; ---------------------------------------------------------------------------

loc_6986:                               ; CODE XREF: $IOCTL+10↑j
                                        ; DATA XREF: DOSCODE:6807↑o
                call    sub_6ABD
                jnz     short loc_697E
                test    byte ptr es:[di+5], 8
                jz      short loc_697E
                mov     ss:IOCALL_REQFUNC, 0Fh
                mov     al, 0Dh
                mov     ah, bl
                mov     word ptr ss:IOCALL, ax
                xor     ax, ax
                mov     ss:IOCALL_REQSTAT, ax
                push    es
                pop     ds
                assume ds:nothing
                mov     si, di
                push    ss
                pop     es
                assume es:DOSCODE
                mov     bx, 37Ch
                push    ds
                push    si
                call    DEVIOCALL2
                pop     si
                pop     ds
                mov     ax, ss:IOCALL_REQSTAT
                and     ah, 2
                mov     cl, 9
                shr     ax, cl

loc_69C1:                               ; CODE XREF: $IOCTL+1FB↓j
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

loc_69C4:                               ; CODE XREF: $IOCTL+10↑j
                                        ; DATA XREF: DOSCODE:6809↑o
                mov     al, bl
                call    GETTHISDRV
                jb      short loc_6A18
                call    sub_6A91
                jb      short loc_6A18
                mov     dx, 942h
                jnz     short loc_69D9
                mov     dx, es:[di+4]

loc_69D9:                               ; CODE XREF: $IOCTL+1B8↑j
                mov     bl, al
                les     di, ss:THISCDS
                assume es:nothing
                test    byte ptr es:[di+44h], 80h
                jz      short loc_69EA
                mov     dx, 1000h

loc_69EA:                               ; CODE XREF: $IOCTL+1CA↑j
                push    ss
                pop     ds
                assume ds:DOSCODE
                mov     si, 3BEh
                add     bl, 41h ; 'A'
                mov     [si], bl
                mov     word ptr [si+1], 3Ah ; ':'
                mov     ax, 300h
                clc
                int     2Ah             ; Microsoft Networks - CHECK DIRECT I/O
                                        ; DS:SI -> ASCIZ disk device name (may be full path or only drive
                                        ; specifier--must include the colon)
                                        ; Return: CF clear if absolute disk access allowed
                jnb     short loc_6A05
                or      dx, 200h

loc_6A05:                               ; CODE XREF: $IOCTL+1E4↑j
                test    byte ptr es:[di+44h], 10h
                jz      short loc_6A10
                or      dx, 8000h

loc_6A10:                               ; CODE XREF: $IOCTL+1EF↑j
                                        ; $IOCTL+20E↓j
                call    Get_User_Stack
                mov     [si+6], dx
                jmp     short loc_69C1
; ---------------------------------------------------------------------------

loc_6A18:                               ; CODE XREF: $IOCTL+1AE↑j
                                        ; $IOCTL+1B3↑j ...
                mov     al, 0Fh

loc_6A1A:                               ; CODE XREF: $IOCTL+274↓j
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------

loc_6A1D:                               ; CODE XREF: $IOCTL+10↑j
                                        ; DATA XREF: DOSCODE:680B↑o
                call    SFFromHandle
                jnb     short loc_6A25
                jmp     loc_6838
; ---------------------------------------------------------------------------

loc_6A25:                               ; CODE XREF: $IOCTL+205↑j
                mov     dx, es:[di+5]
                jmp     short loc_6A10
; ---------------------------------------------------------------------------

loc_6A2B:                               ; CODE XREF: $IOCTL+216↓j
                                        ; $IOCTL+21D↓j
                jmp     loc_697E
; ---------------------------------------------------------------------------

loc_6A2E:                               ; CODE XREF: $IOCTL+10↑j
                                        ; DATA XREF: DOSCODE:67FF↑o ...
                call    sub_6ABD
                jnz     short loc_6A2B

loc_6A33:                               ; CODE XREF: $IOCTL+76↑j
                test    byte ptr es:[di+5], 40h
                jz      short loc_6A2B
                mov     IOCALL_REQFUNC, 3
                test    al, 1
                jz      short loc_6A48
                mov     IOCALL_REQFUNC, 0Ch

loc_6A48:                               ; CODE XREF: $IOCTL+226↑j
                mov     al, 14h
                mov     ah, bl
                mov     word ptr IOCALL, ax
                xor     ax, ax
                mov     IOCALL_REQSTAT, ax
                mov     IOMED, al
                mov     IOSCNT, cx
                mov     word ptr IOXAD, dx
; ---------------------------------------------------------------------------
                db  89h
                db  36h ; 6
                db  8Ch
                db    3
                db    6
                db  1Fh
                db  8Bh
                db 0F7h
                db  16h
                db    7
                db 0BBh
                db  7Ch ; |
                db    3
                db 0E8h
                db 0DCh
                db  28h ; (
                db  36h ; 6
                db 0F6h
                db    6
                db  80h
                db    3
                db  80h
                db  75h ; u
                db    6
                db  36h ; 6
                db 0A1h
                db  8Eh
                db    3
                db 0EBh
                db  99h
; ---------------------------------------------------------------------------

loc_6A7D:                               ; CODE XREF: $IOCTL:loc_6ACA↓j
                mov     di, ss:IOCALL_REQSTAT
                and     di, 0FFh
                mov     ax, di
                call    sub_A3E5
                mov     ax, ss:EXTERR
                jmp     short loc_6A1A
$IOCTL          endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


sub_6A91        proc near               ; CODE XREF: $IOCTL+1B0↑p
                                        ; sub_6ABD↓p
                push    ax
                mov     al, bl
                call    GETTHISDRV
                jb      short loc_6ABB
                xor     bl, bl
                mov     EXTERR_LOCUS, 3
                les     di, THISCDS
                test    byte ptr es:[di+44h], 80h
                les     di, es:[di+45h]
                jnz     short loc_6ABA
                call    set_exerr_locus_disk
                mov     bl, es:[di+1]
                les     di, es:[di+13h]

loc_6ABA:                               ; CODE XREF: sub_6A91+1C↑j
                clc

loc_6ABB:                               ; CODE XREF: sub_6A91+6↑j
                pop     ax
                retn
sub_6A91        endp


; =============== S U B R O U T I N E =======================================


sub_6ABD        proc near               ; CODE XREF: $IOCTL+D3↑p
                                        ; $IOCTL:loc_6986↑p ...
                call    sub_6A91
                jb      short loc_6AC3
                retn
; ---------------------------------------------------------------------------

loc_6AC3:                               ; CODE XREF: sub_6ABD+3↑j
                pop     ax
                jmp     loc_6A18
sub_6ABD        endp ; sp-analysis failed

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR $IOCTL

loc_6AC7:                               ; CODE XREF: $IOCTL+2B4↓j
                                        ; $IOCTL+2BB↓j
                jmp     loc_697E
; ---------------------------------------------------------------------------

loc_6ACA:                               ; CODE XREF: $IOCTL+2ED↓j
                jmp     short loc_6A7D
; ---------------------------------------------------------------------------

loc_6ACC:                               ; CODE XREF: $IOCTL+10↑j
                                        ; DATA XREF: DOSCODE:6813↑o ...
                call    sub_6ABD
                jnz     short loc_6AC7
                test    byte ptr es:[di+4], 40h
                jz      short loc_6AC7
                mov     IOCALL_REQFUNC, 17h
                cmp     al, 0Eh
                jz      short loc_6AE6
                mov     IOCALL_REQFUNC, 18h

loc_6AE6:                               ; CODE XREF: $IOCTL+2C4↑j
                mov     al, 0Dh
                mov     ah, bl
                mov     word ptr IOCALL, ax
                xor     ax, ax
                mov     IOCALL_REQSTAT, ax
                push    es
                pop     ds
                assume ds:nothing
                mov     si, di
                push    ss
                pop     es
                assume es:DOSCODE
                mov     bx, 37Ch
                push    ds
                push    si
                call    DEVIOCALL2
                pop     si
                pop     ds
                test    byte ptr ss:IOCALL_REQSTAT+1, 80h
                jnz     short loc_6ACA
                mov     al, ss:IOCALL_REQUNI
                jmp     SYS_RET_OK
; END OF FUNCTION CHUNK FOR $IOCTL

; =============== S U B R O U T I N E =======================================


DOS_DELETE      proc near               ; CODE XREF: DOSCODE:5CB0↑p
                                        ; DOSCODE:C2FF↓p
                call    TestNet
                jnb     short loc_6B1C
                mov     ax, 1113h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE
                                        ; SS = DS = DOS CS, SDA first filename pointer -> fully-qualified filename in DOS CS
                                        ; SDA CDS pointer -> current directory structure for drive with file
                                        ; Return: CF set on error
                retn
; ---------------------------------------------------------------------------

loc_6B1C:                               ; CODE XREF: DOS_DELETE+3↑j
                mov     byte ptr ds:56Fh, 0
                call    ECritDisk
                mov     word ptr ds:57Eh, 0E500h
                mov     si, ds:5B2h

loc_6B2E:                               ; CODE XREF: DOS_DELETE+20↓j
                lodsb
                or      al, al
                jnz     short loc_6B2E
                sub     si, 4
                cmp     word ptr [si], 2E2Ah
                jnz     short loc_6B42
                cmp     byte ptr [si+2], 2Ah ; '*'
                jz      short loc_6B61

loc_6B42:                               ; CODE XREF: DOS_DELETE+29↑j
                sub     si, 9
                xchg    di, si
                push    ss
                pop     es
                mov     ax, 3F3Fh
                mov     cx, 4
                repe scasw
                jnz     short loc_6B6F
                xchg    di, si
                lodsw
                cmp     ax, 3F2Eh
                jnz     short loc_6B6F
                lodsw
                cmp     ax, 3F3Fh
                jnz     short loc_6B6F

loc_6B61:                               ; CODE XREF: DOS_DELETE+2F↑j
                mov     al, ds:56Dh
                and     al, 1Fh
                cmp     al, 1Fh
                jnz     short loc_6B6F
                mov     byte ptr ds:57Fh, 0

loc_6B6F:                               ; CODE XREF: DOS_DELETE+40↑j
                                        ; DOS_DELETE+48↑j ...
                mov     byte ptr ds:34Ch, 1
                call    GetPathNoSet
                jnb     short loc_6B8B
                jnz     short loc_6B86
                or      cl, cl
                jz      short loc_6B86

loc_6B7F:                               ; CODE XREF: DOS_DELETE:loc_6C71↓j
                mov     ax, 2

loc_6B82:                               ; CODE XREF: DOS_DELETE+78↓j
                                        ; DOS_DELETE+86↓j
                stc
                jmp     loc_6C66
; ---------------------------------------------------------------------------

loc_6B86:                               ; CODE XREF: DOS_DELETE+68↑j
                                        ; DOS_DELETE+6C↑j
                mov     ax, 3
                jmp     short loc_6B82
; ---------------------------------------------------------------------------

loc_6B8B:                               ; CODE XREF: DOS_DELETE+66↑j
                jnz     short loc_6B99
                cmp     byte ptr ds:57Fh, 0
                jz      short loc_6B99

loc_6B94:                               ; CODE XREF: DOS_DELETE+8A↓j
                                        ; DOS_DELETE:loc_6C74↓j
                mov     ax, 5
                jmp     short loc_6B82
; ---------------------------------------------------------------------------

loc_6B99:                               ; CODE XREF: DOS_DELETE:loc_6B8B↑j
                                        ; DOS_DELETE+81↑j
                or      ah, ah
                js      short loc_6B94

loc_6B9D:                               ; CODE XREF: DOS_DELETE+118↓j
                or      byte ptr ds:56Fh, 1
                push    ds
                mov     ah, ds:57Fh
                lds     di, ds:5E2h
                test    ss:ATTRIB, 1
                jnz     short loc_6BBC
                test    byte ptr [bx+0Bh], 1
                jz      short loc_6BBC

loc_6BB9:                               ; CODE XREF: DOS_DELETE+AE↓j
                pop     ds
                jmp     short loc_6C1B
; ---------------------------------------------------------------------------

loc_6BBC:                               ; CODE XREF: DOS_DELETE+A0↑j
                                        ; DOS_DELETE+A6↑j
                call    REN_DEL_Check
                jb      short loc_6BB9
                test    byte ptr [di+5], 40h
                jnz     short loc_6BCE
                call    sub_AD64
                or      byte ptr [di+5], 40h

loc_6BCE:                               ; CODE XREF: DOS_DELETE+B4↑j
                mov     [bx], ah
                xor     bx, bx
                cmp     es:[bp+0Fh], bx
                jnz     short loc_6BDB
                mov     bx, [si-6]

loc_6BDB:                               ; CODE XREF: DOS_DELETE+C5↑j
                mov     ss:CLUSTNUM_HW, bx
                mov     bx, [si]
                pop     ds
                or      byte ptr ds:56Fh, 10h
                cmp     word ptr ds:0AE8h, 0
                jnz     short loc_6BF2
                cmp     bx, 2

loc_6BF2:                               ; CODE XREF: DOS_DELETE+DC↑j
                jb      short loc_6C1B
                cmp     word ptr es:[bp+0Fh], 0
                jnz     short loc_6C0D
                push    bx
                mov     bx, ds:0AE8h
                cmp     bx, es:[bp+2Fh]
                pop     bx
                jnz     short loc_6C11
                cmp     bx, es:[bp+2Dh]
                jmp     short loc_6C11
; ---------------------------------------------------------------------------

loc_6C0D:                               ; CODE XREF: DOS_DELETE+E8↑j
                cmp     bx, es:[bp+0Dh]

loc_6C11:                               ; CODE XREF: DOS_DELETE+F4↑j
                                        ; DOS_DELETE+FA↑j
                ja      short loc_6C1B
                call    sub_9D13
                jb      short loc_6C71
                call    FastOpen_Delete

loc_6C1B:                               ; CODE XREF: DOS_DELETE+A9↑j
                                        ; DOS_DELETE:loc_6BF2↑j ...
                les     bp, ds:58Ah
                assume es:nothing
                call    sub_8900
                jb      short loc_6C71
                call    sub_87F7
                jb      short loc_6C2C
                jmp     loc_6B9D
; ---------------------------------------------------------------------------

loc_6C2C:                               ; CODE XREF: DOS_DELETE+116↑j
                les     bp, ds:58Ah
                call    update_fat32_fsinfo
                mov     al, es:[bp+0]
                call    FLUSHBUF
                jb      short loc_6C71
                test    byte ptr ds:56Fh, 10h
                jz      short loc_6C6A
                test    byte ptr ds:56Bh, 8
                jz      short loc_6C66
                push    ax
                push    es
                push    di
                les     di, ds:5A2h
                xor     bh, bh
                mov     ah, es:[di]
                sub     ah, 41h ; 'A'
                mov     ds:0AA1h, ah
                call    sub_7156
                call    FATREAD_CDS
                pop     di
                pop     es
                pop     ax

loc_6C66:                               ; CODE XREF: DOS_DELETE+72↑j
                                        ; DOS_DELETE+137↑j
                call    LCritDisk
                retn
; ---------------------------------------------------------------------------

loc_6C6A:                               ; CODE XREF: DOS_DELETE+130↑j
                test    byte ptr ds:56Fh, 1
                jnz     short loc_6C74

loc_6C71:                               ; CODE XREF: DOS_DELETE+105↑j
                                        ; DOS_DELETE+111↑j ...
                jmp     loc_6B7F
; ---------------------------------------------------------------------------

loc_6C74:                               ; CODE XREF: DOS_DELETE+15E↑j
                jmp     loc_6B94
DOS_DELETE      endp


; =============== S U B R O U T I N E =======================================


REN_DEL_Check   proc near               ; CODE XREF: DOS_DELETE:loc_6BBC↑p
                                        ; DOS_RENAME+81↓p ...
                push    ds
                push    di
                push    ax
                push    bx
                push    si
                push    ss
                pop     es
                assume es:DOSCODE
                mov     di, ss:WFP_START
                mov     si, bx
                mov     ds, word ptr ss:CURBUF+2
                assume ds:DOSCODE
                mov     bx, di
                inc     bx
                inc     bx
                call    StrLen
                dec     cx
                add     di, cx
                call    SkipBack
                inc     di
                mov     ss:SAVE_BX, di
                call    PackName
                pop     si
                pop     bx
                push    bx
                push    si
                push    ss
                pop     ds
                push    es
                push    di
                call    ShCloseFile
                cmp     fShare, 0FFh
                jnz     short rdc_1
                mov     word ptr THISSFT+2, es
                mov     word ptr THISSFT, di
                jmp     short rdc_2
; ---------------------------------------------------------------------------

rdc_1:                                  ; CODE XREF: REN_DEL_Check+3A↑j
                mov     word ptr THISSFT+2, ds
                mov     word ptr THISSFT, 765h ; AUXSTACK-SF_ENTRY.size

rdc_2:                                  ; CODE XREF: REN_DEL_Check+44↑j
                pop     di
                pop     es
                assume es:nothing
                xor     ah, ah
                call    DOOPEN
                les     di, THISSFT
                mov     word ptr es:[di+2], 10h
                mov     word ptr es:[di], 1
                call    ShareEnter
                jb      short CheckDone
                les     di, THISSFT
                mov     word ptr es:[di], 0
                call    ShareEnd
                clc

CheckDone:                              ; CODE XREF: REN_DEL_Check+69↑j
                les     bp, THISDPB
                pop     si
                pop     bx
                pop     ax
                pop     di
                pop     ds
                assume ds:nothing
                retn
REN_DEL_Check   endp


; =============== S U B R O U T I N E =======================================


FastOpen_Delete proc near               ; CODE XREF: DOS_DELETE+107↑p
                                        ; DOS_RENAME+98↓p ...

; FUNCTION CHUNK AT 6D16 SIZE 0000000B BYTES

                pushf
                push    si
                push    di
                push    bx
                push    ax
                mov     si, ss:WFP_START
                mov     al, 3
                jmp     short fastinvoke
FastOpen_Delete endp

; ---------------------------------------------------------------------------

FastOpen_Rename:                        ; CODE XREF: DOS_RENAME+1E7↓p
                                        ; DOS_RENAME:loc_6F47↓p
                pushf
                push    si
                push    di
                push    bx
                push    ax
                mov     si, ss:REN_WFP
                mov     di, offset NAME1
                mov     al, 6
; START OF FUNCTION CHUNK FOR FastOpen_Update
;   ADDITIONAL PARENT FUNCTION FastOpen_Delete

fastinvoke:                             ; CODE XREF: FastOpen_Delete+C↑j
                                        ; FastOpen_Update+7↓j
                mov     bx, offset FastTable_2
                call    dword ptr [bx]
                pop     ax
                pop     bx
                pop     di
                pop     si
                popf
                retn
; END OF FUNCTION CHUNK FOR FastOpen_Update

; =============== S U B R O U T I N E =======================================


FastOpen_Update proc near               ; CODE XREF: sub_6FE3+72↓p
                                        ; DOSCODE:781D↓p ...

; FUNCTION CHUNK AT 6D16 SIZE 0000000B BYTES

                pushf
                push    si
                push    di
                push    bx
                push    ax
                mov     al, 4
                jmp     short fastinvoke
FastOpen_Update endp


; =============== S U B R O U T I N E =======================================


Fast_Dispatch   proc near               ; CODE XREF: Fastxxx_Purge+19↑p
                mov     si, offset FastTable_2
                call    dword ptr ss:[si]
                retn
Fast_Dispatch   endp


; =============== S U B R O U T I N E =======================================


DOS_RENAME      proc near               ; CODE XREF: DOSCODE:5DA7↑p
                                        ; DOSCODE:C377↓p
                call    TestNet
                jnb     short LOCAL_RENAME
                mov     ax, 1111h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE
                                        ; SS = DS = DOS CS, SDA first filename pointer = offset of fully-qualified old name
                                        ; SDA CDS pointer -> current directory
                                        ; Return: CF set on error
                retn
; ---------------------------------------------------------------------------

LOCAL_RENAME:                           ; CODE XREF: DOS_RENAME+3↑j
                call    set_exerr_locus_disk
                mov     si, ds:WFP_START
                mov     di, ds:REN_WFP
                mov     al, [si]
                mov     ah, [di]
                or      ax, 2020h
                cmp     al, ah
                jz      short SAMEDRV
                mov     ax, 11h
                stc
                retn
; ---------------------------------------------------------------------------

SAMEDRV:                                ; CODE XREF: DOS_RENAME+1F↑j
                push    word ptr ds:DMAADD+2
                push    word ptr ds:DMAADD
                mov     word ptr ds:DMAADD+2, ds
                mov     word ptr ds:DMAADD, 620h
                mov     ds:FOUND_DEV, 0
                call    ECritDisk
                call    DOS_SEARCH_FIRST
                jnb     short loc_6D8B
                cmp     ax, 12h
                jnz     short GOTERR
                mov     ax, 2

GOTERR:                                 ; CODE XREF: DOS_RENAME+48↑j
                                        ; DOS_RENAME+73↓j ...
                stc

loc_6D7F:                               ; CODE XREF: DOS_RENAME:RENAME_POP↓j
                pop     word ptr ds:DMAADD
                pop     word ptr ds:DMAADD+2
                call    LCritDisk
                retn
; ---------------------------------------------------------------------------

loc_6D8B:                               ; CODE XREF: DOS_RENAME+43↑j
                mov     ax, 5
                push    ds
                lds     si, ds:DMAADD
                add     si, 15h
                test    byte ptr [si+0Bh], 10h
                jz      short loc_6DA3
                mov     si, ds:REN_WFP
                call    sub_67E9

loc_6DA3:                               ; CODE XREF: DOS_RENAME+69↑j
                pop     ds
                ja      short GOTERR
                cmp     ds:FOUND_DEV, 0
                jnz     short GOTERR
                mov     si, bx
                add     si, 1Ah
                call    REN_DEL_Check
                jnb     short loc_6DBC
                mov     ax, 20h ; ' '

RENAME_POP:                             ; CODE XREF: DOS_RENAME+DA↓j
                                        ; DOS_RENAME+F4↓j
                jmp     short loc_6D7F
; ---------------------------------------------------------------------------

loc_6DBC:                               ; CODE XREF: DOS_RENAME+84↑j
                lds     si, ds:DMAADD
                add     si, 15h
                test    byte ptr [si+0Bh], 10h
                jnz     short loc_6DCC
                call    FastOpen_Delete

loc_6DCC:                               ; CODE XREF: DOS_RENAME+96↑j
                mov     ax, ds:WFP_START
                mov     si, ds:REN_WFP
                mov     ds:WFP_START, si
                mov     ds:REN_WFP, ax
                mov     ds:CURR_DIR_END, 0FFFFh
                mov     ds:CREATING, 0E5FFh
                call    GetPathNoSet
                jb      short NODEST
                or      ah, ah
                jns     short SAVEDEST

BAD_ACC:                                ; CODE XREF: DOS_RENAME+12D↓j
                                        ; DOS_RENAME:loc_6EC0↓j
                mov     ax, 5           ; error_access_denied
                stc

RENAME_CLEAN:                           ; CODE XREF: DOS_RENAME:loc_6F37↓j
                pushf
                push    ax
                les     bp, ds:THISDPB
                call    update_fat32_fsinfo
                mov     al, ds:THISDRV
                call    FLUSHBUF
                pop     ax
                cmp     ds:FAILERR, 0
                jnz     short BAD_ERR
                popf
                jmp     short RENAME_POP
; ---------------------------------------------------------------------------

BAD_ERR:                                ; CODE XREF: DOS_RENAME+D7↑j
                pop     ax
                mov     ax, 3           ; error_path_not_foun
                jmp     GOTERR
; ---------------------------------------------------------------------------

NODEST:                                 ; CODE XREF: DOS_RENAME+B8↑j
                jnz     short BAD_PATH
                cmp     ds:FAILERR, 0
                jnz     short BAD_PATH
                or      cl, cl
                jnz     short SAVEDEST

BAD_PATH:                               ; CODE XREF: DOS_RENAME:NODEST↑j
                                        ; DOS_RENAME+EA↑j
                mov     ax, 3
                stc
                jmp     short RENAME_POP
; ---------------------------------------------------------------------------

SAVEDEST:                               ; CODE XREF: DOS_RENAME+BC↑j
                                        ; DOS_RENAME+EE↑j
                push    ss
                pop     es
                assume es:DOSCODE
                mov     di, offset NAME2
                mov     si, offset NAME1
                mov     cx, 11
                rep movsb
                mov     ax, ds:DIRSTART_HW
                mov     ds:DESTSTART, ax
                mov     ax, ds:DIRSTART
                mov     ds:DESTSTART_HW, ax

BUILDDEST:                              ; CODE XREF: DOS_RENAME:loc_6F44↓j
                push    ss
                pop     es
                mov     bx, (offset RENAMEDMA+15h)
                mov     di, offset NAME1
                mov     si, offset NAME2
                mov     cx, 11
                call    NEW_RENAME
                mov     ds:ATTRIB, 16h  ; attr_all
                mov     byte ptr ds:CREATING, 0FFh
                call    DEVNAME
                jnb     short BAD_ACC
                mov     bx, ds:DESTSTART
                mov     ds:ROOTCLUST_HW, bx
                mov     bx, ds:DESTSTART_HW
                les     bp, ds:THISDPB
                assume es:nothing
                call    SETDIRSRCH
                jb      short loc_6EC0
                call    sub_8797
                jnb     short loc_6EC0
                cmp     ds:FAILERR, 0
                jnz     short loc_6EC0
                mov     ax, ds:DESTSTART_HW
                mov     dx, ds:DESTSTART
                les     bp, ds:THISDPB
                cmp     word ptr es:[bp+0Fh], 0
                jnz     short loc_6E99
                cmp     dx, word ptr ds:RENAMEDMA+11h
                jnz     short loc_6E9F

loc_6E99:                               ; CODE XREF: DOS_RENAME+160↑j
                cmp     ax, ds:62Fh
                jz      short loc_6EF0

loc_6E9F:                               ; CODE XREF: DOS_RENAME+166↑j
                mov     al, ds:640h
                test    al, 10h
                jnz     short loc_6EC0
                mov     ds:56Bh, al
                mov     word ptr ds:5A0h, ds
                mov     si, 765h
                mov     ds:59Eh, si
                mov     word ptr [si+2], 2
                xor     cx, cx
                call    sub_953E
                jnb     short loc_6EC3

loc_6EC0:                               ; CODE XREF: DOS_RENAME+142↑j
                                        ; DOS_RENAME+147↑j ...
                jmp     BAD_ACC
; ---------------------------------------------------------------------------

loc_6EC3:                               ; CODE XREF: DOS_RENAME+18D↑j
                push    bx
                les     di, ds:59Eh
                call    ShareEnd
                pop     bx
                les     di, ds:5E2h
                call    sub_AD58
                mov     di, bx
                add     di, 0Bh
                mov     si, 640h
                mov     cx, 15h
                rep movsb
                call    sub_6F4F
                jb      short loc_6F4C
                mov     di, bx
                mov     es, word ptr ds:5E4h
                mov     al, 0E5h
                stosb
                jmp     short loc_6F03
; ---------------------------------------------------------------------------

loc_6EF0:                               ; CODE XREF: DOS_RENAME+16C↑j
                call    sub_6F4F
                jb      short loc_6F4C
                mov     di, bx
                mov     es, word ptr ds:5E4h
                mov     si, 54Bh
                mov     cx, 0Bh
                rep movsb

loc_6F03:                               ; CODE XREF: DOS_RENAME+1BD↑j
                mov     di, ds:5E2h
                call    sub_AD58
                push    si
                lds     si, ds:32Ch
                add     si, 15h
                test    byte ptr [si+0Bh], 10h
                jz      short loc_6F1B
                call    FastOpen_Rename

loc_6F1B:                               ; CODE XREF: DOS_RENAME+1E5↑j
                pop     si
                mov     si, 621h
                call    ECritDisk
                mov     byte ptr ds:57Eh, 0
                call    sub_7639
                jb      short loc_6F4C
                lea     si, [bx+1Ah]
                call    REN_DEL_Check
                jnb     short loc_6F3A
                mov     ax, 20h ; ' '

loc_6F37:                               ; CODE XREF: DOS_RENAME+21C↓j
                jmp     RENAME_CLEAN
; ---------------------------------------------------------------------------

loc_6F3A:                               ; CODE XREF: DOS_RENAME+201↑j
                mov     al, ds:640h
                test    al, 10h
                jz      short loc_6F47
                call    FastOpen_Delete

loc_6F44:                               ; CODE XREF: DOS_RENAME+219↓j
                jmp     BUILDDEST
; ---------------------------------------------------------------------------

loc_6F47:                               ; CODE XREF: DOS_RENAME+20E↑j
                call    FastOpen_Rename
                jmp     short loc_6F44
; ---------------------------------------------------------------------------

loc_6F4C:                               ; CODE XREF: DOS_RENAME+1B2↑j
                                        ; DOS_RENAME+1C2↑j ...
                clc
                jmp     short loc_6F37
DOS_RENAME      endp


; =============== S U B R O U T I N E =======================================


sub_6F4F        proc near               ; CODE XREF: DOS_RENAME+1AF↑p
                                        ; DOS_RENAME:loc_6EF0↑p
                les     bp, ds:58Ah
                xor     bx, bx
                cmp     es:[bp+0Fh], bx
                jnz     short loc_6F5F
                mov     bx, ds:631h

loc_6F5F:                               ; CODE XREF: sub_6F4F+A↑j
                mov     ds:0AEEh, bx
                mov     bx, ds:62Fh
                call    SETDIRSRCH
                jb      short locret_6F75
                call    sub_8E53
                mov     ax, ds:62Dh
                call    loc_8903

locret_6F75:                            ; CODE XREF: sub_6F4F+1B↑j
                retn
sub_6F4F        endp


; =============== S U B R O U T I N E =======================================


NEW_RENAME      proc near               ; CODE XREF: DOS_RENAME+11D↑p
                                        ; NEW_RENAME+9↓j
                lodsb
                cmp     al, 3Fh ; '?'
                jnz     short loc_6F7D
                mov     al, [bx]

loc_6F7D:                               ; CODE XREF: NEW_RENAME+3↑j
                stosb
                inc     bx
                loop    NEW_RENAME
                retn
NEW_RENAME      endp


; =============== S U B R O U T I N E =======================================


sub_6F82        proc near               ; CODE XREF: DOSCODE:5CCB↑p
                                        ; DOSCODE:loc_C2C9↓p
                call    TestNet
                jnb     short loc_6F8D
                mov     ax, 110Fh
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES
                                        ; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
                                        ; SDA CDS pointer -> current directory
                                        ; Return: CF set on error, AX = file attributes
                retn
; ---------------------------------------------------------------------------

loc_6F8D:                               ; CODE XREF: sub_6F82+3↑j
                call    ECritDisk
                mov     byte ptr ds:34Ch, 1
                call    sub_7062
                jnb     short loc_6FAD

loc_6F9A:                               ; CODE XREF: sub_6FE3+33↓j
                jnz     short loc_6FA8
                or      cl, cl
                jz      short loc_6FA8

loc_6FA0:                               ; CODE XREF: sub_6F82+2D↓j
                                        ; sub_6FE3+7C↓j
                mov     ax, 2

loc_6FA3:                               ; CODE XREF: sub_6F82+29↓j
                stc

loc_6FA4:                               ; CODE XREF: sub_6F82+3B↓j
                                        ; sub_6F82:loc_6FE1↓j
                call    LCritDisk
                retn
; ---------------------------------------------------------------------------

loc_6FA8:                               ; CODE XREF: sub_6F82:loc_6F9A↑j
                                        ; sub_6F82+1C↑j
                mov     ax, 3
                jmp     short loc_6FA3
; ---------------------------------------------------------------------------

loc_6FAD:                               ; CODE XREF: sub_6F82+16↑j
                or      ah, ah
                js      short loc_6FA0
                cmp     word ptr ds:5E2h, 0FFFFh
                jnz     short loc_6FBF
                xor     ah, ah
                mov     al, 10h
                clc
                jmp     short loc_6FA4
; ---------------------------------------------------------------------------

loc_6FBF:                               ; CODE XREF: sub_6F82+34↑j
                push    ds
                mov     ds, word ptr ds:5E4h
                mov     si, bx
                xor     bx, bx
                mov     di, bx
                mov     cx, [si+16h]
                mov     dx, [si+18h]
                xor     ah, ah
                mov     al, [si+0Bh]
                test    al, 10h
                jnz     short loc_6FDF
                mov     di, [si+1Ch]
                mov     bx, [si+1Eh]

loc_6FDF:                               ; CODE XREF: sub_6F82+55↑j
                pop     ds
                clc

loc_6FE1:                               ; CODE XREF: sub_6FE3:loc_7032↓j
                                        ; sub_6FE3+55↓j
                jmp     short loc_6FA4
sub_6F82        endp


; =============== S U B R O U T I N E =======================================


sub_6FE3        proc near               ; CODE XREF: DOSCODE:C2D9↓p
                test    ax, 0FFD8h
                jz      short loc_6FFA

loc_6FE8:                               ; CODE XREF: sub_6FE3+3D↓j
                call    sub_51CA
                mov     byte ptr ds:327h, 7
                mov     byte ptr ds:326h, 4
                mov     ax, 5
                stc
                retn
; ---------------------------------------------------------------------------

loc_6FFA:                               ; CODE XREF: sub_6FE3+3↑j
                call    TestNet
                jnb     short loc_7007
                push    ax
                mov     ax, 110Eh
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES
                                        ; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
                                        ; SDA CDS pointer -> current directory
                                        ; STACK: WORD new file attributes
                                        ; Return: CF set on error
                pop     bx
                retn
; ---------------------------------------------------------------------------

loc_7007:                               ; CODE XREF: sub_6FE3+1A↑j
                call    ECritDisk
                push    ax
                mov     byte ptr ds:34Ch, 1
                call    sub_8B99
                jnb     short loc_7018
                pop     bx
                jmp     short loc_6F9A
; ---------------------------------------------------------------------------

loc_7018:                               ; CODE XREF: sub_6FE3+30↑j
                or      ah, ah
                jns     short loc_7022
                pop     ax
                call    LCritDisk
                jmp     short loc_6FE8
; ---------------------------------------------------------------------------

loc_7022:                               ; CODE XREF: sub_6FE3+37↑j
                pop     ax
                cmp     word ptr ds:5E2h, 0FFFFh
                jz      short loc_7034
                call    REN_DEL_Check
                jnb     short loc_703A
                mov     ax, 20h ; ' '

loc_7032:                               ; CODE XREF: sub_6FE3+7A↓j
                jmp     short loc_6FE1
; ---------------------------------------------------------------------------

loc_7034:                               ; CODE XREF: sub_6FE3+45↑j
                mov     ax, 5
                stc
                jmp     short loc_6FE1
; ---------------------------------------------------------------------------

loc_703A:                               ; CODE XREF: sub_6FE3+4A↑j
                les     di, ds:5E2h
                and     byte ptr es:[bx+0Bh], 0D8h
                or      es:[bx+0Bh], al
                call    sub_AD58
                mov     al, ds:576h
                push    dx
                push    di
                mov     ah, 0
                mov     dl, al
                mov     di, bx
                call    FastOpen_Update
                pop     di
                pop     dx
                call    FLUSHBUF
                jnb     short loc_7032
                jmp     loc_6FA0
sub_6FE3        endp


; =============== S U B R O U T I N E =======================================


sub_7062        proc near               ; CODE XREF: sub_6F82+13↑p
                or      ss:FastOpenFlg, 1
                call    sub_8B99
                pushf
                and     ss:FastOpenFlg, 80h
                popf
                retn
sub_7062        endp


; =============== S U B R O U T I N E =======================================


DOS_DUP         proc near               ; CODE XREF: $DUP_PDB+6D↑p
                mov     es, cs:DosDSeg
                les     di, es:59Eh

loc_707E:                               ; CODE XREF: DOSCODE:loc_BC01↓p
                call    sub_576D
                jnz     short loc_7086
                call    sub_92CA

loc_7086:                               ; CODE XREF: DOS_DUP+D↑j
                inc     word ptr es:[di]
                retn
DOS_DUP         endp

; ---------------------------------------------------------------------------
DOS_CREATE      db  32h ; 2             ; DATA XREF: $CREAT+1↓o
                db 0E4h
; ---------------------------------------------------------------------------

loc_708C:                               ; CODE XREF: DOSCODE:7153↓j
                test    al, 80h
                jnz     short loc_70A1
                test    al, 8
                jz      short loc_709B
                or      byte ptr ds:611h, 80h
                mov     al, 8

loc_709B:                               ; CODE XREF: DOSCODE:7092↑j
                or      al, 20h
                test    al, 50h
                jz      short loc_70A9

loc_70A1:                               ; CODE XREF: DOSCODE:708E↑j
                mov     ax, 5
                call    sub_51CA
                jmp     short loc_710B
; ---------------------------------------------------------------------------

loc_70A9:                               ; CODE XREF: DOSCODE:709F↑j
                les     di, ds:59Eh
                push    es
                les     si, ds:5A2h
                cmp     si, 0FFFFh
                jnz     short loc_70D2
                pop     es
                test    byte ptr ds:5F6h, 1
                jz      short loc_70CC

loc_70BF:                               ; CODE XREF: DOSCODE:70E9↓j
                push    ax
                mov     ax, 112Eh

loc_70C3:                               ; CODE XREF: DOSCODE:70D0↓j
                                        ; DOSCODE:70EF↓j
                int     2Fh             ; Multiplex - DOS 4 IFSFUNC.EXE - ???
                                        ; SS = DS = DOS CS, STACK: WORD ???   low byte = ???
                                        ; Return: CF set on error
                                        ; CF clear if successful
                pop     bx
                mov     byte ptr ds:5F6h, 0
                retn
; ---------------------------------------------------------------------------

loc_70CC:                               ; CODE XREF: DOSCODE:70BD↑j
                push    ax
                mov     ax, 1118h
                jmp     short loc_70C3
; ---------------------------------------------------------------------------

loc_70D2:                               ; CODE XREF: DOSCODE:70B5↑j
                test    byte ptr es:[si+44h], 80h
                pop     es
                jz      short loc_70F1
                call    sub_71A7
                jb      short loc_70E4
                or      word ptr es:[di+2], 2

loc_70E4:                               ; CODE XREF: DOSCODE:70DD↑j
                test    byte ptr ds:5F6h, 1
                jnz     short loc_70BF
                push    ax
                mov     ax, 1117h
                jmp     short loc_70C3
; ---------------------------------------------------------------------------

loc_70F1:                               ; CODE XREF: DOSCODE:70D8↑j
                call    sub_71A7
                jb      short loc_70FB
                or      word ptr es:[di+2], 2

loc_70FB:                               ; CODE XREF: DOSCODE:70F4↑j
                call    ECritDisk
                call    sub_951A
                jnb     short loc_711A
                mov     byte ptr ds:0AA1h, 0FFh
                call    LCritDisk

loc_710B:                               ; CODE XREF: DOSCODE:70A7↑j
                                        ; DOSCODE:7915↓j
                mov     bx, 7112h
                xlat    byte ptr cs:[bx]
                stc
                retn
; ---------------------------------------------------------------------------
                db    0
                db    5
                db  52h ; R
                db  50h ; P
                db    3
                db    5
                db  20h
                db    2
; ---------------------------------------------------------------------------

loc_711A:                               ; CODE XREF: DOSCODE:7101↑j
                call    FastOpen_Delete
                mov     al, ds:56Dh
                test    al, 8
                jz      short loc_7140
                les     di, ds:5A2h
                mov     ah, es:[di]
                sub     ah, 41h ; 'A'
                mov     ds:0AA1h, ah
                mov     bh, 1
                call    sub_7156
                call    ECritDisk
                call    FATREAD_CDS
                call    LCritDisk

loc_7140:                               ; CODE XREF: DOSCODE:7122↑j
                mov     ax, 2
                les     di, ds:59Eh
                call    dword ptr ds:0C8h
                call    LCritDisk
                jmp     SET_SFT_MODE
; ---------------------------------------------------------------------------

DOS_Create_New:                         ; DATA XREF: $CreateNewFile+1↓o
                mov     ah, 1
                jmp     loc_708C

; =============== S U B R O U T I N E =======================================


sub_7156        proc near               ; CODE XREF: DOS_DELETE+14C↑p
                                        ; DOSCODE:7134↑p
                push    ax
                push    es
                push    di
                inc     ah
                mov     bl, ah
                mov     al, 0Dh
                mov     cx, 4866h
                mov     dx, 0DA0h

loc_7165:                               ; CODE XREF: sub_7156+24↓j
                push    cx
                push    bx
                push    dx
                xor     bh, bh
                call    $IOCTL
                pop     dx
                pop     bx
                pop     cx
                jnb     short loc_717C
                cmp     ch, 48h ; 'H'
                stc
                jnz     short loc_71A1
                mov     ch, 8
                jmp     short loc_7165
; ---------------------------------------------------------------------------

loc_717C:                               ; CODE XREF: sub_7156+1A↑j
                or      bh, bh
                jz      short loc_7185
                mov     si, 54Bh
                jmp     short loc_7188
; ---------------------------------------------------------------------------

loc_7185:                               ; CODE XREF: sub_7156+28↑j
                mov     si, 0DC1h

loc_7188:                               ; CODE XREF: sub_7156+2D↑j
                mov     di, dx
                add     di, 6
                push    ss
                pop     ds
                assume ds:DOSCODE
                push    ss
                pop     es
                assume es:DOSCODE
                push    cx
                mov     cx, 0Bh
                rep movsb
                pop     cx
                mov     cl, 46h ; 'F'
                mov     al, 0Dh
                xor     bh, bh
                call    $IOCTL

loc_71A1:                               ; CODE XREF: sub_7156+20↑j
                push    ss
                pop     ds
                pop     di
                pop     es
                assume es:nothing
                pop     ax
                retn
sub_7156        endp


; =============== S U B R O U T I N E =======================================


sub_71A7        proc near               ; CODE XREF: DOSCODE:70DA↑p
                                        ; DOSCODE:loc_70F1↑p ...
                test    ss:EXTOPEN_ON, 1
                jz      short locret_71BA
                push    ax
                mov     ax, ss:SAVE_BX
                or      es:[di+2], ax
                pop     ax
                stc

locret_71BA:                            ; CODE XREF: sub_71A7+6↑j
                retn
sub_71A7        endp

; ---------------------------------------------------------------------------

DOS_OPEN:                               ; DATA XREF: $OPEN+7↓o
                mov     NoSetDir, 0
                call    sub_72FE
                jb      short locret_71EB
                les     di, THISSFT
                xor     ah, ah
                mov     es:[di+2], al
                push    es
                les     si, THISCDS
                cmp     si, 0FFFFh
                jnz     short loc_7204
                pop     es
                test    EXTOPEN_ON, 1
                jz      short loc_71EC

loc_71E1:                               ; CODE XREF: DOSCODE:7212↓j
                mov     al, byte ptr SAVE_BX
                push    ax
                mov     ax, 112Eh
                int     2Fh             ; Multiplex - DOS 4 IFSFUNC.EXE - ???
                                        ; SS = DS = DOS CS, STACK: WORD ???   low byte = ???
                                        ; Return: CF set on error
                                        ; CF clear if successful
                pop     bx

locret_71EB:                            ; CODE XREF: DOSCODE:71C3↑j
                retn
; ---------------------------------------------------------------------------

loc_71EC:                               ; CODE XREF: DOSCODE:71DF↑j
                                        ; DOSCODE:7214↓j
                test    DOS_FLAG, 1
                jz      short loc_71FC
                test    byte ptr DOS34_FLAG+1, 8
                jz      short loc_71FC
                mov     al, 23h ; '#'

loc_71FC:                               ; CODE XREF: DOSCODE:71F1↑j
                                        ; DOSCODE:71F8↑j
                push    ax
                mov     ax, 1116h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE
                                        ; ES:DI -> uninitialized SFT, SS = DOS CS
                                        ; SDA first filename pointer -> fully-qualified name of file to open
                                        ; STACK: WORD file open mode
                                        ; Return: CF set on error
                pop     bx
                retn
; ---------------------------------------------------------------------------

loc_7204:                               ; CODE XREF: DOSCODE:71D7↑j
                test    word ptr es:[si+43h], 8000h
                pop     es
                jz      short loc_7216
                test    EXTOPEN_ON, 1
                jnz     short loc_71E1
                jmp     short loc_71EC
; ---------------------------------------------------------------------------

loc_7216:                               ; CODE XREF: DOSCODE:720B↑j
                call    ECritDisk
                or      FastOpenFlg, 5
                call    sub_8B99
                jnb     short loc_7243
                jnz     short loc_7239
                or      cl, cl
                jz      short loc_7239
                mov     ax, 2

loc_722C:                               ; CODE XREF: DOSCODE:723C↓j
                                        ; DOSCODE:7241↓j
                and     ss:FastOpenFlg, 80h
                stc
                call    LCritDisk
                jmp     locret_72BF
; ---------------------------------------------------------------------------

loc_7239:                               ; CODE XREF: DOSCODE:7223↑j
                                        ; DOSCODE:7227↑j
                mov     ax, 3
                jmp     short loc_722C
; ---------------------------------------------------------------------------

loc_723E:                               ; CODE XREF: DOSCODE:loc_7243↓j
                                        ; DOSCODE:7253↓j ...
                mov     ax, 5
                jmp     short loc_722C
; ---------------------------------------------------------------------------

loc_7243:                               ; CODE XREF: DOSCODE:7221↑j
                jz      short loc_723E
                or      ah, ah
                js      short loc_7288
                mov     es, word ptr CURBUF+2
                assume es:DOSCODE
                mov     al, es:[bx+0Bh]
                test    al, 8
                jnz     short loc_723E
                test    al, 1
                jz      short loc_7288
                push    ds
                push    si
                lds     si, THISSFT
                assume ds:nothing
                mov     cx, [si+2]
                test    cx, 8000h
                jnz     short loc_7272
                mov     dl, cl
                and     dl, 0F0h
                cmp     dl, 70h ; 'p'
                jnz     short loc_727A

loc_7272:                               ; CODE XREF: DOSCODE:7266↑j
                and     cx, 0FFFCh
                mov     [si+2], cx
                jmp     short loc_7286
; ---------------------------------------------------------------------------

loc_727A:                               ; CODE XREF: DOSCODE:7270↑j
                and     cl, 3
                cmp     cl, 0
                jz      short loc_7286
                pop     si
                pop     ds
                jmp     short loc_723E
; ---------------------------------------------------------------------------

loc_7286:                               ; CODE XREF: DOSCODE:7278↑j
                                        ; DOSCODE:7280↑j
                pop     si
                pop     ds

loc_7288:                               ; CODE XREF: DOSCODE:7247↑j
                                        ; DOSCODE:7257↑j
                call    DOOPEN
                and     ss:FastOpenFlg, 80h
                call    sub_72DE
                jnb     short loc_729B
                call    LCritDisk
                jmp     short locret_72BF
; ---------------------------------------------------------------------------

loc_729B:                               ; CODE XREF: DOSCODE:7294↑j
                mov     ax, 3
                les     di, ds:59Eh
                assume es:nothing
                call    dword ptr ds:0C8h
                call    LCritDisk

SET_SFT_MODE:                           ; CODE XREF: DOSCODE:714E↑j
                                        ; DATA XREF: DOSCODE:40D7↑o
                les     di, ds:THISSFT
                call    sub_92CA
                test    word ptr es:[di+2], 8000h
                jz      short locret_72BF
                mov     ax, ds:330h
                mov     es:[di+31h], ax

locret_72BF:                            ; CODE XREF: DOSCODE:7236↑j
                                        ; DOSCODE:7299↑j ...
                retn

; =============== S U B R O U T I N E =======================================


SHARE_ERROR     proc near               ; CODE XREF: sub_72DE+17↓p
                                        ; DATA XREF: DOSCODE:40D5↑o
                test    word ptr es:[di+2], 8000h
                jnz     short loc_72D4
                mov     cl, es:[di+2]
                and     cl, 0F0h
                cmp     cl, 0
                jnz     short loc_72D9

loc_72D4:                               ; CODE XREF: SHARE_ERROR+6↑j
                call    SHARE_VIOLATION
                jnb     short locret_72BF

loc_72D9:                               ; CODE XREF: SHARE_ERROR+12↑j
                mov     ax, 20h ; ' '
                stc
                retn
SHARE_ERROR     endp


; =============== S U B R O U T I N E =======================================


sub_72DE        proc near               ; CODE XREF: DOSCODE:7291↑p
                call    ECritDisk

loc_72E1:                               ; CODE XREF: sub_72DE+1A↓j
                mov     cx, ds:1Ah

loc_72E5:                               ; CODE XREF: sub_72DE+11↓j
                push    cx
                call    sub_C62A
                pop     cx
                jnb     short loc_72FA
                call    Idle
                loop    loc_72E5
                les     di, ds:59Eh
                call    SHARE_ERROR
                jnb     short loc_72E1

loc_72FA:                               ; CODE XREF: sub_72DE+C↑j
                call    LCritDisk
                retn
sub_72DE        endp


; =============== S U B R O U T I N E =======================================


sub_72FE        proc near               ; CODE XREF: DOSCODE:71C0↑p
                mov     ds:56Eh, al
                push    bx
                mov     bl, al
                and     bl, 0F0h
                cmp     byte ptr ds:572h, 0
                jz      short loc_7313
                cmp     bl, 70h ; 'p'
                jz      short loc_7318

loc_7313:                               ; CODE XREF: sub_72FE+E↑j
                cmp     bl, 40h ; '@'
                ja      short loc_7325

loc_7318:                               ; CODE XREF: sub_72FE+13↑j
                mov     bl, al
                and     bl, 3
                cmp     bl, 2
                ja      short loc_7325
                pop     bx
                clc
                retn
; ---------------------------------------------------------------------------

loc_7325:                               ; CODE XREF: sub_72FE+18↑j
                                        ; sub_72FE+22↑j
                mov     ax, 0Ch
                pop     bx
                stc
                retn
sub_72FE        endp


; =============== S U B R O U T I N E =======================================


DISK_INFO       proc near               ; CODE XREF: DOSCODE:4DCD↑p
                                        ; DOSCODE:fill_efs_struc_b↑p ...
                call    TestNet
                jnb     short LOCAL_DSK_INFO
                xor     si, si
                xor     di, di
                mov     ax, 110Ch
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - GET DISK SPACE
                                        ; ES:DI -> current directory
                                        ; Return: AL = sectors per cluster, BX = total clusters
                                        ; CX = bytes per sector, DX = number of available clusters
                cmp     bx, 0FFFFh
                jnz     short dsk_info_1
                mov     di, bx

dsk_info_1:                             ; CODE XREF: DISK_INFO+11↑j
                cmp     dx, 0FFFFh
                jnz     short disk_info_retn
                mov     si, dx

disk_info_retn:                         ; CODE XREF: DISK_INFO+18↑j
                retn
; ---------------------------------------------------------------------------

LOCAL_DSK_INFO:                         ; CODE XREF: DISK_INFO+3↑j
                call    set_exerr_locus_disk ; mov byte [EXTERR_LOCUS],errLOC_Disk
                call    ECritDisk
                call    FATREAD_CDS
                jb      short CRIT_LEAVE
                xor     ax, ax
                mov     ds:CLUSTNUM_HW, ax ; clear high word of cluster number
                mov     bx, 2           ; Get first FAT sector into CURBUF
                call    UNPACK

CRIT_LEAVE:                             ; CODE XREF: DISK_INFO+26↑j
                jnb     short dsk_info_2
                jmp     jmp_to_LCritDisk
; ---------------------------------------------------------------------------

dsk_info_2:                             ; CODE XREF: DISK_INFO:CRIT_LEAVE↑j
                lds     si, ds:CURBUF
                mov     ah, [si+24]     ; [SI+BUFINSIZ] ; get FAT ID BYTE
                push    ss
                pop     ds
                assume ds:DOSCODE
                xor     si, si
                mov     di, si
                mov     dx, es:[bp+1Fh] ; [ES:BP+DPB.FREE_CNT] ; get free count
                cmp     es:[bp+0Fh], si ; FAT32 (16 bit FAT size = 0) ?
                jz      short dsk_info_3 ; yes
                mov     cx, es:[bp+0Dh] ; [ES:BP+DPB.MAX_CLUSTER]
                jmp     short dsk_info_4
; ---------------------------------------------------------------------------

dsk_info_3:                             ; CODE XREF: DISK_INFO+4D↑j
                mov     di, es:[bp+2Fh] ; DPB.LAST_CLUSTER+2
                mov     cx, es:[bp+2Dh] ; DPB.LAST_CLUSTER
                mov     si, es:[bp+21h] ; DPB.FREE_CNT_HW ; hw of free cluster count
                cmp     dx, si          ; same (zero) ?

dsk_info_4:                             ; CODE XREF: DISK_INFO+53↑j
                jnz     short dsk_info_5 ; not same (not zero)
                inc     dx
                jz      short dsk_info_7 ; 0FFFFh -> 0 (free count is invalid/initial)
                                        ; free count calculation is needed
                dec     dx

dsk_info_5:                             ; CODE XREF: DISK_INFO:dsk_info_4↑j
                cmp     si, di          ; same hw ?
                jnz     short dsk_info_6 ; no
                cmp     dx, cx          ; same lw ?

dsk_info_6:                             ; CODE XREF: DISK_INFO+6B↑j
                jb      short dsk_info_12 ; free cluster count < last cluster number
                xor     dx, dx          ; 0

dsk_info_7:                             ; CODE XREF: DISK_INFO+66↑j
                xor     si, si          ; 0
                sub     cx, 1           ; last cluster number - 1 = number of clusters
                sbb     di, si
                or      byte ptr es:[bp+18h], 1 ; DPB.FIRST_ACCESS ; set first access

dsk_info_8:                             ; CODE XREF: DISK_INFO+A3↓j
                                        ; DISK_INFO+A7↓j
                push    si
                push    CCONTENT_HW
                push    di
                call    UNPACK
                pop     di
                pop     CCONTENT_HW
                pop     si
                jb      short jmp_to_LCritDisk
                jnz     short NOTFREECLUS
                inc     dx              ; a free one
                jnz     short NOTFREECLUS
                inc     si              ; increase hw of free cluster count

NOTFREECLUS:                            ; CODE XREF: DISK_INFO+90↑j
                                        ; DISK_INFO+93↑j
                inc     bx              ; next cluster
                jnz     short ReturnVals
                inc     CLUSTNUM_HW     ; increase hw of (next) cluster number

ReturnVals:                             ; CODE XREF: DISK_INFO+97↑j
                sub     cx, 1           ; decrease remain cluster count for calculation
                sbb     di, 0
                jnz     short dsk_info_8
                jcxz    short dsk_info_9 ; calculation completed
                jmp     short dsk_info_8
; ---------------------------------------------------------------------------

dsk_info_9:                             ; CODE XREF: DISK_INFO+A5↑j
                mov     di, CLUSTNUM_HW
                sub     bx, 1
                sbb     di, 0           ; di:bx = last cluster number

dsk_info_10:                            ; CODE XREF: DISK_INFO+DC↓j
                xor     cx, cx
                sub     bx, 1
                sbb     di, cx          ; di:bx = number of clusters
                mov     al, es:[bp+4]   ; [ES:BP+DPB.CLUSTER_MASK] ; spc -1
                inc     al              ; sectors per cluster
                mov     es:[bp+1Fh], dx ; [ES:BP+DPB.FREE_CNT] ; free cluster count, lw
                cmp     es:[bp+0Fh], cx ; FAT32 (16 bit FAT size = 0) ?
                jnz     short dsk_info_11 ; no
                mov     es:[bp+21h], si ; DPB.FREE_CNT_HW ; hw of free cluster count
                call    update_fat32_fsinfo

dsk_info_11:                            ; CODE XREF: DISK_INFO+C8↑j
                mov     cx, es:[bp+2]   ; [ES:BP+DPB.SECTOR_SIZE] ; bytes per sector
                clc

jmp_to_LCritDisk:                       ; CODE XREF: DISK_INFO+35↑j
                                        ; DISK_INFO+8E↑j
                call    LCritDisk
                retn
; ---------------------------------------------------------------------------

dsk_info_12:                            ; CODE XREF: DISK_INFO:dsk_info_6↑j
                mov     bx, cx
                jmp     short dsk_info_10
DISK_INFO       endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR sub_742B

loc_7409:                               ; CODE XREF: sub_742B+8↓j
                push    ax
                push    dx
                mul     cx
                cmp     dx, 0
                jnz     short loc_7415
                cmp     ax, 4000h

loc_7415:                               ; CODE XREF: sub_742B-1B↑j
                pop     dx
                pop     ax
                jbe     short loc_7427
                xor     di, di
                mov     bx, 0FFFEh
                or      si, si
                jz      short locret_7426
                mov     si, di
                mov     dx, bx

locret_7426:                            ; CODE XREF: sub_742B-B↑j
                retn
; ---------------------------------------------------------------------------

loc_7427:                               ; CODE XREF: sub_742B-14↑j
                shl     ax, 1
                shr     di, 1
; END OF FUNCTION CHUNK FOR sub_742B

; =============== S U B R O U T I N E =======================================


sub_742B        proc near

; FUNCTION CHUNK AT 7409 SIZE 00000022 BYTES

                rcr     bx, 1
                shr     si, 1
                rcr     dx, 1

loc_7431:                               ; CODE XREF: DOSCODE:4DDF↑p
                                        ; DOSCODE:5200↑p
                or      di, di
                jnz     short loc_7409
                retn
sub_742B        endp


; =============== S U B R O U T I N E =======================================


update_fat32_fsinfo proc near           ; CODE XREF: DOSCODE:5184↑p
                                        ; DOSCODE:533F↑p ...
                push    cx
                push    dx
                xor     cx, cx
                mov     dx, es:[bp+25h]
                cmp     es:[bp+0Fh], cx
                jnz     short loc_7449
                cmp     dx, 0FFFFh
                jnz     short loc_7451

loc_7449:                               ; CODE XREF: update_fat32_fsinfo+C↑j
                                        ; update_fat32_fsinfo+B0↓j
                pop     dx
                pop     cx
                and     byte ptr es:[bp+18h], 0F4h
                retn
; ---------------------------------------------------------------------------

loc_7451:                               ; CODE XREF: update_fat32_fsinfo+11↑j
                push    ax
                push    bx
                push    di
                push    si
                push    ds
                cmp     ss:BuffInHMA, 0
                jz      short loc_7469
                lds     di, ss:LoMemBuff
                assume ds:nothing
                sub     di, 18h
                clc
                jmp     short loc_7475
; ---------------------------------------------------------------------------

loc_7469:                               ; CODE XREF: update_fat32_fsinfo+26↑j
                push    es
                push    bp
                call    GETCURHEAD
                push    dx
                call    BUFWRITE
                pop     dx
                pop     bp
                pop     es

loc_7475:                               ; CODE XREF: update_fat32_fsinfo+31↑j
                jb      short loc_74E1
                xor     cx, cx
                lea     bx, [di+18h]
                mov     ss:ALLOWED, 18h
                mov     ss:HIGH_SECTOR, cx
                inc     cx
                push    bx
                push    dx
                call    DREAD
                pop     dx
                pop     bx
                jb      short loc_74E1
                cmp     word ptr [bx], 5252h
                jnz     short loc_74E1
                cmp     word ptr [bx+2], 4161h
                jnz     short loc_74E1
                cmp     word ptr [bx+1E4h], 7272h
                jnz     short loc_74E1
                cmp     word ptr [bx+1E6h], 6141h
                jnz     short loc_74E1
                cmp     word ptr [bx+1FEh], 0AA55h
                jnz     short loc_74E1
                mov     ax, es:[bp+1Fh]
                mov     [bx+1E8h], ax
                mov     ax, es:[bp+21h]
                mov     [bx+1EAh], ax
                mov     ax, es:[bp+39h]
                mov     [bx+1ECh], ax
                mov     ax, es:[bp+3Bh]
                mov     [bx+1EEh], ax
                xor     cx, cx
                mov     ss:HIGH_SECTOR, cx
                inc     cx
                call    DWRITE

loc_74E1:                               ; CODE XREF: update_fat32_fsinfo:loc_7475↑j
                                        ; update_fat32_fsinfo+59↑j ...
                pop     ds
                pop     si
                pop     di
                pop     bx
                pop     ax
                jmp     loc_7449
update_fat32_fsinfo endp


; =============== S U B R O U T I N E =======================================


DOS_SEARCH_FIRST proc near              ; CODE XREF: DOSCODE:64BB↑p
                                        ; DOSCODE:65BD↑p ...
                les     di, ds:THISCDS
                cmp     di, 0FFFFh
                jnz     short loc_74F8
                mov     ax, 1119h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - ???
                retn
; ---------------------------------------------------------------------------

loc_74F8:                               ; CODE XREF: DOS_SEARCH_FIRST+7↑j
                test    byte ptr es:[di+44h], 80h
                jz      short loc_7505
                mov     ax, 111Bh
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - FINDFIRST
                                        ; SS = DS = DOS CS, [DTA] = uninitialized 21-byte findfirst search data
                                        ; SDA first filename pointer -> fully-qualified search template
                                        ; SDA CDS pointer -> current directory
                                        ; Return: CF set on error
                retn
; ---------------------------------------------------------------------------

loc_7505:                               ; CODE XREF: DOS_SEARCH_FIRST+14↑j
                call    ECritDisk
                test    byte ptr ds:612h, 4
                jz      short loc_7514
                or      ds:FastOpenFlg, 1

loc_7514:                               ; CODE XREF: DOS_SEARCH_FIRST+24↑j
                mov     ds:NoSetDir, 1
                mov     si, ss
                mov     ds, si
                assume ds:DOSCODE
                mov     si, WFP_START

loc_7521:                               ; CODE XREF: DOS_SEARCH_FIRST+3F↓j
                lodsb
                or      al, al
                jz      short loc_752F
                cmp     al, 3Fh ; '?'
                jnz     short loc_7521
                and     FastOpenFlg, 80h

loc_752F:                               ; CODE XREF: DOS_SEARCH_FIRST+3B↑j
                call    sub_8B99
                jnb     short loc_754D
                jnz     short loc_7548
                or      cl, cl
                jz      short loc_7548

loc_753A:                               ; CODE XREF: DOS_SEARCH_FIRST+D6↓j
                                        ; sub_7639:loc_7682↓j
                mov     ax, 12h

loc_753D:                               ; CODE XREF: DOS_SEARCH_FIRST+62↓j
                and     ss:FastOpenFlg, 80h
                stc
                call    LCritDisk
                retn
; ---------------------------------------------------------------------------

loc_7548:                               ; CODE XREF: DOS_SEARCH_FIRST+4B↑j
                                        ; DOS_SEARCH_FIRST+4F↑j
                mov     ax, 3
                jmp     short loc_753D
; ---------------------------------------------------------------------------

loc_754D:                               ; CODE XREF: DOS_SEARCH_FIRST+49↑j
                or      ah, ah
                jns     short loc_755B
                mov     LASTENT, 0FFFFh
                inc     FOUND_DEV

loc_755B:                               ; CODE XREF: DOS_SEARCH_FIRST+66↑j
                les     di, DMAADD
                mov     si, WFP_START
                lodsb
                sub     al, 40h ; '@'
                stosb

loc_7567:                               ; CODE XREF: sub_7639+45↓j
                les     di, DMAADD
                inc     di
                push    ds
                test    FastOpenFlg, 10h
                jz      short loc_757C
                mov     si, bx
                mov     ds, word ptr CURBUF+2
                jmp     short loc_757F
; ---------------------------------------------------------------------------

loc_757C:                               ; CODE XREF: DOS_SEARCH_FIRST+89↑j
                mov     si, 54Bh

loc_757F:                               ; CODE XREF: DOS_SEARCH_FIRST+91↑j
                movsb
                cmp     byte ptr es:[di-1], 5
                jnz     short loc_758C
                mov     byte ptr es:[di-1], 0E5h

loc_758C:                               ; CODE XREF: DOS_SEARCH_FIRST+9C↑j
                mov     cx, 5
                rep movsw
                pop     ds
                assume ds:nothing
                mov     al, ds:56Bh
                stosb
                push    ax
                mov     ax, ds:348h
                stosw
                mov     ax, ds:5C2h
                stosw
                mov     ax, ds:0ADCh
                stosw
                add     di, 2
                pop     ax
                or      ah, ah
                js      short loc_75C6
                cmp     word ptr ds:5E2h, 0FFFFh
                jnz     short loc_75C2
                test    byte ptr ds:1146h, 10h
                jnz     short loc_75C2
                mov     word ptr es:[di-8], 0FFFFh
                jmp     loc_753A
; ---------------------------------------------------------------------------

loc_75C2:                               ; CODE XREF: DOS_SEARCH_FIRST+C7↑j
                                        ; DOS_SEARCH_FIRST+CE↑j
                mov     ds, word ptr ds:5E4h

loc_75C6:                               ; CODE XREF: DOS_SEARCH_FIRST+C0↑j
                mov     si, bx
                mov     cx, 10h
                mov     ax, di
                rep movsw
                mov     di, ax
                cmp     byte ptr es:[di], 5
                jnz     short loc_75DB
                mov     byte ptr es:[di], 0E5h

loc_75DB:                               ; CODE XREF: DOS_SEARCH_FIRST+EC↑j
                and     ss:FastOpenFlg, 80h
                push    ss
                pop     ds
                assume ds:DOSCODE
                clc
                call    LCritDisk
                retn
DOS_SEARCH_FIRST endp

; ---------------------------------------------------------------------------
                les     di, DMAADD

; =============== S U B R O U T I N E =======================================


DOS_SEARCH_NEXT proc near               ; CODE XREF: DOSCODE:656A↑p
                                        ; DOSCODE:6617↑p
                mov     al, es:[di]
                test    al, 80h
                jz      short loc_75F9
                mov     ax, 111Ch
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - FINDNEXT
                                        ; SS = DS = DOS CS, [DTA] = 21-byte findfirst search data
                                        ; Return: CF set on error, AX = DOS error code
                                        ; CF clear if successful
                retn
; ---------------------------------------------------------------------------

loc_75F9:                               ; CODE XREF: DOS_SEARCH_NEXT+5↑j
                mov     EXTERR_LOCUS, 2
                call    ECritDisk
                mov     word ptr THISCDS, offset DUMMYCDS
                mov     word ptr THISCDS+2, ds
                add     al, 40h ; '@'
                call    InitCDS
                jb      short loc_7682
                les     di, THISCDS
                les     bp, es:[di+45h]
                mov     word ptr THISDPB, bp
                mov     word ptr THISDPB+2, es
                mov     al, es:[bp+0]
                mov     THISDRV, al
                mov     CREATING, 0E500h
                mov     NoSetDir, 1
                lds     si, DMAADD
                assume ds:nothing
                lodsb
DOS_SEARCH_NEXT endp


; =============== S U B R O U T I N E =======================================


sub_7639        proc near               ; CODE XREF: DOS_RENAME+1F6↑p
                mov     di, ss
                mov     es, di
                assume es:DOSCODE
                mov     di, 54Bh
                movsb
                mov     cx, 5
                rep movsw
                lodsb
                mov     ss:ATTRIB, al
                lodsw
                or      ax, ax
                js      short loc_7682
                push    ax
                lodsw
                mov     bx, ax
                lodsw
                mov     bp, ss
                mov     ds, bp
                assume ds:DOSCODE
                les     bp, THISDPB
                assume es:nothing
                cmp     word ptr es:[bp+0Fh], 0
                jz      short loc_7666
                xor     ax, ax

loc_7666:                               ; CODE XREF: sub_7639+29↑j
                mov     ROOTCLUST_HW, ax
                call    SETDIRSRCH
                jb      short loc_7681
                call    sub_8E53
                pop     ax
                call    loc_8903
                jb      short loc_7682
                call    sub_87F7
                jb      short loc_7682
                xor     ah, ah
                jmp     loc_7567
; ---------------------------------------------------------------------------

loc_7681:                               ; CODE XREF: sub_7639+33↑j
                pop     ax

loc_7682:                               ; CODE XREF: DOS_SEARCH_NEXT+24↑j
                                        ; sub_7639+15↑j ...
                jmp     loc_753A
sub_7639        endp


; =============== S U B R O U T I N E =======================================


sub_7685        proc near               ; CODE XREF: sub_A242+137↓p
                mov     es, ss:CurrentPDB
                mov     cx, es:32h

loc_768F:                               ; CODE XREF: sub_7685+12↓j
                mov     bx, cx
                push    cx
                dec     bx
                call    $CLOSE
                pop     cx
                loop    loc_768F
                push    ss
                pop     ds
                mov     ax, 111Dh
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - CLOSE ALL REMOTE FILES FOR PROCESS
                                        ; DS???, SS = DOS CS
                call    MFTCloseP
                les     di, ss:SFTFCB

loc_76A9:                               ; CODE XREF: sub_7685+4D↓j
                mov     cx, es
                or      cx, di
                jcxz    short loc_76D4
                push    di
                mov     cx, es:[di+4]
                jcxz    short loc_76CB
                lea     di, [di+6]
                mov     ax, ss:PROC_ID

loc_76BD:                               ; CODE XREF: sub_7685+44↓j
                cmp     es:[di+31h], ax
                jnz     short loc_76C6
                call    SFT_FREE

loc_76C6:                               ; CODE XREF: sub_7685+3C↑j
                add     di, 3Bh ; ';'
                loop    loc_76BD

loc_76CB:                               ; CODE XREF: sub_7685+2F↑j
                pop     di
                les     di, es:[di]
                cmp     di, 0FFFFh
                jnz     short loc_76A9

loc_76D4:                               ; CODE XREF: sub_7685+28↑j
                xor     bx, bx

loc_76D6:                               ; CODE XREF: sub_7685+77↓j
                push    bx
                call    SFFromSFN
                pop     bx
                jnb     short loc_76DE
                retn
; ---------------------------------------------------------------------------

loc_76DE:                               ; CODE XREF: sub_7685+56↑j
                cmp     word ptr es:[di], 0FFFFh
                jnz     short loc_76FB
                mov     ax, ss:PROC_ID
                cmp     es:[di+31h], ax
                jnz     short loc_76FB
                mov     ax, ss:USER_ID
                sub     ax, es:[di+2Fh]
                jnz     short loc_76FB
                call    SFT_FREE

loc_76FB:                               ; CODE XREF: sub_7685+5D↑j
                                        ; sub_7685+67↑j ...
                inc     bx
                jmp     short loc_76D6
sub_7685        endp

; ---------------------------------------------------------------------------

DOS_CLOSE:                              ; CODE XREF: DOSCODE:5D4A↑p
                                        ; sub_5E7C+C1↑p ...
                les     di, THISSFT
                mov     bx, es:[di+5]
                test    bh, 80h
                jz      short loc_7711
                mov     ax, 1106h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE FILE
                                        ; ES:DI -> SFT
                                        ; SFT DPB field -> DPB of drive containing file
                                        ; Return: CF set on error, AX = DOS error code
                                        ; CF clear if successful
                retn
; ---------------------------------------------------------------------------

loc_7711:                               ; CODE XREF: DOSCODE:7709↑j
                call    ECritDisk
                call    sub_78E3
                call    FREE_SFT
                push    ss
                pop     ds
                push    ax
                push    bx
                call    ShareEnd
                pop     bx
                pop     ax

loc_7723:                               ; CODE XREF: DOS_COMMIT+21↓p
                push    ax
                test    bx, 0C0h
                jz      short loc_772D
                jmp     loc_782D
; ---------------------------------------------------------------------------

loc_772D:                               ; CODE XREF: DOSCODE:7728↑j
                call    sub_7873
                mov     al, 5
                jb      short loc_7772
                test    word ptr [si+2], 4
                jnz     short loc_7757
                push    ds
                push    bx
                lds     bx, [si+7]
                assume ds:nothing
                mov     bl, [bx]
                xor     bh, bh
                test    byte ptr ss:[bx+1308h], 4
                pop     bx
                jz      short loc_7756
                pop     ds
                push    ds
                call    DATE16
                mov     es:[di+12h], ax

loc_7756:                               ; CODE XREF: DOSCODE:774B↑j
                pop     ds

loc_7757:                               ; CODE XREF: DOSCODE:7739↑j
                push    di
                push    si
                lea     si, [si+20h]
                call    xchg_esdi_dssi
                call    sub_8875
                call    xchg_esdi_dssi
                pop     si
                pop     di
                jz      short loc_7775
                mov     di, si
                push    ds
                pop     es
                push    ss
                pop     ds
                assume ds:DOSCODE
                stc
                mov     al, 2

loc_7772:                               ; CODE XREF: DOSCODE:7732↑j
                jmp     loc_7855
; ---------------------------------------------------------------------------

loc_7775:                               ; CODE XREF: DOSCODE:7767↑j
                mov     al, [si+4]
                test    word ptr [si+2], 8000h
                jz      short loc_7789
                mov     ch, es:[di+0Bh]
                mov     ss:ATTRIB, al
                jmp     short loc_778D
; ---------------------------------------------------------------------------

loc_7789:                               ; CODE XREF: DOSCODE:777D↑j
                mov     es:[di+0Bh], al

loc_778D:                               ; CODE XREF: DOSCODE:7787↑j
                or      byte ptr es:[di+0Bh], 20h
                mov     ax, es:[di+1Ah]
                mov     ss:OLD_FIRSTCLUS, ax
                mov     ax, es:[di+14h]
                mov     ss:OLD_FIRSTCLUS_HW, ax
                mov     ax, [si+2Bh]
                mov     es:[di+1Ah], ax
                mov     ax, [si+2Dh]
                mov     es:[di+14h], ax
                push    ds
                lds     ax, [si+11h]
                assume ds:nothing
                mov     es:[di+1Ch], ax
                mov     word ptr es:[di+1Eh], ds
                pop     ds
                push    ds
                lds     ax, [si+0Dh]
                mov     es:[di+16h], ax
                mov     word ptr es:[di+18h], ds
                pop     ds
                test    byte ptr es:[bx+5], 40h
                jnz     short loc_77D9
                call    sub_AD64
                or      byte ptr es:[bx+5], 40h

loc_77D9:                               ; CODE XREF: DOSCODE:77CF↑j
                push    ds
                push    si
                mov     cx, [si+2Bh]
                mov     al, ss:THISDRV
                push    dx
                mov     ah, 0
                mov     dl, al
                push    bx
                mov     bx, [si+2Dh]
                or      bx, bx
                jnz     short loc_77FF
                or      cx, cx
                jnz     short loc_77FF
                mov     ah, 3
                mov     dh, [si+1Fh]
                lds     di, [si+1Bh]
                mov     cx, ds
                jmp     short loc_7819
; ---------------------------------------------------------------------------

loc_77FF:                               ; CODE XREF: DOSCODE:77ED↑j
                                        ; DOSCODE:77F1↑j
                cmp     bx, ss:OLD_FIRSTCLUS_HW
                jnz     short loc_780D
                cmp     cx, ss:OLD_FIRSTCLUS
                jz      short loc_7819

loc_780D:                               ; CODE XREF: DOSCODE:7804↑j
                mov     ah, 2
                mov     cx, ss:OLD_FIRSTCLUS
                mov     bx, ss:OLD_FIRSTCLUS_HW

loc_7819:                               ; CODE XREF: DOSCODE:77FD↑j
                                        ; DOSCODE:780B↑j
                push    ss
                pop     ds
                assume ds:DOSCODE
                xchg    bx, si
                call    FastOpen_Update
                xchg    bx, si
                pop     bx
                pop     dx
                call    FLUSHBUF
                pop     di
                pop     es
                mov     al, 5
                jb      short loc_7842

loc_782D:                               ; CODE XREF: DOSCODE:772A↑j
                test    word ptr es:[di+5], 8080h
                jnz     short loc_7855
                push    es
                push    bp
                les     bp, es:[di+7]
                call    update_fat32_fsinfo
                pop     bp
                pop     es
                jmp     short loc_7855
; ---------------------------------------------------------------------------

loc_7842:                               ; CODE XREF: DOSCODE:782B↑j
                push    ds
                push    bx
                lds     bx, es:[di+7]
                assume ds:nothing
                mov     bl, [bx]
                xor     bh, bh
                and     ss:drive_flags[bx], 0FBh ; clear bit 2
                pop     bx
                pop     ds
                stc

loc_7855:                               ; CODE XREF: DOSCODE:loc_7772↑j
                                        ; DOSCODE:7833↑j ...
                pushf
                call    DEV_CLOSE_SFT
; ---------------------------------------------------------------------------
                popf
                pop     cx
                pushf
                loop    NoFree
                call    SFT_FREE

NoFree:                                 ; CODE XREF: DOSCODE:785C↑j
                call    LCritDisk
                popf
                retn

; =============== S U B R O U T I N E =======================================


FREE_SFT        proc near               ; CODE XREF: DOSCODE:7717↑p
                                        ; DATA XREF: DOSCODE:40CF↑o
                pushf
                mov     ax, es:[di]
                dec     ax
                jnz     short loc_786E
                dec     ax

loc_786E:                               ; CODE XREF: FREE_SFT+5↑j
                xchg    ax, es:[di]
                popf
                retn
FREE_SFT        endp


; =============== S U B R O U T I N E =======================================


sub_7873        proc near               ; CODE XREF: DOSCODE:loc_772D↑p
                                        ; DOSCODE:BB66↓p
                call    set_exerr_locus_disk
                push    es
                push    di
                mov     dx, es:[di+1Dh]
                mov     ds:607h, dx
                push    dx
                mov     dx, es:[di+1Bh]
                push    dx
                call    FATREAD_SFT
                pop     dx
                pop     word ptr ds:607h
                jb      short loc_78B5
                xor     al, al
                mov     byte ptr ds:34Bh, 18h
                call    sub_AAB0
                jb      short loc_78B5
                pop     si
                pop     ds
                les     di, ss:CURBUF
                or      byte ptr es:[di+5], 4
                mov     bx, di
                lea     di, [di+18h]
                mov     al, 20h ; ' '
                mul     byte ptr [si+1Fh]
                add     di, ax
                retn
; ---------------------------------------------------------------------------

loc_78B5:                               ; CODE XREF: sub_7873+1B↑j
                                        ; sub_7873+27↑j
                pop     di
                pop     es

locret_78B7:                            ; CODE XREF: DOS_COMMIT+B↓j
                retn
sub_7873        endp


; =============== S U B R O U T I N E =======================================


DOS_COMMIT      proc near               ; CODE XREF: DOS_WRITE+4C↓p
                                        ; DOSCODE:B797↓p ...
                les     di, ds:59Eh
                mov     bx, es:[di+5]
                test    bl, 0C0h
                jnz     short locret_78B7
                test    bh, 80h
                jz      short loc_78D0
                mov     ax, 1107h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE
                                        ; ES:DI -> SFT
                                        ; SFT DPB field -> DPB of drive containing file
                                        ; Return: CF set on error, AX = DOS error code
                                        ; CF clear if successful

locret_78CF:                            ; CODE XREF: sub_78E3+4↓j
                retn
; ---------------------------------------------------------------------------

loc_78D0:                               ; CODE XREF: DOS_COMMIT+10↑j
                call    ECritDisk
                call    sub_78E3
                mov     ax, 0FFFFh
                call    loc_7723
DOS_COMMIT      endp

; ---------------------------------------------------------------------------
                db  9Ch
                db 0E8h
                db 0EAh
                db  19h
                db 0E9h
                db  7Eh ; ~
                db 0FFh

; =============== S U B R O U T I N E =======================================


sub_78E3        proc near               ; CODE XREF: DOSCODE:7714↑p
                                        ; DOS_COMMIT+1B↑p
                test    bx, 40C0h
                jnz     short locret_78CF
                push    ax
                push    bx
                call    DATE16
                mov     es:[di+0Fh], ax
                mov     es:[di+0Dh], dx
                xor     ax, ax
                call    dword ptr ds:0C8h
                pop     bx
                pop     ax
                retn
sub_78E3        endp

; ---------------------------------------------------------------------------

DOS_MKDIR:                              ; DATA XREF: DOSCODE:loc_67B7↑o
                call    TestNet
                jnb     short LOCAL_MKDIR
                mov     ax, 1103h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY
                                        ; SS = DOS CS
                                        ; SDA first filename pointer -> fully-qualified directory name
                                        ; SDA CDS pointer -> current directory
                                        ; Return: CF set on error, AX = DOS error code
                                        ; CF clear if successful
                retn
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR DOS_CHDIR

loc_790A:                               ; CODE XREF: DOSCODE:7935↓j
                                        ; DOSCODE:loc_7A1D↓j ...
                mov     ax, 5

loc_790D:                               ; CODE XREF: DOS_CHDIR+92↓j
                stc

loc_790E:                               ; CODE XREF: DOS_CHDIR:loc_79EF↓j
                call    LCritDisk
                retn
; END OF FUNCTION CHUNK FOR DOS_CHDIR
; ---------------------------------------------------------------------------

loc_7912:                               ; CODE XREF: DOSCODE:7930↓j
                call    LCritDisk
                jmp     loc_710B
; ---------------------------------------------------------------------------

LOCAL_MKDIR:                            ; CODE XREF: DOSCODE:7902↑j
                call    ECritDisk
                mov     word ptr ds:5A0h, ss
                mov     word ptr ds:59Eh, 43Eh
                mov     word ptr ds:471h, 0
                mov     al, 10h
                call    sub_951A
                jb      short loc_7912
                cmp     ax, 3
                jz      short loc_790A
                les     bp, ds:58Ah
                lds     di, ds:5E2h
                sub     si, di
                push    si
                lds     ax, [di+6]
                push    ds
                push    ax
                push    ss
                pop     ds
                assume ds:DOSCODE
                xor     ax, ax
                mov     dx, ax
                xchg    dx, DIRSTART_HW
                xchg    ax, DIRSTART
                cmp     word ptr es:[bp+0Fh], 0
                jnz     short loc_796C
                cmp     es:[bp+35h], ax
                jnz     short loc_796C
                cmp     es:[bp+37h], dx
                jnz     short loc_796C
                xor     ax, ax
                xor     dx, dx

loc_796C:                               ; CODE XREF: DOSCODE:795A↑j
                                        ; DOSCODE:7960↑j ...
                push    dx
                push    ax
                call    loc_9424
                jb      short loc_79F2
                call    loc_8903
                jb      short loc_79F2
                les     di, CURBUF
                call    sub_AD58
                add     di, 18h
                mov     ax, 202Eh
                mov     dx, DIRSTART_HW
                mov     word_AF2, dx
                mov     dx, DIRSTART
                call    sub_94F3
                mov     ax, 2E2Eh
                pop     dx
                pop     word_AF2
                call    sub_94F3
                les     bp, THISDPB
                mov     ALLOWED, 18h
                pop     dx
                pop     HIGH_SECTOR
                xor     al, al
                call    sub_AAB0
                jb      short loc_7A20
                mov     ax, DIRSTART_HW
                mov     dx, DIRSTART
                lds     di, CURBUF
                assume ds:nothing
                or      byte ptr [di+5], 4
                pop     si
                add     si, di
                mov     [si], dx
                mov     [si-6], ax
                xor     dx, dx
                mov     [si+2], dx
                mov     [si+4], dx

; =============== S U B R O U T I N E =======================================


sub_79D3        proc near               ; CODE XREF: DOSCODE:7A1A↓p
                                        ; DOS_CHDIR+133↓j
                test    byte ptr [di+5], 40h
                jnz     short loc_79E0
                call    sub_AD64
                or      byte ptr [di+5], 40h

loc_79E0:                               ; CODE XREF: sub_79D3+4↑j
                push    ss
                pop     ds
                assume ds:DOSCODE
                call    update_fat32_fsinfo
                mov     al, es:[bp+0]
                call    FLUSHBUF
                mov     ax, 5
sub_79D3        endp

; START OF FUNCTION CHUNK FOR DOS_CHDIR

loc_79EF:                               ; CODE XREF: DOS_CHDIR:loc_7A69↓j
                jmp     loc_790E
; END OF FUNCTION CHUNK FOR DOS_CHDIR
; ---------------------------------------------------------------------------

loc_79F2:                               ; CODE XREF: DOSCODE:7971↑j
                                        ; DOSCODE:7976↑j
                pop     dx
                pop     dx
                pop     dx
                pop     HIGH_SECTOR
                les     bp, THISDPB
                mov     ALLOWED, 18h
                xor     al, al
                call    sub_AAB0
                jb      short loc_7A20
                lds     di, CURBUF
                assume ds:nothing
                or      byte ptr [di+5], 4
                pop     si
                add     si, di
                sub     si, 1Ah
                mov     byte ptr [si], 0E5h
                call    sub_79D3

loc_7A1D:                               ; CODE XREF: DOSCODE:7A21↓j
                jmp     loc_790A
; ---------------------------------------------------------------------------

loc_7A20:                               ; CODE XREF: DOSCODE:79B2↑j
                                        ; DOSCODE:7A07↑j
                pop     si
                jmp     short loc_7A1D

; =============== S U B R O U T I N E =======================================


DOS_CHDIR       proc near               ; CODE XREF: DOSCODE:6740↑p
                                        ; ValidateCDS+74↓p

; FUNCTION CHUNK AT 790A SIZE 00000008 BYTES
; FUNCTION CHUNK AT 79EF SIZE 00000003 BYTES

                call    TestNet
                jnb     short loc_7A2E
                mov     ax, 1105h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - CHDIR
                                        ; SS = DOS CS
                                        ; SDA first filename pointer -> fully-qualified directory name
                                        ; SDA CDS pointer -> current directory
                                        ; Return: CF set on error, AX = DOS error code
                                        ; CF clear if successful
                retn
; ---------------------------------------------------------------------------

loc_7A2E:                               ; CODE XREF: DOS_CHDIR+3↑j
                call    ECritDisk
                test    byte ptr es:[di+44h], 20h
                jz      short loc_7A44
                mov     word ptr es:[di+4Bh], 0FFFFh
                mov     word ptr es:[di+49h], 0FFFFh

loc_7A44:                               ; CODE XREF: DOS_CHDIR+13↑j
                mov     byte ptr ds:34Ch, 0
                mov     byte ptr ds:56Dh, 16h
                or      byte ptr ds:1146h, 1
                call    sub_8B99
                lahf
                and     byte ptr ds:1146h, 80h
                sahf
                mov     ax, 3
                jb      short loc_7A69
                jnz     short loc_7ABB
                mov     cx, ds:5C2h
                clc

loc_7A69:                               ; CODE XREF: DOS_CHDIR+3D↑j
                jmp     short loc_79EF
; ---------------------------------------------------------------------------
                call    TestNet
                jnb     short loc_7A76
                mov     ax, 1101h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY
                                        ; SS = DOS CS
                                        ; SDA first filename pointer -> fully-qualified directory name
                                        ; SDA CDS pointer -> current directory
                                        ; Return: CF set on error, AX = DOS error code
                                        ; CF clear if successful
                retn
; ---------------------------------------------------------------------------

loc_7A76:                               ; CODE XREF: DOS_CHDIR+4B↑j
                call    ECritDisk
                mov     byte ptr ds:34Ch, 0
                mov     byte ptr ds:56Dh, 16h
                call    sub_8B99
                jb      short loc_7AB2
                jnz     short loc_7ABB
                mov     di, ds:5C2h
                or      di, di
                jnz     short loc_7A99
                cmp     word ptr ds:0ADCh, 0
                jz      short loc_7ABB

loc_7A99:                               ; CODE XREF: DOS_CHDIR+6D↑j
                cmp     word ptr es:[bp+0Fh], 0
                jnz     short loc_7ABE
                cmp     di, es:[bp+35h]
                jnz     short loc_7ABE
                mov     di, ds:0ADCh
                cmp     di, es:[bp+37h]
                jnz     short loc_7ABE
                jmp     short loc_7ABB
; ---------------------------------------------------------------------------

loc_7AB2:                               ; CODE XREF: DOS_CHDIR+63↑j
                mov     ax, 3
                jmp     loc_790D
; ---------------------------------------------------------------------------

loc_7AB8:                               ; CODE XREF: DOS_CHDIR+BD↓j
                                        ; DOS_CHDIR+C9↓j ...
                pop     ax
                pop     ax

loc_7ABA:                               ; CODE XREF: DOS_CHDIR+11B↓j
                pop     ax

loc_7ABB:                               ; CODE XREF: DOS_CHDIR+3F↑j
                                        ; DOS_CHDIR+65↑j ...
                jmp     loc_790A
; ---------------------------------------------------------------------------

loc_7ABE:                               ; CODE XREF: DOS_CHDIR+7B↑j
                                        ; DOS_CHDIR+81↑j ...
                lds     di, ds:5E2h
                sub     bx, di
                push    bx
                les     di, [di+6]
                push    es
                push    di
                push    ss
                pop     ds
                assume ds:DOSCODE
                push    ss
                pop     es
                assume es:DOSCODE
                mov     di, 54Bh
                mov     ax, 3Fh ; '?'
                mov     cx, 0Ah
                rep stosb
                stosw
                call    sub_8E53
                call    sub_8900
                jb      short loc_7AB8
                mov     ds, word ptr CURBUF+2
                mov     si, bx
                lodsw
                cmp     ax, 202Eh
                jnz     short loc_7AB8
                add     si, 1Eh
                lodsw
                cmp     ax, 2E2Eh
                jnz     short loc_7AB8
                push    ss
                pop     ds
                mov     LASTENT, 2
                call    sub_8900
                jb      short loc_7AB8
                mov     ATTRIB, 16h
                call    loc_87AD
                jnb     short loc_7AB8
                cmp     FAILERR, 0
                jnz     short loc_7AB8
                les     bp, THISDPB
                assume es:nothing
                mov     bx, DIRSTART_HW
                mov     CLUSTNUM_HW, bx
                mov     bx, DIRSTART
                call    sub_9D13
                jb      short loc_7AB8
                call    update_fat32_fsinfo
                pop     dx
                pop     HIGH_SECTOR
                mov     ALLOWED, 18h
                xor     al, al
                call    sub_AAB0
                jnb     short loc_7B41
                jmp     loc_7ABA
; ---------------------------------------------------------------------------

loc_7B41:                               ; CODE XREF: DOS_CHDIR+119↑j
                lds     di, CURBUF
                assume ds:nothing
                or      byte ptr [di+5], 4
                pop     bx
                add     bx, di
                mov     byte ptr [bx], 0E5h
                push    ds
                push    ss
                pop     ds
                assume ds:DOSCODE
                call    FastOpen_Delete
                pop     ds
                assume ds:nothing
                jmp     sub_79D3
DOS_CHDIR       endp


; =============== S U B R O U T I N E =======================================


sub_7B59        proc near               ; CODE XREF: DOS_READ+1C1↓p
                                        ; DOS_WRITE+14C↓p ...
                mov     byte ptr ds:357h, 0
                retn
sub_7B59        endp


; =============== S U B R O U T I N E =======================================


sub_7B5F        proc near               ; CODE XREF: DOS_READ:loc_7D53↓p
                                        ; DOS_WRITE+137↓p
                push    ax
                mov     ax, ds:59Eh
                mov     byte ptr ds:357h, 1
                mov     ds:5E6h, ax
                mov     ax, ds:5A0h
                mov     ds:5E8h, ax
                pop     ax
                retn
sub_7B5F        endp


; =============== S U B R O U T I N E =======================================

; Attributes: thunk

sub_7B73        proc near               ; CODE XREF: DOS_READ+C↓j
                jmp     sub_8225
sub_7B73        endp


; =============== S U B R O U T I N E =======================================


DOS_READ        proc near               ; CODE XREF: DOSCODE:6294↑p
                                        ; sub_9261+9↓p ...
                les     di, ds:59Eh
                mov     al, es:[di+2]
                and     al, 3
                cmp     al, 1
                jz      short sub_7B73
                call    SETUP
                jcxz    short loc_7B94
                call    sub_576D
                jz      short loc_7B96
                mov     ax, 1108h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - READ FROM REMOTE FILE
                                        ; ES:DI -> SFT
                                        ; SFT DPB field -> DPB of drive containing file
                                        ; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
                                        ; Return: CF set on error, CX = bytes read
                retn
; ---------------------------------------------------------------------------

loc_7B94:                               ; CODE XREF: DOS_READ+11↑j
                clc
                retn
; ---------------------------------------------------------------------------

loc_7B96:                               ; CODE XREF: DOS_READ+16↑j
                test    byte ptr es:[di+5], 80h
                jnz     short loc_7BAC
                mov     byte ptr ds:323h, 2
                call    ECritDisk
                call    sub_81D5
                call    LCritDisk
                retn
; ---------------------------------------------------------------------------

loc_7BAC:                               ; CODE XREF: DOS_READ+25↑j
                mov     byte ptr ds:323h, 4
                mov     bl, es:[di+5]
                les     di, ds:32Ch
                test    bl, 40h
                jz      short loc_7BC5
                test    bl, 4
                jz      short loc_7BC8
                xor     al, al

loc_7BC5:                               ; CODE XREF: DOS_READ+46↑j
                                        ; DOS_READ+BA↓j ...
                jmp     loc_7C9A
; ---------------------------------------------------------------------------

loc_7BC8:                               ; CODE XREF: DOS_READ+4B↑j
                test    bl, 20h
                jnz     short loc_7BD5
                test    bl, 1
                jz      short loc_7C32
                jmp     loc_7D53
; ---------------------------------------------------------------------------

loc_7BD5:                               ; CODE XREF: DOS_READ+55↑j
                push    es
                pop     ds
                test    ss:IsWin386, 1
                jz      short loc_7BE7
                test    bl, 1
                jz      short loc_7BE7
                jmp     loc_7C9D
; ---------------------------------------------------------------------------

loc_7BE7:                               ; CODE XREF: DOS_READ+67↑j
                                        ; DOS_READ+6C↑j ...
                mov     bx, di
                xor     ax, ax
                cwd
                call    SETREAD
                push    ds
                lds     si, ss:THISSFT
                call    DEVIOCALL
                mov     dx, di
                mov     ah, 86h
                mov     di, ss:DEVCALL_REQSTAT
                or      di, di
                jns     short loc_7C28
                call    sub_A173
                mov     di, dx
                sub     cx, ss:CALLBPB
                add     di, ss:CALLBPB
                or      al, al
                jz      short loc_7C28
                cmp     al, 3
                jz      short loc_7C1F
                pop     ds
                jmp     short loc_7BE7
; ---------------------------------------------------------------------------

loc_7C1F:                               ; CODE XREF: DOS_READ+A4↑j
                                        ; DOS_WRITE+8B↓j ...
                pop     di

loc_7C20:                               ; CODE XREF: DOS_READ+F6↓j
                les     di, ss:THISSFT
                jmp     sub_8223
; ---------------------------------------------------------------------------

loc_7C28:                               ; CODE XREF: DOS_READ+8D↑j
                                        ; DOS_READ+A0↑j
                pop     di
                mov     di, dx
                add     di, ss:CALLBPB
                jmp     short loc_7BC5
; ---------------------------------------------------------------------------

loc_7C32:                               ; CODE XREF: DOS_READ+5A↑j
                push    es
                pop     ds
                mov     bx, di
                xor     ax, ax
                cwd
                push    cx
                mov     cx, 1
                call    SETREAD
                pop     cx
                lds     si, ss:THISSFT
                lds     si, [si+7]

loc_7C49:                               ; CODE XREF: DOS_READ+F2↓j
                                        ; DOS_READ+121↓j
                call    DSKSTATCHK
                call    DEVIOCALL2
                push    di
                mov     ah, 86h
                mov     di, ss:DEVCALL_REQSTAT
                or      di, di
                jns     short loc_7C72
                call    sub_A173
                pop     di
                mov     ss:CALLBPB, 1
                cmp     al, 1
                jz      short loc_7C49
                cmp     al, 3
                jz      short loc_7C20
                xor     al, al
                jmp     short loc_7C84
; ---------------------------------------------------------------------------

loc_7C72:                               ; CODE XREF: DOS_READ+E3↑j
                pop     di
                cmp     ss:CALLBPB, 1
                jnz     short loc_7C9A
                push    ds
                mov     ds, ss:CALLXAD_2
                assume ds:DOSCODE
                mov     al, [di]
                pop     ds
                assume ds:nothing

loc_7C84:                               ; CODE XREF: DOS_READ+FA↑j
                inc     word ptr ss:CALLBR
                mov     ss:DEVCALL_REQSTAT, 0
                inc     di
                cmp     al, 1Ah
                jz      short loc_7C9A
                cmp     al, 0Dh
                loopne  loc_7C49
                inc     ax

loc_7C9A:                               ; CODE XREF: DOS_READ:loc_7BC5↑j
                                        ; DOS_READ+103↑j ...
                jmp     loc_7D3E
; ---------------------------------------------------------------------------

loc_7C9D:                               ; CODE XREF: DOS_READ+6E↑j
                mov     bx, di
                xor     ax, ax
                cwd
                call    SETREAD

loc_7CA5:                               ; CODE XREF: DOS_READ+157↓j
                                        ; DOS_READ+18D↓j ...
                mov     byte ptr es:[bx+2], 5
                push    ds
                lds     si, ss:THISSFT
                call    DEVIOCALL
                pop     ds
                test    word ptr es:[bx+3], 8000h
                jz      short loc_7CCF
                push    ds
                mov     dx, di

loc_7CBF:                               ; CODE XREF: DOS_READ+181↓j
                call    sub_A173
                mov     di, dx
                or      al, al
                jz      short loc_7D16
                cmp     al, 3
                jz      short loc_7D05
                pop     ds
                jmp     short loc_7CA5
; ---------------------------------------------------------------------------

loc_7CCF:                               ; CODE XREF: DOS_READ+144↑j
                test    word ptr es:[bx+3], 200h
                jnz     short loc_7D0E
                mov     byte ptr es:[bx+2], 4
                mov     word ptr es:[bx+12h], 1
                push    ds
                lds     si, ss:THISSFT
                call    DEVIOCALL
                mov     dx, di
                mov     di, es:[bx+3]
                mov     ah, 86h
                test    di, 8000h
                jnz     short loc_7CBF
                pop     ds
                mov     di, dx
                dec     cx
                jz      short loc_7D17
                inc     word ptr es:[bx+0Eh]
                jmp     short loc_7CA5
; ---------------------------------------------------------------------------

loc_7D05:                               ; CODE XREF: DOS_READ+154↑j
                pop     di
                les     di, ss:THISSFT
                jmp     sub_8223
; ---------------------------------------------------------------------------

loc_7D0E:                               ; CODE XREF: DOS_READ+15F↑j
                push    ax
                mov     ah, 84h
                int     2Ah             ; Microsoft Networks - KEYBOARD BUSY LOOP
                pop     ax
                jmp     short loc_7CA5
; ---------------------------------------------------------------------------

loc_7D16:                               ; CODE XREF: DOS_READ+150↑j
                pop     ds

loc_7D17:                               ; CODE XREF: DOS_READ+187↑j
                add     di, ss:CALLBPB
                jmp     loc_7BC5
; ---------------------------------------------------------------------------

loc_7D1F:                               ; CODE XREF: DOS_READ+1B4↓j
                                        ; DOS_READ+1E6↓j ...
                lodsb
                stosb
                cmp     al, 0Dh
                jnz     short loc_7D28
                mov     byte ptr [si], 0Ah

loc_7D28:                               ; CODE XREF: DOS_READ+1AD↑j
                cmp     al, 0Ah
                loopne  loc_7D1F
                jnz     short loc_7D35
                xor     si, si
                call    OUTT
                or      al, 1

loc_7D35:                               ; CODE XREF: DOS_READ+1B6↑j
                                        ; DOS_READ+214↓j
                push    ss
                pop     ds
                assume ds:DOSCODE
                call    sub_7B59
                mov     CONTPOS, si

loc_7D3E:                               ; CODE XREF: DOS_READ:loc_7C9A↑j
                push    ss
                pop     ds
                mov     word_5B8, di
                jnz     short loc_7D4F
                les     di, THISSFT
                and     byte ptr es:[di+5], 0BFh

loc_7D4F:                               ; CODE XREF: DOS_READ+1CE↑j
                call    sub_82D7
                retn
; ---------------------------------------------------------------------------

loc_7D53:                               ; CODE XREF: DOS_READ+5C↑j
                call    sub_7B5F
                mov     si, CONTPOS
                or      si, si
                jnz     short loc_7D1F
                cmp     CONBUF, 80h
                jz      short loc_7D6B
                mov     word ptr CONBUF, 0FF80h

loc_7D6B:                               ; CODE XREF: DOS_READ+1ED↑j
                push    cx
                push    es
                push    di
                mov     dx, 27Bh
                call    $STD_CON_STRING_INPUT
                pop     di
                pop     es
                mov     si, 27Dh
                pop     cx
                cmp     byte ptr [si], 1Ah
                jnz     short loc_7D1F
                mov     al, 1Ah
                stosb
                dec     di
                mov     al, 0Ah
                call    OUTT
                xor     si, si
                jmp     short loc_7D35
DOS_READ        endp


; =============== S U B R O U T I N E =======================================

; Attributes: thunk

sub_7D8C        proc near               ; CODE XREF: DOS_WRITE+C↓j
                                        ; DOS_WRITE+1A↓j
                jmp     sub_8225
sub_7D8C        endp


; =============== S U B R O U T I N E =======================================


DOS_WRITE       proc near               ; CODE XREF: IOFUNC+E5↓p
                                        ; DATA XREF: DOSCODE:$WRITE↓o

; FUNCTION CHUNK AT 7E22 SIZE 000000BF BYTES

                les     di, THISSFT
                mov     al, es:[di+2]
                and     al, 3
                cmp     al, 0
                jz      short sub_7D8C
                test    byte ptr es:[di+3], 80h
                jz      short loc_7DAB
                test    byte ptr es:[di+4], 1
                jnz     short sub_7D8C

loc_7DAB:                               ; CODE XREF: DOS_WRITE+13↑j
                call    SETUP
                test    byte ptr es:[di+6], 80h
                jz      short loc_7DBB
                mov     ax, 1109h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE
                                        ; ES:DI -> SFT
                                        ; SFT DPB field -> DPB of drive containing file
                                        ; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
                                        ; Return: CF set on error, CX = bytes written
                retn
; ---------------------------------------------------------------------------

loc_7DBB:                               ; CODE XREF: DOS_WRITE+24↑j
                test    byte ptr es:[di+5], 80h
                jnz     short loc_7E31
                mov     EXTERR_LOCUS, 2
                call    ECritDisk
                call    sub_83A3
                jb      short loc_7DDF
                les     di, THISSFT
                test    byte ptr es:[di+3], 40h
                jz      short loc_7DDF
                push    cx
                call    DOS_COMMIT
                pop     cx

loc_7DDF:                               ; CODE XREF: DOS_WRITE+3E↑j
                                        ; DOS_WRITE+49↑j
                call    LCritDisk
                retn
; ---------------------------------------------------------------------------

loc_7DE3:                               ; CODE XREF: DOS_WRITE+88↓j
                                        ; DOS_WRITE+C0↓j
                xor     ax, ax
                call    SETWRITE
                push    ds
                lds     si, ss:THISSFT
                assume ds:nothing
                call    DEVIOCALL
                mov     dx, di
                mov     di, ss:DEVCALL_REQSTAT
                mov     ah, 87h
                or      di, di
                jns     short loc_7E1D
                call    sub_A173
                mov     di, ss:CALLBPB
                mov     bx, dx
                sub     cx, di
                add     bx, di
                mov     di, bx
                or      al, al
                jz      short loc_7E1D
                cmp     al, 3
                jz      short loc_7E19
                pop     ds
                jmp     short loc_7DE3
; ---------------------------------------------------------------------------

loc_7E19:                               ; CODE XREF: DOS_WRITE+85↑j
                pop     ax
                jmp     loc_7C1F
; ---------------------------------------------------------------------------

loc_7E1D:                               ; CODE XREF: DOS_WRITE+6D↑j
                                        ; DOS_WRITE+81↑j
                pop     ax
                pop     ds
DOS_WRITE       endp

; ---------------------------------------------------------------------------
                db 0A1h
DOSCODE         ends

; ===========================================================================

; Segment type: Regular
DOSCODE         segment byte public 'DOSCODE' use16
                assume cs:DOSCODE
                ;org 7E20h
                assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
                db  6Ch ; l
                db    3
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR DOS_WRITE

loc_7E22:                               ; CODE XREF: DOS_WRITE+B2↓j
                                        ; DOS_WRITE+131↓j ...
                les     di, ds:59Eh
                mov     cx, ax
                call    sub_8306
                retn
; ---------------------------------------------------------------------------

loc_7E2C:                               ; CODE XREF: DOS_WRITE+C8↓j
                mov     dx, cx

loc_7E2E:                               ; CODE XREF: DOS_WRITE+CF↓j
                jmp     loc_7EBD
; ---------------------------------------------------------------------------

loc_7E31:                               ; CODE XREF: DOS_WRITE+31↑j
                mov     byte ptr ds:323h, 4
                or      byte ptr es:[di+5], 40h
                mov     bl, es:[di+5]
                xor     ax, ax
                jcxz    short loc_7E22
                push    ds
                mov     al, bl
                lds     bx, ds:32Ch
                mov     di, bx
                cwd
                test    al, 20h
                jnz     short loc_7DE3
                test    al, 2
                jnz     short loc_7EC3
                test    al, 4
                jnz     short loc_7E2C
                mov     ax, dx
                cmp     byte ptr [bx], 1Ah
                jz      short loc_7E2E
                push    cx
                mov     cx, 1
                call    SETWRITE
                lds     si, ss:59Eh
                pop     cx
                lds     si, [si+7]

loc_7E70:                               ; CODE XREF: DOS_WRITE+100↓j
                                        ; DOS_WRITE+12C↓j
                call    DSKSTATCHK
                call    DEVIOCALL2
                push    di
                mov     di, ss:35Dh
                mov     ah, 87h
                or      di, di
                jns     short loc_7E98
                call    sub_A173
                pop     di
                mov     word ptr ss:36Ch, 1
                cmp     al, 1
                jz      short loc_7E70
                or      al, al
                jz      short loc_7EA1
                jmp     loc_7C1F
; ---------------------------------------------------------------------------

loc_7E98:                               ; CODE XREF: DOS_WRITE+F1↑j
                pop     di
                cmp     word ptr ss:36Ch, 0
                jz      short loc_7EBD

loc_7EA1:                               ; CODE XREF: DOS_WRITE+104↑j
                inc     dx
                inc     word ptr ss:368h
                inc     di
                push    ds
                mov     ds, word ptr ss:36Ah
                cmp     byte ptr [di], 1Ah
                pop     ds
                jz      short loc_7EBD
                mov     word ptr ss:35Dh, 0
                loop    loc_7E70

loc_7EBD:                               ; CODE XREF: DOS_WRITE:loc_7E2E↑j
                                        ; DOS_WRITE+110↑j ...
                mov     ax, dx
                pop     ds
                jmp     loc_7E22
; ---------------------------------------------------------------------------

loc_7EC3:                               ; CODE XREF: DOS_WRITE+C4↑j
                push    ds
                push    ss
                pop     ds
                call    sub_7B5F
                pop     ds
                mov     si, bx
                push    cx

loc_7ECD:                               ; CODE XREF: DOS_WRITE+146↓j
                lodsb
                cmp     al, 1Ah
                jz      short loc_7ED7
                call    OUTT
                loop    loc_7ECD

loc_7ED7:                               ; CODE XREF: DOS_WRITE+141↑j
                pop     ax
                pop     ds
                sub     ax, cx
                call    sub_7B59
                jmp     loc_7E22
; END OF FUNCTION CHUNK FOR DOS_WRITE

; =============== S U B R O U T I N E =======================================


sub_7EE1        proc near               ; CODE XREF: DOSCODE:5AAC↑p
                                        ; DOSCODE:5ACE↑p ...
                cmp     byte ptr ss:357h, 0
                jnz     short loc_7EFB

loc_7EE9:                               ; CODE XREF: sub_7EE1+1D↓j
                push    ss
                pop     ds
                push    es
                push    di
                call    SFFromHandle
                jb      short loc_7EF8
                mov     si, es
                mov     ds, si
                mov     si, di

loc_7EF8:                               ; CODE XREF: sub_7EE1+F↑j
                pop     di
                pop     es
                retn
; ---------------------------------------------------------------------------

loc_7EFB:                               ; CODE XREF: sub_7EE1+6↑j
                cmp     bx, 1
                ja      short loc_7EE9
                lds     si, ss:5E6h
                clc

locret_7F06:                            ; CODE XREF: sub_7F07:loc_7F5B↓j
                retn
sub_7EE1        endp


; =============== S U B R O U T I N E =======================================


sub_7F07        proc near               ; CODE XREF: sub_8900+1E↓p
                xor     dx, dx
                cmp     ds:0ADCh, dx
                jnz     short loc_7F18
                cmp     ds:5C2h, dx
                jnz     short loc_7F18
                xchg    ax, dx
                jmp     short loc_7F24
; ---------------------------------------------------------------------------

loc_7F18:                               ; CODE XREF: sub_7F07+6↑j
                                        ; sub_7F07+C↑j
                mov     dl, al
                mov     cl, es:[bp+5]
                and     dl, es:[bp+4]
                shr     ax, cl

loc_7F24:                               ; CODE XREF: sub_7F07+F↑j
                mov     ds:573h, dl
                mov     cx, ax
                mov     ah, dl
                mov     bx, ds:0ADEh
                mov     ds:0AE0h, bx
                mov     ds:0AE8h, bx
                mov     dx, ds:5C0h
                mov     bx, ds:5BCh
                mov     ds:607h, dx
                mov     dx, ds:5BEh
                add     dl, ah
                adc     dh, 0
                adc     word ptr ds:607h, 0
                mov     ds:5DCh, bx
                jcxz    short sub_7F91

loc_7F58:                               ; CODE XREF: sub_7F07+6D↓j
                call    UNPACK

loc_7F5B:                               ; CODE XREF: sub_7F91+A↓j
                jb      short locret_7F06
                push    ds:CLUSTNUM_HW
                pop     word ptr ds:0AF2h
                push    word ptr ds:0AECh
                pop     ds:CLUSTNUM_HW
                xchg    bx, di
                call    sub_A40C
                jnb     short loc_7F76
                loop    loc_7F58

loc_7F76:                               ; CODE XREF: sub_7F07+6B↑j
                mov     ds:5DCh, bx
                mov     bx, ds:CLUSTNUM_HW
                mov     ds:0AE0h, bx
                mov     dx, di
                mov     bx, ds:0AF2h
                mov     ds:CLUSTNUM_HW, bx
                mov     bl, ah
                call    sub_9A89
sub_7F07        endp


; =============== S U B R O U T I N E =======================================


sub_7F91        proc near               ; CODE XREF: sub_7F07+4F↑j
                                        ; sub_8884+75↓p
                mov     ds:ALLOWED, 18h
                xor     al, al
                call    sub_AAB0
                jb      short loc_7F5B
sub_7F91        endp


; =============== S U B R O U T I N E =======================================


sub_7F9D        proc near               ; CODE XREF: GetPathNoSet:loc_8DFA↓p
                                        ; sub_9791+64↓p
                push    ds
                push    si
                lds     si, ds:CURBUF
                or      byte ptr [si+5], 4
                pop     si
                pop     ds

dr_ret_label:                           ; CODE XREF: DREAD+3↓j
                retn
sub_7F9D        endp


; =============== S U B R O U T I N E =======================================


sub_7FAA        proc near               ; CODE XREF: DOSCODE:AB7F↓p

; FUNCTION CHUNK AT 8027 SIZE 00000007 BYTES

                mov     ss:ALLOWED, 18h
                mov     di, cx
                mov     cl, es:[bp+8]
                mov     ax, es:[bp+0Fh]
                xor     ch, ch
                or      ax, ax
                jnz     short loc_7FCA
                test    byte ptr es:[bp+23h], 80h
                jz      short loc_7FCA
                mov     cx, 1

loc_7FCA:                               ; CODE XREF: sub_7FAA+14↑j
                                        ; sub_7FAA+1B↑j
                push    ss:HIGH_SECTOR
                push    dx

loc_7FD0:                               ; CODE XREF: sub_7FAA:loc_8004↓j
                push    cx
                push    ax
                push    ss:HIGH_SECTOR
                push    dx
                mov     cx, di
                call    DSKREAD
                pop     dx
                pop     ss:HIGH_SECTOR
                pop     ax
                pop     cx
                jz      short loc_8027
                or      ax, ax
                jnz     short loc_7FFC
                add     dx, es:[bp+31h]
                push    ax
                mov     ax, es:[bp+33h]
                adc     ss:HIGH_SECTOR, ax
                pop     ax
                jmp     short loc_8004
; ---------------------------------------------------------------------------

loc_7FFC:                               ; CODE XREF: sub_7FAA+3F↑j
                add     dx, ax
                adc     ss:HIGH_SECTOR, 0

loc_8004:                               ; CODE XREF: sub_7FAA+50↑j
                loop    loc_7FD0
                pop     dx
                pop     ss:HIGH_SECTOR
                mov     cx, di
sub_7FAA        endp


; =============== S U B R O U T I N E =======================================


DREAD           proc near               ; CODE XREF: update_fat32_fsinfo+54↑p
                                        ; DREAD+10↓j ...
                call    DSKREAD
                jz      short dr_ret_label
                mov     ss:READOP, 0    ; Read
                call    HARDERRRW
                cmp     al, 1           ; RETRY
                jz      short DREAD
                cmp     al, 3           ; FAIL
                clc
                jnz     short NO_CAR1   ; IGNORE
                stc

NO_CAR1:                                ; CODE XREF: DREAD+15↑j
                retn
DREAD           endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR sub_7FAA

loc_8027:                               ; CODE XREF: sub_7FAA+3B↑j
                pop     dx
                pop     word ptr ss:607h
                retn
; END OF FUNCTION CHUNK FOR sub_7FAA

; =============== S U B R O U T I N E =======================================


sub_802E        proc near               ; CODE XREF: sub_83A3↓p
                test    byte ptr es:[di+4], 8
                jz      short loc_8039
                call    sub_8223
                retn
; ---------------------------------------------------------------------------

loc_8039:                               ; CODE XREF: sub_802E+5↑j
                                        ; sub_802E+1C↓j
                push    cx
                or      cx, cx
                jnz     short loc_803F
                dec     cx

loc_803F:                               ; CODE XREF: sub_802E+E↑j
                mov     al, 80h
                call    sub_C5C7
                pop     cx
                jnb     short locret_804C
                call    sub_81CE
                jnb     short loc_8039

locret_804C:                            ; CODE XREF: sub_802E+17↑j
                retn
sub_802E        endp


; =============== S U B R O U T I N E =======================================


sub_804D        proc near               ; CODE XREF: sub_81D5:loc_81F3↓p
                test    byte ptr es:[di+4], 8
                jz      short loc_8058
                call    sub_8225
                retn
; ---------------------------------------------------------------------------

loc_8058:                               ; CODE XREF: sub_804D+5↑j
                                        ; sub_804D+15↓j
                xor     al, al
                call    sub_C5C7
                jnb     short locret_8064
                call    sub_81A8
                jnb     short loc_8058

locret_8064:                            ; CODE XREF: sub_804D+10↑j
                retn
sub_804D        endp


; =============== S U B R O U T I N E =======================================


DSKREAD         proc near               ; CODE XREF: FAT32_ABSDWRT-6B↑p
                                        ; sub_7FAA+30↑p ...
                push    cx              ; DS:BX = Transfer address
                                        ; [HIGH_SECTOR]:DX = Disk sector address
                                        ; CX = Sector count
                                        ; ES:BP = DPB
                mov     ah, es:[bp+17h] ; [ES:BP+DPB.MEDIA]
                mov     al, es:[bp+1]   ; [ES:BP+DPB.UNIT]
                push    bx
                push    es
                call    SETREAD
                jmp     short DODSKOP
DSKREAD         endp


; =============== S U B R O U T I N E =======================================


DWRITE          proc near               ; CODE XREF: update_fat32_fsinfo+A8↑p
                                        ; DWRITE+11↓j ...
                call    DSKWRITE
                jnz     short dwrite1
                retn                    ; Carry clear (retz)
; ---------------------------------------------------------------------------

dwrite1:                                ; CODE XREF: DWRITE+3↑j
                mov     ss:READOP, 1    ; Write
                call    HARDERRRW
                cmp     al, 1           ; Check for retry
                jz      short DWRITE
                cmp     al, 3           ; Check for FAIL
                clc
                jnz     short NO_CAR2   ; Ignore
                stc

NO_CAR2:                                ; CODE XREF: DWRITE+16↑j
                retn
DWRITE          endp


; =============== S U B R O U T I N E =======================================


DSKWRITE        proc near               ; CODE XREF: FAT32_ABSDWRT+45↑p
                                        ; DWRITE↑p ...
                push    cx              ; DS:BX = Transfer address
                                        ; [HIGH_SECTOR]:DX = Disk sector address
                                        ; CX = Sector count
                                        ; ES:BP = DPB
                mov     ah, es:[bp+17h] ; [ES:BP+DPB.MEDIA]
                mov     al, es:[bp+1]
                push    bx              ; [ES:BP+DPB.UNIT]
                push    es
                call    SETWRITE

DODSKOP:                                ; CODE XREF: DSKREAD+E↑j
                mov     cx, ds
                pop     ds              ; DS:BP points to DPB
                push    ds
                lds     si, ds:[bp+13h] ; [ds:BP+DPB.DRIVER_ADDR]
                call    DEVIOCALL2
                mov     ds, cx
                pop     es
                pop     bx
                pop     di
                mov     cx, ss:CALLBPB  ; [SS:CALLSCNT] ; Number of sectors transferred
                mov     ax, ss:DEVCALL_REQSTAT
                sub     cx, di
                neg     cx              ; Number of sectors not transferred
                test    ax, 8000h       ; test ah,(STERR>>8)
                retn
DSKWRITE        endp


; =============== S U B R O U T I N E =======================================


HARDERRRW       proc near               ; CODE XREF: DREAD+B↑p
                                        ; DWRITE+C↑p ...
                cmp     al, 0Fh         ; error_I24_wrong_disk
                jnz     short DO_ERR
                push    ax
                push    es
                les     ax, ss:CALLVIDRW
                mov     word ptr ss:EXTERRPT, ax
                mov     word ptr ss:EXTERRPT+2, es
                pop     es
                pop     ax

DO_ERR:                                 ; CODE XREF: HARDERRRW+2↑j
                call    HARDERR
                retn
HARDERRRW       endp


; =============== S U B R O U T I N E =======================================


SETUP           proc near               ; CODE XREF: DOS_READ+E↑p
                                        ; DOS_WRITE:loc_7DAB↑p
                lds     si, es:[di+7]
                mov     word ptr ss:58Ch, ds
                mov     bx, ss
                mov     ds, bx
                mov     bx, ds:32Ch
                mov     ds:58Ah, si
                mov     ds:5B8h, bx
                mov     byte ptr ds:574h, 0
                mov     ax, es:[di+15h]
                mov     dx, es:[di+17h]
                mov     ds:5CEh, ax
                mov     ds:5D0h, dx
                test    word ptr es:[di+5], 8080h
                jnz     short loc_8162
                push    es
                les     bp, ds:58Ah
                mov     bl, es:[bp+0]
                push    cx
                mov     ds:576h, bl
                mov     bx, es:[bp+2]
                call    sub_8761
                mov     ds:5CCh, dx
                mov     ds:5C4h, ax
                mov     ds:5C6h, cx
                mov     bx, ax
                mov     dx, cx
                and     bl, es:[bp+4]
                mov     ds:573h, bl
                call    sub_8788
                pop     cx
                cmp     word ptr es:[bp+0Fh], 0
                jnz     short loc_8150
                cmp     dx, es:[bp+2Fh]
                jnz     short loc_8158
                cmp     ax, es:[bp+2Dh]
                jmp     short loc_8158
; ---------------------------------------------------------------------------

loc_8150:                               ; CODE XREF: SETUP+6A↑j
                or      dx, dx
                jnz     short loc_8178
                cmp     ax, es:[bp+0Dh]

loc_8158:                               ; CODE XREF: SETUP+70↑j
                                        ; SETUP+76↑j
                ja      short loc_8178
                mov     ds:5BCh, ax
                mov     ds:0ADEh, dx
                pop     es

loc_8162:                               ; CODE XREF: SETUP+33↑j
                mov     ax, cx
                add     ax, ds:32Ch
                jb      short loc_816B
                retn
; ---------------------------------------------------------------------------

loc_816B:                               ; CODE XREF: SETUP+90↑j
                mov     ax, ds:32Ch
                neg     ax
                jnz     short loc_8173
                dec     ax

loc_8173:                               ; CODE XREF: SETUP+98↑j
                mov     cx, ax
                jcxz    short loc_817B
                retn
; ---------------------------------------------------------------------------

loc_8178:                               ; CODE XREF: SETUP+7A↑j
                                        ; SETUP:loc_8158↑j
                pop     es
                xor     cx, cx

loc_817B:                               ; CODE XREF: SETUP+9D↑j
                pop     bx
                clc
                retn
SETUP           endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


sub_817E        proc near               ; CODE XREF: sub_81D5+27↓p
                                        ; sub_83A3+1A↓p
                mov     ax, ds:5CCh
                mov     bx, cx
                or      ax, ax
                jz      short loc_8195
                sub     ax, es:[bp+2]
                neg     ax
                sub     bx, ax
                jnb     short loc_8195
                add     ax, bx
                xor     bx, bx

loc_8195:                               ; CODE XREF: sub_817E+7↑j
                                        ; sub_817E+11↑j
                mov     ds:5D2h, ax
                mov     ax, bx
                xor     dx, dx
                div     word ptr es:[bp+2]
                mov     ds:5D6h, ax
                mov     ds:5D4h, dx

locret_81A7:                            ; CODE XREF: sub_81A8+1D↓j
                retn
sub_817E        endp


; =============== S U B R O U T I N E =======================================


sub_81A8        proc near               ; CODE XREF: sub_804D+12↑p
                mov     byte ptr ds:575h, 0

loc_81AD:                               ; CODE XREF: sub_81CE+5↓j
                test    byte ptr es:[di+3], 80h
                jnz     short loc_81C2
                push    cx
                mov     cl, es:[di+2]
                and     cl, 0F0h
                cmp     cl, 0
                pop     cx
                jnz     short loc_81C7

loc_81C2:                               ; CODE XREF: sub_81A8+A↑j
                call    sub_C5DD
                jnb     short locret_81A7

loc_81C7:                               ; CODE XREF: sub_81A8+18↑j
                xor     cx, cx
                mov     ax, 21h ; '!'
                stc

locret_81CD:                            ; CODE XREF: sub_81D5+21↓j
                retn
sub_81A8        endp


; =============== S U B R O U T I N E =======================================


sub_81CE        proc near               ; CODE XREF: sub_802E+19↑p
                mov     byte ptr ds:575h, 1
                jmp     short loc_81AD
sub_81CE        endp


; =============== S U B R O U T I N E =======================================


sub_81D5        proc near               ; CODE XREF: DOS_READ+2F↑p

; FUNCTION CHUNK AT 821D SIZE 00000006 BYTES
; FUNCTION CHUNK AT 822C SIZE 0000008E BYTES
; FUNCTION CHUNK AT 82BD SIZE 0000001A BYTES

                mov     ax, es:[di+11h]
                mov     bx, es:[di+13h]
                sub     ax, ds:5CEh
                sbb     bx, ds:5D0h
                jb      short loc_8215
                jnz     short loc_81F3
                or      ax, ax
                jz      short loc_8215
                cmp     ax, cx
                jnb     short loc_81F3
                mov     cx, ax

loc_81F3:                               ; CODE XREF: sub_81D5+12↑j
                                        ; sub_81D5+1A↑j
                call    sub_804D
                jb      short locret_81CD
                les     bp, ds:58Ah
                call    sub_817E
                mov     cx, ds:5BCh
                mov     dx, ds:0ADEh
                call    sub_9801
                jb      short sub_8223
                cmp     word ptr ds:0AF8h, 0
                jnz     short loc_8215
                jcxz    short loc_822C

loc_8215:                               ; CODE XREF: sub_81D5+10↑j
                                        ; sub_81D5+16↑j ...
                mov     ah, 0Eh
                jmp     loc_8496
sub_81D5        endp


; =============== S U B R O U T I N E =======================================

; Attributes: thunk

sub_821A        proc near               ; CODE XREF: sub_81D5+7D↓j
                jmp     sub_82D7
sub_821A        endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR sub_81D5

loc_821D:                               ; CODE XREF: sub_81D5+BC↓j
                pop     cx
                pop     bx
                pop     word ptr ds:0AECh
; END OF FUNCTION CHUNK FOR sub_81D5

; =============== S U B R O U T I N E =======================================


sub_8223        proc near               ; CODE XREF: DOS_READ+AF↑j
                                        ; DOS_READ+195↑j ...
                push    ss
                pop     ds
sub_8223        endp


; =============== S U B R O U T I N E =======================================


sub_8225        proc near               ; CODE XREF: sub_7B73↑j
                                        ; sub_7D8C↑j ...
                xor     cx, cx
                mov     ax, 5
                stc
                retn
sub_8225        endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR sub_81D5

loc_822C:                               ; CODE XREF: sub_81D5+3E↑j
                mov     ds:5BAh, dx
                mov     ds:5BCh, bx
                mov     bx, ds:0AE8h
                mov     ds:0ADEh, bx
                cmp     word ptr ds:5D2h, 0
                jz      short loc_8248
                call    sub_990E
                jb      short sub_8223

loc_8248:                               ; CODE XREF: sub_81D5+6C↑j
                cmp     word ptr ds:5D6h, 0
                jz      short loc_82BD
                call    sub_99AA
                jb      short sub_821A
                mov     byte ptr ds:574h, 1
                mov     dl, ds:573h
                mov     cx, ds:5D6h
                mov     bx, ds:0ADEh
                mov     ds:0AE8h, bx
                mov     bx, ds:5BCh

loc_826D:                               ; CODE XREF: sub_81D5+E3↓j
                call    sub_99F3
                jb      short sub_8223
                push    word ptr ds:0AECh
                push    di
                push    ax
                push    bx
                mov     byte ptr ds:34Bh, 38h ; '8'
                mov     ds, word ptr ds:32Eh
                push    dx
                push    cx
                call    null_sub
                call    DREAD
                pop     cx
                pop     dx
                pop     word ptr ss:60Ch
                jb      short loc_821D
                mov     word ptr ss:60Eh, ds
                call    DskRdBufScan
                mov     cx, ss
                mov     ds, cx
                pop     cx
                pop     bx
                pop     word ptr ds:0AE8h
                jcxz    short loc_82BD
                call    sub_A40C
                jnb     short sub_82D7
                mov     dl, 0
                add     word ptr ds:5BAh, 1
                adc     word ptr ds:0AE2h, 0
                jmp     short loc_826D
; END OF FUNCTION CHUNK FOR sub_81D5

; =============== S U B R O U T I N E =======================================

; Attributes: thunk

sub_82BA        proc near               ; CODE XREF: sub_81D5+100↓j
                jmp     sub_8223
sub_82BA        endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR sub_81D5

loc_82BD:                               ; CODE XREF: sub_81D5+78↑j
                                        ; sub_81D5+D0↑j
                mov     ax, ds:5D4h
                or      ax, ax
                jz      short sub_82D7
                mov     ds:5D2h, ax
                call    sub_99AA
                jb      short sub_82D7
                mov     word ptr ds:5CCh, 0
                call    sub_990E
                jb      short sub_82BA
; END OF FUNCTION CHUNK FOR sub_81D5

; =============== S U B R O U T I N E =======================================


sub_82D7        proc near               ; CODE XREF: DOS_READ:loc_7D4F↑p
                                        ; sub_821A↑j ...
                les     di, ds:59Eh

loc_82DB:                               ; CODE XREF: sub_83A3:loc_8610↓j
                mov     cx, ds:5B8h
                sub     cx, ds:32Ch
                test    byte ptr es:[di+5], 80h
                jnz     short sub_8306
                mov     ax, ds:0ADEh
                mov     es:[di+37h], ax
                mov     ax, ds:0AE2h
                mov     es:[di+0Bh], ax
                mov     ax, ds:5BCh
                mov     es:[di+35h], ax
                mov     ax, ds:5BAh
                mov     es:[di+19h], ax
sub_82D7        endp


; =============== S U B R O U T I N E =======================================


sub_8306        proc near               ; CODE XREF: DOS_WRITE+99↑p
                                        ; sub_82D7+11↑j ...
                jcxz    short loc_8311
                add     es:[di+15h], cx
                adc     word ptr es:[di+17h], 0

loc_8311:                               ; CODE XREF: sub_8306↑j
                clc
                retn
sub_8306        endp


; =============== S U B R O U T I N E =======================================


DskRdBufScan    proc near               ; CODE XREF: FAT32_ABSDWRT-5A↑p
                                        ; sub_81D5+C3↑p
                cmp     ss:DirtyBufferCount, 0
                jz      short locret_8357
                mov     bx, ss:HIGH_SECTOR
                add     cx, dx
                mov     si, bx
                adc     si, 0
                call    GETCURHEAD
                mov     ax, [di+2]
                mov     ss:117Eh, ax
                mov     al, es:[bp+0]

loc_8335:                               ; CODE XREF: DskRdBufScan+42↓j
                                        ; DskRdBufScan+87↓j
                cmp     al, [di+4]
                jnz     short loc_834E
                cmp     bx, [di+8]
                jnz     short loc_8342
                cmp     dx, [di+6]

loc_8342:                               ; CODE XREF: DskRdBufScan+2A↑j
                ja      short loc_834E
                cmp     si, [di+8]
                jnz     short loc_834C
                cmp     cx, [di+6]

loc_834C:                               ; CODE XREF: DskRdBufScan+34↑j
                ja      short loc_8358

loc_834E:                               ; CODE XREF: DskRdBufScan+25↑j
                                        ; DskRdBufScan:loc_8342↑j
                cmp     di, ss:117Eh
                mov     di, [di]
                jnz     short loc_8335

locret_8357:                            ; CODE XREF: DskRdBufScan+6↑j
                retn
; ---------------------------------------------------------------------------

loc_8358:                               ; CODE XREF: DskRdBufScan:loc_834C↑j
                push    ax
                test    byte ptr [di+5], 40h
                jz      short loc_838F
                push    cx
                push    dx
                push    si
                push    di
                push    es
                mov     ax, dx
                sub     ax, [di+6]
                neg     ax
                mov     cx, es:[bp+2]
                lea     si, [di+18h]
                mul     cx
                les     di, ss:60Ch
                add     di, ax
                shr     cx, 1
                cmp     byte ptr ss:6Ah, 0
                jz      short near ptr loc_8387+1
                shr     cx, 1

loc_8387:                               ; CODE XREF: DskRdBufScan+70↑j
                rep movsd
                pop     es
                pop     di
                pop     si
                pop     dx
                pop     cx

loc_838F:                               ; CODE XREF: DskRdBufScan+4A↑j
                mov     ax, di
                call    SCANPLACE
                cmp     ax, ss:117Eh
                pop     ax
                jnz     short loc_8335
                retn
DskRdBufScan    endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR sub_83A3

loc_839D:                               ; CODE XREF: sub_83A3+24↓j
                jmp     loc_8613
; END OF FUNCTION CHUNK FOR sub_83A3

; =============== S U B R O U T I N E =======================================

; Attributes: thunk

sub_83A0        proc near               ; CODE XREF: sub_83A3+3↓j
                jmp     locret_84A0
sub_83A0        endp


; =============== S U B R O U T I N E =======================================


sub_83A3        proc near               ; CODE XREF: DOS_WRITE+3B↑p

; FUNCTION CHUNK AT 839D SIZE 00000003 BYTES

                call    sub_802E
                jb      short sub_83A0
                and     word ptr es:[di+5], 0BFBFh
                les     ax, es:[di+11h]
                mov     word ptr ds:60Eh, es
                mov     ds:60Ch, ax
                les     bp, ds:58Ah
                call    sub_817E
                mov     ax, ds:5CEh
                mov     dx, ds:5D0h
                jcxz    short loc_839D
                add     ax, cx
                adc     dx, 0
                jnb     short loc_83D3

loc_83D0:                               ; CODE XREF: sub_83A3:loc_83E3↓j
                jmp     loc_85D3
; ---------------------------------------------------------------------------

loc_83D3:                               ; CODE XREF: sub_83A3+2B↑j
                test    byte ptr es:[di+3], 10h
                jnz     short loc_83E5
                cmp     dx, 7FFFh
                jnz     short loc_83E3
                cmp     ax, 0FFFFh

loc_83E3:                               ; CODE XREF: sub_83A3+3B↑j
                ja      short loc_83D0

loc_83E5:                               ; CODE XREF: sub_83A3+35↑j
                mov     bx, es:[bp+2]
                call    sub_8761
                mov     si, ax
                mov     ds:607h, cx
                or      dx, dx
                push    dx
                mov     dx, cx
                jnz     short loc_83FF
                sub     ax, 1
                sbb     dx, 0

loc_83FF:                               ; CODE XREF: sub_83A3+54↑j
                call    sub_8788
                pop     cx
                xchg    cx, dx
                push    cx
                push    ax
                push    dx
                mov     dx, ds:60Eh
                mov     ax, ds:60Ch
                call    sub_8761
                mov     ds:60Eh, cx
                mov     ds:5CAh, cx
                mov     cx, ax
                mov     bx, si
                or      dx, dx
                jz      short loc_842A
                add     ax, 1
                adc     word ptr ds:5CAh, 0

loc_842A:                               ; CODE XREF: sub_83A3+7D↑j
                mov     ds:5C8h, ax
                xor     ax, ax
                mov     ds:5DEh, ax
                mov     ds:5E0h, ax
                mov     di, ds:607h
                pop     ax
                cmp     di, ds:60Eh
                jb      short loc_84B1
                jz      short loc_844A
                sub     bx, cx
                sbb     di, ds:60Eh
                jmp     short loc_8452
; ---------------------------------------------------------------------------

loc_844A:                               ; CODE XREF: sub_83A3+9D↑j
                xor     di, di
                sub     bx, cx
                jb      short loc_84B1
                jz      short loc_84A4

loc_8452:                               ; CODE XREF: sub_83A3+A5↑j
                mov     cx, dx
                xchg    ax, bx
                mul     word ptr es:[bp+2]
                mov     ds:607h, dx
                mov     ds:60Eh, ax
                mov     ax, di
                mul     word ptr es:[bp+2]
                add     ax, ds:607h
                xchg    ax, dx
                mov     ax, ds:60Eh
                sub     ax, cx
                sbb     dx, 0
                add     ax, bx
                adc     dx, 0
                jmp     short loc_84AA
; ---------------------------------------------------------------------------

loc_847A:                               ; CODE XREF: sub_83A3+13F↓j
                mov     ds:0AF8h, si
                mov     cx, ax
                call    sub_985F
                mov     ax, ds:0AF8h
                cmp     ax, cx
                jnz     short loc_848C
                jcxz    short loc_84A1

loc_848C:                               ; CODE XREF: sub_83A3+E5↑j
                mov     ds:0AF0h, ax
                call    sub_9ACF
                jnb     short loc_84A1

loc_8494:                               ; CODE XREF: sub_83A3+154↓j
                                        ; sub_83A3+22D↓j ...
                mov     ah, 0Fh

loc_8496:                               ; CODE XREF: sub_81D5+42↑j
                mov     al, ds:576h
                xor     cx, cx
                les     di, ds:59Eh
                clc

locret_84A0:                            ; CODE XREF: sub_83A0↑j
                retn
; ---------------------------------------------------------------------------

loc_84A1:                               ; CODE XREF: sub_83A3+E7↑j
                                        ; sub_83A3+EF↑j
                jmp     loc_8529
; ---------------------------------------------------------------------------

loc_84A4:                               ; CODE XREF: sub_83A3+AD↑j
                sub     ax, dx
                jbe     short loc_84B1
                xor     dx, dx

loc_84AA:                               ; CODE XREF: sub_83A3+D5↑j
                mov     ds:5DEh, ax
                mov     ds:5E0h, dx

loc_84B1:                               ; CODE XREF: sub_83A3+9B↑j
                                        ; sub_83A3+AB↑j ...
                mov     cx, ds:5BCh
                mov     dx, ds:0ADEh
                call    sub_9801
                pop     ax
                pop     si
                jb      short loc_8518
                mov     ds:5BCh, bx
                mov     ds:5BAh, dx
                sub     ax, dx
                sbb     si, ds:0AE2h
                mov     dx, ds:0AE8h
                mov     ds:0ADEh, dx
                jnz     short loc_84DC
                or      ax, ax
                jz      short loc_8529

loc_84DC:                               ; CODE XREF: sub_83A3+133↑j
                cmp     cx, ds:0AF8h
                jnz     short loc_84E4
                jcxz    short loc_847A

loc_84E4:                               ; CODE XREF: sub_83A3+13D↑j
                push    cx
                push    word ptr ds:0AF8h
                mov     ds:0AF0h, si
                mov     cx, ax
                call    sub_9ACF
                pop     word ptr ds:0AF8h
                pop     cx
                jb      short loc_8494
                mov     dx, ds:5BAh
                add     dx, 1
                adc     word ptr ds:0AE2h, 0
                sub     cx, 1
                sbb     word ptr ds:0AF8h, 0
                jnz     short loc_8511
                or      cx, cx

loc_8511:                               ; CODE XREF: sub_83A3+16A↑j
                jz      short loc_851B
                call    sub_985F
                jnb     short loc_851B

loc_8518:                               ; CODE XREF: sub_83A3+11B↑j
                                        ; sub_83A3+19C↓j
                jmp     loc_85D3
; ---------------------------------------------------------------------------

loc_851B:                               ; CODE XREF: sub_83A3:loc_8511↑j
                                        ; sub_83A3+173↑j
                mov     ds:5BCh, bx
                mov     ax, ds:0AE8h
                mov     ds:0ADEh, ax
                mov     ds:5BAh, dx

loc_8529:                               ; CODE XREF: sub_83A3:loc_84A1↑j
                                        ; sub_83A3+137↑j
                cmp     word ptr ds:5D2h, 0
                jz      short loc_8541
                mov     bx, ds:0ADEh
                mov     ds:0AE8h, bx
                mov     bx, ds:5BCh
                call    sub_9949
                jb      short loc_8518

loc_8541:                               ; CODE XREF: sub_83A3+18B↑j
                mov     ax, ds:5D6h
                or      ax, ax
                jnz     short loc_854B
                jmp     loc_85D6
; ---------------------------------------------------------------------------

loc_854B:                               ; CODE XREF: sub_83A3+1A3↑j
                add     ds:5C4h, ax
                adc     word ptr ds:5C6h, 0
                call    sub_99AA
                jb      short loc_85D3
                mov     byte ptr ds:574h, 1
                mov     dl, ds:573h
                mov     bx, ds:0ADEh
                mov     ds:0AE8h, bx
                mov     bx, ds:5BCh
                mov     cx, ds:5D6h

loc_8572:                               ; CODE XREF: sub_83A3+21D↓j
                call    sub_99F3
                jb      short loc_85D3
                push    word ptr ds:0AECh
                push    di
                push    ax
                call    DskWrtBufPurge
                mov     ds, word ptr ss:32Eh
                mov     byte ptr ss:34Bh, 38h ; '8'

loc_858B:                               ; CODE XREF: sub_83A3+1FC↓j
                call    DSKWRITE
                jz      short loc_85A7
                cmp     al, 27h ; '''
                jz      short loc_85C2
                mov     byte ptr ss:575h, 1
                call    HARDERRRW
                cmp     al, 1
                jz      short loc_858B
                cmp     al, 3
                clc
                jnz     short loc_85A7
                stc

loc_85A7:                               ; CODE XREF: sub_83A3+1EB↑j
                                        ; sub_83A3+201↑j
                pop     cx
                pop     bx
                pop     word ptr ss:0AE8h
                push    ss
                pop     ds
                jb      short loc_85D3
                jcxz    short loc_85D6
                mov     dl, 0
                add     word ptr ds:5BAh, 1
                adc     word ptr ds:0AE2h, 0
                jmp     short loc_8572
; ---------------------------------------------------------------------------

loc_85C2:                               ; CODE XREF: sub_83A3+1EF↑j
                push    ss
                pop     ds
                pop     cx
                pop     bx
                pop     word ptr ds:0AE8h
                mov     byte ptr ds:60Bh, 1
                stc
                jmp     loc_8494
; ---------------------------------------------------------------------------

loc_85D3:                               ; CODE XREF: sub_83A3:loc_83D0↑j
                                        ; sub_83A3:loc_8518↑j ...
                jmp     sub_8223
; ---------------------------------------------------------------------------

loc_85D6:                               ; CODE XREF: sub_83A3+1A5↑j
                                        ; sub_83A3+20F↑j
                mov     ax, ds:5D4h
                or      ax, ax
                jz      short loc_85F0
                mov     ds:5D2h, ax
                call    sub_99AA
                jb      short loc_85D3
                mov     word ptr ds:5CCh, 0
                call    sub_9949

loc_85EE:                               ; CODE XREF: sub_83A3:loc_8651↓j
                jb      short loc_85D3

loc_85F0:                               ; CODE XREF: sub_83A3+238↑j
                les     di, ds:59Eh
                mov     ax, ds:5DEh
                mov     cx, ds:5E0h
                or      ax, ax
                jnz     short loc_8601
                jcxz    short loc_8610

loc_8601:                               ; CODE XREF: sub_83A3+25A↑j
                add     es:[di+11h], ax
                adc     es:[di+13h], cx
                mov     ax, 1
                call    dword ptr ds:0C8h

loc_8610:                               ; CODE XREF: sub_83A3+25C↑j
                jmp     loc_82DB
; ---------------------------------------------------------------------------

loc_8613:                               ; CODE XREF: sub_83A3:loc_839D↑j
                mov     cx, ax
                or      cx, dx
                jnz     short loc_861C
                jmp     loc_86C6
; ---------------------------------------------------------------------------

loc_861C:                               ; CODE XREF: sub_83A3+274↑j
                cmp     dx, 7FFFh
                jnz     short loc_8625
                cmp     ax, 0FFFFh

loc_8625:                               ; CODE XREF: sub_83A3+27D↑j
                jbe     short loc_8634
                push    es
                les     di, ds:59Eh
                test    byte ptr es:[di+3], 10h
                pop     es
                jz      short loc_85D3

loc_8634:                               ; CODE XREF: sub_83A3:loc_8625↑j
                sub     ax, 1
                sbb     dx, 0
                push    bx
                mov     bx, es:[bp+2]
                call    sub_8761
                pop     bx
                mov     dx, cx
                mov     ds:607h, cx
                call    sub_8788
                mov     cx, ax
                call    sub_9801

loc_8651:                               ; CODE XREF: sub_83A3:loc_86C2↓j
                jb      short loc_85EE
                mov     ax, ds:0AF8h
                cmp     ax, cx
                jnz     short loc_865C
                jcxz    short loc_8685

loc_865C:                               ; CODE XREF: sub_83A3+2B5↑j
                mov     ds:0AF0h, ax
                call    sub_9ACF
                jb      short loc_8682

loc_8664:                               ; CODE XREF: sub_83A3:loc_86C4↓j
                mov     ax, ds:5CEh
                les     di, ds:59Eh
                mov     es:[di+11h], ax
                mov     ax, ds:5D0h
                mov     es:[di+13h], ax
                mov     ax, 2
                call    dword ptr ds:0C8h
                xor     cx, cx
                jmp     sub_8306
; ---------------------------------------------------------------------------

loc_8682:                               ; CODE XREF: sub_83A3+2BF↑j
                jmp     loc_8494
; ---------------------------------------------------------------------------

loc_8685:                               ; CODE XREF: sub_83A3+2B7↑j
                push    es
                les     di, ds:59Eh
                push    ax
                mov     ax, ds:0AE2h
                cmp     ax, es:[di+0Bh]
                pop     ax
                jnz     short loc_8699
                cmp     dx, es:[di+19h]

loc_8699:                               ; CODE XREF: sub_83A3+2F0↑j
                jnb     short loc_86B7
                mov     dx, es:[di+2Bh]
                mov     word ptr es:[di+19h], 0
                mov     es:[di+35h], dx
                mov     word ptr es:[di+0Bh], 0
                mov     dx, es:[di+2Dh]
                mov     es:[di+37h], dx

loc_86B7:                               ; CODE XREF: sub_83A3:loc_8699↑j
                pop     es
                xor     dx, dx
                dec     dx
                mov     ds:0AEAh, dx
                call    sub_9D19

loc_86C2:                               ; CODE XREF: sub_83A3+36F↓j
                jb      short loc_8651

loc_86C4:                               ; CODE XREF: sub_83A3:loc_86F4↓j
                jmp     short loc_8664
; ---------------------------------------------------------------------------

loc_86C6:                               ; CODE XREF: sub_83A3+276↑j
                xor     bx, bx
                push    es
                les     di, ds:59Eh
                xchg    bx, es:[di+2Dh]
                mov     ds:0AE8h, bx
                xor     bx, bx
                mov     es:[di+0Bh], bx
                mov     es:[di+37h], bx
                mov     es:[di+19h], bx
                mov     es:[di+35h], bx
                xchg    bx, es:[di+2Bh]
                pop     es
                cmp     bx, ds:0AE8h
                jnz     short loc_86F4
                or      bx, bx

loc_86F4:                               ; CODE XREF: sub_83A3+34D↑j
                jz      short loc_86C4
                push    es
                push    bp
                push    ax
                push    cx
                les     bp, ds:58Ah
                push    dx
                mov     dl, es:[bp+0]
                mov     cx, bx
                mov     ah, 2
                call    FastOpen_Update
                pop     dx
                pop     cx
                pop     ax
                pop     bp
                pop     es
                call    sub_9D13
                jmp     short loc_86C2
sub_83A3        endp


; =============== S U B R O U T I N E =======================================


DskWrtBufPurge  proc near               ; CODE XREF: FAT32_ABSDWRT+41↑p
                                        ; sub_83A3+1DA↑p
                push    bx
                push    cx
                mov     bx, ss:HIGH_SECTOR
                add     cx, dx
                mov     si, bx
                adc     si, 0
                mov     al, es:[bp+0]   ; [es:bp+DPB.DRIVE]
                call    GETCURHEAD

_bufq:                                  ; CODE XREF: DskWrtBufPurge+48↓j
                cmp     al, [di+4]      ; [di+BUFFINFO.buf_ID] ; Same drive?
                jnz     short bufq5     ; no
                cmp     bx, [di+8]      ; [di+BUFFINFO.buf_sector+2]
                jnz     short bufq04
                cmp     dx, [di+6]      ; [di+BUFFINFO.buf_sector]

bufq04:                                 ; CODE XREF: DskWrtBufPurge+1D↑j
                ja      short bufq5
                cmp     si, [di+8]
                jnz     short bufq05
                cmp     cx, [di+6]

bufq05:                                 ; CODE XREF: DskWrtBufPurge+27↑j
                jbe     short bufq5
                test    byte ptr [di+5], 40h ; [di+BUFFINFO.buf_flags],buf_dirty
                jz      short bufq4
                call    DEC_DIRTY_COUNT

bufq4:                                  ; CODE XREF: DskWrtBufPurge+32↑j
                mov     word ptr [di+4], 20FFh ; [di+BUFFINFO.buf_ID],
                                        ; ((buf_visit<<8)|0FFh)
                call    SCANPLACE
                jmp     short bufq6
; ---------------------------------------------------------------------------

bufq5:                                  ; CODE XREF: DskWrtBufPurge+18↑j
                                        ; DskWrtBufPurge:bufq04↑j ...
                mov     di, [di]        ; [di+BUFFINFO.buf_next]

bufq6:                                  ; CODE XREF: DskWrtBufPurge+3F↑j
                cmp     di, ss:FIRST_BUFF_ADDR
                jnz     short _bufq     ; go do next buffer.
                pop     cx
                pop     bx
                retn
DskWrtBufPurge  endp


; =============== S U B R O U T I N E =======================================


sub_8761        proc near               ; CODE XREF: SETUP+47↑p
                                        ; sub_83A3+46↑p ...
                cmp     bx, 200h
                jnz     short loc_877C
                mov     cx, dx
                mov     dx, ax
                and     dx, 1FFh
                mov     al, ah
                mov     ah, cl
                mov     cl, ch
                xor     ch, ch
                shr     cx, 1
                rcr     ax, 1
                retn
; ---------------------------------------------------------------------------

loc_877C:                               ; CODE XREF: sub_8761+4↑j
                mov     cx, ax
                mov     ax, dx
                xor     dx, dx
                div     bx
                xchg    ax, cx
                div     bx
                retn
sub_8761        endp


; =============== S U B R O U T I N E =======================================


sub_8788        proc near               ; CODE XREF: SETUP+61↑p
                                        ; sub_83A3:loc_83FF↑p ...
                mov     cl, es:[bp+5]
                xor     ch, ch
                jcxz    short locret_8796

loc_8790:                               ; CODE XREF: sub_8788+C↓j
                shr     dx, 1
                rcr     ax, 1
                loop    loc_8790

locret_8796:                            ; CODE XREF: sub_8788+6↑j
                retn
sub_8788        endp


; =============== S U B R O U T I N E =======================================


sub_8797        proc near               ; CODE XREF: DOS_RENAME+144↑p
                                        ; GetPathNoSet+1BB↓p
                call    sub_8E53
                mov     al, ds:56Bh
                and     al, 9Eh
                cmp     al, 8
                jnz     short loc_87A6
                call    SETDIRSRCH_FAT

loc_87A6:                               ; CODE XREF: sub_8797+A↑j
                call    sub_8900
                jnb     short loc_87AD
                jb      short loc_8800

loc_87AD:                               ; CODE XREF: DOS_CHDIR+E6↑p
                                        ; sub_8797+12↑j ...
                mov     word ptr ds:0AA5h, 0

loc_87B3:                               ; CODE XREF: sub_87F7+17↓j
                push    ds
                mov     ds, word ptr ds:5E4h
                mov     ah, [bx]
                or      ah, ah
                jz      short loc_8812
                push    ax
                mov     al, [bx+0Bh]
                call    sub_8B94
                pop     ax
                jz      short loc_8802
                cmp     ah, ss:57Fh
                jz      short loc_8812
                test    byte ptr [bx+0Bh], 8
                jz      short loc_87DA
                inc     byte ptr ss:57Bh

loc_87DA:                               ; CODE XREF: sub_8797+3C↑j
                mov     si, ss
                mov     es, si
                mov     si, bx
                mov     di, 54Bh
                cmp     byte ptr ss:54Bh, 0E5h
                jnz     short loc_87F1
                mov     byte ptr ss:54Bh, 5

loc_87F1:                               ; CODE XREF: sub_8797+52↑j
                call    sub_8875
                jz      short loc_882E
                pop     ds
sub_8797        endp


; =============== S U B R O U T I N E =======================================


sub_87F7        proc near               ; CODE XREF: DOS_DELETE+113↑p
                                        ; sub_7639+3E↑p ...
                les     bp, ds:58Ah
                call    sub_8884
                jnb     short loc_87AD

loc_8800:                               ; CODE XREF: sub_8797+14↑j
                jmp     short loc_8862
; ---------------------------------------------------------------------------

loc_8802:                               ; CODE XREF: sub_8797+2F↑j
                pop     ds
                inc     word ptr ds:0AA5h

loc_8807:                               ; CODE XREF: sub_87F7+2E↓j
                les     bp, ds:58Ah
                call    sub_8884
                jnb     short loc_87B3
                jmp     short loc_8862
; ---------------------------------------------------------------------------

loc_8812:                               ; CODE XREF: sub_8797+25↑j
                                        ; sub_8797+36↑j
                pop     ds
                mov     cx, ds:348h
                cmp     cx, ds:5D8h
                jnb     short loc_8821
                mov     ds:5D8h, cx

loc_8821:                               ; CODE XREF: sub_87F7+24↑j
                cmp     ah, ds:57Fh
                jz      short loc_8807
                mov     ds:5DAh, cx
                stc
                jmp     short loc_8862
; ---------------------------------------------------------------------------

loc_882E:                               ; CODE XREF: sub_8797+5D↑j
                mov     ch, [si]
                pop     ds
                mov     ah, ds:56Bh
                and     ah, 9Eh
                lea     si, [si+0Fh]
                test    ch, 8
                jz      short loc_8849
                test    ah, 8
                jz      short sub_87F7
                xor     ah, ah
                jmp     short loc_885A
; ---------------------------------------------------------------------------

loc_8849:                               ; CODE XREF: sub_87F7+47↑j
                cmp     ah, 8
                jz      short sub_87F7
                call    sub_8E67
                jz      short loc_885A
                test    byte ptr ds:57Eh, 0FFh
                jz      short sub_87F7

loc_885A:                               ; CODE XREF: sub_87F7+50↑j
                                        ; sub_87F7+5A↑j
                les     bp, ds:58Ah
                mov     ah, es:[bp+0]

loc_8862:                               ; CODE XREF: sub_87F7:loc_8800↑j
                                        ; sub_87F7+19↑j ...
                push    ss
                pop     es
                push    word ptr ds:5DAh
                pop     word ptr ds:0AB5h
                jnb     short locret_8874
                mov     word ptr ds:0AA5h, 0

locret_8874:                            ; CODE XREF: sub_87F7+75↑j
                retn
sub_87F7        endp


; =============== S U B R O U T I N E =======================================


sub_8875        proc near               ; CODE XREF: DOSCODE:775F↑p
                                        ; sub_8797:loc_87F1↑p
                mov     cx, 0Bh

loc_8878:                               ; CODE XREF: sub_8875+C↓j
                repe cmpsb
                jz      short locret_8883
                cmp     byte ptr es:[di-1], 3Fh ; '?'
                jz      short loc_8878

locret_8883:                            ; CODE XREF: sub_8875+5↑j
                retn
sub_8875        endp


; =============== S U B R O U T I N E =======================================


sub_8884        proc near               ; CODE XREF: sub_87F7+4↑p
                                        ; sub_87F7+14↑p
                mov     ax, ds:348h
                cmp     ax, ds:5DAh
                jz      short loc_88D4
                inc     ax
                lea     bx, [bx+20h]
                cmp     bx, dx
                jnz     short loc_88D6
                cmp     word ptr ds:5C2h, 0
                jnz     short loc_88AB
                cmp     word ptr ds:0ADCh, 0
                jnz     short loc_88AB
                cmp     ax, es:[bp+9]
                jnb     short loc_88D4
                jmp     short loc_8903
; ---------------------------------------------------------------------------

loc_88AB:                               ; CODE XREF: sub_8884+16↑j
                                        ; sub_8884+1D↑j
                mov     bl, ds:573h
                inc     bl
                cmp     bl, ds:577h
                jb      short loc_88DB
                mov     bx, ds:0AE0h
                mov     ds:0AE8h, bx
                mov     bx, ds:5DCh
                call    sub_A40C
                jnb     short loc_88D4
                cmp     word ptr ds:0AE8h, 0
                jnz     short loc_8903
                cmp     bx, 2
                jnb     short loc_8903

loc_88D4:                               ; CODE XREF: sub_8884+7↑j
                                        ; sub_8884+23↑j ...
                stc
                retn
; ---------------------------------------------------------------------------

loc_88D6:                               ; CODE XREF: sub_8884+F↑j
                mov     ds:348h, ax
                clc

locret_88DA:                            ; CODE XREF: sub_8900+22↓j
                retn
; ---------------------------------------------------------------------------

loc_88DB:                               ; CODE XREF: sub_8884+31↑j
                mov     ds:573h, bl
                mov     ds:348h, ax
                push    ds
                lds     di, ds:5E2h
                lds     dx, [di+6]
                mov     word ptr ss:607h, ds
                add     dx, 1
                adc     word ptr ss:607h, 0
                pop     ds
                call    sub_7F91
                xor     bx, bx
                jmp     short loc_8924
sub_8884        endp


; =============== S U B R O U T I N E =======================================


sub_8900        proc near               ; CODE XREF: DOS_DELETE+10E↑p
                                        ; DOS_CHDIR+BA↑p ...
                mov     ax, ds:348h

loc_8903:                               ; CODE XREF: sub_6F4F+23↑p
                                        ; sub_7639+39↑p ...
                mov     ds:348h, ax
                mov     cl, 5
                rol     ax, cl
                mov     dx, ax
                and     ax, 0FFE0h
                and     dx, 1Fh
                mov     bx, es:[bp+2]
                and     bl, 0E0h
                div     bx
                mov     bx, dx
                push    dx
                call    sub_7F07
                pop     bx
                jb      short locret_88DA

loc_8924:                               ; CODE XREF: sub_8884+7A↑j
                mov     dx, ds:5E2h
                add     dx, 18h
                add     bx, dx
                add     dx, es:[bp+2]
                clc
                retn
sub_8900        endp

; ---------------------------------------------------------------------------
sft_fcb_table   db 20 dup(0)            ; DATA XREF: int_2Fh_1230h+C↓o
                                        ; int_2Fh_1230h+17↓o
sftfcb0_cluster dw 2 dup(0)             ; DATA XREF: int_2Fh_1230h+2E↓r
                                        ; SFT_FREE+18↓w ...
sftfcb0_direntr dw 0                    ; DATA XREF: int_2Fh_1230h+28↓r
                db 114 dup(0)
word_89BF       dw 0                    ; DATA XREF: SETDIRSRCH+3C↓w
                                        ; SETDIRSRCH_FAT+47↓w ...
word_89C1       dw 0                    ; DATA XREF: SETDIRSRCH+45↓w
                                        ; SETDIRSRCH_FAT+42↓w ...

; =============== S U B R O U T I N E =======================================


SETDIRSRCH      proc near               ; CODE XREF: DOS_RENAME+13F↑p
                                        ; sub_6F4F+18↑p ...
                cmp     ds:ROOTCLUST_HW, 0
                jnz     short SETDIRSRCH_FAT32
                or      bx, bx
                jz      short SETDIRSRCH_FAT

SETDIRSRCH_FAT32:                       ; CODE XREF: SETDIRSRCH+5↑j
                                        ; SETDIRSRCH_FAT:loc_8A58↓j
                mov     ax, ds:ROOTCLUST_HW
                mov     ds:DIRSTART_HW, ax
                mov     ds:CLUSTNUM_HW, ax
                mov     ds:DIRSTART, bx
                mov     al, es:[bp+4]
                inc     al
                mov     ds:CLUSFAC, al
                push    si
                test    ds:FastOpenFlg, 2
                jnz     short loc_89F3
                call    UNPACK
                jnb     short loc_89F3
                pop     si
                retn
; ---------------------------------------------------------------------------

loc_89F3:                               ; CODE XREF: SETDIRSRCH+27↑j
                                        ; SETDIRSRCH+2C↑j
                mov     ds:CLUSNUM, di
                mov     dx, ds:CCONTENT_HW
                mov     ds:word_ADE, dx
                mov     cs:word_89BF, bx
                mov     dx, ds:CLUSTNUM_HW
                mov     cs:word_89C1, dx
                mov     dx, bx
                xor     bl, bl
                mov     ds:SECCLUSPOS, bl
                call    sub_9A89
                mov     si, ds:HIGH_SECTOR
                mov     ds:DIRSEC+2, si
                mov     ds:DIRSEC, dx
                pop     si
                clc
                retn
SETDIRSRCH      endp


; =============== S U B R O U T I N E =======================================


SETDIRSRCH_FAT  proc near               ; CODE XREF: sub_8797+C↑p
                                        ; SETDIRSRCH+9↑j ...
                mov     ds:ROOTCLUST_HW, 0
                cmp     word ptr es:[bp+0Fh], 0 ; DPB.FAT_SIZE
                jnz     short loc_8A5E  ; FAT
                                        ; FAT32
                mov     bx, es:[bp+37h] ; DPB.ROOT_CLUSTER+2
                mov     ds:ROOTCLUST_HW, bx
                cmp     bx, es:[bp+2Fh] ; DPB.LAST_CLUSTER+2
                mov     bx, es:[bp+35h] ; DPB.ROOT_CLUSTER
                jnz     short loc_8A4A
                cmp     bx, es:[bp+2Dh] ; DPB.LAST_CLUSTER

loc_8A4A:                               ; CODE XREF: SETDIRSRCH_FAT+1D↑j
                ja      short loc_8A5B
                cmp     ds:ROOTCLUST_HW, 0
                jnz     short loc_8A58
                cmp     bx, 2
                jb      short loc_8A5B

loc_8A58:                               ; CODE XREF: SETDIRSRCH_FAT+2A↑j
                jmp     SETDIRSRCH_FAT32
; ---------------------------------------------------------------------------

loc_8A5B:                               ; CODE XREF: SETDIRSRCH_FAT:loc_8A4A↑j
                                        ; SETDIRSRCH_FAT+2F↑j
                stc
                jmp     short locret_8A8F
; ---------------------------------------------------------------------------

loc_8A5E:                               ; CODE XREF: SETDIRSRCH_FAT+B↑j
                xor     ax, ax
                mov     ds:DIRSEC+2, ax
                mov     ds:DIRSTART, ax
                mov     ds:DIRSTART_HW, ax
                mov     cs:word_89C1, ax
                inc     ax
                mov     cs:word_89BF, ax
                dec     ax
                mov     ds:SECCLUSPOS, al
                dec     ax
                mov     ds:CLUSNUM, ax
                mov     ds:word_ADE, ax
                mov     ax, es:[bp+0Bh] ; [ES:BP+DPB.FIRST_SECTOR]
                mov     dx, es:[bp+11h] ; [ES:BP+DPB.DIR_SECTOR]
                sub     ax, dx
                mov     ds:CLUSFAC, al
                mov     ds:DIRSEC, dx
                clc

locret_8A8F:                            ; CODE XREF: SETDIRSRCH_FAT+35↑j
                retn
SETDIRSRCH_FAT  endp


; =============== S U B R O U T I N E =======================================


sub_8A90        proc near               ; CODE XREF: sub_5F6A+EA↑p
                                        ; DOSCODE:63F1↑p ...
                push    ax
                push    cx
                push    dx
                push    bx
                push    bp
                push    si
                push    di
                call    find_sft_entry_index
                xor     bx, bx
                mov     cx, 14h

loc_8A9F:                               ; CODE XREF: sub_8A90+52↓j
                cmp     word ptr cs:[bx-76B7h], 0
                jnz     short loc_8AAD
                cmp     word ptr cs:[bx-76B9h], 0

loc_8AAD:                               ; CODE XREF: sub_8A90+15↑j
                jnz     short loc_8ADF
                push    cx
                mov     cx, cs:word_89BF
                mov     cs:[bx-76B9h], cx
                mov     cx, cs:word_89C1
                mov     cs:[bx-76B9h], cx
                pop     cx
                mov     dx, ss:348h
                mov     cs:[bx-76B5h], dx
                xchg    ax, bx
                xor     dx, dx
                mov     cx, 6
                div     cx
                xchg    ax, bx
                mov     cs:[bx-76CDh], al
                jmp     short loc_8AE4
; ---------------------------------------------------------------------------

loc_8ADF:                               ; CODE XREF: sub_8A90:loc_8AAD↑j
                add     bx, 6
                loop    loc_8A9F

loc_8AE4:                               ; CODE XREF: sub_8A90+4D↑j
                pop     di
                pop     si
                pop     bp
                pop     bx
                pop     dx
                pop     cx
                pop     ax
                retn
sub_8A90        endp


; =============== S U B R O U T I N E =======================================


find_sft_entry_index proc near          ; CODE XREF: sub_8A90+7↑p
                                        ; int_2Fh_1230h↓p
                push    es              ; es:di = SFT entry
                xor     cx, cx
                mov     dx, es
                mov     es, cs:DosDSeg
                les     bx, es:SFT_ADDR ; address of the first SFT

f_sfte_1:                               ; CODE XREF: find_sft_entry_index+31↓j
                mov     ax, es
                cmp     ax, dx          ; same SFT segment ?
                jnz     short f_sfte_2  ; no
                mov     ax, di
                sub     ax, bx          ; ax = entry offset
                sub     ax, 6           ; ax = offset from start of the SFT table
                mov     bx, 59          ; SF_ENTRY.size (SFT entry size)
                xor     dx, dx
                div     bx              ; ax = SFT entry index into the table
                add     ax, cx          ; ax = SFT entry index (from the 1st SFT)
                pop     es
                retn
; ---------------------------------------------------------------------------

f_sfte_2:                               ; CODE XREF: find_sft_entry_index+13↑j
                add     cx, es:[bx+4]   ; SFT.SFCount ; number of entries in the table
                les     bx, es:[bx]     ; SFT.SFLink
                cmp     bx, 0FFFFh      ; the last SFT
                jnz     short f_sfte_1
                stc                     ; (not found)
                pop     es
                retn
find_sft_entry_index endp


; =============== S U B R O U T I N E =======================================


int_2Fh_1230h   proc near               ; CODE XREF: SFT_FREE+C↓p
                                        ; DATA XREF: DOSCODE:411F↑o
                call    find_sft_entry_index ; Windows95 - FIND SFT ENTRY IN INTERNAL FILE TABLES
                jb      short find_sfte_i_error
                push    es
                push    di
                push    cs
                pop     es
                assume es:DOSCODE
                mov     cx, 20          ; statically allocated with 20 entries,
                                        ; and used only for FCB calls
                mov     di, offset sft_fcb_table

scan_next_sftfcb:                       ; CODE XREF: int_2Fh_1230h+3E↓j
                repne scasb
                stc
                jnz     short sfte_i_notfound ; not found (cf=1)
                lea     bx, [di-1]      ; offset of the entry in the table
                sub     bx, offset sft_fcb_table ;
                                        ; index into new file system table
                mov     dx, bx
                add     bx, bx          ; 2*bx
                add     bx, dx          ; 3*bx
                add     bx, bx          ; bx = 6*bx
                mov     si, es:(sftfcb0_cluster+2)[bx] ; starting cluster number, hw
                mov     dx, es:sftfcb0_direntr[bx] ; directory entry number
                push    cx
                mov     cx, es:sftfcb0_cluster[bx] ; starting cluster number, lw
                or      cx, cx
                jnz     short sfte_i_found
                or      si, si
                jnz     short sfte_i_found
                pop     cx
                or      cx, cx
                jnz     short scan_next_sftfcb
                stc                     ; not found (cf=1)
                jmp     short sfte_i_notfound
; ---------------------------------------------------------------------------

sfte_i_found:                           ; CODE XREF: int_2Fh_1230h+35↑j
                                        ; int_2Fh_1230h+39↑j
                pop     ax              ; clear stack
                clc                     ; found (cf=0)

sfte_i_notfound:                        ; CODE XREF: int_2Fh_1230h+12↑j
                                        ; int_2Fh_1230h+41↑j
                pop     di
                pop     es
                assume es:nothing

find_sfte_i_error:                      ; CODE XREF: int_2Fh_1230h+3↑j
                mov     ax, 0
                retn
int_2Fh_1230h   endp


; =============== S U B R O U T I N E =======================================


SFT_FREE        proc near               ; CODE XREF: sub_6065↑p
                                        ; sub_7685+3E↑p ...
                push    ax
                push    cx
                push    dx
                push    bx
                push    bp
                push    si
                push    di
                mov     word ptr es:[di], 0 ; [ES:DI+SF_ENTRY.sf_ref_Count]
                call    int_2Fh_1230h
                jb      short sftf_1
                mov     cs:(sftfcb0_cluster+2)[bx], 0
                mov     cs:sftfcb0_cluster[bx], 0

sftf_1:                                 ; CODE XREF: SFT_FREE+F↑j
                pop     di
                pop     si
                pop     bp
                pop     bx
                pop     dx
                pop     cx
                pop     ax
                retn
SFT_FREE        endp


; =============== S U B R O U T I N E =======================================


sub_8B94        proc near               ; CODE XREF: sub_8797+2B↑p
                and     al, 0Fh
                cmp     al, 0Fh
                retn
sub_8B94        endp


; =============== S U B R O U T I N E =======================================


sub_8B99        proc near               ; CODE XREF: sub_6FE3+2D↑p
                                        ; sub_7062+6↑p ...
                mov     word ptr ds:57Eh, 0E500h
sub_8B99        endp


; =============== S U B R O U T I N E =======================================


GetPathNoSet    proc near               ; CODE XREF: DOS_DELETE+63↑p
                                        ; DOS_RENAME+B5↑p ...

; FUNCTION CHUNK AT 8C9D SIZE 000001B6 BYTES

                call    set_exerr_locus_disk
                mov     word ptr ds:5E2h, 0FFFFh
                mov     di, ds:5B2h
                cmp     word ptr [di+1], 5C3Ah
                jz      short loc_8BEA
                add     di, 3
                mov     si, di
                call    sub_8C72
                jb      short loc_8BE8

loc_8BBD:                               ; CODE XREF: GetPathNoSet+1A1↓j
                mov     al, ds:56Dh
                mov     ds:56Bh, al
                call    sub_51CA
                push    ss
                pop     es
                mov     si, 54Bh
                mov     di, ds:5B2h
                mov     dx, di
                mov     cx, 8

loc_8BD4:                               ; CODE XREF: GetPathNoSet:loc_8BDC↓j
                lodsb
                stosb
                cmp     al, 20h ; ' '
                jz      short loc_8BDC
                mov     dx, di

loc_8BDC:                               ; CODE XREF: GetPathNoSet+39↑j
                loop    loc_8BD4
                mov     di, dx
                mov     [di], cl
                call    sub_8ED3
                inc     al
                retn
; ---------------------------------------------------------------------------

loc_8BE8:                               ; CODE XREF: GetPathNoSet+1C↑j
                                        ; GetPathNoSet:loc_8BE8↓j
                jmp     short loc_8BE8
; ---------------------------------------------------------------------------

loc_8BEA:                               ; CODE XREF: GetPathNoSet+12↑j
                mov     byte ptr ds:56Bh, 16h
                les     di, ds:5A2h
                mov     ax, 0FFFFh
                mov     bx, es:[di+4Bh]
                mov     ds:0AEEh, bx
                mov     bx, es:[di+49h]
                mov     si, ds:5B6h
                cmp     si, ax
                jz      short loc_8C58
                cmp     ds:0AEEh, ax
                jnz     short loc_8C12
                cmp     bx, ax

loc_8C12:                               ; CODE XREF: GetPathNoSet+6F↑j
                jz      short loc_8C58
                test    byte ptr ds:1146h, 1
                jz      short loc_8C65
                push    es
                push    di
                push    cx
                push    word ptr [si-1]
                push    si
                push    bx
                push    word ptr ds:0AEEh
                mov     byte ptr [si-1], 0
                mov     si, ds:5B2h
                mov     bx, 113Ch
                mov     di, 0D7Ch
                mov     cx, 1147h
                mov     al, 1
                push    ds
                pop     es
                call    dword ptr [bx+2]
                jb      short loc_8C49
                cmp     byte ptr [si], 0
                jz      short loc_8C4A
                stc
                jmp     short loc_8C4A
; ---------------------------------------------------------------------------

loc_8C49:                               ; CODE XREF: GetPathNoSet+A0↑j
                clc

loc_8C4A:                               ; CODE XREF: GetPathNoSet+A5↑j
                                        ; GetPathNoSet+A8↑j
                pop     word ptr ds:0AEEh
                pop     bx
                pop     si
                pop     word ptr [si-1]
                pop     cx
                pop     di
                pop     es
                jnb     short loc_8C65

loc_8C58:                               ; CODE XREF: GetPathNoSet+69↑j
                                        ; GetPathNoSet:loc_8C12↑j
                mov     si, ds:5B2h
                add     si, 3
                les     bp, ds:58Ah
                jmp     short loc_8C9D
; ---------------------------------------------------------------------------

loc_8C65:                               ; CODE XREF: GetPathNoSet+7A↑j
                                        ; GetPathNoSet+B7↑j
                les     bp, ds:58Ah
                call    SETDIRSRCH
                jnb     short loc_8CAE
                xor     cl, cl
                stc
                retn
GetPathNoSet    endp


; =============== S U B R O U T I N E =======================================


sub_8C72        proc near               ; CODE XREF: GetPathNoSet+19↑p
                mov     si, di
                push    ss
                pop     es
                mov     di, 54Bh
                mov     cx, 9

loc_8C7C:                               ; CODE XREF: sub_8C72+1B↓j
                call    sub_9EE4
                cmp     al, 2Eh ; '.'
                jz      short loc_8C91
                call    PATHCHRCMP
                jz      short loc_8C8F
                or      al, al
                jz      short loc_8C91
                stosb
                loop    loc_8C7C

loc_8C8F:                               ; CODE XREF: sub_8C72+14↑j
                stc
                retn
; ---------------------------------------------------------------------------

loc_8C91:                               ; CODE XREF: sub_8C72+F↑j
                                        ; sub_8C72+18↑j
                inc     cx
                inc     cx
                mov     al, 20h ; ' '
                rep stosb
                push    ss
                pop     ds
                call    DEVNAME
                retn
sub_8C72        endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR GetPathNoSet

loc_8C9D:                               ; CODE XREF: GetPathNoSet+C4↑j
                call    SETDIRSRCH_FAT
                cmp     byte ptr [si], 0
                jnz     short loc_8CAE
                mov     al, ds:56Dh
                mov     ds:56Bh, al
                xor     ah, ah
                retn
; ---------------------------------------------------------------------------

loc_8CAE:                               ; CODE XREF: GetPathNoSet+CD↑j
                                        ; GetPathNoSet+104↑j ...
                push    es
                push    si
                mov     di, si
                mov     cx, ds:5C2h
                cmp     word ptr ds:5B6h, 0FFFFh
                jz      short loc_8CD2
                cmp     di, ds:5B6h
                jnz     short loc_8CD2
                les     di, ds:5A2h
                mov     ax, ds:0ADCh
                mov     es:[di+4Bh], ax
                mov     es:[di+49h], cx

loc_8CD2:                               ; CODE XREF: GetPathNoSet+11C↑j
                                        ; GetPathNoSet+122↑j
                push    ss
                pop     es
                mov     di, 54Bh
                mov     ax, 2020h
                stosb
                stosw
                stosw
                stosw
                stosw
                stosw
                mov     di, 54Bh
                xor     ah, ah

loc_8CE5:                               ; CODE XREF: GetPathNoSet+15D↓j
                inc     cl
                lodsb
                cmp     al, 2Eh ; '.'
                jz      short loc_8CFE
                or      al, al
                jz      short loc_8D17
                cmp     al, 5Ch ; '\'
                jz      short loc_8D17
                cmp     al, 3Fh ; '?'
                jnz     short loc_8CFB
                or      ah, 1

loc_8CFB:                               ; CODE XREF: GetPathNoSet+157↑j
                stosb
                jmp     short loc_8CE5
; ---------------------------------------------------------------------------

loc_8CFE:                               ; CODE XREF: GetPathNoSet+14B↑j
                mov     di, 553h

loc_8D01:                               ; CODE XREF: GetPathNoSet+173↓j
                lodsb
                or      al, al
                jz      short loc_8D17
                cmp     al, 5Ch ; '\'
                jz      short loc_8D17
                cmp     al, 3Fh ; '?'
                jnz     short loc_8D11
                or      ah, 1

loc_8D11:                               ; CODE XREF: GetPathNoSet+16D↑j
                stosb
                jmp     short loc_8D01
; ---------------------------------------------------------------------------

loc_8D14:                               ; CODE XREF: GetPathNoSet+182↓j
                jmp     loc_8E1B
; ---------------------------------------------------------------------------

loc_8D17:                               ; CODE XREF: GetPathNoSet+14F↑j
                                        ; GetPathNoSet+153↑j ...
                dec     si
                mov     cl, ah
                or      cl, 80h
                pop     di
                pop     es
                cmp     si, di
                jz      short loc_8D14
                push    si
                mov     al, [si]
                or      al, al
                jnz     short loc_8D32
                mov     bh, ds:56Dh
                mov     ds:56Bh, bh

loc_8D32:                               ; CODE XREF: GetPathNoSet+189↑j
                push    es
                push    ss
                pop     es
                call    DEVNAME
                pop     es
                jb      short loc_8D46
                or      al, al
                jnz     short loc_8D6C
                pop     si
                jmp     loc_8BBD
; ---------------------------------------------------------------------------

loc_8D43:                               ; CODE XREF: GetPathNoSet+1C1↓j
                jmp     loc_8E44
; ---------------------------------------------------------------------------

loc_8D46:                               ; CODE XREF: GetPathNoSet+19A↑j
                cmp     byte ptr ds:54Bh, 0E5h
                jnz     short loc_8D52
                mov     byte ptr ds:54Bh, 5

loc_8D52:                               ; CODE XREF: GetPathNoSet+1AC↑j
                push    di
                push    es
                push    cx
                call    sub_9015
                jnb     short loc_8D5D
                call    sub_8797

loc_8D5D:                               ; CODE XREF: GetPathNoSet+1B9↑j
                pop     cx
                pop     es
                pop     di
                jb      short loc_8D43
                lds     di, ds:5E2h
                test    byte ptr [bx+0Bh], 10h
                jnz     short loc_8D6F

loc_8D6C:                               ; CODE XREF: GetPathNoSet+19E↑j
                jmp     loc_8E1F
; ---------------------------------------------------------------------------

loc_8D6F:                               ; CODE XREF: GetPathNoSet+1CB↑j
                cmp     byte ptr ss:34Ch, 0
                jz      short loc_8D9D
                mov     dx, di
                mov     cx, ds
                push    ss
                pop     ds
                pop     di
                test    byte ptr ds:1146h, 1
                jz      short loc_8D90
                test    byte ptr ds:1146h, 2
                jz      short loc_8D90
                mov     di, ds:0D9Ch

loc_8D90:                               ; CODE XREF: GetPathNoSet+1E4↑j
                                        ; GetPathNoSet+1EB↑j
                cmp     byte ptr [di], 0
                jnz     short loc_8D98
                jmp     locret_8E3F
; ---------------------------------------------------------------------------

loc_8D98:                               ; CODE XREF: GetPathNoSet+1F4↑j
                push    di
                mov     di, dx
                mov     ds, cx

loc_8D9D:                               ; CODE XREF: GetPathNoSet+1D6↑j
                xor     dx, dx
                cmp     es:[bp+0Fh], dx
                jnz     short loc_8DA8
                mov     dx, [si-6]

loc_8DA8:                               ; CODE XREF: GetPathNoSet+204↑j
                mov     ss:0AEEh, dx
                mov     dx, [si]
                push    ds
                push    ss
                pop     ds
                test    byte ptr ds:1146h, 2
                jz      short loc_8DC9
                mov     bx, dx
                mov     di, ds:5BCh
                push    ax
                call    SETDIRSRCH
                pop     ax
                add     sp, 2
                jmp     short loc_8E05
; ---------------------------------------------------------------------------

loc_8DC9:                               ; CODE XREF: GetPathNoSet+218↑j
                pop     ds
                sub     bx, di
                sub     si, di
                push    bx
                push    ax
                push    si
                push    cx
                lds     bx, [di+6]
                push    bx
                push    ds
                mov     bx, dx
                push    ss
                pop     ds
                call    SETDIRSRCH
                pop     word ptr ds:607h
                pop     dx
                jb      short loc_8DEF
                mov     byte ptr ds:34Bh, 18h
                xor     al, al
                call    sub_AAB0

loc_8DEF:                               ; CODE XREF: GetPathNoSet+244↑j
                pop     cx
                pop     si
                pop     ax
                pop     bx
                jnb     short loc_8DFA
                pop     di
                mov     si, di
                jmp     short loc_8E1B
; ---------------------------------------------------------------------------

loc_8DFA:                               ; CODE XREF: GetPathNoSet+254↑j
                call    sub_7F9D
                mov     di, ds:5E2h
                add     si, di
                add     bx, di

loc_8E05:                               ; CODE XREF: GetPathNoSet+228↑j
                pop     di
                call    sub_90DB
                mov     al, [di]
                or      al, al
                jz      short locret_8E3F
                inc     di
                mov     si, di
                call    PATHCHRCMP
                jnz     short loc_8E1A
                jmp     loc_8CAE
; ---------------------------------------------------------------------------

loc_8E1A:                               ; CODE XREF: GetPathNoSet+276↑j
                dec     si

loc_8E1B:                               ; CODE XREF: GetPathNoSet:loc_8D14↑j
                                        ; GetPathNoSet+259↑j
                xor     cl, cl
                jmp     short loc_8E4B
; ---------------------------------------------------------------------------

loc_8E1F:                               ; CODE XREF: GetPathNoSet:loc_8D6C↑j
                pop     di
                push    ss
                pop     ds
                test    byte ptr ds:1146h, 1
                jz      short loc_8E34
                test    byte ptr ds:1146h, 2
                jz      short loc_8E34
                mov     di, ds:0D9Ch

loc_8E34:                               ; CODE XREF: GetPathNoSet+288↑j
                                        ; GetPathNoSet+28F↑j
                mov     al, [di]
                or      al, al
                jnz     short loc_8E40
                call    sub_90DB
                inc     al

locret_8E3F:                            ; CODE XREF: GetPathNoSet+1F6↑j
                                        ; GetPathNoSet+26E↑j
                retn
; ---------------------------------------------------------------------------

loc_8E40:                               ; CODE XREF: GetPathNoSet+299↑j
                mov     si, di
                jmp     short loc_8E4B
; ---------------------------------------------------------------------------

loc_8E44:                               ; CODE XREF: GetPathNoSet:loc_8D43↑j
                pop     si
                mov     al, [si]
                mov     si, di
                or      al, al

loc_8E4B:                               ; CODE XREF: GetPathNoSet+27E↑j
                                        ; GetPathNoSet+2A3↑j
                mov     al, ds:56Dh
                mov     ds:56Bh, al
                stc
                retn
; END OF FUNCTION CHUNK FOR GetPathNoSet

; =============== S U B R O U T I N E =======================================


sub_8E53        proc near               ; CODE XREF: sub_6F4F+1D↑p
                                        ; sub_7639+35↑p ...
                les     bp, ds:58Ah
                xor     ax, ax
                mov     ds:348h, ax
                mov     ds:57Bh, al
                dec     ax
                mov     ds:5D8h, ax
                mov     ds:5DAh, ax
                retn
sub_8E53        endp


; =============== S U B R O U T I N E =======================================


sub_8E67        proc near               ; CODE XREF: sub_87F7+57↑p
                                        ; sub_9015+50↓p ...
                push    ax
                mov     al, ss:56Bh
                not     al
                and     al, ch
                and     al, 16h
                pop     ax
                retn
sub_8E67        endp


; =============== S U B R O U T I N E =======================================


DEVNAME         proc near               ; CODE XREF: sub_5F6A+71↑p
                                        ; DOS_RENAME+12A↑p ...
                push    si
                push    di
                push    cx
                push    ax
                push    word ptr ds:54Bh
                cmp     byte ptr ds:54Bh, 5
                jnz     short loc_8E88
                mov     byte ptr ds:54Bh, 0E5h

loc_8E88:                               ; CODE XREF: DEVNAME+D↑j
                test    byte ptr ds:56Bh, 8
                jnz     short loc_8EB0
                mov     si, 48h ; 'H'

loc_8E92:                               ; CODE XREF: DEVNAME+3A↓j
                test    word ptr [si+4], 8000h
                jz      short loc_8EA9
                mov     ax, si
                add     si, 0Ah
                mov     di, 54Bh
                mov     cx, 4
                repe cmpsw
                xchg    ax, si
                jz      short loc_8EBE

loc_8EA9:                               ; CODE XREF: DEVNAME+23↑j
                lds     si, [si]
                cmp     si, 0FFFFh
                jnz     short loc_8E92

loc_8EB0:                               ; CODE XREF: DEVNAME+19↑j
                stc

loc_8EB1:                               ; CODE XREF: DEVNAME+5D↓j
                mov     cx, ss
                mov     ds, cx
                pop     word ptr ds:54Bh
                pop     ax
                pop     cx
                pop     di
                pop     si
                retn
; ---------------------------------------------------------------------------

loc_8EBE:                               ; CODE XREF: DEVNAME+33↑j
                mov     word ptr ss:59Ch, ds
                mov     bh, [si+4]
                or      bh, 0C0h
                and     bh, 0DFh
                mov     ss:59Ah, si
                jmp     short loc_8EB1
DEVNAME         endp


; =============== S U B R O U T I N E =======================================


sub_8ED3        proc near               ; CODE XREF: GetPathNoSet+43↑p
                mov     ax, 2020h
                mov     di, 553h
                stosw
                stosb
                mov     al, 40h ; '@'
                stosb
                xor     ax, ax
                mov     cx, 0Ah
                rep stosw
                call    DATE16
                mov     di, 561h
                xchg    ax, dx
                stosw
                xchg    ax, dx
                stosw
                mov     si, di
                mov     ax, ds:59Ah
                stosw
                mov     ax, ds:59Ch
                stosw
                mov     ah, bh
                mov     bx, 54Bh
                xor     al, al
                retn
sub_8ED3        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

ValidateCDS     proc near               ; CODE XREF: DOSCODE:668D↑p
                                        ; TransPathSet+DB↓p

var_6           = dword ptr -6
var_2           = word ptr -2

                push    bp
                mov     bp, sp
                sub     sp, 6
                mov     [bp+var_2], di
                lds     si, ss:5A2h
                mov     word ptr [bp+var_6], si
                mov     word ptr [bp+var_6+2], ds
                call    ECritDisk
                test    word ptr [si+43h], 8000h
                jz      short loc_8F22
                jmp     loc_8FC6
; ---------------------------------------------------------------------------

loc_8F22:                               ; CODE XREF: ValidateCDS+1C↑j
                xor     dl, dl
                xchg    dl, ss:34Ch
                push    ss
                pop     es
                call    FStrCpy
                mov     si, [bp+var_2]
                push    ss
                pop     ds
                call    sub_C0A6
                push    ss
                pop     ds
                mov     ds:34Ch, dl
                les     di, ds:5A2h
                push    bp
                call    FATREAD_CDS
                pop     bp
                jb      short loc_8FC6
                lds     si, ds:5A2h
                cmp     word ptr [si+4Bh], 0FFFFh
                jnz     short loc_8F55
                cmp     word ptr [si+49h], 0FFFFh

loc_8F55:                               ; CODE XREF: ValidateCDS+4E↑j
                jnz     short loc_8FB8
                push    ss
                pop     es
                push    word ptr ss:5B2h
                cmp     si, word ptr [bp+var_6]
                jnz     short loc_8F6E
                mov     di, [bp+var_2]
                mov     ss:5B2h, di
                call    FStrCpy

loc_8F6E:                               ; CODE XREF: ValidateCDS+60↑j
                push    ss
                pop     ds
                push    word ptr ds:56Dh
                push    bp
                call    DOS_CHDIR
                pop     bp
                pop     bx
                pop     word ptr ds:5B2h
                mov     ds:56Dh, bl
                mov     di, ds:0ADCh
                lds     si, [bp+var_6]
                jnb     short loc_8F9C
                mov     ss:5A2h, si
                mov     word ptr ss:5A4h, ds
                xor     cx, cx
                xor     di, di
                mov     [si+3], cl

loc_8F9C:                               ; CODE XREF: ValidateCDS+88↑j
                lds     si, ss:5A2h
                test    word ptr [si+43h], 2000h
                jz      short loc_8FAD
                mov     cx, 0FFFFh
                mov     di, cx

loc_8FAD:                               ; CODE XREF: ValidateCDS+A5↑j
                mov     ss:0ADCh, di
                mov     [si+4Bh], di
                mov     [si+49h], cx

loc_8FB8:                               ; CODE XREF: ValidateCDS:loc_8F55↑j
                les     di, [bp+var_6]
                mov     ss:5A2h, di
                mov     word ptr ss:5A4h, es
                clc

loc_8FC6:                               ; CODE XREF: ValidateCDS+1E↑j
                                        ; ValidateCDS+44↑j
                call    LCritDisk
                les     di, [bp+var_6]
                mov     sp, bp
                pop     bp
                retn
ValidateCDS     endp


; =============== S U B R O U T I N E =======================================


sub_8FD0        proc near               ; CODE XREF: sub_BEEE↓j
                push    di
                push    si
                mov     di, si
                mov     al, [si]
                call    PATHCHRCMP
                jnz     short loc_8FF2
                inc     si
                lodsw
                or      ax, 2020h
                cmp     ax, 6564h
                jnz     short loc_9012
                lodsb
                or      al, 20h
                cmp     al, 76h ; 'v'
                jnz     short loc_9012
                lodsb
                call    PATHCHRCMP
                jnz     short loc_9012

loc_8FF2:                               ; CODE XREF: sub_8FD0+9↑j
                push    ds
                push    si
                call    sub_9E7C
                cmp     byte ptr [si], 0
                stc
                jnz     short loc_9008
                push    ss
                pop     ds
                mov     al, ds:56Dh
                mov     ds:56Bh, al
                call    DEVNAME

loc_9008:                               ; CODE XREF: sub_8FD0+2B↑j
                pop     si
                pop     ds

loc_900A:                               ; CODE XREF: sub_8FD0+43↓j
                pop     di
                jnb     short loc_900F
                mov     si, di

loc_900F:                               ; CODE XREF: sub_8FD0+3B↑j
                pop     di
                cmc
                retn
; ---------------------------------------------------------------------------

loc_9012:                               ; CODE XREF: sub_8FD0+13↑j
                                        ; sub_8FD0+1A↑j ...
                stc
                jmp     short loc_900A
sub_8FD0        endp


; =============== S U B R O U T I N E =======================================


sub_9015        proc near               ; CODE XREF: GetPathNoSet+1B6↑p
                test    byte ptr ss:1146h, 1
                jnz     short loc_9020

loc_901D:                               ; CODE XREF: sub_9015+11↓j
                jmp     loc_90D9
; ---------------------------------------------------------------------------

loc_9020:                               ; CODE XREF: sub_9015+6↑j
                test    byte ptr ss:1146h, 8
                jnz     short loc_901D
                mov     bx, 113Ch
                mov     si, ss:5B2h
                mov     di, 0D7Ch
                mov     cx, 1147h
                mov     al, 1
                push    ds
                pop     es
                call    dword ptr [bx+2]
                jnb     short loc_9042
                jmp     loc_90C8
; ---------------------------------------------------------------------------

loc_9042:                               ; CODE XREF: sub_9015+28↑j
                lea     bx, [si-2]
                cmp     bx, ss:5B2h
                jz      short loc_90C8
                cmp     byte ptr [si], 0
                jnz     short loc_9083
                push    cx
                mov     cl, ss:56Bh
                mov     ch, ss:56Dh
                mov     ss:56Bh, ch
                mov     ch, es:[di+0Bh]
                call    sub_8E67
                pop     cx
                jnz     short loc_90D9
                cmp     byte ptr ss:34Ch, 0
                jz      short loc_9083
                cmp     byte ptr [si], 0
                jnz     short loc_9083
                test    byte ptr es:[di+0Bh], 10h
                jz      short loc_9083
                mov     bx, cx
                jmp     short loc_909A
; ---------------------------------------------------------------------------

loc_9083:                               ; CODE XREF: sub_9015+3A↑j
                                        ; sub_9015+5C↑j ...
                mov     bx, cx
                mov     ax, [bx+0Bh]
                mov     ss:5C2h, ax
                mov     ax, [bx+7]
                mov     ss:0ADEh, ax
                mov     ax, [bx+5]
                mov     ss:5BCh, ax

loc_909A:                               ; CODE XREF: sub_9015+6C↑j
                mov     ss:0D9Ch, si
                mov     ax, [bx+9]
                mov     ss:348h, ax
                push    es
                les     bx, ss:58Ah
                mov     ah, es:[bx]
                pop     es
                mov     word ptr ss:5E2h, 0
                mov     word ptr ss:5E4h, es
                mov     bx, di
                lea     si, [di+1Ah]
                or      byte ptr ss:1146h, 12h
                retn
; ---------------------------------------------------------------------------

loc_90C8:                               ; CODE XREF: sub_9015+2A↑j
                                        ; sub_9015+35↑j
                cmp     ax, 0FFFFh
                jnz     short loc_90D3
                mov     byte ptr ss:1146h, 0

loc_90D3:                               ; CODE XREF: sub_9015+B6↑j
                and     byte ptr ss:1146h, 0FBh

loc_90D9:                               ; CODE XREF: sub_9015:loc_901D↑j
                                        ; sub_9015+54↑j
                stc
                retn
sub_9015        endp


; =============== S U B R O U T I N E =======================================


sub_90DB        proc near               ; CODE XREF: GetPathNoSet+267↑p
                                        ; GetPathNoSet+29B↑p
                pushf
                test    byte ptr ss:1146h, 1
                jz      short loc_9161
                test    byte ptr ss:1146h, 2
                jz      short loc_90F9
                and     byte ptr ss:1146h, 0FDh
                mov     di, ss:0D9Ch
                jmp     short loc_915B
; ---------------------------------------------------------------------------

loc_90F9:                               ; CODE XREF: sub_90DB+F↑j
                push    ds
                push    es
                push    bx
                push    si
                push    di
                push    cx
                push    ax
                lds     di, ss:5E2h
                mov     si, 1147h
                lds     ax, [di+6]
                mov     ss:[si+1], ax
                mov     word ptr ss:[si+3], ds
                push    ss
                pop     ds
                mov     ax, ds:0ADEh
                mov     [si+7], ax
                mov     ax, ds:5BCh
                mov     [si+5], ax
                mov     ax, ds:348h
                mov     [si+9], ax
                mov     ax, ds:5C2h
                mov     [si+0Bh], ax
                mov     ax, bx
                add     di, 18h
                sub     ax, di
                mov     cl, 20h ; ' '
                div     cl
                mov     [si], al
                push    ds
                pop     es
                mov     ds, word ptr ds:5E4h
                mov     di, bx
                cmp     word ptr [di+1Ah], 0
                jz      short loc_9154
                push    si
                pop     bx
                mov     al, 2
                mov     si, 113Ch
                call    dword ptr es:[si+2]
                clc

loc_9154:                               ; CODE XREF: sub_90DB+6B↑j
                pop     ax
                pop     cx
                pop     di
                pop     si
                pop     bx
                pop     es
                pop     ds

loc_915B:                               ; CODE XREF: sub_90DB+1C↑j
                or      byte ptr ss:1146h, 8

loc_9161:                               ; CODE XREF: sub_90DB+7↑j
                popf
                retn
sub_90DB        endp

; ---------------------------------------------------------------------------
                db  16h
                db  0Eh
                db  16h
                db  0Dh
                db  0Dh
                db  0Eh
                db  86h
                db    4
                db  86h
                db    5
                db  87h
                db    8
                db  87h
                db  0Ah
                db  86h
                db    7
                db  86h
                db    5

; =============== S U B R O U T I N E =======================================


IOFUNC          proc near               ; CODE XREF: $STD_CON_INPUT_NO_ECHO+11↑p
                                        ; $STD_CON_INPUT_NO_ECHO+43↑p ...
                mov     word ptr ss:38Ch, ss
                mov     word ptr ss:38Ah, 3BCh
                mov     word ptr ss:38Eh, 1
                mov     ss:3BCh, ax
                test    byte ptr [si+6], 80h
                jz      short loc_9195
                jmp     loc_923A
; ---------------------------------------------------------------------------

loc_9195:                               ; CODE XREF: IOFUNC+1B↑j
                test    byte ptr [si+5], 80h
                jnz     short loc_919E
                jmp     loc_923A
; ---------------------------------------------------------------------------

loc_919E:                               ; CODE XREF: IOFUNC+24↑j
                push    es
                call    save_world
                mov     dx, ds
                mov     bx, ss
                mov     ds, bx
                mov     es, bx
                xor     bx, bx
                cmp     ah, 5
                jnz     short loc_91B3
                mov     bh, 4

loc_91B3:                               ; CODE XREF: IOFUNC+3A↑j
                mov     ds:37Fh, bx
                xor     bx, bx
                mov     ds:389h, bl
                mov     bl, ah
                mov     ah, cs:[bx-6E9Dh]
                add     bx, bx
                mov     cx, cs:[bx-6E97h]
                mov     bx, 37Ch
                mov     ds:37Ch, ah
                mov     ds:37Eh, ch
                mov     ds, dx
                call    DEVIOCALL
                mov     di, ss:37Fh
                and     di, di
                js      short loc_9219

loc_91E4:                               ; CODE XREF: IOFUNC:loc_9238↓j
                mov     ax, ss
                mov     ds, ax
                cmp     ch, 5
                jnz     short loc_91F3
                mov     al, ds:389h
                mov     ds:3BCh, al

loc_91F3:                               ; CODE XREF: IOFUNC+76↑j
                mov     ah, ds:380h
                not     ah
                and     ah, 2
                call    restore_world
                pop     es
                pushf
                mov     al, ss:83h
                cbw
                inc     ax
                jnz     short loc_9213
                dec     ax
                jnz     short loc_9213
                inc     byte ptr ss:83h
                popf
                retn
; ---------------------------------------------------------------------------

loc_9213:                               ; CODE XREF: IOFUNC+92↑j
                                        ; IOFUNC+95↑j
                mov     ax, ss:3BCh
                popf
                retn
; ---------------------------------------------------------------------------

loc_9219:                               ; CODE XREF: IOFUNC+6D↑j
                mov     ah, cl
                call    sub_A173
                cmp     al, 1
                jnz     short loc_9229
                call    restore_world
                pop     es
                jmp     IOFUNC
; ---------------------------------------------------------------------------

loc_9229:                               ; CODE XREF: IOFUNC+AB↑j
                and     byte ptr ss:380h, 0FDh
                cmp     al, 3
                jnz     short loc_9238
                dec     byte ptr ss:83h

loc_9238:                               ; CODE XREF: IOFUNC+BC↑j
                jmp     short loc_91E4
; ---------------------------------------------------------------------------

loc_923A:                               ; CODE XREF: IOFUNC+1D↑j
                                        ; IOFUNC+26↑j
                or      ah, ah
                jz      short sub_9261
                dec     ah
                jz      short loc_9247
                dec     ah
                jz      short loc_9257
                retn
; ---------------------------------------------------------------------------

loc_9247:                               ; CODE XREF: IOFUNC+CB↑j
                push    word ptr [si+15h]
                push    word ptr [si+17h]
                call    sub_9261
; ---------------------------------------------------------------------------
                pop     word ptr [si+17h]
                pop     word ptr [si+15h]
                retn
; ---------------------------------------------------------------------------

loc_9257:                               ; CODE XREF: IOFUNC+CF↑j
                call    sub_9281
                call    DOS_WRITE
                call    sub_92B5
IOFUNC          endp

; ---------------------------------------------------------------------------
                retn

; =============== S U B R O U T I N E =======================================

; Attributes: noreturn

sub_9261        proc near               ; CODE XREF: IOFUNC+C7↑j
                                        ; IOFUNC+D8↑p
                call    sub_9281
                or      word ptr ss:611h, 40h
                call    DOS_READ
                and     word ptr ss:611h, 0FFBFh
                or      cx, cx
                call    sub_92B5
sub_9261        endp

; ---------------------------------------------------------------------------
                db  36h ; 6
                db 0A0h
                db 0BCh
                db    3
                db  75h ; u
                db 0E2h
                db 0B0h
                db  1Ah
                db 0C3h

; =============== S U B R O U T I N E =======================================


sub_9281        proc near               ; CODE XREF: IOFUNC:loc_9257↑p
                                        ; sub_9261↑p
                pop     word ptr ss:36Ch
                push    es
                call    save_world
                mov     word ptr ss:5A0h, ds
                lds     cx, ss:32Ch
                push    cx
                push    ds
                lds     cx, ss:38Ah
                mov     ss:32Ch, cx
                mov     word ptr ss:32Eh, ds
                mov     cx, ss
                mov     ds, cx
                mov     ds:59Eh, si
                mov     cx, ds:38Eh
                jmp     word ptr ds:36Ch
sub_9281        endp


; =============== S U B R O U T I N E =======================================

; Attributes: noreturn

sub_92B5        proc near               ; CODE XREF: IOFUNC+E8↑p
                                        ; sub_9261+14↑p
                pop     word ptr ds:36Ch
                pop     word ptr ds:32Eh
                pop     word ptr ds:32Ch
                call    restore_world
sub_92B5        endp ; sp-analysis failed

                pop     es
                jmp     word ptr ss:36Ch

; =============== S U B R O U T I N E =======================================


sub_92CA        proc near               ; CODE XREF: DOS_DUP+F↑p
                                        ; DOSCODE:72AD↑p ...
                push    es
                call    save_world
                mov     al, 0Dh
                jmp     short loc_92D8
sub_92CA        endp


; =============== S U B R O U T I N E =======================================

; Attributes: noreturn

DEV_CLOSE_SFT   proc near               ; CODE XREF: DOSCODE:7856↑p
                                        ; STATCHK+62↓p
                push    es
                call    save_world
                mov     al, 0Eh

loc_92D8:                               ; CODE XREF: sub_92CA+6↑j
                test    byte ptr es:[di+6], 80h
                jnz     short loc_9343
                xor     ah, ah
                test    byte ptr es:[di+5], 80h
                les     di, es:[di+7]
                jnz     short loc_92FD
                cmp     byte ptr ss:303h, 1
                jbe     short loc_9343
                mov     cx, es:[di]
                mov     ah, ch
                les     di, es:[di+13h]

loc_92FD:                               ; CODE XREF: DEV_CLOSE_SFT+18↑j
                test    byte ptr es:[di+5], 8
                jz      short loc_9343
                push    es
                pop     ds
                mov     si, di

loc_9308:                               ; CODE XREF: DEV_CLOSE_SFT+6E↓j
                push    ss
                pop     es
                mov     di, 35Ah
                mov     bx, di
                push    ax
                mov     al, 0Dh
                stosb
                pop     ax
                xchg    ah, al
                stosw
                xchg    ah, al
                mov     word ptr es:[di], 0
                push    ax
                call    DEVIOCALL2
                mov     di, es:[bx+3]
                and     di, di
                jns     short loc_9342
                test    byte ptr [si+5], 80h
                jz      short loc_9334
                mov     ah, 86h
                jmp     short loc_9338
; ---------------------------------------------------------------------------

loc_9334:                               ; CODE XREF: DEV_CLOSE_SFT+5C↑j
                mov     al, cl
                mov     ah, 6

loc_9338:                               ; CODE XREF: DEV_CLOSE_SFT+60↑j
                call    sub_A173
                cmp     al, 1
                jnz     short loc_9342
                pop     ax
                jmp     short loc_9308
; ---------------------------------------------------------------------------

loc_9342:                               ; CODE XREF: DEV_CLOSE_SFT+56↑j
                                        ; DEV_CLOSE_SFT+6B↑j
                pop     ax

loc_9343:                               ; CODE XREF: DEV_CLOSE_SFT+B↑j
                                        ; DEV_CLOSE_SFT+20↑j ...
                call    restore_world
DEV_CLOSE_SFT   endp ; sp-analysis failed

                pop     es
                retn

; =============== S U B R O U T I N E =======================================


DEVIOCALL       proc near               ; CODE XREF: DOS_READ+7F↑p
                                        ; DOS_READ+13A↑p ...
                lds     si, [si+7]      ; CALLNEWSC, HIGH_SECTOR & CALLDEVAD
DEVIOCALL       endp                    ; LDS SI,[SI+SF_ENTRY.sf_devptr]


; =============== S U B R O U T I N E =======================================


DEVIOCALL2      proc near               ; CODE XREF: $SET_TIME+2C↑p
                                        ; $SET_TIME+40↑p ...
                call    ECritDevice
                test    byte ptr [si+5], 80h ; [SI+SYSDEV.ATT+1],(DEVTYP>>8)
                jnz     short chardev2
                mov     al, es:[bx+2]   ; [ES:BX+SRHEAD.REQFUNC]
                cmp     al, 4           ; DEVRD
                jz      short chkext
                cmp     al, 8           ; DEVWRT
                jz      short chkext
                cmp     al, 9           ; DEVWRTV
                jnz     short chardev2

chkext:                                 ; CODE XREF: DEVIOCALL2+F↑j
                                        ; DEVIOCALL2+13↑j
                test    byte ptr [si+4], 2 ; [SI+SYSDEV.ATT],EXTDRVR
                jz      short chksector
                mov     ax, 0FFFFh      ; -1 ; old sector
                add     byte ptr es:[bx], 8 ; make length to 30
                xchg    ax, ss:CALLSSEC
                mov     ss:CALLNEWSC, ax
                mov     ax, ss:HIGH_SECTOR
                mov     ss:CALLNEWSC+2, ax
                jmp     short chardev2
; ---------------------------------------------------------------------------

chksector:                              ; CODE XREF: DEVIOCALL2+1D↑j
                cmp     ss:HIGH_SECTOR, 0 ; if >32mb
                jnz     short chardev3  ; then fake error

chardev2:                               ; CODE XREF: DEVIOCALL2+7↑j
                                        ; DEVIOCALL2+17↑j ...
                inc     ss:DEVIO_IN_PROGRESS ; lock (deviocall in progress)
                mov     ax, [si+6]      ; [SI+SYSDEV.STRAT]
                mov     word ptr ss:CALLDEVAD, ax
                mov     word ptr ss:CALLDEVAD+2, ds
                call    ss:CALLDEVAD
                mov     ax, [si+8]      ; [SI+SYSDEV.INT]
                mov     word ptr ss:CALLDEVAD, ax
                call    ss:CALLDEVAD
                dec     ss:DEVIO_IN_PROGRESS ; unlock (deviocall completed)

dev_exit:                               ; CODE XREF: DEVIOCALL2+72↓j
                call    LCritDevice
                retn
; ---------------------------------------------------------------------------

chardev3:                               ; CODE XREF: DEVIOCALL2+3F↑j
                mov     word ptr es:[bx+3], 8107h ; [ES:BX+SRHEAD.REQSTAT],
                                        ; STERR+STDON+error_I24_not_DOS_disk
                jmp     short dev_exit
DEVIOCALL2      endp


; =============== S U B R O U T I N E =======================================


SETREAD         proc near               ; CODE XREF: $SET_TIME+24↑p
                                        ; READTIME+11↑p ...
                push    di
                push    cx
                push    ax
                mov     cl, 4

loc_93C4:                               ; CODE XREF: SETWRITE+A↓j
                mov     al, 22
                mov     di, ss
                mov     es, di
                mov     di, offset DEVCALL_REQLEN
                stosb
                pop     ax
                stosb
                mov     es:[di], cl
                inc     di
                mov     word ptr es:[di], 0
                add     di, 10
                mov     es:[di], ah
                inc     di
                mov     cx, ax
                mov     es:[di], bx
                mov     word ptr es:[di+2], ds
                add     di, 4
                pop     ax
                stosw
                xchg    ax, dx
                stosw
                xchg    ax, cx
                xchg    dx, cx
                pop     di
                mov     bx, offset DEVCALL_REQLEN
                retn
SETREAD         endp


; =============== S U B R O U T I N E =======================================


SETWRITE        proc near               ; CODE XREF: $SET_TIME+31↑p
                                        ; DODATE+5E↑p ...
                push    di
                push    cx
                push    ax
                mov     cl, 8
                add     cl, ss:2FFh
                jmp     short loc_93C4
SETWRITE        endp

; ---------------------------------------------------------------------------
                stc
                retn
; ---------------------------------------------------------------------------
                clc
                retn
; ---------------------------------------------------------------------------
                stc
                retn

; =============== S U B R O U T I N E =======================================


sub_940A        proc near               ; CODE XREF: sub_961A+E↓p
                mov     ax, ds:5D8h
                cmp     ax, 0FFFFh
                jz      short loc_9414
                clc
                retn
; ---------------------------------------------------------------------------

loc_9414:                               ; CODE XREF: sub_940A+6↑j
                cmp     word ptr ds:0ADCh, 0
                jnz     short loc_9424
                cmp     word ptr ds:5C2h, 0
                jnz     short loc_9424
                stc

locret_9423:                            ; CODE XREF: sub_940A+31↓j
                                        ; sub_940A+3D↓j ...
                retn
; ---------------------------------------------------------------------------

loc_9424:                               ; CODE XREF: DOSCODE:796E↑p
                                        ; sub_940A+F↑j ...
                mov     bx, ds:0ADCh
                mov     ds:0AE8h, bx
                or      bx, bx
                mov     bx, ds:5C2h
                jnz     short loc_9438
                or      bx, bx
                jz      short loc_943D

loc_9438:                               ; CODE XREF: sub_940A+28↑j
                call    sub_9D7C
                jb      short locret_9423

loc_943D:                               ; CODE XREF: sub_940A+2C↑j
                xor     cx, cx
                mov     ds:0AF0h, cx
                inc     cx
                call    sub_9ACF
                jb      short locret_9423
                mov     dx, ds:5C2h
                cmp     dx, ds:0ADCh
                jnz     short loc_946C
                or      dx, dx
                jnz     short loc_946C
                push    word ptr ds:0AE8h
                pop     word ptr ds:0AEEh
                call    SETDIRSRCH
                jb      short locret_9423
                mov     word ptr ds:348h, 0FFFFh
                jmp     short loc_94AD
; ---------------------------------------------------------------------------

loc_946C:                               ; CODE XREF: sub_940A+47↑j
                                        ; sub_940A+4B↑j
                push    bx
                push    word ptr ds:0AE8h
                mov     bx, ds:0ADEh
                mov     ds:0AE8h, bx
                mov     bx, ds:5BCh
                call    sub_A40C
                pop     word ptr ds:0AE8h
                pop     bx
                jb      short loc_94A6
                mov     ds:5BCh, bx
                push    cx
                push    ax
                push    bp
                mov     ax, ds:0AE8h
                mov     ds:0ADEh, ax
                mov     ah, 1
                mov     dl, es:[bp+0]
                mov     cx, ds:5C2h
                mov     bp, bx
                call    FastOpen_Update
                pop     bp
                pop     ax
                pop     cx

loc_94A6:                               ; CODE XREF: sub_940A+7B↑j
                mov     dx, bx
                xor     bl, bl
                call    sub_9A89

loc_94AD:                               ; CODE XREF: sub_940A+60↑j
                mov     cl, es:[bp+4]
                inc     cx
                xor     ch, ch

loc_94B4:                               ; CODE XREF: sub_940A+E1↓j
                push    cx
                mov     byte ptr ds:34Bh, 18h
                mov     al, 0FFh
                call    sub_AAB0
                jnb     short loc_94C3
                pop     cx
                retn
; ---------------------------------------------------------------------------

loc_94C3:                               ; CODE XREF: sub_940A+B5↑j
                mov     cx, es:[bp+2]
                push    es
                les     di, ds:5E2h
                or      byte ptr es:[di+5], 4
                push    di
                add     di, 18h
                xor     ax, ax
                shr     cx, 1
                rep stosw
                jnb     short loc_94DE
                stosb

loc_94DE:                               ; CODE XREF: sub_940A+D1↑j
                pop     di
                call    sub_AD58
                pop     es
                add     dx, 1
                adc     ds:607h, cx
                pop     cx
                loop    loc_94B4
                mov     ax, ds:348h
                inc     ax
                clc
                retn
sub_940A        endp


; =============== S U B R O U T I N E =======================================


sub_94F3        proc near               ; CODE XREF: DOSCODE:7991↑p
                                        ; DOSCODE:799C↑p
                stosw
                mov     cx, 4
                mov     ax, 2020h
                rep stosw
                stosb
                mov     al, 10h
                stosb
                add     di, 8
                mov     ax, ds:0AF2h
                stosw
                mov     si, ds:59Eh
                mov     ax, [si+0Dh]
                stosw
                mov     ax, [si+0Fh]
                stosw
                mov     ax, dx
                stosw
                xchg    ax, cx
                stosw
                stosw
                retn
sub_94F3        endp


; =============== S U B R O U T I N E =======================================


sub_951A        proc near               ; CODE XREF: DOSCODE:70FE↑p
                                        ; DOSCODE:792D↑p

; FUNCTION CHUNK AT 953B SIZE 00000003 BYTES
; FUNCTION CHUNK AT 955F SIZE 00000040 BYTES
; FUNCTION CHUNK AT 95A3 SIZE 00000009 BYTES
; FUNCTION CHUNK AT 95E9 SIZE 00000030 BYTES

                mov     word ptr ds:57Eh, 0E5FFh
                push    ax
                mov     byte ptr ds:34Ch, 0
                mov     ds:56Dh, al
                call    GetPathNoSet
                mov     dl, cl
                xchg    ax, cx
                pop     ax
                jnb     short loc_955F
                jnz     short loc_9539
                cmp     dl, 80h
                jz      short sub_953E

loc_9539:                               ; CODE XREF: sub_951A+18↑j
                mov     al, 4
sub_951A        endp

; START OF FUNCTION CHUNK FOR sub_953E
;   ADDITIONAL PARENT FUNCTION sub_951A

loc_953B:                               ; CODE XREF: sub_951A+56↓j
                                        ; sub_953E+63↓j ...
                cbw
                stc
                retn
; END OF FUNCTION CHUNK FOR sub_953E

; =============== S U B R O U T I N E =======================================


sub_953E        proc near               ; CODE XREF: DOS_RENAME+18A↑p
                                        ; sub_951A+1D↑j

; FUNCTION CHUNK AT 953B SIZE 00000003 BYTES
; FUNCTION CHUNK AT 959F SIZE 00000004 BYTES
; FUNCTION CHUNK AT 95B8 SIZE 00000031 BYTES

                test    byte ptr ds:5F6h, 1
                jz      short loc_9556
                or      byte ptr ds:5F6h, 4
                test    byte ptr ds:5F4h, 0F0h
                jnz     short loc_9556
                stc
                mov     ax, 7

locret_9555:                            ; CODE XREF: sub_95AC+7↓j
                retn
; ---------------------------------------------------------------------------

loc_9556:                               ; CODE XREF: sub_953E+5↑j
                                        ; sub_953E+11↑j
                les     di, ds:59Eh
                xor     ax, ax
                stc
                jmp     short loc_95B8
sub_953E        endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR sub_951A

loc_955F:                               ; CODE XREF: sub_951A+16↑j
                jz      short loc_95A8
                mov     al, 3
                test    byte ptr ds:56Bh, 18h
                jnz     short loc_95A4
                or      ch, ch
                js      short loc_9588
                or      ah, ah
                jnz     short loc_953B
                push    cx
                mov     es, word ptr ds:5E4h
                mov     ch, es:[bx+0Bh]
                test    ch, 1
                jnz     short loc_95A3
                call    sub_8E67
                pop     cx
                jnz     short loc_95A4
                xor     al, al

loc_9588:                               ; CODE XREF: sub_951A+52↑j
                cbw
                push    ax
                push    cx
                mov     ah, ch
                call    DOOPEN
                les     di, ds:59Eh
                push    si
                push    bx
                call    ShareEnter
                jnb     short loc_95E9
                pop     bx
                pop     si
                pop     cx
                pop     ax
; END OF FUNCTION CHUNK FOR sub_951A
; START OF FUNCTION CHUNK FOR sub_953E

loc_959F:                               ; CODE XREF: sub_953E+A9↓j
                mov     al, 6
                jmp     short loc_953B
; END OF FUNCTION CHUNK FOR sub_953E
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR sub_951A

loc_95A3:                               ; CODE XREF: sub_951A+64↑j
                pop     cx

loc_95A4:                               ; CODE XREF: sub_951A+4E↑j
                                        ; sub_951A+6A↑j
                mov     al, 5
                jmp     short loc_953B
; ---------------------------------------------------------------------------

loc_95A8:                               ; CODE XREF: sub_951A:loc_955F↑j
                mov     al, 1
                jmp     short loc_953B
; END OF FUNCTION CHUNK FOR sub_951A

; =============== S U B R O U T I N E =======================================


sub_95AC        proc near               ; CODE XREF: sub_953E:loc_95B8↓p
                                        ; sub_951A+EF↓p
                push    ax
                mov     ax, cx
                call    sub_961A
                pop     ax
                jnb     short locret_9555
                mov     al, 2

locret_95B7:                            ; CODE XREF: sub_953E+7D↓j
                                        ; sub_953E+84↓j ...
                retn
sub_95AC        endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR sub_953E

loc_95B8:                               ; CODE XREF: sub_953E+1F↑j
                call    sub_95AC
                jb      short locret_95B7
                test    byte ptr ds:56Bh, 10h
                jnz     short locret_95B7
                push    ax
                push    bx
                push    si
                call    ShareEnter
                pop     si
                pop     bx
                pop     ax
                jnb     short locret_95B7
                push    ax
                les     di, ds:5E2h
                mov     byte ptr es:[bx], 0E5h
                call    sub_AD58
                les     bp, ds:58Ah
                mov     al, es:[bp+0]
                call    FLUSHBUF
                pop     ax
                jmp     short loc_959F
; END OF FUNCTION CHUNK FOR sub_953E
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR sub_951A

loc_95E9:                               ; CODE XREF: sub_951A+7F↑j
                les     di, ds:59Eh
                xor     ax, ax
                call    ECritDisk
                xchg    ax, es:[di]
                push    ax
                push    di
                push    es
                pushf
                call    ShareEnd
                popf
                pop     es
                pop     di
                pop     word ptr es:[di]
                call    LCritDisk
                pop     bx
                pop     si
                pop     cx
                pop     ax
                call    sub_95AC
                jb      short locret_95B7
                push    ax
                push    bx
                push    si
                pushf
                call    ShareEnter
                popf
                pop     si
                pop     bx
                pop     ax
; END OF FUNCTION CHUNK FOR sub_951A
; [00000001 BYTES: COLLAPSED FUNCTION nullsub_17. PRESS CTRL-NUMPAD+ TO EXPAND]

; =============== S U B R O U T I N E =======================================


sub_961A        proc near               ; CODE XREF: sub_95AC+3↑p
                les     bp, ds:58Ah
                jnb     short loc_9636
                cmp     byte ptr ds:34Ah, 0
                stc
                jnz     short nullsub_17
                call    sub_940A
                jb      short nullsub_17
                call    loc_8903
                jb      short nullsub_17
                jmp     short loc_9642
; ---------------------------------------------------------------------------

loc_9634:                               ; CODE XREF: sub_961A+34↓j
                stc

locret_9635:                            ; CODE XREF: sub_961A+26↓j
                retn
; ---------------------------------------------------------------------------

loc_9636:                               ; CODE XREF: sub_961A+4↑j
                or      ah, ah
                jns     short loc_963D
                jmp     DOOPEN
; ---------------------------------------------------------------------------

loc_963D:                               ; CODE XREF: sub_961A+1E↑j
                call    sub_9791
                jb      short locret_9635

loc_9642:                               ; CODE XREF: sub_961A+18↑j
                test    byte ptr ds:56Bh, 8
                jz      short loc_9650
                cmp     byte ptr ds:57Bh, 0
                jnz     short loc_9634

loc_9650:                               ; CODE XREF: sub_961A+2D↑j
                mov     es, word ptr ds:5E4h
                mov     di, bx
                mov     si, 54Bh
                mov     cx, 5
                rep movsw
                movsb
                mov     al, ds:56Bh
                stosb
                mov     cl, 5
                xor     ax, ax
                rep stosw
                call    DATE16
                xchg    ax, dx
                stosw
                xchg    ax, dx
                mov     es:[di-6], ax
                stosw
                xor     ax, ax
                push    di
                stosw
                stosw
                stosw
                mov     si, ds:5E2h
                test    byte ptr es:[si+5], 40h
                jnz     short loc_968D
                call    sub_AD64
                or      byte ptr es:[si+5], 40h

loc_968D:                               ; CODE XREF: sub_961A+69↑j
                les     bp, ds:58Ah
                mov     al, es:[bp+0]
                push    ax
                push    bx
                push    es
                push    di
                les     di, ds:59Eh
                test    byte ptr es:[di+5], 80h
                jnz     short loc_96B6
                push    ds
                push    bx
                lds     bx, ds:58Ah
                mov     es:[di+7], bx
                mov     bx, ds
                mov     es:[di+9], bx
                pop     bx
                pop     ds

loc_96B6:                               ; CODE XREF: sub_961A+88↑j
                pop     di
                pop     es
                call    FLUSHBUF
                pop     bx
                pop     ax
                pop     si
                mov     ah, al
                jnb     short DOOPEN
                retn
sub_961A        endp


; =============== S U B R O U T I N E =======================================


DOOPEN          proc near               ; CODE XREF: REN_DEL_Check+54↑p
                                        ; DOSCODE:loc_7288↑p ...
                mov     dh, ah
                xor     dl, dl
                or      ah, ah
                js      short loc_96D8
                les     di, ds:58Ah
                cmp     word ptr es:[di+0Fh], 0
                jz      short loc_96D8
                inc     dl

loc_96D8:                               ; CODE XREF: DOOPEN+6↑j
                                        ; DOOPEN+11↑j
                les     di, ds:59Eh
                add     di, 4
                xor     al, al
                or      dh, dh
                js      short loc_96EC
                mov     ds, word ptr ds:5E4h
                mov     al, [bx+0Bh]

loc_96EC:                               ; CODE XREF: DOOPEN+20↑j
                stosb
                xor     ax, ax
                mov     al, dh
                or      al, 40h
                stosw
                push    ds
                lds     ax, [bx+1Ah]
                or      dh, dh
                js      short loc_9701
                lds     ax, ss:58Ah

loc_9701:                               ; CODE XREF: DOOPEN+37↑j
                stosw
                mov     ax, ds
                pop     ds
                stosw
                push    si
                add     di, 20h ; ' '
                movsw
                add     si, 0FFF8h
                lodsw
                or      dl, dl
                jz      short loc_9715
                xor     ax, ax

loc_9715:                               ; CODE XREF: DOOPEN+4E↑j
                stosw
                add     di, 0FFDEh
                movsw
                movsw
                lodsw
                lodsw
                xchg    ax, cx
                lodsw
                or      dh, dh
                jns     short loc_9727
                xor     ax, ax
                mov     cx, ax

loc_9727:                               ; CODE XREF: DOOPEN+5E↑j
                xchg    ax, cx
                stosw
                xchg    ax, cx
                stosw
                xor     ax, ax
                stosw
                stosw
                or      dh, dh
                js      short loc_9782
                stosw
                add     di, 0FFF0h
                stosw
                add     di, 0Eh
                mov     ax, es:[di+10h]
                mov     es:[di+1Ah], ax
                mov     ax, es:[di+12h]
                mov     es:[di+1Ch], ax
                push    ds
                push    ss
                pop     ds
                test    byte ptr ds:1146h, 4
                jz      short loc_9766
                mov     si, 1147h
                mov     ax, [si+1]
                stosw
                mov     ax, [si+3]
                stosw
                mov     al, [si]
                stosb
                pop     ds
                jmp     short loc_9780
; ---------------------------------------------------------------------------

loc_9766:                               ; CODE XREF: DOOPEN+90↑j
                pop     ds
                mov     si, ss:5E2h
                mov     ax, [si+6]
                stosw
                mov     ax, [si+8]
                stosw
                mov     ax, bx
                add     si, 18h
                sub     ax, si
                mov     cl, 20h ; ' '
                div     cl
                stosb

loc_9780:                               ; CODE XREF: DOOPEN+A1↑j
                jmp     short loc_9785
; ---------------------------------------------------------------------------

loc_9782:                               ; CODE XREF: DOOPEN+6E↑j
                add     di, 7

loc_9785:                               ; CODE XREF: DOOPEN:loc_9780↑j
                mov     si, bx
                mov     cx, 0Bh
                rep movsb
                pop     si
                push    ss
                pop     ds
                clc

locret_9790:                            ; CODE XREF: sub_9791+62↓j
                retn
DOOPEN          endp


; =============== S U B R O U T I N E =======================================


sub_9791        proc near               ; CODE XREF: sub_961A:loc_963D↑p
                push    ds
                lds     di, ds:5E2h
                mov     cx, [si]
                mov     ax, [si-6]
                mov     dx, [di+8]
                mov     ss:607h, dx
                mov     dx, [di+6]
                pop     ds
                cmp     word ptr es:[bp+0Fh], 0
                jnz     short loc_97C4
                cmp     ax, 0
                jnz     short loc_97B6
                cmp     cx, 2

loc_97B6:                               ; CODE XREF: sub_9791+20↑j
                jb      short loc_97FF
                cmp     ax, es:[bp+2Fh]
                jnz     short loc_97CF
                cmp     cx, es:[bp+2Dh]
                jmp     short loc_97CF
; ---------------------------------------------------------------------------

loc_97C4:                               ; CODE XREF: sub_9791+1B↑j
                xor     ax, ax
                cmp     cx, 2
                jb      short loc_97FF
                cmp     cx, es:[bp+0Dh]

loc_97CF:                               ; CODE XREF: sub_9791+2B↑j
                                        ; sub_9791+31↑j
                ja      short loc_97FF
                sub     bx, di
                push    bx
                push    word ptr ds:607h
                push    dx
                mov     bx, cx
                mov     ds:0AE8h, ax
                call    sub_9D13
                pop     dx
                pop     word ptr ds:607h
                jb      short loc_97F2
                mov     byte ptr ds:34Bh, 18h
                xor     al, al
                call    sub_AAB0

loc_97F2:                               ; CODE XREF: sub_9791+55↑j
                pop     bx
                jb      short locret_9790
                call    sub_7F9D
                add     bx, ds:5E2h
                lea     si, [bx+1Ah]

loc_97FF:                               ; CODE XREF: sub_9791:loc_97B6↑j
                                        ; sub_9791+38↑j ...
                clc
                retn
sub_9791        endp


; =============== S U B R O U T I N E =======================================


sub_9801        proc near               ; CODE XREF: sub_81D5+32↑p
                                        ; sub_83A3+116↑p ...
                push    es
                les     di, ds:59Eh
                mov     ds:0AF8h, dx
                mov     bx, es:[di+37h]
                mov     ds:0AE8h, bx
                or      bx, bx
                mov     dx, es:[di+0Bh]
                mov     ds:0AE2h, dx
                mov     bx, es:[di+35h]
                mov     dx, es:[di+19h]
                jnz     short loc_982D
                or      bx, bx
                jnz     short loc_982D
                jmp     loc_98AD
; ---------------------------------------------------------------------------

loc_982D:                               ; CODE XREF: sub_9801+23↑j
                                        ; sub_9801+27↑j
                sub     cx, dx
                push    ax
                mov     ax, ds:0AE2h
                sbb     ds:0AF8h, ax
                pop     ax
                jnb     short loc_9856
                add     cx, dx
                mov     bx, ds:0AE2h
                adc     ds:0AF8h, bx
                xor     dx, dx
                mov     ds:0AE2h, dx
                mov     bx, es:[di+2Dh]
                mov     ds:0AE8h, bx
                mov     bx, es:[di+2Bh]

loc_9856:                               ; CODE XREF: sub_9801+37↑j
                pop     es
                cmp     cx, ds:0AF8h
                jnz     short sub_985F
                jcxz    short loc_98AB
sub_9801        endp


; =============== S U B R O U T I N E =======================================


sub_985F        proc near               ; CODE XREF: sub_83A3+DD↑p
                                        ; sub_83A3+170↑p ...
                push    word ptr ds:0AE2h
                push    dx
                push    word ptr ds:0AF8h
                push    cx
                call    UNPACK
                pop     cx
                pop     word ptr ds:0AF8h
                pop     dx
                pop     word ptr ds:0AE2h
                jb      short locret_98C1
                push    word ptr ds:0AE8h
                push    bx
                mov     bx, di
                mov     di, ds:0AECh
                mov     ds:0AE8h, di
                call    sub_A40C
                jb      short loc_9893
                pop     bx
                pop     word ptr ds:0AE8h
                jmp     short loc_98AB
; ---------------------------------------------------------------------------

loc_9893:                               ; CODE XREF: sub_985F+2B↑j
                add     sp, 4
                inc     dx
                jnz     short loc_989D
                inc     word ptr ds:0AE2h

loc_989D:                               ; CODE XREF: sub_985F+38↑j
                sub     cx, 1
                sbb     word ptr ds:0AF8h, 0
                jnz     short sub_985F
                or      cx, cx
                jnz     short sub_985F

loc_98AB:                               ; CODE XREF: sub_9801+5C↑j
                                        ; sub_985F+32↑j
                clc
                retn
; ---------------------------------------------------------------------------

loc_98AD:                               ; CODE XREF: sub_9801+29↑j
                pop     es
                push    di
                xor     di, di
                add     cx, 1
                adc     ds:0AF8h, di
                sub     dx, 1
                sbb     ds:0AE2h, di
                pop     di
                clc

locret_98C1:                            ; CODE XREF: sub_985F+17↑j
                                        ; sub_98C2+23↓j
                retn
sub_985F        endp


; =============== S U B R O U T I N E =======================================


sub_98C2        proc near               ; CODE XREF: sub_990E+3↓p
                                        ; sub_9949+25↓p
                push    word ptr ds:0AE8h
                mov     dx, ds:0ADEh
                mov     ds:0AE8h, dx
                mov     dx, ds:5BCh
                mov     bl, ds:573h
                mov     byte ptr ds:34Bh, 38h ; '8'
                call    sub_9A89
                call    sub_AAB0
                pop     word ptr ds:0AE8h
                jb      short locret_98C1
                mov     byte ptr ds:574h, 1
                mov     si, ds:5B8h
                mov     di, si
                mov     cx, ds:5D2h
                add     di, cx
                mov     ds:5B8h, di
                les     di, ds:5E2h
                or      byte ptr es:[di+5], 8
                lea     di, [di+18h]
                add     di, ds:5CCh
                clc
                retn
sub_98C2        endp


; =============== S U B R O U T I N E =======================================


sub_990E        proc near               ; CODE XREF: sub_81D5+6E↑p
                                        ; sub_81D5+FD↑p
                push    es
                xor     ax, ax
                call    sub_98C2
                jnb     short loc_9919

loc_9916:                               ; CODE XREF: sub_9949+28↓j
                pop     es
                jmp     short loc_9946
; ---------------------------------------------------------------------------

loc_9919:                               ; CODE XREF: sub_990E+6↑j
                mov     bx, es
                mov     es, word ptr ds:32Eh
                mov     ds, bx
                xchg    di, si
                shr     cx, 1
                rep movsw
                adc     cx, 0
                rep movsb
                pop     es
                lds     di, ss:5E2h
                lea     bx, [di+18h]
                sub     si, bx
                call    PLACEBUF
                cmp     si, es:[bp+2]
                jb      short loc_9945
                mov     ss:6Dh, di

loc_9945:                               ; CODE XREF: sub_990E+30↑j
                clc

loc_9946:                               ; CODE XREF: sub_990E+9↑j
                push    ss
                pop     ds
                retn
sub_990E        endp


; =============== S U B R O U T I N E =======================================


sub_9949        proc near               ; CODE XREF: sub_83A3+199↑p
                                        ; sub_83A3+248↑p
                add     word ptr ds:5C4h, 1
                adc     word ptr ds:5C6h, 0
                mov     ax, ds:5C6h
                cmp     ax, ds:5CAh
                mov     al, 1
                ja      short loc_996D
                jb      short loc_996B
                mov     ax, ds:5C4h
                cmp     ax, ds:5C8h
                mov     al, 1
                ja      short loc_996D

loc_996B:                               ; CODE XREF: sub_9949+15↑j
                xor     al, al

loc_996D:                               ; CODE XREF: sub_9949+13↑j
                                        ; sub_9949+20↑j
                push    es
                call    sub_98C2
                jb      short loc_9916
                mov     ds, word ptr ds:32Eh
                shr     cx, 1
                rep movsw
                adc     cx, cx
                rep movsb
                pop     es
                lds     bx, ss:5E2h
                test    byte ptr [bx+5], 40h
                jnz     short loc_9994
                inc     word ptr ss:71h
                or      byte ptr [bx+5], 40h

loc_9994:                               ; CODE XREF: sub_9949+40↑j
                lea     si, [bx+18h]
                sub     di, si
                cmp     di, es:[bp+2]
                jb      short loc_99A4
                mov     ss:6Dh, bx

loc_99A4:                               ; CODE XREF: sub_9949+54↑j
                clc
                mov     ax, ss
                mov     ds, ax
                retn
sub_9949        endp


; =============== S U B R O U T I N E =======================================


sub_99AA        proc near               ; CODE XREF: sub_81D5+7A↑p
                                        ; sub_81D5+F2↑p ...
                test    byte ptr ds:574h, 0FFh
                jz      short loc_99EF
                mov     al, ds:573h
                inc     al
                cmp     al, es:[bp+4]
                jbe     short loc_99EC
                mov     bx, ds:0ADEh
                mov     ds:0AE8h, bx
                mov     bx, ds:5BCh
                call    sub_A40C
                jnb     short loc_99F1
                call    UNPACK
                jb      short loc_99F1
                push    di
                mov     di, ds:0AECh
                mov     ds:0ADEh, di
                pop     di
                mov     ds:5BCh, di
                add     word ptr ds:5BAh, 1
                adc     word ptr ds:0AE2h, 0
                mov     al, 0

loc_99EC:                               ; CODE XREF: sub_99AA+10↑j
                mov     ds:573h, al

loc_99EF:                               ; CODE XREF: sub_99AA+5↑j
                clc
                retn
; ---------------------------------------------------------------------------

loc_99F1:                               ; CODE XREF: sub_99AA+21↑j
                                        ; sub_99AA+26↑j
                stc
                retn
sub_99AA        endp


; =============== S U B R O U T I N E =======================================


sub_99F3        proc near               ; CODE XREF: sub_81D5:loc_826D↑p
                                        ; sub_83A3:loc_8572↑p
                push    dx
                push    word ptr ds:0AE8h
                push    bx
                mov     al, es:[bp+4]
                inc     al
                mov     ah, al
                sub     al, dl
                mov     dx, cx
                xor     cx, cx

loc_9A07:                               ; CODE XREF: sub_99F3+3B↓j
                call    UNPACK
                jb      short loc_9A76
                add     cl, al
                adc     ch, 0
                cmp     cx, dx
                jnb     short loc_9A7B
                mov     al, ah
                push    di
                xor     di, di
                add     bx, 1
                adc     ds:0AE8h, di
                mov     di, ds:0AECh
                cmp     di, ds:0AE8h
                pop     di
                jnz     short loc_9A30
                cmp     di, bx
                jz      short loc_9A07

loc_9A30:                               ; CODE XREF: sub_99F3+37↑j
                sub     bx, 1
                sbb     word ptr ds:0AE8h, 0

loc_9A38:                               ; CODE XREF: sub_99F3+94↓j
                push    bx
                add     ds:5BAh, bx
                mov     bx, ds:0AE8h
                adc     ds:0AE2h, bx
                mov     ds:0ADEh, bx
                pop     word ptr ds:5BCh
                sub     dx, cx
                push    dx
                mov     ax, cx
                mul     word ptr es:[bp+2]
                mov     si, ds:5B8h
                add     ax, si
                mov     ds:5B8h, ax
                pop     ax
                pop     dx
                pop     bx
                mov     ds:0AE8h, bx
                sub     ds:5BAh, dx
                sbb     ds:0AE2h, bx
                pop     bx
                call    sub_9A89
                mov     bx, si
                clc
                retn
; ---------------------------------------------------------------------------

loc_9A76:                               ; CODE XREF: sub_99F3+17↑j
                add     sp, 6
                stc
                retn
; ---------------------------------------------------------------------------

loc_9A7B:                               ; CODE XREF: sub_99F3+20↑j
                sub     cx, dx
                sub     ah, cl
                dec     ah
                mov     ds:573h, ah
                mov     cx, dx
                jmp     short loc_9A38
sub_99F3        endp


; =============== S U B R O U T I N E =======================================


sub_9A89        proc near               ; CODE XREF: sub_7F07+87↑p
                                        ; SETDIRSRCH+52↑p ...
                push    ax
                push    cx
                xor     cx, cx
                mov     cl, es:[bp+5]
                mov     ax, ss:CLUSTNUM_HW
                sub     dx, 2
                sbb     ax, 0
                jcxz    short loc_9AA4

loc_9A9D:                               ; CODE XREF: sub_9A89+19↓j
                clc
                rcl     dx, 1
                rcl     ax, 1
                loop    loc_9A9D

loc_9AA4:                               ; CODE XREF: sub_9A89+12↑j
                or      dl, bl
                cmp     word ptr es:[bp+0Fh], 0
                jnz     short loc_9AB7
                add     dx, es:[bp+29h]
                adc     ax, es:[bp+2Bh]
                jmp     short loc_9ABE
; ---------------------------------------------------------------------------

loc_9AB7:                               ; CODE XREF: sub_9A89+22↑j
                add     dx, es:[bp+0Bh]
                adc     ax, 0

loc_9ABE:                               ; CODE XREF: sub_9A89+2C↑j
                mov     ss:HIGH_SECTOR, ax
                pop     cx
                pop     ax

locret_9AC4:                            ; CODE XREF: sub_9ACF+26↓j
                retn
sub_9A89        endp


; =============== S U B R O U T I N E =======================================


sub_9AC5        proc far                ; CODE XREF: sub_9ACF+2↓p
                push    ds
                push    ss:OffsetMagicPatch
                retf
sub_9AC5        endp ; sp-analysis failed

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR sub_9ACF

loc_9ACC:                               ; CODE XREF: sub_9ACF+5↓j
                jmp     loc_9CD8
; END OF FUNCTION CHUNK FOR sub_9ACF

; =============== S U B R O U T I N E =======================================


sub_9ACF        proc near               ; CODE XREF: sub_83A3+EC↑p
                                        ; sub_83A3+14C↑p ...

; FUNCTION CHUNK AT 9ACC SIZE 00000003 BYTES

                clc
                push    cs
                call    near ptr sub_9AC5
                jb      short loc_9ACC
                push    bx
                xor     bx, bx
                push    word ptr ds:0AE8h
                mov     ds:0AE8h, bx
                call    UNPACK
                mov     ds:596h, di
                mov     bx, ds:0AECh
                mov     ds:0AE4h, bx
                pop     word ptr ds:0AE8h
                pop     bx
                jb      short locret_9AC4
                push    word ptr ds:0AF0h
                push    cx
                push    word ptr ds:0AE8h
                push    bx
                mov     dx, bx
                xor     bx, bx
                cmp     es:[bp+0Fh], bx
                xchg    bx, ds:0AE8h
                mov     ds:0AEAh, bx
                mov     bx, es:[bp+1Dh]
                jnz     short loc_9B28
                mov     bx, es:[bp+3Bh]
                mov     ds:0AE8h, bx
                cmp     bx, 0
                mov     bx, es:[bp+39h]
                jnz     short loc_9B2B

loc_9B28:                               ; CODE XREF: sub_9ACF+46↑j
                cmp     bx, 2

loc_9B2B:                               ; CODE XREF: sub_9ACF+57↑j
                ja      short loc_9B4E

loc_9B2D:                               ; CODE XREF: sub_9ACF+1E8↓j
                xor     bx, bx
                cmp     es:[bp+0Fh], bx
                jnz     short loc_9B3F
                mov     word ptr es:[bp+39h], 2
                mov     es:[bp+3Bh], bx

loc_9B3F:                               ; CODE XREF: sub_9ACF+64↑j
                mov     ds:0AE8h, bx
                mov     word ptr es:[bp+1Dh], 2
                inc     bx
                or      es:[bp+18h], bl

loc_9B4E:                               ; CODE XREF: sub_9ACF:loc_9B2B↑j
                                        ; sub_9ACF:loc_9B9E↓j ...
                add     bx, 1
                adc     word ptr ds:0AE8h, 0
                cmp     word ptr es:[bp+0Fh], 0
                jnz     short loc_9B6F
                push    bx
                mov     bx, ds:0AE8h
                cmp     bx, es:[bp+2Fh]
                pop     bx
                jnz     short loc_9B73
                cmp     bx, es:[bp+2Dh]
                jmp     short loc_9B73
; ---------------------------------------------------------------------------

loc_9B6F:                               ; CODE XREF: sub_9ACF+8C↑j
                cmp     bx, es:[bp+0Dh]

loc_9B73:                               ; CODE XREF: sub_9ACF+98↑j
                                        ; sub_9ACF+9E↑j
                jbe     short loc_9B78
                jmp     loc_9C9B
; ---------------------------------------------------------------------------

loc_9B78:                               ; CODE XREF: sub_9ACF:loc_9B73↑j
                push    cx
                push    word ptr ds:0AF0h
                push    bx
                push    word ptr ds:0AE8h
                push    dx
                push    word ptr ds:0AEAh
                call    UNPACK
                pop     word ptr ds:0AEAh
                pop     dx
                pop     word ptr ds:0AE8h
                pop     bx
                pop     word ptr ds:0AF0h
                pop     cx
                jnb     short loc_9B9E
                jmp     loc_9C54
; ---------------------------------------------------------------------------

loc_9B9E:                               ; CODE XREF: sub_9ACF+CA↑j
                jnz     short loc_9B4E
                mov     es:[bp+1Dh], bx
                cmp     word ptr es:[bp+0Fh], 0
                jnz     short loc_9BB9
                push    bx
                mov     bx, ds:0AE8h
                mov     es:[bp+3Bh], bx
                pop     bx
                mov     es:[bp+39h], bx

loc_9BB9:                               ; CODE XREF: sub_9ACF+DA↑j
                or      byte ptr es:[bp+18h], 1
                push    cx
                push    word ptr ds:0AF0h
                push    bx
                push    word ptr ds:0AE8h
                push    dx
                push    word ptr ds:0AEAh
                xor     dx, dx
                mov     ds:0AEAh, dx
                inc     dx
                call    PACK
                pop     word ptr ds:0AE8h
                pop     bx
                pop     word ptr ds:0AEAh
                pop     dx
                pop     word ptr ds:0AF0h
                pop     cx
                jb      short loc_9C54
                push    ax
                xor     ax, ax
                cmp     es:[bp+0Fh], ax
                jnz     short loc_9C08
                dec     ax
                cmp     es:[bp+21h], ax
                jnz     short loc_9BFC
                cmp     es:[bp+1Fh], ax

loc_9BFC:                               ; CODE XREF: sub_9ACF+127↑j
                jz      short loc_9C13
                add     es:[bp+1Fh], ax
                adc     es:[bp+21h], ax
                jmp     short loc_9C13
; ---------------------------------------------------------------------------

loc_9C08:                               ; CODE XREF: sub_9ACF+120↑j
                dec     ax
                cmp     es:[bp+1Fh], ax
                jz      short loc_9C13
                dec     word ptr es:[bp+1Fh]

loc_9C13:                               ; CODE XREF: sub_9ACF:loc_9BFC↑j
                                        ; sub_9ACF+137↑j ...
                pop     ax
                push    cx
                push    word ptr ds:0AF0h
                push    dx
                push    word ptr ds:0AEAh
                call    PACK
                pop     word ptr ds:0AE8h
                pop     bx
                pop     word ptr ds:0AF0h
                pop     cx
                jb      short loc_9C54
                mov     dx, ds:0AE8h
                mov     ds:0AEAh, dx
                mov     dx, bx
                sub     cx, 1
                sbb     word ptr ds:0AF0h, 0
                cmp     cx, ds:0AF0h
                jnz     short loc_9C47
                jcxz    short loc_9C4A

loc_9C47:                               ; CODE XREF: sub_9ACF+174↑j
                jmp     loc_9B4E
; ---------------------------------------------------------------------------

loc_9C4A:                               ; CODE XREF: sub_9ACF+176↑j
                mov     dx, 0FFFFh
                mov     ds:0AEAh, dx
                call    PACK

loc_9C54:                               ; CODE XREF: sub_9ACF+CC↑j
                                        ; sub_9ACF+117↑j ...
                pop     bx
                pop     word ptr ds:0AE8h
                pop     cx
                pop     word ptr ds:0AF0h
                jnb     short loc_9C61

locret_9C60:                            ; CODE XREF: sub_9ACF+195↓j
                                        ; sub_9ACF+19A↓j ...
                retn
; ---------------------------------------------------------------------------

loc_9C61:                               ; CODE XREF: sub_9ACF+18F↑j
                call    UNPACK
                jb      short locret_9C60
                call    sub_9CDF
                jb      short locret_9C60
                push    ax
                mov     ax, ds:0AECh
                xchg    ax, ds:0AE8h
                xchg    bx, di
                or      ax, di
                pop     ax
                jnz     short locret_9C60
                push    dx
                mov     dx, es
                les     di, ds:59Eh
                push    bx
                mov     bx, ds:0AE8h
                mov     es:[di+2Dh], bx
                mov     es:[di+37h], bx
                pop     bx
                mov     es:[di+2Bh], bx
                mov     es:[di+35h], bx
                mov     es, dx
                pop     dx
                retn
; ---------------------------------------------------------------------------

loc_9C9B:                               ; CODE XREF: sub_9ACF+A6↑j
                cmp     word ptr es:[bp+0Fh], 0
                jz      short loc_9CA9
                cmp     word ptr es:[bp+1Dh], 2
                jmp     short loc_9CB5
; ---------------------------------------------------------------------------

loc_9CA9:                               ; CODE XREF: sub_9ACF+1D1↑j
                cmp     word ptr es:[bp+3Bh], 0
                jnz     short loc_9CB5
                cmp     word ptr es:[bp+39h], 2

loc_9CB5:                               ; CODE XREF: sub_9ACF+1D8↑j
                                        ; sub_9ACF+1DF↑j
                jz      short loc_9CBA
                jmp     loc_9B2D
; ---------------------------------------------------------------------------

loc_9CBA:                               ; CODE XREF: sub_9ACF:loc_9CB5↑j
                pop     bx
                mov     dx, 0FFFFh
                mov     ds:0AEAh, dx
                pop     word ptr ds:0AE8h
                call    sub_9D19
                pop     ax
                pop     word ptr ds:0AF2h
                sub     ax, cx
                sbb     word ptr ds:0AF2h, 0
                call    sub_9CDF

loc_9CD8:                               ; CODE XREF: sub_9ACF:loc_9ACC↑j
                mov     byte ptr ds:60Bh, 1
                stc
                retn
sub_9ACF        endp


; =============== S U B R O U T I N E =======================================


sub_9CDF        proc near               ; CODE XREF: sub_9ACF+197↑p
                                        ; sub_9ACF+206↑p
                push    bx
                push    dx
                push    di
                xor     bx, bx
                push    word ptr ds:0AE8h
                push    word ptr ds:0AEAh
                push    word ptr ds:0AECh
                mov     ds:0AE8h, bx
                mov     dx, ds:0AE4h
                mov     ds:0AEAh, dx
                mov     dx, ds:596h
                call    PACK
                pop     word ptr ds:0AECh
                pop     word ptr ds:0AEAh
                pop     word ptr ds:0AE8h
                pop     di
                pop     dx
                pop     bx
                retn
sub_9CDF        endp


; =============== S U B R O U T I N E =======================================


sub_9D13        proc near               ; CODE XREF: DOS_DELETE+102↑p
                                        ; DOS_CHDIR+102↑p ...
                xor     dx, dx
                mov     ds:0AEAh, dx
sub_9D13        endp


; =============== S U B R O U T I N E =======================================


sub_9D19        proc near               ; CODE XREF: sub_83A3+31C↑p
                                        ; sub_9ACF+1F7↑p
                call    UNPACK
                jbe     short locret_9D72
                mov     ax, di
                push    dx
                push    ax
                call    PACK
                pop     ax
                mov     dx, ds:0AECh
                mov     ds:0AE8h, dx
                mov     bx, ax
                pop     dx
                jb      short locret_9D72
                or      dx, dx
                jnz     short loc_9D56
                cmp     dx, ds:0AEAh
                jnz     short loc_9D56
                cmp     word ptr es:[bp+1Fh], 0FFFFh
                jz      short loc_9D56

loc_9D44:                               ; CODE XREF: sub_9D19+48↓j
                inc     word ptr es:[bp+1Fh]
                jnz     short loc_9D63
                cmp     es:[bp+0Fh], dx
                jnz     short loc_9D63
                inc     word ptr es:[bp+21h]
                jmp     short loc_9D63
; ---------------------------------------------------------------------------

loc_9D56:                               ; CODE XREF: sub_9D19+1C↑j
                                        ; sub_9D19+22↑j ...
                cmp     es:[bp+0Fh], dx
                jnz     short loc_9D63
                cmp     word ptr es:[bp+21h], 0FFFFh
                jnz     short loc_9D44

loc_9D63:                               ; CODE XREF: sub_9D19+2F↑j
                                        ; sub_9D19+35↑j ...
                cmp     word ptr ds:0AE8h, 0
                jnz     short loc_9D6D
                dec     ax
                jz      short locret_9D72

loc_9D6D:                               ; CODE XREF: sub_9D19+4F↑j
                call    sub_A40C
                jb      short sub_9D13

locret_9D72:                            ; CODE XREF: sub_9D19+3↑j
                                        ; sub_9D19+18↑j ...
                retn
sub_9D19        endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR sub_9D7C

loc_9D73:                               ; CODE XREF: sub_9D7C+9↓j
                                        ; sub_9D7C+26↓j
                mov     di, ax
                mov     ds:0AF2h, dx
                pop     ax
                pop     dx
                retn
; END OF FUNCTION CHUNK FOR sub_9D7C

; =============== S U B R O U T I N E =======================================


sub_9D7C        proc near               ; CODE XREF: sub_940A:loc_9438↑p

; FUNCTION CHUNK AT 9D73 SIZE 00000009 BYTES

                push    dx
                push    ax
                xor     dx, dx
                xor     ax, ax

loc_9D82:                               ; CODE XREF: sub_9D7C+32↓j
                call    UNPACK
                jb      short loc_9D73
                inc     ax
                jnz     short loc_9D8B
                inc     dx

loc_9D8B:                               ; CODE XREF: sub_9D7C+C↑j
                push    bx
                push    word ptr ds:0AE8h
                mov     bx, ds:0AECh
                mov     ds:0AE8h, bx
                mov     bx, di
                call    sub_A40C
                pop     word ptr ds:0AE8h
                pop     bx
                jnb     short loc_9D73
                mov     bx, ds:0AECh
                mov     ds:0AE8h, bx
                mov     bx, di
                jmp     short loc_9D82
sub_9D7C        endp


; =============== S U B R O U T I N E =======================================


sub_9DB0        proc near               ; CODE XREF: DOSCODE:$PARSE_FILE_DESCRIPTOR↑p
                xor     dl, dl
                mov     ss:34Eh, dl
                test    al, 2
                jnz     short loc_9DBE
                mov     es:[di], dl

loc_9DBE:                               ; CODE XREF: sub_9DB0+9↑j
                inc     di
                mov     cx, 8
                test    al, 4
                xchg    ax, bx
                mov     al, 20h ; ' '
                jz      short loc_9DCD
                add     di, cx
                xor     cx, cx

loc_9DCD:                               ; CODE XREF: sub_9DB0+17↑j
                rep stosb
                mov     cl, 3
                test    bl, 8
                jz      short loc_9DDA

loc_9DD6:
                add     di, cx
                xor     cx, cx

loc_9DDA:                               ; CODE XREF: sub_9DB0+24↑j
                rep stosb
                xchg    ax, cx
                stosw
                stosw
                sub     di, 10h
                test    bl, 1
                jz      short loc_9DF0
                call    sub_9E74
                call    sub_9F0D
                jnz     short loc_9DF3
                inc     si

loc_9DF0:                               ; CODE XREF: sub_9DB0+35↑j
                call    sub_9E74

loc_9DF3:                               ; CODE XREF: sub_9DB0+3D↑j
                call    sub_9EE4
                jbe     short loc_9E16
                cmp     byte ptr [si], 3Ah ; ':'
                jnz     short loc_9E16
                inc     si
                sub     al, 40h ; '@'
                jbe     short loc_9E11
                push    ax
                call    GetVisDrv
                pop     ax
                jnb     short loc_9E13
                cmp     byte ptr ss:610h, 1Ah
                jz      short loc_9E13

loc_9E11:                               ; CODE XREF: sub_9DB0+50↑j
                mov     dl, 0FFh

loc_9E13:                               ; CODE XREF: sub_9DB0+57↑j
                                        ; sub_9DB0+5F↑j
                stosb
                inc     si
                dec     di

loc_9E16:                               ; CODE XREF: sub_9DB0+46↑j
                                        ; sub_9DB0+4B↑j
                dec     si
                inc     di
sub_9DB0        endp


; =============== S U B R O U T I N E =======================================


sub_9E18        proc near               ; CODE XREF: sub_9E7C+17↓p
                mov     cx, 8
                call    sub_9E42
                cmp     byte ptr [si], 2Eh ; '.'
                jnz     short loc_9E34
                inc     si
                mov     cx, 3
                test    byte ptr ss:612h, 1
                jz      short loc_9E31
                movsb
                dec     cx

loc_9E31:                               ; CODE XREF: sub_9E18+15↑j
                call    sub_9E48

loc_9E34:                               ; CODE XREF: sub_9E18+9↑j
                mov     al, dl
                and     word ptr ss:611h, 0FEFFh
                retn
sub_9E18        endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR sub_9E42

loc_9E3E:                               ; CODE XREF: sub_9E42+3↓j
                add     di, cx
                dec     si
                retn
; END OF FUNCTION CHUNK FOR sub_9E42

; =============== S U B R O U T I N E =======================================


sub_9E42        proc near               ; CODE XREF: sub_9E18+3↑p

; FUNCTION CHUNK AT 9E3E SIZE 00000004 BYTES

                call    sub_9EE4
                jbe     short loc_9E3E
                dec     si
sub_9E42        endp


; =============== S U B R O U T I N E =======================================


sub_9E48        proc near               ; CODE XREF: sub_9E18:loc_9E31↑p
                                        ; sub_9E48:loc_9E59↓j ...
                call    sub_9EE4
                jnz     short loc_9E59
                test    byte ptr ss:34Eh, 0FFh
                jz      short loc_9E6E
                cmp     al, 20h ; ' '
                jnz     short loc_9E6E

loc_9E59:                               ; CODE XREF: sub_9E48+3↑j
                jcxz    short sub_9E48
                dec     cx
                cmp     al, 2Ah ; '*'
                jnz     short loc_9E64
                mov     al, 3Fh ; '?'
                rep stosb

loc_9E64:                               ; CODE XREF: sub_9E48+16↑j
                stosb
                cmp     al, 3Fh ; '?'
                jnz     short sub_9E48
                or      dl, 1
                jmp     short sub_9E48
; ---------------------------------------------------------------------------

loc_9E6E:                               ; CODE XREF: sub_9E48+B↑j
                                        ; sub_9E48+F↑j
                mov     al, 20h ; ' '
                rep stosb
                dec     si
                retn
sub_9E48        endp


; =============== S U B R O U T I N E =======================================


sub_9E74        proc near               ; CODE XREF: sub_9DB0+37↑p
                                        ; sub_9DB0:loc_9DF0↑p ...
                lodsb
                call    sub_9F15
                jz      short sub_9E74
                dec     si
sub_9E74        endp

; [00000001 BYTES: COLLAPSED FUNCTION nullsub_16. PRESS CTRL-NUMPAD+ TO EXPAND]

; =============== S U B R O U T I N E =======================================


sub_9E7C        proc near               ; CODE XREF: sub_8FD0+24↑p
                                        ; sub_C018+2D↓p
                mov     byte ptr ss:34Eh, 1
                push    ss
                pop     es
                mov     di, 54Bh
                push    di
                mov     al, 20h ; ' '
                mov     cx, 0Bh
                rep stosb
                xchg    ax, cx
                cwd
                stosb
                pop     di
                call    sub_9E18
                cmp     byte ptr ss:54Bh, 0E5h
                jnz     short nullsub_16
                mov     byte ptr ss:54Bh, 5
                retn
sub_9E7C        endp

; ---------------------------------------------------------------------------
                db  66h ; f
                db  66h ; f
                db  66h ; f
                db  66h ; f
                db    6
                db  66h ; f
                db  66h ; f
                db  66h ; f
                db  66h ; f
                db  66h ; f
                db  66h ; f
                db  66h ; f
                db  66h ; f
                db  66h ; f
                db  66h ; f
                db  66h ; f
                db 0F8h
                db 0F6h
                db 0FFh
                db 0FFh
                db 0FFh
                db  4Fh ; O
                db 0F4h
                db  6Eh ; n
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db  44h ; D
                db  44h ; D
                db 0F4h
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db  6Fh ; o
                db  66h ; f
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0F4h

; =============== S U B R O U T I N E =======================================


sub_9EE4        proc near               ; CODE XREF: sub_8C72:loc_8C7C↑p
                                        ; sub_9DB0:loc_9DF3↑p ...
                lodsb
sub_9EE4        endp


; =============== S U B R O U T I N E =======================================


UCase           proc near               ; CODE XREF: StrCmp+4↑p
                                        ; StrCmp+10↑p ...
                push    bx
                mov     bx, 0B7Eh

loc_9EE9:                               ; CODE XREF: GETLET3+1↓j
                cmp     al, 61h ; 'a'
                jb      short loc_9F01
                cmp     al, 7Ah ; 'z'
                ja      short loc_9EF3
                sub     al, 20h ; ' '

loc_9EF3:                               ; CODE XREF: UCase+A↑j
                cmp     al, 80h
                jb      short loc_9F01
                sub     al, 80h
                push    ds
                mov     ds, cs:DosDSeg
                xlat
                pop     ds

loc_9F01:                               ; CODE XREF: UCase+6↑j
                                        ; UCase+10↑j
                push    ax
                call    sub_9F1D
                test    al, 1
                pop     ax
                pop     bx
                retn
UCase           endp


; =============== S U B R O U T I N E =======================================


GETLET3         proc near               ; CODE XREF: $GetExtCntry+18↑p
                                        ; $GetExtCntry+53↑p ...
                push    bx
                jmp     short loc_9EE9
GETLET3         endp


; =============== S U B R O U T I N E =======================================


sub_9F0D        proc near               ; CODE XREF: sub_9DB0+3A↑p
                push    ax
                call    sub_9F1D
                test    al, 2
                pop     ax
                retn
sub_9F0D        endp


; =============== S U B R O U T I N E =======================================


sub_9F15        proc near               ; CODE XREF: sub_9E74+1↑p
                push    ax
                call    sub_9F1D
                test    al, 4
                pop     ax
                retn
sub_9F15        endp


; =============== S U B R O U T I N E =======================================


sub_9F1D        proc near               ; CODE XREF: UCase+1D↑p
                                        ; sub_9F0D+1↑p ...
                cmp     al, 7Eh ; '~'
                jnb     short loc_9F35
                push    bx
                mov     bx, 9EA5h
                shr     al, 1
                xlat    byte ptr cs:[bx]
                pop     bx
                jnb     short loc_9F32
                push    cx
                mov     cl, 4
                shr     al, cl
                pop     cx

loc_9F32:                               ; CODE XREF: sub_9F1D+D↑j
                and     al, 0Fh
                retn
; ---------------------------------------------------------------------------

loc_9F35:                               ; CODE XREF: sub_9F1D+2↑j
                mov     al, 0Fh
                retn
sub_9F1D        endp


; =============== S U B R O U T I N E =======================================


PATHCHRCMP      proc near               ; CODE XREF: DOSCODE:4F7F↑p
                                        ; StrCmp+7↑p ...
                cmp     al, 2Fh ; '/'
                jbe     short loc_9F42
                cmp     al, 5Ch ; '\'
                retn
; ---------------------------------------------------------------------------

loc_9F3F:                               ; CODE XREF: PATHCHRCMP:loc_9F42↓j
                mov     al, 5Ch ; '\'
                retn
; ---------------------------------------------------------------------------

loc_9F42:                               ; CODE XREF: PATHCHRCMP+2↑j
                jz      short loc_9F3F
                retn
PATHCHRCMP      endp

; ---------------------------------------------------------------------------
LowInt23Addr    dw offset LowInt23      ; DATA XREF: STATCHK+E2↓r
LowInt23_SEG    dw 0                    ; DATA XREF: DOSCODE:CD4D↓w
LowInt24Addr    dw offset LowInt24      ; DATA XREF: sub_A242:loc_A2A6↓r
LowInt24_SEG    dw 0                    ; DATA XREF: DOSCODE:CD52↓w
LowInt28Addr    dw offset LowInt28      ; DATA XREF: sub_9FD4:loc_9FF6↓r
LowInt28_SEG    dw 0                    ; DATA XREF: DOSCODE:CD57↓w

; =============== S U B R O U T I N E =======================================


DSKSTATCHK      proc near               ; CODE XREF: STATCHK-5D4A↑p
                                        ; sub_5B20+D↑p ...
                cmp     byte ptr ss:321h, 1
                jz      short loc_9F5A
                retn
; ---------------------------------------------------------------------------

loc_9F5A:                               ; CODE XREF: DSKSTATCHK+6↑j
                push    cx
                push    es
                push    bx
                push    ds
                push    si
                mov     bx, ss
                mov     es, bx
                mov     ds, bx
                mov     byte ptr ds:394h, 5
                mov     byte ptr ds:392h, 0Eh
                mov     word ptr ds:395h, 0
                mov     bx, 392h
                lds     si, ds:32h
                call    DEVIOCALL2
                push    ds
                push    ss
                pop     ds
                test    byte ptr ds:396h, 2
                jz      short loc_9F92
                xor     al, al

loc_9F8B:                               ; CODE XREF: DSKSTATCHK+46↓j
                pop     si
                pop     si
                pop     ds
                pop     bx
                pop     es
                pop     cx
                retn
; ---------------------------------------------------------------------------

loc_9F92:                               ; CODE XREF: DSKSTATCHK+36↑j
                mov     al, ds:39Fh
                cmp     al, 3
                jnz     short loc_9F8B
                mov     byte ptr ds:394h, 4
                mov     byte ptr ds:392h, 16h
                mov     ds:39Fh, cl
                mov     word ptr ds:395h, 0
                mov     word ptr ds:3A4h, 1
                pop     ds
                call    DEVIOCALL2
                pop     si
                pop     ds
                pop     bx
                pop     es
                pop     cx
                jmp     loc_A08F
DSKSTATCHK      endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR STATCHK

loc_9FBF:                               ; CODE XREF: STATCHK+15↓j
                cmp     al, 10h
                jnz     short loc_9FCC
                cmp     byte ptr ss:0DBCh, 0
                jz      short loc_9FD1
                retn
; ---------------------------------------------------------------------------

loc_9FCC:                               ; CODE XREF: STATCHK-41↑j
                cmp     al, 3
                jz      short loc_9FD1

locret_9FD0:                            ; CODE XREF: STATCHK+1D↓j
                retn
; ---------------------------------------------------------------------------

loc_9FD1:                               ; CODE XREF: STATCHK-39↑j
                                        ; STATCHK-34↑j
                jmp     loc_A079
; END OF FUNCTION CHUNK FOR STATCHK

; =============== S U B R O U T I N E =======================================


sub_9FD4        proc near               ; CODE XREF: DOSCODE:5AB8↑p
                                        ; DOSCODE:loc_5AC8↑p ...
                pushf
                cmp     byte ptr ss:358h, 0
                jz      short loc_A000
                cmp     byte ptr ss:320h, 0
                jnz     short loc_A000
                push    word ptr ss:358h
                cmp     byte ptr ss:0D66h, 0
                jnz     short loc_9FF6
                int     28h             ; DOS 2+ internal - KEYBOARD BUSY LOOP
                jmp     short loc_9FFB
; ---------------------------------------------------------------------------

loc_9FF6:                               ; CODE XREF: sub_9FD4+1C↑j
                call    dword ptr cs:LowInt28Addr

loc_9FFB:                               ; CODE XREF: sub_9FD4+20↑j
                pop     word ptr ss:358h

loc_A000:                               ; CODE XREF: sub_9FD4+7↑j
                                        ; sub_9FD4+F↑j
                popf

locret_A001:                            ; CODE XREF: STATCHK+A↓j
                                        ; STATCHK+33↓j
                retn
sub_9FD4        endp


; =============== S U B R O U T I N E =======================================


STATCHK         proc far                ; CODE XREF: $STD_CON_INPUT_NO_ECHO:INTEST↑p
                                        ; OUTT-8↑p ...

; FUNCTION CHUNK AT 4123 SIZE 00000088 BYTES
; FUNCTION CHUNK AT 41AF SIZE 00000003 BYTES
; FUNCTION CHUNK AT 41D7 SIZE 00000148 BYTES
; FUNCTION CHUNK AT 9FBF SIZE 00000015 BYTES

                call    DSKSTATCHK
                push    bx
                xor     bx, bx
                call    sub_7EE1
                pop     bx
                jb      short locret_A001
                mov     ah, 1
                call    IOFUNC
                jz      short sub_9FD4
                cmp     al, 13h
                jnz     short loc_9FBF
                cmp     byte ptr ss:0DBCh, 0
                jnz     short locret_9FD0
                xor     ah, ah
                call    IOFUNC
                jmp     short loc_A072
; ---------------------------------------------------------------------------

loc_A028:                               ; CODE XREF: STATCHK+87↓j
                not     byte ptr ss:2FEh
                push    bx
                mov     bx, 4
                call    sub_7EE1
                pop     bx
                jb      short locret_A001
                push    es
                push    di
                push    ds
                pop     es
                mov     di, si
                test    byte ptr es:[di+6], 8
                jz      short loc_A05C
                push    ax
                mov     ax, 1126h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - ???
                                        ; Return: CF set on error, AX = error code
                                        ; STACK unchanged
                pop     ax
                jnb     short loc_A05C
                mov     byte ptr ss:2FEh, 0
                push    ax
                mov     ax, 1124h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - ???
                                        ; ES:DI -> SFT, SS = DOS CS
                pop     ax
                jmp     short loc_A06C
; ---------------------------------------------------------------------------

loc_A05C:                               ; CODE XREF: STATCHK+40↑j
                                        ; STATCHK+49↑j
                cmp     byte ptr ss:2FEh, 0
                jnz     short loc_A069
                call    DEV_CLOSE_SFT
; ---------------------------------------------------------------------------
                db 0EBh
                db    3
; ---------------------------------------------------------------------------

loc_A069:                               ; CODE XREF: STATCHK+60↑j
                call    sub_92CA

loc_A06C:                               ; CODE XREF: STATCHK+58↑j
                pop     di
                pop     es

locret_A06E:                            ; CODE XREF: STATCHK+7E↓j
                                        ; STATCHK+8B↓j
                retn
; ---------------------------------------------------------------------------

loc_A06F:                               ; CODE XREF: STATCHK+75↓j
                call    sub_9FD4

loc_A072:                               ; CODE XREF: STATCHK+24↑j
                mov     ah, 1
                call    IOFUNC
                jz      short loc_A06F

loc_A079:                               ; CODE XREF: STATCHK:loc_9FD1↑j
                push    bx
                xor     bx, bx
                call    sub_7EE1
                pop     bx
                jb      short locret_A06E
                xor     ah, ah
                call    IOFUNC
                cmp     al, 10h
                jz      short loc_A028
                cmp     al, 3
                jnz     short locret_A06E

loc_A08F:                               ; CODE XREF: DSKSTATCHK+6B↑j
                test    byte ptr ss:612h, 2
                jnz     short loc_A09F
                mov     al, 3
                call    sub_5C04
                call    sub_5A95

loc_A09F:                               ; CODE XREF: STATCHK+93↑j
                push    ss
                pop     ds
                cmp     byte ptr ds:357h, 0
                jz      short loc_A0AB
                call    sub_7B59

loc_A0AB:                               ; CODE XREF: STATCHK+A4↑j
                cli
                mov     ss, word ptr ds:586h
                mov     sp, ds:584h
                call    restore_world
                pop     es
                push    ds
                mov     ds, cs:DosDSeg
                mov     byte ptr ds:321h, 0
                mov     byte ptr ds:12B8h, 0
                mov     byte ptr ds:320h, 0
                mov     ds:332h, sp
                add     word ptr ds:332h, 2
                cmp     byte ptr ds:0D66h, 0
                pop     ds
                jnz     short loc_A0E3
                clc
                int     23h             ; DOS - CONTROL "C" EXIT ADDRESS
                                        ; Return: return via RETF 2 with CF set
                                        ; DOS will abort program with errorlevel 0
                                        ; else
                                        ; interrupted DOS call continues
                jmp     short loc_A0E9
; ---------------------------------------------------------------------------

loc_A0E3:                               ; CODE XREF: STATCHK+DA↑j
                clc
                call    dword ptr cs:LowInt23Addr

loc_A0E9:                               ; CODE XREF: STATCHK+DF↑j
                cli
                push    ax
                mov     ax, ds
                mov     ds, cs:DosDSeg
                mov     ds:0D63h, ax
                pop     ax
                mov     ds:33Ah, ax
                pushf
                pop     ax
                cmp     sp, ds:332h
                jnz     short loc_A10B

loc_A101:                               ; CODE XREF: STATCHK+10C↓j
                mov     ax, ds:33Ah
                mov     ds, word ptr ds:0D63h

loc_A108:                               ; CODE XREF: STATCHK+121↓j
                jmp     COMMAND
; ---------------------------------------------------------------------------

loc_A10B:                               ; CODE XREF: STATCHK+FD↑j
                test    al, 1
                pop     ax
                jz      short loc_A101
                mov     ds, word ptr ds:0D63h

loc_A114:                               ; CODE XREF: DOSCODE:A138↓j
                mov     ax, 4C00h
                push    ds
                mov     ds, cs:DosDSeg
                mov     byte ptr ds:34Dh, 0FFh
                pop     ds
                jmp     short loc_A108
STATCHK         endp ; sp-analysis failed

; ---------------------------------------------------------------------------

DIVOV:                                  ; CODE XREF: DOSDATA:divov_cont↑J
                                        ; DATA XREF: DOSDATA:DOSINTTABLE↑o ...
                mov     si, 48C3h
                mov     bx, cs:DivMesLen
                mov     ss, cs:DosDSeg
                mov     sp, 7A0h
                call    sub_A13A
                jmp     short loc_A114

; =============== S U B R O U T I N E =======================================


sub_A13A        proc near               ; CODE XREF: DOSCODE:A135↑p
                push    ss
                pop     es
                push    ss
                pop     ds
                mov     byte ptr ds:394h, 8
                mov     byte ptr ds:392h, 16h
                mov     word ptr ds:395h, 0
                mov     ds:3A4h, bx
                mov     bx, 392h
                mov     ds:3A0h, si
                mov     word ptr ds:3A2h, cs
                lds     si, ds:32h
                call    DEVIOCALL2
                mov     word ptr es:3A0h, 3BCh
                mov     word ptr es:3A4h, 1
                retn
sub_A13A        endp


; =============== S U B R O U T I N E =======================================


sub_A173        proc near               ; CODE XREF: DOS_READ+8F↑p
                                        ; DOS_READ+E5↑p ...
                cmp     byte ptr ss:320h, 0
                jnz     short loc_A186
                or      ah, 10h
                test    byte ptr ss:2FEh, 0FFh
                jnz     short loc_A189

loc_A186:                               ; CODE XREF: sub_A173+6↑j
                or      ah, 38h

loc_A189:                               ; CODE XREF: sub_A173+11↑j
                mov     ss:34Bh, ah
                mov     word ptr ss:582h, es
                mov     ss:580h, bp
                push    si
                and     di, 0FFh
                mov     bp, ds
                call    near ptr sub_A242
                pop     si
                retn
sub_A173        endp


; =============== S U B R O U T I N E =======================================


HARDERR         proc near               ; CODE XREF: sub_6122:loc_615A↑p
                                        ; HARDERRRW:DO_ERR↑p ...
                xchg    ax, di
                and     di, 0FFh
                cmp     di, 0
                jnz     short loc_A1B8
                push    ax
                mov     al, es:[bp+0]
                mov     ss:WPERR, al
                pop     ax

loc_A1B8:                               ; CODE XREF: HARDERR+8↑j
                sub     ax, cx
                add     dx, ax
                adc     ss:HIGH_SECTOR, 0
                push    dx
                mul     word ptr es:[bp+2]
                pop     dx
                add     bx, ax
                xor     ah, ah
                cmp     ss:HIGH_SECTOR, 0
                jnz     short loc_A1DA
                cmp     dx, es:[bp+6]
                jb      short loc_A222

loc_A1DA:                               ; CODE XREF: HARDERR+2E↑j
                inc     ah
                cmp     word ptr es:[bp+0Fh], 0
                jnz     short loc_A20A
                push    dx
                mov     dx, ss:HIGH_SECTOR
                cmp     dx, es:[bp+2Bh]
                pop     dx
                jnz     short loc_A1F4
                cmp     dx, es:[bp+29h]

loc_A1F4:                               ; CODE XREF: HARDERR+4A↑j
                jnb     short loc_A204
                mov     word ptr es:[bp+1Fh], 0FFFFh
                mov     word ptr es:[bp+21h], 0FFFFh
                jmp     short loc_A222
; ---------------------------------------------------------------------------

loc_A204:                               ; CODE XREF: HARDERR:loc_A1F4↑j
                inc     ah
                inc     ah
                jmp     short loc_A222
; ---------------------------------------------------------------------------

loc_A20A:                               ; CODE XREF: HARDERR+3D↑j
                cmp     dx, es:[bp+11h]
                jnb     short loc_A218
                mov     word ptr es:[bp+1Fh], 0FFFFh
                jmp     short loc_A222
; ---------------------------------------------------------------------------

loc_A218:                               ; CODE XREF: HARDERR+6A↑j
                inc     ah

loc_A21A:
                cmp     dx, es:[bp+0Bh]
                jb      short loc_A222
                inc     ah

loc_A222:                               ; CODE XREF: HARDERR+34↑j
                                        ; HARDERR+5E↑j ...
                shl     ah, 1
                or      ah, ss:READOP
                or      ah, ss:ALLOWED
HARDERR         endp


; =============== S U B R O U T I N E =======================================


FATAL           proc near               ; CODE XREF: UNPACK+7F↓p
                mov     al, es:[bp+0]
FATAL           endp


; =============== S U B R O U T I N E =======================================


FATAL1          proc near               ; CODE XREF: FAT_GOT_DPB-D↓p
                mov     word ptr ss:582h, es
                mov     ss:580h, bp
                les     si, es:[bp+13h]
                mov     bp, es
FATAL1          endp


; =============== S U B R O U T I N E =======================================


sub_A242        proc far                ; CODE XREF: sub_A173+2C↑p

; FUNCTION CHUNK AT B40B SIZE 0000000D BYTES
; FUNCTION CHUNK AT B420 SIZE 00000022 BYTES

                call    sub_A3E5
                cmp     di, 0Ch
                jbe     short NET_I24_ENTRY
                mov     di, 0Ch

NET_I24_ENTRY:                          ; CODE XREF: sub_A242+6↑j
                                        ; DATA XREF: DOSCODE:40CB↑o
                cmp     ss:ERRORMODE, 0
                jz      short loc_A259
                mov     al, 3
                jmp     short loc_A2CD
; ---------------------------------------------------------------------------

loc_A259:                               ; CODE XREF: sub_A242+11↑j
                mov     ss:588h, sp
                push    ss
                pop     es
                cmp     ss:SFN, 0FFFFh
                jz      short loc_A274
                push    ds
                push    si
                lds     si, ss:5AEh
                mov     byte ptr [si], 0FFh
                pop     si
                pop     ds

loc_A274:                               ; CODE XREF: sub_A242+24↑j
                cli
                inc     ss:ERRORMODE
                dec     ss:INDOS
                dec     ss:INDOS_FLAG
                test    ss:EXTOPEN_ON, 2
                jz      short loc_A290
                mov     al, 3
                jmp     short loc_A2B7
; ---------------------------------------------------------------------------

loc_A290:                               ; CODE XREF: sub_A242+48↑j
                mov     ss, ss:USER_SS
                mov     sp, es:USER_SP
                cmp     es:DosHasHMA, 0
                jnz     short loc_A2A6
                int     24h             ; DOS - FATAL ERROR HANDLER ADDRESS
                                        ; Automatically called upon detection of unrecoverable I/O error.
                jmp     short loc_A2AB
; ---------------------------------------------------------------------------

loc_A2A6:                               ; CODE XREF: sub_A242+5E↑j
                call    dword ptr cs:LowInt24Addr

loc_A2AB:                               ; CODE XREF: sub_A242+62↑j
                mov     es:USER_SP, sp
                mov     es:USER_SS, ss
                push    es
                pop     ss

loc_A2B7:                               ; CODE XREF: sub_A242+4C↑j
                mov     sp, ss:588h
                inc     ss:INDOS
                inc     ss:INDOS_FLAG
                mov     ss:ERRORMODE, 0
                sti

loc_A2CD:                               ; CODE XREF: sub_A242+15↑j
                les     bp, ss:580h
                cmp     al, 1
                jb      short loc_A314
                jz      short loc_A31E
                cmp     al, 3
                jnz     short loc_A326
                test    ss:ALLOWED, 8
                jz      short loc_A326

loc_A2E4:                               ; CODE XREF: sub_A242:loc_A31A↓j
                                        ; sub_A242+F5↓j
                mov     al, 3
                test    ss:EXTOPEN_ON, 2
                jnz     short loc_A2F3
                inc     ss:FAILERR

loc_A2F3:                               ; CODE XREF: sub_A242+AA↑j
                                        ; sub_A242+DA↓j
                mov     ss:WPERR, 0FFh
                cmp     ss:SFN, 0FFFFh
                jnz     short loc_A302
                retn
; ---------------------------------------------------------------------------

loc_A302:                               ; CODE XREF: sub_A242+BD↑j
                push    ds
                push    si
                push    ax
                mov     ax, ss:SFN
                lds     si, ss:5AEh
                mov     [si], al
                pop     ax
                pop     si
                pop     ds
                retn
; ---------------------------------------------------------------------------

loc_A314:                               ; CODE XREF: sub_A242+92↑j
                test    ss:ALLOWED, 20h

loc_A31A:                               ; CODE XREF: sub_A242+E2↓j
                jz      short loc_A2E4
                jmp     short loc_A2F3
; ---------------------------------------------------------------------------

loc_A31E:                               ; CODE XREF: sub_A242+94↑j
                test    ss:ALLOWED, 10h
                jmp     short loc_A31A
; ---------------------------------------------------------------------------

loc_A326:                               ; CODE XREF: sub_A242+98↑j
                                        ; sub_A242+A0↑j
                push    ss
                pop     ds
                cmp     ds:CONSWAP, 0
                jz      short loc_A332
                call    sub_7B59

loc_A332:                               ; CODE XREF: sub_A242+EB↑j
                cmp     byte ptr ds:359h, 0
                jnz     short loc_A2E4
                mov     byte ptr ds:EXIT_TYPE, 2
                xor     al, al
                jmp     exit_inner
; ---------------------------------------------------------------------------

loc_A343:                               ; CODE XREF: sub_A242+11FD↓j
                push    ds
                mov     ah, 82h
                int     2Ah             ; Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
                mov     byte ptr ss:359h, 0FFh
                mov     ax, 1122h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK
                                        ; SS = DOS CS
                mov     al, 22h ; '"'
                call    $GET_INTERRUPT_VECTOR
                pop     cx
                push    es
                push    bx
                mov     bx, ss:330h
                mov     ds, bx
                mov     ax, ds:16h
                cmp     ax, bx
                jz      short loc_A381
                cmp     bx, cx
                jnz     short loc_A381
                push    ax
                cmp     byte ptr ss:57Ch, 3
                jz      short loc_A37C
                call    sub_B44A
                call    sub_7685

loc_A37C:                               ; CODE XREF: sub_A242+132↑j
                pop     word ptr ss:330h

loc_A381:                               ; CODE XREF: sub_A242+125↑j
                                        ; sub_A242+129↑j
                push    ss
                pop     ds
                mov     al, 0FFh
                call    ECritDisk
                call    FLUSHBUF
                call    LCritDisk
                cli
                mov     byte ptr ds:321h, 0
                mov     byte ptr ds:12B8h, 0
                mov     byte ptr ds:322h, 0FFh
                mov     byte ptr ds:359h, 0
                pop     word ptr ds:580h
                pop     word ptr ds:582h
                mov     ds, word ptr ds:330h
                mov     ss, word ptr ds:30h
                mov     sp, ds:2Eh
                call    restore_world
sub_A242        endp

                pop     es
                push    ax
                mov     ax, ds
                mov     ds, cs:DosDSeg
                mov     ds:0D63h, ax
                pop     ax
                mov     ds:584h, ax
                pop     ax
                pop     ax
                pop     ax
                lahf
                xchg    ah, al
                and     al, 2
                mov     ah, 0F2h
                push    ax
                push    word ptr ds:582h
                push    word ptr ds:580h
                mov     ax, ds:584h
                mov     ds, word ptr ds:0D63h
                iret

; =============== S U B R O U T I N E =======================================


sub_A3E5        proc near               ; CODE XREF: $IOCTL+26D↑p
                                        ; sub_A242↑p
                push    ax
                mov     ax, 0EBBh
                sub     ax, 0EABh
                push    ds
                mov     ds, cs:DosDSeg
                cmp     di, ax
                mov     ax, di
                jnb     short loc_A3FE
                mov     al, [di+0EABh]
                xor     ah, ah

loc_A3FE:                               ; CODE XREF: sub_A3E5+11↑j
                mov     ds:324h, ax
                pop     ds
                pop     ax
                push    si
                mov     si, 0E5Bh
                call    CAL_LK
                pop     si
                retn
sub_A3E5        endp


; =============== S U B R O U T I N E =======================================


sub_A40C        proc near               ; CODE XREF: sub_7F07+68↑p
                                        ; sub_81D5+D2↑p ...
                call    sub_A5B9
                jnb     short loc_A41E
                cmp     word ptr ss:0AE8h, 0FFFh
                jnz     short locret_A41D
                cmp     bx, 0FFF8h

locret_A41D:                            ; CODE XREF: sub_A40C+C↑j
                retn
; ---------------------------------------------------------------------------

loc_A41E:                               ; CODE XREF: sub_A40C+3↑j
                cmp     word ptr es:[bp+0Dh], 0FF6h
                jnb     short loc_A431
                cmp     bx, 0FF0h
                jz      short locret_A430
                cmp     bx, 0FF8h

locret_A430:                            ; CODE XREF: sub_A40C+1E↑j
                retn
; ---------------------------------------------------------------------------

loc_A431:                               ; CODE XREF: sub_A40C+18↑j
                cmp     bx, 0FFF8h
                retn
sub_A40C        endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR UNPACK

loc_A435:                               ; CODE XREF: UNPACK+2↓j
                cmp     ds:CLUSTNUM_HW, bx
                jnz     short loc_A452
                mov     di, ds:CL0FATENTRY_HW
                or      di, di
                mov     ds:CCONTENT_HW, di
                mov     di, ds:CL0FATENTRY
                jnz     short locret_A44D
                or      di, di

locret_A44D:                            ; CODE XREF: UNPACK-5↑j
                retn
; END OF FUNCTION CHUNK FOR UNPACK

; =============== S U B R O U T I N E =======================================


UNPACK          proc near               ; CODE XREF: DISK_INFO+30↑p
                                        ; DISK_INFO+85↑p ...

; FUNCTION CHUNK AT A435 SIZE 00000019 BYTES

                or      bx, bx
                jz      short loc_A435

loc_A452:                               ; CODE XREF: UNPACK-15↑j
                cmp     word ptr es:[bp+0Fh], 0
                jnz     short loc_A469
                mov     si, es:[bp+2Fh]
                cmp     ds:CLUSTNUM_HW, si
                jnz     short loc_A46D
                cmp     bx, es:[bp+2Dh]
                jmp     short loc_A46D
; ---------------------------------------------------------------------------

loc_A469:                               ; CODE XREF: UNPACK+9↑j
                cmp     bx, es:[bp+0Dh] ; [ES:BP+DPB.MAX_CLUSTER]

loc_A46D:                               ; CODE XREF: UNPACK+13↑j
                                        ; UNPACK+19↑j
                ja      short HURTFAT
                call    MAPCLUSTER
                jb      short _DoContext
                push    word ptr [di+2]
                pop     ss:CCONTENT_HW
                mov     di, [di]
                jnz     short High12
                call    sub_A5B9
                jb      short loc_A496
                mov     ss:CCONTENT_HW, 0
                mov     si, es:[bp+0Dh] ; [ES:BP+DPB.MAX_CLUSTER]
                                        ; is this 16-bit fat?
                cmp     si, 0FF6h       ; 4096-10
                jb      short Unpack12  ; No, go 'AND' off bits

loc_A496:                               ; CODE XREF: UNPACK+35↑j
                or      di, di          ; set zero condition code, clears carry
                mov     si, ss
                mov     ds, si
                jnz     short locret_A4A2
                or      ds:CCONTENT_HW, di ; ? (di=0)

locret_A4A2:                            ; CODE XREF: UNPACK+4E↑j
                retn
; ---------------------------------------------------------------------------

High12:                                 ; CODE XREF: UNPACK+30↑j
                mov     word ptr ss:0AECh, 0
                shr     di, 1
                shr     di, 1
                shr     di, 1
                shr     di, 1

Unpack12:                               ; CODE XREF: UNPACK+46↑j
                and     di, 0FFFh

_DoContext:                             ; CODE XREF: UNPACK+24↑j
                                        ; PACK+7↓j
                mov     si, ss
                mov     ds, si
                retn
; ---------------------------------------------------------------------------

HURTFAT:                                ; CODE XREF: UNPACK:loc_A46D↑j
                call    chk_set_first_access
                push    ax
                mov     ah, 88h         ; Allowed_FAIL+80h
                mov     ss:ALLOWED, 8   ; Allowed_FAIL
                push    ss:CLUSTNUM_HW
                push    bx
                call    FATAL
                pop     bx
                pop     ss:CLUSTNUM_HW
                xor     di, di
                dec     di              ; 0FFFFh
                mov     ss:CCONTENT_HW, di
                cmp     al, 3
                clc
                jnz     short OKU_RET   ; Try to ignore bad FAT
                stc                     ; User said FAIL

OKU_RET:                                ; CODE XREF: UNPACK+93↑j
                pop     ax

hurtfat_retn:                           ; CODE XREF: PACK+67↓j
                retn
UNPACK          endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR PACK

p_clust_0:                              ; CODE XREF: PACK+2↓j
                cmp     ds:CLUSTNUM_HW, bx ; 0
                jnz     short p_cont
                push    ax
                mov     ax, ds:CL0FATENTRY_SIG
                mov     ds:CL0FATENTRY_HW, ax
                pop     ax
                mov     ds:CL0FATENTRY, dx
                retn
; END OF FUNCTION CHUNK FOR PACK

; =============== S U B R O U T I N E =======================================


PACK            proc near               ; CODE XREF: sub_9ACF+105↑p
                                        ; sub_9ACF+14F↑p ...

; FUNCTION CHUNK AT A4E6 SIZE 00000013 BYTES

                or      bx, bx          ; are we packing cluster 0 ?
                jz      short p_clust_0 ; place value in CL0FATENTRY

p_cont:                                 ; CODE XREF: PACK-F↑j
                call    MAPCLUSTER
                jb      short _DoContext
                mov     si, [di]
                jz      short loc_A513
                add     dx, dx
                add     dx, dx
                add     dx, dx
                add     dx, dx
                and     si, 0Fh
                jmp     short loc_A53E
; ---------------------------------------------------------------------------

loc_A513:                               ; CODE XREF: PACK+B↑j
                call    sub_A5B9
                jnb     short loc_A52B
                mov     si, ss:0AEAh
                xor     si, [di+2]
                and     si, 0FFFh
                xor     [di+2], si
                mov     [di], dx
                jmp     short loc_A542
; ---------------------------------------------------------------------------

loc_A52B:                               ; CODE XREF: PACK+1D↑j
                cmp     word ptr es:[bp+0Dh], 0FF6h
                jnb     short loc_A53C
                and     si, 0F000h
                and     dh, 0Fh
                jmp     short loc_A53E
; ---------------------------------------------------------------------------

loc_A53C:                               ; CODE XREF: PACK+38↑j
                xor     si, si

loc_A53E:                               ; CODE XREF: PACK+18↑j
                                        ; PACK+41↑j
                or      si, dx
                mov     [di], si

loc_A542:                               ; CODE XREF: PACK+30↑j
                lds     si, ss:CURBUF
                test    byte ptr [si+5], 40h ; [SI+BUFFINFO.buf_flags],buf_dirty
                jnz     short yesdirty11
                inc     ss:DirtyBufferCount
                or      byte ptr [si+5], 40h ; [SI+BUFFINFO.buf_flags],buf_dirty

yesdirty11:                             ; CODE XREF: PACK+52↑j
                cmp     ss:CLUSSPLIT, 0
                mov     dx, ss
                mov     ds, dx
                jz      short hurtfat_retn
                push    ax
                push    word ptr ds:0AE8h
                push    bx
                push    cx
                mov     ax, ds:CLUSSAVE
                add     si, 24          ; BUFINSIZ
                mov     ds, word ptr ds:CURBUF+2
                assume ds:DOSCODE
                mov     [si], ah
                lds     dx, ss:CLUSSEC
                assume ds:nothing
                push    ax
                mov     ss:HIGH_SECTOR, ds
                mov     si, ss
                mov     ds, si
                mov     si, 1
                xor     al, al
                call    GETBUFFRB
                pop     ax
                jb      short POPP_RET
                lds     di, ds:CURBUF
                test    byte ptr [di+5], 40h ; [DI+BUFFINFO.buf_flags],buf_dirty
                jnz     short yesdirty12
                inc     ss:DirtyBufferCount
                or      byte ptr [di+5], 40h ; [DI+BUFFINFO.buf_flags],buf_dirty

yesdirty12:                             ; CODE XREF: PACK+9E↑j
                add     di, 23          ; BUFINSIZ-1
                add     di, es:[bp+2]   ; [ES:BP+DPB.SECTOR_SIZE]
                clc
                mov     [di], al

POPP_RET:                               ; CODE XREF: PACK+94↑j
                mov     cx, ss
                mov     ds, cx
                pop     cx
                pop     bx
                pop     word ptr ss:0AE8h
                pop     ax
                retn
PACK            endp


; =============== S U B R O U T I N E =======================================


sub_A5B9        proc near               ; CODE XREF: sub_A40C↑p
                                        ; UNPACK+32↑p ...
                cmp     word ptr es:[bp+0Fh], 1
                jnb     short locret_A5CD
                cmp     word ptr es:[bp+2Fh], 0
                jnz     short loc_A5CC
                cmp     word ptr es:[bp+2Dh], 0FFF6h

loc_A5CC:                               ; CODE XREF: sub_A5B9+C↑j
                cmc

locret_A5CD:                            ; CODE XREF: sub_A5B9+5↑j
                retn
sub_A5B9        endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR MAPCLUSTER

loc_A5CE:                               ; CODE XREF: MAPCLUSTER+44↓j
                xchg    ax, di
                xchg    ax, dx
                div     cx
                xchg    ax, di
                div     cx
                jmp     short loc_A637
; END OF FUNCTION CHUNK FOR MAPCLUSTER

; =============== S U B R O U T I N E =======================================


MAPCLUSTER      proc near               ; CODE XREF: UNPACK+21↑p
                                        ; PACK:p_cont↑p

; FUNCTION CHUNK AT A5CE SIZE 00000009 BYTES

                mov     ds:CLUSSPLIT, 0
                push    ax
                push    bx
                push    cx
                push    dx
                push    ds:CLUSTNUM_HW
                mov     ax, bx
                mov     dx, ds:CLUSTNUM_HW
                xor     di, di
                call    sub_A5B9
                jnb     short loc_A5FF
                shl     ax, 1
                rcl     dx, 1
                rcl     di, 1
                shl     ax, 1
                rcl     dx, 1
                rcl     di, 1
                jmp     short loc_A613
; ---------------------------------------------------------------------------

loc_A5FF:                               ; CODE XREF: MAPCLUSTER+18↑j
                cmp     word ptr es:[bp+0Dh], 0FF6h
                jnb     short loc_A60B
                shr     dx, 1
                rcr     ax, 1

loc_A60B:                               ; CODE XREF: MAPCLUSTER+2E↑j
                add     ax, bx
                adc     dx, ds:CLUSTNUM_HW
                adc     di, di

loc_A613:                               ; CODE XREF: MAPCLUSTER+26↑j
                mov     cx, es:[bp+2]
                cmp     cx, 200h
                jnz     short loc_A5CE
                push    ax
                shr     di, 1
                rcr     dx, 1
                rcr     ax, 1
                mov     al, ah
                mov     ah, dl
                mov     dl, dh
                xor     dh, dh
                shr     di, 1
                adc     dh, dh
                xchg    dx, di
                pop     dx
                and     dx, 1FFh

loc_A637:                               ; CODE XREF: MAPCLUSTER-2↑j
                add     ax, es:[bp+6]
                adc     di, 0
                dec     cx
                push    di
                push    ax
                push    dx
                push    cx
                mov     dx, ax
                mov     ds:HIGH_SECTOR, di
                xor     al, al
                mov     si, 1
                call    GETBUFFRB
                pop     cx
                pop     ax
                pop     dx
                pop     bx
                jb      short loc_A6BC
                lds     si, ds:CURBUF
                lea     di, [si+18h]
                add     di, ax
                cmp     ax, cx
                jnz     short loc_A69F
                mov     al, [di]
                mov     si, ss
                mov     ds, si
                inc     ds:CLUSSPLIT
                mov     byte ptr ds:CLUSSAVE, al
                mov     word ptr ds:CLUSSEC, dx
                xor     ax, ax
                add     dx, 1
                mov     word ptr ds:CLUSSEC+2, bx
                adc     bx, ax
                mov     ds:HIGH_SECTOR, bx
                mov     si, 1
                call    GETBUFFRB
                jb      short loc_A6BC
                lds     si, ds:CURBUF
                lea     di, [si+18h]
                mov     al, [di]
                mov     di, ss
                mov     ds, di
                mov     byte ptr ds:CLUSSAVE+1, al
                mov     di, offset CLUSSAVE

loc_A69F:                               ; CODE XREF: MAPCLUSTER+8B↑j
                pop     word ptr ss:0AE8h
                pop     dx
                pop     cx
                pop     bx
                xor     ax, ax
                call    sub_A5B9
                jb      short loc_A6B8
                cmp     word ptr es:[bp+0Dh], 0FF6h
                jnb     short loc_A6B8
                mov     ax, bx

loc_A6B8:                               ; CODE XREF: MAPCLUSTER+D5↑j
                                        ; MAPCLUSTER+DD↑j
                test    al, 1
                pop     ax
                retn
; ---------------------------------------------------------------------------

loc_A6BC:                               ; CODE XREF: MAPCLUSTER+7E↑j
                                        ; MAPCLUSTER+B3↑j
                pop     ss:CLUSTNUM_HW
                pop     dx
                pop     cx
                pop     bx
                pop     ax
                retn
MAPCLUSTER      endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


FATREAD_SFT     proc near               ; CODE XREF: sub_7873+13↑p
                les     bp, es:[di+7]   ; [ES:DI+SF_ENTRY.sf_devptr]

fatread_gotdpb:                         ; CODE XREF: FATREAD_CDS+6↓p
                mov     al, es:[bp+0]
                mov     ds:THISDRV, al
                call    GOTDPB          ; Set THISDPB
                call    FAT_GOT_DPB

fatread_sft_retn:                       ; CODE XREF: FATREAD_CDS+B↓j
                retn
FATREAD_SFT     endp


; =============== S U B R O U T I N E =======================================


FATREAD_CDS     proc near               ; CODE XREF: DOSCODE:5260↑p
                                        ; DOS_DELETE+14F↑p ...
                push    es
                push    di
                les     bp, es:[di+45h] ; [ES:DI+curdir.devptr]
                call    fatread_gotdpb
                pop     di
                pop     es
                jb      short fatread_sft_retn
                jnz     short NO_CHANGE
                mov     ax, 0FFFFh      ; -1
                push    ds
                mov     cl, ds:CDSCOUNT
                xor     ch, ch          ; CX is number of structures
                lds     si, es:[di+45h] ; Find all CDS with this devptr
                les     di, ss:CDSADDR  ; (es:di) = CDS pointer

frcd20:                                 ; CODE XREF: FATREAD_CDS+4E↓j
                test    byte ptr es:[di+44h], 80h ; ES:DI+curdir.flags+1],
                                        ; (curdir_isnet>>8)
                jnz     short frcd25
                cmp     si, es:[di+45h] ; [ES:DI+curdir.devptr]
                jnz     short frcd25    ; no match
                mov     bx, ds
                cmp     bx, es:[di+47h] ; [ES:DI+curdir.devptr+2]
                jnz     short frcd25    ; CDS not for this drive
                test    es:[di+49h], ax ; [ES:DI+curdir.ID]
                                        ; If root (0), leave root
                jz      short frcd25    ; = 0
                test    es:[di+4Bh], ax ; [ES:DI+curdir.ID+2]
                jz      short frcd25    ; leave root (= 0)
                mov     es:[di+4Bh], ax ; else invalid (-1)
                mov     es:[di+49h], ax ; -1

frcd25:                                 ; CODE XREF: FATREAD_CDS+27↑j
                                        ; FATREAD_CDS+2D↑j ...
                add     di, 88          ; add di,curdir.size
                                        ; Point to next CDS
                loop    frcd20
                pop     ds

NO_CHANGE:                              ; CODE XREF: FATREAD_CDS+D↑j
                les     bp, ds:THISDPB
                clc
                retn
FATREAD_CDS     endp


; =============== S U B R O U T I N E =======================================


chk_set_first_access proc near          ; CODE XREF: FAT32_ABSDWRT+2E↑p
                                        ; UNPACK:HURTFAT↑p ...
                cmp     word ptr es:[bp+0Fh], 0 ; DPB.FATSIZE
                jnz     short chk_set_fa_1 ; FAT (FAT12 or FAT16)
                                        ; FAT32
                cmp     word ptr es:[bp+21h], 0FFFFh ; DPB.FREE_CNT_HW
                mov     word ptr es:[bp+21h], 0FFFFh ; High word of free cluster count
                jnz     short chk_set_fa_2

chk_set_fa_1:                           ; CODE XREF: chk_set_first_access+5↑j
                cmp     word ptr es:[bp+1Fh], 0FFFFh ; DPB.FREE_CNT

chk_set_fa_2:                           ; CODE XREF: chk_set_first_access+12↑j
                mov     word ptr es:[bp+1Fh], 0FFFFh ; Count of free clusters, -1 if unknown
                jz      short chk_set_fa_3
                or      byte ptr es:[bp+18h], 1 ; DPB.FIRST_ACCESS

chk_set_fa_3:                           ; CODE XREF: chk_set_first_access+1F↑j
                retn
chk_set_first_access endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR FAT_GOT_DPB

FATERR:                                 ; CODE XREF: FAT_GOT_DPB+39↓j
                                        ; FAT_GOT_DPB+1BE↓j
                call    chk_set_first_access ; Err in FAT must force recalc of freespace
                and     di, 0FFh        ; STECODE
                mov     ds:ALLOWED, 18h ; [ALLOWED],Allowed_FAIL+Allowed_RETRY
                mov     ah, 1Ah         ; 2+Allowed_FAIL+Allowed_RETRY
                                        ; (While trying to read FAT)
                mov     al, ds:THISDRV  ; Tell which drive
                call    FATAL1
                les     bp, ds:THISDPB
                cmp     al, 3
                jnz     short FAT_GOT_DPB ; User said retry

FATERR_fail:                            ; CODE XREF: FAT_GOT_DPB+6↓j
                stc                     ; User said FAIL
                retn
; END OF FUNCTION CHUNK FOR FAT_GOT_DPB

; =============== S U B R O U T I N E =======================================


FAT_GOT_DPB     proc near               ; CODE XREF: FATREAD_SFT+E↑p
                                        ; FAT_GOT_DPB-4↑j ...

; FUNCTION CHUNK AT A756 SIZE 0000001E BYTES

                push    ss              ; SS is DOSDATA
                pop     ds
                mov     ax, es
                or      ax, bp
                jz      short FATERR_fail
                mov     al, 19
                mov     ah, es:[bp+1]   ; [ES:BP+DPB.UNIT]
                mov     ds:DEVCALL_REQFUNC, 1 ; DEVMDCH
                mov     word ptr ds:DEVCALL_REQLEN, ax
                mov     al, es:[bp+17h] ; [ES:BP+DPB.MEDIA]
                mov     ds:DEVCALL_REQSTAT, 0
                mov     ds:CALLUNIT, al ; [CALLMED]
                push    es
                push    ds
                mov     bx, offset DEVCALL_REQLEN ; offset DEVCALL
                lds     si, es:[bp+13h] ; [ES:BP+DPB.DRIVER_ADDR]
                pop     es
                call    DEVIOCALL2
                push    ss
                pop     ds
                pop     es
                mov     di, ds:DEVCALL_REQSTAT
                or      di, di
                js      short FATERR
                mov     ah, es:[bp+18h] ; [ES:BP+DPB.FIRST_ACCESS]
                mov     al, ds:THISDRV  ; Use physical unit number
                and     ah, 80h         ; izolate (FAT) first access bit
                and     byte ptr es:[bp+18h], 7Fh ; clear first access (FAT) bit 7
                cmp     ds:VOLCHNG_FLAG, al
                jnz     short CHECK_BYT
                mov     ds:VOLCHNG_FLAG, 0FFh
                jmp     GOGETBPB
; ---------------------------------------------------------------------------

CHECK_BYT:                              ; CODE XREF: FAT_GOT_DPB+4E↑j
                or      ah, ds:CALLBR   ; [CALLRBYT]
                js      short NEWDSK
                jz      short CHKBUFFDIRT
                clc
                retn                    ; Media not changed (NZ)
; ---------------------------------------------------------------------------

DISK_CHNG_ERR:                          ; CODE XREF: FAT_GOT_DPB:jmp_to_DISK_CHNG_ERR↓j
                push    es
                push    bp
                les     bp, es:[bp+13h] ; [ES:BP+DPB.DRIVER_ADDR]
                test    byte ptr es:[bp+5], 8 ; [es:bp+SYSDEV.ATT+1],(DEVOPCL>>8)
                pop     bp
                pop     es
                jz      short FAIL_OPJ2
                push    ds
                push    di
                push    ss
                pop     ds
                mov     ds:ALLOWED, 18h ; Allowed_FAIL+Allowed_RETRY
                push    es
                les     di, dword ptr ds:CALLVIDM ; Get volume ID pointer
                mov     word ptr ds:EXTERRPT+2, es
                pop     es
                mov     word ptr ds:EXTERRPT, di
                mov     ax, 0Fh         ; error_I24_wrong_disk
                mov     ds:READOP, 1    ; Write
                call    HARDERR
                pop     di
                pop     ds
                cmp     al, 3

FAIL_OPJ2:                              ; CODE XREF: FAT_GOT_DPB+6F↑j
                jz      short FAIL_OP
                jmp     FAT_GOT_DPB     ; Retry
; ---------------------------------------------------------------------------

CHKBUFFDIRT:                            ; CODE XREF: FAT_GOT_DPB+5E↑j
                cmp     ss:DirtyBufferCount, 0 ; any dirty buffers ?
                jz      short NEWDSK    ; no, skip the check
                call    GETCURHEAD      ; get pointer to first buffer

nbuffer:                                ; CODE XREF: FAT_GOT_DPB+C3↓j
                cmp     [di+4], al      ; [di+BUFFINFO.buf_ID] ; Unit OK ?
                jnz     short lfnxt     ; no
                test    byte ptr [di+5], 40h ; is the buffer dirty ?
                jz      short lfnxt     ; no, go for next buffer
                push    ss
                clc
                pop     ds
                retn
; ---------------------------------------------------------------------------

FAIL_OP:                                ; CODE XREF: FAT_GOT_DPB:FAIL_OPJ2↑j
                                        ; FAT_GOT_DPB+145↓j
                push    ss
                stc
                pop     ds
                retn
; ---------------------------------------------------------------------------

jmp_to_DISK_CHNG_ERR:                   ; CODE XREF: FAT_GOT_DPB+E4↓j
                jmp     short DISK_CHNG_ERR
; ---------------------------------------------------------------------------

lfnxt:                                  ; CODE XREF: FAT_GOT_DPB+AA↑j
                                        ; FAT_GOT_DPB+B0↑j
                mov     di, [di]        ; [di+BUFFINFO.buf_next] ; get next buffer
                cmp     ss:FIRST_BUFF_ADDR, di ; is this where we started ?
                jnz     short nbuffer   ; no, check this guy also
                                        ; If no dirty buffers, assume Media changed

NEWDSK:                                 ; CODE XREF: FAT_GOT_DPB+5C↑j
                                        ; FAT_GOT_DPB+A2↑j
                mov     word ptr es:[bp+1Fh], 0FFFFh ; [ES:BP+DPB.FREE_CNT],-1
                                        ; Media changed, must recompute
                cmp     word ptr es:[bp+0Fh], 0 ; [ES:BP+DPB.FATSIZE] = 0 for FAT32 fs
                jnz     short newdsk2
                mov     word ptr es:[bp+21h], 0FFFFh ; [ES:BP+DPB.FREE_CNT_HW],-1

newdsk2:                                ; CODE XREF: FAT_GOT_DPB+D0↑j
                call    GETCURHEAD

nxbuffer:                               ; CODE XREF: FAT_GOT_DPB+F7↓j
                cmp     [di+4], al      ; [DI+BUFFINFO.buf_ID],al ; This drive ?
                jnz     short lfnxt2
                test    byte ptr [di+5], 40h ; [DI+BUFFINFO.buf_flags],buf_dirty
                jnz     short jmp_to_DISK_CHNG_ERR
                mov     word ptr [di+4], 20FFh ; [DI+BUFFINFO.buf_ID],
                                        ; (buf_visit*256)+0FFh ; free up
                call    SCANPLACE
                jmp     short skpbuff
; ---------------------------------------------------------------------------

lfnxt2:                                 ; CODE XREF: FAT_GOT_DPB+DE↑j
                mov     di, [di]

skpbuff:                                ; CODE XREF: FAT_GOT_DPB+EE↑j
                cmp     di, ss:FIRST_BUFF_ADDR
                jnz     short nxbuffer
                cmp     ss:SC_CACHE_COUNT, 0 ; look ahead buffers ?
                jz      short GOGETBPB  ; no
                cmp     al, ss:CurSC_DRIVE ; same as changed drive ?
                jnz     short GOGETBPB  ; no
                mov     ss:CurSC_DRIVE, 0FFh ; invalidate look ahead buffers

GOGETBPB:                               ; CODE XREF: FAT_GOT_DPB+55↑j
                                        ; FAT_GOT_DPB+FF↑j ...
                lds     di, es:[bp+13h] ; [ES:BP+DPB.DRIVER_ADDR]
                test    byte ptr [di+5], 20h ; [DI+SYSDEV.ATT+1],(ISFATBYDEV>>8)
                jnz     short GETFREEBUF
                push    ss
                pop     ds
                mov     word ptr es:[bp+2], 200h ; DPB.SECTORSIZE ; bytes per sector
                mov     word ptr es:[bp+6], 1 ; DPB.FIRST_FAT ; starting sector of FATs
                mov     byte ptr es:[bp+8], 1 ; DPB.FAT_COUNT ; number of FATs
                mov     word ptr es:[bp+0Dh], 3 ; DPB.MAX_CLUSTER ; cluster count + 1
                mov     word ptr es:[bp+0Fh], 1 ; DPB.FAT_SIZE ; FAT sectors (16 bit)
                mov     ds:CLUSTNUM_HW, 0 ; high word of cluster number (for UNPACK)
                mov     bx, 2           ; Read the 1st FAT sector into CURBUF
                call    UNPACK

FAIL_OPJ:                               ; CODE XREF: FAT_GOT_DPB+16E↓j
                jnb     short unpack_ok
                jmp     FAIL_OP
; ---------------------------------------------------------------------------

unpack_ok:                              ; CODE XREF: FAT_GOT_DPB:FAIL_OPJ↑j
                lds     di, ds:CURBUF
                jmp     short GOTGETBUF
; ---------------------------------------------------------------------------

GETFREEBUF:                             ; CODE XREF: FAT_GOT_DPB+116↑j
                xor     dx, dx
                lds     di, ss:LoMemBuff
                sub     di, 24          ; sub di,BUFINSIZ
                cmp     ss:BuffInHMA, dl ; 0
                jnz     short GOTGETBUF ; buffer is in HMA
                                        ; use [LowMemBuff] to transfer at first
                push    es
                push    bp
                mov     ss:HIGH_SECTOR, dx ; 0
                call    GETCURHEAD
                call    BUFWRITE
                pop     bp
                pop     es
                jb      short FAIL_OPJ

GOTGETBUF:                              ; CODE XREF: FAT_GOT_DPB+14C↑j
                                        ; FAT_GOT_DPB+15D↑j
                add     di, 24          ; add di,BUFINSIZ
                mov     ss:CALLXAD_2, ds ; [SS:CALLXAD+2]
                mov     ax, ss
                mov     ds, ax
                mov     word ptr ds:CALLBR, di ; [CALLXAD]
                mov     al, 16h         ; DBPBHL
                mov     ah, es:[bp+1]   ; [ES:BP+DPB.UNIT]
                mov     ds:DEVCALL_REQFUNC, 2 ; DEVBPB
                mov     word ptr ds:DEVCALL_REQLEN, ax
                mov     ds:DEVCALL_REQSTAT, 0
                mov     al, es:[bp+17h] ; [ES:BP+DPB.MEDIA]
                push    es
                push    ds
                mov     ds:CALLUNIT, al ; [CALLMED]
                mov     bx, offset DEVCALL_REQLEN ; offset DEVCALL
                lds     si, es:[bp+13h] ; [ES:BP+DPB.DRIVER_ADDR]
                                        ; DS:SI Points to device header
                pop     es              ; ES:BX Points to call header
                call    DEVIOCALL2
                pop     es
                mov     di, ss
                mov     ds, di
                mov     di, ds:DEVCALL_REQSTAT
                or      di, di
                jns     short gotgetbuf2 ;
                                        ; have error
                lds     di, dword ptr ds:CALLBR ; [CALLXAD] ; Buffer (data) address
                mov     word ptr [di-20], 0FFh ; byte BUFFINFO.buf_ID = 0FFh ; FREE
                                        ; byte BUFFINFO.buf_flags = 0
                jmp     FATERR
; ---------------------------------------------------------------------------

gotgetbuf2:                             ; CODE XREF: FAT_GOT_DPB+1B3↑j
                lds     si, dword ptr ds:CALLBPB ; Address of the BPB (DEVCALL offset 18)
                xor     cx, cx          ; 0
                mov     es:[bp+1Dh], cx ; [ES:BP+DPB.NEXT_FREE] = 0
                                        ; recycle scanning pointer
                mov     dx, 4152h       ; 'RA' ; FAT32 extended BPB/DPB signature
                cmp     [si+0Bh], cx    ; BPB.fatsecs ; 16 bit FAT size = 0 for FAT32 fs
                jnz     short gotgetbuf3 ; not FAT32
                mov     es:[bp+39h], cx ; clear reserved bytes (DPB.RESERVED)
                mov     es:[bp+3Bh], cx
                dec     cx              ; -1
                mov     es:[bp+1Fh], cx ; (DPB.FREE_CNT) set free count to -1 (unknown)
                mov     es:[bp+21h], cx
                mov     cx, 4558h       ; 'XE' ; FAT32 extended BPB/DPB signature

gotgetbuf3:                             ; CODE XREF: FAT_GOT_DPB+1D1↑j
                call    $SETDPB
                lds     di, dword ptr ss:CALLBR ; [SS:CALLXAD] ; Get back buffer pointer
                mov     dx, es:[bp+25h] ; [es:bp+DPB.FSINFO_SECTOR]
                xor     cx, cx          ; 0
                cmp     es:[bp+0Fh], cx ; [es:bp+DPB.FAT_SIZE] ; 16 bit FAT size field
                jz      short gotgetbuf4 ; FAT32 fs
                jmp     gotgetbuf12     ; FAT fs
; ---------------------------------------------------------------------------

gotgetbuf4:                             ; CODE XREF: FAT_GOT_DPB+1F9↑j
                cmp     dx, 0FFFFh      ; invalid ?
                jnz     short gotgetbuf5 ; no
                jmp     gotgetbuf12     ; skip reading FSINFO sector
; ---------------------------------------------------------------------------

gotgetbuf5:                             ; CODE XREF: FAT_GOT_DPB+201↑j
                mov     ss:HIGH_SECTOR, cx ; 0
                mov     bx, di
                cmp     ss:BuffInHMA, 0
                jz      short gotgetbuf6 ; buffer is in conventional (<=640KB) memory
                lds     bx, ss:LoMemBuff ; use a buffer in conventional memory
                mov     di, bx

gotgetbuf6:                             ; CODE XREF: FAT_GOT_DPB+213↑j
                mov     ss:ALLOWED, 18h ; Allowed_FAIL+Allowed_RETRY
                inc     cx
                push    di
                push    bx
                call    DREAD
                pop     bx
                pop     di
                jb      short gotgetbuf11 ;
                                        ; ds:di = (FSINFO sector) buffer
                                        ; FSI_HeadSig = 41615252h
                cmp     word ptr [di], 5252h ; 'RR' ; check if it is a valid FSINFO sector
                jnz     short gotgetbuf11 ; not valid
                cmp     word ptr [di+2], 4161h ; 'aA' ; (NASM syntax)
                jnz     short gotgetbuf11
                cmp     word ptr [di+484], 7272h ; 'rr' ; FSI_StrucSig = 61417272h
                jnz     short gotgetbuf11
                cmp     word ptr [di+486], 6141h ; 'Aa'
                jnz     short gotgetbuf11 ; not valid
                push    dx              ; valid
                push    bx
                push    cx
                mov     bx, es:[bp+2Fh] ; [es:bp+DPB.LASTCLUSTER+2]
                mov     cx, es:[bp+2Dh] ; [es:bp+DPB.LASTCLUSTER]
                mov     ax, [di+488]    ; FSI_FreeCount ; bx:cx = number of clusters + 1
                mov     dx, [di+490]    ; FSI_FreeCount+2
                cmp     dx, bx          ; is Free Count >= (Number of Clusters + 1) ?
                jnz     short gotgetbuf7 ; if yes, it is invalid value (must be 0FFFFFFFFh)
                cmp     ax, cx

gotgetbuf7:                             ; CODE XREF: FAT_GOT_DPB+25E↑j
                jnb     short gotgetbuf8 ; yes, invalid value (must be 0FFFFFFFFh)
                mov     es:[bp+1Fh], ax ; no, valid free count
                                        ; save free count into [es:bp+DPB.FREE_CNT]
                mov     es:[bp+21h], dx ; [es:bp+DPB.FREE_CNT+2]

gotgetbuf8:                             ; CODE XREF: FAT_GOT_DPB:gotgetbuf7↑j
                mov     ax, [di+492]    ; FSI_Nxt_Free
                mov     dx, [di+494]
                cmp     dx, bx          ; is the next free clust num >= (num of clusters + 1) ?
                jnz     short gotgetbuf9 ; invalid (if dx > bx)
                cmp     ax, cx

gotgetbuf9:                             ; CODE XREF: FAT_GOT_DPB+276↑j
                jnb     short gotgetbuf10 ; invalid
                mov     es:[bp+39h], ax ; save next free (search) cluster number
                mov     es:[bp+3Bh], dx ; into [es:bp+DPB.FAT32_NXTFREE]
                mov     es:[bp+1Dh], ax ; and into [es:bp+DPB.NEXT_FREE] ; low word

gotgetbuf10:                            ; CODE XREF: FAT_GOT_DPB:gotgetbuf9↑j
                pop     cx
                pop     bx
                pop     dx

gotgetbuf11:                            ; CODE XREF: FAT_GOT_DPB+22A↑j
                                        ; FAT_GOT_DPB+230↑j ...
                cmp     ss:BuffInHMA, 0 ; is buffer in HMA ?
                jnz     short gotgetbuf12 ; yes
                mov     word ptr [di-20], 0FFh ; invalidate buffer (set it as free buffer)

gotgetbuf12:                            ; CODE XREF: FAT_GOT_DPB+1FB↑j
                                        ; FAT_GOT_DPB+203↑j ...
                cmp     ss:BuffInHMA, 0
                jnz     short gotgetbuf16
                cmp     word ptr es:[bp+6], 1
                jz      short gotgetbuf13
                mov     word ptr [di-20], 0FFh ; invalidate buffer (set it as free buffer)
                                        ; di = buffer header + 4 (BUFINFO.buf_ID)

gotgetbuf13:                            ; CODE XREF: FAT_GOT_DPB+2A5↑j
                mov     al, es:[bp+8]   ; [es:bp+DPB.FAT_COUNT]
                mov     [di-14], al     ; BUFFINFO.buf_wrtcnt ; buffer header address + 10
                mov     ax, es:[bp+0Fh] ; [es:bp+DPB.FAT_SIZE] ; 16 bit FAT size field
                or      ax, ax
                jnz     short gotgetbuf14 ; FAT (FAT12 or FAT16) fs
                                        ; FAT32 fs
                mov     ax, es:[bp+31h] ; [es:bp+DPB.FAT32_SIZE] ; FAT sectors (per one FAT)
                mov     [di-13], ax     ; BUFFINFO.buf_wrtcntinc ; # sectors between each write
                mov     ax, es:[bp+33h] ; [es:bp+DPB.FAT32_SIZE+2]
                jmp     short gotgetbuf15
; ---------------------------------------------------------------------------

gotgetbuf14:                            ; CODE XREF: FAT_GOT_DPB+2B9↑j
                mov     [di-13], ax     ; BUFFINFO.buf_wrtcntinc
                xor     ax, ax          ; 0

gotgetbuf15:                            ; CODE XREF: FAT_GOT_DPB+2C6↑j
                mov     [di-15], ax     ; BUFFINFO.buf_wrtcntinc+2 ; hw of sectors per FAT

gotgetbuf16:                            ; CODE XREF: FAT_GOT_DPB+29E↑j
                mov     ax, ss          ; SS is DOSDATA
                mov     ds, ax
                xor     al, al          ; Media changed (Z), Carry clear
                retn
FAT_GOT_DPB     endp


; =============== S U B R O U T I N E =======================================


GETCURHEAD      proc near               ; CODE XREF: update_fat32_fsinfo+35↑p
                                        ; DskRdBufScan+14↑p ...
                lds     di, ss:BufferQueue ; Pointer to the first buffer
                mov     word ptr ss:LastBuffer, 0FFFFh ; -1 ; invalidate last buffer
                mov     ss:FIRST_BUFF_ADDR, di ; save first buffer address
                retn
GETCURHEAD      endp


; =============== S U B R O U T I N E =======================================


SCANPLACE       proc near               ; CODE XREF: DskRdBufScan+7E↑p
                                        ; DskWrtBufPurge+3C↑p ...
                push    word ptr [di]
                call    PLACEBUF
                pop     di
                retn
SCANPLACE       endp


; =============== S U B R O U T I N E =======================================


PLACEBUF        proc near               ; CODE XREF: sub_990E+29↑p
                                        ; SCANPLACE+2↑p ...
                push    ax
                push    bx
                mov     ax, [di]
                mov     bx, ss:6Dh
                cmp     ax, bx
                jz      short loc_AA93
                cmp     di, bx
                jnz     short loc_AA7B
                mov     ss:6Dh, ax
                jmp     short loc_AA93
; ---------------------------------------------------------------------------

loc_AA7B:                               ; CODE XREF: PLACEBUF+F↑j
                push    si
                mov     si, [di+2]
                mov     [si], ax
                xchg    ax, si
                mov     [si+2], ax
                mov     si, [bx+2]
                mov     [bx+2], di
                mov     [si], di
                mov     [di+2], si
                mov     [di], bx
                pop     si

loc_AA93:                               ; CODE XREF: PLACEBUF+B↑j
                                        ; PLACEBUF+15↑j
                pop     bx
                pop     ax
                cmp     byte ptr [di+4], 0FFh
                jnz     short locret_AAA0
                mov     ss:6Dh, di

locret_AAA0:                            ; CODE XREF: PLACEBUF+35↑j
                retn
PLACEBUF        endp

; ---------------------------------------------------------------------------

POINTCOMP:                              ; DATA XREF: DOSCODE:40E7↑o
                cmp     si, di
                jnz     short _ret_label
                push    cx
                push    dx
                mov     cx, ds
                mov     dx, es
                cmp     cx, dx
                pop     dx
                pop     cx

_ret_label:                             ; CODE XREF: DOSCODE:AAA3↑j
                retn

; =============== S U B R O U T I N E =======================================


sub_AAB0        proc near               ; CODE XREF: sub_7873+24↑p
                                        ; DOSCODE:79AF↑p ...
                xor     si, si
sub_AAB0        endp


GETBUFFRB:                              ; CODE XREF: PACK+90↑p
                                        ; MAPCLUSTER+77↑p ...
                mov     ds:594h, ax
                or      si, si
                jz      short loc_AAE2
                cmp     word ptr es:[bp+0Fh], 0
                jnz     short loc_AAE2
                mov     ax, es:[bp+23h]
                test    al, 80h
                jz      short loc_AAE2
                and     ax, 0Fh
                jz      short loc_AAE2
                push    dx
                mov     cx, ax
                mul     word ptr es:[bp+33h]
                xchg    ax, cx
                mul     word ptr es:[bp+31h]
                add     cx, dx
                pop     dx
                add     dx, ax
                adc     ds:607h, cx

loc_AAE2:                               ; CODE XREF: DOSCODE:AAB7↑j
                                        ; DOSCODE:AABE↑j ...
                mov     al, es:[bp+0]
                mov     bx, 0FFFFh
                lds     di, ds:1Eh
                mov     cx, ss:607h
                cmp     di, 0FFFFh
                jz      short loc_AB09
                cmp     dx, [di+6]
                jnz     short loc_AB09
                cmp     cx, [di+8]
                jnz     short loc_AB09
                cmp     al, [di+4]
                jnz     short loc_AB09
                jmp     loc_AC1B
; ---------------------------------------------------------------------------

loc_AB09:                               ; CODE XREF: DOSCODE:AAF5↑j
                                        ; DOSCODE:AAFA↑j ...
                lds     di, ss:6Dh
                mov     word ptr ss:1Eh, 0FFFFh
                mov     ss:117Eh, di

loc_AB1A:                               ; CODE XREF: DOSCODE:AB3B↓j
                cmp     dx, [di+6]
                jnz     short loc_AB2C
                cmp     cx, [di+8]
                jnz     short loc_AB2C
                cmp     al, [di+4]
                jnz     short loc_AB2C
                jmp     loc_ABD0
; ---------------------------------------------------------------------------

loc_AB2C:                               ; CODE XREF: DOSCODE:AB1D↑j
                                        ; DOSCODE:AB22↑j ...
                cmp     byte ptr [di+4], 0FFh
                jnz     short loc_AB34
                mov     bx, di

loc_AB34:                               ; CODE XREF: DOSCODE:AB30↑j
                mov     di, [di]
                cmp     di, ss:117Eh
                jnz     short loc_AB1A
                cmp     bx, 0FFFFh
                jz      short loc_AB46
                mov     di, bx
                jmp     short loc_AB59
; ---------------------------------------------------------------------------

loc_AB46:                               ; CODE XREF: DOSCODE:AB40↑j
                push    cx
                push    si
                push    dx
                push    bp
                push    es
                call    BUFWRITE
                pop     es
                pop     bp
                pop     dx
                pop     si
                pop     word ptr ss:607h
                jb      short loc_ABB6

loc_AB59:                               ; CODE XREF: DOSCODE:AB44↑j
                xor     ah, ah
                cmp     ss:594h, ah
                jnz     short loc_ABB8
                lea     bx, [di+18h]
                mov     cx, 1
                push    si
                push    di
                push    dx
                push    es
                cmp     byte ptr ss:79h, 0
                jz      short loc_AB7B
                push    ds
                push    bx
                lds     bx, ss:7Ah

loc_AB7B:                               ; CODE XREF: DOSCODE:AB72↑j
                or      si, si
                jz      short loc_AB86
                call    sub_7FAA
                mov     ah, 2
                jmp     short loc_AB8B
; ---------------------------------------------------------------------------

loc_AB86:                               ; CODE XREF: DOSCODE:AB7D↑j
                call    DREAD
                mov     ah, 0

loc_AB8B:                               ; CODE XREF: DOSCODE:AB84↑j
                mov     ch, 0
                mov     cl, ss:79h
                jcxz    short loc_ABB2
                mov     cx, es:[bp+2]
                mov     si, bx
                pop     di
                pop     es
                pushf
                shr     cx, 1
                cld
                cmp     byte ptr ss:6Ah, 0
                jz      short near ptr loc_ABAA+1
                shr     cx, 1

loc_ABAA:                               ; CODE XREF: DOSCODE:ABA6↑j
                rep movsd
                mov     dx, es
                mov     ds, dx
                popf

loc_ABB2:                               ; CODE XREF: DOSCODE:AB92↑j
                pop     es
                pop     dx
                pop     di
                pop     si

loc_ABB6:                               ; CODE XREF: DOSCODE:AB57↑j
                jb      short loc_AC26

loc_ABB8:                               ; CODE XREF: DOSCODE:AB60↑j
                mov     cx, ss:607h
                mov     al, es:[bp+0]
                mov     [di+6], dx
                mov     [di+0Fh], bp
                mov     word ptr [di+11h], es
                mov     [di+8], cx
                mov     [di+4], ax

loc_ABD0:                               ; CODE XREF: DOSCODE:AB29↑j
                mov     byte ptr [di+0Ah], 1
                xor     ax, ax
                mov     [di+0Dh], ax
                or      si, si
                jz      short loc_AC0B
                cmp     word ptr es:[bp+0Fh], 0
                jnz     short loc_AC00
                test    word ptr es:[bp+23h], 80h
                jnz     short loc_ABF3
                mov     al, es:[bp+8]
                mov     [di+0Ah], al

loc_ABF3:                               ; CODE XREF: DOSCODE:ABEA↑j
                mov     ax, es:[bp+33h]
                mov     [di+0Dh], ax
                mov     ax, es:[bp+31h]
                jmp     short loc_AC0B
; ---------------------------------------------------------------------------

loc_AC00:                               ; CODE XREF: DOSCODE:ABE2↑j
                mov     al, es:[bp+8]
                mov     [di+0Ah], al
                mov     ax, es:[bp+0Fh]

loc_AC0B:                               ; CODE XREF: DOSCODE:ABDB↑j
                                        ; DOSCODE:ABFE↑j
                mov     [di+0Bh], ax
                call    PLACEBUF
                mov     word ptr ss:20h, ds
                mov     ss:1Eh, di

loc_AC1B:                               ; CODE XREF: DOSCODE:AB06↑j
                mov     word ptr ss:5E4h, ds
                mov     ss:5E2h, di
                clc

loc_AC26:                               ; CODE XREF: DOSCODE:loc_ABB6↑j
                mov     ax, ss
                mov     ds, ax
; [00000001 BYTES: COLLAPSED FUNCTION nullsub_12. PRESS CTRL-NUMPAD+ TO EXPAND]

; =============== S U B R O U T I N E =======================================


FLUSHBUF        proc near               ; CODE XREF: DOSCODE:4F3F↑p
                                        ; DOSCODE:532E↑p ...
                cmp     al, 0FFh
                jnz     short loc_AC3B
                mov     bx, 1Ah

loc_AC32:                               ; CODE XREF: FLUSHBUF+E↓j
                and     byte ptr ss:[bx+1307h], 0F7h
                dec     bx
                jnz     short loc_AC32

loc_AC3B:                               ; CODE XREF: FLUSHBUF+2↑j
                call    GETCURHEAD
                test    byte ptr ss:DOS34_FLAG, 4
                jnz     short loc_AC4E
                cmp     ss:DirtyBufferCount, 0
                jz      short loc_AC71

loc_AC4E:                               ; CODE XREF: FLUSHBUF+19↑j
                                        ; FLUSHBUF+44↓j
                call    CHECKFLUSH
                mov     ah, [di+4]
                cmp     ss:322h, ah
                jz      short loc_AC63
                test    byte ptr ss:611h, 4
                jz      short loc_AC68

loc_AC63:                               ; CODE XREF: FLUSHBUF+2E↑j
                mov     word ptr [di+4], 0FFh

loc_AC68:                               ; CODE XREF: FLUSHBUF+36↑j
                mov     di, [di]
                cmp     di, ss:117Eh
                jnz     short loc_AC4E

loc_AC71:                               ; CODE XREF: FLUSHBUF+21↑j
                push    ss
                pop     ds
                cmp     byte ptr ds:34Ah, 0
                jz      short locret_AC7B
                stc

locret_AC7B:                            ; CODE XREF: FLUSHBUF+4D↑j
                retn
FLUSHBUF        endp


; =============== S U B R O U T I N E =======================================


CHECKFLUSH      proc near               ; CODE XREF: FLUSHBUF:loc_AC4E↑p
                                        ; DOSCODE:BBE3↓p
                                        ; DATA XREF: ...
                mov     ah, 0FFh
                cmp     [di+4], ah
                jz      short nullsub_12
                cmp     ah, al
                jz      short loc_AC99
                cmp     al, [di+4]
                clc
                jnz     short nullsub_12
                xor     bx, bx
                mov     bl, al
                test    byte ptr ss:[bx+1308h], 8
                jnz     short nullsub_12

loc_AC99:                               ; CODE XREF: CHECKFLUSH+9↑j
                test    byte ptr [di+5], 40h
                jz      short nullsub_12
                push    ax
                push    word ptr [di+4]
                call    BUFWRITE
                pop     ax
                jb      short loc_ACAF
                and     ah, 0BFh
                mov     [di+4], ax

loc_ACAF:                               ; CODE XREF: CHECKFLUSH+2B↑j
                pop     ax

locret_ACB0:                            ; CODE XREF: BUFWRITE+8↓j
                                        ; BUFWRITE+D↓j ...
                retn
CHECKFLUSH      endp


; =============== S U B R O U T I N E =======================================


BUFWRITE        proc near               ; CODE XREF: update_fat32_fsinfo+39↑p
                                        ; FAT_GOT_DPB+169↑p ...
                mov     ax, 0FFh
                xchg    ax, [di+4]
                cmp     al, 0FFh
                jz      short locret_ACB0
                test    ah, 40h
                jz      short locret_ACB0
                call    DEC_DIRTY_COUNT
                cmp     al, ss:322h
                jz      short locret_ACB0
                les     dx, [di+6]
                lea     bx, [di+18h]
                mov     cl, [di+0Ah]
                mov     ch, 0
                mov     word ptr ss:607h, es
                les     bp, [di+0Fh]
                mov     byte ptr ss:34Bh, 18h
                test    ah, 8
                jz      short loc_ACEE
                or      byte ptr ss:34Bh, 20h

loc_ACEE:                               ; CODE XREF: BUFWRITE+35↑j
                mov     si, [di+0Dh]
                mov     ax, [di+0Bh]
                push    di
                xor     di, di
                push    ds
                push    bx

loc_ACF9:                               ; CODE XREF: BUFWRITE+9D↓j
                push    si
                push    word ptr ss:607h
                push    di
                push    cx
                push    ax
                mov     cx, 1
                push    bx
                push    dx
                push    ds
                cmp     byte ptr ss:79h, 0
                jz      short loc_AD33
                push    cx
                push    es
                mov     si, bx
                mov     cx, es:[bp+2]
                les     di, ss:7Ah
                shr     cx, 1
                mov     bx, di
                cld
                cmp     byte ptr ss:6Ah, 0
                jz      short near ptr loc_AD2C+1
                shr     cx, 1

loc_AD2C:                               ; CODE XREF: BUFWRITE+77↑j
                rep movsd
                push    es
                pop     ds
                pop     es
                pop     cx

loc_AD33:                               ; CODE XREF: BUFWRITE+5D↑j
                call    DWRITE
                pop     ds
                pop     dx
                pop     bx
                pop     ax
                pop     cx
                pop     di
                pop     word ptr ss:607h
                pop     si
                jb      short loc_AD47
                mov     di, 1

loc_AD47:                               ; CODE XREF: BUFWRITE+91↑j
                add     dx, ax
                adc     ss:607h, si
                loop    loc_ACF9
                pop     bx
                pop     ds
                sub     di, 1
                pop     di
                retn
BUFWRITE        endp

; [00000001 BYTES: COLLAPSED FUNCTION null_sub. PRESS CTRL-NUMPAD+ TO EXPAND]

; =============== S U B R O U T I N E =======================================


sub_AD58        proc near               ; CODE XREF: DOS_RENAME+19F↑p
                                        ; DOS_RENAME+1D6↑p ...
                test    byte ptr es:[di+5], 40h
                jnz     short locret_AD69
                or      byte ptr es:[di+5], 40h
sub_AD58        endp


; =============== S U B R O U T I N E =======================================


sub_AD64        proc near               ; CODE XREF: DOS_DELETE+B6↑p
                                        ; DOSCODE:77D1↑p ...
                inc     word ptr ss:71h

locret_AD69:                            ; CODE XREF: sub_AD58+5↑j
                retn
sub_AD64        endp


; =============== S U B R O U T I N E =======================================


DEC_DIRTY_COUNT proc near               ; CODE XREF: DskWrtBufPurge+34↑p
                                        ; BUFWRITE+F↑p
                cmp     ss:DirtyBufferCount, 0
                jz      short ddcx
                dec     ss:DirtyBufferCount

ddcx:                                   ; CODE XREF: DEC_DIRTY_COUNT+6↑j
                retn
DEC_DIRTY_COUNT endp

; ---------------------------------------------------------------------------

$WAIT:                                  ; DATA XREF: DOSCODE:406C↑o
                xor     ax, ax
                xchg    ax, ss:exit_code
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

$EXEC:                                  ; DATA XREF: DOSCODE:4068↑o
                mov     ss:A20OFF_COUNT, 0
                cmp     al, 5
                jnz     short Exec_@f
                pop     cx
                mov     cx, offset LeaveDOS
                push    cx

Exec_@f:                                ; CODE XREF: DOSCODE:AD8A↑j
                push    bp
                mov     bp, sp
                sub     sp, 29
                cmp     al, 5
                jbe     short Exec_Check_2

Exec_Bad_Fun:                           ; CODE XREF: DOSCODE:ADAE↓j
                                        ; DOSCODE:ADB2↓j
                call    sub_51CA
                mov     al, 1

loc_ADA0:                               ; CODE XREF: DOSCODE:ADFB↓j
                                        ; DOSCODE:AEEC↓j
                mov     sp, bp
                pop     bp
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------

loc_ADA6:                               ; CODE XREF: DOSCODE:ADB6↓j
                call    sub_C697
                jmp     loc_B1C6
; ---------------------------------------------------------------------------

Exec_Check_2:                           ; CODE XREF: DOSCODE:AD99↑j
                cmp     al, 2
                jz      short Exec_Bad_Fun
                cmp     al, 4
                jz      short Exec_Bad_Fun
                cmp     al, 5
                jz      short loc_ADA6
                mov     [bp-4], bx
                mov     word ptr [bp-2], es
                mov     [bp-5], al
                mov     byte ptr [bp-6], 0
                mov     [bp-1Ah], dx
                mov     word ptr [bp-18h], ds
                mov     si, dx
                call    DStrLen
                mov     [bp-16h], cx
                mov     al, ss:302h
                mov     ss:84h, al
                mov     al, 0A0h
                push    bp
                or      byte ptr ss:86h, 1
                push    ds
                push    dx
                call    $OPEN
                pop     dx
                pop     ds
                jnb     short loc_ADF2
                xor     al, al
                call    $OPEN

loc_ADF2:                               ; CODE XREF: DOSCODE:ADEB↑j
                pushf
                and     byte ptr ss:86h, 0FEh
                popf
                pop     bp
                jb      short loc_ADA0
                mov     [bp-8], ax
                mov     bx, ax
                xor     al, al
                call    $IOCTL
                jb      short loc_AE10
                test    dl, 80h
                jz      short loc_AE18
                mov     al, 2

loc_AE10:                               ; CODE XREF: DOSCODE:AE07↑j
                jmp     loc_AEDC
; ---------------------------------------------------------------------------

loc_AE13:                               ; CODE XREF: DOSCODE:AE48↓j
                                        ; DOSCODE:AE4B↓j
                mov     al, 0Ah
                jmp     loc_AEDC
; ---------------------------------------------------------------------------

loc_AE18:                               ; CODE XREF: DOSCODE:AE0C↑j
                mov     word ptr [bp-12h], 0
                mov     word ptr [bp-0Eh], 0
                test    byte ptr [bp-5], 2
                jnz     short loc_AE7B
                lds     si, [bp-4]
                mov     ax, [si]
                or      ax, ax
                jnz     short loc_AE3D
                mov     ds, word ptr ss:330h
                mov     ax, ds:2Ch
                or      ax, ax
                jz      short loc_AE7B

loc_AE3D:                               ; CODE XREF: DOSCODE:AE2F↑j
                mov     es, ax
                xor     di, di
                mov     cx, 8000h
                xor     al, al

loc_AE46:                               ; CODE XREF: DOSCODE:AE4E↓j
                repne scasb
                jnz     short loc_AE13
                dec     cx
                js      short loc_AE13
                scasb
                jnz     short loc_AE46
                push    di
                lea     bx, [di+11h]
                add     bx, [bp-16h]
                mov     cl, 4
                shr     bx, cl
                push    es
                call    $ALLOC
                pop     ds
                pop     cx
                jnb     short loc_AE65
                jmp     short loc_AED6
; ---------------------------------------------------------------------------

loc_AE65:                               ; CODE XREF: DOSCODE:AE61↑j
                mov     es, ax
                mov     [bp-0Eh], ax
                xor     si, si
                mov     di, si
                rep movsb
                xchg    ax, cx
                inc     ax
                stosw
                lds     si, [bp-1Ah]
                mov     cx, [bp-16h]
                rep movsb

loc_AE7B:                               ; CODE XREF: DOSCODE:AE26↑j
                                        ; DOSCODE:AE3B↑j
                push    ss
                pop     ds
                mov     cx, 1Ah
                mov     dx, 0EC7h
                push    es
                push    ds
                call    ExecRead
                pop     ds
                pop     es
                jb      short loc_AEDA
                or      ax, ax
                jz      short loc_AEDA
                cmp     ax, 1Ah
                jnz     short loc_AEAE
                test    word ptr ds:0ED3h, 0FFFFh
                jnz     short loc_AEA1
                mov     byte ptr [bp-6], 0FFh

loc_AEA1:                               ; CODE XREF: DOSCODE:AE9B↑j
                mov     ax, ds:0EC7h
                cmp     ax, 5A4Dh
                jz      short loc_AEB1
                cmp     ax, 4D5Ah
                jz      short loc_AEB1

loc_AEAE:                               ; CODE XREF: DOSCODE:AE93↑j
                jmp     loc_B0A4
; ---------------------------------------------------------------------------

loc_AEB1:                               ; CODE XREF: DOSCODE:AEA7↑j
                                        ; DOSCODE:AEAC↑j
                mov     ax, ds:0ECBh
                mov     cl, 5
                shl     ax, cl
                sub     ax, ds:0ECFh
                mov     [bp-0Ch], ax
                test    byte ptr [bp-5], 2
                jz      short loc_AF0C
                les     di, [bp-4]
                push    es
                les     ax, es:[di]
                mov     [bp-14h], ax
                mov     word ptr [bp-0Ah], es
                pop     es
                jmp     loc_AFB8
; ---------------------------------------------------------------------------

loc_AED6:                               ; CODE XREF: DOSCODE:AE63↑j
                                        ; DOSCODE:AF00↓j ...
                mov     al, 8
                jmp     short loc_AEDC
; ---------------------------------------------------------------------------

loc_AEDA:                               ; CODE XREF: DOSCODE:AE8A↑j
                                        ; DOSCODE:AE8E↑j ...
                mov     al, 0Bh

loc_AEDC:                               ; CODE XREF: DOSCODE:loc_AE10↑j
                                        ; DOSCODE:AE15↑j ...
                mov     bx, [bp-8]
                call    Exec_Dealloc
                call    LCritDisk
                push    ax
                push    bp
                call    $CLOSE
                pop     bp
                pop     ax
                jmp     loc_ADA0
; ---------------------------------------------------------------------------

loc_AEEF:                               ; CODE XREF: DOSCODE:AF48↓j
                                        ; DOSCODE:AF4C↓j ...
                mov     al, ss:302h
                mov     bl, ss:84h
                mov     ss:302h, bl
                test    bl, 40h
                jnz     short loc_AED6
                test    al, 40h
                jz      short loc_AED6
                mov     ax, ss:8Ah
                jmp     short loc_AF34
; ---------------------------------------------------------------------------

loc_AF0C:                               ; CODE XREF: DOSCODE:AEC3↑j
                xor     bx, bx
                mov     [bp-1Dh], bl
                cmp     ds:0ED5h, bx
                jnz     short loc_AF28
                cmp     ds:0ED7h, bx
                jnz     short loc_AF28
                inc     byte ptr [bp-1Dh]
                cmp     ax, 0FF0h
                jnb     short loc_AF28
                add     ax, 10h

loc_AF28:                               ; CODE XREF: DOSCODE:AF15↑j
                                        ; DOSCODE:AF1B↑j ...
                test    byte ptr ds:302h, 80h
                jz      short loc_AF34
                or      byte ptr ds:302h, 40h

loc_AF34:                               ; CODE XREF: DOSCODE:AF0A↑j
                                        ; DOSCODE:AF2D↑j
                mov     ds:8Ah, ax
                mov     bx, 0FFFFh
                push    ds
                call    $ALLOC
                pop     ds
                mov     ax, ds:8Ah
                add     ax, 10h
                cmp     bx, 11h
                jb      short loc_AEEF
                cmp     ax, bx
                ja      short loc_AEEF
                test    byte ptr [bp-6], 0FFh
                jnz     short loc_AF6C
                add     ax, ds:0ED1h
                jb      short loc_AEEF
                cmp     ax, bx
                ja      short loc_AEEF
                sub     ax, ds:0ED1h
                add     ax, ds:0ED3h
                jb      short loc_AF6C
                cmp     ax, bx
                jbe     short loc_AF6E

loc_AF6C:                               ; CODE XREF: DOSCODE:AF52↑j
                                        ; DOSCODE:AF66↑j
                mov     ax, bx

loc_AF6E:                               ; CODE XREF: DOSCODE:AF6A↑j
                push    ds
                mov     bx, ax
                mov     [bp-10h], bx
                call    $ALLOC
                pop     ds
                jnb     short loc_AF7D
                jmp     loc_AEEF
; ---------------------------------------------------------------------------

loc_AF7D:                               ; CODE XREF: DOSCODE:AF78↑j
                mov     cl, ds:84h
                mov     ds:302h, cl
                cmp     byte ptr [bp-1Dh], 0
                jz      short loc_AF9D
                cmp     bx, 1000h
                jnb     short loc_AF9D
                mov     cl, 4
                shl     bx, cl
                sub     bx, 100h
                mov     ds:0ED7h, bx

loc_AF9D:                               ; CODE XREF: DOSCODE:AF89↑j
                                        ; DOSCODE:AF8F↑j
                mov     [bp-12h], ax
                add     ax, 10h
                test    byte ptr [bp-6], 0FFh
                jz      short loc_AFB2
                add     ax, [bp-10h]
                sub     ax, [bp-0Ch]
                sub     ax, 10h

loc_AFB2:                               ; CODE XREF: DOSCODE:AFA7↑j
                mov     [bp-0Ah], ax
                mov     [bp-14h], ax

loc_AFB8:                               ; CODE XREF: DOSCODE:AED3↑j
                mov     dx, [bp-14h]
                mov     [bp-1Ch], dx
                mov     dx, ds:0ECFh
                push    dx
                mov     cl, 4
                shl     dx, cl
                pop     ax
                mov     cl, 0Ch
                shr     ax, cl
                mov     cx, ax
                mov     bx, [bp-8]
                push    ds
                xor     al, al
                call    $LSEEK
                pop     ds
                jnb     short loc_AFDD
                jmp     loc_AEDC
; ---------------------------------------------------------------------------

loc_AFDD:                               ; CODE XREF: DOSCODE:AFD8↑j
                                        ; DOSCODE:B016↓j
                mov     bx, [bp-0Ch]
                cmp     bx, 1000h
                jb      short loc_AFE9
                mov     bx, 0FE0h

loc_AFE9:                               ; CODE XREF: DOSCODE:AFE4↑j
                sub     [bp-0Ch], bx
                push    bx
                mov     cl, 4
                shl     bx, cl
                mov     cx, bx
                push    ds
                mov     ds, word ptr [bp-14h]
                xor     dx, dx
                push    cx
                call    ExecRead
                pop     cx
                pop     ds
                jb      short loc_B049
                cmp     cx, ax
                pop     bx
                jz      short loc_B00E
                sub     cx, ax
                cmp     cx, 200h
                jnb     short loc_B049

loc_B00E:                               ; CODE XREF: DOSCODE:B004↑j
                add     [bp-14h], bx
                test    word ptr [bp-0Ch], 0FFFFh
                jnz     short loc_AFDD
                mov     cx, [bp-0Ah]
                mov     ax, ds:0ED5h
                add     ax, cx
                mov     ds:0EC1h, ax
                mov     ax, ds:0ED7h
                mov     ds:0EBFh, ax
                les     ax, ds:0EDBh
                mov     ds:0EC3h, ax
                mov     ax, es
                add     ax, cx
                mov     ds:0EC5h, ax
                xor     cx, cx
                mov     dx, ds:0EDFh
                mov     bx, [bp-8]
                push    ds
                xor     ax, ax
                call    $LSEEK
                pop     ds
                jnb     short loc_B04C

loc_B049:                               ; CODE XREF: DOSCODE:AFFF↑j
                                        ; DOSCODE:B00C↑j ...
                jmp     loc_AEDA
; ---------------------------------------------------------------------------

loc_B04C:                               ; CODE XREF: DOSCODE:B047↑j
                mov     dx, ds:0ECDh

loc_B050:                               ; CODE XREF: DOSCODE:B080↓j
                push    dx
                mov     dx, 3BEh
                mov     cx, 18Ch
                push    ds
                call    ExecRead
                pop     es
                pop     dx
                jb      short loc_B049
                mov     cx, 63h ; 'c'
                mov     di, 3BEh
                mov     si, [bp-0Ah]

loc_B068:                               ; CODE XREF: DOSCODE:B07C↓j
                or      dx, dx
                jz      short loc_B082
                lds     bx, es:[di]
                mov     ax, ds
                add     ax, [bp-1Ch]
                mov     ds, ax
                add     [bx], si
                add     di, 4
                dec     dx
                loop    loc_B068
                push    es
                pop     ds
                jmp     short loc_B050
; ---------------------------------------------------------------------------

loc_B082:                               ; CODE XREF: DOSCODE:B06A↑j
                push    es
                push    ax
                push    cx
                mov     es, word ptr [bp-1Ch]
                mov     ax, ss:0EC5h
                mov     cx, ss:0EC3h
                call    word ptr ss:0D67h
                call    word ptr ss:133Eh
                pop     cx
                pop     ax
                pop     es
                jmp     loc_B17E
; ---------------------------------------------------------------------------

loc_B0A1:                               ; CODE XREF: DOSCODE:B0C7↓j
                                        ; DOSCODE:B0CB↓j
                jmp     loc_AED6
; ---------------------------------------------------------------------------

loc_B0A4:                               ; CODE XREF: DOSCODE:loc_AEAE↑j
                test    byte ptr [bp-5], 2
                jz      short loc_B0D7
                lds     si, [bp-4]
                lodsw
                mov     [bp-14h], ax
                mov     ax, 0FFFFh
                jmp     short loc_B119
; ---------------------------------------------------------------------------

loc_B0B6:                               ; CODE XREF: DOSCODE:B0ED↓j
                                        ; DOSCODE:B111↓j ...
                mov     al, ss:302h
                mov     bl, ss:84h
                mov     ss:302h, bl
                test    bl, 40h
                jnz     short loc_B0A1
                test    al, 40h
                jz      short loc_B0A1
                mov     ax, [bp-12h]
                xor     bx, bx
                call    sub_B34B
                jmp     short loc_B0E5
; ---------------------------------------------------------------------------

loc_B0D7:                               ; CODE XREF: DOSCODE:B0A8↑j
                test    byte ptr ss:302h, 80h
                jz      short loc_B0E5
                or      byte ptr ss:302h, 40h

loc_B0E5:                               ; CODE XREF: DOSCODE:B0D5↑j
                                        ; DOSCODE:B0DD↑j
                mov     bx, 0FFFFh
                call    $ALLOC
                or      bx, bx
                jz      short loc_B0B6
                mov     [bp-10h], bx
                push    bx
                call    $ALLOC
                pop     bx
                mov     [bp-12h], ax
                add     ax, 10h
                mov     [bp-14h], ax
                xor     ax, ax
                cmp     bx, 1000h
                jnb     short loc_B116
                mov     ax, bx
                mov     cl, 4
                shl     ax, cl
                cmp     ax, 200h
                jbe     short loc_B0B6
                sub     ax, 100h

loc_B116:                               ; CODE XREF: DOSCODE:B106↑j
                sub     ax, 100h

loc_B119:                               ; CODE XREF: DOSCODE:B0B4↑j
                push    ax
                mov     bx, [bp-8]
                xor     cx, cx
                xor     ax, ax
                cwd
                call    $LSEEK
                pop     cx
                mov     ds, word ptr [bp-14h]
                xor     dx, dx
                push    cx
                call    ExecRead
                pop     si
                jnb     short loc_B135
                jmp     loc_AEDA
; ---------------------------------------------------------------------------

loc_B135:                               ; CODE XREF: DOSCODE:B130↑j
                cmp     ax, si
                jnz     short loc_B13C
                jmp     loc_B0B6
; ---------------------------------------------------------------------------

loc_B13C:                               ; CODE XREF: DOSCODE:B137↑j
                mov     bl, ss:84h
                mov     ss:302h, bl
                test    byte ptr [bp-5], 2
                jnz     short loc_B17E
                mov     ax, [bp-14h]
                sub     ax, 10h
                mov     ss:0EC5h, ax
                mov     word ptr ss:0EC3h, 100h
                add     si, 0FEh
                cmp     si, 0FFFEh
                jz      short loc_B16A
                add     si, 100h

loc_B16A:                               ; CODE XREF: DOSCODE:B164↑j
                mov     ss:0EBFh, si
                mov     ss:0EC1h, ax
                mov     ds, ax
                mov     word ptr [si], 0
                call    word ptr ss:61h

loc_B17E:                               ; CODE XREF: DOSCODE:B09E↑j
                                        ; DOSCODE:B14A↑j
                mov     bx, [bp-8]
                call    Exec_Dealloc
                push    bp
                call    $CLOSE
                pop     bp
                call    Exec_Alloc
                test    byte ptr [bp-5], 2
                jz      short loc_B1CC
                call    sub_B359
                call    sub_B370
                cmp     byte ptr ss:1322h, 0
                jz      short loc_B1C6
                push    si
                push    es
                les     si, ss:1323h
                cmp     byte ptr es:[si], 0
                jz      short loc_B1BE
                mov     es, word ptr ss:330h
                push    word ptr ss:0EBBh
                pop     word ptr es:40h
                jmp     short loc_B1C4
; ---------------------------------------------------------------------------

loc_B1BE:                               ; CODE XREF: DOSCODE:B1AB↑j
                mov     byte ptr ss:1322h, 0

loc_B1C4:                               ; CODE XREF: DOSCODE:B1BC↑j
                pop     es
                pop     si

loc_B1C6:                               ; CODE XREF: DOSCODE:ADA9↑j
                                        ; DOSCODE:B19E↑j
                mov     sp, bp
                pop     bp
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

loc_B1CC:                               ; CODE XREF: DOSCODE:B190↑j
                mov     dx, [bp-12h]
                mov     si, 1
                mov     ax, [bp-0Eh]
                or      ax, ax
                jz      short loc_B1DE
                dec     ax
                mov     ds, ax
                mov     [si], dx

loc_B1DE:                               ; CODE XREF: DOSCODE:B1D7↑j
                mov     ax, [bp-12h]
                dec     ax
                mov     ds, ax
                mov     [si], dx
                push    ds
                pop     es
                mov     di, 8
                call    sub_B359
                push    cx
                push    si

loc_B1F0:                               ; CODE XREF: DOSCODE:B1FB↓j
                lodsb
                cmp     al, 2Eh ; '.'
                jz      short loc_B1FD
                stosb
                cmp     di, 10h
                jnb     short loc_B1FD
                loop    loc_B1F0

loc_B1FD:                               ; CODE XREF: DOSCODE:B1F3↑j
                                        ; DOSCODE:B1F9↑j
                xor     al, al
                cmp     di, 10h
                jnb     short loc_B205
                stosb

loc_B205:                               ; CODE XREF: DOSCODE:B202↑j
                pop     si
                pop     cx
                call    sub_B370
                push    dx
                mov     si, [bp-10h]
                add     si, dx
                call    $DUP_PDB
                pop     dx
                push    word ptr [bp-0Eh]
                pop     word ptr es:2Ch
                push    ss:SPECIAL_VERSION
                pop     word ptr es:40h
                lds     si, [bp-4]
                push    ds
                push    si
                lds     si, [si+6]
                mov     cx, 0Ch
                push    cx
                mov     di, 5Ch ; '\'
                mov     bl, [si]
                rep movsb
                xchg    ax, cx
                stosw
                stosw
                pop     cx
                pop     si
                pop     ds
                push    ds
                push    si
                lds     si, [si+0Ah]
                mov     bh, [si]
                rep movsb
                stosw
                stosw
                pop     si
                pop     ds
                lds     si, [si+2]
                or      cl, 80h
                mov     di, cx
                rep movsb
                dec     cl
                mov     al, bh
                xor     bh, bh
                call    GetVisDrv
                jnb     short Exec_BL
                mov     bh, cl

Exec_BL:                                ; CODE XREF: DOSCODE:B25F↑j
                mov     al, bl
                xor     bl, bl
                call    GetVisDrv
                jnb     short Exec_Set_Return
                mov     bl, cl

Exec_Set_Return:                        ; CODE XREF: DOSCODE:B26A↑j
                call    Get_User_Stack
                lds     ax, [si+12h]
                push    ds
                push    ax
                mov     es:0Ah, ax
                mov     word ptr es:0Ch, ds
                xor     ax, ax
                mov     ds, ax
                assume ds:DOSCODE
                pop     UNPACK_OFFSET+1
                pop     word_8A
                mov     word ptr ss:DMAADD, 80h
                mov     ds, ss:CurrentPDB
                assume ds:nothing
                mov     word ptr ss:DMAADD+2, ds
                test    byte ptr [bp-5], 1
                jz      short exec_go
                lds     si, ss:exec_init_SP
                les     di, [bp-4]
                mov     word ptr es:[di+10h], ds
                dec     si
                dec     si
                mov     [si], bx
                mov     es:[di+0Eh], si
                lds     ax, ss:exec_init_IP
                mov     word ptr es:[di+14h], ds
                mov     es:[di+12h], ax
                mov     sp, bp
                pop     bp
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

exec_go:                                ; CODE XREF: DOSCODE:B2A0↑j
                lds     si, ss:exec_init_IP
                les     di, ss:exec_init_SP
                mov     ax, es
                cmp     ss:DosHasHMA, 0
                jz      short Xfer_To_User
                push    ds
                mov     ds, cs:DosDSeg
                or      ds:DOS_FLAG, 4
                mov     ds:A20OFF_PSP, dx
                mov     ax, ds
                pop     ds
                push    ax
                mov     ax, offset disa20_xfer
                push    ax
                mov     ax, es
                retf
; ---------------------------------------------------------------------------

Xfer_To_User:                           ; CODE XREF: DOSCODE:B2DB↑j
                cli
                mov     ss:INDOS, 0
                mov     ss:INDOS_FLAG, 0
                mov     ss, ax
                mov     sp, di
                sti
                push    ds
                push    si
                mov     es, dx
                mov     ds, dx
                mov     ax, bx
                retf

; =============== S U B R O U T I N E =======================================


ExecRead        proc near               ; CODE XREF: DOSCODE:AE85↑p
                                        ; DOSCODE:AFFA↑p ...
                call    Exec_Dealloc
                mov     bx, [bp-8]
                push    bp
                call    $READ
                pop     bp
                call    Exec_Alloc
                retn
ExecRead        endp


; =============== S U B R O U T I N E =======================================


Exec_Dealloc    proc near               ; CODE XREF: DOSCODE:AEDF↑p
                                        ; DOSCODE:B181↑p ...
                push    bx
                sub     bx, bx
                call    ECritDisk
                call    sub_B33A
                pop     bx
                retn
Exec_Dealloc    endp


; =============== S U B R O U T I N E =======================================


Exec_Alloc      proc near               ; CODE XREF: DOSCODE:B189↑p
                                        ; ExecRead+B↑p
                push    bx
                mov     bx, ss:330h
                call    sub_B33A
                call    LCritDisk
                pop     bx
                retn
Exec_Alloc      endp


; =============== S U B R O U T I N E =======================================


sub_B33A        proc near               ; CODE XREF: Exec_Dealloc+6↑p
                                        ; Exec_Alloc+6↑p
                pushf
                push    ax
                mov     ax, [bp-0Eh]
                call    sub_B34B
                mov     ax, [bp-12h]
                call    sub_B34B
                pop     ax
                popf

locret_B34A:                            ; CODE XREF: sub_B34B+2↓j
                retn
sub_B33A        endp


; =============== S U B R O U T I N E =======================================


sub_B34B        proc near               ; CODE XREF: DOSCODE:B0D2↑p
                                        ; sub_B33A+5↑p ...
                or      ax, ax
                jz      short locret_B34A
                dec     ax
                push    ds
                mov     ds, ax
                mov     ds:1, bx
                pop     ds
                retn
sub_B34B        endp


; =============== S U B R O U T I N E =======================================


sub_B359        proc near               ; CODE XREF: DOSCODE:B192↑p
                                        ; DOSCODE:B1EB↑p
                lds     si, [bp-1Ah]
sub_B359        endp


; =============== S U B R O U T I N E =======================================


sub_B35C        proc near               ; CODE XREF: sub_B35C+5↓j
                                        ; sub_B35C+9↓j ...
                mov     cx, si

loc_B35E:                               ; CODE XREF: sub_B35C+D↓j
                lodsb
                cmp     al, 3Ah ; ':'
                jz      short sub_B35C
                cmp     al, 5Ch ; '\'
                jz      short sub_B35C
                cmp     al, 0
                jnz     short loc_B35E
                sub     si, cx
                xchg    si, cx
                retn
sub_B35C        endp


; =============== S U B R O U T I N E =======================================


sub_B370        proc near               ; CODE XREF: DOSCODE:B195↑p
                                        ; DOSCODE:B207↑p ...
                dec     cx
                mov     word ptr ss:0EBBh, 0A07h
                les     di, ss:5Dh
                mov     ax, es
                or      ax, di
                jz      short locret_B3AA

loc_B383:                               ; CODE XREF: sub_B370+4A↓j
                mov     al, es:[di]
                or      al, al
                jz      short locret_B3AA
                mov     ss:60Eh, di
                cmp     al, cl
                jnz     short loc_B3AE
                inc     di
                push    cx
                push    si
                push    ax

loc_B397:                               ; CODE XREF: sub_B370+2E↓j
                lodsb
                call    UCase
                scasb
                jnz     short loc_B3AB
                loop    loc_B397
                mov     ax, es:[di]
                mov     ss:0EBBh, ax
                pop     ax
                pop     si
                pop     cx

locret_B3AA:                            ; CODE XREF: sub_B370+11↑j
                                        ; sub_B370+18↑j
                retn
; ---------------------------------------------------------------------------

loc_B3AB:                               ; CODE XREF: sub_B370+2C↑j
                pop     ax
                pop     si
                pop     cx

loc_B3AE:                               ; CODE XREF: sub_B370+21↑j
                mov     di, ss:60Eh
                xor     ah, ah
                add     di, ax
                add     di, 3
                jmp     short loc_B383
sub_B370        endp

; ---------------------------------------------------------------------------

$KEEP_PROCESS:                          ; DATA XREF: DOSCODE:4034↑o
                push    ax
                mov     byte ptr ss:EXIT_TYPE, 3
                mov     es, ss:CurrentPDB
                cmp     dx, 6
                jnb     short Keep_Shrink
                mov     dx, 6

Keep_Shrink:                            ; CODE XREF: DOSCODE:B3CB↑j
                mov     bx, dx
                push    bx
                push    es
                call    $SETBLOCK
                pop     ds
                pop     bx
                jb      short Keep_Done
                mov     ax, ds
                add     ax, bx
                mov     ds:2, ax

Keep_Done:                              ; CODE XREF: DOSCODE:B3D9↑j
                pop     ax
                jmp     short exit_inner
; ---------------------------------------------------------------------------

stay_resident:                          ; CODE XREF: DOSDATA:sr_cont↑J
                                        ; DATA XREF: DOSDATA:DOSINTTABLE_20↑o ...
                mov     ax, 3100h
                add     dx, 0Fh
                rcr     dx, 1
                mov     cl, 3
                shr     dx, cl
                jmp     COMMAND
; ---------------------------------------------------------------------------

$EXIT:                                  ; DATA XREF: DOSCODE:406A↑o
                xor     ah, ah
                xchg    ah, ss:DidCTRLC
                or      ah, ah
                mov     byte ptr ss:EXIT_TYPE, 0
                jz      short exit_inner
                mov     byte ptr ss:EXIT_TYPE, 1
; START OF FUNCTION CHUNK FOR sub_A242

exit_inner:                             ; CODE XREF: sub_A242+FE↑j
                                        ; DOSCODE:B3E3↑j ...
                call    Get_User_Stack
                push    ss:CurrentPDB
                pop     word ptr [si+14h]
                jmp     short abort_inner
; END OF FUNCTION CHUNK FOR sub_A242
; ---------------------------------------------------------------------------

$ABORT:                                 ; DATA XREF: DOSCODE:DISPATCH↑o
                xor     al, al
                mov     byte ptr ss:57Ch, 0
; START OF FUNCTION CHUNK FOR sub_A242

abort_inner:                            ; CODE XREF: sub_A242+11D4↑j
                mov     ah, ss:57Ch
                mov     ss:334h, ax
                call    Get_User_Stack
                mov     ds, word ptr [si+14h]
                xor     ax, ax
                mov     es, ax
                assume es:DOSCODE
                mov     si, 0Ah
                mov     di, 88h
                movsw
                movsw
                movsw
                movsw
                movsw
                movsw
                jmp     loc_A343
; END OF FUNCTION CHUNK FOR sub_A242
; ---------------------------------------------------------------------------

RetExePatch:                            ; DATA XREF: DOSCODE:CD6D↓o
                                        ; DOSCODE:CD83↓o
                retn

; =============== S U B R O U T I N E =======================================


sub_B443        proc near               ; CODE XREF: $ALLOC+13↓p
                                        ; $ALLOC:loc_B4F7↓p ...
                test    byte ptr ss:89h, 1
                retn
sub_B443        endp


; =============== S U B R O U T I N E =======================================


sub_B44A        proc near               ; CODE XREF: sub_A242+134↑p
                mov     ax, ss:arena_head

loc_B44E:                               ; CODE XREF: sub_B44A+2F↓j
                mov     di, 0
                call    check_signature

loc_B454:                               ; CODE XREF: sub_B44A+20↓j
                jb      short check_signature_ok
                push    es
                pop     ds
                assume ds:DOSCODE
                cmp     word ptr byte_0+1, bx
                jnz     short loc_B462
                mov     word ptr byte_0+1, di

loc_B462:                               ; CODE XREF: sub_B44A+12↑j
                cmp     byte ptr [di], 5Ah ; 'Z'
                jz      short loc_B46C
                call    sub_B47C
                jmp     short loc_B454
; ---------------------------------------------------------------------------

loc_B46C:                               ; CODE XREF: sub_B44A+1B↑j
                mov     ax, ss:8Ch
                cmp     ax, 0FFFFh
                jz      short check_signature_ok
                mov     di, ds
                cmp     di, ax
                jb      short loc_B44E
                retn
sub_B44A        endp


; =============== S U B R O U T I N E =======================================


sub_B47C        proc near               ; CODE XREF: sub_B44A+1D↑p
                                        ; sub_B493+5↓p ...
                mov     ax, ds
                add     ax, word ptr byte_0+3
                inc     ax
sub_B47C        endp


; =============== S U B R O U T I N E =======================================


check_signature proc near               ; CODE XREF: sub_B44A+7↑p
                                        ; $ALLOC+35↓p ...
                mov     es, ax
                assume es:nothing
                cmp     byte ptr es:[di], 4Dh ; 'M'
                jz      short check_signature_ok
                cmp     byte ptr es:[di], 5Ah ; 'Z'
                jz      short check_signature_ok
                stc

check_signature_ok:                     ; CODE XREF: sub_B44A:loc_B454↑j
                                        ; sub_B44A+29↑j ...
                retn
check_signature endp


; =============== S U B R O U T I N E =======================================


sub_B493        proc near               ; CODE XREF: sub_B493+20↓j
                                        ; $ALLOC:loc_B55D↓p ...
                cmp     byte ptr [di], 5Ah ; 'Z'
                jz      short check_signature_ok
                call    sub_B47C
                jb      short check_signature_ok
                cmp     es:1, di
                jnz     short check_signature_ok
                mov     cx, es:3
                inc     cx
                add     word ptr byte_0+3, cx
                mov     cl, es:[di]
                mov     [di], cl
                jmp     short sub_B493
sub_B493        endp


; =============== S U B R O U T I N E =======================================


$ALLOC          proc near               ; CODE XREF: DOSCODE:AE5C↑p
                                        ; DOSCODE:AF3B↑p ...

; FUNCTION CHUNK AT B52B SIZE 00000024 BYTES
; FUNCTION CHUNK AT B54F SIZE 0000000E BYTES
; FUNCTION CHUNK AT B55D SIZE 00000076 BYTES
; FUNCTION CHUNK AT B5D3 SIZE 0000003A BYTES

                call    ECritDisk
                mov     ax, ss:arena_head
                test    ss:AllocMethod, 0C0h
                mov     ss:START_ARENA, ax
                jz      short loc_B4D5
                call    sub_B443
                jz      short loc_B4D5
                mov     ax, ss:UMB_HEAD
                mov     ss:START_ARENA, ax

loc_B4D5:                               ; CODE XREF: $ALLOC+11↑j
                                        ; $ALLOC+16↑j
                xor     ax, ax
                mov     di, ax
                mov     ss:FirstArena, ax
                mov     ss:BestArena, ax
                mov     ss:LastArena, ax
                push    ax

loc_B4E6:                               ; CODE XREF: $ALLOC+98↓j
                mov     ax, ss:START_ARENA
                call    check_signature
                jb      short loc_B522

loc_B4EF:                               ; CODE XREF: $ALLOC+6B↓j
                push    es
                pop     ds
                assume ds:nothing
                cmp     ds:1, di
                jz      short loc_B55D

loc_B4F7:                               ; CODE XREF: $ALLOC+BB↓j
                                        ; $ALLOC+EA↓j
                call    sub_B443
                jz      short loc_B518
                test    byte ptr ss:302h, 80h
                jz      short loc_B518
                mov     ax, ss:8Eh
                cmp     ax, ss:24h
                jnz     short loc_B518
                mov     ax, ds
                cmp     ax, ss:8Ch
                jmp     short loc_B51B
; ---------------------------------------------------------------------------

loc_B518:                               ; CODE XREF: $ALLOC+45↑j
                                        ; $ALLOC+4D↑j ...
                cmp     byte ptr [di], 5Ah ; 'Z'

loc_B51B:                               ; CODE XREF: $ALLOC+61↑j
                jz      short loc_B52B
                call    sub_B47C
                jnb     short loc_B4EF

loc_B522:                               ; CODE XREF: $ALLOC+38↑j
                                        ; $ALLOC+AB↓j
                pop     ax
$ALLOC          endp

; START OF FUNCTION CHUNK FOR $SETBLOCK

loc_B523:                               ; CODE XREF: $SETBLOCK:loc_B61B↓j
                call    LCritDisk

loc_B526:                               ; CODE XREF: sub_B6D9+3E↓j
                mov     al, 7

loc_B528:                               ; CODE XREF: $SETBLOCK-B2↓j
                jmp     SYS_RET_ERR
; END OF FUNCTION CHUNK FOR $SETBLOCK
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR $ALLOC

loc_B52B:                               ; CODE XREF: $ALLOC:loc_B51B↑j
                cmp     word ptr ss:340h, 0
                jz      short loc_B536
                jmp     loc_B5BA
; ---------------------------------------------------------------------------

loc_B536:                               ; CODE XREF: $ALLOC+7C↑j
                mov     ax, ss:24h
                cmp     ax, ss:8Eh
                jz      short loc_B54F
                test    byte ptr ss:302h, 40h
                jnz     short loc_B54F
                mov     ss:8Eh, ax
                jmp     short loc_B4E6
; END OF FUNCTION CHUNK FOR $ALLOC
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR $SETBLOCK
;   ADDITIONAL PARENT FUNCTION $ALLOC

loc_B54F:                               ; CODE XREF: $ALLOC+8A↑j
                                        ; $ALLOC+92↑j ...
                call    Get_User_Stack
                pop     bx
                mov     [si+2], bx
                call    LCritDisk
                mov     al, 8
                jmp     short loc_B528
; END OF FUNCTION CHUNK FOR $SETBLOCK
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR $ALLOC

loc_B55D:                               ; CODE XREF: $ALLOC+40↑j
                call    sub_B493
                jb      short loc_B522
                mov     cx, ds:3
                pop     dx
                cmp     cx, dx
                jbe     short loc_B56D
                mov     dx, cx

loc_B56D:                               ; CODE XREF: $ALLOC+B4↑j
                push    dx
                cmp     bx, cx
                ja      short loc_B4F7
                cmp     word ptr ss:340h, 0
                jnz     short loc_B57F
                mov     word ptr ss:340h, ds

loc_B57F:                               ; CODE XREF: $ALLOC+C3↑j
                cmp     word ptr ss:342h, 0
                jz      short loc_B595
                push    es
                mov     es, word ptr ss:342h
                cmp     es:3, cx
                pop     es
                jbe     short loc_B59A

loc_B595:                               ; CODE XREF: $ALLOC+D0↑j
                mov     word ptr ss:342h, ds

loc_B59A:                               ; CODE XREF: $ALLOC+DE↑j
                mov     word ptr ss:344h, ds
                jmp     loc_B4F7
; ---------------------------------------------------------------------------

loc_B5A2:                               ; CODE XREF: $ALLOC+110↓j
                mov     ds, word ptr ss:344h
                mov     cx, ds:3
                sub     cx, bx
                mov     dx, ds
                jz      short loc_B5FA
                add     dx, cx
                mov     es, dx
                dec     cx
                xchg    bx, cx
                jmp     short loc_B5E5
; ---------------------------------------------------------------------------

loc_B5BA:                               ; CODE XREF: $ALLOC+7E↑j
                mov     cl, ss:302h
                and     cl, 3Fh
                cmp     cl, 1
                ja      short loc_B5A2
                mov     ds, word ptr ss:340h
                jb      short loc_B5D3
                mov     ds, word ptr ss:342h
; END OF FUNCTION CHUNK FOR $ALLOC
; START OF FUNCTION CHUNK FOR $SETBLOCK
;   ADDITIONAL PARENT FUNCTION $ALLOC

loc_B5D3:                               ; CODE XREF: $ALLOC+117↑j
                                        ; $SETBLOCK+1F↓j
                mov     cx, ds:3
                mov     ax, ds
                sub     cx, bx
                mov     dx, ax
                jz      short loc_B5FA
                add     ax, bx
                inc     ax
                mov     es, ax
                dec     cx

loc_B5E5:                               ; CODE XREF: $ALLOC+103↑j
                mov     ds:3, bx
                mov     bl, 4Dh ; 'M'
                mov     es:3, cx
                xchg    bl, [di]
                mov     es:1, di
                mov     es:[di], bl

loc_B5FA:                               ; CODE XREF: $ALLOC+FA↑j
                                        ; $SETBLOCK-30↑j
                mov     ds, dx
                mov     ax, ss:330h
                mov     ds:1, ax
                mov     ax, ds
                inc     ax
                pop     bx
                call    LCritDisk

loc_B60A:                               ; CODE XREF: $DEALLOC:loc_B65C↓j
                jmp     SYS_RET_OK
; END OF FUNCTION CHUNK FOR $SETBLOCK

; =============== S U B R O U T I N E =======================================


$SETBLOCK       proc near               ; CODE XREF: DOSCODE:B3D4↑p
                                        ; DATA XREF: DOSCODE:4066↑o

; FUNCTION CHUNK AT B523 SIZE 00000008 BYTES
; FUNCTION CHUNK AT B54F SIZE 0000000E BYTES
; FUNCTION CHUNK AT B5D3 SIZE 0000003A BYTES

                call    ECritDisk
                mov     di, 0
                mov     ax, es
                dec     ax
                call    check_signature
                jnb     short loc_B61E

loc_B61B:                               ; CODE XREF: $SETBLOCK+16↓j
                jmp     loc_B523
; ---------------------------------------------------------------------------

loc_B61E:                               ; CODE XREF: $SETBLOCK+C↑j
                mov     ds, ax
                call    sub_B493
                jb      short loc_B61B
                mov     cx, ds:3
                push    cx
                cmp     bx, cx
                jbe     short loc_B5D3
                jmp     loc_B54F
$SETBLOCK       endp


; =============== S U B R O U T I N E =======================================


$DEALLOC        proc near               ; CODE XREF: DOSCODE:BA00↓p
                                        ; DATA XREF: DOSCODE:4064↑o
                call    ECritDisk
                test    ss:DOS_FLAG, 4
                jz      short loc_B649
                cmp     ss:A20OFF_COUNT, 0
                jnz     short loc_B649
                inc     ss:A20OFF_COUNT

loc_B649:                               ; CODE XREF: $DEALLOC+9↑j
                                        ; $DEALLOC+11↑j
                mov     di, 0
                mov     ax, es
                dec     ax
                call    check_signature
                jb      short loc_B65E
                mov     es:1, di
                call    LCritDisk

loc_B65C:                               ; CODE XREF: DOSCODE:loc_B683↓j
                jmp     short loc_B60A
; ---------------------------------------------------------------------------

loc_B65E:                               ; CODE XREF: $DEALLOC+21↑j
                call    LCritDisk
                mov     al, 9

loc_B663:                               ; CODE XREF: DOSCODE:B67B↓j
                jmp     SYS_RET_ERR
$DEALLOC        endp

; ---------------------------------------------------------------------------

$ALLOCOPER:                             ; DATA XREF: DOSCODE:4082↑o
                or      al, al
                jz      short loc_B67D
                cmp     al, 1
                jz      short loc_B685
                cmp     al, 2
                jz      short loc_B696
                cmp     al, 3
                jz      short loc_B69E

loc_B676:                               ; CODE XREF: DOSCODE:B68D↓j
                                        ; DOSCODE:B6A4↓j ...
                call    sub_51DD
                mov     al, 1
                jmp     short loc_B663
; ---------------------------------------------------------------------------

loc_B67D:                               ; CODE XREF: DOSCODE:B668↑j
                mov     al, ss:AllocMethod
                xor     ah, ah

loc_B683:                               ; CODE XREF: DOSCODE:B694↓j
                                        ; DOSCODE:B69C↓j ...
                jmp     short loc_B65C
; ---------------------------------------------------------------------------

loc_B685:                               ; CODE XREF: DOSCODE:B66C↑j
                push    bx
                and     bl, 3Fh
                cmp     bx, 2
                pop     bx
                ja      short loc_B676
                mov     ss:302h, bl
                jmp     short loc_B683
; ---------------------------------------------------------------------------

loc_B696:                               ; CODE XREF: DOSCODE:B670↑j
                mov     al, ss:89h
                and     al, 1
                jmp     short loc_B683
; ---------------------------------------------------------------------------

loc_B69E:                               ; CODE XREF: DOSCODE:B674↑j
                mov     cx, ss:8Ch
                inc     cx
                jz      short loc_B676
                dec     cx
                dec     bx
                jz      short loc_B6C4
                inc     bx
                jz      short loc_B6AF
                jmp     short loc_B676
; ---------------------------------------------------------------------------

loc_B6AF:                               ; CODE XREF: DOSCODE:B6AB↑j
                call    sub_B443
                jz      short loc_B6C2
                call    sub_B6D9
                mov     byte ptr ds:0, 5Ah ; 'Z'
                and     byte ptr ss:89h, 0FEh

loc_B6C2:                               ; CODE XREF: DOSCODE:B6B2↑j
                jmp     short loc_B683
; ---------------------------------------------------------------------------

loc_B6C4:                               ; CODE XREF: DOSCODE:B6A8↑j
                call    sub_B443
                jnz     short loc_B6D7
                call    sub_B6D9
                mov     byte ptr ds:0, 4Dh ; 'M'
                or      byte ptr ss:89h, 1

loc_B6D7:                               ; CODE XREF: DOSCODE:B6C7↑j
                jmp     short loc_B683

; =============== S U B R O U T I N E =======================================


sub_B6D9        proc near               ; CODE XREF: DOSCODE:B6B4↑p
                                        ; DOSCODE:B6C9↑p
                push    ax
                mov     ax, ss:24h
                mov     es, ax
                xor     di, di
                cmp     byte ptr es:[di], 5Ah ; 'Z'
                jz      short loc_B6FE

loc_B6E8:                               ; CODE XREF: sub_B6D9:loc_B6FC↓j
                mov     ds, ax
                call    sub_B47C
                jb      short loc_B711
                call    sub_B443
                jnz     short loc_B6FA
                cmp     byte ptr es:[di], 5Ah ; 'Z'
                jmp     short loc_B6FC
; ---------------------------------------------------------------------------

loc_B6FA:                               ; CODE XREF: sub_B6D9+19↑j
                cmp     ax, cx

loc_B6FC:                               ; CODE XREF: sub_B6D9+1F↑j
                jnz     short loc_B6E8

loc_B6FE:                               ; CODE XREF: sub_B6D9+D↑j
                call    sub_B443
                jnz     short loc_B70E
                mov     ds, ax
                call    sub_B47C
                jb      short loc_B711
                cmp     ax, cx
                jnz     short loc_B711

loc_B70E:                               ; CODE XREF: sub_B6D9+28↑j
                clc
                pop     ax
                retn
; ---------------------------------------------------------------------------

loc_B711:                               ; CODE XREF: sub_B6D9+14↑j
                                        ; sub_B6D9+2F↑j ...
                stc
                pop     ax
                pop     ax
                call    sub_51DD
                jmp     loc_B526
sub_B6D9        endp ; sp-analysis failed

; ---------------------------------------------------------------------------
word_B71A       dw 0B71Eh               ; DATA XREF: DOSCODE:B75C↓r
word_B71C       dw 0B76Dh               ; DATA XREF: DOSCODE:loc_B757↓r
                db  0Bh
                db 0D4h
                db 0B7h
                db  6Eh ; n
                db 0B7h
                db 0A5h
                db 0B7h
                db 0AEh
                db 0B7h
                db 0B5h
                db 0B7h
                db 0BCh
                db 0B7h
                db  15h
                db 0B8h
                db  39h ; 9
                db 0B8h
                db  39h ; 9
                db 0B8h
                db  39h ; 9
                db 0B8h
                db  45h ; E
                db 0B8h
; ---------------------------------------------------------------------------

$ServerCall:                            ; DATA XREF: DOSCODE:408C↑o
                cmp     al, 7
                jb      short loc_B73D
                cmp     al, 9
                jbe     short loc_B757

loc_B73D:                               ; CODE XREF: DOSCODE:B737↑j
                mov     si, dx
                mov     bx, [si+12h]
                test    ss:IsWin386, 1
                jnz     short loc_B74F
                mov     ss:USER_ID, bx

loc_B74F:                               ; CODE XREF: DOSCODE:B748↑j
                mov     bx, [si+14h]
                mov     ss:PROC_ID, bx

loc_B757:                               ; CODE XREF: DOSCODE:B73B↑j
                push    cs:word_B71C
                push    cs:word_B71A
                push    ax
                call    TableDispatch
                call    sub_51CA
                mov     al, 1

loc_B76A:                               ; CODE XREF: DOSCODE:loc_B7AC↓j
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------
                retn
; ---------------------------------------------------------------------------
                xor     bx, bx
                push    ss
                pop     ds
                call    ECritDisk

loc_B775:                               ; CODE XREF: DOSCODE:B79C↓j
                push    bx
                call    SFFromSFN
                jb      short loc_B79E
                cmp     word ptr es:[di], 0
                jz      short loc_B79A
                cmp     word ptr es:[di], 0FFFFh
                jz      short loc_B79A
                test    word ptr es:[di+5], 8000h
                jnz     short loc_B79A
                mov     ds:59Eh, di
                mov     word ptr ds:5A0h, es
                call    DOS_COMMIT

loc_B79A:                               ; CODE XREF: DOSCODE:B77F↑j
                                        ; DOSCODE:B785↑j ...
                pop     bx
                inc     bx
                jmp     short loc_B775
; ---------------------------------------------------------------------------

loc_B79E:                               ; CODE XREF: DOSCODE:B779↑j
                call    LCritDisk
                pop     bx

loc_B7A2:                               ; CODE XREF: DOSCODE:loc_B7AA↓j
                                        ; DOSCODE:loc_B7D2↓j
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------
                call    dword ptr ss:0A4h

loc_B7AA:                               ; CODE XREF: DOSCODE:B7B3↓j
                                        ; DOSCODE:B7BA↓j
                jnb     short loc_B7A2

loc_B7AC:                               ; CODE XREF: DOSCODE:B7C1↓j
                jmp     short loc_B76A
; ---------------------------------------------------------------------------
                call    dword ptr ss:9Ch
                jmp     short loc_B7AA
; ---------------------------------------------------------------------------
                call    dword ptr ss:0A0h
                jmp     short loc_B7AA
; ---------------------------------------------------------------------------
                call    dword ptr ss:0B4h
                jb      short loc_B7AC
                call    Get_User_Stack
                mov     [si+2], bx
                mov     [si+0Ah], di
                mov     word ptr [si+10h], es

loc_B7CF:                               ; CODE XREF: DOSCODE:B837↓j
                mov     [si+4], cx

loc_B7D2:                               ; CODE XREF: DOSCODE:B840↓j
                jmp     short loc_B7A2
; ---------------------------------------------------------------------------
                pop     ax
                push    ds
                push    si
                call    Get_User_Stack
                pop     di
                pop     es
                call    xchg_esdi_dssi
                push    si
                mov     cx, 6
                rep movsw
                inc     di
                inc     di
                movsw
                movsw
                pop     si
                mov     ax, [si]
                mov     bx, [si+2]
                mov     cx, [si+4]
                mov     dx, [si+6]
                mov     di, [si+0Ah]
                mov     es, word ptr [si+0Eh]
                push    word ptr [si+8]
                mov     ds, word ptr [si+0Ch]
                pop     si
                mov     word ptr ss:5ECh, ds
                mov     ss:5EAh, bx
                mov     byte ptr ss:572h, 0FFh
                jmp     REDISP
; ---------------------------------------------------------------------------
                push    ss
                pop     es
                mov     di, 320h
                mov     cx, 0AFAh
                mov     dx, 33Ah
                sub     cx, di
                sub     dx, di
                shr     cx, 1
                adc     cx, 0
                add     cx, cx
                call    Get_User_Stack
                mov     word ptr [si+0Eh], es
                mov     [si+8], di
                mov     [si+6], dx
                jmp     short loc_B7CF
; ---------------------------------------------------------------------------
                push    ax
                mov     ax, 1125h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE
                                        ; STACK: WORD subfunction
                                        ; Return: CF set on error, AX = error code
                                        ; STACK unchanged
                pop     bx
                jnb     short loc_B7D2
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------
                mov     ax, [si]
                mov     ss:324h, ax
                mov     ax, [si+0Ah]
                mov     ss:328h, ax
                mov     ax, [si+0Eh]
                mov     ss:32Ah, ax
                mov     ax, [si+2]
                mov     ss:326h, ax
                mov     ax, [si+4]
                mov     ss:323h, ah
                retn

; =============== S U B R O U T I N E =======================================


pJFNFromHandle  proc near               ; CODE XREF: $DUP_PDB+70↑p
                                        ; SFFromHandle↓p ...
                mov     es, cs:DosDSeg
                mov     es, word ptr es:330h
                cmp     bx, es:32h
                jnb     short loc_B882
                les     di, es:34h
                add     di, bx
                retn
; ---------------------------------------------------------------------------

loc_B882:                               ; CODE XREF: pJFNFromHandle+F↑j
                mov     al, 6

loc_B884:                               ; CODE XREF: SFFromHandle+18↓j
                stc

locret_B885:                            ; CODE XREF: SFFromHandle+3↓j
                retn
pJFNFromHandle  endp


; =============== S U B R O U T I N E =======================================


SFFromHandle    proc near               ; CODE XREF: $DUP_PDB+4B↑p
                                        ; $IOCTL:loc_6833↑p ...
                call    pJFNFromHandle
                jb      short locret_B885
                cmp     byte ptr es:[di], 0FFh
                jz      short loc_B89C
                push    bx
                mov     bl, es:[di]
                xor     bh, bh
                call    SFFromSFN
                pop     bx
                retn
; ---------------------------------------------------------------------------

loc_B89C:                               ; CODE XREF: SFFromHandle+9↑j
                mov     al, 6
                jmp     short loc_B884
SFFromHandle    endp


; =============== S U B R O U T I N E =======================================


SFFromSFN       proc near               ; CODE XREF: sub_7685+52↑p
                                        ; DOSCODE:B776↑p ...
                mov     es, cs:DosDSeg
                les     di, es:2Ah

loc_B8AA:                               ; CODE XREF: SFFromSFN+1A↓j
                cmp     bx, es:[di+4]
                jb      short loc_B8BE
                sub     bx, es:[di+4]
                les     di, es:[di]
                cmp     di, 0FFFFh
                jnz     short loc_B8AA
                stc
                retn
; ---------------------------------------------------------------------------

loc_B8BE:                               ; CODE XREF: SFFromSFN+E↑j
                push    ax
                mov     ax, 3Bh ; ';'
                mul     bl
                add     di, ax
                pop     ax
                add     di, 6
                retn
SFFromSFN       endp


; =============== S U B R O U T I N E =======================================


JFNFree         proc near               ; CODE XREF: DOSCODE:BBED↓p
                                        ; $OPEN+25↓p
                xor     bx, bx

loc_B8CD:                               ; CODE XREF: JFNFree+E↓j
                call    pJFNFromHandle
                jb      short loc_B8DB
                cmp     byte ptr es:[di], 0FFh
                jz      short locret_B8DD
                inc     bx
                jmp     short loc_B8CD
; ---------------------------------------------------------------------------

loc_B8DB:                               ; CODE XREF: JFNFree+5↑j
                                        ; SFNFree+46↓j
                mov     al, 4

locret_B8DD:                            ; CODE XREF: JFNFree+B↑j
                retn
JFNFree         endp


; =============== S U B R O U T I N E =======================================


SFNFree         proc near               ; CODE XREF: $OPEN+E↓p
                push    ax
                xor     bx, bx

loc_B8E1:                               ; CODE XREF: SFNFree+17↓j
                push    bx
                call    SFFromSFN
                pop     bx
                jb      short loc_B923
                cmp     word ptr es:[di], 0
                jz      short loc_B90B
                cmp     word ptr es:[di], 0FFFFh
                jz      short loc_B8F7

loc_B8F4:                               ; CODE XREF: SFNFree+21↓j
                                        ; SFNFree+2B↓j
                inc     bx
                jmp     short loc_B8E1
; ---------------------------------------------------------------------------

loc_B8F7:                               ; CODE XREF: SFNFree+14↑j
                mov     ax, ss:33Eh
                cmp     es:[di+2Fh], ax
                jnz     short loc_B8F4
                mov     ax, ss:33Ch
                cmp     es:[di+31h], ax
                jnz     short loc_B8F4

loc_B90B:                               ; CODE XREF: SFNFree+E↑j
                mov     word ptr es:[di], 0FFFFh
                mov     ax, ss:33Eh
                mov     es:[di+2Fh], ax
                mov     ax, ss:33Ch
                mov     es:[di+31h], ax
                pop     ax
                clc
                retn
; ---------------------------------------------------------------------------

loc_B923:                               ; CODE XREF: SFNFree+8↑j
                pop     ax
                jmp     short loc_B8DB
SFNFree         endp


; =============== S U B R O U T I N E =======================================


$CLOSE          proc near               ; CODE XREF: sub_7685+E↑p
                                        ; DOSCODE:AEE7↑p ...
                call    CheckOwner
                jb      short CloseError
                push    ss
                pop     ds
                mov     word ptr ds:THISSFT, di
                mov     word ptr ds:5A0h, es
                cmp     word ptr es:[di], 1
                jz      short FreeJFN
                mov     al, es:[di+2]
                and     al, 0F0h
                cmp     al, 70h
                jz      short PostFree

FreeJFN:                                ; CODE XREF: $CLOSE+13↑j
                call    pJFNFromHandle
                mov     byte ptr es:[di], 0FFh

PostFree:                               ; CODE XREF: $CLOSE+1D↑j
                call    DOS_CLOSE
                jb      short CloseError
                mov     ah, 3Eh ; '>'

loc_B953:                               ; CODE XREF: DOSCODE:B96F↓j
                                        ; DOSCODE:B989↓j
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

CloseError:                             ; CODE XREF: $CLOSE+3↑j
                                        ; $CLOSE+29↑j ...
                jmp     SYS_RET_ERR
$CLOSE          endp

; ---------------------------------------------------------------------------

$COMMIT:                                ; DATA XREF: DOSCODE:40A2↑o
                                        ; DOSCODE:40A6↑o
                call    CheckOwner
                jb      short CommitError
                push    ss
                pop     ds
                mov     word ptr ds:THISSFT, di
                mov     word ptr ds:THISSFT+2, es
                call    DOS_COMMIT
                jb      short CommitError
                mov     ah, 68h
                jmp     short loc_B953
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR $READ

CommitError:                            ; CODE XREF: DOSCODE:B95C↑j
                                        ; DOSCODE:B96B↑j ...
                jmp     short CloseError
; END OF FUNCTION CHUNK FOR $READ
; ---------------------------------------------------------------------------

$ExtHandle:                             ; DATA XREF: DOSCODE:40A0↑o
                xor     bp, bp
                cmp     bx, 20
                jnb     short loc_B97D
                mov     bx, 20

loc_B97D:                               ; CODE XREF: DOSCODE:B978↑j
                mov     es, ss:CurrentPDB
                mov     cx, word ptr es:BCON
                cmp     bx, cx
                jz      short loc_B953
                ja      short loc_B9AB
                inc     bp
                mov     ds, es:MAXSEC
                mov     si, bx
                sub     cx, bx

loc_B997:                               ; CODE XREF: DOSCODE:B99D↓j
                cmp     byte ptr [si], 0FFh
                jnz     short loc_B9D5
                inc     si
                loop    loc_B997
                cmp     bx, 14h
                ja      short loc_B9AB
                inc     bp
                mov     di, 18h
                push    bx
                jmp     short loc_B9C6
; ---------------------------------------------------------------------------

loc_B9AB:                               ; CODE XREF: DOSCODE:B98B↑j
                                        ; DOSCODE:B9A2↑j
                inc     bx
                jz      short loc_BA2A
                dec     bx
                clc
                push    bx
                add     bx, 0Fh
                mov     cl, 4
                rcr     bx, cl
                and     bh, 1Fh
                push    bp
                call    $ALLOC
                pop     bp
                jb      short loc_BA25
                mov     es, ax
                xor     di, di

loc_B9C6:                               ; CODE XREF: DOSCODE:B9A9↑j
                mov     ds, word ptr ss:330h
                test    bp, 3
                jz      short loc_B9D9
                pop     cx
                push    cx
                jmp     short loc_B9DD
; ---------------------------------------------------------------------------

loc_B9D5:                               ; CODE XREF: DOSCODE:B99A↑j
                mov     al, 4
; START OF FUNCTION CHUNK FOR $READ

loc_B9D7:                               ; CODE XREF: DOSCODE:BA28↓j
                                        ; $READ:loc_BA2C↓j
                jmp     short CommitError
; END OF FUNCTION CHUNK FOR $READ
; ---------------------------------------------------------------------------

loc_B9D9:                               ; CODE XREF: DOSCODE:B9CF↑j
                mov     cx, ds:32h

loc_B9DD:                               ; CODE XREF: DOSCODE:B9D3↑j
                mov     dx, cx
                lds     si, ds:34h
                rep movsb
                pop     cx
                push    cx
                sub     cx, dx
                mov     al, 0FFh
                rep stosb
                mov     ds, word ptr ss:330h
                cmp     word ptr ds:34h, 0
                jnz     short loc_BA06
                push    bp
                push    ds
                push    es
                mov     es, word ptr ds:36h
                call    $DEALLOC
                pop     es
                pop     ds
                pop     bp

loc_BA06:                               ; CODE XREF: DOSCODE:B9F7↑j
                test    bp, 2
                jz      short loc_BA14
                mov     word ptr ds:34h, 18h
                jmp     short loc_BA1A
; ---------------------------------------------------------------------------

loc_BA14:                               ; CODE XREF: DOSCODE:BA0A↑j
                mov     word ptr ds:34h, 0

loc_BA1A:                               ; CODE XREF: DOSCODE:BA12↑j
                mov     word ptr ds:36h, es
                pop     word ptr ds:32h
; START OF FUNCTION CHUNK FOR $READ

loc_BA22:                               ; CODE XREF: $READ:loc_BA88↓j
                jmp     SYS_RET_OK
; END OF FUNCTION CHUNK FOR $READ
; ---------------------------------------------------------------------------

loc_BA25:                               ; CODE XREF: DOSCODE:B9C0↑j
                pop     bx
                mov     al, 8
                jmp     short loc_B9D7
; ---------------------------------------------------------------------------

loc_BA2A:                               ; CODE XREF: DOSCODE:B9AC↑j
                mov     al, 1
; START OF FUNCTION CHUNK FOR $READ

loc_BA2C:                               ; CODE XREF: $READ:loc_BA8A↓j
                jmp     short loc_B9D7
; END OF FUNCTION CHUNK FOR $READ

; =============== S U B R O U T I N E =======================================


$READ           proc near               ; CODE XREF: ExecRead+7↑p
                                        ; DATA XREF: DOSCODE:4050↑o ...

; FUNCTION CHUNK AT B971 SIZE 00000002 BYTES
; FUNCTION CHUNK AT B9D7 SIZE 00000002 BYTES
; FUNCTION CHUNK AT BA22 SIZE 00000003 BYTES
; FUNCTION CHUNK AT BA2C SIZE 00000002 BYTES

                mov     si, offset DOS_READ

ReadDO:                                 ; CODE XREF: DOSCODE:BA8F↓j
                call    pJFNFromHandle
                jb      short loc_BA8A
                mov     al, es:[di]
                call    CheckOwner
                jb      short loc_BA8A
                mov     word ptr ss:THISSFT, di
                mov     word ptr ss:THISSFT+2, es
                test    byte ptr es:[di+3], 20h
                jz      short loc_BA55
                or      ss:EXTOPEN_ON, 2

loc_BA55:                               ; CODE XREF: $READ+1F↑j
                mov     ax, ds
                lds     bx, ss:32Ch
                push    bx
                push    ds
                mov     bx, dx
                shr     bx, 1
                shr     bx, 1
                shr     bx, 1
                shr     bx, 1
                add     ax, bx
                and     dx, 0Fh
                mov     ss:32Ch, dx
                mov     ss:32Eh, ax
                mov     ax, ss
                mov     ds, ax
                call    si ; DOS_READ
                pop     word ptr ds:32Eh
                pop     word ptr ds:32Ch
                jb      short loc_BA8A
                mov     ax, cx

loc_BA88:                               ; CODE XREF: $LSEEK+28↓j
                jmp     short loc_BA22
; ---------------------------------------------------------------------------

loc_BA8A:                               ; CODE XREF: $READ+6↑j
                                        ; $READ+E↑j ...
                jmp     short loc_BA2C
$READ           endp

; ---------------------------------------------------------------------------

$WRITE:                                 ; DATA XREF: DOSCODE:4052↑o
                mov     si, offset DOS_WRITE
                jmp     short ReadDO

; =============== S U B R O U T I N E =======================================


$LSEEK          proc near               ; CODE XREF: DOSCODE:57C6↑p
                                        ; DOSCODE:AFD4↑p ...
                call    CheckOwner

loc_BA94:                               ; CODE XREF: DOSCODE:BB04↓j
                jb      short loc_BA8A
                cmp     al, 2
                ja      short loc_BAED
                cmp     al, 1
                jb      short loc_BAA8
                ja      short loc_BABB
                add     dx, es:[di+15h]
                adc     cx, es:[di+17h]

loc_BAA8:                               ; CODE XREF: $LSEEK+B↑j
                                        ; $LSEEK+39↓j
                mov     ax, cx
                xchg    ax, dx

loc_BAAB:                               ; CODE XREF: $LSEEK+58↓j
                mov     es:[di+15h], ax
                mov     es:[di+17h], dx
                call    Get_User_Stack
                mov     [si+6], dx
                jmp     short loc_BA88
; ---------------------------------------------------------------------------

loc_BABB:                               ; CODE XREF: $LSEEK+D↑j
                test    byte ptr es:[di+6], 80h
                jnz     short loc_BACC

loc_BAC2:                               ; CODE XREF: $LSEEK+40↓j
                                        ; $LSEEK+51↓j
                add     dx, es:[di+11h]
                adc     cx, es:[di+13h]
                jmp     short loc_BAA8
; ---------------------------------------------------------------------------

loc_BACC:                               ; CODE XREF: $LSEEK+2F↑j
                test    byte ptr es:[di+3], 80h
                jnz     short loc_BAC2
                mov     ax, es:[di+2]
                and     ax, 0F0h
                cmp     ax, 40h ; '@'
                jz      short loc_BAE4
                cmp     ax, 30h ; '0'
                jnz     short loc_BAC2

loc_BAE4:                               ; CODE XREF: $LSEEK+4C↑j
                mov     ax, 1121h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - SEEK FROM END OF REMOTE FILE
                                        ; CX:DX = offset (in bytes) from end
                                        ; ES:DI -> SFT, SFT DPB field -> DPB of drive with file
                                        ; SS = DOS CS
                                        ; Return: CF set on error
                                        ; CF clear if successful, DX:AX = new file position
                jnb     short loc_BAAB

loc_BAEB:                               ; CODE XREF: DOSCODE:BBF2↓j
                jmp     short loc_BA8A
; ---------------------------------------------------------------------------

loc_BAED:                               ; CODE XREF: $LSEEK+7↑j
                                        ; DOSCODE:BAF7↓j ...
                call    sub_51CA
                mov     al, 1

loc_BAF2:                               ; CODE XREF: DOSCODE:loc_BB6E↓j
                jmp     SYS_RET_ERR
$LSEEK          endp

; ---------------------------------------------------------------------------

$FILE_TIMES:                            ; DATA XREF: DOSCODE:4080↑o
                cmp     al, 7
                jnb     short loc_BAED
                cmp     al, 4
                jnb     short loc_BB01
                cmp     al, 2
                jnb     short loc_BAED

loc_BB01:                               ; CODE XREF: DOSCODE:BAFB↑j
                call    CheckOwner
                jb      short loc_BA94
                cmp     al, 1
                ja      short loc_BB42
                or      al, al
                jnz     short ft_set_time
                lds     cx, es:[di+0Dh]
                mov     dx, ds
                call    Get_User_Stack
                mov     [si+4], cx
                mov     [si+6], dx
                jmp     short loc_BB3F
; ---------------------------------------------------------------------------

ft_set_time:                            ; CODE XREF: DOSCODE:BB0C↑j
                call    ECritDisk
                mov     es:[di+0Dh], cx
                mov     es:[di+0Fh], dx
                xor     ax, ax
                call    dword ptr ss:0C8h
                and     word ptr es:[di+5], 0FFBFh
                or      word ptr es:[di+5], 4000h
                call    LCritDisk

loc_BB3F:                               ; CODE XREF: DOSCODE:BB1D↑j
                                        ; DOSCODE:loc_BB5F↓j
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

loc_BB42:                               ; CODE XREF: DOSCODE:BB08↑j
                test    byte ptr es:[di+5], 80h
                jnz     short loc_BB4C
                call    sub_576D

loc_BB4C:                               ; CODE XREF: DOSCODE:BB47↑j
                jz      short loc_BB61
                test    al, 1
                jnz     short loc_BB5F
                mov     dx, es:[di+0Fh]

loc_BB56:                               ; CODE XREF: DOSCODE:loc_BB87↓j
                call    Get_User_Stack
                mov     [si+4], cx
                mov     [si+6], dx

loc_BB5F:                               ; CODE XREF: DOSCODE:BB50↑j
                jmp     short loc_BB3F
; ---------------------------------------------------------------------------

loc_BB61:                               ; CODE XREF: DOSCODE:loc_BB4C↑j
                push    ss
                pop     ds
                push    ax
                push    dx
                push    cx
                call    sub_7873
                pop     cx
                pop     dx
                jnb     short loc_BB70
                pop     cx

loc_BB6E:                               ; CODE XREF: DOSCODE:loc_BB90↓j
                                        ; DOSCODE:BBE6↓j
                jmp     short loc_BAF2
; ---------------------------------------------------------------------------

loc_BB70:                               ; CODE XREF: DOSCODE:BB6B↑j
                pop     ax
                test    al, 1
                jnz     short loc_BB89
                xor     cx, cx
                mov     dx, es:[di+12h]
                cmp     al, 6
                jnz     short loc_BB87
                mov     cx, es:[di+0Eh]
                mov     dx, es:[di+10h]

loc_BB87:                               ; CODE XREF: DOSCODE:BB7D↑j
                jmp     short loc_BB56
; ---------------------------------------------------------------------------

loc_BB89:                               ; CODE XREF: DOSCODE:BB73↑j
                test    dl, 1Fh
                jnz     short loc_BB92

loc_BB8E:                               ; CODE XREF: DOSCODE:BB96↓j
                                        ; DOSCODE:BBA2↓j ...
                mov     al, 0Dh

loc_BB90:                               ; CODE XREF: DOSCODE:BBFF↓j
                jmp     short loc_BB6E
; ---------------------------------------------------------------------------

loc_BB92:                               ; CODE XREF: DOSCODE:BB8C↑j
                test    dx, 1E0h
                jz      short loc_BB8E
                push    dx
                and     dx, 1E0h
                cmp     dx, 180h
                pop     dx
                ja      short loc_BB8E
                cmp     al, 5
                jnz     short loc_BBAE
                mov     es:[di+12h], dx
                jmp     short loc_BBCE
; ---------------------------------------------------------------------------

loc_BBAE:                               ; CODE XREF: DOSCODE:BBA6↑j
                mov     ax, cx
                and     ax, 0F81Fh
                cmp     ah, 0B8h
                ja      short loc_BB8E
                cmp     al, 1Dh
                ja      short loc_BB8E
                mov     ax, cx
                and     ax, 7E0h
                cmp     ax, 760h
                ja      short loc_BB8E
                mov     es:[di+10h], dx
                mov     es:[di+0Eh], cx

loc_BBCE:                               ; CODE XREF: DOSCODE:BBAC↑j
                test    byte ptr es:[bx+5], 40h
                jnz     short loc_BBDD
                call    sub_AD64
                or      byte ptr es:[bx+5], 40h

loc_BBDD:                               ; CODE XREF: DOSCODE:BBD3↑j
                push    es
                pop     ds
                mov     di, bx
                mov     al, 0FFh
                call    CHECKFLUSH
                jb      short loc_BB6E

loc_BBE8:                               ; CODE XREF: DOSCODE:BC0C↓j
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

$DUP:                                   ; DATA XREF: DOSCODE:405C↑o
                mov     ax, bx
                call    JFNFree

loc_BBF0:                               ; CODE XREF: DOSCODE:BC1A↓j
                jnb     short loc_BBF5
                jmp     loc_BAEB
; ---------------------------------------------------------------------------

loc_BBF5:                               ; CODE XREF: DOSCODE:loc_BBF0↑j
                push    es
                push    di
                pop     si
                pop     ds
                xchg    ax, bx
                call    CheckOwner
                jnb     short loc_BC01
                jmp     short loc_BB90
; ---------------------------------------------------------------------------

loc_BC01:                               ; CODE XREF: DOSCODE:BBFD↑j
                call    loc_707E
                call    pJFNFromHandle
                mov     bl, es:[di]
                mov     [si], bl
                jmp     short loc_BBE8
; ---------------------------------------------------------------------------

$DUP2:                                  ; DATA XREF: DOSCODE:405E↑o
                push    bx
                push    cx
                mov     bx, cx
                call    $CLOSE
                pop     bx
                pop     ax
                call    pJFNFromHandle
                jmp     short loc_BBF0

; =============== S U B R O U T I N E =======================================


CheckOwner      proc near               ; CODE XREF: $CLOSE↑p
                                        ; DOSCODE:$COMMIT↑p ...
                call    SFFromHandle
                jb      short locret_BC40
                push    ax
                test    byte ptr ss:0F5Bh, 1
                jz      short loc_BC32
                xor     ax, ax
                pop     ax
                jnz     short loc_BC30

locret_BC2F:                            ; CODE XREF: CheckOwner+1F↓j
                retn
; ---------------------------------------------------------------------------

loc_BC30:                               ; CODE XREF: CheckOwner+11↑j
                jmp     short loc_BC3D
; ---------------------------------------------------------------------------

loc_BC32:                               ; CODE XREF: CheckOwner+C↑j
                mov     ax, ss:33Eh
                cmp     ax, es:[di+2Fh]
                pop     ax
                jz      short locret_BC2F

loc_BC3D:                               ; CODE XREF: CheckOwner:loc_BC30↑j
                mov     al, 6
                stc

locret_BC40:                            ; CODE XREF: CheckOwner+3↑j
                retn
CheckOwner      endp

; ---------------------------------------------------------------------------

$AssignOper:                            ; DATA XREF: DOSCODE:4090↑o
                cmp     al, 7
                jnz     short loc_BC69

loc_BC45:                               ; CODE XREF: DOSCODE:BC6B↓j
                push    ax
                mov     al, dl
                call    GetCDSFromDrv
                pop     ax
                jb      short loc_BC64
                cmp     word ptr [si+45h], 0
                jz      short loc_BC64
                cmp     al, 7
                jnz     short loc_BC5E
                or      byte ptr [si+44h], 40h
                jmp     short loc_BC76
; ---------------------------------------------------------------------------

loc_BC5E:                               ; CODE XREF: DOSCODE:BC56↑j
                and     byte ptr [si+44h], 0BFh
                jmp     short loc_BC76
; ---------------------------------------------------------------------------

loc_BC64:                               ; CODE XREF: DOSCODE:BC4C↑j
                                        ; DOSCODE:BC52↑j
                mov     ax, 0Fh
                jmp     short loc_BC79
; ---------------------------------------------------------------------------

loc_BC69:                               ; CODE XREF: DOSCODE:BC43↑j
                cmp     al, 8
                jz      short loc_BC45
                push    ax
                mov     ax, 111Eh
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - DO REDIRECTION
                                        ; SS = DOS CS
                                        ; STACK: WORD function to execute
                                        ; Return: CF set on error, AX = error code
                                        ; STACK unchanged
                pop     bx
                jb      short loc_BC79

loc_BC76:                               ; CODE XREF: DOSCODE:BC5C↑j
                                        ; DOSCODE:BC62↑j
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

loc_BC79:                               ; CODE XREF: DOSCODE:BC67↑j
                                        ; DOSCODE:BC74↑j ...
                jmp     SYS_RET_ERR

; =============== S U B R O U T I N E =======================================


sub_BC7C        proc near               ; CODE XREF: sub_5F6A+9C↑p
                                        ; InitCDS+3C↓p
                lds     si, ss:26h

loc_BC81:                               ; CODE XREF: sub_BC7C+11↓j
                cmp     si, 0FFFFh
                jz      short loc_BC8F
                cmp     al, [si]
                jz      short locret_BC90
                lds     si, [si+19h]
                jmp     short loc_BC81
; ---------------------------------------------------------------------------

loc_BC8F:                               ; CODE XREF: sub_BC7C+8↑j
                stc

locret_BC90:                            ; CODE XREF: sub_BC7C+C↑j
                retn
sub_BC7C        endp


; =============== S U B R O U T I N E =======================================


InitCDS         proc near               ; CODE XREF: DOS_SEARCH_NEXT+21↑p
                                        ; GETTHISDRV+28↓p
                                        ; DATA XREF: ...
                push    ax
                les     di, ss:5A2h
                mov     word ptr es:[di+43h], 0
                sub     al, 40h ; '@'
                cmp     ss:46h, al
                jb      short loc_BCDC
                dec     ax
                push    ax
                add     al, 41h ; 'A'
                mov     ah, 3Ah ; ':'
                mov     es:[di], ax
                mov     word ptr es:[di+2], 5Ch ; '\'
                or      byte ptr es:[di+44h], 40h
                sub     ax, ax
                mov     es:[di+49h], ax
                mov     es:[di+4Bh], ax
                mov     al, 2
                mov     es:[di+4Fh], ax
                pop     ax
                push    ds
                push    si
                call    sub_BC7C
                jb      short loc_BCDA
                mov     es:[di+45h], si
                mov     word ptr es:[di+47h], ds

loc_BCDA:                               ; CODE XREF: InitCDS+3F↑j
                pop     si
                pop     ds

loc_BCDC:                               ; CODE XREF: InitCDS+13↑j
                pop     ax

locret_BCDD:                            ; CODE XREF: GetVisDrv+3↓j
                                        ; GetVisDrv+12↓j
                retn
InitCDS         endp

; ---------------------------------------------------------------------------

$UserOper:                              ; DATA XREF: DOSCODE:408E↑o
                cmp     al, 1
                jb      short loc_BCEF
                jz      short loc_BD0E
                cmp     al, 5
                jbe     short loc_BD21
                call    sub_51CA
                mov     al, 1

loc_BCED:                               ; CODE XREF: DOSCODE:BD2A↓j
                jmp     short loc_BC79
; ---------------------------------------------------------------------------

loc_BCEF:                               ; CODE XREF: DOSCODE:BCE0↑j
                push    ds
                pop     es
                mov     di, dx
                mov     cx, ss:0Eh
                call    Get_User_Stack
                mov     [si+4], cx
                push    ss
                pop     ds
                mov     si, 305h

loc_BD03:                               ; CODE XREF: DOSCODE:BD1F↓j
                mov     cx, 0Fh
                rep movsb
                xor     ax, ax
                stosb

loc_BD0B:                               ; CODE XREF: DOSCODE:BD28↓j
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

loc_BD0E:                               ; CODE XREF: DOSCODE:BCE2↑j
                mov     ss:0Eh, cx
                mov     si, dx
                push    ss
                pop     es
                mov     di, 305h
                inc     byte ptr ss:304h
                jmp     short loc_BD03
; ---------------------------------------------------------------------------

loc_BD21:                               ; CODE XREF: DOSCODE:BCE6↑j
                push    ax
                mov     ax, 111Fh
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - PRINTER SETUP
                                        ; STACK: WORD function
                                        ; Return: CF set on error, AX = error code
                                        ; STACK unchanged
                pop     dx
                jnb     short loc_BD0B
                jmp     short loc_BCED

; =============== S U B R O U T I N E =======================================


GetVisDrv       proc near               ; CODE XREF: DOSCODE:4E1C↑p
                                        ; DOSCODE:6669↑p ...
                call    GETTHISDRV
                jb      short locret_BCDD
                push    ds
                push    si
                lds     si, ss:5A2h
                test    byte ptr [si+44h], 20h
                pop     si
                pop     ds
                jz      short locret_BCDD
                mov     byte ptr ss:610h, 0Fh
                stc
                retn
GetVisDrv       endp


; =============== S U B R O U T I N E =======================================


GETTHISDRV      proc near               ; CODE XREF: GETBP+5↑p
                                        ; DOSCODE:4DC8↑p ...
                or      al, al
                jnz     short loc_BD51
                mov     al, ss:CURDRV
                inc     ax

loc_BD51:                               ; CODE XREF: GETTHISDRV+2↑j
                dec     ax
                push    ds
                push    si
                call    set_exerr_locus_disk
                cmp     ss:FSHARING, 0
                jz      short loc_BD7F
                push    ax
                push    es
                push    di
                mov     word ptr ss:THISCDS, (offset dword_613 - (offset SFT0_SFTable+4Eh))
                mov     word ptr ss:THISCDS+2, ss
                add     al, 41h ; 'A'
                call    InitCDS
                test    byte ptr es:[di+44h], 40h
                pop     di
                pop     es
                pop     ax
                jz      short loc_BD8A
                jmp     short loc_BD94
; ---------------------------------------------------------------------------

loc_BD7F:                               ; CODE XREF: GETTHISDRV+15↑j
                call    GetCDSFromDrv
                jb      short loc_BD8A
                test    byte ptr [si+44h], 40h
                jnz     short loc_BD94

loc_BD8A:                               ; CODE XREF: GETTHISDRV+33↑j
                                        ; GETTHISDRV+3A↑j
                mov     al, 0Fh
                mov     ss:DrvErr, al
                call    sub_51CA
                stc

loc_BD94:                               ; CODE XREF: GETTHISDRV+35↑j
                                        ; GETTHISDRV+40↑j
                pop     si
                pop     ds
                retn
GETTHISDRV      endp


; =============== S U B R O U T I N E =======================================


GetCDSFromDrv   proc near               ; CODE XREF: DOSCODE:loc_66E8↑p
                                        ; DOSCODE:BC48↑p ...
                cmp     al, ss:47h
                jnb     short loc_BDB9
                push    bx
                push    ax
                lds     si, ss:3Ch
                mov     bl, 58h ; 'X'
                mul     bl
                add     si, ax
                mov     ss:5A2h, si
                mov     word ptr ss:5A4h, ds
                pop     ax
                pop     bx
                clc
                retn
; ---------------------------------------------------------------------------

loc_BDB9:                               ; CODE XREF: GetCDSFromDrv+5↑j
                stc
                retn
GetCDSFromDrv   endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_BDBB        proc near               ; CODE XREF: DOSCODE:5CA9↑p
                                        ; DOSCODE:5CC0↑p ...

var_10          = byte ptr -10h

                push    bp
                mov     bp, sp
                sub     sp, 10h
                push    ss
                pop     es
                push    es
                push    di
                lea     di, [bp+var_10]
                mov     byte ptr ss:56Ch, 0
                mov     byte ptr ss:56Dh, 0
                call    sub_6199
                jz      short loc_BDE6
                mov     al, [si-1]
                mov     ss:56Dh, al
                mov     byte ptr ss:56Ch, 0FFh

loc_BDE6:                               ; CODE XREF: sub_BDBB+1C↑j
                lodsb
                call    GETTHISDRV
                jb      short loc_BE16
                call    sub_C169
                mov     cx, 0Bh
                push    si

loc_BDF3:                               ; CODE XREF: sub_BDBB+40↓j
                lodsb
                call    sub_9F1D
                test    al, 8
                jz      short loc_BE16
                loop    loc_BDF3
                pop     si
                mov     bx, di
                call    PackName
                pop     di
                pop     es
                push    ss
                pop     ds
                lea     si, [bp+var_10]
                cmp     byte ptr [bx], 0
                jz      short loc_BE16
                push    bp
                call    TransPathSet
                pop     bp
                jnb     short loc_BE19

loc_BE16:                               ; CODE XREF: sub_BDBB+2F↑j
                                        ; sub_BDBB+3E↑j ...
                stc
                mov     al, 3

loc_BE19:                               ; CODE XREF: sub_BDBB+59↑j
                mov     sp, bp
                pop     bp

locret_BE1C:                            ; CODE XREF: TransPathSet+3D↓j
                retn
sub_BDBB        endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


TransPath       proc near               ; CODE XREF: DOSCODE:6727↑p
                                        ; DOSCODE:67C0↑p ...
                xor     al, al
                jmp     short loc_BE23
TransPath       endp


; =============== S U B R O U T I N E =======================================


TransPathSet    proc near               ; CODE XREF: DOSCODE:659E↑p
                                        ; sub_BDBB+55↑p ...

; FUNCTION CHUNK AT BEF1 SIZE 000000A5 BYTES

                mov     al, 0FFh

loc_BE23:                               ; CODE XREF: TransPath+2↑j
                mov     ss:34Ch, al
                mov     al, 0FFh

TransPathNoSet:                         ; CODE XREF: DOSCODE:66D0↑p
                                        ; DOSCODE:676A↑p
                mov     ss:571h, al
                mov     byte ptr ss:57Ah, 0FFh
                mov     ss:5B2h, di
                mov     word ptr ss:5B6h, 0FFFFh
                push    ss
                pop     es
                lea     bp, [di+86h]
                cmp     byte ptr ss:572h, 0
                jz      short loc_BE82
                call    DriveFromText
                call    GETTHISDRV
                jb      short loc_BE7F
                call    sub_C169
                lea     bx, [di+1]
                call    sub_BF96
                jb      short locret_BE1C
                push    ss
                pop     ds
                mov     si, ds:5B2h
                test    byte ptr ds:571h, 0FFh
                jz      short loc_BE70
                call    sub_C0A6

loc_BE70:                               ; CODE XREF: TransPathSet+4A↑j
                push    ss
                pop     ds
                les     di, ds:5A2h
                call    ECritDisk
                call    FATREAD_CDS
                call    LCritDisk

loc_BE7F:                               ; CODE XREF: TransPathSet+32↑j
                mov     al, 3
                retn
; ---------------------------------------------------------------------------

loc_BE82:                               ; CODE XREF: TransPathSet+2A↑j
                mov     word ptr ss:5A2h, 0FFFFh
                mov     ax, 1123h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME
                                        ; DS:SI -> ASCIZ filename to canonicalize
                                        ; ES:DI -> 128-byte buffer for qualified name
                                        ; Return: CF set if not resolved
                jnb     short loc_BEB9
                call    DriveFromText
                push    ax
                mov     ax, [si]
                call    PATHCHRCMP
                xchg    ah, al
                call    PATHCHRCMP
                jnz     short loc_BEBF
                cmp     ah, al
                jnz     short loc_BEBF
                pop     ax
                movsw

loc_BEA6:                               ; CODE XREF: TransPathSet+93↓j
                lodsb
                call    UCase
                or      al, al
                jz      short loc_BEBC
                call    PATHCHRCMP
                mov     bx, di
                stosb
                jnz     short loc_BEA6
                call    sub_BF96

loc_BEB9:                               ; CODE XREF: TransPathSet+6D↑j
                                        ; TransPathSet+9C↓j
                push    ss
                pop     ds
                retn
; ---------------------------------------------------------------------------

loc_BEBC:                               ; CODE XREF: TransPathSet+8B↑j
                stosb
                jmp     short loc_BEB9
; ---------------------------------------------------------------------------

loc_BEBF:                               ; CODE XREF: TransPathSet+7D↑j
                                        ; TransPathSet+81↑j
                pop     ax
                cmp     byte ptr [si], 0
                jnz     short loc_BEC9
                mov     al, 2
                stc
                retn
; ---------------------------------------------------------------------------

loc_BEC9:                               ; CODE XREF: TransPathSet+A2↑j
                push    ax
                push    bp
                call    sub_BEEE
                pop     bp
                pop     ax
                jnb     short loc_BEF1
                mov     byte ptr ss:572h, 0FFh
                call    GETTHISDRV
                mov     byte ptr ss:572h, 0
                call    sub_C169
                mov     al, 2Fh ; '/'
                stosb
                call    StrCpy
                clc
                push    ss
                pop     ds

locret_BEED:                            ; CODE XREF: TransPathSet+D5↓j
                                        ; TransPathSet+E4↓j ...
                retn
TransPathSet    endp


; =============== S U B R O U T I N E =======================================

; Attributes: thunk

sub_BEEE        proc near               ; CODE XREF: TransPathSet+AA↑p
                jmp     sub_8FD0
sub_BEEE        endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR TransPathSet

loc_BEF1:                               ; CODE XREF: TransPathSet+AF↑j
                call    GetVisDrv
                mov     al, 3
                jb      short locret_BEED
                push    ds
                push    si
                push    es
                push    di
                call    ValidateCDS
                pop     di
                pop     es
                pop     si
                pop     ds
                mov     al, 3
                jb      short locret_BEED
                push    ds
                push    si
                lds     si, ss:5A2h
                mov     bx, di
                add     bx, [si+4Fh]
                lea     bp, [di+86h]
                call    FStrCpy
                dec     di
                mov     al, 5Ch ; '\'
                cmp     es:[di-1], al
                jz      short loc_BF24
                stosb

loc_BF24:                               ; CODE XREF: TransPathSet+100↑j
                dec     di
                pop     si
                pop     ds
                call    sub_BFFB
                jnz     short loc_BF3D
                or      al, al
                jz      short loc_BF40
                mov     di, bx

loc_BF32:                               ; CODE XREF: TransPathSet+115↓j
                lodsb
                call    PATHCHRCMP
                jz      short loc_BF32
                dec     si
                or      al, al
                jz      short loc_BF40

loc_BF3D:                               ; CODE XREF: TransPathSet+109↑j
                mov     al, 5Ch ; '\'
                stosb

loc_BF40:                               ; CODE XREF: TransPathSet+10D↑j
                                        ; TransPathSet+11A↑j
                call    sub_BF96
                jb      short locret_BEED
                push    ss
                pop     ds
                mov     di, ds:5B2h
                lds     si, ds:5A2h
                call    sub_C171
                jnz     short loc_BF68
                mov     al, [si-1]
                call    PATHCHRCMP
                jz      short loc_BF68
                cmp     byte ptr es:[di], 0
                jz      short loc_BF68
                inc     di
                mov     ss:5B6h, di

loc_BF68:                               ; CODE XREF: TransPathSet+131↑j
                                        ; TransPathSet+139↑j ...
                push    ss
                pop     ds
                mov     si, ds:5B2h
                xor     cx, cx
                test    byte ptr ds:571h, 0FFh
                jz      short loc_BF7A
                call    sub_C0A6

loc_BF7A:                               ; CODE XREF: TransPathSet+154↑j
                push    ss
                pop     ds
                les     di, ds:5A2h
                test    word ptr es:[di+43h], 8000h
                jnz     short locret_BF95
                jcxz    short locret_BF95
                call    ECritDisk
                call    FATREAD_CDS
                call    LCritDisk
                mov     al, 3

locret_BF95:                            ; CODE XREF: TransPathSet+165↑j
                                        ; TransPathSet+167↑j
                retn
; END OF FUNCTION CHUNK FOR TransPathSet

; =============== S U B R O U T I N E =======================================


sub_BF96        proc near               ; CODE XREF: TransPathSet+3A↑p
                                        ; TransPathSet+95↑p ...
                lodsb
                call    PATHCHRCMP
                jnz     short loc_BFA3
                cmp     di, bp
                jnb     short loc_BFB9
                stosb
                jmp     short sub_BF96
; ---------------------------------------------------------------------------

loc_BFA3:                               ; CODE XREF: sub_BF96+4↑j
                                        ; sub_BF96+55↓j
                dec     si

loc_BFA4:                               ; CODE XREF: sub_BF96+63↓j
                xor     ax, ax
                cmp     [si], al
                jnz     short loc_BFC4
                cmp     byte ptr es:[di-1], 3Ah ; ':'
                jnz     short loc_BFB6
                mov     al, 5Ch ; '\'
                stosb
                mov     al, ah

loc_BFB6:                               ; CODE XREF: sub_BF96+19↑j
                stosb
                clc
                retn
; ---------------------------------------------------------------------------

loc_BFB9:                               ; CODE XREF: sub_BF96+8↑j
                                        ; sub_BF96+4F↓j ...
                call    sub_C18A
                mov     al, 3
                jz      short loc_BFC2
                mov     al, 2

loc_BFC2:                               ; CODE XREF: sub_BF96+28↑j
                stc

locret_BFC3:                            ; CODE XREF: sub_BF96+31↓j
                                        ; sub_BF96+46↓j ...
                retn
; ---------------------------------------------------------------------------

loc_BFC4:                               ; CODE XREF: sub_BF96+12↑j
                call    sub_C018
                jb      short locret_BFC3
                cmp     word ptr es:[di], 2Eh ; '.'
                jz      short loc_BFD7
                cmp     word ptr es:[di], 2E2Eh
                jnz     short loc_BFE0
                dec     di

loc_BFD7:                               ; CODE XREF: sub_BF96+37↑j
                call    SkipBack
                mov     al, 3
                jb      short locret_BFC3
                jmp     short loc_BFE2
; ---------------------------------------------------------------------------

loc_BFE0:                               ; CODE XREF: sub_BF96+3E↑j
                add     di, cx

loc_BFE2:                               ; CODE XREF: sub_BF96+48↑j
                call    sub_BFFB
                jnz     short loc_BFB9
                lodsb
                call    PATHCHRCMP
                jnz     short loc_BFA3
                cmp     di, bp
                jnb     short loc_BFB9
                stosb

loc_BFF2:                               ; CODE XREF: sub_BF96+60↓j
                lodsb
                call    PATHCHRCMP
                jz      short loc_BFF2
                dec     si
                jmp     short loc_BFA4
sub_BF96        endp


; =============== S U B R O U T I N E =======================================


sub_BFFB        proc near               ; CODE XREF: TransPathSet+106↑p
                                        ; sub_BF96:loc_BFE2↑p ...
                mov     al, [si]
sub_BFFB        endp


; =============== S U B R O U T I N E =======================================


sub_BFFD        proc near               ; CODE XREF: sub_C171+14↓p
                                        ; sub_C18A+1↓p
                or      al, al
                jz      short locret_BFC3
                call    PATHCHRCMP
                retn
sub_BFFD        endp


; =============== S U B R O U T I N E =======================================


SkipBack        proc near               ; CODE XREF: REN_DEL_Check+1D↑p
                                        ; sub_BF96:loc_BFD7↑p ...
                cmp     di, bx
                jb      short loc_C014
                dec     di
                mov     al, es:[di]
                call    PATHCHRCMP
                jnz     short SkipBack
                clc
                retn
; ---------------------------------------------------------------------------

loc_C014:                               ; CODE XREF: SkipBack+2↑j
                mov     al, 3
                stc
                retn
SkipBack        endp


; =============== S U B R O U T I N E =======================================


sub_C018        proc near               ; CODE XREF: sub_BF96:loc_BFC4↑p
                sub     sp, 0Eh
                push    ds
                push    si
                push    es
                push    di
                push    bp
                mov     bp, sp
                mov     ah, 2Eh ; '.'
                lodsb
                stosb
                cmp     al, ah
                jnz     short loc_C042
                call    sub_BFFB
                jz      short loc_C03A
                lodsb
                stosb
                cmp     al, ah
                jnz     short loc_C08C
                call    sub_BFFB
                jnz     short loc_C08C

loc_C03A:                               ; CODE XREF: sub_C018+15↑j
                xor     al, al
                stosb
                mov     [bp+6], si
                jmp     short loc_C089
; ---------------------------------------------------------------------------

loc_C042:                               ; CODE XREF: sub_C018+10↑j
                mov     si, [bp+6]
                call    sub_9E7C
                cmp     si, [bp+6]
                jz      short loc_C08C
                cmp     byte ptr ss:572h, 0
                jnz     short loc_C065
                and     dl, 1
                add     ss:57Ah, dl
                jg      short loc_C08C
                jnz     short loc_C065
                or      dl, dl
                jz      short loc_C094

loc_C065:                               ; CODE XREF: sub_C018+3B↑j
                                        ; sub_C018+47↑j
                mov     [bp+6], si
                push    ss
                pop     ds
                mov     si, 54Bh
                lea     di, [bp+0Ah]
                push    di
                call    PackName
                pop     di
                call    StrLen
                dec     cx
                add     cx, [bp+2]
                cmp     cx, [bp+0]
                jnb     short loc_C08C
                mov     si, di
                les     di, [bp+2]
                call    FStrCpy

loc_C089:                               ; CODE XREF: sub_C018+28↑j
                clc
                jmp     short loc_C097
; ---------------------------------------------------------------------------

loc_C08C:                               ; CODE XREF: sub_C018+1B↑j
                                        ; sub_C018+20↑j ...
                stc
                call    sub_C18A
                mov     al, 2
                jnz     short loc_C097

loc_C094:                               ; CODE XREF: sub_C018+4B↑j
                stc
                mov     al, 3

loc_C097:                               ; CODE XREF: sub_C018+72↑j
                                        ; sub_C018+7A↑j
                pop     bp
                pop     di
                pop     es
                pop     si
                pop     ds
                lahf
                add     sp, 0Eh
                call    StrLen
                dec     cx
                sahf
                retn
sub_C018        endp


; =============== S U B R O U T I N E =======================================


sub_C0A6        proc near               ; CODE XREF: ValidateCDS+32↑p
                                        ; TransPathSet+4C↑p ...
                test    byte ptr ss:5Ah, 0FFh
                jz      short loc_C118
                push    word ptr ss:5A2h
                push    word ptr ss:5A4h
                push    ds
                push    si
                pop     di
                pop     es
                xor     ax, ax

loc_C0BE:                               ; CODE XREF: sub_C0A6+24↓j
                                        ; sub_C0A6+2D↓j
                call    GetCDSFromDrv
                jb      short loc_C10E
                inc     al
                test    word ptr [si+43h], 2000h
                jz      short loc_C0BE
                push    di
                call    sub_C171
                jz      short loc_C0D5

loc_C0D2:                               ; CODE XREF: sub_C0A6+3B↓j
                pop     di
                jmp     short loc_C0BE
; ---------------------------------------------------------------------------

loc_C0D5:                               ; CODE XREF: sub_C0A6+2A↑j
                cmp     byte ptr es:[di], 0
                jnz     short loc_C0E3
                test    byte ptr ss:34Ch, 0FFh
                jnz     short loc_C0D2

loc_C0E3:                               ; CODE XREF: sub_C0A6+33↑j
                mov     si, di
                push    es
                pop     ds
                pop     di
                call    loc_C16B
                mov     ax, ss:5B6h
                or      ax, ax
                js      short loc_C0FB
                add     ax, di
                sub     ax, si
                mov     ss:5B6h, ax

loc_C0FB:                               ; CODE XREF: sub_C0A6+4B↑j
                cmp     byte ptr [si], 0
                jnz     short loc_C103
                mov     al, 5Ch ; '\'
                stosb

loc_C103:                               ; CODE XREF: sub_C0A6+58↑j
                call    FStrCpy
                add     sp, 4
                or      cl, 1
                jmp     short loc_C11A
; ---------------------------------------------------------------------------

loc_C10E:                               ; CODE XREF: sub_C0A6+1B↑j
                pop     word ptr ss:5A4h
                pop     word ptr ss:5A2h

loc_C118:                               ; CODE XREF: sub_C0A6+6↑j
                xor     cx, cx

loc_C11A:                               ; CODE XREF: sub_C0A6+66↑j
                lds     si, ss:5A2h
                les     di, [si+45h]
                mov     ss:58Ah, di
                mov     word ptr ss:58Ch, es
sub_C0A6        endp


; =============== S U B R O U T I N E =======================================


DrvFromTxt_ret  proc near               ; CODE XREF: DriveFromText+5↓j
                                        ; DriveFromText+B↓j ...
                retn
DrvFromTxt_ret  endp

; ---------------------------------------------------------------------------

$NameTrans:                             ; DATA XREF: DOSCODE:4092↑o
                                        ; DOSCODE:4101↑o
                push    ds
                push    si
                push    es
                push    di
                push    cx
                mov     ch, 16h
                call    SetAttrib
                mov     di, 3BEh
                call    TransPath
                pop     cx
                pop     di
                pop     es
                pop     si
                pop     ds
                jnb     short loc_C147
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------

loc_C147:                               ; CODE XREF: DOSCODE:C142↑j
                mov     si, 3BEh
                push    ss
                pop     ds
                call    FStrCpy
                jmp     SYS_RET_OK

; =============== S U B R O U T I N E =======================================


DriveFromText   proc near               ; CODE XREF: DOSCODE:4F6F↑p
                                        ; TransPathSet+2C↑p ...
                xor     al, al          ; 0
                cmp     byte ptr [si], 0
                jz      short DrvFromTxt_ret
                cmp     byte ptr [si+1], 3Ah ; ':'
                jnz     short DrvFromTxt_ret
                lodsw
                or      al, 20h         ; to lowercase
                sub     al, 60h
                jnz     short DrvFromTxt_ret ; al = drv number
                mov     al, 0FFh
                retn
DriveFromText   endp


; =============== S U B R O U T I N E =======================================


sub_C169        proc near               ; CODE XREF: sub_BDBB+31↑p
                                        ; TransPathSet+34↑p ...
                inc     al

loc_C16B:                               ; CODE XREF: sub_C0A6+42↑p
                add     al, 40h ; '@'
                mov     ah, 3Ah ; ':'
                stosw

locret_C170:                            ; CODE XREF: sub_C171+6↓j
                retn
sub_C169        endp


; =============== S U B R O U T I N E =======================================


sub_C171        proc near               ; CODE XREF: TransPathSet+12E↑p
                                        ; sub_C0A6+27↑p
                call    DStrLen
                dec     cx
                repe cmpsb
                jnz     short locret_C170
                push    ax
                mov     al, [si-1]
                call    PATHCHRCMP
                jz      short loc_C188
                mov     al, es:[di]
                call    sub_BFFD

loc_C188:                               ; CODE XREF: sub_C171+F↑j
                pop     ax
                retn
sub_C171        endp


; =============== S U B R O U T I N E =======================================


sub_C18A        proc near               ; CODE XREF: sub_BF96:loc_BFB9↑p
                                        ; sub_C018+75↑p ...
                lodsb
                call    sub_BFFD
                jnz     short sub_C18A
                call    PATHCHRCMP
                retn
sub_C18A        endp


; =============== S U B R O U T I N E =======================================


$OPEN           proc near               ; CODE XREF: DOSCODE:57B3↑p
                                        ; DOSCODE:ADE6↑p ...
                xor     ah, ah

$Open2:                                 ; CODE XREF: DOSCODE:loc_C50A↓p
                mov     ch, 16h
                call    SetAttrib
                mov     cx, offset DOS_OPEN
                push    ax

AccessFile:                             ; CODE XREF: $CreateNewFile-105↓j
                call    ECritDisk
                call    SFNFree
                call    LCritDisk
                jb      short OpenFailJ
                mov     ss:SFN, bx
                mov     word ptr ss:THISSFT, di
                mov     word ptr ss:THISSFT+2, es
                call    JFNFree

OpenFailJ:                              ; CODE XREF: $OPEN+14↑j
                jb      short loc_C1F2
                mov     ss:5AEh, di
                mov     word ptr ss:5B0h, es
                mov     ss:5ACh, bx
                mov     bx, ss:5AAh
                mov     si, dx
                mov     es:[di], bl
                mov     di, 3BEh
                push    cx
                call    TransPath
                pop     bx
                lds     si, ss:59Eh
                jb      short loc_C24D
                cmp     byte ptr ss:57Ah, 0FFh
                jz      short loc_C1F6
                mov     al, 2
                jmp     short loc_C24D
; ---------------------------------------------------------------------------

loc_C1F2:                               ; CODE XREF: $OPEN:OpenFailJ↑j
                sti
                pop     cx
                jmp     short loc_C25A
; ---------------------------------------------------------------------------

loc_C1F6:                               ; CODE XREF: $OPEN+58↑j
                pop     ax
                xor     cx, cx
                cmp     bx, 71BBh
                mov     [si+2], cx
                mov     [si+33h], cx
                jnz     short loc_C20E
                test    al, 80h
                jz      short loc_C20E
                and     al, 7Fh
                mov     cx, 1000h

loc_C20E:                               ; CODE XREF: $OPEN+6F↑j
                                        ; $OPEN+73↑j
                push    di
                push    es
                push    ds
                pop     es
                push    si
                pop     di
                call    sub_71A7
                pop     es
                pop     di
                push    ss
                pop     ds
                push    cx
                call    bx
                pop     cx
                lds     si, ds:59Eh
                jb      short loc_C246
                mov     word ptr [si], 1
                or      [si+5], cx
                push    ds
                pop     es
                mov     di, si
                call    sub_8A90
                mov     ax, ss:5ACh
                call    dword ptr ss:0C0h
                mov     word ptr ss:5AAh, 0FFFFh
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

loc_C246:                               ; CODE XREF: $OPEN+8F↑j
                cmp     ax, 57h ; 'W'
                jnz     short loc_C24E
                jmp     short loc_C25A
; ---------------------------------------------------------------------------

loc_C24D:                               ; CODE XREF: $OPEN+50↑j
                                        ; $OPEN+5C↑j
                pop     bx

loc_C24E:                               ; CODE XREF: $OPEN+B5↑j
                mov     word ptr [si], 0
                lds     si, ss:5AEh
                mov     byte ptr [si], 0FFh

loc_C25A:                               ; CODE XREF: $OPEN+60↑j
                                        ; $OPEN+B7↑j
                mov     word ptr ss:5AAh, 0FFFFh
                cmp     word ptr ss:324h, 25h ; '%'
                jnz     short loc_C26C
                jmp     From_GetSet
; ---------------------------------------------------------------------------

loc_C26C:                               ; CODE XREF: $OPEN+D3↑j
                                        ; DOSCODE:C29E↓j ...
                jmp     SYS_RET_ERR
$OPEN           endp


; =============== S U B R O U T I N E =======================================


$CREAT          proc near               ; CODE XREF: DOSCODE:C4D9↓p
                                        ; DOSCODE:C534↓p
                                        ; DATA XREF: ...
                push    cx
                mov     cx, offset DOS_CREATE
$CREAT          endp ; sp-analysis failed

; START OF FUNCTION CHUNK FOR $CreateNewFile

AccessSet:                              ; CODE XREF: $CreateNewFile+4↓j
                mov     ss:SATTRIB, 6
                jmp     AccessFile
; END OF FUNCTION CHUNK FOR $CreateNewFile
; ---------------------------------------------------------------------------

$CHMOD:                                 ; DATA XREF: DOSCODE:4058↑o
                cmp     al, 0FFh
                jnz     short loc_C2A0
                cmp     bp, 5053h
                jnz     short loc_C29C
                mov     ah, cl
                mov     word ptr ss:1154h, 80h
                cmp     cl, 39h ; '9'
                jnz     short loc_C297
                jmp     loc_67B7
; ---------------------------------------------------------------------------

loc_C297:                               ; CODE XREF: DOSCODE:C292↑j
                cmp     cl, 56h ; 'V'
                jz      short rename1

loc_C29C:                               ; CODE XREF: DOSCODE:C284↑j
                mov     al, 1
                jmp     short loc_C26C
; ---------------------------------------------------------------------------

loc_C2A0:                               ; CODE XREF: DOSCODE:C27E↑j
                mov     di, offset OPENBUF
                push    ax
                push    cx
                mov     si, dx
                call    TransPathSet
                pop     cx
                pop     ax
                jb      short NotFound
                push    ss
                pop     ds
                cmp     byte ptr ds:57Ah, 0FFh
                jnz     short NotFound
                mov     byte ptr ds:56Dh, 16h
                sub     al, 1
                jb      short loc_C2C9
                jz      short loc_C2D7
                call    sub_51CA
                mov     al, 1

loc_C2C7:                               ; CODE XREF: DOSCODE:loc_C2E2↓j
                jmp     short loc_C26C
; ---------------------------------------------------------------------------

loc_C2C9:                               ; CODE XREF: DOSCODE:C2BE↑j
                call    sub_6F82
                jb      short loc_C2E2
                call    Get_User_Stack
                mov     [si+4], ax

loc_C2D4:                               ; CODE XREF: DOSCODE:UnLinkOK↓j
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

loc_C2D7:                               ; CODE XREF: DOSCODE:C2C0↑j
                mov     ax, cx
                call    sub_6FE3
                jb      short loc_C2E2
                jmp     short UnLinkOK
; ---------------------------------------------------------------------------

NotFound:                               ; CODE XREF: DOSCODE:C2AC↑j
                                        ; DOSCODE:C2B5↑j ...
                mov     al, 3

loc_C2E2:                               ; CODE XREF: DOSCODE:C2CC↑j
                                        ; DOSCODE:C2DC↑j ...
                jmp     short loc_C2C7
; ---------------------------------------------------------------------------

$UNLINK:                                ; DATA XREF: DOSCODE:4054↑o
                push    cx
                mov     si, dx
                mov     di, offset OPENBUF
                call    TransPathSet
                pop     cx
                jb      short NotFound
                cmp     ss:CMETA, 0FFh
                jnz     short NotFound
                push    ss
                pop     ds
                mov     ch, 6
                call    SetAttrib
                call    DOS_DELETE

UnlinkE:                                ; CODE XREF: DOSCODE:C37A↓j
                jb      short loc_C2E2

UnLinkOK:                               ; CODE XREF: DOSCODE:C2DE↑j
                                        ; DOSCODE:C37C↓j
                jmp     short loc_C2D4
; ---------------------------------------------------------------------------

$RENAME:                                ; DATA XREF: DOSCODE:407E↑o
                mov     ss:word_1154, 43h ; 'C'

rename1:                                ; CODE XREF: DOSCODE:C29A↑j
                push    cx
                push    ds
                push    dx
                push    es
                pop     ds
                mov     si, di
                mov     di, offset RENBUF
                call    TransPathSet
                push    ss:WFP_START
                pop     ss:REN_WFP
                pop     si
                pop     ds
                pop     cx

epjc2:                                  ; CODE XREF: DOSCODE:C339↓j
                jb      short NotFound
                cmp     ss:CMETA, 0FFh
                jnz     short NotFound
                push    cx
                mov     di, offset OPENBUF
                call    TransPathSet
                pop     cx
                jb      short epjc2
                push    ss
                pop     ds
                cmp     ds:CMETA, 0FFh
                jb      short NotFound
                les     di, ds:THISCDS
                push    di
                push    es
                mov     di, offset OPENBUF
                push    ss
                pop     es
                xor     al, al

rnloop:                                 ; CODE XREF: DOSCODE:C35D↓j
                call    GetCDSFromDrv
                jb      short dorn
                call    StrCmp
                jz      short rnerr
                inc     al
                jmp     short rnloop
; ---------------------------------------------------------------------------

rnerr:                                  ; CODE XREF: DOSCODE:C359↑j
                pop     ax
                pop     ax
                mov     al, 10h
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------

dorn:                                   ; CODE XREF: DOSCODE:C354↑j
                pop     word ptr ss:THISCDS+2
                pop     word ptr ss:THISCDS
                push    ss
                pop     ds
                mov     ch, 16h
                call    SetAttrib
                call    DOS_RENAME
                jb      short UnlinkE
                jmp     short UnLinkOK

; =============== S U B R O U T I N E =======================================


$CreateNewFile  proc near               ; CODE XREF: DOSCODE:C3F2↓p
                                        ; DOSCODE:C4B7↓p
                                        ; DATA XREF: ...

; FUNCTION CHUNK AT C273 SIZE 00000009 BYTES

                push    cx
                mov     cx, offset DOS_Create_New
                jmp     AccessSet
$CreateNewFile  endp


; =============== S U B R O U T I N E =======================================


BinToAscii      proc near               ; CODE XREF: DOSCODE:C3E0↓p
                                        ; DOSCODE:C3E5↓p
                push    ax
                xchg    ah, al
                aam     10h
                add     ax, 4141h       ; 'AA'
                stosw
                pop     ax
                aam     10h
                add     ax, 4141h
                stosw
                retn
BinToAscii      endp

; ---------------------------------------------------------------------------

$CreateTempFile:                        ; DATA XREF: DOSCODE:4086↑o
                push    bp
                mov     bp, sp
                sub     sp, 10
                test    cx, 0FFD8h
                jz      short OKatts
                mov     ax, 5
                jmp     short SETTMPERR
; ---------------------------------------------------------------------------

OKatts:                                 ; CODE XREF: DOSCODE:C3A0↑j
                mov     [bp-0Ah], cx
                mov     [bp-8], dx
                mov     word ptr [bp-6], ds
                mov     word ptr [bp-2], ds
                push    ds
                pop     es
                mov     di, dx
                mov     cx, di
                neg     cx
                or      cx, cx
                jnz     short loc_C3C0
                dec     cx

loc_C3C0:                               ; CODE XREF: DOSCODE:C3BD↑j
                xor     ax, ax
                repne scasb
                dec     di
                mov     al, es:[di-1]
                call    PATHCHRCMP
                jz      short loc_C3D1
                mov     al, 5Ch ; '\'
                stosb

loc_C3D1:                               ; CODE XREF: DOSCODE:C3CC↑j
                mov     [bp-4], di

loc_C3D4:                               ; CODE XREF: DOSCODE:C3FA↓j
                                        ; DOSCODE:C40E↓j ...
                push    ss
                pop     ds
                push    bp
                call    READTIME
                pop     bp
                les     di, [bp-4]
                mov     ax, cx
                call    BinToAscii
                mov     ax, dx
                call    BinToAscii
                xor     al, al
                stosb
                lds     dx, [bp-8]
                mov     cx, [bp-0Ah]
                push    bp
                call    $CreateNewFile
                pop     bp
                jnb     short loc_C423
                cmp     al, 50h ; 'P'
                jz      short loc_C3D4
                cmp     al, 5
                jnz     short SETTMPERR
                mov     al, ss:324h
                cmp     al, 41h ; 'A'
                jz      short SETTMPERR
                cmp     al, 53h ; 'S'
                jz      short SETTMPERR
                cmp     al, 50h ; 'P'
                jz      short loc_C3D4
                les     di, ss:5A2h
                cmp     di, 0FFFFh
                jz      short loc_C3D4
                test    word ptr es:[di+43h], 8000h
                jnz     short loc_C3D4

SETTMPERR:                              ; CODE XREF: DOSCODE:C3A5↑j
                                        ; DOSCODE:C3FE↑j ...
                stc

loc_C423:                               ; CODE XREF: DOSCODE:C3F6↑j
                mov     sp, bp
                pop     bp
                jb      short CreateFail
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

CreateFail:                             ; CODE XREF: DOSCODE:C426↑j
                                        ; DOSCODE:C496↓j
                jmp     SYS_RET_ERR

; =============== S U B R O U T I N E =======================================


SetAttrib       proc near               ; CODE XREF: DOSCODE:C134↑p
                                        ; $OPEN+4↑p ...
                cmp     byte ptr ss:572h, 0
                jnz     short loc_C438
                mov     cl, ch

loc_C438:                               ; CODE XREF: SetAttrib+6↑j
                mov     ss:56Dh, cl
                retn
SetAttrib       endp

; ---------------------------------------------------------------------------

$Extended_Open:                         ; DATA XREF: DOSCODE:40AA↑o
                mov     ss:EXTOPEN_FLAG, dx
                mov     ss:EXTOPEN_IO_MODE, 0
                test    dh, 0FEh
                jnz     short ext_inval2
                mov     ah, dl
                cmp     dl, 0
                jz      short ext_inval2
                and     dl, 0Fh
                cmp     dl, 2
                ja      short ext_inval2
                and     ah, 0F0h
                cmp     ah, 10h
                ja      short ext_inval2
                mov     ss:SAVE_ES, es
                mov     ss:SAVE_DI, di
                push    ss:EXTOPEN_FLAG
                pop     ss:SAVE_DX
                mov     ss:SAVE_CX, cx
                mov     ss:SAVE_BX, bx
                mov     ss:SAVE_DS, ds
                mov     ss:SAVE_SI, si
                mov     dx, si
                mov     ax, bx
                jmp     short goopen2
; ---------------------------------------------------------------------------

ext_inval2:                             ; CODE XREF: DOSCODE:C44D↑j
                                        ; DOSCODE:C454↑j ...
                mov     al, 1
                jmp     short CreateFail
; ---------------------------------------------------------------------------

goopen2:                                ; CODE XREF: DOSCODE:C492↑j
                test    bh, 20h
                jz      short loc_C4A3
                or      byte ptr ss:5F6h, 2

loc_C4A3:                               ; CODE XREF: DOSCODE:C49B↑j
                or      byte ptr ss:5F6h, 1
                mov     byte ptr ss:5F5h, 0
                cmp     byte ptr ss:5F4h, 10h
                jnz     short loc_C4D1
                call    $CreateNewFile
                jb      short locret_C4FF
                cmp     byte ptr ss:5F6h, 0
                jz      short loc_C4CE
                mov     word ptr ss:5F4h, 2
                jmp     loc_C551
; ---------------------------------------------------------------------------

loc_C4CE:                               ; CODE XREF: DOSCODE:C4C2↑j
                                        ; DOSCODE:C4E4↓j
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

loc_C4D1:                               ; CODE XREF: DOSCODE:C4B5↑j
                test    byte ptr ss:5F4h, 1
                jnz     short loc_C500
                call    $CREAT
                jb      short locret_C4FF
                cmp     byte ptr ss:5F6h, 0
                jz      short loc_C4CE
                mov     word ptr ss:5F4h, 2
                test    byte ptr ss:5F6h, 4
                jnz     short loc_C551
                mov     word ptr ss:5F4h, 3
                jmp     short loc_C551
; ---------------------------------------------------------------------------

loc_C4FE:                               ; CODE XREF: DOSCODE:C515↓j
                                        ; DOSCODE:C51A↓j
                stc

locret_C4FF:                            ; CODE XREF: DOSCODE:C4BA↑j
                                        ; DOSCODE:C4DC↑j
                retn
; ---------------------------------------------------------------------------

loc_C500:                               ; CODE XREF: DOSCODE:C4D7↑j
                cmp     byte ptr ss:572h, 0
                jz      short loc_C50A
                mov     cl, ch

loc_C50A:                               ; CODE XREF: DOSCODE:C506↑j
                call    $Open2
                jnb     short loc_C542
                cmp     byte ptr ss:5F6h, 0
                jz      short loc_C4FE
                cmp     ax, 2
                jnz     short loc_C4FE
                test    word ptr ss:5F4h, 10h
                jnz     short loc_C528

loc_C525:                               ; CODE XREF: DOSCODE:C537↓j
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------

loc_C528:                               ; CODE XREF: DOSCODE:C523↑j
                mov     cx, ss:5FFh
                lds     si, ss:603h
                mov     dx, si
                call    $CREAT
                jb      short loc_C525
                mov     word ptr ss:5F4h, 2
                jmp     short loc_C551
; ---------------------------------------------------------------------------

loc_C542:                               ; CODE XREF: DOSCODE:C50D↑j
                cmp     byte ptr ss:5F6h, 0
                jz      short loc_C55F
                mov     word ptr ss:5F4h, 1

loc_C551:                               ; CODE XREF: DOSCODE:C4CB↑j
                                        ; DOSCODE:C4F3↑j ...
                push    ax
                call    Get_User_Stack
                mov     ax, ss:5F4h
                mov     [si+4], ax
                pop     ax
                mov     [si], ax

loc_C55F:                               ; CODE XREF: DOSCODE:C548↑j
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

$LockOper:                              ; DATA XREF: DOSCODE:408A↑o
                cmp     al, 1
                ja      short loc_C572
                push    di
                call    SFFromHandle
                jnb     short loc_C579
                pop     di
                mov     al, 6

loc_C56F:                               ; CODE XREF: DOSCODE:loc_C577↓j
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------

loc_C572:                               ; CODE XREF: DOSCODE:C564↑j
                call    sub_51CA
                mov     al, 1

loc_C577:                               ; CODE XREF: DOSCODE:C5AB↓j
                jmp     short loc_C56F
; ---------------------------------------------------------------------------

loc_C579:                               ; CODE XREF: DOSCODE:C56A↑j
                mov     bx, ax
                mov     bp, 3A9h
                mov     [bp+0], dx
                mov     [bp+2], cx
                pop     word ptr [bp+4]
                mov     [bp+6], si
                mov     cx, 1
                push    ss
                pop     ds
                mov     dx, bp
                test    al, 1
                jnz     short loc_C597
                jmp     short loc_C5B3
; ---------------------------------------------------------------------------

loc_C597:                               ; CODE XREF: DOSCODE:C593↑j
                test    byte ptr es:[di+6], 80h
                jz      short loc_C5A5
                mov     ax, 110Ah
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
                                        ; BX = file handle, CX:DX = starting offset, SI = high word of size
                                        ; STACK: WORD low word of size, ES:DI -> SFT
                                        ; SFT DPB field -> DPB of drive containing file, SS = DOS CS
                                        ; Return: CF set error
                jmp     short loc_C5A9
; ---------------------------------------------------------------------------

loc_C5A5:                               ; CODE XREF: DOSCODE:C59C↑j
                call    dword ptr ds:0ACh

loc_C5A9:                               ; CODE XREF: DOSCODE:C5A3↑j
                                        ; DOSCODE:C5BF↓j ...
                jnb     short loc_C5AD
                jmp     short loc_C577
; ---------------------------------------------------------------------------

loc_C5AD:                               ; CODE XREF: DOSCODE:loc_C5A9↑j
                mov     ax, ds:60Ch
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

loc_C5B3:                               ; CODE XREF: DOSCODE:C595↑j
                test    byte ptr es:[di+6], 80h
                jz      short loc_C5C1
                mov     ax, 110Ah
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
                                        ; BX = file handle, CX:DX = starting offset, SI = high word of size
                                        ; STACK: WORD low word of size, ES:DI -> SFT
                                        ; SFT DPB field -> DPB of drive containing file, SS = DOS CS
                                        ; Return: CF set error
                jmp     short loc_C5A9
; ---------------------------------------------------------------------------

loc_C5C1:                               ; CODE XREF: DOSCODE:C5B8↑j
                call    dword ptr ds:0A8h
                jmp     short loc_C5A9

; =============== S U B R O U T I N E =======================================


sub_C5C7        proc near               ; CODE XREF: sub_802E+13↑p
                                        ; sub_804D+D↑p
                mov     bx, ds:1Ah

loc_C5CB:                               ; CODE XREF: sub_C5C7+12↓j
                push    bx
                push    ax
                call    dword ptr ds:0B0h
                pop     ax
                pop     bx
                jnb     short locret_C5DC
                call    Idle
                dec     bx
                jnz     short loc_C5CB
                stc

locret_C5DC:                            ; CODE XREF: sub_C5C7+C↑j
                                        ; sub_C5DD+3C↓j
                retn
sub_C5C7        endp


; =============== S U B R O U T I N E =======================================


sub_C5DD        proc near               ; CODE XREF: sub_81A8:loc_81C2↑p
                push    ds
                push    es
                push    di
                push    cx
                mov     ax, 21h ; '!'
                mov     byte ptr ds:34Bh, 18h
                les     bp, ds:58Ah
                mov     di, 1
                mov     cx, di
                xor     dx, dx
                cmp     es:[bp+0Fh], dx
                jnz     short loc_C608
                mov     dx, es:[bp+2Bh]
                mov     ds:607h, dx
                mov     dx, es:[bp+29h]
                jmp     short loc_C610
; ---------------------------------------------------------------------------

loc_C608:                               ; CODE XREF: sub_C5DD+1B↑j
                mov     ds:607h, dx
                mov     dx, es:[bp+0Bh]

loc_C610:                               ; CODE XREF: sub_C5DD+29↑j
                call    HARDERR
                pop     cx
                pop     di
                pop     es
                pop     ds
                cmp     al, 1
                jz      short locret_C5DC
                stc
                retn
sub_C5DD        endp


; =============== S U B R O U T I N E =======================================


sub_C61D        proc near               ; CODE XREF: DOSCODE:5D1D↑p
                                        ; sub_5DAE:loc_5DC3↑p ...
                push    ds
                mov     ds, cs:DosDSeg
                cmp     byte ptr ds:303h, 0
                pop     ds
                retn
sub_C61D        endp


; =============== S U B R O U T I N E =======================================


sub_C62A        proc near               ; CODE XREF: sub_72DE+8↑p
                                        ; ShareEnter+10↓p
                call    dword ptr ds:94h

locret_C62E:                            ; CODE XREF: SHARE_VIOLATION+3D↓j
                retn
sub_C62A        endp


; =============== S U B R O U T I N E =======================================


SHARE_VIOLATION proc near               ; CODE XREF: SHARE_ERROR:loc_72D4↑p
                                        ; ShareEnter+1B↓p
                                        ; DATA XREF: ...
                push    ds
                push    es
                push    di
                mov     byte ptr ds:575h, 0
                mov     byte ptr ds:34Bh, 18h
                les     bp, ds:58Ah
                mov     di, 1
                mov     cx, di
                cmp     word ptr es:[bp+0Fh], 0
                jz      short loc_C658
                mov     word ptr ds:607h, 0
                mov     dx, es:[bp+11h]
                jmp     short loc_C664
; ---------------------------------------------------------------------------

loc_C658:                               ; CODE XREF: SHARE_VIOLATION+1B↑j
                mov     dx, es:[bp+2Bh]
                mov     ds:607h, dx
                mov     dx, es:[bp+29h]

loc_C664:                               ; CODE XREF: SHARE_VIOLATION+27↑j
                call    HARDERR
                pop     di
                pop     es
                pop     ds
                cmp     al, 1
                jz      short locret_C62E
                stc
                retn
SHARE_VIOLATION endp


; =============== S U B R O U T I N E =======================================


ShareEnd        proc near               ; CODE XREF: DOSCODE:6461↑p
                                        ; REN_DEL_Check+74↑p ...
                call    ds:MFTClose
                retn
ShareEnd        endp


; =============== S U B R O U T I N E =======================================


ShareEnter      proc near               ; CODE XREF: REN_DEL_Check+66↑p
                                        ; sub_951A+7C↑p ...
                push    cx

loc_C676:                               ; CODE XREF: ShareEnter+1E↓j
                mov     cx, ds:1Ah

loc_C67A:                               ; CODE XREF: ShareEnter+19↓j
                les     di, ds:59Eh
                xor     ax, ax
                push    cx
                mov     es:[di+33h], ax
                call    sub_C62A
                pop     cx
                jnb     short loc_C695
                call    Idle
                loop    loc_C67A
                call    SHARE_VIOLATION
                jnb     short loc_C676

loc_C695:                               ; CODE XREF: ShareEnter+14↑j
                pop     cx
                retn
ShareEnter      endp


; =============== S U B R O U T I N E =======================================


sub_C697        proc near               ; CODE XREF: DOSCODE:loc_ADA6↑p
                mov     si, dx
                test    word ptr [si+2], 1
                jz      short loc_C6B8
                mov     ax, [si+8]
                add     ax, 10h
                mov     es, ax
                mov     cx, [si+0Ah]
                mov     ax, [si+0Ch]
                call    word ptr ss:0D67h
                call    word ptr ss:133Eh

loc_C6B8:                               ; CODE XREF: sub_C697+7↑j
                test    word ptr [si+2], 2
                jnz     short loc_C6D7
                push    ds
                push    si
                lds     si, [si+4]
                call    sub_B35C
                call    sub_B370
                pop     si
                pop     ds
                mov     es, word ptr [si+8]
                mov     ax, ss:0EBBh
                mov     es:40h, ax

loc_C6D7:                               ; CODE XREF: sub_C697+26↑j
                cmp     byte ptr ss:0D66h, 0
                jz      short loc_C6FF
                mov     ax, [si+8]
                or      byte ptr ss:86h, 4
                test    word ptr [si+2], 1
                jnz     short loc_C6F6
                push    ds
                mov     ds, ax
                call    IsCopyProt
                pop     ds

loc_C6F6:                               ; CODE XREF: sub_C697+56↑j
                inc     byte ptr ss:85h
                mov     ss:63h, ax

loc_C6FF:                               ; CODE XREF: sub_C697+46↑j
                xor     ax, ax
                retn
sub_C697        endp

; ---------------------------------------------------------------------------
                db 0FAh
                db 0E4h
                db  21h ; !
                db  60h ; `
                db  33h ; 3
                db 0C0h
                db 0E6h
                db  43h ; C
                db  8Bh
                db  16h
                db 0B0h
                db  0Eh
                db 0E6h
                db  37h ; 7
                db  33h ; 3
                db 0C0h
                db 0E6h
                db 0F2h
                db  0Fh
                db  20h
                db 0C0h
                db  0Fh
                db  22h ; "
                db 0C0h
                db 0EAh
                db  66h ; f
                db  50h ; P
                db  51h ; Q
                db  0Fh
                db  20h
                db 0C0h
                db  8Eh
                db 0D3h
                db  59h ; Y
                db  66h ; f
                db  58h ; X
                db  93h
                db  58h ; X
                db  8Bh
                db 0CCh
                db 0B8h
                db  0Ch
                db 0DEh
                db 0CDh
                db  67h ; g
                db  8Bh
                db 0E1h
                db 0FFh
                db 0E3h
                db  93h
                db  58h ; X
                db  8Bh
                db 0CCh
                db  2Eh ; .
                db  66h ; f
                db 0A3h
                db    0
                db    0
                db  2Eh ; .
                db  66h ; f
                db  89h
                db  36h ; 6
                db    0
                db    0
                db  8Bh
                db 0E1h
                db  2Eh ; .
                db  66h ; f
                db 0A1h
                db    0
                db    0
                db  2Eh ; .
                db  66h ; f
                db  8Bh
                db  36h ; 6
                db    0
                db    0
                db 0FFh
                db 0E3h
                db 0FAh, 52h, 51h
                db 0B8h, 0Ch, 0DEh, 66h, 26h, 0FFh, 1Eh
                db 59h, 5Ah, 5Bh
                db 0FAh, 66h, 50h, 66h, 53h, 66h, 51h, 66h, 52h
                db 66h, 5Ah, 66h, 59h, 66h, 5Bh, 66h, 58h, 5Bh
                db 60h, 6, 1Eh, 0B8h, 0, 0, 8Eh, 0D8h
                db 1Fh, 7, 61h
                db 66h, 60h, 6, 1Eh
                db 1Fh, 7, 66h, 61h, 0C3h
                dw 0C714h
                dw 3
                dw 0C717h
                dw 4
                dw 20h
                dw 0C726h
                dw 4
                dw 0C72Ah
                dw 9
                dw 80h
                dw 0C751h
                dw 3
                dw 0C754h
                dw 7
                dw 80h
                dw 0C770h
                dw 4
                dw 0C778h
                dw 3
                dw 80h
; ---------------------------------------------------------------------------

Rational386Patch:                       ; DATA XREF: DOSCODE:CD7E↓o
                cmp     word ptr es:0, 395
                jnb     short locret_C7D7
                cmp     word ptr es:0Ch, 20h ; ' '
                jnz     short locret_C7D7
                push    ax
                mov     ax, 18h
                cmp     es:18h, ax
                jnz     short loc_C7D6
                cmp     es:1Ch, ax
                jnz     short loc_C7D6
                cmp     es:24h, ax
                jz      short rp3Maybe

loc_C7D6:                               ; CODE XREF: DOSCODE:C7C6↑j
                                        ; DOSCODE:C7CD↑j
                pop     ax

locret_C7D7:                            ; CODE XREF: DOSCODE:C7B3↑j
                                        ; DOSCODE:C7BB↑j
                retn
; ---------------------------------------------------------------------------

rp3Maybe:                               ; CODE XREF: DOSCODE:C7D4↑j
                cld
                pusha
                push    es
                push    ds
                sub     sp, 6
                mov     bp, sp
                push    cs
                pop     ds
                assume ds:DOSCODE
                mov     ax, es:0
                mov     [bp+0], ax
                call    sub_C986
                jnz     short loc_C810
                mov     cx, 4500h
                mov     [bp+2], cx
                mov     es, word ptr es:20h
                mov     si, 0C702h
                mov     dx, 0Ah
                call    ScanCodeSeq
                jz      short loc_C813
                mov     si, 0C70Ch
                mov     dx, 8
                call    ScanCodeSeq
                jz      short loc_C813

loc_C810:                               ; CODE XREF: DOSCODE:C7ED↑j
                jmp     loc_C911
; ---------------------------------------------------------------------------

loc_C813:                               ; CODE XREF: DOSCODE:C803↑j
                                        ; DOSCODE:C80E↑j
                mov     [bp+4], di
                cmp     word ptr [bp+0], 17Dh
                jnb     short loc_C865
                mov     bx, 0C784h
                call    FindBadCode
                jb      short loc_C865
                push    di
                mov     di, si
                mov     dx, 3
                cmp     byte ptr es:[di-1], 51h ; 'Q'
                jnz     short loc_C834
                dec     di
                inc     dx

loc_C834:                               ; CODE XREF: DOSCODE:C830↑j
                mov     si, 0C71Bh
                mov     cx, 6
                call    GenPatch
                pop     di
                cmp     byte ptr es:[di-1], 59h ; 'Y'
                jnz     short loc_C84A
                mov     byte ptr es:[di-1], 90h

loc_C84A:                               ; CODE XREF: DOSCODE:C843↑j
                mov     ax, [bp+4]
                mov     es:[di+4], ax
                push    di
                mov     si, 0C721h
                mov     cx, 5
                call    CopyPatch
                pop     bx
                add     bx, 8
                call    GenJump
                mov     [bp+4], di

loc_C865:                               ; CODE XREF: DOSCODE:C81B↑j
                                        ; DOSCODE:C823↑j
                mov     bx, 0C78Eh
                call    FindBadCode
                jb      short loc_C8AF
                push    word ptr [bp+4]
                push    di
                mov     di, si
                mov     dx, 4
                mov     si, 0C733h
                mov     cx, 0Fh
                call    GenPatch
                pop     di
                add     di, 5
                mov     bx, [bp+4]
                push    bx
                call    GenJump
                mov     si, 0C742h
                mov     cx, 0Fh
                call    CopyPatch
                pop     di
                pop     si
                mov     ax, [bp+4]
                mov     es:[si+7], ax
                mov     es:[di+5], ax
                add     ax, 4
                mov     es:[si+0Dh], ax
                mov     es:[di+0Bh], ax
                add     word ptr [bp+4], 8

loc_C8AF:                               ; CODE XREF: DOSCODE:C86B↑j
                mov     bx, 0C798h
                call    FindBadCode
                jb      short loc_C8E3
                add     di, 9
                push    si
                mov     si, 0C75Bh
                mov     dx, 3
                call    ScanCodeSeq_di
                pop     si
                jnz     short loc_C8E3
                push    di
                mov     di, si
                mov     dx, 3
                mov     si, 0C75Eh
                mov     cx, 9
                call    GenPatch
                pop     di
                mov     dx, 3
                mov     si, 0C767h
                mov     cx, 9
                call    GenPatch

loc_C8E3:                               ; CODE XREF: DOSCODE:C8B5↑j
                                        ; DOSCODE:C8C5↑j
                cmp     word ptr [bp+0], 168h
                jbe     short loc_C911
                mov     bx, 0C7A2h
                call    FindBadCode
                jb      short loc_C911
                push    di
                mov     di, si
                mov     dx, 3
                mov     si, 0C77Bh
                mov     cx, 4
                call    GenPatch
                pop     di
                mov     bx, [bp+4]
                call    GenJump
                mov     si, 0C77Fh
                mov     cx, 5
                call    CopyPatch

loc_C911:                               ; CODE XREF: DOSCODE:loc_C810↑j
                                        ; DOSCODE:C8E8↑j ...
                add     sp, 6
                pop     ds
                assume ds:nothing
                pop     es
                popa
                pop     ax
                retn

; =============== S U B R O U T I N E =======================================


FindBadCode     proc near               ; CODE XREF: DOSCODE:C820↑p
                                        ; DOSCODE:C868↑p ...
                mov     cx, [bp+2]
                mov     si, [bx]
                mov     dx, [bx+2]
                call    ScanCodeSeq
                jnz     short fbc_error
                push    di
                mov     si, [bx+4]
                mov     dx, [bx+6]
                call    ScanCodeSeq_di
                pop     si
                jnz     short fbc_error
                mov     ax, di
                sub     ax, si
                jb      short fbc_error
                cmp     ax, [bx+8]
                ja      short fbc_error
                clc
                retn
; ---------------------------------------------------------------------------

fbc_error:                              ; CODE XREF: FindBadCode+B↑j
                                        ; FindBadCode+18↑j ...
                stc
                retn
FindBadCode     endp


; =============== S U B R O U T I N E =======================================


GenPatch        proc near               ; CODE XREF: DOSCODE:C83A↑p
                                        ; DOSCODE:C87C↑p ...
                push    di
                mov     bx, [bp+4]
                call    GenJump
                call    CopyPatch
                pop     bx
                add     bx, dx
                call    GenJump
                mov     [bp+4], di
                retn
GenPatch        endp


; =============== S U B R O U T I N E =======================================


CopyPatch       proc near               ; CODE XREF: DOSCODE:C858↑p
                                        ; DOSCODE:C890↑p ...
                push    cx
                mov     di, [bp+4]
                cld
                rep movsb
                pop     cx
                mov     [bp+4], di
                retn
CopyPatch       endp


; =============== S U B R O U T I N E =======================================


GenJump         proc near               ; CODE XREF: DOSCODE:C85F↑p
                                        ; DOSCODE:C887↑p ...
                mov     al, 0E9h
                stosb
                mov     ax, bx
                sub     ax, di
                sub     ax, 2
                stosw
                retn
GenJump         endp


; =============== S U B R O U T I N E =======================================


ScanCodeSeq     proc near               ; CODE XREF: DOSCODE:C800↑p
                                        ; DOSCODE:C80B↑p ...
                mov     di, 200h

ScanCodeSeq_di:                         ; CODE XREF: DOSCODE:C8C1↑p
                                        ; FindBadCode+14↑p
                push    cx
                sub     cx, dx
                inc     cx

scsagain:                               ; CODE XREF: ScanCodeSeq+14↓j
                push    si
                push    di
                push    cx
                mov     cx, dx
                repe cmpsb
                pop     cx
                pop     di
                pop     si
                jz      short scsfound
                inc     di
                loop    scsagain

scsfound:                               ; CODE XREF: ScanCodeSeq+11↑j
                pop     cx
                retn
ScanCodeSeq     endp


; =============== S U B R O U T I N E =======================================


sub_C986        proc near               ; CODE XREF: DOSCODE:C7EA↑p
                                        ; DOSCODE:CC50↓p
                mov     si, es:2Ah
                mov     bl, 0Ah
                add     si, 3
                call    sub_C9A5
                jnz     short locret_C9A4
                call    sub_C9A5
                jnz     short locret_C9A4
                cmp     byte ptr es:[si], 2Eh ; '.'
                jnz     short locret_C9A4
                dec     si
                call    sub_C9A5

locret_C9A4:                            ; CODE XREF: sub_C986+D↑j
                                        ; sub_C986+12↑j ...
                retn
sub_C986        endp


; =============== S U B R O U T I N E =======================================


sub_C9A5        proc near               ; CODE XREF: sub_C986+A↑p
                                        ; sub_C986+F↑p ...
                div     bl
                add     ah, 30h ; '0'
                dec     si
                cmp     es:[si+1], ah
                mov     ah, 0
                retn
sub_C9A5        endp

; ---------------------------------------------------------------------------

exepatch_start:                         ; DATA XREF: DOSCODE:D013↓o
                push    es
                mov     ax, ds
                sub     ax, dx
                mov     ds, ax
                mov     es, ax
                mov     di, 0Fh
                push    di
                mov     cx, 10h
                mov     al, 0FFh
                repe scasb
                inc     di
                mov     si, di
                pop     di
                pop     ax
                sub     ax, dx
                mov     es, ax

loc_C9CF:                               ; CODE XREF: DOSCODE:CA14↓j
                mov     cx, 204h

loc_C9D2:                               ; CODE XREF: DOSCODE:C9F5↓j
                mov     ax, si
                not     ax
                shr     ax, cl
                jz      short loc_C9ED
                mov     dx, ds
                or      si, 0FFF0h
                sub     dx, ax
                jnb     short loc_C9EB
                neg     dx
                shl     dx, cl
                sub     si, dx
                xor     dx, dx

loc_C9EB:                               ; CODE XREF: DOSCODE:C9E1↑j
                mov     ds, dx
                assume ds:DOSCODE

loc_C9ED:                               ; CODE XREF: DOSCODE:C9D8↑j
                xchg    si, di
                push    ds
                push    es
                pop     ds
                assume ds:nothing
                pop     es
                dec     ch
                jnz     short loc_C9D2
                lodsb
                xchg    ax, dx
                dec     si
                lodsw
                mov     cx, ax
                inc     si
                mov     al, dl
                and     al, 0FEh
                cmp     al, 0B0h
                jnz     short loc_CA0B
                lodsb
                rep stosb
                jmp     short loc_CA11
; ---------------------------------------------------------------------------

loc_CA0B:                               ; CODE XREF: DOSCODE:CA04↑j
                cmp     al, 0B2h
                jnz     short near ptr loc_CA7A+1
                rep movsb

loc_CA11:                               ; CODE XREF: DOSCODE:CA09↑j
                xchg    ax, dx
                test    al, 1
                jz      short loc_C9CF
                nop
                nop
                mov     bx, es
                mov     ax, ds
                sub     ax, dx
                mov     ds, ax
                mov     es, ax
                mov     di, 0Fh
                mov     cx, 10h
                mov     al, 0FFh
                repe scasb
                inc     di
                mov     si, di
                mov     ax, bx
                sub     ax, dx
                mov     es, ax
                mov     di, 0Fh
                mov     cl, 4
                mov     ax, si
                not     ax
                shr     ax, cl
                jz      short loc_CA4B
                mov     dx, ds
                sub     dx, ax
                mov     ds, dx
                assume ds:nothing
                or      si, 0FFF0h

loc_CA4B:                               ; CODE XREF: DOSCODE:CA40↑j
                mov     ax, di
                not     ax
                shr     ax, cl
                jz      short loc_CA5C
                mov     dx, es
                sub     dx, ax
                mov     es, dx
                assume es:nothing
                or      di, 0FFF0h

loc_CA5C:                               ; CODE XREF: DOSCODE:CA51↑j
                mov     bx, es
                mov     ax, ds
                dec     ax
                mov     ds, ax
                assume ds:nothing
                mov     es, ax
                mov     di, 0Fh
                mov     cx, 10h
                mov     al, 0FFh
                repe scasb
                inc     di
                mov     si, di
                mov     ax, bx
                dec     ax
                mov     es, ax
                assume es:nothing
                mov     di, 0Fh

loc_CA7A:                               ; CODE XREF: DOSCODE:CA0D↑j
                mov     cl, 4
                mov     ax, si
                not     ax
                shr     ax, cl
                jz      short loc_CA8E
                mov     dx, ds
                sub     dx, ax
                mov     ds, dx
                assume ds:nothing
                or      si, 0FFF0h

loc_CA8E:                               ; CODE XREF: DOSCODE:CA82↑j
                mov     ax, di
                not     ax
                shr     ax, cl
                jz      short loc_CAA0
                mov     dx, es
                sub     dx, ax
                mov     es, dx
                assume es:nothing
                or      di, 0FFF0h

loc_CAA0:                               ; CODE XREF: DOSCODE:CA94↑j
                mov     bx, es
                mov     ax, ds
                dec     ax
                mov     ds, ax
                assume ds:nothing
                mov     es, ax
                assume es:nothing
                mov     di, 0Fh
                mov     cx, 10h
                mov     al, 0FFh
                repe scasb
                inc     di
                mov     si, di
                mov     ax, bx
                dec     ax
                mov     es, ax
                assume es:nothing
                mov     di, 0Fh
                mov     cl, 4
                mov     ax, si
                not     ax
                shr     ax, cl
                jz      short loc_CAD1
                mov     dx, ds
                sub     dx, ax
                mov     ds, dx
                assume ds:nothing
                or      si, 0FFF0h

loc_CAD1:                               ; CODE XREF: DOSCODE:CAC6↑j
                mov     ax, di
                not     ax
                shr     ax, cl
                jz      short scan_com
                mov     dx, es
                sub     dx, ax
                mov     es, dx
                assume es:nothing
                or      di, 0FFF0h

scan_com:                               ; CODE XREF: DOSCODE:CAD7↑j
                                        ; DATA XREF: sub_CBE2↓o
                lodsb
                mov     dl, al
                dec     si
                lodsw
                mov     cx, ax
                inc     si
                mov     al, dl
                and     al, 0FEh
                cmp     al, 0B0h
                jnz     short loc_CAF8
                lodsb
                rep stosb
                jmp     short loc_CAFE
; ---------------------------------------------------------------------------
                nop

loc_CAF8:                               ; CODE XREF: DOSCODE:CAF0↑j
                cmp     al, 0B2h
                jnz     short near ptr loc_CB66+1
                rep movsb

loc_CAFE:                               ; CODE XREF: DOSCODE:CAF5↑j
                mov     al, dl
                test    al, 1
                call    sub_CB0B
                call    word ptr ss:0D69h
                retn

; =============== S U B R O U T I N E =======================================


sub_CB0B        proc near               ; CODE XREF: DOSCODE:CB02↑p
                push    bx
                mov     bx, es
                cmp     bx, 0FFFh
                jbe     short loc_CB16
                pop     bx
                retn
; ---------------------------------------------------------------------------

loc_CB16:                               ; CODE XREF: sub_CB0B+7↑j
                push    ds
                push    es
                push    ax
                push    cx
                push    si
                push    di
                sub     cx, 2
                jnb     short loc_CB24
                jmp     loc_CBDA
; ---------------------------------------------------------------------------

loc_CB24:                               ; CODE XREF: sub_CB0B+14↑j
                mov     di, cx
                mov     es, ax
                assume es:nothing
                mov     ss:87h, di
                cmp     word ptr es:[di], 4252h
                jz      short loc_CB37
                jmp     loc_CBDA
; ---------------------------------------------------------------------------

loc_CB37:                               ; CODE XREF: sub_CB0B+27↑j
                push    cs
                pop     ds
                assume ds:DOSCODE
                add     di, 6Ch ; 'l'
                call    sub_CBE2
                jnz     short loc_CB63
                mov     si, 0CA18h
                mov     di, ss:87h
                add     di, 28h ; '('
                mov     cl, 44h ; 'D'
                mov     bx, 8Eh
                mov     ax, 0EF4Eh
                call    chk_patchsum
                jb      short loc_CB60
                mov     si, 0C9B2h
                mov     cl, 66h ; 'f'
                rep movsb

loc_CB60:                               ; CODE XREF: sub_CB0B+4C↑j
                jmp     short loc_CBDA
; ---------------------------------------------------------------------------
                nop

loc_CB63:                               ; CODE XREF: sub_CB0B+34↑j
                mov     di, 76h ; 'v'

loc_CB66:                               ; CODE XREF: DOSCODE:CAFA↑j
                call    sub_CBE2
                jnz     short loc_CBA8
                mov     si, 0CA5Ch
                mov     di, 32h ; '2'
                mov     cl, 44h ; 'D'
                mov     bx, 8Ch
                mov     ax, 78B2h
                call    chk_patchsum
                jnb     short loc_CB8E
                mov     si, 0CA5Ch
                mov     cl, 44h ; 'D'
                mov     bx, 81h
                mov     ax, 1C47h
                call    chk_patchsum
                jb      short loc_CBDA

loc_CB8E:                               ; CODE XREF: sub_CB0B+71↑j
                mov     si, 0C9B2h
                mov     cl, 3
                rep movsb
                mov     ax, 4890h
                stosw
                inc     si
                inc     si
                mov     cl, 14h
                rep movsb
                stosw
                inc     si
                inc     si
                mov     cl, 4Bh ; 'K'
                rep movsb
                jmp     short loc_CBDA
; ---------------------------------------------------------------------------

loc_CBA8:                               ; CODE XREF: sub_CB0B+5E↑j
                mov     di, 74h ; 't'
                call    sub_CBE2
                jnz     short loc_CBDA
                mov     si, 0CAA0h
                mov     di, 32h ; '2'
                mov     cl, 42h ; 'B'
                mov     bx, 8Bh
                mov     ax, 4EDEh
                call    chk_patchsum
                jb      short loc_CBDA
                mov     si, 0C9B2h
                mov     cl, 3
                rep movsb
                mov     al, 48h ; 'H'
                stosb
                inc     si
                inc     si
                mov     cl, 14h
                rep movsb
                stosb
                inc     si
                inc     si
                mov     cl, 4Bh ; 'K'
                rep movsb

loc_CBDA:                               ; CODE XREF: sub_CB0B+16↑j
                                        ; sub_CB0B+29↑j ...
                pop     di
                pop     si
                pop     cx
                pop     ax
                pop     es
                pop     ds
                assume ds:nothing
                pop     bx
                retn
sub_CB0B        endp


; =============== S U B R O U T I N E =======================================


sub_CBE2        proc near               ; CODE XREF: sub_CB0B+31↑p
                                        ; sub_CB0B:loc_CB66↑p ...
                mov     si, offset scan_com
                mov     cx, 32
                repe cmpsb
                jz      short ccs_done
                cmp     byte ptr es:[di-1], 56h ; 'V'
                jnz     short ccs_done
                repe cmpsb

ccs_done:                               ; CODE XREF: sub_CBE2+8↑j
                                        ; sub_CBE2+F↑j
                retn
sub_CBE2        endp


; =============== S U B R O U T I N E =======================================


chk_patchsum    proc near               ; CODE XREF: sub_CB0B+49↑p
                                        ; sub_CB0B+6E↑p ...
                push    di
                repe cmpsb
                jnz     short loc_CC14
                mov     di, ss:87h
                mov     cx, bx
                mov     bx, ax
                xor     ax, ax

loc_CC06:                               ; CODE XREF: chk_patchsum+15↓j
                add     ax, es:[di]
                inc     di
                inc     di
                loop    loc_CC06
                pop     di
                cmp     ax, bx
                jnz     short loc_CC14
                clc
                retn
; ---------------------------------------------------------------------------

loc_CC14:                               ; CODE XREF: chk_patchsum+3↑j
                                        ; chk_patchsum+1A↑j
                stc
                retn
chk_patchsum    endp ; sp-analysis failed

; ---------------------------------------------------------------------------
RScanPattern1   db 0, 0, 20h, 0, 0, 0, 40h, 0
                db 1, 0
                db 8Bh, 0Eh, 10h, 0, 90h, 0E2h, 0FEh, 0E8h
                db 8Bh, 0Eh, 10h, 0, 0E2h, 0FEh, 0E8h
; ---------------------------------------------------------------------------

RationalPatch:
                cld
                pusha
                push    es
                push    ds
                mov     di, 0Ah
                push    cs
                pop     ds
                assume ds:DOSCODE
                mov     si, 0CC16h
                mov     cx, 0Ah
                repe cmpsb
                jnz     short loc_CC8C
                mov     ax, es:0
                cmp     ax, 15Ch
                jb      short loc_CC8C
                cmp     ax, 17Fh
                ja      short loc_CC8C
                call    sub_C986
                jnz     short loc_CC8C
                mov     cx, es:16h
                sub     cx, 200h
                mov     es, word ptr es:20h
                mov     si, 0CC20h
                mov     dx, 8
                call    ScanCodeSeq
                jz      short loc_CC79
                mov     si, 0CC28h
                mov     dx, 0Fh
                call    ScanCodeSeq
                jnz     short loc_CC8C

loc_CC79:                               ; CODE XREF: DOSCODE:CC6C↑j
                mov     al, 9Ah
                stosb
                mov     ax, 1126h
                stosw
                mov     ax, ss
                stosw
                mov     cx, dx
                sub     cx, 6
                mov     al, 90h
                rep stosb

loc_CC8C:                               ; CODE XREF: DOSCODE:CC40↑j
                                        ; DOSCODE:CC49↑j ...
                pop     ds
                assume ds:nothing
                pop     es
                popa
                retn
; ---------------------------------------------------------------------------
                db 89h, 26h, 48h, 1
                db 8Ch, 0Eh, 4Ch, 1
                db 0C7h, 6, 4Ah, 1, 0, 1
                db 8Ch, 0Eh, 13h, 1
                db 0B8h, 20h, 1
                db 0BEh, 0, 1

; =============== S U B R O U T I N E =======================================


IsCopyProt      proc near               ; CODE XREF: sub_C697+5B↑p
                cmp     word ptr ds:11Bh, 5343h
                jnz     short CP_done
                cmp     word ptr ds:173h, 5044h
                jnz     short CP_done
                cmp     word ptr ds:146h, 0F413h
                jnz     short CP_done
                cmp     word ptr ds:124h, 8000h
                jnz     short CP_done
                push    cs
                pop     es
                assume es:DOSCODE
                mov     di, 0CC90h
                mov     si, 175h
                mov     cx, 18h
                repe cmpsb
                jnz     short CP_done
                mov     byte ptr ss:85h, 0Ah

CP_done:                                ; CODE XREF: IsCopyProt+6↑j
                                        ; IsCopyProt+E↑j ...
                retn
IsCopyProt      endp

; ---------------------------------------------------------------------------

initiret:                               ; DATA XREF: DOSCODE:D01A↓o
                iret
; ---------------------------------------------------------------------------
InitBioDataSeg  dw 70h                  ; DATA XREF: DOSCODE:CD27↓r

; =============== S U B R O U T I N E =======================================


ParaRound       proc near               ; CODE XREF: DOSCODE:CEF3↓p
                add     ax, 0Fh
                rcr     ax, 1
                shr     ax, 1
                shr     ax, 1
                shr     ax, 1
                retn
ParaRound       endp


; =============== S U B R O U T I N E =======================================


WhatCPUType     proc near               ; CODE XREF: DOSCODE:CD79↓p
                                        ; DOSCODE:D0C7↓p
                pushf
                push    bx
                xor     bx, bx
                xor     ax, ax
                push    ax
                popf
                pushf
                pop     ax
                and     ax, 0F000h
                cmp     ax, 0F000h
                jz      short loc_CD0D
                mov     ax, 0F000h
                push    ax
                popf
                pushf
                pop     ax
                and     ax, 0F000h
                jz      short loc_CD0C
                inc     bx

loc_CD0C:                               ; CODE XREF: WhatCPUType+1C↑j
                inc     bx

loc_CD0D:                               ; CODE XREF: WhatCPUType+10↑j
                mov     ax, bx
                pop     bx
                popf
                retn
WhatCPUType     endp

; ---------------------------------------------------------------------------

DOSINIT:                                ; CODE XREF: DOSCODE:$STARTCODE↑j
                cli
                cld
                push    dx              ; top of memory (memory size in paragraphs)
                push    si              ; 0
                push    ds              ; IBMDOS.SYS loading segment
                push    di              ; 0
                mov     bx, es          ; CURRENT_DOS_LOCATION (segment)
                mov     ax, 0D20Fh      ; MEMSTRT ; get offset of end of init code
                add     ax, 0Fh         ; round up
                and     ax, 0FFF0h
                mov     si, ax          ; DOSDATA segment offset in IBMDOS.SYS
                push    cs
                pop     ds              ; DOSCODE segment
                assume ds:DOSCODE
                mov     es, cs:InitBioDataSeg ; BIOSDATA segment (always 0070h)
                assume es:nothing
                mov     es, word ptr es:3 ; DOSDATA segment ptr
                assume es:DOSCODE
                xor     di, di          ; offset 0
                mov     cx, 1346h       ; DOSDATA size (4934 bytes)
                rep movsb
                pop     di
                pop     ds
                assume ds:nothing
                pop     si
                pop     dx
                push    es
                push    ds
                pop     es
                assume es:nothing
                pop     ds
                mov     ds:BiosComBlockPtr, di ; CURRENT_DOS_LOCATION (offset = 0)
                mov     ds:BiosComBlockPtr+2, bx ; CURRENT_DOS_LOCATION (segment)
                mov     cs:DosDSeg, ds
                mov     cs:LowInt23_SEG, ds
                mov     cs:LowInt24_SEG, ds
                mov     cs:LowInt28_SEG, ds
                mov     ds:ENDMEM, dx
                mov     ds:USER_SP, sp
                mov     ds:USER_SS, ss
                push    ds
                pop     ss
                mov     sp, offset DSKSTACK ; "@#IBM:12.01.2003.build_1.32#@ IBMDOS.CO"...
                mov     ax, offset RetExePatch
                mov     ds:FixExePatch, ax
                mov     ds:UnknownPatch, ax
                mov     ds:ChkCopyProt, ax
                call    WhatCPUType
                cmp     al, 2
                mov     ax, offset Rational386Patch
                jnb     short di_set_patch
                mov     ax, offset RetExePatch

di_set_patch:                           ; CODE XREF: DOSCODE:CD81↑j
                mov     ds:Rational386PatchPtr, ax
                mov     ax, cs
                mov     ds:TEMP_DOSLOC, ax
                mov     ds:NULDEV+2, es
                mov     ds:NULDEV, si
                mov     ds:Instance_Data_Ptr+2, ds
                push    si
                mov     cx, 7
                mov     si, offset InsTBL_CONTPOS_seg

Instance_init_loop:                     ; CODE XREF: DOSCODE:CDA6↓j
                mov     word ptr [si], ds
                add     si, 6
                loop    Instance_init_loop
                mov     cx, 5
                mov     si, offset OldInstanceJunk_6

OldInstance_init_loop:                  ; CODE XREF: DOSCODE:CDB3↓j
                mov     word ptr [si], ds
                add     si, 6
                loop    OldInstance_init_loop
                pop     si
                push    es
                pop     ds
                push    ds
                xor     ax, ax
                mov     ds, ax
                assume ds:DOSCODE
                mov     ax, 0CCDEh
                mov     word ptr 0:0A8h, ax
                mov     ax, cs
                mov     word ptr 0:0A8+2, ax
                pop     ds
                assume ds:nothing
                call    CHARINIT
                push    si
                push    ss
                pop     es
                mov     di, offset SFT0_SFTable
                mov     ax, 3
                stosw                   ; SF_ENTRY.sf_ref_count
                dec     al
                stosw                   ; .sf_mode
                xor     al, al
                stosb                   ; .sf_attr
                mov     al, 0C3h
                stosw                   ; .sf_flags
                mov     ax, si
                stosw                   ; .sf_devptr
                mov     ax, ds
                stosw                   ; SFT0_SFTable + 9 ; .sf_devptr_hw
                xor     ax, ax          ; 0
                add     di, 32
                stosw                   ; SFT0_SFTable + 43 ; .sf_position
                stosw                   ; .sf_position_hw
                add     di, -34         ; 0FFDEh
                stosw                   ; SFT0_SFTable + 13 ; .sf_firclus
                stosw                   ; .sf_firclus_hw
                dec     ax              ; -1
                stosw                   ; SFT0_SFTable + 17 ; .sf_time
                stosw                   ; .sf_date
                inc     ax              ; 0
                stosw                   ; SFT0_SFTable + 21 ; .sf_size
                stosw                   ; .sf_size_hw
                add     di, 7           ; SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
                                        ; SFT0_SFTable + 32
                add     si, 10          ; SYSDEV.NAME
                mov     cx, 4
                rep movsw
                mov     cl, 3
                mov     al, 20h ; ' '
                rep stosb               ; SFT0_SFTable + 40
                pop     si
                or      byte ptr [si+4], 3 ; ISCIN|ISCOUT
                mov     word ptr ss:BCON, si
                mov     word ptr ss:BCON+2, ds

CHAR_INIT_LOOP:                         ; CODE XREF: DOSCODE:CE20↓j
                lds     si, [si]
                call    CHARINIT
                test    byte ptr [si+4], 8
                jz      short CHAR_INIT_LOOP
                mov     word ptr ss:BCLOCK, si
                mov     word ptr ss:BCLOCK+2, ds
                mov     bp, 1346h       ; MEMSTRT ; ES:BP points to DPB
                mov     word ptr ss:DPBHEAD, bp
                mov     word ptr ss:DPBHEAD+2, es

PERDRV:                                 ; CODE XREF: DOSCODE:CE4B↓j
                                        ; DOSCODE:CEDD↓j
                lds     si, [si]
                cmp     si, 0FFFFh
                jnz     short PERDRV2
                jmp     CONTINIT
; ---------------------------------------------------------------------------

PERDRV2:                                ; CODE XREF: DOSCODE:CE3E↑j
                call    CHARINIT
                test    word ptr [si+4], 8000h ; [SI+SYSDEV.ATT],DEVTYP
                jnz     short PERDRV
                mov     cl, ss:CALLUNIT
                xor     ch, ch
                mov     [si+10], cl     ; [si+SYSDEV.NAME]
                mov     dl, ss:NUMIO
                xor     dh, dh
                add     ss:NUMIO, cl
                push    ds
                push    si
                lds     bx, dword ptr ss:CALLBPB

PERUNIT:                                ; CODE XREF: DOSCODE:CED9↓j
                mov     si, [bx]        ; DS:SI Points to BPB
                inc     bx
                inc     bx
                mov     es:[bp+0], dl   ; DPB.DRIVE
                mov     es:[bp+1], dh   ; DPB.UNIT
                push    bx
                push    cx
                push    dx
                mov     dx, 4152h       ; 'RA'
                xor     cx, cx          ; 0
                mov     es:[bp+29], cx
                cmp     [si+11], cx     ; BPB_FATSz16
                jnz     short PERUNIT2  ; FAT (FAT12 or FAT16) -old DPB-
                mov     es:[bp+57], cx  ; FAT32 -new- DPB
                mov     es:[bp+59], cx
                dec     cx
                mov     es:[bp+31], cx
                mov     es:[bp+33], cx
                mov     cx, 4558h       ; 'XE'

PERUNIT2:                               ; CODE XREF: DOSCODE:CE85↑j
                call    $SETDPB
                mov     ax, es:[bp+2]
                cmp     ax, ss:MAXSEC
                jbe     short NOTMAX
                mov     ss:MAXSEC, ax

NOTMAX:                                 ; CODE XREF: DOSCODE:CEA7↑j
                mov     ax, bp
                add     ax, 61          ; next DPB (PCDOS 7.1 DPB size = 61)
                mov     es:[bp+25], ax  ; DPB.NEXT_DPB offset
                mov     word ptr es:[bp+27], es ; DPB.NEXT_DPB segment
                mov     byte ptr es:[bp+24], 0FFh ; DPB.FIRST_ACCESS = -1
                pop     dx
                pop     cx
                pop     bx
                mov     ax, ds
                pop     si
                pop     ds
                mov     es:[bp+19], si  ; DPB.DRIVER_ADDR offset
                mov     word ptr es:[bp+21], ds ; DPB.DRIVER_ADDR segment
                push    ds
                push    si
                inc     dh
                inc     dl
                mov     ds, ax
                add     bp, 61          ; DPBSIZ
                loop    PERUNIT
                pop     si
                pop     ds
                jmp     PERDRV
; ---------------------------------------------------------------------------

CONTINIT:                               ; CODE XREF: DOSCODE:CE40↑j
                sub     bp, 61          ; sub bp,DPBSIZ ; back up to last dpb
                mov     ax, 0FFFFh
                mov     [bp+25], ax     ; [bp+DPB.NEXT_DPB],-1
                mov     [bp+27], ax
                add     bp, 61
                push    ss
                pop     ds
                mov     ax, bp
                call    ParaRound
                mov     dx, ds
                add     dx, ax
                mov     bx, 0Fh
                mov     cx, ds:ENDMEM
                mov     ds:DOSSEG_INIT, ds ; [DSKCHRET+3]
                push    dx
                mov     ax, ds:TEMP_DOSLOC
                mov     es, ax
                mov     ds:TEMP_DOSLOC, 0FFFFh
                call    patch_vec_segments
                call    patch_misc_segments
                mov     ds:TEMP_DOSLOC, es
                pop     dx
                xor     ax, ax
                mov     ds, ax
                assume ds:DOSCODE
                mov     es, ax          ; 0
                assume es:DOSCODE
                mov     di, 90h         ; INT 24h vector
                                        ; addr_int_fatal_abort
                mov     ax, ss:TEMP_DOSLOC
                mov     [di+2], ax      ; segment
                mov     di, 82h         ; INTBASE+2
                mov     word ptr 0, offset DIVOV
                mov     di, 80h         ; INTBASE
                mov     ax, offset irett
                mov     cx, 9

iset1:                                  ; CODE XREF: DOSCODE:CF41↓j
                stosw
                inc     di
                inc     di
                loop    iset1
                add     di, 4
                mov     cx, 6

iset2:                                  ; CODE XREF: DOSCODE:CF4C↓j
                stosw
                inc     di
                inc     di
                loop    iset2
                add     di, 8
                mov     cx, 14

iset3:                                  ; CODE XREF: DOSCODE:CF57↓j
                stosw
                inc     di
                inc     di
                loop    iset3
                mov     word ptr 00BCh, offset INT2F ; mov word [02Fh*4],INT2F
                mov     ax, ss:TEMP_DOSLOC
                mov     word ptr 00BEh, ax
                mov     byte ptr 00C0h, 0EAh ; mov byte [ENTRYPOINT],mi_long_jmp
                mov     word ptr 00C1h, offset CALL_ENTRY ; mov word [ENTRYPOINT+1],CALL_ENTRY
                mov     word ptr 0080h, offset QUIT ; mov word [addr_int_abort],QUIT
                mov     word ptr 0084h, offset COMMAND ; mov word [addr_int_command],COMMAND
                mov     word ptr 0088h, 100h ; mov word [addr_int_terminate],100h
                mov     word ptr 008Ah, dx ; mov word [addr_int_terminate+2],dx
                mov     word ptr 0094h, offset ABSDRD ; mov word [addr_int_disk_read],ABSDRD
                mov     word ptr 0098h, offset ABSDWRT ; mov word [addr_int_disk_write],ABSDWRT
                mov     word ptr 009Ch, offset stay_resident ; mov word [addr_int_keep_process],STAY_RESIDENT
                push    ss
                pop     ds
                assume ds:nothing
                push    ss
                pop     es
                assume es:nothing
                push    dx
                inc     dx
                mov     ds:CurrentPDB, dx
                xor     di, di
                mov     es, dx
                xor     ax, ax
                mov     cx, 128
                rep stosw
                mov     ax, ds:ENDMEM
                call    SETMEM
                push    ss
                pop     ds
                mov     di, 24          ; PDB.JFN_TABLE
                xor     ax, ax
                stosw
                stosb
                mov     al, 0FFh
                mov     cx, 17          ; FILPERPROC-3
                rep stosb
                push    ss
                pop     es
                mov     word ptr ds:SFT_ADDR+2, ds
                mov     si, offset SysInitTable
                mov     word ptr es:[si+6], es ; [es:si+SYSI_EXT.Country_Tab+2]
                mov     word ptr es:[si+2], es ; [es:si+SYSI_EXT.SysInitVars+2]
                mov     word ptr es:BUFFHEAD+2, es
                mov     si, offset BufferQueue
                mov     word ptr es:BUFFHEAD, si
                pop     dx
                mov     word ptr ds:DMAADD+2, dx
                mov     es:arena_head, dx
                mov     ds, dx
                mov     byte ptr ds:0, 5Ah ; 'Z' ; [ARENA.SIGNATURE],arena_signature_end
                mov     word ptr ds:1, 0 ; [ARENA.OWNER],arena_owner_system
                mov     ax, ss:ENDMEM
                sub     ax, dx
                dec     ax
                mov     ds:3, ax
                mov     di, offset SFT0_SFTable ; SFTABL+SFT.SFTable
                mov     ax, 3
                stosw
                mov     di, offset SysInitTable
                inc     dx
                mov     ds, dx
                mov     dx, offset _seg_reinit
                mov     cx, offset exepatch_start
                sub     cx, offset $STARTCODE ; sub cx, 3F10h
                                        ; cx = (doscode - exepatch) - dosinit
                mov     ax, offset initiret ; SYSBUF
                sub     ax, offset $STARTCODE ; sub ax, 3F10h
                                        ; ax = size of doscode - dosinit
                mov     sp, ss:USER_SP
                mov     ss, ss:USER_SS
                retf

; =============== S U B R O U T I N E =======================================


CHARINIT        proc near               ; CODE XREF: DOSCODE:CDC9↑p
                                        ; DOSCODE:CE19↑p ...
                mov     ss:DEVCALL_REQLEN, 25 ; 19h
                mov     ss:DEVCALL_REQUNIT, 0
                mov     ss:DEVCALL_REQFUNC, 0
                mov     ss:DEVCALL_REQSTAT, 0
                push    es
                push    bx
                push    ax
                mov     bx, offset DEVCALL_REQLEN ; offset DEVCALL
                push    ss
                pop     es
                call    DEVIOCALL2
                pop     ax
                pop     bx
                pop     es
                retn
CHARINIT        endp


; =============== S U B R O U T I N E =======================================


check_XMM       proc near               ; CODE XREF: DOSCODE:D0AE↓p
                push    ax
                mov     ax, 4300h
                int     2Fh             ; - Multiplex - XMS - INSTALLATION CHECK
                                        ; Return: AL = 80h XMS driver installed
                                        ; AL <> 80h no driver
                cmp     al, 80h
                jnz     short cXMM_no_driver
                push    bx
                push    dx
                push    ds
                push    es
                mov     ax, 4310h
                int     2Fh             ; - Multiplex - XMS - GET DRIVER ADDRESS
                                        ; Return: ES:BX -> driver entry point
                mov     ds, cs:DosDSeg
                mov     word ptr ds:XMMcontrol, bx
                mov     word ptr ds:XMMcontrol+2, es

cXMMexit:
                clc
                pop     es
                pop     ds
                pop     dx
                pop     bx
                pop     ax
                retn
; ---------------------------------------------------------------------------

cXMM_no_driver:                         ; CODE XREF: check_XMM+8↑j
                stc
                pop     ax
                retn
check_XMM       endp

; ---------------------------------------------------------------------------
byte_D07D       db 0                    ; DATA XREF: DOSCODE:D08B↓r
                                        ; DOSCODE:loc_D0DB↓w
; ---------------------------------------------------------------------------

_seg_reinit:                            ; DATA XREF: DOSCODE:D010↑o
                push    ds
                mov     ds, cs:DosDSeg
                call    patch_misc_segments
                or      ax, ax
                jnz     short loc_D0D6
                cmp     cs:byte_D07D, al
                jnz     short loc_D09A
                mov     ax, ds
                call    patch_vec_segments
                call    patch_offset

loc_D09A:                               ; CODE XREF: DOSCODE:D090↑j
                mov     ax, es
                mov     di, 0F7Ah
                mov     cx, 8
                push    ds
                pop     es

loc_D0A4:                               ; CODE XREF: DOSCODE:D0A7↓j
                inc     di
                inc     di
                stosw
                loop    loc_D0A4
                cmp     ax, 0F000h
                jb      short loc_D0DB
                call    check_XMM
                jb      short loc_D0DB
                call    patch_in_nops
                mov     byte ptr ds:0D66h, 1
                mov     word ptr ds:0D67h, 0CB02h
                mov     word ptr ds:61h, 0CCA8h
                call    WhatCPUType
                cmp     al, 1
                jnz     short loc_D0DB
                mov     word ptr ds:0D69h, 0CC2Fh
                jmp     short loc_D0DB
; ---------------------------------------------------------------------------

loc_D0D6:                               ; CODE XREF: DOSCODE:D089↑j
                mov     ax, es
                call    patch_vec_segments

loc_D0DB:                               ; CODE XREF: DOSCODE:D0AC↑j
                                        ; DOSCODE:D0B1↑j ...
                mov     cs:byte_D07D, 1
                pop     ds
                retf

; =============== S U B R O U T I N E =======================================


patch_vec_segments proc near            ; CODE XREF: DOSCODE:CF11↑p
                                        ; DOSCODE:D094↑p ...
                push    es
                xor     cx, cx
                mov     es, cx
                assume es:DOSCODE
                mov     di, 82h
                mov     word ptr es:byte_0+2, ax
                inc     cx
                inc     cx

loc_D0F1:                               ; CODE XREF: patch_vec_segments+11↓j
                stosw
                inc     di
                inc     di
                loop    loc_D0F1
                add     di, 4
                stosw
                add     di, 6
                mov     cx, 4

loc_D100:                               ; CODE XREF: patch_vec_segments+20↓j
                stosw
                inc     di
                inc     di
                loop    loc_D100
                add     di, 4
                mov     cx, 6

loc_D10B:                               ; CODE XREF: patch_vec_segments+2B↓j
                stosw
                inc     di
                inc     di
                loop    loc_D10B
                add     di, 8
                mov     cx, 0Eh

loc_D116:                               ; CODE XREF: patch_vec_segments+36↓j
                stosw
                inc     di
                inc     di
                loop    loc_D116
                mov     word ptr es:ShCol+3, ax
                pop     es
                assume es:nothing
                retn
patch_vec_segments endp


; =============== S U B R O U T I N E =======================================


patch_misc_segments proc near           ; CODE XREF: DOSCODE:CF14↑p
                                        ; DOSCODE:D084↑p
                push    bx
                push    es
                push    ax
                mov     ax, es
                push    ds
                pop     es
                mov     di, 90h
                mov     bx, ds:0AA3h
                mov     cx, 0Fh

loc_D132:                               ; CODE XREF: patch_misc_segments:loc_D13F↓j
                inc     di
                inc     di
                cmp     bx, 0FFFFh
                jz      short loc_D13E
                cmp     bx, es:[di]
                jnz     short loc_D13F

loc_D13E:                               ; CODE XREF: patch_misc_segments+16↑j
                stosw

loc_D13F:                               ; CODE XREF: patch_misc_segments+1B↑j
                loop    loc_D132
                mov     si, 122Ah
                mov     word ptr [si+4Fh], ds
                mov     word ptr [si+54h], ds
                mov     word ptr [si+59h], ds
                mov     word ptr [si+5Eh], ds
                mov     word ptr [si+80h], ds
                mov     word ptr [si+63h], ds
                mov     si, offset FastOpenTable
                cmp     ds:TEMP_DOSLOC, 0FFFFh
                jz      short loc_D16A
                mov     cx, ds:TEMP_DOSLOC
                cmp     cx, [si+4]
                jnz     short loc_D16D

loc_D16A:                               ; CODE XREF: patch_misc_segments+3E↑j
                mov     [si+4], ax

loc_D16D:                               ; CODE XREF: patch_misc_segments+47↑j
                pop     ax
                pop     es
                pop     bx
                retn
patch_misc_segments endp


; =============== S U B R O U T I N E =======================================


patch_offset    proc near               ; CODE XREF: DOSCODE:D097↑p
                push    es
                xor     ax, ax
                mov     es, ax
                assume es:DOSCODE
                mov     word ptr es:byte_0, offset ldivov
                mov     di, 80h
                mov     ax, offset lirett
                mov     cx, 2

po_iset1:                               ; CODE XREF: patch_offset+18↓j
                stosw
                inc     di
                inc     di
                loop    po_iset1
                add     di, 4
                stosw
                add     di, 6
                mov     cx, 4

po_iset2:                               ; CODE XREF: patch_offset+27↓j
                stosw
                inc     di
                inc     di
                loop    po_iset2
                add     di, 4
                mov     cx, 6

po_iset3:                               ; CODE XREF: patch_offset+32↓j
                stosw
                inc     di
                inc     di
                loop    po_iset3
                add     di, 8
                mov     cx, 14

po_iset4:                               ; CODE XREF: patch_offset+3D↓j
                stosw
                inc     di
                inc     di
                loop    po_iset4
                mov     word ptr es:0BCh, offset lint2f
                mov     byte ptr es:0C0h, 0EAh
                mov     word ptr es:0C1h, offset lcall_entry
                mov     word ptr es:80h, offset lquit
                mov     word ptr es:84h, offset lcommand
                mov     word ptr es:94h, offset labsdrd
                mov     word ptr es:98h, offset labsdwrt
                mov     word ptr es:9Ch, offset lstay_resident
                pop     es
                assume es:nothing
                retn
patch_offset    endp

; ---------------------------------------------------------------------------
patch_table     dw offset ldivov        ; DATA XREF: patch_in_nops+2↓o
                dw offset lquit
                dw offset lcommand
                dw offset labsdrd
                dw offset labsdwrt
                dw offset lstay_resident
                dw offset lint2f
                dw offset lcall_entry

; =============== S U B R O U T I N E =======================================


patch_in_nops   proc near               ; CODE XREF: DOSCODE:D0B3↑p
                push    ax
                push    si
                mov     si, offset patch_table
                mov     ax, 9090h
                mov     cx, 8

pin_loop:                               ; CODE XREF: patch_in_nops+11↓j
                mov     di, cs:[si]
                stosw
                inc     si
                inc     si
                loop    pin_loop
                pop     si
                pop     ax
                retn
patch_in_nops   endp

; ---------------------------------------------------------------------------
                db    0
DOSCODE         ends


                end
