//
// +-------------------------------------------------------------------------+
// |   This file has been generated by The Interactive Disassembler (IDA)    |
// |           Copyright (c) 2018 Hex-Rays, <support@hex-rays.com>           |
// |                            Freeware version                             |
// +-------------------------------------------------------------------------+
//
//
//      This file should be used in the following way:
//         - reload executable into IDA with using switch -c
//         - use File, Load IDC file and load this file.
//
//      NOTE: This file doesn't contain all information from the database.
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void)
{
  // set 'loading idc file' mode
  set_inf_attr(INF_GENFLAGS, INFFL_LOADIDC|get_inf_attr(INF_GENFLAGS));
  GenInfo();            // various settings
  Segments();           // segmentation
  Enums();              // enumerations
  Structures();         // structure types
  ApplyStrucTInfos();   // structure type infos
  Patches();            // manual patches
  SegRegs();            // segment register values
  Bytes();              // individual bytes (code,data)
  Functions();          // function definitions
  // clear 'loading idc file' mode
  set_inf_attr(INF_GENFLAGS, ~INFFL_LOADIDC&get_inf_attr(INF_GENFLAGS));
}

//------------------------------------------------------------------------
// General information

static GenInfo(void) {

        delete_all_segments();    // purge database
	set_processor_type("80386r", SETPROC_USER);
	set_inf_attr(INF_COMPILER, 0);
	set_inf_attr(INF_STRLIT_BREAK, 0xA);
	set_flag(INF_CMTFLAG, SW_ALLCMT, 0);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_VOID, 0);
	set_inf_attr(INF_XREFNUM, 2);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_AUTO, 1);
	set_inf_attr(INF_INDENT, 16);
	set_inf_attr(INF_COMMENT, 40);
	set_inf_attr(INF_MAXREF, 0x10);
}

//------------------------------------------------------------------------
// Information about segmentation

static Segments(void) {
	;
	add_segm_ex(0,0X1346,0,0,1,2,ADDSEG_NOSREG);
	SegRename(0,"DOSDATA");
	SegClass (0,"DOSDATA");
	add_segm_ex(0X3F10,0X7E20,0,0,1,2,ADDSEG_NOSREG);
	SegRename(0X3F10,"DOSCODE");
	SegClass (0X3F10,"DOSCODE");
	add_segm_ex(0X7E20,0XD210,0,0,1,2,ADDSEG_NOSREG);
	SegRename(0X7E20,"DOSCODE");
	SegClass (0X7E20,"DOSCODE");
	set_inf_attr(INF_LOW_OFF, 0x0);
	set_inf_attr(INF_HIGH_OFF, 0xE556);
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
        begin_type_updating(UTP_ENUM);
        end_type_updating(UTP_ENUM);
}

//------------------------------------------------------------------------
// Information about type information for structure members

static ApplyStrucTInfos() {
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
        begin_type_updating(UTP_STRUCT);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_0(void) {
        auto x;
#define id x

	create_byte	(0);
	make_array	(0,	0X4);
	create_word	(0X4);
	set_name	(0X4,	"DataVersion");
	create_byte	(0X6);
	make_array	(0X6,	0X8);
	set_name	(0X6,	"WinoldPatch1");
	create_word	(0XE);
	set_name	(0XE,	"MYNUM");
	create_word	(0X10);
	set_name	(0X10,	"FCBLRU");
	create_word	(0X12);
	set_name	(0X12,	"OpenLRU");
	create_dword	(0X14);
	set_name	(0X14,	"OEM_HANDLER");
	create_word	(x=0X18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X18,	"LeaveAddr");
	create_word	(0X1A);
	set_name	(0X1A,	"RetryCount");
	create_word	(0X1C);
	set_name	(0X1C,	"RetryLoop");
	create_dword	(0X1E);
	set_name	(0X1E,	"LastBuffer");
	create_word	(0X22);
	set_name	(0X22,	"CONTPOS");
	create_word	(0X24);
	set_name	(0X24,	"arena_head");
	create_dword	(0X26);
	set_name	(0X26,	"DPBHEAD");
	create_dword	(x=0X2A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X2A,	"SFT_ADDR");
	create_dword	(0X2E);
	set_name	(0X2E,	"BCLOCK");
	create_dword	(0X32);
	set_name	(0X32,	"BCON");
	create_word	(x=0X36);
	op_dec		(x,	0);
	set_name	(0X36,	"MAXSEC");
	create_dword	(0X38);
	set_name	(0X38,	"BUFFHEAD");
	create_dword	(0X3C);
	set_name	(0X3C,	"CDSADDR");
	create_dword	(0X40);
	set_name	(0X40,	"SFTFCB");
	create_word	(0X44);
	set_name	(0X44,	"KEEPCOUNT");
	create_byte	(0X46);
	set_name	(0X46,	"NUMIO");
	create_byte	(0X47);
	set_name	(0X47,	"CDSCOUNT");
	create_word	(0X48);
	make_array	(0X48,	0X2);
	set_name	(0X48,	"NULDEV");
	set_cmt	(0X4C,	"Null device attributes = DEVTYP|ISNULL",	0);
	create_word	(0X4C);
	set_cmt	(0X4E,	"Strategy entry point",	0);
	create_word	(x=0X4E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X50,	"Interrupt entry point",	0);
	create_word	(x=0X50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X52,	"Name of null device",	0);
	create_strlit	(0X52,	0X5A);
	create_byte	(0X5A);
	set_name	(0X5A,	"SPLICES");
	create_word	(0X5B);
	set_name	(0X5B,	"Special_Entries");
	create_dword	(0X5D);
	set_name	(0X5D,	"UU_IFS_DOS_CALL");
	create_word	(0X61);
	set_name	(0X61,	"ChkCopyProt");
	create_word	(0X63);
	set_name	(0X63,	"A20OFF_PSP");
	create_word	(0X65);
	create_word	(0X67);
	create_byte	(0X69);
	set_name	(0X69,	"BOOTDRIVE");
	create_byte	(0X6A);
	set_name	(0X6A,	"DDMOVE");
	create_word	(0X6B);
	set_name	(0X6B,	"EXT_MEM_SIZE");
	create_dword	(0X6D);
	set_name	(0X6D,	"BufferQueue");
	create_word	(0X71);
	set_name	(0X71,	"DirtyBufferCount");
	create_dword	(0X73);
	set_name	(0X73,	"SC_CACHE_PTR");
	create_word	(0X77);
	set_name	(0X77,	"SC_CACHE_COUNT");
	create_byte	(0X79);
	set_name	(0X79,	"BuffInHMA");
	create_dword	(0X7A);
	set_name	(0X7A,	"LoMemBuff");
	create_byte	(0X7E);
	make_array	(0X7E,	0X3);
	set_name	(0X7E,	"UU_BUF_EMS_FIRST_PAGE");
	create_word	(0X81);
	set_name	(0X81,	"CL0FATENTRY");
	create_byte	(0X83);
	set_name	(0X83,	"IoStatFail");
	create_byte	(0X84);
	set_name	(0X84,	"ALLOCMSAVE");
	create_byte	(0X85);
	set_name	(0X85,	"A20OFF_COUNT");
	create_byte	(0X86);
	set_name	(0X86,	"DOS_FLAG");
	create_word	(0X87);
	set_name	(0X87,	"UNPACK_OFFSET");
	create_byte	(0X89);
	set_name	(0X89,	"UMBFLAG");
	create_word	(0X8A);
	create_word	(0X8C);
	set_name	(0X8C,	"UMB_HEAD");
	create_word	(0X8E);
	set_name	(0X8E,	"START_ARENA");
	create_dword	(x=0X90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X90,	"JShare");
	create_dword	(x=0X94);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X94,	"MFT_enter");
	create_dword	(x=0X98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X98,	"MFTClose");
	create_dword	(x=0X9C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XA0,	"MFTCloseP");
	create_dword	(x=0XA4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XA4,	"MFTCloN");
	create_dword	(x=0XA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XA8,	"set_block");
	create_dword	(x=0XAC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XB4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XB8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XB8,	"ShSave");
	create_dword	(x=0XBC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XBC,	"ShChk");
	create_dword	(x=0XC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XC0,	"ShCol");
	create_dword	(x=0XC4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XC4,	"ShCloseFile");
	create_dword	(x=0XC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XC8,	"ShSU");
	create_dword	(0XCC);
	set_name	(0XCC,	"SFTABL");
	create_word	(0XD0);
	create_byte	(x=0XD2);
	make_array	(x,	0X127);
	op_dec		(x,	0);
	set_name	(0XD2,	"SFT0_SFTable");
	create_byte	(0X1F9);
	set_name	(0X1F9,	"CARPOS");
	create_byte	(0X1FA);
	set_name	(0X1FA,	"STARTPOS");
	create_byte	(x=0X1FB);
	make_array	(x,	0X80);
	op_dec		(x,	0);
	set_name	(0X1FB,	"INBUF");
	create_byte	(x=0X27B);
	make_array	(x,	0X83);
	op_dec		(x,	0);
	set_name	(0X27B,	"CONBUF");
	create_byte	(0X2FE);
	set_name	(0X2FE,	"PFLAG");
	create_byte	(0X2FF);
	set_name	(0X2FF,	"VDERFLG");
	create_byte	(0X300);
	set_name	(0X300,	"CHARCO");
	create_byte	(x=0X301);
	op_chr		(x,	0);
	set_name	(0X301,	"chSwitch");
	create_byte	(0X302);
	set_name	(0X302,	"AllocMethod");
	create_byte	(0X303);
	set_name	(0X303,	"fShare");
	create_byte	(0X304);
	set_name	(0X304,	"DIFFNAM");
	create_byte	(0X305);
	make_array	(0X305,	0X10);
	set_name	(0X305,	"MYNAME");
	create_word	(x=0X315);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X315,	"CritPatch");
	create_word	(x=0X317);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X319);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X31B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(0X31D);
	set_cmt	(0X31F,	"SWAPPABLE DATA AREA",	0);
	create_byte	(0X31F);
	set_cmt	(0X320,	"critical error flag",	0);
	create_byte	(0X320);
	set_name	(0X320,	"ERRORMODE");
	create_byte	(0X321);
	set_name	(0X321,	"INDOS");
	set_cmt	(0X322,	"drive on which current critical error occurred",	0);
	create_byte	(0X322);
	set_name	(0X322,	"WPERR");
	set_cmt	(0X323,	"locus of last error",	0);
	create_byte	(0X323);
	set_name	(0X323,	"EXTERR_LOCUS");
	set_cmt	(0X324,	"extended error code of last error",	0);
	create_word	(0X324);
	set_name	(0X324,	"EXTERR");
	set_cmt	(0X326,	"suggested action for last error",	0);
	create_byte	(0X326);
	set_name	(0X326,	"EXTERR_ACTION");
	set_cmt	(0X327,	"class of last error",	0);
	create_byte	(0X327);
	set_name	(0X327,	"EXTERR_CLASS");
	set_cmt	(0X328,	"Extended Error pointer",	0);
	create_dword	(0X328);
	set_name	(0X328,	"EXTERRPT");
	set_cmt	(0X32C,	"current DTA (Disk Transfer Address)",	0);
	create_dword	(0X32C);
	set_name	(0X32C,	"DMAADD");
	create_word	(0X330);
	set_name	(0X330,	"CurrentPDB");
	create_word	(0X332);
	set_name	(0X332,	"ConC_Spsave");
	create_word	(0X334);
	set_name	(0X334,	"exit_code");
	create_byte	(0X336);
	set_name	(0X336,	"CURDRV");
	create_byte	(0X337);
	set_name	(0X337,	"CNTCFLAG");
	create_byte	(0X338);
	create_byte	(0X339);
	create_word	(0X33A);
	set_name	(0X33A,	"USER_IN_AX");
	create_word	(0X33C);
	set_name	(0X33C,	"PROC_ID");
	create_word	(0X33E);
	set_name	(0X33E,	"USER_ID");
	create_word	(0X340);
	set_name	(0X340,	"FirstArena");
	create_word	(0X342);
	set_name	(0X342,	"BestArena");
	create_word	(0X344);
	set_name	(0X344,	"LastArena");
	create_word	(0X346);
	set_name	(0X346,	"ENDMEM");
	create_word	(0X348);
	set_name	(0X348,	"LASTENT");
	create_byte	(0X34A);
	set_name	(0X34A,	"FAILERR");
	create_byte	(0X34B);
	set_name	(0X34B,	"ALLOWED");
	create_byte	(0X34C);
	set_name	(0X34C,	"NoSetDir");
	create_byte	(0X34D);
	set_name	(0X34D,	"DidCTRLC");
	create_byte	(0X34E);
	set_name	(0X34E,	"SpaceFlag");
	create_byte	(0X34F);
	create_byte	(0X350);
	set_name	(0X350,	"DAY");
	create_byte	(0X351);
	set_name	(0X351,	"MONTH");
	set_cmt	(0X352,	"YEAR (and CENTURY)",	0);
	create_word	(0X352);
	set_name	(0X352,	"YEAR");
	create_word	(0X354);
	set_name	(0X354,	"DAYCNT");
	create_byte	(0X356);
	set_name	(0X356,	"WEEKDAY");
	create_byte	(0X357);
	set_name	(0X357,	"CONSWAP");
	create_byte	(0X358);
	set_name	(0X358,	"IDLEINT");
	create_byte	(0X359);
	set_cmt	(0X35A,	"offset DEVCALL",	0);
	create_byte	(0X35A);
	set_name	(0X35A,	"DEVCALL_REQLEN");
	create_byte	(0X35B);
	set_name	(0X35B,	"DEVCALL_REQUNIT");
	create_byte	(0X35C);
	set_name	(0X35C,	"DEVCALL_REQFUNC");
	create_word	(0X35D);
	set_name	(0X35D,	"DEVCALL_REQSTAT");
	create_byte	(0X35F);
	make_array	(0X35F,	0X8);
	create_byte	(0X367);
	set_name	(0X367,	"CALLUNIT");
	create_byte	(0X368);
	set_name	(0X368,	"CALLBR");
	create_byte	(0X369);
	set_name	(0X369,	"CALLVIDM");
	create_word	(0X36A);
	set_name	(0X36A,	"CALLXAD_2");
	create_word	(0X36C);
	set_name	(0X36C,	"CALLBPB");
	create_word	(0X36E);
	set_name	(0X36E,	"CALLSSEC");
	create_dword	(0X370);
	set_name	(0X370,	"CALLVIDRW");
	create_word	(0X374);
	make_array	(0X374,	0X2);
	set_name	(0X374,	"CALLNEWSC");
	create_dword	(0X378);
	set_name	(0X378,	"CALLDEVAD");
	create_byte	(0X37C);
	set_name	(0X37C,	"IOCALL");
	create_byte	(0X37D);
	set_name	(0X37D,	"IOCALL_REQUNI");
	create_byte	(0X37E);
	set_name	(0X37E,	"IOCALL_REQFUNC");
	create_word	(0X37F);
	set_name	(0X37F,	"IOCALL_REQSTAT");
	create_byte	(0X381);
	make_array	(0X381,	0X8);
	create_byte	(0X389);
	set_name	(0X389,	"IOMED");
	create_dword	(0X38A);
	set_name	(0X38A,	"IOXAD");
	create_word	(0X38E);
	set_name	(0X38E,	"IOSCNT");
	create_word	(0X390);
	set_name	(0X390,	"IOSSEC");
	create_byte	(x=0X392);
	op_dec		(x,	0);
	set_name	(0X392,	"DSKSTCALL");
	create_byte	(0X393);
	create_byte	(0X394);
	set_name	(0X394,	"DSKSTCOM");
	create_word	(0X395);
	set_name	(0X395,	"DSKSTST");
	create_byte	(0X397);
	make_array	(0X397,	0X8);
	create_byte	(0X39F);
	set_name	(0X39F,	"DSKCHRET");
	create_word	(x=0X3A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X3A0,	"DEVIOBUF_PTR");
	create_word	(0X3A2);
	set_name	(0X3A2,	"DOSSEG_INIT");
	create_word	(0X3A4);
	create_word	(0X3A6);
	create_dword	(0X3A8);
	set_name	(0X3A8,	"Lock_Buffer");
	create_dword	(0X3AC);
	create_byte	(0X3B0);
	create_byte	(0X3B1);
	create_dword	(0X3B2);
	set_name	(0X3B2,	"USERNUM");
	create_word	(0X3B6);
	make_array	(0X3B6,	0X3);
	set_name	(0X3B6,	"TIMEBUF");
	create_word	(0X3BC);
	set_name	(0X3BC,	"DEVIOBUF");
	create_byte	(x=0X3BE);
	make_array	(x,	0X80);
	op_dec		(x,	0);
	set_name	(0X3BE,	"OPENBUF");
	create_byte	(x=0X43E);
	make_array	(x,	0X80);
	op_dec		(x,	0);
	set_name	(0X43E,	"RENBUF");
	create_byte	(x=0X4BE);
	make_array	(x,	0X35);
	op_dec		(x,	0);
	set_name	(0X4BE,	"SEARCHBUF");
	create_byte	(x=0X4F3);
	make_array	(x,	0X58);
	op_dec		(x,	0);
	set_name	(0X4F3,	"DUMMYCDS");
	create_byte	(x=0X54B);
	make_array	(x,	0XC);
	op_dec		(x,	0);
	set_name	(0X54B,	"NAME1");
	create_byte	(x=0X557);
	make_array	(x,	0XD);
	op_dec		(x,	0);
	set_name	(0X557,	"NAME2");
	create_word	(0X564);
	set_name	(0X564,	"DESTSTART_HW");
	create_byte	(0X566);
	make_array	(0X566,	0X5);
	create_byte	(0X56B);
	set_name	(0X56B,	"ATTRIB");
	create_byte	(0X56C);
	set_name	(0X56C,	"EXTFCB");
	create_byte	(0X56D);
	set_name	(0X56D,	"SATTRIB");
	create_byte	(0X56E);
	create_byte	(0X56F);
	create_byte	(0X570);
	set_name	(0X570,	"FOUND_DEV");
	create_byte	(0X571);
	create_byte	(0X572);
	set_name	(0X572,	"FSHARING");
	create_byte	(0X573);
	set_name	(0X573,	"SECCLUSPOS");
	create_byte	(0X574);
	create_byte	(0X575);
	set_name	(0X575,	"READOP");
	create_byte	(0X576);
	set_name	(0X576,	"THISDRV");
	create_byte	(0X577);
	set_name	(0X577,	"CLUSFAC");
	create_byte	(0X578);
	set_name	(0X578,	"CLUSSPLIT");
	create_byte	(0X579);
	set_name	(0X579,	"INSMODE");
	create_byte	(0X57A);
	set_name	(0X57A,	"CMETA");
	create_byte	(0X57B);
	create_word	(0X57C);
	set_name	(0X57C,	"EXIT_TYPE");
	create_word	(0X57E);
	set_name	(0X57E,	"CREATING");
	create_dword	(0X580);
	create_word	(0X584);
	set_name	(0X584,	"USER_SP");
	create_word	(0X586);
	set_name	(0X586,	"USER_SS");
	create_word	(0X588);
	create_dword	(0X58A);
	set_name	(0X58A,	"THISDPB");
	create_word	(0X58E);
	set_name	(0X58E,	"CLUSSAVE");
	create_dword	(0X590);
	set_name	(0X590,	"CLUSSEC");
	create_word	(0X594);
	create_word	(0X596);
	create_word	(0X598);
	set_name	(0X598,	"FATBYTE");
	create_dword	(0X59A);
	set_name	(0X59A,	"DEVPT");
	create_dword	(0X59E);
	set_name	(0X59E,	"THISSFT");
	create_dword	(0X5A2);
	set_name	(0X5A2,	"THISCDS");
	create_dword	(0X5A6);
	set_name	(0X5A6,	"THISFC");
	create_word	(0X5AA);
	set_name	(0X5AA,	"SFN");
	create_word	(0X5AC);
	create_dword	(0X5AE);
	create_word	(0X5B2);
	set_name	(0X5B2,	"WFP_START");
	create_word	(0X5B4);
	set_name	(0X5B4,	"REN_WFP");
	create_word	(0X5B6);
	set_name	(0X5B6,	"CURR_DIR_END");
	create_word	(0X5B8);
	create_word	(0X5BA);
	create_word	(0X5BC);
	set_name	(0X5BC,	"CLUSNUM");
	create_word	(0X5BE);
	make_array	(0X5BE,	0X2);
	set_name	(0X5BE,	"DIRSEC");
	create_word	(0X5C2);
	set_name	(0X5C2,	"DIRSTART");
	create_word	(0X5C4);
	create_dword	(0X5C6);
	create_dword	(0X5CA);
	create_word	(0X5CE);
	create_dword	(0X5D0);
	create_word	(0X5D4);
	create_word	(0X5D6);
	create_word	(0X5D8);
	create_word	(0X5DA);
	create_word	(0X5DC);
	create_dword	(0X5DE);
	set_name	(0X5DE,	"GROWCNT");
	create_dword	(0X5E2);
	set_name	(0X5E2,	"CURBUF");
	create_dword	(0X5E6);
	set_name	(0X5E6,	"CONSFT");
	create_word	(0X5EA);
	set_name	(0X5EA,	"SAVEBX");
	create_word	(0X5EC);
	set_name	(0X5EC,	"SAVEDS");
	create_word	(0X5EE);
	set_name	(0X5EE,	"RESTORE_TMP");
	create_word	(0X5F0);
	set_name	(0X5F0,	"NSS");
	create_word	(0X5F2);
	set_name	(0X5F2,	"NSP");
	create_word	(0X5F4);
	set_name	(0X5F4,	"EXTOPEN_FLAG");
	create_byte	(0X5F6);
	set_name	(0X5F6,	"EXTOPEN_ON");
	create_word	(0X5F7);
	set_name	(0X5F7,	"EXTOPEN_IO_MODE");
	create_word	(0X5F9);
	set_name	(0X5F9,	"SAVE_DI");
	create_word	(0X5FB);
	set_name	(0X5FB,	"SAVE_ES");
	create_word	(0X5FD);
	set_name	(0X5FD,	"SAVE_DX");
	create_word	(0X5FF);
	set_name	(0X5FF,	"SAVE_CX");
	create_word	(0X601);
	set_name	(0X601,	"SAVE_BX");
	create_word	(0X603);
	set_name	(0X603,	"SAVE_SI");
	create_word	(0X605);
	set_name	(0X605,	"SAVE_DS");
	create_word	(0X607);
	set_name	(0X607,	"HIGH_SECTOR");
	create_word	(x=0X609);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X609,	"OffsetMagicPatch");
	create_byte	(0X60B);
	set_name	(0X60B,	"DISK_FULL");
	create_word	(0X60C);
	set_name	(0X60C,	"TEMP_VAR");
	create_word	(0X60E);
	set_name	(0X60E,	"TEMP_VAR2");
	create_byte	(0X610);
	set_name	(0X610,	"DrvErr");
	create_word	(0X611);
	set_name	(0X611,	"DOS34_FLAG");
	create_dword	(0X613);
	create_dword	(0X617);
	create_word	(0X61B);
	set_name	(0X61B,	"AbsRdWr_SS");
	create_word	(0X61D);
	set_name	(0X61D,	"AbsRdWr_SP");
	create_byte	(0X61F);
	create_byte	(x=0X620);
	make_array	(x,	0X180);
	op_dec		(x,	0);
	set_name	(0X620,	"RENAMEDMA");
	create_byte	(x=0X7A0);
	make_array	(x,	0X180);
	op_dec		(x,	0);
	set_name	(0X7A0,	"AUXSTACK");
	create_strlit	(0X920,	0X94E);
	set_name	(0X920,	"DSKSTACK");
	set_cmt	(0X94E,	"IOSTACK (just after DSKSTACK)",	0);
	create_byte	(x=0X94E);
	make_array	(x,	0X152);
	op_dec		(x,	0);
	create_byte	(0XAA0);
	set_name	(0XAA0,	"PRINTER_FLAG");
	create_byte	(0XAA1);
	set_name	(0XAA1,	"VOLCHNG_FLAG");
	create_byte	(0XAA2);
	create_word	(0XAA3);
	set_name	(0XAA3,	"TEMP_DOSLOC");
	create_byte	(x=0XAA5);
	make_array	(x,	0X36);
	op_dec		(x,	0);
	create_byte	(0XADB);
	set_name	(0XADB,	"absdrw_extd");
	create_word	(0XADC);
	set_name	(0XADC,	"DIRSTART_HW");
	create_word	(0XADE);
	create_word	(0XAE6);
	set_name	(0XAE6,	"DESTSTART");
	create_word	(0XAE8);
	set_name	(0XAE8,	"CLUSTNUM_HW");
	create_word	(0XAEA);
	set_name	(0XAEA,	"CL0FATENTRY_SIG");
	create_word	(0XAEC);
	set_name	(0XAEC,	"CCONTENT_HW");
	create_word	(0XAEE);
	set_name	(0XAEE,	"ROOTCLUST_HW");
	create_word	(0XAF0);
	create_word	(0XAF2);
	create_word	(0XAF4);
	create_word	(0XAF6);
	create_word	(0XAF8);
	create_word	(x=0XAFA);
	op_dec		(x,	0);
	set_name	(0XAFA,	"UCASE_TAB");
	create_byte	(x=0XAFC);
	make_array	(x,	0X80);
	op_dec		(x,	0);
	set_name	(0XAFC,	"UCASE_TAB_2");
	create_word	(x=0XB7C);
	op_dec		(x,	0);
	set_name	(0XB7C,	"FILE_UCASE_TAB");
	create_byte	(x=0XB7E);
	make_array	(x,	0X80);
	op_dec		(x,	0);
	set_name	(0XB7E,	"FILE_UCASE_TAB_2");
	create_word	(x=0XBFE);
	op_dec		(x,	0);
	set_name	(0XBFE,	"COLLATE_TAB");
	create_byte	(x=0XC00);
	make_array	(x,	0X20);
	op_dec		(x,	0);
	create_strlit	(0XC20,	0XC7F);
	create_byte	(x=0XC7F);
	op_dec		(x,	0);
	create_strlit	(0XC80,	0XCA6);
	create_byte	(x=0XCA6);
	make_array	(x,	0X2);
	op_dec		(x,	0);
	create_byte	(x=0XCA8);
	op_chr		(x,	0);
	create_byte	(x=0XCA9);
	make_array	(x,	0X4);
	op_dec		(x,	0);
	create_byte	(x=0XCAD);
	make_array	(x,	0X3);
	op_chr		(x,	0);
	create_byte	(x=0XCB0);
	make_array	(x,	0X31);
	op_dec		(x,	0);
	create_byte	(x=0XCE1);
	op_chr		(x,	0);
	create_byte	(x=0XCE2);
	make_array	(x,	0X1E);
	op_dec		(x,	0);
	create_word	(0XD00);
	set_name	(0XD00,	"DBCS_TAB");
	create_byte	(x=0XD02);
	make_array	(x,	0X10);
	op_dec		(x,	0);
	set_name	(0XD02,	"DBCS_TAB_2");
	create_byte	(0XD12);
	set_name	(0XD12,	"IBMDOSVERSION");
	set_cmt	(0XD13,	"MSVERSION",	0);
	create_byte	(x=0XD13);
	op_dec		(x,	0);
	create_byte	(x=0XD14);
	make_array	(x,	0X8);
	op_dec		(x,	0);
	set_name	(0XD14,	"YRTAB");
	create_byte	(x=0XD1C);
	op_dec		(x,	0);
	set_name	(0XD1C,	"MONTAB");
	create_byte	(x=0XD1D);
	op_dec		(x,	0);
	set_name	(0XD1D,	"february");
	create_byte	(x=0XD1E);
	make_array	(x,	0XA);
	op_dec		(x,	0);
	set_cmt	(0XD28,	"length",	0);
	create_word	(x=0XD28);
	op_dec		(x,	0);
	set_name	(0XD28,	"FILE_CHAR_TAB");
	set_cmt	(0XD29,	"length",	0);
	set_cmt	(0XD2A,	"include all",	0);
	create_byte	(0XD2A);
	create_byte	(0XD2B);
	create_byte	(x=0XD2C);
	op_dec		(x,	0);
	set_cmt	(0XD2D,	"exclude 0 - 20h",	0);
	create_byte	(0XD2D);
	create_byte	(0XD2E);
	create_byte	(0XD2F);
	create_byte	(0XD30);
	set_cmt	(0XD31,	"exclude 14 special",	0);
	create_byte	(x=0XD31);
	op_dec		(x,	0);
	create_strlit	(0XD32,	0XD40);
	set_cmt	(0XD40,	"reserved",	0);
	create_byte	(x=0XD40);
	make_array	(x,	0X18);
	op_dec		(x,	0);
	set_cmt	(0XD58,	"SYSINITVARS",	0);
	create_word	(x=0XD58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XD58,	"SysInitTable");
	create_word	(0XD5A);
	create_word	(x=0XD5C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(0XD5E);
	create_byte	(0XD60);
	make_array	(0XD60,	0X3);
	create_word	(0XD63);
	set_name	(0XD63,	"TEMPSEG");
	create_byte	(0XD65);
	set_name	(0XD65,	"redir_patch");
	create_byte	(0XD66);
	set_name	(0XD66,	"DosHasHMA");
	create_word	(0XD67);
	set_name	(0XD67,	"FixExePatch");
	create_word	(0XD69);
	set_name	(0XD69,	"UnknownPatch");
	create_insn	(0XD6B);
	set_name	(0XD6B,	"MAP_CASE");
	set_cmt	(0XD6D,	"Map no chars below 80H ever",	0);
	set_cmt	(0XD6F,	"\nTurn into index value",	0);
	set_name	(0XD6F,	"Map1");
	set_cmt	(0XD73,	"UCASE_TAB+2",	0);
	create_insn	(x=0XD73);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XD78,	"Get upper case character",	0);
	set_name	(0XD7B,	"Map_Case_retn");
	create_byte	(0XD7C);
	create_byte	(0XD7D);
	create_byte	(0XD7E);
	create_word	(0XD7F);
	create_byte	(0XD81);
	create_byte	(0XD82);
	make_array	(0XD82,	0X5);
	create_byte	(x=0XD87);
	make_array	(x,	0X17);
	op_dec		(x,	0);
	create_word	(x=0XD9E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XD9E,	"USER_SP_2F");
	create_word	(x=0XDA0);
	make_array	(x,	0XE);
	op_dec		(x,	0);
	set_name	(0XDA0,	"FAKE_STACK_2F");
	create_byte	(0XDBC);
	set_name	(0XDBC,	"SCAN_FLAG");
	create_word	(0XDBD);
	set_name	(0XDBD,	"DATE_FLAG");
	set_cmt	(0XDBF,	"Storage for Abs dsk read/write err",	0);
	create_word	(0XDBF);
	set_name	(0XDBF,	"AbsDskErr");
	set_cmt	(0XDC1,	"null media id",	0);
	create_strlit	(0XDC1,	0XDCC);
	set_name	(0XDC1,	"NO_NAME_ID");
	set_cmt	(0XDCD,	"[es:bx+SRHEAD.REQSTAT+1],(STDON>>8)",	0);
	create_insn	(x=0XDCD);
	op_hex		(x,	1);
	set_name	(0XDCD,	"SNULDEV");
	set_name	(0XDD3,	"INULDEV");
	create_byte	(0XDD4);
	create_byte	(0XDD5);
	make_array	(0XDD5,	0X5);
	set_name	(0XDD5,	"UmbSave2");
	create_byte	(0XDDA);
	set_name	(0XDDA,	"UmbSaveFlag");
	set_cmt	(0XDDB,	"CLASS ACTION and LOCUS info for the INT 21h errors",	0);
	create_byte	(0XDDB);
	make_array	(0XDDB,	0X80);
	set_name	(0XDDB,	"ERR_TABLE_21");
	set_cmt	(0XE5B,	"CLASS ACTION and LOCUS info for the INT 24h errors",	0);
	create_byte	(0XE5B);
	make_array	(0XE5B,	0X50);
	set_name	(0XE5B,	"ERR_TABLE_24");
	create_byte	(0XEAB);
	make_array	(0XEAB,	0X10);
	set_name	(0XEAB,	"ErrMap24");
	create_word	(0XEBB);
	set_name	(0XEBB,	"SPECIAL_VERSION");
	create_word	(0XEBD);
	set_name	(0XEBD,	"OLD_FIRSTCLUS");
	create_dword	(0XEBF);
	set_name	(0XEBF,	"exec_init_SP");
	create_dword	(0XEC3);
	set_name	(0XEC3,	"exec_init_IP");
	create_word	(0XEC7);
	create_word	(0XEC9);
	create_word	(0XECB);
	create_word	(0XECD);
	create_word	(0XECF);
	create_word	(0XED1);
	create_word	(0XED3);
	create_word	(0XED5);
	create_word	(0XED7);
	create_word	(0XED9);
	create_word	(0XEDB);
	create_word	(0XEDD);
	create_word	(0XEDF);
	set_cmt	(0XEE1,	"WIN386_SIS version",	0);
	create_byte	(0XEE1);
	make_array	(0XEE1,	0X2);
	set_name	(0XEE1,	"Win386_Info");
	set_cmt	(0XEE3,	".Next_Dev_Ptr",	0);
	create_dword	(0XEE3);
	set_cmt	(0XEE7,	".Virt_Dev_File_Ptr",	0);
	create_dword	(0XEE7);
	set_name	(0XEE7,	"Win386_Inf_Virt_Dev_Ptr");
	set_cmt	(0XEEB,	".Reference_Data",	0);
	create_dword	(0XEEB);
	create_word	(x=0XEEF);
	make_array	(x,	0X2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XEEF,	"Instance_Data_Ptr");
	create_word	(x=0XEF3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XEF5,	"Win386_IIS.size",	0);
	create_word	(0XEF5);
	create_word	(x=0XEF7);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XEF7,	"Instance_Table");
	create_word	(0XEF9);
	set_name	(0XEF9,	"InsTBL_CONTPOS_seg");
	create_word	(0XEFB);
	create_word	(x=0XEFD);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(0XEFF);
	create_word	(0XF01);
	create_word	(x=0XF03);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(0XF05);
	create_word	(0XF07);
	create_word	(x=0XF09);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(0XF0B);
	create_word	(0XF0D);
	create_word	(x=0XF0F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(0XF11);
	create_word	(0XF13);
	create_word	(x=0XF15);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(0XF17);
	create_word	(0XF19);
	create_word	(x=0XF1B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(0XF1D);
	create_word	(0XF1F);
	create_word	(x=0XF21);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(0XF23);
	create_word	(0XF25);
	set_cmt	(0XF27,	"what for ?",	0);
	create_word	(x=0XF27);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(0XF29);
	create_word	(0XF2B);
	set_cmt	(0XF2D,	"\"devio call in progress\" status flag ptr",	0);
	create_word	(x=0XF2D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(0XF2F);
	create_word	(0XF31);
	create_word	(0XF33);
	create_word	(0XF35);
	create_word	(0XF37);
	create_word	(0XF39);
	create_word	(0XF3B);
	set_name	(0XF3B,	"CL0FATENTRY_HW");
	create_word	(0XF3D);
	set_name	(0XF3D,	"Unknown_Ptr");
	create_word	(0XF3F);
	create_word	(0XF41);
	create_word	(x=0XF43);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(0XF45);
	set_cmt	(0XF47,	"?",	0);
	create_word	(x=0XF47);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(0XF49);
	create_word	(0XF4B);
	set_cmt	(0XF4D,	"Major_version",	0);
	create_byte	(0XF4D);
	set_name	(0XF4D,	"Win386_DOSVars");
	set_cmt	(0XF4E,	"Minor_version",	0);
	create_byte	(0XF4E);
	create_word	(x=0XF4F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0XF51);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0XF53);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0XF55);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0XF57);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0XF59);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_byte	(0XF5B);
	make_array	(0XF5B,	0X2);
	set_name	(0XF5B,	"IsWin386");
	set_cmt	(0XF5D,	"Patch for Sidekick",	0);
	create_byte	(0XF5D);
	make_array	(0XF5D,	0X6);
	create_byte	(0XF63);
	make_array	(0XF63,	0X2);
	create_byte	(0XF65);
	make_array	(0XF65,	0X5);
	create_byte	(0XF6A);
	make_array	(0XF6A,	0X2);
	set_cmt	(0XF6C,	"Patch for PortOfEntry",	0);
	create_byte	(0XF6C);
	make_array	(0XF6C,	0X5);
	create_byte	(0XF71);
	make_array	(0XF71,	0X2);
	create_byte	(0XF73);
	make_array	(0XF73,	0X3);
	create_dword	(0XF76);
	set_name	(0XF76,	"LocalSFT");
	create_dword	(x=0XF7A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XF7A,	"DOSINTTABLE");
	create_dword	(x=0XF7E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XF7E,	"DOSINTTABLE_4");
	create_dword	(x=0XF82);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XF82,	"DOSINTTABLE_8");
	create_dword	(x=0XF86);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XF86,	"DOSINTTABLE_12");
	create_dword	(x=0XF8A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XF8A,	"DOSINTTABLE_16");
	create_dword	(x=0XF8E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XF8E,	"DOSINTTABLE_20");
	create_dword	(x=0XF92);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XF92,	"DOSINTTABLE_24");
	create_dword	(x=0XF96);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XF96,	"DOSINTTABLE_28");
	create_word	(0XF9A);
	set_name	(0XF9A,	"SS_Save");
	create_word	(0XF9C);
	set_name	(0XF9C,	"SP_Save");
	create_insn	(0XF9E);
	set_name	(0XF9E,	"ldivov");
	create_insn	(0XFA0);
	set_name	(0XFA3,	"divov_cont");
	create_insn	(0XFA8);
	set_name	(0XFA8,	"lquit");
	create_insn	(0XFAA);
	set_name	(0XFAD,	"quit_cont");
	create_insn	(0XFB2);
	set_name	(0XFB2,	"lcommand");
	create_insn	(0XFB4);
	set_name	(0XFB7,	"command_cont");
	create_insn	(0XFBC);
	set_name	(0XFBC,	"labsdrd");
	create_insn	(0XFBE);
	set_name	(0XFC1,	"absdrd_cont");
	create_insn	(0XFC6);
	set_name	(0XFC6,	"labsdwrt");
	create_insn	(0XFC8);
	set_name	(0XFCB,	"absdwrt_cont");
	create_insn	(0XFD0);
	set_name	(0XFD0,	"lstay_resident");
	create_insn	(0XFD2);
	set_name	(0XFD5,	"sr_cont");
	create_insn	(0XFDA);
	set_name	(0XFDA,	"lint2f");
	create_insn	(0XFDC);
	set_name	(0XFDF,	"int2f_cont");
	create_insn	(0XFE4);
	set_name	(0XFE4,	"lcall_entry");
	create_insn	(0XFE6);
	set_name	(0XFE9,	"callentry_cont");
	create_dword	(0XFEE);
	set_name	(0XFEE,	"DosRetAddr23");
	create_dword	(0XFF2);
	set_name	(0XFF2,	"DosRetAddr24");
	create_insn	(0XFF6);
	set_name	(0XFF6,	"LowInt23");
	set_cmt	(0X1000,	"DOS - CONTROL \"C\" EXIT ADDRESS\nReturn: return via RETF 2 with CF set\nDOS will abort program with errorlevel 0\nelse\ninterrupted DOS call continues",	0);
	create_insn	(x=0X1000);
	op_hex		(x,	0);
	create_insn	(0X100A);
	set_name	(0X100A,	"LowInt24");
	set_cmt	(0X1014,	"DOS - FATAL ERROR HANDLER ADDRESS\nAutomatically called upon detection of unrecoverable I/O error.",	0);
	create_insn	(x=0X1014);
	op_hex		(x,	0);
	set_cmt	(0X101E,	"DOS 2+ internal - KEYBOARD BUSY LOOP",	0);
	create_insn	(x=0X101E);
	op_hex		(x,	0);
	set_name	(0X101E,	"LowInt28");
	create_insn	(0X1024);
	set_name	(0X1024,	"disa20_xfer");
	create_insn	(x=0X102E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1042);
	set_name	(0X1042,	"disa20_iret");
	create_insn	(x=0X1045);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1049);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X104D);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1051);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X105A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X105E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1062);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X106E,	"lirett");
	create_insn	(0X106F);
	set_name	(0X106F,	"XMMDisableA20");
	create_dword	(0X107B);
	set_name	(0X107B,	"XMMcontrol");
	create_byte	(0X107F);
	make_array	(0X107F,	0X6);
	create_insn	(0X1085);
	set_name	(0X1085,	"EnsureA20ON");
	create_insn	(0X10A7);
	create_insn	(x=0X10B7);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X10D3);
	set_cmt	(0X10D5,	"- VIDEO - GET CURRENT VIDEO MODE\nReturn: AH = number of columns on screen\nAL = current video mode\nBH = current active display page",	0);
	create_insn	(x=0X10D5);
	op_hex		(x,	0);
	set_cmt	(0X10DE,	"- VIDEO - SET VIDEO MODE\nAL = mode",	0);
	create_insn	(x=0X10DE);
	op_hex		(x,	0);
	set_cmt	(0X10E3,	"- VIDEO - SELECT DISPLAY PAGE\nAL = display page, 0-7  for modes 0 & 1, 0-3  for modes 2 & 3",	0);
	create_insn	(x=0X10E3);
	op_hex		(x,	0);
	set_cmt	(0X10F5,	"- VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)\nAL = character, BH = display page (alpha modes)\nBL = foreground color (graphics modes)",	0);
	create_insn	(x=0X10F5);
	op_hex		(x,	0);
	create_insn	(0X10F9);
	set_cmt	(0X10FC,	"segment of BIOS",	0);
	create_word	(0X10FC);
	set_name	(0X10FC,	"OldInstanceJunk");
	set_cmt	(0X10FE,	"indicate stacks in SYSINIT area",	0);
	create_word	(0X10FE);
	set_cmt	(0X1100,	"6 instance items",	0);
	create_word	(0X1100);
	create_word	(0X1102);
	set_name	(0X1102,	"OldInstanceJunk_6");
	create_word	(x=0X1104);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(0X1106);
	create_word	(0X1108);
	create_word	(x=0X110A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(0X110C);
	create_word	(0X110E);
	create_word	(x=0X1110);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(0X1112);
	create_word	(0X1114);
	create_word	(x=0X1116);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(0X1118);
	create_word	(0X111A);
	create_word	(x=0X111C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X111E);
	op_dec		(x,	0);
	create_word	(0X1120);
	set_cmt	(0X1122,	"ALTAH byte in dos bios",	0);
	create_word	(x=0X1122);
	op_hex		(x,	0);
	create_word	(0X1124);
	create_insn	(0X1126);
	create_byte	(x=0X112F);
	make_array	(x,	0XB);
	op_dec		(x,	0);
	set_name	(0X112F,	"UmbSave1");
	create_word	(0X113A);
	set_name	(0X113A,	"OLD_FIRSTCLUS_HW");
	create_word	(0X113C);
	set_name	(0X113C,	"FastOpenTable");
	create_word	(x=0X113E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X113E,	"FastTable_2");
	create_word	(0X1140);
	create_word	(x=0X1142);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(0X1144);
	create_byte	(0X1146);
	set_name	(0X1146,	"FastOpenFlg");
	create_byte	(0X1147);
	make_array	(0X1147,	0X6);
	create_word	(0X114D);
	set_name	(0X114D,	"UNKNOWN1");
	create_byte	(0X114F);
	make_array	(0X114F,	0X5);
	create_word	(x=0X1154);
	op_chr		(x,	0);
	create_byte	(0X1156);
	make_array	(0X1156,	0X1F);
	create_byte	(0X1175);
	set_name	(0X1175,	"CurSC_DRIVE");
	create_byte	(0X1176);
	make_array	(0X1176,	0X8);
	set_name	(0X1176,	"WinoldPatch2");
	create_word	(0X117E);
	set_name	(0X117E,	"FIRST_BUFF_ADDR");
	set_cmt	(0X1180,	"Windows 3.1 patches",	0);
	create_byte	(0X1180);
	make_array	(0X1180,	0X3);
	set_name	(0X1180,	"DOSP1_ID");
	create_byte	(0X1183);
	make_array	(0X1183,	0X6);
	create_byte	(0X1189);
	make_array	(0X1189,	0X2);
	create_byte	(0X118B);
	make_array	(0X118B,	0X3);
	set_name	(0X118B,	"DOSP12_ID");
	create_byte	(0X118E);
	make_array	(0X118E,	0X6);
	create_byte	(0X1194);
	make_array	(0X1194,	0X4);
	set_name	(0X1194,	"DOSP3_ID");
	create_byte	(0X1198);
	make_array	(0X1198,	0X3);
	create_byte	(0X119B);
	make_array	(0X119B,	0X4);
	create_byte	(0X119F);
	set_name	(0X119F,	"DOSP4_ID");
	create_byte	(0X11A0);
	set_name	(0X11A0,	"DOSP5_ID");
	create_byte	(0X11A1);
	make_array	(0X11A1,	0X5);
	create_byte	(0X11A6);
	create_byte	(0X11A7);
	make_array	(0X11A7,	0X3);
	set_name	(0X11A7,	"DOSP7_ID");
	create_byte	(0X11AA);
	make_array	(0X11AA,	0X2);
	create_byte	(0X11AC);
	make_array	(0X11AC,	0X3);
	create_byte	(0X11AF);
	make_array	(0X11AF,	0X2);
	create_byte	(0X11B1);
	make_array	(0X11B1,	0X2);
	create_byte	(0X11B3);
	make_array	(0X11B3,	0X2);
	create_byte	(0X11B5);
	make_array	(0X11B5,	0X2);
	create_byte	(0X11B7);
	make_array	(0X11B7,	0X2);
	create_byte	(0X11B9);
	make_array	(0X11B9,	0X2);
	create_byte	(0X11BB);
	make_array	(0X11BB,	0X3);
	set_name	(0X11BB,	"DOSP8_ID");
	create_byte	(0X11BE);
	make_array	(0X11BE,	0X5);
	create_byte	(0X11C3);
	make_array	(0X11C3,	0X2);
	create_byte	(0X11C5);
	make_array	(0X11C5,	0X2);
	set_name	(0X11C5,	"DOSP10_ID");
	create_byte	(0X11C7);
	make_array	(0X11C7,	0X2);
	create_byte	(0X11C9);
	make_array	(0X11C9,	0X5);
	create_byte	(0X11CE);
	make_array	(0X11CE,	0X2);
	create_byte	(0X11D0);
	make_array	(0X11D0,	0X10);
	create_byte	(0X11E0);
	make_array	(0X11E0,	0X18);
	create_byte	(x=0X11F8);
	op_hex		(x,	0);
	create_byte	(x=0X11F9);
	make_array	(x,	0X8);
	op_hex		(x,	0);
	create_byte	(0X1201);
	make_array	(0X1201,	0X3);
	create_byte	(0X1204);
	make_array	(0X1204,	0XF);
	set_name	(0X1204,	"DOSP13_ID");
	create_strlit	(0X1213,	0X1215);
	set_name	(0X1213,	"XMMERRMSG");
	create_strlit	(0X1215,	0X122A);
	set_cmt	(0X122A,	"reserved words",	0);
	create_byte	(0X122A);
	make_array	(0X122A,	0X8);
	set_name	(0X122A,	"COUNTRY_CDPG");
	set_cmt	(0X1232,	"path name of country.sys",	0);
	create_strlit	(0X1232,	0X123F);
	create_byte	(x=0X123F);
	make_array	(x,	0X33);
	op_dec		(x,	0);
	set_cmt	(0X1272,	"system code page id",	0);
	create_word	(x=0X1272);
	op_dec		(x,	0);
	set_cmt	(0X1274,	"number of entries",	0);
	create_word	(0X1274);
	set_cmt	(0X1276,	"SetUcase",	0);
	create_byte	(0X1276);
	set_name	(0X1276,	"COUNTRY_CDPG_76");
	create_word	(x=0X1277);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(0X1279);
	set_cmt	(0X127B,	"SetUcaseFile",	0);
	create_byte	(0X127B);
	create_word	(x=0X127C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(0X127E);
	set_cmt	(0X1280,	"SetFileList",	0);
	create_byte	(0X1280);
	create_word	(x=0X1281);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(0X1283);
	set_cmt	(0X1285,	"SetCollate",	0);
	create_byte	(0X1285);
	create_word	(x=0X1286);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(0X1288);
	set_cmt	(0X128A,	"SetDBCS",	0);
	create_byte	(0X128A);
	create_word	(x=0X128B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(0X128D);
	set_cmt	(0X128F,	"SetCountryInfo",	0);
	create_byte	(0X128F);
	set_cmt	(0X1290,	"NEW_COUNTRY_SIZE",	0);
	create_word	(x=0X1290);
	op_dec		(x,	0);
	set_cmt	(0X1292,	"USA country id",	0);
	create_word	(0X1292);
	set_name	(0X1292,	"_COUNTRY_ID");
	set_cmt	(0X1294,	"USA system code page id",	0);
	create_word	(x=0X1294);
	op_dec		(x,	0);
	set_cmt	(0X1296,	"date format",	0);
	create_word	(0X1296);
	set_name	(0X1296,	"COUNTRY_CDPG_108");
	set_cmt	(0X1298,	"currency symbol",	0);
	create_strlit	(0X1298,	0X129D);
	set_cmt	(0X129D,	"thousand separator",	0);
	create_strlit	(0X129D,	0X129F);
	set_cmt	(0X129F,	"decimal separator",	0);
	create_strlit	(0X129F,	0X12A1);
	set_cmt	(0X12A1,	"date separator",	0);
	create_strlit	(0X12A1,	0X12A3);
	set_cmt	(0X12A3,	"time separator",	0);
	create_strlit	(0X12A3,	0X12A5);
	set_cmt	(0X12A5,	"currency format flag",	0);
	create_byte	(0X12A5);
	set_cmt	(0X12A6,	"# of digits after decimal in currency",	0);
	create_byte	(0X12A6);
	set_cmt	(0X12A7,	"time format",	0);
	create_byte	(0X12A7);
	set_cmt	(0X12A8,	"mono case routine entry point",	0);
	create_word	(x=0X12A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X12AA,	"segment of entry point",	0);
	create_word	(0X12AA);
	set_cmt	(0X12AC,	"data list separator",	0);
	create_strlit	(0X12AC,	0X12AE);
	set_cmt	(0X12AE,	"reserved",	0);
	create_word	(0X12AE);
	make_array	(0X12AE,	0X5);
	create_byte	(0X12B8);
	set_name	(0X12B8,	"INDOS_FLAG");
	create_byte	(0X12B9);
	set_name	(0X12B9,	"DEVIO_IN_PROGRESS");
	create_strlit	(0X12BA,	0X12BE);
	set_name	(0X12BA,	"_ENU");
	create_strlit	(0X12BE,	0X12C2);
	set_name	(0X12BE,	"_USA");
	create_strlit	(0X12C2,	0X12C4);
	set_name	(0X12C2,	"_US");
	create_word	(0X12C4);
	create_word	(0X12C6);
	create_word	(0X12C8);
	create_strlit	(0X12CA,	0X12CD);
	set_name	(0X12CA,	"_AM");
	create_strlit	(0X12CD,	0X12D0);
	set_name	(0X12CD,	"_PM");
	create_strlit	(0X12D0,	0X12F4);
	set_name	(0X12D0,	"_MMDDYY");
	create_byte	(0X12F4);
	create_byte	(0X12F5);
	create_word	(0X12F6);
	create_strlit	(0X12F8,	0X1306);
	set_name	(0X12F8,	"VxDpath");
	create_word	(0X1306);
	create_byte	(x=0X1308);
	make_array	(x,	0X1A);
	op_dec		(x,	0);
	set_name	(0X1308,	"drive_flags");
	create_byte	(0X1322);
	create_word	(0X1323);
	make_array	(0X1323,	0X2);
	set_name	(0X1323,	"BiosComBlockPtr");
	create_byte	(0X1327);
	make_array	(0X1327,	0X5);
	create_word	(0X132C);
	create_word	(x=0X132E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X1330);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X1332);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X1334);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_byte	(x=0X1336);
	op_chr		(x,	0);
	set_name	(0X1336,	"NLS_YES");
	create_byte	(x=0X1337);
	op_chr		(x,	0);
	set_name	(0X1337,	"NLS_NO");
	create_byte	(x=0X1338);
	op_chr		(x,	0);
	set_name	(0X1338,	"NLS_yes2");
	create_byte	(x=0X1339);
	op_chr		(x,	0);
	set_name	(0X1339,	"NLS_no2");
	create_dword	(0X133A);
	set_name	(0X133A,	"unknown_zero_dd");
	create_word	(0X133E);
	set_name	(0X133E,	"Rational386PatchPtr");
	create_insn	(0X1340);
	set_name	(0X1340,	"MagicPatch");
	update_extra_cmt		(0X3F10,	E_PREV + 0,	"; File Name   : C:\\Yedek\\pcdos_7_1\\IBMDOS.COM");
	update_extra_cmt		(0X3F10,	E_PREV + 1,	"; Format      : Binary file");
	update_extra_cmt		(0X3F10,	E_PREV + 2,	"; Base Address: 0000h Range: 0000h - A646h Loaded length: A646h");
	create_insn	(0X3F10);
	set_name	(0X3F10,	"$STARTCODE");
	create_word	(x=0X3F13);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(0X3F15);
	set_name	(0X3F15,	"BioDataSeg");
	set_cmt	(0X3F17,	"DOSDATA segment address",	0);
	create_word	(0X3F17);
	set_name	(0X3F17,	"DosDSeg");
	set_cmt	(0X3F19,	"DOS_MAJOR_VERSION",	0);
	create_byte	(0X3F19);
	set_name	(0X3F19,	"MSMAJOR");
	set_cmt	(0X3F1A,	"DOS_MINOR_VERSION",	0);
	create_byte	(x=0X3F1A);
	op_dec		(x,	0);
	set_name	(0X3F1A,	"MSMINOR");
	set_cmt	(0X3F1B,	"INT 21h Error code mapping table",	0);
	create_byte	(0X3F1B);
	make_array	(0X3F1B,	0XB6);
	set_name	(0X3F1B,	"I21_MAP_E_TAB");
	create_byte	(0X3FD1);
	set_cmt	(0X3FD2,	"Standard Functions (INT 21h System Calls)",	0);
	create_word	(x=0X3FD2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X3FD2,	"DISPATCH");
	create_word	(x=0X3FD4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X3FD6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X3FD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X3FDA);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X3FDC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X3FDE);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X3FE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X3FE2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X3FE4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X3FE6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X3FE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X3FEA);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X3FEC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X3FEE);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X3FF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X3FF2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X3FF4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X3FF6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X3FF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X3FFA);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X3FFC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X3FFE);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4000);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4002);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4004);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4006);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4008);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X400A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X400C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X400E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4010);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4012);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4014);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4016);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4018);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X401A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X401C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X401E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4020);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4022);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4024);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4026);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4028);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X402A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X402C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X402E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4030);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4032);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4034);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4036);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4038);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X403A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X403C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X403E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4040);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4042);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4044);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4046);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4048);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X404A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X404C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X404E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4050);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4052);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4054);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4056);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4058);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X405A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X405C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X405E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4060);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4062);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4064);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4066);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4068);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X406A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X406C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X406E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4070);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4072);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4074);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4076);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4078);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X407A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X407C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X407E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4080);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4082);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4084);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4086);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4088);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X408A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X408C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X408E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4090);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4092);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4094);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4096);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4098);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X409A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X409C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X409E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X40A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X40A2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X40A4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X40A6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X40A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X40AA,	"6Ch",	0);
	create_word	(x=0X40AA);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X40AC,	"6Dh, OS/2 \"DosMkDir2\" - ROM DOS: Find first ROM program",	0);
	create_word	(x=0X40AC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X40AE,	"6Eh, OS/2 \"DosEnumAttrib\" - ROM DOS: Find next ROM program",	0);
	create_word	(x=0X40AE);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X40B0,	"6Fh, OS/2 \"DosQMaxEASize\" - ROM DOS: Get/set searched ROM area",	0);
	create_word	(x=0X40B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X40B2,	"70h, MSDOS 7 (WIN 95) - Get/set extended country information\n        GET/SET INTERNATIONALIZATION INFORMATION",	0);
	create_word	(x=0X40B2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X40B4,	"71h, MSDOS 7 (WIN 95) LONG FILENAME FUNCTIONS",	0);
	create_word	(x=0X40B4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X40B6,	"72h, MSDOS 7 (WIN 95) LFN-FindClose",	0);
	create_word	(x=0X40B6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X40B8,	"73h, MSDOS 7 - FAT32 extended drive functions",	0);
	create_word	(x=0X40B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X40BA);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X40BA,	"FOO");
	create_word	(x=0X40BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X40BC,	"DTab");
	create_byte	(x=0X40BE);
	op_dec		(x,	0);
	set_name	(0X40BE,	"DOSTable");
	create_word	(x=0X40BF);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X40C1);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X40C3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X40C5);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X40C7);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X40C9);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X40CB);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X40CD);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X40CF);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X40D1);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X40D3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X40D5);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X40D7);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X40D9);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X40DB);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X40DD);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X40DF);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X40E1);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X40E3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X40E5);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X40E7);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X40E9);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X40EB);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X40ED);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X40EF);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X40F1);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X40F3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X40F5);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X40F7);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X40F9);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X40FB);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X40FD);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X40FF);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4101);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4103);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4105);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4107);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4109);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X410B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X410D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X410F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4111);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4113);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4115);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4117);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4119);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X411B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X411D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X411F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4121);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4123,	"Is this a valid subfunction?",	0);
	create_insn	(0X4123);
	set_name	(0X4123,	"$SET_CTRL_C_TRAPPING");
	set_cmt	(0X4125,	"yes",	0);
	create_insn	(0X412A);
	create_insn	(x=0X4132);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4137,	"Check for subfunction 0",	0);
	set_cmt	(0X413B,	"DS:SI --> Ctrl C Status byte",	0);
	create_insn	(0X413F);
	set_cmt	(0X4142,	"mask off bit 0 of DL and",	0);
	create_insn	(x=0X4142);
	op_hex		(x,	1);
	set_cmt	(0X4145,	"save it as new Ctrl C status",	0);
	create_insn	(0X4149);
	set_cmt	(0X414C,	"mask off bit 0 of DL and",	0);
	create_insn	(x=0X414C);
	op_hex		(x,	1);
	set_cmt	(0X414F,	"exchange DL with old status byte",	0);
	set_cmt	(0X4153,	"test for 5 after it was dec twice",	0);
	create_insn	(0X4153);
	set_cmt	(0X4157,	"return boot drive in DL",	0);
	create_insn	(x=0X4157);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X415D);
	set_cmt	(0X415F,	"test for 6 after it was dec twice",	0);
	set_cmt	(0X4163,	"7.10 ; (MINOR_VERSION<<8)+MAJOR_VERSION",	0);
	set_cmt	(0X4166,	"DOSREVNM",	0);
	set_cmt	(0X4169,	"is DOS in HMA? no",	0);
	create_insn	(x=0X4169);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X416F,	"yes",	0);
	set_cmt	(0X4171,	"return version & 'DOS in HMA' status",	0);
	set_cmt	(0X4173,	"clear bit 5 of DOS flag",	0);
	create_insn	(x=0X4173);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	set_cmt	(0X417D,	"set bit 5 of DOS flag",	0);
	create_insn	(x=0X417D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	create_insn	(0X4186);
	create_insn	(0X4188);
	set_name	(0X4188,	"$SET_CURRENT_PDB");
	create_insn	(x=0X418E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X4194);
	set_name	(0X4194,	"$GET_CURRENT_PDB");
	create_insn	(x=0X419A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X41A0);
	set_name	(0X41A0,	"$SET_PRINTER_FLAG");
	create_insn	(x=0X41A6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X41AB);
	set_name	(0X41AB,	"QUIT");
	create_insn	(0X41AF);
	set_name	(0X41AF,	"BADCALL");
	set_name	(0X41B1,	"irett");
	set_cmt	(0X41B2,	"System call entry point and dispatcher\n***\nAn alternative method of entering the system\nis to perform a CALL 5 in the program segment prefix\nwith the contents of CL indicating what system call\nthe user would like",	0);
	create_insn	(0X41B2);
	set_name	(0X41B2,	"CALL_ENTRY");
	create_insn	(x=0X41B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X41BE);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X41C2,	"Re-order the stack \nto simulate an interrupt 21h.",	0);
	set_cmt	(0X41C5,	"Stack now ordered as if INT had been used",	0);
	create_insn	(x=0X41C5);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X41C9);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X41CE,	"MAXCALL\nThis entry point doesn't get as many calls",	0);
	create_insn	(x=0X41CE);
	op_dec		(x,	1);
	set_cmt	(0X41D7,	"This is the normal INT 21h entry point. \nWe first perform a quick test to see if\nwe need to perform expensive DOS-entry\nfunctions. Certain system calls are done\nwithout interrupts being enabled.",	0);
	create_insn	(0X41D7);
	set_name	(0X41D7,	"COMMAND");
	create_insn	(x=0X41D8);
	op_hex		(x,	1);
	set_cmt	(0X41DD,	"Check Minimum special case number",	0);
	create_insn	(x=0X41DD);
	op_hex		(x,	1);
	set_name	(0X41DD,	"SAVREGS");
	set_cmt	(0X41E4,	"Check Maximum case number",	0);
	create_insn	(x=0X41E4);
	op_hex		(x,	1);
	create_insn	(x=0X41EB);
	op_hex		(x,	1);
	create_insn	(x=0X41F0);
	op_hex		(x,	1);
	create_insn	(x=0X41F5);
	op_hex		(x,	1);
	create_insn	(x=0X420A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X420D);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4210);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4214);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4217);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X421A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X421D,	"0",	0);
	set_cmt	(0X421F,	"WIN386 patch. Do not update USER_ID",	0);
	create_insn	(x=0X421F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	set_cmt	(0X4224,	"allow redirection",	0);
	create_insn	(x=0X4224);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4227,	"if win386 present",	0);
	create_insn	(x=0X4229);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X422C,	"Flag that we're in the DOS",	0);
	create_insn	(x=0X422C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4230,	"duplicated INDOS flag (what for ?)",	0);
	create_insn	(x=0X4230);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4234);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4237);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X423B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X423F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4246,	"[PDB.USER_STACK]",	0);
	create_insn	(x=0X4246);
	set_cmt	(0X424A,	"[PDB.USER_STACK+2]",	0);
	create_insn	(x=0X424A);
	create_insn	(x=0X4253);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X4253,	"REDISP");
	set_cmt	(0X425E,	"Clear extended open flag",	0);
	create_insn	(x=0X425E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4261,	"EXEC_AWARE_REDIR\nclear all bits except bit 11",	0);
	create_insn	(x=0X4261);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	set_cmt	(0X4267,	"random clean up of possibly mis-set flags",	0);
	create_insn	(x=0X4267);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X426A,	"set directories on search",	0);
	create_insn	(x=0X426A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X426D,	"FAIL not in progress",	0);
	create_insn	(x=0X426D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4271,	"presume that we can issue INT 28h",	0);
	create_insn	(x=0X4271);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4274,	"Restore AX and BX = 1",	0);
	set_cmt	(0X4277,	"2 bytes per call in table",	0);
	set_cmt	(0X427E,	"GETEXTENDEDERROR",	0);
	create_insn	(x=0X427E);
	op_hex		(x,	1);
	set_cmt	(0X4283,	"STD_CON_INPUT_FLUSH ; 12",	0);
	create_insn	(x=0X4283);
	op_hex		(x,	1);
	set_cmt	(0X4288,	"\nAre we in an INT 24h",	0);
	create_insn	(x=0X4288);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4288,	"IOROUT");
	set_cmt	(0X428D,	"Stay on AUXSTACK if INT 24h",	0);
	set_cmt	(0X428F,	"mov sp,IOSTACK",	0);
	create_insn	(x=0X428F);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4294);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4297);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X429D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X42A5,	"Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7",	0);
	create_insn	(x=0X42A5);
	op_hex		(x,	0);
	create_insn	(x=0X42A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X42AD);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X42B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	create_insn	(x=0X42BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X42C1);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X42C5);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X42C9);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X42CE);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	set_name	(0X42D4,	"LeaveDOS");
	create_insn	(x=0X42DA);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X42E1);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X42E5);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X42E9);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X42ED);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X42F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X42FA);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X42FD);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X430B);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X430F);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4315);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X431A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X431F);
	set_name	(0X431F,	"restore_world");
	create_insn	(x=0X4324);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4331);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X4336);
	set_name	(0X4336,	"save_world");
	create_insn	(x=0X433B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4348);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4350);
	op_dec		(x,	1);
	create_insn	(0X4355);
	set_name	(0X4355,	"Get_User_Stack");
	create_insn	(x=0X435A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_byte	(0X435F);
	set_name	(0X435F,	"ERRIN");
	create_byte	(0X4360);
	create_byte	(0X4361);
	create_byte	(0X4362);
	create_byte	(0X4363);
	create_byte	(0X4364);
	create_byte	(0X4365);
	set_name	(0X4365,	"ERROUT");
	create_byte	(0X4366);
	create_byte	(0X4367);
	create_byte	(0X4368);
	create_byte	(0X4369);
	create_byte	(0X436A);
	set_cmt	(0X436B,	"Extended ABS Disk Read/Write flag\n(AH=1 for INT 21h ax=7305h function)",	0);
	create_insn	(x=0X436B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X436B,	"AbsSetup");
	set_cmt	(0X4372,	"INT 21h AX=7305h\nINT 25h",	0);
	set_cmt	(0X4374,	"Windows DOSBOX's INDOS flag ?",	0);
	create_insn	(x=0X4374);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4379);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4389);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4389,	"AbsSetup2");
	create_insn	(x=0X439D);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X43AE,	"Microsoft Networks - CHECK DIRECT I/O\nDS:SI -> ASCIZ disk device name (may be full path or only drive\nspecifier--must include the colon)\nReturn: CF clear if absolute disk access allowed",	0);
	create_insn	(x=0X43AE);
	op_hex		(x,	0);
	set_cmt	(0X43B5,	"error_not_supported",	0);
	create_insn	(x=0X43B5);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	set_name	(0X43B5,	"errdriv");
	set_cmt	(0X43BC,	"disk error ? (bad address mark)",	0);
	create_insn	(x=0X43BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X43C4,	"Interrupt 25h handler (ah=0)",	0);
	create_insn	(0X43C4);
	set_name	(0X43C4,	"ABSDRD");
	set_cmt	(0X43C6,	"clear read/write mode flags\n(used with INT 21h ax=7305h)",	0);
	set_cmt	(0X43C8,	"ah=1",	0);
	set_name	(0X43C8,	"FAT32_ABSDRD");
	create_insn	(x=0X43D2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X43D7,	"(not jumped from ABSDWRT) absolute disk read\n(jumped from ABSDRWT)",	0);
	set_cmt	(0X43DB,	"absolute disk write",	0);
	create_insn	(0X43DE);
	set_cmt	(0X43E0,	"EXTENDED ABSOLUTE DISK READ/WRITE",	0);
	create_insn	(x=0X43E2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X43E6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X43EF);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X43F2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X43FB,	"absolute disk read",	0);
	set_cmt	(0X43FD,	"(jumping back to) absolute disk write",	0);
	create_insn	(0X4400);
	set_cmt	(0X4408,	"invalidate secondary cache",	0);
	create_insn	(x=0X4408);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4418);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X441D,	"CX = # of contiguous sectors read\nES:BP -> Drive Parameter Block (DPB)\n[HIGH_SECTOR]:DX = physical sector # of 1st sector in extent\n[TEMP_VAR2]:[TEMP_VAR] = Transfer address",	0);
	create_insn	(x=0X441D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X4427);
	set_name	(0X4429,	"ERR_LEAVE");
	create_insn	(x=0X4431);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4438,	"[ES:DI+NUMERR-1]",	0);
	set_name	(0X443C,	"LEAVECODE");
	create_insn	(x=0X443D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4442,	"ILEAVE");
	set_cmt	(0X4448,	"FAT32- EXTENDED ABSOLUTE DISK READ/WRITE flag",	0);
	create_insn	(x=0X4448);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X444E,	"INT 21h AX=7305h\nINT 25h",	0);
	create_insn	(x=0X4452);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4456);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X445B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4462);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4467);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X446F);
	create_insn	(x=0X4470);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X4477);
	set_name	(0X4477,	"ABSDWRT");
	create_insn	(0X447C);
	set_name	(0X447C,	"FAT32_ABSDWRT");
	set_cmt	(0X447E,	"floppy disk\nhard disk",	0);
	set_cmt	(0X4489,	"\nNOTE: PCDOS 7.1 kernel does not set\nDOS_FLAG bit 6 or drive_flags bit 7\n(It appears that these bits are set\nby Windows or a system utility or \ndriver that knows the addresses of\nthese FLAGs in the DOSDATA segment.)\nErdogan Tan - 03/01/2024",	0);
	set_cmt	(0X448B,	"test bit 7 \n(removable and/or writable disk bit?)",	0);
	create_insn	(x=0X448B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	set_cmt	(0X4490,	"allowed",	0);
	set_cmt	(0X4492,	"test bit 6 (large disk support bit?)\nNOTE: Retro DOS v5 kernel must set this bit.",	0);
	create_insn	(x=0X4492);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	set_cmt	(0X4499,	"allowed",	0);
	set_cmt	(0X449C,	"error",	0);
	create_insn	(0X44A0);
	set_cmt	(0X44A1,	"writable disk \n('jumped from ABSDWRT' sign for common r/w code)",	0);
	set_cmt	(0X44A2,	"jump to ABSDRD (common r/w) code",	0);
	create_insn	(0X44A5);
	set_cmt	(0X44B0,	"invalidate secondary cache",	0);
	set_cmt	(0X44B6,	"purge fatopen",	0);
	set_cmt	(0X44C7,	"logical unit number",	0);
	create_insn	(0X44C7);
	set_name	(0X44C7,	"GETBP");
	set_cmt	(0X44C8,	"no increment; need carry flag",	0);
	set_cmt	(0X44CF,	"good drive",	0);
	set_cmt	(0X44D3,	"error_not_DOS_disk",	0);
	set_cmt	(0X44D6,	"unknown media",	0);
	set_cmt	(0X44D9,	"invalid drive or Non DOS drive",	0);
	create_insn	(x=0X44D9);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X44DC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X44E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X44EA,	"[es:bp+curdir.flags+1],\ncurdir_isnet>>8",	0);
	create_insn	(x=0X44EA);
	op_hex		(x,	1);
	set_cmt	(0X44F1,	"error_not_supported",	0);
	create_insn	(x=0X44F1);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X44F9,	"[ES:BP+curdir.devptr]",	0);
	create_insn	(0X44F9);
	set_cmt	(0X4503,	"zero address, error",	0);
	create_insn	(x=0X4505);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4505,	"GOTDPB");
	create_insn	(x=0X4509);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X450E);
	set_name	(0X450E,	"SYS_RET_OK");
	set_cmt	(0X4511,	"[SI+user_env.user_F],~f_Carry",	0);
	create_insn	(x=0X4511);
	op_hex		(x,	1);
	set_cmt	(0X4518,	"hack to allow for smaller error rets",	0);
	create_insn	(0X4518);
	set_name	(0X4518,	"SYS_RET_ERR");
	set_cmt	(0X451A,	"Make sure code is OK, EXTERR gets set",	0);
	set_name	(0X4520,	"From_GetSet");
	set_cmt	(0X4523,	"[SI+user_env.user_F],f_Carry",	0);
	create_insn	(x=0X4523);
	op_hex		(x,	1);
	set_cmt	(0X452A,	"obsolete system calls dispatch to here",	0);
	create_insn	(0X452A);
	set_name	(0X452A,	"NO_OP");
	create_insn	(0X452D);
	set_name	(0X452D,	"FCB_RET_ERR");
	create_insn	(x=0X452F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4536,	"-1",	0);
	create_insn	(0X4539);
	set_name	(0X4539,	"ErrorMap");
	create_insn	(x=0X453A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X453D,	"Check for SPECIAL case.",	0);
	create_insn	(x=0X453D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4543,	"All is OK.",	0);
	set_cmt	(0X4545,	"error_FAIL_I24 ; real reason",	0);
	create_insn	(x=0X4545);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	set_cmt	(0X454C,	"Set CLASS,ACTION,LOCUS for EXTERR",	0);
	set_cmt	(0X4551,	"Look up and set CLASS ACTION and LOCUS values\n for GetExtendedError",	0);
	create_insn	(0X4551);
	set_name	(0X4551,	"CAL_LK");
	set_cmt	(0X4554,	"DOSDATA segment",	0);
	set_cmt	(0X4559,	"Get error in BL",	0);
	create_insn	(x=0X4559);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4560,	"End of table",	0);
	set_cmt	(0X4564,	"Got entry",	0);
	set_cmt	(0X4566,	"Next table entry",	0);
	create_insn	(0X456B);
	set_cmt	(0X4571,	"Set ACTION",	0);
	create_insn	(x=0X4571);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4579,	"Set CLASS",	0);
	create_insn	(x=0X4579);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X457C,	"Get LOCUS",	0);
	create_insn	(x=0X4581);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4588,	"check for appropriate error code",	0);
	create_insn	(0X4588);
	set_name	(0X4588,	"ETAB_LK");
	set_cmt	(0X458E,	"Set EXTERR with \"real\" error",	0);
	create_insn	(x=0X4591);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4594,	"Real code to BH",	0);
	set_cmt	(0X4596,	"Sys call to BL",	0);
	set_cmt	(0X459C,	"End of table?",	0);
	set_cmt	(0X45A0,	"Found call?",	0);
	set_cmt	(0X45A2,	"Yes",	0);
	set_cmt	(0X45A8,	"Next table entry",	0);
	set_cmt	(0X45AC,	"Restore original code",	0);
	create_insn	(0X45AC);
	create_insn	(0X45B0);
	set_cmt	(0X45B2,	"Count of valid err codes to CX",	0);
	set_cmt	(0X45B6,	"Code OK?",	0);
	set_cmt	(0X45B8,	"Yes",	0);
	set_cmt	(0X45BC,	"AX is now valid code",	0);
	set_cmt	(0X45C3,	"error_invalid_function",	0);
	create_insn	(0X45C3);
	set_name	(0X45C3,	"SetBad");
	set_cmt	(0X45CC,	"errLOC_Unk",	0);
	create_insn	(x=0X45CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X45D4);
	set_name	(0X45D4,	"BadCall");
	create_insn	(0X45D8);
	set_name	(0X45D8,	"OKCall");
	create_insn	(0X45DA);
	set_name	(0X45DA,	"INT2F");
	set_cmt	(0X45DB,	"MultNET",	0);
	set_name	(0X45E0,	"TestInstall");
	set_name	(0X45E4,	"BadFunc");
	set_name	(0X45E7,	"Leave2F");
	set_cmt	(0X45EA,	"MultSHARE",	0);
	create_insn	(0X45EA);
	set_name	(0X45EA,	"INT2FSHR");
	set_cmt	(0X45EF,	"NLSFUNC",	0);
	set_cmt	(0X45F4,	"MultDOS",	0);
	set_cmt	(0X45FC,	"MultWin386",	0);
	create_insn	(0X45FC);
	set_name	(0X45FC,	"check_win");
	set_cmt	(0X4601,	"WINOLDAP",	0);
	create_insn	(x=0X4601);
	op_hex		(x,	1);
	create_insn	(0X4609);
	set_name	(0X4609,	"next_i2f");
	create_insn	(0X460E);
	set_name	(0X460E,	"Win386_Msg");
	set_cmt	(0X4614,	"win386 2.xx instance data call?",	0);
	set_cmt	(0X4618,	"yes, return instance data",	0);
	set_cmt	(0X461B,	"Win386_Exit  ; is it an exit call?",	0);
	create_insn	(0X461B);
	set_name	(0X461B,	"Win386_Msg_exit");
	set_cmt	(0X4622,	"Win386_Devcall ; is it call from DOSMGR?",	0);
	create_insn	(0X4622);
	set_name	(0X4622,	"Win386_Msg_devcall");
	set_cmt	(0X4629,	"Win386_Init ; is it an init call?",	0);
	create_insn	(0X4629);
	set_name	(0X4629,	"Win386_Msg_init");
	create_insn	(0X4630);
	set_name	(0X4630,	"Win386_Starting");
	create_insn	(x=0X4636);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X463D,	"4F43h ('CO' in NASM syntax)",	0);
	create_insn	(x=0X463D);
	op_chr		(x,	1);
	set_name	(0X463D,	"Win386_s_floop");
	set_cmt	(0X4641,	"204Eh ('N ' in NASM syntax)",	0);
	create_insn	(x=0X4641);
	op_chr		(x,	1);
	create_insn	(x=0X4645);
	op_dec		(x,	1);
	set_cmt	(0X464E,	"is this really win386?",	0);
	create_insn	(x=0X464E);
	op_hex		(x,	1);
	set_cmt	(0X4652,	"yes",	0);
	set_cmt	(0X4654,	"win 286 dos extender",	0);
	create_insn	(x=0X4657);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4657,	"Win386_vchk");
	create_insn	(x=0X465D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4663,	"version >= 400",	0);
	set_name	(0X4669,	"Win386_vxd");
	create_insn	(x=0X466E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4678);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4685,	"not necessary (XOR already clears CF)",	0);
	set_cmt	(0X4686,	"!! PCDOS 7.1 bug !!\njump from 'Win386_Leaving' here was/is wrong\n(DI and SI would be reversed for 'Win386_Leaving')\nErdogan Tan - 05/01/2024",	0);
	set_name	(0X4686,	"restore_ubmhead");
	create_insn	(x=0X4687);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X468A);
	op_dec		(x,	1);
	create_insn	(x=0X468F);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4696,	"(not jumped from 'Win386_Leaving')",	0);
	set_cmt	(0X4698,	"(jumped from 'Win386_Leaving' just after 'stc')",	0);
	create_insn	(0X469B);
	set_name	(0X469B,	"restore_ubmhead_c");
	set_cmt	(0X469D,	"SUPPRESS_WINA20",	0);
	create_insn	(x=0X469D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	set_name	(0X469D,	"Vxd31");
	set_name	(0X46AA,	"jmp_to_noVxD31");
	create_insn	(x=0X46AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X46AC,	"Dont_Supress");
	set_cmt	(0X46AF,	"'A'-1",	0);
	create_insn	(x=0X46B1);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X46B4,	"ExtOpen<<8",	0);
	set_cmt	(0X46B7,	"read access, compatibility mode\nno inherit, suppress crit err",	0);
	set_cmt	(0X46BA,	"hidden,system,read-only attr",	0);
	set_cmt	(0X46BE,	"dx bit 0 = 1 ; fail if file does not exist",	0);
	create_insn	(x=0X46BF);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X46C5,	"DOS - 4.0 - EXTENDED OPEN/CREATE\nBL = open mode as in AL for normal open (INT 21h/AH=3Dh)\nBH = flags, CX = create attribute, DL = action if file exists/does not exists\nDH = 00h (reserved), DS:SI -> ASCIZ file name",	0);
	create_insn	(x=0X46C5);
	op_hex		(x,	0);
	set_cmt	(0X46CB,	"we found the VxD, go ahead",	0);
	create_insn	(x=0X46D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X46D5,	"VxDMesLen",	0);
	create_insn	(x=0X46D5);
	op_dec		(x,	1);
	set_cmt	(0X46D8,	"write char to console",	0);
	set_name	(0X46DB,	"vxdlp");
	set_cmt	(0X46DE,	"DOS - DISPLAY OUTPUT\nDL = character to send to standard output",	0);
	create_insn	(x=0X46DE);
	op_hex		(x,	0);
	create_insn	(0X46EA);
	set_name	(0X46EA,	"VxDthere");
	create_insn	(x=0X46EC);
	op_hex		(x,	1);
	set_cmt	(0X46EE,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle",	0);
	create_insn	(x=0X46EE);
	op_hex		(x,	0);
	create_insn	(x=0X46F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X46F3);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X46FD);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	set_name	(0X46FD,	"noVxD31");
	create_insn	(x=0X4702);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	create_insn	(x=0X470A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X4716,	"jmp_to_win_nexti2f");
	set_cmt	(0X4719,	"is this really win386?",	0);
	create_insn	(x=0X4719);
	op_hex		(x,	1);
	set_name	(0X4719,	"Win386_Leaving");
	set_cmt	(0X471D,	"NO! It's win 286 dos extender!",	0);
	set_cmt	(0X471F,	"was umb_arena saved at win start up ?",	0);
	create_insn	(x=0X471F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X471F,	"Win386_Leaving_c");
	set_cmt	(0X4724,	"not saved",	0);
	set_cmt	(0X4726,	"clear UmbSaveFlag \nand restore previously saved umb_head",	0);
	create_insn	(x=0X4726);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4730);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4736,	"CF=1 is a sign to jump 'restore_ubmhead_ok' address\nfrom -the common code at- 'restore_ubmhead' address\n(.. but this is a BUG!)\n;",	0);
	set_cmt	(0X4737,	"!! PCDOS 7.1 bug !! \n(jumped code does not restore umbhead, \nMSDOS 6.22 code was correct, modification is wrong)\nErdogan Tan - 05/01/2024\n\nCorrect code here, would be:\n   cld\n   mov  si,UmbSave1\n   mov  cx,11\n   rep  movsb\n   mov  si,UmbSave2\n   mov  cl,5\n   rep  movsb",	0);
	create_insn	(0X473A);
	set_name	(0X473A,	"restore_ubmhead_ok");
	create_insn	(x=0X473F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	set_name	(0X473F,	"noumb");
	create_insn	(x=0X4744);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	set_cmt	(0X474B,	"Win386_DOSMGR ; is this from DOSMGR?",	0);
	create_insn	(0X474B);
	set_name	(0X474B,	"Win386_Query");
	set_cmt	(0X474E,	"no, ignore it & chain to next",	0);
	set_cmt	(0X4750,	"is it an instance query?",	0);
	set_cmt	(0X4752,	"no, some DOSMGR query",	0);
	set_cmt	(0X4754,	"indicate that data is instanced",	0);
	create_insn	(x=0X4755);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4759,	"es:bx points at offset table",	0);
	create_insn	(0X475C);
	set_name	(0X475C,	"OldWin386Init");
	set_cmt	(0X475D,	"ds:si = instance table",	0);
	create_insn	(x=0X475D);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4760,	"'HR' ; indicate instance data present",	0);
	create_insn	(0X4765);
	set_name	(0X4765,	"dosmgr_func");
	set_cmt	(0X4766,	"call to patch DOS",	0);
	set_cmt	(0X4769,	"remove DOS patches, ignore",	0);
	set_cmt	(0X476C,	"get size of DOS data structures",	0);
	set_cmt	(0X476F,	"instance more data",	0);
	set_cmt	(0X4771,	"no functions above this",	0);
	set_cmt	(0X4773,	"Get DOS device driver size\nax = device header segment",	0);
	set_cmt	(0X4775,	"get arena header",	0);
	set_cmt	(0X4777,	"arena header for device driver",	0);
	set_cmt	(0X4779,	"is it a device arena?",	0);
	set_cmt	(0X477D,	"no",	0);
	set_cmt	(0X477F,	"get back device header segment",	0);
	set_cmt	(0X4780,	"owner field pointing at driver?",	0);
	set_cmt	(0X4784,	"no",	0);
	set_cmt	(0X4786,	"get arena size in paragraphs",	0);
	create_insn	(x=0X478B);
	op_dec		(x,	1);
	set_cmt	(0X4794,	"return with device driver size",	0);
	create_insn	(0X4796);
	set_name	(0X4796,	"cantsize");
	set_cmt	(0X4799,	"ask DOSMGR to use its methods",	0);
	set_name	(0X4799,	"win386_inst");
	set_cmt	(0X479D,	"move patch bitfield to bx",	0);
	create_insn	(0X479D);
	set_name	(0X479D,	"win386_patch");
	set_cmt	(0X479F,	"done, return",	0);
	set_cmt	(0X47A1,	"check for CDS size bit",	0);
	create_insn	(x=0X47A1);
	op_hex		(x,	1);
	set_name	(0X47A1,	"win386_size");
	set_cmt	(0X47A4,	"no, unknown structure -- return",	0);
	set_cmt	(0X47A6,	"cx = CDS size",	0);
	create_insn	(x=0X47A6);
	op_dec		(x,	1);
	set_cmt	(0X47A8,	"return with the size",	0);
	create_insn	(0X47AA);
	set_name	(0X47AA,	"jmp_to_win386_inst");
	set_cmt	(0X47AC,	"WIN_OP_DONE",	0);
	create_insn	(0X47AC);
	set_name	(0X47AC,	"win386_done");
	set_cmt	(0X47AF,	"DOSMGR_OP_DONE",	0);
	set_name	(0X47B2,	"PopIret");
	create_insn	(0X47B4);
	set_name	(0X47B4,	"win_nexti2f");
	set_name	(0X47B5,	"win_nexti2f2");
	create_insn	(x=0X47B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X47B8,	"getwinlast");
	create_insn	(0X47C5);
	set_name	(0X47C5,	"Winold_swap");
	set_cmt	(0X47CF,	"swap Windows out call",	0);
	set_cmt	(0X47D1,	"no, check if Swap in call",	0);
	set_cmt	(0X47D8,	"ds = memory arena of Windows",	0);
	create_insn	(x=0X47DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X47E3,	"save first 8 bytes",	0);
	create_insn	(x=0X47E7);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X47EA,	"save next 8 bytes",	0);
	set_cmt	(0X47EE,	"swap Windows in call?",	0);
	create_insn	(0X47EE);
	set_name	(0X47EE,	"swapin");
	set_cmt	(0X47F0,	"no, something else, pass it on",	0);
	create_insn	(x=0X47F9);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4800,	"restore first 8 bytes",	0);
	create_insn	(x=0X4804);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4807,	"restore next 8 bytes",	0);
	set_name	(0X4809,	"winold_done");
	set_cmt	(0X480E,	"chain on",	0);
	set_cmt	(0X4811,	"Windows95 - SET/CLEAR \"REPORT WINDOWS TO DOS PROGRAMS\" FLAG",	0);
	create_insn	(0X4811);
	set_name	(0X4811,	"int_2Fh_1231h");
	set_cmt	(0X481D,	"set byte after \"IsWIN386\" to 01h",	0);
	create_insn	(x=0X481D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X4824);
	set_name	(0X4825,	"not_1231_dl_0");
	set_cmt	(0X4828,	"clear \"IsWIN386\" bit 1",	0);
	set_cmt	(0X482A,	"set \"IsWIN386\" bit 1",	0);
	create_insn	(x=0X482A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	create_insn	(0X4831);
	set_name	(0X4832,	"not_1231_dl_1");
	set_cmt	(0X4837,	"clear bit 1",	0);
	create_insn	(x=0X4837);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	set_cmt	(0X483E,	"return error, ax = 1",	0);
	create_insn	(0X483E);
	set_name	(0X483E,	"not_1231_dl_2");
	set_name	(0X4840,	"int_2f_1231h_retn");
	set_cmt	(0X4842,	"push return address",	0);
	create_insn	(0X4842);
	set_name	(0X4842,	"DispatchDOS");
	set_cmt	(0X4847,	"push table address",	0);
	set_cmt	(0X484C,	"push index",	0);
	set_cmt	(0X484E,	"stack looks like:\n 0  BP\n 2  DISPATCH\n 4  TABLE\n 6  RETURN\n 8  LONG-RETURN\n C  FLAGS\n E  AX",	0);
	set_cmt	(0X4850,	"get AX value",	0);
	create_insn	(x=0X4850);
	op_dec		(x,	1);
	set_cmt	(0X4857,	"return indicates invalid function",	0);
	create_insn	(0X485A);
	set_name	(0X485A,	"DOSGetGroup");
	create_insn	(0X4860);
	set_name	(0X4860,	"DOSInstall");
	set_cmt	(0X4863,	"-1 -> 0",	0);
	create_insn	(0X4863);
	set_name	(0X4863,	"RW32_CONVERT");
	set_cmt	(0X4867,	"[es:bp+DPB.FAT_SIZE]",	0);
	set_cmt	(0X486C,	"FAT32 fs",	0);
	set_cmt	(0X4870,	"[es:bp+DPB.CLUSTER_MASK]",	0);
	set_cmt	(0X4874,	"[es:bp+DPB.MAX_CLUSTER]",	0);
	set_cmt	(0X4878,	"254 ; Sectors/cluster - 1",	0);
	set_cmt	(0X487B,	"removable",	0);
	set_cmt	(0X4883,	"> 32mb ?",	0);
	set_cmt	(0X4887,	"no",	0);
	set_cmt	(0X488B,	"[BX+ABS_32RW.SECTOR_RBA+2]",	0);
	create_insn	(0X488B);
	set_cmt	(0X488F,	"set up ds to DOSDATA",	0);
	create_insn	(x=0X4894);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4899,	"[BX+ABS_32RW.SECTOR_RBA]",	0);
	set_cmt	(0X489B,	"[BX+ABS_32RW.ABS_RW_COUNT]",	0);
	set_cmt	(0X489E,	"[BX+ABS_32RW.BUFFER_ADDR]",	0);
	create_insn	(0X48A3);
	set_name	(0X48A3,	"Fastxxx_Purge");
	set_cmt	(0X48AC,	"Fast_yes ; fastopen installed ?",	0);
	create_insn	(x=0X48AC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	set_cmt	(0X48B2,	"no",	0);
	set_cmt	(0X48B4,	"FastOpen_ID",	0);
	set_cmt	(0X48B6,	"FONC_purge",	0);
	set_cmt	(0X48B8,	"set up drive number",	0);
	set_cmt	(0X48BC,	"call fastopen/seek",	0);
	create_strlit	(0X48C3,	0X48D6);
	set_name	(0X48C3,	"DIVMES");
	create_word	(x=0X48D6);
	op_dec		(x,	0);
	set_name	(0X48D6,	"DivMesLen");
	create_strlit	(0X48D8,	0X493B);
	set_name	(0X48D8,	"NoVxDErrMsg");
	set_cmt	(0X493B,	"CANCEL ; Cancel line character",	0);
	create_byte	(x=0X493B);
	op_hex		(x,	0);
	set_name	(0X493B,	"CANCHAR");
	set_cmt	(0X493C,	"ESCCH ; Lead-in character for escape sequences",	0);
	create_byte	(0X493C);
	set_name	(0X493C,	"ESCCHAR");
	set_cmt	(0X493D,	"Ctrl-Z - F6",	0);
	create_byte	(0X493D);
	set_name	(0X493D,	"ESCTAB");
	set_cmt	(0X493E,	"Copy one char - -->",	0);
	create_byte	(0X493E);
	set_cmt	(0X493F,	"Copy one char - F1",	0);
	create_byte	(0X493F);
	set_cmt	(0X4940,	"Skip one char - DEL",	0);
	create_byte	(0X4940);
	set_cmt	(0X4941,	"Copy to char - F2",	0);
	create_byte	(0X4941);
	set_cmt	(0X4942,	"Skip to char - F4",	0);
	create_byte	(0X4942);
	set_cmt	(0X4943,	"Copy line - F3",	0);
	create_byte	(0X4943);
	set_cmt	(0X4944,	"Kill line (no change to template ) - Not used",	0);
	create_byte	(0X4944);
	set_cmt	(0X4945,	"Reedit line (new template) - F5",	0);
	create_byte	(0X4945);
	set_cmt	(0X4946,	"Backspace - <--",	0);
	create_byte	(0X4946);
	set_cmt	(0X4947,	"Enter insert mode - INS (toggle)",	0);
	create_byte	(0X4947);
	set_cmt	(0X4948,	"Exit insert mode - INS (toggle)",	0);
	create_byte	(0X4948);
	set_cmt	(0X4949,	"Escape character - F7",	0);
	create_byte	(0X4949);
	set_cmt	(0X494A,	"End of table",	0);
	create_byte	(0X494A);
	set_cmt	(0X494B,	"Ignore the escape sequence",	0);
	create_word	(x=0X494B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X494B,	"ESCFUNC");
	create_word	(x=0X494D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X494F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4951,	"ENTERINS",	0);
	create_word	(x=0X4951);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4953);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4955);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4957);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4959);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X495B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X495D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X495F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4961);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4963);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4965);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X4967);
	set_cmt	(0X496A,	"ESCTABLEN",	0);
	create_insn	(x=0X496A);
	op_dec		(x,	1);
	create_insn	(x=0X496D);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4977);
	op_hex		(x,	1);
	create_insn	(x=0X497B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X4980);
	set_name	(0X4980,	"$GET_DATE");
	set_cmt	(0X498F,	"[SI+user_env.user_DX]",	0);
	create_insn	(x=0X4992);
	op_dec		(x,	1);
	set_cmt	(0X4995,	"[SI+user_env.user_CX]",	0);
	set_name	(0X499C,	"_RET24");
	set_cmt	(0X499D,	"-1",	0);
	create_insn	(0X499D);
	set_name	(0X499D,	"$SET_DATE");
	set_cmt	(0X499F,	"Fix bias in year",	0);
	create_insn	(x=0X499F);
	op_dec		(x,	1);
	set_cmt	(0X49A3,	"Error if not big enough",	0);
	set_cmt	(0X49A5,	"Year must be less than 2100",	0);
	create_insn	(x=0X49A5);
	op_dec		(x,	1);
	set_cmt	(0X49B0,	"Error if either month or day is 0",	0);
	set_cmt	(0X49B2,	"Check against max. month",	0);
	create_insn	(x=0X49B2);
	op_dec		(x,	1);
	set_name	(0X49BC,	"RET24");
	create_insn	(0X49BD);
	set_name	(0X49BD,	"$GET_TIME");
	set_cmt	(0X49C2,	"Get pointer to user registers",	0);
	set_cmt	(0X49C5,	"[SI+user_env.user_DX]",	0);
	set_cmt	(0X49C8,	"[SI+user_env.user_CX]",	0);
	set_name	(0X49CB,	"set_time_ok");
	set_name	(0X49CD,	"RET26");
	set_cmt	(0X49CE,	"Flag in case of error",	0);
	create_insn	(0X49CE);
	set_name	(0X49CE,	"$SET_TIME");
	set_cmt	(0X49D0,	"Check hours",	0);
	create_insn	(x=0X49D0);
	op_dec		(x,	1);
	set_cmt	(0X49D5,	"Check minutes",	0);
	create_insn	(x=0X49D5);
	op_dec		(x,	1);
	set_cmt	(0X49DA,	"Check seconds",	0);
	create_insn	(x=0X49DA);
	op_dec		(x,	1);
	set_cmt	(0X49DF,	"Check 1/100's",	0);
	create_insn	(x=0X49DF);
	op_dec		(x,	1);
	create_insn	(x=0X49E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X49FA,	"Get correct day count",	0);
	create_insn	(x=0X4A02);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4A06);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4A0A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4A0E,	"Set the time",	0);
	create_insn	(0X4A13);
	set_name	(0X4A13,	"DATE16");
	create_insn	(x=0X4A28);
	op_hex		(x,	1);
	create_insn	(x=0X4A2E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4A38);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X4A3C,	"RET21");
	set_cmt	(0X4A3D,	"reset date flag for CPMIO",	0);
	create_insn	(x=0X4A3D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4A3D,	"READTIME");
	create_insn	(x=0X4A45);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4A52);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4A56,	"Get correct date and time",	0);
	create_insn	(x=0X4A5C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4A5F);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4A63);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4A67,	"See if day count is the same",	0);
	create_insn	(x=0X4A67);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4A6D,	"FOURYEARS*30 ; Number of days in 120 years",	0);
	create_insn	(x=0X4A6D);
	op_dec		(x,	1);
	set_cmt	(0X4A70,	"Ignore if too large",	0);
	create_insn	(x=0X4A72);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4A7A,	"FOURYEARS ; Number of days in 4 years",	0);
	create_insn	(x=0X4A7A);
	op_dec		(x,	1);
	set_cmt	(0X4A83,	"Multiply by 8 (no. of half-years)",	0);
	set_cmt	(0X4A85,	"<240 implies AH=0",	0);
	set_cmt	(0X4A87,	"Table of days in each year",	0);
	create_insn	(x=0X4A87);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4A8A,	"Find out which of four years we're in",	0);
	set_cmt	(0X4A8D,	"Convert half-years to whole years",	0);
	create_insn	(x=0X4A8D);
	op_hex		(x,	1);
	set_cmt	(0X4A8F,	"Extra half-year?",	0);
	create_insn	(x=0X4A91);
	op_dec		(x,	1);
	set_cmt	(0X4A98,	"At least at first month in year",	0);
	set_cmt	(0X4A9A,	"Table of days in each month",	0);
	create_insn	(x=0X4A9A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4A9D,	"Find out which month we're in",	0);
	create_insn	(x=0X4AA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4AA4,	"Remainder is day of month (start with one)",	0);
	create_insn	(x=0X4AA5);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4AA9,	"Set day of week",	0);
	set_name	(0X4AAF,	"RET22");
	set_cmt	(0X4AB0,	"(AH is already ZERO here!) 6/1/2024",	0);
	create_insn	(0X4AB0);
	set_name	(0X4AB0,	"DSLIDE");
	set_cmt	(0X4AB2,	"Get count of days",	0);
	set_cmt	(0X4AB3,	"See if it will fit",	0);
	set_cmt	(0X4AB9,	"Count one more month/year",	0);
	create_insn	(0X4ABC);
	set_name	(0X4ABC,	"SETYEAR");
	create_insn	(x=0X4AC1);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4AC5,	"Check for leap year",	0);
	create_insn	(x=0X4AC5);
	op_hex		(x,	1);
	set_name	(0X4AC5,	"CHKYR");
	set_cmt	(0X4AC8,	"28 days if no leap year",	0);
	create_insn	(x=0X4AC8);
	op_dec		(x,	1);
	set_cmt	(0X4ACC,	"Add leap day",	0);
	set_cmt	(0X4ACE,	"[MONTAB+1],AL ; Store for February",	0);
	create_insn	(x=0X4ACE);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4AD1,	"RET23");
	set_cmt	(0X4AD2,	"Set Feb. up for new year",	0);
	create_insn	(0X4AD2);
	set_name	(0X4AD2,	"DODATE");
	set_cmt	(0X4AD7,	"MONTAB-1",	0);
	create_insn	(x=0X4AD7);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4ADA,	"Look up days in month",	0);
	set_cmt	(0X4ADD,	"-1",	0);
	set_cmt	(0X4ADF,	"Error if too many days",	0);
	set_cmt	(0X4AE4,	"Set both day and month",	0);
	create_insn	(x=0X4AE4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4AE8);
	op_hex		(x,	1);
	create_insn	(x=0X4AEA);
	op_hex		(x,	1);
	set_cmt	(0X4AEC,	"FOURYEARS",	0);
	create_insn	(x=0X4AEC);
	op_dec		(x,	1);
	create_insn	(x=0X4AF3);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4AF7);
	op_hex		(x,	1);
	create_insn	(x=0X4AFA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4AFF,	"Two entries per year, so double count",	0);
	set_cmt	(0X4B01,	"Add up the days in each year",	0);
	set_cmt	(0X4B04,	"Month of year",	0);
	create_insn	(x=0X4B06);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4B09,	"Account for months starting with one",	0);
	set_cmt	(0X4B0A,	"Add up days in each month",	0);
	set_cmt	(0X4B0D,	"Day of month",	0);
	set_cmt	(0X4B0F,	"Account for days starting with one",	0);
	set_cmt	(0X4B10,	"Add in to day total",	0);
	set_cmt	(0X4B12,	"Get day count in AX",	0);
	create_insn	(x=0X4B13);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4B19);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4B27);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4B2B,	"Get correct date and time",	0);
	create_insn	(x=0X4B33);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4B38);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4B3C,	"Set the date",	0);
	create_insn	(x=0X4B42);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X4B42,	"WKDAY");
	set_cmt	(0X4B4B,	"First day was Tuesday",	0);
	set_cmt	(0X4B4C,	"Compute day of week",	0);
	create_insn	(x=0X4B4E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4B52,	"Flag OK",	0);
	create_insn	(0X4B55);
	set_name	(0X4B55,	"DSUM");
	create_insn	(0X4B5F);
	set_name	(0X4B5F,	"$GET_VERSION");
	set_cmt	(0X4B6C,	"return 0 (not ROMDOS version)",	0);
	set_cmt	(0X4B6E,	"Get the version number from the\ncurrent app's PSP segment",	0);
	set_name	(0X4B6E,	"Norm_Vers");
	set_cmt	(0X4B72,	"[PDB.Version]\nAX = DOS version number",	0);
	create_insn	(x=0X4B72);
	set_cmt	(0X4B78,	"[SI+user_env.user_AX]",	0);
	set_name	(0X4B78,	"gdrvfspc_ret");
	set_cmt	(0X4B7A,	"[SI+user_env.user_CX]",	0);
	set_cmt	(0X4B7D,	"[SI+user_env.user_BX]",	0);
	set_name	(0X4B7D,	"set_user_bx");
	create_insn	(0X4B81);
	set_name	(0X4B81,	"$GET_VERIFY_ON_WRITE");
	create_insn	(x=0X4B86);
	op_hex		(x,	1);
	set_name	(0X4B86,	"$SET_VERIFY_ON_WRITE");
	set_name	(0X4B8C,	"RET27");
	set_cmt	(0X4B8D,	"-1 means country code is in BX",	0);
	create_insn	(0X4B8D);
	set_name	(0X4B8D,	"$INTERNATIONAL");
	set_cmt	(0X4B91,	"Put AL country code in BX",	0);
	set_name	(0X4B95,	"BX_HAS_CODE");
	set_cmt	(0X4B98,	"User buffer to ES:DI",	0);
	set_cmt	(0X4B9B,	"-1",	0);
	create_insn	(x=0X4BA4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4BA9,	"0 ; flag it for GetCntry only",	0);
	create_insn	(0X4BA9);
	set_name	(0X4BA9,	"international_find");
	set_cmt	(0X4BB0,	"nlsfunc finished it ?",	0);
	set_cmt	(0X4BB2,	"no, copy by myself",	0);
	set_cmt	(0X4BB4,	"put country back",	0);
	create_insn	(x=0X4BB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X4BB8,	"international_get");
	set_cmt	(0X4BBB,	"[SI+DOS_CCDPG.ccDosCountry]",	0);
	set_cmt	(0X4BBF,	"= current country id",	0);
	set_cmt	(0X4BC3,	"bx = 0, default code page",	0);
	set_cmt	(0X4BC8,	"- Multiplex - NLSFUNC.COM - INSTALLATION CHECK\nReturn: AL = 00h not installed, OK to install\n01h not installed, not OK\nFFh installed",	0);
	create_insn	(x=0X4BC8);
	op_hex		(x,	0);
	set_cmt	(0X4BCA,	"not in memory",	0);
	set_cmt	(0X4BCE,	"set country info",	0);
	set_cmt	(0X4BD1,	"GetCntry ?",	0);
	set_cmt	(0X4BD5,	"AX = 1404h ; get country info",	0);
	set_cmt	(0X4BD6,	"- Multiplex - NLSFUNC.COM - GET COUNTRY INFO\nBX = code page, DX = country code, DS:SI -> internal code page structure\nES:DI -> user buffer\nReturn: AL = status",	0);
	create_insn	(x=0X4BD6);
	op_hex		(x,	0);
	create_insn	(0X4BDE);
	set_cmt	(0X4BE2,	"[ss:SI+DOS_CCDPG.ccDosCountry]",	0);
	create_insn	(0X4BE2);
	set_name	(0X4BE2,	"international_copy");
	set_cmt	(0X4BE6,	"COUNTRY_CDPG+DOS_CCDPG.ccDFormat",	0);
	create_insn	(x=0X4BE6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4BE9,	"OLD_COUNTRY_SIZE/2",	0);
	create_insn	(x=0X4BE9);
	op_dec		(x,	1);
	set_name	(0X4BF2,	"international_ok3");
	set_cmt	(0X4BF5,	"MOV [SI+user_env.user_BX],BX",	0);
	set_name	(0X4BF8,	"international_ok");
	create_insn	(0X4BFD);
	set_name	(0X4BFD,	"international_set");
	set_name	(0X4C05,	"errtn");
	set_name	(0X4C09,	"errtn1");
	set_cmt	(0X4C0C,	"error_invalid_function",	0);
	create_insn	(0X4C0C);
	set_name	(0X4C0C,	"errtn2");
	set_cmt	(0X4C0E,	"NLSFUNC not existent",	0);
	set_cmt	(0X4C10,	"INT 21h, AH = 70h (06/01/2024 - Erdogan Tan)\nGET/SET INTERNATIONALIZATION INFORMATION\n****\nAL = subfunction\n00h SET general internationalization info\n    CX = buffer size (up to 38 bytes)\n    DS:SI -> buffer containing internationalization info\n first three bytes are skipped, the rest is copied to somewhere\n in the DOS data segment\n01h SET extended internationalization info\n    CX = number of bytes to set (up to 58 bytes)\n    DS:SI -> buffer containing internationalization info\n02h GET extended internationalization info\n    CX = buffer size in bytes (up to 58 bytes used)\n    ES:DI -> buffer\n****\n(Ref: Ralf Brown's Interrupt List) - had some mistakes -",	0);
	create_insn	(0X4C10);
	set_name	(0X4C10,	"$ExtCountryInfo");
	set_cmt	(0X4C18,	"AX = GET 35 bytes info (from offset 3 to 37)\n(38 bytes buffer is used)",	0);
	create_insn	(x=0X4C19);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4C1C,	"NEW_COUNTRY_SIZE = 38",	0);
	set_cmt	(0X4C20,	"skip the 1st 3 bytes of the buffer",	0);
	create_insn	(0X4C27);
	set_name	(0X4C27,	"ext_cntry_inf_1");
	set_cmt	(0X4C29,	"AX = 2",	0);
	set_cmt	(0X4C2B,	"AX = 1 (set)",	0);
	create_insn	(x=0X4C2C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4C31,	"AX = 2 (get)",	0);
	create_insn	(0X4C31);
	set_name	(0X4C31,	"ext_cntry_inf_2");
	create_insn	(x=0X4C32);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4C35,	"0",	0);
	set_name	(0X4C35,	"ext_cntry_inf_3");
	set_cmt	(0X4C37,	"3Ah",	0);
	create_insn	(x=0X4C37);
	op_dec		(x,	1);
	set_cmt	(0X4C3A,	"> 38 ? (58)",	0);
	set_name	(0X4C3A,	"ext_cntry_inf_4");
	set_cmt	(0X4C3C,	"no",	0);
	set_cmt	(0X4C3E,	"yes, decrease size to 38 (58)",	0);
	set_cmt	(0X4C40,	"buffer (filled) size",	0);
	set_name	(0X4C40,	"ext_cntry_inf_5");
	set_cmt	(0X4C42,	"copy byte count",	0);
	set_cmt	(0X4C4A,	"CAP_ONE_CHAR  ; < 20h",	0);
	create_insn	(x=0X4C4A);
	op_hex		(x,	1);
	set_name	(0X4C4A,	"$GetExtCntry");
	set_cmt	(0X4C4E,	"UPPER_TABLE",	0);
	create_insn	(x=0X4C4E);
	op_hex		(x,	1);
	set_cmt	(0X4C50,	"file upper case",	0);
	set_cmt	(0X4C52,	"UCASE_TAB+2\nget normal upper case",	0);
	create_insn	(x=0X4C52);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4C57);
	op_hex		(x,	1);
	set_name	(0X4C57,	"fileupper");
	set_cmt	(0X4C59,	"FILE_UCASE_TAB+2 \nget file upper case",	0);
	create_insn	(x=0X4C59);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4C5C,	"CAP_ONE_CHAR ; cap one char ?",	0);
	create_insn	(x=0X4C5C);
	op_hex		(x,	1);
	set_name	(0X4C5C,	"capit");
	set_cmt	(0X4C60,	"set up AL",	0);
	set_cmt	(0X4C62,	"upper case it",	0);
	set_cmt	(0X4C65,	"get user stack",	0);
	set_cmt	(0X4C68,	"[SI+user_env.user_DX]",	0);
	set_cmt	(0X4C6B,	"done",	0);
	set_cmt	(0X4C6D,	"CHECK_YES_NO",	0);
	create_insn	(x=0X4C6D);
	op_hex		(x,	1);
	set_name	(0X4C6D,	"chkyes");
	set_cmt	(0X4C6F,	"no\nYes/No",	0);
	set_cmt	(0X4C71,	"presume NO",	0);
	set_cmt	(0X4C78,	"Y(ES)",	0);
	set_cmt	(0X4C7F,	"y(es)",	0);
	set_cmt	(0X4C86,	"N(O)",	0);
	set_cmt	(0X4C8D,	"n(o)",	0);
	set_cmt	(0X4C8F,	"not YES or NO",	0);
	set_cmt	(0X4C90,	"YES = 1",	0);
	set_name	(0X4C90,	"yesyes");
	set_name	(0X4C91,	"nono");
	create_insn	(0X4C94);
	set_name	(0X4C94,	"capstring");
	set_cmt	(0X4C96,	"CAP_STRING",	0);
	create_insn	(x=0X4C96);
	op_hex		(x,	1);
	set_cmt	(0X4C9C,	"get char",	0);
	set_name	(0X4C9C,	"concap");
	set_cmt	(0X4C9D,	"upper case it",	0);
	set_cmt	(0X4CA0,	"store back",	0);
	set_cmt	(0X4CA3,	"continue",	0);
	set_cmt	(0X4CA5,	"done",	0);
	set_cmt	(0X4CA7,	"CAP_ASCIIZ",	0);
	create_insn	(x=0X4CA7);
	op_hex		(x,	1);
	set_name	(0X4CA7,	"capascii");
	set_cmt	(0X4CAB,	"get char",	0);
	set_name	(0X4CAB,	"concap2");
	set_cmt	(0X4CAC,	"end of string ?",	0);
	set_cmt	(0X4CAE,	"yes",	0);
	set_cmt	(0X4CB0,	"upper case it",	0);
	set_cmt	(0X4CB3,	"store back",	0);
	set_cmt	(0X4CB6,	"continue",	0);
	set_cmt	(0X4CB8,	"minimum size is 5",	0);
	create_insn	(0X4CB8);
	set_name	(0X4CB8,	"notcap");
	set_cmt	(0X4CBB,	"sizeerror",	0);
	set_name	(0X4CBD,	"GEC_CONT");
	create_insn	(x=0X4CBF);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4CC4,	"\nAL = 0 (INT 21h, AX=6500h)\nSet extended country-dependent information\n(SET GENERAL INTERNATIONALIZATION INFO)",	0);
	set_cmt	(0X4CC6,	"minimum 8 bytes",	0);
	set_cmt	(0X4CC9,	"error_invalid_function",	0);
	set_cmt	(0X4CCB,	"[SI+DOS_CCDPG.ccSysCodePage]",	0);
	set_cmt	(0X4CCE,	"SI+DOS_CCDPG.ccCountryInfoLen",	0);
	set_name	(0X4CDC,	"gec_c1");
	set_cmt	(0X4CE1,	"info length/size (will be written)",	0);
	set_cmt	(0X4CE5,	"DOS_CCDPG.ccDFormat",	0);
	set_cmt	(0X4CE8,	"points to date format",	0);
	set_cmt	(0X4CEB,	"ds:si = user's buffer + 6\nes:di = country info buffer + 7",	0);
	set_cmt	(0X4CF0,	"-1 ; active country ?",	0);
	create_insn	(0X4CF0);
	set_name	(0X4CF0,	"gec_c2");
	set_cmt	(0X4CF5,	"[SI+DOS_CCDPG.ccDosCountry]",	0);
	set_cmt	(0X4CF8,	"-1 ; active code page?",	0);
	set_name	(0X4CF8,	"gec_c3");
	set_cmt	(0X4CFD,	"[SI+DOS_CCDPG.ccDosCodePage] ; get active code page",	0);
	set_cmt	(0X4D00,	"[SI+DOS_CCDPG.ccDosCountry] ; same ?",	0);
	set_name	(0X4D00,	"CHKAGAIN");
	set_cmt	(0X4D03,	"no",	0);
	set_cmt	(0X4D05,	"[SI+DOS_CCDPG.ccDosCodePage] ; same ?",	0);
	set_cmt	(0X4D08,	"no",	0);
	set_cmt	(0X4D0A,	"yes, same code page and same country id\n[SI+DOS_CCDPG.ccSysCodePage]",	0);
	set_name	(0X4D0A,	"CHKTYPE");
	set_cmt	(0X4D0E,	"[SI+DOS_CCDPG.ccNumber_of_entries]",	0);
	set_cmt	(0X4D11,	"COUNTRY_CDPG+DOS_CCDPG.ccSetUcase",	0);
	create_insn	(x=0X4D11);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4D14,	"compare info type",	0);
	set_name	(0X4D14,	"NXTENTRY");
	set_cmt	(0X4D18,	"next entry",	0);
	set_cmt	(0X4D1E,	"error_invalid_function",	0);
	set_name	(0X4D1E,	"capinval");
	set_cmt	(0X4D21,	"move info id byte",	0);
	create_insn	(0X4D21);
	set_name	(0X4D21,	"FOUNDIT");
	set_cmt	(0X4D22,	"restore char count",	0);
	set_cmt	(0X4D23,	"SetCountryInfo ; select country info type ?",	0);
	set_cmt	(0X4D25,	"yes",	0);
	set_cmt	(0X4D27,	"4 bytes will be moved",	0);
	set_cmt	(0X4D2A,	"5 bytes will be returned in CX",	0);
	set_cmt	(0X4D2D,	"copy info",	0);
	set_name	(0X4D2D,	"OK_RETN");
	set_cmt	(0X4D2F,	"CX = actual length returned",	0);
	set_cmt	(0X4D31,	"return sys code page in ax",	0);
	set_cmt	(0X4D33,	"return actual length to user's CX",	0);
	set_name	(0X4D33,	"GETDONE");
	set_cmt	(0X4D36,	"[SI+user_env.user_CX]",	0);
	set_name	(0X4D39,	"nono_jmp");
	set_cmt	(0X4D3C,	"size after length field",	0);
	create_insn	(0X4D3C);
	set_name	(0X4D3C,	"setsize");
	set_cmt	(0X4D3F,	"less than table size",	0);
	set_cmt	(0X4D41,	"no",	0);
	set_cmt	(0X4D43,	"truncate to table size",	0);
	set_cmt	(0X4D45,	"copy actual length to user's buffer",	0);
	set_cmt	(0X4D48,	"update index",	0);
	set_cmt	(0X4D4E,	"AX has the actual length",	0);
	create_insn	(0X4D53);
	set_name	(0X4D53,	"CHKNLS");
	set_cmt	(0X4D5A,	"- Multiplex - NLSFUNC.COM - INSTALLATION CHECK\nReturn: AL = 00h not installed, OK to install\n01h not installed, not OK\nFFh installed",	0);
	create_insn	(x=0X4D5A);
	op_hex		(x,	0);
	set_cmt	(0X4D5E,	"in memory",	0);
	set_name	(0X4D60,	"sizeerror");
	create_insn	(0X4D62);
	set_cmt	(0X4D65,	"- Multiplex - NLSFUNC.COM - GET COUNTRY INFO\nBP = subfunction, BX = code page\nDX = country code, DS:SI -> internal code page structure\nES:DI -> user buffer, CX = size of user buffer\nReturn: AL = status\n00h successful\nelse DOS error code",	0);
	create_insn	(x=0X4D65);
	op_hex		(x,	0);
	set_cmt	(0X4D6B,	"[SI+DOS_CCDPG.ccSysCodePage]",	0);
	create_insn	(0X4D70);
	set_name	(0X4D70,	"NLSERROR");
	create_insn	(0X4D73);
	set_name	(0X4D73,	"$GetSetCdPg");
	create_insn	(x=0X4D75);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4D78,	"get global code page",	0);
	set_cmt	(0X4D7C,	"[SI+DOS_CCDPG.ccDosCodePage]",	0);
	set_cmt	(0X4D7F,	"[SI+DOS_CCDPG.ccSysCodePage]",	0);
	set_cmt	(0X4D88,	"[SI+user_env.user_DX]",	0);
	set_name	(0X4D8B,	"OK_RETURN");
	set_cmt	(0X4D8D,	"set global codepage",	0);
	create_insn	(0X4D8D);
	set_name	(0X4D8D,	"setglpg");
	set_cmt	(0X4D91,	"[SI+DOS_CCDPG.ccDosCountry]",	0);
	set_cmt	(0X4D97,	"- Multiplex - NLSFUNC.COM - INSTALLATION CHECK\nReturn: AL = 00h not installed, OK to install\n01h not installed, not OK\nFFh installed",	0);
	create_insn	(x=0X4D97);
	op_hex		(x,	0);
	set_cmt	(0X4DA0,	"- Multiplex - NLSFUNC.COM - CHANGE CODE PAGE\nDS:SI -> internal code page structure\nBX = new code page, DX = country code???\nReturn: AL = status\n00h successful\nelse DOS error code",	0);
	create_insn	(x=0X4DA0);
	op_hex		(x,	0);
	set_cmt	(0X4DA6,	"set device code page failed",	0);
	create_insn	(x=0X4DA6);
	op_hex		(x,	1);
	set_cmt	(0X4DAE,	"errACT_Ignore",	0);
	set_cmt	(0X4DB3,	"errCLASS_HrdFail",	0);
	set_cmt	(0X4DB8,	"errLOC_SerDev",	0);
	set_cmt	(0X4DC0,	"transfer SYS_RET_ERR",	0);
	create_insn	(0X4DC0);
	set_name	(0X4DC0,	"seterr");
	set_cmt	(0X4DC2,	"function not defined",	0);
	create_insn	(0X4DC2);
	set_name	(0X4DC2,	"nomem");
	create_insn	(0X4DC4);
	set_name	(0X4DC4,	"$GET_DRIVE_FREESPACE");
	create_insn	(0X4DD6);
	set_name	(0X4DD6,	"gdrvfspc_1");
	set_name	(0X4DE2,	"gdrvfspc_2");
	set_name	(0X4DE4,	"DoSt");
	create_insn	(0X4DED);
	set_name	(0X4DED,	"BADFDRV");
	set_cmt	(0X4DF0,	"-1",	0);
	create_insn	(0X4DF5);
	set_name	(0X4DF5,	"$GET_DMA");
	create_insn	(0X4E08);
	set_name	(0X4E08,	"$SET_DMA");
	create_insn	(0X4E13);
	set_name	(0X4E13,	"$GET_DEFAULT_DRIVE");
	create_insn	(0X4E18);
	set_name	(0X4E18,	"$SET_DEFAULT_DRIVE");
	set_name	(0X4E25,	"SETRET");
	create_insn	(0X4E2A);
	set_name	(0X4E2A,	"$GET_INTERRUPT_VECTOR");
	create_insn	(0X4E39);
	set_name	(0X4E39,	"$SET_INTERRUPT_VECTOR");
	create_insn	(x=0X4E45);
	op_hex		(x,	1);
	create_insn	(0X4E4E);
	create_insn	(0X4E5D);
	set_name	(0X4E5D,	"RECSET");
	create_insn	(x=0X4E63);
	op_hex		(x,	1);
	create_insn	(x=0X4E65);
	op_hex		(x,	1);
	create_insn	(0X4E68);
	set_name	(0X4E68,	"$CHAR_OPER");
	create_insn	(x=0X4E6A);
	op_chr		(x,	1);
	create_insn	(0X4E75);
	create_insn	(0X4E7C);
	set_name	(0X4E7C,	"$GetExtendedError");
	set_name	(0X4E99,	"_jmp_to_SYS_RET_OK");
	create_insn	(0X4E9C);
	set_name	(0X4E9C,	"$ECS_Call");
	create_insn	(x=0X4EA3);
	op_hex		(x,	0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4EAE);
	op_dec		(x,	0);
	set_name	(0X4EB2,	"_okok");
	set_cmt	(0X4EB4,	"longname functions are not supported",	0);
	create_insn	(0X4EB4);
	set_name	(0X4EB4,	"$LONGNAME");
	set_name	(0X4EB6,	"lfn_error");
	create_insn	(x=0X4EB9);
	op_hex		(x,	1);
	set_cmt	(0X4EC1,	"INT 21h AX = 7305h",	0);
	create_insn	(0X4EC1);
	set_name	(0X4EC1,	"$FAT32EXT");
	set_cmt	(0X4EC5,	"error_invalid_function",	0);
	set_name	(0X4EC7,	"fat32_ext_func_err");
	create_insn	(x=0X4ECA);
	op_hex		(x,	1);
	set_name	(0X4ECA,	"function_5_invalid_cx");
	set_name	(0X4ECC,	"fat32_ext_func_err_j");
	create_insn	(0X4ECE);
	set_name	(0X4ECE,	"valid_fat32_ext_function");
	set_cmt	(0X4ED0,	"Function 5 - FAT32 - EXTENDED ABSOLUTE DISK READ/WRITE",	0);
	set_cmt	(0X4ED5,	"read/write mode flags",	0);
	create_insn	(x=0X4ED5);
	op_hex		(x,	1);
	set_cmt	(0X4EDB,	"drive number, 1 = A",	0);
	create_insn	(x=0X4EE1);
	op_hex		(x,	1);
	set_cmt	(0X4EE7,	"INT 21h AX = 7305h (SI bit 0 = 1)",	0);
	set_cmt	(0X4EEC,	"INT 21h AX = 7305h (SI bit 0 = 0)",	0);
	create_insn	(0X4EEC);
	set_name	(0X4EEC,	"function_5_read");
	set_name	(0X4EEF,	"fat32_absdrw_ret");
	create_insn	(0X4EF4);
	set_name	(0X4EF4,	"not_function_5");
	set_cmt	(0X4EF6,	"Function 3 - FAT32 - GET EXTENDED FREE SPACE ON DRIVE",	0);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_1(void) {
        auto x;
#define id x

	set_cmt	(0X4EFC,	"Function 2 - FAT32 - \"Get_ExtDPB\" - GET EXTENDED DPB\nFunction 4 - FAT32 - Set DPB TO USE FOR FORMATTING",	0);
	set_cmt	(0X4EFF,	"MSDOS 7 - DRIVE LOCKING AND FLUSHING",	0);
	create_insn	(x=0X4EFF);
	op_dec		(x,	1);
	set_name	(0X4EFF,	"chk_drive_lock_flush");
	set_cmt	(0X4F04,	"invalid drive number",	0);
	set_cmt	(0X4F06,	"ax = error code",	0);
	set_name	(0X4F06,	"drv_lock_flush_err");
	create_insn	(0X4F08);
	set_name	(0X4F08,	"drv_lock_flush_1");
	set_cmt	(0X4F0C,	"0 = default/current drive)",	0);
	set_name	(0X4F11,	"drv_lock_flush_2");
	set_cmt	(0X4F15,	"which flag to get or set",	0);
	set_cmt	(0X4F1A,	"error_invalid_function",	0);
	create_insn	(x=0X4F1E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X4F1E,	"drv_lock_flush_3");
	set_cmt	(0X4F25,	"use bit 1 and bit 2",	0);
	set_cmt	(0X4F27,	"get drive's dirty-buffers flag",	0);
	set_cmt	(0X4F29,	"use bit 3",	0);
	set_cmt	(0X4F2B,	"clear bit 3",	0);
	create_insn	(x=0X4F2B);
	op_hex		(x,	1);
	set_cmt	(0X4F2E,	"izolate bit 3 of the new flag value",	0);
	create_insn	(x=0X4F2E);
	op_hex		(x,	1);
	set_cmt	(0X4F31,	"set AH bit 3 according to CH bit 3",	0);
	set_cmt	(0X4F33,	"set or reset dirty buffer flag",	0);
	create_insn	(x=0X4F33);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4F38);
	op_hex		(x,	1);
	set_cmt	(0X4F3B,	"bit 3 is set/1",	0);
	set_name	(0X4F42,	"set_dirty_flag_ok");
	set_cmt	(0X4F44,	"izolate dirty buffers flag",	0);
	create_insn	(x=0X4F44);
	op_hex		(x,	1);
	set_name	(0X4F44,	"get_dirty_buf_flag");
	set_cmt	(0X4F47,	"AH = new flag and 08h (bit 3 used)",	0);
	create_insn	(0X4F49);
	set_name	(0X4F49,	"get_set_indctd_flag");
	set_cmt	(0X4F4D,	"clear bit 1 and bit 2",	0);
	create_insn	(x=0X4F4D);
	op_hex		(x,	1);
	set_cmt	(0X4F50,	"new value for indicated flag",	0);
	create_insn	(x=0X4F50);
	op_hex		(x,	1);
	set_cmt	(0X4F53,	"bit 1 is zero",	0);
	set_cmt	(0X4F55,	"set bit 1 and bit 2",	0);
	create_insn	(x=0X4F55);
	op_hex		(x,	1);
	create_insn	(x=0X4F58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4F58,	"reset_indctd_flags");
	set_cmt	(0X4F5F,	"AH = new flag and 06h (bits 1 and 2 used)",	0);
	create_insn	(x=0X4F5F);
	op_hex		(x,	1);
	set_name	(0X4F5F,	"get_indicated_flag");
	set_cmt	(0X4F62,	"value of CL on entry",	0);
	set_name	(0X4F62,	"mov_flag_cl_to_al");
	set_name	(0X4F64,	"return_ax_to_user");
	set_cmt	(0X4F67,	"requested flag",	0);
	set_name	(0X4F6A,	"jmp_to_SYS_RET_OK");
	set_cmt	(0X4F6D,	"FAT32 - GET EXTENDED FREE SPACE ON DRIVE\nAX = 7303h\nDS:DX -> ASCIZ string for drive (\"C:\\\" or \"\\\\SERVER\\Share\")\nES:DI -> buffer for extended free space structure\nCX = length of buffer for extended free space",	0);
	create_insn	(0X4F6D);
	set_name	(0X4F6D,	"function_73_3");
	create_insn	(x=0X4F76);
	op_dec		(x,	1);
	set_cmt	(0X4F86,	"buffer (Structure) size must be 44",	0);
	create_insn	(x=0X4F86);
	op_dec		(x,	1);
	set_cmt	(0X4F8B,	"buffer structure version (must be 0)",	0);
	set_name	(0X4F9B,	"func_73_3_err1");
	set_cmt	(0X4F9E,	"error_invalid_drive",	0);
	set_name	(0X4F9E,	"func_73_3_err2");
	set_name	(0X4FA0,	"jmp_to_SYS_RET_ERR");
	set_cmt	(0X4FA3,	"error_invalid_parameter",	0);
	create_insn	(x=0X4FA3);
	op_hex		(x,	1);
	set_name	(0X4FA3,	"func_73_3_err3");
	set_name	(0X4FA5,	"jmp_to_jmp_SYS_RET_ERR");
	set_cmt	(0X4FA7,	"error_bad_length",	0);
	create_insn	(0X4FA7);
	set_name	(0X4FA7,	"func_73_3_err4");
	create_insn	(0X4FAB);
	set_name	(0X4FAB,	"fill_efs_struc_b");
	set_cmt	(0X4FB2,	"si:dx = free cluster count",	0);
	set_cmt	(0X4FB3,	"di:bx = number of clusters",	0);
	set_cmt	(0X4FB7,	"user's buffer segment (in ES)",	0);
	set_cmt	(0X4FBA,	"user's buffer offset/address (in DI)",	0);
	set_cmt	(0X4FBD,	"total number of clusters on the drive",	0);
	set_cmt	(0X4FC1,	"total allocation units, without adjustment for compression",	0);
	set_cmt	(0X4FC6,	"total number of clusters on the drive, hw",	0);
	set_cmt	(0X4FCA,	"total allocation units, hw",	0);
	set_cmt	(0X4FCE,	"number of available clusters",	0);
	set_cmt	(0X4FD2,	"number of available allocation units, without adjustment",	0);
	set_cmt	(0X4FD7,	"number of available clusters, hw",	0);
	set_cmt	(0X4FDB,	"number of available allocation units, hw",	0);
	set_cmt	(0X4FDF,	"bytes per sector",	0);
	set_cmt	(0X4FE3,	"sectors per cluster (with adjustment for compression)",	0);
	set_cmt	(0X4FE9,	"32 bit multiplication",	0);
	set_cmt	(0X4FEB,	"disk capacity calculation overflow error",	0);
	set_cmt	(0X4FEF,	"total allocation units, lw",	0);
	set_cmt	(0X4FF9,	"set to 0FFFFFFFFh",	0);
	set_name	(0X4FF9,	"dsk_cap_calc_overf");
	set_name	(0X4FFE,	"dsk_cap_calc_ok");
	set_cmt	(0X5002,	"total number of physical sectors on the drive,\nwithout adjustment for compression",	0);
	set_cmt	(0X5006,	"32 bit multiplication",	0);
	set_cmt	(0X5008,	"number of available clusters, hw",	0);
	set_cmt	(0X5010,	"number of available clusters, lw",	0);
	set_name	(0X501A,	"dsk_free_calc_overf");
	set_cmt	(0X501F,	"hw",	0);
	set_name	(0X501F,	"dsk_free_calc_ok");
	set_cmt	(0X5023,	"number of physical sectors available on the drive,\nwithout adjustment for compression",	0);
	set_cmt	(0X5027,	"0",	0);
	set_cmt	(0X5029,	"number of bytes per sector, high word = 0",	0);
	set_cmt	(0X502D,	"number of sectors per cluster, high word = 0",	0);
	set_cmt	(0X5031,	"reserved, 8 bytes zero",	0);
	create_insn	(x=0X5041);
	op_dec		(x,	1);
	set_cmt	(0X5044,	"size of returned structure = 44",	0);
	create_insn	(0X504A);
	create_insn	(0X5055);
	create_insn	(0X507A);
	create_insn	(0X5086);
	create_insn	(x=0X50B7);
	op_hex		(x,	1);
	create_insn	(x=0X50F1);
	op_hex		(x,	1);
	create_insn	(0X510A);
	create_insn	(0X5122);
	create_insn	(x=0X5126);
	op_hex		(x,	1);
	create_insn	(0X512D);
	create_insn	(0X5138);
	create_insn	(0X5169);
	create_insn	(x=0X5179);
	op_hex		(x,	1);
	create_insn	(0X5190);
	create_insn	(x=0X5193);
	op_hex		(x,	1);
	create_insn	(x=0X51B1);
	op_hex		(x,	1);
	create_insn	(0X51BB);
	create_insn	(0X51BF);
	set_name	(0X51BF,	"$PARSE_FILE_DESCRIPTOR");
	create_insn	(0X51CA);
	set_name	(0X51CD,	"set_exerr_locus");
	create_insn	(0X51D3);
	set_name	(0X51D3,	"set_exerr_locus_disk");
	set_cmt	(0X51D4,	"errLOC_Disk",	0);
	create_insn	(0X51D8);
	create_insn	(0X51DD);
	create_insn	(0X51E2);
	set_name	(0X51E2,	"$SLEAZEFUNC");
	set_name	(0X51E4,	"$SLEAZEFUNCDL");
	create_insn	(0X5217);
	create_insn	(0X521A);
	set_name	(0X521A,	"$GET_INDOS_FLAG");
	create_insn	(x=0X521D);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X5226);
	set_name	(0X5226,	"$GET_IN_VARS");
	create_insn	(x=0X5229);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X5230);
	set_name	(0X5230,	"$GET_DEFAULT_DPB");
	set_name	(0X5232,	"$GET_DPB");
	create_insn	(0X524F);
	create_insn	(0X5252);
	create_insn	(x=0X5256);
	op_hex		(x,	1);
	create_insn	(0X5276);
	create_insn	(0X528C);
	create_insn	(0X5322);
	set_name	(0X5322,	"$DISK_RESET");
	create_insn	(x=0X5329);
	op_hex		(x,	1);
	create_insn	(x=0X5331);
	op_hex		(x,	1);
	create_insn	(0X5348);
	set_cmt	(0X5363,	"Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS\nDS = DOS CS\nReturn: CF clear (successful)",	0);
	create_insn	(x=0X5363);
	op_hex		(x,	0);
	create_word	(0X5367);
	set_name	(0X5367,	"word3");
	set_cmt	(0X5369,	"Buffer address (es:bp)",	0);
	create_insn	(0X5369);
	set_name	(0X5369,	"$SETDPB");
	set_cmt	(0X536B,	"Skip over dpb_drive and dpb_UNIT",	0);
	set_cmt	(0X536D,	"dpb_sector_size ; bytes per sector",	0);
	set_cmt	(0X536E,	".BPB_BYTESPERSECTOR",	0);
	set_cmt	(0X536F,	"'XE' (NASM syntax)\nCX = signature 4558h ('EX') for FAT32 extended BPB/DPB",	0);
	set_cmt	(0X5375,	"'RA' (NASM syntax)\nDX = signature 4152h ('AR') for FAT32 extended BPB/DPB",	0);
	set_cmt	(0X537B,	"0 ; (Do not use FAT32 extensions -32 bit parameters-)",	0);
	set_cmt	(0X537D,	"(*)",	0);
	set_cmt	(0X537E,	".BPB_NUMBEROFFATS",	0);
	set_cmt	(0X5384,	".BPB_SECTORSPERFAT ; BPB_FATSz16",	0);
	set_cmt	(0X538A,	".BPB_FAT32VERSION ; BPB_FSVer",	0);
	create_insn	(x=0X538A);
	op_dec		(x,	0);
	set_cmt	(0X5392,	"DPB.FAT_COUNT = 0",	0);
	set_cmt	(0X5396,	"DPB.DRIVER_ADDR",	0);
	create_insn	(x=0X5396);
	op_dec		(x,	1);
	set_cmt	(0X5399,	".BPB_SECTORSPERTRACK",	0);
	create_insn	(x=0X5399);
	op_dec		(x,	1);
	set_cmt	(0X539C,	"DPB.FAT_SIZE = 0",	0);
	create_insn	(x=0X539C);
	op_dec		(x,	0);
	set_cmt	(0X53A3,	"bytes per sector",	0);
	create_insn	(0X53A3);
	set_cmt	(0X53A5,	".BPB_SECTORSPERCLUSTER",	0);
	set_cmt	(0X53AE,	"DPB.CLUSTER_MASK ; Sectors/cluster - 1",	0);
	create_insn	(x=0X53B1);
	op_hex		(x,	1);
	create_insn	(x=0X53B7);
	op_hex		(x,	1);
	create_insn	(0X53BB);
	set_cmt	(0X53BD,	"DPB.CLUSTER_SHIFT ; Log2 of sectors/cluster",	0);
	set_cmt	(0X53C0,	".BPB_RESERVEDSECTORS -> DPB.FIRST_FAT",	0);
	set_cmt	(0X53C1,	".BPB_NUMBEROFFATS",	0);
	set_cmt	(0X53C2,	"DPB.FAT_COUNT",	0);
	set_cmt	(0X53C5,	".BPB_ROOTENTRIES",	0);
	set_cmt	(0X53C6,	"DPB.ROOT_ENTRIES",	0);
	set_cmt	(0X53C9,	"Directory entries per sector",	0);
	set_cmt	(0X53CC,	"Round Up",	0);
	set_cmt	(0X53D4,	"Number of root directory sectors",	0);
	set_cmt	(0X53D8,	".BPB_TOTALSECTORS -> DPB.MAX_CLUSTER (temporary)",	0);
	set_cmt	(0X53D9,	".BPB_MEDIADESCRIPTOR",	0);
	set_cmt	(0X53DA,	"DPB.MEDIA",	0);
	create_insn	(x=0X53DA);
	op_dec		(x,	0);
	set_cmt	(0X53DE,	".BPB_SECTORSPERFAT",	0);
	set_cmt	(0X53DF,	"DPB.FAT_SIZE",	0);
	set_cmt	(0X53E4,	"16 bit FAT size",	0);
	set_cmt	(0X53E6,	"(*) FAT32 extensions\n(use 32 bit FAT and Root Dir size if >0)",	0);
	set_cmt	(0X53E7,	"(*)",	0);
	set_cmt	(0X53EA,	"Do not use FAT32 extensions\n(do not use 32 bit FAT size field)",	0);
	set_cmt	(0X53EC,	".BPB_SECTORSPERFAT32 ; BPB_FATSz32",	0);
	create_insn	(x=0X53EC);
	op_dec		(x,	1);
	set_cmt	(0X53EF,	".BPB_SECTORSPERFAT32+2",	0);
	create_insn	(x=0X53EF);
	op_dec		(x,	1);
	set_cmt	(0X53F2,	"(**) Root directory sectors",	0);
	set_cmt	(0X53F3,	"32 bit multiply",	0);
	set_cmt	(0X53F5,	"FAT count",	0);
	set_cmt	(0X53FC,	"FAT count",	0);
	set_cmt	(0X5404,	"(**)",	0);
	set_cmt	(0X5411,	"dx:ax = (total) FAT sectors",	0);
	create_insn	(0X5411);
	set_cmt	(0X5418,	"DPB.DIR_SECTOR",	0);
	set_cmt	(0X5419,	"+ root directory size",	0);
	set_cmt	(0X541B,	"DPB.FIRST_SECTOR ; First data sector",	0);
	create_insn	(x=0X541B);
	op_dec		(x,	0);
	set_cmt	(0X5422,	"(*)",	0);
	set_cmt	(0X5426,	"DPB.BIG_FIRST_SECTOR ; FAT32 first sector field",	0);
	create_insn	(x=0X5426);
	op_dec		(x,	0);
	create_insn	(x=0X542A);
	op_dec		(x,	0);
	set_cmt	(0X542E,	"cluster shift",	0);
	set_cmt	(0X5430,	"DPB.MAX_CLUSTER\n(contains 16 bit .BPB_TOTALSECTORS as temporary)",	0);
	create_insn	(x=0X5430);
	op_dec		(x,	0);
	set_cmt	(0X543A,	"SI points to .BPB_SECTORSPERTRACK and SI+8 is\n.BPB_BIGTOTALSECTORS (32 bit total sectors)",	0);
	create_insn	(x=0X543D);
	op_dec		(x,	1);
	set_cmt	(0X5443,	"dx:bx = data sectors (for cluster count calc)",	0);
	create_insn	(x=0X544A);
	op_hex		(x,	1);
	create_insn	(x=0X544C);
	op_hex		(x,	1);
	set_cmt	(0X5450,	"dx:ax = cluster count",	0);
	set_cmt	(0X5454,	"first sector - total sectors",	0);
	create_insn	(x=0X5454);
	op_dec		(x,	1);
	set_cmt	(0X545A,	"data sectors = total sectors - first sector",	0);
	set_cmt	(0X545C,	"cluster count",	0);
	set_cmt	(0X545E,	"(*) 0 = not 32 bit fat sectors",	0);
	set_cmt	(0X545F,	"(*)",	0);
	set_cmt	(0X5463,	"calculated # clusters HW",	0);
	set_cmt	(0X5466,	"calculated # clusters LW",	0);
	set_cmt	(0X5468,	"FAT size (16 bit)",	0);
	create_insn	(x=0X5468);
	op_dec		(x,	1);
	set_cmt	(0X546C,	"Do not use 32 bit FAT sectors field",	0);
	set_cmt	(0X5474,	".BPB_SECTORSPERFAT32  ; 32 bit FAT size field.",	0);
	create_insn	(x=0X5474);
	op_dec		(x,	1);
	set_cmt	(0X5477,	".BPB_SECTORSPERFAT32+2",	0);
	create_insn	(x=0X5477);
	op_dec		(x,	1);
	set_cmt	(0X547A,	"cx:ax = FAT size (in sectors)\ndx:bx = calculated number of clusters",	0);
	set_cmt	(0X547C,	"DPB.SECTOR_SIZE",	0);
	set_cmt	(0X5485,	"dx:ax = FAT size in bytes",	0);
	set_cmt	(0X5487,	"calculated # clusters HW",	0);
	set_cmt	(0X548A,	"FAT32",	0);
	set_cmt	(0X5490,	"FAT12",	0);
	set_cmt	(0X5492,	"HW of calculated cluster count",	0);
	set_cmt	(0X5499,	"FAT16",	0);
	set_cmt	(0X549B,	"FAT32 ; 4 byte (32 bit) cluster number\nfatsiz/4 = # of fat entries",	0);
	create_insn	(x=0X549B);
	op_hex		(x,	1);
	create_insn	(x=0X549D);
	op_hex		(x,	1);
	create_insn	(x=0X549F);
	op_hex		(x,	1);
	set_cmt	(0X54A1,	"dx = 0",	0);
	create_insn	(x=0X54A3);
	op_hex		(x,	1);
	set_cmt	(0X54A7,	"FAT16 ; 2 byte (16 bit) cluster number\nfatsiz/2 = # of fat entries",	0);
	create_insn	(x=0X54A7);
	op_hex		(x,	1);
	set_cmt	(0X54A9,	"dx > 0",	0);
	set_cmt	(0X54AB,	"FAT16 ; 2 byte (16 bit) cluster number\nfatsiz/2 = # of fat entries",	0);
	create_insn	(x=0X54AB);
	op_hex		(x,	1);
	set_cmt	(0X54AD,	"4096-10+1",	0);
	set_cmt	(0X54B4,	"FAT12 ; 1.5 byte (12 bit) cluster number\n(fatsiz*2)/3 = # of fat entries",	0);
	create_insn	(0X54B4);
	set_cmt	(0X54B8,	"if our fatspace is more than we need\nuse calculated size",	0);
	set_cmt	(0X54C8,	"is fat big enough?",	0);
	set_cmt	(0X54CE,	"use max value that'll fit",	0);
	set_cmt	(0X54D0,	"use calculated value",	0);
	set_cmt	(0X54D4,	"DPB.FAT_SIZE ; 16 bit FAT size",	0);
	create_insn	(x=0X54D4);
	op_dec		(x,	0);
	set_cmt	(0X54DB,	"DPB.DIR_SECTOR \n(16 bit directory sector field)",	0);
	create_insn	(x=0X54DB);
	op_dec		(x,	0);
	set_cmt	(0X54E1,	"DPB.MAX_CLUSTER (16 bit)",	0);
	create_insn	(x=0X54E1);
	op_dec		(x,	0);
	set_cmt	(0X54E9,	"DPB.MAX_CLUSTER = calculated last cluster number",	0);
	create_insn	(x=0X54E9);
	op_dec		(x,	0);
	set_cmt	(0X54ED,	"; (*) 1 = use FAT32 extensions\n      0 = don't use FAT32 extensions (32 bit fields)",	0);
	set_cmt	(0X54EE,	"do not use FAT32 extensions",	0);
	set_cmt	(0X54F0,	"DPB.MAX_CLUSTER32 ; dx:ax = last cluster number",	0);
	create_insn	(x=0X54F0);
	op_dec		(x,	0);
	create_insn	(x=0X54F4);
	op_dec		(x,	0);
	set_cmt	(0X54FB,	"DPB.FAT32_EXT ; FAT32 extensions\n-1 = ready",	0);
	create_insn	(x=0X54FB);
	op_dec		(x,	1);
	set_cmt	(0X54FF,	"FAT32 flags",	0);
	create_insn	(x=0X54FF);
	op_dec		(x,	1);
	set_cmt	(0X5502,	"DPB FAT32 flags ; [bp+23h]",	0);
	set_cmt	(0X5506,	"FSINFO structure sector number",	0);
	set_cmt	(0X5507,	".BPB_RESERVEDSECTORS ; Number of reserved sectors.",	0);
	set_cmt	(0X5512,	"-1 ; invalid",	0);
	set_cmt	(0X5515,	"DPB FSINFO structure sector number\n[bp+25h]",	0);
	set_cmt	(0X5516,	"Sector number of the backup boot sector",	0);
	set_cmt	(0X551F,	"-1 ; invalid",	0);
	set_cmt	(0X5522,	"DPB backup boot sector address\n[bp+27h]",	0);
	set_cmt	(0X5523,	"[bp+31h]",	0);
	set_cmt	(0X5528,	"[bp+0Fh] ; DPB.MAX_CLUSTER",	0);
	create_insn	(x=0X5528);
	op_dec		(x,	1);
	set_cmt	(0X552E,	"> 0 (not FAT32)",	0);
	set_cmt	(0X5530,	"FAT32 Sectors per FAT ; .BPB_SECTORSPERFAT32",	0);
	create_insn	(x=0X5530);
	op_dec		(x,	1);
	create_insn	(x=0X5533);
	op_dec		(x,	1);
	set_cmt	(0X5536,	"DPB FAT32 FAT size in sectors ; [bp+31h]",	0);
	set_cmt	(0X553A,	"Root directory cluster number",	0);
	set_cmt	(0X553D,	"DPB Root Dir Cluster ; [bp+35h]",	0);
	set_cmt	(0X553F,	"DPB reserved ; [bp+39h]",	0);
	set_cmt	(0X5545,	"DPB.NEXT_FREE ; last allocated cluster #",	0);
	create_insn	(x=0X5545);
	op_dec		(x,	0);
	set_cmt	(0X554A,	"DPB.FREE_CNT (-1 = unknown)",	0);
	create_insn	(x=0X554A);
	op_dec		(x,	0);
	create_insn	(0X554F);
	set_name	(0X554F,	"$DUP_PDB");
	create_insn	(x=0X5554);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X5559);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X5560);
	set_name	(0X5560,	"$CREATE_PROCESS_DATA_BLOCK");
	create_insn	(x=0X5570);
	op_dec		(x,	1);
	create_insn	(x=0X5575);
	op_dec		(x,	1);
	create_insn	(x=0X5578);
	op_hex		(x,	1);
	create_insn	(x=0X557C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X5588);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X5596);
	op_dec		(x,	1);
	create_insn	(x=0X55A1);
	op_hex		(x,	1);
	create_insn	(x=0X55AC);
	op_hex		(x,	1);
	create_insn	(x=0X55AF);
	op_hex		(x,	1);
	create_insn	(x=0X55B4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X55B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X55E9);
	set_name	(0X55E9,	"SETMEM");
	create_insn	(0X5667);
	set_name	(0X5667,	"$GSetMediaID");
	create_insn	(x=0X567D);
	op_hex		(x,	1);
	set_name	(0X5683,	"doioctl1");
	set_cmt	(0X568B,	"'FA'",	0);
	set_cmt	(0X5692,	"'T3'",	0);
	set_cmt	(0X5699,	"'2 '",	0);
	set_cmt	(0X56A0,	"'  '",	0);
	create_insn	(x=0X56A7);
	op_hex		(x,	1);
	set_name	(0X56A7,	"doioctl2");
	set_name	(0X56A9,	"doioctl");
	create_insn	(0X56B1);
	set_name	(0X56B1,	"errorfunc");
	create_insn	(0X56B6);
	set_name	(0X56B6,	"StrCmp");
	create_insn	(0X56D8);
	set_name	(0X56D8,	"StrCpy");
	create_insn	(0X56E7);
	set_name	(0X56E7,	"FStrCpy");
	create_insn	(0X56F0);
	set_name	(0X56F0,	"StrLen");
	create_insn	(0X56FE);
	set_name	(0X56FE,	"DStrLen");
	create_insn	(0X5708);
	set_name	(0X5708,	"xchg_esdi_dssi");
	set_name	(0X570E,	"idle_fsharing_ret");
	create_insn	(0X570F);
	set_name	(0X570F,	"Idle");
	create_insn	(0X5729);
	set_name	(0X5729,	"TableDispatch");
	create_insn	(x=0X572D);
	op_stkvar	(x,	1);
	create_insn	(x=0X5733);
	op_stkvar	(x,	0);
	create_insn	(x=0X5738);
	op_stkvar	(x,	1);
	create_insn	(x=0X573D);
	op_hex		(x,	1);
	create_insn	(x=0X5740);
	op_stkvar	(x,	1);
	create_insn	(x=0X5746);
	op_stkvar	(x,	0);
	create_insn	(x=0X574B);
	op_hex		(x,	1);
	create_insn	(0X574F);
	create_insn	(0X5754);
	set_name	(0X5754,	"TestNet");
	create_insn	(x=0X5759);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X5763);
	op_hex		(x,	1);
	create_insn	(0X576B);
	create_insn	(x=0X576D);
	op_hex		(x,	1);
	create_insn	(0X5773);
	set_name	(0X5773,	"FastInit");
	create_insn	(x=0X5779);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X577F);
	op_hex		(x,	1);
	create_insn	(x=0X5781);
	op_hex		(x,	1);
	create_insn	(x=0X57A7);
	op_hex		(x,	1);
	create_insn	(0X57AD);
	set_name	(0X57AD,	"FastRet");
	create_insn	(0X57B1);
	set_name	(0X57B1,	"NLS_OPEN");
	create_insn	(0X57B7);
	set_name	(0X57B7,	"NLS_LSEEK");
	set_name	(0X57C9,	"NLS_SEEK_RET");
	create_insn	(0X57D4);
	set_name	(0X57D4,	"Fake_User_Stack");
	create_insn	(0X57E3);
	set_name	(0X57E3,	"GetDevList");
	create_insn	(0X57F4);
	set_name	(0X57F4,	"NLS_IOCTL");
	create_insn	(0X5808);
	set_name	(0X5808,	"NLS_GETEXT");
	set_name	(0X580C,	"MSG_RETRIEVAL");
	create_insn	(0X580D);
	set_name	(0X580D,	"ECritDisk");
	set_name	(0X581C,	"ECritDisk_1");
	set_cmt	(0X5827,	"Microsoft Networks - BEGIN DOS CRITICAL SECTION\nAL = critical section number (00h-0Fh)",	0);
	create_insn	(x=0X5827);
	op_hex		(x,	0);
	create_insn	(0X582B);
	set_cmt	(0X5831,	"simulate INT 2Ah",	0);
	set_cmt	(0X5832,	"call  far (INT 2Ah vector)",	0);
	create_insn	(x=0X5832);
	create_insn	(0X583B);
	set_name	(0X583B,	"ECritDisk_3");
	create_insn	(0X583D);
	set_name	(0X583D,	"LCritDisk");
	create_insn	(0X584E);
	set_name	(0X584E,	"ECritDevice");
	create_insn	(0X585F);
	set_name	(0X585F,	"LCritDevice");
	create_insn	(0X5870);
	set_name	(0X5870,	"$STD_CON_INPUT_NO_ECHO");
	set_cmt	(0X5886,	"Microsoft Networks - KEYBOARD BUSY LOOP",	0);
	create_insn	(x=0X5886);
	op_hex		(x,	0);
	create_insn	(0X58B1);
	set_name	(0X58C7,	"noscan");
	create_insn	(0X58C8);
	set_name	(0X58C8,	"$STD_CON_STRING_OUTPUT");
	create_insn	(0X58D4);
	set_name	(0X58D4,	"$STD_CON_STRING_INPUT");
	set_name	(0X590D,	"GETCH");
	create_insn	(0X594D);
	create_insn	(0X5954);
	create_insn	(0X5957);
	create_insn	(0X5961);
	create_insn	(0X596D);
	create_insn	(0X597B);
	set_name	(0X597B,	"KILNEW");
	create_insn	(0X598E);
	set_name	(0X598E,	"BACKSP");
	create_insn	(0X5993);
	create_insn	(0X59C0);
	create_insn	(x=0X59E3);
	op_hex		(x,	1);
	create_insn	(0X59F2);
	create_insn	(0X59F5);
	create_insn	(0X5A04);
	set_name	(0X5A04,	"TWOESC");
	create_insn	(0X5A0B);
	set_name	(0X5A0B,	"COPYLIN");
	create_insn	(0X5A11);
	set_name	(0X5A11,	"COPYSTR");
	create_insn	(0X5A16);
	set_name	(0X5A16,	"COPYONE");
	create_insn	(0X5A34);
	set_name	(0X5A34,	"SKIPONE");
	create_insn	(0X5A3D);
	set_name	(0X5A3D,	"SKIPSTR");
	create_insn	(0X5A46);
	create_insn	(0X5A55);
	create_insn	(0X5A72);
	create_insn	(0X5A75);
	set_name	(0X5A75,	"REEDIT");
	create_insn	(0X5A89);
	set_name	(0X5A89,	"EXITINS");
	create_insn	(0X5A90);
	set_name	(0X5A90,	"CTRLZ");
	create_insn	(0X5A95);
	create_insn	(0X5A9F);
	set_name	(0X5A9F,	"$RAW_CON_IO");
	create_insn	(x=0X5ABB);
	op_hex		(x,	1);
	create_insn	(x=0X5AC3);
	op_hex		(x,	1);
	set_name	(0X5ACB,	"$RAW_CON_INPUT");
	set_cmt	(0X5ADD,	"Microsoft Networks - KEYBOARD BUSY LOOP",	0);
	create_insn	(x=0X5ADD);
	op_hex		(x,	0);
	create_insn	(0X5AE1);
	create_insn	(0X5AE7);
	create_insn	(x=0X5AF3);
	op_hex		(x,	1);
	create_insn	(x=0X5B01);
	op_hex		(x,	1);
	create_insn	(0X5B16);
	create_insn	(0X5B1B);
	create_insn	(0X5B20);
	create_insn	(0X5B23);
	create_insn	(x=0X5B26);
	op_hex		(x,	1);
	create_insn	(0X5B42);
	set_name	(0X5B42,	"Save_Restore_Packet");
	create_insn	(0X5B60);
	set_name	(0X5B60,	"$STD_CON_INPUT");
	create_insn	(0X5B69);
	create_insn	(0X5B70);
	set_name	(0X5B70,	"$STD_CON_OUTPUT");
	create_insn	(0X5B72);
	set_name	(0X5B72,	"OUTT");
	create_insn	(x=0X5B86);
	op_hex		(x,	1);
	create_insn	(x=0X5B93);
	op_hex		(x,	1);
	create_insn	(x=0X5BA9);
	op_hex		(x,	1);
	create_insn	(x=0X5BAE);
	op_hex		(x,	1);
	create_insn	(x=0X5BBB);
	op_hex		(x,	1);
	create_insn	(0X5BCA);
	create_insn	(0X5BCD);
	create_insn	(x=0X5BDD);
	op_hex		(x,	1);
	create_insn	(0X5BE1);
	create_insn	(0X5BF1);
	create_insn	(0X5BF9);
	set_name	(0X5BF9,	"j_OUTT");
	create_insn	(0X5BFC);
	create_insn	(0X5C04);
	create_insn	(x=0X5C1B);
	op_hex		(x,	1);
	create_insn	(0X5C21);
	set_name	(0X5C21,	"$STD_AUX_INPUT");
	create_insn	(0X5C2E);
	create_insn	(0X5C3E);
	set_name	(0X5C3E,	"$STD_AUX_OUTPUT");
	create_insn	(0X5C44);
	set_name	(0X5C44,	"$STD_PRINTER_OUTPUT");
	create_insn	(0X5C58);
	set_name	(0X5C58,	"$STD_CON_INPUT_STATUS");
	create_insn	(0X5C61);
	set_name	(0X5C61,	"$STD_CON_INPUT_FLUSH");
	create_insn	(0X5C8A);
	create_insn	(0X5C8E);
	set_name	(0X5C8E,	"$GET_FCB_POSITION");
	create_insn	(0X5CA6);
	set_name	(0X5CA6,	"$FCB_DELETE");
	create_insn	(0X5CB8);
	set_name	(0X5CB8,	"$GET_FCB_FILE_LENGTH");
	create_insn	(0X5D03);
	set_name	(0X5D03,	"$FCB_CLOSE");
	create_insn	(x=0X5D42);
	op_hex		(x,	1);
	create_insn	(0X5D70);
	set_name	(0X5D70,	"$FCB_RENAME");
	create_insn	(0X5DAE);
	create_insn	(0X5DC3);
	create_insn	(x=0X5DC8);
	op_hex		(x,	1);
	create_insn	(x=0X5DE0);
	op_hex		(x,	1);
	create_insn	(x=0X5DE6);
	op_hex		(x,	1);
	create_insn	(x=0X5E02);
	op_hex		(x,	1);
	create_insn	(0X5E11);
	create_insn	(0X5E21);
	create_insn	(x=0X5E3B);
	op_hex		(x,	1);
	create_insn	(0X5E58);
	create_insn	(0X5E7C);
	create_insn	(0X5E9F);
	create_insn	(x=0X5EB3);
	op_hex		(x,	1);
	create_insn	(x=0X5EBF);
	op_hex		(x,	1);
	create_insn	(0X5EF8);
	create_insn	(0X5F06);
	create_insn	(0X5F23);
	create_insn	(0X5F49);
	create_insn	(0X5F5F);
	create_insn	(0X5F62);
	create_insn	(0X5F6A);
	create_insn	(x=0X5F6D);
	op_hex		(x,	1);
	set_cmt	(0X5F79,	"Multiplex - NETWORK REDIRECTOR - INSTALLATION CHECK\nReturn: AL = 00h  not installed, OK to install\n01h  not installed, not OK to install\nFFh  installed",	0);
	create_insn	(x=0X5F79);
	op_hex		(x,	0);
	create_insn	(0X5F8D);
	create_insn	(x=0X5FA1);
	op_hex		(x,	1);
	create_insn	(x=0X5FA4);
	op_hex		(x,	1);
	create_insn	(x=0X5FAC);
	op_hex		(x,	1);
	create_insn	(x=0X5FB1);
	op_hex		(x,	1);
	create_insn	(0X5FF2);
	create_insn	(0X5FFB);
	create_insn	(0X5FFD);
	create_insn	(x=0X6001);
	op_hex		(x,	1);
	create_insn	(x=0X601A);
	op_hex		(x,	1);
	create_insn	(x=0X601E);
	op_hex		(x,	1);
	create_insn	(x=0X6020);
	op_hex		(x,	1);
	create_insn	(x=0X6024);
	op_hex		(x,	1);
	create_insn	(x=0X602D);
	op_hex		(x,	1);
	create_insn	(0X6065);
	create_insn	(x=0X607E);
	op_hex		(x,	1);
	create_insn	(x=0X60AB);
	op_hex		(x,	1);
	create_insn	(x=0X60B0);
	op_hex		(x,	1);
	create_insn	(x=0X60BE);
	op_hex		(x,	1);
	create_insn	(x=0X60C4);
	op_hex		(x,	1);
	create_insn	(0X60CC);
	create_insn	(0X60CE);
	create_insn	(0X60D8);
	create_insn	(0X60EC);
	create_insn	(0X6122);
	create_insn	(0X614D);
	create_insn	(0X615F);
	create_insn	(0X616C);
	set_name	(0X616C,	"nullsub_18");
	create_insn	(0X616D);
	create_insn	(x=0X6173);
	op_hex		(x,	1);
	create_insn	(x=0X6175);
	op_hex		(x,	1);
	create_insn	(x=0X6177);
	op_hex		(x,	1);
	create_insn	(0X617F);
	create_insn	(x=0X6183);
	op_hex		(x,	1);
	create_insn	(x=0X6188);
	op_hex		(x,	1);
	create_insn	(x=0X618B);
	op_hex		(x,	1);
	create_insn	(x=0X618D);
	op_hex		(x,	1);
	create_insn	(0X6199);
	create_insn	(0X61A6);
	create_insn	(0X61B3);
	set_name	(0X61B3,	"$FCB_RANDOM_WRITE_BLOCK");
	create_insn	(0X61B7);
	set_name	(0X61B7,	"$FCB_RANDOM_READ_BLOCK");
	create_insn	(0X61BB);
	set_name	(0X61BB,	"$FCB_SEQ_READ");
	create_insn	(0X61BF);
	set_name	(0X61BF,	"$FCB_SEQ_WRITE");
	create_insn	(0X61C3);
	set_name	(0X61C3,	"$FCB_RANDOM_READ");
	create_insn	(0X61C7);
	set_name	(0X61C7,	"$FCB_RANDOM_WRITE");
	create_insn	(x=0X61CC);
	op_hex		(x,	1);
	create_insn	(x=0X61D9);
	op_hex		(x,	1);
	create_insn	(x=0X61EE);
	op_hex		(x,	1);
	create_insn	(x=0X6249);
	op_hex		(x,	1);
	create_insn	(0X6251);
	create_insn	(0X6265);
	create_insn	(x=0X6286);
	op_hex		(x,	1);
	create_insn	(x=0X62D6);
	op_hex		(x,	1);
	create_insn	(x=0X62DC);
	op_hex		(x,	1);
	create_insn	(x=0X62F3);
	op_hex		(x,	1);
	create_insn	(x=0X6317);
	op_hex		(x,	1);
	create_insn	(x=0X631D);
	op_hex		(x,	1);
	create_insn	(x=0X6326);
	op_hex		(x,	1);
	create_insn	(x=0X633B);
	op_hex		(x,	1);
	create_insn	(x=0X634C);
	op_hex		(x,	1);
	create_insn	(0X6362);
	set_name	(0X6362,	"$FCB_OPEN");
	create_insn	(0X637B);
	create_insn	(0X63B8);
	create_insn	(x=0X63CC);
	op_hex		(x,	1);
	create_insn	(x=0X63D3);
	op_hex		(x,	1);
	create_insn	(0X63EE);
	create_insn	(x=0X63F7);
	op_hex		(x,	1);
	create_insn	(0X6447);
	create_insn	(0X646B);
	set_name	(0X646B,	"$FCB_CREATE");
	create_insn	(0X647B);
	set_name	(0X647B,	"$DIR_SEARCH_FIRST");
	create_insn	(0X64A1);
	create_insn	(x=0X64AB);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X64B5);
	op_hex		(x,	1);
	create_insn	(0X64CB);
	create_insn	(x=0X64D2);
	op_hex		(x,	1);
	create_insn	(x=0X64F7);
	op_hex		(x,	1);
	create_insn	(0X6517);
	set_name	(0X6517,	"$DIR_SEARCH_NEXT");
	create_insn	(0X657A);
	create_insn	(x=0X657E);
	op_hex		(x,	1);
	create_insn	(0X658F);
	create_insn	(0X6594);
	set_name	(0X6594,	"$FIND_FIRST");
	create_insn	(x=0X659B);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X65AD);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X65B7);
	op_hex		(x,	1);
	set_name	(0X65CA,	"FindSet");
	create_insn	(0X65EC);
	set_name	(0X65EC,	"$FIND_NEXT");
	create_insn	(x=0X65F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X65F8);
	op_dec		(x,	1);
	create_insn	(x=0X6608);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X6627);
	set_name	(0X6627,	"PackName");
	create_insn	(0X6655);
	create_insn	(x=0X6659);
	op_hex		(x,	1);
	create_insn	(0X6664);
	set_name	(0X6664,	"$CURRENT_DIR");
	set_name	(0X666E,	"CurdirErr");
	create_insn	(x=0X6677);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X667B,	"curdir_errj");
	create_insn	(0X667E);
	set_name	(0X667E,	"CurrentValidate");
	create_insn	(x=0X6685);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X668A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X66AD);
	create_insn	(0X66C8);
	set_name	(0X66C8,	"$RMDIR");
	create_insn	(0X66DC);
	create_insn	(x=0X66ED);
	op_hex		(x,	1);
	create_insn	(0X66FD);
	create_insn	(0X6703);
	create_insn	(0X671B);
	set_name	(0X671B,	"$CHDIR");
	create_insn	(x=0X6722);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X672C,	"ChDirErrP");
	create_insn	(x=0X6730);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X6730,	"ChDirCrack");
	create_insn	(x=0X6737);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X6745);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X6749);
	op_hex		(x,	1);
	create_insn	(x=0X676E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X6782,	"GotCDS");
	create_insn	(x=0X6787);
	op_hex		(x,	1);
	create_insn	(x=0X678F);
	op_hex		(x,	1);
	create_insn	(x=0X67A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X67B0);
	set_name	(0X67B0,	"$MKDIR");
	create_insn	(x=0X67B7);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X67BA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X67CB);
	set_name	(0X67CB,	"MkDirCrack");
	create_insn	(0X67DE);
	create_insn	(0X67E4);
	set_name	(0X67E4,	"Check_PathLen");
	create_insn	(0X67E9);
	create_word	(x=0X67F7);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X67F9);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X67FB);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X67FD);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X67FF);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X6801);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X6803);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X6805);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X6807);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X6809);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X680B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X680D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X680F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X6811);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X6813);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X6815);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X6817);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X6819);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X681B);
	set_name	(0X681B,	"$IOCTL");
	create_insn	(x=0X6825);
	op_hex		(x,	1);
	create_insn	(x=0X682B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X6830);
	create_insn	(0X6833);
	create_insn	(0X683D);
	create_insn	(x=0X684D);
	op_hex		(x,	1);
	create_insn	(x=0X6851);
	op_hex		(x,	1);
	create_insn	(0X685E);
	create_insn	(x=0X6863);
	op_hex		(x,	1);
	create_insn	(0X687C);
	create_insn	(x=0X6881);
	op_hex		(x,	1);
	create_insn	(0X6894);
	create_insn	(0X68A5);
	create_insn	(0X68B2);
	create_insn	(0X68C0);
	create_insn	(x=0X68C5);
	op_hex		(x,	1);
	create_insn	(0X68DA);
	create_insn	(0X68EA);
	create_insn	(x=0X6926);
	op_hex		(x,	1);
	create_insn	(x=0X692D);
	op_hex		(x,	1);
	create_insn	(x=0X6935);
	op_hex		(x,	1);
	create_insn	(x=0X6945);
	op_hex		(x,	1);
	create_insn	(0X697E);
	create_insn	(0X6986);
	create_insn	(x=0X698B);
	op_hex		(x,	1);
	create_insn	(x=0X69BA);
	op_hex		(x,	1);
	create_insn	(0X69C4);
	create_insn	(x=0X69E0);
	op_hex		(x,	1);
	set_cmt	(0X69FD,	"Microsoft Networks - CHECK DIRECT I/O\nDS:SI -> ASCIZ disk device name (may be full path or only drive\nspecifier--must include the colon)\nReturn: CF clear if absolute disk access allowed",	0);
	create_insn	(x=0X69FD);
	op_hex		(x,	0);
	create_insn	(x=0X6A01);
	op_hex		(x,	1);
	create_insn	(x=0X6A05);
	op_hex		(x,	1);
	create_insn	(x=0X6A0C);
	op_hex		(x,	1);
	create_insn	(0X6A18);
	create_insn	(0X6A1D);
	create_insn	(0X6A25);
	create_insn	(0X6A2B);
	create_insn	(0X6A2E);
	create_insn	(x=0X6A33);
	op_hex		(x,	1);
	create_insn	(x=0X6A3F);
	op_hex		(x,	1);
	create_insn	(0X6A7D);
	create_insn	(x=0X6A82);
	op_hex		(x,	1);
	create_insn	(0X6A91);
	create_insn	(x=0X6AA4);
	op_hex		(x,	1);
	create_insn	(0X6ABD);
	create_insn	(0X6AC3);
	create_insn	(0X6AC7);
	create_insn	(0X6ACA);
	create_insn	(0X6ACC);
	create_insn	(x=0X6AD1);
	op_hex		(x,	1);
	create_insn	(x=0X6B02);
	op_hex		(x,	1);
	create_insn	(0X6B11);
	set_name	(0X6B11,	"DOS_DELETE");
	set_cmt	(0X6B19,	"Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE\nSS = DS = DOS CS, SDA first filename pointer -> fully-qualified filename in DOS CS\nSDA CDS pointer -> current directory structure for drive with file\nReturn: CF set on error",	0);
	create_insn	(x=0X6B19);
	op_hex		(x,	0);
	create_insn	(0X6B1C);
	create_insn	(x=0X6B64);
	op_hex		(x,	1);
	create_insn	(0X6B86);
	create_insn	(0X6B8B);
	create_insn	(0X6B99);
	create_insn	(x=0X6B9D);
	op_hex		(x,	1);
	create_insn	(x=0X6BAB);
	op_hex		(x,	1);
	create_insn	(x=0X6BB3);
	op_hex		(x,	1);
	create_insn	(0X6BBC);
	create_insn	(x=0X6BC1);
	op_hex		(x,	1);
	create_insn	(x=0X6BCA);
	op_hex		(x,	1);
	create_insn	(x=0X6BE3);
	op_hex		(x,	1);
	create_insn	(0X6C0D);
	create_insn	(0X6C2C);
	create_insn	(x=0X6C3C);
	op_hex		(x,	1);
	create_insn	(x=0X6C43);
	op_hex		(x,	1);
	create_insn	(x=0X6C6A);
	op_hex		(x,	1);
	create_insn	(0X6C74);
	create_insn	(0X6C77);
	set_name	(0X6C77,	"REN_DEL_Check");
	create_insn	(0X6CBD);
	set_cmt	(0X6CC1,	"AUXSTACK-SF_ENTRY.size",	0);
	create_insn	(0X6CF9);
	set_name	(0X6CF9,	"FastOpen_Delete");
	create_insn	(0X6D07);
	set_name	(0X6D07,	"FastOpen_Rename");
	create_insn	(x=0X6D11);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X6D16);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X6D16,	"fastinvoke");
	create_insn	(0X6D21);
	set_name	(0X6D21,	"FastOpen_Update");
	create_insn	(x=0X6D2A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X6D2A,	"Fast_Dispatch");
	create_insn	(0X6D31);
	set_name	(0X6D31,	"DOS_RENAME");
	set_cmt	(0X6D39,	"Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE\nSS = DS = DOS CS, SDA first filename pointer = offset of fully-qualified old name\nSDA CDS pointer -> current directory\nReturn: CF set on error",	0);
	create_insn	(x=0X6D39);
	op_hex		(x,	0);
	create_insn	(0X6D3C);
	create_insn	(x=0X6D3F);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X6D43);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X6D4B);
	op_hex		(x,	1);
	create_insn	(x=0X6D57);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X6D5B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X6D5F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X6D63);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X6D69);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X6D7F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X6D83);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X6D8B);
	create_insn	(x=0X6D8F);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X6D96);
	op_hex		(x,	1);
	create_insn	(x=0X6D9C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X6DA6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X6DBC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X6DC3);
	op_hex		(x,	1);
	create_insn	(x=0X6DCC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X6DCF);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X6DD3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X6DD7);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X6DDA);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X6DE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X6DEF,	"error_access_denied",	0);
	create_insn	(x=0X6DF5);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X6DFC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X6E03);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X6E0D);
	set_cmt	(0X6E0E,	"error_path_not_foun",	0);
	create_insn	(0X6E14);
	create_insn	(x=0X6E16);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X6E27);
	create_insn	(x=0X6E29);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X6E2C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X6E2F);
	op_dec		(x,	1);
	create_insn	(x=0X6E34);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X6E37);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X6E3A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X6E3D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X6E42);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X6E45);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X6E48);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X6E4B);
	op_dec		(x,	1);
	set_cmt	(0X6E51,	"attr_all",	0);
	create_insn	(x=0X6E51);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X6E56);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X6E60);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X6E64);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X6E68);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X6E6C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X6E7A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X6E81);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X6E84);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X6E88);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X6E93);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X6EA2);
	op_hex		(x,	1);
	create_insn	(0X6EC3);
	create_insn	(0X6EF0);
	create_insn	(x=0X6F12);
	op_hex		(x,	1);
	create_insn	(0X6F3A);
	create_insn	(x=0X6F3D);
	op_hex		(x,	1);
	create_insn	(0X6F47);
	create_insn	(0X6F4C);
	create_insn	(0X6F4F);
	create_insn	(0X6F76);
	set_name	(0X6F76,	"NEW_RENAME");
	create_insn	(0X6F82);
	set_cmt	(0X6F8A,	"Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES\nSS = DOS CS, SDA first filename pointer -> fully-qualified name of file\nSDA CDS pointer -> current directory\nReturn: CF set on error, AX = file attributes",	0);
	create_insn	(x=0X6F8A);
	op_hex		(x,	0);
	create_insn	(0X6F8D);
	create_insn	(0X6FA8);
	create_insn	(0X6FAD);
	create_insn	(0X6FBF);
	create_insn	(x=0X6FD5);
	op_hex		(x,	1);
	create_insn	(x=0X6FE3);
	op_hex		(x,	1);
	create_insn	(0X6FFA);
	set_cmt	(0X7003,	"Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES\nSS = DOS CS, SDA first filename pointer -> fully-qualified name of file\nSDA CDS pointer -> current directory\nSTACK: WORD new file attributes\nReturn: CF set on error",	0);
	create_insn	(x=0X7003);
	op_hex		(x,	0);
	create_insn	(0X7007);
	create_insn	(0X7018);
	create_insn	(0X7022);
	create_insn	(0X7034);
	create_insn	(0X703A);
	create_insn	(x=0X703E);
	op_hex		(x,	1);
	create_insn	(x=0X7062);
	op_hex		(x,	1);
	create_insn	(x=0X706C);
	op_hex		(x,	1);
	create_insn	(0X7074);
	set_name	(0X7074,	"DOS_DUP");
	set_name	(0X708A,	"DOS_CREATE");
	create_insn	(x=0X708C);
	op_hex		(x,	1);
	create_insn	(x=0X7090);
	op_hex		(x,	1);
	create_insn	(x=0X7094);
	op_hex		(x,	1);
	create_insn	(x=0X709B);
	op_hex		(x,	1);
	create_insn	(x=0X709D);
	op_hex		(x,	1);
	create_insn	(0X70A9);
	create_insn	(x=0X70B8);
	op_hex		(x,	1);
	set_cmt	(0X70C3,	"Multiplex - DOS 4 IFSFUNC.EXE - ???\nSS = DS = DOS CS, STACK: WORD ???   low byte = ???\nReturn: CF set on error\nCF clear if successful",	0);
	create_insn	(x=0X70C3);
	op_hex		(x,	0);
	create_insn	(0X70CC);
	create_insn	(x=0X70D2);
	op_hex		(x,	1);
	create_insn	(x=0X70DF);
	op_hex		(x,	1);
	create_insn	(x=0X70E4);
	op_hex		(x,	1);
	create_insn	(0X70F1);
	create_insn	(x=0X70F6);
	op_hex		(x,	1);
	create_insn	(0X711A);
	create_insn	(x=0X7120);
	op_hex		(x,	1);
	create_insn	(0X7151);
	set_name	(0X7151,	"DOS_Create_New");
	create_insn	(0X7156);
	create_insn	(0X717C);
	create_insn	(0X7185);
	create_insn	(x=0X71A7);
	op_hex		(x,	1);
	create_insn	(0X71BB);
	set_name	(0X71BB,	"DOS_OPEN");
	create_insn	(x=0X71DA);
	op_hex		(x,	1);
	set_cmt	(0X71E8,	"Multiplex - DOS 4 IFSFUNC.EXE - ???\nSS = DS = DOS CS, STACK: WORD ???   low byte = ???\nReturn: CF set on error\nCF clear if successful",	0);
	create_insn	(x=0X71E8);
	op_hex		(x,	0);
	create_insn	(x=0X71EC);
	op_hex		(x,	1);
	create_insn	(x=0X71F3);
	op_hex		(x,	1);
	set_cmt	(0X7200,	"Multiplex - NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE\nES:DI -> uninitialized SFT, SS = DOS CS\nSDA first filename pointer -> fully-qualified name of file to open\nSTACK: WORD file open mode\nReturn: CF set on error",	0);
	create_insn	(x=0X7200);
	op_hex		(x,	0);
	create_insn	(x=0X7204);
	op_hex		(x,	1);
	create_insn	(x=0X720D);
	op_hex		(x,	1);
	create_insn	(0X7216);
	create_insn	(x=0X7219);
	op_hex		(x,	1);
	create_insn	(x=0X722C);
	op_hex		(x,	1);
	create_insn	(0X7239);
	create_insn	(0X723E);
	create_insn	(0X7243);
	create_insn	(x=0X7251);
	op_hex		(x,	1);
	create_insn	(x=0X7255);
	op_hex		(x,	1);
	create_insn	(x=0X7262);
	op_hex		(x,	1);
	create_insn	(x=0X726A);
	op_hex		(x,	1);
	create_insn	(x=0X7272);
	op_hex		(x,	1);
	create_insn	(x=0X727A);
	op_hex		(x,	1);
	create_insn	(0X7286);
	create_insn	(x=0X728B);
	op_hex		(x,	1);
	create_insn	(0X729B);
	create_insn	(x=0X72A9);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X72A9,	"SET_SFT_MODE");
	create_insn	(x=0X72B0);
	op_hex		(x,	1);
	create_insn	(x=0X72C0);
	op_hex		(x,	1);
	set_name	(0X72C0,	"SHARE_ERROR");
	create_insn	(x=0X72CC);
	op_hex		(x,	1);
	create_insn	(0X72DE);
	create_insn	(0X72FE);
	create_insn	(x=0X7304);
	op_hex		(x,	1);
	create_insn	(x=0X731A);
	op_hex		(x,	1);
	create_insn	(0X7325);
	create_insn	(0X732B);
	set_name	(0X732B,	"DISK_INFO");
	set_cmt	(0X7337,	"Multiplex - NETWORK REDIRECTOR - GET DISK SPACE\nES:DI -> current directory\nReturn: AL = sectors per cluster, BX = total clusters\nCX = bytes per sector, DX = number of available clusters",	0);
	create_insn	(x=0X7337);
	op_hex		(x,	0);
	set_cmt	(0X7348,	"mov byte [EXTERR_LOCUS],errLOC_Disk",	0);
	create_insn	(0X7348);
	set_cmt	(0X7355,	"clear high word of cluster number",	0);
	create_insn	(x=0X7355);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7358,	"Get first FAT sector into CURBUF",	0);
	create_insn	(x=0X7363);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X7367,	"[SI+BUFINSIZ] ; get FAT ID BYTE",	0);
	create_insn	(x=0X7367);
	op_dec		(x,	1);
	set_cmt	(0X7370,	"[ES:BP+DPB.FREE_CNT] ; get free count",	0);
	set_cmt	(0X7374,	"FAT32 (16 bit FAT size = 0) ?",	0);
	set_cmt	(0X7378,	"yes",	0);
	set_cmt	(0X737A,	"[ES:BP+DPB.MAX_CLUSTER]",	0);
	set_cmt	(0X7380,	"DPB.LAST_CLUSTER+2",	0);
	create_insn	(0X7380);
	set_cmt	(0X7384,	"DPB.LAST_CLUSTER",	0);
	set_cmt	(0X7388,	"DPB.FREE_CNT_HW ; hw of free cluster count",	0);
	set_cmt	(0X738C,	"same (zero) ?",	0);
	set_cmt	(0X738E,	"not same (not zero)",	0);
	set_cmt	(0X7391,	"0FFFFh -> 0 (free count is invalid/initial)\nfree count calculation is needed",	0);
	set_cmt	(0X7394,	"same hw ?",	0);
	set_cmt	(0X7396,	"no",	0);
	set_cmt	(0X7398,	"same lw ?",	0);
	set_cmt	(0X739A,	"free cluster count < last cluster number",	0);
	set_cmt	(0X739C,	"0",	0);
	set_cmt	(0X739E,	"0",	0);
	set_cmt	(0X73A0,	"last cluster number - 1 = number of clusters",	0);
	set_cmt	(0X73A5,	"DPB.FIRST_ACCESS ; set first access",	0);
	create_insn	(x=0X73A5);
	op_hex		(x,	1);
	set_cmt	(0X73BD,	"a free one",	0);
	set_cmt	(0X73C0,	"increase hw of free cluster count",	0);
	set_cmt	(0X73C1,	"next cluster",	0);
	set_cmt	(0X73C4,	"increase hw of (next) cluster number",	0);
	set_cmt	(0X73C8,	"decrease remain cluster count for calculation",	0);
	set_cmt	(0X73D0,	"calculation completed",	0);
	create_insn	(0X73D4);
	set_cmt	(0X73DB,	"di:bx = last cluster number",	0);
	set_cmt	(0X73E3,	"di:bx = number of clusters",	0);
	set_cmt	(0X73E5,	"[ES:BP+DPB.CLUSTER_MASK] ; spc -1",	0);
	set_cmt	(0X73E9,	"sectors per cluster",	0);
	set_cmt	(0X73EB,	"[ES:BP+DPB.FREE_CNT] ; free cluster count, lw",	0);
	set_cmt	(0X73EF,	"FAT32 (16 bit FAT size = 0) ?",	0);
	set_cmt	(0X73F3,	"no",	0);
	set_cmt	(0X73F5,	"DPB.FREE_CNT_HW ; hw of free cluster count",	0);
	set_cmt	(0X73FC,	"[ES:BP+DPB.SECTOR_SIZE] ; bytes per sector",	0);
	create_insn	(0X7405);
	create_insn	(0X7409);
	create_insn	(x=0X7427);
	op_hex		(x,	1);
	create_insn	(x=0X7429);
	op_hex		(x,	1);
	create_insn	(x=0X742B);
	op_hex		(x,	1);
	create_insn	(x=0X742D);
	op_hex		(x,	1);
	create_insn	(x=0X742F);
	op_hex		(x,	1);
	create_insn	(0X7436);
	set_name	(0X7436,	"update_fat32_fsinfo");
	create_insn	(x=0X744B);
	op_hex		(x,	1);
	create_insn	(0X7451);
	create_insn	(0X7469);
	create_insn	(x=0X74E9);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X74E9,	"DOS_SEARCH_FIRST");
	set_cmt	(0X74F5,	"Multiplex - NETWORK REDIRECTOR - ???",	0);
	create_insn	(x=0X74F5);
	op_hex		(x,	0);
	create_insn	(x=0X74F8);
	op_hex		(x,	1);
	set_cmt	(0X7502,	"Multiplex - NETWORK REDIRECTOR - FINDFIRST\nSS = DS = DOS CS, [DTA] = uninitialized 21-byte findfirst search data\nSDA first filename pointer -> fully-qualified search template\nSDA CDS pointer -> current directory\nReturn: CF set on error",	0);
	create_insn	(x=0X7502);
	op_hex		(x,	0);
	create_insn	(0X7505);
	create_insn	(x=0X7508);
	op_hex		(x,	1);
	create_insn	(x=0X750F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	create_insn	(x=0X7514);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X752A);
	op_hex		(x,	1);
	create_insn	(x=0X753D);
	op_hex		(x,	1);
	create_insn	(0X7548);
	create_insn	(0X754D);
	create_insn	(x=0X756D);
	op_hex		(x,	1);
	create_insn	(0X757C);
	create_insn	(x=0X75B2);
	op_hex		(x,	1);
	create_insn	(0X75C2);
	create_insn	(x=0X75DB);
	op_hex		(x,	1);
	create_insn	(0X75E8);
	create_insn	(0X75EC);
	set_name	(0X75EC,	"DOS_SEARCH_NEXT");
	create_insn	(x=0X75EF);
	op_hex		(x,	1);
	set_cmt	(0X75F6,	"Multiplex - NETWORK REDIRECTOR - FINDNEXT\nSS = DS = DOS CS, [DTA] = 21-byte findfirst search data\nReturn: CF set on error, AX = DOS error code\nCF clear if successful",	0);
	create_insn	(x=0X75F6);
	op_hex		(x,	0);
	create_insn	(0X75F9);
	create_insn	(x=0X7601);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7639);
	create_insn	(0X7681);
	create_insn	(0X7685);
	set_cmt	(0X769E,	"Multiplex - NETWORK REDIRECTOR - CLOSE ALL REMOTE FILES FOR PROCESS\nDS???, SS = DOS CS",	0);
	create_insn	(x=0X769E);
	op_hex		(x,	0);
	create_insn	(0X76DE);
	create_insn	(0X76FE);
	set_name	(0X76FE,	"DOS_CLOSE");
	create_insn	(x=0X7706);
	op_hex		(x,	1);
	set_cmt	(0X770E,	"Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE FILE\nES:DI -> SFT\nSFT DPB field -> DPB of drive containing file\nReturn: CF set on error, AX = DOS error code\nCF clear if successful",	0);
	create_insn	(x=0X770E);
	op_hex		(x,	0);
	create_insn	(0X7711);
	create_insn	(x=0X7724);
	op_hex		(x,	1);
	create_insn	(0X772D);
	create_insn	(x=0X7734);
	op_hex		(x,	1);
	create_insn	(x=0X7744);
	op_hex		(x,	1);
	create_insn	(0X7775);
	create_insn	(x=0X7778);
	op_hex		(x,	1);
	create_insn	(0X7789);
	create_insn	(x=0X778D);
	op_hex		(x,	1);
	create_insn	(x=0X77CA);
	op_hex		(x,	1);
	create_insn	(x=0X77D4);
	op_hex		(x,	1);
	create_insn	(0X77FF);
	create_insn	(x=0X782D);
	op_hex		(x,	1);
	create_insn	(0X7842);
	set_cmt	(0X784C,	"clear bit 2",	0);
	create_insn	(x=0X784C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	create_insn	(0X7859);
	set_name	(0X7861,	"NoFree");
	create_insn	(0X7866);
	set_name	(0X7866,	"FREE_SFT");
	create_insn	(0X7873);
	create_insn	(x=0X78A3);
	op_hex		(x,	1);
	create_insn	(0X78B5);
	create_insn	(0X78B8);
	set_name	(0X78B8,	"DOS_COMMIT");
	create_insn	(x=0X78C0);
	op_hex		(x,	1);
	create_insn	(x=0X78C5);
	op_hex		(x,	1);
	set_cmt	(0X78CD,	"Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE\nES:DI -> SFT\nSFT DPB field -> DPB of drive containing file\nReturn: CF set on error, AX = DOS error code\nCF clear if successful",	0);
	create_insn	(x=0X78CD);
	op_hex		(x,	0);
	create_insn	(0X78D0);
	create_insn	(x=0X78E3);
	op_hex		(x,	1);
	create_insn	(0X78FF);
	set_name	(0X78FF,	"DOS_MKDIR");
	set_cmt	(0X7907,	"Multiplex - NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY\nSS = DOS CS\nSDA first filename pointer -> fully-qualified directory name\nSDA CDS pointer -> current directory \nReturn: CF set on error, AX = DOS error code\nCF clear if successful",	0);
	create_insn	(x=0X7907);
	op_hex		(x,	0);
	create_insn	(0X790A);
	create_insn	(0X7912);
	create_insn	(0X7918);
	set_name	(0X7918,	"LOCAL_MKDIR");
	create_insn	(x=0X79BF);
	op_hex		(x,	1);
	create_insn	(x=0X79D3);
	op_hex		(x,	1);
	create_insn	(x=0X79DC);
	op_hex		(x,	1);
	create_insn	(0X79F2);
	create_insn	(x=0X7A0D);
	op_hex		(x,	1);
	create_insn	(0X7A20);
	create_insn	(0X7A23);
	set_name	(0X7A23,	"DOS_CHDIR");
	set_cmt	(0X7A2B,	"Multiplex - NETWORK REDIRECTOR - CHDIR\nSS = DOS CS\nSDA first filename pointer -> fully-qualified directory name\nSDA CDS pointer -> current directory \nReturn: CF set on error, AX = DOS error code\nCF clear if successful",	0);
	create_insn	(x=0X7A2B);
	op_hex		(x,	0);
	create_insn	(0X7A2E);
	create_insn	(x=0X7A31);
	op_hex		(x,	1);
	create_insn	(x=0X7A4E);
	op_hex		(x,	1);
	create_insn	(x=0X7A57);
	op_hex		(x,	1);
	create_insn	(0X7A6B);
	set_cmt	(0X7A73,	"Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY\nSS = DOS CS\nSDA first filename pointer -> fully-qualified directory name\nSDA CDS pointer -> current directory \nReturn: CF set on error, AX = DOS error code\nCF clear if successful",	0);
	create_insn	(x=0X7A73);
	op_hex		(x,	0);
	create_insn	(0X7A76);
	create_insn	(0X7AB2);
	create_insn	(0X7AB8);
	create_insn	(0X7ABE);
	create_insn	(0X7B41);
	create_insn	(x=0X7B45);
	op_hex		(x,	1);
	create_insn	(0X7B59);
	create_insn	(0X7B5F);
	create_insn	(0X7B73);
	create_insn	(0X7B76);
	set_name	(0X7B76,	"DOS_READ");
	create_insn	(x=0X7B7E);
	op_hex		(x,	1);
	set_cmt	(0X7B91,	"Multiplex - NETWORK REDIRECTOR - READ FROM REMOTE FILE\nES:DI -> SFT\nSFT DPB field -> DPB of drive containing file\nCX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer\nReturn: CF set on error, CX = bytes read",	0);
	create_insn	(x=0X7B91);
	op_hex		(x,	0);
	create_insn	(0X7B94);
	create_insn	(x=0X7B96);
	op_hex		(x,	1);
	create_insn	(0X7BAC);
	create_insn	(x=0X7BB9);
	op_hex		(x,	1);
	create_insn	(x=0X7BBE);
	op_hex		(x,	1);
	create_insn	(x=0X7BC8);
	op_hex		(x,	1);
	create_insn	(x=0X7BCD);
	op_hex		(x,	1);
	create_insn	(0X7BD5);
	create_insn	(x=0X7BD7);
	op_hex		(x,	1);
	create_insn	(x=0X7BDF);
	op_hex		(x,	1);
	create_insn	(0X7BE7);
	create_insn	(0X7C1F);
	create_insn	(0X7C28);
	create_insn	(0X7C32);
	create_insn	(0X7C72);
	create_insn	(0X7C9D);
	create_insn	(x=0X7CB4);
	op_hex		(x,	1);
	create_insn	(x=0X7CCF);
	op_hex		(x,	1);
	create_insn	(x=0X7CF3);
	op_hex		(x,	1);
	create_insn	(0X7D05);
	create_insn	(0X7D0E);
	set_cmt	(0X7D11,	"Microsoft Networks - KEYBOARD BUSY LOOP",	0);
	create_insn	(x=0X7D11);
	op_hex		(x,	0);
	create_insn	(0X7D16);
	create_insn	(0X7D1F);
	create_insn	(x=0X7D33);
	op_hex		(x,	1);
	create_insn	(x=0X7D4A);
	op_hex		(x,	1);
	create_insn	(0X7D53);
	create_insn	(0X7D8C);
	create_insn	(0X7D8F);
	set_name	(0X7D8F,	"DOS_WRITE");
	create_insn	(x=0X7D97);
	op_hex		(x,	1);
	create_insn	(x=0X7D9D);
	op_hex		(x,	1);
	create_insn	(x=0X7DA4);
	op_hex		(x,	1);
	create_insn	(x=0X7DAE);
	op_hex		(x,	1);
	set_cmt	(0X7DB8,	"Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE\nES:DI -> SFT\nSFT DPB field -> DPB of drive containing file\nCX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer\nReturn: CF set on error, CX = bytes written",	0);
	create_insn	(x=0X7DB8);
	op_hex		(x,	0);
	create_insn	(x=0X7DBB);
	op_hex		(x,	1);
	create_insn	(x=0X7DD3);
	op_hex		(x,	1);
	create_insn	(0X7DE3);
	create_insn	(0X7E19);
	create_insn	(0X7E1D);
	create_insn	(0X7E22);
	create_insn	(0X7E2C);
	create_insn	(0X7E31);
	create_insn	(x=0X7E36);
	op_hex		(x,	1);
	create_insn	(x=0X7E4D);
	op_hex		(x,	1);
	create_insn	(x=0X7E51);
	op_hex		(x,	1);
	create_insn	(x=0X7E55);
	op_hex		(x,	1);
	create_insn	(0X7E98);
	create_insn	(0X7EC3);
	create_insn	(0X7EE1);
	create_insn	(0X7EFB);
	create_insn	(0X7F07);
	create_insn	(0X7F18);
	create_insn	(x=0X7F5D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X7F69);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X7F7A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7F88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X7F91);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X7F9D);
	create_insn	(x=0X7F9F);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7FA3);
	op_hex		(x,	1);
	set_name	(0X7FA9,	"dr_ret_label");
	create_insn	(x=0X7FAA);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X7FC0);
	op_hex		(x,	1);
	create_insn	(x=0X7FCA);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X7FD2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X7FDE);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X7FF4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X7FFC);
	create_insn	(x=0X7FFE);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8007);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X800E);
	set_name	(0X800E,	"DREAD");
	set_cmt	(0X8013,	"Read",	0);
	create_insn	(x=0X8013);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X801C,	"RETRY",	0);
	set_cmt	(0X8020,	"FAIL",	0);
	set_cmt	(0X8023,	"IGNORE",	0);
	create_insn	(0X8027);
	create_insn	(x=0X802E);
	op_hex		(x,	1);
	create_insn	(0X8039);
	create_insn	(x=0X804D);
	op_hex		(x,	1);
	create_insn	(0X8058);
	set_cmt	(0X8065,	"DS:BX = Transfer address\n[HIGH_SECTOR]:DX = Disk sector address\nCX = Sector count\nES:BP = DPB",	0);
	create_insn	(0X8065);
	set_name	(0X8065,	"DSKREAD");
	set_cmt	(0X8066,	"[ES:BP+DPB.MEDIA]",	0);
	set_cmt	(0X806A,	"[ES:BP+DPB.UNIT]",	0);
	create_insn	(0X8075);
	set_name	(0X8075,	"DWRITE");
	set_cmt	(0X807A,	"Carry clear (retz)",	0);
	set_cmt	(0X807B,	"Write",	0);
	create_insn	(x=0X807B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X8084,	"Check for retry",	0);
	set_cmt	(0X8088,	"Check for FAIL",	0);
	set_cmt	(0X808B,	"Ignore",	0);
	set_cmt	(0X808F,	"DS:BX = Transfer address\n[HIGH_SECTOR]:DX = Disk sector address\nCX = Sector count\nES:BP = DPB",	0);
	create_insn	(0X808F);
	set_name	(0X808F,	"DSKWRITE");
	set_cmt	(0X8090,	"[ES:BP+DPB.MEDIA]",	0);
	set_cmt	(0X8098,	"[ES:BP+DPB.UNIT]",	0);
	set_name	(0X809D,	"DODSKOP");
	set_cmt	(0X809F,	"DS:BP points to DPB",	0);
	set_cmt	(0X80A1,	"[ds:BP+DPB.DRIVER_ADDR]",	0);
	set_cmt	(0X80AD,	"[SS:CALLSCNT] ; Number of sectors transferred",	0);
	create_insn	(x=0X80AD);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80B8,	"Number of sectors not transferred",	0);
	set_cmt	(0X80BA,	"test ah,(STERR>>8)",	0);
	create_insn	(x=0X80BA);
	op_hex		(x,	1);
	set_cmt	(0X80BE,	"error_I24_wrong_disk",	0);
	create_insn	(0X80BE);
	set_name	(0X80BE,	"HARDERRRW");
	create_insn	(x=0X80C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80C9);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80CD);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80D8);
	set_name	(0X80D8,	"SETUP");
	create_insn	(x=0X8105);
	op_hex		(x,	1);
	create_insn	(0X8150);
	create_insn	(0X816B);
	create_insn	(0X8178);
	create_insn	(0X817E);
	create_insn	(0X81A8);
	create_insn	(x=0X81AD);
	op_hex		(x,	1);
	create_insn	(x=0X81B9);
	op_hex		(x,	1);
	create_insn	(0X81CE);
	create_insn	(0X81D5);
	create_insn	(0X821A);
	create_insn	(0X821D);
	create_insn	(0X8223);
	create_insn	(0X8225);
	create_insn	(0X822C);
	create_insn	(0X82BA);
	create_insn	(0X82BD);
	create_insn	(0X82D7);
	create_insn	(x=0X82E3);
	op_hex		(x,	1);
	create_insn	(0X8306);
	create_insn	(x=0X8313);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X8313,	"DskRdBufScan");
	create_insn	(x=0X831B);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8358);
	create_insn	(x=0X8359);
	op_hex		(x,	1);
	create_insn	(x=0X837B);
	op_hex		(x,	1);
	create_insn	(x=0X8385);
	op_hex		(x,	1);
	create_insn	(0X839D);
	create_insn	(0X83A0);
	create_insn	(0X83A3);
	create_insn	(x=0X83A8);
	op_hex		(x,	1);
	create_insn	(x=0X83D3);
	op_hex		(x,	1);
	create_insn	(0X844A);
	create_insn	(0X847A);
	create_insn	(0X84A1);
	create_insn	(0X84A4);
	create_insn	(0X851B);
	create_insn	(0X854B);
	create_insn	(0X85C2);
	create_insn	(0X85D3);
	create_insn	(0X85D6);
	create_insn	(0X8613);
	create_insn	(0X861C);
	create_insn	(x=0X862C);
	op_hex		(x,	1);
	create_insn	(0X8682);
	create_insn	(0X8685);
	create_insn	(0X86C6);
	create_insn	(0X8714);
	set_name	(0X8714,	"DskWrtBufPurge");
	create_insn	(x=0X8716);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8722,	"[es:bp+DPB.DRIVE]",	0);
	set_cmt	(0X8729,	"[di+BUFFINFO.buf_ID] ; Same drive?",	0);
	set_cmt	(0X872C,	"no",	0);
	set_cmt	(0X872E,	"[di+BUFFINFO.buf_sector+2]",	0);
	set_cmt	(0X8733,	"[di+BUFFINFO.buf_sector]",	0);
	set_cmt	(0X8742,	"[di+BUFFINFO.buf_flags],buf_dirty",	0);
	create_insn	(x=0X8742);
	op_hex		(x,	1);
	set_cmt	(0X874B,	"[di+BUFFINFO.buf_ID],\n((buf_visit<<8)|0FFh)",	0);
	set_cmt	(0X8755,	"[di+BUFFINFO.buf_next]",	0);
	create_insn	(0X8755);
	create_insn	(x=0X8757);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X875C,	"go do next buffer.",	0);
	create_insn	(0X8761);
	create_insn	(x=0X876B);
	op_hex		(x,	1);
	create_insn	(x=0X8777);
	op_hex		(x,	1);
	create_insn	(x=0X8779);
	op_hex		(x,	1);
	create_insn	(0X877C);
	create_insn	(0X8788);
	create_insn	(x=0X8790);
	op_hex		(x,	1);
	create_insn	(x=0X8792);
	op_hex		(x,	1);
	create_insn	(0X8797);
	create_insn	(x=0X879D);
	op_hex		(x,	1);
	create_insn	(x=0X87CF);
	op_hex		(x,	1);
	create_insn	(0X87F7);
	create_insn	(0X8802);
	create_insn	(0X8812);
	create_insn	(0X882E);
	create_insn	(x=0X8835);
	op_hex		(x,	1);
	create_insn	(x=0X883B);
	op_hex		(x,	1);
	create_insn	(x=0X8840);
	op_hex		(x,	1);
	create_insn	(0X8849);
	create_insn	(x=0X8853);
	op_hex		(x,	1);
	create_insn	(0X8875);
	create_insn	(0X8884);
	create_insn	(0X88AB);
	create_insn	(0X88D6);
	create_insn	(0X88DB);
	create_insn	(0X8900);
	create_insn	(x=0X890C);
	op_hex		(x,	1);
	create_insn	(x=0X890F);
	op_hex		(x,	1);
	create_insn	(x=0X8916);
	op_hex		(x,	1);
	create_byte	(x=0X8933);
	make_array	(x,	0X14);
	op_dec		(x,	0);
	set_name	(0X8933,	"sft_fcb_table");
	create_word	(0X8947);
	make_array	(0X8947,	0X2);
	set_name	(0X8947,	"sftfcb0_cluster");
	create_word	(0X894B);
	set_name	(0X894B,	"sftfcb0_direntr");
	create_byte	(x=0X894D);
	make_array	(x,	0X72);
	op_dec		(x,	0);
	create_word	(0X89BF);
	create_word	(0X89C1);
	create_insn	(x=0X89C3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X89C3,	"SETDIRSRCH");
	create_insn	(x=0X89CE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X89CE,	"SETDIRSRCH_FAT32");
	create_insn	(x=0X89D1);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X89D4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X89D7);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X89E1);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X89E5);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	create_insn	(x=0X89F3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X89F7);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X89FB);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8A04);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8A11);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8A18);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8A1C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8A20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8A27);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X8A27,	"SETDIRSRCH_FAT");
	set_cmt	(0X8A2D,	"DPB.FAT_SIZE",	0);
	set_cmt	(0X8A32,	"FAT\nFAT32",	0);
	set_cmt	(0X8A34,	"DPB.ROOT_CLUSTER+2",	0);
	create_insn	(x=0X8A38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X8A3C,	"DPB.LAST_CLUSTER+2",	0);
	set_cmt	(0X8A40,	"DPB.ROOT_CLUSTER",	0);
	set_cmt	(0X8A46,	"DPB.LAST_CLUSTER",	0);
	create_insn	(x=0X8A4C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8A5B);
	create_insn	(0X8A5E);
	create_insn	(x=0X8A60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8A63);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8A66);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8A73);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8A77);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8A7A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X8A7D,	"[ES:BP+DPB.FIRST_SECTOR]",	0);
	set_cmt	(0X8A81,	"[ES:BP+DPB.DIR_SECTOR]",	0);
	create_insn	(x=0X8A87);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8A8A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8A90);
	create_insn	(0X8ADF);
	set_cmt	(0X8AEC,	"es:di = SFT entry",	0);
	create_insn	(0X8AEC);
	set_name	(0X8AEC,	"find_sft_entry_index");
	set_cmt	(0X8AF6,	"address of the first SFT",	0);
	create_insn	(x=0X8AF6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8AFD,	"same SFT segment ?",	0);
	set_cmt	(0X8AFF,	"no",	0);
	set_cmt	(0X8B03,	"ax = entry offset",	0);
	set_cmt	(0X8B05,	"ax = offset from start of the SFT table",	0);
	set_cmt	(0X8B08,	"SF_ENTRY.size (SFT entry size)",	0);
	create_insn	(x=0X8B08);
	op_dec		(x,	1);
	set_cmt	(0X8B0D,	"ax = SFT entry index into the table",	0);
	set_cmt	(0X8B0F,	"ax = SFT entry index (from the 1st SFT)",	0);
	set_cmt	(0X8B13,	"SFT.SFCount ; number of entries in the table",	0);
	create_insn	(0X8B13);
	set_cmt	(0X8B17,	"SFT.SFLink",	0);
	set_cmt	(0X8B1A,	"the last SFT",	0);
	set_cmt	(0X8B1F,	"(not found)",	0);
	set_cmt	(0X8B22,	"Windows95 - FIND SFT ENTRY IN INTERNAL FILE TABLES",	0);
	create_insn	(0X8B22);
	set_name	(0X8B22,	"int_2Fh_1230h");
	set_cmt	(0X8B2B,	"statically allocated with 20 entries,\nand used only for FCB calls",	0);
	create_insn	(x=0X8B2B);
	op_dec		(x,	1);
	create_insn	(x=0X8B2E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8B34,	"not found (cf=1)",	0);
	set_cmt	(0X8B36,	"offset of the entry in the table",	0);
	set_cmt	(0X8B39,	"\nindex into new file system table",	0);
	create_insn	(x=0X8B39);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8B3F,	"2*bx",	0);
	set_cmt	(0X8B41,	"3*bx",	0);
	set_cmt	(0X8B43,	"bx = 6*bx",	0);
	set_cmt	(0X8B45,	"starting cluster number, hw",	0);
	create_insn	(x=0X8B45);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8B4A,	"directory entry number",	0);
	create_insn	(x=0X8B4A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8B50,	"starting cluster number, lw",	0);
	create_insn	(x=0X8B50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8B62,	"not found (cf=1)",	0);
	set_cmt	(0X8B65,	"clear stack",	0);
	create_insn	(0X8B65);
	set_cmt	(0X8B66,	"found (cf=0)",	0);
	create_insn	(0X8B6D);
	set_name	(0X8B6D,	"SFT_FREE");
	set_cmt	(0X8B74,	"[ES:DI+SF_ENTRY.sf_ref_Count]",	0);
	create_insn	(x=0X8B7E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8B85);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8B94);
	op_hex		(x,	1);
	create_insn	(0X8B99);
	create_insn	(0X8B9F);
	set_name	(0X8B9F,	"GetPathNoSet");
	create_insn	(0X8BE8);
	create_insn	(0X8BEA);
	create_insn	(x=0X8C14);
	op_hex		(x,	1);
	create_insn	(0X8C49);
	create_insn	(0X8C65);
	create_insn	(0X8C72);
	create_insn	(0X8C91);
	create_insn	(0X8C9D);
	create_insn	(0X8CAE);
	create_insn	(x=0X8CF8);
	op_hex		(x,	1);
	create_insn	(0X8CFE);
	create_insn	(x=0X8D0E);
	op_hex		(x,	1);
	create_insn	(0X8D14);
	create_insn	(0X8D17);
	create_insn	(x=0X8D1A);
	op_hex		(x,	1);
	create_insn	(0X8D43);
	create_insn	(0X8D46);
	create_insn	(x=0X8D66);
	op_hex		(x,	1);
	create_insn	(0X8D6F);
	create_insn	(x=0X8D7E);
	op_hex		(x,	1);
	create_insn	(x=0X8D85);
	op_hex		(x,	1);
	create_insn	(0X8D98);
	create_insn	(x=0X8DB2);
	op_hex		(x,	1);
	create_insn	(x=0X8DC4);
	op_hex		(x,	1);
	create_insn	(0X8DC9);
	create_insn	(0X8DFA);
	create_insn	(0X8E1A);
	create_insn	(0X8E1F);
	create_insn	(x=0X8E22);
	op_hex		(x,	1);
	create_insn	(x=0X8E29);
	op_hex		(x,	1);
	create_insn	(0X8E40);
	create_insn	(0X8E44);
	create_insn	(0X8E53);
	create_insn	(0X8E67);
	create_insn	(x=0X8E70);
	op_hex		(x,	1);
	create_insn	(0X8E74);
	set_name	(0X8E74,	"DEVNAME");
	create_insn	(x=0X8E88);
	op_hex		(x,	1);
	create_insn	(x=0X8E92);
	op_hex		(x,	1);
	create_insn	(0X8EBE);
	create_insn	(x=0X8EC6);
	op_hex		(x,	1);
	create_insn	(x=0X8EC9);
	op_hex		(x,	1);
	create_insn	(0X8ED3);
	create_insn	(0X8F01);
	set_name	(0X8F01,	"ValidateCDS");
	create_insn	(x=0X8F04);
	op_hex		(x,	1);
	create_insn	(x=0X8F07);
	op_stkvar	(x,	0);
	create_insn	(x=0X8F0F);
	op_stkvar	(x,	0);
	create_insn	(x=0X8F12);
	op_stkvar	(x,	0);
	create_insn	(x=0X8F18);
	op_hex		(x,	1);
	create_insn	(0X8F22);
	create_insn	(x=0X8F2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8F5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8F63);
	op_stkvar	(x,	1);
	create_insn	(x=0X8F86);
	op_stkvar	(x,	1);
	create_insn	(x=0X8FA1);
	op_hex		(x,	1);
	create_insn	(x=0X8FB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8FC9);
	op_stkvar	(x,	1);
	create_insn	(0X8FD0);
	create_insn	(x=0X8FDD);
	op_hex		(x,	1);
	create_insn	(x=0X8FE6);
	op_hex		(x,	1);
	create_insn	(0X9012);
	create_insn	(x=0X9015);
	op_hex		(x,	1);
	create_insn	(x=0X9020);
	op_hex		(x,	1);
	create_insn	(0X9042);
	create_insn	(x=0X9078);
	op_hex		(x,	1);
	create_insn	(0X9083);
	create_insn	(x=0X90C1);
	op_hex		(x,	1);
	create_insn	(0X90C8);
	create_insn	(x=0X90D3);
	op_hex		(x,	1);
	create_insn	(0X90DB);
	create_insn	(x=0X90DC);
	op_hex		(x,	1);
	create_insn	(x=0X90E4);
	op_hex		(x,	1);
	create_insn	(x=0X90EC);
	op_hex		(x,	1);
	create_insn	(0X90F9);
	create_insn	(x=0X915B);
	op_hex		(x,	1);
	create_insn	(0X9175);
	set_name	(0X9175,	"IOFUNC");
	create_insn	(x=0X918C);
	op_hex		(x,	1);
	create_insn	(x=0X9195);
	op_hex		(x,	1);
	create_insn	(0X919E);
	create_insn	(x=0X91F9);
	op_hex		(x,	1);
	create_insn	(0X9213);
	create_insn	(0X9219);
	create_insn	(x=0X9229);
	op_hex		(x,	1);
	create_insn	(0X923A);
	create_insn	(0X9247);
	create_insn	(0X9250);
	create_insn	(0X9257);
	create_insn	(0X9260);
	create_insn	(0X9261);
	create_insn	(x=0X9264);
	op_hex		(x,	1);
	create_insn	(x=0X926D);
	op_hex		(x,	1);
	create_insn	(0X9281);
	create_insn	(0X92B5);
	create_insn	(0X92CA);
	create_insn	(0X92D2);
	set_name	(0X92D2,	"DEV_CLOSE_SFT");
	create_insn	(x=0X92D8);
	op_hex		(x,	1);
	create_insn	(x=0X92E1);
	op_hex		(x,	1);
	create_insn	(x=0X92FD);
	op_hex		(x,	1);
	create_insn	(x=0X932A);
	op_hex		(x,	1);
	create_insn	(0X9334);
	create_insn	(0X9342);
	set_cmt	(0X9348,	"CALLNEWSC, HIGH_SECTOR & CALLDEVAD\nLDS SI,[SI+SF_ENTRY.sf_devptr]",	0);
	create_insn	(0X9348);
	set_name	(0X9348,	"DEVIOCALL");
	create_insn	(0X934B);
	set_name	(0X934B,	"DEVIOCALL2");
	set_cmt	(0X934E,	"[SI+SYSDEV.ATT+1],(DEVTYP>>8)",	0);
	create_insn	(x=0X934E);
	op_hex		(x,	1);
	set_cmt	(0X9354,	"[ES:BX+SRHEAD.REQFUNC]",	0);
	set_cmt	(0X9358,	"DEVRD",	0);
	set_cmt	(0X935C,	"DEVWRT",	0);
	set_cmt	(0X9360,	"DEVWRTV",	0);
	set_cmt	(0X9364,	"[SI+SYSDEV.ATT],EXTDRVR",	0);
	create_insn	(x=0X9364);
	op_hex		(x,	1);
	set_cmt	(0X936A,	"-1 ; old sector",	0);
	set_cmt	(0X936D,	"make length to 30",	0);
	create_insn	(x=0X9371);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X9376);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X937A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X937E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X9384,	"if >32mb",	0);
	create_insn	(x=0X9384);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X938A,	"then fake error",	0);
	set_cmt	(0X938C,	"lock (deviocall in progress)",	0);
	create_insn	(x=0X938C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X9391,	"[SI+SYSDEV.STRAT]",	0);
	create_insn	(x=0X9394);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X9398);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X939D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X93A2,	"[SI+SYSDEV.INT]",	0);
	create_insn	(x=0X93A5);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X93A9);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X93AE,	"unlock (deviocall completed)",	0);
	create_insn	(x=0X93AE);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X93B7,	"[ES:BX+SRHEAD.REQSTAT],\nSTERR+STDON+error_I24_not_DOS_disk",	0);
	create_insn	(0X93B7);
	create_insn	(0X93BF);
	set_name	(0X93BF,	"SETREAD");
	create_insn	(x=0X93C4);
	op_dec		(x,	1);
	create_insn	(x=0X93CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X93D9);
	op_dec		(x,	1);
	create_insn	(x=0X93F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X93F8);
	set_name	(0X93F8,	"SETWRITE");
	create_insn	(0X9404);
	create_insn	(0X9406);
	create_insn	(0X9408);
	create_insn	(0X940A);
	create_insn	(0X9414);
	create_insn	(0X9424);
	create_insn	(0X946C);
	create_insn	(0X94C3);
	create_insn	(x=0X94CC);
	op_hex		(x,	1);
	create_insn	(x=0X94D7);
	op_hex		(x,	1);
	create_insn	(0X94F3);
	create_insn	(0X951A);
	create_insn	(x=0X953E);
	op_hex		(x,	1);
	create_insn	(x=0X9545);
	op_hex		(x,	1);
	create_insn	(x=0X954A);
	op_hex		(x,	1);
	create_insn	(0X9556);
	create_insn	(0X955F);
	create_insn	(x=0X9563);
	op_hex		(x,	1);
	create_insn	(x=0X957B);
	op_hex		(x,	1);
	create_insn	(0X95A3);
	create_insn	(0X95A8);
	create_insn	(0X95AC);
	create_insn	(0X95B8);
	create_insn	(x=0X95BD);
	op_hex		(x,	1);
	create_insn	(0X95E9);
	create_insn	(0X9619);
	set_name	(0X9619,	"nullsub_17");
	create_insn	(0X961A);
	create_insn	(0X9634);
	create_insn	(0X9636);
	create_insn	(0X963D);
	create_insn	(x=0X9642);
	op_hex		(x,	1);
	create_insn	(x=0X967E);
	op_hex		(x,	1);
	create_insn	(x=0X9688);
	op_hex		(x,	1);
	create_insn	(x=0X969D);
	op_hex		(x,	1);
	create_insn	(0X96C3);
	set_name	(0X96C3,	"DOOPEN");
	create_insn	(x=0X96F1);
	op_hex		(x,	1);
	create_insn	(x=0X974E);
	op_hex		(x,	1);
	create_insn	(0X9766);
	create_insn	(0X9782);
	create_insn	(0X9791);
	create_insn	(0X97C4);
	create_insn	(0X9801);
	create_insn	(0X982D);
	create_insn	(0X985F);
	create_insn	(x=0X9893);
	op_hex		(x,	1);
	create_insn	(0X98AD);
	create_insn	(0X98C2);
	create_insn	(x=0X9900);
	op_hex		(x,	1);
	create_insn	(0X990E);
	create_insn	(0X9919);
	create_insn	(x=0X9923);
	op_hex		(x,	1);
	create_insn	(0X9949);
	create_insn	(x=0X9977);
	op_hex		(x,	1);
	create_insn	(x=0X9985);
	op_hex		(x,	1);
	create_insn	(x=0X9990);
	op_hex		(x,	1);
	create_insn	(x=0X99AA);
	op_hex		(x,	1);
	create_insn	(0X99F1);
	create_insn	(0X99F3);
	create_insn	(x=0X9A76);
	op_hex		(x,	1);
	create_insn	(0X9A7B);
	create_insn	(0X9A89);
	create_insn	(x=0X9A91);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X9A9E);
	op_hex		(x,	1);
	create_insn	(x=0X9AA0);
	op_hex		(x,	1);
	create_insn	(0X9AB7);
	create_insn	(x=0X9ABE);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X9AC5);
	create_insn	(x=0X9AC6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X9ACC);
	create_insn	(0X9ACF);
	create_insn	(0X9B6F);
	create_insn	(0X9B78);
	create_insn	(0X9B9E);
	create_insn	(x=0X9BB9);
	op_hex		(x,	1);
	create_insn	(0X9C08);
	create_insn	(0X9C4A);
	create_insn	(0X9C61);
	create_insn	(0X9C9B);
	create_insn	(0X9CA9);
	create_insn	(0X9CBA);
	create_insn	(0X9CDF);
	create_insn	(0X9D13);
	create_insn	(0X9D19);
	create_insn	(0X9D56);
	create_insn	(0X9D73);
	create_insn	(0X9D7C);
	create_insn	(0X9DB0);
	create_insn	(x=0X9DB7);
	op_hex		(x,	1);
	create_insn	(x=0X9DC2);
	op_hex		(x,	1);
	create_insn	(x=0X9DD1);
	op_hex		(x,	1);
	create_insn	(x=0X9DE2);
	op_hex		(x,	1);
	create_insn	(0X9E18);
	create_insn	(x=0X9E27);
	op_hex		(x,	1);
	create_insn	(x=0X9E36);
	op_hex		(x,	1);
	create_insn	(0X9E3E);
	create_insn	(0X9E42);
	create_insn	(0X9E48);
	create_insn	(x=0X9E4D);
	op_hex		(x,	1);
	create_insn	(x=0X9E69);
	op_hex		(x,	1);
	create_insn	(0X9E6E);
	create_insn	(0X9E74);
	create_insn	(0X9E7B);
	set_name	(0X9E7B,	"nullsub_16");
	create_insn	(0X9E7C);
	create_insn	(0X9EE4);
	create_insn	(0X9EE5);
	set_name	(0X9EE5,	"UCase");
	create_insn	(x=0X9F05);
	op_hex		(x,	1);
	create_insn	(0X9F0A);
	set_name	(0X9F0A,	"GETLET3");
	create_insn	(0X9F0D);
	create_insn	(x=0X9F11);
	op_hex		(x,	1);
	create_insn	(0X9F15);
	create_insn	(x=0X9F19);
	op_hex		(x,	1);
	create_insn	(0X9F1D);
	create_insn	(x=0X9F25);
	op_hex		(x,	1);
	create_insn	(x=0X9F32);
	op_hex		(x,	1);
	create_insn	(0X9F35);
	create_insn	(0X9F38);
	set_name	(0X9F38,	"PATHCHRCMP");
	create_insn	(0X9F3F);
	create_insn	(0X9F42);
	create_word	(x=0X9F45);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X9F45,	"LowInt23Addr");
	create_word	(0X9F47);
	set_name	(0X9F47,	"LowInt23_SEG");
	create_word	(x=0X9F49);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X9F49,	"LowInt24Addr");
	create_word	(0X9F4B);
	set_name	(0X9F4B,	"LowInt24_SEG");
	create_word	(x=0X9F4D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X9F4D,	"LowInt28Addr");
	create_word	(0X9F4F);
	set_name	(0X9F4F,	"LowInt28_SEG");
	create_insn	(0X9F51);
	set_name	(0X9F51,	"DSKSTATCHK");
	create_insn	(0X9F5A);
	create_insn	(x=0X9F82);
	op_hex		(x,	1);
	create_insn	(0X9F92);
	create_insn	(0X9FBF);
	create_insn	(0X9FCC);
	create_insn	(0X9FD1);
	create_insn	(0X9FD4);
	set_cmt	(0X9FF2,	"DOS 2+ internal - KEYBOARD BUSY LOOP",	0);
	create_insn	(x=0X9FF2);
	op_hex		(x,	0);
	create_insn	(0X9FF6);
	create_insn	(0XA002);
	set_name	(0XA002,	"STATCHK");
	create_insn	(0XA028);
	create_insn	(x=0XA03D);
	op_hex		(x,	1);
	set_cmt	(0XA048,	"Multiplex - NETWORK REDIRECTOR - ???\nReturn: CF set on error, AX = error code\nSTACK unchanged",	0);
	create_insn	(x=0XA048);
	op_hex		(x,	0);
	set_cmt	(0XA057,	"Multiplex - NETWORK REDIRECTOR - ???\nES:DI -> SFT, SS = DOS CS",	0);
	create_insn	(x=0XA057);
	op_hex		(x,	0);
	create_insn	(0XA05C);
	create_insn	(0XA069);
	create_insn	(0XA06F);
	create_insn	(x=0XA08F);
	op_hex		(x,	1);
	set_cmt	(0XA0DF,	"DOS - CONTROL \"C\" EXIT ADDRESS\nReturn: return via RETF 2 with CF set\nDOS will abort program with errorlevel 0\nelse\ninterrupted DOS call continues",	0);
	create_insn	(x=0XA0DF);
	op_hex		(x,	0);
	create_insn	(0XA0E3);
	create_insn	(x=0XA10B);
	op_hex		(x,	1);
	create_insn	(0XA125);
	set_name	(0XA125,	"DIVOV");
	create_insn	(0XA13A);
	create_insn	(0XA173);
	create_insn	(x=0XA17B);
	op_hex		(x,	1);
	create_insn	(x=0XA17E);
	op_hex		(x,	1);
	create_insn	(x=0XA186);
	op_hex		(x,	1);
	create_insn	(x=0XA199);
	op_hex		(x,	1);
	create_insn	(0XA1A4);
	set_name	(0XA1A4,	"HARDERR");
	create_insn	(x=0XA1A5);
	op_hex		(x,	1);
	create_insn	(x=0XA1B3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XA1BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XA1CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XA1E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0XA204);
	create_insn	(0XA20A);
	create_insn	(0XA218);
	create_insn	(x=0XA222);
	op_hex		(x,	1);
	create_insn	(x=0XA224);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA229);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0XA22E);
	set_name	(0XA22E,	"FATAL");
	create_insn	(0XA232);
	set_name	(0XA232,	"FATAL1");
	create_insn	(0XA242);
	create_insn	(x=0XA24D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XA24D,	"NET_I24_ENTRY");
	create_insn	(0XA259);
	create_insn	(x=0XA260);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XA275);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XA27A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XA27F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XA284);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	create_insn	(x=0XA290);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA295);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA29A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XA2A2,	"DOS - FATAL ERROR HANDLER ADDRESS\nAutomatically called upon detection of unrecoverable I/O error.",	0);
	create_insn	(x=0XA2A2);
	op_hex		(x,	0);
	create_insn	(0XA2A6);
	create_insn	(x=0XA2AB);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XA2B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XA2BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XA2C1);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XA2C6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XA2DC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	create_insn	(x=0XA2E6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	create_insn	(x=0XA2EE);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XA2F3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XA2F9);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0XA302);
	create_insn	(x=0XA305);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA314);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	create_insn	(x=0XA31E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	create_insn	(0XA326);
	create_insn	(x=0XA328);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XA339);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0XA343);
	set_cmt	(0XA346,	"Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7",	0);
	create_insn	(x=0XA346);
	op_hex		(x,	0);
	set_cmt	(0XA351,	"Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK\nSS = DOS CS",	0);
	create_insn	(x=0XA351);
	op_hex		(x,	0);
	create_insn	(x=0XA3D0);
	op_hex		(x,	1);
	create_insn	(0XA3E5);
	create_insn	(0XA40C);
	create_insn	(0XA41E);
	create_insn	(0XA431);
	create_insn	(x=0XA435);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XA43B);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA441);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XA445);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0XA44E);
	set_name	(0XA44E,	"UNPACK");
	create_insn	(x=0XA45D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XA469,	"[ES:BP+DPB.MAX_CLUSTER]",	0);
	create_insn	(0XA469);
	create_insn	(x=0XA477);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XA485);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XA48C,	"[ES:BP+DPB.MAX_CLUSTER]\nis this 16-bit fat?",	0);
	set_cmt	(0XA490,	"4096-10",	0);
	set_cmt	(0XA494,	"No, go 'AND' off bits",	0);
	set_cmt	(0XA496,	"set zero condition code, clears carry",	0);
	set_cmt	(0XA49E,	"? (di=0)",	0);
	create_insn	(x=0XA49E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0XA4A3);
	create_insn	(x=0XA4AA);
	op_hex		(x,	1);
	create_insn	(x=0XA4AC);
	op_hex		(x,	1);
	create_insn	(x=0XA4AE);
	op_hex		(x,	1);
	create_insn	(x=0XA4B0);
	op_hex		(x,	1);
	create_insn	(x=0XA4B2);
	op_hex		(x,	1);
	set_name	(0XA4B6,	"_DoContext");
	create_insn	(0XA4BB);
	set_cmt	(0XA4BF,	"Allowed_FAIL+80h",	0);
	set_cmt	(0XA4C1,	"Allowed_FAIL",	0);
	create_insn	(x=0XA4C1);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XA4C7);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XA4D1);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XA4D8,	"0FFFFh",	0);
	create_insn	(x=0XA4D9);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XA4E1,	"Try to ignore bad FAT",	0);
	set_cmt	(0XA4E3,	"User said FAIL",	0);
	set_name	(0XA4E5,	"hurtfat_retn");
	set_cmt	(0XA4E6,	"0",	0);
	create_insn	(x=0XA4E6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XA4ED);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA4F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XA4F4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XA4F9,	"are we packing cluster 0 ?",	0);
	create_insn	(0XA4F9);
	set_name	(0XA4F9,	"PACK");
	set_cmt	(0XA4FB,	"place value in CL0FATENTRY",	0);
	create_insn	(x=0XA50E);
	op_hex		(x,	1);
	create_insn	(0XA513);
	create_insn	(x=0XA520);
	op_hex		(x,	1);
	create_insn	(0XA52B);
	create_insn	(x=0XA533);
	op_hex		(x,	1);
	create_insn	(x=0XA537);
	op_hex		(x,	1);
	create_insn	(0XA53C);
	create_insn	(x=0XA542);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA547,	"[SI+BUFFINFO.buf_flags],buf_dirty",	0);
	create_insn	(x=0XA547);
	op_hex		(x,	1);
	create_insn	(x=0XA54D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XA552,	"[SI+BUFFINFO.buf_flags],buf_dirty",	0);
	create_insn	(x=0XA552);
	op_hex		(x,	1);
	create_insn	(x=0XA556);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XA569);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA56C,	"BUFINSIZ",	0);
	create_insn	(x=0XA56C);
	op_dec		(x,	1);
	create_insn	(x=0XA56F);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA575);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA57B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XA58F);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA593,	"[DI+BUFFINFO.buf_flags],buf_dirty",	0);
	create_insn	(x=0XA593);
	op_hex		(x,	1);
	create_insn	(x=0XA599);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XA59E,	"[DI+BUFFINFO.buf_flags],buf_dirty",	0);
	create_insn	(x=0XA59E);
	op_hex		(x,	1);
	set_cmt	(0XA5A2,	"BUFINSIZ-1",	0);
	create_insn	(x=0XA5A2);
	op_dec		(x,	1);
	set_cmt	(0XA5A5,	"[ES:BP+DPB.SECTOR_SIZE]",	0);
	create_insn	(0XA5B9);
	create_insn	(0XA5CE);
	create_insn	(x=0XA5D7);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XA5D7,	"MAPCLUSTER");
	create_insn	(x=0XA5E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XA5E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA5F1);
	op_hex		(x,	1);
	create_insn	(x=0XA5F3);
	op_hex		(x,	1);
	create_insn	(x=0XA5F5);
	op_hex		(x,	1);
	create_insn	(x=0XA5F7);
	op_hex		(x,	1);
	create_insn	(x=0XA5F9);
	op_hex		(x,	1);
	create_insn	(x=0XA5FB);
	op_hex		(x,	1);
	create_insn	(0XA5FF);
	create_insn	(x=0XA607);
	op_hex		(x,	1);
	create_insn	(x=0XA609);
	op_hex		(x,	1);
	create_insn	(x=0XA60D);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA61E);
	op_hex		(x,	1);
	create_insn	(x=0XA620);
	op_hex		(x,	1);
	create_insn	(x=0XA622);
	op_hex		(x,	1);
	create_insn	(x=0XA62C);
	op_hex		(x,	1);
	create_insn	(x=0XA633);
	op_hex		(x,	1);
	create_insn	(x=0XA645);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XA657);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA66A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XA66E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XA671);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XA67A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XA680);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XA68C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA699);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XA69C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA6B8);
	op_hex		(x,	1);
	create_insn	(x=0XA6BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XA6C6,	"[ES:DI+SF_ENTRY.sf_devptr]",	0);
	create_insn	(0XA6C6);
	set_name	(0XA6C6,	"FATREAD_SFT");
	set_name	(0XA6CA,	"fatread_gotdpb");
	create_insn	(x=0XA6CE);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XA6D1,	"Set THISDPB",	0);
	set_name	(0XA6D7,	"fatread_sft_retn");
	create_insn	(0XA6D8);
	set_name	(0XA6D8,	"FATREAD_CDS");
	set_cmt	(0XA6DA,	"[ES:DI+curdir.devptr]",	0);
	set_cmt	(0XA6E7,	"-1",	0);
	create_insn	(x=0XA6EB);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA6EF,	"CX is number of structures",	0);
	set_cmt	(0XA6F1,	"Find all CDS with this devptr",	0);
	set_cmt	(0XA6F5,	"(es:di) = CDS pointer",	0);
	create_insn	(x=0XA6F5);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA6FA,	"ES:DI+curdir.flags+1],\n(curdir_isnet>>8)",	0);
	create_insn	(x=0XA6FA);
	op_hex		(x,	1);
	set_cmt	(0XA701,	"[ES:DI+curdir.devptr]",	0);
	set_cmt	(0XA705,	"no match",	0);
	set_cmt	(0XA709,	"[ES:DI+curdir.devptr+2]",	0);
	set_cmt	(0XA70D,	"CDS not for this drive",	0);
	set_cmt	(0XA70F,	"[ES:DI+curdir.ID]\nIf root (0), leave root",	0);
	set_cmt	(0XA713,	"= 0",	0);
	set_cmt	(0XA715,	"[ES:DI+curdir.ID+2]",	0);
	set_cmt	(0XA719,	"leave root (= 0)",	0);
	set_cmt	(0XA71B,	"else invalid (-1)",	0);
	set_cmt	(0XA71F,	"-1",	0);
	set_cmt	(0XA723,	"add di,curdir.size\nPoint to next CDS",	0);
	create_insn	(x=0XA723);
	op_dec		(x,	1);
	create_insn	(x=0XA729);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA72F,	"DPB.FATSIZE",	0);
	create_insn	(0XA72F);
	set_name	(0XA72F,	"chk_set_first_access");
	set_cmt	(0XA734,	"FAT (FAT12 or FAT16)\nFAT32",	0);
	set_cmt	(0XA736,	"DPB.FREE_CNT_HW",	0);
	set_cmt	(0XA73B,	"High word of free cluster count",	0);
	set_cmt	(0XA743,	"DPB.FREE_CNT",	0);
	set_cmt	(0XA748,	"Count of free clusters, -1 if unknown",	0);
	set_cmt	(0XA750,	"DPB.FIRST_ACCESS",	0);
	create_insn	(x=0XA750);
	op_hex		(x,	1);
	set_cmt	(0XA756,	"Err in FAT must force recalc of freespace",	0);
	create_insn	(0XA756);
	set_cmt	(0XA759,	"STECODE",	0);
	create_insn	(x=0XA759);
	op_hex		(x,	1);
	set_cmt	(0XA75D,	"[ALLOWED],Allowed_FAIL+Allowed_RETRY",	0);
	create_insn	(x=0XA75D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XA762,	"2+Allowed_FAIL+Allowed_RETRY\n(While trying to read FAT)",	0);
	set_cmt	(0XA764,	"Tell which drive",	0);
	create_insn	(x=0XA764);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA76A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA770,	"User said retry",	0);
	set_cmt	(0XA772,	"User said FAIL",	0);
	set_cmt	(0XA774,	"SS is DOSDATA",	0);
	create_insn	(0XA774);
	set_name	(0XA774,	"FAT_GOT_DPB");
	create_insn	(x=0XA77C);
	op_dec		(x,	1);
	set_cmt	(0XA77E,	"[ES:BP+DPB.UNIT]",	0);
	set_cmt	(0XA782,	"DEVMDCH",	0);
	create_insn	(x=0XA782);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XA787);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XA78A,	"[ES:BP+DPB.MEDIA]",	0);
	create_insn	(x=0XA78E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XA794,	"[CALLMED]",	0);
	create_insn	(x=0XA794);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XA799,	"offset DEVCALL",	0);
	create_insn	(x=0XA799);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA79C,	"[ES:BP+DPB.DRIVER_ADDR]",	0);
	create_insn	(x=0XA7A7);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA7AF,	"[ES:BP+DPB.FIRST_ACCESS]",	0);
	set_cmt	(0XA7B3,	"Use physical unit number",	0);
	create_insn	(x=0XA7B3);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA7B6,	"izolate (FAT) first access bit",	0);
	create_insn	(x=0XA7B6);
	op_hex		(x,	1);
	set_cmt	(0XA7B9,	"clear first access (FAT) bit 7",	0);
	create_insn	(x=0XA7B9);
	op_hex		(x,	1);
	create_insn	(x=0XA7BE);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XA7C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XA7CC,	"[CALLRBYT]",	0);
	create_insn	(x=0XA7CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA7D5,	"Media not changed (NZ)",	0);
	create_insn	(0XA7D6);
	set_cmt	(0XA7D8,	"[ES:BP+DPB.DRIVER_ADDR]",	0);
	set_cmt	(0XA7DC,	"[es:bp+SYSDEV.ATT+1],(DEVOPCL>>8)",	0);
	create_insn	(x=0XA7DC);
	op_hex		(x,	1);
	set_cmt	(0XA7E9,	"Allowed_FAIL+Allowed_RETRY",	0);
	create_insn	(x=0XA7E9);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XA7EF,	"Get volume ID pointer",	0);
	create_insn	(x=0XA7EF);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA7F3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XA7F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XA7FC,	"error_I24_wrong_disk",	0);
	set_cmt	(0XA7FF,	"Write",	0);
	create_insn	(x=0XA7FF);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XA80D,	"Retry",	0);
	set_cmt	(0XA810,	"any dirty buffers ?",	0);
	create_insn	(x=0XA810);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XA816,	"no, skip the check",	0);
	set_cmt	(0XA818,	"get pointer to first buffer",	0);
	set_cmt	(0XA81B,	"[di+BUFFINFO.buf_ID] ; Unit OK ?",	0);
	set_cmt	(0XA81E,	"no",	0);
	set_cmt	(0XA820,	"is the buffer dirty ?",	0);
	create_insn	(x=0XA820);
	op_hex		(x,	1);
	set_cmt	(0XA824,	"no, go for next buffer",	0);
	create_insn	(0XA82A);
	create_insn	(0XA82E);
	set_cmt	(0XA830,	"[di+BUFFINFO.buf_next] ; get next buffer",	0);
	create_insn	(0XA830);
	set_cmt	(0XA832,	"is this where we started ?",	0);
	create_insn	(x=0XA832);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XA837,	"no, check this guy also\nIf no dirty buffers, assume Media changed",	0);
	set_cmt	(0XA839,	"[ES:BP+DPB.FREE_CNT],-1\nMedia changed, must recompute",	0);
	set_cmt	(0XA83F,	"[ES:BP+DPB.FATSIZE] = 0 for FAT32 fs",	0);
	set_cmt	(0XA846,	"[ES:BP+DPB.FREE_CNT_HW],-1",	0);
	set_cmt	(0XA84F,	"[DI+BUFFINFO.buf_ID],al ; This drive ?",	0);
	set_cmt	(0XA854,	"[DI+BUFFINFO.buf_flags],buf_dirty",	0);
	create_insn	(x=0XA854);
	op_hex		(x,	1);
	set_cmt	(0XA85A,	"[DI+BUFFINFO.buf_ID],\n(buf_visit*256)+0FFh ; free up",	0);
	create_insn	(0XA864);
	create_insn	(x=0XA866);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA86D,	"look ahead buffers ?",	0);
	create_insn	(x=0XA86D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XA873,	"no",	0);
	set_cmt	(0XA875,	"same as changed drive ?",	0);
	create_insn	(x=0XA875);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA87A,	"no",	0);
	set_cmt	(0XA87C,	"invalidate look ahead buffers",	0);
	create_insn	(x=0XA87C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XA882,	"[ES:BP+DPB.DRIVER_ADDR]",	0);
	set_cmt	(0XA886,	"[DI+SYSDEV.ATT+1],(ISFATBYDEV>>8)",	0);
	create_insn	(x=0XA886);
	op_hex		(x,	1);
	set_cmt	(0XA88E,	"DPB.SECTORSIZE ; bytes per sector",	0);
	set_cmt	(0XA894,	"DPB.FIRST_FAT ; starting sector of FATs",	0);
	set_cmt	(0XA89A,	"DPB.FAT_COUNT ; number of FATs",	0);
	set_cmt	(0XA89F,	"DPB.MAX_CLUSTER ; cluster count + 1",	0);
	set_cmt	(0XA8A5,	"DPB.FAT_SIZE ; FAT sectors (16 bit)",	0);
	set_cmt	(0XA8AB,	"high word of cluster number (for UNPACK)",	0);
	create_insn	(x=0XA8AB);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XA8B1,	"Read the 1st FAT sector into CURBUF",	0);
	create_insn	(x=0XA8BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0XA8C2);
	create_insn	(x=0XA8C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA8C9,	"sub di,BUFINSIZ",	0);
	create_insn	(x=0XA8C9);
	op_dec		(x,	1);
	set_cmt	(0XA8CC,	"0",	0);
	create_insn	(x=0XA8CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XA8D1,	"buffer is in HMA\nuse [LowMemBuff] to transfer at first",	0);
	set_cmt	(0XA8D5,	"0",	0);
	create_insn	(x=0XA8D5);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XA8E4,	"add di,BUFINSIZ",	0);
	create_insn	(x=0XA8E4);
	op_dec		(x,	1);
	set_cmt	(0XA8E7,	"[SS:CALLXAD+2]",	0);
	create_insn	(x=0XA8E7);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XA8F0,	"[CALLXAD]",	0);
	create_insn	(x=0XA8F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XA8F4,	"DBPBHL",	0);
	set_cmt	(0XA8F6,	"[ES:BP+DPB.UNIT]",	0);
	set_cmt	(0XA8FA,	"DEVBPB",	0);
	create_insn	(x=0XA8FA);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XA8FF);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XA902);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XA908,	"[ES:BP+DPB.MEDIA]",	0);
	set_cmt	(0XA90E,	"[CALLMED]",	0);
	create_insn	(x=0XA90E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XA911,	"offset DEVCALL",	0);
	create_insn	(x=0XA911);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA914,	"[ES:BP+DPB.DRIVER_ADDR]\nDS:SI Points to device header",	0);
	set_cmt	(0XA918,	"ES:BX Points to call header",	0);
	create_insn	(x=0XA921);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA927,	"\nhave error",	0);
	set_cmt	(0XA929,	"[CALLXAD] ; Buffer (data) address",	0);
	create_insn	(x=0XA929);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA92D,	"byte BUFFINFO.buf_ID = 0FFh ; FREE\nbyte BUFFINFO.buf_flags = 0",	0);
	create_insn	(x=0XA92D);
	op_dec		(x,	0);
	set_cmt	(0XA935,	"Address of the BPB (DEVCALL offset 18)",	0);
	create_insn	(x=0XA935);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA939,	"0",	0);
	set_cmt	(0XA93B,	"[ES:BP+DPB.NEXT_FREE] = 0\nrecycle scanning pointer",	0);
	set_cmt	(0XA93F,	"'RA' ; FAT32 extended BPB/DPB signature",	0);
	set_cmt	(0XA942,	"BPB.fatsecs ; 16 bit FAT size = 0 for FAT32 fs",	0);
	set_cmt	(0XA945,	"not FAT32",	0);
	set_cmt	(0XA947,	"clear reserved bytes (DPB.RESERVED)",	0);
	set_cmt	(0XA94F,	"-1",	0);
	set_cmt	(0XA950,	"(DPB.FREE_CNT) set free count to -1 (unknown)",	0);
	set_cmt	(0XA958,	"'XE' ; FAT32 extended BPB/DPB signature",	0);
	set_cmt	(0XA95E,	"[SS:CALLXAD] ; Get back buffer pointer",	0);
	create_insn	(x=0XA95E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA963,	"[es:bp+DPB.FSINFO_SECTOR]",	0);
	set_cmt	(0XA967,	"0",	0);
	set_cmt	(0XA969,	"[es:bp+DPB.FAT_SIZE] ; 16 bit FAT size field",	0);
	set_cmt	(0XA96D,	"FAT32 fs",	0);
	set_cmt	(0XA96F,	"FAT fs",	0);
	set_cmt	(0XA972,	"invalid ?",	0);
	create_insn	(0XA972);
	set_cmt	(0XA975,	"no",	0);
	set_cmt	(0XA977,	"skip reading FSINFO sector",	0);
	set_cmt	(0XA97A,	"0",	0);
	create_insn	(x=0XA97A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XA981);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XA987,	"buffer is in conventional (<=640KB) memory",	0);
	set_cmt	(0XA989,	"use a buffer in conventional memory",	0);
	create_insn	(x=0XA989);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA990,	"Allowed_FAIL+Allowed_RETRY",	0);
	create_insn	(x=0XA990);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XA99E,	"\nds:di = (FSINFO sector) buffer\nFSI_HeadSig = 41615252h",	0);
	set_cmt	(0XA9A0,	"'RR' ; check if it is a valid FSINFO sector",	0);
	set_cmt	(0XA9A4,	"not valid",	0);
	set_cmt	(0XA9A6,	"'aA' ; (NASM syntax)",	0);
	create_insn	(x=0XA9A6);
	op_hex		(x,	0);
	set_cmt	(0XA9AD,	"'rr' ; FSI_StrucSig = 61417272h",	0);
	create_insn	(x=0XA9AD);
	op_dec		(x,	0);
	set_cmt	(0XA9B5,	"'Aa'",	0);
	create_insn	(x=0XA9B5);
	op_dec		(x,	0);
	set_cmt	(0XA9BB,	"not valid",	0);
	set_cmt	(0XA9BD,	"valid",	0);
	set_cmt	(0XA9C0,	"[es:bp+DPB.LASTCLUSTER+2]",	0);
	set_cmt	(0XA9C4,	"[es:bp+DPB.LASTCLUSTER]",	0);
	set_cmt	(0XA9C8,	"FSI_FreeCount ; bx:cx = number of clusters + 1",	0);
	create_insn	(x=0XA9C8);
	op_dec		(x,	1);
	set_cmt	(0XA9CC,	"FSI_FreeCount+2",	0);
	create_insn	(x=0XA9CC);
	op_dec		(x,	1);
	set_cmt	(0XA9D0,	"is Free Count >= (Number of Clusters + 1) ?",	0);
	set_cmt	(0XA9D2,	"if yes, it is invalid value (must be 0FFFFFFFFh)",	0);
	set_cmt	(0XA9D6,	"yes, invalid value (must be 0FFFFFFFFh)",	0);
	set_cmt	(0XA9D8,	"no, valid free count \nsave free count into [es:bp+DPB.FREE_CNT]",	0);
	set_cmt	(0XA9DC,	"[es:bp+DPB.FREE_CNT+2]",	0);
	set_cmt	(0XA9E0,	"FSI_Nxt_Free",	0);
	create_insn	(x=0XA9E0);
	op_dec		(x,	1);
	create_insn	(x=0XA9E4);
	op_dec		(x,	1);
	set_cmt	(0XA9E8,	"is the next free clust num >= (num of clusters + 1) ?",	0);
	set_cmt	(0XA9EA,	"invalid (if dx > bx)",	0);
	set_cmt	(0XA9EE,	"invalid",	0);
	set_cmt	(0XA9F0,	"save next free (search) cluster number",	0);
	set_cmt	(0XA9F4,	"into [es:bp+DPB.FAT32_NXTFREE]",	0);
	set_cmt	(0XA9F8,	"and into [es:bp+DPB.NEXT_FREE] ; low word",	0);
	set_cmt	(0XA9FF,	"is buffer in HMA ?",	0);
	create_insn	(x=0XA9FF);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XAA05,	"yes",	0);
	set_cmt	(0XAA07,	"invalidate buffer (set it as free buffer)",	0);
	create_insn	(x=0XAA07);
	op_dec		(x,	0);
	create_insn	(x=0XAA0C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XAA1B,	"invalidate buffer (set it as free buffer)\ndi = buffer header + 4 (BUFINFO.buf_ID)",	0);
	create_insn	(x=0XAA1B);
	op_dec		(x,	0);
	set_cmt	(0XAA20,	"[es:bp+DPB.FAT_COUNT]",	0);
	set_cmt	(0XAA24,	"BUFFINFO.buf_wrtcnt ; buffer header address + 10",	0);
	create_insn	(x=0XAA24);
	op_dec		(x,	0);
	set_cmt	(0XAA27,	"[es:bp+DPB.FAT_SIZE] ; 16 bit FAT size field",	0);
	set_cmt	(0XAA2D,	"FAT (FAT12 or FAT16) fs\nFAT32 fs",	0);
	set_cmt	(0XAA2F,	"[es:bp+DPB.FAT32_SIZE] ; FAT sectors (per one FAT)",	0);
	set_cmt	(0XAA33,	"BUFFINFO.buf_wrtcntinc ; # sectors between each write",	0);
	create_insn	(x=0XAA33);
	op_dec		(x,	0);
	set_cmt	(0XAA36,	"[es:bp+DPB.FAT32_SIZE+2]",	0);
	set_cmt	(0XAA3C,	"BUFFINFO.buf_wrtcntinc",	0);
	create_insn	(x=0XAA3C);
	op_dec		(x,	0);
	set_cmt	(0XAA3F,	"0",	0);
	set_cmt	(0XAA41,	"BUFFINFO.buf_wrtcntinc+2 ; hw of sectors per FAT",	0);
	create_insn	(x=0XAA41);
	op_dec		(x,	0);
	set_cmt	(0XAA44,	"SS is DOSDATA",	0);
	set_cmt	(0XAA48,	"Media changed (Z), Carry clear",	0);
	set_cmt	(0XAA4B,	"Pointer to the first buffer",	0);
	create_insn	(x=0XAA4B);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0XAA4B,	"GETCURHEAD");
	set_cmt	(0XAA50,	"-1 ; invalidate last buffer",	0);
	create_insn	(x=0XAA50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XAA57,	"save first buffer address",	0);
	create_insn	(x=0XAA57);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0XAA5D);
	set_name	(0XAA5D,	"SCANPLACE");
	create_insn	(0XAA64);
	set_name	(0XAA64,	"PLACEBUF");
	create_insn	(0XAA7B);
	create_insn	(0XAAA1);
	set_name	(0XAAA1,	"POINTCOMP");
	set_name	(0XAAAF,	"_ret_label");
	create_insn	(0XAAB0);
	set_name	(0XAAB2,	"GETBUFFRB");
	create_insn	(x=0XAAC4);
	op_hex		(x,	1);
	create_insn	(x=0XAAC8);
	op_hex		(x,	1);
	create_insn	(0XAB09);
	create_insn	(0XAB2C);
	create_insn	(0XAB46);
	create_insn	(0XAB86);
	create_insn	(x=0XAB9D);
	op_hex		(x,	1);
	create_insn	(x=0XABA8);
	op_hex		(x,	1);
	create_insn	(x=0XABE4);
	op_hex		(x,	1);
	create_insn	(0XAC00);
	create_insn	(0XAC2A);
	set_name	(0XAC2A,	"nullsub_12");
	create_insn	(0XAC2B);
	set_name	(0XAC2B,	"FLUSHBUF");
	create_insn	(x=0XAC32);
	op_hex		(x,	1);
	create_insn	(x=0XAC3E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	create_insn	(x=0XAC46);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XAC5B);
	op_hex		(x,	1);
	create_insn	(0XAC7C);
	set_name	(0XAC7C,	"CHECKFLUSH");
	create_insn	(x=0XAC91);
	op_hex		(x,	1);
	create_insn	(x=0XAC99);
	op_hex		(x,	1);
	create_insn	(x=0XACA9);
	op_hex		(x,	1);
	create_insn	(0XACB1);
	set_name	(0XACB1,	"BUFWRITE");
	create_insn	(x=0XACBB);
	op_hex		(x,	1);
	create_insn	(x=0XACE3);
	op_hex		(x,	1);
	create_insn	(x=0XACE8);
	op_hex		(x,	1);
	create_insn	(x=0XAD1D);
	op_hex		(x,	1);
	create_insn	(x=0XAD2A);
	op_hex		(x,	1);
	create_insn	(0XAD57);
	set_name	(0XAD57,	"null_sub");
	create_insn	(x=0XAD58);
	op_hex		(x,	1);
	create_insn	(x=0XAD5F);
	op_hex		(x,	1);
	create_insn	(0XAD64);
	create_insn	(x=0XAD6A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XAD6A,	"DEC_DIRTY_COUNT");
	create_insn	(x=0XAD72);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0XAD78);
	set_name	(0XAD78,	"$WAIT");
	create_insn	(x=0XAD7A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XAD82);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XAD82,	"$EXEC");
	create_insn	(x=0XAD8D);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0XAD91,	"Exec_@f");
	create_insn	(x=0XAD94);
	op_dec		(x,	1);
	set_name	(0XAD9B,	"Exec_Bad_Fun");
	create_insn	(0XADA6);
	create_insn	(0XADAC);
	set_name	(0XADAC,	"Exec_Check_2");
	create_insn	(x=0XADDE);
	op_hex		(x,	1);
	create_insn	(x=0XADF3);
	op_hex		(x,	1);
	create_insn	(x=0XAE09);
	op_hex		(x,	1);
	create_insn	(0XAE13);
	create_insn	(0XAE18);
	create_insn	(x=0XAE22);
	op_hex		(x,	1);
	create_insn	(0XAE65);
	create_insn	(x=0XAE95);
	op_hex		(x,	1);
	create_insn	(0XAEB1);
	create_insn	(x=0XAEBF);
	op_hex		(x,	1);
	create_insn	(0XAED6);
	create_insn	(0XAEDA);
	create_insn	(0XAEEF);
	create_insn	(x=0XAEFD);
	op_hex		(x,	1);
	create_insn	(x=0XAF02);
	op_hex		(x,	1);
	create_insn	(0XAF0C);
	create_insn	(x=0XAF28);
	op_hex		(x,	1);
	create_insn	(x=0XAF2F);
	op_hex		(x,	1);
	create_insn	(x=0XAF4E);
	op_hex		(x,	1);
	create_insn	(0XAF7D);
	create_insn	(x=0XAFA3);
	op_hex		(x,	1);
	create_insn	(0XAFDD);
	create_insn	(x=0XB011);
	op_hex		(x,	1);
	create_insn	(0XB04C);
	create_insn	(0XB082);
	create_insn	(0XB0A1);
	create_insn	(x=0XB0A4);
	op_hex		(x,	1);
	create_insn	(0XB0B6);
	create_insn	(x=0XB0C4);
	op_hex		(x,	1);
	create_insn	(x=0XB0C9);
	op_hex		(x,	1);
	create_insn	(x=0XB0D7);
	op_hex		(x,	1);
	create_insn	(x=0XB0DF);
	op_hex		(x,	1);
	create_insn	(0XB135);
	create_insn	(0XB13C);
	create_insn	(x=0XB146);
	op_hex		(x,	1);
	create_insn	(x=0XB18C);
	op_hex		(x,	1);
	create_insn	(0XB1BE);
	create_insn	(0XB1CC);
	create_insn	(x=0XB21C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XB24F);
	op_hex		(x,	1);
	set_name	(0XB263,	"Exec_BL");
	set_name	(0XB26E,	"Exec_Set_Return");
	create_insn	(x=0XB28B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XB292);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB297);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XB29C);
	op_hex		(x,	1);
	create_insn	(x=0XB2A2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB2B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB2C9);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0XB2C9,	"exec_go");
	create_insn	(x=0XB2CE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB2D5);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XB2E3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	create_insn	(x=0XB2E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XB2F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0XB2F7);
	set_name	(0XB2F7,	"Xfer_To_User");
	create_insn	(x=0XB2F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XB2FE);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0XB312);
	set_name	(0XB312,	"ExecRead");
	create_insn	(0XB321);
	set_name	(0XB321,	"Exec_Dealloc");
	create_insn	(0XB32C);
	set_name	(0XB32C,	"Exec_Alloc");
	create_insn	(0XB33A);
	create_insn	(0XB34B);
	create_insn	(0XB359);
	create_insn	(0XB35C);
	create_insn	(0XB370);
	create_insn	(0XB3AB);
	create_insn	(0XB3BC);
	set_name	(0XB3BC,	"$KEEP_PROCESS");
	create_insn	(x=0XB3BD);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XB3C3);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0XB3D0,	"Keep_Shrink");
	set_name	(0XB3E2,	"Keep_Done");
	create_insn	(0XB3E5);
	set_name	(0XB3E5,	"stay_resident");
	create_insn	(x=0XB3EB);
	op_hex		(x,	1);
	create_insn	(0XB3F4);
	set_name	(0XB3F4,	"$EXIT");
	create_insn	(x=0XB3F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB3FD);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XB405);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XB40B,	"exit_inner");
	create_insn	(x=0XB40E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0XB418);
	set_name	(0XB418,	"$ABORT");
	create_insn	(0XB442);
	set_name	(0XB442,	"RetExePatch");
	create_insn	(x=0XB443);
	op_hex		(x,	1);
	create_insn	(x=0XB44A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0XB46C);
	create_insn	(0XB47C);
	create_insn	(0XB483);
	set_name	(0XB483,	"check_signature");
	set_name	(0XB492,	"check_signature_ok");
	create_insn	(0XB493);
	create_insn	(0XB4B5);
	set_name	(0XB4B5,	"$ALLOC");
	create_insn	(x=0XB4B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB4BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	create_insn	(x=0XB4C2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XB4CD);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB4D1);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XB4D9);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XB4DD);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XB4E1);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XB4E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB4FC);
	op_hex		(x,	1);
	create_insn	(0XB518);
	create_insn	(0XB52B);
	create_insn	(0XB536);
	create_insn	(x=0XB541);
	op_hex		(x,	1);
	create_insn	(0XB54F);
	create_insn	(0XB55D);
	create_insn	(0XB5A2);
	create_insn	(0XB5BA);
	create_insn	(x=0XB5BF);
	op_hex		(x,	1);
	create_insn	(0XB60D);
	set_name	(0XB60D,	"$SETBLOCK");
	create_insn	(0XB61E);
	create_insn	(0XB631);
	set_name	(0XB631,	"$DEALLOC");
	create_insn	(x=0XB634);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	create_insn	(x=0XB63C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XB644);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0XB65E);
	create_insn	(0XB666);
	set_name	(0XB666,	"$ALLOCOPER");
	create_insn	(x=0XB67D);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0XB685);
	create_insn	(x=0XB686);
	op_hex		(x,	1);
	create_insn	(0XB696);
	create_insn	(x=0XB69A);
	op_hex		(x,	1);
	create_insn	(0XB69E);
	create_insn	(0XB6AF);
	create_insn	(x=0XB6BC);
	op_hex		(x,	1);
	create_insn	(0XB6C4);
	create_insn	(x=0XB6D1);
	op_hex		(x,	1);
	create_insn	(0XB6D9);
	create_insn	(0XB6FA);
	create_insn	(0XB711);
	create_word	(0XB71A);
	create_word	(0XB71C);
	create_insn	(0XB735);
	set_name	(0XB735,	"$ServerCall");
	create_insn	(x=0XB742);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	create_insn	(x=0XB74A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XB752);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0XB76D);
	create_insn	(0XB76E);
	create_insn	(x=0XB787);
	op_hex		(x,	1);
	create_insn	(0XB79E);
	create_insn	(0XB7A5);
	create_insn	(0XB7AE);
	create_insn	(0XB7B5);
	create_insn	(0XB7BC);
	create_insn	(0XB7D4);
	create_insn	(0XB815);
	create_insn	(x=0XB824);
	op_hex		(x,	1);
	create_insn	(0XB839);
	set_cmt	(0XB83D,	"Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE\nSTACK: WORD subfunction\nReturn: CF set on error, AX = error code\nSTACK unchanged",	0);
	create_insn	(x=0XB83D);
	op_hex		(x,	0);
	create_insn	(0XB845);
	create_insn	(0XB869);
	set_name	(0XB869,	"pJFNFromHandle");
	create_insn	(0XB882);
	create_insn	(0XB886);
	set_name	(0XB886,	"SFFromHandle");
	create_insn	(0XB89C);
	create_insn	(0XB8A0);
	set_name	(0XB8A0,	"SFFromSFN");
	create_insn	(0XB8BE);
	create_insn	(0XB8CB);
	set_name	(0XB8CB,	"JFNFree");
	create_insn	(0XB8DB);
	create_insn	(0XB8DE);
	set_name	(0XB8DE,	"SFNFree");
	create_insn	(0XB8F7);
	create_insn	(0XB923);
	create_insn	(0XB926);
	set_name	(0XB926,	"$CLOSE");
	create_insn	(x=0XB92D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XB93F);
	op_hex		(x,	1);
	create_insn	(x=0XB941);
	op_hex		(x,	1);
	create_insn	(0XB956);
	set_name	(0XB956,	"CloseError");
	create_insn	(0XB959);
	set_name	(0XB959,	"$COMMIT");
	create_insn	(x=0XB960);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XB964);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XB96D);
	op_hex		(x,	1);
	create_insn	(0XB971);
	set_name	(0XB971,	"CommitError");
	create_insn	(0XB973);
	set_name	(0XB973,	"$ExtHandle");
	create_insn	(x=0XB975);
	op_dec		(x,	1);
	create_insn	(x=0XB97A);
	op_dec		(x,	1);
	create_insn	(x=0XB97D);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB982);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB98E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0XB9AB);
	create_insn	(x=0XB9B8);
	op_hex		(x,	1);
	create_insn	(x=0XB9CB);
	op_hex		(x,	1);
	create_insn	(0XB9D5);
	create_insn	(0XB9D9);
	create_insn	(x=0XBA06);
	op_hex		(x,	1);
	create_insn	(0XBA14);
	create_insn	(0XBA25);
	create_insn	(0XBA2A);
	create_insn	(x=0XBA2E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0XBA2E,	"$READ");
	set_name	(0XBA31,	"ReadDO");
	create_insn	(x=0XBA3E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XBA43);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XBA48);
	op_hex		(x,	1);
	create_insn	(x=0XBA4F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	create_insn	(x=0XBA60);
	op_hex		(x,	1);
	create_insn	(x=0XBA62);
	op_hex		(x,	1);
	create_insn	(x=0XBA64);
	op_hex		(x,	1);
	create_insn	(x=0XBA66);
	op_hex		(x,	1);
	create_insn	(x=0XBA6A);
	op_hex		(x,	1);
	create_insn	(0XBA8A);
	create_insn	(x=0XBA8C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0XBA8C,	"$WRITE");
	create_insn	(0XBA91);
	set_name	(0XBA91,	"$LSEEK");
	create_insn	(x=0XBABB);
	op_hex		(x,	1);
	create_insn	(x=0XBACC);
	op_hex		(x,	1);
	create_insn	(x=0XBAD7);
	op_hex		(x,	1);
	set_cmt	(0XBAE7,	"Multiplex - NETWORK REDIRECTOR - SEEK FROM END OF REMOTE FILE\nCX:DX = offset (in bytes) from end\nES:DI -> SFT, SFT DPB field -> DPB of drive with file\nSS = DOS CS\nReturn: CF set on error\nCF clear if successful, DX:AX = new file position",	0);
	create_insn	(x=0XBAE7);
	op_hex		(x,	0);
	create_insn	(0XBAED);
	create_insn	(0XBAF5);
	set_name	(0XBAF5,	"$FILE_TIMES");
	create_insn	(0XBB1F);
	set_name	(0XBB1F,	"ft_set_time");
	create_insn	(x=0XBB31);
	op_hex		(x,	1);
	create_insn	(x=0XBB36);
	op_hex		(x,	1);
	create_insn	(x=0XBB42);
	op_hex		(x,	1);
	create_insn	(x=0XBB4E);
	op_hex		(x,	1);
	create_insn	(0XBB61);
	create_insn	(0XBB70);
	create_insn	(x=0XBB71);
	op_hex		(x,	1);
	create_insn	(x=0XBB89);
	op_hex		(x,	1);
	create_insn	(x=0XBB92);
	op_hex		(x,	1);
	create_insn	(x=0XBB99);
	op_hex		(x,	1);
	create_insn	(0XBBAE);
	create_insn	(x=0XBBB0);
	op_hex		(x,	1);
	create_insn	(x=0XBBBE);
	op_hex		(x,	1);
	create_insn	(x=0XBBCE);
	op_hex		(x,	1);
	create_insn	(x=0XBBD8);
	op_hex		(x,	1);
	create_insn	(0XBBEB);
	set_name	(0XBBEB,	"$DUP");
	create_insn	(0XBBF5);
	create_insn	(0XBC01);
	create_insn	(0XBC0E);
	set_name	(0XBC0E,	"$DUP2");
	create_insn	(0XBC1C);
	set_name	(0XBC1C,	"CheckOwner");
	create_insn	(x=0XBC22);
	op_hex		(x,	1);
	create_insn	(0XBC30);
	create_insn	(0XBC32);
	create_insn	(0XBC41);
	set_name	(0XBC41,	"$AssignOper");
	create_insn	(x=0XBC58);
	op_hex		(x,	1);
	create_insn	(x=0XBC5E);
	op_hex		(x,	1);
	create_insn	(0XBC64);
	create_insn	(0XBC69);
	set_cmt	(0XBC71,	"Multiplex - NETWORK REDIRECTOR - DO REDIRECTION\nSS = DOS CS\nSTACK: WORD function to execute\nReturn: CF set on error, AX = error code\nSTACK unchanged",	0);
	create_insn	(x=0XBC71);
	op_hex		(x,	0);
	create_insn	(0XBC79);
	create_insn	(0XBC7C);
	create_insn	(0XBC8F);
	create_insn	(0XBC91);
	set_name	(0XBC91,	"InitCDS");
	create_insn	(x=0XBCB5);
	op_hex		(x,	1);
	create_insn	(0XBCDE);
	set_name	(0XBCDE,	"$UserOper");
	create_insn	(0XBCEF);
	create_insn	(0XBD0E);
	create_insn	(0XBD21);
	set_cmt	(0XBD25,	"Multiplex - NETWORK REDIRECTOR - PRINTER SETUP\nSTACK: WORD function\nReturn: CF set on error, AX = error code\nSTACK unchanged",	0);
	create_insn	(x=0XBD25);
	op_hex		(x,	0);
	create_insn	(0XBD2C);
	set_name	(0XBD2C,	"GetVisDrv");
	create_insn	(x=0XBD38);
	op_hex		(x,	1);
	create_insn	(0XBD48);
	set_name	(0XBD48,	"GETTHISDRV");
	create_insn	(x=0XBD4C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XBD57);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XBD62);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_plain_offset	(x,	1,	0X120);
	op_plain_offset	(x,	129,	0X120);
	create_insn	(x=0XBD69);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XBD73);
	op_hex		(x,	1);
	create_insn	(0XBD7F);
	create_insn	(x=0XBD84);
	op_hex		(x,	1);
	create_insn	(x=0XBD8C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0XBD97);
	set_name	(0XBD97,	"GetCDSFromDrv");
	create_insn	(0XBDB9);
	create_insn	(0XBDBB);
	create_insn	(x=0XBDBE);
	op_hex		(x,	1);
	create_insn	(x=0XBDC5);
	op_stkvar	(x,	1);
	create_insn	(x=0XBDF7);
	op_hex		(x,	1);
	create_insn	(x=0XBE07);
	op_stkvar	(x,	1);
	create_insn	(0XBE1D);
	set_name	(0XBE1D,	"TransPath");
	create_insn	(0XBE21);
	set_name	(0XBE21,	"TransPathSet");
	set_name	(0XBE29,	"TransPathNoSet");
	create_insn	(x=0XBE66);
	op_hex		(x,	1);
	create_insn	(0XBE82);
	set_cmt	(0XBE8C,	"Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME\nDS:SI -> ASCIZ filename to canonicalize\nES:DI -> 128-byte buffer for qualified name\nReturn: CF set if not resolved",	0);
	create_insn	(x=0XBE8C);
	op_hex		(x,	0);
	create_insn	(0XBEBC);
	create_insn	(0XBEBF);
	create_insn	(0XBEC9);
	create_insn	(0XBEEE);
	create_insn	(0XBEF1);
	create_insn	(x=0XBF70);
	op_hex		(x,	1);
	create_insn	(x=0XBF80);
	op_hex		(x,	1);
	create_insn	(0XBF96);
	create_insn	(0XBFA3);
	create_insn	(0XBFB9);
	create_insn	(0XBFC4);
	create_insn	(0XBFE0);
	create_insn	(0XBFFB);
	create_insn	(0XBFFD);
	create_insn	(0XC005);
	set_name	(0XC005,	"SkipBack");
	create_insn	(0XC014);
	create_insn	(x=0XC018);
	op_hex		(x,	1);
	create_insn	(0XC042);
	create_insn	(x=0XC055);
	op_hex		(x,	1);
	create_insn	(0XC08C);
	create_insn	(x=0XC09D);
	op_hex		(x,	1);
	create_insn	(x=0XC0A6);
	op_hex		(x,	1);
	create_insn	(x=0XC0C5);
	op_hex		(x,	1);
	create_insn	(0XC0D5);
	create_insn	(x=0XC0DB);
	op_hex		(x,	1);
	create_insn	(x=0XC106);
	op_hex		(x,	1);
	create_insn	(x=0XC109);
	op_hex		(x,	1);
	create_insn	(0XC10E);
	create_insn	(0XC12C);
	set_name	(0XC12C,	"DrvFromTxt_ret");
	create_insn	(0XC12D);
	set_name	(0XC12D,	"$NameTrans");
	create_insn	(0XC147);
	set_cmt	(0XC152,	"0",	0);
	create_insn	(0XC152);
	set_name	(0XC152,	"DriveFromText");
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_2(void) {
        auto x;
#define id x

	set_cmt	(0XC160,	"to lowercase",	0);
	create_insn	(x=0XC160);
	op_hex		(x,	1);
	create_insn	(x=0XC162);
	op_hex		(x,	1);
	set_cmt	(0XC164,	"al = drv number",	0);
	create_insn	(0XC169);
	create_insn	(0XC171);
	create_insn	(0XC18A);
	create_insn	(0XC194);
	set_name	(0XC194,	"$OPEN");
	set_name	(0XC196,	"$Open2");
	create_insn	(x=0XC19B);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0XC19F,	"AccessFile");
	create_insn	(x=0XC1AA);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XC1AF);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XC1B4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XC1BC,	"OpenFailJ");
	create_insn	(0XC1F2);
	create_insn	(0XC1F6);
	create_insn	(x=0XC205);
	op_hex		(x,	1);
	create_insn	(x=0XC209);
	op_hex		(x,	1);
	create_insn	(0XC246);
	create_insn	(0XC24D);
	create_insn	(0XC26C);
	create_insn	(0XC26F);
	set_name	(0XC26F,	"$CREAT");
	create_insn	(x=0XC270);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC273);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0XC27C);
	set_name	(0XC27C,	"$CHMOD");
	create_insn	(0XC297);
	create_insn	(x=0XC2A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0XC2C9);
	create_insn	(0XC2D7);
	create_insn	(0XC2E0);
	set_name	(0XC2E0,	"NotFound");
	create_insn	(0XC2E4);
	set_name	(0XC2E4,	"$UNLINK");
	create_insn	(x=0XC2E7);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC2F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XC302,	"UnlinkE");
	set_name	(0XC304,	"UnLinkOK");
	create_insn	(x=0XC306);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XC306,	"$RENAME");
	set_name	(0XC30D,	"rename1");
	create_insn	(x=0XC314);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC31A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XC31F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XC327,	"epjc2");
	create_insn	(x=0XC329);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XC332);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC33D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XC344);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC34A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0XC351,	"rnloop");
	create_insn	(0XC35F);
	set_name	(0XC35F,	"rnerr");
	create_insn	(x=0XC366);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XC366,	"dorn");
	create_insn	(x=0XC36B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0XC37E);
	set_name	(0XC37E,	"$CreateNewFile");
	create_insn	(x=0XC37F);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0XC385);
	set_name	(0XC385,	"BinToAscii");
	set_cmt	(0XC38A,	"'AA'",	0);
	create_insn	(0XC396);
	set_name	(0XC396,	"$CreateTempFile");
	create_insn	(x=0XC399);
	op_dec		(x,	1);
	create_insn	(x=0XC39C);
	op_hex		(x,	1);
	create_insn	(0XC3A7);
	set_name	(0XC3A7,	"OKatts");
	create_insn	(x=0XC41A);
	op_hex		(x,	1);
	set_name	(0XC422,	"SETTMPERR");
	create_insn	(0XC42B);
	set_name	(0XC42B,	"CreateFail");
	create_insn	(0XC42E);
	set_name	(0XC42E,	"SetAttrib");
	create_insn	(x=0XC43E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XC43E,	"$Extended_Open");
	create_insn	(x=0XC443);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XC44A);
	op_hex		(x,	1);
	create_insn	(x=0XC456);
	op_hex		(x,	1);
	create_insn	(x=0XC45E);
	op_hex		(x,	1);
	create_insn	(x=0XC466);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XC46B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XC470);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XC475);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XC47A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XC47F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XC484);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XC489);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0XC494);
	set_name	(0XC494,	"ext_inval2");
	create_insn	(x=0XC498);
	op_hex		(x,	1);
	set_name	(0XC498,	"goopen2");
	create_insn	(x=0XC49D);
	op_hex		(x,	1);
	create_insn	(x=0XC4A3);
	op_hex		(x,	1);
	create_insn	(0XC4CE);
	create_insn	(x=0XC4D1);
	op_hex		(x,	1);
	create_insn	(x=0XC4ED);
	op_hex		(x,	1);
	create_insn	(0XC4FE);
	create_insn	(0XC500);
	create_insn	(x=0XC51C);
	op_hex		(x,	1);
	create_insn	(0XC528);
	create_insn	(0XC542);
	create_insn	(0XC562);
	set_name	(0XC562,	"$LockOper");
	create_insn	(0XC572);
	create_insn	(0XC579);
	create_insn	(x=0XC591);
	op_hex		(x,	1);
	create_insn	(x=0XC597);
	op_hex		(x,	1);
	set_cmt	(0XC5A1,	"Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE\nBX = file handle, CX:DX = starting offset, SI = high word of size\nSTACK: WORD low word of size, ES:DI -> SFT\nSFT DPB field -> DPB of drive containing file, SS = DOS CS\nReturn: CF set error",	0);
	create_insn	(x=0XC5A1);
	op_hex		(x,	0);
	create_insn	(0XC5A5);
	create_insn	(0XC5AD);
	create_insn	(x=0XC5B3);
	op_hex		(x,	1);
	set_cmt	(0XC5BD,	"Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE\nBX = file handle, CX:DX = starting offset, SI = high word of size\nSTACK: WORD low word of size, ES:DI -> SFT\nSFT DPB field -> DPB of drive containing file, SS = DOS CS\nReturn: CF set error",	0);
	create_insn	(x=0XC5BD);
	op_hex		(x,	0);
	create_insn	(0XC5C1);
	create_insn	(0XC5C7);
	create_insn	(0XC5DD);
	create_insn	(0XC608);
	create_insn	(0XC61D);
	create_insn	(0XC62A);
	create_insn	(0XC62F);
	set_name	(0XC62F,	"SHARE_VIOLATION");
	create_insn	(0XC658);
	create_insn	(x=0XC670);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XC670,	"ShareEnd");
	create_insn	(0XC675);
	set_name	(0XC675,	"ShareEnter");
	create_insn	(0XC697);
	create_insn	(x=0XC699);
	op_hex		(x,	1);
	create_insn	(x=0XC6B8);
	op_hex		(x,	1);
	create_insn	(x=0XC6E2);
	op_hex		(x,	1);
	create_insn	(x=0XC6E8);
	op_hex		(x,	1);
	create_byte	(0XC751);
	make_array	(0XC751,	0X3);
	create_byte	(0XC754);
	make_array	(0XC754,	0X7);
	create_byte	(0XC75B);
	make_array	(0XC75B,	0X3);
	create_byte	(0XC75E);
	make_array	(0XC75E,	0X9);
	create_byte	(0XC767);
	make_array	(0XC767,	0X9);
	create_byte	(0XC770);
	make_array	(0XC770,	0X8);
	create_byte	(0XC778);
	make_array	(0XC778,	0X3);
	create_byte	(0XC77B);
	make_array	(0XC77B,	0X4);
	create_byte	(0XC77F);
	make_array	(0XC77F,	0X5);
	create_word	(0XC784);
	create_word	(0XC786);
	create_word	(0XC788);
	create_word	(0XC78A);
	create_word	(0XC78C);
	create_word	(0XC78E);
	create_word	(0XC790);
	create_word	(0XC792);
	create_word	(0XC794);
	create_word	(0XC796);
	create_word	(0XC798);
	create_word	(0XC79A);
	create_word	(0XC79C);
	create_word	(0XC79E);
	create_word	(0XC7A0);
	create_word	(0XC7A2);
	create_word	(0XC7A4);
	create_word	(0XC7A6);
	create_word	(0XC7A8);
	create_word	(0XC7AA);
	create_insn	(x=0XC7AC);
	op_dec		(x,	1);
	set_name	(0XC7AC,	"Rational386Patch");
	create_insn	(0XC7D8);
	set_name	(0XC7D8,	"rp3Maybe");
	create_insn	(x=0XC7DC);
	op_hex		(x,	1);
	create_insn	(0XC813);
	create_insn	(x=0XC911);
	op_hex		(x,	1);
	create_insn	(0XC919);
	set_name	(0XC919,	"FindBadCode");
	create_insn	(0XC940);
	set_name	(0XC940,	"fbc_error");
	create_insn	(0XC942);
	set_name	(0XC942,	"GenPatch");
	create_insn	(0XC956);
	set_name	(0XC956,	"CopyPatch");
	create_insn	(x=0XC962);
	op_hex		(x,	1);
	set_name	(0XC962,	"GenJump");
	create_insn	(x=0XC96E);
	op_hex		(x,	1);
	set_name	(0XC96E,	"ScanCodeSeq");
	set_name	(0XC971,	"ScanCodeSeq_di");
	create_insn	(0XC986);
	create_insn	(0XC9A5);
	create_insn	(0XC9B2);
	set_name	(0XC9B2,	"exepatch_start");
	create_insn	(x=0XC9DC);
	op_hex		(x,	1);
	create_insn	(x=0XCA00);
	op_hex		(x,	1);
	create_insn	(0XCA0B);
	create_insn	(x=0XCA12);
	op_hex		(x,	1);
	create_insn	(x=0XCA48);
	op_hex		(x,	1);
	create_insn	(x=0XCA59);
	op_hex		(x,	1);
	create_insn	(x=0XCA8A);
	op_hex		(x,	1);
	create_insn	(x=0XCA9C);
	op_hex		(x,	1);
	create_insn	(x=0XCACE);
	op_hex		(x,	1);
	create_insn	(x=0XCADF);
	op_hex		(x,	1);
	set_name	(0XCAE2,	"scan_com");
	create_insn	(x=0XCAEC);
	op_hex		(x,	1);
	create_insn	(0XCAF7);
	create_insn	(x=0XCB00);
	op_hex		(x,	1);
	create_insn	(0XCB0B);
	create_insn	(0XCB16);
	create_insn	(0XCB24);
	create_insn	(0XCB37);
	create_insn	(0XCB62);
	create_insn	(0XCBA8);
	create_insn	(x=0XCBE2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XCBE5);
	op_dec		(x,	1);
	set_name	(0XCBF5,	"ccs_done");
	create_insn	(0XCBF6);
	set_name	(0XCBF6,	"chk_patchsum");
	create_insn	(0XCC14);
	create_byte	(0XCC16);
	make_array	(0XCC16,	0X8);
	set_name	(0XCC16,	"RScanPattern1");
	create_byte	(0XCC1E);
	make_array	(0XCC1E,	0X2);
	create_byte	(0XCC20);
	make_array	(0XCC20,	0X8);
	create_byte	(0XCC28);
	make_array	(0XCC28,	0X7);
	create_insn	(0XCC2F);
	set_name	(0XCC2F,	"RationalPatch");
	create_byte	(0XCC90);
	make_array	(0XCC90,	0X4);
	create_byte	(0XCC94);
	make_array	(0XCC94,	0X4);
	create_byte	(0XCC98);
	make_array	(0XCC98,	0X6);
	create_byte	(0XCC9E);
	make_array	(0XCC9E,	0X4);
	create_byte	(0XCCA2);
	make_array	(0XCCA2,	0X3);
	create_byte	(0XCCA5);
	make_array	(0XCCA5,	0X3);
	create_insn	(0XCCA8);
	set_name	(0XCCA8,	"IsCopyProt");
	set_name	(0XCCDD,	"CP_done");
	create_insn	(0XCCDE);
	set_name	(0XCCDE,	"initiret");
	create_word	(0XCCDF);
	set_name	(0XCCDF,	"InitBioDataSeg");
	create_insn	(0XCCE1);
	set_name	(0XCCE1,	"ParaRound");
	create_insn	(x=0XCCE4);
	op_hex		(x,	1);
	create_insn	(x=0XCCE6);
	op_hex		(x,	1);
	create_insn	(x=0XCCE8);
	op_hex		(x,	1);
	create_insn	(x=0XCCEA);
	op_hex		(x,	1);
	create_insn	(0XCCED);
	set_name	(0XCCED,	"WhatCPUType");
	create_insn	(x=0XCCF7);
	op_hex		(x,	1);
	create_insn	(x=0XCD06);
	op_hex		(x,	1);
	create_insn	(0XCD12);
	set_name	(0XCD12,	"DOSINIT");
	set_cmt	(0XCD14,	"top of memory (memory size in paragraphs)",	0);
	set_cmt	(0XCD15,	"0",	0);
	set_cmt	(0XCD16,	"IBMDOS.SYS loading segment",	0);
	set_cmt	(0XCD17,	"0",	0);
	set_cmt	(0XCD18,	"CURRENT_DOS_LOCATION (segment)",	0);
	set_cmt	(0XCD1A,	"MEMSTRT ; get offset of end of init code",	0);
	set_cmt	(0XCD1D,	"round up",	0);
	create_insn	(x=0XCD20);
	op_hex		(x,	1);
	set_cmt	(0XCD23,	"DOSDATA segment offset in IBMDOS.SYS",	0);
	set_cmt	(0XCD26,	"DOSCODE segment",	0);
	set_cmt	(0XCD27,	"BIOSDATA segment (always 0070h)",	0);
	set_cmt	(0XCD2C,	"DOSDATA segment ptr",	0);
	set_cmt	(0XCD31,	"offset 0",	0);
	set_cmt	(0XCD33,	"DOSDATA size (4934 bytes)",	0);
	set_cmt	(0XCD40,	"CURRENT_DOS_LOCATION (offset = 0)",	0);
	create_insn	(x=0XCD40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XCD44,	"CURRENT_DOS_LOCATION (segment)",	0);
	create_insn	(x=0XCD44);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XCD5C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XCD60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XCD64);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XCD6A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XCD6D);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XCD70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XCD73);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XCD76);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XCD7E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XCD83);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XCD86);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XCD86,	"di_set_patch");
	create_insn	(x=0XCD8B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XCD8E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XCD92);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XCD96);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XCD9E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0XCDA1,	"Instance_init_loop");
	create_insn	(x=0XCDAB);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0XCDAE,	"OldInstance_init_loop");
	create_insn	(x=0XCDC0);
	create_insn	(x=0XCDC5);
	create_insn	(x=0XCDCF);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XCDD5,	"SF_ENTRY.sf_ref_count",	0);
	set_cmt	(0XCDD8,	".sf_mode",	0);
	set_cmt	(0XCDDB,	".sf_attr",	0);
	set_cmt	(0XCDDE,	".sf_flags",	0);
	set_cmt	(0XCDE1,	".sf_devptr",	0);
	set_cmt	(0XCDE4,	"SFT0_SFTable + 9 ; .sf_devptr_hw",	0);
	set_cmt	(0XCDE5,	"0",	0);
	create_insn	(x=0XCDE7);
	op_dec		(x,	1);
	set_cmt	(0XCDEA,	"SFT0_SFTable + 43 ; .sf_position",	0);
	set_cmt	(0XCDEB,	".sf_position_hw",	0);
	set_cmt	(0XCDEC,	"0FFDEh",	0);
	create_insn	(x=0XCDEC);
	toggle_sign		(x,	1);
	op_dec		(x,	1);
	set_cmt	(0XCDEF,	"SFT0_SFTable + 13 ; .sf_firclus",	0);
	set_cmt	(0XCDF0,	".sf_firclus_hw",	0);
	set_cmt	(0XCDF1,	"-1",	0);
	set_cmt	(0XCDF2,	"SFT0_SFTable + 17 ; .sf_time",	0);
	set_cmt	(0XCDF3,	".sf_date",	0);
	set_cmt	(0XCDF4,	"0",	0);
	set_cmt	(0XCDF5,	"SFT0_SFTable + 21 ; .sf_size",	0);
	set_cmt	(0XCDF6,	".sf_size_hw",	0);
	set_cmt	(0XCDF7,	"SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos\nSFT0_SFTable + 32",	0);
	set_cmt	(0XCDFA,	"SYSDEV.NAME",	0);
	create_insn	(x=0XCDFA);
	op_dec		(x,	1);
	set_cmt	(0XCE06,	"SFT0_SFTable + 40",	0);
	set_cmt	(0XCE09,	"ISCIN|ISCOUT",	0);
	create_insn	(x=0XCE09);
	op_hex		(x,	1);
	create_insn	(x=0XCE0D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XCE12);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XCE17,	"CHAR_INIT_LOOP");
	create_insn	(x=0XCE1C);
	op_hex		(x,	1);
	create_insn	(x=0XCE22);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XCE27);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XCE2C,	"MEMSTRT ; ES:BP points to DPB",	0);
	create_insn	(x=0XCE2F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XCE34);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XCE39,	"PERDRV");
	create_insn	(0XCE43);
	set_name	(0XCE43,	"PERDRV2");
	set_cmt	(0XCE46,	"[SI+SYSDEV.ATT],DEVTYP",	0);
	create_insn	(x=0XCE46);
	op_hex		(x,	1);
	create_insn	(x=0XCE4D);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XCE54,	"[si+SYSDEV.NAME]",	0);
	create_insn	(x=0XCE54);
	op_dec		(x,	0);
	create_insn	(x=0XCE57);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XCE5E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XCE65);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XCE6A,	"DS:SI Points to BPB",	0);
	set_name	(0XCE6A,	"PERUNIT");
	set_cmt	(0XCE6E,	"DPB.DRIVE",	0);
	set_cmt	(0XCE72,	"DPB.UNIT",	0);
	set_cmt	(0XCE79,	"'RA'",	0);
	set_cmt	(0XCE7C,	"0",	0);
	create_insn	(x=0XCE7E);
	op_dec		(x,	0);
	set_cmt	(0XCE82,	"BPB_FATSz16",	0);
	create_insn	(x=0XCE82);
	op_dec		(x,	0);
	set_cmt	(0XCE85,	"FAT (FAT12 or FAT16) -old DPB-",	0);
	set_cmt	(0XCE87,	"FAT32 -new- DPB",	0);
	create_insn	(x=0XCE87);
	op_dec		(x,	0);
	create_insn	(x=0XCE8B);
	op_dec		(x,	0);
	create_insn	(x=0XCE90);
	op_dec		(x,	0);
	create_insn	(x=0XCE94);
	op_dec		(x,	0);
	set_cmt	(0XCE98,	"'XE'",	0);
	set_name	(0XCE9B,	"PERUNIT2");
	create_insn	(x=0XCEA2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XCEA9);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XCEAD,	"NOTMAX");
	set_cmt	(0XCEAF,	"next DPB (PCDOS 7.1 DPB size = 61)",	0);
	create_insn	(x=0XCEAF);
	op_dec		(x,	1);
	set_cmt	(0XCEB2,	"DPB.NEXT_DPB offset",	0);
	create_insn	(x=0XCEB2);
	op_dec		(x,	0);
	set_cmt	(0XCEB6,	"DPB.NEXT_DPB segment",	0);
	create_insn	(x=0XCEB6);
	op_dec		(x,	0);
	set_cmt	(0XCEBA,	"DPB.FIRST_ACCESS = -1",	0);
	create_insn	(x=0XCEBA);
	op_dec		(x,	0);
	set_cmt	(0XCEC6,	"DPB.DRIVER_ADDR offset",	0);
	create_insn	(x=0XCEC6);
	op_dec		(x,	0);
	set_cmt	(0XCECA,	"DPB.DRIVER_ADDR segment",	0);
	create_insn	(x=0XCECA);
	op_dec		(x,	0);
	set_cmt	(0XCED6,	"DPBSIZ",	0);
	create_insn	(x=0XCED6);
	op_dec		(x,	1);
	set_cmt	(0XCEE0,	"sub bp,DPBSIZ ; back up to last dpb",	0);
	create_insn	(x=0XCEE0);
	op_dec		(x,	1);
	set_name	(0XCEE0,	"CONTINIT");
	set_cmt	(0XCEE6,	"[bp+DPB.NEXT_DPB],-1",	0);
	create_insn	(x=0XCEE6);
	op_dec		(x,	0);
	create_insn	(x=0XCEE9);
	op_dec		(x,	0);
	create_insn	(x=0XCEEC);
	op_dec		(x,	1);
	create_insn	(x=0XCEFD);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XCF01,	"[DSKCHRET+3]",	0);
	create_insn	(x=0XCF01);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XCF06);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XCF0B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XCF17);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XCF20,	"0",	0);
	set_cmt	(0XCF22,	"INT 24h vector\naddr_int_fatal_abort",	0);
	create_insn	(x=0XCF25);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XCF29,	"segment",	0);
	set_cmt	(0XCF2C,	"INTBASE+2",	0);
	create_insn	(x=0XCF2F);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XCF35,	"INTBASE",	0);
	create_insn	(x=0XCF38);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0XCF3E,	"iset1");
	set_name	(0XCF49,	"iset2");
	create_insn	(x=0XCF51);
	op_dec		(x,	1);
	set_name	(0XCF54,	"iset3");
	set_cmt	(0XCF59,	"mov word [02Fh*4],INT2F",	0);
	create_insn	(x=0XCF59);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XCF5F);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XCF63);
	set_cmt	(0XCF66,	"mov byte [ENTRYPOINT],mi_long_jmp",	0);
	create_insn	(x=0XCF66);
	set_cmt	(0XCF6B,	"mov word [ENTRYPOINT+1],CALL_ENTRY",	0);
	create_insn	(x=0XCF6B);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XCF71,	"mov word [addr_int_abort],QUIT",	0);
	create_insn	(x=0XCF71);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XCF77,	"mov word [addr_int_command],COMMAND",	0);
	create_insn	(x=0XCF77);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XCF7D,	"mov word [addr_int_terminate],100h",	0);
	create_insn	(x=0XCF7D);
	set_cmt	(0XCF83,	"mov word [addr_int_terminate+2],dx",	0);
	create_insn	(x=0XCF83);
	set_cmt	(0XCF87,	"mov word [addr_int_disk_read],ABSDRD",	0);
	create_insn	(x=0XCF87);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XCF8D,	"mov word [addr_int_disk_write],ABSDWRT",	0);
	create_insn	(x=0XCF8D);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XCF93,	"mov word [addr_int_keep_process],STAY_RESIDENT",	0);
	create_insn	(x=0XCF93);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XCF9F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XCFA9);
	op_dec		(x,	1);
	create_insn	(x=0XCFAE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XCFB6,	"PDB.JFN_TABLE",	0);
	create_insn	(x=0XCFB6);
	op_dec		(x,	1);
	set_cmt	(0XCFBF,	"FILPERPROC-3",	0);
	create_insn	(x=0XCFBF);
	op_dec		(x,	1);
	create_insn	(x=0XCFC6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XCFCA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XCFCD,	"[es:si+SYSI_EXT.Country_Tab+2]",	0);
	set_cmt	(0XCFD1,	"[es:si+SYSI_EXT.SysInitVars+2]",	0);
	create_insn	(x=0XCFD5);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XCFDA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XCFDD);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XCFE3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XCFE7);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XCFEE,	"[ARENA.SIGNATURE],arena_signature_end",	0);
	set_cmt	(0XCFF3,	"[ARENA.OWNER],arena_owner_system",	0);
	create_insn	(x=0XCFF9);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XD003,	"SFTABL+SFT.SFTable",	0);
	create_insn	(x=0XD003);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XD00A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XD010);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XD013);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XD016,	"sub cx, 3F10h\ncx = (doscode - exepatch) - dosinit",	0);
	create_insn	(x=0XD016);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XD01A,	"SYSBUF",	0);
	create_insn	(x=0XD01A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XD01D,	"sub ax, 3F10h\nax = size of doscode - dosinit",	0);
	create_insn	(x=0XD01D);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XD020);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XD025);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XD02B,	"19h",	0);
	create_insn	(x=0XD02B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_dec		(x,	1);
	set_name	(0XD02B,	"CHARINIT");
	create_insn	(x=0XD031);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XD037);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XD03D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XD047,	"offset DEVCALL",	0);
	create_insn	(x=0XD047);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0XD053);
	set_name	(0XD053,	"check_XMM");
	set_cmt	(0XD057,	"- Multiplex - XMS - INSTALLATION CHECK\nReturn: AL = 80h XMS driver installed\nAL <> 80h no driver",	0);
	create_insn	(x=0XD057);
	op_hex		(x,	0);
	set_cmt	(0XD064,	"- Multiplex - XMS - GET DRIVER ADDRESS\nReturn: ES:BX -> driver entry point",	0);
	create_insn	(x=0XD064);
	op_hex		(x,	0);
	create_insn	(x=0XD06B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XD06F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XD073,	"cXMMexit");
	create_insn	(0XD07A);
	create_byte	(0XD07D);
	create_insn	(0XD07E);
	set_name	(0XD07E,	"_seg_reinit");
	create_insn	(0XD0D6);
	create_insn	(0XD0E3);
	set_name	(0XD0E3,	"patch_vec_segments");
	create_insn	(0XD121);
	set_name	(0XD121,	"patch_misc_segments");
	create_insn	(x=0XD157);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XD15A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XD161);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0XD171);
	set_name	(0XD171,	"patch_offset");
	create_insn	(x=0XD176);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XD180);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XD1A8);
	op_dec		(x,	1);
	create_insn	(x=0XD1B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XD1B7);
	op_hex		(x,	1);
	create_insn	(x=0XD1BD);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XD1C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XD1CB);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XD1D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XD1D9);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XD1E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_word	(x=0XD1E9);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XD1E9,	"patch_table");
	create_word	(x=0XD1EB);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0XD1ED);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0XD1EF);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0XD1F1);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0XD1F3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0XD1F5);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0XD1F7);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0XD1F9);
	set_name	(0XD1F9,	"patch_in_nops");
	create_insn	(x=0XD1FB);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
}

static Functions_0(void) {

	add_func    (0X106F,0X107B);
	set_func_flags(0X106F,0x4400);
	set_frame_size(0X106F, 0X2, 0, 0);
	add_func    (0X1085,0X10FC);
	set_func_flags(0X1085,0x4400);
	set_frame_size(0X1085, 0, 0, 0);
	add_func    (0X431F,0X4336);
	set_func_flags(0X431F,0x400);
	set_frame_size(0X431F, 0, 0, 0);
	add_func    (0X4336,0X4355);
	set_func_flags(0X4336,0x4400);
	set_frame_size(0X4336, 0, 0, 0);
	add_func    (0X4355,0X435F);
	set_func_flags(0X4355,0x4400);
	set_frame_size(0X4355, 0, 0, 0);
	add_func    (0X436B,0X43C4);
	set_func_flags(0X436B,0x400);
	set_frame_size(0X436B, 0, 0, 0);
	set_name(0X437E, "AbsSetup1", SN_LOCAL);
	set_name(0X43C3, "AbsSetup_retn", SN_LOCAL);
	add_func    (0X447C,0X44C7);
	set_func_flags(0X447C,0x4402);
	set_frame_size(0X447C, 0, 0, 0);
	set_name(0X43CA, "absdrd_1", SN_LOCAL);
	set_name(0X43DE, "absdrd_2", SN_LOCAL);
	set_name(0X43E0, "absdrd_3", SN_LOCAL);
	set_name(0X43F2, "absdrd_4", SN_LOCAL);
	set_name(0X4400, "absdrd_5", SN_LOCAL);
	set_name(0X4427, "TLEAVE", SN_LOCAL);
	set_name(0X446F, "ILEAVE_EXTD", SN_LOCAL);
	set_name(0X4497, "absdwrt_1", SN_LOCAL);
	set_name(0X44A0, "absdrwt_2", SN_LOCAL);
	set_name(0X44A5, "absdrwt_3", SN_LOCAL);
	add_func    (0X44C7,0X4505);
	set_func_flags(0X44C7,0x4400);
	set_frame_size(0X44C7, 0, 0, 0);
	set_name(0X44E2, "SKIPGET", SN_LOCAL);
	set_name(0X44E6, "GETBP_@f", SN_LOCAL);
	set_name(0X44F1, "GETBP_err", SN_LOCAL);
	set_name(0X44F9, "GETBP_CDS", SN_LOCAL);
	add_func    (0X4505,0X450E);
	set_func_flags(0X4505,0x4400);
	set_frame_size(0X4505, 0, 0, 0);
	add_func    (0X452D,0X4539);
	set_func_flags(0X452D,0x4400);
	set_frame_size(0X452D, 0, 0, 0);
	add_func    (0X4539,0X4551);
	set_func_flags(0X4539,0x4400);
	set_frame_size(0X4539, 0X2, 0, 0);
	set_name(0X454C, "EXTENDED_NORMAL", SN_LOCAL);
	add_func    (0X4551,0X4588);
	set_func_flags(0X4551,0x4400);
	set_frame_size(0X4551, 0, 0, 0);
	set_name(0X455D, "TABLK1", SN_LOCAL);
	set_name(0X456B, "GOT_VALS", SN_LOCAL);
	set_name(0X4575, "NO_SET_ACT", SN_LOCAL);
	set_name(0X457C, "NO_SET_CLS", SN_LOCAL);
	set_name(0X4584, "NO_SET_LOC", SN_LOCAL);
	add_func    (0X4588,0X45C3);
	set_func_flags(0X4588,0x4000);
	set_frame_size(0X4588, 0, 0, 0);
	set_name(0X459A, "TABLK2", SN_LOCAL);
	set_name(0X45AC, "NOT_IN_TABLE", SN_LOCAL);
	set_name(0X45B0, "GOT_CALL", SN_LOCAL);
	set_name(0X45B4, "CHECK_CODE", SN_LOCAL);
	set_name(0X45BC, "NO_MAP", SN_LOCAL);
	add_func    (0X45C3,0X45D4);
	set_func_flags(0X45C3,0x4400);
	set_frame_size(0X45C3, 0, 0, 0);
	add_func    (0X45D4,0X45D8);
	set_func_flags(0X45D4,0x4402);
	set_frame_size(0X45D4, 0, 0, 0);
	add_func    (0X45D8,0X45DA);
	set_func_flags(0X45D8,0x4402);
	set_frame_size(0X45D8, 0, 0, 0);
	add_func    (0X47B8,0X47C5);
	set_func_flags(0X47B8,0x4400);
	set_frame_size(0X47B8, 0, 0, 0);
	add_func    (0X4863,0X48A3);
	set_func_flags(0X4863,0x4400);
	set_frame_size(0X4863, 0, 0, 0);
	set_name(0X4885, "letold", SN_LOCAL);
	set_name(0X4889, "rw32_conv_err", SN_LOCAL);
	set_name(0X488B, "new32format", SN_LOCAL);
	set_name(0X48A1, "old_style", SN_LOCAL);
	add_func    (0X48A3,0X48C3);
	set_func_flags(0X48A3,0x4400);
	set_frame_size(0X48A3, 0X4, 0, 0);
	set_name(0X48BF, "nofast", SN_LOCAL);
	add_func    (0X4980,0X499D);
	set_func_flags(0X4980,0x4400);
	set_frame_size(0X4980, 0, 0, 0);
	add_func    (0X499D,0X49BD);
	set_func_flags(0X499D,0x4400);
	set_frame_size(0X499D, 0, 0, 0);
	add_func    (0X49BD,0X49CE);
	set_func_flags(0X49BD,0x4400);
	set_frame_size(0X49BD, 0, 0, 0);
	add_func    (0X49CE,0X4A13);
	set_func_flags(0X49CE,0x4400);
	set_frame_size(0X49CE, 0, 0, 0);
	add_func    (0X4A13,0X4A3D);
	set_func_flags(0X4A13,0x4400);
	set_frame_size(0X4A13, 0, 0, 0);
	add_func    (0X4A3D,0X4AB0);
	set_func_flags(0X4A3D,0x4400);
	set_frame_size(0X4A3D, 0X4, 0, 0);
	set_name(0X4A95, "SK", SN_LOCAL);
	add_func    (0X4AB0,0X4ABC);
	set_func_flags(0X4AB0,0x400);
	set_name(0X4AB2, "DSLIDE1", SN_LOCAL);
	add_func    (0X4ABC,0X4AD2);
	set_func_flags(0X4ABC,0x4400);
	set_frame_size(0X4ABC, 0, 0, 0);
	set_name(0X4ACE, "SAVFEB", SN_LOCAL);
	add_func    (0X4AD2,0X4B55);
	set_func_flags(0X4AD2,0x400);
	set_frame_size(0X4AD2, 0, 0, 0);
	add_func    (0X4B55,0X4B5F);
	set_func_flags(0X4B55,0x4400);
	set_frame_size(0X4B55, 0, 0, 0);
	set_name(0X4B59, "DSUM1", SN_LOCAL);
	set_name(0X4B5E, "DSUM9", SN_LOCAL);
	add_func    (0X4B5F,0X4B81);
	set_func_flags(0X4B5F,0x4400);
	set_frame_size(0X4B5F, 0, 0, 0);
	add_func    (0X4B8D,0X4BB8);
	set_func_flags(0X4B8D,0x400);
	add_func    (0X4BB8,0X4BE2);
	set_func_flags(0X4BB8,0x4400);
	set_frame_size(0X4BB8, 0, 0, 0);
	set_name(0X4BD6, "stcdpg", SN_LOCAL);
	set_name(0X4BDC, "setcarry", SN_LOCAL);
	set_name(0X4BDE, "interr", SN_LOCAL);
	add_func    (0X4C4A,0X4D73);
	set_func_flags(0X4C4A,0x400);
	set_name(0X4D45, "setsize2", SN_LOCAL);
	set_name(0X4D62, "NLSNXT", SN_LOCAL);
	add_func    (0X4D73,0X4DC4);
	set_func_flags(0X4D73,0x400);
	add_func    (0X4E2A,0X4E39);
	set_func_flags(0X4E2A,0x400);
	add_func    (0X4E5D,0X4E68);
	set_func_flags(0X4E5D,0x4400);
	set_frame_size(0X4E5D, 0, 0, 0);
	add_func    (0X51CA,0X51D3);
	set_func_flags(0X51CA,0x4400);
	set_frame_size(0X51CA, 0, 0, 0);
	add_func    (0X51D3,0X51D8);
	set_func_flags(0X51D3,0x4400);
	set_frame_size(0X51D3, 0, 0, 0);
	add_func    (0X51D8,0X51DD);
	set_func_flags(0X51D8,0x4400);
	set_frame_size(0X51D8, 0, 0, 0);
	add_func    (0X51DD,0X51E2);
	set_func_flags(0X51DD,0x4400);
	set_frame_size(0X51DD, 0, 0, 0);
	add_func    (0X5369,0X554F);
	set_func_flags(0X5369,0x4400);
	set_frame_size(0X5369, 0, 0, 0);
	set_name(0X537B, "not_fat32_extension", SN_LOCAL);
	set_name(0X537D, "chk_fat32_conditions", SN_LOCAL);
	set_name(0X5390, "nofat", SN_LOCAL);
	set_name(0X53A3, "yesfat", SN_LOCAL);
	set_name(0X53B1, "LOG2LOOP", SN_LOCAL);
	set_name(0X53BB, "SAVLOG", SN_LOCAL);
	set_name(0X53F2, "savlog1", SN_LOCAL);
	set_name(0X5411, "savlog2", SN_LOCAL);
	set_name(0X542E, "savlog3", SN_LOCAL);
	set_name(0X5449, "rott", SN_LOCAL);
	set_name(0X5450, "norot", SN_LOCAL);
	set_name(0X5454, "normal_dpb", SN_LOCAL);
	set_name(0X545E, "setend", SN_LOCAL);
	set_name(0X547A, "setend1", SN_LOCAL);
	set_name(0X5492, "setend2", SN_LOCAL);
	set_name(0X549B, "setend3", SN_LOCAL);
	set_name(0X54A7, "setend4", SN_LOCAL);
	set_name(0X54AB, "setend5", SN_LOCAL);
	set_name(0X54B4, "setend_fat12", SN_LOCAL);
	set_name(0X54C2, "setend_fat16", SN_LOCAL);
	set_name(0X54D0, "setend_faterr", SN_LOCAL);
	set_name(0X54D4, "setend_fat32", SN_LOCAL);
	set_name(0X54E9, "setend6", SN_LOCAL);
	set_name(0X54ED, "setend7", SN_LOCAL);
	set_name(0X5512, "setend8", SN_LOCAL);
	set_name(0X5515, "setend9", SN_LOCAL);
	set_name(0X551F, "setend10", SN_LOCAL);
	set_name(0X5522, "setend11", SN_LOCAL);
	set_name(0X5536, "setend12", SN_LOCAL);
	set_name(0X5543, "setend_fat", SN_LOCAL);
	add_func    (0X554F,0X55E9);
	set_func_flags(0X554F,0x4400);
	set_frame_size(0X554F, 0X2, 0, 0);
	set_name(0X556A, "CreateCopy", SN_LOCAL);
	set_name(0X5599, "Create_dup_jfn", SN_LOCAL);
	set_name(0X55C5, "CreateStash", SN_LOCAL);
	add_func    (0X55E9,0X5667);
	set_func_flags(0X55E9,0x4400);
	set_frame_size(0X55E9, 0, 0, 0);
	set_name(0X562D, "addr_ok", SN_LOCAL);
	add_func    (0X56B6,0X56D8);
	set_func_flags(0X56B6,0x4400);
	set_frame_size(0X56B6, 0X4, 0, 0);
	add_func    (0X56D8,0X56E7);
	set_func_flags(0X56D8,0x4400);
	set_frame_size(0X56D8, 0, 0, 0);
	add_func    (0X56E7,0X56F0);
	set_func_flags(0X56E7,0x4400);
	set_frame_size(0X56E7, 0, 0, 0);
	add_func    (0X56F0,0X56FE);
	set_func_flags(0X56F0,0x4400);
	set_frame_size(0X56F0, 0X2, 0, 0);
	add_func    (0X56FE,0X5708);
	set_func_flags(0X56FE,0x4400);
	set_frame_size(0X56FE, 0, 0, 0);
	add_func    (0X5708,0X570F);
	set_func_flags(0X5708,0x4400);
	set_frame_size(0X5708, 0, 0, 0);
	add_func    (0X570F,0X5729);
	set_func_flags(0X570F,0x4400);
	set_frame_size(0X570F, 0, 0, 0);
	add_func    (0X5729,0X5754);
	set_func_flags(0X5729,0x4410);
	set_frame_size(0X5729, 0X2, 2, 0);
	add_func    (0X5754,0X576D);
	set_func_flags(0X5754,0x4400);
	set_frame_size(0X5754, 0, 0, 0);
	set_name(0X576B, "TestNet_ret", SN_LOCAL);
	add_func    (0X576D,0X5773);
	set_func_flags(0X576D,0x4400);
	set_frame_size(0X576D, 0, 0, 0);
	add_func    (0X57D4,0X57E3);
	set_func_flags(0X57D4,0x4400);
	set_frame_size(0X57D4, 0, 0, 0);
	add_func    (0X580D,0X581C);
	set_func_flags(0X580D,0x400);
	add_func    (0X583D,0X584E);
	set_func_flags(0X583D,0x400);
	add_func    (0X584E,0X585F);
	set_func_flags(0X584E,0x400);
	set_name(0X582B, "ECritDisk_2", SN_LOCAL);
	add_func    (0X585F,0X5870);
	set_func_flags(0X585F,0x400);
	add_func    (0X5870,0X58C8);
	set_func_flags(0X5870,0x4400);
	set_frame_size(0X5870, 0, 0, 0);
	set_name(0X5872, "INTEST", SN_LOCAL);
	set_name(0X5884, "no_sys_wait", SN_LOCAL);
	set_name(0X58AA, "NoUpdate", SN_LOCAL);
	set_name(0X58B1, "GET", SN_LOCAL);
	add_func    (0X58D4,0X5961);
	set_func_flags(0X58D4,0x400);
	set_name(0X4967, "OEMFunctionKey", SN_LOCAL);
	add_func    (0X5961,0X596D);
	set_func_flags(0X5961,0x4400);
	set_frame_size(0X5961, 0, 0, 0);
	add_func    (0X5993,0X59F2);
	set_func_flags(0X5993,0x4400);
	set_frame_size(0X5993, 0, 0, 0);
	add_func    (0X59F2,0X59F5);
	set_func_flags(0X59F2,0x400);
	add_func    (0X59F5,0X5A04);
	set_func_flags(0X59F5,0x400);
	add_func    (0X5A46,0X5A75);
	set_func_flags(0X5A46,0x4400);
	set_frame_size(0X5A46, 0, 0, 0);
	add_func    (0X5A95,0X5A9F);
	set_func_flags(0X5A95,0x400);
	add_func    (0X5AE7,0X5B1B);
	set_func_flags(0X5AE7,0x4400);
	set_frame_size(0X5AE7, 0X2, 0, 0);
	add_func    (0X5B1B,0X5B20);
	set_func_flags(0X5B1B,0x400);
	add_func    (0X5B20,0X5B42);
	set_func_flags(0X5B20,0x4400);
	set_frame_size(0X5B20, 0, 0, 0);
	add_func    (0X5B42,0X5B60);
	set_func_flags(0X5B42,0x4400);
	set_frame_size(0X5B42, 0, 0, 0);
	add_func    (0X5B72,0X5BE1);
	set_func_flags(0X5B72,0x400);
	add_func    (0X5BE1,0X5BF1);
	set_func_flags(0X5BE1,0x4400);
	set_frame_size(0X5BE1, 0, 0, 0);
	add_func    (0X5BF9,0X5BFC);
	set_func_flags(0X5BF9,0x4c0);
	add_func    (0X5C04,0X5C21);
	set_func_flags(0X5C04,0x4400);
	set_frame_size(0X5C04, 0, 0, 0);
	add_func    (0X5DAE,0X5E58);
	set_func_flags(0X5DAE,0x4400);
	set_frame_size(0X5DAE, 0, 0, 0);
	add_func    (0X5E58,0X5E7C);
	set_func_flags(0X5E58,0x4400);
	set_frame_size(0X5E58, 0, 0, 0);
	add_func    (0X5E7C,0X5F62);
	set_func_flags(0X5E7C,0x4400);
	set_frame_size(0X5E7C, 0, 0, 0);
	add_func    (0X5F62,0X5F6A);
	set_func_flags(0X5F62,0x4400);
	set_frame_size(0X5F62, 0, 0, 0);
	add_func    (0X5F6A,0X5FF2);
	set_func_flags(0X5F6A,0x4400);
	set_frame_size(0X5F6A, 0, 0, 0);
	add_func    (0X5FF2,0X5FFB);
	set_func_flags(0X5FF2,0x4400);
	set_frame_size(0X5FF2, 0, 0, 0);
	add_func    (0X6065,0X607E);
	set_func_flags(0X6065,0x4400);
	set_frame_size(0X6065, 0, 0, 0);
	add_func    (0X607E,0X60EC);
	set_func_flags(0X607E,0x4400);
	set_frame_size(0X607E, 0, 0, 0);
	add_func    (0X60EC,0X6122);
	set_func_flags(0X60EC,0x4400);
	set_frame_size(0X60EC, 0X4, 0, 0);
	add_func    (0X6122,0X615F);
	set_func_flags(0X6122,0x4400);
	set_frame_size(0X6122, 0, 0, 0);
	add_func    (0X615F,0X616A);
	set_func_flags(0X615F,0x400);
	add_func    (0X616C,0X616D);
	set_func_flags(0X616C,0x4440);
	set_frame_size(0X616C, 0, 0, 0);
	add_func    (0X616D,0X617F);
	set_func_flags(0X616D,0x400);
	add_func    (0X617F,0X6199);
	set_func_flags(0X617F,0x4400);
	set_frame_size(0X617F, 0, 0, 0);
	add_func    (0X6199,0X61A6);
	set_func_flags(0X6199,0x4400);
	set_frame_size(0X6199, 0, 0, 0);
	add_func    (0X61A6,0X61B3);
	set_func_flags(0X61A6,0x4400);
	set_frame_size(0X61A6, 0, 0, 0);
	add_func    (0X6627,0X6659);
	set_func_flags(0X6627,0x4400);
	set_frame_size(0X6627, 0, 0, 0);
	add_func    (0X67E4,0X67E9);
	set_func_flags(0X67E4,0x4400);
	set_frame_size(0X67E4, 0, 0, 0);
	add_func    (0X67E9,0X67F7);
	set_func_flags(0X67E9,0x4400);
	set_frame_size(0X67E9, 0, 0, 0);
	add_func    (0X681B,0X6A91);
	set_func_flags(0X681B,0);
	set_name(0X4515, "DO_RET", SN_LOCAL);
	add_func    (0X6A91,0X6ABD);
	set_func_flags(0X6A91,0x4400);
	set_frame_size(0X6A91, 0, 0, 0);
	add_func    (0X6ABD,0X6AC7);
	set_func_flags(0X6ABD,0x4400);
	set_frame_size(0X6ABD, 0, 0, 0);
	add_func    (0X6B11,0X6C77);
	set_func_flags(0X6B11,0x4400);
	set_frame_size(0X6B11, 0, 0, 0);
	add_func    (0X6C77,0X6CF9);
	set_func_flags(0X6C77,0x4400);
	set_frame_size(0X6C77, 0, 0, 0);
	set_name(0X6CBD, "rdc_1", SN_LOCAL);
	set_name(0X6CC7, "rdc_2", SN_LOCAL);
	set_name(0X6CEF, "CheckDone", SN_LOCAL);
	add_func    (0X6CF9,0X6D07);
	set_func_flags(0X6CF9,0);
	add_func    (0X6D21,0X6D2A);
	set_func_flags(0X6D21,0x400);
	add_func    (0X6D2A,0X6D31);
	set_func_flags(0X6D2A,0x4400);
	set_frame_size(0X6D2A, 0, 0, 0);
	add_func    (0X6D31,0X6F4F);
	set_func_flags(0X6D31,0x4400);
	set_frame_size(0X6D31, 0, 0, 0);
	set_name(0X6D3C, "LOCAL_RENAME", SN_LOCAL);
	set_name(0X6D57, "SAMEDRV", SN_LOCAL);
	set_name(0X6D7E, "GOTERR", SN_LOCAL);
	set_name(0X6DBA, "RENAME_POP", SN_LOCAL);
	set_name(0X6DEF, "BAD_ACC", SN_LOCAL);
	set_name(0X6DF3, "RENAME_CLEAN", SN_LOCAL);
	set_name(0X6E0D, "BAD_ERR", SN_LOCAL);
	set_name(0X6E14, "NODEST", SN_LOCAL);
	set_name(0X6E21, "BAD_PATH", SN_LOCAL);
	set_name(0X6E27, "SAVEDEST", SN_LOCAL);
	set_name(0X6E40, "BUILDDEST", SN_LOCAL);
	add_func    (0X6F4F,0X6F76);
	set_func_flags(0X6F4F,0x4400);
	set_frame_size(0X6F4F, 0, 0, 0);
	add_func    (0X6F76,0X6F82);
	set_func_flags(0X6F76,0x4400);
	set_frame_size(0X6F76, 0, 0, 0);
	add_func    (0X6F82,0X6FE3);
	set_func_flags(0X6F82,0x4400);
	set_frame_size(0X6F82, 0, 0, 0);
	add_func    (0X6FE3,0X7062);
	set_func_flags(0X6FE3,0x4400);
	set_frame_size(0X6FE3, 0, 0, 0);
	add_func    (0X7062,0X7074);
	set_func_flags(0X7062,0x4400);
	set_frame_size(0X7062, 0, 0, 0);
	add_func    (0X7074,0X708A);
	set_func_flags(0X7074,0x4400);
	set_frame_size(0X7074, 0, 0, 0);
	add_func    (0X7156,0X71A7);
	set_func_flags(0X7156,0x4400);
	set_frame_size(0X7156, 0X6, 0, 0);
	add_func    (0X71A7,0X71BB);
	set_func_flags(0X71A7,0x4400);
	set_frame_size(0X71A7, 0, 0, 0);
	add_func    (0X72C0,0X72DE);
	set_func_flags(0X72C0,0x4400);
	set_frame_size(0X72C0, 0, 0, 0);
	add_func    (0X72DE,0X72FE);
	set_func_flags(0X72DE,0x4400);
	set_frame_size(0X72DE, 0, 0, 0);
	add_func    (0X72FE,0X732B);
	set_func_flags(0X72FE,0x4400);
	set_frame_size(0X72FE, 0X2, 0, 0);
	add_func    (0X732B,0X7409);
	set_func_flags(0X732B,0x4400);
	set_frame_size(0X732B, 0, 0, 0);
	set_name(0X7340, "dsk_info_1", SN_LOCAL);
	set_name(0X7347, "disk_info_retn", SN_LOCAL);
	set_name(0X7348, "LOCAL_DSK_INFO", SN_LOCAL);
	set_name(0X735E, "CRIT_LEAVE", SN_LOCAL);
	set_name(0X7363, "dsk_info_2", SN_LOCAL);
	set_name(0X7380, "dsk_info_3", SN_LOCAL);
	set_name(0X738E, "dsk_info_4", SN_LOCAL);
	set_name(0X7394, "dsk_info_5", SN_LOCAL);
	set_name(0X739A, "dsk_info_6", SN_LOCAL);
	set_name(0X739E, "dsk_info_7", SN_LOCAL);
	set_name(0X73AA, "dsk_info_8", SN_LOCAL);
	set_name(0X73C1, "NOTFREECLUS", SN_LOCAL);
	set_name(0X73C8, "ReturnVals", SN_LOCAL);
	set_name(0X73D4, "dsk_info_9", SN_LOCAL);
	set_name(0X73DE, "dsk_info_10", SN_LOCAL);
	set_name(0X73FC, "dsk_info_11", SN_LOCAL);
	set_name(0X7401, "jmp_to_LCritDisk", SN_LOCAL);
	set_name(0X7405, "dsk_info_12", SN_LOCAL);
	add_func    (0X742B,0X7436);
	set_func_flags(0X742B,0x4400);
	set_frame_size(0X742B, 0, 0, 0);
	add_func    (0X7436,0X74E9);
	set_func_flags(0X7436,0x4400);
	set_frame_size(0X7436, 0, 0, 0);
	add_func    (0X74E9,0X75E8);
	set_func_flags(0X74E9,0x4400);
	set_frame_size(0X74E9, 0, 0, 0);
	add_func    (0X75EC,0X7639);
	set_func_flags(0X75EC,0x4400);
	set_frame_size(0X75EC, 0, 0, 0);
	add_func    (0X7639,0X7685);
	set_func_flags(0X7639,0x4400);
	set_frame_size(0X7639, 0, 0, 0);
	add_func    (0X7685,0X76FE);
	set_func_flags(0X7685,0x4400);
	set_frame_size(0X7685, 0, 0, 0);
	add_func    (0X7866,0X7873);
	set_func_flags(0X7866,0x4400);
	set_frame_size(0X7866, 0, 0, 0);
	add_func    (0X7873,0X78B8);
	set_func_flags(0X7873,0x4400);
	set_frame_size(0X7873, 0, 0, 0);
	add_func    (0X78B8,0X78DC);
	set_func_flags(0X78B8,0x4400);
	set_frame_size(0X78B8, 0, 0, 0);
	add_func    (0X78E3,0X78FF);
	set_func_flags(0X78E3,0x4400);
	set_frame_size(0X78E3, 0, 0, 0);
	add_func    (0X79D3,0X79EF);
	set_func_flags(0X79D3,0x400);
	add_func    (0X7A23,0X7B59);
	set_func_flags(0X7A23,0x4400);
	set_frame_size(0X7A23, 0, 0, 0);
	add_func    (0X7B59,0X7B5F);
	set_func_flags(0X7B59,0x4400);
	set_frame_size(0X7B59, 0, 0, 0);
	add_func    (0X7B5F,0X7B73);
	set_func_flags(0X7B5F,0x4400);
	set_frame_size(0X7B5F, 0, 0, 0);
	add_func    (0X7B73,0X7B76);
	set_func_flags(0X7B73,0x4480);
	set_frame_size(0X7B73, 0, 0, 0);
	add_func    (0X7B76,0X7D8C);
	set_func_flags(0X7B76,0x4400);
	set_frame_size(0X7B76, 0, 0, 0);
	add_func    (0X7D8C,0X7D8F);
	set_func_flags(0X7D8C,0x4480);
	set_frame_size(0X7D8C, 0, 0, 0);
	add_func    (0X7D8F,0X7E1F);
	set_func_flags(0X7D8F,0x4400);
	set_frame_size(0X7D8F, 0, 0, 0);
	add_func    (0X7EE1,0X7F07);
	set_func_flags(0X7EE1,0x4400);
	set_frame_size(0X7EE1, 0, 0, 0);
	add_func    (0X7F07,0X7F91);
	set_func_flags(0X7F07,0x400);
	add_func    (0X7F91,0X7F9D);
	set_func_flags(0X7F91,0x400);
	add_func    (0X7F9D,0X7FAA);
	set_func_flags(0X7F9D,0x400);
	set_frame_size(0X7F9D, 0, 0, 0);
	add_func    (0X7FAA,0X800E);
	set_func_flags(0X7FAA,0x400);
	add_func    (0X800E,0X8027);
	set_func_flags(0X800E,0x4400);
	set_frame_size(0X800E, 0, 0, 0);
	set_name(0X8026, "NO_CAR1", SN_LOCAL);
	add_func    (0X802E,0X804D);
	set_func_flags(0X802E,0x4400);
	set_frame_size(0X802E, 0, 0, 0);
	add_func    (0X804D,0X8065);
	set_func_flags(0X804D,0x4400);
	set_frame_size(0X804D, 0, 0, 0);
	add_func    (0X8065,0X8075);
	set_func_flags(0X8065,0x400);
	set_frame_size(0X8065, 0X4, 0, 0);
	add_func    (0X8075,0X808F);
	set_func_flags(0X8075,0x4400);
	set_frame_size(0X8075, 0, 0, 0);
	set_name(0X807B, "dwrite1", SN_LOCAL);
	set_name(0X808E, "NO_CAR2", SN_LOCAL);
	add_func    (0X808F,0X80BE);
	set_func_flags(0X808F,0x4400);
	set_frame_size(0X808F, 0X4, 0, 0);
	add_func    (0X80BE,0X80D8);
	set_func_flags(0X80BE,0x4400);
	set_frame_size(0X80BE, 0, 0, 0);
	set_name(0X80D4, "DO_ERR", SN_LOCAL);
	add_func    (0X80D8,0X817E);
	set_func_flags(0X80D8,0x4400);
	set_frame_size(0X80D8, 0, 0, 0);
	add_func    (0X817E,0X81A8);
	set_func_flags(0X817E,0x4400);
	set_frame_size(0X817E, 0, 0, 0);
	add_func    (0X81A8,0X81CE);
	set_func_flags(0X81A8,0x4400);
	set_frame_size(0X81A8, 0, 0, 0);
	add_func    (0X81CE,0X81D5);
	set_func_flags(0X81CE,0x4400);
	set_frame_size(0X81CE, 0, 0, 0);
	add_func    (0X81D5,0X821A);
	set_func_flags(0X81D5,0x400);
	add_func    (0X821A,0X821D);
	set_func_flags(0X821A,0x480);
	add_func    (0X8223,0X8225);
	set_func_flags(0X8223,0x400);
	add_func    (0X8225,0X822C);
	set_func_flags(0X8225,0x4400);
	set_frame_size(0X8225, 0, 0, 0);
	add_func    (0X82BA,0X82BD);
	set_func_flags(0X82BA,0x480);
	add_func    (0X82D7,0X8306);
	set_func_flags(0X82D7,0x400);
	add_func    (0X8306,0X8313);
	set_func_flags(0X8306,0x4400);
	set_frame_size(0X8306, 0, 0, 0);
	add_func    (0X8313,0X839D);
	set_func_flags(0X8313,0x4400);
	set_frame_size(0X8313, 0, 0, 0);
	add_func    (0X83A0,0X83A3);
	set_func_flags(0X83A0,0x4480);
	set_frame_size(0X83A0, 0, 0, 0);
	add_func    (0X83A3,0X8714);
	set_func_flags(0X83A3,0x4400);
	set_frame_size(0X83A3, 0, 0, 0);
	add_func    (0X8714,0X8761);
	set_func_flags(0X8714,0x4400);
	set_frame_size(0X8714, 0X2, 0, 0);
	set_name(0X8729, "_bufq", SN_LOCAL);
	set_name(0X8736, "bufq04", SN_LOCAL);
	set_name(0X8740, "bufq05", SN_LOCAL);
	set_name(0X874B, "bufq4", SN_LOCAL);
	set_name(0X8755, "bufq5", SN_LOCAL);
	set_name(0X8757, "bufq6", SN_LOCAL);
	add_func    (0X8761,0X8788);
	set_func_flags(0X8761,0x4400);
	set_frame_size(0X8761, 0, 0, 0);
	add_func    (0X8788,0X8797);
	set_func_flags(0X8788,0x4400);
	set_frame_size(0X8788, 0, 0, 0);
	add_func    (0X8797,0X87F7);
	set_func_flags(0X8797,0x400);
	add_func    (0X87F7,0X8875);
	set_func_flags(0X87F7,0x4400);
	set_frame_size(0X87F7, 0, 0, 0);
	add_func    (0X8875,0X8884);
	set_func_flags(0X8875,0x4400);
	set_frame_size(0X8875, 0, 0, 0);
	add_func    (0X8884,0X8900);
	set_func_flags(0X8884,0x4400);
	set_frame_size(0X8884, 0, 0, 0);
	add_func    (0X8900,0X8933);
	set_func_flags(0X8900,0x4400);
	set_frame_size(0X8900, 0, 0, 0);
	add_func    (0X89C3,0X8A27);
	set_func_flags(0X89C3,0x4400);
	set_frame_size(0X89C3, 0, 0, 0);
	add_func    (0X8A27,0X8A90);
	set_func_flags(0X8A27,0x4400);
	set_frame_size(0X8A27, 0, 0, 0);
	add_func    (0X8A90,0X8AEC);
	set_func_flags(0X8A90,0x4400);
	set_frame_size(0X8A90, 0XE, 0, 0);
	add_func    (0X8AEC,0X8B22);
	set_func_flags(0X8AEC,0x4400);
	set_frame_size(0X8AEC, 0, 0, 0);
	set_name(0X8AFB, "f_sfte_1", SN_LOCAL);
	set_name(0X8B13, "f_sfte_2", SN_LOCAL);
	add_func    (0X8B22,0X8B6D);
	set_func_flags(0X8B22,0x4400);
	set_frame_size(0X8B22, 0, 0, 0);
	set_name(0X8B31, "scan_next_sftfcb", SN_LOCAL);
	set_name(0X8B65, "sfte_i_found", SN_LOCAL);
	set_name(0X8B67, "sfte_i_notfound", SN_LOCAL);
	set_name(0X8B69, "find_sfte_i_error", SN_LOCAL);
	add_func    (0X8B6D,0X8B94);
	set_func_flags(0X8B6D,0x4400);
	set_frame_size(0X8B6D, 0XE, 0, 0);
	set_name(0X8B8C, "sftf_1", SN_LOCAL);
	add_func    (0X8B94,0X8B99);
	set_func_flags(0X8B94,0x4400);
	set_frame_size(0X8B94, 0, 0, 0);
	add_func    (0X8B99,0X8B9F);
	set_func_flags(0X8B99,0x400);
	add_func    (0X8B9F,0X8C72);
	set_func_flags(0X8B9F,0x4400);
	set_frame_size(0X8B9F, 0, 0, 0);
	add_func    (0X8C72,0X8C9D);
	set_func_flags(0X8C72,0x4400);
	set_frame_size(0X8C72, 0, 0, 0);
	add_func    (0X8E53,0X8E67);
	set_func_flags(0X8E53,0x4400);
	set_frame_size(0X8E53, 0, 0, 0);
	add_func    (0X8E67,0X8E74);
	set_func_flags(0X8E67,0x4400);
	set_frame_size(0X8E67, 0, 0, 0);
	add_func    (0X8E74,0X8ED3);
	set_func_flags(0X8E74,0x4400);
	set_frame_size(0X8E74, 0X4, 0, 0);
	add_func    (0X8ED3,0X8F01);
	set_func_flags(0X8ED3,0x4400);
	set_frame_size(0X8ED3, 0, 0, 0);
	add_func    (0X8F01,0X8FD0);
	set_func_flags(0X8F01,0x4410);
	set_frame_size(0X8F01, 0X6, 2, 0);
	add_func    (0X8FD0,0X9015);
	set_func_flags(0X8FD0,0x4400);
	set_frame_size(0X8FD0, 0X4, 0, 0);
	add_func    (0X9015,0X90DB);
	set_func_flags(0X9015,0x4400);
	set_frame_size(0X9015, 0, 0, 0);
	add_func    (0X90DB,0X9163);
	set_func_flags(0X90DB,0x4400);
	set_frame_size(0X90DB, 0, 0, 0);
	add_func    (0X9175,0X9260);
	set_func_flags(0X9175,0x4400);
	set_frame_size(0X9175, 0, 0, 0);
	add_func    (0X9261,0X9278);
	set_func_flags(0X9261,0x4401);
	set_frame_size(0X9261, 0, 0, 0);
	add_func    (0X9281,0X92B5);
	set_func_flags(0X9281,0x400);
	add_func    (0X92B5,0X92C4);
	set_func_flags(0X92B5,0x401);
	add_func    (0X92CA,0X92D2);
	set_func_flags(0X92CA,0x400);
	add_func    (0X92D2,0X9346);
	set_func_flags(0X92D2,0x4401);
	set_frame_size(0X92D2, 0, 0, 0);
	add_func    (0X9348,0X934B);
	set_func_flags(0X9348,0x4400);
	set_frame_size(0X9348, 0, 0, 0);
	add_func    (0X934B,0X93BF);
	set_func_flags(0X934B,0x4400);
	set_frame_size(0X934B, 0, 0, 0);
	set_name(0X9364, "chkext", SN_LOCAL);
	set_name(0X9384, "chksector", SN_LOCAL);
	set_name(0X938C, "chardev2", SN_LOCAL);
	set_name(0X93B3, "dev_exit", SN_LOCAL);
	set_name(0X93B7, "chardev3", SN_LOCAL);
	add_func    (0X93BF,0X93F8);
	set_func_flags(0X93BF,0x4400);
	set_frame_size(0X93BF, 0X2, 0, 0);
	add_func    (0X93F8,0X9404);
	set_func_flags(0X93F8,0x4400);
	set_frame_size(0X93F8, 0X2, 0, 0);
	add_func    (0X940A,0X94F3);
	set_func_flags(0X940A,0x4400);
	set_frame_size(0X940A, 0, 0, 0);
	add_func    (0X94F3,0X951A);
	set_func_flags(0X94F3,0x4400);
	set_frame_size(0X94F3, 0, 0, 0);
	add_func    (0X951A,0X953B);
	set_func_flags(0X951A,0x400);
	add_func    (0X953E,0X955F);
	set_func_flags(0X953E,0x4400);
	set_frame_size(0X953E, 0, 0, 0);
	add_func    (0X95AC,0X95B8);
	set_func_flags(0X95AC,0x4400);
	set_frame_size(0X95AC, 0, 0, 0);
	add_func    (0X9619,0X961A);
	set_func_flags(0X9619,0x4440);
	set_frame_size(0X9619, 0, 0, 0);
	add_func    (0X961A,0X96C3);
	set_func_flags(0X961A,0x4400);
	set_frame_size(0X961A, 0, 0, 0);
	add_func    (0X96C3,0X9791);
	set_func_flags(0X96C3,0x4400);
	set_frame_size(0X96C3, 0, 0, 0);
	add_func    (0X9791,0X9801);
	set_func_flags(0X9791,0x4400);
	set_frame_size(0X9791, 0, 0, 0);
	add_func    (0X9801,0X985F);
	set_func_flags(0X9801,0x400);
	add_func    (0X985F,0X98C2);
	set_func_flags(0X985F,0x4400);
	set_frame_size(0X985F, 0, 0, 0);
	add_func    (0X98C2,0X990E);
	set_func_flags(0X98C2,0x4400);
	set_frame_size(0X98C2, 0, 0, 0);
	add_func    (0X990E,0X9949);
	set_func_flags(0X990E,0x4400);
	set_frame_size(0X990E, 0, 0, 0);
	add_func    (0X9949,0X99AA);
	set_func_flags(0X9949,0x4400);
	set_frame_size(0X9949, 0, 0, 0);
	add_func    (0X99AA,0X99F3);
	set_func_flags(0X99AA,0x4400);
	set_frame_size(0X99AA, 0, 0, 0);
	add_func    (0X99F3,0X9A89);
	set_func_flags(0X99F3,0x4400);
	set_frame_size(0X99F3, 0, 0, 0);
	add_func    (0X9A89,0X9AC5);
	set_func_flags(0X9A89,0x4400);
	set_frame_size(0X9A89, 0, 0, 0);
	add_func    (0X9AC5,0X9ACC);
	set_func_flags(0X9AC5,0x4402);
	set_frame_size(0X9AC5, 0, 0, 0);
	add_func    (0X9ACF,0X9CDF);
	set_func_flags(0X9ACF,0x4400);
	set_frame_size(0X9ACF, 0, 0, 0);
	add_func    (0X9CDF,0X9D13);
	set_func_flags(0X9CDF,0x4400);
	set_frame_size(0X9CDF, 0X2, 0, 0);
	add_func    (0X9D13,0X9D19);
	set_func_flags(0X9D13,0x400);
	add_func    (0X9D19,0X9D73);
	set_func_flags(0X9D19,0x4400);
	set_frame_size(0X9D19, 0, 0, 0);
	add_func    (0X9D7C,0X9DB0);
	set_func_flags(0X9D7C,0x400);
	add_func    (0X9DB0,0X9E18);
	set_func_flags(0X9DB0,0x4400);
	set_frame_size(0X9DB0, 0, 0, 0);
	add_func    (0X9E18,0X9E3E);
	set_func_flags(0X9E18,0x4400);
	set_frame_size(0X9E18, 0, 0, 0);
	add_func    (0X9E42,0X9E48);
	set_func_flags(0X9E42,0x400);
	add_func    (0X9E48,0X9E74);
	set_func_flags(0X9E48,0x4400);
	set_frame_size(0X9E48, 0, 0, 0);
	add_func    (0X9E74,0X9E7B);
	set_func_flags(0X9E74,0x4400);
	set_frame_size(0X9E74, 0, 0, 0);
	add_func    (0X9E7B,0X9E7C);
	set_func_flags(0X9E7B,0x4440);
	set_frame_size(0X9E7B, 0, 0, 0);
	add_func    (0X9E7C,0X9EA5);
	set_func_flags(0X9E7C,0x4400);
	set_frame_size(0X9E7C, 0, 0, 0);
	add_func    (0X9EE4,0X9EE5);
	set_func_flags(0X9EE4,0x4400);
	set_frame_size(0X9EE4, 0, 0, 0);
	add_func    (0X9EE5,0X9F0A);
	set_func_flags(0X9EE5,0x4400);
	set_frame_size(0X9EE5, 0X2, 0, 0);
	add_func    (0X9F0A,0X9F0D);
	set_func_flags(0X9F0A,0x4400);
	set_frame_size(0X9F0A, 0X2, 0, 0);
	add_func    (0X9F0D,0X9F15);
	set_func_flags(0X9F0D,0x4400);
	set_frame_size(0X9F0D, 0, 0, 0);
	add_func    (0X9F15,0X9F1D);
	set_func_flags(0X9F15,0x4400);
	set_frame_size(0X9F15, 0, 0, 0);
	add_func    (0X9F1D,0X9F38);
	set_func_flags(0X9F1D,0x4400);
	set_frame_size(0X9F1D, 0, 0, 0);
	add_func    (0X9F38,0X9F45);
	set_func_flags(0X9F38,0x4400);
	set_frame_size(0X9F38, 0, 0, 0);
	add_func    (0X9F51,0X9FBF);
	set_func_flags(0X9F51,0x4400);
	set_frame_size(0X9F51, 0, 0, 0);
	add_func    (0X9FD4,0XA002);
	set_func_flags(0X9FD4,0x4400);
	set_frame_size(0X9FD4, 0, 0, 0);
	add_func    (0XA002,0XA125);
	set_func_flags(0XA002,0x4402);
	set_frame_size(0XA002, 0, 0, 0);
	set_name(0X412A, "scct_1", SN_LOCAL);
	set_name(0X413F, "scct_2", SN_LOCAL);
	set_name(0X4149, "scct_3", SN_LOCAL);
	set_name(0X4153, "scct_4", SN_LOCAL);
	set_name(0X415D, "scct_5", SN_LOCAL);
	set_name(0X4173, "scct_6", SN_LOCAL);
	set_name(0X4182, "scct_9s", SN_LOCAL);
	set_name(0X4186, "SetCtrlShortEntry", SN_LOCAL);
	set_name(0X41FA, "SaveAllRegs", SN_LOCAL);
	set_name(0X422C, "set_indos_flag", SN_LOCAL);
	set_name(0X4294, "DSKROUT", SN_LOCAL);
	set_name(0X42BC, "DISPCALL", SN_LOCAL);
	set_name(0X42E1, "LeaveA20On", SN_LOCAL);
	set_name(0X430B, "disa20", SN_LOCAL);
	add_func    (0XA13A,0XA173);
	set_func_flags(0XA13A,0x4400);
	set_frame_size(0XA13A, 0, 0, 0);
	add_func    (0XA173,0XA1A4);
	set_func_flags(0XA173,0x4400);
	set_frame_size(0XA173, 0, 0, 0);
	add_func    (0XA1A4,0XA22E);
	set_func_flags(0XA1A4,0x400);
	add_func    (0XA22E,0XA232);
	set_func_flags(0XA22E,0x400);
	add_func    (0XA232,0XA242);
	set_func_flags(0XA232,0x400);
	add_func    (0XA242,0XA3BA);
	set_func_flags(0XA242,0x4402);
	set_frame_size(0XA242, 0, 0, 0);
	set_name(0XB420, "abort_inner", SN_LOCAL);
	add_func    (0XA3E5,0XA40C);
	set_func_flags(0XA3E5,0x4400);
	set_frame_size(0XA3E5, 0, 0, 0);
	add_func    (0XA40C,0XA435);
	set_func_flags(0XA40C,0x4400);
	set_frame_size(0XA40C, 0, 0, 0);
	add_func    (0XA44E,0XA4E6);
	set_func_flags(0XA44E,0x4400);
	set_frame_size(0XA44E, 0, 0, 0);
	set_name(0XA4A3, "High12", SN_LOCAL);
	set_name(0XA4B2, "Unpack12", SN_LOCAL);
	set_name(0XA4BB, "HURTFAT", SN_LOCAL);
	set_name(0XA4E4, "OKU_RET", SN_LOCAL);
	add_func    (0XA4F9,0XA5B9);
	set_func_flags(0XA4F9,0x4400);
	set_frame_size(0XA4F9, 0, 0, 0);
	set_name(0XA4E6, "p_clust_0", SN_LOCAL);
	set_name(0XA4FD, "p_cont", SN_LOCAL);
	set_name(0XA556, "yesdirty11", SN_LOCAL);
	set_name(0XA5A2, "yesdirty12", SN_LOCAL);
	set_name(0XA5AC, "POPP_RET", SN_LOCAL);
	add_func    (0XA5B9,0XA5CE);
	set_func_flags(0XA5B9,0x4400);
	set_frame_size(0XA5B9, 0, 0, 0);
	add_func    (0XA5D7,0XA6C6);
	set_func_flags(0XA5D7,0x4400);
	set_frame_size(0XA5D7, 0X4, 0, 0);
	add_func    (0XA6C6,0XA6D8);
	set_func_flags(0XA6C6,0x4400);
	set_frame_size(0XA6C6, 0, 0, 0);
	add_func    (0XA6D8,0XA72F);
	set_func_flags(0XA6D8,0x4400);
	set_frame_size(0XA6D8, 0, 0, 0);
	set_name(0XA6FA, "frcd20", SN_LOCAL);
	set_name(0XA723, "frcd25", SN_LOCAL);
	set_name(0XA729, "NO_CHANGE", SN_LOCAL);
	add_func    (0XA72F,0XA756);
	set_func_flags(0XA72F,0x4400);
	set_frame_size(0XA72F, 0, 0, 0);
	set_name(0XA743, "chk_set_fa_1", SN_LOCAL);
	set_name(0XA748, "chk_set_fa_2", SN_LOCAL);
	set_name(0XA755, "chk_set_fa_3", SN_LOCAL);
	add_func    (0XA774,0XAA4B);
	set_func_flags(0XA774,0x4400);
	set_frame_size(0XA774, 0, 0, 0);
	set_name(0XA756, "FATERR", SN_LOCAL);
	set_name(0XA772, "FATERR_fail", SN_LOCAL);
	set_name(0XA7CC, "CHECK_BYT", SN_LOCAL);
	set_name(0XA7D6, "DISK_CHNG_ERR", SN_LOCAL);
	set_name(0XA80B, "FAIL_OPJ2", SN_LOCAL);
	set_name(0XA810, "CHKBUFFDIRT", SN_LOCAL);
	set_name(0XA81B, "nbuffer", SN_LOCAL);
	set_name(0XA82A, "FAIL_OP", SN_LOCAL);
	set_name(0XA82E, "jmp_to_DISK_CHNG_ERR", SN_LOCAL);
	set_name(0XA830, "lfnxt", SN_LOCAL);
	set_name(0XA839, "NEWDSK", SN_LOCAL);
	set_name(0XA84C, "newdsk2", SN_LOCAL);
	set_name(0XA84F, "nxbuffer", SN_LOCAL);
	set_name(0XA864, "lfnxt2", SN_LOCAL);
	set_name(0XA866, "skpbuff", SN_LOCAL);
	set_name(0XA882, "GOGETBPB", SN_LOCAL);
	set_name(0XA8B7, "FAIL_OPJ", SN_LOCAL);
	set_name(0XA8BC, "unpack_ok", SN_LOCAL);
	set_name(0XA8C2, "GETFREEBUF", SN_LOCAL);
	set_name(0XA8E4, "GOTGETBUF", SN_LOCAL);
	set_name(0XA935, "gotgetbuf2", SN_LOCAL);
	set_name(0XA95B, "gotgetbuf3", SN_LOCAL);
	set_name(0XA972, "gotgetbuf4", SN_LOCAL);
	set_name(0XA97A, "gotgetbuf5", SN_LOCAL);
	set_name(0XA990, "gotgetbuf6", SN_LOCAL);
	set_name(0XA9D6, "gotgetbuf7", SN_LOCAL);
	set_name(0XA9E0, "gotgetbuf8", SN_LOCAL);
	set_name(0XA9EE, "gotgetbuf9", SN_LOCAL);
	set_name(0XA9FC, "gotgetbuf10", SN_LOCAL);
	set_name(0XA9FF, "gotgetbuf11", SN_LOCAL);
	set_name(0XAA0C, "gotgetbuf12", SN_LOCAL);
	set_name(0XAA20, "gotgetbuf13", SN_LOCAL);
	set_name(0XAA3C, "gotgetbuf14", SN_LOCAL);
	set_name(0XAA41, "gotgetbuf15", SN_LOCAL);
	set_name(0XAA44, "gotgetbuf16", SN_LOCAL);
	add_func    (0XAA4B,0XAA5D);
	set_func_flags(0XAA4B,0x4400);
	set_frame_size(0XAA4B, 0, 0, 0);
	add_func    (0XAA5D,0XAA64);
	set_func_flags(0XAA5D,0x4400);
	set_frame_size(0XAA5D, 0, 0, 0);
	add_func    (0XAA64,0XAAA1);
	set_func_flags(0XAA64,0x4400);
	set_frame_size(0XAA64, 0X4, 0, 0);
	add_func    (0XAAB0,0XAAB2);
	set_func_flags(0XAAB0,0x400);
	add_func    (0XAC2A,0XAC2B);
	set_func_flags(0XAC2A,0x4440);
	set_frame_size(0XAC2A, 0, 0, 0);
	add_func    (0XAC2B,0XAC7C);
	set_func_flags(0XAC2B,0x4400);
	set_frame_size(0XAC2B, 0, 0, 0);
	add_func    (0XAC7C,0XACB1);
	set_func_flags(0XAC7C,0x4400);
	set_frame_size(0XAC7C, 0, 0, 0);
	add_func    (0XACB1,0XAD57);
	set_func_flags(0XACB1,0x4400);
	set_frame_size(0XACB1, 0, 0, 0);
	add_func    (0XAD57,0XAD58);
	set_func_flags(0XAD57,0x4440);
	set_frame_size(0XAD57, 0, 0, 0);
	add_func    (0XAD58,0XAD64);
	set_func_flags(0XAD58,0x4400);
	set_frame_size(0XAD58, 0, 0, 0);
	add_func    (0XAD64,0XAD6A);
	set_func_flags(0XAD64,0x4400);
	set_frame_size(0XAD64, 0, 0, 0);
	add_func    (0XAD6A,0XAD78);
	set_func_flags(0XAD6A,0x4400);
	set_frame_size(0XAD6A, 0, 0, 0);
	set_name(0XAD77, "ddcx", SN_LOCAL);
	add_func    (0XB312,0XB321);
	set_func_flags(0XB312,0x4400);
	set_frame_size(0XB312, 0, 0, 0);
	add_func    (0XB321,0XB32C);
	set_func_flags(0XB321,0x4400);
	set_frame_size(0XB321, 0X2, 0, 0);
	add_func    (0XB32C,0XB33A);
	set_func_flags(0XB32C,0x4400);
	set_frame_size(0XB32C, 0X2, 0, 0);
	add_func    (0XB33A,0XB34B);
	set_func_flags(0XB33A,0x4400);
	set_frame_size(0XB33A, 0, 0, 0);
	add_func    (0XB34B,0XB359);
	set_func_flags(0XB34B,0x4400);
	set_frame_size(0XB34B, 0, 0, 0);
	add_func    (0XB359,0XB35C);
	set_func_flags(0XB359,0x4400);
	set_frame_size(0XB359, 0, 0, 0);
	add_func    (0XB35C,0XB370);
	set_func_flags(0XB35C,0x4400);
	set_frame_size(0XB35C, 0, 0, 0);
	add_func    (0XB370,0XB3BC);
	set_func_flags(0XB370,0x4400);
	set_frame_size(0XB370, 0, 0, 0);
	add_func    (0XB443,0XB44A);
	set_func_flags(0XB443,0x4400);
	set_frame_size(0XB443, 0, 0, 0);
	add_func    (0XB44A,0XB47C);
	set_func_flags(0XB44A,0x4400);
	set_frame_size(0XB44A, 0, 0, 0);
	add_func    (0XB47C,0XB483);
	set_func_flags(0XB47C,0x400);
	add_func    (0XB483,0XB493);
	set_func_flags(0XB483,0x4400);
	set_frame_size(0XB483, 0, 0, 0);
	add_func    (0XB493,0XB4B5);
	set_func_flags(0XB493,0x400);
	add_func    (0XB4B5,0XB523);
	set_func_flags(0XB4B5,0);
	add_func    (0XB60D,0XB631);
	set_func_flags(0XB60D,0x400);
	add_func    (0XB631,0XB666);
	set_func_flags(0XB631,0x400);
	add_func    (0XB6D9,0XB71A);
	set_func_flags(0XB6D9,0x4400);
	set_frame_size(0XB6D9, 0, 0, 0);
	add_func    (0XB869,0XB886);
	set_func_flags(0XB869,0x4400);
	set_frame_size(0XB869, 0, 0, 0);
	add_func    (0XB886,0XB8A0);
	set_func_flags(0XB886,0x4400);
	set_frame_size(0XB886, 0, 0, 0);
	add_func    (0XB8A0,0XB8CB);
	set_func_flags(0XB8A0,0x4400);
	set_frame_size(0XB8A0, 0, 0, 0);
	add_func    (0XB8CB,0XB8DE);
	set_func_flags(0XB8CB,0x4400);
	set_frame_size(0XB8CB, 0, 0, 0);
	add_func    (0XB8DE,0XB926);
	set_func_flags(0XB8DE,0x4400);
	set_frame_size(0XB8DE, 0, 0, 0);
	add_func    (0XB926,0XB959);
	set_func_flags(0XB926,0x400);
	set_name(0XB945, "FreeJFN", SN_LOCAL);
	set_name(0XB94C, "PostFree", SN_LOCAL);
	add_func    (0XBA2E,0XBA8C);
	set_func_flags(0XBA2E,0x400);
	add_func    (0XBA91,0XBAF5);
	set_func_flags(0XBA91,0x400);
	add_func    (0XBC1C,0XBC41);
	set_func_flags(0XBC1C,0x4400);
	set_frame_size(0XBC1C, 0, 0, 0);
	add_func    (0XBC7C,0XBC91);
	set_func_flags(0XBC7C,0x4400);
	set_frame_size(0XBC7C, 0, 0, 0);
	add_func    (0XBC91,0XBCDE);
	set_func_flags(0XBC91,0x4400);
	set_frame_size(0XBC91, 0, 0, 0);
	add_func    (0XBD2C,0XBD48);
	set_func_flags(0XBD2C,0x4400);
	set_frame_size(0XBD2C, 0, 0, 0);
	add_func    (0XBD48,0XBD97);
	set_func_flags(0XBD48,0x4400);
	set_frame_size(0XBD48, 0, 0, 0);
	add_func    (0XBD97,0XBDBB);
	set_func_flags(0XBD97,0x4400);
	set_frame_size(0XBD97, 0, 0, 0);
	add_func    (0XBDBB,0XBE1D);
	set_func_flags(0XBDBB,0x4410);
	set_frame_size(0XBDBB, 0X10, 2, 0);
	add_func    (0XBE1D,0XBE21);
	set_func_flags(0XBE1D,0x4400);
	set_frame_size(0XBE1D, 0, 0, 0);
	add_func    (0XBE21,0XBEEE);
	set_func_flags(0XBE21,0x4400);
	set_frame_size(0XBE21, 0, 0, 0);
	add_func    (0XBEEE,0XBEF1);
	set_func_flags(0XBEEE,0x4480);
	set_frame_size(0XBEEE, 0X4, 0, 0);
	add_func    (0XBF96,0XBFFB);
	set_func_flags(0XBF96,0x4400);
	set_frame_size(0XBF96, 0, 0, 0);
	add_func    (0XBFFB,0XBFFD);
	set_func_flags(0XBFFB,0x400);
	add_func    (0XBFFD,0XC005);
	set_func_flags(0XBFFD,0x4400);
	set_frame_size(0XBFFD, 0, 0, 0);
	add_func    (0XC005,0XC018);
	set_func_flags(0XC005,0x4400);
	set_frame_size(0XC005, 0, 0, 0);
	add_func    (0XC018,0XC0A6);
	set_func_flags(0XC018,0x4400);
	set_frame_size(0XC018, 0XE, 0, 0);
	add_func    (0XC0A6,0XC12C);
	set_func_flags(0XC0A6,0x4400);
	set_frame_size(0XC0A6, 0, 0, 0);
	add_func    (0XC12C,0XC12D);
	set_func_flags(0XC12C,0x4400);
	set_frame_size(0XC12C, 0, 0, 0);
	add_func    (0XC152,0XC169);
	set_func_flags(0XC152,0x4400);
	set_frame_size(0XC152, 0, 0, 0);
	add_func    (0XC169,0XC171);
	set_func_flags(0XC169,0x400);
	set_frame_size(0XC169, 0, 0, 0);
	add_func    (0XC171,0XC18A);
	set_func_flags(0XC171,0x4400);
	set_frame_size(0XC171, 0, 0, 0);
	add_func    (0XC18A,0XC194);
	set_func_flags(0XC18A,0x4400);
	set_frame_size(0XC18A, 0, 0, 0);
	add_func    (0XC194,0XC26F);
	set_func_flags(0XC194,0x400);
	add_func    (0XC26F,0XC273);
	set_func_flags(0XC26F,0x400);
	add_func    (0XC37E,0XC385);
	set_func_flags(0XC37E,0x400);
	set_name(0XC273, "AccessSet", SN_LOCAL);
	add_func    (0XC385,0XC396);
	set_func_flags(0XC385,0x4400);
	set_frame_size(0XC385, 0, 0, 0);
	add_func    (0XC42E,0XC43E);
	set_func_flags(0XC42E,0x4400);
	set_frame_size(0XC42E, 0, 0, 0);
	add_func    (0XC5C7,0XC5DD);
	set_func_flags(0XC5C7,0x4400);
	set_frame_size(0XC5C7, 0, 0, 0);
	add_func    (0XC5DD,0XC61D);
	set_func_flags(0XC5DD,0x4400);
	set_frame_size(0XC5DD, 0, 0, 0);
	add_func    (0XC61D,0XC62A);
	set_func_flags(0XC61D,0x4400);
	set_frame_size(0XC61D, 0, 0, 0);
	add_func    (0XC62A,0XC62F);
	set_func_flags(0XC62A,0x4400);
	set_frame_size(0XC62A, 0, 0, 0);
	add_func    (0XC62F,0XC670);
	set_func_flags(0XC62F,0x4400);
	set_frame_size(0XC62F, 0, 0, 0);
	add_func    (0XC670,0XC675);
	set_func_flags(0XC670,0x4400);
	set_frame_size(0XC670, 0, 0, 0);
	add_func    (0XC675,0XC697);
	set_func_flags(0XC675,0x4400);
	set_frame_size(0XC675, 0, 0, 0);
	add_func    (0XC697,0XC702);
	set_func_flags(0XC697,0x4400);
	set_frame_size(0XC697, 0, 0, 0);
	add_func    (0XC919,0XC942);
	set_func_flags(0XC919,0x4400);
	set_frame_size(0XC919, 0, 0, 0);
	add_func    (0XC942,0XC956);
	set_func_flags(0XC942,0x4400);
	set_frame_size(0XC942, 0, 0, 0);
	add_func    (0XC956,0XC962);
	set_func_flags(0XC956,0x4400);
	set_frame_size(0XC956, 0, 0, 0);
	add_func    (0XC962,0XC96E);
	set_func_flags(0XC962,0x4400);
	set_frame_size(0XC962, 0, 0, 0);
	add_func    (0XC96E,0XC986);
	set_func_flags(0XC96E,0x4400);
	set_frame_size(0XC96E, 0, 0, 0);
	set_name(0XC975, "scsagain", SN_LOCAL);
	set_name(0XC984, "scsfound", SN_LOCAL);
	add_func    (0XC986,0XC9A5);
	set_func_flags(0XC986,0x4400);
	set_frame_size(0XC986, 0, 0, 0);
	add_func    (0XC9A5,0XC9B2);
	set_func_flags(0XC9A5,0x4400);
	set_frame_size(0XC9A5, 0, 0, 0);
	add_func    (0XCB0B,0XCBE2);
	set_func_flags(0XCB0B,0x4400);
	set_frame_size(0XCB0B, 0X2, 0, 0);
	add_func    (0XCBE2,0XCBF6);
	set_func_flags(0XCBE2,0x4400);
	set_frame_size(0XCBE2, 0, 0, 0);
	add_func    (0XCBF6,0XCC16);
	set_func_flags(0XCBF6,0x4400);
	set_frame_size(0XCBF6, 0X2, 0, 0);
	add_func    (0XCCA8,0XCCDE);
	set_func_flags(0XCCA8,0x4400);
	set_frame_size(0XCCA8, 0, 0, 0);
	add_func    (0XCCE1,0XCCED);
	set_func_flags(0XCCE1,0x4400);
	set_frame_size(0XCCE1, 0, 0, 0);
	add_func    (0XCCED,0XCD12);
	set_func_flags(0XCCED,0x4400);
	set_frame_size(0XCCED, 0, 0, 0);
	add_func    (0XD02B,0XD053);
	set_func_flags(0XD02B,0x4400);
	set_frame_size(0XD02B, 0, 0, 0);
	add_func    (0XD053,0XD07D);
	set_func_flags(0XD053,0x4400);
	set_frame_size(0XD053, 0, 0, 0);
	set_name(0XD07A, "cXMM_no_driver", SN_LOCAL);
	add_func    (0XD0E3,0XD121);
	set_func_flags(0XD0E3,0x4400);
	set_frame_size(0XD0E3, 0, 0, 0);
	add_func    (0XD121,0XD171);
	set_func_flags(0XD121,0x4400);
	set_frame_size(0XD121, 0X2, 0, 0);
	add_func    (0XD171,0XD1E9);
	set_func_flags(0XD171,0x4400);
	set_frame_size(0XD171, 0, 0, 0);
	set_name(0XD186, "po_iset1", SN_LOCAL);
	set_name(0XD195, "po_iset2", SN_LOCAL);
	set_name(0XD1A0, "po_iset3", SN_LOCAL);
	set_name(0XD1AB, "po_iset4", SN_LOCAL);
	add_func    (0XD1F9,0XD20F);
	set_func_flags(0XD1F9,0x4400);
	set_frame_size(0XD1F9, 0X4, 0, 0);
	set_name(0XD204, "pin_loop", SN_LOCAL);
}

//------------------------------------------------------------------------
// Information about functions

static Functions(void) {

	Functions_0();
}

//------------------------------------------------------------------------
// Information about segment registers

static SegRegs(void) {
	split_sreg_range(0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X103D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X105E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X106E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1095,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10A4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X3F10,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X42FA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X430A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4324,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X433B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4353,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X442C,"es",0,3);
	split_sreg_range(0X443D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4443,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4447,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4462,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X446D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4475,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X44EA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X44FD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4636,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X464B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4681,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X469C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4716,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4734,"es",0XFFFF,3);
	split_sreg_range(0X473E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X475A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4779,"es",0XFFFFFFFFFFFFFFFE,3);
	split_sreg_range(0X478B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4797,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X47BF,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X47D8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X47F7,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X480D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4973,"es",0,3);
	split_sreg_range(0X4976,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4A1E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4B97,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4C19,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4C2C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4C47,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4E30,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4E61,"es",0,3);
	split_sreg_range(0X4E85,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4EAE,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4EB2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4FBA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X505A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5116,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5181,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5256,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5299,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X533A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5346,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X556C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X55C6,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X55EF,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X570C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5759,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X575E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5779,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X57AC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5831,"es",0,3);
	split_sreg_range(0X5838,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X58D6,"es",0,3);
	split_sreg_range(0X5965,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5A61,"es",0,3);
	split_sreg_range(0X5A69,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5A83,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5AAA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5B56,"es",0,3);
	split_sreg_range(0X5B5E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5D51,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5DB3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5E16,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5E1D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5E62,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5E78,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5E8D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5EA3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5F52,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5F57,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5F5C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5FCA,"es",0,3);
	split_sreg_range(0X5FE0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6089,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X610D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6118,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6127,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6135,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X62B8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X62BF,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X630C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X639E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X63E0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X63E7,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6411,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6418,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X641D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6424,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X642E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X645E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6495,"es",0,3);
	split_sreg_range(0X64A9,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X64D2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X64F7,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X652F,"es",0,3);
	split_sreg_range(0X6559,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X656A,"es",0,3);
	split_sreg_range(0X657E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X65AB,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X65D1,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X65F0,"es",0,3);
	split_sreg_range(0X6606,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6617,"es",0,3);
	split_sreg_range(0X6696,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X66E6,"es",0,3);
	split_sreg_range(0X673B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6749,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6772,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6782,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X67A8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X686E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X688F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X68D3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X69AC,"es",0,3);
	split_sreg_range(0X69E0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6AA4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6AAD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6ABA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6AF8,"es",0,3);
	split_sreg_range(0X6B49,"es",0,3);
	split_sreg_range(0X6C1F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6C30,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6C51,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6C65,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6C7E,"es",0,3);
	split_sreg_range(0X6CC9,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6CD2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6CE6,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6CF3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6DF9,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6E29,"es",0,3);
	split_sreg_range(0X6E42,"es",0,3);
	split_sreg_range(0X6E70,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6E8C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6EC8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6ED0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6EEB,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6EFB,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6F53,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X703E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7079,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X707E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X70AD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X70B2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X70B8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X70D8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7128,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7147,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7191,"es",0,3);
	split_sreg_range(0X71A5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X71C9,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X71D4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X71DA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X720B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X724D,"es",0,3);
	split_sreg_range(0X72A2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X72AD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X72F5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7475,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X74ED,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X755F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X756B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X75EC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7616,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X761A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X763D,"es",0,3);
	split_sreg_range(0X765D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X768A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X76A9,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X76CF,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7702,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X776D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7829,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X783B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7840,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X78A3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X78B7,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X78BC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X793B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X797C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X79A3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X79FD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7AC8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7ACE,"es",0,3);
	split_sreg_range(0X7B19,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7B7A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7BB9,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7C25,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7D0B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7D4A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7D76,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7D93,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7DD3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7E20,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7E26,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7EFA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X80AB,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X80C9,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X80D3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8112,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8162,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8179,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X81FC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X82DB,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8379,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X838B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X83B2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X83BD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X849F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X85F4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X862C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8632,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X866B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X868A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X86B8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X86CD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X86EC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X86FE,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X870F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X87DE,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X87FB,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X880B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X885E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8864,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8AF6,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8AFB,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8B12,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8B1A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8B21,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8B2B,"es",0,3);
	split_sreg_range(0X8B69,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8BC8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8BF3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8C3C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8C56,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8C63,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8C69,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8C76,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8CC7,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8CD4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8D1F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8D35,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8D39,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8D5F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8E57,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8F2B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8F40,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8F59,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8FBB,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8FCC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X903A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X90AC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X90B0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X913C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X915A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X91AA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9200,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9226,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X92C5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X92EA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X92FD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X930A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9347,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X93CA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X94CC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X94E3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X955A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9577,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9594,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X95D4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X95DF,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X95ED,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X95FE,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X961E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9654,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9691,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X969D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X96B8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X96CF,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X96DC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9806,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9857,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X98AE,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9900,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9917,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X991F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X992D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9980,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9C81,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9C99,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9E84,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9F63,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9F90,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9FBB,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA03B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA06E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA0B8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA13C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA240,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA260,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA2D2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA3BB,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA6CA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA6DE,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA6E3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA6FA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA72D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA76E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA7A1,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA7A7,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA7DC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA7E3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA7F3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA7F8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA8E2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA919,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA91D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAB4F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAB9C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XABB3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XACCD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XACDD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAD1D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAD32,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAE3F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAE67,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAE8A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAEC8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAECC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAED3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB02D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB05C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB088,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB09E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB1A7,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB1B2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB1C5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB1E8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB2AA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB2D3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB30D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB37D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB3C8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB433,"es",0,3);
	split_sreg_range(0XB485,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB58D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB593,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB5B5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB5E4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB6E0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB7DC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB7FB,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB817,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB86E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB873,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB87F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB8A5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB8AA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB8B7,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB982,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB9C4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBA00,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBA04,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBC97,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBCF1,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBD17,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBD7A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBDC3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBE05,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBE41,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBE76,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBF01,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBF80,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC086,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC09A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC0BC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC122,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC140,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC212,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC218,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC22E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC348,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC34F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC3B5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC3DE,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC415,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC5ED,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC616,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC640,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC669,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC67E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC6A8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC6CF,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC7FA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC916,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC9BB,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC9CF,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC9F3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCA22,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCA35,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCA59,"es",0XF000000000000000,3);
	split_sreg_range(0XCA65,"es",0XF000000000000000,3);
	split_sreg_range(0XCA77,"es",0XEFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCA9C,"es",0XE000000000000000,3);
	split_sreg_range(0XCAA9,"es",0XE000000000000001,3);
	split_sreg_range(0XCABB,"es",0XDFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCADF,"es",0XD000000000000000,3);
	split_sreg_range(0XCB28,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCBDF,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCC63,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCC8E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCCCA,"es",0,3);
	split_sreg_range(0XCD2C,"es",0X70,3);
	split_sreg_range(0XCD31,"es",0,3);
	split_sreg_range(0XCD3F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCDCF,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCF0B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCF22,"es",0,3);
	split_sreg_range(0XCF9D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCFA7,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCFC6,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD04C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD052,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD075,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD0A4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD0E8,"es",0,3);
	split_sreg_range(0XD120,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD128,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD16F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD176,"es",0,3);
	split_sreg_range(0XD1E8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1036,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1051,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10B7,"ss",0,3);
	split_sreg_range(0X10CA,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X3F10,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4253,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X42ED,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X43EF,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4467,"ss",0,3);
	split_sreg_range(0X7E20,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA0B0,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA132,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA295,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA2B7,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA3B3,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB306,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCD6A,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD02A,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD78,"ds",0,3);
	split_sreg_range(0XD7B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X103F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X106D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X108F,"ds",0,3);
	split_sreg_range(0X10A5,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10EA,"ds",0,3);
	split_sreg_range(0X3F10,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4130,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4185,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X418E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4193,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X419A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X419F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X41A6,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X41AA,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X41B8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X41CE,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X420A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4244,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X425B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X42C9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X42DA,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4309,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4331,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X435A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X435E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4383,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4387,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X439D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X43B3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X43D2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X43F6,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4487,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4498,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X44C1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4559,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4587,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X458E,"ds",0,3);
	split_sreg_range(0X45C2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X45CC,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X45D2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4614,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4683,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X469D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X46D5,"ds",0,3);
	split_sreg_range(0X46E4,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X47B3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X47B5,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X47CF,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X47DA,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X480E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4817,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4841,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X485F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4894,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4899,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X48A1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X48AC,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X48B2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4982,"ds",0,3);
	split_sreg_range(0X49B9,"ds",0,3);
	split_sreg_range(0X49BF,"ds",0,3);
	split_sreg_range(0X49E8,"ds",0,3);
	split_sreg_range(0X49FA,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X49FE,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4A0E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4A18,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4A56,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4A5A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4AC1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4B2B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4B2F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4B3C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4B40,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4B64,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4B68,"ds",0,3);
	split_sreg_range(0X4B72,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4B9B,"ds",0,3);
	split_sreg_range(0X4BEF,"ds",0,3);
	split_sreg_range(0X4BF2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4C32,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4CBF,"ds",0,3);
	split_sreg_range(0X4D75,"ds",0,3);
	split_sreg_range(0X4DC6,"ds",0,3);
	split_sreg_range(0X4E7E,"ds",0,3);
	split_sreg_range(0X4F94,"ds",0,3);
	split_sreg_range(0X505F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5114,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X51E6,"ds",0,3);
	split_sreg_range(0X5234,"ds",0,3);
	split_sreg_range(0X52A1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5326,"ds",0,3);
	split_sreg_range(0X5554,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X555D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5566,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5580,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5583,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5588,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5594,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X55DC,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X55E2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X55E8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X55ED,"ds",0,3);
	split_sreg_range(0X5615,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X566E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5671,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5688,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X56AB,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X570B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X57EB,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X57ED,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5897,"ds",0,3);
	split_sreg_range(0X58A6,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X58B8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5964,"ds",0,3);
	split_sreg_range(0X5A82,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5B01,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5B06,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5B0D,"ds",0,3);
	split_sreg_range(0X5B13,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5B54,"ds",0,3);
	split_sreg_range(0X5B5F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5B93,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5C56,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5CB0,"ds",0,3);
	split_sreg_range(0X5CC5,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5CCB,"ds",0,3);
	split_sreg_range(0X5CD0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5D2E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5D37,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5D3A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5D4A,"ds",0,3);
	split_sreg_range(0X5D89,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5E85,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5FD6,"ds",0,3);
	split_sreg_range(0X5FE2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5FF2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X600E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6269,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6274,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6277,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6294,"ds",0,3);
	split_sreg_range(0X6298,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6346,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6376,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6394,"ds",0,3);
	split_sreg_range(0X6399,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X645A,"ds",0,3);
	split_sreg_range(0X64A5,"ds",0,3);
	split_sreg_range(0X6555,"ds",0,3);
	split_sreg_range(0X65A7,"ds",0,3);
	split_sreg_range(0X65F8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6602,"ds",0,3);
	split_sreg_range(0X6677,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X667B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6685,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6694,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X66D7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X66FE,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6704,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6762,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X67EB,"ds",0,3);
	split_sreg_range(0X681F,"ds",0,3);
	split_sreg_range(0X69A8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X69B6,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X69EC,"ds",0,3);
	split_sreg_range(0X6AF4,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6B02,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6BAB,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6BBA,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6BE3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6C8A,"ds",0,3);
	split_sreg_range(0X6CA6,"ds",0,3);
	split_sreg_range(0X6CF8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6D93,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6DA4,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6DC0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6F0F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6FC4,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6FE0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X718F,"ds",0,3);
	split_sreg_range(0X71A3,"ds",0,3);
	split_sreg_range(0X725F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7284,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7288,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7367,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X736C,"ds",0,3);
	split_sreg_range(0X7463,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X74E2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X751D,"ds",0,3);
	split_sreg_range(0X757A,"ds",0,3);
	split_sreg_range(0X7592,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X75C6,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X75E3,"ds",0,3);
	split_sreg_range(0X7638,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7659,"ds",0,3);
	split_sreg_range(0X769B,"ds",0,3);
	split_sreg_range(0X771C,"ds",0,3);
	split_sreg_range(0X7740,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X774E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7757,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X776F,"ds",0,3);
	split_sreg_range(0X77B4,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X77BD,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X77C1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X77CA,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X77FB,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X781B,"ds",0,3);
	split_sreg_range(0X7848,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7854,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X789E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X793F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7945,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7949,"ds",0,3);
	split_sreg_range(0X79BF,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X79E2,"ds",0,3);
	split_sreg_range(0X7A0D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7AC2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7ACC,"ds",0,3);
	split_sreg_range(0X7AE6,"ds",0,3);
	split_sreg_range(0X7AF9,"ds",0,3);
	split_sreg_range(0X7B45,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7B52,"ds",0,3);
	split_sreg_range(0X7B56,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7BD7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7BF5,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7C1D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7C34,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7C46,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7C49,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7C81,"ds",0,3);
	split_sreg_range(0X7C84,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7CB0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7CB4,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7CCD,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7CE8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7CFA,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7D17,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7D37,"ds",0,3);
	split_sreg_range(0X7D40,"ds",0,3);
	split_sreg_range(0X7DEE,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7E17,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7E1F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7E20,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7E4A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7E6C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7E70,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7EAE,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7EB2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7EC0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7EC6,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7ECA,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7ED9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7EEB,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7EF6,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7F05,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7FA3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7FA9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X80A0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X80A5,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X80AA,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X80DC,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X80E5,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8225,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8282,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X829F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8585,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X85B0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X85C4,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X87B8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X87F7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8803,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8813,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8831,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X88E7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X88EA,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X88F9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8C99,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8D66,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8D7D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8D9D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8DB2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8DCA,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8DD5,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8DDB,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8E22,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8EAB,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8EB5,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8F0F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8F33,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8F38,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8F4B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8F70,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8F89,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8FA1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8FFF,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X900A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9105,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X910B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9115,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9140,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X915B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X91A8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X91D8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X91E8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9294,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X929B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X92A9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9306,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X934B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X96AA,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X96B6,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X96E9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X96F8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9701,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9705,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X974E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9764,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9767,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X978F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9796,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X97A7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9921,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9932,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9948,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9977,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9985,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X99A9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9EFF,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9F01,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9F65,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9F7C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9F82,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9F8E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9FB4,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9FB9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA0A1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA0BE,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA0DC,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA0F2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA108,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA114,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA11D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA123,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA13E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA161,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA26F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA274,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA30E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA313,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA328,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA362,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA383,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA3AF,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA3C3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA3E4,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA3F2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA402,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA49C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA4BA,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA547,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA560,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA573,"ds",0,3);
	split_sreg_range(0XA57A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA584,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA593,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA5B0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA65B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA66A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA690,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA699,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA6F5,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA729,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA776,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA7A0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA7A6,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA7E9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA809,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA829,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA82D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA886,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA88E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA8C0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA8C9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA8F0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA918,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA921,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA92D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA939,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA963,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA98E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAA48,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAA50,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAAED,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAB0E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAB7B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XABB1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAC2A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAC73,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAD31,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAD37,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAD52,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XADEB,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAE2B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAE36,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAE60,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAE76,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAE7D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAE89,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAF3F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAF78,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAFD8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAFF7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAFFF,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB047,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB06F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB076,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB080,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB0AD,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB129,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB175,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB1DC,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB1E4,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB229,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB22E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB23F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB244,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB24C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB24F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB274,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB283,"ds",0,3);
	split_sreg_range(0XB297,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB2A7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB2BB,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB2CE,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB2E3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB2EF,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB30F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB353,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB358,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB35C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB3D8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB42F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB458,"ds",0,3);
	split_sreg_range(0XB4F1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB5A7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB5CC,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB5D3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB5FC,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB620,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB6EA,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB705,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB772,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB801,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB92D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB960,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB993,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB9CB,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB9E3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB9F2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBA05,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBA5C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBA7A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBB12,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBB63,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBBDF,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBBF9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBC81,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBC8D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBCDC,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBD00,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBD38,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBD3E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBD96,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBDA5,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBE07,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBE62,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBE72,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBEBB,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBEED,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBF03,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBF0E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBF27,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBF47,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBF4F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBF6A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBF7C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC06A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC09C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC0E7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC11F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC142,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC14C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC1E4,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC21B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC223,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC257,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC2B0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC2FA,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC312,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC326,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC33D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC372,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC3D6,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC3EE,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC532,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC58F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC617,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC623,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC629,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC66A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC6C4,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC6CC,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC6F2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC6F6,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC7E3,"ds",0,3);
	split_sreg_range(0XC915,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC9B9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC9ED,"ds",0,3);
	split_sreg_range(0XC9F2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCA20,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCA48,"ds",0XF000000000000001,3);
	split_sreg_range(0XCA63,"ds",0XF000000000000000,3);
	split_sreg_range(0XCA8A,"ds",0XE000000000000002,3);
	split_sreg_range(0XCAA7,"ds",0XE000000000000001,3);
	split_sreg_range(0XCACE,"ds",0XD000000000000003,3);
	split_sreg_range(0XCB39,"ds",0,3);
	split_sreg_range(0XCBE0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCC38,"ds",0,3);
	split_sreg_range(0XCC8D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCD27,"ds",0,3);
	split_sreg_range(0XCD3A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCD40,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCDB8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCDBD,"ds",0,3);
	split_sreg_range(0XCDC9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCE19,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCE3B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCE6A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCEC6,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCED6,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCEDD,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCEF1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCF20,"ds",0,3);
	split_sreg_range(0XCF9B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCFB6,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCFEE,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD010,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD06B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD076,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD084,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD0E2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X3F10,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7E20,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X3F10,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7E20,"gs",0XFFFFFFFFFFFFFFFF,3);
}

//------------------------------------------------------------------------
// Information about all patched bytes:

static Patches(void) {
}

//------------------------------------------------------------------------
// Call all byte feature functions:

static Bytes(void) {
	Bytes_0();
	Bytes_1();
	Bytes_2();
        end_type_updating(UTP_STRUCT);
}

// End of file.
