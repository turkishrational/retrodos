DOSDATA:0000 ;
DOSDATA:0000 ; +-------------------------------------------------------------------------+
DOSDATA:0000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
DOSDATA:0000 ; |           Copyright (c) 2018 Hex-Rays, <support@hex-rays.com>           |
DOSDATA:0000 ; |                            Freeware version                             |
DOSDATA:0000 ; +-------------------------------------------------------------------------+
DOSDATA:0000 ;
DOSDATA:0000 ; Input SHA256 : F426A13B1E2E5A05BC7E56A18D551608D3BDC4CB14045324468860A3725E2084
DOSDATA:0000 ; Input MD5    : 7F03764471D91E450F960EAE084831A6
DOSDATA:0000 ; Input CRC32  : 4C51484C
DOSDATA:0000
DOSDATA:0000
DOSDATA:0000                 .386
DOSDATA:0000                 .model flat
DOSDATA:0000
DOSDATA:0000 ; ===========================================================================
DOSDATA:0000
DOSDATA:0000 ; Segment type: Regular
DOSDATA:0000 DOSDATA         segment byte public 'DOSDATA' use16
DOSDATA:0000                 assume cs:DOSDATA
DOSDATA:0000                 assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
DOSDATA:0000 byte_0          db 4 dup(0)             ; ...
DOSDATA:0004 DataVersion     dw 1
DOSDATA:0006 WinoldPatch1    db 8 dup(0)             ; ...
DOSDATA:000E MYNUM           dw 0
DOSDATA:0010 FCBLRU          dw 0                    ; ...
DOSDATA:0012 OpenLRU         dw 0
DOSDATA:0014 OEM_HANDLER     dd 0FFFFFFFFh
DOSDATA:0018 LeaveAddr       dw offset LeaveDOS
DOSDATA:001A RetryCount      dw 3                    ; ...
DOSDATA:001C RetryLoop       dw 1                    ; ...
DOSDATA:001E LastBuffer      dd 0FFFFFFFFh           ; ...
DOSDATA:0022 CONTPOS         dw 0                    ; ...
DOSDATA:0024 arena_head      dw 0                    ; ...
DOSDATA:0026 DPBHEAD         dd 0                    ; ...
DOSDATA:002A SFT_ADDR        dd SFTABL               ; ...
DOSDATA:002E BCLOCK          dd 0                    ; ...
DOSDATA:0032 BCON            dd 0                    ; ...
DOSDATA:0036 MAXSEC          dw 128                  ; ...
DOSDATA:0038 BUFFHEAD        dd 0                    ; ...
DOSDATA:003C CDSADDR         dd 0                    ; ...
DOSDATA:0040 SFTFCB          dd 0                    ; ...
DOSDATA:0044 KEEPCOUNT       dw 0
DOSDATA:0046 NUMIO           db 0                    ; ...
DOSDATA:0047 CDSCOUNT        db 0                    ; ...
DOSDATA:0048 NULDEV          dw 2 dup(0)             ; ...
DOSDATA:004C word_4C         dw 8004h                ; Null device attributes = DEVTYP|ISNULL
DOSDATA:004E off_4E          dw offset SNULDEV       ; Strategy entry point
DOSDATA:0050 off_50          dw offset INULDEV       ; Interrupt entry point
DOSDATA:0052 asc_52          db 'NUL     '           ; Name of null device
DOSDATA:005A SPLICES         db 0                    ; ...
DOSDATA:005B Special_Entries dw 0
DOSDATA:005D UU_IFS_DOS_CALL dd 0
DOSDATA:0061 ChkCopyProt     dw 0                    ; ...
DOSDATA:0063 A20OFF_PSP      dw 0                    ; ...
DOSDATA:0065                 dw 0
DOSDATA:0067                 dw 0
DOSDATA:0069 BOOTDRIVE       db 0                    ; ...
DOSDATA:006A DDMOVE          db 0                    ; ...
DOSDATA:006B EXT_MEM_SIZE    dw 0
DOSDATA:006D BufferQueue     dd 0                    ; ...
DOSDATA:0071 DirtyBufferCount dw 0                   ; ...
DOSDATA:0073 SC_CACHE_PTR    dd 0
DOSDATA:0077 SC_CACHE_COUNT  dw 0                    ; ...
DOSDATA:0079 BuffInHMA       db 0                    ; ...
DOSDATA:007A LoMemBuff       dd 0                    ; ...
DOSDATA:007E UU_BUF_EMS_FIRST_PAGE db 0, 0, 0
DOSDATA:0081 CL0FATENTRY     dw 0FFFFh               ; ...
DOSDATA:0083 IoStatFail      db 0                    ; ...
DOSDATA:0084 ALLOCMSAVE      db 0                    ; ...
DOSDATA:0085 A20OFF_COUNT    db 0                    ; ...
DOSDATA:0086 DOS_FLAG        db 0                    ; ...
DOSDATA:0087 UNPACK_OFFSET   dw 0                    ; ...
DOSDATA:0089 UMBFLAG         db 0                    ; ...
DOSDATA:008A word_8A         dw 0                    ; ...
DOSDATA:008C UMB_HEAD        dw 0FFFFh               ; ...
DOSDATA:008E START_ARENA     dw 1                    ; ...
DOSDATA:0090 JShare          dd BadCall              ; ...
DOSDATA:0094 MFT_enter       dd OKCall               ; ...
DOSDATA:0098 MFTClose        dd OKCall               ; ...
DOSDATA:009C                 dd BadCall
DOSDATA:00A0 MFTCloseP       dd BadCall              ; ...
DOSDATA:00A4 MFTCloN         dd BadCall
DOSDATA:00A8 set_block       dd BadCall              ; ...
DOSDATA:00AC clr_block       dd BadCall              ; ...
DOSDATA:00B0 chk_block       dd OKCall               ; ...
DOSDATA:00B4 MFT_get         dd BadCall
DOSDATA:00B8 ShSave          dd BadCall              ; ...
DOSDATA:00BC ShChk           dd BadCall              ; ...
DOSDATA:00C0 ShCol           dd OKCall               ; ...
DOSDATA:00C4 ShCloseFile     dd BadCall              ; ...
DOSDATA:00C8 ShSU            dd BadCall              ; ...
DOSDATA:00CC SFTABL          dd 0FFFFFFFFh           ; ...
DOSDATA:00D0                 dw 5
DOSDATA:00D2 SFT0_SFTable    db 295 dup(0)           ; ...
DOSDATA:01F9 CARPOS          db 0                    ; ...
DOSDATA:01FA STARTPOS        db 0                    ; ...
DOSDATA:01FB INBUF           db 128 dup(0)           ; ...
DOSDATA:027B CONBUF          db 131 dup(0)           ; ...
DOSDATA:02FE PFLAG           db 0                    ; ...
DOSDATA:02FF VDERFLG         db 0                    ; ...
DOSDATA:0300 CHARCO          db 3                    ; ...
DOSDATA:0301 chSwitch        db '/'
DOSDATA:0302 AllocMethod     db 0                    ; ...
DOSDATA:0303 fShare          db 0                    ; ...
DOSDATA:0304 DIFFNAM         db 1
DOSDATA:0305 MYNAME          db 10h dup(20h)         ; ...
DOSDATA:0315 CritPatch       dw offset redir_patch   ; ...
DOSDATA:0317                 dw offset redir_patch
DOSDATA:0319                 dw offset redir_patch
DOSDATA:031B                 dw offset redir_patch
DOSDATA:031D                 dw 0
DOSDATA:031F                 db 90h                  ; SWAPPABLE DATA AREA
DOSDATA:0320 ERRORMODE       db 0                    ; ...
DOSDATA:0320                                         ; critical error flag
DOSDATA:0321 INDOS           db 0                    ; ...
DOSDATA:0322 WPERR           db 0FFh                 ; ...
DOSDATA:0322                                         ; drive on which current critical error occurred
DOSDATA:0323 EXTERR_LOCUS    db 0                    ; ...
DOSDATA:0323                                         ; locus of last error
DOSDATA:0324 EXTERR          dw 0                    ; ...
DOSDATA:0324                                         ; extended error code of last error
DOSDATA:0326 EXTERR_ACTION   db 0                    ; ...
DOSDATA:0326                                         ; suggested action for last error
DOSDATA:0327 EXTERR_CLASS    db 0                    ; ...
DOSDATA:0327                                         ; class of last error
DOSDATA:0328 EXTERRPT        dd 0                    ; ...
DOSDATA:0328                                         ; Extended Error pointer
DOSDATA:032C DMAADD          dd 80h                  ; ...
DOSDATA:032C                                         ; current DTA (Disk Transfer Address)
DOSDATA:0330 CurrentPDB      dw 0                    ; ...
DOSDATA:0332 ConC_Spsave     dw 0                    ; ...
DOSDATA:0334 exit_code       dw 0                    ; ...
DOSDATA:0336 CURDRV          db 0                    ; ...
DOSDATA:0337 CNTCFLAG        db 0                    ; ...
DOSDATA:0338                 db 0
DOSDATA:0339                 db 0
DOSDATA:033A USER_IN_AX      dw 0                    ; ...
DOSDATA:033C PROC_ID         dw 0                    ; ...
DOSDATA:033E USER_ID         dw 0                    ; ...
DOSDATA:0340 FirstArena      dw 0                    ; ...
DOSDATA:0342 BestArena       dw 0                    ; ...
DOSDATA:0344 LastArena       dw 0                    ; ...
DOSDATA:0346 ENDMEM          dw 0                    ; ...
DOSDATA:0348 LASTENT         dw 0                    ; ...
DOSDATA:034A FAILERR         db 0                    ; ...
DOSDATA:034B ALLOWED         db 0                    ; ...
DOSDATA:034C NoSetDir        db 0                    ; ...
DOSDATA:034D DidCTRLC        db 0                    ; ...
DOSDATA:034E SpaceFlag       db 0                    ; ...
DOSDATA:034F                 db 90h
DOSDATA:0350 DAY             db 0                    ; ...
DOSDATA:0351 MONTH           db 0                    ; ...
DOSDATA:0352 YEAR            dw 0                    ; ...
DOSDATA:0352                                         ; YEAR (and CENTURY)
DOSDATA:0354 DAYCNT          dw 0FFFFh               ; ...
DOSDATA:0356 WEEKDAY         db 0                    ; ...
DOSDATA:0357 CONSWAP         db 0                    ; ...
DOSDATA:0358 IDLEINT         dw 1                    ; ...
DOSDATA:035A DEVCALL_REQLEN  db 0                    ; ...
DOSDATA:035A                                         ; offset DEVCALL
DOSDATA:035B DEVCALL_REQUNIT db 0                    ; ...
DOSDATA:035C DEVCALL_REQFUNC db 0                    ; ...
DOSDATA:035D DEVCALL_REQSTAT dw 0                    ; ...
DOSDATA:035F                 db 8 dup(0)
DOSDATA:0367 CALLUNIT        db 0                    ; ...
DOSDATA:0368 CALLBR          db 0                    ; ...
DOSDATA:0369 CALLVIDM        db 0                    ; ...
DOSDATA:036A CALLXAD_2       dw 0                    ; ...
DOSDATA:036C CALLBPB         dw 0                    ; ...
DOSDATA:036E CALLSSEC        dw 0                    ; ...
DOSDATA:0370 CALLVIDRW       dd 0                    ; ...
DOSDATA:0374 CALLNEWSC       dw 2 dup(0)             ; ...
DOSDATA:0378 CALLDEVAD       dd 0                    ; ...
DOSDATA:037C IOCALL          db 0                    ; ...
DOSDATA:037D IOCALL_REQUNIT  db 0                    ; ...
DOSDATA:037E IOCALL_REQFUNC  db 0                    ; ...
DOSDATA:037F IOCALL_REQSTAT  dw 0                    ; ...
DOSDATA:0381                 db 8 dup(0)
DOSDATA:0389 IOMED           db 0                    ; ...
DOSDATA:038A IOXAD           dd 0                    ; ...
DOSDATA:038E IOSCNT          dw 0                    ; ...
DOSDATA:0390 IOSSEC          dw 0                    ; ...
DOSDATA:0392 DSKSTCALL       db 14                   ; ...
DOSDATA:0393                 db 0
DOSDATA:0394 DSKSTCOM        db 5                    ; ...
DOSDATA:0395 DSKSTST         dw 0                    ; ...
DOSDATA:0397                 db 8 dup(0)
DOSDATA:039F DSKCHRET        db 0                    ; ...
DOSDATA:03A0 DEVIOBUF_PTR    dw offset DEVIOBUF
DOSDATA:03A2 DOSSEG_INIT     dw 0                    ; ...
DOSDATA:03A4 DSKSTCNT        dw 1                    ; ...
DOSDATA:03A6                 dw 0
DOSDATA:03A8 CreatePDB       db 0                    ; ...
DOSDATA:03A9 Lock_Buffer     dd 0                    ; ...
DOSDATA:03AD                 dd 0
DOSDATA:03B1 IOCTL_drvnum    db 90h                  ; ...
DOSDATA:03B2 USERNUM         dd 0                    ; ...
DOSDATA:03B6 TIMEBUF         dw 3 dup(0)             ; ...
DOSDATA:03BC DEVIOBUF        dw 0                    ; ...
DOSDATA:03BE OPENBUF         db 128 dup(0)           ; ...
DOSDATA:043E RENBUF          db 128 dup(0)           ; ...
DOSDATA:04BE SEARCHBUF       db 53 dup(0)            ; ...
DOSDATA:04F3 DUMMYCDS        db 88 dup(0)            ; ...
DOSDATA:054B NAME1           db 12 dup(0)            ; ...
DOSDATA:0557 NAME2           db 13 dup(0)            ; ...
DOSDATA:0564 DESTSTART       dw 0                    ; ...
DOSDATA:0566                 db 5 dup(0)
DOSDATA:056B ATTRIB          db 0                    ; ...
DOSDATA:056C EXTFCB          db 0                    ; ...
DOSDATA:056D SATTRIB         db 0                    ; ...
DOSDATA:056E OPEN_ACCESS     db 0                    ; ...
DOSDATA:056F FOUNDDEL        db 0                    ; ...
DOSDATA:0570 FOUND_DEV       db 0                    ; ...
DOSDATA:0571 FSPLICE         db 0                    ; ...
DOSDATA:0572 FSHARING        db 0                    ; ...
DOSDATA:0573 SECCLUSPOS      db 0                    ; ...
DOSDATA:0574 TRANS           db 0                    ; ...
DOSDATA:0575 READOP          db 0                    ; ...
DOSDATA:0576 THISDRV         db 0                    ; ...
DOSDATA:0577 CLUSFAC         db 0                    ; ...
DOSDATA:0578 CLUSSPLIT       db 0                    ; ...
DOSDATA:0579 INSMODE         db 0                    ; ...
DOSDATA:057A CMETA           db 0                    ; ...
DOSDATA:057B VOLID           db 0                    ; ...
DOSDATA:057C EXIT_TYPE       dw 0                    ; ...
DOSDATA:057E CREATING        db 0                    ; ...
DOSDATA:057F DELALL          db 0                    ; ...
DOSDATA:0580 EXITHOLD        dd 0
DOSDATA:0584 USER_SP         dw 0                    ; ...
DOSDATA:0586 USER_SS         dw 0                    ; ...
DOSDATA:0588 CONTSTK         dw 0
DOSDATA:058A THISDPB         dd 0                    ; ...
DOSDATA:058E CLUSSAVE        dw 0                    ; ...
DOSDATA:0590 CLUSSEC         dd 0                    ; ...
DOSDATA:0594 PREREAD         dw 0                    ; ...
DOSDATA:0596 FATBYT          dw 0                    ; ...
DOSDATA:0598 FATBYTE         dw 0                    ; ...
DOSDATA:059A DEVPT           dd 0                    ; ...
DOSDATA:059E THISSFT         dd 0                    ; ...
DOSDATA:05A2 THISCDS         dd 0                    ; ...
DOSDATA:05A6 THISFCB         dd 0                    ; ...
DOSDATA:05AA SFN             dw 0FFFFh               ; ...
DOSDATA:05AC JFN             dw 0                    ; ...
DOSDATA:05AE PJFN            dd 0                    ; ...
DOSDATA:05B2 WFP_START       dw 0                    ; ...
DOSDATA:05B4 REN_WFP         dw 0                    ; ...
DOSDATA:05B6 CURR_DIR_END    dw 0                    ; ...
DOSDATA:05B8 NEXTADD         dw 0                    ; ...
DOSDATA:05BA LASTPOS         dw 0                    ; ...
DOSDATA:05BC CLUSNUM         dw 0                    ; ...
DOSDATA:05BE DIRSEC          dw 2 dup(0)             ; ...
DOSDATA:05C2 DIRSTART        dw 0                    ; ...
DOSDATA:05C4 SECPOS          dd 0                    ; ...
DOSDATA:05C8 VALSEC          dw 2 dup(0)             ; ...
DOSDATA:05CC BYTSECPOS       dw 0                    ; ...
DOSDATA:05CE BYTPOS          dd 0                    ; ...
DOSDATA:05D2 BYTCNT1         dw 0                    ; ...
DOSDATA:05D4                 dw 0
DOSDATA:05D6 SECCNT          dw 0                    ; ...
DOSDATA:05D8 ENTFREE         dw 0                    ; ...
DOSDATA:05DA ENTLAST         dw 0                    ; ...
DOSDATA:05DC NXTCLUSNUM      dw 0                    ; ...
DOSDATA:05DE GROWCNT         dd 0                    ; ...
DOSDATA:05E2 CURBUF          dd 0                    ; ...
DOSDATA:05E6 CONSFT          dd 0                    ; ...
DOSDATA:05EA SAVEBX          dw 0                    ; ...
DOSDATA:05EC SAVEDS          dw 0                    ; ...
DOSDATA:05EE RESTORE_TMP     dw 0                    ; ...
DOSDATA:05F0 NSS             dw 0                    ; ...
DOSDATA:05F2 NSP             dw 0                    ; ...
DOSDATA:05F4 EXTOPEN_FLAG    dw 0                    ; ...
DOSDATA:05F6 EXTOPEN_ON      db 0                    ; ...
DOSDATA:05F7 EXTOPEN_IO_MODE dw 0                    ; ...
DOSDATA:05F9 SAVE_DI         dw 0                    ; ...
DOSDATA:05FB SAVE_ES         dw 0                    ; ...
DOSDATA:05FD SAVE_DX         dw 0                    ; ...
DOSDATA:05FF SAVE_CX         dw 0                    ; ...
DOSDATA:0601 SAVE_BX         dw 0                    ; ...
DOSDATA:0603 SAVE_SI         dw 0                    ; ...
DOSDATA:0605 SAVE_DS         dw 0                    ; ...
DOSDATA:0607 HIGH_SECTOR     dw 0                    ; ...
DOSDATA:0609 OffsetMagicPatch dw offset MagicPatch   ; ...
DOSDATA:060B DISK_FULL       db 0                    ; ...
DOSDATA:060C TEMP_VAR        dw 0                    ; ...
DOSDATA:060E TEMP_VAR2       dw 0                    ; ...
DOSDATA:0610 DrvErr          db 0                    ; ...
DOSDATA:0611 DOS34_FLAG      dw 0                    ; ...
DOSDATA:0613 dword_613       dd 0                    ; ...
DOSDATA:0617                 dd 0
DOSDATA:061B AbsRdWr_SS      dw 0                    ; ...
DOSDATA:061D AbsRdWr_SP      dw 0                    ; ...
DOSDATA:061F                 db 0
DOSDATA:0620 RENAMEDMA       db 384 dup(0)           ; ...
DOSDATA:07A0 AUXSTACK        db 384 dup(0)           ; ...
DOSDATA:0920 DSKSTACK        db '@#IBM:12.01.2003.build_1.32#@ IBMDOS.COM(USA)',0 ; ...
DOSDATA:094E                 db 338 dup(0)           ; IOSTACK (just after DSKSTACK)
DOSDATA:0AA0 PRINTER_FLAG    db 0                    ; ...
DOSDATA:0AA1 VOLCHNG_FLAG    db 0FFh                 ; ...
DOSDATA:0AA2                 db 0
DOSDATA:0AA3 TEMP_DOSLOC     dw 0FFFFh               ; ...
DOSDATA:0AA5 LNE_COUNT       dw 0                    ; ...
DOSDATA:0AA7                 db 0Eh dup(0)
DOSDATA:0AB5 ENTLAST_PREV    dw 0                    ; ...
DOSDATA:0AB7                 db 24h dup(0)
DOSDATA:0ADB absdrw_extd     db 0                    ; ...
DOSDATA:0ADC DIRSTART_HW     dw 0                    ; ...
DOSDATA:0ADE CLUSNUM_HW      dw 0                    ; ...
DOSDATA:0AE0 NXTCLUSNUM_HW   dw 0                    ; ...
DOSDATA:0AE2 LASTPOS_HW      dw 0                    ; ...
DOSDATA:0AE4 FATBYT_HW       dw 0                    ; ...
DOSDATA:0AE6 DESTSTART_HW    dw 0                    ; ...
DOSDATA:0AE8 CLUSTNUM_HW     dw 0                    ; ...
DOSDATA:0AEA CLUSDATA_HW     dw 0                    ; ...
DOSDATA:0AEA                                         ; (0 = release, -1 = allocate) INPUT for PACK
DOSDATA:0AEC CCONTENT_HW     dw 0                    ; ...
DOSDATA:0AEC                                         ; UNPACK output
DOSDATA:0AEE ROOTCLUST_HW    dw 0                    ; ...
DOSDATA:0AF0 CCOUNT_HW       dw 0                    ; ...
DOSDATA:0AF0                                         ; for ALLOCATE
DOSDATA:0AF2 CLUSTERS_HW     dw 0                    ; ...
DOSDATA:0AF4                 dw 0
DOSDATA:0AF6                 dw 0
DOSDATA:0AF8 CLSKIP_HW       dw 0                    ; ...
DOSDATA:0AFA UCASE_TAB       dw 128                  ; ...
DOSDATA:0AFC UCASE_TAB_2     db 128,154, 69, 65,142, 65,143,128 ; ...
DOSDATA:0AFC                 db  69, 69, 69, 73, 73, 73,142,143
DOSDATA:0AFC                 db 144,146,146, 79,153, 79, 85, 85
DOSDATA:0AFC                 db  89,153,154,155,156,157,158,159
DOSDATA:0AFC                 db  65, 73, 79, 85,165,165,166,167
DOSDATA:0AFC                 db 168,169,170,171,172,173,174,175
DOSDATA:0AFC                 db 176,177,178,179,180,181,182,183
DOSDATA:0AFC                 db 184,185,186,187,188,189,190,191
DOSDATA:0AFC                 db 192,193,194,195,196,197,198,199
DOSDATA:0AFC                 db 200,201,202,203,204,205,206,207
DOSDATA:0AFC                 db 208,209,210,211,212,213,214,215
DOSDATA:0AFC                 db 216,217,218,219,220,221,222,223
DOSDATA:0AFC                 db 224,225,226,227,228,229,230,231
DOSDATA:0AFC                 db 232,233,234,235,236,237,238,239
DOSDATA:0AFC                 db 240,241,242,243,244,245,246,247
DOSDATA:0AFC                 db 248,249,250,251,252,253,254,255
DOSDATA:0B7C FILE_UCASE_TAB  dw 128                  ; ...
DOSDATA:0B7E FILE_UCASE_TAB_2 db 128,154, 69, 65,142, 65,143,128 ; ...
DOSDATA:0B7E                 db  69, 69, 69, 73, 73, 73,142,143
DOSDATA:0B7E                 db 144,146,146, 79,153, 79, 85, 85
DOSDATA:0B7E                 db  89,153,154,155,156,157,158,159
DOSDATA:0B7E                 db  65, 73, 79, 85,165,165,166,167
DOSDATA:0B7E                 db 168,169,170,171,172,173,174,175
DOSDATA:0B7E                 db 176,177,178,179,180,181,182,183
DOSDATA:0B7E                 db 184,185,186,187,188,189,190,191
DOSDATA:0B7E                 db 192,193,194,195,196,197,198,199
DOSDATA:0B7E                 db 200,201,202,203,204,205,206,207
DOSDATA:0B7E                 db 208,209,210,211,212,213,214,215
DOSDATA:0B7E                 db 216,217,218,219,220,221,222,223
DOSDATA:0B7E                 db 224,225,226,227,228,229,230,231
DOSDATA:0B7E                 db 232,233,234,235,236,237,238,239
DOSDATA:0B7E                 db 240,241,242,243,244,245,246,247
DOSDATA:0B7E                 db 248,249,250,251,252,253,254,255
DOSDATA:0BFE COLLATE_TAB     dw 256                  ; ...
DOSDATA:0C00                 db  0, 1, 2, 3, 4, 5, 6, 7
DOSDATA:0C00                 db  8, 9,10,11,12,13,14,15
DOSDATA:0C00                 db 16,17,18,19,20,21,22,23
DOSDATA:0C00                 db 24,25,26,27,28,29,30,31
DOSDATA:0C20                 db ' !"#$%&',27h,'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ'
DOSDATA:0C20                 db '[\]^_`ABCDEFGHIJKLMNOPQRSTUVWXYZ{|}~'
DOSDATA:0C7F                 db 127
DOSDATA:0C80                 db 'CUEAAAACEEEIIIAAEAAOOOUUYOU$$$$$AIOUNN'
DOSDATA:0CA6                 db 166,167
DOSDATA:0CA8                 db '?'
DOSDATA:0CA9                 db 169,170,171,172
DOSDATA:0CAD                 db '!','"','"'
DOSDATA:0CB0                 db 176,177,178,179,180,181,182,183
DOSDATA:0CB0                 db 184,185,186,187,188,189,190,191
DOSDATA:0CB0                 db 192,193,194,195,196,197,198,199
DOSDATA:0CB0                 db 200,201,202,203,204,205,206,207
DOSDATA:0CB0                 db 208,209,210,211,212,213,214,215
DOSDATA:0CB0                 db 216,217,218,219,220,221,222,223
DOSDATA:0CB0                 db 224
DOSDATA:0CE1                 db 'S'
DOSDATA:0CE2                 db 226,227,228,229,230,231,232,233
DOSDATA:0CE2                 db 234,235,236,237,238,239,240,241
DOSDATA:0CE2                 db 242,243,244,245,246,247,248,249
DOSDATA:0CE2                 db 250,251,252,253,254,255
DOSDATA:0D00 DBCS_TAB        dw 0                    ; ...
DOSDATA:0D02 DBCS_TAB_2      db 16 dup(0)            ; ...
DOSDATA:0D12 IBMDOSVERSION   db 7
DOSDATA:0D13                 db 10                   ; MSVERSION
DOSDATA:0D14 YRTAB           db 200,166,200,165,200,165,200,165 ; ...
DOSDATA:0D1C MONTAB          db 31                   ; ...
DOSDATA:0D1D february        db 28                   ; ...
DOSDATA:0D1E                 db 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
DOSDATA:0D28 FILE_CHAR_TAB   dw 22                   ; ...
DOSDATA:0D28                                         ; length
DOSDATA:0D2A                 db 1                    ; include all
DOSDATA:0D2B                 db 0
DOSDATA:0D2C                 db 255
DOSDATA:0D2D                 db 0                    ; exclude 0 - 20h
DOSDATA:0D2E                 db 0
DOSDATA:0D2F                 db 20h
DOSDATA:0D30                 db 2
DOSDATA:0D31                 db 14                   ; exclude 14 special
DOSDATA:0D32                 db '."/\[]:|<>+=;,'
DOSDATA:0D40                 db 24 dup(0)            ; reserved
DOSDATA:0D58 SysInitTable    dw offset DPBHEAD       ; ...
DOSDATA:0D58                                         ; SYSINITVARS
DOSDATA:0D5A                 dw 0
DOSDATA:0D5C                 dw offset COUNTRY_CDPG
DOSDATA:0D5E                 dw 0
DOSDATA:0D60                 db 3 dup(0)
DOSDATA:0D63 TEMPSEG         dw 0                    ; ...
DOSDATA:0D65 redir_patch     db 0                    ; ...
DOSDATA:0D66 DosHasHMA       db 0                    ; ...
DOSDATA:0D67 FixExePatch     dw 0                    ; ...
DOSDATA:0D69 UnknownPatch    dw 0                    ; ...
DOSDATA:0D6B ; ---------------------------------------------------------------------------
DOSDATA:0D6B
DOSDATA:0D6B MAP_CASE:                               ; ...
DOSDATA:0D6B                 cmp     al, 80h
DOSDATA:0D6D                 jb      short L_RET     ; Map no chars below 80H ever
DOSDATA:0D6F
DOSDATA:0D6F Map1:                                   ;
DOSDATA:0D6F                 sub     al, 80h         ; Turn into index value
DOSDATA:0D71                 push    ds
DOSDATA:0D72                 push    bx
DOSDATA:0D73                 mov     bx, offset UCASE_TAB_2 ; UCASE_TAB+2
DOSDATA:0D76                 push    cs
DOSDATA:0D77                 pop     ds
DOSDATA:0D78                 assume ds:DOSCODE
DOSDATA:0D78                 xlat                    ; Get upper case character
DOSDATA:0D79                 pop     bx
DOSDATA:0D7A                 pop     ds
DOSDATA:0D7B                 assume ds:nothing
DOSDATA:0D7B
DOSDATA:0D7B L_RET:                                  ; ...
DOSDATA:0D7B                 retf
DOSDATA:0D7B ; ---------------------------------------------------------------------------
DOSDATA:0D7C                 db 0
DOSDATA:0D7D                 db 0
DOSDATA:0D7E                 db 0
DOSDATA:0D7F                 dw 0
DOSDATA:0D81                 db 0
DOSDATA:0D82                 db 5 dup(0)
DOSDATA:0D87 byte_D87        db 23 dup(0)
DOSDATA:0D9E USER_SP_2F      dw offset FAKE_STACK_2F ; ...
DOSDATA:0DA0 FAKE_STACK_2F   dw 14 dup(0)            ; ...
DOSDATA:0DA0                                         ; Packet_Temp
DOSDATA:0DBC SCAN_FLAG       db 0                    ; ...
DOSDATA:0DBD DATE_FLAG       dw 0                    ; ...
DOSDATA:0DBF AbsDskErr       dw 0                    ; ...
DOSDATA:0DBF                                         ; Storage for Abs dsk read/write err
DOSDATA:0DC1 NO_NAME_ID      db 'NO NAME    '        ; ...
DOSDATA:0DC1                                         ; null media id
DOSDATA:0DCC                 db    0
DOSDATA:0DCD ; ---------------------------------------------------------------------------
DOSDATA:0DCD
DOSDATA:0DCD SNULDEV:                                ; ...
DOSDATA:0DCD                 or      word ptr es:[bx+3], 100h ; [es:bx+SRHEAD.REQSTAT+1],(STDON>>8)
DOSDATA:0DD3
DOSDATA:0DD3 INULDEV:                                ; ...
DOSDATA:0DD3                 retf
DOSDATA:0DD3 ; ---------------------------------------------------------------------------
DOSDATA:0DD4                 db 0
DOSDATA:0DD5 UmbSave2        db 5 dup(0)             ; ...
DOSDATA:0DDA UmbSaveFlag     db 0                    ; ...
DOSDATA:0DDB ERR_TABLE_21    db    1,   7,   4,0FFh  ; ...
DOSDATA:0DDB                 db    2,   8,   3,   2  ; CLASS ACTION and LOCUS info for the INT 21h errors
DOSDATA:0DDB                 db    3,   8,   3,   2
DOSDATA:0DDB                 db    4,   1,   4,   1
DOSDATA:0DDB                 db    5,   3,   3,0FFh
DOSDATA:0DDB                 db    6,   7,   4,   1
DOSDATA:0DDB                 db    7,   7,   5,   5
DOSDATA:0DDB                 db    8,   1,   4,   5
DOSDATA:0DDB                 db    9,   7,   4,   5
DOSDATA:0DDB                 db  0Ah,   7,   4,   5
DOSDATA:0DDB                 db  0Bh,   9,   3,   1
DOSDATA:0DDB                 db  0Ch,   7,   4,   1
DOSDATA:0DDB                 db  0Dh,   9,   4,   1
DOSDATA:0DDB                 db  0Fh,   8,   3,   2
DOSDATA:0DDB                 db  10h,   3,   3,   2
DOSDATA:0DDB                 db  11h, 0Dh,   3,   2
DOSDATA:0DDB                 db  12h,   8,   3,   2
DOSDATA:0DDB                 db  50h, 0Ch,   3,   2
DOSDATA:0DDB                 db  20h, 0Ah,   2,   2
DOSDATA:0DDB                 db  21h, 0Ah,   2,   2
DOSDATA:0DDB                 db  54h,   1,   4,0FFh
DOSDATA:0DDB                 db  56h,   3,   3,   1
DOSDATA:0DDB                 db  52h,   1,   4,   2
DOSDATA:0DDB                 db  32h,   9,   3,   3
DOSDATA:0DDB                 db  55h, 0Ch,   3,   3
DOSDATA:0DDB                 db  57h,   9,   3,   1
DOSDATA:0DDB                 db  53h, 0Dh,   4,   1
DOSDATA:0DDB                 db  24h,   1,   4,   5
DOSDATA:0DDB                 db  26h,   1,   4,   1
DOSDATA:0DDB                 db  27h,   1,   4,   1
DOSDATA:0DDB                 db  5Ah, 0Dh,   4,   2
DOSDATA:0DDB                 db 0FFh,0FFh,0FFh,0FFh
DOSDATA:0E5B ERR_TABLE_24    db  13h, 0Bh,   7,   2  ; ...
DOSDATA:0E5B                 db  14h,   4,   5,   1  ; CLASS ACTION and LOCUS info for the INT 24h errors
DOSDATA:0E5B                 db  15h,   5,   7,0FFh
DOSDATA:0E5B                 db  16h,   4,   5,   1
DOSDATA:0E5B                 db  17h, 0Bh,   4,   2
DOSDATA:0E5B                 db  18h,   4,   5,   1
DOSDATA:0E5B                 db  19h,   5,   1,   2
DOSDATA:0E5B                 db  1Ah, 0Bh,   7,   2
DOSDATA:0E5B                 db  1Bh, 0Bh,   4,   2
DOSDATA:0E5B                 db  1Ch,   2,   7,   4
DOSDATA:0E5B                 db  1Dh,   5,   4,0FFh
DOSDATA:0E5B                 db  1Eh,   5,   4,0FFh
DOSDATA:0E5B                 db  1Fh, 0Dh,   4,0FFh
DOSDATA:0E5B                 db  20h, 0Ah,   2,   2
DOSDATA:0E5B                 db  21h, 0Ah,   2,   2
DOSDATA:0E5B                 db  22h, 0Bh,   7,   2
DOSDATA:0E5B                 db  32h,   9,   3,   3
DOSDATA:0E5B                 db  23h,   7,   4,   1
DOSDATA:0E5B                 db  24h,   1,   4,   5
DOSDATA:0E5B                 db 0FFh, 0Dh,   5,0FFh
DOSDATA:0EAB ErrMap24        db  13h, 14h, 15h, 16h, 17h, 18h, 19h, 1Ah ; ...
DOSDATA:0EAB                 db  1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 1Fh, 1Fh, 22h
DOSDATA:0EBB SPECIAL_VERSION dw 0                    ; ...
DOSDATA:0EBD OLD_FIRSTCLUS   dw 0                    ; ...
DOSDATA:0EBF exec_init_SP    dd 0                    ; ...
DOSDATA:0EC3 exec_init_IP    dd 0                    ; ...
DOSDATA:0EC7                 dw 0
DOSDATA:0EC9                 dw 0
DOSDATA:0ECB                 dw 0
DOSDATA:0ECD                 dw 0
DOSDATA:0ECF                 dw 0
DOSDATA:0ED1                 dw 0
DOSDATA:0ED3                 dw 0
DOSDATA:0ED5                 dw 0
DOSDATA:0ED7                 dw 0
DOSDATA:0ED9                 dw 0
DOSDATA:0EDB                 dw 0
DOSDATA:0EDD                 dw 0
DOSDATA:0EDF                 dw 0
DOSDATA:0EE1 Win386_Info     db 4, 0                 ; ...
DOSDATA:0EE1                                         ; WIN386_SIS version
DOSDATA:0EE3                 dd 0                    ; .Next_Dev_Ptr
DOSDATA:0EE7 Win386_Inf_Virt_Dev_Ptr dd 0            ; ...
DOSDATA:0EE7                                         ; .Virt_Dev_File_Ptr
DOSDATA:0EEB                 dd 0                    ; .Reference_Data
DOSDATA:0EEF Instance_Data_Ptr dw offset Instance_Table
DOSDATA:0EF1 word_EF1        dw 0                    ; ...
DOSDATA:0EF3                 dw offset Unknown_Table
DOSDATA:0EF5                 dw 0                    ; Win386_IIS.size
DOSDATA:0EF7 Instance_Table  dw offset CONTPOS       ; ...
DOSDATA:0EF9 InsTBL_CONTPOS_seg dw 0                 ; ...
DOSDATA:0EFB                 dw 2
DOSDATA:0EFD                 dw offset BCON
DOSDATA:0EFF                 dw 0
DOSDATA:0F01                 dw 4
DOSDATA:0F03                 dw offset CARPOS
DOSDATA:0F05                 dw 0
DOSDATA:0F07                 dw 106h
DOSDATA:0F09                 dw offset CHARCO
DOSDATA:0F0B                 dw 0
DOSDATA:0F0D                 dw 1
DOSDATA:0F0F                 dw offset exec_init_SP
DOSDATA:0F11                 dw 0
DOSDATA:0F13                 dw 22h
DOSDATA:0F15                 dw offset UMBFLAG
DOSDATA:0F17                 dw 0
DOSDATA:0F19                 dw 1
DOSDATA:0F1B                 dw offset UMB_HEAD
DOSDATA:0F1D                 dw 0
DOSDATA:0F1F                 dw 2
DOSDATA:0F21                 dw offset DOS_FLAG
DOSDATA:0F23                 dw 0C9h
DOSDATA:0F25                 dw 1
DOSDATA:0F27                 dw offset INDOS_FLAG    ; what for ?
DOSDATA:0F29                 dw 0C9h
DOSDATA:0F2B                 dw 1
DOSDATA:0F2D                 dw offset DEVIO_IN_PROGRESS ; "devio call in progress" status flag ptr
DOSDATA:0F2F                 dw 0C9h
DOSDATA:0F31                 dw 1
DOSDATA:0F33                 dw 0
DOSDATA:0F35                 dw 0
DOSDATA:0F37                 dw 0FFFFh
DOSDATA:0F39                 dw 0FFFFh
DOSDATA:0F3B CL0FATENTRY_HW  dw 0FFFFh               ; ...
DOSDATA:0F3D Unknown_Table   dw 0                    ; ...
DOSDATA:0F3F                 dw 0C9h
DOSDATA:0F41                 dw offset SFTABL
DOSDATA:0F43                 dw offset CARPOS
DOSDATA:0F45                 dw 0C9h
DOSDATA:0F47                 dw offset UNKNOWN1      ; ?
DOSDATA:0F49                 dw 0
DOSDATA:0F4B                 dw 0
DOSDATA:0F4D Win386_DOSVars  db 5                    ; ...
DOSDATA:0F4D                                         ; Major_version
DOSDATA:0F4E                 db 0                    ; Minor_version
DOSDATA:0F4F                 dw offset SAVEDS
DOSDATA:0F51                 dw offset SAVEBX
DOSDATA:0F53                 dw offset INDOS
DOSDATA:0F55                 dw offset USER_ID
DOSDATA:0F57                 dw offset CritPatch
DOSDATA:0F59                 dw offset UMB_HEAD
DOSDATA:0F5B IsWin386        db 2 dup(0)             ; ...
DOSDATA:0F5D                 db 36h,0F6h, 6,20h, 3,0FFh ; Patch for Sidekick
DOSDATA:0F63                 db 75h, 0Ch
DOSDATA:0F65                 db 36h, 0FFh, 36h, 58h, 3
DOSDATA:0F6A                 db 0CDh, 28h
DOSDATA:0F6C                 db 80h,3Eh,20h, 3, 0    ; Patch for PortOfEntry
DOSDATA:0F71                 db 75h, 37h
DOSDATA:0F73                 db 0BCh, 0A0h, 0Ah
DOSDATA:0F76 LocalSFT        dd 0                    ; ...
DOSDATA:0F7A DOSINTTABLE     dd DIVOV                ; ...
DOSDATA:0F7E DOSINTTABLE_4   dd QUIT                 ; ...
DOSDATA:0F82 DOSINTTABLE_8   dd COMMAND              ; ...
DOSDATA:0F86 DOSINTTABLE_12  dd ABSDRD               ; ...
DOSDATA:0F8A DOSINTTABLE_16  dd ABSDWRT              ; ...
DOSDATA:0F8E DOSINTTABLE_20  dd stay_resident        ; ...
DOSDATA:0F92 DOSINTTABLE_24  dd INT2F                ; ...
DOSDATA:0F96 DOSINTTABLE_28  dd CALL_ENTRY           ; ...
DOSDATA:0F9A SS_Save         dw 0                    ; ...
DOSDATA:0F9C SP_Save         dw 0                    ; ...
DOSDATA:0F9E ; ---------------------------------------------------------------------------
DOSDATA:0F9E
DOSDATA:0F9E ldivov:                                 ; ...
DOSDATA:0F9E                 jmp     short divov_cont
DOSDATA:0FA0 ; ---------------------------------------------------------------------------
DOSDATA:0FA0                 call    EnsureA20ON
DOSDATA:0FA3
DOSDATA:0FA3 divov_cont:                             ; ...
DOSDATA:0FA3                 jmp     cs:DOSINTTABLE
DOSDATA:0FA8 ; ---------------------------------------------------------------------------
DOSDATA:0FA8
DOSDATA:0FA8 lquit:                                  ; ...
DOSDATA:0FA8                 jmp     short quit_cont
DOSDATA:0FAA ; ---------------------------------------------------------------------------
DOSDATA:0FAA                 call    EnsureA20ON
DOSDATA:0FAD
DOSDATA:0FAD quit_cont:                              ; ...
DOSDATA:0FAD                 jmp     cs:DOSINTTABLE_4
DOSDATA:0FB2 ; ---------------------------------------------------------------------------
DOSDATA:0FB2
DOSDATA:0FB2 lcommand:                               ; ...
DOSDATA:0FB2                 jmp     short command_cont
DOSDATA:0FB4 ; ---------------------------------------------------------------------------
DOSDATA:0FB4                 call    EnsureA20ON
DOSDATA:0FB7
DOSDATA:0FB7 command_cont:                           ; ...
DOSDATA:0FB7                 jmp     cs:DOSINTTABLE_8
DOSDATA:0FBC ; ---------------------------------------------------------------------------
DOSDATA:0FBC
DOSDATA:0FBC labsdrd:                                ; ...
DOSDATA:0FBC                 jmp     short absdrd_cont
DOSDATA:0FBE ; ---------------------------------------------------------------------------
DOSDATA:0FBE                 call    EnsureA20ON
DOSDATA:0FC1
DOSDATA:0FC1 absdrd_cont:                            ; ...
DOSDATA:0FC1                 jmp     cs:DOSINTTABLE_12
DOSDATA:0FC6 ; ---------------------------------------------------------------------------
DOSDATA:0FC6
DOSDATA:0FC6 labsdwrt:                               ; ...
DOSDATA:0FC6                 jmp     short absdwrt_cont
DOSDATA:0FC8 ; ---------------------------------------------------------------------------
DOSDATA:0FC8                 call    EnsureA20ON
DOSDATA:0FCB
DOSDATA:0FCB absdwrt_cont:                           ; ...
DOSDATA:0FCB                 jmp     cs:DOSINTTABLE_16
DOSDATA:0FD0 ; ---------------------------------------------------------------------------
DOSDATA:0FD0
DOSDATA:0FD0 lstay_resident:                         ; ...
DOSDATA:0FD0                 jmp     short sr_cont
DOSDATA:0FD2 ; ---------------------------------------------------------------------------
DOSDATA:0FD2                 call    EnsureA20ON
DOSDATA:0FD5
DOSDATA:0FD5 sr_cont:                                ; ...
DOSDATA:0FD5                 jmp     cs:DOSINTTABLE_20
DOSDATA:0FDA ; ---------------------------------------------------------------------------
DOSDATA:0FDA
DOSDATA:0FDA lint2f:                                 ; ...
DOSDATA:0FDA                 jmp     short int2f_cont
DOSDATA:0FDC ; ---------------------------------------------------------------------------
DOSDATA:0FDC                 call    EnsureA20ON
DOSDATA:0FDF
DOSDATA:0FDF int2f_cont:                             ; ...
DOSDATA:0FDF                 jmp     cs:DOSINTTABLE_24
DOSDATA:0FE4 ; ---------------------------------------------------------------------------
DOSDATA:0FE4
DOSDATA:0FE4 lcall_entry:                            ; ...
DOSDATA:0FE4                 jmp     short callentry_cont
DOSDATA:0FE6 ; ---------------------------------------------------------------------------
DOSDATA:0FE6                 call    EnsureA20ON
DOSDATA:0FE9
DOSDATA:0FE9 callentry_cont:                         ; ...
DOSDATA:0FE9                 jmp     cs:DOSINTTABLE_28
DOSDATA:0FE9 ; ---------------------------------------------------------------------------
DOSDATA:0FEE DosRetAddr23    dd 0                    ; ...
DOSDATA:0FF2 DosRetAddr24    dd 0                    ; ...
DOSDATA:0FF6 ; ---------------------------------------------------------------------------
DOSDATA:0FF6
DOSDATA:0FF6 LowInt23:                               ; ...
DOSDATA:0FF6                 pop     word ptr cs:DosRetAddr23
DOSDATA:0FFB                 pop     word ptr cs:DosRetAddr23+2
DOSDATA:1000                 int     23h             ; DOS - CONTROL "C" EXIT ADDRESS
DOSDATA:1000                                         ; Return: return via RETF 2 with CF set
DOSDATA:1000                                         ; DOS will abort program with errorlevel 0
DOSDATA:1000                                         ; else
DOSDATA:1000                                         ; interrupted DOS call continues
DOSDATA:1002                 call    EnsureA20ON
DOSDATA:1005                 jmp     cs:DosRetAddr23
DOSDATA:100A ; ---------------------------------------------------------------------------
DOSDATA:100A
DOSDATA:100A LowInt24:                               ; ...
DOSDATA:100A                 pop     word ptr cs:DosRetAddr24
DOSDATA:100F                 pop     word ptr cs:DosRetAddr24+2
DOSDATA:1014                 int     24h             ; DOS - FATAL ERROR HANDLER ADDRESS
DOSDATA:1014                                         ; Automatically called upon detection of unrecoverable I/O error.
DOSDATA:1016                 call    EnsureA20ON
DOSDATA:1019                 jmp     cs:DosRetAddr24
DOSDATA:101E ; ---------------------------------------------------------------------------
DOSDATA:101E
DOSDATA:101E LowInt28:                               ; ...
DOSDATA:101E                 int     28h             ; DOS 2+ internal - KEYBOARD BUSY LOOP
DOSDATA:1020                 call    EnsureA20ON
DOSDATA:1023                 retf
DOSDATA:1024 ; ---------------------------------------------------------------------------
DOSDATA:1024
DOSDATA:1024 disa20_xfer:                            ; ...
DOSDATA:1024                 call    XMMDisableA20
DOSDATA:1027                 cli
DOSDATA:1028                 mov     cs:INDOS, 0
DOSDATA:102E                 mov     ss:INDOS_FLAG, 0
DOSDATA:1034                 mov     ss, ax
DOSDATA:1036                 mov     sp, di
DOSDATA:1038                 sti
DOSDATA:1039                 push    ds
DOSDATA:103A                 push    si
DOSDATA:103B                 mov     es, dx
DOSDATA:103D                 mov     ds, dx
DOSDATA:103F                 mov     ax, bx
DOSDATA:1041                 retf
DOSDATA:1042 ; ---------------------------------------------------------------------------
DOSDATA:1042
DOSDATA:1042 disa20_iret:                            ; ...
DOSDATA:1042                 call    XMMDisableA20
DOSDATA:1045                 dec     ds:INDOS
DOSDATA:1049                 dec     ds:INDOS_FLAG
DOSDATA:104D                 mov     ss, ds:USER_SS
DOSDATA:1051                 mov     sp, ds:USER_SP
DOSDATA:1055                 mov     bp, sp
DOSDATA:1057                 mov     [bp+0], al
DOSDATA:105A                 les     ax, dword ptr ds:NSS
DOSDATA:105E                 mov     ds:USER_SP, es
DOSDATA:1062                 mov     ds:USER_SS, ax
DOSDATA:1065                 pop     ax
DOSDATA:1066                 pop     bx
DOSDATA:1067                 pop     cx
DOSDATA:1068                 pop     dx
DOSDATA:1069                 pop     si
DOSDATA:106A                 pop     di
DOSDATA:106B                 pop     bp
DOSDATA:106C                 pop     ds
DOSDATA:106D                 pop     es
DOSDATA:106E
DOSDATA:106E lirett:                                 ; ...
DOSDATA:106E                 iret
DOSDATA:106F
DOSDATA:106F ; =============== S U B R O U T I N E =======================================
DOSDATA:106F
DOSDATA:106F
DOSDATA:106F XMMDisableA20   proc near               ; ...
DOSDATA:106F                 push    bx
DOSDATA:1070                 push    ax
DOSDATA:1071                 mov     ah, 6
DOSDATA:1073                 call    cs:XMMcontrol
DOSDATA:1078                 pop     ax
DOSDATA:1079                 pop     bx
DOSDATA:107A                 retn
DOSDATA:107A XMMDisableA20   endp
DOSDATA:107A
DOSDATA:107A ; ---------------------------------------------------------------------------
DOSDATA:107B XMMcontrol      dd 0                    ; ...
DOSDATA:107F                 dd 0
DOSDATA:1083 SC_STATUS       dw 0                    ; ...
DOSDATA:1085
DOSDATA:1085 ; =============== S U B R O U T I N E =======================================
DOSDATA:1085
DOSDATA:1085
DOSDATA:1085 EnsureA20ON     proc near               ; ...
DOSDATA:1085                 pushf
DOSDATA:1086                 push    ds
DOSDATA:1087                 push    es
DOSDATA:1088                 push    cx
DOSDATA:1089                 push    si
DOSDATA:108A                 push    di
DOSDATA:108B                 xor     si, si
DOSDATA:108D                 mov     ds, si
DOSDATA:108F                 assume ds:DOSCODE
DOSDATA:108F                 dec     si
DOSDATA:1090                 mov     di, 90h
DOSDATA:1093                 mov     es, si
DOSDATA:1095                 mov     si, 80h
DOSDATA:1098                 mov     cx, 4
DOSDATA:109B                 cld
DOSDATA:109C                 repe cmpsw
DOSDATA:109E                 jz      short loc_10A7
DOSDATA:10A0
DOSDATA:10A0 loc_10A0:                               ; ...
DOSDATA:10A0                 pop     di
DOSDATA:10A1                 pop     si
DOSDATA:10A2                 pop     cx
DOSDATA:10A3                 pop     es
DOSDATA:10A4                 pop     ds
DOSDATA:10A5                 assume ds:nothing
DOSDATA:10A5                 popf
DOSDATA:10A6                 retn
DOSDATA:10A7 ; ---------------------------------------------------------------------------
DOSDATA:10A7
DOSDATA:10A7 loc_10A7:                               ; ...
DOSDATA:10A7                 push    bx
DOSDATA:10A8                 push    ax
DOSDATA:10A9                 mov     ax, cs
DOSDATA:10AB                 mov     cs:SS_Save, ss
DOSDATA:10B0                 mov     cs:SP_Save, sp
DOSDATA:10B5                 mov     ss, ax
DOSDATA:10B7                 assume ss:DOSCODE
DOSDATA:10B7                 mov     sp, offset AUXSTACK
DOSDATA:10BA                 mov     ah, 5
DOSDATA:10BC                 call    cs:XMMcontrol
DOSDATA:10C1                 or      ax, ax
DOSDATA:10C3                 jz      short loc_10D3
DOSDATA:10C5                 mov     ss, cs:SS_Save
DOSDATA:10CA                 assume ss:nothing
DOSDATA:10CA                 mov     sp, cs:SP_Save
DOSDATA:10CF                 pop     ax
DOSDATA:10D0                 pop     bx
DOSDATA:10D1                 jmp     short loc_10A0
DOSDATA:10D3 ; ---------------------------------------------------------------------------
DOSDATA:10D3
DOSDATA:10D3 loc_10D3:                               ; ...
DOSDATA:10D3                 mov     ah, 0Fh
DOSDATA:10D5                 int     10h             ; - VIDEO - GET CURRENT VIDEO MODE
DOSDATA:10D5                                         ; Return: AH = number of columns on screen
DOSDATA:10D5                                         ; AL = current video mode
DOSDATA:10D5                                         ; BH = current active display page
DOSDATA:10D7                 cmp     al, 7
DOSDATA:10D9                 jz      short loc_10E0
DOSDATA:10DB                 mov     ax, 2
DOSDATA:10DE                 int     10h             ; - VIDEO - SET VIDEO MODE
DOSDATA:10DE                                         ; AL = mode
DOSDATA:10E0
DOSDATA:10E0 loc_10E0:                               ; ...
DOSDATA:10E0                 mov     ax, 500h
DOSDATA:10E3                 int     10h             ; - VIDEO - SELECT DISPLAY PAGE
DOSDATA:10E3                                         ; AL = display page, 0-7  for modes 0 & 1, 0-3  for modes 2 & 3
DOSDATA:10E5                 mov     si, 1213h
DOSDATA:10E8                 push    cs
DOSDATA:10E9                 pop     ds
DOSDATA:10EA                 assume ds:DOSCODE
DOSDATA:10EA                 cld
DOSDATA:10EB
DOSDATA:10EB loc_10EB:                               ; ...
DOSDATA:10EB                 lodsb
DOSDATA:10EC                 cmp     al, 24h ; '$'
DOSDATA:10EE                 jz      short loc_10F9
DOSDATA:10F0                 mov     ah, 0Eh
DOSDATA:10F2                 mov     bx, 7
DOSDATA:10F5                 int     10h             ; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
DOSDATA:10F5                                         ; AL = character, BH = display page (alpha modes)
DOSDATA:10F5                                         ; BL = foreground color (graphics modes)
DOSDATA:10F7                 jmp     short loc_10EB
DOSDATA:10F9 ; ---------------------------------------------------------------------------
DOSDATA:10F9
DOSDATA:10F9 loc_10F9:                               ; ...
DOSDATA:10F9                 sti
DOSDATA:10FA                 jmp     short loc_10F9
DOSDATA:10FA EnsureA20ON     endp
DOSDATA:10FA
DOSDATA:10FA ; ---------------------------------------------------------------------------
DOSDATA:10FC OldInstanceJunk dw 70h                  ; ...
DOSDATA:10FC                                         ; segment of BIOS
DOSDATA:10FE                 dw 0                    ; indicate stacks in SYSINIT area
DOSDATA:1100                 dw 6                    ; 6 instance items
DOSDATA:1102 OldInstanceJunk_6 dw 0                  ; ...
DOSDATA:1104                 dw offset CONTPOS
DOSDATA:1106                 dw 2
DOSDATA:1108                 dw 0
DOSDATA:110A                 dw offset BCON
DOSDATA:110C                 dw 4
DOSDATA:110E                 dw 0
DOSDATA:1110                 dw offset CARPOS
DOSDATA:1112                 dw 106h
DOSDATA:1114                 dw 0
DOSDATA:1116                 dw offset CHARCO
DOSDATA:1118                 dw 1
DOSDATA:111A                 dw 0
DOSDATA:111C                 dw offset exec_init_SP
DOSDATA:111E                 dw 34
DOSDATA:1120                 dw 70h
DOSDATA:1122                 dw 0Ch                  ; ALTAH byte in dos bios
DOSDATA:1124                 dw 1
DOSDATA:1126 ; ---------------------------------------------------------------------------
DOSDATA:1126                 push    cx
DOSDATA:1127                 mov     cx, FCBLRU
DOSDATA:112B
DOSDATA:112B loc_112B:                               ; ...
DOSDATA:112B                 loop    loc_112B
DOSDATA:112D                 pop     cx
DOSDATA:112E                 retf
DOSDATA:112E ; ---------------------------------------------------------------------------
DOSDATA:112F UmbSave1        db 11 dup(0)            ; ...
DOSDATA:113A OLD_FIRSTCLUS_HW dw 0                   ; ...
DOSDATA:113C FastOpenTable   dw 2                    ; ...
DOSDATA:113E FastTable_2     dw offset FastRet       ; ...
DOSDATA:1140                 dw 0
DOSDATA:1142                 dw offset FastRet
DOSDATA:1144                 dw 0
DOSDATA:1146 FastOpenFlg     db 0                    ; ...
DOSDATA:1147                 db  0, 0, 0, 0, 0, 0
DOSDATA:114D UNKNOWN1        dw 0                    ; ...
DOSDATA:114F                 db  0, 0, 0, 0, 0
DOSDATA:1154 PATHNAMELEN     dw 67                   ; ...
DOSDATA:1156                 db  0, 0, 0, 0, 0, 0, 0, 0
DOSDATA:1156                 db  0, 0, 0, 0, 0, 0, 0, 0
DOSDATA:1156                 db  0, 0, 0, 0, 0, 0, 0, 0
DOSDATA:1156                 db  0, 0, 0, 0, 0, 0, 0
DOSDATA:1175 CurSC_DRIVE     db 0FFh                 ; ...
DOSDATA:1176 WinoldPatch2    db 8 dup(0)             ; ...
DOSDATA:117E FIRST_BUFF_ADDR dw 0                    ; ...
DOSDATA:1180 DOSP1_ID        db 36h,0C5h,36h         ; Windows 3.1 patches
DOSDATA:1183                 db 36h, 5,0C5h,74h, 7,0E8h
DOSDATA:1189                 db 90h,90h
DOSDATA:118B DOSP12_ID       db 36h,0C5h,36h
DOSDATA:118E                 db 36h, 5,0C5h,74h, 7,0E8h
DOSDATA:1194 DOSP3_ID        db 51h, 6,57h,0BAh
DOSDATA:1198                 db 29h, 2,0E8h
DOSDATA:119B                 db 9Ah,0E3h,5Fh, 7
DOSDATA:119F DOSP4_ID        db 59h
DOSDATA:11A0 DOSP5_ID        db 51h
DOSDATA:11A1                 db 0ACh,3Ch,1Ah,74h, 5
DOSDATA:11A6                 db 0E8h
DOSDATA:11A7 DOSP7_ID        db 2Eh,8Ch,1Eh
DOSDATA:11AA                 db 7Eh, 5
DOSDATA:11AC                 db 2Eh,89h,1Eh
DOSDATA:11AF                 db 7Ch, 5
DOSDATA:11B1                 db 8Ch,0CBh
DOSDATA:11B3                 db 8Eh,0DBh
DOSDATA:11B5                 db 0FEh, 6
DOSDATA:11B7                 db 0CFh, 2
DOSDATA:11B9                 db 33h,0C0h
DOSDATA:11BB DOSP8_ID        db 50h,36h,0A1h
DOSDATA:11BE                 db 0EAh, 2,26h,3Bh,45h
DOSDATA:11C3                 db 2Fh,58h
DOSDATA:11C5 DOSP10_ID       db  6,1Fh
DOSDATA:11C7                 db 8Bh,0DFh
DOSDATA:11C9                 db 33h,0C0h,8Bh,0D0h,0E8h
DOSDATA:11CE                 db 0DFh,0Eh
DOSDATA:11D0                 db 1Eh,36h,0C5h,36h,36h, 5,0E8h,0AFh
DOSDATA:11D0                 db 0Eh,8Bh,0D7h,0B4h,86h,36h,8Bh,3Eh
DOSDATA:11E0                 db  9, 3,0F7h,0C7h, 0,80h,74h,19h
DOSDATA:11E0                 db 0E8h,47h,17h,8Bh,0FAh,0Ah,0C0h,74h
DOSDATA:11E0                 db 10h,3Ch, 3,74h, 3,1Fh,0EBh,0CFh
DOSDATA:11F8                 db 5Fh
DOSDATA:11F9                 db 36h,0C4h,3Eh,36h, 5,0E9h,0A1h, 4
DOSDATA:1201                 db 5Fh, 8Bh, 0FAh
DOSDATA:1204 DOSP13_ID       db 0ACh,3Ch,24h,74h, 8,0B3h, 7,0B4h
DOSDATA:1204                 db 0Eh,0CDh,10h,0EBh,0F3h,0EBh,0FEh
DOSDATA:1213 XMMERRMSG       db 0Dh,0Ah
DOSDATA:1215                 db 'A20 Hardware Error',0Dh,0Ah,'$'
DOSDATA:122A COUNTRY_CDPG    db 0, 0, 0, 0, 0, 0, 0, 0 ; ...
DOSDATA:122A                                         ; reserved words
DOSDATA:1232                 db '\COUNTRY.SYS',0     ; path name of country.sys
DOSDATA:123F                 db 51 dup(0)
DOSDATA:1272                 dw 437                  ; system code page id
DOSDATA:1274                 dw 6                    ; number of entries
DOSDATA:1276 COUNTRY_CDPG_76 db 2                    ; ...
DOSDATA:1276                                         ; SetUcase
DOSDATA:1277                 dw offset UCASE_TAB
DOSDATA:1279                 dw 0
DOSDATA:127B                 db 4                    ; SetUcaseFile
DOSDATA:127C                 dw offset FILE_UCASE_TAB
DOSDATA:127E                 dw 0
DOSDATA:1280                 db 5                    ; SetFileList
DOSDATA:1281                 dw offset FILE_CHAR_TAB
DOSDATA:1283                 dw 0
DOSDATA:1285                 db 6                    ; SetCollate
DOSDATA:1286                 dw offset COLLATE_TAB
DOSDATA:1288                 dw 0
DOSDATA:128A                 db 7                    ; SetDBCS
DOSDATA:128B                 dw offset DBCS_TAB
DOSDATA:128D                 dw 0
DOSDATA:128F                 db 1                    ; SetCountryInfo
DOSDATA:1290                 dw 38                   ; NEW_COUNTRY_SIZE
DOSDATA:1292 _COUNTRY_ID     dw 1                    ; ...
DOSDATA:1292                                         ; USA country id
DOSDATA:1294                 dw 437                  ; USA system code page id
DOSDATA:1296 COUNTRY_CDPG_108 dw 0                   ; ...
DOSDATA:1296                                         ; date format
DOSDATA:1298                 db '$',0,0,0,0          ; currency symbol
DOSDATA:129D                 db ',',0                ; thousand separator
DOSDATA:129F                 db '.',0                ; decimal separator
DOSDATA:12A1                 db '-',0                ; date separator
DOSDATA:12A3                 db ':',0                ; time separator
DOSDATA:12A5                 db 0                    ; currency format flag
DOSDATA:12A6                 db 2                    ; # of digits after decimal in currency
DOSDATA:12A7                 db 0                    ; time format
DOSDATA:12A8                 dw offset MAP_CASE      ; mono case routine entry point
DOSDATA:12AA                 dw 0                    ; segment of entry point
DOSDATA:12AC                 db ',',0                ; data list separator
DOSDATA:12AE                 dw 5 dup(0)             ; reserved
DOSDATA:12B8 INDOS_FLAG      db 0                    ; ...
DOSDATA:12B9 DEVIO_IN_PROGRESS db 0                  ; ...
DOSDATA:12BA _ENU            db 'ENU',0              ; ...
DOSDATA:12BE _USA            db 'USA',0
DOSDATA:12C2 _US             db 'US'
DOSDATA:12C4                 dw 1
DOSDATA:12C6                 dw 2
DOSDATA:12C8                 dw 0
DOSDATA:12CA _AM             db 'AM',0
DOSDATA:12CD _PM             db 'PM',0
DOSDATA:12D0 _MMDDYY         db 'M/d/yy     dddd,MMMMdd,yyyy         '
DOSDATA:12F4                 db 0
DOSDATA:12F5                 db 0
DOSDATA:12F6                 dw 0
DOSDATA:12F8 VxDpath         db 'c:\wina20.386',0    ; ...
DOSDATA:1306                 db 0
DOSDATA:1307 drv_flags_1     db 0                    ; ...
DOSDATA:1308 drive_flags     db 26 dup(0)            ; ...
DOSDATA:1322                 db 1
DOSDATA:1323 BiosComBlockPtr dw 2 dup(0)             ; ...
DOSDATA:1327                 db 5 dup(0)
DOSDATA:132C                 dw 4
DOSDATA:132E                 dw offset INDOS_FLAG
DOSDATA:1330                 dw offset drive_flags
DOSDATA:1332                 dw offset NLS_YES
DOSDATA:1334                 dw offset unknown_zero_dd
DOSDATA:1336 NLS_YES         db 'Y'                  ; ...
DOSDATA:1337 NLS_NO          db 'N'                  ; ...
DOSDATA:1338 NLS_yes2        db 'y'                  ; ...
DOSDATA:1339 NLS_no2         db 'n'                  ; ...
DOSDATA:133A unknown_zero_dd dd 0                    ; ...
DOSDATA:133E Rational386PatchPtr dw 0                ; ...
DOSDATA:1340 ; ---------------------------------------------------------------------------
DOSDATA:1340
DOSDATA:1340 MagicPatch:                             ; ...
DOSDATA:1340                 retf
DOSDATA:1340 ; ---------------------------------------------------------------------------
DOSDATA:1341                 db  90h
DOSDATA:1342                 db  90h
DOSDATA:1343                 db  90h
DOSDATA:1344                 db  90h
DOSDATA:1345                 db  90h
DOSDATA:1345 DOSDATA         ends
DOSDATA:1345
DOSCODE:3F10 ; ---------------------------------------------------------------------------
DOSCODE:3F10 ; File Name   : C:\Yedek\pcdos_7_1\IBMDOS.COM
DOSCODE:3F10 ; Format      : Binary file
DOSCODE:3F10 ; Base Address: 0000h Range: 0000h - A646h Loaded length: A646h
DOSCODE:3F10 ; ===========================================================================
DOSCODE:3F10
DOSCODE:3F10 ; Segment type: Regular
DOSCODE:3F10 DOSCODE         segment byte public 'DOSCODE' use16
DOSCODE:3F10                 assume cs:DOSCODE
DOSCODE:3F10                 ;org 3F10h
DOSCODE:3F10                 assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
DOSCODE:3F10
DOSCODE:3F10 $STARTCODE:                             ; ...
DOSCODE:3F10                 jmp     DOSINIT
DOSCODE:3F10 ; ---------------------------------------------------------------------------
DOSCODE:3F13                 dw offset $STARTCODE
DOSCODE:3F15 BioDataSeg      dw 70h
DOSCODE:3F17 DosDSeg         dw 0                    ; ...
DOSCODE:3F17                                         ; DOSDATA segment address
DOSCODE:3F19 MSMAJOR         db 7                    ; DOS_MAJOR_VERSION
DOSCODE:3F1A MSMINOR         db 10                   ; DOS_MINOR_VERSION
DOSCODE:3F1B I21_MAP_E_TAB   db 38h, 2, 1, 2, 39h, 3, 3, 2 ; ...
DOSCODE:3F1B                 db 5, 3Ah, 4, 10h, 3, 2, 5, 3Bh ; INT 21h Error code mapping table
DOSCODE:3F1B                 db 2, 2, 3, 3Ch, 4, 3, 2, 4
DOSCODE:3F1B                 db 5, 3Dh, 6, 3, 2, 0Ch, 4, 1Ah
DOSCODE:3F1B                 db 5, 3Eh, 1, 6, 3Fh, 2, 6, 5
DOSCODE:3F1B                 db 40h, 2, 6, 5, 41h, 3, 3, 2
DOSCODE:3F1B                 db 5, 42h, 2, 6, 1, 43h, 4, 3
DOSCODE:3F1B                 db 2, 1, 5, 44h, 5, 0Fh, 0Dh, 1
DOSCODE:3F1B                 db 6, 5, 45h, 2, 6, 4, 46h, 2
DOSCODE:3F1B                 db 6, 4, 47h, 2, 1Ah, 0Fh, 48h, 2
DOSCODE:3F1B                 db 7, 8, 49h, 2, 7, 9, 4Ah, 3
DOSCODE:3F1B                 db 7, 9, 8, 4Bh, 8, 3, 1, 2
DOSCODE:3F1B                 db 4, 0Bh, 0Ah, 8, 5, 4Eh, 3, 3
DOSCODE:3F1B                 db 2, 12h, 4Fh, 1, 12h, 56h, 5, 11h
DOSCODE:3F1B                 db 3, 2, 10h, 5, 57h, 4, 6, 8
DOSCODE:3F1B                 db 0Dh, 1, 58h, 1, 1, 5Ah, 4, 3
DOSCODE:3F1B                 db 2, 4, 5, 5Bh, 5, 50h, 3, 2
DOSCODE:3F1B                 db 4, 5, 5Ch, 4, 6, 1, 24h, 21h
DOSCODE:3F1B                 db 65h, 2, 1, 2, 66h, 2, 1, 2
DOSCODE:3F1B                 db 68h, 1, 6, 67h, 3, 4, 8, 1
DOSCODE:3F1B                 db 6Ch, 0Ah, 3, 2, 0Ch, 4, 50h, 8
DOSCODE:3F1B                 db 1Ah, 0Dh, 1, 5, 69h, 4, 0Fh, 0Dh
DOSCODE:3F1B                 db 1, 5, 70h, 1, 1, 0FFh
DOSCODE:3FD1                 db 0
DOSCODE:3FD2 DISPATCH        dw offset $ABORT        ; ...
DOSCODE:3FD2                                         ; Standard Functions (INT 21h System Calls)
DOSCODE:3FD4                 dw offset $STD_CON_INPUT
DOSCODE:3FD6                 dw offset $STD_CON_OUTPUT
DOSCODE:3FD8                 dw offset $STD_AUX_INPUT
DOSCODE:3FDA                 dw offset $STD_AUX_OUTPUT
DOSCODE:3FDC                 dw offset $STD_PRINTER_OUTPUT
DOSCODE:3FDE                 dw offset $RAW_CON_IO
DOSCODE:3FE0                 dw offset $RAW_CON_INPUT
DOSCODE:3FE2                 dw offset $STD_CON_INPUT_NO_ECHO
DOSCODE:3FE4                 dw offset $STD_CON_STRING_OUTPUT
DOSCODE:3FE6                 dw offset $STD_CON_STRING_INPUT
DOSCODE:3FE8                 dw offset $STD_CON_INPUT_STATUS
DOSCODE:3FEA                 dw offset $STD_CON_INPUT_FLUSH
DOSCODE:3FEC                 dw offset $DISK_RESET
DOSCODE:3FEE                 dw offset $SET_DEFAULT_DRIVE
DOSCODE:3FF0                 dw offset $FCB_OPEN
DOSCODE:3FF2                 dw offset $FCB_CLOSE
DOSCODE:3FF4                 dw offset $DIR_SEARCH_FIRST
DOSCODE:3FF6                 dw offset $DIR_SEARCH_NEXT
DOSCODE:3FF8                 dw offset $FCB_DELETE
DOSCODE:3FFA                 dw offset $FCB_SEQ_READ
DOSCODE:3FFC                 dw offset $FCB_SEQ_WRITE
DOSCODE:3FFE                 dw offset $FCB_CREATE
DOSCODE:4000                 dw offset $FCB_RENAME
DOSCODE:4002                 dw offset NO_OP
DOSCODE:4004                 dw offset $GET_DEFAULT_DRIVE
DOSCODE:4006                 dw offset $SET_DMA
DOSCODE:4008                 dw offset $SLEAZEFUNC
DOSCODE:400A                 dw offset $SLEAZEFUNCDL
DOSCODE:400C                 dw offset NO_OP
DOSCODE:400E                 dw offset NO_OP
DOSCODE:4010                 dw offset $GET_DEFAULT_DPB
DOSCODE:4012                 dw offset NO_OP
DOSCODE:4014                 dw offset $FCB_RANDOM_READ
DOSCODE:4016                 dw offset $FCB_RANDOM_WRITE
DOSCODE:4018                 dw offset $GET_FCB_FILE_LENGTH
DOSCODE:401A                 dw offset $GET_FCB_POSITION
DOSCODE:401C                 dw offset $SET_INTERRUPT_VECTOR
DOSCODE:401E                 dw offset $CREATE_PROCESS_DATA_BLOCK
DOSCODE:4020                 dw offset $FCB_RANDOM_READ_BLOCK
DOSCODE:4022                 dw offset $FCB_RANDOM_WRITE_BLOCK
DOSCODE:4024                 dw offset $PARSE_FILE_DESCRIPTOR
DOSCODE:4026                 dw offset $GET_DATE
DOSCODE:4028                 dw offset $SET_DATE
DOSCODE:402A                 dw offset $GET_TIME
DOSCODE:402C                 dw offset $SET_TIME
DOSCODE:402E                 dw offset $SET_VERIFY_ON_WRITE
DOSCODE:4030                 dw offset $GET_DMA
DOSCODE:4032                 dw offset $GET_VERSION
DOSCODE:4034                 dw offset $KEEP_PROCESS
DOSCODE:4036                 dw offset $GET_DPB
DOSCODE:4038                 dw offset $SET_CTRL_C_TRAPPING
DOSCODE:403A                 dw offset $GET_INDOS_FLAG
DOSCODE:403C                 dw offset $GET_INTERRUPT_VECTOR
DOSCODE:403E                 dw offset $GET_DRIVE_FREESPACE
DOSCODE:4040                 dw offset $CHAR_OPER
DOSCODE:4042                 dw offset $INTERNATIONAL
DOSCODE:4044                 dw offset $MKDIR
DOSCODE:4046                 dw offset $RMDIR
DOSCODE:4048                 dw offset $CHDIR
DOSCODE:404A                 dw offset $CREAT
DOSCODE:404C                 dw offset $OPEN
DOSCODE:404E                 dw offset $CLOSE
DOSCODE:4050                 dw offset $READ
DOSCODE:4052                 dw offset $WRITE
DOSCODE:4054                 dw offset $UNLINK
DOSCODE:4056                 dw offset $LSEEK
DOSCODE:4058                 dw offset $CHMOD
DOSCODE:405A                 dw offset $IOCTL
DOSCODE:405C                 dw offset $DUP
DOSCODE:405E                 dw offset $DUP2
DOSCODE:4060                 dw offset $CURRENT_DIR
DOSCODE:4062                 dw offset $ALLOC
DOSCODE:4064                 dw offset $DEALLOC
DOSCODE:4066                 dw offset $SETBLOCK
DOSCODE:4068                 dw offset $EXEC
DOSCODE:406A                 dw offset $EXIT
DOSCODE:406C                 dw offset $WAIT
DOSCODE:406E                 dw offset $FIND_FIRST
DOSCODE:4070                 dw offset $FIND_NEXT
DOSCODE:4072                 dw offset $SET_CURRENT_PDB
DOSCODE:4074                 dw offset $GET_CURRENT_PDB
DOSCODE:4076                 dw offset $GET_IN_VARS
DOSCODE:4078                 dw offset $SETDPB
DOSCODE:407A                 dw offset $GET_VERIFY_ON_WRITE
DOSCODE:407C                 dw offset $DUP_PDB
DOSCODE:407E                 dw offset $RENAME
DOSCODE:4080                 dw offset $FILE_TIMES
DOSCODE:4082                 dw offset $ALLOCOPER
DOSCODE:4084                 dw offset $GetExtendedError
DOSCODE:4086                 dw offset $CreateTempFile
DOSCODE:4088                 dw offset $CreateNewFile
DOSCODE:408A                 dw offset $LockOper
DOSCODE:408C                 dw offset $ServerCall
DOSCODE:408E                 dw offset $UserOper
DOSCODE:4090                 dw offset $AssignOper
DOSCODE:4092                 dw offset $NameTrans
DOSCODE:4094                 dw offset NO_OP
DOSCODE:4096                 dw offset $GET_CURRENT_PDB
DOSCODE:4098                 dw offset $ECS_Call
DOSCODE:409A                 dw offset $SET_PRINTER_FLAG
DOSCODE:409C                 dw offset $GetExtCntry
DOSCODE:409E                 dw offset $GetSetCdPg
DOSCODE:40A0                 dw offset $ExtHandle
DOSCODE:40A2                 dw offset $COMMIT
DOSCODE:40A4                 dw offset $GSetMediaID
DOSCODE:40A6                 dw offset $COMMIT
DOSCODE:40A8                 dw offset NO_OP
DOSCODE:40AA                 dw offset $Extended_Open ; 6Ch
DOSCODE:40AC                 dw offset NO_OP         ; 6Dh, OS/2 "DosMkDir2" - ROM DOS: Find first ROM program
DOSCODE:40AE                 dw offset NO_OP         ; 6Eh, OS/2 "DosEnumAttrib" - ROM DOS: Find next ROM program
DOSCODE:40B0                 dw offset NO_OP         ; 6Fh, OS/2 "DosQMaxEASize" - ROM DOS: Get/set searched ROM area
DOSCODE:40B2                 dw offset $ExtCountryInfo ; 70h, MSDOS 7 (WIN 95) - Get/set extended country information
DOSCODE:40B2                                         ;         GET/SET INTERNATIONALIZATION INFORMATION
DOSCODE:40B4                 dw offset $LONGNAME     ; 71h, MSDOS 7 (WIN 95) LONG FILENAME FUNCTIONS
DOSCODE:40B6                 dw offset $LONGNAME     ; 72h, MSDOS 7 (WIN 95) LFN-FindClose
DOSCODE:40B8                 dw offset $FAT32EXT     ; 73h, MSDOS 7 - FAT32 extended drive functions
DOSCODE:40BA FOO             dw offset Leave2F       ; ...
DOSCODE:40BC DTab            dw offset DOSTable      ; ...
DOSCODE:40BE DOSTable        db 50                   ; ...
DOSCODE:40BF                 dw offset DOSInstall
DOSCODE:40C1                 dw offset DOS_CLOSE
DOSCODE:40C3                 dw offset RECSET
DOSCODE:40C5                 dw offset DOSGetGroup
DOSCODE:40C7                 dw offset PATHCHRCMP
DOSCODE:40C9                 dw offset OUTT
DOSCODE:40CB                 dw offset NET_I24_ENTRY
DOSCODE:40CD                 dw offset PLACEBUF
DOSCODE:40CF                 dw offset FREE_SFT
DOSCODE:40D1                 dw offset BUFWRITE
DOSCODE:40D3                 dw offset SHARE_VIOLATION
DOSCODE:40D5                 dw offset SHARE_ERROR
DOSCODE:40D7                 dw offset SET_SFT_MODE
DOSCODE:40D9                 dw offset DATE16
DOSCODE:40DB                 dw offset Idle
DOSCODE:40DD                 dw offset SCANPLACE
DOSCODE:40DF                 dw offset Idle
DOSCODE:40E1                 dw offset StrCpy
DOSCODE:40E3                 dw offset StrLen
DOSCODE:40E5                 dw offset UCase
DOSCODE:40E7                 dw offset POINTCOMP
DOSCODE:40E9                 dw offset CHECKFLUSH
DOSCODE:40EB                 dw offset SFFromSFN
DOSCODE:40ED                 dw offset GetCDSFromDrv
DOSCODE:40EF                 dw offset Get_User_Stack
DOSCODE:40F1                 dw offset GETTHISDRV
DOSCODE:40F3                 dw offset DriveFromText
DOSCODE:40F5                 dw offset SETYEAR
DOSCODE:40F7                 dw offset DSUM
DOSCODE:40F9                 dw offset DSLIDE
DOSCODE:40FB                 dw offset StrCmp
DOSCODE:40FD                 dw offset InitCDS
DOSCODE:40FF                 dw offset pJFNFromHandle
DOSCODE:4101                 dw offset $NameTrans
DOSCODE:4103                 dw offset CAL_LK
DOSCODE:4105                 dw offset DEVNAME
DOSCODE:4107                 dw offset Idle
DOSCODE:4109                 dw offset DStrLen
DOSCODE:410B                 dw offset NLS_OPEN
DOSCODE:410D                 dw offset $CLOSE
DOSCODE:410F                 dw offset NLS_LSEEK
DOSCODE:4111                 dw offset $READ
DOSCODE:4113                 dw offset FastInit
DOSCODE:4115                 dw offset NLS_IOCTL
DOSCODE:4117                 dw offset GetDevList
DOSCODE:4119                 dw offset NLS_GETEXT
DOSCODE:411B                 dw offset MSG_RETRIEVAL
DOSCODE:411D                 dw offset NO_OP
DOSCODE:411F                 dw offset int_2Fh_1230h
DOSCODE:4121                 dw offset int_2Fh_1231h
DOSCODE:4123 ; ---------------------------------------------------------------------------
DOSCODE:4123 ; START OF FUNCTION CHUNK FOR STATCHK
DOSCODE:4123
DOSCODE:4123 $SET_CTRL_C_TRAPPING:                   ; ...
DOSCODE:4123                 cmp     al, 7           ; Is this a valid subfunction?
DOSCODE:4125                 jbe     short scct_1    ; yes
DOSCODE:4127                 mov     al, 0FFh
DOSCODE:4129                 iret
DOSCODE:412A ; ---------------------------------------------------------------------------
DOSCODE:412A
DOSCODE:412A scct_1:                                 ; ...
DOSCODE:412A                 push    ds
DOSCODE:412B                 mov     ds, cs:DosDSeg
DOSCODE:4130                 push    ax
DOSCODE:4131                 push    si
DOSCODE:4132                 mov     si, offset CNTCFLAG
DOSCODE:4135                 xor     ah, ah
DOSCODE:4137                 or      ax, ax          ; Check for subfunction 0
DOSCODE:4139                 jnz     short scct_2
DOSCODE:413B                 mov     dl, [si]        ; DS:SI --> Ctrl C Status byte
DOSCODE:413D                 jmp     short scct_9s
DOSCODE:413F ; ---------------------------------------------------------------------------
DOSCODE:413F
DOSCODE:413F scct_2:                                 ; ...
DOSCODE:413F                 dec     ax
DOSCODE:4140                 jnz     short scct_3
DOSCODE:4142                 and     dl, 1           ; mask off bit 0 of DL and
DOSCODE:4145                 mov     [si], dl        ; save it as new Ctrl C status
DOSCODE:4147                 jmp     short scct_9s
DOSCODE:4149 ; ---------------------------------------------------------------------------
DOSCODE:4149
DOSCODE:4149 scct_3:                                 ; ...
DOSCODE:4149                 dec     ax
DOSCODE:414A                 jnz     short scct_4
DOSCODE:414C                 and     dl, 1           ; mask off bit 0 of DL and
DOSCODE:414F                 xchg    dl, [si]        ; exchange DL with old status byte
DOSCODE:4151                 jmp     short scct_9s
DOSCODE:4153 ; ---------------------------------------------------------------------------
DOSCODE:4153
DOSCODE:4153 scct_4:                                 ; ...
DOSCODE:4153                 cmp     al, 3           ; test for 5 after it was dec twice
DOSCODE:4155                 jnz     short scct_5
DOSCODE:4157                 mov     dl, ds:BOOTDRIVE ; return boot drive in DL
DOSCODE:415B                 jmp     short scct_9s
DOSCODE:415D ; ---------------------------------------------------------------------------
DOSCODE:415D
DOSCODE:415D scct_5:                                 ; ...
DOSCODE:415D                 jb      short scct_9s
DOSCODE:415F                 cmp     al, 4           ; test for 6 after it was dec twice
DOSCODE:4161                 jnz     short scct_6
DOSCODE:4163                 mov     bx, 0A07h       ; 7.10 ; (MINOR_VERSION<<8)+MAJOR_VERSION
DOSCODE:4166                 mov     dx, 0           ; DOSREVNM
DOSCODE:4169                 cmp     ds:DosHasHMA, dh ; is DOS in HMA? no
DOSCODE:416D                 jz      short scct_9s
DOSCODE:416F                 mov     dh, 10h         ; yes
DOSCODE:4171                 jmp     short scct_9s   ; return version & 'DOS in HMA' status
DOSCODE:4173 ; ---------------------------------------------------------------------------
DOSCODE:4173
DOSCODE:4173 scct_6:                                 ; ...
DOSCODE:4173                 and     ds:DOS_FLAG, 0DFh ; clear bit 5 of DOS flag
DOSCODE:4178                 cmp     dl, 1
DOSCODE:417B                 jnz     short scct_9s
DOSCODE:417D                 or      ds:DOS_FLAG, 20h ; set bit 5 of DOS flag
DOSCODE:4182
DOSCODE:4182 scct_9s:                                ; ...
DOSCODE:4182                 pop     si
DOSCODE:4183                 pop     ax
DOSCODE:4184                 pop     ds
DOSCODE:4185                 iret
DOSCODE:4186 ; ---------------------------------------------------------------------------
DOSCODE:4186
DOSCODE:4186 SetCtrlShortEntry:                      ; ...
DOSCODE:4186                 jmp     short $SET_CTRL_C_TRAPPING
DOSCODE:4188 ; ---------------------------------------------------------------------------
DOSCODE:4188
DOSCODE:4188 $SET_CURRENT_PDB:                       ; ...
DOSCODE:4188                 push    ds
DOSCODE:4189                 mov     ds, cs:DosDSeg
DOSCODE:418E                 mov     ds:CurrentPDB, bx
DOSCODE:4192                 pop     ds
DOSCODE:4193                 iret
DOSCODE:4194 ; ---------------------------------------------------------------------------
DOSCODE:4194
DOSCODE:4194 $GET_CURRENT_PDB:                       ; ...
DOSCODE:4194                 push    ds
DOSCODE:4195                 mov     ds, cs:DosDSeg
DOSCODE:419A                 mov     bx, ds:CurrentPDB
DOSCODE:419E                 pop     ds
DOSCODE:419F                 iret
DOSCODE:41A0 ; ---------------------------------------------------------------------------
DOSCODE:41A0
DOSCODE:41A0 $SET_PRINTER_FLAG:                      ; ...
DOSCODE:41A0                 push    ds
DOSCODE:41A1                 mov     ds, cs:DosDSeg
DOSCODE:41A6                 mov     ds:PRINTER_FLAG, al
DOSCODE:41A9                 pop     ds
DOSCODE:41AA                 iret
DOSCODE:41AA ; END OF FUNCTION CHUNK FOR STATCHK
DOSCODE:41AB ; ---------------------------------------------------------------------------
DOSCODE:41AB
DOSCODE:41AB QUIT:                                   ; ...
DOSCODE:41AB                 xor     ah, ah
DOSCODE:41AD                 jmp     short SAVREGS
DOSCODE:41AF ; ---------------------------------------------------------------------------
DOSCODE:41AF ; START OF FUNCTION CHUNK FOR STATCHK
DOSCODE:41AF
DOSCODE:41AF BADCALL:                                ; ...
DOSCODE:41AF                 xor     al, al
DOSCODE:41B1
DOSCODE:41B1 irett:                                  ; ...
DOSCODE:41B1                 iret
DOSCODE:41B1 ; END OF FUNCTION CHUNK FOR STATCHK
DOSCODE:41B2 ; ---------------------------------------------------------------------------
DOSCODE:41B2
DOSCODE:41B2 CALL_ENTRY:                             ; ...
DOSCODE:41B2                 push    ds              ; System call entry point and dispatcher
DOSCODE:41B2                                         ; ***
DOSCODE:41B2                                         ; An alternative method of entering the system
DOSCODE:41B2                                         ; is to perform a CALL 5 in the program segment prefix
DOSCODE:41B2                                         ; with the contents of CL indicating what system call
DOSCODE:41B2                                         ; the user would like
DOSCODE:41B3                 mov     ds, cs:DosDSeg
DOSCODE:41B8                 pop     ds:SAVEDS
DOSCODE:41BC                 pop     ax
DOSCODE:41BD                 pop     ax
DOSCODE:41BE                 pop     ds:USER_SP
DOSCODE:41C2                 pushf                   ; Re-order the stack
DOSCODE:41C2                                         ; to simulate an interrupt 21h.
DOSCODE:41C3                 cli
DOSCODE:41C4                 push    ax
DOSCODE:41C5                 push    ds:USER_SP      ; Stack now ordered as if INT had been used
DOSCODE:41C9                 push    ds:SAVEDS
DOSCODE:41CD                 pop     ds
DOSCODE:41CE                 cmp     cl, 36          ; MAXCALL
DOSCODE:41CE                                         ; This entry point doesn't get as many calls
DOSCODE:41D1                 ja      short BADCALL
DOSCODE:41D3                 mov     ah, cl
DOSCODE:41D5                 jmp     short SAVREGS
DOSCODE:41D7 ; ---------------------------------------------------------------------------
DOSCODE:41D7 ; START OF FUNCTION CHUNK FOR STATCHK
DOSCODE:41D7
DOSCODE:41D7 COMMAND:                                ; ...
DOSCODE:41D7                 cli                     ; This is the normal INT 21h entry point.
DOSCODE:41D7                                         ; We first perform a quick test to see if
DOSCODE:41D7                                         ; we need to perform expensive DOS-entry
DOSCODE:41D7                                         ; functions. Certain system calls are done
DOSCODE:41D7                                         ; without interrupts being enabled.
DOSCODE:41D8                 cmp     ah, 73h
DOSCODE:41DB                 ja      short BADCALL
DOSCODE:41DD
DOSCODE:41DD SAVREGS:                                ; ...
DOSCODE:41DD                 cmp     ah, 33h         ; Check Minimum special case number
DOSCODE:41E0                 jb      short SaveAllRegs
DOSCODE:41E2                 jz      short SetCtrlShortEntry
DOSCODE:41E4                 cmp     ah, 64h         ; Check Maximum case number
DOSCODE:41E7                 ja      short SaveAllRegs
DOSCODE:41E9                 jz      short $SET_PRINTER_FLAG
DOSCODE:41EB                 cmp     ah, 51h
DOSCODE:41EE                 jz      short $GET_CURRENT_PDB
DOSCODE:41F0                 cmp     ah, 50h
DOSCODE:41F3                 jz      short $SET_CURRENT_PDB
DOSCODE:41F5                 cmp     ah, 62h
DOSCODE:41F8                 jz      short $GET_CURRENT_PDB
DOSCODE:41FA
DOSCODE:41FA SaveAllRegs:                            ; ...
DOSCODE:41FA                 push    es
DOSCODE:41FB                 push    ds
DOSCODE:41FC                 push    bp
DOSCODE:41FD                 push    di
DOSCODE:41FE                 push    si
DOSCODE:41FF                 push    dx
DOSCODE:4200                 push    cx
DOSCODE:4201                 push    bx
DOSCODE:4202                 push    ax
DOSCODE:4203                 mov     ax, ds
DOSCODE:4205                 mov     ds, cs:DosDSeg
DOSCODE:420A                 mov     ds:SAVEDS, ax
DOSCODE:420D                 mov     ax, ds:USER_SP
DOSCODE:4210                 mov     ds:SAVEBX, bx
DOSCODE:4214                 mov     ds:NSP, ax
DOSCODE:4217                 mov     ax, ds:USER_SS
DOSCODE:421A                 mov     ds:NSS, ax
DOSCODE:421D                 xor     ax, ax          ; 0
DOSCODE:421F                 test    ds:IsWin386, 1  ; WIN386 patch. Do not update USER_ID
DOSCODE:4224                 mov     ds:FSHARING, al ; allow redirection
DOSCODE:4227                 jnz     short set_indos_flag ; if win386 present
DOSCODE:4229                 mov     ds:USER_ID, ax
DOSCODE:422C
DOSCODE:422C set_indos_flag:                         ; ...
DOSCODE:422C                 inc     ds:INDOS        ; Flag that we're in the DOS
DOSCODE:4230                 inc     ds:INDOS_FLAG   ; duplicated INDOS flag (what for ?)
DOSCODE:4234                 mov     ax, ds:CurrentPDB
DOSCODE:4237                 mov     ds:USER_SP, sp
DOSCODE:423B                 mov     ds:USER_SS, ss
DOSCODE:423F                 mov     ds:PROC_ID, ax
DOSCODE:4242                 mov     ds, ax
DOSCODE:4244                 pop     ax
DOSCODE:4245                 push    ax
DOSCODE:4246                 mov     word ptr ds:2Eh, sp ; [PDB.USER_STACK]
DOSCODE:424A                 mov     word ptr ds:30h, ss ; [PDB.USER_STACK+2]
DOSCODE:424E                 mov     ss, cs:DosDSeg
DOSCODE:4253
DOSCODE:4253 REDISP:                                 ; ...
DOSCODE:4253                 mov     sp, offset AUXSTACK
DOSCODE:4256                 sti
DOSCODE:4257                 mov     bx, ss
DOSCODE:4259                 mov     ds, bx
DOSCODE:425B                 xchg    ax, bx
DOSCODE:425C                 xor     ax, ax
DOSCODE:425E                 mov     ds:EXTOPEN_ON, al ; Clear extended open flag
DOSCODE:4261                 and     ds:DOS34_FLAG, 800h ; EXEC_AWARE_REDIR
DOSCODE:4261                                         ; clear all bits except bit 11
DOSCODE:4267                 mov     ds:CONSWAP, al  ; random clean up of possibly mis-set flags
DOSCODE:426A                 mov     ds:NoSetDir, al ; set directories on search
DOSCODE:426D                 mov     ds:FAILERR, al  ; FAIL not in progress
DOSCODE:4270                 inc     ax
DOSCODE:4271                 mov     byte ptr ds:IDLEINT, al ; presume that we can issue INT 28h
DOSCODE:4274                 xchg    ax, bx          ; Restore AX and BX = 1
DOSCODE:4275                 mov     bl, ah
DOSCODE:4277                 add     bx, bx          ; 2 bytes per call in table
DOSCODE:4279                 cld
DOSCODE:427A                 or      ah, ah
DOSCODE:427C                 jz      short DSKROUT
DOSCODE:427E                 cmp     ah, 59h         ; GETEXTENDEDERROR
DOSCODE:4281                 jz      short DISPCALL
DOSCODE:4283                 cmp     ah, 0Ch         ; STD_CON_INPUT_FLUSH ; 12
DOSCODE:4286                 ja      short DSKROUT
DOSCODE:4288
DOSCODE:4288 IOROUT:                                 ;
DOSCODE:4288                 cmp     ds:ERRORMODE, 0 ; Are we in an INT 24h
DOSCODE:428D                 jnz     short DISPCALL  ; Stay on AUXSTACK if INT 24h
DOSCODE:428F                 mov     sp, offset PRINTER_FLAG ; mov sp,IOSTACK
DOSCODE:4292                 jmp     short DISPCALL
DOSCODE:4294 ; ---------------------------------------------------------------------------
DOSCODE:4294
DOSCODE:4294 DSKROUT:                                ; ...
DOSCODE:4294                 mov     ds:USER_IN_AX, ax
DOSCODE:4297                 mov     word ptr ds:WPERR, 1FFh
DOSCODE:429D                 mov     ds:ERRORMODE, 0
DOSCODE:42A2                 push    ax
DOSCODE:42A3                 mov     ah, 82h
DOSCODE:42A5                 int     2Ah             ; Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
DOSCODE:42A7                 pop     ax
DOSCODE:42A8                 mov     byte ptr ds:IDLEINT, 0
DOSCODE:42AD                 mov     sp, offset DSKSTACK ; "@#IBM:12.01.2003.build_1.32#@ IBMDOS.CO"...
DOSCODE:42B0                 test    ds:CNTCFLAG, 0FFh
DOSCODE:42B5                 jz      short DISPCALL
DOSCODE:42B7                 push    ax
DOSCODE:42B8                 call    DSKSTATCHK
DOSCODE:42BB                 pop     ax
DOSCODE:42BC
DOSCODE:42BC DISPCALL:                               ; ...
DOSCODE:42BC                 mov     bx, cs:DISPATCH[bx]
DOSCODE:42C1                 xchg    bx, ds:SAVEBX
DOSCODE:42C5                 mov     ds, ds:SAVEDS
DOSCODE:42C9                 call    ss:SAVEBX
DOSCODE:42CE                 and     ss:DOS_FLAG, 0DBh
DOSCODE:42D4
DOSCODE:42D4 LeaveDOS:                               ; ...
DOSCODE:42D4                 cli
DOSCODE:42D5                 mov     ds, cs:DosDSeg
DOSCODE:42DA                 cmp     ds:A20OFF_COUNT, 0
DOSCODE:42DF                 jnz     short disa20
DOSCODE:42E1
DOSCODE:42E1 LeaveA20On:                             ; ...
DOSCODE:42E1                 dec     ds:INDOS
DOSCODE:42E5                 dec     ds:INDOS_FLAG
DOSCODE:42E9                 mov     ss, ds:USER_SS
DOSCODE:42ED                 mov     sp, ds:USER_SP
DOSCODE:42F1                 mov     bp, sp
DOSCODE:42F3                 mov     [bp+0], al
DOSCODE:42F6                 les     ax, dword ptr ds:NSS
DOSCODE:42FA                 mov     ds:USER_SS, ax
DOSCODE:42FD                 mov     ds:USER_SP, es
DOSCODE:4301                 pop     ax
DOSCODE:4302                 pop     bx
DOSCODE:4303                 pop     cx
DOSCODE:4304                 pop     dx
DOSCODE:4305                 pop     si
DOSCODE:4306                 pop     di
DOSCODE:4307                 pop     bp
DOSCODE:4308                 pop     ds
DOSCODE:4309                 pop     es
DOSCODE:430A                 iret
DOSCODE:430B ; ---------------------------------------------------------------------------
DOSCODE:430B
DOSCODE:430B disa20:                                 ; ...
DOSCODE:430B                 mov     bx, ds:A20OFF_PSP
DOSCODE:430F                 cmp     bx, ds:CurrentPDB
DOSCODE:4313                 jnz     short LeaveA20On
DOSCODE:4315                 dec     ds:A20OFF_COUNT
DOSCODE:4319                 push    ds
DOSCODE:431A                 mov     bx, offset disa20_iret
DOSCODE:431D                 push    bx
DOSCODE:431E                 retf
DOSCODE:431E ; END OF FUNCTION CHUNK FOR STATCHK
DOSCODE:431F
DOSCODE:431F ; =============== S U B R O U T I N E =======================================
DOSCODE:431F
DOSCODE:431F
DOSCODE:431F restore_world   proc near               ; ...
DOSCODE:431F                 mov     es, cs:DosDSeg
DOSCODE:4324                 pop     es:RESTORE_TMP
DOSCODE:4329                 pop     ax
DOSCODE:432A                 pop     bx
DOSCODE:432B                 pop     cx
DOSCODE:432C                 pop     dx
DOSCODE:432D                 pop     si
DOSCODE:432E                 pop     di
DOSCODE:432F                 pop     bp
DOSCODE:4330                 pop     ds
DOSCODE:4331                 jmp     es:RESTORE_TMP
DOSCODE:4331 restore_world   endp ; sp-analysis failed
DOSCODE:4331
DOSCODE:4336
DOSCODE:4336 ; =============== S U B R O U T I N E =======================================
DOSCODE:4336
DOSCODE:4336
DOSCODE:4336 save_world      proc near               ; ...
DOSCODE:4336                 mov     es, cs:DosDSeg
DOSCODE:433B                 pop     es:RESTORE_TMP
DOSCODE:4340                 push    ds
DOSCODE:4341                 push    bp
DOSCODE:4342                 push    di
DOSCODE:4343                 push    si
DOSCODE:4344                 push    dx
DOSCODE:4345                 push    cx
DOSCODE:4346                 push    bx
DOSCODE:4347                 push    ax
DOSCODE:4348                 push    es:RESTORE_TMP
DOSCODE:434D                 push    bp
DOSCODE:434E                 mov     bp, sp
DOSCODE:4350                 mov     es, word ptr [bp+20]
DOSCODE:4353                 pop     bp
DOSCODE:4354                 retn
DOSCODE:4354 save_world      endp ; sp-analysis failed
DOSCODE:4354
DOSCODE:4355
DOSCODE:4355 ; =============== S U B R O U T I N E =======================================
DOSCODE:4355
DOSCODE:4355
DOSCODE:4355 Get_User_Stack  proc near               ; ...
DOSCODE:4355                 mov     ds, cs:DosDSeg
DOSCODE:435A                 lds     si, dword ptr ds:USER_SP
DOSCODE:435E                 retn
DOSCODE:435E Get_User_Stack  endp
DOSCODE:435E
DOSCODE:435E ; ---------------------------------------------------------------------------
DOSCODE:435F ERRIN           db 2                    ; ...
DOSCODE:4360                 db 6
DOSCODE:4361                 db 0Ch
DOSCODE:4362                 db 4
DOSCODE:4363                 db 8
DOSCODE:4364                 db 0
DOSCODE:4365 ERROUT          db 80h
DOSCODE:4366                 db 40h
DOSCODE:4367                 db 2
DOSCODE:4368                 db 10h
DOSCODE:4369                 db 4
DOSCODE:436A                 db 3
DOSCODE:436B
DOSCODE:436B ; =============== S U B R O U T I N E =======================================
DOSCODE:436B
DOSCODE:436B
DOSCODE:436B AbsSetup        proc near               ; ...
DOSCODE:436B                 mov     ss:absdrw_extd, ah ; Extended ABS Disk Read/Write flag
DOSCODE:436B                                         ; (AH=1 for INT 21h ax=7305h function)
DOSCODE:4370                 or      ah, ah
DOSCODE:4372                 jnz     short AbsSetup1 ; INT 21h AX=7305h
DOSCODE:4372                                         ; INT 25h
DOSCODE:4374                 inc     ss:INDOS_FLAG   ; Windows DOSBOX's INDOS flag ?
DOSCODE:4379                 inc     ss:INDOS
DOSCODE:437E
DOSCODE:437E AbsSetup1:                              ; ...
DOSCODE:437E                 sti
DOSCODE:437F                 cld
DOSCODE:4380                 push    ds
DOSCODE:4381                 push    ss
DOSCODE:4382                 pop     ds
DOSCODE:4383                 call    GETBP
DOSCODE:4386                 pop     ds
DOSCODE:4387                 jb      short errdriv
DOSCODE:4389
DOSCODE:4389 AbsSetup2:
DOSCODE:4389                 mov     ss:HIGH_SECTOR, 0
DOSCODE:4390                 call    RW32_CONVERT
DOSCODE:4393                 jb      short errdriv
DOSCODE:4395                 call    null_sub
DOSCODE:4398                 push    ds
DOSCODE:4399                 push    si
DOSCODE:439A                 push    ax
DOSCODE:439B                 push    ss
DOSCODE:439C                 pop     ds
DOSCODE:439D                 mov     si, offset OPENBUF
DOSCODE:43A0                 mov     [si], al
DOSCODE:43A2                 add     byte ptr [si], 41h ; 'A'
DOSCODE:43A5                 mov     word ptr [si+1], 3Ah ; ':'
DOSCODE:43AA                 mov     ax, 300h
DOSCODE:43AD                 clc
DOSCODE:43AE                 int     2Ah             ; Microsoft Networks - CHECK DIRECT I/O
DOSCODE:43AE                                         ; DS:SI -> ASCIZ disk device name (may be full path or only drive
DOSCODE:43AE                                         ; specifier--must include the colon)
DOSCODE:43AE                                         ; Return: CF clear if absolute disk access allowed
DOSCODE:43B0                 pop     ax
DOSCODE:43B1                 pop     si
DOSCODE:43B2                 pop     ds
DOSCODE:43B3                 jnb     short AbsSetup_retn
DOSCODE:43B5
DOSCODE:43B5 errdriv:                                ; ...
DOSCODE:43B5                 mov     ss:EXTERR, 32h  ; error_not_supported
DOSCODE:43BC                 mov     ss:AbsDskErr, 207h ; disk error ? (bad address mark)
DOSCODE:43C3
DOSCODE:43C3 AbsSetup_retn:                          ; ...
DOSCODE:43C3                 retn
DOSCODE:43C3 AbsSetup        endp
DOSCODE:43C3
DOSCODE:43C4 ; ---------------------------------------------------------------------------
DOSCODE:43C4
DOSCODE:43C4 ABSDRD:                                 ; ...
DOSCODE:43C4                 xor     ah, ah          ; Interrupt 25h handler (ah=0)
DOSCODE:43C6                 xor     si, si          ; clear read/write mode flags
DOSCODE:43C6                                         ; (used with INT 21h ax=7305h)
DOSCODE:43C8
DOSCODE:43C8 FAT32_ABSDRD:                           ; ...
DOSCODE:43C8                 cli                     ; ah=1
DOSCODE:43C9                 clc
DOSCODE:43CA ; START OF FUNCTION CHUNK FOR FAT32_ABSDWRT
DOSCODE:43CA
DOSCODE:43CA absdrd_1:                               ; ...
DOSCODE:43CA                 push    ax
DOSCODE:43CB                 mov     ax, ds
DOSCODE:43CD                 mov     ds, cs:DosDSeg
DOSCODE:43D2                 mov     ds:TEMPSEG, ax
DOSCODE:43D5                 pop     ax
DOSCODE:43D6                 push    es
DOSCODE:43D7                 jnb     short absdrd_2  ; (not jumped from ABSDWRT) absolute disk read
DOSCODE:43D7                                         ; (jumped from ABSDRWT)
DOSCODE:43D9                 or      ah, ah
DOSCODE:43DB                 stc                     ; absolute disk write
DOSCODE:43DC                 jmp     short absdrd_3
DOSCODE:43DE ; ---------------------------------------------------------------------------
DOSCODE:43DE
DOSCODE:43DE absdrd_2:                               ; ...
DOSCODE:43DE                 or      ah, ah
DOSCODE:43E0
DOSCODE:43E0 absdrd_3:                               ; ...
DOSCODE:43E0                 jnz     short absdrd_4  ; EXTENDED ABSOLUTE DISK READ/WRITE
DOSCODE:43E2                 mov     ds:AbsRdWr_SS, ss
DOSCODE:43E6                 mov     ds:AbsRdWr_SP, sp
DOSCODE:43EA                 mov     ss, cs:DosDSeg
DOSCODE:43EF                 mov     sp, offset DSKSTACK ; "@#IBM:12.01.2003.build_1.32#@ IBMDOS.CO"...
DOSCODE:43F2
DOSCODE:43F2 absdrd_4:                               ; ...
DOSCODE:43F2                 mov     ds, ds:TEMPSEG
DOSCODE:43F6                 push    es
DOSCODE:43F7                 call    save_world
DOSCODE:43FA                 push    es
DOSCODE:43FB                 jnb     short absdrd_5  ; absolute disk read
DOSCODE:43FD                 jmp     absdrwt_3       ; (jumping back to) absolute disk write
DOSCODE:4400 ; ---------------------------------------------------------------------------
DOSCODE:4400
DOSCODE:4400 absdrd_5:                               ; ...
DOSCODE:4400                 call    AbsSetup
DOSCODE:4403                 jb      short ILEAVE
DOSCODE:4405                 call    ECritDisk
DOSCODE:4408                 mov     ss:CurSC_DRIVE, 0FFh ; invalidate secondary cache
DOSCODE:440E                 call    LCritDisk
DOSCODE:4411                 call    DSKREAD
DOSCODE:4414                 jnz     short ERR_LEAVE
DOSCODE:4416                 mov     cx, di
DOSCODE:4418                 mov     ss:TEMP_VAR2, ds
DOSCODE:441D                 mov     ss:TEMP_VAR, bx ; CX = # of contiguous sectors read
DOSCODE:441D                                         ; ES:BP -> Drive Parameter Block (DPB)
DOSCODE:441D                                         ; [HIGH_SECTOR]:DX = physical sector # of 1st sector in extent
DOSCODE:441D                                         ; [TEMP_VAR2]:[TEMP_VAR] = Transfer address
DOSCODE:4422                 call    DskRdBufScan
DOSCODE:4425                 jmp     short ILEAVE
DOSCODE:4427 ; ---------------------------------------------------------------------------
DOSCODE:4427
DOSCODE:4427 TLEAVE:                                 ; ...
DOSCODE:4427                 jz      short ILEAVE
DOSCODE:4429
DOSCODE:4429 ERR_LEAVE:                              ; ...
DOSCODE:4429                 push    es
DOSCODE:442A                 push    cs
DOSCODE:442B                 pop     es
DOSCODE:442C                 assume es:DOSCODE
DOSCODE:442C                 xor     ah, ah
DOSCODE:442E                 mov     cx, 6
DOSCODE:4431                 mov     di, offset ERRIN
DOSCODE:4434                 repne scasb
DOSCODE:4436                 jnz     short LEAVECODE
DOSCODE:4438                 mov     ah, es:[di+5]   ; [ES:DI+NUMERR-1]
DOSCODE:443C
DOSCODE:443C LEAVECODE:                              ; ...
DOSCODE:443C                 pop     es
DOSCODE:443D                 assume es:nothing
DOSCODE:443D                 mov     ss:AbsDskErr, ax
DOSCODE:4441                 stc
DOSCODE:4442
DOSCODE:4442 ILEAVE:                                 ; ...
DOSCODE:4442                 pop     es
DOSCODE:4443                 call    restore_world
DOSCODE:4446                 pop     es
DOSCODE:4447                 pushf
DOSCODE:4448                 cmp     ss:absdrw_extd, 0 ; FAT32- EXTENDED ABSOLUTE DISK READ/WRITE flag
DOSCODE:444E                 jnz     short ILEAVE_EXTD ; INT 21h AX=7305h
DOSCODE:444E                                         ; INT 25h
DOSCODE:4450                 popf
DOSCODE:4451                 cli
DOSCODE:4452                 mov     ax, ss:AbsDskErr
DOSCODE:4456                 dec     ss:INDOS
DOSCODE:445B                 dec     ss:INDOS_FLAG
DOSCODE:4460                 push    ss
DOSCODE:4461                 pop     es
DOSCODE:4462                 mov     ss, es:AbsRdWr_SS
DOSCODE:4467                 assume ss:DOSCODE
DOSCODE:4467                 mov     sp, es:AbsRdWr_SP
DOSCODE:446C                 pop     es
DOSCODE:446D                 sti
DOSCODE:446E                 retf
DOSCODE:446F ; ---------------------------------------------------------------------------
DOSCODE:446F
DOSCODE:446F ILEAVE_EXTD:                            ; ...
DOSCODE:446F                 popf
DOSCODE:4470                 mov     ax, ss:AbsDskErr
DOSCODE:4474                 pop     es
DOSCODE:4475                 sti
DOSCODE:4476                 retn
DOSCODE:4476 ; END OF FUNCTION CHUNK FOR FAT32_ABSDWRT
DOSCODE:4477 ; ---------------------------------------------------------------------------
DOSCODE:4477
DOSCODE:4477 ABSDWRT:                                ; ...
DOSCODE:4477                 xor     ah, ah
DOSCODE:4479                 mov     si, 1
DOSCODE:447C
DOSCODE:447C ; =============== S U B R O U T I N E =======================================
DOSCODE:447C
DOSCODE:447C
DOSCODE:447C FAT32_ABSDWRT   proc far                ; ...
DOSCODE:447C
DOSCODE:447C ; FUNCTION CHUNK AT DOSCODE:43CA SIZE 000000AD BYTES
DOSCODE:447C
DOSCODE:447C                 cmp     al, 2
DOSCODE:447E                 jb      short absdrwt_2 ; floppy disk
DOSCODE:447E                                         ; hard disk
DOSCODE:4480                 push    bx
DOSCODE:4481                 push    ds
DOSCODE:4482                 mov     ds, cs:DosDSeg
DOSCODE:4487                 xor     bh, bh
DOSCODE:4489                 mov     bl, al          ;
DOSCODE:4489                                         ; NOTE: PCDOS 7.1 kernel does not set
DOSCODE:4489                                         ; DOS_FLAG bit 6 or drive_flags bit 7
DOSCODE:4489                                         ; (It appears that these bits are set
DOSCODE:4489                                         ; by Windows or a system utility or
DOSCODE:4489                                         ; driver that knows the addresses of
DOSCODE:4489                                         ; these FLAGs in the DOSDATA segment.)
DOSCODE:4489                                         ; Erdogan Tan - 03/01/2024
DOSCODE:448B                 test    ds:drive_flags[bx], 80h ; test bit 7 (locked bit) ; 29/01/2024
DOSCODE:4490                 jnz     short absdwrt_1 ; locked (logical drive) -allowed to abs write-
DOSCODE:4490                                         ; NOTE: lock/unlock are MSDOS/PCDOS 7 extd functions
DOSCODE:4492                 test    ds:DOS_FLAG, 40h ; test bit 6 (large disk support -windows- bit?)
DOSCODE:4492                                         ; NOTE: Retro DOS v5 kernel must set this bit.
DOSCODE:4497
DOSCODE:4497 absdwrt_1:                              ; ...
DOSCODE:4497                 pop     ds
DOSCODE:4498                 pop     bx
DOSCODE:4499                 jnz     short absdrwt_2 ; allowed
DOSCODE:449B                 stc
DOSCODE:449C                 call    errdriv         ; error
DOSCODE:449F                 retf
DOSCODE:44A0 ; ---------------------------------------------------------------------------
DOSCODE:44A0
DOSCODE:44A0 absdrwt_2:                              ; ...
DOSCODE:44A0                 cli
DOSCODE:44A1                 stc                     ; writable disk
DOSCODE:44A1                                         ; ('jumped from ABSDWRT' sign for common r/w code)
DOSCODE:44A2                 jmp     absdrd_1        ; jump to ABSDRD (common r/w) code
DOSCODE:44A5 ; ---------------------------------------------------------------------------
DOSCODE:44A5
DOSCODE:44A5 absdrwt_3:                              ; ...
DOSCODE:44A5                 call    AbsSetup
DOSCODE:44A8                 jb      short ILEAVE
DOSCODE:44AA                 call    chk_set_first_access
DOSCODE:44AD                 call    ECritDisk
DOSCODE:44B0                 mov     ss:CurSC_DRIVE, 0FFh ; invalidate secondary cache
DOSCODE:44B6                 call    Fastxxx_Purge   ; purge fatopen
DOSCODE:44B9                 call    LCritDisk
DOSCODE:44BC                 push    ds
DOSCODE:44BD                 call    DskWrtBufPurge
DOSCODE:44C0                 pop     ds
DOSCODE:44C1                 call    DSKWRITE
DOSCODE:44C4                 jmp     TLEAVE
DOSCODE:44C4 FAT32_ABSDWRT   endp
DOSCODE:44C4
DOSCODE:44C7
DOSCODE:44C7 ; =============== S U B R O U T I N E =======================================
DOSCODE:44C7
DOSCODE:44C7
DOSCODE:44C7 GETBP           proc near               ; ...
DOSCODE:44C7                 push    ax              ; logical unit number
DOSCODE:44C8                 add     al, 1           ; no increment; need carry flag
DOSCODE:44CA                 jb      short SKIPGET
DOSCODE:44CC                 call    GETTHISDRV
DOSCODE:44CF                 jnb     short SKIPGET   ; good drive
DOSCODE:44D1                 xor     ah, ah
DOSCODE:44D3                 cmp     ax, 1Ah         ; error_not_DOS_disk
DOSCODE:44D6                 jz      short SKIPGET   ; unknown media
DOSCODE:44D8                 stc
DOSCODE:44D9                 mov     ds:EXTERR, ax   ; invalid drive or Non DOS drive
DOSCODE:44DC                 mov     ds:AbsDskErr, 201h
DOSCODE:44E2
DOSCODE:44E2 SKIPGET:                                ; ...
DOSCODE:44E2                 pop     ax
DOSCODE:44E3                 jnb     short GETBP_@f
DOSCODE:44E5                 retn
DOSCODE:44E6 ; ---------------------------------------------------------------------------
DOSCODE:44E6
DOSCODE:44E6 GETBP_@f:                               ; ...
DOSCODE:44E6                 les     bp, ds:THISCDS
DOSCODE:44EA                 test    byte ptr es:[bp+44h], 80h ; [es:bp+curdir.flags+1],
DOSCODE:44EA                                         ; curdir_isnet>>8
DOSCODE:44EF                 jz      short GETBP_CDS
DOSCODE:44F1
DOSCODE:44F1 GETBP_err:                              ; ...
DOSCODE:44F1                 mov     ds:EXTERR, 32h ; '2' ; error_not_supported
DOSCODE:44F7                 stc
DOSCODE:44F8                 retn
DOSCODE:44F9 ; ---------------------------------------------------------------------------
DOSCODE:44F9
DOSCODE:44F9 GETBP_CDS:                              ; ...
DOSCODE:44F9                 les     bp, es:[bp+45h] ; [ES:BP+curdir.devptr]
DOSCODE:44FD                 push    ax
DOSCODE:44FE                 mov     ax, es
DOSCODE:4500                 or      ax, bp
DOSCODE:4502                 pop     ax
DOSCODE:4503                 jz      short GETBP_err ; zero address, error
DOSCODE:4503 GETBP           endp
DOSCODE:4503
DOSCODE:4505
DOSCODE:4505 ; =============== S U B R O U T I N E =======================================
DOSCODE:4505
DOSCODE:4505
DOSCODE:4505 GOTDPB          proc near               ; ...
DOSCODE:4505                 mov     word ptr ds:THISDPB, bp
DOSCODE:4509                 mov     word ptr ds:THISDPB+2, es
DOSCODE:450D                 retn
DOSCODE:450D GOTDPB          endp
DOSCODE:450D
DOSCODE:450E ; ---------------------------------------------------------------------------
DOSCODE:450E ; START OF FUNCTION CHUNK FOR $IOCTL
DOSCODE:450E
DOSCODE:450E SYS_RET_OK:                             ; ...
DOSCODE:450E                 call    Get_User_Stack
DOSCODE:4511                 and     word ptr [si+16h], 0FFFEh ; [SI+user_env.user_F],~f_Carry
DOSCODE:4515
DOSCODE:4515 DO_RET:                                 ; ...
DOSCODE:4515                 mov     [si], ax
DOSCODE:4517                 retn
DOSCODE:4518 ; ---------------------------------------------------------------------------
DOSCODE:4518
DOSCODE:4518 SYS_RET_ERR:                            ; ...
DOSCODE:4518                 xor     ah, ah          ; hack to allow for smaller error rets
DOSCODE:451A                 call    ETAB_LK         ; Make sure code is OK, EXTERR gets set
DOSCODE:451D                 call    ErrorMap
DOSCODE:4520
DOSCODE:4520 From_GetSet:                            ; ...
DOSCODE:4520                 call    Get_User_Stack
DOSCODE:4523                 or      word ptr [si+16h], 1 ; [SI+user_env.user_F],f_Carry
DOSCODE:4527                 stc
DOSCODE:4528                 jmp     short DO_RET
DOSCODE:4528 ; END OF FUNCTION CHUNK FOR $IOCTL
DOSCODE:452A ; ---------------------------------------------------------------------------
DOSCODE:452A
DOSCODE:452A NO_OP:                                  ; ...
DOSCODE:452A                 xor     al, al          ; obsolete system calls dispatch to here
DOSCODE:452C                 retn
DOSCODE:452D
DOSCODE:452D ; =============== S U B R O U T I N E =======================================
DOSCODE:452D
DOSCODE:452D
DOSCODE:452D FCB_RET_ERR     proc near               ; ...
DOSCODE:452D                 xor     ah, ah
DOSCODE:452F                 mov     ss:EXTERR, ax
DOSCODE:4533                 call    ErrorMap
DOSCODE:4536                 mov     al, 0FFh        ; -1
DOSCODE:4538                 retn
DOSCODE:4538 FCB_RET_ERR     endp
DOSCODE:4538
DOSCODE:4539
DOSCODE:4539 ; =============== S U B R O U T I N E =======================================
DOSCODE:4539
DOSCODE:4539
DOSCODE:4539 ErrorMap        proc near               ; ...
DOSCODE:4539                 push    si
DOSCODE:453A                 mov     si, offset ERR_TABLE_21
DOSCODE:453D                 cmp     ss:FAILERR, 0   ; Check for SPECIAL case.
DOSCODE:4543                 jz      short EXTENDED_NORMAL ; All is OK.
DOSCODE:4545                 mov     ss:EXTERR, 53h  ; error_FAIL_I24 ; real reason
DOSCODE:454C
DOSCODE:454C EXTENDED_NORMAL:                        ; ...
DOSCODE:454C                 call    CAL_LK          ; Set CLASS,ACTION,LOCUS for EXTERR
DOSCODE:454F                 pop     si
DOSCODE:4550                 retn
DOSCODE:4550 ErrorMap        endp
DOSCODE:4550
DOSCODE:4551
DOSCODE:4551 ; =============== S U B R O U T I N E =======================================
DOSCODE:4551
DOSCODE:4551
DOSCODE:4551 CAL_LK          proc near               ; ...
DOSCODE:4551                 push    ds              ; Look up and set CLASS ACTION and LOCUS values
DOSCODE:4551                                         ;  for GetExtendedError
DOSCODE:4552                 push    ax
DOSCODE:4553                 push    bx
DOSCODE:4554                 mov     ds, cs:DosDSeg  ; DOSDATA segment
DOSCODE:4559                 mov     bx, ds:EXTERR   ; Get error in BL
DOSCODE:455D
DOSCODE:455D TABLK1:                                 ; ...
DOSCODE:455D                 lodsb
DOSCODE:455E                 cmp     al, 0FFh
DOSCODE:4560                 jz      short GOT_VALS  ; End of table
DOSCODE:4562                 cmp     al, bl
DOSCODE:4564                 jz      short GOT_VALS  ; Got entry
DOSCODE:4566                 add     si, 3           ; Next table entry
DOSCODE:4569                 jmp     short TABLK1
DOSCODE:456B ; ---------------------------------------------------------------------------
DOSCODE:456B
DOSCODE:456B GOT_VALS:                               ; ...
DOSCODE:456B                 lodsw
DOSCODE:456C                 cmp     ah, 0FFh
DOSCODE:456F                 jz      short NO_SET_ACT
DOSCODE:4571                 mov     ds:EXTERR_ACTION, ah ; Set ACTION
DOSCODE:4575
DOSCODE:4575 NO_SET_ACT:                             ; ...
DOSCODE:4575                 cmp     al, 0FFh
DOSCODE:4577                 jz      short NO_SET_CLS
DOSCODE:4579                 mov     ds:EXTERR_CLASS, al ; Set CLASS
DOSCODE:457C
DOSCODE:457C NO_SET_CLS:                             ; ...
DOSCODE:457C                 lodsb                   ; Get LOCUS
DOSCODE:457D                 cmp     al, 0FFh
DOSCODE:457F                 jz      short NO_SET_LOC
DOSCODE:4581                 mov     ds:EXTERR_LOCUS, al
DOSCODE:4584
DOSCODE:4584 NO_SET_LOC:                             ; ...
DOSCODE:4584                 pop     bx
DOSCODE:4585                 pop     ax
DOSCODE:4586                 pop     ds
DOSCODE:4587                 retn
DOSCODE:4587 CAL_LK          endp
DOSCODE:4587
DOSCODE:4588
DOSCODE:4588 ; =============== S U B R O U T I N E =======================================
DOSCODE:4588
DOSCODE:4588
DOSCODE:4588 ETAB_LK         proc near               ; ...
DOSCODE:4588                 push    ds              ; check for appropriate error code
DOSCODE:4589                 push    si
DOSCODE:458A                 push    cx
DOSCODE:458B                 push    bx
DOSCODE:458C                 push    ss
DOSCODE:458D                 pop     ds
DOSCODE:458E                 assume ds:DOSCODE
DOSCODE:458E                 mov     EXTERR, ax      ; Set EXTERR with "real" error
DOSCODE:4591                 mov     si, offset I21_MAP_E_TAB
DOSCODE:4594                 mov     bh, al          ; Real code to BH
DOSCODE:4596                 mov     bl, byte ptr USER_IN_AX+1 ; Sys call to BL
DOSCODE:459A
DOSCODE:459A TABLK2:                                 ; ...
DOSCODE:459A                 lods    word ptr cs:[si]
DOSCODE:459C                 cmp     al, 0FFh        ; End of table?
DOSCODE:459E                 jz      short NOT_IN_TABLE
DOSCODE:45A0                 cmp     al, bl          ; Found call?
DOSCODE:45A2                 jz      short GOT_CALL  ; Yes
DOSCODE:45A4                 xchg    ah, al
DOSCODE:45A6                 xor     ah, ah
DOSCODE:45A8                 add     si, ax          ; Next table entry
DOSCODE:45AA                 jmp     short TABLK2
DOSCODE:45AC ; ---------------------------------------------------------------------------
DOSCODE:45AC
DOSCODE:45AC NOT_IN_TABLE:                           ; ...
DOSCODE:45AC                 mov     al, bh          ; Restore original code
DOSCODE:45AE                 jmp     short NO_MAP
DOSCODE:45B0 ; ---------------------------------------------------------------------------
DOSCODE:45B0
DOSCODE:45B0 GOT_CALL:                               ; ...
DOSCODE:45B0                 mov     cl, ah
DOSCODE:45B2                 xor     ch, ch          ; Count of valid err codes to CX
DOSCODE:45B4
DOSCODE:45B4 CHECK_CODE:                             ; ...
DOSCODE:45B4                 lods    byte ptr cs:[si]
DOSCODE:45B6                 cmp     al, bh          ; Code OK?
DOSCODE:45B8                 jz      short NO_MAP    ; Yes
DOSCODE:45BA                 loop    CHECK_CODE
DOSCODE:45BC
DOSCODE:45BC NO_MAP:                                 ; ...
DOSCODE:45BC                 xor     ah, ah          ; AX is now valid code
DOSCODE:45BE                 pop     bx
DOSCODE:45BF                 pop     cx
DOSCODE:45C0                 pop     si
DOSCODE:45C1                 pop     ds
DOSCODE:45C2                 assume ds:nothing
DOSCODE:45C2                 retn
DOSCODE:45C2 ETAB_LK         endp ; sp-analysis failed
DOSCODE:45C2
DOSCODE:45C3
DOSCODE:45C3 ; =============== S U B R O U T I N E =======================================
DOSCODE:45C3
DOSCODE:45C3
DOSCODE:45C3 SetBad          proc near               ; ...
DOSCODE:45C3                 mov     ax, 1           ; error_invalid_function
DOSCODE:45C6                 push    ds
DOSCODE:45C7                 mov     ds, cs:DosDSeg
DOSCODE:45CC                 mov     ds:EXTERR_LOCUS, 1 ; errLOC_Unk
DOSCODE:45D1                 pop     ds
DOSCODE:45D2                 stc
DOSCODE:45D3                 retn
DOSCODE:45D3 SetBad          endp
DOSCODE:45D3
DOSCODE:45D4
DOSCODE:45D4 ; =============== S U B R O U T I N E =======================================
DOSCODE:45D4
DOSCODE:45D4
DOSCODE:45D4 BadCall         proc far                ; ...
DOSCODE:45D4                 call    SetBad
DOSCODE:45D7                 retf
DOSCODE:45D7 BadCall         endp
DOSCODE:45D7
DOSCODE:45D8
DOSCODE:45D8 ; =============== S U B R O U T I N E =======================================
DOSCODE:45D8
DOSCODE:45D8
DOSCODE:45D8 OKCall          proc far                ; ...
DOSCODE:45D8                 clc
DOSCODE:45D9                 retf
DOSCODE:45D9 OKCall          endp
DOSCODE:45D9
DOSCODE:45DA ; ---------------------------------------------------------------------------
DOSCODE:45DA
DOSCODE:45DA INT2F:                                  ; ...
DOSCODE:45DA                 sti
DOSCODE:45DB                 cmp     ah, 11h         ; MultNET
DOSCODE:45DE                 jnz     short INT2FSHR
DOSCODE:45E0
DOSCODE:45E0 TestInstall:                            ; ...
DOSCODE:45E0                 or      al, al
DOSCODE:45E2                 jz      short Leave2F
DOSCODE:45E4
DOSCODE:45E4 BadFunc:                                ; ...
DOSCODE:45E4                 call    SetBad
DOSCODE:45E7
DOSCODE:45E7 Leave2F:                                ; ...
DOSCODE:45E7                 retf    2
DOSCODE:45EA ; ---------------------------------------------------------------------------
DOSCODE:45EA
DOSCODE:45EA INT2FSHR:                               ; ...
DOSCODE:45EA                 cmp     ah, 10h         ; MultSHARE
DOSCODE:45ED                 jz      short TestInstall
DOSCODE:45EF                 cmp     ah, 14h         ; NLSFUNC
DOSCODE:45F2                 jz      short TestInstall
DOSCODE:45F4                 cmp     ah, 12h         ; MultDOS
DOSCODE:45F7                 jnz     short check_win
DOSCODE:45F9                 jmp     DispatchDOS
DOSCODE:45FC ; ---------------------------------------------------------------------------
DOSCODE:45FC
DOSCODE:45FC check_win:                              ; ...
DOSCODE:45FC                 cmp     ah, 16h         ; MultWin386
DOSCODE:45FF                 jz      short Win386_Msg
DOSCODE:4601                 cmp     ah, 46h         ; WINOLDAP
DOSCODE:4604                 jnz     short next_i2f
DOSCODE:4606                 jmp     Winold_swap
DOSCODE:4609 ; ---------------------------------------------------------------------------
DOSCODE:4609
DOSCODE:4609 next_i2f:                               ; ...
DOSCODE:4609                 jmp     far ptr 70h:5
DOSCODE:460E ; ---------------------------------------------------------------------------
DOSCODE:460E
DOSCODE:460E Win386_Msg:                             ; ...
DOSCODE:460E                 push    ds
DOSCODE:460F                 mov     ds, cs:DosDSeg
DOSCODE:4614                 cmp     al, 3           ; win386 2.xx instance data call?
DOSCODE:4616                 jnz     short Win386_Msg_exit
DOSCODE:4618                 jmp     OldWin386Init   ; yes, return instance data
DOSCODE:461B ; ---------------------------------------------------------------------------
DOSCODE:461B
DOSCODE:461B Win386_Msg_exit:                        ; ...
DOSCODE:461B                 cmp     al, 6           ; Win386_Exit  ; is it an exit call?
DOSCODE:461D                 jnz     short Win386_Msg_devcall
DOSCODE:461F                 jmp     Win386_Leaving
DOSCODE:4622 ; ---------------------------------------------------------------------------
DOSCODE:4622
DOSCODE:4622 Win386_Msg_devcall:                     ; ...
DOSCODE:4622                 cmp     al, 7           ; Win386_Devcall ; is it call from DOSMGR?
DOSCODE:4624                 jnz     short Win386_Msg_init
DOSCODE:4626                 jmp     Win386_Query
DOSCODE:4629 ; ---------------------------------------------------------------------------
DOSCODE:4629
DOSCODE:4629 Win386_Msg_init:                        ; ...
DOSCODE:4629                 cmp     al, 5           ; Win386_Init ; is it an init call?
DOSCODE:462B                 jz      short Win386_Starting
DOSCODE:462D                 jmp     win_nexti2f
DOSCODE:4630 ; ---------------------------------------------------------------------------
DOSCODE:4630
DOSCODE:4630 Win386_Starting:                        ; ...
DOSCODE:4630                 push    ax
DOSCODE:4631                 push    cx
DOSCODE:4632                 push    di
DOSCODE:4633                 push    es
DOSCODE:4634                 push    ds
DOSCODE:4635                 pop     es
DOSCODE:4636                 mov     di, offset INBUF
DOSCODE:4639                 mov     cx, 5
DOSCODE:463C                 cld
DOSCODE:463D
DOSCODE:463D Win386_s_floop:                         ; ...
DOSCODE:463D                 mov     ax, 'OC'        ; 4F43h ('CO' in NASM syntax)
DOSCODE:4640                 stosw
DOSCODE:4641                 mov     ax, ' N'        ; 204Eh ('N ' in NASM syntax)
DOSCODE:4644                 stosw
DOSCODE:4645                 add     di, 55
DOSCODE:4648                 loop    Win386_s_floop
DOSCODE:464A                 pop     es
DOSCODE:464B                 pop     di
DOSCODE:464C                 pop     cx
DOSCODE:464D                 pop     ax
DOSCODE:464E                 test    dx, 1           ; is this really win386?
DOSCODE:4652                 jz      short Win386_vchk ; yes
DOSCODE:4654                 jmp     win_nexti2f     ; win 286 dos extender
DOSCODE:4657 ; ---------------------------------------------------------------------------
DOSCODE:4657
DOSCODE:4657 Win386_vchk:                            ; ...
DOSCODE:4657                 mov     word ptr ds:Win386_Inf_Virt_Dev_Ptr, 0
DOSCODE:465D                 mov     word ptr ds:Win386_Inf_Virt_Dev_Ptr+2, 0
DOSCODE:4663                 cmp     di, 400h        ; version >= 400
DOSCODE:4667                 jnb     short jmp_to_noVxD31
DOSCODE:4669
DOSCODE:4669 Win386_vxd:
DOSCODE:4669                 push    ax
DOSCODE:466A                 push    bx
DOSCODE:466B                 push    cx
DOSCODE:466C                 push    dx
DOSCODE:466D                 push    si
DOSCODE:466E                 mov     bx, ds:UMB_HEAD
DOSCODE:4672                 push    di
DOSCODE:4673                 cmp     bx, 0FFFFh
DOSCODE:4676                 jz      short Vxd31
DOSCODE:4678                 mov     ds:UmbSaveFlag, 1
DOSCODE:467D                 push    ds
DOSCODE:467E                 push    es
DOSCODE:467F                 push    ds
DOSCODE:4680                 pop     es
DOSCODE:4681                 mov     ds, bx
DOSCODE:4683                 xor     si, si
DOSCODE:4685                 clc                     ; not necessary (XOR already clears CF)
DOSCODE:4686
DOSCODE:4686 restore_ubmhead:                        ; ...
DOSCODE:4686                 cld                     ; !! PCDOS 7.1 bug !!
DOSCODE:4686                                         ; jump from 'Win386_Leaving' here was/is wrong
DOSCODE:4686                                         ; (DI and SI would be reversed for 'Win386_Leaving')
DOSCODE:4686                                         ; Erdogan Tan - 05/01/2024
DOSCODE:4687                 mov     di, offset UmbSave1
DOSCODE:468A                 mov     cx, 11
DOSCODE:468D                 rep movsb
DOSCODE:468F                 mov     di, offset UmbSave2
DOSCODE:4692                 mov     cl, 5
DOSCODE:4694                 rep movsb
DOSCODE:4696                 jnb     short restore_ubmhead_c ; (not jumped from 'Win386_Leaving')
DOSCODE:4698                 jmp     restore_ubmhead_ok ; (jumped from 'Win386_Leaving' just after 'stc')
DOSCODE:469B ; ---------------------------------------------------------------------------
DOSCODE:469B
DOSCODE:469B restore_ubmhead_c:                      ; ...
DOSCODE:469B                 pop     es
DOSCODE:469C                 pop     ds
DOSCODE:469D
DOSCODE:469D Vxd31:                                  ; ...
DOSCODE:469D                 test    ds:DOS_FLAG, 2  ; SUPPRESS_WINA20
DOSCODE:46A2                 jz      short Dont_Supress
DOSCODE:46A4                 pop     di
DOSCODE:46A5                 pop     si
DOSCODE:46A6                 pop     dx
DOSCODE:46A7                 pop     cx
DOSCODE:46A8                 pop     bx
DOSCODE:46A9                 pop     ax
DOSCODE:46AA
DOSCODE:46AA jmp_to_noVxD31:                         ; ...
DOSCODE:46AA                 jmp     short noVxD31
DOSCODE:46AC ; ---------------------------------------------------------------------------
DOSCODE:46AC
DOSCODE:46AC Dont_Supress:                           ; ...
DOSCODE:46AC                 mov     al, ds:BOOTDRIVE
DOSCODE:46AF                 add     al, 40h ; '@'   ; 'A'-1
DOSCODE:46B1                 mov     byte ptr ds:VxDpath, al ; "c:\\wina20.386"
DOSCODE:46B4                 mov     ax, 6C00h       ; ExtOpen<<8
DOSCODE:46B7                 mov     bx, 2080h       ; read access, compatibility mode
DOSCODE:46B7                                         ; no inherit, suppress crit err
DOSCODE:46BA                 mov     cx, 7           ; hidden,system,read-only attr
DOSCODE:46BD                 cwd
DOSCODE:46BE                 inc     dx              ; dx bit 0 = 1 ; fail if file does not exist
DOSCODE:46BF                 mov     si, offset VxDpath ; "c:\\wina20.386"
DOSCODE:46C2                 mov     di, 0FFFFh
DOSCODE:46C5                 int     21h             ; DOS - 4.0 - EXTENDED OPEN/CREATE
DOSCODE:46C5                                         ; BL = open mode as in AL for normal open (INT 21h/AH=3Dh)
DOSCODE:46C5                                         ; BH = flags, CX = create attribute, DL = action if file exists/does not exists
DOSCODE:46C5                                         ; DH = 00h (reserved), DS:SI -> ASCIZ file name
DOSCODE:46C7                 pop     di
DOSCODE:46C8                 pop     si
DOSCODE:46C9                 pop     dx
DOSCODE:46CA                 pop     cx
DOSCODE:46CB                 jnb     short VxDthere  ; we found the VxD, go ahead
DOSCODE:46CD                 push    dx
DOSCODE:46CE                 push    ds
DOSCODE:46CF                 push    si
DOSCODE:46D0                 mov     si, offset NoVxDErrMsg ; "You must have the file WINA20.386 in th"...
DOSCODE:46D3                 push    cs
DOSCODE:46D4                 pop     ds
DOSCODE:46D5                 assume ds:DOSCODE
DOSCODE:46D5                 mov     cx, 99          ; VxDMesLen
DOSCODE:46D8                 mov     ah, 2           ; write char to console
DOSCODE:46DA                 cld
DOSCODE:46DB
DOSCODE:46DB vxdlp:                                  ; ...
DOSCODE:46DB                 lodsb
DOSCODE:46DC                 xchg    dl, al
DOSCODE:46DE                 int     21h             ; DOS - DISPLAY OUTPUT
DOSCODE:46DE                                         ; DL = character to send to standard output
DOSCODE:46E0                 loop    vxdlp
DOSCODE:46E2                 pop     si
DOSCODE:46E3                 pop     ds
DOSCODE:46E4                 assume ds:nothing
DOSCODE:46E4                 pop     dx
DOSCODE:46E5                 pop     bx
DOSCODE:46E6                 pop     ax
DOSCODE:46E7                 inc     cx
DOSCODE:46E8                 jmp     short jmp_to_win_nexti2f
DOSCODE:46EA ; ---------------------------------------------------------------------------
DOSCODE:46EA
DOSCODE:46EA VxDthere:                               ; ...
DOSCODE:46EA                 mov     bx, ax
DOSCODE:46EC                 mov     ah, 3Eh
DOSCODE:46EE                 int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE
DOSCODE:46EE                                         ; BX = file handle
DOSCODE:46F0                 mov     bx, offset Win386_Info
DOSCODE:46F3                 mov     word ptr [bx+6], offset VxDpath ; "c:\\wina20.386"
DOSCODE:46F8                 mov     word ptr [bx+8], ds
DOSCODE:46FB                 pop     bx
DOSCODE:46FC                 pop     ax
DOSCODE:46FD
DOSCODE:46FD noVxD31:                                ; ...
DOSCODE:46FD                 or      ds:IsWin386, 1
DOSCODE:4702                 or      ds:redir_patch, 1
DOSCODE:4707                 push    dx
DOSCODE:4708                 mov     dx, bx
DOSCODE:470A                 mov     bx, offset Win386_Info
DOSCODE:470D                 mov     [bx+2], dx
DOSCODE:4710                 mov     word ptr [bx+4], es
DOSCODE:4713                 pop     dx
DOSCODE:4714                 push    ds
DOSCODE:4715                 pop     es
DOSCODE:4716
DOSCODE:4716 jmp_to_win_nexti2f:                     ; ...
DOSCODE:4716                 jmp     win_nexti2f
DOSCODE:4719 ; ---------------------------------------------------------------------------
DOSCODE:4719
DOSCODE:4719 Win386_Leaving:                         ; ...
DOSCODE:4719                 test    dx, 1           ; is this really win386?
DOSCODE:471D                 jnz     short jmp_to_win_nexti2f ; NO! It's win 286 dos extender!
DOSCODE:471F
DOSCODE:471F Win386_Leaving_c:                       ; was umb_arena saved at win start up ?
DOSCODE:471F                 cmp     ds:UmbSaveFlag, 1
DOSCODE:4724                 jnz     short noumb     ; not saved
DOSCODE:4726                 mov     ds:UmbSaveFlag, 0 ; clear UmbSaveFlag
DOSCODE:4726                                         ; and restore previously saved umb_head
DOSCODE:472B                 push    ax
DOSCODE:472C                 push    es
DOSCODE:472D                 push    cx
DOSCODE:472E                 push    si
DOSCODE:472F                 push    di
DOSCODE:4730                 mov     es, ds:UMB_HEAD
DOSCODE:4734                 assume es:nothing
DOSCODE:4734                 xor     di, di
DOSCODE:4736                 stc                     ; CF=1 is a sign to jump 'restore_ubmhead_ok' address
DOSCODE:4736                                         ; from -the common code at- 'restore_ubmhead' address
DOSCODE:4736                                         ; (.. but this is a BUG!)
DOSCODE:4736                                         ; ;
DOSCODE:4737                 jmp     restore_ubmhead ; !! PCDOS 7.1 bug !!
DOSCODE:4737                                         ; (jumped code does not restore umbhead,
DOSCODE:4737                                         ; MSDOS 6.22 code was correct, modification is wrong)
DOSCODE:4737                                         ; Erdogan Tan - 05/01/2024
DOSCODE:4737                                         ;
DOSCODE:4737                                         ; Correct code here, would be:
DOSCODE:4737                                         ;    cld
DOSCODE:4737                                         ;    mov  si,UmbSave1
DOSCODE:4737                                         ;    mov  cx,11
DOSCODE:4737                                         ;    rep  movsb
DOSCODE:4737                                         ;    mov  si,UmbSave2
DOSCODE:4737                                         ;    mov  cl,5
DOSCODE:4737                                         ;    rep  movsb
DOSCODE:473A ; ---------------------------------------------------------------------------
DOSCODE:473A
DOSCODE:473A restore_ubmhead_ok:                     ; ...
DOSCODE:473A                 pop     di
DOSCODE:473B                 pop     si
DOSCODE:473C                 pop     cx
DOSCODE:473D                 pop     es
DOSCODE:473E                 assume es:nothing
DOSCODE:473E                 pop     ax
DOSCODE:473F
DOSCODE:473F noumb:                                  ; ...
DOSCODE:473F                 and     ds:IsWin386, 0FEh
DOSCODE:4744                 and     ds:redir_patch, 0
DOSCODE:4749                 jmp     short win_nexti2f
DOSCODE:474B ; ---------------------------------------------------------------------------
DOSCODE:474B
DOSCODE:474B Win386_Query:                           ; ...
DOSCODE:474B                 cmp     bx, 15h         ; Win386_DOSMGR ; is this from DOSMGR?
DOSCODE:474E                 jnz     short win_nexti2f ; no, ignore it & chain to next
DOSCODE:4750                 or      cx, cx          ; is it an instance query?
DOSCODE:4752                 jnz     short dosmgr_func ; no, some DOSMGR query
DOSCODE:4754                 inc     cx              ; indicate that data is instanced
DOSCODE:4755                 mov     bx, offset Win386_DOSVars
DOSCODE:4758                 push    ds
DOSCODE:4759                 pop     es              ; es:bx points at offset table
DOSCODE:475A                 jmp     short PopIret
DOSCODE:475C ; ---------------------------------------------------------------------------
DOSCODE:475C
DOSCODE:475C OldWin386Init:                          ; ...
DOSCODE:475C                 pop     ax
DOSCODE:475D                 mov     si, offset OldInstanceJunk ; ds:si = instance table
DOSCODE:4760                 mov     ax, 5248h       ; 'HR' ; indicate instance data present
DOSCODE:4763                 jmp     short win_nexti2f2
DOSCODE:4765 ; ---------------------------------------------------------------------------
DOSCODE:4765
DOSCODE:4765 dosmgr_func:                            ; ...
DOSCODE:4765                 dec     cx
DOSCODE:4766                 jz      short win386_patch ; call to patch DOS
DOSCODE:4768                 dec     cx
DOSCODE:4769                 jz      short PopIret   ; remove DOS patches, ignore
DOSCODE:476B                 dec     cx
DOSCODE:476C                 jz      short win386_size ; get size of DOS data structures
DOSCODE:476E                 dec     cx
DOSCODE:476F                 jz      short jmp_to_win386_inst ; instance more data
DOSCODE:4771                 loop    PopIret         ; no functions above this
DOSCODE:4773                 mov     ax, es          ; Get DOS device driver size
DOSCODE:4773                                         ; ax = device header segment
DOSCODE:4775                 dec     ax              ; get arena header
DOSCODE:4776                 push    es
DOSCODE:4777                 mov     es, ax          ; arena header for device driver
DOSCODE:4779                 assume es:nothing
DOSCODE:4779                 cmp     byte ptr es:[di], 44h ; 'D' ; is it a device arena?
DOSCODE:477D                 jnz     short cantsize  ; no
DOSCODE:477F                 inc     ax              ; get back device header segment
DOSCODE:4780                 cmp     es:[di+1], ax   ; owner field pointing at driver?
DOSCODE:4784                 jnz     short cantsize  ; no
DOSCODE:4786                 mov     ax, es:[di+3]   ; get arena size in paragraphs
DOSCODE:478A                 pop     es
DOSCODE:478B                 assume es:nothing
DOSCODE:478B                 mov     bx, 16
DOSCODE:478E                 mul     bx
DOSCODE:4790                 mov     cx, ax
DOSCODE:4792                 mov     bx, dx
DOSCODE:4794                 jmp     short win386_done ; return with device driver size
DOSCODE:4796 ; ---------------------------------------------------------------------------
DOSCODE:4796
DOSCODE:4796 cantsize:                               ; ...
DOSCODE:4796                 pop     es
DOSCODE:4797                 xor     ax, ax
DOSCODE:4799
DOSCODE:4799 win386_inst:                            ; ...
DOSCODE:4799                 xor     dx, dx          ; ask DOSMGR to use its methods
DOSCODE:479B                 jmp     short PopIret
DOSCODE:479D ; ---------------------------------------------------------------------------
DOSCODE:479D
DOSCODE:479D win386_patch:                           ; ...
DOSCODE:479D                 mov     bx, dx          ; move patch bitfield to bx
DOSCODE:479F                 jmp     short win386_done ; done, return
DOSCODE:47A1 ; ---------------------------------------------------------------------------
DOSCODE:47A1
DOSCODE:47A1 win386_size:                            ; ...
DOSCODE:47A1                 test    dl, 1           ; check for CDS size bit
DOSCODE:47A4                 jz      short PopIret   ; no, unknown structure -- return
DOSCODE:47A6                 mov     cl, 88          ; cx = CDS size
DOSCODE:47A8                 jmp     short win386_done ; return with the size
DOSCODE:47AA ; ---------------------------------------------------------------------------
DOSCODE:47AA
DOSCODE:47AA jmp_to_win386_inst:                     ; ...
DOSCODE:47AA                 jmp     short win386_inst
DOSCODE:47AC ; ---------------------------------------------------------------------------
DOSCODE:47AC
DOSCODE:47AC win386_done:                            ; ...
DOSCODE:47AC                 mov     ax, 0B97Ch      ; WIN_OP_DONE
DOSCODE:47AF                 mov     dx, 0A2ABh      ; DOSMGR_OP_DONE
DOSCODE:47B2
DOSCODE:47B2 PopIret:                                ; ...
DOSCODE:47B2                 pop     ds
DOSCODE:47B3                 iret
DOSCODE:47B4 ; ---------------------------------------------------------------------------
DOSCODE:47B4
DOSCODE:47B4 win_nexti2f:                            ; ...
DOSCODE:47B4                 pop     ds
DOSCODE:47B5
DOSCODE:47B5 win_nexti2f2:                           ; ...
DOSCODE:47B5                 jmp     next_i2f
DOSCODE:47B8
DOSCODE:47B8 ; =============== S U B R O U T I N E =======================================
DOSCODE:47B8
DOSCODE:47B8
DOSCODE:47B8 getwinlast      proc near               ; ...
DOSCODE:47B8                 mov     si, ds:CurrentPDB
DOSCODE:47BC                 dec     si
DOSCODE:47BD                 mov     es, si
DOSCODE:47BF                 add     si, es:3
DOSCODE:47C4                 retn
DOSCODE:47C4 getwinlast      endp
DOSCODE:47C4
DOSCODE:47C5 ; ---------------------------------------------------------------------------
DOSCODE:47C5
DOSCODE:47C5 Winold_swap:                            ; ...
DOSCODE:47C5                 push    ds
DOSCODE:47C6                 push    es
DOSCODE:47C7                 push    si
DOSCODE:47C8                 push    di
DOSCODE:47C9                 push    cx
DOSCODE:47CA                 mov     ds, cs:DosDSeg
DOSCODE:47CF                 cmp     al, 1           ; swap Windows out call
DOSCODE:47D1                 jnz     short swapin    ; no, check if Swap in call
DOSCODE:47D3                 call    getwinlast
DOSCODE:47D6                 push    ds
DOSCODE:47D7                 pop     es
DOSCODE:47D8                 mov     ds, si          ; ds = memory arena of Windows
DOSCODE:47DA                 xor     si, si
DOSCODE:47DC                 mov     di, offset WinoldPatch1
DOSCODE:47DF                 mov     cx, 8
DOSCODE:47E2                 cld
DOSCODE:47E3                 rep movsb               ; save first 8 bytes
DOSCODE:47E5                 mov     cl, 8
DOSCODE:47E7                 mov     di, offset WinoldPatch2
DOSCODE:47EA                 rep movsb               ; save next 8 bytes
DOSCODE:47EC                 jmp     short winold_done
DOSCODE:47EE ; ---------------------------------------------------------------------------
DOSCODE:47EE
DOSCODE:47EE swapin:                                 ; ...
DOSCODE:47EE                 cmp     al, 2           ; swap Windows in call?
DOSCODE:47F0                 jnz     short winold_done ; no, something else, pass it on
DOSCODE:47F2                 call    getwinlast
DOSCODE:47F5                 mov     es, si
DOSCODE:47F7                 xor     di, di
DOSCODE:47F9                 mov     si, offset WinoldPatch1
DOSCODE:47FC                 mov     cx, 8
DOSCODE:47FF                 cld
DOSCODE:4800                 rep movsb               ; restore first 8 bytes
DOSCODE:4802                 mov     cl, 8
DOSCODE:4804                 mov     si, offset WinoldPatch2
DOSCODE:4807                 rep movsb               ; restore next 8 bytes
DOSCODE:4809
DOSCODE:4809 winold_done:                            ; ...
DOSCODE:4809                 pop     cx
DOSCODE:480A                 pop     di
DOSCODE:480B                 pop     si
DOSCODE:480C                 pop     es
DOSCODE:480D                 pop     ds
DOSCODE:480E                 jmp     next_i2f        ; chain on
DOSCODE:4811 ; ---------------------------------------------------------------------------
DOSCODE:4811
DOSCODE:4811 int_2Fh_1231h:                          ; ...
DOSCODE:4811                 push    ds              ; Windows95 - SET/CLEAR "REPORT WINDOWS TO DOS PROGRAMS" FLAG
DOSCODE:4812                 mov     ds, cs:DosDSeg
DOSCODE:4817                 xor     ax, ax
DOSCODE:4819                 or      dl, dl
DOSCODE:481B                 jnz     short not_1231_dl_0
DOSCODE:481D                 mov     ds:IsWin386+1, 1 ; set byte after "IsWIN386" to 01h
DOSCODE:4822                 jmp     short int_2f_1231h_retn
DOSCODE:4824 ; ---------------------------------------------------------------------------
DOSCODE:4824                 nop
DOSCODE:4825
DOSCODE:4825 not_1231_dl_0:                          ; ...
DOSCODE:4825                 cmp     dl, 1
DOSCODE:4828                 jnz     short not_1231_dl_1 ; clear "IsWIN386" bit 1
DOSCODE:482A                 or      ds:IsWin386, 2  ; set "IsWIN386" bit 1
DOSCODE:482F                 jmp     short int_2f_1231h_retn
DOSCODE:4831 ; ---------------------------------------------------------------------------
DOSCODE:4831                 nop
DOSCODE:4832
DOSCODE:4832 not_1231_dl_1:                          ; ...
DOSCODE:4832                 cmp     dl, 2
DOSCODE:4835                 jnz     short not_1231_dl_2
DOSCODE:4837                 and     ds:IsWin386, 0FDh ; clear bit 1
DOSCODE:483C                 jmp     short int_2f_1231h_retn
DOSCODE:483E ; ---------------------------------------------------------------------------
DOSCODE:483E
DOSCODE:483E not_1231_dl_2:                          ; ...
DOSCODE:483E                 inc     ax              ; return error, ax = 1
DOSCODE:483F                 stc
DOSCODE:4840
DOSCODE:4840 int_2f_1231h_retn:                      ; ...
DOSCODE:4840                 pop     ds
DOSCODE:4841                 retn
DOSCODE:4842 ; ---------------------------------------------------------------------------
DOSCODE:4842
DOSCODE:4842 DispatchDOS:                            ; ...
DOSCODE:4842                 push    cs:FOO          ; push return address
DOSCODE:4847                 push    cs:DTab         ; push table address
DOSCODE:484C                 push    ax              ; push index
DOSCODE:484D                 push    bp
DOSCODE:484E                 mov     bp, sp          ; stack looks like:
DOSCODE:484E                                         ;  0  BP
DOSCODE:484E                                         ;  2  DISPATCH
DOSCODE:484E                                         ;  4  TABLE
DOSCODE:484E                                         ;  6  RETURN
DOSCODE:484E                                         ;  8  LONG-RETURN
DOSCODE:484E                                         ;  C  FLAGS
DOSCODE:484E                                         ;  E  AX
DOSCODE:4850                 mov     ax, [bp+14]     ; get AX value
DOSCODE:4853                 pop     bp
DOSCODE:4854                 call    TableDispatch
DOSCODE:4857                 jmp     BadFunc         ; return indicates invalid function
DOSCODE:485A ; ---------------------------------------------------------------------------
DOSCODE:485A
DOSCODE:485A DOSGetGroup:                            ; ...
DOSCODE:485A                 mov     ds, cs:DosDSeg
DOSCODE:485F                 retn
DOSCODE:4860 ; ---------------------------------------------------------------------------
DOSCODE:4860
DOSCODE:4860 DOSInstall:                             ; ...
DOSCODE:4860                 mov     al, 0FFh
DOSCODE:4862                 retn
DOSCODE:4863
DOSCODE:4863 ; =============== S U B R O U T I N E =======================================
DOSCODE:4863
DOSCODE:4863
DOSCODE:4863 RW32_CONVERT    proc near               ; ...
DOSCODE:4863                 inc     cx              ; -1 -> 0
DOSCODE:4864                 jz      short new32format
DOSCODE:4866                 dec     cx
DOSCODE:4867                 cmp     word ptr es:[bp+0Fh], 0 ; [es:bp+DPB.FAT_SIZE]
DOSCODE:486C                 jz      short rw32_conv_err ; FAT32 fs
DOSCODE:486E                 push    ax
DOSCODE:486F                 push    dx
DOSCODE:4870                 mov     dl, es:[bp+4]   ; [es:bp+DPB.CLUSTER_MASK]
DOSCODE:4874                 mov     ax, es:[bp+0Dh] ; [es:bp+DPB.MAX_CLUSTER]
DOSCODE:4878                 cmp     dl, 0FEh        ; 254 ; Sectors/cluster - 1
DOSCODE:487B                 jz      short letold    ; removable
DOSCODE:487D                 inc     dl
DOSCODE:487F                 xor     dh, dh
DOSCODE:4881                 mul     dx
DOSCODE:4883                 or      dx, dx          ; > 32mb ?
DOSCODE:4885
DOSCODE:4885 letold:                                 ; ...
DOSCODE:4885                 pop     dx
DOSCODE:4886                 pop     ax
DOSCODE:4887                 jz      short old_style ; no
DOSCODE:4889
DOSCODE:4889 rw32_conv_err:                          ; ...
DOSCODE:4889                 stc
DOSCODE:488A                 retn
DOSCODE:488B ; ---------------------------------------------------------------------------
DOSCODE:488B
DOSCODE:488B new32format:                            ; ...
DOSCODE:488B                 mov     dx, [bx+2]      ; [BX+ABS_32RW.SECTOR_RBA+2]
DOSCODE:488E                 push    ds
DOSCODE:488F                 mov     ds, cs:DosDSeg  ; set up ds to DOSDATA
DOSCODE:4894                 mov     ds:HIGH_SECTOR, dx
DOSCODE:4898                 pop     ds
DOSCODE:4899                 mov     dx, [bx]        ; [BX+ABS_32RW.SECTOR_RBA]
DOSCODE:489B                 mov     cx, [bx+4]      ; [BX+ABS_32RW.ABS_RW_COUNT]
DOSCODE:489E                 lds     bx, [bx+6]      ; [BX+ABS_32RW.BUFFER_ADDR]
DOSCODE:48A1
DOSCODE:48A1 old_style:                              ; ...
DOSCODE:48A1                 clc
DOSCODE:48A2                 retn
DOSCODE:48A2 RW32_CONVERT    endp
DOSCODE:48A2
DOSCODE:48A3
DOSCODE:48A3 ; =============== S U B R O U T I N E =======================================
DOSCODE:48A3
DOSCODE:48A3
DOSCODE:48A3 Fastxxx_Purge   proc near               ; ...
DOSCODE:48A3                 push    ax
DOSCODE:48A4                 push    si
DOSCODE:48A5                 push    dx
DOSCODE:48A6                 push    ds
DOSCODE:48A7                 mov     ds, cs:DosDSeg
DOSCODE:48AC                 test    ds:FastOpenFlg, 80h ; Fast_yes ; fastopen installed ?
DOSCODE:48B1                 pop     ds
DOSCODE:48B2                 jz      short nofast    ; no
DOSCODE:48B4                 mov     ah, 1           ; FastOpen_ID
DOSCODE:48B6                 mov     al, 5           ; FONC_purge
DOSCODE:48B8                 mov     dl, es:[bp+0]   ; set up drive number
DOSCODE:48BC                 call    Fast_Dispatch   ; call fastopen/seek
DOSCODE:48BF
DOSCODE:48BF nofast:                                 ; ...
DOSCODE:48BF                 pop     dx
DOSCODE:48C0                 pop     si
DOSCODE:48C1                 pop     ax
DOSCODE:48C2                 retn
DOSCODE:48C2 Fastxxx_Purge   endp
DOSCODE:48C2
DOSCODE:48C2 ; ---------------------------------------------------------------------------
DOSCODE:48C3 DIVMES          db 0Dh,0Ah
DOSCODE:48C3                 db 'Divide overflow',0Dh,0Ah
DOSCODE:48D6 DivMesLen       dw 19                   ; ...
DOSCODE:48D8 NoVxDErrMsg     db 'You must have the file WINA20.386 in the root of your boot drive',0Dh ; ...
DOSCODE:48D8                 db 0Ah
DOSCODE:48D8                 db 'to run Windows in Enhanced Mode',0Dh,0Ah
DOSCODE:493B CANCHAR         db 1Bh                  ; ...
DOSCODE:493B                                         ; CANCEL ; Cancel line character
DOSCODE:493C ESCCHAR         db 0                    ; ...
DOSCODE:493C                                         ; ESCCH ; Lead-in character for escape sequences
DOSCODE:493D ESCTAB          db 40h                  ; ...
DOSCODE:493D                                         ; Ctrl-Z - F6
DOSCODE:493E                 db 4Dh                  ; Copy one char - -->
DOSCODE:493F                 db 3Bh                  ; Copy one char - F1
DOSCODE:4940                 db 53h                  ; Skip one char - DEL
DOSCODE:4941                 db 3Ch                  ; Copy to char - F2
DOSCODE:4942                 db 3Eh                  ; Skip to char - F4
DOSCODE:4943                 db 3Dh                  ; Copy line - F3
DOSCODE:4944                 db 3Dh                  ; Kill line (no change to template ) - Not used
DOSCODE:4945                 db 3Fh                  ; Reedit line (new template) - F5
DOSCODE:4946                 db 4Bh                  ; Backspace - <--
DOSCODE:4947                 db 52h                  ; Enter insert mode - INS (toggle)
DOSCODE:4948                 db 52h                  ; Exit insert mode - INS (toggle)
DOSCODE:4949                 db 41h                  ; Escape character - F7
DOSCODE:494A                 db 41h                  ; End of table
DOSCODE:494B ESCFUNC         dw offset GETCH         ; ...
DOSCODE:494B                                         ; Ignore the escape sequence
DOSCODE:494D                 dw offset TWOESC
DOSCODE:494F                 dw offset EXITINS
DOSCODE:4951                 dw offset EXITINS       ; ENTERINS
DOSCODE:4953                 dw offset BACKSP
DOSCODE:4955                 dw offset REEDIT
DOSCODE:4957                 dw offset KILNEW
DOSCODE:4959                 dw offset COPYLIN
DOSCODE:495B                 dw offset SKIPSTR
DOSCODE:495D                 dw offset COPYSTR
DOSCODE:495F                 dw offset SKIPONE
DOSCODE:4961                 dw offset COPYONE
DOSCODE:4963                 dw offset COPYONE
DOSCODE:4965                 dw offset CTRLZ
DOSCODE:4967 ; ---------------------------------------------------------------------------
DOSCODE:4967 ; START OF FUNCTION CHUNK FOR FINDOLD
DOSCODE:4967
DOSCODE:4967 OEMFunctionKey:                         ; ...
DOSCODE:4967                 call    $STD_CON_INPUT_NO_ECHO
DOSCODE:496A                 mov     cl, 14          ; ESCTABLEN
DOSCODE:496C                 push    di
DOSCODE:496D                 mov     di, offset ESCTAB
DOSCODE:4970                 push    es
DOSCODE:4971                 push    cs
DOSCODE:4972                 pop     es
DOSCODE:4973                 assume es:DOSCODE
DOSCODE:4973                 repne scasb
DOSCODE:4975                 pop     es
DOSCODE:4976                 assume es:nothing
DOSCODE:4976                 pop     di
DOSCODE:4977                 shl     cx, 1
DOSCODE:4979                 mov     bp, cx
DOSCODE:497B                 jmp     cs:ESCFUNC[bp]
DOSCODE:497B ; END OF FUNCTION CHUNK FOR FINDOLD
DOSCODE:4980
DOSCODE:4980 ; =============== S U B R O U T I N E =======================================
DOSCODE:4980
DOSCODE:4980
DOSCODE:4980 $GET_DATE       proc near               ; ...
DOSCODE:4980                 push    ss
DOSCODE:4981                 pop     ds
DOSCODE:4982                 assume ds:DOSCODE
DOSCODE:4982                 call    READTIME
DOSCODE:4985                 mov     ax, YEAR
DOSCODE:4988                 mov     bx, word ptr DAY
DOSCODE:498C                 call    Get_User_Stack
DOSCODE:498F                 mov     [si+6], bx      ; [SI+user_env.user_DX]
DOSCODE:4992                 add     ax, 1980
DOSCODE:4995                 mov     [si+4], ax      ; [SI+user_env.user_CX]
DOSCODE:4998                 mov     al, ss:WEEKDAY
DOSCODE:499C
DOSCODE:499C _RET24:                                 ; ...
DOSCODE:499C                 retn
DOSCODE:499C $GET_DATE       endp
DOSCODE:499C
DOSCODE:499D
DOSCODE:499D ; =============== S U B R O U T I N E =======================================
DOSCODE:499D
DOSCODE:499D
DOSCODE:499D $SET_DATE       proc near               ; ...
DOSCODE:499D                 mov     al, 0FFh        ; -1
DOSCODE:499F                 sub     cx, 1980        ; Fix bias in year
DOSCODE:49A3                 jb      short _RET24    ; Error if not big enough
DOSCODE:49A5                 cmp     cx, 119         ; Year must be less than 2100
DOSCODE:49A8                 ja      short RET24
DOSCODE:49AA                 or      dh, dh
DOSCODE:49AC                 jz      short _RET24
DOSCODE:49AE                 or      dl, dl
DOSCODE:49B0                 jz      short _RET24    ; Error if either month or day is 0
DOSCODE:49B2                 cmp     dh, 12          ; Check against max. month
DOSCODE:49B5                 ja      short RET24
DOSCODE:49B7                 push    ss
DOSCODE:49B8                 pop     ds
DOSCODE:49B9                 call    DODATE
DOSCODE:49BC
DOSCODE:49BC RET24:                                  ; ...
DOSCODE:49BC                 retn
DOSCODE:49BC $SET_DATE       endp
DOSCODE:49BC
DOSCODE:49BD
DOSCODE:49BD ; =============== S U B R O U T I N E =======================================
DOSCODE:49BD
DOSCODE:49BD
DOSCODE:49BD $GET_TIME       proc near               ; ...
DOSCODE:49BD                 push    ss
DOSCODE:49BE                 pop     ds
DOSCODE:49BF                 call    READTIME
DOSCODE:49C2                 call    Get_User_Stack  ; Get pointer to user registers
DOSCODE:49C5                 mov     [si+6], dx      ; [SI+user_env.user_DX]
DOSCODE:49C8                 mov     [si+4], cx      ; [SI+user_env.user_CX]
DOSCODE:49CB
DOSCODE:49CB set_time_ok:                            ; ...
DOSCODE:49CB                 xor     al, al
DOSCODE:49CD
DOSCODE:49CD RET26:                                  ; ...
DOSCODE:49CD                 retn
DOSCODE:49CD $GET_TIME       endp
DOSCODE:49CD
DOSCODE:49CE
DOSCODE:49CE ; =============== S U B R O U T I N E =======================================
DOSCODE:49CE
DOSCODE:49CE
DOSCODE:49CE $SET_TIME       proc near               ; ...
DOSCODE:49CE                 mov     al, 0FFh        ; Flag in case of error
DOSCODE:49D0                 cmp     ch, 24          ; Check hours
DOSCODE:49D3                 jnb     short RET26
DOSCODE:49D5                 cmp     cl, 60          ; Check minutes
DOSCODE:49D8                 jnb     short RET26
DOSCODE:49DA                 cmp     dh, 60          ; Check seconds
DOSCODE:49DD                 jnb     short RET26
DOSCODE:49DF                 cmp     dl, 100         ; Check 1/100's
DOSCODE:49E2                 jnb     short RET26
DOSCODE:49E4                 push    cx
DOSCODE:49E5                 push    dx
DOSCODE:49E6                 push    ss
DOSCODE:49E7                 pop     ds
DOSCODE:49E8                 mov     bx, offset TIMEBUF
DOSCODE:49EB                 mov     cx, 6
DOSCODE:49EE                 xor     ax, ax
DOSCODE:49F0                 cwd
DOSCODE:49F1                 push    bx
DOSCODE:49F2                 call    SETREAD
DOSCODE:49F5                 push    ds
DOSCODE:49F6                 lds     si, BCLOCK
DOSCODE:49FA                 assume ds:nothing
DOSCODE:49FA                 call    DEVIOCALL2      ; Get correct day count
DOSCODE:49FD                 pop     ds
DOSCODE:49FE                 pop     bx
DOSCODE:49FF                 call    SETWRITE
DOSCODE:4A02                 pop     ds:TIMEBUF+4
DOSCODE:4A06                 pop     ds:TIMEBUF+2
DOSCODE:4A0A                 lds     si, ds:BCLOCK
DOSCODE:4A0E                 call    DEVIOCALL2      ; Set the time
DOSCODE:4A11                 jmp     short set_time_ok
DOSCODE:4A11 $SET_TIME       endp
DOSCODE:4A11
DOSCODE:4A13
DOSCODE:4A13 ; =============== S U B R O U T I N E =======================================
DOSCODE:4A13
DOSCODE:4A13
DOSCODE:4A13 DATE16          proc near               ; ...
DOSCODE:4A13                 mov     ds, cs:DosDSeg
DOSCODE:4A18                 push    cx
DOSCODE:4A19                 push    es
DOSCODE:4A1A                 call    READTIME
DOSCODE:4A1D                 pop     es
DOSCODE:4A1E                 add     cl, cl
DOSCODE:4A20                 add     cl, cl
DOSCODE:4A22                 add     cx, cx
DOSCODE:4A24                 add     cx, cx
DOSCODE:4A26                 add     cx, cx
DOSCODE:4A28                 shr     dh, 1
DOSCODE:4A2A                 or      cl, dh
DOSCODE:4A2C                 mov     dx, cx
DOSCODE:4A2E                 mov     ax, word ptr ds:MONTH
DOSCODE:4A31                 mov     cl, 4
DOSCODE:4A33                 shl     al, cl
DOSCODE:4A35                 add     ax, ax
DOSCODE:4A37                 pop     cx
DOSCODE:4A38                 or      al, ds:DAY
DOSCODE:4A3C
DOSCODE:4A3C RET21:                                  ; ...
DOSCODE:4A3C                 retn
DOSCODE:4A3C DATE16          endp
DOSCODE:4A3C
DOSCODE:4A3D
DOSCODE:4A3D ; =============== S U B R O U T I N E =======================================
DOSCODE:4A3D
DOSCODE:4A3D
DOSCODE:4A3D READTIME        proc near               ; ...
DOSCODE:4A3D                 mov     ds:DATE_FLAG, 0 ; reset date flag for CPMIO
DOSCODE:4A43                 push    si
DOSCODE:4A44                 push    bx
DOSCODE:4A45                 mov     bx, offset TIMEBUF
DOSCODE:4A48                 mov     cx, 6
DOSCODE:4A4B                 xor     ax, ax
DOSCODE:4A4D                 cwd
DOSCODE:4A4E                 call    SETREAD
DOSCODE:4A51                 push    ds
DOSCODE:4A52                 lds     si, ds:BCLOCK
DOSCODE:4A56                 call    DEVIOCALL2      ; Get correct date and time
DOSCODE:4A59                 pop     ds
DOSCODE:4A5A                 pop     bx
DOSCODE:4A5B                 pop     si
DOSCODE:4A5C                 mov     ax, ds:TIMEBUF
DOSCODE:4A5F                 mov     cx, ds:TIMEBUF+2
DOSCODE:4A63                 mov     dx, ds:TIMEBUF+4
DOSCODE:4A67                 cmp     ax, ds:DAYCNT   ; See if day count is the same
DOSCODE:4A6B                 jz      short RET21
DOSCODE:4A6D                 cmp     ax, 43830       ; FOURYEARS*30 ; Number of days in 120 years
DOSCODE:4A70                 jnb     short RET22     ; Ignore if too large
DOSCODE:4A72                 mov     ds:DAYCNT, ax
DOSCODE:4A75                 push    si
DOSCODE:4A76                 push    cx
DOSCODE:4A77                 push    dx
DOSCODE:4A78                 xor     dx, dx
DOSCODE:4A7A                 mov     cx, 1461        ; FOURYEARS ; Number of days in 4 years
DOSCODE:4A7D                 div     cx
DOSCODE:4A7F                 add     ax, ax
DOSCODE:4A81                 add     ax, ax
DOSCODE:4A83                 add     ax, ax          ; Multiply by 8 (no. of half-years)
DOSCODE:4A85                 mov     cx, ax          ; <240 implies AH=0
DOSCODE:4A87                 mov     si, offset YRTAB ; Table of days in each year
DOSCODE:4A8A                 call    DSLIDE          ; Find out which of four years we're in
DOSCODE:4A8D                 shr     cx, 1           ; Convert half-years to whole years
DOSCODE:4A8F                 jnb     short SK        ; Extra half-year?
DOSCODE:4A91                 add     dx, 200
DOSCODE:4A95
DOSCODE:4A95 SK:                                     ; ...
DOSCODE:4A95                 call    SETYEAR
DOSCODE:4A98                 mov     cl, 1           ; At least at first month in year
DOSCODE:4A9A                 mov     si, offset MONTAB ; Table of days in each month
DOSCODE:4A9D                 call    DSLIDE          ; Find out which month we're in
DOSCODE:4AA0                 mov     ds:MONTH, cl
DOSCODE:4AA4                 inc     dx              ; Remainder is day of month (start with one)
DOSCODE:4AA5                 mov     ds:DAY, dl
DOSCODE:4AA9                 call    WKDAY           ; Set day of week
DOSCODE:4AAC                 pop     dx
DOSCODE:4AAD                 pop     cx
DOSCODE:4AAE                 pop     si
DOSCODE:4AAF
DOSCODE:4AAF RET22:                                  ; ...
DOSCODE:4AAF                 retn
DOSCODE:4AAF READTIME        endp
DOSCODE:4AAF
DOSCODE:4AB0
DOSCODE:4AB0 ; =============== S U B R O U T I N E =======================================
DOSCODE:4AB0
DOSCODE:4AB0
DOSCODE:4AB0 DSLIDE          proc near               ; ...
DOSCODE:4AB0                 mov     ah, 0           ; (AH is already ZERO here!) 6/1/2024
DOSCODE:4AB2
DOSCODE:4AB2 DSLIDE1:                                ; ...
DOSCODE:4AB2                 lodsb                   ; Get count of days
DOSCODE:4AB3                 cmp     dx, ax          ; See if it will fit
DOSCODE:4AB5                 jb      short RET22
DOSCODE:4AB7                 sub     dx, ax
DOSCODE:4AB9                 inc     cx              ; Count one more month/year
DOSCODE:4ABA                 jmp     short DSLIDE1
DOSCODE:4ABA DSLIDE          endp
DOSCODE:4ABA
DOSCODE:4ABC
DOSCODE:4ABC ; =============== S U B R O U T I N E =======================================
DOSCODE:4ABC
DOSCODE:4ABC
DOSCODE:4ABC SETYEAR         proc near               ; ...
DOSCODE:4ABC                 mov     ds, cs:DosDSeg
DOSCODE:4AC1                 mov     byte ptr ds:YEAR, cl
DOSCODE:4AC5
DOSCODE:4AC5 CHKYR:                                  ; ...
DOSCODE:4AC5                 test    cl, 3           ; Check for leap year
DOSCODE:4AC8                 mov     al, 28          ; 28 days if no leap year
DOSCODE:4ACA                 jnz     short SAVFEB
DOSCODE:4ACC                 inc     al              ; Add leap day
DOSCODE:4ACE
DOSCODE:4ACE SAVFEB:                                 ; ...
DOSCODE:4ACE                 mov     ds:february, al ; [MONTAB+1],AL ; Store for February
DOSCODE:4AD1
DOSCODE:4AD1 RET23:                                  ; ...
DOSCODE:4AD1                 retn
DOSCODE:4AD1 SETYEAR         endp
DOSCODE:4AD1
DOSCODE:4AD2
DOSCODE:4AD2 ; =============== S U B R O U T I N E =======================================
DOSCODE:4AD2
DOSCODE:4AD2
DOSCODE:4AD2 DODATE          proc near               ; ...
DOSCODE:4AD2                 call    CHKYR           ; Set Feb. up for new year
DOSCODE:4AD5                 mov     al, dh
DOSCODE:4AD7                 mov     bx, (offset YRTAB+7) ; MONTAB-1
DOSCODE:4ADA                 xlat                    ; Look up days in month
DOSCODE:4ADB                 cmp     al, dl
DOSCODE:4ADD                 mov     al, 0FFh        ; -1
DOSCODE:4ADF                 jb      short RET23     ; Error if too many days
DOSCODE:4AE1                 call    SETYEAR
DOSCODE:4AE4                 mov     word ptr ds:DAY, dx ; Set both day and month
DOSCODE:4AE8                 shr     cx, 1
DOSCODE:4AEA                 shr     cx, 1
DOSCODE:4AEC                 mov     ax, 1461        ; FOURYEARS
DOSCODE:4AEF                 mov     bx, dx
DOSCODE:4AF1                 mul     cx
DOSCODE:4AF3                 mov     cl, byte ptr ds:YEAR
DOSCODE:4AF7                 and     cl, 3
DOSCODE:4AFA                 mov     si, offset YRTAB
DOSCODE:4AFD                 mov     dx, ax
DOSCODE:4AFF                 add     cx, cx          ; Two entries per year, so double count
DOSCODE:4B01                 call    DSUM            ; Add up the days in each year
DOSCODE:4B04                 mov     cl, bh          ; Month of year
DOSCODE:4B06                 mov     si, offset MONTAB
DOSCODE:4B09                 dec     cx              ; Account for months starting with one
DOSCODE:4B0A                 call    DSUM            ; Add up days in each month
DOSCODE:4B0D                 mov     cl, bl          ; Day of month
DOSCODE:4B0F                 dec     cx              ; Account for days starting with one
DOSCODE:4B10                 add     dx, cx          ; Add in to day total
DOSCODE:4B12                 xchg    ax, dx          ; Get day count in AX
DOSCODE:4B13                 mov     ds:DAYCNT, ax
DOSCODE:4B16                 push    si
DOSCODE:4B17                 push    bx
DOSCODE:4B18                 push    ax
DOSCODE:4B19                 mov     bx, offset TIMEBUF
DOSCODE:4B1C                 mov     cx, 6
DOSCODE:4B1F                 xor     ax, ax
DOSCODE:4B21                 cwd
DOSCODE:4B22                 push    bx
DOSCODE:4B23                 call    SETREAD
DOSCODE:4B26                 push    ds
DOSCODE:4B27                 lds     si, ds:BCLOCK
DOSCODE:4B2B                 call    DEVIOCALL2      ; Get correct date and time
DOSCODE:4B2E                 pop     ds
DOSCODE:4B2F                 pop     bx
DOSCODE:4B30                 call    SETWRITE
DOSCODE:4B33                 pop     ds:TIMEBUF
DOSCODE:4B37                 push    ds
DOSCODE:4B38                 lds     si, ds:BCLOCK
DOSCODE:4B3C                 call    DEVIOCALL2      ; Set the date
DOSCODE:4B3F                 pop     ds
DOSCODE:4B40                 pop     bx
DOSCODE:4B41                 pop     si
DOSCODE:4B42
DOSCODE:4B42 WKDAY:                                  ; ...
DOSCODE:4B42                 mov     ax, ds:DAYCNT
DOSCODE:4B45                 xor     dx, dx
DOSCODE:4B47                 mov     cx, 7
DOSCODE:4B4A                 inc     ax
DOSCODE:4B4B                 inc     ax              ; First day was Tuesday
DOSCODE:4B4C                 div     cx              ; Compute day of week
DOSCODE:4B4E                 mov     ds:WEEKDAY, dl
DOSCODE:4B52                 xor     al, al          ; Flag OK
DOSCODE:4B54                 retn
DOSCODE:4B54 DODATE          endp
DOSCODE:4B54
DOSCODE:4B55
DOSCODE:4B55 ; =============== S U B R O U T I N E =======================================
DOSCODE:4B55
DOSCODE:4B55
DOSCODE:4B55 DSUM            proc near               ; ...
DOSCODE:4B55                 mov     ah, 0
DOSCODE:4B57                 jcxz    short DSUM9
DOSCODE:4B59
DOSCODE:4B59 DSUM1:                                  ; ...
DOSCODE:4B59                 lodsb
DOSCODE:4B5A                 add     dx, ax
DOSCODE:4B5C                 loop    DSUM1
DOSCODE:4B5E
DOSCODE:4B5E DSUM9:                                  ; ...
DOSCODE:4B5E                 retn
DOSCODE:4B5E DSUM            endp
DOSCODE:4B5E
DOSCODE:4B5F
DOSCODE:4B5F ; =============== S U B R O U T I N E =======================================
DOSCODE:4B5F
DOSCODE:4B5F
DOSCODE:4B5F $GET_VERSION    proc near               ; ...
DOSCODE:4B5F                 lds     cx, ss:USERNUM
DOSCODE:4B64                 mov     bx, ds
DOSCODE:4B66                 push    ss
DOSCODE:4B67                 pop     ds
DOSCODE:4B68                 assume ds:DOSCODE
DOSCODE:4B68                 cmp     al, 1
DOSCODE:4B6A                 jnz     short Norm_Vers
DOSCODE:4B6C                 xor     bh, bh          ; return 0 (not ROMDOS version)
DOSCODE:4B6E
DOSCODE:4B6E Norm_Vers:                              ; ...
DOSCODE:4B6E                 mov     ds, CurrentPDB  ; Get the version number from the
DOSCODE:4B6E                                         ; current app's PSP segment
DOSCODE:4B72                 assume ds:nothing
DOSCODE:4B72                 mov     ax, word ptr ds:40h ; [PDB.Version]
DOSCODE:4B72                                         ; AX = DOS version number
DOSCODE:4B75                 call    Get_User_Stack
DOSCODE:4B78
DOSCODE:4B78 gdrvfspc_ret:                           ; ...
DOSCODE:4B78                 mov     [si], ax        ; [SI+user_env.user_AX]
DOSCODE:4B7A                 mov     [si+4], cx      ; [SI+user_env.user_CX]
DOSCODE:4B7D
DOSCODE:4B7D set_user_bx:                            ; ...
DOSCODE:4B7D                 mov     [si+2], bx      ; [SI+user_env.user_BX]
DOSCODE:4B80                 retn
DOSCODE:4B80 $GET_VERSION    endp
DOSCODE:4B80
DOSCODE:4B81 ; ---------------------------------------------------------------------------
DOSCODE:4B81
DOSCODE:4B81 $GET_VERIFY_ON_WRITE:                   ; ...
DOSCODE:4B81                 mov     al, ss:VDERFLG
DOSCODE:4B85                 retn
DOSCODE:4B86 ; ---------------------------------------------------------------------------
DOSCODE:4B86
DOSCODE:4B86 $SET_VERIFY_ON_WRITE:                   ; ...
DOSCODE:4B86                 and     al, 1
DOSCODE:4B88                 mov     ss:VDERFLG, al
DOSCODE:4B8C
DOSCODE:4B8C RET27:                                  ; ...
DOSCODE:4B8C                 retn
DOSCODE:4B8D
DOSCODE:4B8D ; =============== S U B R O U T I N E =======================================
DOSCODE:4B8D
DOSCODE:4B8D
DOSCODE:4B8D $INTERNATIONAL  proc near               ; ...
DOSCODE:4B8D
DOSCODE:4B8D ; FUNCTION CHUNK AT DOSCODE:4BE2 SIZE 0000002E BYTES
DOSCODE:4B8D
DOSCODE:4B8D                 cmp     al, 0FFh        ; -1 means country code is in BX
DOSCODE:4B8F                 jz      short BX_HAS_CODE
DOSCODE:4B91                 mov     bl, al          ; Put AL country code in BX
DOSCODE:4B93                 xor     bh, bh
DOSCODE:4B95
DOSCODE:4B95 BX_HAS_CODE:                            ; ...
DOSCODE:4B95                 push    ds
DOSCODE:4B96                 pop     es
DOSCODE:4B97                 push    dx
DOSCODE:4B98                 pop     di              ; User buffer to ES:DI
DOSCODE:4B99                 push    ss
DOSCODE:4B9A                 pop     ds
DOSCODE:4B9B                 assume ds:DOSCODE
DOSCODE:4B9B                 cmp     di, 0FFFFh      ; -1
DOSCODE:4B9E                 jz      short international_set
DOSCODE:4BA0                 or      bx, bx
DOSCODE:4BA2                 jnz     short international_find
DOSCODE:4BA4                 mov     si, offset COUNTRY_CDPG
DOSCODE:4BA7                 jmp     short international_copy
DOSCODE:4BA9 ; ---------------------------------------------------------------------------
DOSCODE:4BA9
DOSCODE:4BA9 international_find:                     ; ...
DOSCODE:4BA9                 xor     bp, bp          ; 0 ; flag it for GetCntry only
DOSCODE:4BAB                 call    international_get
DOSCODE:4BAE                 jb      short errtn
DOSCODE:4BB0                 or      bx, bx          ; nlsfunc finished it ?
DOSCODE:4BB2                 jnz     short international_copy ; no, copy by myself
DOSCODE:4BB4                 mov     bx, dx          ; put country back
DOSCODE:4BB6                 jmp     short international_ok3
DOSCODE:4BB6 $INTERNATIONAL  endp
DOSCODE:4BB6
DOSCODE:4BB8
DOSCODE:4BB8 ; =============== S U B R O U T I N E =======================================
DOSCODE:4BB8
DOSCODE:4BB8
DOSCODE:4BB8 international_get proc near             ; ...
DOSCODE:4BB8                 mov     si, offset COUNTRY_CDPG
DOSCODE:4BBB                 cmp     bx, ss:[si+68h] ; [SI+DOS_CCDPG.ccDosCountry]
DOSCODE:4BBF                 jz      short RET27     ; = current country id
DOSCODE:4BC1                 mov     dx, bx
DOSCODE:4BC3                 xor     bx, bx          ; bx = 0, default code page
DOSCODE:4BC5                 mov     ax, 1400h
DOSCODE:4BC8                 int     2Fh             ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
DOSCODE:4BC8                                         ; Return: AL = 00h not installed, OK to install
DOSCODE:4BC8                                         ; 01h not installed, not OK
DOSCODE:4BC8                                         ; FFh installed
DOSCODE:4BCA                 cmp     al, 0FFh        ; not in memory
DOSCODE:4BCC                 jnz     short interr
DOSCODE:4BCE                 mov     ax, 1403h       ; set country info
DOSCODE:4BD1                 or      bp, bp          ; GetCntry ?
DOSCODE:4BD3                 jnz     short stcdpg
DOSCODE:4BD5                 inc     ax              ; AX = 1404h ; get country info
DOSCODE:4BD6
DOSCODE:4BD6 stcdpg:                                 ; ...
DOSCODE:4BD6                 int     2Fh             ; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
DOSCODE:4BD6                                         ; BX = code page, DX = country code, DS:SI -> internal code page structure
DOSCODE:4BD6                                         ; ES:DI -> user buffer
DOSCODE:4BD6                                         ; Return: AL = status
DOSCODE:4BD8                 or      al, al
DOSCODE:4BDA                 jz      short RET27
DOSCODE:4BDC
DOSCODE:4BDC setcarry:                               ; ...
DOSCODE:4BDC                 stc
DOSCODE:4BDD                 retn
DOSCODE:4BDE ; ---------------------------------------------------------------------------
DOSCODE:4BDE
DOSCODE:4BDE interr:                                 ; ...
DOSCODE:4BDE                 mov     al, 0FFh
DOSCODE:4BE0                 jmp     short setcarry
DOSCODE:4BE0 international_get endp
DOSCODE:4BE0
DOSCODE:4BE2 ; ---------------------------------------------------------------------------
DOSCODE:4BE2 ; START OF FUNCTION CHUNK FOR $INTERNATIONAL
DOSCODE:4BE2
DOSCODE:4BE2 international_copy:                     ; ...
DOSCODE:4BE2                 mov     bx, ss:[si+68h] ; [ss:SI+DOS_CCDPG.ccDosCountry]
DOSCODE:4BE6                 mov     si, offset COUNTRY_CDPG_108 ; COUNTRY_CDPG+DOS_CCDPG.ccDFormat
DOSCODE:4BE9                 mov     cx, 12          ; OLD_COUNTRY_SIZE/2
DOSCODE:4BEC                 push    ds
DOSCODE:4BED                 push    ss
DOSCODE:4BEE                 pop     ds
DOSCODE:4BEF                 rep movsw
DOSCODE:4BF1                 pop     ds
DOSCODE:4BF2                 assume ds:nothing
DOSCODE:4BF2
DOSCODE:4BF2 international_ok3:                      ; ...
DOSCODE:4BF2                 call    Get_User_Stack
DOSCODE:4BF5                 call    set_user_bx     ; MOV [SI+user_env.user_BX],BX
DOSCODE:4BF8
DOSCODE:4BF8 international_ok:                       ; ...
DOSCODE:4BF8                 mov     ax, bx
DOSCODE:4BFA                 jmp     SYS_RET_OK
DOSCODE:4BFD ; ---------------------------------------------------------------------------
DOSCODE:4BFD
DOSCODE:4BFD international_set:                      ; ...
DOSCODE:4BFD                 mov     bp, 1
DOSCODE:4C00                 call    international_get
DOSCODE:4C03                 jnb     short international_ok
DOSCODE:4C05
DOSCODE:4C05 errtn:                                  ; ...
DOSCODE:4C05                 cmp     al, 0FFh
DOSCODE:4C07                 jz      short errtn2
DOSCODE:4C09
DOSCODE:4C09 errtn1:                                 ; ...
DOSCODE:4C09                 jmp     SYS_RET_ERR
DOSCODE:4C0C ; ---------------------------------------------------------------------------
DOSCODE:4C0C
DOSCODE:4C0C errtn2:                                 ; ...
DOSCODE:4C0C                 mov     al, 1           ; error_invalid_function
DOSCODE:4C0E                 jmp     short errtn1    ; NLSFUNC not existent
DOSCODE:4C0E ; END OF FUNCTION CHUNK FOR $INTERNATIONAL
DOSCODE:4C10 ; ---------------------------------------------------------------------------
DOSCODE:4C10
DOSCODE:4C10 $ExtCountryInfo:                        ; ...
DOSCODE:4C10                 cmp     al, 2           ; INT 21h, AH = 70h (06/01/2024 - Erdogan Tan)
DOSCODE:4C10                                         ; GET/SET INTERNATIONALIZATION INFORMATION
DOSCODE:4C10                                         ; ****
DOSCODE:4C10                                         ; AL = subfunction
DOSCODE:4C10                                         ; 00h SET general internationalization info
DOSCODE:4C10                                         ;     CX = buffer size (up to 38 bytes)
DOSCODE:4C10                                         ;     DS:SI -> buffer containing internationalization info
DOSCODE:4C10                                         ;  first three bytes are skipped, the rest is copied to somewhere
DOSCODE:4C10                                         ;  in the DOS data segment
DOSCODE:4C10                                         ; 01h SET extended internationalization info
DOSCODE:4C10                                         ;     CX = number of bytes to set (up to 58 bytes)
DOSCODE:4C10                                         ;     DS:SI -> buffer containing internationalization info
DOSCODE:4C10                                         ; 02h GET extended internationalization info
DOSCODE:4C10                                         ;     CX = buffer size in bytes (up to 58 bytes used)
DOSCODE:4C10                                         ;     ES:DI -> buffer
DOSCODE:4C10                                         ; ****
DOSCODE:4C10                                         ; (Ref: Ralf Brown's Interrupt List) - had some mistakes -
DOSCODE:4C12                 ja      short errtn2
DOSCODE:4C14                 push    es
DOSCODE:4C15                 push    ss
DOSCODE:4C16                 jnz     short ext_cntry_inf_1
DOSCODE:4C18                 pop     es              ; AX = GET 35 bytes info (from offset 3 to 37)
DOSCODE:4C18                                         ; (38 bytes buffer is used)
DOSCODE:4C19                 mov     di, offset _COUNTRY_ID
DOSCODE:4C1C                 mov     ax, es:[di-2]   ; NEW_COUNTRY_SIZE = 38
DOSCODE:4C20                 mov     bx, 3           ; skip the 1st 3 bytes of the buffer
DOSCODE:4C23                 add     si, bx
DOSCODE:4C25                 jmp     short ext_cntry_inf_4
DOSCODE:4C27 ; ---------------------------------------------------------------------------
DOSCODE:4C27
DOSCODE:4C27 ext_cntry_inf_1:                        ; ...
DOSCODE:4C27                 dec     al
DOSCODE:4C29                 jnz     short ext_cntry_inf_2 ; AX = 2
DOSCODE:4C2B                 pop     es              ; AX = 1 (set)
DOSCODE:4C2C                 mov     di, offset _ENU ; "ENU"
DOSCODE:4C2F                 jmp     short ext_cntry_inf_3
DOSCODE:4C31 ; ---------------------------------------------------------------------------
DOSCODE:4C31
DOSCODE:4C31 ext_cntry_inf_2:                        ; ...
DOSCODE:4C31                 pop     ds              ; AX = 2 (get)
DOSCODE:4C32                 mov     si, offset _ENU ; "ENU"
DOSCODE:4C35
DOSCODE:4C35 ext_cntry_inf_3:                        ; ...
DOSCODE:4C35                 xor     bx, bx          ; 0
DOSCODE:4C37                 mov     ax, 58          ; 3Ah
DOSCODE:4C3A
DOSCODE:4C3A ext_cntry_inf_4:                        ; ...
DOSCODE:4C3A                 cmp     cx, ax          ; > 38 ? (58)
DOSCODE:4C3C                 jb      short ext_cntry_inf_5 ; no
DOSCODE:4C3E                 mov     cx, ax          ; yes, decrease size to 38 (58)
DOSCODE:4C40
DOSCODE:4C40 ext_cntry_inf_5:                        ; ...
DOSCODE:4C40                 mov     ax, cx          ; buffer (filled) size
DOSCODE:4C42                 sub     cx, bx          ; copy byte count
DOSCODE:4C44                 rep movsb
DOSCODE:4C46                 pop     es
DOSCODE:4C47                 jmp     ret_ax_to_user_cx ; ax -> user's cx
DOSCODE:4C4A
DOSCODE:4C4A ; =============== S U B R O U T I N E =======================================
DOSCODE:4C4A
DOSCODE:4C4A
DOSCODE:4C4A $GetExtCntry    proc near               ; ...
DOSCODE:4C4A                 cmp     al, 20h         ; CAP_ONE_CHAR  ; < 20h
DOSCODE:4C4C                 jb      short notcap
DOSCODE:4C4E                 test    al, 80h         ; UPPER_TABLE
DOSCODE:4C50                 jnz     short fileupper ; file upper case
DOSCODE:4C52                 mov     bx, offset UCASE_TAB_2 ; UCASE_TAB+2
DOSCODE:4C52                                         ; get normal upper case
DOSCODE:4C55                 jmp     short capit
DOSCODE:4C57 ; ---------------------------------------------------------------------------
DOSCODE:4C57
DOSCODE:4C57 fileupper:                              ; ...
DOSCODE:4C57                 and     al, 7Fh
DOSCODE:4C59                 mov     bx, offset FILE_UCASE_TAB_2 ; FILE_UCASE_TAB+2
DOSCODE:4C59                                         ; get file upper case
DOSCODE:4C5C
DOSCODE:4C5C capit:                                  ; ...
DOSCODE:4C5C                 cmp     al, 20h         ; CAP_ONE_CHAR ; cap one char ?
DOSCODE:4C5E                 jnz     short chkyes
DOSCODE:4C60                 mov     al, dl          ; set up AL
DOSCODE:4C62                 call    GETLET3         ; upper case it
DOSCODE:4C65                 call    Get_User_Stack  ; get user stack
DOSCODE:4C68                 mov     [si+6], al      ; [SI+user_env.user_DX]
DOSCODE:4C6B                 jmp     short nono      ; done
DOSCODE:4C6D ; ---------------------------------------------------------------------------
DOSCODE:4C6D
DOSCODE:4C6D chkyes:                                 ; ...
DOSCODE:4C6D                 cmp     al, 23h         ; CHECK_YES_NO
DOSCODE:4C6F                 jnz     short capstring ; no
DOSCODE:4C6F                                         ; Yes/No
DOSCODE:4C71                 xor     ax, ax          ; presume NO
DOSCODE:4C73                 cmp     dl, ss:NLS_YES
DOSCODE:4C78                 jz      short yesyes    ; Y(ES)
DOSCODE:4C7A                 cmp     dl, ss:NLS_yes2
DOSCODE:4C7F                 jz      short yesyes    ; y(es)
DOSCODE:4C81                 cmp     dl, ss:NLS_NO
DOSCODE:4C86                 jz      short nono      ; N(O)
DOSCODE:4C88                 cmp     dl, ss:NLS_no2
DOSCODE:4C8D                 jz      short nono      ; n(o)
DOSCODE:4C8F                 inc     ax              ; not YES or NO
DOSCODE:4C90
DOSCODE:4C90 yesyes:                                 ; ...
DOSCODE:4C90                 inc     ax              ; YES = 1
DOSCODE:4C91
DOSCODE:4C91 nono:                                   ; ...
DOSCODE:4C91                 jmp     SYS_RET_OK
DOSCODE:4C94 ; ---------------------------------------------------------------------------
DOSCODE:4C94
DOSCODE:4C94 capstring:                              ; ...
DOSCODE:4C94                 mov     si, dx
DOSCODE:4C96                 cmp     al, 21h         ; CAP_STRING
DOSCODE:4C98                 jnz     short capascii
DOSCODE:4C9A                 jcxz    short nono
DOSCODE:4C9C
DOSCODE:4C9C concap:                                 ; ...
DOSCODE:4C9C                 lodsb                   ; get char
DOSCODE:4C9D                 call    GETLET3         ; upper case it
DOSCODE:4CA0                 mov     [si-1], al      ; store back
DOSCODE:4CA3                 loop    concap          ; continue
DOSCODE:4CA5                 jmp     short nono      ; done
DOSCODE:4CA7 ; ---------------------------------------------------------------------------
DOSCODE:4CA7
DOSCODE:4CA7 capascii:                               ; ...
DOSCODE:4CA7                 cmp     al, 22h         ; CAP_ASCIIZ
DOSCODE:4CA9                 jnz     short capinval
DOSCODE:4CAB
DOSCODE:4CAB concap2:                                ; ...
DOSCODE:4CAB                 lodsb                   ; get char
DOSCODE:4CAC                 or      al, al          ; end of string ?
DOSCODE:4CAE                 jz      short nono      ; yes
DOSCODE:4CB0                 call    GETLET3         ; upper case it
DOSCODE:4CB3                 mov     [si-1], al      ; store back
DOSCODE:4CB6                 jmp     short concap2   ; continue
DOSCODE:4CB8 ; ---------------------------------------------------------------------------
DOSCODE:4CB8
DOSCODE:4CB8 notcap:                                 ; ...
DOSCODE:4CB8                 cmp     cx, 5           ; minimum size is 5
DOSCODE:4CBB                 jb      short capinval  ; sizeerror
DOSCODE:4CBD
DOSCODE:4CBD GEC_CONT:
DOSCODE:4CBD                 push    ss
DOSCODE:4CBE                 pop     ds
DOSCODE:4CBF                 assume ds:DOSCODE
DOSCODE:4CBF                 mov     si, offset COUNTRY_CDPG
DOSCODE:4CC2                 or      al, al
DOSCODE:4CC4                 jnz     short GETCNTRY  ;
DOSCODE:4CC4                                         ; AL = 0 (INT 21h, AX=6500h)
DOSCODE:4CC4                                         ; Set extended country-dependent information
DOSCODE:4CC4                                         ; (SET GENERAL INTERNATIONALIZATION INFO)
DOSCODE:4CC6                 sub     cx, 7           ; minimum 8 bytes
DOSCODE:4CC9                 jbe     short capinval  ; error_invalid_function
DOSCODE:4CCB                 mov     bx, [si+48h]    ; [SI+DOS_CCDPG.ccSysCodePage]
DOSCODE:4CCE                 lea     si, [si+66h]    ; SI+DOS_CCDPG.ccCountryInfoLen
DOSCODE:4CD1                 mov     ax, [si]
DOSCODE:4CD3                 sub     ax, 4
DOSCODE:4CD6                 cmp     cx, ax
DOSCODE:4CD8                 jbe     short set_inter_info
DOSCODE:4CDA                 mov     cx, ax
DOSCODE:4CDC
DOSCODE:4CDC set_inter_info:                         ; ...
DOSCODE:4CDC                 mov     ax, cx
DOSCODE:4CDE                 add     ax, 4
DOSCODE:4CE1                 mov     es:[di+1], ax   ; info length/size (will be written)
DOSCODE:4CE5                 add     si, 6           ; DOS_CCDPG.ccDFormat
DOSCODE:4CE8                 add     di, 7           ; points to date format
DOSCODE:4CEB                 call    XCHGP           ; ds:si = user's buffer + 6
DOSCODE:4CEB                                         ; es:di = country info buffer + 7
DOSCODE:4CEE                 jmp     short OK_RETN
DOSCODE:4CF0 ; ---------------------------------------------------------------------------
DOSCODE:4CF0
DOSCODE:4CF0 GETCNTRY:                               ; ...
DOSCODE:4CF0                 cmp     dx, 0FFFFh      ; -1 ; active country ?
DOSCODE:4CF3                 jnz     short GETCDPG
DOSCODE:4CF5                 mov     dx, [si+68h]    ; [SI+DOS_CCDPG.ccDosCountry]
DOSCODE:4CF8
DOSCODE:4CF8 GETCDPG:                                ; ...
DOSCODE:4CF8                 cmp     bx, 0FFFFh      ; -1 ; active code page?
DOSCODE:4CFB                 jnz     short CHKAGAIN
DOSCODE:4CFD                 mov     bx, [si+6Ah]    ; [SI+DOS_CCDPG.ccDosCodePage] ; get active code page
DOSCODE:4D00
DOSCODE:4D00 CHKAGAIN:                               ; ...
DOSCODE:4D00                 cmp     dx, [si+68h]    ; [SI+DOS_CCDPG.ccDosCountry] ; same ?
DOSCODE:4D03                 jnz     short CHKNLS    ; no
DOSCODE:4D05                 cmp     bx, [si+6Ah]    ; [SI+DOS_CCDPG.ccDosCodePage] ; same ?
DOSCODE:4D08                 jnz     short CHKNLS    ; no
DOSCODE:4D0A
DOSCODE:4D0A CHKTYPE:                                ; yes, same code page and same country id
DOSCODE:4D0A                 mov     bx, [si+48h]    ; [SI+DOS_CCDPG.ccSysCodePage]
DOSCODE:4D0D                 push    cx
DOSCODE:4D0E                 mov     cx, [si+4Ah]    ; [SI+DOS_CCDPG.ccNumber_of_entries]
DOSCODE:4D11                 mov     si, offset COUNTRY_CDPG_76 ; COUNTRY_CDPG+DOS_CCDPG.ccSetUcase
DOSCODE:4D14
DOSCODE:4D14 NXTENTRY:                               ; ...
DOSCODE:4D14                 cmp     al, [si]        ; compare info type
DOSCODE:4D16                 jz      short FOUNDIT
DOSCODE:4D18                 add     si, 5           ; next entry
DOSCODE:4D1B                 loop    NXTENTRY
DOSCODE:4D1D                 pop     cx
DOSCODE:4D1E
DOSCODE:4D1E capinval:                               ; ...
DOSCODE:4D1E                 jmp     errtn2          ; error_invalid_function
DOSCODE:4D21 ; ---------------------------------------------------------------------------
DOSCODE:4D21
DOSCODE:4D21 FOUNDIT:                                ; ...
DOSCODE:4D21                 movsb                   ; move info id byte
DOSCODE:4D22                 pop     cx              ; restore char count
DOSCODE:4D23                 cmp     al, 1           ; SetCountryInfo ; select country info type ?
DOSCODE:4D25                 jz      short setsize   ; yes
DOSCODE:4D27                 mov     cx, 4           ; 4 bytes will be moved
DOSCODE:4D2A                 mov     ax, 5           ; 5 bytes will be returned in CX
DOSCODE:4D2D
DOSCODE:4D2D OK_RETN:                                ; ...
DOSCODE:4D2D                 rep movsb               ; copy info
DOSCODE:4D2F                 mov     cx, ax          ; CX = actual length returned
DOSCODE:4D31                 mov     ax, bx          ; return sys code page in ax
DOSCODE:4D33
DOSCODE:4D33 GETDONE:                                ; ...
DOSCODE:4D33                 call    Get_User_Stack  ; return actual length to user's CX
DOSCODE:4D36                 mov     [si+4], cx      ; [SI+user_env.user_CX]
DOSCODE:4D39
DOSCODE:4D39 nono_jmp:                               ; ...
DOSCODE:4D39                 jmp     SYS_RET_OK
DOSCODE:4D3C ; ---------------------------------------------------------------------------
DOSCODE:4D3C
DOSCODE:4D3C setsize:                                ; ...
DOSCODE:4D3C                 sub     cx, 3           ; size after length field
DOSCODE:4D3F                 cmp     [si], cx        ; less than table size
DOSCODE:4D41                 jnb     short setsize2  ; no
DOSCODE:4D43                 mov     cx, [si]        ; truncate to table size
DOSCODE:4D45
DOSCODE:4D45 setsize2:                               ; ...
DOSCODE:4D45                 mov     es:[di], cx     ; copy actual length to user's buffer
DOSCODE:4D48                 inc     di              ; update index
DOSCODE:4D49                 inc     di
DOSCODE:4D4A                 inc     si
DOSCODE:4D4B                 inc     si
DOSCODE:4D4C                 mov     ax, cx
DOSCODE:4D4E                 add     ax, 3           ; AX has the actual length
DOSCODE:4D51                 jmp     short OK_RETN
DOSCODE:4D53 ; ---------------------------------------------------------------------------
DOSCODE:4D53
DOSCODE:4D53 CHKNLS:                                 ; ...
DOSCODE:4D53                 xor     ah, ah
DOSCODE:4D55                 mov     bp, ax
DOSCODE:4D57                 mov     ax, 1400h
DOSCODE:4D5A                 int     2Fh             ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
DOSCODE:4D5A                                         ; Return: AL = 00h not installed, OK to install
DOSCODE:4D5A                                         ; 01h not installed, not OK
DOSCODE:4D5A                                         ; FFh installed
DOSCODE:4D5C                 cmp     al, 0FFh
DOSCODE:4D5E                 jz      short NLSNXT    ; in memory
DOSCODE:4D60
DOSCODE:4D60 sizeerror:                              ; ...
DOSCODE:4D60                 jmp     short capinval
DOSCODE:4D62 ; ---------------------------------------------------------------------------
DOSCODE:4D62
DOSCODE:4D62 NLSNXT:                                 ; ...
DOSCODE:4D62                 mov     ax, 1402h
DOSCODE:4D65                 int     2Fh             ; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
DOSCODE:4D65                                         ; BP = subfunction, BX = code page
DOSCODE:4D65                                         ; DX = country code, DS:SI -> internal code page structure
DOSCODE:4D65                                         ; ES:DI -> user buffer, CX = size of user buffer
DOSCODE:4D65                                         ; Return: AL = status
DOSCODE:4D65                                         ; 00h successful
DOSCODE:4D65                                         ; else DOS error code
DOSCODE:4D67                 cmp     al, 0
DOSCODE:4D69                 jnz     short NLSERROR
DOSCODE:4D6B                 mov     ax, [si+48h]    ; [SI+DOS_CCDPG.ccSysCodePage]
DOSCODE:4D6E                 jmp     short GETDONE
DOSCODE:4D70 ; ---------------------------------------------------------------------------
DOSCODE:4D70
DOSCODE:4D70 NLSERROR:                               ; ...
DOSCODE:4D70                 jmp     SYS_RET_ERR
DOSCODE:4D70 $GetExtCntry    endp
DOSCODE:4D70
DOSCODE:4D73
DOSCODE:4D73 ; =============== S U B R O U T I N E =======================================
DOSCODE:4D73
DOSCODE:4D73
DOSCODE:4D73 $GetSetCdPg     proc near               ; ...
DOSCODE:4D73                 push    ss
DOSCODE:4D74                 pop     ds
DOSCODE:4D75                 mov     si, offset COUNTRY_CDPG
DOSCODE:4D78                 cmp     al, 1           ; get global code page
DOSCODE:4D7A                 jnz     short setglpg
DOSCODE:4D7C                 mov     bx, [si+6Ah]    ; [SI+DOS_CCDPG.ccDosCodePage]
DOSCODE:4D7F                 mov     dx, [si+48h]    ; [SI+DOS_CCDPG.ccSysCodePage]
DOSCODE:4D82                 call    Get_User_Stack
DOSCODE:4D85                 call    set_user_bx
DOSCODE:4D88                 mov     [si+6], dx      ; [SI+user_env.user_DX]
DOSCODE:4D8B
DOSCODE:4D8B OK_RETURN:                              ; ...
DOSCODE:4D8B                 jmp     short nono_jmp
DOSCODE:4D8D ; ---------------------------------------------------------------------------
DOSCODE:4D8D
DOSCODE:4D8D setglpg:                                ; ...
DOSCODE:4D8D                 cmp     al, 2           ; set global codepage
DOSCODE:4D8F                 jnz     short nomem
DOSCODE:4D91                 mov     dx, [si+68h]    ; [SI+DOS_CCDPG.ccDosCountry]
DOSCODE:4D94                 mov     ax, 1400h
DOSCODE:4D97                 int     2Fh             ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
DOSCODE:4D97                                         ; Return: AL = 00h not installed, OK to install
DOSCODE:4D97                                         ; 01h not installed, not OK
DOSCODE:4D97                                         ; FFh installed
DOSCODE:4D99                 cmp     al, 0FFh
DOSCODE:4D9B                 jnz     short nomem
DOSCODE:4D9D                 mov     ax, 1401h
DOSCODE:4DA0                 int     2Fh             ; - Multiplex - NLSFUNC.COM - CHANGE CODE PAGE
DOSCODE:4DA0                                         ; DS:SI -> internal code page structure
DOSCODE:4DA0                                         ; BX = new code page, DX = country code???
DOSCODE:4DA0                                         ; Return: AL = status
DOSCODE:4DA0                                         ; 00h successful
DOSCODE:4DA0                                         ; else DOS error code
DOSCODE:4DA2                 or      al, al
DOSCODE:4DA4                 jz      short OK_RETURN
DOSCODE:4DA6                 cmp     al, 65          ; set device code page failed
DOSCODE:4DA8                 jnz     short seterr
DOSCODE:4DAA                 cbw
DOSCODE:4DAB                 mov     EXTERR, ax
DOSCODE:4DAE                 mov     EXTERR_ACTION, 6 ; errACT_Ignore
DOSCODE:4DB3                 mov     EXTERR_CLASS, 5 ; errCLASS_HrdFail
DOSCODE:4DB8                 mov     EXTERR_LOCUS, 4 ; errLOC_SerDev
DOSCODE:4DBD                 jmp     From_GetSet
DOSCODE:4DC0 ; ---------------------------------------------------------------------------
DOSCODE:4DC0
DOSCODE:4DC0 seterr:                                 ; ...
DOSCODE:4DC0                 jmp     short NLSERROR  ; transfer SYS_RET_ERR
DOSCODE:4DC2 ; ---------------------------------------------------------------------------
DOSCODE:4DC2
DOSCODE:4DC2 nomem:                                  ; ...
DOSCODE:4DC2                 jmp     short sizeerror ; function not defined
DOSCODE:4DC2 $GetSetCdPg     endp
DOSCODE:4DC2
DOSCODE:4DC4 ; ---------------------------------------------------------------------------
DOSCODE:4DC4
DOSCODE:4DC4 $GET_DRIVE_FREESPACE:                   ; ...
DOSCODE:4DC4                 push    ss
DOSCODE:4DC5                 pop     ds
DOSCODE:4DC6                 mov     al, dl
DOSCODE:4DC8                 call    GETTHISDRV      ; Get drive
DOSCODE:4DCB                 jb      short BADFDRV   ; User FAILed to I 24
DOSCODE:4DCD                 call    DISK_INFO
DOSCODE:4DD0                 jnb     short gdrvfspc_1
DOSCODE:4DD2                 xchg    dx, bx
DOSCODE:4DD4                 jmp     short BADFDRV
DOSCODE:4DD6 ; ---------------------------------------------------------------------------
DOSCODE:4DD6
DOSCODE:4DD6 gdrvfspc_1:                             ; ...
DOSCODE:4DD6                 xor     ah, ah          ; Chuck Fat ID byte
DOSCODE:4DD8                 push    di
DOSCODE:4DD9                 call    TestNet
DOSCODE:4DDC                 pop     di
DOSCODE:4DDD                 jb      short gdrvfspc_2
DOSCODE:4DDF                 call    modify_cluster_count ;
DOSCODE:4DDF                                         ; if hw of total clusters (di) > 0
DOSCODE:4DDF                                         ; sectors per cluster and cluster counts
DOSCODE:4DDF                                         ; will be modified (shifted)
DOSCODE:4DDF                                         ; (but sectors per clust * clust count will be same)
DOSCODE:4DDF                                         ; /// disk size -calculation- limit = 2 GB ///
DOSCODE:4DE2
DOSCODE:4DE2 gdrvfspc_2:                             ; ...
DOSCODE:4DE2                 xchg    dx, bx          ; bx = free clusters (after xchg)
DOSCODE:4DE4
DOSCODE:4DE4 DoSt:                                   ; ...
DOSCODE:4DE4                 call    Get_User_Stack
DOSCODE:4DE7                 mov     [si+6], dx      ; [SI+user_env.user_DX] ; total clusters
DOSCODE:4DEA                 jmp     gdrvfspc_ret    ; ax = sectors per cluster (modified)
DOSCODE:4DED ; ---------------------------------------------------------------------------
DOSCODE:4DED
DOSCODE:4DED BADFDRV:                                ; ...
DOSCODE:4DED                 call    FCB_RET_ERR
DOSCODE:4DF0                 mov     ax, 0FFFFh      ; -1
DOSCODE:4DF3                 jmp     short DoSt
DOSCODE:4DF5 ; ---------------------------------------------------------------------------
DOSCODE:4DF5
DOSCODE:4DF5 $GET_DMA:                               ; ...
DOSCODE:4DF5                 mov     bx, word ptr ss:DMAADD ; Get Disk Transfer Address
DOSCODE:4DFA                 mov     cx, word ptr ss:DMAADD+2
DOSCODE:4DFF                 call    Get_User_Stack
DOSCODE:4E02                 mov     [si+10h], cx
DOSCODE:4E05                 jmp     set_user_bx
DOSCODE:4E08 ; ---------------------------------------------------------------------------
DOSCODE:4E08
DOSCODE:4E08 $SET_DMA:                               ; ...
DOSCODE:4E08                 mov     word ptr ss:DMAADD, dx ; Set Disk Transfer Address
DOSCODE:4E0D                 mov     word ptr ss:DMAADD+2, ds
DOSCODE:4E12                 retn
DOSCODE:4E13 ; ---------------------------------------------------------------------------
DOSCODE:4E13
DOSCODE:4E13 $GET_DEFAULT_DRIVE:                     ; ...
DOSCODE:4E13                 mov     al, ss:CURDRV
DOSCODE:4E17                 retn
DOSCODE:4E18 ; ---------------------------------------------------------------------------
DOSCODE:4E18
DOSCODE:4E18 $SET_DEFAULT_DRIVE:                     ; ...
DOSCODE:4E18                 mov     al, dl
DOSCODE:4E1A                 inc     al              ; A=1, B=2...
DOSCODE:4E1C                 call    GetVisDrv       ; see if visible drive
DOSCODE:4E1F                 jb      short SETRET    ; errors do not set
DOSCODE:4E21                 mov     ss:CURDRV, al   ; no, set
DOSCODE:4E25
DOSCODE:4E25 SETRET:                                 ; ...
DOSCODE:4E25                 mov     al, ss:CDSCOUNT ; let user see what the count really is
DOSCODE:4E29                 retn
DOSCODE:4E2A
DOSCODE:4E2A ; =============== S U B R O U T I N E =======================================
DOSCODE:4E2A
DOSCODE:4E2A
DOSCODE:4E2A $GET_INTERRUPT_VECTOR proc near         ; ...
DOSCODE:4E2A                 call    RECSET
DOSCODE:4E2D                 les     bx, es:[bx]
DOSCODE:4E30                 call    Get_User_Stack
DOSCODE:4E33
DOSCODE:4E33 set_user_es_bx:                         ; ...
DOSCODE:4E33                 mov     word ptr [si+10h], es ; [SI+user_env.user_ES]
DOSCODE:4E36                 jmp     set_user_bx
DOSCODE:4E36 $GET_INTERRUPT_VECTOR endp
DOSCODE:4E36
DOSCODE:4E39 ; ---------------------------------------------------------------------------
DOSCODE:4E39
DOSCODE:4E39 $SET_INTERRUPT_VECTOR:                  ; ...
DOSCODE:4E39                 call    RECSET
DOSCODE:4E3C                 cli
DOSCODE:4E3D                 mov     es:[bx], dx
DOSCODE:4E40                 mov     word ptr es:[bx+2], ds
DOSCODE:4E44                 sti
DOSCODE:4E45                 test    ss:DOS_FLAG, 4  ; EXECA20OF
DOSCODE:4E45                                         ; was the previous call an int 21h exec call ?
DOSCODE:4E4B                 jnz     short siv_1     ; yes
DOSCODE:4E4D                 retn
DOSCODE:4E4E ; ---------------------------------------------------------------------------
DOSCODE:4E4E
DOSCODE:4E4E siv_1:                                  ; ...
DOSCODE:4E4E                 cmp     ss:A20OFF_COUNT, 0
DOSCODE:4E54                 jnz     short siv_2
DOSCODE:4E56                 mov     ss:A20OFF_COUNT, 1 ; indicate to dos dispatcher to
DOSCODE:4E56                                         ; turn A20 Off before returning to user
DOSCODE:4E5C
DOSCODE:4E5C siv_2:                                  ; ...
DOSCODE:4E5C                 retn
DOSCODE:4E5D
DOSCODE:4E5D ; =============== S U B R O U T I N E =======================================
DOSCODE:4E5D
DOSCODE:4E5D
DOSCODE:4E5D RECSET          proc near               ; ...
DOSCODE:4E5D                 xor     bx, bx
DOSCODE:4E5F                 mov     es, bx
DOSCODE:4E61                 assume es:DOSCODE
DOSCODE:4E61                 mov     bl, al
DOSCODE:4E63                 shl     bx, 1
DOSCODE:4E65                 shl     bx, 1
DOSCODE:4E67                 retn
DOSCODE:4E67 RECSET          endp
DOSCODE:4E67
DOSCODE:4E68 ; ---------------------------------------------------------------------------
DOSCODE:4E68
DOSCODE:4E68 $CHAR_OPER:                             ; ...
DOSCODE:4E68                 or      al, al          ; get switch?
DOSCODE:4E6A                 mov     dl, '/'         ; assume yes
DOSCODE:4E6C                 jz      short chop_1    ; jump if yes
DOSCODE:4E6E                 cmp     al, 2           ; check device availability?
DOSCODE:4E70                 mov     dl, 0FFh        ; -1 ; assume yes
DOSCODE:4E72                 jz      short chop_1    ; jump if yes
DOSCODE:4E74                 retn                    ; otherwise just quit
DOSCODE:4E75 ; ---------------------------------------------------------------------------
DOSCODE:4E75
DOSCODE:4E75 chop_1:                                 ; ...
DOSCODE:4E75                 call    Get_User_Stack
DOSCODE:4E78                 mov     [si+6], dx      ; [SI+user_env.user_DX]
DOSCODE:4E78                                         ; store value for user
DOSCODE:4E7B                 retn
DOSCODE:4E7C ; ---------------------------------------------------------------------------
DOSCODE:4E7C
DOSCODE:4E7C $GetExtendedError:                      ; ...
DOSCODE:4E7C                 push    ss
DOSCODE:4E7D                 pop     ds
DOSCODE:4E7E                 mov     ax, EXTERR
DOSCODE:4E81                 les     di, EXTERRPT
DOSCODE:4E85                 assume es:nothing
DOSCODE:4E85                 mov     bx, word ptr EXTERR_ACTION ; BL = Action, BH = Class
DOSCODE:4E89                 mov     ch, EXTERR_LOCUS
DOSCODE:4E8D                 call    Get_User_Stack
DOSCODE:4E90                 mov     [si+0Ah], di    ; [SI+user_env.user_DI]
DOSCODE:4E93                 call    set_user_es_bx
DOSCODE:4E96                 mov     [si+4], cx      ; [SI+user_env.user_CX]
DOSCODE:4E99
DOSCODE:4E99 _jmp_to_SYS_RET_OK:                     ; ...
DOSCODE:4E99                 jmp     SYS_RET_OK
DOSCODE:4E9C ; ---------------------------------------------------------------------------
DOSCODE:4E9C
DOSCODE:4E9C $ECS_Call:                              ; ...
DOSCODE:4E9C                 or      al, al
DOSCODE:4E9E                 jnz     short _okok
DOSCODE:4EA0                 call    Get_User_Stack
DOSCODE:4EA3                 mov     word ptr [si+8], offset DBCS_TAB_2 ; [SI+user_env.user_SI],
DOSCODE:4EA3                                         ; DBCS_TAB+2
DOSCODE:4EA8                 push    es
DOSCODE:4EA9                 mov     es, cs:DosDSeg
DOSCODE:4EAE                 mov     word ptr [si+14], es ; [SI+user_env.user_DS]
DOSCODE:4EB1                 pop     es
DOSCODE:4EB2
DOSCODE:4EB2 _okok:                                  ; ...
DOSCODE:4EB2                 jmp     short _jmp_to_SYS_RET_OK
DOSCODE:4EB4 ; ---------------------------------------------------------------------------
DOSCODE:4EB4
DOSCODE:4EB4 $LONGNAME:                              ; ...
DOSCODE:4EB4                 xor     al, al          ; longname functions are not supported
DOSCODE:4EB6
DOSCODE:4EB6 lfn_error:                              ; ...
DOSCODE:4EB6                 call    Get_User_Stack
DOSCODE:4EB9                 or      word ptr [si+16h], 1 ; [SI+user_env.user_F],f_Carry
DOSCODE:4EBD                 stc
DOSCODE:4EBE                 mov     [si], ax        ; [SI+user_env.user_ax]
DOSCODE:4EC0                 retn
DOSCODE:4EC1 ; ---------------------------------------------------------------------------
DOSCODE:4EC1
DOSCODE:4EC1 $FAT32EXT:                              ; ...
DOSCODE:4EC1                 cmp     al, 5           ; INT 21h AX = 7305h
DOSCODE:4EC3                 jbe     short valid_fat32_ext_function
DOSCODE:4EC5                 mov     al, 1           ; error_invalid_function
DOSCODE:4EC7
DOSCODE:4EC7 fat32_ext_func_err:                     ; ...
DOSCODE:4EC7                 jmp     SYS_RET_ERR
DOSCODE:4ECA ; ---------------------------------------------------------------------------
DOSCODE:4ECA
DOSCODE:4ECA function_5_invalid_cx:                  ; ...
DOSCODE:4ECA                 mov     al, 57h         ; error_invalid_parameter
DOSCODE:4ECC
DOSCODE:4ECC fat32_ext_func_err_j:                   ; ...
DOSCODE:4ECC                 jmp     short fat32_ext_func_err
DOSCODE:4ECE ; ---------------------------------------------------------------------------
DOSCODE:4ECE
DOSCODE:4ECE valid_fat32_ext_function:               ; ...
DOSCODE:4ECE                 jnz     short not_function_5
DOSCODE:4ED0                 cmp     cx, 0FFFFh      ; Function 5 - FAT32 - EXTENDED ABSOLUTE DISK READ/WRITE
DOSCODE:4ED3                 jnz     short function_5_invalid_cx
DOSCODE:4ED5                 test    si, 9FFEh       ; read/write mode flags
DOSCODE:4ED9                 jnz     short function_5_invalid_cx
DOSCODE:4EDB                 mov     al, dl          ; drive number, 1 = A
DOSCODE:4EDD                 dec     al
DOSCODE:4EDF                 mov     ah, 1
DOSCODE:4EE1                 test    si, 1
DOSCODE:4EE5                 jz      short function_5_read
DOSCODE:4EE7                 call    near ptr FAT32_ABSDWRT ; INT 21h AX = 7305h (SI bit 0 = 1)
DOSCODE:4EEA                 jmp     short fat32_absdrw_ret
DOSCODE:4EEC ; ---------------------------------------------------------------------------
DOSCODE:4EEC
DOSCODE:4EEC function_5_read:                        ; ...
DOSCODE:4EEC                 call    FAT32_ABSDRD    ; INT 21h AX = 7305h (SI bit 0 = 0)
DOSCODE:4EEF
DOSCODE:4EEF fat32_absdrw_ret:                       ; ...
DOSCODE:4EEF                 jb      short lfn_error
DOSCODE:4EF1                 jmp     SYS_RET_OK
DOSCODE:4EF4 ; ---------------------------------------------------------------------------
DOSCODE:4EF4
DOSCODE:4EF4 not_function_5:                         ; ...
DOSCODE:4EF4                 cmp     al, 3
DOSCODE:4EF6                 jz      short function_73_3 ; Function 3 - FAT32 - GET EXTENDED FREE SPACE ON DRIVE
DOSCODE:4EF8                 cmp     al, 2
DOSCODE:4EFA                 jb      short chk_drive_lock_flush
DOSCODE:4EFC                 jmp     $GET_DPB        ; Function 2 - FAT32 - "Get_ExtDPB" - GET EXTENDED DPB
DOSCODE:4EFC                                         ; Function 4 - FAT32 - Set DPB TO USE FOR FORMATTING
DOSCODE:4EFF ; ---------------------------------------------------------------------------
DOSCODE:4EFF
DOSCODE:4EFF chk_drive_lock_flush:                   ; ...
DOSCODE:4EFF                 cmp     dl, 26          ; MSDOS 7 - DRIVE LOCKING AND FLUSHING
DOSCODE:4F02                 jbe     short drv_lock_flush_1
DOSCODE:4F04                 mov     al, 0Fh         ; invalid drive number
DOSCODE:4F06
DOSCODE:4F06 drv_lock_flush_err:                     ; ...
DOSCODE:4F06                 jmp     short fat32_ext_func_err_j ; ax = error code
DOSCODE:4F08 ; ---------------------------------------------------------------------------
DOSCODE:4F08
DOSCODE:4F08 drv_lock_flush_1:                       ; ...
DOSCODE:4F08                 dec     dl
DOSCODE:4F0A                 jns     short drv_lock_flush_2
DOSCODE:4F0C                 mov     dl, ss:CURDRV   ; 0 = default/current drive)
DOSCODE:4F11
DOSCODE:4F11 drv_lock_flush_2:                       ; ...
DOSCODE:4F11                 mov     dh, 0
DOSCODE:4F13                 mov     bx, dx
DOSCODE:4F15                 cmp     cl, 1           ; which flag to get or set
DOSCODE:4F18                 jbe     short drv_lock_flush_3
DOSCODE:4F1A                 mov     al, 1           ; error_invalid_function
DOSCODE:4F1C                 jmp     short drv_lock_flush_err
DOSCODE:4F1E ; ---------------------------------------------------------------------------
DOSCODE:4F1E
DOSCODE:4F1E drv_lock_flush_3:                       ; ...
DOSCODE:4F1E                 mov     ah, ss:drive_flags[bx]
DOSCODE:4F23                 or      cl, cl
DOSCODE:4F25                 jz      short get_set_indctd_flag ; use bit 1 and bit 2
DOSCODE:4F27                 or      al, al          ; get drive's dirty-buffers flag
DOSCODE:4F29                 jz      short get_dirty_buf_flag ; use bit 3
DOSCODE:4F2B                 and     ah, 0F7h        ; clear bit 3
DOSCODE:4F2E                 and     ch, 8           ; izolate bit 3 of the new flag value
DOSCODE:4F31                 or      ah, ch          ; set AH bit 3 according to CH bit 3
DOSCODE:4F33                 mov     ss:drive_flags[bx], ah ; set or reset dirty buffer flag
DOSCODE:4F38                 test    ah, 8
DOSCODE:4F3B                 jnz     short set_dirty_flag_ok ; bit 3 is set/1
DOSCODE:4F3D                 mov     al, 0FFh
DOSCODE:4F3F                 call    FLUSHBUF
DOSCODE:4F42
DOSCODE:4F42 set_dirty_flag_ok:                      ; ...
DOSCODE:4F42                 jmp     short jmp_to_SYS_RET_OK
DOSCODE:4F44 ; ---------------------------------------------------------------------------
DOSCODE:4F44
DOSCODE:4F44 get_dirty_buf_flag:                     ; ...
DOSCODE:4F44                 and     ah, 8           ; izolate dirty buffers flag
DOSCODE:4F47                 jmp     short mov_flag_cl_to_al ; AH = new flag and 08h (bit 3 used)
DOSCODE:4F49 ; ---------------------------------------------------------------------------
DOSCODE:4F49
DOSCODE:4F49 get_set_indctd_flag:                    ; ...
DOSCODE:4F49                 or      al, al
DOSCODE:4F4B                 jz      short get_indicated_flag
DOSCODE:4F4D                 and     ah, 0F9h        ; clear bit 1 and bit 2
DOSCODE:4F50                 test    ch, 2           ; new value for indicated flag
DOSCODE:4F53                 jz      short reset_indctd_flags ; bit 1 is zero
DOSCODE:4F55                 or      ah, 6           ; set bit 1 and bit 2
DOSCODE:4F58
DOSCODE:4F58 reset_indctd_flags:                     ; ...
DOSCODE:4F58                 mov     ss:drive_flags[bx], ah
DOSCODE:4F5D                 jmp     short jmp_to_SYS_RET_OK
DOSCODE:4F5F ; ---------------------------------------------------------------------------
DOSCODE:4F5F
DOSCODE:4F5F get_indicated_flag:                     ; ...
DOSCODE:4F5F                 and     ah, 6           ; AH = new flag and 06h (bits 1 and 2 used)
DOSCODE:4F62
DOSCODE:4F62 mov_flag_cl_to_al:                      ; ...
DOSCODE:4F62                 mov     al, cl          ; value of CL on entry
DOSCODE:4F64
DOSCODE:4F64 ret_ax_to_user_cx:                      ; ...
DOSCODE:4F64                 call    Get_User_Stack
DOSCODE:4F67                 mov     [si+4], ax      ; [SI+user_env.user_cx] ; requested flag
DOSCODE:4F6A
DOSCODE:4F6A jmp_to_SYS_RET_OK:                      ; ...
DOSCODE:4F6A                 jmp     SYS_RET_OK
DOSCODE:4F6D ; ---------------------------------------------------------------------------
DOSCODE:4F6D
DOSCODE:4F6D function_73_3:                          ; ...
DOSCODE:4F6D                 mov     si, dx          ; FAT32 - GET EXTENDED FREE SPACE ON DRIVE
DOSCODE:4F6D                                         ; AX = 7303h
DOSCODE:4F6D                                         ; DS:DX -> ASCIZ string for drive ("C:\" or "\\SERVER\Share")
DOSCODE:4F6D                                         ; ES:DI -> buffer for extended free space structure
DOSCODE:4F6D                                         ; CX = length of buffer for extended free space
DOSCODE:4F6F                 call    DriveFromText
DOSCODE:4F72                 xchg    ax, dx
DOSCODE:4F73                 lodsw
DOSCODE:4F74                 dec     dl
DOSCODE:4F76                 cmp     dl, 26
DOSCODE:4F79                 jnb     short func_73_3_err2
DOSCODE:4F7B                 or      ah, ah
DOSCODE:4F7D                 jnz     short func_73_3_err2
DOSCODE:4F7F                 call    PATHCHRCMP
DOSCODE:4F82                 jnz     short func_73_3_err2
DOSCODE:4F84                 inc     dl
DOSCODE:4F86                 cmp     cx, 44          ; buffer (Structure) size must be 44
DOSCODE:4F89                 jb      short func_73_3_err4
DOSCODE:4F8B                 cmp     word ptr es:[di+2], 0 ; buffer structure version (must be 0)
DOSCODE:4F90                 jnz     short func_73_3_err3
DOSCODE:4F92                 push    ss
DOSCODE:4F93                 pop     ds
DOSCODE:4F94                 mov     al, dl
DOSCODE:4F96                 call    GETTHISDRV
DOSCODE:4F99                 jnb     short fill_efs_struc_b
DOSCODE:4F9B
DOSCODE:4F9B func_73_3_err1:                         ; ...
DOSCODE:4F9B                 call    FCB_RET_ERR
DOSCODE:4F9E
DOSCODE:4F9E func_73_3_err2:                         ; ...
DOSCODE:4F9E                 mov     al, 0Fh         ; error_invalid_drive
DOSCODE:4FA0
DOSCODE:4FA0 jmp_to_SYS_RET_ERR:                     ; ...
DOSCODE:4FA0                 jmp     SYS_RET_ERR
DOSCODE:4FA3 ; ---------------------------------------------------------------------------
DOSCODE:4FA3
DOSCODE:4FA3 func_73_3_err3:                         ; ...
DOSCODE:4FA3                 mov     al, 57h         ; error_invalid_parameter
DOSCODE:4FA5
DOSCODE:4FA5 jmp_to_jmp_SYS_RET_ERR:                 ; ...
DOSCODE:4FA5                 jmp     short jmp_to_SYS_RET_ERR
DOSCODE:4FA7 ; ---------------------------------------------------------------------------
DOSCODE:4FA7
DOSCODE:4FA7 func_73_3_err4:                         ; ...
DOSCODE:4FA7                 mov     al, 18h         ; error_bad_length
DOSCODE:4FA9                 jmp     short jmp_to_jmp_SYS_RET_ERR
DOSCODE:4FAB ; ---------------------------------------------------------------------------
DOSCODE:4FAB
DOSCODE:4FAB fill_efs_struc_b:                       ; ...
DOSCODE:4FAB                 call    DISK_INFO
DOSCODE:4FAE                 jb      short func_73_3_err1
DOSCODE:4FB0                 xor     ah, ah
DOSCODE:4FB2                 push    si              ; si:dx = free cluster count
DOSCODE:4FB3                 push    di              ; di:bx = number of clusters
DOSCODE:4FB4                 call    Get_User_Stack
DOSCODE:4FB7                 mov     es, word ptr [si+10h] ; user's buffer segment (in ES)
DOSCODE:4FBA                 mov     di, [si+0Ah]    ; user's buffer offset/address (in DI)
DOSCODE:4FBD                 mov     es:[di+10h], bx ; total number of clusters on the drive
DOSCODE:4FC1                 mov     es:[di+20h], bx ; total allocation units, without adjustment for compression
DOSCODE:4FC5                 pop     bx
DOSCODE:4FC6                 mov     es:[di+12h], bx ; total number of clusters on the drive, hw
DOSCODE:4FCA                 mov     es:[di+22h], bx ; total allocation units, hw
DOSCODE:4FCE                 mov     es:[di+0Ch], dx ; number of available clusters
DOSCODE:4FD2                 mov     es:[di+1Ch], dx ; number of available allocation units, without adjustment
DOSCODE:4FD6                 pop     dx
DOSCODE:4FD7                 mov     es:[di+0Eh], dx ; number of available clusters, hw
DOSCODE:4FDB                 mov     es:[di+1Eh], dx ; number of available allocation units, hw
DOSCODE:4FDF                 mov     es:[di+8], cx   ; bytes per sector
DOSCODE:4FE3                 mov     es:[di+4], ax   ; sectors per cluster (with adjustment for compression)
DOSCODE:4FE7                 mov     cx, ax
DOSCODE:4FE9                 mul     bx              ; 32 bit multiplication
DOSCODE:4FEB                 jb      short dsk_cap_calc_overf ; disk capacity calculation overflow error
DOSCODE:4FED                 mov     bx, ax
DOSCODE:4FEF                 mov     ax, es:[di+20h] ; total allocation units, lw
DOSCODE:4FF3                 mul     cx
DOSCODE:4FF5                 add     dx, bx
DOSCODE:4FF7                 jnb     short dsk_cap_calc_ok
DOSCODE:4FF9
DOSCODE:4FF9 dsk_cap_calc_overf:                     ; ...
DOSCODE:4FF9                 mov     ax, 0FFFFh      ; set to 0FFFFFFFFh
DOSCODE:4FFC                 mov     dx, ax
DOSCODE:4FFE
DOSCODE:4FFE dsk_cap_calc_ok:                        ; ...
DOSCODE:4FFE                 mov     es:[di+1Ah], dx
DOSCODE:5002                 mov     es:[di+18h], ax ; total number of physical sectors on the drive,
DOSCODE:5002                                         ; without adjustment for compression
DOSCODE:5006                 mov     ax, cx          ; 32 bit multiplication
DOSCODE:5008                 mul     word ptr es:[di+0Eh] ; number of available clusters, hw
DOSCODE:500C                 jb      short dsk_free_calc_overf
DOSCODE:500E                 mov     bx, ax
DOSCODE:5010                 mov     ax, es:[di+0Ch] ; number of available clusters, lw
DOSCODE:5014                 mul     cx
DOSCODE:5016                 add     dx, bx
DOSCODE:5018                 jnb     short dsk_free_calc_ok
DOSCODE:501A
DOSCODE:501A dsk_free_calc_overf:                    ; ...
DOSCODE:501A                 mov     ax, 0FFFFh
DOSCODE:501D                 mov     dx, ax
DOSCODE:501F
DOSCODE:501F dsk_free_calc_ok:                       ; ...
DOSCODE:501F                 mov     es:[di+16h], dx ; hw
DOSCODE:5023                 mov     es:[di+14h], ax ; number of physical sectors available on the drive,
DOSCODE:5023                                         ; without adjustment for compression
DOSCODE:5027                 xor     ax, ax          ; 0
DOSCODE:5029                 mov     es:[di+0Ah], ax ; number of bytes per sector, high word = 0
DOSCODE:502D                 mov     es:[di+6], ax   ; number of sectors per cluster, high word = 0
DOSCODE:5031                 mov     es:[di+24h], ax ; reserved, 8 bytes zero
DOSCODE:5035                 mov     es:[di+26h], ax
DOSCODE:5039                 mov     es:[di+28h], ax
DOSCODE:503D                 mov     es:[di+2Ah], ax
DOSCODE:5041                 mov     ax, 44
DOSCODE:5044                 mov     es:[di], ax     ; size of returned structure = 44
DOSCODE:5047                 jmp     SYS_RET_OK
DOSCODE:504A ; ---------------------------------------------------------------------------
DOSCODE:504A
DOSCODE:504A Set_DPBforFormat:                       ; ...
DOSCODE:504A                 cmp     word ptr [si+4], 24 ; [SI+user_env.user_CX]
DOSCODE:504A                                         ; size of buffer (must be at least 18h)
DOSCODE:504E                 jnb     short setdpbf_2
DOSCODE:5050                 mov     al, 18h         ; error_bad_length
DOSCODE:5052
DOSCODE:5052 setdpbf_1:                              ; ...
DOSCODE:5052                 jmp     SYS_RET_ERR
DOSCODE:5055 ; ---------------------------------------------------------------------------
DOSCODE:5055
DOSCODE:5055 setdpbf_2:                              ; ...
DOSCODE:5055                 push    es              ; ES:BP = Drive parameter block
DOSCODE:5056                 push    bp
DOSCODE:5057                 mov     es, word ptr [si+10h] ; [SI+user_env.user_ES]
DOSCODE:505A                 mov     di, [si+0Ah]    ; [SI+user_env.user_DI]
DOSCODE:505D                 pop     si
DOSCODE:505E                 pop     ds
DOSCODE:505F                 assume ds:nothing
DOSCODE:505F                 mov     ax, es:[di+4]   ; (call) function number
DOSCODE:5063                 cmp     word ptr es:[di+2], 0 ; structure version (must be 0)
DOSCODE:5068                 jnz     short setdpbf_3
DOSCODE:506A                 cmp     word ptr es:[di+6], 0 ; (must be 0)
DOSCODE:506F                 jnz     short setdpbf_3
DOSCODE:5071                 cmp     ax, 4           ; (max) 5 functions (0 to 4)
DOSCODE:5074                 jbe     short setdpbf_4
DOSCODE:5076
DOSCODE:5076 setdpbf_3:                              ; ...
DOSCODE:5076                 mov     al, 57h         ; error_invalid_parameter
DOSCODE:5078                 jmp     short setdpbf_1
DOSCODE:507A ; ---------------------------------------------------------------------------
DOSCODE:507A
DOSCODE:507A setdpbf_4:                              ; ...
DOSCODE:507A                 mov     word ptr es:[di], 18h ; (call) size
DOSCODE:507F                 or      al, al
DOSCODE:5081                 jz      short setdpbf_5 ; invalidate DPB counts
DOSCODE:5083                 jmp     setdpbf_18
DOSCODE:5086 ; ---------------------------------------------------------------------------
DOSCODE:5086
DOSCODE:5086 setdpbf_5:                              ; ...
DOSCODE:5086                 xor     dx, dx          ; 0
DOSCODE:5088                 mov     bx, [si+0Dh]    ; DPB.MAX_CLUSTER
DOSCODE:508B                 cmp     word ptr [si+0Fh], 0 ; DPB.FAT_SIZE
DOSCODE:508F                 jnz     short setdpbf_6 ; not FAT32
DOSCODE:5091                 mov     dx, [si+2Fh]
DOSCODE:5094                 mov     bx, [si+2Dh]    ; DPB.LAST_CLUSTER
DOSCODE:5097
DOSCODE:5097 setdpbf_6:                              ; ...
DOSCODE:5097                 mov     ax, es:[di+0Ah]
DOSCODE:509B                 mov     cx, es:[di+8]   ; new DPB free count
DOSCODE:509B                                         ; (00000000h=no change, FFFFFFFFh=unknown)
DOSCODE:509F                 or      ax, ax
DOSCODE:50A1                 jnz     short setdpbf_7
DOSCODE:50A3                 jcxz    short setdpbf_11
DOSCODE:50A5
DOSCODE:50A5 setdpbf_7:                              ; ...
DOSCODE:50A5                 cmp     ax, 0FFFFh
DOSCODE:50A8                 jnz     short setdpbf_8
DOSCODE:50AA                 cmp     cx, 0FFFFh
DOSCODE:50AD                 jz      short setdpbf_10 ; (set as UNKNOWN/INITIAL)
DOSCODE:50AF
DOSCODE:50AF setdpbf_8:                              ; ...
DOSCODE:50AF                 cmp     ax, dx          ; must be < DPB.LAST_CLUSTER
DOSCODE:50B1                 jnz     short setdpbf_9
DOSCODE:50B3                 cmp     cx, bx
DOSCODE:50B5
DOSCODE:50B5 setdpbf_9:                              ; ...
DOSCODE:50B5                 jnb     short setdpbf_3
DOSCODE:50B7
DOSCODE:50B7 setdpbf_10:                             ; ...
DOSCODE:50B7                 or      byte ptr [si+18h], 1 ; DPB.FIRST_ACCESS (bit 0 = 1)
DOSCODE:50BB                 mov     [si+1Fh], cx    ; DPB.FREE_CNT
DOSCODE:50BE                 cmp     word ptr [si+0Fh], 0 ; DP.FAT_SIZE
DOSCODE:50C2                 jnz     short setdpbf_11 ; FAT12 or FAT16
DOSCODE:50C4                 mov     [si+21h], ax    ; DPB.FREE_CNT_HW
DOSCODE:50C7
DOSCODE:50C7 setdpbf_11:                             ; ...
DOSCODE:50C7                 mov     ax, es:[di+0Eh]
DOSCODE:50CB                 mov     cx, es:[di+0Ch] ; new DPB next-free
DOSCODE:50CB                                         ; (00000000h=no change, FFFFFFFFh=unknown)
DOSCODE:50CF                 or      ax, ax
DOSCODE:50D1                 jnz     short setdpbf_12
DOSCODE:50D3                 jcxz    short setdpbf_17
DOSCODE:50D5
DOSCODE:50D5 setdpbf_12:                             ; ...
DOSCODE:50D5                 cmp     ax, 0FFFFh
DOSCODE:50D8                 jnz     short setdpbf_13
DOSCODE:50DA                 cmp     cx, 0FFFFh
DOSCODE:50DD                 jz      short setdpbf_16 ; (set as UNKNOWN/INITIAL)
DOSCODE:50DF
DOSCODE:50DF setdpbf_13:                             ; ...
DOSCODE:50DF                 cmp     ax, 0           ; must be >= 2
DOSCODE:50E2                 jnz     short setdpbf_14
DOSCODE:50E4                 cmp     cx, 2
DOSCODE:50E7
DOSCODE:50E7 setdpbf_14:                             ; ...
DOSCODE:50E7                 jb      short setdpbf_3
DOSCODE:50E9                 cmp     ax, dx          ; must be < DPB.LAST_CLUSTER
DOSCODE:50EB                 jnz     short setdpbf_15
DOSCODE:50ED                 cmp     cx, bx
DOSCODE:50EF
DOSCODE:50EF setdpbf_15:                             ; ...
DOSCODE:50EF                 ja      short setdpbf_3
DOSCODE:50F1
DOSCODE:50F1 setdpbf_16:                             ; ...
DOSCODE:50F1                 or      byte ptr [si+18h], 1 ; DPB.FIRST_ACCESS (bit 0 = 1)
DOSCODE:50F5                 mov     [si+1Dh], cx    ; DPB.NEXT_FREE
DOSCODE:50F8                 cmp     word ptr [si+0Fh], 0 ; DPB.FAT_SIZE
DOSCODE:50FC                 jnz     short setdpbf_17 ; FAT16 or FAT12
DOSCODE:50FE                 mov     [si+3Bh], ax
DOSCODE:5101                 mov     [si+39h], cx    ; DPB.FAT32_NXTFREE
DOSCODE:5104
DOSCODE:5104 setdpbf_17:                             ; ...
DOSCODE:5104                 mov     ax, 7304h       ; done (successful)
DOSCODE:5107                 jmp     SYS_RET_OK
DOSCODE:510A ; ---------------------------------------------------------------------------
DOSCODE:510A
DOSCODE:510A setdpbf_18:                             ; ...
DOSCODE:510A                 dec     al
DOSCODE:510C                 jnz     short setdpbf_19
DOSCODE:510E                 push    ds              ; rebuild DPB from BPB
DOSCODE:510F                 push    si
DOSCODE:5110                 lds     si, es:[di+8]   ; BIOS Parameter Block
DOSCODE:5114                 pop     bp
DOSCODE:5115                 pop     es
DOSCODE:5116                 mov     cx, 4558h       ; 'XE' (NASM syntax)
DOSCODE:5119                 mov     dx, 4152h       ; 'RA' (NASM syntax)
DOSCODE:511C                 call    $SETDPB
DOSCODE:511F                 jmp     SYS_RET_OK
DOSCODE:5122 ; ---------------------------------------------------------------------------
DOSCODE:5122
DOSCODE:5122 setdpbf_19:                             ; ...
DOSCODE:5122                 dec     al
DOSCODE:5124                 jnz     short setdpbf_20 ;
DOSCODE:5124                                         ; force media change
DOSCODE:5124                                         ; (next access to drive rebuild DPB)
DOSCODE:5126                 or      byte ptr [si+18h], 80h ; DPB.FIRST_ACCESS (bit 7 = 1)
DOSCODE:512A                 jmp     SYS_RET_OK
DOSCODE:512D ; ---------------------------------------------------------------------------
DOSCODE:512D
DOSCODE:512D setdpbf_20:                             ; ...
DOSCODE:512D                 cmp     word ptr [si+0Fh], 0 ; DPB.FAT_SIZE
DOSCODE:5131                 jz      short setdpbf_22 ; FAT32
DOSCODE:5133                 mov     al, 0Fh         ; error_invalid_drive
DOSCODE:5133                                         ; (function 3 or 4 are only for drives with FAT32 fs)
DOSCODE:5135
DOSCODE:5135 setdpbf_21:                             ; ...
DOSCODE:5135                 jmp     SYS_RET_ERR
DOSCODE:5138 ; ---------------------------------------------------------------------------
DOSCODE:5138
DOSCODE:5138 setdpbf_22:                             ; ...
DOSCODE:5138                 dec     al
DOSCODE:513A                 jz      short setdpbf_30 ; get/set active FAT number and mirroring
DOSCODE:513C                 mov     ax, [si+35h]    ; get/set root directory cluster number
DOSCODE:513C                                         ; DPB.ROOT_CLUSTER
DOSCODE:513F                 mov     es:[di+0Ch], ax ; (ret) previous root directory cluster number
DOSCODE:5143                 mov     ax, [si+37h]
DOSCODE:5146                 mov     es:[di+0Eh], ax
DOSCODE:514A                 mov     cx, es:[di+0Ah]
DOSCODE:514E                 mov     ax, es:[di+8]   ; (call) new root directory cluster number
DOSCODE:5152                 cmp     ax, 0FFFFh      ; -1 --> return only previous root dir cluster number
DOSCODE:5155                 jnz     short setdpbf_23
DOSCODE:5157                 cmp     cx, 0FFFFh
DOSCODE:515A                 jz      short setdpbf_29
DOSCODE:515C
DOSCODE:515C setdpbf_23:                             ; ...
DOSCODE:515C                 cmp     cx, 0           ; cluster number must be >= 2
DOSCODE:515F                 jnz     short setdpbf_24
DOSCODE:5161                 cmp     ax, 2
DOSCODE:5164
DOSCODE:5164 setdpbf_24:                             ; ...
DOSCODE:5164                 jnb     short setdpbf_26
DOSCODE:5166
DOSCODE:5166 setdpbf_25:                             ; ...
DOSCODE:5166                 jmp     setdpbf_3       ; error (invalid parameter)
DOSCODE:5169 ; ---------------------------------------------------------------------------
DOSCODE:5169
DOSCODE:5169 setdpbf_26:                             ; ...
DOSCODE:5169                 cmp     cx, [si+2Fh]    ; must be <= DPB.LAST_CLUSTER
DOSCODE:516C                 jnz     short setdpbf_27
DOSCODE:516E                 cmp     ax, [si+2Dh]
DOSCODE:5171
DOSCODE:5171 setdpbf_27:                             ; ...
DOSCODE:5171                 ja      short setdpbf_25 ; error
DOSCODE:5173                 mov     [si+37h], cx    ; DPB.ROOT_CLUSTER
DOSCODE:5176                 mov     [si+35h], ax
DOSCODE:5179                 or      byte ptr [si+18h], 2 ; DPB.FIRST_ACCESS (bit 1 = 1)
DOSCODE:517D                 push    ds
DOSCODE:517E                 push    si
DOSCODE:517F                 pop     bp
DOSCODE:5180                 pop     es
DOSCODE:5181                 call    ECritDisk
DOSCODE:5184                 call    update_fat32_fsinfo
DOSCODE:5187                 call    LCritDisk
DOSCODE:518A                 jnb     short setdpbf_29
DOSCODE:518C                 mov     al, 1Fh         ; error_gen_failure
DOSCODE:518E
DOSCODE:518E setdpbf_28:                             ; ...
DOSCODE:518E                 jmp     short setdpbf_21
DOSCODE:5190 ; ---------------------------------------------------------------------------
DOSCODE:5190
DOSCODE:5190 setdpbf_29:                             ; ...
DOSCODE:5190                 jmp     SYS_RET_OK
DOSCODE:5193 ; ---------------------------------------------------------------------------
DOSCODE:5193
DOSCODE:5193 setdpbf_30:                             ; ...
DOSCODE:5193                 and     word ptr [si+23h], 8Fh ; DPB.EXT_FLAGS (clear bit 4-6)
DOSCODE:5198                 mov     cx, [si+23h]
DOSCODE:519B                 mov     es:[di+0Ch], cx ; (ret) previous active FAT/mirroring state
DOSCODE:519F                 mov     word ptr es:[di+0Eh], 0 ;
DOSCODE:519F                                         ; put zero to Set_DPBforFormat struc offset 14
DOSCODE:51A5                 mov     dx, es:[di+8]   ; (call) new active FAT/mirroring state,
DOSCODE:51A5                                         ;  or FFFFFFFFh to get
DOSCODE:51A9                 cmp     dx, 0FFFFh
DOSCODE:51AC                 jnz     short setdpbf_31
DOSCODE:51AE                 jmp     SYS_RET_OK
DOSCODE:51B1 ; ---------------------------------------------------------------------------
DOSCODE:51B1
DOSCODE:51B1 setdpbf_31:                             ; ...
DOSCODE:51B1                 test    dx, 0FF70h
DOSCODE:51B5                 jz      short setdpbf_33 ; bit 4-6 of DBP.EXT_FLAGS must be 0
DOSCODE:51B7                 mov     al, 57h         ; error_invalid_parameter
DOSCODE:51B9
DOSCODE:51B9 setdpbf_32:                             ; ...
DOSCODE:51B9                 jmp     short setdpbf_28
DOSCODE:51BB ; ---------------------------------------------------------------------------
DOSCODE:51BB
DOSCODE:51BB setdpbf_33:                             ; ...
DOSCODE:51BB                 mov     al, 1           ; error_invalid_function
DOSCODE:51BB                                         ; (modification is not allowed)
DOSCODE:51BD                 jmp     short setdpbf_32
DOSCODE:51BF ; ---------------------------------------------------------------------------
DOSCODE:51BF
DOSCODE:51BF $PARSE_FILE_DESCRIPTOR:                 ; ...
DOSCODE:51BF                 call    MAKEFCB
DOSCODE:51C2                 push    si
DOSCODE:51C3                 call    Get_User_Stack
DOSCODE:51C6                 pop     word ptr [si+8] ; [SI+user_env.user_SI]
DOSCODE:51C9                 retn
DOSCODE:51CA
DOSCODE:51CA ; =============== S U B R O U T I N E =======================================
DOSCODE:51CA
DOSCODE:51CA
DOSCODE:51CA set_exerr_locus_unk proc near           ; ...
DOSCODE:51CA                 push    ax
DOSCODE:51CB                 mov     al, 1           ; errLOC_Unk
DOSCODE:51CD
DOSCODE:51CD set_exerr_locus:                        ; ...
DOSCODE:51CD                 mov     ss:EXTERR_LOCUS, al
DOSCODE:51D1                 pop     ax
DOSCODE:51D2                 retn
DOSCODE:51D2 set_exerr_locus_unk endp
DOSCODE:51D2
DOSCODE:51D3
DOSCODE:51D3 ; =============== S U B R O U T I N E =======================================
DOSCODE:51D3
DOSCODE:51D3
DOSCODE:51D3 set_exerr_locus_disk proc near          ; ...
DOSCODE:51D3                 push    ax
DOSCODE:51D4                 mov     al, 2           ; errLOC_Disk
DOSCODE:51D6                 jmp     short set_exerr_locus
DOSCODE:51D6 set_exerr_locus_disk endp
DOSCODE:51D6
DOSCODE:51D8
DOSCODE:51D8 ; =============== S U B R O U T I N E =======================================
DOSCODE:51D8
DOSCODE:51D8
DOSCODE:51D8 set_exerr_locus_ser proc near           ; ...
DOSCODE:51D8                 push    ax
DOSCODE:51D9                 mov     al, 4           ; errLOC_SerDev
DOSCODE:51DB                 jmp     short set_exerr_locus
DOSCODE:51DB set_exerr_locus_ser endp
DOSCODE:51DB
DOSCODE:51DD
DOSCODE:51DD ; =============== S U B R O U T I N E =======================================
DOSCODE:51DD
DOSCODE:51DD
DOSCODE:51DD set_exerr_locus_mem proc near           ; ...
DOSCODE:51DD                 push    ax
DOSCODE:51DE                 mov     al, 5           ; errLOC_Mem
DOSCODE:51E0                 jmp     short set_exerr_locus
DOSCODE:51E0 set_exerr_locus_mem endp
DOSCODE:51E0
DOSCODE:51E2 ; ---------------------------------------------------------------------------
DOSCODE:51E2
DOSCODE:51E2 $SLEAZEFUNC:                            ; ...
DOSCODE:51E2                 mov     dl, 0           ; default drive
DOSCODE:51E4
DOSCODE:51E4 $SLEAZEFUNCDL:                          ; ...
DOSCODE:51E4                 push    ss
DOSCODE:51E5                 pop     ds
DOSCODE:51E6                 assume ds:DOSCODE
DOSCODE:51E6                 mov     al, dl
DOSCODE:51E8                 call    GETTHISDRV      ; Get CDS structure
DOSCODE:51EB                 jb      short BADSLDRIVE
DOSCODE:51ED                 call    DISK_INFO
DOSCODE:51F0                 jb      short BADSLDRIVE
DOSCODE:51F2                 mov     byte ptr FATBYTE, ah ; FAT (MEDIA) ID byte
DOSCODE:51F6                 xor     ah, ah          ; AH = 0
DOSCODE:51F6                                         ; AL = sectors per cluster
DOSCODE:51F8                 push    di              ; di:bx = number of clusters
DOSCODE:51F9                 call    TestNet
DOSCODE:51FC                 pop     di
DOSCODE:51FD                 jb      short sleazefunc1
DOSCODE:51FF                 push    cx              ; bytes per sector
DOSCODE:5200                 call    modify_cluster_count
DOSCODE:5203                 pop     cx              ; ax = sectors per cluster (modified)
DOSCODE:5203                                         ; dx = number of clusters (modified)
DOSCODE:5203                                         ; if bytes per cluster > 16384
DOSCODE:5203                                         ;    and hw of cluster count > 0
DOSCODE:5203                                         ;    bx = 0FFFEh (invalidated parms sign)
DOSCODE:5204
DOSCODE:5204 sleazefunc1:                            ; ...
DOSCODE:5204                 mov     di, offset FATBYTE
DOSCODE:5207                 call    Get_User_Stack
DOSCODE:520A                 mov     [si+4], cx      ; [SI+user_env.user_CX]
DOSCODE:520D                 mov     [si+6], bx      ; [SI+user_env.user_DX]
DOSCODE:5210                 mov     [si+2], di      ; [SI+user_env.user_BX]
DOSCODE:5213                 mov     word ptr [si+0Eh], ss ; [SI+user_env.user_DS]
DOSCODE:5213                                         ; stash correct pointer
DOSCODE:5216                 retn
DOSCODE:5217 ; ---------------------------------------------------------------------------
DOSCODE:5217
DOSCODE:5217 BADSLDRIVE:                             ; ...
DOSCODE:5217                 jmp     FCB_RET_ERR     ; error
DOSCODE:521A ; ---------------------------------------------------------------------------
DOSCODE:521A
DOSCODE:521A $GET_INDOS_FLAG:                        ; ...
DOSCODE:521A                 call    Get_User_Stack
DOSCODE:521D                 mov     word ptr [si+2], offset INDOS ; [SI+user_env.user_BX]
DOSCODE:5222
DOSCODE:5222 getin_segm:                             ; ...
DOSCODE:5222                 mov     word ptr [si+10h], ss ; [SI+user_env.user_ES]
DOSCODE:5225                 retn
DOSCODE:5226 ; ---------------------------------------------------------------------------
DOSCODE:5226
DOSCODE:5226 $GET_IN_VARS:                           ; ...
DOSCODE:5226                 call    Get_User_Stack  ; Return Pointer to DOS Variables
DOSCODE:5229                 mov     word ptr [si+2], offset DPBHEAD ; [SI+user_env.user_BX],
DOSCODE:5229                                         ; SYSINITVARS
DOSCODE:522E                 jmp     short getin_segm
DOSCODE:5230 ; ---------------------------------------------------------------------------
DOSCODE:5230
DOSCODE:5230 $GET_DEFAULT_DPB:                       ; ...
DOSCODE:5230                 mov     dl, 0
DOSCODE:5232
DOSCODE:5232 $GET_DPB:                               ; ...
DOSCODE:5232                 push    ss
DOSCODE:5233                 pop     ds
DOSCODE:5234                 mov     al, dl
DOSCODE:5236                 call    GETTHISDRV      ; Get CDS structure
DOSCODE:5239                 mov     al, 0Fh         ; error_invalid_drive
DOSCODE:523B                 jnb     short getdpb_3
DOSCODE:523D
DOSCODE:523D getdpb_1:                               ; ...
DOSCODE:523D                 call    Get_User_Stack
DOSCODE:5240                 cmp     word ptr [si], 7302h ; INT 21h, AX = 7302h ? Get_ExtDPB
DOSCODE:5240                                         ; GET EXTENDED DPB
DOSCODE:5244                 jz      short getdpb_2
DOSCODE:5246                 cmp     word ptr [si], 7304h ; INT 21h, AX = 7304h ? Set_DPBforFormat
DOSCODE:5246                                         ; Set DPB TO USE FOR FORMATTING
DOSCODE:524A                 jnz     short ISNODRV
DOSCODE:524C
DOSCODE:524C getdpb_2:                               ; ...
DOSCODE:524C                 jmp     SYS_RET_ERR
DOSCODE:524F ; ---------------------------------------------------------------------------
DOSCODE:524F
DOSCODE:524F ISNODRV:                                ; ...
DOSCODE:524F                 mov     al, 0FFh        ; -1 ; invalid (or network) drive
DOSCODE:5251                 retn
DOSCODE:5252 ; ---------------------------------------------------------------------------
DOSCODE:5252
DOSCODE:5252 getdpb_3:                               ; ...
DOSCODE:5252                 les     di, THISCDS
DOSCODE:5256                 test    byte ptr es:[di+44h], 80h ; [ES:DI+curdir.flags+1],
DOSCODE:5256                                         ; (curdir_isnet>>8)
DOSCODE:525B                 jnz     short getdpb_1
DOSCODE:525D                 call    ECritDisk
DOSCODE:5260                 call    FATREAD_CDS
DOSCODE:5263                 call    LCritDisk
DOSCODE:5266                 mov     al, 53h         ; error_FAIL_I24
DOSCODE:5268                 jb      short getdpb_1
DOSCODE:526A                 call    Get_User_Stack
DOSCODE:526D                 cmp     word ptr [si], 7304h ; INT 21h, AX = 7304h ?
DOSCODE:5271                 jnz     short getdpb_4
DOSCODE:5273                 jmp     Set_DPBforFormat
DOSCODE:5276 ; ---------------------------------------------------------------------------
DOSCODE:5276
DOSCODE:5276 getdpb_4:                               ; ...
DOSCODE:5276                 cmp     word ptr [si], 7302h ; INT 21h, AX = 7302h ?
DOSCODE:527A                 jz      short getdpb_5
DOSCODE:527C                 cmp     word ptr es:[bp+0Fh], 0
DOSCODE:5281                 jz      short getdpb_1
DOSCODE:5283                 mov     [si+2], bp
DOSCODE:5286                 mov     word ptr [si+0Eh], es
DOSCODE:5289                 xor     al, al          ; status = 0 = successful
DOSCODE:528B                 retn
DOSCODE:528C ; ---------------------------------------------------------------------------
DOSCODE:528C
DOSCODE:528C getdpb_5:                               ; ...
DOSCODE:528C                 mov     al, 18h         ; error_bad_length
DOSCODE:528E                 cmp     word ptr [si+4], 63 ; [SI+user_env.user_CX]
DOSCODE:528E                                         ; length of buffer (must be 63 bytes)
DOSCODE:5292                 jb      short getdpb_2  ; error
DOSCODE:5294                 push    es              ; ES:BP = Drive parameter block
DOSCODE:5295                 push    bp
DOSCODE:5296                 mov     es, word ptr [si+16] ; [SI+user_env.user_ES]
DOSCODE:5299                 mov     di, [si+10]     ; [SI+user_env.user_DI]
DOSCODE:529C                 mov     bx, [si+8]      ; [SI+user_env.user_SI] (!)
DOSCODE:529F                 pop     si
DOSCODE:52A0                 pop     ds
DOSCODE:52A1                 assume ds:nothing
DOSCODE:52A1                 mov     ax, 61          ; length of following data (003Dh)
DOSCODE:52A4                 stosw
DOSCODE:52A5                 mov     cx, ax
DOSCODE:52A7                 push    di
DOSCODE:52A8                 rep movsb
DOSCODE:52AA                 pop     di
DOSCODE:52AB                 cmp     bx, 0F1A6h      ; (!) signature (undocumented),
DOSCODE:52AB                                         ;  must be 0F1A6h to get device driver
DOSCODE:52AB                                         ;  address and next-DBP pointer
DOSCODE:52AB                                         ; (Ref: Ralf Brown's Interrupt List)
DOSCODE:52AF                 jz      short getdpb_6
DOSCODE:52B1                 xor     ax, ax          ; 0
DOSCODE:52B3                 dec     ax              ; -1
DOSCODE:52B4                 mov     es:[di+19h], ax ; pointer to next DPB (invalidated)
DOSCODE:52B8                 mov     es:[di+1Bh], ax
DOSCODE:52BC                 mov     es:[di+13h], ax ; pointer to driver address (invalidated)
DOSCODE:52C0                 mov     es:[di+15h], ax
DOSCODE:52C4
DOSCODE:52C4 getdpb_6:                               ; ...
DOSCODE:52C4                 cmp     word ptr es:[di+0Fh], 0 ; FAT (16 bit) size ?
DOSCODE:52C9                 jz      short getdpb_8  ; FAT32
DOSCODE:52C9                                         ; FAT16 or FAT12
DOSCODE:52CB                 mov     ax, es:[di+0Dh] ; DPB.MAX_CLUSTER
DOSCODE:52CF                 mov     es:[di+2Dh], ax ; DPB.LAST_CLUSTER
DOSCODE:52D3                 mov     ax, es:[di+0Fh] ; DPB.FAT_SIZE
DOSCODE:52D7                 mov     es:[di+31h], ax ; DPB.FAT32_SIZE
DOSCODE:52DB                 mov     ax, es:[di+1Dh] ; DPB.NEXT_FREE
DOSCODE:52DF                 mov     es:[di+39h], ax ; DPB.FAT32_NXTFREE
DOSCODE:52E3                 mov     ax, es:[di+0Bh] ; DPB.FIRST_SECTOR
DOSCODE:52E7                 mov     es:[di+29h], ax ; DPB.FCLUS_FSECTOR
DOSCODE:52EB                 xor     ax, ax          ; 0
DOSCODE:52ED                 mov     es:[di+2Fh], ax ; DPB.LAST_CLUSTER high word
DOSCODE:52F1                 mov     es:[di+33h], ax ; DPB.FAT32_SIZE high word
DOSCODE:52F5                 mov     es:[di+3Bh], ax ; DPB.FAT32_NXTFREE high word
DOSCODE:52F9                 mov     es:[di+2Bh], ax ; DPB.FCLUS_FSECTOR high word
DOSCODE:52FD                 mov     es:[di+35h], ax ; DPB.ROOT_CLUSTER
DOSCODE:5301                 mov     es:[di+37h], ax ; DPB.ROOT_CLUSTER high word
DOSCODE:5305                 mov     es:[di+23h], ax ; DPB.EXT_FLAGS
DOSCODE:5309                 dec     ax              ; -1
DOSCODE:530A                 mov     es:[di+25h], ax ; DPB.FSINFO_SECTOR (invalidated)
DOSCODE:530E                 mov     es:[di+27h], ax ; DPB.BKBOOT_SECTOR (invalidated)
DOSCODE:5312                 cmp     ax, es:[di+1Fh] ; DPB.FREE_COUNT (= -1 ?)
DOSCODE:5316                 jz      short getdpb_7
DOSCODE:5318                 inc     ax              ; -1 -> 0
DOSCODE:5319
DOSCODE:5319 getdpb_7:                               ; ...
DOSCODE:5319                 mov     es:[di+21h], ax ; DPB.PB.FREE_COUNT high word
DOSCODE:531D
DOSCODE:531D getdpb_8:                               ; ...
DOSCODE:531D                 xor     ax, ax          ; status = 0 = successful
DOSCODE:531F                 jmp     SYS_RET_OK
DOSCODE:5322 ; ---------------------------------------------------------------------------
DOSCODE:5322
DOSCODE:5322 $DISK_RESET:                            ; ...
DOSCODE:5322                 mov     al, 0FFh        ; -1
DOSCODE:5324                 push    ss
DOSCODE:5325                 pop     ds
DOSCODE:5326                 assume ds:DOSCODE
DOSCODE:5326                 call    ECritDisk
DOSCODE:5329                 or      byte ptr DOS34_FLAG, 4 ; FROM_DISK_RESET
DOSCODE:532E                 call    FLUSHBUF
DOSCODE:5331                 and     byte ptr DOS34_FLAG, 0FBh ; NO_FROM_DISK_RESET
DOSCODE:5336                 les     bp, DPBHEAD
DOSCODE:533A
DOSCODE:533A drst_1:                                 ; ...
DOSCODE:533A                 cmp     bp, 0FFFFh      ; -1 ?
DOSCODE:533D                 jz      short drst_2    ; yes, it is the last DPB
DOSCODE:533F                 call    update_fat32_fsinfo ; update FSINFO (sector) parameters
DOSCODE:5342                 les     bp, es:[bp+19h] ; DPB.NEXT_DPB
DOSCODE:5346                 jmp     short drst_1
DOSCODE:5348 ; ---------------------------------------------------------------------------
DOSCODE:5348
DOSCODE:5348 drst_2:                                 ; ...
DOSCODE:5348                 mov     SC_STATUS, 0    ; Throw out secondary cache
DOSCODE:534E                 mov     bx, 0FFFFh      ; -1
DOSCODE:5351                 mov     word ptr LastBuffer+2, bx ; Invalidate 'last-buffer' used
DOSCODE:5355                 mov     word ptr LastBuffer, bx
DOSCODE:5359                 call    LCritDisk
DOSCODE:535C                 mov     ax, 0FFFFh
DOSCODE:535F                 push    ax
DOSCODE:5360                 mov     ax, 1120h
DOSCODE:5363                 int     2Fh             ; Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS
DOSCODE:5363                                         ; DS = DOS CS
DOSCODE:5363                                         ; Return: CF clear (successful)
DOSCODE:5365                 pop     ax
DOSCODE:5366                 retn
DOSCODE:5366 ; ---------------------------------------------------------------------------
DOSCODE:5367 word3           dw 3                    ; ...
DOSCODE:5369
DOSCODE:5369 ; =============== S U B R O U T I N E =======================================
DOSCODE:5369
DOSCODE:5369
DOSCODE:5369 $SETDPB         proc near               ; ...
DOSCODE:5369                 mov     di, bp          ; Buffer address (es:bp)
DOSCODE:536B                 inc     di              ; Skip over dpb_drive and dpb_UNIT
DOSCODE:536C                 inc     di
DOSCODE:536D                 lodsw                   ; dpb_sector_size ; bytes per sector
DOSCODE:536E                 stosw                   ; .BPB_BYTESPERSECTOR
DOSCODE:536F                 cmp     cx, 4558h       ; 'XE' (NASM syntax)
DOSCODE:536F                                         ; CX = signature 4558h ('EX') for FAT32 extended BPB/DPB
DOSCODE:5373                 jnz     short not_fat32_extension
DOSCODE:5375                 cmp     dx, 4152h       ; 'RA' (NASM syntax)
DOSCODE:5375                                         ; DX = signature 4152h ('AR') for FAT32 extended BPB/DPB
DOSCODE:5379                 jz      short chk_fat32_conditions
DOSCODE:537B
DOSCODE:537B not_fat32_extension:                    ; ...
DOSCODE:537B                 xor     cx, cx          ; 0 ; (Do not use FAT32 extensions -32 bit parameters-)
DOSCODE:537D
DOSCODE:537D chk_fat32_conditions:                   ; ...
DOSCODE:537D                 push    cx              ; (*)
DOSCODE:537E                 cmp     byte ptr [si+3], 0 ; .BPB_NUMBEROFFATS
DOSCODE:5382                 jz      short nofat
DOSCODE:5384                 cmp     word ptr [si+9], 0 ; .BPB_SECTORSPERFAT ; BPB_FATSz16
DOSCODE:5388                 jnz     short yesfat
DOSCODE:538A                 cmp     word ptr [si+29], 0 ; .BPB_FAT32VERSION ; BPB_FSVer
DOSCODE:538E                 jz      short yesfat
DOSCODE:5390
DOSCODE:5390 nofat:                                  ; ...
DOSCODE:5390                 xor     ax, ax
DOSCODE:5392                 mov     es:[di+4], al   ; DPB.FAT_COUNT = 0
DOSCODE:5396                 add     di, 15          ; DPB.DRIVER_ADDR
DOSCODE:5399                 add     si, 11          ; .BPB_SECTORSPERTRACK
DOSCODE:539C                 mov     es:[bp+15], ax  ; DPB.FAT_SIZE = 0
DOSCODE:53A0                 jmp     setend
DOSCODE:53A3 ; ---------------------------------------------------------------------------
DOSCODE:53A3
DOSCODE:53A3 yesfat:                                 ; ...
DOSCODE:53A3                 mov     dx, ax          ; bytes per sector
DOSCODE:53A5                 lodsb                   ; .BPB_SECTORSPERCLUSTER
DOSCODE:53A6                 xor     ah, ah
DOSCODE:53A8                 or      ax, ax
DOSCODE:53AA                 jz      short nofat
DOSCODE:53AC                 dec     al
DOSCODE:53AE                 stosb                   ; DPB.CLUSTER_MASK ; Sectors/cluster - 1
DOSCODE:53AF                 inc     al
DOSCODE:53B1
DOSCODE:53B1 LOG2LOOP:                               ; ...
DOSCODE:53B1                 test    al, 1
DOSCODE:53B3                 jnz     short SAVLOG
DOSCODE:53B5                 inc     ah
DOSCODE:53B7                 shr     al, 1
DOSCODE:53B9                 jmp     short LOG2LOOP
DOSCODE:53BB ; ---------------------------------------------------------------------------
DOSCODE:53BB
DOSCODE:53BB SAVLOG:                                 ; ...
DOSCODE:53BB                 mov     al, ah
DOSCODE:53BD                 stosb                   ; DPB.CLUSTER_SHIFT ; Log2 of sectors/cluster
DOSCODE:53BE                 mov     bl, al
DOSCODE:53C0                 movsw                   ; .BPB_RESERVEDSECTORS -> DPB.FIRST_FAT
DOSCODE:53C1                 lodsb                   ; .BPB_NUMBEROFFATS
DOSCODE:53C2                 stosb                   ; DPB.FAT_COUNT
DOSCODE:53C3                 mov     bh, al
DOSCODE:53C5                 lodsw                   ; .BPB_ROOTENTRIES
DOSCODE:53C6                 stosw                   ; DPB.ROOT_ENTRIES
DOSCODE:53C7                 mov     cl, 5
DOSCODE:53C9                 shr     dx, cl          ; Directory entries per sector
DOSCODE:53CB                 dec     ax
DOSCODE:53CC                 add     ax, dx          ; Round Up
DOSCODE:53CE                 mov     cx, dx
DOSCODE:53D0                 xor     dx, dx
DOSCODE:53D2                 div     cx
DOSCODE:53D4                 mov     cx, ax          ; Number of root directory sectors
DOSCODE:53D6                 inc     di
DOSCODE:53D7                 inc     di
DOSCODE:53D8                 movsw                   ; .BPB_TOTALSECTORS -> DPB.MAX_CLUSTER (temporary)
DOSCODE:53D9                 lodsb                   ; .BPB_MEDIADESCRIPTOR
DOSCODE:53DA                 mov     es:[bp+23], al  ; DPB.MEDIA
DOSCODE:53DE                 lodsw                   ; .BPB_SECTORSPERFAT
DOSCODE:53DF                 stosw                   ; DPB.FAT_SIZE
DOSCODE:53E0                 xor     dx, dx
DOSCODE:53E2                 or      ax, ax
DOSCODE:53E4                 jnz     short savlog1   ; 16 bit FAT size
DOSCODE:53E6                 pop     dx              ; (*) FAT32 extensions
DOSCODE:53E6                                         ; (use 32 bit FAT and Root Dir size if >0)
DOSCODE:53E7                 push    dx              ; (*)
DOSCODE:53E8                 or      dx, dx
DOSCODE:53EA                 jz      short savlog1   ; Do not use FAT32 extensions
DOSCODE:53EA                                         ; (do not use 32 bit FAT size field)
DOSCODE:53EC                 mov     ax, [si+12]     ; .BPB_SECTORSPERFAT32 ; BPB_FATSz32
DOSCODE:53EF                 mov     dx, [si+14]     ; .BPB_SECTORSPERFAT32+2
DOSCODE:53F2
DOSCODE:53F2 savlog1:                                ; ...
DOSCODE:53F2                 push    cx              ; (**) Root directory sectors
DOSCODE:53F3                 mov     cx, ax          ; 32 bit multiply
DOSCODE:53F5                 mov     al, bh          ; FAT count
DOSCODE:53F7                 xor     ah, ah
DOSCODE:53F9                 mul     dx
DOSCODE:53FB                 xchg    ax, cx
DOSCODE:53FC                 mov     dl, bh          ; FAT count
DOSCODE:53FE                 xor     dh, dh
DOSCODE:5400                 mul     dx
DOSCODE:5402                 add     dx, cx
DOSCODE:5404                 pop     cx              ; (**)
DOSCODE:5405                 cmp     ax, dx
DOSCODE:5407                 jnz     short savlog2
DOSCODE:5409                 or      ax, ax
DOSCODE:540B                 jnz     short savlog2
DOSCODE:540D                 inc     di
DOSCODE:540E                 inc     di
DOSCODE:540F                 jmp     short setend
DOSCODE:5411 ; ---------------------------------------------------------------------------
DOSCODE:5411
DOSCODE:5411 savlog2:                                ; ...
DOSCODE:5411                 add     ax, es:[bp+6]   ; dx:ax = (total) FAT sectors
DOSCODE:5411                                         ; add ax,[es:bp+DPB.FIRST_FAT]
DOSCODE:5415                 adc     dx, 0
DOSCODE:5418                 stosw                   ; DPB.DIR_SECTOR
DOSCODE:5419                 add     ax, cx          ; + root directory size
DOSCODE:541B                 mov     es:[bp+11], ax  ; DPB.FIRST_SECTOR ; First data sector
DOSCODE:541F                 adc     dx, 0
DOSCODE:5422                 pop     cx              ; (*)
DOSCODE:5423                 push    cx
DOSCODE:5424                 jcxz    short savlog3
DOSCODE:5426                 mov     es:[bp+41], ax  ; DPB.BIG_FIRST_SECTOR ; FAT32 first sector field
DOSCODE:542A                 mov     es:[bp+43], dx
DOSCODE:542E
DOSCODE:542E savlog3:                                ; ...
DOSCODE:542E                 mov     cl, bl          ; cluster shift
DOSCODE:5430                 cmp     word ptr es:[bp+13], 0 ; DPB.MAX_CLUSTER
DOSCODE:5430                                         ; (contains 16 bit .BPB_TOTALSECTORS as temporary)
DOSCODE:5435                 jnz     short normal_dpb
DOSCODE:5437                 xor     ch, ch
DOSCODE:5439                 push    dx
DOSCODE:543A                 mov     bx, [si+8]      ; SI points to .BPB_SECTORSPERTRACK and SI+8 is
DOSCODE:543A                                         ; .BPB_BIGTOTALSECTORS (32 bit total sectors)
DOSCODE:543D                 mov     dx, [si+10]
DOSCODE:5440                 sub     bx, ax
DOSCODE:5442                 pop     ax
DOSCODE:5443                 sbb     dx, ax          ; dx:bx = data sectors (for cluster count calc)
DOSCODE:5445                 or      cx, cx
DOSCODE:5447                 jz      short norot
DOSCODE:5449
DOSCODE:5449 rott:                                   ; ...
DOSCODE:5449                 clc
DOSCODE:544A                 rcr     dx, 1
DOSCODE:544C                 rcr     bx, 1
DOSCODE:544E                 loop    rott
DOSCODE:5450
DOSCODE:5450 norot:                                  ; ...
DOSCODE:5450                 mov     ax, bx          ; dx:ax = cluster count
DOSCODE:5452                 jmp     short setend
DOSCODE:5454 ; ---------------------------------------------------------------------------
DOSCODE:5454
DOSCODE:5454 normal_dpb:                             ; ...
DOSCODE:5454                 sub     ax, es:[bp+13]  ; first sector - total sectors
DOSCODE:5458                 xor     dx, dx
DOSCODE:545A                 neg     ax              ; data sectors = total sectors - first sector
DOSCODE:545C                 shr     ax, cl          ; cluster count
DOSCODE:545E
DOSCODE:545E setend:                                 ; ...
DOSCODE:545E                 pop     cx              ; (*) 0 = not 32 bit fat sectors
DOSCODE:545F                 push    cx              ; (*)
DOSCODE:5460                 add     ax, 1
DOSCODE:5463                 adc     dx, 0           ; calculated # clusters HW
DOSCODE:5466                 mov     bx, ax          ; calculated # clusters LW
DOSCODE:5468                 mov     ax, es:[bp+15]  ; FAT size (16 bit)
DOSCODE:546C                 jcxz    short setend1   ; Do not use 32 bit FAT sectors field
DOSCODE:546E                 xor     cx, cx
DOSCODE:5470                 or      ax, ax
DOSCODE:5472                 jnz     short setend1
DOSCODE:5474                 mov     ax, [si+12]     ; .BPB_SECTORSPERFAT32  ; 32 bit FAT size field.
DOSCODE:5477                 mov     cx, [si+14]     ; .BPB_SECTORSPERFAT32+2
DOSCODE:547A
DOSCODE:547A setend1:                                ; ...
DOSCODE:547A                 push    dx              ; cx:ax = FAT size (in sectors)
DOSCODE:547A                                         ; dx:bx = calculated number of clusters
DOSCODE:547B                 xchg    ax, cx
DOSCODE:547C                 mul     word ptr es:[bp+2] ; DPB.SECTOR_SIZE
DOSCODE:5480                 xchg    ax, cx
DOSCODE:5481                 mul     word ptr es:[bp+2]
DOSCODE:5485                 add     dx, cx          ; dx:ax = FAT size in bytes
DOSCODE:5487                 pop     cx              ; calculated # clusters HW
DOSCODE:5488                 or      cx, cx
DOSCODE:548A                 jnz     short setend2   ; FAT32
DOSCODE:548C                 cmp     bx, 0FF6h
DOSCODE:5490                 jb      short setend_fat12 ; FAT12
DOSCODE:5492
DOSCODE:5492 setend2:                                ; ...
DOSCODE:5492                 or      cx, cx          ; HW of calculated cluster count
DOSCODE:5494                 jnz     short setend3
DOSCODE:5496                 cmp     bx, 0FFF6h
DOSCODE:5499                 jb      short setend4   ; FAT16
DOSCODE:549B
DOSCODE:549B setend3:                                ; ...
DOSCODE:549B                 shr     dx, 1           ; FAT32 ; 4 byte (32 bit) cluster number
DOSCODE:549B                                         ; fatsiz/4 = # of fat entries
DOSCODE:549D                 rcr     ax, 1
DOSCODE:549F                 shr     dx, 1
DOSCODE:54A1                 jz      short setend5   ; dx = 0
DOSCODE:54A3                 rcr     ax, 1
DOSCODE:54A5                 jmp     short setend_fat16
DOSCODE:54A7 ; ---------------------------------------------------------------------------
DOSCODE:54A7
DOSCODE:54A7 setend4:                                ; ...
DOSCODE:54A7                 shr     dx, 1           ; FAT16 ; 2 byte (16 bit) cluster number
DOSCODE:54A7                                         ; fatsiz/2 = # of fat entries
DOSCODE:54A9                 jnz     short setend_faterr ; dx > 0
DOSCODE:54AB
DOSCODE:54AB setend5:                                ; ...
DOSCODE:54AB                 rcr     ax, 1           ; FAT16 ; 2 byte (16 bit) cluster number
DOSCODE:54AB                                         ; fatsiz/2 = # of fat entries
DOSCODE:54AD                 cmp     ax, 0FF7h       ; 4096-10+1
DOSCODE:54B0                 jb      short setend_faterr
DOSCODE:54B2                 jmp     short setend_fat16
DOSCODE:54B4 ; ---------------------------------------------------------------------------
DOSCODE:54B4
DOSCODE:54B4 setend_fat12:                           ; ...
DOSCODE:54B4                 add     ax, ax          ; FAT12 ; 1.5 byte (12 bit) cluster number
DOSCODE:54B4                                         ; (fatsiz*2)/3 = # of fat entries
DOSCODE:54B6                 adc     dx, dx
DOSCODE:54B8                 cmp     dx, 3           ; if our fatspace is more than we need
DOSCODE:54B8                                         ; use calculated size
DOSCODE:54BB                 jnb     short setend_faterr
DOSCODE:54BD                 div     cs:word3
DOSCODE:54C2
DOSCODE:54C2 setend_fat16:                           ; ...
DOSCODE:54C2                 sub     ax, 1
DOSCODE:54C5                 sbb     dx, 0
DOSCODE:54C8                 cmp     dx, cx          ; is fat big enough?
DOSCODE:54CA                 ja      short setend_faterr
DOSCODE:54CC                 cmp     ax, bx
DOSCODE:54CE                 jbe     short setend_fat32 ; use max value that'll fit
DOSCODE:54D0
DOSCODE:54D0 setend_faterr:                          ; ...
DOSCODE:54D0                 mov     ax, bx          ; use calculated value
DOSCODE:54D2                 mov     dx, cx
DOSCODE:54D4
DOSCODE:54D4 setend_fat32:                           ; ...
DOSCODE:54D4                 cmp     word ptr es:[bp+15], 0 ; DPB.FAT_SIZE ; 16 bit FAT size
DOSCODE:54D9                 jnz     short setend6
DOSCODE:54DB                 mov     word ptr es:[bp+17], 0FFFFh ; DPB.DIR_SECTOR
DOSCODE:54DB                                         ; (16 bit directory sector field)
DOSCODE:54E1                 mov     word ptr es:[bp+13], 0 ; DPB.MAX_CLUSTER (16 bit)
DOSCODE:54E7                 jmp     short setend7
DOSCODE:54E9 ; ---------------------------------------------------------------------------
DOSCODE:54E9
DOSCODE:54E9 setend6:                                ; ...
DOSCODE:54E9                 mov     es:[bp+13], ax  ; DPB.MAX_CLUSTER = calculated last cluster number
DOSCODE:54ED
DOSCODE:54ED setend7:                                ; ...
DOSCODE:54ED                 pop     cx              ; (*) 1 = use FAT32 extensions
DOSCODE:54ED                                         ;     0 = don't use FAT32 extensions (32 bit fields)
DOSCODE:54EE                 jcxz    short setend_fat ; do not use FAT32 extensions
DOSCODE:54F0                 mov     es:[bp+45], ax  ; DPB.MAX_CLUSTER32 ; dx:ax = last cluster number
DOSCODE:54F4                 mov     es:[bp+47], dx
DOSCODE:54F8                 mov     ax, 0FFFFh      ; -1
DOSCODE:54FB                 lea     di, [bp+33]     ; DPB.FREE_CNT_HW
DOSCODE:54FB                                         ; High word of free cluster count
DOSCODE:54FE                 stosw                   ; -1 ; 0FFFFh
DOSCODE:54FF                 lea     si, [si+16]     ; FAT32 flags
DOSCODE:5502                 movsw                   ; DPB FAT32 flags ; [bp+23h]
DOSCODE:5503                 add     si, 6
DOSCODE:5506                 lodsw                   ; FSINFO structure sector number
DOSCODE:5507                 mov     dx, [si-24h]    ; .BPB_RESERVEDSECTORS ; Number of reserved sectors.
DOSCODE:550A                 or      ax, ax
DOSCODE:550C                 jz      short setend8
DOSCODE:550E                 cmp     ax, dx
DOSCODE:5510                 jb      short setend9
DOSCODE:5512
DOSCODE:5512 setend8:                                ; ...
DOSCODE:5512                 mov     ax, 0FFFFh      ; -1 ; invalid
DOSCODE:5515
DOSCODE:5515 setend9:                                ; ...
DOSCODE:5515                 stosw                   ; DPB FSINFO structure sector number
DOSCODE:5515                                         ; [bp+25h]
DOSCODE:5516                 lodsw                   ; Sector number of the backup boot sector
DOSCODE:5517                 or      ax, ax
DOSCODE:5519                 jz      short setend10
DOSCODE:551B                 cmp     ax, dx
DOSCODE:551D                 jb      short setend11
DOSCODE:551F
DOSCODE:551F setend10:                               ; ...
DOSCODE:551F                 mov     ax, 0FFFFh      ; -1 ; invalid
DOSCODE:5522
DOSCODE:5522 setend11:                               ; ...
DOSCODE:5522                 stosw                   ; DPB backup boot sector address
DOSCODE:5522                                         ; [bp+27h]
DOSCODE:5523                 add     di, 8           ; [bp+31h]
DOSCODE:5526                 xor     dx, dx
DOSCODE:5528                 mov     ax, es:[di-34]  ; [bp+0Fh] ; DPB.MAX_CLUSTER
DOSCODE:552C                 cmp     ax, dx
DOSCODE:552E                 jnz     short setend12  ; > 0 (not FAT32)
DOSCODE:5530                 mov     ax, [si-16]     ; FAT32 Sectors per FAT ; .BPB_SECTORSPERFAT32
DOSCODE:5533                 mov     dx, [si-14]
DOSCODE:5536
DOSCODE:5536 setend12:                               ; ...
DOSCODE:5536                 stosw                   ; DPB FAT32 FAT size in sectors ; [bp+31h]
DOSCODE:5537                 mov     ax, dx
DOSCODE:5539                 stosw
DOSCODE:553A                 sub     si, 8           ; Root directory cluster number
DOSCODE:553D                 movsw                   ; DPB Root Dir Cluster ; [bp+35h]
DOSCODE:553E                 movsw
DOSCODE:553F                 xor     ax, ax          ; DPB reserved ; [bp+39h]
DOSCODE:5541                 stosw
DOSCODE:5542                 stosw
DOSCODE:5543
DOSCODE:5543 setend_fat:                             ; ...
DOSCODE:5543                 xor     ax, ax
DOSCODE:5545                 mov     es:[bp+29], ax  ; DPB.NEXT_FREE ; last allocated cluster #
DOSCODE:5549                 dec     ax
DOSCODE:554A                 mov     es:[bp+31], ax  ; DPB.FREE_CNT (-1 = unknown)
DOSCODE:554E                 retn
DOSCODE:554E $SETDPB         endp
DOSCODE:554E
DOSCODE:554F
DOSCODE:554F ; =============== S U B R O U T I N E =======================================
DOSCODE:554F
DOSCODE:554F
DOSCODE:554F $DUP_PDB        proc near               ; ...
DOSCODE:554F                 mov     ds, cs:DosDSeg
DOSCODE:5554                 assume ds:nothing
DOSCODE:5554                 mov     ds:CreatePDB, 0FFh ; indicate a new process
DOSCODE:5559                 mov     ds, ds:CurrentPDB
DOSCODE:555D                 push    si
DOSCODE:555E                 jmp     short CreateCopy
DOSCODE:5560 ; ---------------------------------------------------------------------------
DOSCODE:5560
DOSCODE:5560 $CREATE_PROCESS_DATA_BLOCK:             ; ...
DOSCODE:5560                 call    Get_User_Stack
DOSCODE:5563                 mov     ds, word ptr [si+14h] ; [SI+user_env.user_CS]
DOSCODE:5566                 push    word ptr ds:2   ; [PDB.BLOCK_LEN]
DOSCODE:556A
DOSCODE:556A CreateCopy:                             ; ...
DOSCODE:556A                 mov     es, dx
DOSCODE:556C                 xor     si, si          ; copy entire PDB
DOSCODE:556E                 mov     di, si
DOSCODE:5570                 mov     cx, 128
DOSCODE:5573                 rep movsw
DOSCODE:5575                 mov     cx, 20          ; FILPERPROC
DOSCODE:5578                 mov     di, 18h         ; PDB.JFN_TABLE
DOSCODE:557B                 push    ds
DOSCODE:557C                 lds     si, ds:34h      ; [PDB.JFN_Pointer]
DOSCODE:5580                 rep movsb
DOSCODE:5582                 pop     ds
DOSCODE:5583                 mov     ds, cs:DosDSeg
DOSCODE:5588                 cmp     ds:CreatePDB, 0
DOSCODE:558D                 jz      short Create_PDB_cont
DOSCODE:558F                 mov     ds, cs:DosDSeg
DOSCODE:5594                 xor     bx, bx
DOSCODE:5596                 mov     cx, 20
DOSCODE:5599
DOSCODE:5599 Create_dup_jfn:                         ; ...
DOSCODE:5599                 push    es
DOSCODE:559A                 call    SFFromHandle
DOSCODE:559D                 mov     al, 0FFh        ; unassigned JFN
DOSCODE:559F                 jb      short CreateStash
DOSCODE:55A1                 test    byte ptr es:[di+6], 10h ; [ES:DI+SF_ENTRY.sf_flags+1],
DOSCODE:55A1                                         ; (sf_no_inherit>>8)
DOSCODE:55A6                 jnz     short CreateStash ; if no-inherit bit is set, skip dup.
DOSCODE:55A8                 mov     ah, es:[di+2]   ; [ES:DI+SF_ENTRY.sf_mode]
DOSCODE:55AC                 and     ah, 0F0h        ; SHARING_MASK
DOSCODE:55AF                 cmp     ah, 70h         ; SHARING_NET_FCB
DOSCODE:55B2                 jz      short CreateStash
DOSCODE:55B4                 mov     word ptr ds:THISSFT, di
DOSCODE:55B8                 mov     word ptr ds:THISSFT+2, es
DOSCODE:55BC                 call    DOS_DUP
DOSCODE:55BF                 call    pJFNFromHandle
DOSCODE:55C2                 mov     al, es:[di]
DOSCODE:55C5
DOSCODE:55C5 CreateStash:                            ; ...
DOSCODE:55C5                 pop     es
DOSCODE:55C6                 mov     es:[bx+18h], al ; [ES:BX+PDB.JFN_TABLE]
DOSCODE:55CA                 inc     bx              ; next jfn
DOSCODE:55CB                 loop    Create_dup_jfn
DOSCODE:55CD                 mov     bx, ds:CurrentPDB ; get current process
DOSCODE:55D1                 mov     es:16h, bx      ; [ES:PDB.PARENT_PID]
DOSCODE:55D6                 mov     ds:CurrentPDB, es
DOSCODE:55DA                 mov     ds, bx
DOSCODE:55DC
DOSCODE:55DC Create_PDB_cont:                        ; ...
DOSCODE:55DC                 push    ds
DOSCODE:55DD                 mov     ds, cs:DosDSeg
DOSCODE:55E2                 mov     ds:CreatePDB, 0
DOSCODE:55E7                 pop     ds
DOSCODE:55E8                 pop     ax
DOSCODE:55E8 $DUP_PDB        endp
DOSCODE:55E8
DOSCODE:55E9
DOSCODE:55E9 ; =============== S U B R O U T I N E =======================================
DOSCODE:55E9
DOSCODE:55E9
DOSCODE:55E9 SETMEM          proc near               ; ...
DOSCODE:55E9                 xor     cx, cx
DOSCODE:55EB                 mov     ds, cx
DOSCODE:55ED                 assume ds:DOSCODE
DOSCODE:55ED                 mov     es, dx
DOSCODE:55EF                 mov     si, 88h         ; addr_int_terminate
DOSCODE:55F2                 mov     di, 0Ah         ; SAVEXIT
DOSCODE:55F5                 mov     cl, 6
DOSCODE:55F7                 rep movsw
DOSCODE:55F9                 mov     es:2, ax
DOSCODE:55FD                 sub     ax, dx
DOSCODE:55FF                 cmp     ax, 0FFFh       ; MAXDIF
DOSCODE:5602                 jbe     short HAVDIF
DOSCODE:5604                 mov     ax, 0FFFh       ; MAXDIF
DOSCODE:5607
DOSCODE:5607 HAVDIF:                                 ; ...
DOSCODE:5607                 sub     ax, 10h         ; Allow for 100h byte "stack" in .COM files
DOSCODE:560A                 mov     bx, 0Ch         ; ENTRYPOINTSEG
DOSCODE:560D                 sub     bx, ax
DOSCODE:560F                 mov     cl, 4
DOSCODE:5611                 shl     ax, cl
DOSCODE:5613                 mov     ds, dx
DOSCODE:5615                 assume ds:nothing
DOSCODE:5615                 mov     ds:6, ax        ; [PDB.CPM_CALL+1]
DOSCODE:5618                 mov     ds:8, bx        ; [PDB.CPM_CALL+3]
DOSCODE:561C                 cmp     ax, 0FEF0h      ; WRAPOFFSET
DOSCODE:561F                 jz      short addr_ok
DOSCODE:5621                 mov     word ptr ds:6, 0C0h ; [PDB.CPM_CALL+1],0C0h
DOSCODE:5627                 mov     word ptr ds:8, 0 ; [PDB.CPM_CALL+3],0
DOSCODE:562D
DOSCODE:562D addr_ok:                                ; ...
DOSCODE:562D                 mov     word ptr ds:0, 20CDh ; PDB.EXIT_CALL],(int_abort*256) + mi_INT
DOSCODE:5633                 mov     byte ptr ds:5, 9Ah ; [PDB.CPM_CALL],mi_Long_CALL
DOSCODE:5638                 mov     word ptr ds:50h, 21CDh ; [PDB.CALL_SYSTEM],(int_command*256) + mi_INT
DOSCODE:563E                 mov     byte ptr ds:52h, 0CBh ; [PDB.CALL_SYSTEM+2],mi_Long_RET
DOSCODE:5643                 mov     word ptr ds:34h, 18h ; [PDB.JFN_Pointer],PDB.JFN_TABLE
DOSCODE:5649                 mov     word ptr ds:36h, ds ; PDB.JFN_Pointer+2],DS
DOSCODE:564D                 mov     word ptr ds:32h, 14h ; [PDB.JFN_Length],FILPERPROC
DOSCODE:5653                 mov     word ptr ds:38h, 0FFFFh ; [PDB.Next_PDB],-1
DOSCODE:5659                 mov     word ptr ds:3Ah, 0FFFFh ; [PDB.Next_PDB+2],-1
DOSCODE:565F                 mov     word ptr es:40h, 0A07h ; [ES:PDB.Version],
DOSCODE:565F                                         ; (MINOR_VERSION*256)+MAJOR_VERSION
DOSCODE:5666                 retn
DOSCODE:5666 SETMEM          endp
DOSCODE:5666
DOSCODE:5667 ; ---------------------------------------------------------------------------
DOSCODE:5667
DOSCODE:5667 $GSetMediaID:                           ; ...
DOSCODE:5667                 push    ds
DOSCODE:5668                 push    si
DOSCODE:5669                 lds     si, ss:THISCDS
DOSCODE:566E                 lds     si, [si+45h]    ; [si+curdir.devptr]
DOSCODE:566E                                         ; local pointer to DPB or net device
DOSCODE:5671                 mov     si, [si+0Fh]    ; [si+DPB.FAT_SIZE]
DOSCODE:5674                 mov     cx, 866h        ; assume get for IOCTL
DOSCODE:5674                                         ; major function = Generic IOCtl (08h)
DOSCODE:5674                                         ; minor function = GetMediaId (66h)
DOSCODE:5677                 cmp     al, 1           ; set ?
DOSCODE:5679                 jb      short doioctl1  ; get
DOSCODE:567B                 ja      short errorfunc ; invalid
DOSCODE:567D                 mov     cl, 46h         ; minor function = SetMediaId (46h)
DOSCODE:567F                 or      si, si
DOSCODE:5681                 jz      short doioctl2  ; FAT32 fs
DOSCODE:5683
DOSCODE:5683 doioctl1:                               ; ...
DOSCODE:5683                 or      si, si
DOSCODE:5685                 jnz     short doioctl   ; FAT fs (FAT12, FAT16)
DOSCODE:5687                 pop     ds
DOSCODE:5688                 push    ds
DOSCODE:5689                 mov     si, dx          ; disk info
DOSCODE:5689                                         ; .................................
DOSCODE:5689                                         ; 00h    WORD    0000h (info level)
DOSCODE:5689                                         ; 02h    DWORD   disk serial number (binary)
DOSCODE:5689                                         ; 06h 11 BYTEs   volume label or "NO NAME    " if none present
DOSCODE:5689                                         ; 11h  8 BYTEs   (AL=00h only) filesystem type
DOSCODE:5689                                         ;     "FAT12   "
DOSCODE:5689                                         ;     "FAT16   "
DOSCODE:5689                                         ;     "FAT32   " ; PCDOS 7.1
DOSCODE:5689                                         ;     "CDROM   "
DOSCODE:5689                                         ;     "CD001   "
DOSCODE:5689                                         ;     "CDAUDIO "
DOSCODE:5689                                         ; .................................
DOSCODE:5689                                         ; ; (ref: Ralf Brown's Interrupt List)
DOSCODE:568B                 cmp     word ptr [si+11h], 4146h ; 'FA'
DOSCODE:5690                 jnz     short doioctl
DOSCODE:5692                 cmp     word ptr [si+13h], 3354h ; 'T3'
DOSCODE:5697                 jnz     short doioctl
DOSCODE:5699                 cmp     word ptr [si+15h], 2032h ; '2 '
DOSCODE:569E                 jnz     short doioctl
DOSCODE:56A0                 cmp     word ptr [si+17h], 2020h ; '  '
DOSCODE:56A5                 jnz     short doioctl
DOSCODE:56A7
DOSCODE:56A7 doioctl2:                               ; ...
DOSCODE:56A7                 mov     ch, 48h         ; new generic ioctl function (FAT32)
DOSCODE:56A7                                         ; (major function bit 6 is 1)
DOSCODE:56A9
DOSCODE:56A9 doioctl:                                ; ...
DOSCODE:56A9                 pop     si
DOSCODE:56AA                 pop     ds
DOSCODE:56AB                 mov     al, 0Dh         ; generic IOCTL
DOSCODE:56AD                 call    $IOCTL          ; let IOCTL take care of it
DOSCODE:56B0                 retn
DOSCODE:56B1 ; ---------------------------------------------------------------------------
DOSCODE:56B1
DOSCODE:56B1 errorfunc:                              ; ...
DOSCODE:56B1                 mov     al, 1           ; error_invalid_function
DOSCODE:56B3                 jmp     SYS_RET_ERR
DOSCODE:56B6
DOSCODE:56B6 ; =============== S U B R O U T I N E =======================================
DOSCODE:56B6
DOSCODE:56B6
DOSCODE:56B6 StrCmp          proc near               ; ...
DOSCODE:56B6                 push    si
DOSCODE:56B7                 push    di
DOSCODE:56B8                 push    ax
DOSCODE:56B9
DOSCODE:56B9 Cmplp:                                  ; ...
DOSCODE:56B9                 lodsb
DOSCODE:56BA                 call    UCase           ; convert to upper case
DOSCODE:56BD                 call    PATHCHRCMP      ; convert '/' to '\'
DOSCODE:56C0                 mov     ah, al
DOSCODE:56C2                 mov     al, es:[di]
DOSCODE:56C5                 inc     di
DOSCODE:56C6                 call    UCase
DOSCODE:56C9                 call    PATHCHRCMP
DOSCODE:56CC                 cmp     ah, al
DOSCODE:56CE                 jnz     short PopRet    ; Strings dif
DOSCODE:56D0                 or      al, al
DOSCODE:56D2                 jnz     short Cmplp     ; More string
DOSCODE:56D4
DOSCODE:56D4 PopRet:                                 ; ...
DOSCODE:56D4                 pop     ax
DOSCODE:56D5                 pop     di
DOSCODE:56D6                 pop     si
DOSCODE:56D7                 retn
DOSCODE:56D7 StrCmp          endp
DOSCODE:56D7
DOSCODE:56D8
DOSCODE:56D8 ; =============== S U B R O U T I N E =======================================
DOSCODE:56D8
DOSCODE:56D8
DOSCODE:56D8 StrCpy          proc near               ; ...
DOSCODE:56D8                 push    ax
DOSCODE:56D9
DOSCODE:56D9 CPYLoop:                                ; ...
DOSCODE:56D9                 lodsb
DOSCODE:56DA                 call    UCase           ; convert to upper case
DOSCODE:56DD                 call    PATHCHRCMP      ; convert / to \
DOSCODE:56E0                 stosb
DOSCODE:56E1                 or      al, al
DOSCODE:56E3                 jnz     short CPYLoop
DOSCODE:56E5                 pop     ax
DOSCODE:56E6                 retn
DOSCODE:56E6 StrCpy          endp
DOSCODE:56E6
DOSCODE:56E7
DOSCODE:56E7 ; =============== S U B R O U T I N E =======================================
DOSCODE:56E7
DOSCODE:56E7
DOSCODE:56E7 FStrCpy         proc near               ; ...
DOSCODE:56E7                 push    ax
DOSCODE:56E8
DOSCODE:56E8 FCPYLoop:                               ; ...
DOSCODE:56E8                 lodsb
DOSCODE:56E9                 stosb
DOSCODE:56EA                 or      al, al
DOSCODE:56EC                 jnz     short FCPYLoop
DOSCODE:56EE                 pop     ax
DOSCODE:56EF                 retn
DOSCODE:56EF FStrCpy         endp
DOSCODE:56EF
DOSCODE:56F0
DOSCODE:56F0 ; =============== S U B R O U T I N E =======================================
DOSCODE:56F0
DOSCODE:56F0
DOSCODE:56F0 StrLen          proc near               ; ...
DOSCODE:56F0                 push    di
DOSCODE:56F1                 push    ax
DOSCODE:56F2                 mov     cx, 65535       ; -1 ; 0FFFFh
DOSCODE:56F5                 xor     al, al
DOSCODE:56F7                 repne scasb
DOSCODE:56F9                 not     cx
DOSCODE:56FB                 pop     ax
DOSCODE:56FC                 pop     di
DOSCODE:56FD                 retn
DOSCODE:56FD StrLen          endp
DOSCODE:56FD
DOSCODE:56FE
DOSCODE:56FE ; =============== S U B R O U T I N E =======================================
DOSCODE:56FE
DOSCODE:56FE
DOSCODE:56FE DStrLen         proc near               ; ...
DOSCODE:56FE                 call    XCHGP
DOSCODE:5701                 call    StrLen
DOSCODE:5704                 call    XCHGP
DOSCODE:5707                 retn
DOSCODE:5707 DStrLen         endp
DOSCODE:5707
DOSCODE:5708
DOSCODE:5708 ; =============== S U B R O U T I N E =======================================
DOSCODE:5708
DOSCODE:5708
DOSCODE:5708 XCHGP           proc near               ; ...
DOSCODE:5708                 push    ds
DOSCODE:5709                 push    es
DOSCODE:570A                 pop     ds
DOSCODE:570B                 pop     es
DOSCODE:570C                 xchg    si, di
DOSCODE:570E
DOSCODE:570E xchgp_retn:                             ; ...
DOSCODE:570E                 retn
DOSCODE:570E XCHGP           endp
DOSCODE:570E
DOSCODE:570F
DOSCODE:570F ; =============== S U B R O U T I N E =======================================
DOSCODE:570F
DOSCODE:570F
DOSCODE:570F Idle            proc near               ; ...
DOSCODE:570F                 cmp     ss:FSHARING, 0
DOSCODE:5715                 jnz     short xchgp_retn
DOSCODE:5717                 push    cx
DOSCODE:5718                 mov     cx, ss:RetryLoop
DOSCODE:571D                 jcxz    short Idle3
DOSCODE:571F
DOSCODE:571F Idle1:                                  ; ...
DOSCODE:571F                 push    cx
DOSCODE:5720                 xor     cx, cx
DOSCODE:5722
DOSCODE:5722 Idle2:                                  ; ...
DOSCODE:5722                 loop    Idle2
DOSCODE:5724                 pop     cx
DOSCODE:5725                 loop    Idle1
DOSCODE:5727
DOSCODE:5727 Idle3:                                  ; ...
DOSCODE:5727                 pop     cx
DOSCODE:5728                 retn
DOSCODE:5728 Idle            endp
DOSCODE:5728
DOSCODE:5729
DOSCODE:5729 ; =============== S U B R O U T I N E =======================================
DOSCODE:5729
DOSCODE:5729 ; Attributes: bp-based frame
DOSCODE:5729
DOSCODE:5729 TableDispatch   proc near               ; ...
DOSCODE:5729
DOSCODE:5729 TFrame.Index    = byte ptr  4
DOSCODE:5729 TFrame.Tab      = word ptr  6
DOSCODE:5729
DOSCODE:5729                 push    bp
DOSCODE:572A                 mov     bp, sp
DOSCODE:572C                 push    bx
DOSCODE:572D                 mov     bx, [bp+TFrame.Tab]
DOSCODE:5730                 mov     bl, cs:[bx]
DOSCODE:5733                 cmp     [bp+TFrame.Index], bl
DOSCODE:5736                 jnb     short TableError
DOSCODE:5738                 mov     bl, [bp+TFrame.Index]
DOSCODE:573B                 xor     bh, bh
DOSCODE:573D                 shl     bx, 1
DOSCODE:573F                 inc     bx
DOSCODE:5740                 add     bx, [bp+TFrame.Tab]
DOSCODE:5743                 mov     bx, cs:[bx]
DOSCODE:5746                 mov     [bp+TFrame.Tab], bx
DOSCODE:5749                 pop     bx
DOSCODE:574A                 pop     bp
DOSCODE:574B                 add     sp, 4
DOSCODE:574E                 retn
DOSCODE:574F ; ---------------------------------------------------------------------------
DOSCODE:574F
DOSCODE:574F TableError:                             ; ...
DOSCODE:574F                 pop     bx
DOSCODE:5750                 pop     bp
DOSCODE:5751                 retn    6
DOSCODE:5751 TableDispatch   endp ; sp-analysis failed
DOSCODE:5751
DOSCODE:5754
DOSCODE:5754 ; =============== S U B R O U T I N E =======================================
DOSCODE:5754
DOSCODE:5754
DOSCODE:5754 TestNet         proc near               ; ...
DOSCODE:5754                 mov     es, cs:DosDSeg
DOSCODE:5759                 les     di, es:THISCDS
DOSCODE:575E                 cmp     di, 0FFFFh      ; -1
DOSCODE:5761                 jz      short CMCRet    ; UNC? carry is clear
DOSCODE:5763                 test    byte ptr es:[di+44h], 80h ; [ES:DI+curdir.flags+1],
DOSCODE:5763                                         ; (curdir_isnet>>8)
DOSCODE:5768                 jnz     short CMCRet    ; jump has carry clear
DOSCODE:576A                 retn                    ; carry is clear
DOSCODE:576B ; ---------------------------------------------------------------------------
DOSCODE:576B
DOSCODE:576B CMCRet:                                 ; ...
DOSCODE:576B                 cmc
DOSCODE:576C                 retn
DOSCODE:576C TestNet         endp
DOSCODE:576C
DOSCODE:576D
DOSCODE:576D ; =============== S U B R O U T I N E =======================================
DOSCODE:576D
DOSCODE:576D
DOSCODE:576D IsSFTNet        proc near               ; ...
DOSCODE:576D                 test    byte ptr es:[di+6], 80h ; [ES:DI+SF_ENTRY.sf_flags+1],
DOSCODE:576D                                         ; (sf_isnet>>8)
DOSCODE:5772                 retn
DOSCODE:5772 IsSFTNet        endp
DOSCODE:5772
DOSCODE:5773 ; ---------------------------------------------------------------------------
DOSCODE:5773
DOSCODE:5773 FastInit:                               ; ...
DOSCODE:5773                 push    es
DOSCODE:5774                 mov     es, cs:DosDSeg
DOSCODE:5779                 mov     di, offset FastTable_2 ; points to fastxxx entry
DOSCODE:577C                 dec     bx              ; decrement index
DOSCODE:577D                 mov     dx, bx
DOSCODE:577F                 shl     bx, 1
DOSCODE:5781                 shl     bx, 1           ; each entry is DWORD
DOSCODE:5783                 add     di, bx
DOSCODE:5785                 mov     ax, es:[di+2]
DOSCODE:5789                 mov     cx, cs          ; get DOS segment
DOSCODE:578B                 cmp     ax, cx          ; first time installed ?
DOSCODE:578D                 jz      short ok_install ; yes
DOSCODE:578F                 or      ax, ax
DOSCODE:5791                 stc
DOSCODE:5792                 jnz     short FSret     ; already installed !
DOSCODE:5794
DOSCODE:5794 ok_install:                             ; ...
DOSCODE:5794                 cmp     si, 0FFFFh      ; Query only ?
DOSCODE:5797                 jz      short FSret     ; yes
DOSCODE:5799                 mov     cx, ds          ; get FASTXXX entry segment
DOSCODE:579B                 mov     es:[di+2], cx   ; initialize routine entry
DOSCODE:579B                                         ; initialize routine offset
DOSCODE:579F                 mov     es:[di], si
DOSCODE:57A2                 mov     di, offset FastOpenFlg ; FastFlg
DOSCODE:57A5                 add     di, dx          ; index to a FASTXXX flag
DOSCODE:57A7                 or      byte ptr es:[di], 80h ; Fast_yes
DOSCODE:57A7                                         ; indicate installed
DOSCODE:57AB
DOSCODE:57AB FSret:                                  ; ...
DOSCODE:57AB                 pop     es
DOSCODE:57AC                 retn
DOSCODE:57AD ; ---------------------------------------------------------------------------
DOSCODE:57AD
DOSCODE:57AD FastRet:                                ; ...
DOSCODE:57AD                 stc
DOSCODE:57AE                 sbb     ax, ax          ; AX = -1, CF = 1
DOSCODE:57B0                 retf
DOSCODE:57B1 ; ---------------------------------------------------------------------------
DOSCODE:57B1
DOSCODE:57B1 NLS_OPEN:                               ; ...
DOSCODE:57B1                 mov     al, cl          ; set up correct interface for $OPEN
DOSCODE:57B3                 call    $OPEN
DOSCODE:57B6                 retn
DOSCODE:57B7 ; ---------------------------------------------------------------------------
DOSCODE:57B7
DOSCODE:57B7 NLS_LSEEK:                              ; ...
DOSCODE:57B7                 push    ss:USER_SP      ; save user stack
DOSCODE:57BC                 push    ss:USER_SS
DOSCODE:57C1                 call    Fake_User_Stack
DOSCODE:57C4                 mov     ax, bp          ; set up correct interface for $LSEEK
DOSCODE:57C6                 call    $LSEEK
DOSCODE:57C9
DOSCODE:57C9 NLS_SEEK_RET:                           ; ...
DOSCODE:57C9                 pop     ss:USER_SS      ; restore user stack
DOSCODE:57CE                 pop     ss:USER_SP
DOSCODE:57D3                 retn
DOSCODE:57D4
DOSCODE:57D4 ; =============== S U B R O U T I N E =======================================
DOSCODE:57D4
DOSCODE:57D4
DOSCODE:57D4 Fake_User_Stack proc near               ; ...
DOSCODE:57D4                 mov     ax, ss:USER_SP_2F ; replace with INT 2Fh stack
DOSCODE:57D8                 mov     ss:USER_SP, ax
DOSCODE:57DC                 mov     ax, ss
DOSCODE:57DE                 mov     ss:USER_SS, ax
DOSCODE:57E2                 retn
DOSCODE:57E2 Fake_User_Stack endp
DOSCODE:57E2
DOSCODE:57E3 ; ---------------------------------------------------------------------------
DOSCODE:57E3
DOSCODE:57E3 GetDevList:                             ; ...
DOSCODE:57E3                 mov     si, offset SysInitTable
DOSCODE:57E6                 mov     ds, cs:DosDSeg
DOSCODE:57EB                 lds     si, [si]
DOSCODE:57ED                 mov     ax, [si+22h]    ; [SI+SYSI.DEV]
DOSCODE:57F0                 mov     bx, [si+24h]    ; [SI+SYSI.DEV+2]
DOSCODE:57F3                 retn
DOSCODE:57F4 ; ---------------------------------------------------------------------------
DOSCODE:57F4
DOSCODE:57F4 NLS_IOCTL:                              ; ...
DOSCODE:57F4                 push    ss:USER_SP
DOSCODE:57F9                 push    ss:USER_SS
DOSCODE:57FE                 call    Fake_User_Stack
DOSCODE:5801                 mov     ax, bp          ; set up correct interface for $IOCTL
DOSCODE:5803                 call    $IOCTL
DOSCODE:5806                 jmp     short NLS_SEEK_RET
DOSCODE:5808 ; ---------------------------------------------------------------------------
DOSCODE:5808
DOSCODE:5808 NLS_GETEXT:                             ; ...
DOSCODE:5808                 mov     ax, ss:EXTERR   ; return extended error
DOSCODE:580C
DOSCODE:580C MSG_RETRIEVAL:                          ; ...
DOSCODE:580C                 retn
DOSCODE:580D
DOSCODE:580D ; =============== S U B R O U T I N E =======================================
DOSCODE:580D
DOSCODE:580D
DOSCODE:580D ECritDisk       proc near               ; ...
DOSCODE:580D                 push    cx
DOSCODE:580E                 mov     ch, 0
DOSCODE:5810                 mov     cl, ss:redir_patch
DOSCODE:5815                 jcxz    short ECritDisk_3
DOSCODE:5817                 pop     cx
DOSCODE:5818                 push    ax
DOSCODE:5819                 mov     ax, 8001h
DOSCODE:581C
DOSCODE:581C ECritDisk_1:                            ; ...
DOSCODE:581C                 push    cx
DOSCODE:581D                 mov     ch, 0
DOSCODE:581F                 mov     cl, ss:IsWin386
DOSCODE:5824                 jcxz    short ECritDisk2
DOSCODE:5826                 pop     cx
DOSCODE:5827                 int     2Ah             ; Microsoft Networks - BEGIN DOS CRITICAL SECTION
DOSCODE:5827                                         ; AL = critical section number (00h-0Fh)
DOSCODE:5829                 pop     ax
DOSCODE:582A                 retn
DOSCODE:582B ; ---------------------------------------------------------------------------
DOSCODE:582B
DOSCODE:582B ECritDisk2:                             ; ...
DOSCODE:582B                 push    es
DOSCODE:582C                 mov     cx, 0
DOSCODE:582F                 mov     es, cx
DOSCODE:5831                 assume es:DOSCODE
DOSCODE:5831                 pushf                   ; simulate INT 2Ah
DOSCODE:5832                 call    es:00A8h        ; call far (INT 2Ah vector)
DOSCODE:5837                 pop     es
DOSCODE:5838                 assume es:nothing
DOSCODE:5838                 pop     cx
DOSCODE:5839                 pop     ax
DOSCODE:583A                 retn
DOSCODE:583B ; ---------------------------------------------------------------------------
DOSCODE:583B
DOSCODE:583B ECritDisk_3:                            ; ...
DOSCODE:583B                 pop     cx
DOSCODE:583C                 retn
DOSCODE:583C ECritDisk       endp
DOSCODE:583C
DOSCODE:583D
DOSCODE:583D ; =============== S U B R O U T I N E =======================================
DOSCODE:583D
DOSCODE:583D
DOSCODE:583D LCritDisk       proc near               ; ...
DOSCODE:583D                 push    cx
DOSCODE:583E                 mov     ch, 0
DOSCODE:5840                 mov     cl, ss:redir_patch
DOSCODE:5845                 jcxz    short ECritDisk_3
DOSCODE:5847                 pop     cx
DOSCODE:5848                 push    ax
DOSCODE:5849                 mov     ax, 8101h
DOSCODE:584C                 jmp     short ECritDisk_1
DOSCODE:584C LCritDisk       endp
DOSCODE:584C
DOSCODE:584E
DOSCODE:584E ; =============== S U B R O U T I N E =======================================
DOSCODE:584E
DOSCODE:584E
DOSCODE:584E ECritDevice     proc near               ; ...
DOSCODE:584E                 push    cx
DOSCODE:584F                 mov     ch, 0
DOSCODE:5851                 mov     cl, ss:redir_patch
DOSCODE:5856                 jcxz    short ECritDisk_3
DOSCODE:5858                 pop     cx
DOSCODE:5859                 push    ax
DOSCODE:585A                 mov     ax, 8002h
DOSCODE:585D                 jmp     short ECritDisk_1
DOSCODE:585D ECritDevice     endp
DOSCODE:585D
DOSCODE:585F
DOSCODE:585F ; =============== S U B R O U T I N E =======================================
DOSCODE:585F
DOSCODE:585F
DOSCODE:585F LCritDevice     proc near               ; ...
DOSCODE:585F                 push    cx
DOSCODE:5860                 mov     ch, 0
DOSCODE:5862                 mov     cl, ss:redir_patch
DOSCODE:5867                 jcxz    short ECritDisk_3
DOSCODE:5869                 pop     cx
DOSCODE:586A                 push    ax
DOSCODE:586B                 mov     ax, 8102h
DOSCODE:586E                 jmp     short ECritDisk_1
DOSCODE:586E LCritDevice     endp
DOSCODE:586E
DOSCODE:5870
DOSCODE:5870 ; =============== S U B R O U T I N E =======================================
DOSCODE:5870
DOSCODE:5870
DOSCODE:5870 $STD_CON_INPUT_NO_ECHO proc near        ; ...
DOSCODE:5870                 push    ds              ; Input character from console, no echo
DOSCODE:5871                 push    si
DOSCODE:5872
DOSCODE:5872 INTEST:                                 ; ...
DOSCODE:5872                 call    near ptr STATCHK
DOSCODE:5875                 jnz     short GET
DOSCODE:5877                 cmp     ss:PRINTER_FLAG, 0 ; is printer idle?
DOSCODE:587D                 jnz     short no_sys_wait
DOSCODE:587F                 mov     ah, 5           ; get input status with system wait
DOSCODE:5881                 call    IOFUNC
DOSCODE:5884
DOSCODE:5884 no_sys_wait:                            ; ...
DOSCODE:5884                 mov     ah, 84h
DOSCODE:5886                 int     2Ah             ; Microsoft Networks - KEYBOARD BUSY LOOP
DOSCODE:5888                 cmp     byte ptr ss:DATE_FLAG, 0FFh ; date is updated may be every
DOSCODE:588E                 jnz     short NoUpdate  ; 255 x ? ms if no one calls
DOSCODE:5890                 push    ax
DOSCODE:5891                 push    bx
DOSCODE:5892                 push    cx
DOSCODE:5893                 push    dx
DOSCODE:5894                 push    ds
DOSCODE:5895                 push    ss
DOSCODE:5896                 pop     ds
DOSCODE:5897                 assume ds:DOSCODE
DOSCODE:5897                 xor     ax, ax
DOSCODE:5899                 call    Save_Restore_Packet ; save DEVCALL packet
DOSCODE:589C                 call    READTIME
DOSCODE:589F                 mov     ax, 1
DOSCODE:58A2                 call    Save_Restore_Packet ; restore DEVCALL packet
DOSCODE:58A5                 pop     ds
DOSCODE:58A6                 assume ds:nothing
DOSCODE:58A6                 pop     dx
DOSCODE:58A7                 pop     cx
DOSCODE:58A8                 pop     bx
DOSCODE:58A9                 pop     ax
DOSCODE:58AA
DOSCODE:58AA NoUpdate:                               ; ...
DOSCODE:58AA                 inc     ss:DATE_FLAG
DOSCODE:58AF                 jmp     short INTEST
DOSCODE:58B1 ; ---------------------------------------------------------------------------
DOSCODE:58B1
DOSCODE:58B1 GET:                                    ; ...
DOSCODE:58B1                 xor     ah, ah
DOSCODE:58B3                 call    IOFUNC
DOSCODE:58B6                 pop     si
DOSCODE:58B7                 pop     ds
DOSCODE:58B8                 mov     ss:SCAN_FLAG, 0
DOSCODE:58BE                 cmp     al, 0           ; extended code ?
DOSCODE:58C0                 jnz     short noscan
DOSCODE:58C2                 inc     ss:SCAN_FLAG    ; set this flag for ALT_Q key
DOSCODE:58C7
DOSCODE:58C7 noscan:                                 ; ...
DOSCODE:58C7                 retn
DOSCODE:58C7 $STD_CON_INPUT_NO_ECHO endp
DOSCODE:58C7
DOSCODE:58C8 ; ---------------------------------------------------------------------------
DOSCODE:58C8
DOSCODE:58C8 $STD_CON_STRING_OUTPUT:                 ; ...
DOSCODE:58C8                 mov     si, dx          ; Console String Output
DOSCODE:58CA
DOSCODE:58CA NEXT_STR1:                              ; ...
DOSCODE:58CA                 lodsb
DOSCODE:58CB                 cmp     al, 24h ; '$'
DOSCODE:58CD                 jz      short noscan
DOSCODE:58CF                 call    OUTT
DOSCODE:58D2                 jmp     short NEXT_STR1
DOSCODE:58D4
DOSCODE:58D4 ; =============== S U B R O U T I N E =======================================
DOSCODE:58D4
DOSCODE:58D4
DOSCODE:58D4 $STD_CON_STRING_INPUT proc near         ; ...
DOSCODE:58D4                 push    ss              ; Input Line from Console
DOSCODE:58D5                 pop     es
DOSCODE:58D6                 assume es:DOSCODE
DOSCODE:58D6                 mov     si, dx
DOSCODE:58D8                 xor     ch, ch          ; 0
DOSCODE:58DA                 lodsw
DOSCODE:58DB                 or      al, al
DOSCODE:58DD                 jz      short noscan    ; Buffer is 0 length!!?
DOSCODE:58DF                 mov     bl, ah          ; Init template counter
DOSCODE:58E1                 mov     bh, ch
DOSCODE:58E3                 cmp     al, bl
DOSCODE:58E5                 jbe     short NOEDIT    ; If length of buffer inconsistent
DOSCODE:58E5                                         ;  with contents
DOSCODE:58E7                 cmp     byte ptr [bx+si], 0Dh ; c_CR
DOSCODE:58EA                 jz      short EDITON    ; If CR correctly placed EDIT is OK
DOSCODE:58EC
DOSCODE:58EC NOEDIT:                                 ; ...
DOSCODE:58EC                 mov     bl, ch          ; Reset buffer
DOSCODE:58EE
DOSCODE:58EE EDITON:                                 ; ...
DOSCODE:58EE                 mov     dl, al
DOSCODE:58F0                 dec     dx              ; DL is # of bytes we can put in the buffer
DOSCODE:58F0 $STD_CON_STRING_INPUT endp
DOSCODE:58F0
DOSCODE:58F1 ; START OF FUNCTION CHUNK FOR FINDOLD
DOSCODE:58F1
DOSCODE:58F1 NEWLIN:                                 ; ...
DOSCODE:58F1                 mov     al, ss:CARPOS
DOSCODE:58F5                 mov     ss:STARTPOS, al ; Remember position in raw buffer
DOSCODE:58F9                 push    si
DOSCODE:58FA                 mov     di, offset INBUF ; Build the new line here
DOSCODE:58FD                 mov     ss:INSMODE, ch  ; Insert mode off
DOSCODE:5902                 mov     bh, ch          ; No chars from template yet
DOSCODE:5904                 mov     dh, ch          ; No chars to new line yet
DOSCODE:5906                 call    $STD_CON_INPUT_NO_ECHO ; Get first char
DOSCODE:5909                 cmp     al, 0Ah         ; Linefeed ; c_LF
DOSCODE:590B                 jnz     short GOTCH
DOSCODE:590D
DOSCODE:590D GETCH:                                  ; ...
DOSCODE:590D                 call    $STD_CON_INPUT_NO_ECHO
DOSCODE:5910
DOSCODE:5910 GOTCH:                                  ; ...
DOSCODE:5910                 cmp     al, 6           ; Ignore ^F
DOSCODE:5912                 jz      short GETCH
DOSCODE:5914                 cmp     al, cs:ESCCHAR  ; function-key lead byte ?
DOSCODE:5919                 jz      short ESCAPE    ; change reserved keyword
DOSCODE:591B                 cmp     al, 7Fh         ; c_DEL ; destructive backspace
DOSCODE:591D                 jz      short BACKSP
DOSCODE:591F                 cmp     al, 8           ; c_BS ; destructive backspaces
DOSCODE:5921                 jz      short BACKSP
DOSCODE:5923                 cmp     al, 0Dh         ; c_CR ; CR terminates the line.
DOSCODE:5925                 jz      short ENDLIN
DOSCODE:5927                 cmp     al, 0Ah         ; c_LF ; LF goes to a new line
DOSCODE:5929                 jz      short PHYCRLF   ; and keeps on reading.
DOSCODE:592B                 cmp     al, cs:CANCHAR  ; ^X (or ESC) deletes the line
DOSCODE:5930                 jz      short KILNEW    ;  and starts over
DOSCODE:5932
DOSCODE:5932 SAVCH:                                  ; ...
DOSCODE:5932                 cmp     dh, dl
DOSCODE:5934                 jnb     short BUFFUL    ; buffer is full
DOSCODE:5936                 stosb                   ; save the input character
DOSCODE:5937                 inc     dh              ; increment count in buffer
DOSCODE:5939                 call    BUFOUT          ; Print control chars nicely
DOSCODE:593C                 cmp     ss:INSMODE, 0
DOSCODE:5942                 jnz     short GETCH     ; insertmode => don't advance template
DOSCODE:5944                 cmp     bh, bl
DOSCODE:5946                 jnb     short GETCH     ; no more characters in template
DOSCODE:5948                 inc     si              ; Skip to next char in template
DOSCODE:5949                 inc     bh              ; remember position in template
DOSCODE:594B                 jmp     short GETCH
DOSCODE:594D ; ---------------------------------------------------------------------------
DOSCODE:594D
DOSCODE:594D BUFFUL:                                 ; ...
DOSCODE:594D                 mov     al, 7           ; Bell to signal full buffer
DOSCODE:594F                 call    OUTT
DOSCODE:5952                 jmp     short GETCH
DOSCODE:5954 ; ---------------------------------------------------------------------------
DOSCODE:5954
DOSCODE:5954 ESCAPE:                                 ; ...
DOSCODE:5954                 jmp     OEMFunctionKey  ; let the OEM's handle the key dispatch
DOSCODE:5957 ; ---------------------------------------------------------------------------
DOSCODE:5957
DOSCODE:5957 ENDLIN:                                 ; ...
DOSCODE:5957                 stosb                   ; Put the CR in the buffer
DOSCODE:5958                 call    OUTT            ; Echo it
DOSCODE:595B                 pop     di              ; Get start of user buffer
DOSCODE:595C                 mov     [di-1], dh      ; Tell user how many bytes
DOSCODE:595F                 inc     dh              ; DH is length including CR
DOSCODE:5961
DOSCODE:5961 COPYNEW:                                ; ...
DOSCODE:5961                 push    ds              ; XCHG ES,DS
DOSCODE:5962                 push    es
DOSCODE:5963                 pop     ds
DOSCODE:5964                 assume ds:DOSCODE
DOSCODE:5964                 pop     es
DOSCODE:5965                 assume es:nothing
DOSCODE:5965                 mov     si, offset INBUF
DOSCODE:5968                 mov     cl, dh          ; set up count
DOSCODE:596A                 rep movsb               ; Copy final line to user buffer
DOSCODE:596A ; END OF FUNCTION CHUNK FOR FINDOLD
DOSCODE:596C
DOSCODE:596C OLDBAK_RETN:                            ; ...
DOSCODE:596C                 retn
DOSCODE:596D ; ---------------------------------------------------------------------------
DOSCODE:596D ; START OF FUNCTION CHUNK FOR FINDOLD
DOSCODE:596D
DOSCODE:596D PHYCRLF:                                ; ...
DOSCODE:596D                 call    CRLF            ; Output a CRLF to the user screen
DOSCODE:596D                                         ; and do NOT store it into the buffer
DOSCODE:5970
DOSCODE:5970 GETCH_j:                                ; ...
DOSCODE:5970                 jmp     short GETCH
DOSCODE:5970 ; END OF FUNCTION CHUNK FOR FINDOLD
DOSCODE:5972 ; ---------------------------------------------------------------------------
DOSCODE:5972
DOSCODE:5972 LineDel:                                ; ...
DOSCODE:5972                 or      dh, dh          ; Delete the previous line
DOSCODE:5974                 jz      short GETCH
DOSCODE:5976                 call    BackSpace
DOSCODE:5979                 jmp     short LineDel
DOSCODE:597B ; ---------------------------------------------------------------------------
DOSCODE:597B ; START OF FUNCTION CHUNK FOR FINDOLD
DOSCODE:597B
DOSCODE:597B KILNEW:                                 ; ...
DOSCODE:597B                 mov     al, 5Ch ; '\'
DOSCODE:597D                 call    OUTT            ; Print the CANCEL indicator
DOSCODE:5980                 pop     si              ; Remember start of edit buffer
DOSCODE:5981
DOSCODE:5981 PUTNEW:                                 ; ...
DOSCODE:5981                 call    CRLF            ; Go to next line on screen
DOSCODE:5984                 mov     al, ss:STARTPOS
DOSCODE:5988                 call    TAB             ; Tab over
DOSCODE:598B                 jmp     NEWLIN          ; Start over again
DOSCODE:598E ; ---------------------------------------------------------------------------
DOSCODE:598E
DOSCODE:598E BACKSP:                                 ; ...
DOSCODE:598E                 call    BackSpace       ; Destructively back up one char position
DOSCODE:5991                 jmp     short GETCH_j
DOSCODE:5991 ; END OF FUNCTION CHUNK FOR FINDOLD
DOSCODE:5993
DOSCODE:5993 ; =============== S U B R O U T I N E =======================================
DOSCODE:5993
DOSCODE:5993
DOSCODE:5993 BackSpace       proc near               ; ...
DOSCODE:5993                 or      dh, dh
DOSCODE:5995                 jz      short OLDBAK    ; No chars in line,
DOSCODE:5995                                         ;  do nothing to line
DOSCODE:5997                 call    BACKUP          ; Do the backup
DOSCODE:599A                 mov     al, es:[di]     ; Get the deleted char
DOSCODE:599D                 cmp     al, 20h ; ' '   ; Was a normal char
DOSCODE:599F                 jnb     short OLDBAK
DOSCODE:59A1                 cmp     al, 9
DOSCODE:59A3                 jz      short BAKTAB    ; Was a tab, fix up users display
DOSCODE:59A5                 cmp     al, 15h         ; "U"-"@" ; ctrl-U is a section symbol
DOSCODE:59A5                                         ;  not ^U
DOSCODE:59A7                 jz      short OLDBAK
DOSCODE:59A9                 cmp     al, 14h         ; "T"-"@" ; ctrl-T is a paragraphs symbol
DOSCODE:59A9                                         ;  not ^T
DOSCODE:59AB                 jz      short OLDBAK
DOSCODE:59AD                 call    BACKMES
DOSCODE:59B0
DOSCODE:59B0 OLDBAK:                                 ; ...
DOSCODE:59B0                 cmp     ss:INSMODE, 0
DOSCODE:59B6                 jnz     short OLDBAK_RETN ; In insert mode, done
DOSCODE:59B8                 or      bh, bh
DOSCODE:59BA                 jz      short OLDBAK_RETN ;
DOSCODE:59BA                                         ; Not advanced in template,
DOSCODE:59BA                                         ;  stay where we are
DOSCODE:59BC                 dec     bh              ; Go back in template
DOSCODE:59BE                 dec     si
DOSCODE:59BF                 retn
DOSCODE:59C0 ; ---------------------------------------------------------------------------
DOSCODE:59C0
DOSCODE:59C0 BAKTAB:                                 ; ...
DOSCODE:59C0                 push    di
DOSCODE:59C1                 dec     di              ; Back up one char
DOSCODE:59C2                 std                     ; Go backward
DOSCODE:59C3                 mov     cl, dh          ; Number of chars currently in line
DOSCODE:59C5                 mov     al, 20h ; ' '
DOSCODE:59C7                 push    bx
DOSCODE:59C8                 mov     bl, 7           ; Max
DOSCODE:59CA                 jcxz    short FIGTAB    ; At start, do nothing
DOSCODE:59CC
DOSCODE:59CC FNDPOS:                                 ; ...
DOSCODE:59CC                 scasb                   ; Look back
DOSCODE:59CD                 jbe     short CHKCNT
DOSCODE:59CF                 cmp     byte ptr es:[di+1], 9
DOSCODE:59D4                 jz      short HAVTAB    ; Found a tab
DOSCODE:59D6                 dec     bl              ; Back one char if non tab control char
DOSCODE:59D8
DOSCODE:59D8 CHKCNT:                                 ; ...
DOSCODE:59D8                 loop    FNDPOS
DOSCODE:59DA
DOSCODE:59DA FIGTAB:                                 ; ...
DOSCODE:59DA                 sub     bl, ss:STARTPOS
DOSCODE:59DF
DOSCODE:59DF HAVTAB:                                 ; ...
DOSCODE:59DF                 sub     bl, dh
DOSCODE:59E1                 add     cl, bl
DOSCODE:59E3                 and     cl, 7           ; CX has correct number to erase
DOSCODE:59E6                 cld                     ; Back to normal
DOSCODE:59E7                 pop     bx
DOSCODE:59E8                 pop     di
DOSCODE:59E9                 jz      short OLDBAK    ; Nothing to erase
DOSCODE:59EB
DOSCODE:59EB TABBAK:                                 ; ...
DOSCODE:59EB                 call    BACKMES
DOSCODE:59EE                 loop    TABBAK          ; Erase correct number of chars
DOSCODE:59F0                 jmp     short OLDBAK
DOSCODE:59F0 BackSpace       endp
DOSCODE:59F0
DOSCODE:59F2
DOSCODE:59F2 ; =============== S U B R O U T I N E =======================================
DOSCODE:59F2
DOSCODE:59F2
DOSCODE:59F2 BACKUP          proc near               ; ...
DOSCODE:59F2                 dec     dh              ; Back up in line
DOSCODE:59F4                 dec     di
DOSCODE:59F4 BACKUP          endp
DOSCODE:59F4
DOSCODE:59F5
DOSCODE:59F5 ; =============== S U B R O U T I N E =======================================
DOSCODE:59F5
DOSCODE:59F5
DOSCODE:59F5 BACKMES         proc near               ; ...
DOSCODE:59F5                 mov     al, 8           ; c_BS ; Backspace
DOSCODE:59F7                 call    OUTT
DOSCODE:59FA                 mov     al, 20h ; ' '   ; SPACE char ; Erase
DOSCODE:59FC                 call    OUTT
DOSCODE:59FF                 mov     al, 8           ; Backspace
DOSCODE:5A01                 jmp     OUTT            ; Done
DOSCODE:5A01 BACKMES         endp
DOSCODE:5A01
DOSCODE:5A04 ; ---------------------------------------------------------------------------
DOSCODE:5A04 ; START OF FUNCTION CHUNK FOR FINDOLD
DOSCODE:5A04
DOSCODE:5A04 TWOESC:                                 ; ...
DOSCODE:5A04                 mov     al, cs:ESCCHAR  ; User really wants an ESC character
DOSCODE:5A04                                         ;  in his line
DOSCODE:5A08                 jmp     SAVCH
DOSCODE:5A0B ; ---------------------------------------------------------------------------
DOSCODE:5A0B
DOSCODE:5A0B COPYLIN:                                ; ...
DOSCODE:5A0B                 mov     cl, bl          ; Total size of template
DOSCODE:5A0D                 sub     cl, bh          ; Minus position in template,
DOSCODE:5A0D                                         ;  is number to move
DOSCODE:5A0F                 jmp     short COPYEACH
DOSCODE:5A11 ; ---------------------------------------------------------------------------
DOSCODE:5A11
DOSCODE:5A11 COPYSTR:                                ; ...
DOSCODE:5A11                 call    FINDOLD         ; Find the char
DOSCODE:5A14                 jmp     short COPYEACH  ; Copy up to it
DOSCODE:5A16 ; ---------------------------------------------------------------------------
DOSCODE:5A16
DOSCODE:5A16 COPYONE:                                ; ...
DOSCODE:5A16                 mov     cl, 1
DOSCODE:5A18
DOSCODE:5A18 COPYEACH:                               ; ...
DOSCODE:5A18                 mov     ss:INSMODE, 0   ; All copies turn off insert mode
DOSCODE:5A1E                 cmp     dh, dl
DOSCODE:5A20                 jz      short GETCH2    ; At end of line, can't do anything
DOSCODE:5A22                 cmp     bh, bl
DOSCODE:5A24                 jz      short GETCH2    ; At end of template, can't do anything
DOSCODE:5A26                 lodsb
DOSCODE:5A27                 stosb
DOSCODE:5A28                 call    BUFOUT
DOSCODE:5A2B                 inc     bh              ; Ahead in template
DOSCODE:5A2D                 inc     dh              ; Ahead in line
DOSCODE:5A2F                 loop    COPYEACH
DOSCODE:5A31
DOSCODE:5A31 GETCH2:                                 ; ...
DOSCODE:5A31                 jmp     GETCH
DOSCODE:5A34 ; ---------------------------------------------------------------------------
DOSCODE:5A34
DOSCODE:5A34 SKIPONE:                                ; ...
DOSCODE:5A34                 cmp     bh, bl
DOSCODE:5A36                 jz      short GETCH2    ; At end of template
DOSCODE:5A38                 inc     bh              ; Ahead in template
DOSCODE:5A3A                 inc     si
DOSCODE:5A3B                 jmp     short GETCH2
DOSCODE:5A3D ; ---------------------------------------------------------------------------
DOSCODE:5A3D
DOSCODE:5A3D SKIPSTR:                                ; ...
DOSCODE:5A3D                 call    FINDOLD         ; Find out how far to go
DOSCODE:5A40                 add     si, cx          ; Go there
DOSCODE:5A42                 add     bh, cl
DOSCODE:5A44                 jmp     short GETCH2
DOSCODE:5A44 ; END OF FUNCTION CHUNK FOR FINDOLD
DOSCODE:5A46
DOSCODE:5A46 ; =============== S U B R O U T I N E =======================================
DOSCODE:5A46
DOSCODE:5A46
DOSCODE:5A46 FINDOLD         proc near               ; ...
DOSCODE:5A46
DOSCODE:5A46 ; FUNCTION CHUNK AT DOSCODE:4967 SIZE 00000019 BYTES
DOSCODE:5A46 ; FUNCTION CHUNK AT DOSCODE:58F1 SIZE 0000007B BYTES
DOSCODE:5A46 ; FUNCTION CHUNK AT DOSCODE:596D SIZE 00000005 BYTES
DOSCODE:5A46 ; FUNCTION CHUNK AT DOSCODE:597B SIZE 00000018 BYTES
DOSCODE:5A46 ; FUNCTION CHUNK AT DOSCODE:5A04 SIZE 00000042 BYTES
DOSCODE:5A46
DOSCODE:5A46                 call    $STD_CON_INPUT_NO_ECHO
DOSCODE:5A49                 cmp     al, cs:ESCCHAR  ; did he type a function key?
DOSCODE:5A4E                 jnz     short FINDSETUP ; no, set up for scan
DOSCODE:5A50                 call    $STD_CON_INPUT_NO_ECHO ; eat next char
DOSCODE:5A53                 jmp     short NOTFND    ; go try again
DOSCODE:5A55 ; ---------------------------------------------------------------------------
DOSCODE:5A55
DOSCODE:5A55 FINDSETUP:                              ; ...
DOSCODE:5A55                 mov     cl, bl
DOSCODE:5A57                 sub     cl, bh          ; CX is number of chars to end of template
DOSCODE:5A59                 jz      short NOTFND    ; At end of template
DOSCODE:5A5B                 dec     cx              ; Cannot point past end, limit search
DOSCODE:5A5C                 jz      short NOTFND    ; If only one char in template, forget it
DOSCODE:5A5E                 push    es
DOSCODE:5A5F                 push    ds
DOSCODE:5A60                 pop     es
DOSCODE:5A61                 assume es:DOSCODE
DOSCODE:5A61                 push    di
DOSCODE:5A62                 mov     di, si          ; Template to ES:DI
DOSCODE:5A64                 inc     di
DOSCODE:5A65                 repne scasb             ; Look
DOSCODE:5A67                 pop     di
DOSCODE:5A68                 pop     es
DOSCODE:5A69                 assume es:nothing
DOSCODE:5A69                 jnz     short NOTFND    ; Didn't find the char
DOSCODE:5A6B                 not     cl              ; Turn how far to go into how far we went
DOSCODE:5A6D                 add     cl, bl          ; Add size of template
DOSCODE:5A6F                 sub     cl, bh          ; Subtract current pos,
DOSCODE:5A6F                                         ;  result distance to skip
DOSCODE:5A71
DOSCODE:5A71 FINDOLD_RETN:                           ; ...
DOSCODE:5A71                 retn
DOSCODE:5A72 ; ---------------------------------------------------------------------------
DOSCODE:5A72
DOSCODE:5A72 NOTFND:                                 ; ...
DOSCODE:5A72                 pop     bp              ; Chuck return address
DOSCODE:5A73
DOSCODE:5A73 GETCH2_j:                               ; ...
DOSCODE:5A73                 jmp     short GETCH2
DOSCODE:5A75 ; ---------------------------------------------------------------------------
DOSCODE:5A75
DOSCODE:5A75 REEDIT:                                 ; ...
DOSCODE:5A75                 mov     al, 40h ; '@'   ; Output re-edit character
DOSCODE:5A77                 call    OUTT
DOSCODE:5A7A                 pop     di
DOSCODE:5A7B                 push    di
DOSCODE:5A7C                 push    es
DOSCODE:5A7D                 push    ds
DOSCODE:5A7E                 call    COPYNEW         ; Copy current line into template
DOSCODE:5A81                 pop     ds
DOSCODE:5A82                 assume ds:nothing
DOSCODE:5A82                 pop     es
DOSCODE:5A83                 pop     si
DOSCODE:5A84                 mov     bl, dh          ; Size of line is new size template
DOSCODE:5A86                 jmp     PUTNEW          ; Start over again
DOSCODE:5A89 ; ---------------------------------------------------------------------------
DOSCODE:5A89
DOSCODE:5A89 EXITINS:                                ; ...
DOSCODE:5A89                 not     ss:INSMODE      ; ENTERINS
DOSCODE:5A8E                 jmp     short GETCH2_j
DOSCODE:5A90 ; ---------------------------------------------------------------------------
DOSCODE:5A90
DOSCODE:5A90 CTRLZ:                                  ; ...
DOSCODE:5A90                 mov     al, 1Ah         ; "Z"-"@"
DOSCODE:5A92                 jmp     SAVCH
DOSCODE:5A92 FINDOLD         endp ; sp-analysis failed
DOSCODE:5A92
DOSCODE:5A95
DOSCODE:5A95 ; =============== S U B R O U T I N E =======================================
DOSCODE:5A95
DOSCODE:5A95
DOSCODE:5A95 CRLF            proc near               ; ...
DOSCODE:5A95                 mov     al, 0Dh         ; c_CR
DOSCODE:5A97                 call    OUTT
DOSCODE:5A9A                 mov     al, 0Ah         ; c_LF
DOSCODE:5A9C                 jmp     OUTT
DOSCODE:5A9C CRLF            endp
DOSCODE:5A9C
DOSCODE:5A9F ; ---------------------------------------------------------------------------
DOSCODE:5A9F
DOSCODE:5A9F $RAW_CON_IO:                            ; ...
DOSCODE:5A9F                 mov     al, dl          ; Input/Output raw char from console, no echo
DOSCODE:5AA1                 cmp     al, 0FFh        ; -1 if input
DOSCODE:5AA3                 jnz     short RAWOUT
DOSCODE:5AA5                 les     di, dword ptr ss:USER_SP ; Get pointer to register save area
DOSCODE:5AAA                 xor     bx, bx
DOSCODE:5AAC                 call    GET_IO_SFT
DOSCODE:5AAF                 jb      short FINDOLD_RETN
DOSCODE:5AB1                 mov     ah, 1
DOSCODE:5AB3                 call    IOFUNC
DOSCODE:5AB6                 jnz     short RESFLG
DOSCODE:5AB8                 call    SPOOLINT
DOSCODE:5ABB                 or      byte ptr es:[di+16h], 40h ; [ES:DI+user_env.user_F],40h
DOSCODE:5ABB                                         ; Set user's zero flag
DOSCODE:5AC0                 xor     al, al
DOSCODE:5AC2
DOSCODE:5AC2 RET17:                                  ; ...
DOSCODE:5AC2                 retn
DOSCODE:5AC3 ; ---------------------------------------------------------------------------
DOSCODE:5AC3
DOSCODE:5AC3 RESFLG:                                 ; ...
DOSCODE:5AC3                 and     byte ptr es:[di+16h], 0BFh ; [ES:DI+user_env.user_F],0FFh-40h
DOSCODE:5AC3                                         ; Reset user's zero flag
DOSCODE:5AC8
DOSCODE:5AC8 rci0:                                   ; ...
DOSCODE:5AC8                 call    SPOOLINT
DOSCODE:5ACB
DOSCODE:5ACB $RAW_CON_INPUT:                         ; ...
DOSCODE:5ACB                 push    bx
DOSCODE:5ACC                 xor     bx, bx
DOSCODE:5ACE                 call    GET_IO_SFT
DOSCODE:5AD1                 pop     bx
DOSCODE:5AD2                 jb      short RET17
DOSCODE:5AD4                 mov     ah, 1
DOSCODE:5AD6                 call    IOFUNC
DOSCODE:5AD9                 jnz     short rci5
DOSCODE:5ADB                 mov     ah, 84h
DOSCODE:5ADD                 int     2Ah             ; Microsoft Networks - KEYBOARD BUSY LOOP
DOSCODE:5ADF                 jmp     short rci0
DOSCODE:5AE1 ; ---------------------------------------------------------------------------
DOSCODE:5AE1
DOSCODE:5AE1 rci5:                                   ; ...
DOSCODE:5AE1                 xor     ah, ah
DOSCODE:5AE3                 call    IOFUNC
DOSCODE:5AE6                 retn
DOSCODE:5AE7
DOSCODE:5AE7 ; =============== S U B R O U T I N E =======================================
DOSCODE:5AE7
DOSCODE:5AE7
DOSCODE:5AE7 RAWOUT          proc near               ; ...
DOSCODE:5AE7                 push    bx
DOSCODE:5AE8                 mov     bx, 1
DOSCODE:5AEB                 call    GET_IO_SFT
DOSCODE:5AEE                 jb      short RAWRET1
DOSCODE:5AF0                 mov     bx, [si+5]      ; [SI+SF_ENTRY.sf_flags]
DOSCODE:5AF0                                         ; DS set up by get_io_sft
DOSCODE:5AF3                 and     bx, 8080h       ; sf_isnet+devid_device
DOSCODE:5AF7                 cmp     bx, 80h         ; devid_device
DOSCODE:5AFB                 jnz     short RAWNORM
DOSCODE:5AFD                 push    ds
DOSCODE:5AFE                 lds     bx, [si+7]      ; [SI+SF_ENTRY.sf_devptr]
DOSCODE:5AFE                                         ; output to special?
DOSCODE:5B01                 test    byte ptr [bx+4], 10h ; ISSPEC
DOSCODE:5B05                 pop     ds
DOSCODE:5B06                 jz      short RAWNORM   ; if not, do normally
DOSCODE:5B08                 push    ds
DOSCODE:5B09                 xor     bx, bx
DOSCODE:5B0B                 mov     ds, bx
DOSCODE:5B0D                 assume ds:DOSCODE
DOSCODE:5B0D                 pushf                   ; simulate INT 29h
DOSCODE:5B0E                 call    ds:00A4h        ; call far [29h*4] ; call far [00A4h]
DOSCODE:5B12                 pop     ds
DOSCODE:5B13                 assume ds:nothing
DOSCODE:5B13
DOSCODE:5B13 RAWRET:                                 ; ...
DOSCODE:5B13                 clc
DOSCODE:5B14
DOSCODE:5B14 RAWRET1:                                ; ...
DOSCODE:5B14                 pop     bx
DOSCODE:5B15
DOSCODE:5B15 RAWRET2:                                ; ...
DOSCODE:5B15                 retn
DOSCODE:5B16 ; ---------------------------------------------------------------------------
DOSCODE:5B16
DOSCODE:5B16 RAWNORM:                                ; ...
DOSCODE:5B16                 call    RAWOUT3
DOSCODE:5B19                 jmp     short RAWRET
DOSCODE:5B19 RAWOUT          endp
DOSCODE:5B19
DOSCODE:5B1B
DOSCODE:5B1B ; =============== S U B R O U T I N E =======================================
DOSCODE:5B1B
DOSCODE:5B1B
DOSCODE:5B1B RAWOUT2         proc near               ; ...
DOSCODE:5B1B                 call    GET_IO_SFT      ; Output the character in AL to handle in BX
DOSCODE:5B1E                 jb      short RAWRET2
DOSCODE:5B1E RAWOUT2         endp
DOSCODE:5B1E
DOSCODE:5B20
DOSCODE:5B20 ; =============== S U B R O U T I N E =======================================
DOSCODE:5B20
DOSCODE:5B20
DOSCODE:5B20 RAWOUT3         proc near               ; ...
DOSCODE:5B20                 push    ax
DOSCODE:5B21                 jmp     short RAWOSTRT
DOSCODE:5B23 ; ---------------------------------------------------------------------------
DOSCODE:5B23
DOSCODE:5B23 ROLP:                                   ; ...
DOSCODE:5B23                 call    SPOOLINT
DOSCODE:5B26                 or      ss:DOS34_FLAG, 200h ; [ss:DOS34_FLAG],CTRL_BREAK_FLAG
DOSCODE:5B2D                 call    DSKSTATCHK      ; check control break
DOSCODE:5B30
DOSCODE:5B30 RAWOSTRT:                               ; ...
DOSCODE:5B30                 mov     ah, 3
DOSCODE:5B32                 call    IOFUNC
DOSCODE:5B35                 jz      short ROLP
DOSCODE:5B37                 inc     ax              ; fail on I24 if ax = -1
DOSCODE:5B38                 pop     ax
DOSCODE:5B39                 jz      short nosend    ; yes, do not send char
DOSCODE:5B3B                 mov     ah, 2
DOSCODE:5B3D                 call    IOFUNC
DOSCODE:5B40
DOSCODE:5B40 nosend:                                 ; ...
DOSCODE:5B40                 clc                     ; Clear carry indicating successful
DOSCODE:5B41                 retn
DOSCODE:5B41 RAWOUT3         endp
DOSCODE:5B41
DOSCODE:5B42
DOSCODE:5B42 ; =============== S U B R O U T I N E =======================================
DOSCODE:5B42
DOSCODE:5B42
DOSCODE:5B42 Save_Restore_Packet proc near           ; ...
DOSCODE:5B42                 push    ds
DOSCODE:5B43                 push    es
DOSCODE:5B44                 push    si
DOSCODE:5B45                 push    di
DOSCODE:5B46                 mov     di, offset FAKE_STACK_2F
DOSCODE:5B49                 mov     si, offset DEVCALL_REQLEN ; DEVCALL
DOSCODE:5B4C                 or      ax, ax
DOSCODE:5B4E                 jz      short save_packet
DOSCODE:5B50                 xchg    si, di
DOSCODE:5B52
DOSCODE:5B52 save_packet:                            ; ...
DOSCODE:5B52                 push    ss
DOSCODE:5B53                 pop     ds
DOSCODE:5B54                 assume ds:DOSCODE
DOSCODE:5B54                 push    ss
DOSCODE:5B55                 pop     es
DOSCODE:5B56                 assume es:DOSCODE
DOSCODE:5B56                 mov     cx, 11
DOSCODE:5B59                 rep movsw
DOSCODE:5B5B                 pop     di
DOSCODE:5B5C                 pop     si
DOSCODE:5B5D                 pop     es
DOSCODE:5B5E                 assume es:nothing
DOSCODE:5B5E                 pop     ds
DOSCODE:5B5F                 assume ds:nothing
DOSCODE:5B5F                 retn
DOSCODE:5B5F Save_Restore_Packet endp
DOSCODE:5B5F
DOSCODE:5B60 ; ---------------------------------------------------------------------------
DOSCODE:5B60
DOSCODE:5B60 $STD_CON_INPUT:                         ; ...
DOSCODE:5B60                 call    $STD_CON_INPUT_NO_ECHO
DOSCODE:5B63                 push    ax
DOSCODE:5B64                 call    OUTT
DOSCODE:5B67                 pop     ax
DOSCODE:5B68
DOSCODE:5B68 CON_INPUT_RETN:                         ; ...
DOSCODE:5B68                 retn
DOSCODE:5B69 ; ---------------------------------------------------------------------------
DOSCODE:5B69 ; START OF FUNCTION CHUNK FOR OUTT
DOSCODE:5B69
DOSCODE:5B69 outch2:                                 ; ...
DOSCODE:5B69                 push    ax
DOSCODE:5B6A                 call    near ptr STATCHK
DOSCODE:5B6D                 pop     ax
DOSCODE:5B6E                 jmp     short OUTSKIP
DOSCODE:5B6E ; END OF FUNCTION CHUNK FOR OUTT
DOSCODE:5B70 ; ---------------------------------------------------------------------------
DOSCODE:5B70
DOSCODE:5B70 $STD_CON_OUTPUT:                        ; ...
DOSCODE:5B70                 mov     al, dl
DOSCODE:5B72
DOSCODE:5B72 ; =============== S U B R O U T I N E =======================================
DOSCODE:5B72
DOSCODE:5B72
DOSCODE:5B72 OUTT            proc near               ; ...
DOSCODE:5B72
DOSCODE:5B72 ; FUNCTION CHUNK AT DOSCODE:5B69 SIZE 00000007 BYTES
DOSCODE:5B72 ; FUNCTION CHUNK AT DOSCODE:5BF1 SIZE 00000008 BYTES
DOSCODE:5B72 ; FUNCTION CHUNK AT DOSCODE:5BFC SIZE 00000008 BYTES
DOSCODE:5B72 ; FUNCTION CHUNK AT DOSCODE:5C51 SIZE 00000007 BYTES
DOSCODE:5B72
DOSCODE:5B72                 cmp     al, 20h ; ' '
DOSCODE:5B74                 jb      short CTRLOUT
DOSCODE:5B76                 cmp     al, 7Fh
DOSCODE:5B78                 jz      short OUTCH
DOSCODE:5B7A                 inc     ss:CARPOS
DOSCODE:5B7F
DOSCODE:5B7F OUTCH:                                  ; ...
DOSCODE:5B7F                 push    ds
DOSCODE:5B80                 push    si
DOSCODE:5B81                 inc     ss:CHARCO       ; invoke statchk...
DOSCODE:5B86                 and     ss:CHARCO, 3Fh  ; every 64th character
DOSCODE:5B8C                 jz      short outch2
DOSCODE:5B8E
DOSCODE:5B8E OUTSKIP:                                ; ...
DOSCODE:5B8E                 call    RAWOUT          ; output the character
DOSCODE:5B91                 pop     si
DOSCODE:5B92                 pop     ds
DOSCODE:5B93                 test    ss:PFLAG, 0FFh  ; -1
DOSCODE:5B99                 jz      short CON_INPUT_RETN
DOSCODE:5B9B                 push    bx
DOSCODE:5B9C                 push    ds
DOSCODE:5B9D                 push    si
DOSCODE:5B9E                 mov     bx, 1
DOSCODE:5BA1                 call    GET_IO_SFT
DOSCODE:5BA4                 jb      short TRIPOPJ
DOSCODE:5BA6                 mov     bx, [si+5]      ; [SI+SF_ENTRY.sf_flags]
DOSCODE:5BA9                 test    bh, 80h         ; (sf_isnet>>8)
DOSCODE:5BAC                 jnz     short TRIPOPJ
DOSCODE:5BAE                 test    bl, 80h         ; devid_device
DOSCODE:5BB1                 jz      short TRIPOPJ
DOSCODE:5BB3                 mov     bx, 4
DOSCODE:5BB6                 call    GET_IO_SFT      ; GET_IO_SFT will set up DS:SI to sft entry
DOSCODE:5BB9                 jb      short TRIPOPJ
DOSCODE:5BBB                 test    byte ptr [si+6], 8 ; [SI+SF_ENTRY.sf_flags+1],
DOSCODE:5BBB                                         ; (sf_net_spool>>8) ; StdPrn redirected?
DOSCODE:5BBF                 jz      short LISSTRT2J
DOSCODE:5BC1                 mov     ss:PFLAG, 0     ; If a spool, NEVER echo
DOSCODE:5BC7
DOSCODE:5BC7 TRIPOPJ:                                ; ...
DOSCODE:5BC7                 jmp     TRIPOP
DOSCODE:5BCA ; ---------------------------------------------------------------------------
DOSCODE:5BCA
DOSCODE:5BCA LISSTRT2J:                              ; ...
DOSCODE:5BCA                 jmp     LISSTRT2
DOSCODE:5BCD ; ---------------------------------------------------------------------------
DOSCODE:5BCD
DOSCODE:5BCD CTRLOUT:                                ; ...
DOSCODE:5BCD                 cmp     al, 0Dh         ; c_CR
DOSCODE:5BCF                 jz      short ZERPOS
DOSCODE:5BD1                 cmp     al, 8           ; c_BS
DOSCODE:5BD3                 jz      short BACKPOS
DOSCODE:5BD5                 cmp     al, 9           ; c_HT
DOSCODE:5BD7                 jnz     short OUTCH
DOSCODE:5BD9                 mov     al, ss:CARPOS
DOSCODE:5BDD                 or      al, 0F8h
DOSCODE:5BDF                 neg     al
DOSCODE:5BDF OUTT            endp
DOSCODE:5BDF
DOSCODE:5BE1
DOSCODE:5BE1 ; =============== S U B R O U T I N E =======================================
DOSCODE:5BE1
DOSCODE:5BE1
DOSCODE:5BE1 TAB             proc near               ; ...
DOSCODE:5BE1                 push    cx
DOSCODE:5BE2                 mov     cl, al
DOSCODE:5BE4                 mov     ch, 0
DOSCODE:5BE6                 jcxz    short POPTAB
DOSCODE:5BE8
DOSCODE:5BE8 TABLP:                                  ; ...
DOSCODE:5BE8                 mov     al, 20h ; ' '
DOSCODE:5BEA                 call    OUTT
DOSCODE:5BED                 loop    TABLP
DOSCODE:5BEF
DOSCODE:5BEF POPTAB:                                 ; ...
DOSCODE:5BEF                 pop     cx
DOSCODE:5BF0                 retn
DOSCODE:5BF0 TAB             endp
DOSCODE:5BF0
DOSCODE:5BF1 ; ---------------------------------------------------------------------------
DOSCODE:5BF1 ; START OF FUNCTION CHUNK FOR OUTT
DOSCODE:5BF1
DOSCODE:5BF1 ZERPOS:                                 ; ...
DOSCODE:5BF1                 mov     ss:CARPOS, 0
DOSCODE:5BF7                 jmp     short OUTCH
DOSCODE:5BF7 ; END OF FUNCTION CHUNK FOR OUTT
DOSCODE:5BF9 ; ---------------------------------------------------------------------------
DOSCODE:5BF9
DOSCODE:5BF9 j_OUTT:                                 ; ...
DOSCODE:5BF9                 jmp     OUTT
DOSCODE:5BFC ; ---------------------------------------------------------------------------
DOSCODE:5BFC ; START OF FUNCTION CHUNK FOR OUTT
DOSCODE:5BFC
DOSCODE:5BFC BACKPOS:                                ; ...
DOSCODE:5BFC                 dec     ss:CARPOS
DOSCODE:5C01                 jmp     OUTCH
DOSCODE:5C01 ; END OF FUNCTION CHUNK FOR OUTT
DOSCODE:5C04
DOSCODE:5C04 ; =============== S U B R O U T I N E =======================================
DOSCODE:5C04
DOSCODE:5C04
DOSCODE:5C04 BUFOUT          proc near               ; ...
DOSCODE:5C04                 cmp     al, 20h ; ' '
DOSCODE:5C06                 jnb     short j_OUTT    ; Normal char
DOSCODE:5C08                 cmp     al, 9
DOSCODE:5C0A                 jz      short j_OUTT    ; OUT knows how to expand tabs
DOSCODE:5C0C                 cmp     al, 15h         ; "U"-"@" ; turn ^U to section symbol
DOSCODE:5C0E                 jz      short CTRLU
DOSCODE:5C10                 cmp     al, 14h         ; "T"-"@" ; turn ^T to paragraph symbol
DOSCODE:5C12                 jz      short CTRLU
DOSCODE:5C14                 push    ax
DOSCODE:5C15                 mov     al, 5Eh ; '^'
DOSCODE:5C17                 call    OUTT            ; Print '^' before control chars
DOSCODE:5C1A                 pop     ax
DOSCODE:5C1B                 or      al, 40h         ; Turn it into Upper case mate
DOSCODE:5C1D
DOSCODE:5C1D CTRLU:                                  ; ...
DOSCODE:5C1D                 call    OUTT
DOSCODE:5C20
DOSCODE:5C20 BUFOUT_RETN:                            ; ...
DOSCODE:5C20                 retn
DOSCODE:5C20 BUFOUT          endp
DOSCODE:5C20
DOSCODE:5C21 ; ---------------------------------------------------------------------------
DOSCODE:5C21
DOSCODE:5C21 $STD_AUX_INPUT:                         ; ...
DOSCODE:5C21                 call    near ptr STATCHK
DOSCODE:5C24                 mov     bx, 3
DOSCODE:5C27                 call    GET_IO_SFT
DOSCODE:5C2A                 jb      short BUFOUT_RETN
DOSCODE:5C2C                 jmp     short TAISTRT
DOSCODE:5C2E ; ---------------------------------------------------------------------------
DOSCODE:5C2E
DOSCODE:5C2E AUXILP:                                 ; ...
DOSCODE:5C2E                 call    SPOOLINT
DOSCODE:5C31
DOSCODE:5C31 TAISTRT:                                ; ...
DOSCODE:5C31                 mov     ah, 1
DOSCODE:5C33                 call    IOFUNC
DOSCODE:5C36                 jz      short AUXILP
DOSCODE:5C38                 xor     ah, ah
DOSCODE:5C3A                 call    IOFUNC
DOSCODE:5C3D                 retn
DOSCODE:5C3E ; ---------------------------------------------------------------------------
DOSCODE:5C3E
DOSCODE:5C3E $STD_AUX_OUTPUT:                        ; ...
DOSCODE:5C3E                 push    bx
DOSCODE:5C3F                 mov     bx, 3
DOSCODE:5C42                 jmp     short SENDOUT
DOSCODE:5C44 ; ---------------------------------------------------------------------------
DOSCODE:5C44
DOSCODE:5C44 $STD_PRINTER_OUTPUT:                    ; ...
DOSCODE:5C44                 push    bx
DOSCODE:5C45                 mov     bx, 4
DOSCODE:5C48
DOSCODE:5C48 SENDOUT:                                ; ...
DOSCODE:5C48                 mov     al, dl
DOSCODE:5C4A                 push    ax
DOSCODE:5C4B                 call    near ptr STATCHK
DOSCODE:5C4E                 pop     ax
DOSCODE:5C4F                 push    ds
DOSCODE:5C50                 push    si
DOSCODE:5C51 ; START OF FUNCTION CHUNK FOR OUTT
DOSCODE:5C51
DOSCODE:5C51 LISSTRT2:                               ; ...
DOSCODE:5C51                 call    RAWOUT2
DOSCODE:5C54
DOSCODE:5C54 TRIPOP:                                 ; ...
DOSCODE:5C54                 pop     si
DOSCODE:5C55                 pop     ds
DOSCODE:5C56                 pop     bx
DOSCODE:5C57
DOSCODE:5C57 SCIS_RETN:                              ; ...
DOSCODE:5C57                 retn
DOSCODE:5C57 ; END OF FUNCTION CHUNK FOR OUTT
DOSCODE:5C58 ; ---------------------------------------------------------------------------
DOSCODE:5C58
DOSCODE:5C58 $STD_CON_INPUT_STATUS:                  ; ...
DOSCODE:5C58                 call    near ptr STATCHK
DOSCODE:5C5B                 mov     al, 0           ; no xor!!
DOSCODE:5C5D                 jz      short SCIS_RETN
DOSCODE:5C5F                 dec     ax              ; -1
DOSCODE:5C60                 retn
DOSCODE:5C61 ; ---------------------------------------------------------------------------
DOSCODE:5C61
DOSCODE:5C61 $STD_CON_INPUT_FLUSH:                   ; ...
DOSCODE:5C61                 push    ax
DOSCODE:5C62                 push    dx
DOSCODE:5C63                 xor     bx, bx
DOSCODE:5C65                 call    GET_IO_SFT
DOSCODE:5C68                 jb      short BADJFNCON
DOSCODE:5C6A                 mov     ah, 4
DOSCODE:5C6C                 call    IOFUNC
DOSCODE:5C6F
DOSCODE:5C6F BADJFNCON:                              ; ...
DOSCODE:5C6F                 pop     dx
DOSCODE:5C70                 pop     ax
DOSCODE:5C71                 mov     ah, al
DOSCODE:5C73                 cmp     al, 1
DOSCODE:5C75                 jz      short REDISPJ
DOSCODE:5C77                 cmp     al, 6
DOSCODE:5C79                 jz      short REDISPJ
DOSCODE:5C7B                 cmp     al, 7
DOSCODE:5C7D                 jz      short REDISPJ
DOSCODE:5C7F                 cmp     al, 8
DOSCODE:5C81                 jz      short REDISPJ
DOSCODE:5C83                 cmp     al, 0Ah
DOSCODE:5C85                 jz      short REDISPJ
DOSCODE:5C87                 mov     al, 0
DOSCODE:5C89                 retn
DOSCODE:5C8A ; ---------------------------------------------------------------------------
DOSCODE:5C8A
DOSCODE:5C8A REDISPJ:                                ; ...
DOSCODE:5C8A                 cli
DOSCODE:5C8B                 jmp     REDISP
DOSCODE:5C8E ; ---------------------------------------------------------------------------
DOSCODE:5C8E
DOSCODE:5C8E $GET_FCB_POSITION:                      ; ...
DOSCODE:5C8E                 call    GetExtended     ; point to FCB
DOSCODE:5C91                 call    GetExtent       ; DX:AX is current record
DOSCODE:5C94                 mov     [si+21h], ax    ; [SI+SYS_FCB.RR] ; drop in low order piece
DOSCODE:5C97                 mov     [si+23h], dl    ; [SI+SYS_FCB.RR+2] ; drop in high order piece
DOSCODE:5C9A                 cmp     word ptr [si+0Eh], 64 ; [SI+SYS_FCB.RECSIZ]
DOSCODE:5C9E                 jnb     short GetFCBBye
DOSCODE:5CA0                 mov     [si+24h], dh    ; [SI+SYS_FCB.RR+2+1]
DOSCODE:5CA0                                         ; Set 4th byte only if record size < 64
DOSCODE:5CA3
DOSCODE:5CA3 GetFCBBye:                              ; ...
DOSCODE:5CA3                 jmp     NO_OP           ; jmp FCB_RET_OK
DOSCODE:5CA6 ; ---------------------------------------------------------------------------
DOSCODE:5CA6
DOSCODE:5CA6 $FCB_DELETE:                            ; ...
DOSCODE:5CA6                 mov     di, offset OPENBUF
DOSCODE:5CA9                 call    TransFCB        ; convert FCB to path
DOSCODE:5CAC                 jb      short BadPath   ; signal no deletions
DOSCODE:5CAE                 push    ss
DOSCODE:5CAF                 pop     ds
DOSCODE:5CB0                 assume ds:DOSCODE
DOSCODE:5CB0                 call    DOS_DELETE
DOSCODE:5CB3                 jnb     short GetFCBBye ; do a good return
DOSCODE:5CB5
DOSCODE:5CB5 BadPath:                                ; ...
DOSCODE:5CB5                 jmp     FCB_RET_ERR     ; let someone else signal the error
DOSCODE:5CB8 ; ---------------------------------------------------------------------------
DOSCODE:5CB8
DOSCODE:5CB8 $GET_FCB_FILE_LENGTH:                   ; ...
DOSCODE:5CB8                 call    GetExtended     ; get real FCB pointer
DOSCODE:5CB8                                         ; DX points to Input FCB
DOSCODE:5CBB                 mov     di, offset OPENBUF ; appropriate buffer in DOSDATA
DOSCODE:5CBE                 push    ds              ; save pointer to true FCB
DOSCODE:5CBF                 push    si
DOSCODE:5CC0                 call    TransFCB        ; Trans name DS:DX, sets SATTRIB
DOSCODE:5CC3                 pop     si
DOSCODE:5CC4                 pop     ds
DOSCODE:5CC5                 assume ds:nothing
DOSCODE:5CC5                 jb      short BadPath
DOSCODE:5CC7                 push    ds              ; save pointer
DOSCODE:5CC8                 push    si
DOSCODE:5CC9                 push    ss
DOSCODE:5CCA                 pop     ds
DOSCODE:5CCB                 assume ds:DOSCODE
DOSCODE:5CCB                 call    GET_FILE_INFO   ; grab the info
DOSCODE:5CCE                 pop     si              ; get pointer back
DOSCODE:5CCF                 pop     ds
DOSCODE:5CD0                 assume ds:nothing
DOSCODE:5CD0                 jb      short BadPath   ; invalid something
DOSCODE:5CD2                 mov     dx, bx          ; get high order size
DOSCODE:5CD4                 mov     ax, di          ; get low order size
DOSCODE:5CD6                 mov     bx, [si+0Eh]    ; [SI+SYS_FCB.RECSIZ]
DOSCODE:5CD6                                         ; get his record size
DOSCODE:5CD9                 or      bx, bx          ; empty record => 0 size for file
DOSCODE:5CDB                 jnz     short GetSize   ; not empty
DOSCODE:5CDD                 mov     bl, 128
DOSCODE:5CDF
DOSCODE:5CDF GetSize:                                ; ...
DOSCODE:5CDF                 xchg    ax, dx          ; move high order for divide
DOSCODE:5CE0                 xor     dx, dx          ; clear out high
DOSCODE:5CE2                 div     bx
DOSCODE:5CE4                 push    ax              ; save dividend
DOSCODE:5CE5                 mov     ax, di          ; get low order piece
DOSCODE:5CE7                 div     bx
DOSCODE:5CE9                 mov     cx, dx          ; save remainder
DOSCODE:5CEB                 pop     dx              ; get high order dividend
DOSCODE:5CEC                 jcxz    short LengthStore
DOSCODE:5CEE                 add     ax, 1
DOSCODE:5CF1                 adc     dx, 0           ; 32-bit increment
DOSCODE:5CF4
DOSCODE:5CF4 LengthStore:                            ; ...
DOSCODE:5CF4                 mov     [si+21h], ax    ; [SI+SYS_FCB.RR] ; store low order
DOSCODE:5CF7                 mov     [si+23h], dl    ; [SI+SYS_FCB.RR+2] ; store high order
DOSCODE:5CFA                 or      dh, dh
DOSCODE:5CFC                 jz      short GetFCBBye ; not storing insignificant zero
DOSCODE:5CFE                 mov     [si+24h], dh    ; [SI+SYS_FCB.RR+3] ; save that high piece
DOSCODE:5D01
DOSCODE:5D01 GoodRet:                                ; ...
DOSCODE:5D01                 jmp     short GetFCBBye
DOSCODE:5D03 ; ---------------------------------------------------------------------------
DOSCODE:5D03
DOSCODE:5D03 $FCB_CLOSE:                             ; ...
DOSCODE:5D03                 xor     al, al          ; default search attributes
DOSCODE:5D05                 call    GetExtended     ; DS:SI point to real FCB
DOSCODE:5D08                 jz      short NoAttr    ; not extended
DOSCODE:5D0A                 mov     al, [si-1]      ; get attributes
DOSCODE:5D0D
DOSCODE:5D0D NoAttr:                                 ; ...
DOSCODE:5D0D                 mov     ss:ATTRIB, al   ; stash away found attributes
DOSCODE:5D11                 call    SFTFromFCB
DOSCODE:5D14                 jb      short GoodRet
DOSCODE:5D16                 mov     al, es:[di+4]   ; [ES:DI+SF_ENTRY.sf_attr]
DOSCODE:5D1A                 xor     ah, ah
DOSCODE:5D1C                 push    ax
DOSCODE:5D1D                 call    CheckShare
DOSCODE:5D20                 jnz     short NoStash
DOSCODE:5D22                 mov     al, ss:ATTRIB
DOSCODE:5D26                 mov     es:[di+4], al   ; [ES:DI+SF_ENTRY.sf_attr]
DOSCODE:5D26                                         ; attempted attribute for close
DOSCODE:5D2A
DOSCODE:5D2A NoStash:                                ; ...
DOSCODE:5D2A                 push    ds
DOSCODE:5D2B                 lds     ax, [si+14h]    ; [SI+SYS_FCB.FDATE]
DOSCODE:5D2B                                         ; move in the time and date
DOSCODE:5D2E                 mov     es:[di+0Fh], ax ; [ES:DI+SF_ENTRY.sf_date]
DOSCODE:5D32                 mov     word ptr es:[di+0Dh], ds ; [ES:DI+SF_ENTRY.sf_time]
DOSCODE:5D36                 pop     ds
DOSCODE:5D37                 lds     ax, [si+10h]    ; [SI+SYS_FCB.FILSIZ]
DOSCODE:5D3A                 mov     es:[di+11h], ax ; [ES:DI+SF_ENTRY.sf_size]
DOSCODE:5D3E                 mov     word ptr es:[di+13h], ds ; [ES:DI+SF_ENTRY.sf_size+2]
DOSCODE:5D42                 or      word ptr es:[di+5], 4000h ; [ES:DI+SF_ENTRY.sf_flags],
DOSCODE:5D42                                         ; sf_close_nodate
DOSCODE:5D48                 push    ss
DOSCODE:5D49                 pop     ds
DOSCODE:5D4A                 assume ds:DOSCODE
DOSCODE:5D4A                 call    DOS_CLOSE
DOSCODE:5D4D                 les     di, THISSFT
DOSCODE:5D51                 pop     cx
DOSCODE:5D52                 mov     es:[di+4], cl   ; [ES:DI+SF_ENTRY.sf_attr]
DOSCODE:5D52                                         ; restore SFT attribute
DOSCODE:5D56                 pushf
DOSCODE:5D57                 cmp     word ptr es:[di], 0 ; [ES:DI+SF_ENTRY.sf_ref_count],0
DOSCODE:5D57                                         ; zero ref count gets blasted
DOSCODE:5D5B                 jnz     short CloseOK
DOSCODE:5D5D                 push    ax
DOSCODE:5D5E                 mov     al, 4Dh ; 'M'
DOSCODE:5D60                 call    BlastSFT
DOSCODE:5D63                 pop     ax
DOSCODE:5D64
DOSCODE:5D64 CloseOK:                                ; ...
DOSCODE:5D64                 popf
DOSCODE:5D65
DOSCODE:5D65 CloseOK2:                               ; ...
DOSCODE:5D65                 jnb     short GoodRet
DOSCODE:5D67                 cmp     al, 6           ; error_invalid_handle
DOSCODE:5D69                 jz      short GoodRet
DOSCODE:5D6B                 mov     al, 2           ; error_file_not_found
DOSCODE:5D6D
DOSCODE:5D6D fcb_close_err:                          ; ...
DOSCODE:5D6D                 jmp     FCB_RET_ERR     ; fren90
DOSCODE:5D70 ; ---------------------------------------------------------------------------
DOSCODE:5D70
DOSCODE:5D70 $FCB_RENAME:                            ; ...
DOSCODE:5D70                 call    GetExtended     ; get pointer to real FCB
DOSCODE:5D73                 push    dx
DOSCODE:5D74                 mov     al, [si]        ; get drive byte
DOSCODE:5D76                 add     si, 10h         ; point to destination
DOSCODE:5D79                 mov     di, offset RENBUF
DOSCODE:5D7C                 push    word ptr [si]
DOSCODE:5D7E                 push    ds
DOSCODE:5D7F                 push    si              ; save source pointer for TransFCB
DOSCODE:5D80                 mov     [si], al        ; drop in real drive
DOSCODE:5D82                 mov     dx, si          ; let TransFCB know where the FCB is
DOSCODE:5D84                 call    TransFCB        ; munch this pathname
DOSCODE:5D87                 pop     si
DOSCODE:5D88                 pop     ds
DOSCODE:5D89                 assume ds:nothing
DOSCODE:5D89                 pop     word ptr [si]   ; get path back
DOSCODE:5D8B                 pop     dx
DOSCODE:5D8C                 jb      short fcb_close_err
DOSCODE:5D8E                 mov     si, ss:WFP_START
DOSCODE:5D93                 mov     ss:REN_WFP, si
DOSCODE:5D98                 mov     di, offset OPENBUF
DOSCODE:5D9B                 call    TransFCB
DOSCODE:5D9E                 jb      short fcb_close_err
DOSCODE:5DA0                 mov     ss:PATHNAMELEN, 67 ; set pathname length to 67
DOSCODE:5DA0                                         ; DIRSTRLEN = 67
DOSCODE:5DA7                 call    DOS_RENAME
DOSCODE:5DAA                 jb      short fcb_close_err ; fren90
DOSCODE:5DAC                 jmp     short CloseOK2
DOSCODE:5DAE
DOSCODE:5DAE ; =============== S U B R O U T I N E =======================================
DOSCODE:5DAE
DOSCODE:5DAE
DOSCODE:5DAE SaveFCBInfo     proc near               ; ...
DOSCODE:5DAE                 les     di, ss:THISSFT
DOSCODE:5DB3                 call    IsSFTNet
DOSCODE:5DB6                 jz      short SaveLocal
DOSCODE:5DB8                 mov     ax, es:[di+0Bh] ; [ES:DI+sf_serial_ID]
DOSCODE:5DBC                 mov     [si+1Ch], ax    ; [SI+fcb_netID]
DOSCODE:5DBF                 mov     bl, 80h         ; FCBNETWORK
DOSCODE:5DC1                 jmp     short SaveSFN
DOSCODE:5DC3 ; ---------------------------------------------------------------------------
DOSCODE:5DC3
DOSCODE:5DC3 SaveLocal:                              ; ...
DOSCODE:5DC3                 call    CheckShare
DOSCODE:5DC6                 jnz     short SaveShare ; sharer present
DOSCODE:5DC8
DOSCODE:5DC8 SaveNoShare:                            ; no sharer
DOSCODE:5DC8                 test    byte ptr es:[di+5], 80h ;
DOSCODE:5DC8                                         ; [ES:DI+SF_ENTRY.sf_flags],devid_device
DOSCODE:5DCD                 jnz     short SaveNoShareDev ; Device
DOSCODE:5DCF                 mov     ax, es:[di+1Bh] ; [ES:DI+SF_ENTRY.sf_dirsec]
DOSCODE:5DD3                 mov     [si+1Dh], ax    ; [SI+fcb_nsl_dirsec]
DOSCODE:5DD6                 mov     ax, es:[di+1Dh] ; [es:di+SF_ENTRY.sf_dirsec+2]
DOSCODE:5DDA                 mov     bl, es:[di+4]   ; [es:di+SF_ENTRY.sf_attr]
DOSCODE:5DDE                 mov     bh, bl
DOSCODE:5DE0                 ror     bl, 1
DOSCODE:5DE2                 add     bh, bh
DOSCODE:5DE4                 or      bl, bh
DOSCODE:5DE6                 and     bl, 0C0h
DOSCODE:5DE9                 or      al, bl
DOSCODE:5DEB                 mov     [si+18h], al    ; [si+fcb_sfn] ; sector number = 22 bits
DOSCODE:5DEE                 mov     al, es:[di+1Fh] ; [ES:DI+SF_ENTRY.sf_dirpos]
DOSCODE:5DEE                                         ; location in sector
DOSCODE:5DF2                 mov     [si+1Fh], al    ; [SI+fcb_nsl_dirpos]
DOSCODE:5DF5                 mov     ax, es:[di+2Bh] ; [es:di+SF_ENTRY.sf_chain] ; .sf_chain ! (MSDOS 6.22)
DOSCODE:5DF5                                         ; first cluster (32 bit) !?
DOSCODE:5DF9                 mov     [si+1Bh], ax    ; [SI+fcb_nsl_firclus]
DOSCODE:5DFC                 mov     bl, 0
DOSCODE:5DFE
DOSCODE:5DFE SetFCBBits:                             ; ...
DOSCODE:5DFE                 mov     ax, es:[di+5]   ; [ES:DI+SF_ENTRY.sf_flags]
DOSCODE:5E02                 and     al, 0C0h        ; mask off drive bits
DOSCODE:5E04                 or      al, es:[di+2]   ; [ES:DI+SF_ENTRY.sf_mode]
DOSCODE:5E04                                         ; stick in open mode
DOSCODE:5E08                 mov     [si+1Ah], al    ; [SI+fcb_nsl_bits] ; save dirty info
DOSCODE:5E0B                 or      bl, bl
DOSCODE:5E0D                 jz      short SaveNoSFN ; do not save SFN if local file
DOSCODE:5E0F                 jmp     short SaveSFN   ; go and save SFN
DOSCODE:5E11 ; ---------------------------------------------------------------------------
DOSCODE:5E11
DOSCODE:5E11 SaveNoShareDev:                         ; ...
DOSCODE:5E11                 push    es
DOSCODE:5E12                 les     ax, es:[di+7]   ; [es:di+SF_ENTRY.sf_devptr]
DOSCODE:5E16                 mov     [si+1Ah], ax    ; [SI+fcb_nsld_drvptr]
DOSCODE:5E19                 mov     word ptr [si+1Ch], es ; [si+fcb_nsld_drvptr+2]
DOSCODE:5E1C                 pop     es              ; FCBDEVICE
DOSCODE:5E1D                 mov     bl, 40h
DOSCODE:5E1F                 jmp     short SetFCBBits ; go and save SFN
DOSCODE:5E21 ; ---------------------------------------------------------------------------
DOSCODE:5E21
DOSCODE:5E21 SaveShare:                              ; ...
DOSCODE:5E21                 call    ss:ShSave       ; call far [ss:JShare+(10*4)] ; 10 = ShSave
DOSCODE:5E26
DOSCODE:5E26 SaveSFN:                                ; ...
DOSCODE:5E26                 lea     ax, [di-6]      ; [DI-SFT.SFTable]
DOSCODE:5E29                 sub     ax, word ptr ss:SFTFCB ; Adjust for offset to table.
DOSCODE:5E2E                 push    bx
DOSCODE:5E2F                 mov     bl, 59          ; SF_ENTRY.size
DOSCODE:5E31                 div     bl
DOSCODE:5E33                 mov     [si+18h], al    ; [SI+fcb_sfn] ; last used SFN
DOSCODE:5E36                 pop     bx              ; bx = FCB type (net/Share or local)
DOSCODE:5E37
DOSCODE:5E37 SaveNoSFN:                              ; ...
DOSCODE:5E37                 mov     ax, es:[di+5]   ; [ES:DI+SF_ENTRY.sf_flags] ; get real drive
DOSCODE:5E3B                 and     al, 3Fh
DOSCODE:5E3D                 or      al, bl
DOSCODE:5E3F                 mov     [si+19h], al    ; [SI+fcb_l_drive]
DOSCODE:5E42                 mov     ax, ss:FCBLRU   ; get lru count
DOSCODE:5E46                 inc     ax
DOSCODE:5E47                 mov     es:[di+15h], ax ; [ES:DI+sf_LRU]
DOSCODE:5E4B                 jnz     short SimpleStuff ;
DOSCODE:5E4B                                         ; lru flag overflowed
DOSCODE:5E4D                 mov     bx, 15h         ; SF_ENTRY.sf_position
DOSCODE:5E50                 call    ResetLRU
DOSCODE:5E53
DOSCODE:5E53 SimpleStuff:                            ; ...
DOSCODE:5E53                 mov     ss:FCBLRU, ax   ; Set new LRU to AX
DOSCODE:5E57                 retn
DOSCODE:5E57 SaveFCBInfo     endp
DOSCODE:5E57
DOSCODE:5E58
DOSCODE:5E58 ; =============== S U B R O U T I N E =======================================
DOSCODE:5E58
DOSCODE:5E58
DOSCODE:5E58 ResetLRU        proc near               ; ...
DOSCODE:5E58                 mov     ax, 8000h
DOSCODE:5E5B                 push    es
DOSCODE:5E5C                 push    di
DOSCODE:5E5D                 les     di, ss:SFTFCB   ; get pointer to head
DOSCODE:5E62                 mov     cx, es:[di+4]   ; [ES:DI+SFT.SFCount]
DOSCODE:5E66                 lea     di, [di+6]      ; [DI+SFT.SFTable] ; point at table
DOSCODE:5E69
DOSCODE:5E69 ovScan:                                 ; ...
DOSCODE:5E69                 sub     es:[bx+di], ax  ; decrement lru count
DOSCODE:5E6C                 ja      short ovLoop
DOSCODE:5E6E                 mov     es:[bx+di], ax  ; truncate at 0
DOSCODE:5E71
DOSCODE:5E71 ovLoop:                                 ; ...
DOSCODE:5E71                 add     di, 59          ; SF_ENTRY.size
DOSCODE:5E74                 loop    ovScan          ; advance to next
DOSCODE:5E76                 pop     di
DOSCODE:5E77                 pop     es
DOSCODE:5E78                 mov     es:[bx+di], ax
DOSCODE:5E7B                 retn
DOSCODE:5E7B ResetLRU        endp
DOSCODE:5E7B
DOSCODE:5E7C
DOSCODE:5E7C ; =============== S U B R O U T I N E =======================================
DOSCODE:5E7C
DOSCODE:5E7C
DOSCODE:5E7C LRUFCB          proc near               ; ...
DOSCODE:5E7C                 push    es
DOSCODE:5E7D                 call    save_world
DOSCODE:5E80                 mov     ds, cs:DosDSeg
DOSCODE:5E85                 or      al, al          ; Check if regenerate allocation
DOSCODE:5E87                 jnz     short lru1      ; Try to find SFT to use
DOSCODE:5E89                 les     di, ds:LocalSFT
DOSCODE:5E8D                 mov     cx, es
DOSCODE:5E8F                 or      cx, di          ; is address == 0?
DOSCODE:5E91                 jz      short lru1      ; invalid local SFT, find one
DOSCODE:5E93
DOSCODE:5E93 gotlocalSFT:                            ; ...
DOSCODE:5E93                 mov     word ptr ds:THISSFT, di
DOSCODE:5E97                 mov     word ptr ds:THISSFT+2, es
DOSCODE:5E9B                 clc
DOSCODE:5E9C                 jmp     LRUDone         ; clear up SFT and return
DOSCODE:5E9F ; ---------------------------------------------------------------------------
DOSCODE:5E9F
DOSCODE:5E9F lru1:                                   ; ...
DOSCODE:5E9F                 les     di, ds:SFTFCB   ; es:di = SF Table for FCBs
DOSCODE:5EA3                 mov     cx, es:[di+4]   ; cx = number of SFTs
DOSCODE:5EA7                 lea     di, [di+6]      ; [di+SFT.SFTable] ; es:di = first SFT
DOSCODE:5EAA                 mov     bx, 0FFFFh      ; (max. LRU value)
DOSCODE:5EAD                 mov     si, bx
DOSCODE:5EAF                 mov     dx, bx
DOSCODE:5EB1                 mov     bp, bx
DOSCODE:5EB3
DOSCODE:5EB3 findSFT:                                ; ...
DOSCODE:5EB3                 or      word ptr es:[di], 0 ; [es:di+SF_ENTRY.sf_ref_count]
DOSCODE:5EB3                                         ; reference count = 0 ?
DOSCODE:5EB7                 jz      short gotSFT    ; yes, SFT is free
DOSCODE:5EB9                 cmp     word ptr es:[di], 0FFFFh ; [es:di+SF_ENTRY.sf_ref_count],
DOSCODE:5EB9                                         ; sf_busy
DOSCODE:5EBD                 jz      short gotSFT    ; not busy, can use it
DOSCODE:5EBF                 test    word ptr es:[di+5], 8000h ; [ES:DI+SF_ENTRY.sf_flags],
DOSCODE:5EBF                                         ; sf_isnet
DOSCODE:5EC5                 jnz     short lru5      ; network SFT, get net/Share LRU
DOSCODE:5EC7                 call    CheckShare
DOSCODE:5ECA                 jnz     short lru5
DOSCODE:5ECC
DOSCODE:5ECC hackpoint:                              ; ...
DOSCODE:5ECC                 mov     word ptr ds:LocalSFT, di
DOSCODE:5ED0                 mov     word ptr ds:LocalSFT+2, es ; store local SFT address
DOSCODE:5ED4                 or      al, al          ; Is operation = REGEN?
DOSCODE:5ED6                 jz      short gotlocalSFT ; yes, return this SFT for reuse
DOSCODE:5ED8                 cmp     es:[di+15h], bx ; [es:di+sf_LRU],bx ; SFT.LRU < min?
DOSCODE:5EDC                 jnb     short lru4      ; no, skip
DOSCODE:5EDE                 mov     bx, es:[di+15h] ; [es:di+sf_LRU] ; yes, store new min
DOSCODE:5EE2                 mov     si, di          ; store SFT position
DOSCODE:5EE4
DOSCODE:5EE4 lru4:                                   ; ...
DOSCODE:5EE4                 add     di, 59          ; SF_ENTRY.size ; go to next SFT
DOSCODE:5EE7                 loop    findSFT
DOSCODE:5EE9                 dec     cx
DOSCODE:5EEA                 mov     di, si
DOSCODE:5EEC                 cmp     si, cx          ; local SFT available?
DOSCODE:5EEE                 jnz     short gotSFT    ; yes, return it
DOSCODE:5EF0                 mov     di, bp
DOSCODE:5EF2                 cmp     bp, cx          ; net/Share SFT available?
DOSCODE:5EF4                 jnz     short gotnetSFT ; yes, return it
DOSCODE:5EF6                 jmp     short errorbadSFT ; error, no FCB available.
DOSCODE:5EF8 ; ---------------------------------------------------------------------------
DOSCODE:5EF8
DOSCODE:5EF8 lru5:                                   ; ...
DOSCODE:5EF8                 cmp     es:[di+15h], dx ; [es:di+sf_LRU],dx ; SFT.LRU < min?
DOSCODE:5EFC                 jnb     short lru4      ; no, skip
DOSCODE:5EFE                 mov     dx, es:[di+15h] ; [es:di+sf_LRU]
DOSCODE:5EFE                                         ; yes, store new minimum
DOSCODE:5F02                 mov     bp, di
DOSCODE:5F04                 jmp     short lru4
DOSCODE:5F06 ; ---------------------------------------------------------------------------
DOSCODE:5F06
DOSCODE:5F06 gotSFT:                                 ; ...
DOSCODE:5F06                 or      al, al
DOSCODE:5F08                 jz      short hackpoint ; save es:di in LocalSFT
DOSCODE:5F0A                 mov     ax, es
DOSCODE:5F0C                 cmp     word ptr ds:LocalSFT, di ; Offset same?
DOSCODE:5F10                 jnz     short notinvalid
DOSCODE:5F12                 cmp     word ptr ds:LocalSFT+2, ax ; Segments same?
DOSCODE:5F16                 jnz     short notinvalid ; no, no need to invalidate
DOSCODE:5F18                 xor     ax, ax
DOSCODE:5F1A                 mov     word ptr ds:LocalSFT, ax
DOSCODE:5F1D                 mov     word ptr ds:LocalSFT+2, ax
DOSCODE:5F20
DOSCODE:5F20 notinvalid:                             ; ...
DOSCODE:5F20                 jmp     gotlocalSFT
DOSCODE:5F23 ; ---------------------------------------------------------------------------
DOSCODE:5F23
DOSCODE:5F23 gotnetSFT:                              ; ...
DOSCODE:5F23                 or      al, al
DOSCODE:5F25                 jnz     short closenet
DOSCODE:5F27                 mov     word ptr ds:LocalSFT, di ; store local SFT address
DOSCODE:5F2B                 mov     word ptr ds:LocalSFT+2, es
DOSCODE:5F2F
DOSCODE:5F2F closenet:                               ; ...
DOSCODE:5F2F                 mov     word ptr ds:THISSFT, di ; set thissft
DOSCODE:5F33                 mov     word ptr ds:THISSFT+2, es
DOSCODE:5F37
DOSCODE:5F37 LRUClose:                               ; ...
DOSCODE:5F37                 cmp     word ptr es:[di], 0 ; [es:di+SF_ENTRY.sf_ref_count]
DOSCODE:5F37                                         ; is ref count still <> 0?
DOSCODE:5F3B                 jz      short LRUDone   ; nope, all done
DOSCODE:5F3D                 call    DOS_CLOSE
DOSCODE:5F40                 jnb     short LRUClose  ; no error => clean up
DOSCODE:5F42                 cmp     al, 6           ; error_invalid_handle
DOSCODE:5F44                 jz      short LRUClose
DOSCODE:5F46
DOSCODE:5F46 errorbadSFT:                            ; ...
DOSCODE:5F46                 stc
DOSCODE:5F47                 jmp     short LRUDead
DOSCODE:5F49 ; ---------------------------------------------------------------------------
DOSCODE:5F49
DOSCODE:5F49 LRUDone:                                ; ...
DOSCODE:5F49                 xor     al, al
DOSCODE:5F4B                 call    BlastSFT        ; fill SFT with 0 (AL), 'C' cleared
DOSCODE:5F4E
DOSCODE:5F4E LRUDead:                                ; ...
DOSCODE:5F4E                 call    restore_world
DOSCODE:5F51                 pop     es
DOSCODE:5F52                 mov     es, cs:DosDSeg
DOSCODE:5F57                 les     di, es:THISSFT  ; es:di points at allocated SFT
DOSCODE:5F5C                 jb      short LruFCB_err
DOSCODE:5F5E                 retn
DOSCODE:5F5F ; ---------------------------------------------------------------------------
DOSCODE:5F5F
DOSCODE:5F5F LruFCB_err:                             ; ...
DOSCODE:5F5F                 mov     al, 23h         ; error_FCB_unavailable
DOSCODE:5F61                 retn
DOSCODE:5F61 LRUFCB          endp
DOSCODE:5F61
DOSCODE:5F62
DOSCODE:5F62 ; =============== S U B R O U T I N E =======================================
DOSCODE:5F62
DOSCODE:5F62
DOSCODE:5F62 RegenCopyName   proc near               ; ...
DOSCODE:5F62                 lodsb                   ; load character
DOSCODE:5F63                 call    UCase           ; convert char to upper case
DOSCODE:5F66                 stosb                   ; store converted character
DOSCODE:5F67                 loop    RegenCopyName
DOSCODE:5F69                 retn
DOSCODE:5F69 RegenCopyName   endp
DOSCODE:5F69
DOSCODE:5F6A
DOSCODE:5F6A ; =============== S U B R O U T I N E =======================================
DOSCODE:5F6A
DOSCODE:5F6A
DOSCODE:5F6A FCBRegen        proc near               ; ...
DOSCODE:5F6A
DOSCODE:5F6A ; FUNCTION CHUNK AT DOSCODE:5FFB SIZE 0000006A BYTES
DOSCODE:5F6A
DOSCODE:5F6A                 mov     al, [si+19h]    ; [SI+fcb_l_drive]
DOSCODE:5F6D                 test    al, 80h         ; FCBSPECIAL
DOSCODE:5F6F                 jz      short RegenNoSharing
DOSCODE:5F71                 call    CheckShare      ; test for sharer
DOSCODE:5F74                 jnz     short RegenFail ; yep, fail this.
DOSCODE:5F76                 mov     ax, 1100h
DOSCODE:5F79                 int     2Fh             ; Multiplex - NETWORK REDIRECTOR - INSTALLATION CHECK
DOSCODE:5F79                                         ; Return: AL = 00h  not installed, OK to install
DOSCODE:5F79                                         ; 01h  not installed, not OK to install
DOSCODE:5F79                                         ; FFh  installed
DOSCODE:5F7B                 or      al, al          ; is it there?
DOSCODE:5F7D                 jz      short RegenDead ; no, just fail the operation
DOSCODE:5F7F
DOSCODE:5F7F RegenFail:                              ; ...
DOSCODE:5F7F                 mov     ax, ss:USER_IN_AX
DOSCODE:5F83                 cmp     ah, 10h         ; FCB_CLOSE
DOSCODE:5F86                 jz      short RegenDead
DOSCODE:5F88                 call    FCBHardErr      ; massive hard error
DOSCODE:5F8B
DOSCODE:5F8B RegenDead:                              ; ...
DOSCODE:5F8B                 stc                     ; carry set
DOSCODE:5F8C
DOSCODE:5F8C FCBRegen_retn:                          ; ...
DOSCODE:5F8C                 retn
DOSCODE:5F8D ; ---------------------------------------------------------------------------
DOSCODE:5F8D
DOSCODE:5F8D RegenNoSharing:                         ; ...
DOSCODE:5F8D                 call    CheckShare
DOSCODE:5F90                 jnz     short RegenFail
DOSCODE:5F92                 push    ax
DOSCODE:5F93                 mov     al, 0           ; indicate it is a regen operation
DOSCODE:5F95                 call    LRUFCB
DOSCODE:5F98                 pop     ax
DOSCODE:5F99                 jb      short FCBRegen_retn
DOSCODE:5F9B                 mov     word ptr es:[di+2], 8002h ; [ES:DI+SF_ENTRY.sf_mode],
DOSCODE:5F9B                                         ; sf_isFCB+open_for_both+SHARING_COMPAT
DOSCODE:5FA1                 and     al, 3Fh         ; get drive number for flags
DOSCODE:5FA3                 cbw
DOSCODE:5FA4                 or      ax, 4000h       ; sf_close_nodate ; normal FCB operation
DOSCODE:5FA7                 mov     cl, [si+1Ah]    ; [SI+fcb_nsl_bits] ; stick in dirty bits.
DOSCODE:5FAA                 mov     ch, cl
DOSCODE:5FAC                 and     ch, 0C0h        ; mask off the dirty/device bits
DOSCODE:5FAF                 or      al, ch
DOSCODE:5FB1                 and     cl, 0Fh         ; access_mask  ; get the mode bits
DOSCODE:5FB4                 mov     es:[di+2], cl   ; [ES:DI+SF_ENTRY.sf_mode]
DOSCODE:5FB8                 mov     es:[di+5], ax   ; [ES:DI+SF_ENTRY.sf_flags],AX ; initial flags
DOSCODE:5FBC                 mov     ax, ss:PROC_ID
DOSCODE:5FC0                 mov     es:[di+31h], ax ; [ES:DI+SF_ENTRY.sf_PID]
DOSCODE:5FC4                 push    ds
DOSCODE:5FC5                 push    si
DOSCODE:5FC6                 push    es
DOSCODE:5FC7                 push    di
DOSCODE:5FC8                 push    ss
DOSCODE:5FC9                 pop     es
DOSCODE:5FCA                 assume es:DOSCODE
DOSCODE:5FCA                 mov     di, offset NAME1
DOSCODE:5FCD                 mov     cx, 8
DOSCODE:5FD0                 inc     si              ; Skip past drive byte to name in FCB
DOSCODE:5FD1                 call    RegenCopyName   ; copy the name to NAME1
DOSCODE:5FD4                 push    ss
DOSCODE:5FD5                 pop     ds
DOSCODE:5FD6                 assume ds:DOSCODE
DOSCODE:5FD6                 mov     ATTRIB, 16h     ; attr_hidden+attr_system+attr_directory
DOSCODE:5FDB                 call    DEVNAME
DOSCODE:5FDE                 pop     di
DOSCODE:5FDF                 pop     es
DOSCODE:5FE0                 assume es:nothing
DOSCODE:5FE0                 pop     si
DOSCODE:5FE1                 pop     ds
DOSCODE:5FE2                 assume ds:nothing
DOSCODE:5FE2                 jb      short RegenFileNoSharing ; not found on device list => file
DOSCODE:5FE4                 mov     es:[di+5], bh   ; [ES:DI+SF_ENTRY.sf_flags] ; device parms
DOSCODE:5FE8                 mov     byte ptr es:[di+4], 0 ; [ES:DI+SF_ENTRY.sf_attr] ; attribute
DOSCODE:5FED                 lds     si, ss:DEVPT    ; get device driver
DOSCODE:5FED FCBRegen        endp
DOSCODE:5FED
DOSCODE:5FF2
DOSCODE:5FF2 ; =============== S U B R O U T I N E =======================================
DOSCODE:5FF2
DOSCODE:5FF2
DOSCODE:5FF2 regen_save_dpb  proc near               ; ...
DOSCODE:5FF2                 mov     es:[di+7], si   ; [ES:DI+SF_ENTRY.sf_devptr]
DOSCODE:5FF6                 mov     word ptr es:[di+9], ds ; [ES:DI+SF_ENTRY.sf_devptr+2]
DOSCODE:5FFA                 retn
DOSCODE:5FFA regen_save_dpb  endp
DOSCODE:5FFA
DOSCODE:5FFB ; ---------------------------------------------------------------------------
DOSCODE:5FFB ; START OF FUNCTION CHUNK FOR FCBRegen
DOSCODE:5FFB
DOSCODE:5FFB RegenDeadJ:                             ; ...
DOSCODE:5FFB                 jmp     short RegenDead
DOSCODE:5FFD ; ---------------------------------------------------------------------------
DOSCODE:5FFD
DOSCODE:5FFD RegenFileNoSharing:                     ; ...
DOSCODE:5FFD                 mov     ax, es:[di+5]   ; [ES:DI+SF_ENTRY.sf_flags]
DOSCODE:6001                 and     ax, 3Fh
DOSCODE:6004                 push    ds
DOSCODE:6005                 push    si
DOSCODE:6006                 call    FIND_DPB
DOSCODE:6009                 call    regen_save_dpb
DOSCODE:600C                 pop     si
DOSCODE:600D                 pop     ds
DOSCODE:600E                 jb      short RegenDeadJ
DOSCODE:6010                 mov     ax, [si+1Dh]    ; [SI+fcb_nsl_dirsec]
DOSCODE:6013                 mov     es:[di+1Bh], ax ; [ES:DI+SF_ENTRY.sf_dirsec]
DOSCODE:6017                 mov     al, [si+18h]    ; [si+fcb_sfn]
DOSCODE:601A                 and     al, 0C0h        ; get the 2 attribute bits
DOSCODE:601C                 mov     ah, al
DOSCODE:601E                 rol     ah, 1
DOSCODE:6020                 shr     al, 1
DOSCODE:6022                 or      al, ah
DOSCODE:6024                 and     al, 3Fh         ; mask off unused bits
DOSCODE:6026                 mov     es:[di+4], al   ; [es:di+SF_ENTRY.sf_attr]
DOSCODE:602A                 mov     al, [si+18h]    ; [si+fcb_sfn]
DOSCODE:602D                 and     al, 3Fh         ; mask off top 2 bits -- attr bits
DOSCODE:602F                 sub     ah, ah
DOSCODE:6031                 mov     es:[di+1Dh], ax ; [es:di+SF_ENTRY.sf_dirsec+2]
DOSCODE:6031                                         ; update high word
DOSCODE:6035                 mov     ax, [si+1Bh]    ; [SI+fcb_nsl_firclus]
DOSCODE:6038                 mov     es:[di+2Bh], ax ; [es:di+SF_ENTRY.sf_chain] ; .sf_chain ! (MSDOS 6.22)
DOSCODE:6038                                         ; first cluster (32 bit) !?
DOSCODE:603C                 mov     es:[di+35h], ax ; [ES:DI+SF_ENTRY.sf_lstclus]
DOSCODE:6040                 xor     ax, ax          ; 0
DOSCODE:6042                 mov     es:[di+2Dh], ax ; [es:di+SF_ENTRY.sf_chain+2] ; .sf_chain ! (MSDOS 6.22)
DOSCODE:6042                                         ; high word of first cluster (32 bit) !?
DOSCODE:6046                 mov     es:[di+37h], ax ; [ES:DI+SF_ENTRY.sf_lstclus+2]
DOSCODE:604A                 mov     al, [si+1Fh]    ; [SI+fcb_nsl_dirpos]
DOSCODE:604D                 mov     es:[di+1Fh], al ; [ES:DI+SF_ENTRY.sf_dirpos]
DOSCODE:6051                 inc     word ptr es:[di] ; Increment reference count
DOSCODE:6054                 call    set_sftfcb_entry ; put SFT entry number in the SFTFCB table
DOSCODE:6054                                         ; as FCB index number
DOSCODE:6057                 lea     si, [si+1]      ; [SI+SYS_FCB.name]
DOSCODE:605A                 lea     di, [di+20h]    ; [DI+SF_ENTRY.sf_name]
DOSCODE:605D                 mov     cx, 11          ; SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
DOSCODE:6060                 call    RegenCopyName
DOSCODE:6063                 clc
DOSCODE:6064                 retn
DOSCODE:6064 ; END OF FUNCTION CHUNK FOR FCBRegen
DOSCODE:6065
DOSCODE:6065 ; =============== S U B R O U T I N E =======================================
DOSCODE:6065
DOSCODE:6065
DOSCODE:6065 BlastSFT        proc near               ; ...
DOSCODE:6065                 call    SFT_FREE
DOSCODE:6068                 push    di
DOSCODE:6069                 mov     cx, 59          ; SF_ENTRY.size
DOSCODE:606C                 rep stosb
DOSCODE:606E                 pop     di
DOSCODE:606F                 sub     ax, ax          ; 0
DOSCODE:6071                 mov     es:[di], ax     ; word [ES:DI+SF_ENTRY.sf_ref_count],0
DOSCODE:6074                 mov     es:[di+15h], ax ; %define sf_LRU SF_ENTRY.sf_position
DOSCODE:6074                                         ; word [es:di+sf_LRU],0
DOSCODE:6078                 dec     ax              ; -1
DOSCODE:6079                 mov     es:[di+17h], ax ; %define sf_OpenAge SF_ENTRY.sf_position+2
DOSCODE:6079                                         ; word [es:di+sf_OpenAge],-1
DOSCODE:607D                 retn
DOSCODE:607D BlastSFT        endp
DOSCODE:607D
DOSCODE:607E
DOSCODE:607E ; =============== S U B R O U T I N E =======================================
DOSCODE:607E
DOSCODE:607E
DOSCODE:607E CheckFCB        proc near               ; ...
DOSCODE:607E                 test    byte ptr [si+19h], 0C0h ; [si+fcb_l_drive],
DOSCODE:607E                                         ; FCBNETWORK|FCBSHARE|FCBDEVICE
DOSCODE:6082                 jz      short BadSFT
DOSCODE:6084                 les     di, ss:SFTFCB
DOSCODE:6089                 cmp     es:[di+4], al   ; [ES:DI+SFT.SFCount]
DOSCODE:608D                 jb      short BadSFT
DOSCODE:608F                 mov     bl, 59
DOSCODE:6091                 mul     bl
DOSCODE:6093                 lea     di, [di+6]      ; [DI+SFT.SFTable]
DOSCODE:6096                 add     di, ax
DOSCODE:6098                 mov     ax, ss:PROC_ID
DOSCODE:609C                 cmp     es:[di+31h], ax ; [ES:DI+SF_ENTRY.sf_PID]
DOSCODE:60A0                 jnz     short BadSFT    ; must match process
DOSCODE:60A2                 cmp     word ptr es:[di], 0 ; [ES:DI+SF_ENTRY.sf_ref_count]
DOSCODE:60A6                 jz      short BadSFT    ; must also be in use
DOSCODE:60A8                 mov     al, [si+19h]    ; [SI+fcb_l_drive]
DOSCODE:60AB                 test    al, 80h         ; FCBSPECIAL ; a special FCB?
DOSCODE:60AD                 jz      short CheckNoShare ; No. try local or device
DOSCODE:60AF                 push    ax
DOSCODE:60B0                 and     al, 0C0h        ; FCBMASK
DOSCODE:60B2                 cmp     al, 0C0h        ; FCBSHARE ; net FCB?
DOSCODE:60B4                 pop     ax
DOSCODE:60B5                 jnz     short CheckNet  ; no
DOSCODE:60B5                                         ; yes
DOSCODE:60B7                 call    ss:ShChk        ; Call far [ss:JShare+(11*4)] ; 11 = ShChk
DOSCODE:60BC                 jb      short BadSFT
DOSCODE:60BE
DOSCODE:60BE CheckD:                                 ; ...
DOSCODE:60BE                 and     al, 3Fh
DOSCODE:60C0                 mov     ah, es:[di+5]   ; [ES:DI+SF_ENTRY.sf_flags]
DOSCODE:60C4                 and     ah, 3Fh
DOSCODE:60C7                 cmp     ah, al
DOSCODE:60C9                 jnz     short BadSFT
DOSCODE:60CB
DOSCODE:60CB CheckD_retn:                            ; ...
DOSCODE:60CB                 retn
DOSCODE:60CC ; ---------------------------------------------------------------------------
DOSCODE:60CC
DOSCODE:60CC BadSFT:                                 ; ...
DOSCODE:60CC                 stc
DOSCODE:60CD                 retn
DOSCODE:60CE ; ---------------------------------------------------------------------------
DOSCODE:60CE
DOSCODE:60CE CheckNet:                               ; ...
DOSCODE:60CE                 mov     ax, [si+1Ch]    ; [SI+fcb_netID]
DOSCODE:60D1                 cmp     ax, es:[di+0Bh] ; %define sf_serial_ID SF_ENTRY.sf_firclus
DOSCODE:60D1                                         ; [ES:DI+sf_serial_ID]
DOSCODE:60D5                 jnz     short BadSFT
DOSCODE:60D7                 retn
DOSCODE:60D8 ; ---------------------------------------------------------------------------
DOSCODE:60D8
DOSCODE:60D8 CheckNoShare:                           ; ...
DOSCODE:60D8                 mov     bx, [si+1Ah]    ; [SI+fcb_nsld_drvptr]
DOSCODE:60DB                 cmp     bx, es:[di+7]   ; [ES:DI+SF_ENTRY.sf_devptr]
DOSCODE:60DF                 jnz     short BadSFT
DOSCODE:60E1                 mov     bx, [si+1Ch]    ; [SI+fcb_nsld_drvptr+2]
DOSCODE:60E4                 cmp     bx, es:[di+9]
DOSCODE:60E8                 jnz     short BadSFT    ; [ES:DI+SF_ENTRY.sf_devptr+2]
DOSCODE:60EA                 jmp     short CheckD
DOSCODE:60EA CheckFCB        endp
DOSCODE:60EA
DOSCODE:60EC
DOSCODE:60EC ; =============== S U B R O U T I N E =======================================
DOSCODE:60EC
DOSCODE:60EC
DOSCODE:60EC SFTFromFCB      proc near               ; ...
DOSCODE:60EC                 push    ax
DOSCODE:60ED                 push    bx
DOSCODE:60EE                 mov     al, [si+18h]    ; [SI+fcb_sfn] ; set SFN for check
DOSCODE:60F1                 call    CheckFCB
DOSCODE:60F4                 pop     bx
DOSCODE:60F5                 pop     ax
DOSCODE:60F6                 mov     word ptr ss:THISSFT, di
DOSCODE:60FB                 mov     word ptr ss:THISSFT+2, es
DOSCODE:6100                 jnb     short Set_SFT   ; no problems, just set thissft
DOSCODE:6102                 push    es
DOSCODE:6103                 call    save_world
DOSCODE:6106                 call    FCBRegen
DOSCODE:6109                 call    restore_world
DOSCODE:610C                 pop     es
DOSCODE:610D                 mov     ax, ss:EXTERR
DOSCODE:6111                 jb      short CheckD_retn
DOSCODE:6113
DOSCODE:6113 Set_SFT:                                ; ...
DOSCODE:6113                 les     di, ss:THISSFT
DOSCODE:6118                 push    ss:PROC_ID      ; set process id
DOSCODE:611D                 pop     word ptr es:[di+31h] ; [ES:DI+SF_ENTRY.sf_PID]
DOSCODE:6121                 retn                    ; cf=0
DOSCODE:6121 SFTFromFCB      endp
DOSCODE:6121
DOSCODE:6122
DOSCODE:6122 ; =============== S U B R O U T I N E =======================================
DOSCODE:6122
DOSCODE:6122
DOSCODE:6122 FCBHardErr      proc near               ; ...
DOSCODE:6122                 mov     es, cs:DosDSeg
DOSCODE:6127                 mov     ax, 23h         ; error_FCB_unavailable
DOSCODE:612A                 mov     es:ALLOWED, 8   ; Allowed_FAIL
DOSCODE:6130                 les     bp, es:THISDPB
DOSCODE:6135                 mov     di, 1           ; Fake some registers
DOSCODE:6138                 mov     cx, di
DOSCODE:613A                 xor     dx, dx
DOSCODE:613C                 cmp     es:[bp+0Fh], dx ; [es:bp+DPB.FAT_SIZE]
DOSCODE:6140                 jz      short fcbharderr_fat32 ; FAT32
DOSCODE:6142                 mov     es:HIGH_SECTOR, dx
DOSCODE:6147                 mov     dx, es:[bp+0Bh] ; [es:bp+DPB.FIRST_SECTOR]
DOSCODE:614B                 jmp     short fcbharderr_fat
DOSCODE:614D ; ---------------------------------------------------------------------------
DOSCODE:614D
DOSCODE:614D fcbharderr_fat32:                       ; ...
DOSCODE:614D                 mov     dx, es:[bp+2Bh] ; [es:bp+DPB.FCLUS_FSECTOR+2]
DOSCODE:6151                 mov     es:HIGH_SECTOR, dx
DOSCODE:6156                 mov     dx, es:[bp+29h] ; [es:bp+DPB.FCLUS_FSECTOR]
DOSCODE:615A
DOSCODE:615A fcbharderr_fat:                         ; ...
DOSCODE:615A                 call    HARDERR
DOSCODE:615D                 stc
DOSCODE:615E                 retn
DOSCODE:615E FCBHardErr      endp
DOSCODE:615E
DOSCODE:615F
DOSCODE:615F ; =============== S U B R O U T I N E =======================================
DOSCODE:615F
DOSCODE:615F
DOSCODE:615F GetRR           proc near               ; ...
DOSCODE:615F                 mov     ax, [si+21h]    ; [SI+SYS_FCB.RR]
DOSCODE:6162                 mov     dx, [si+23h]    ; [SI+SYS_FCB.RR+2]
DOSCODE:6165                 cmp     bx, 64          ; ignore MSB of RR if recsiz > 64
DOSCODE:6168                 jb      short GetRRBye
DOSCODE:6168 GetRR           endp
DOSCODE:6168
DOSCODE:616A ; START OF FUNCTION CHUNK FOR GetExtent
DOSCODE:616A
DOSCODE:616A GetExtent_bye:                          ; ...
DOSCODE:616A                 xor     dh, dh
DOSCODE:616A ; END OF FUNCTION CHUNK FOR GetExtent
DOSCODE:616C
DOSCODE:616C GetRRBye:                               ; ...
DOSCODE:616C                 retn
DOSCODE:616D
DOSCODE:616D ; =============== S U B R O U T I N E =======================================
DOSCODE:616D
DOSCODE:616D
DOSCODE:616D GetExtent       proc near               ; ...
DOSCODE:616D
DOSCODE:616D ; FUNCTION CHUNK AT DOSCODE:616A SIZE 00000002 BYTES
DOSCODE:616D
DOSCODE:616D                 mov     al, [si+20h]    ; [SI+SYS_FCB.NR]
DOSCODE:6170                 mov     dx, [si+0Ch]    ; [SI+SYS_FCB.EXTENT]
DOSCODE:6173                 shl     al, 1
DOSCODE:6175                 shr     dx, 1
DOSCODE:6177                 rcr     al, 1
DOSCODE:6179                 mov     ah, dl
DOSCODE:617B                 mov     dl, dh
DOSCODE:617D                 jmp     short GetExtent_bye
DOSCODE:617D GetExtent       endp
DOSCODE:617D
DOSCODE:617F
DOSCODE:617F ; =============== S U B R O U T I N E =======================================
DOSCODE:617F
DOSCODE:617F
DOSCODE:617F SetExtent       proc near               ; ...
DOSCODE:617F                 push    ax
DOSCODE:6180                 push    dx
DOSCODE:6181                 mov     cx, ax
DOSCODE:6183                 and     al, 7Fh         ; next rec field
DOSCODE:6185                 mov     [si+20h], al    ; [SI+SYS_FCB.NR]
DOSCODE:6188                 and     cl, 80h         ; save upper bit
DOSCODE:618B                 shl     cx, 1
DOSCODE:618D                 rcl     dx, 1           ; move high bit of CX to low bit of DX
DOSCODE:618F                 mov     al, ch
DOSCODE:6191                 mov     ah, dl
DOSCODE:6193                 mov     [si+0Ch], ax    ; [SI+SYS_FCB.EXTENT],AX  ; all done
DOSCODE:6196                 pop     dx
DOSCODE:6197                 pop     ax
DOSCODE:6198                 retn
DOSCODE:6198 SetExtent       endp
DOSCODE:6198
DOSCODE:6199
DOSCODE:6199 ; =============== S U B R O U T I N E =======================================
DOSCODE:6199
DOSCODE:6199
DOSCODE:6199 GetExtended     proc near               ; ...
DOSCODE:6199                 mov     si, dx
DOSCODE:619B                 cmp     byte ptr [si], 0FFh ; -1 ; look for extention
DOSCODE:619E                 jnz     short GetBye    ; not there
DOSCODE:61A0                 add     si, 7           ; point to FCB
DOSCODE:61A3
DOSCODE:61A3 GetBye:                                 ; ...
DOSCODE:61A3                 cmp     si, dx          ; set condition codes
DOSCODE:61A5
DOSCODE:61A5 getextd_retn:                           ; ...
DOSCODE:61A5                 retn
DOSCODE:61A5 GetExtended     endp
DOSCODE:61A5
DOSCODE:61A6
DOSCODE:61A6 ; =============== S U B R O U T I N E =======================================
DOSCODE:61A6
DOSCODE:61A6
DOSCODE:61A6 GetRecSize      proc near               ; ...
DOSCODE:61A6                 mov     bx, [si+0Eh]    ; [SI+SYS_FCB.RECSIZ] ; get his record size
DOSCODE:61A9                 or      bx, bx          ; is it nul?
DOSCODE:61AB                 jnz     short getextd_retn
DOSCODE:61AD                 mov     bl, 128         ; use default size
DOSCODE:61AF                 mov     [si+0Eh], bx    ; stuff it back
DOSCODE:61B2                 retn
DOSCODE:61B2 GetRecSize      endp
DOSCODE:61B2
DOSCODE:61B3 ; ---------------------------------------------------------------------------
DOSCODE:61B3
DOSCODE:61B3 $FCB_RANDOM_WRITE_BLOCK:                ; ...
DOSCODE:61B3                 mov     al, 0Ah         ; RANDOM+BLOCK
DOSCODE:61B5                 jmp     short FCBIO
DOSCODE:61B7 ; ---------------------------------------------------------------------------
DOSCODE:61B7
DOSCODE:61B7 $FCB_RANDOM_READ_BLOCK:                 ; ...
DOSCODE:61B7                 mov     al, 0Eh         ; RANDOM+FCBREAD+BLOCK
DOSCODE:61B9                 jmp     short FCBIO
DOSCODE:61BB ; ---------------------------------------------------------------------------
DOSCODE:61BB
DOSCODE:61BB $FCB_SEQ_READ:                          ; ...
DOSCODE:61BB                 mov     al, 4           ; FCBREAD
DOSCODE:61BD                 jmp     short FCBIO
DOSCODE:61BF ; ---------------------------------------------------------------------------
DOSCODE:61BF
DOSCODE:61BF $FCB_SEQ_WRITE:                         ; ...
DOSCODE:61BF                 mov     al, 0
DOSCODE:61C1                 jmp     short FCBIO
DOSCODE:61C3 ; ---------------------------------------------------------------------------
DOSCODE:61C3
DOSCODE:61C3 $FCB_RANDOM_READ:                       ; ...
DOSCODE:61C3                 mov     al, 6           ; RANDOM+FCBREAD
DOSCODE:61C5                 jmp     short FCBIO
DOSCODE:61C7 ; ---------------------------------------------------------------------------
DOSCODE:61C7
DOSCODE:61C7 $FCB_RANDOM_WRITE:                      ; ...
DOSCODE:61C7                 mov     al, 2           ; RANDOM
DOSCODE:61C9
DOSCODE:61C9 FCBIO:                                  ; ...
DOSCODE:61C9                 push    bp
DOSCODE:61CA                 mov     bp, sp
DOSCODE:61CC                 sub     sp, 20
DOSCODE:61CF                 mov     [bp-20], al     ; FCBOp
DOSCODE:61D2                 mov     byte ptr [bp-1], 0 ; FCBErr
DOSCODE:61D6                 call    GetExtended
DOSCODE:61D9                 test    byte ptr [bp-20], 8 ; test FCBOp,BLOCK
DOSCODE:61DD                 jnz     short GetPos
DOSCODE:61DF                 mov     cx, 1
DOSCODE:61E2
DOSCODE:61E2 GetPos:                                 ; ...
DOSCODE:61E2                 mov     [bp-3], cx      ; mov cRec,cx
DOSCODE:61E5                 call    GetExtent       ; RecPos = GetExtent ();
DOSCODE:61E8                 call    GetRecSize      ; RecSize = GetRecSize ();
DOSCODE:61EB                 mov     [bp-9], bx      ; RecSize
DOSCODE:61EE                 test    byte ptr [bp-20], 2 ; test FCBOp,RANDOM
DOSCODE:61F2                 jz      short GetRec
DOSCODE:61F4                 call    GetRR
DOSCODE:61F7
DOSCODE:61F7 GetRec:                                 ; ...
DOSCODE:61F7                 mov     [bp-7], ax      ; mov RecPosL,ax
DOSCODE:61FA                 mov     [bp-5], dx      ; mov RecPosH,dx
DOSCODE:61FD                 call    SetExtent
DOSCODE:6200                 mov     ax, [bp-5]      ; RecPosH
DOSCODE:6203                 mul     bx
DOSCODE:6205                 mov     di, ax
DOSCODE:6207                 mov     ax, [bp-7]      ; RecPosL
DOSCODE:620A                 mul     bx              ; bPos = RecPos * RecSize
DOSCODE:620C                 add     dx, di
DOSCODE:620E                 mov     [bp-13], ax     ; bPosL
DOSCODE:6211                 mov     [bp-11], dx     ; bPosH
DOSCODE:6214                 mov     ax, [bp-3]      ; cRec
DOSCODE:6217                 mul     bx              ; cByte = cRec * RecSize
DOSCODE:6219                 mov     [bp-15], ax     ; cByte
DOSCODE:621C                 add     ax, word ptr ss:DMAADD ; if (cByte+DMA > 64K) {
DOSCODE:6221                 adc     dx, 0
DOSCODE:6224                 jz      short DoOper
DOSCODE:6226                 mov     byte ptr [bp-1], 2 ; FCBErr = FTRIM;
DOSCODE:622A                 mov     ax, word ptr ss:DMAADD ; cRec = (64K-DMA)/RecSize;
DOSCODE:622E                 neg     ax
DOSCODE:6230                 jnz     short DoDiv
DOSCODE:6232                 dec     ax
DOSCODE:6233
DOSCODE:6233 DoDiv:                                  ; ...
DOSCODE:6233                 xor     dx, dx
DOSCODE:6235                 div     bx
DOSCODE:6237                 mov     [bp-3], ax      ; cRec
DOSCODE:623A                 mul     bx              ; cByte = cRec * RecSize;
DOSCODE:623C                 mov     [bp-15], ax     ; cByte
DOSCODE:623C                                         ; }
DOSCODE:623F
DOSCODE:623F DoOper:                                 ; ...
DOSCODE:623F                 xor     bx, bx
DOSCODE:6241                 mov     [bp-17], bx     ; cResult = 0;
DOSCODE:6244                 cmp     [bp-15], bx     ; if (cByte <> 0 ||
DOSCODE:6247                 jnz     short DoGetExt
DOSCODE:6249                 test    byte ptr [bp-1], 2 ; test FCBErr,FTRIM
DOSCODE:6249                                         ; (FCBErr&FTRIM) == 0) {
DOSCODE:624D                 jz      short DoGetExt
DOSCODE:624F                 jmp     short SkipOp
DOSCODE:6251 ; ---------------------------------------------------------------------------
DOSCODE:6251
DOSCODE:6251 DoGetExt:                               ; ...
DOSCODE:6251                 call    SFTFromFCB      ; if (!SFTFromFCB (SFT,FCB))
DOSCODE:6254                 jnb     short ContinueOp
DOSCODE:6256
DOSCODE:6256 FCBDeath:                               ; ...
DOSCODE:6256                 call    FCB_RET_ERR     ; signal error, map for extended
DOSCODE:6259                 mov     word ptr [bp-19], 0 ; cRecRes
DOSCODE:6259                                         ; no bytes transferred
DOSCODE:625E                 mov     byte ptr [bp-1], 1 ; MOV FCBErr,FEOF
DOSCODE:6262                 jmp     FCBSave
DOSCODE:6265 ; ---------------------------------------------------------------------------
DOSCODE:6265
DOSCODE:6265 ContinueOp:                             ; ...
DOSCODE:6265                 push    ds
DOSCODE:6266                 lds     ax, [si+10h]    ; [SI+SYS_FCB.FILSIZ]
DOSCODE:6269                 mov     es:[di+11h], ax ; [ES:DI+SF_ENTRY.sf_size]
DOSCODE:626D                 mov     word ptr es:[di+13h], ds ; [ES:DI+SF_ENTRY.sf_size+2]
DOSCODE:6271                 lds     ax, [bp-13]     ; bPos (bPosL, bPosH)
DOSCODE:6274                 mov     dx, ds
DOSCODE:6276                 pop     ds
DOSCODE:6277                 mov     es:[di+15h], ax ; [ES:DI+SF_ENTRY.sf_position]
DOSCODE:627B                 xchg    dx, es:[di+17h] ; [ES:DI+SF_ENTRY.sf_position+2]
DOSCODE:627F                 push    dx              ; save away Open age.
DOSCODE:6280                 mov     cx, [bp-15]     ; cByte
DOSCODE:6283                 mov     di, offset DOS_READ
DOSCODE:6286                 test    byte ptr [bp-20], 4 ; test FCBOp,FCBREAD
DOSCODE:628A                 jnz     short DoContext
DOSCODE:628C                 mov     di, offset DOS_WRITE
DOSCODE:628F
DOSCODE:628F DoContext:                              ; ...
DOSCODE:628F                 push    bp
DOSCODE:6290                 push    ds
DOSCODE:6291                 push    si
DOSCODE:6292                 push    ss
DOSCODE:6293                 pop     ds
DOSCODE:6294                 assume ds:DOSCODE
DOSCODE:6294                 call    di ; DOS_READ   ; DOS_READ or DOS_WRITE
DOSCODE:6296                 pop     si
DOSCODE:6297                 pop     ds
DOSCODE:6298                 assume ds:nothing
DOSCODE:6298                 pop     bp
DOSCODE:6299                 jb      short FCBDeath
DOSCODE:629B                 cmp     ss:DISK_FULL, 0
DOSCODE:62A1                 jz      short NODSKFULL
DOSCODE:62A3                 mov     ss:DISK_FULL, 0
DOSCODE:62A9
DOSCODE:62A9 NODSKFULL:                              ; ...
DOSCODE:62A9                 mov     [bp-17], cx     ; cResult
DOSCODE:62AC                 call    SaveFCBInfo     ; SaveFCBInfo (FCB);
DOSCODE:62AF                 pop     word ptr es:[di+17h] ; [ES:DI+SF_ENTRY.sf_position+2]
DOSCODE:62AF                                         ; restore open age
DOSCODE:62AF                                         ; (sf_OpenAge = SF_ENTRY.sf_position+2)
DOSCODE:62B3                 push    es
DOSCODE:62B4                 les     ax, es:[di+11h] ; [ES:DI+SF_ENTRY.sf_size]
DOSCODE:62B8                 mov     [si+10h], ax    ; [SI+SYS_FCB.FILSIZ]
DOSCODE:62BB                 mov     word ptr [si+12h], es ; [SI+SYS_FCB.FILSIZ+2]
DOSCODE:62BE                 pop     es
DOSCODE:62BF
DOSCODE:62BF SkipOp:                                 ; ...
DOSCODE:62BF                 mov     ax, [bp-17]     ; cResult
DOSCODE:62C2                 xor     dx, dx
DOSCODE:62C4                 div     word ptr [bp-9] ; cRecRes = cResult / RecSize;
DOSCODE:62C7                 mov     [bp-19], ax     ; cRecRes
DOSCODE:62CA                 add     [bp-7], ax      ; RecPosL
DOSCODE:62CD                 adc     word ptr [bp-5], 0 ; RecPosH
DOSCODE:62CD                                         ; RecPos += cRecResult;
DOSCODE:62D1                 cmp     ax, [bp-3]      ; if (cRecRes <> cRec)
DOSCODE:62D4                 jz      short TryBlank
DOSCODE:62D6                 test    byte ptr [bp-20], 4 ; test FCBOp,FCBREAD
DOSCODE:62D6                                         ; if (OP&FCBRead || !DEVICE)
DOSCODE:62DA                 jnz     short SetEOF
DOSCODE:62DC                 test    byte ptr es:[di+5], 80h ; [ES:DI+SF_ENTRY.sf_flags],
DOSCODE:62DC                                         ; devid_device
DOSCODE:62E1                 jnz     short TryBlank
DOSCODE:62E3
DOSCODE:62E3 SetEOF:                                 ; ...
DOSCODE:62E3                 mov     byte ptr [bp-1], 1 ; mov FCBErr,FEOF
DOSCODE:62E7
DOSCODE:62E7 TryBlank:                               ; ...
DOSCODE:62E7                 or      dx, dx          ; if (cResult%RecSize <> 0) {
DOSCODE:62E9                 jz      short SetExt
DOSCODE:62EB                 add     word ptr [bp-7], 1 ; RecPosL
DOSCODE:62EF                 adc     word ptr [bp-5], 0 ; RecPosH
DOSCODE:62EF                                         ; RecPos++;
DOSCODE:62F3                 test    byte ptr [bp-20], 4 ; test FCBOp,FCBREAD
DOSCODE:62F3                                         ; if(OP&FCBRead) <> 0) {
DOSCODE:62F7                 jz      short SetExt
DOSCODE:62F9                 inc     word ptr [bp-19] ; cRecRes++;
DOSCODE:62FC                 mov     byte ptr [bp-1], 3 ; FCBErr = FTRIM | FEOF;
DOSCODE:6300                 mov     cx, [bp-9]      ; Blank (RecSize-cResult%RecSize,
DOSCODE:6300                                         ;        DMA+cResult);
DOSCODE:6303                 sub     cx, dx
DOSCODE:6305                 xor     al, al
DOSCODE:6307                 les     di, ss:DMAADD
DOSCODE:630C                 add     di, [bp-17]     ; cResult
DOSCODE:630F                 rep stosb               ; } }
DOSCODE:6311
DOSCODE:6311 SetExt:                                 ; ...
DOSCODE:6311                 mov     dx, [bp-5]      ; RecPosH
DOSCODE:6314                 mov     ax, [bp-7]      ; RecPosL
DOSCODE:6317                 test    byte ptr [bp-20], 2 ; test FCBOp,RANDOM
DOSCODE:6317                                         ; if ((OP&Random) == 0 ||
DOSCODE:631B                 jz      short DoSetExt
DOSCODE:631D                 test    byte ptr [bp-20], 8 ; test FCBOp,BLOCK
DOSCODE:631D                                         ; (OP&BLOCK) <> 0)
DOSCODE:6321                 jz      short TrySetRR
DOSCODE:6323
DOSCODE:6323 DoSetExt:                               ; ...
DOSCODE:6323                 call    SetExtent       ; SetExtent (RecPos, FCB);
DOSCODE:6326
DOSCODE:6326 TrySetRR:                               ; ...
DOSCODE:6326                 test    byte ptr [bp-20], 8 ; test FCBOp,BLOCK
DOSCODE:632A                 jz      short TryReturn
DOSCODE:632C                 mov     [si+21h], ax    ; FCB->RR = RecPos;
DOSCODE:632C                                         ; [SI+SYS_FCB.RR]
DOSCODE:632F                 mov     [si+23h], dl    ; [SI+SYS_FCB.RR+2]
DOSCODE:6332                 cmp     word ptr [si+0Eh], 64 ; [SI+SYS_FCB.RECSIZ]
DOSCODE:6336                 jnb     short TryReturn
DOSCODE:6338                 mov     [si+24h], dh    ; Set 4th byte only if record size < 64
DOSCODE:6338                                         ; [SI+SYS_FCB.RR+2+1]
DOSCODE:633B
DOSCODE:633B TryReturn:                              ; ...
DOSCODE:633B                 test    byte ptr [bp-20], 4 ; test FCBOp,FCBREAD
DOSCODE:633B                                         ; if (!(FCBOP & FCBREAD)) {
DOSCODE:633F                 jnz     short FCBSave
DOSCODE:6341                 push    ds
DOSCODE:6342                 call    DATE16
DOSCODE:6345                 pop     ds
DOSCODE:6346                 mov     [si+14h], ax    ; FCB->FDate = date;
DOSCODE:6346                                         ; [SI+SYS_FCB.FDATE]
DOSCODE:6349                 mov     [si+16h], dx    ; FCB->FTime = time;
DOSCODE:6349                                         ; [SI+SYS_FCB.FTIME]
DOSCODE:634C
DOSCODE:634C FCBSave:                                ; ...
DOSCODE:634C                 test    byte ptr [bp-20], 8 ; test FCBOp,BLOCK
DOSCODE:634C                                         ; if ((op&BLOCK) <> 0)
DOSCODE:6350                 jz      short DoReturn
DOSCODE:6352                 mov     cx, [bp-19]     ; cRecRes ; user_CX = cRecRes;
DOSCODE:6355                 call    Get_User_Stack
DOSCODE:6358                 mov     [si+4], cx      ; [SI+user_env.user_CX]
DOSCODE:635B
DOSCODE:635B DoReturn:                               ; ...
DOSCODE:635B                 mov     al, [bp-1]      ; FCBErr ; return (FCBERR);
DOSCODE:635E                 mov     sp, bp
DOSCODE:6360                 pop     bp
DOSCODE:6361                 retn
DOSCODE:6362 ; ---------------------------------------------------------------------------
DOSCODE:6362
DOSCODE:6362 $FCB_OPEN:                              ; ...
DOSCODE:6362                 mov     ax, 2           ; SHARING_COMPAT+open_for_both
DOSCODE:6365                 mov     cx, offset DOS_OPEN
DOSCODE:6368
DOSCODE:6368 DoAccess:                               ; ...
DOSCODE:6368                 push    ds
DOSCODE:6369                 push    dx
DOSCODE:636A                 push    cx
DOSCODE:636B                 push    ax
DOSCODE:636C                 mov     di, offset OPENBUF
DOSCODE:636F                 call    TransFCB        ; crunch the fcb
DOSCODE:6372                 pop     ax
DOSCODE:6373                 pop     cx
DOSCODE:6374                 pop     dx
DOSCODE:6375                 pop     ds
DOSCODE:6376                 jnb     short FindFCB   ; everything seems ok
DOSCODE:6378
DOSCODE:6378 FCBOpenErr:                             ; ...
DOSCODE:6378                 jmp     FCB_RET_ERR
DOSCODE:637B ; ---------------------------------------------------------------------------
DOSCODE:637B
DOSCODE:637B FindFCB:                                ; ...
DOSCODE:637B                 call    GetExtended
DOSCODE:637E                 push    ax
DOSCODE:637F                 mov     al, 1           ; indicate Open/Create operation
DOSCODE:6381                 call    LRUFCB          ; get a sft entry (no error)
DOSCODE:6384                 pop     ax
DOSCODE:6385                 jb      short HardMessage
DOSCODE:6387                 mov     word ptr es:[di+2], 8000h ; [es:di+SF_ENTRY.sf_mode],
DOSCODE:6387                                         ; sf_isFCB
DOSCODE:638D                 push    ds
DOSCODE:638E                 push    si
DOSCODE:638F                 push    bx
DOSCODE:6390                 mov     si, cx
DOSCODE:6392                 push    ss
DOSCODE:6393                 pop     ds
DOSCODE:6394                 assume ds:DOSCODE
DOSCODE:6394                 call    si              ; DOS_OPEN or DOS_CREATE
DOSCODE:6396                 pop     bx
DOSCODE:6397                 pop     si
DOSCODE:6398                 pop     ds
DOSCODE:6399                 assume ds:nothing
DOSCODE:6399                 les     di, ss:THISSFT
DOSCODE:639E                 jnb     short FCBOK     ; operation succeeded
DOSCODE:63A0
DOSCODE:63A0 failopen:                               ; ...
DOSCODE:63A0                 push    ax
DOSCODE:63A1                 mov     al, 52h ; 'R'   ; clear out field (free sft)
DOSCODE:63A3                 call    BlastSFT
DOSCODE:63A6                 pop     ax
DOSCODE:63A7                 cmp     ax, 4           ; error_too_many_open_files
DOSCODE:63AA                 jz      short HardMessage
DOSCODE:63AC                 cmp     ax, 24h         ; error_sharing_buffer_exceeded
DOSCODE:63AF                 jnz     short DeadFCB
DOSCODE:63B1
DOSCODE:63B1 HardMessage:                            ; ...
DOSCODE:63B1                 push    ax
DOSCODE:63B2                 call    FCBHardErr
DOSCODE:63B5                 pop     ax
DOSCODE:63B6
DOSCODE:63B6 DeadFCB:                                ; ...
DOSCODE:63B6                 jmp     short FCBOpenErr
DOSCODE:63B8 ; ---------------------------------------------------------------------------
DOSCODE:63B8
DOSCODE:63B8 FCBOK:                                  ; ...
DOSCODE:63B8                 call    IsSFTNet        ; Non Fat file?
DOSCODE:63BB                 jnz     short FCBOK2    ; yes
DOSCODE:63BD                 call    CheckShare      ; share around?
DOSCODE:63C0                 jnz     short FCBOK1    ; yes
DOSCODE:63C2                 mov     word ptr ss:LocalSFT, di
DOSCODE:63C7                 mov     word ptr ss:LocalSFT+2, es
DOSCODE:63CC
DOSCODE:63CC FCBOK1:                                 ; ...
DOSCODE:63CC                 test    byte ptr es:[di+5], 80h ; [es:di+SFTENTRY.sf_flags],
DOSCODE:63CC                                         ; devid_device
DOSCODE:63D1                 jnz     short FCBOK2    ; local device
DOSCODE:63D1                                         ; local (disk) file
DOSCODE:63D3                 test    byte ptr es:[di+4], 8 ; [es:di+SFTENTRY.sf_attr],
DOSCODE:63D3                                         ; attr_volume_id
DOSCODE:63D8                 jnz     short FCBOK2
DOSCODE:63DA                 push    es
DOSCODE:63DB                 push    di
DOSCODE:63DC                 les     di, es:[di+7]   ; [es:di+SF_ENTRY.sf_devptr]
DOSCODE:63DC                                         ; local file's DPB
DOSCODE:63E0                 cmp     word ptr es:[di+0Fh], 0 ; [es:di+DPB.FAT_SIZE]
DOSCODE:63E5                 pop     di
DOSCODE:63E6                 pop     es
DOSCODE:63E7                 jnz     short FCBOK2    ; not FAT32
DOSCODE:63E9                 mov     ax, 0Fh         ; error_invalid_drive ; for FAT32
DOSCODE:63EC                 jmp     short failopen
DOSCODE:63EE ; ---------------------------------------------------------------------------
DOSCODE:63EE
DOSCODE:63EE FCBOK2:                                 ; ...
DOSCODE:63EE                 inc     word ptr es:[di] ; inc word [ES:DI+SF_ENTRY.sf_ref_count]
DOSCODE:63F1                 call    set_sftfcb_entry
DOSCODE:63F4                 call    SaveFCBInfo
DOSCODE:63F7                 test    byte ptr es:[di+5], 80h ; [ES:DI+SF_ENTRY.sf_flags],
DOSCODE:63F7                                         ; devid_device
DOSCODE:63FC                 jnz     short FCBNoDrive
DOSCODE:63FE                 mov     al, [si]
DOSCODE:6400                 call    GETTHISDRV
DOSCODE:6403                 inc     al
DOSCODE:6405                 mov     [si], al
DOSCODE:6407
DOSCODE:6407 FCBNoDrive:                             ; ...
DOSCODE:6407                 mov     word ptr [si+0Eh], 80h ; [SI+SYS_FCB.RECSIZ],128
DOSCODE:6407                                         ; default record size
DOSCODE:640C                 push    es
DOSCODE:640D                 les     ax, es:[di+0Dh] ; [es:di+SF_ENTRY.sf_time]
DOSCODE:6411                 mov     [si+16h], ax    ; [si+SYS_FCB.FTIME]
DOSCODE:6414                 mov     word ptr [si+14h], es ; [si+SYS_FCB.FDATE]
DOSCODE:6417                 pop     es
DOSCODE:6418                 push    es
DOSCODE:6419                 les     ax, es:[di+11h] ; [es:di+SF_ENTRY.sf_size]
DOSCODE:641D                 mov     [si+10h], ax    ; [si+SYS_FCB.FILSIZ]
DOSCODE:6420                 mov     word ptr [si+12h], es ; [si+SYS_FCB.FILSIZ+2]
DOSCODE:6423                 pop     es
DOSCODE:6424                 xor     ax, ax          ; 0
DOSCODE:6426                 mov     [si+0Ch], ax    ; [si+SYS_FCB.EXTENT] ; beginning of file
DOSCODE:6429                 les     di, ss:SFTFCB   ; pointer to head of the list
DOSCODE:642E                 mov     ah, es:[di+4]   ; [es:si+SFT.SFCount]
DOSCODE:642E                                         ; number of SFTs to scan
DOSCODE:6432
DOSCODE:6432 OpenScan:                               ; ...
DOSCODE:6432                 cmp     al, [si+18h]    ; [SI+fcb_sfn]
DOSCODE:6435                 jz      short SkipCheck
DOSCODE:6437                 push    ax
DOSCODE:6438                 call    CheckFCB        ; do they match
DOSCODE:643B                 pop     ax
DOSCODE:643C                 jnb     short OpenFound ; found a match!
DOSCODE:643E
DOSCODE:643E SkipCheck:                              ; ...
DOSCODE:643E                 inc     al              ; advance to next FCB
DOSCODE:6440                 cmp     al, ah          ; table full?
DOSCODE:6442                 jnz     short OpenScan  ; no, go for more
DOSCODE:6444
DOSCODE:6444 OpenDone:                               ; ...
DOSCODE:6444                 xor     al, al          ; return success
DOSCODE:6446                 retn
DOSCODE:6447 ; ---------------------------------------------------------------------------
DOSCODE:6447
DOSCODE:6447 OpenFound:                              ; ...
DOSCODE:6447                 mov     [si+18h], al    ; [SI+fcb_sfn] ; assign with this
DOSCODE:644A                 inc     word ptr es:[di] ; inc word [ES:DI+SF_ENTRY.sf_ref_count]
DOSCODE:644D                 call    set_sftfcb_entry
DOSCODE:6450                 mov     ax, ss:FCBLRU   ; update LRU counts
DOSCODE:6454                 mov     es:[di+15h], ax ; [es:di+sf_LRU]
DOSCODE:6458                 push    ss
DOSCODE:6459                 pop     ds
DOSCODE:645A                 assume ds:DOSCODE
DOSCODE:645A                 les     di, THISSFT
DOSCODE:645E                 dec     word ptr es:[di] ; dec word [ES:DI+SF_ENTRY.sf_ref_count]
DOSCODE:645E                                         ; free the newly allocated SFT
DOSCODE:6461                 call    ShareEnd
DOSCODE:6464                 mov     al, 43h ; 'C'
DOSCODE:6466                 call    BlastSFT
DOSCODE:6469                 jmp     short OpenDone
DOSCODE:646B ; ---------------------------------------------------------------------------
DOSCODE:646B
DOSCODE:646B $FCB_CREATE:                            ; ...
DOSCODE:646B                 mov     cx, offset DOS_CREATE
DOSCODE:646E                 xor     ax, ax          ; attributes to create
DOSCODE:6470                 call    GetExtended     ; get extended FCB
DOSCODE:6473                 jz      short DoAccessJ ; not an extended FCB
DOSCODE:6475                 mov     al, [si-1]      ; get attributes
DOSCODE:6478
DOSCODE:6478 DoAccessJ:                              ; ...
DOSCODE:6478                 jmp     DoAccess
DOSCODE:647B ; ---------------------------------------------------------------------------
DOSCODE:647B
DOSCODE:647B $DIR_SEARCH_FIRST:                      ; ...
DOSCODE:647B                 mov     word ptr ss:THISFCB, dx
DOSCODE:6480                 mov     word ptr ss:THISFCB+2, ds
DOSCODE:6485                 mov     si, dx
DOSCODE:6487                 cmp     byte ptr [si], 0FFh
DOSCODE:648A                 jnz     short NORMFCB4
DOSCODE:648C                 add     si, 7           ; point to drive select byte
DOSCODE:648F
DOSCODE:648F NORMFCB4:                               ; ...
DOSCODE:648F                 push    word ptr [si]   ; save original drive byte
DOSCODE:6491                 mov     di, ss
DOSCODE:6493                 mov     es, di
DOSCODE:6495                 assume es:DOSCODE
DOSCODE:6495                 mov     di, offset OPENBUF
DOSCODE:6498                 call    TransFCB        ; convert the FCB, set SATTRIB EXTFCB
DOSCODE:649B                 jnb     short SearchIt
DOSCODE:649D                 pop     bx
DOSCODE:649E
DOSCODE:649E dcf_errj:                               ; ...
DOSCODE:649E                 jmp     FCB_RET_ERR
DOSCODE:64A1 ; ---------------------------------------------------------------------------
DOSCODE:64A1
DOSCODE:64A1 SearchIt:                               ; ...
DOSCODE:64A1                 mov     di, ss
DOSCODE:64A3                 mov     ds, di
DOSCODE:64A5                 les     di, DMAADD
DOSCODE:64A9                 assume es:nothing
DOSCODE:64A9                 push    di
DOSCODE:64AA                 push    es
DOSCODE:64AB                 mov     word ptr DMAADD, offset SEARCHBUF
DOSCODE:64B1                 mov     word ptr DMAADD+2, ds
DOSCODE:64B5                 or      DOS34_FLAG, 400h ; SEARCH_FASTOPEN
DOSCODE:64BB                 call    DOS_SEARCH_FIRST
DOSCODE:64BE                 pop     word ptr DMAADD+2
DOSCODE:64C2                 pop     word ptr DMAADD
DOSCODE:64C6                 jnb     short SearchSet
DOSCODE:64C8                 pop     bx
DOSCODE:64C9                 jmp     short dcf_errj
DOSCODE:64CB ; ---------------------------------------------------------------------------
DOSCODE:64CB
DOSCODE:64CB SearchSet:                              ; ...
DOSCODE:64CB                 mov     si, offset SEARCHBUF
DOSCODE:64CE                 les     di, THISFCB
DOSCODE:64D2                 test    EXTFCB, 0FFh
DOSCODE:64D7                 jz      short NORMFCB1
DOSCODE:64D9                 add     di, 7           ; point past the extension
DOSCODE:64DC
DOSCODE:64DC NORMFCB1:                               ; ...
DOSCODE:64DC                 pop     bx              ; get original drive byte
DOSCODE:64DD                 or      bl, bl
DOSCODE:64DF                 jnz     short SearchDrv
DOSCODE:64E1                 mov     bl, CURDRV
DOSCODE:64E5                 inc     bl
DOSCODE:64E7
DOSCODE:64E7 SearchDrv:                              ; ...
DOSCODE:64E7                 lodsb
DOSCODE:64E8                 xchg    al, bl
DOSCODE:64EA                 inc     di
DOSCODE:64EB                 mov     cx, 10          ; 20/2
DOSCODE:64EE                 rep movsw
DOSCODE:64F0                 xchg    al, bl
DOSCODE:64F2                 stosb
DOSCODE:64F3                 les     di, DMAADD
DOSCODE:64F7                 test    EXTFCB, 0FFh
DOSCODE:64FC                 jz      short NORMFCB2
DOSCODE:64FE                 mov     al, 0FFh
DOSCODE:6500                 stosb
DOSCODE:6501                 inc     al
DOSCODE:6503                 mov     ah, al
DOSCODE:6505                 stosb
DOSCODE:6506                 stosw
DOSCODE:6507                 stosw
DOSCODE:6508                 mov     al, SATTRIB
DOSCODE:650B                 stosb
DOSCODE:650C
DOSCODE:650C NORMFCB2:                               ; ...
DOSCODE:650C                 mov     al, bl          ; User Drive byte
DOSCODE:650E                 stosb
DOSCODE:650F                 mov     cx, 16          ; 32 / 2 words of dir entry
DOSCODE:6512                 rep movsw
DOSCODE:6514                 jmp     NO_OP           ; FCB_RET_OK
DOSCODE:6517 ; ---------------------------------------------------------------------------
DOSCODE:6517
DOSCODE:6517 $DIR_SEARCH_NEXT:                       ; ...
DOSCODE:6517                 mov     word ptr ss:THISFCB, dx
DOSCODE:651C                 mov     word ptr ss:THISFCB+2, ds
DOSCODE:6521                 mov     al, 0
DOSCODE:6523                 mov     ss:SATTRIB, al
DOSCODE:6527                 mov     ss:EXTFCB, al
DOSCODE:652B                 mov     di, ss
DOSCODE:652D                 mov     es, di
DOSCODE:652F                 assume es:DOSCODE
DOSCODE:652F                 mov     di, offset SEARCHBUF
DOSCODE:6532                 mov     si, dx
DOSCODE:6534                 cmp     byte ptr [si], 0FFh
DOSCODE:6537                 jnz     short NORMFCB6
DOSCODE:6539                 add     si, 6
DOSCODE:653C                 lodsb
DOSCODE:653D                 mov     ss:SATTRIB, al
DOSCODE:6541                 dec     ss:EXTFCB
DOSCODE:6546
DOSCODE:6546 NORMFCB6:                               ; ...
DOSCODE:6546                 lodsb
DOSCODE:6547                 push    ax
DOSCODE:6548                 mov     al, [si+20]
DOSCODE:654B                 stosb
DOSCODE:654C                 mov     cx, 10          ; 20/2
DOSCODE:654F                 rep movsw
DOSCODE:6551                 mov     di, ss
DOSCODE:6553                 mov     ds, di
DOSCODE:6555                 les     di, DMAADD
DOSCODE:6559                 assume es:nothing
DOSCODE:6559                 push    di
DOSCODE:655A                 push    es
DOSCODE:655B                 mov     di, offset SEARCHBUF
DOSCODE:655E                 mov     word ptr DMAADD, di
DOSCODE:6562                 mov     word ptr DMAADD+2, ds
DOSCODE:6566                 mov     ax, ds
DOSCODE:6568                 mov     es, ax
DOSCODE:656A                 assume es:DOSCODE
DOSCODE:656A                 call    DOS_SEARCH_NEXT
DOSCODE:656D                 pop     word ptr DMAADD+2
DOSCODE:6571                 pop     word ptr DMAADD
DOSCODE:6575                 jb      short SearchNoMore
DOSCODE:6577                 jmp     SearchSet
DOSCODE:657A ; ---------------------------------------------------------------------------
DOSCODE:657A
DOSCODE:657A SearchNoMore:                           ; ...
DOSCODE:657A                 les     di, THISFCB
DOSCODE:657E                 assume es:nothing
DOSCODE:657E                 test    EXTFCB, 0FFh
DOSCODE:6583                 jz      short NORMFCB8
DOSCODE:6585                 add     di, 7           ; point past the extension
DOSCODE:6588
DOSCODE:6588 NORMFCB8:                               ; ...
DOSCODE:6588                 pop     bx
DOSCODE:6589                 mov     es:[di], bl
DOSCODE:658C                 jmp     FCB_RET_ERR
DOSCODE:658F ; ---------------------------------------------------------------------------
DOSCODE:658F
DOSCODE:658F FindError:                              ; ...
DOSCODE:658F                 mov     al, 3           ; error_path_not_found
DOSCODE:6591
DOSCODE:6591 FF_errj:                                ; ...
DOSCODE:6591                 jmp     SYS_RET_ERR     ; error and map into one
DOSCODE:6594 ; ---------------------------------------------------------------------------
DOSCODE:6594
DOSCODE:6594 $FIND_FIRST:                            ; ...
DOSCODE:6594                 mov     si, dx
DOSCODE:6596                 mov     ss:SATTRIB, cl  ; Search attribute
DOSCODE:659B                 mov     di, offset OPENBUF
DOSCODE:659E                 call    TransPathSet    ; convert the path
DOSCODE:65A1                 jb      short FindError
DOSCODE:65A3
DOSCODE:65A3 Find_it:
DOSCODE:65A3                 mov     di, ss
DOSCODE:65A5                 mov     ds, di
DOSCODE:65A7                 les     di, DMAADD
DOSCODE:65AB                 push    di
DOSCODE:65AC                 push    es
DOSCODE:65AD                 mov     word ptr DMAADD, offset SEARCHBUF
DOSCODE:65B3                 mov     word ptr DMAADD+2, ds
DOSCODE:65B7                 or      DOS34_FLAG, 400h ; SEARCH_FASTOPEN
DOSCODE:65BD                 call    DOS_SEARCH_FIRST ; Find it
DOSCODE:65C0                 pop     word ptr DMAADD+2
DOSCODE:65C4                 pop     word ptr DMAADD
DOSCODE:65C8                 jb      short FF_errj
DOSCODE:65CA
DOSCODE:65CA FindSet:                                ; ...
DOSCODE:65CA                 mov     si, offset SEARCHBUF
DOSCODE:65CD                 les     di, DMAADD
DOSCODE:65D1                 mov     cx, 10
DOSCODE:65D4                 rep movsw
DOSCODE:65D6                 movsb
DOSCODE:65D7                 push    si              ; Save pointer to start of entry
DOSCODE:65D8                 mov     al, [si+11]     ; [SI+dir_entry.dir_attr]
DOSCODE:65DB                 stosb
DOSCODE:65DC                 add     si, 22          ; dir_entry.dir_time
DOSCODE:65DF                 movsw                   ; dir_time
DOSCODE:65E0                 movsw                   ; dir_date
DOSCODE:65E1                 inc     si              ; Skip dir_first
DOSCODE:65E2                 inc     si
DOSCODE:65E3                 movsw                   ; dir_size (2 words)
DOSCODE:65E4                 movsw
DOSCODE:65E5                 pop     si              ; Point back to dir_name
DOSCODE:65E6                 call    PackName
DOSCODE:65E9                 jmp     SYS_RET_OK
DOSCODE:65EC ; ---------------------------------------------------------------------------
DOSCODE:65EC
DOSCODE:65EC $FIND_NEXT:                             ; ...
DOSCODE:65EC                 mov     di, ss
DOSCODE:65EE                 mov     es, di
DOSCODE:65F0                 assume es:DOSCODE
DOSCODE:65F0                 mov     di, offset SEARCHBUF
DOSCODE:65F3                 lds     si, ss:DMAADD
DOSCODE:65F8                 assume ds:nothing
DOSCODE:65F8                 mov     cx, 10
DOSCODE:65FB                 rep movsw
DOSCODE:65FD                 movsb
DOSCODE:65FE                 mov     di, ss
DOSCODE:6600                 mov     ds, di
DOSCODE:6602                 assume ds:DOSCODE
DOSCODE:6602                 les     di, DMAADD
DOSCODE:6606                 assume es:nothing
DOSCODE:6606                 push    di
DOSCODE:6607                 push    es
DOSCODE:6608                 mov     di, offset SEARCHBUF
DOSCODE:660B                 mov     word ptr DMAADD, di
DOSCODE:660F                 mov     word ptr DMAADD+2, ds
DOSCODE:6613                 mov     ax, ds
DOSCODE:6615                 mov     es, ax
DOSCODE:6617                 assume es:DOSCODE
DOSCODE:6617                 call    DOS_SEARCH_NEXT ; Find it
DOSCODE:661A                 pop     word ptr DMAADD+2
DOSCODE:661E                 pop     word ptr DMAADD
DOSCODE:6622                 jnb     short FindSet   ; No error, set info
DOSCODE:6624                 jmp     SYS_RET_ERR
DOSCODE:6627
DOSCODE:6627 ; =============== S U B R O U T I N E =======================================
DOSCODE:6627
DOSCODE:6627
DOSCODE:6627 PackName        proc near               ; ...
DOSCODE:6627                 mov     cx, 4           ; Convert file names from FCB to ASCIZ format
DOSCODE:662A                 rep movsw
DOSCODE:662C
DOSCODE:662C main_kill_tail:                         ; ...
DOSCODE:662C                 cmp     byte ptr es:[di-1], 20h ; ' '
DOSCODE:6631                 jnz     short find_check_dot
DOSCODE:6633                 dec     di              ; Back up over trailing space
DOSCODE:6634                 inc     cx
DOSCODE:6635                 cmp     cx, 8
DOSCODE:6638                 jb      short main_kill_tail
DOSCODE:663A
DOSCODE:663A find_check_dot:                         ; ...
DOSCODE:663A                 cmp     word ptr [si], 2020h
DOSCODE:663E                 jnz     short got_ext   ; Some chars in extension
DOSCODE:6640                 cmp     byte ptr [si+2], 20h ; ' '
DOSCODE:6644                 jz      short find_done ; No extension
DOSCODE:6646
DOSCODE:6646 got_ext:                                ; ...
DOSCODE:6646                 mov     al, 2Eh ; '.'
DOSCODE:6648                 stosb
DOSCODE:6649                 movsw
DOSCODE:664A                 movsb
DOSCODE:664B
DOSCODE:664B ext_kill_tail:                          ; ...
DOSCODE:664B                 cmp     byte ptr es:[di-1], 20h ; ' '
DOSCODE:6650                 jnz     short find_done
DOSCODE:6652                 dec     di              ; Back up over trailing space
DOSCODE:6653                 jmp     short ext_kill_tail
DOSCODE:6655 ; ---------------------------------------------------------------------------
DOSCODE:6655
DOSCODE:6655 find_done:                              ; ...
DOSCODE:6655                 xor     ax, ax          ; NUL terminate
DOSCODE:6657                 stosb
DOSCODE:6658                 retn
DOSCODE:6658 PackName        endp
DOSCODE:6658
DOSCODE:6659 ; ---------------------------------------------------------------------------
DOSCODE:6659
DOSCODE:6659 GET_FAST_SEARCH:                        ;
DOSCODE:6659                 or      ss:DOS34_FLAG, 400h ; SEARCH_FASTOPEN
DOSCODE:6660                 call    DOS_SEARCH_FIRST
DOSCODE:6663                 retn
DOSCODE:6664
DOSCODE:6664 ; =============== S U B R O U T I N E =======================================
DOSCODE:6664
DOSCODE:6664
DOSCODE:6664 $CURRENT_DIR    proc near               ; ...
DOSCODE:6664                 call    ECritDisk
DOSCODE:6667                 mov     al, dl          ; get drive number (0=def, 1=A)
DOSCODE:6669                 call    GetVisDrv
DOSCODE:666C                 jnb     short CurrentValidate
DOSCODE:666E
DOSCODE:666E CurdirErr:                              ; ...
DOSCODE:666E                 call    LCritDisk
DOSCODE:6671                 push    ds
DOSCODE:6672                 mov     ds, cs:DosDSeg
DOSCODE:6677                 assume ds:nothing
DOSCODE:6677                 mov     al, ds:DrvErr
DOSCODE:667A                 pop     ds
DOSCODE:667B
DOSCODE:667B curdir_errj:                            ; ...
DOSCODE:667B                 jmp     SYS_RET_ERR
DOSCODE:667E ; ---------------------------------------------------------------------------
DOSCODE:667E
DOSCODE:667E CurrentValidate:                        ; ...
DOSCODE:667E                 push    ds
DOSCODE:667F                 push    si
DOSCODE:6680                 mov     ds, cs:DosDSeg
DOSCODE:6685                 mov     ds:NoSetDir, 0
DOSCODE:668A
DOSCODE:668A DoCheck:
DOSCODE:668A                 mov     di, offset OPENBUF
DOSCODE:668D                 call    ValidateCDS
DOSCODE:6690                 push    es
DOSCODE:6691                 push    di
DOSCODE:6692                 pop     si
DOSCODE:6693                 pop     ds
DOSCODE:6694                 pop     di
DOSCODE:6695                 pop     es
DOSCODE:6696                 assume es:nothing
DOSCODE:6696                 jb      short CurdirErr
DOSCODE:6698                 add     si, [si+4Fh]    ; [SI+curdir.end]
DOSCODE:669B                 cmp     byte ptr [si], 5Ch ; '\' ; root or subdirs present?
DOSCODE:669E                 jnz     short CurrentCopy
DOSCODE:66A0                 inc     si
DOSCODE:66A1
DOSCODE:66A1 CurrentCopy:                            ; ...
DOSCODE:66A1                 push    ax
DOSCODE:66A2                 lodsb                   ; get char
DOSCODE:66A3                 or      al, al
DOSCODE:66A5                 jz      short FOK
DOSCODE:66A7                 cmp     al, 5
DOSCODE:66A9                 jz      short FCHANGE
DOSCODE:66AB                 jmp     short FFF
DOSCODE:66AD ; ---------------------------------------------------------------------------
DOSCODE:66AD
DOSCODE:66AD FCPYNEXT:                               ; ...
DOSCODE:66AD                 lodsb                   ; get char
DOSCODE:66AE
DOSCODE:66AE FFF:                                    ; ...
DOSCODE:66AE                 cmp     al, 5Ch ; '\'   ; beginning of directory ?
DOSCODE:66B0                 jnz     short FOK       ; no
DOSCODE:66B2                 stosb
DOSCODE:66B3                 lodsb
DOSCODE:66B4                 cmp     al, 5           ; 1st char of dir is 05?
DOSCODE:66B6                 jnz     short FOK       ; no
DOSCODE:66B8
DOSCODE:66B8 FCHANGE:                                ; ...
DOSCODE:66B8                 mov     al, 0E5h        ; make it E5
DOSCODE:66BA
DOSCODE:66BA FOK:                                    ; ...
DOSCODE:66BA                 stosb                   ; put into user's buffer
DOSCODE:66BB                 or      al, al          ; final char
DOSCODE:66BD                 jnz     short FCPYNEXT  ; no
DOSCODE:66BF                 pop     ax
DOSCODE:66C0                 xor     al, al          ; MZ 19 Jan 84
DOSCODE:66C2                 call    LCritDisk
DOSCODE:66C5                 jmp     SYS_RET_OK      ; no more, bye!
DOSCODE:66C5 $CURRENT_DIR    endp
DOSCODE:66C5
DOSCODE:66C8 ; ---------------------------------------------------------------------------
DOSCODE:66C8
DOSCODE:66C8 $RMDIR:                                 ; ...
DOSCODE:66C8                 push    dx              ; Save ptr to name
DOSCODE:66C9                 push    ds
DOSCODE:66CA                 mov     si, dx
DOSCODE:66CC                 mov     di, offset OPENBUF
DOSCODE:66CF                 push    di
DOSCODE:66D0                 call    TransPathNoSet  ; Translate the name
DOSCODE:66D3                 pop     di
DOSCODE:66D4                 jnb     short rmlset
DOSCODE:66D6                 pop     ds
DOSCODE:66D7                 pop     dx
DOSCODE:66D8                 mov     al, 3           ; error_path_not_found
DOSCODE:66DA
DOSCODE:66DA rmdir_chdir_errj:                       ; ...
DOSCODE:66DA                 jmp     short curdir_errj
DOSCODE:66DC ; ---------------------------------------------------------------------------
DOSCODE:66DC
DOSCODE:66DC rmlset:                                 ; ...
DOSCODE:66DC                 cmp     ss:CMETA, 0FFh
DOSCODE:66E2                 jnz     short rmerr
DOSCODE:66E4                 push    ss
DOSCODE:66E5                 pop     es
DOSCODE:66E6                 assume es:DOSCODE
DOSCODE:66E6                 xor     al, al          ; al = 0 , ie drive a:
DOSCODE:66E8
DOSCODE:66E8 rmloop:                                 ; ...
DOSCODE:66E8                 call    GetCDSFromDrv   ; Get curdir for drive in al
DOSCODE:66EB                 jb      short rmcont    ; If error, exit loop & cont normally
DOSCODE:66ED                 test    word ptr [si+43h], 4000h ; [SI+curdir.flags],curdir_inuse
DOSCODE:66F2                 jz      short rmdir_nxt
DOSCODE:66F4                 call    StrCmp          ; Are the 2 paths the same?
DOSCODE:66F7                 jz      short rmerr     ; Yes, report error.
DOSCODE:66F9
DOSCODE:66F9 rmdir_nxt:                              ; ...
DOSCODE:66F9                 inc     al              ; Go check next drive.
DOSCODE:66FB                 jmp     short rmloop
DOSCODE:66FD ; ---------------------------------------------------------------------------
DOSCODE:66FD
DOSCODE:66FD rmerr:                                  ; ...
DOSCODE:66FD                 pop     ds
DOSCODE:66FE                 pop     dx
DOSCODE:66FF                 mov     al, 10h         ; error_current_directory
DOSCODE:6701
DOSCODE:6701 rmdir_chdir_errj2:                      ; ...
DOSCODE:6701                 jmp     short rmdir_chdir_errj
DOSCODE:6703 ; ---------------------------------------------------------------------------
DOSCODE:6703
DOSCODE:6703 rmcont:                                 ; ...
DOSCODE:6703                 pop     ds
DOSCODE:6704                 pop     dx              ; Restore ptr the name
DOSCODE:6705                 mov     si, offset DOS_RMDIR
DOSCODE:6708                 call    TestNet
DOSCODE:670B                 mov     di, 67          ; DIRSTRLEN
DOSCODE:670E                 jnb     short rmcont2   ; local directory
DOSCODE:6710                 mov     di, 128
DOSCODE:6713
DOSCODE:6713 rmcont2:                                ; ...
DOSCODE:6713                 mov     ss:PATHNAMELEN, di
DOSCODE:6718                 jmp     DoDirCall
DOSCODE:671B ; ---------------------------------------------------------------------------
DOSCODE:671B
DOSCODE:671B $CHDIR:                                 ; ...
DOSCODE:671B                 mov     ss:PATHNAMELEN, 67 ; DIRSTRLEN
DOSCODE:6722                 mov     di, offset OPENBUF
DOSCODE:6725                 mov     si, dx
DOSCODE:6727                 call    TransPath       ; go munge the path and get real CDS
DOSCODE:672A                 jnb     short ChDirCrack ; no errors, try path
DOSCODE:672C
DOSCODE:672C ChDirErrP:                              ; ...
DOSCODE:672C                 mov     al, 3           ; error_path_not_found
DOSCODE:672E
DOSCODE:672E chdir_errj:                             ; ...
DOSCODE:672E                 jmp     short rmdir_chdir_errj2
DOSCODE:6730 ; ---------------------------------------------------------------------------
DOSCODE:6730
DOSCODE:6730 ChDirCrack:                             ; ...
DOSCODE:6730                 cmp     ds:CMETA, 0FFh  ; No meta chars allowed.
DOSCODE:6735                 jnz     short ChDirErrP
DOSCODE:6737                 les     di, ds:THISCDS
DOSCODE:673B                 assume es:nothing
DOSCODE:673B                 cmp     di, 0FFFFh      ; if (ThisCDS == NULL)
DOSCODE:673E                 jz      short ChDirErrP ;     error ();
DOSCODE:6740                 call    DOS_CHDIR       ; Find out if the directory exists.
DOSCODE:6743                 jb      short chdir_errj
DOSCODE:6745                 les     di, ds:THISCDS  ; Get back CDS to see if a join as seen.
DOSCODE:6749                 test    word ptr es:[di+43h], 2000h ;
DOSCODE:6749                                         ; [ES:DI+curdir.flags],curdir_splice
DOSCODE:674F                 mov     dx, ds:DIRSTART_HW
DOSCODE:6753                 jz      short GotCDS
DOSCODE:6755                 push    es              ; The CDS was joined.
DOSCODE:6756                 push    di              ; Let's go back and grab the logical CDS.
DOSCODE:6757                 push    dx
DOSCODE:6758                 push    cx
DOSCODE:6759                 call    Get_User_Stack  ; get original text
DOSCODE:675C                 mov     di, [si+6]      ; [SI+user_env.user_DX]
DOSCODE:675F                 mov     ds, word ptr [si+0Eh] ; [SI+user_env.user_DS]
DOSCODE:6762                 mov     si, offset OPENBUF
DOSCODE:6765                 xchg    si, di
DOSCODE:6767                 xor     al, al          ; do no splicing
DOSCODE:6769                 push    di
DOSCODE:676A                 call    TransPathNoSet  ; Munge path
DOSCODE:676D                 pop     si
DOSCODE:676E                 les     di, ds:THISCDS  ; get new CDS
DOSCODE:6772                 mov     word ptr es:[di+49h], 0FFFFh ; [es:di+curdir.ID],-1
DOSCODE:6778                 mov     word ptr es:[di+4Bh], 0FFFFh ; [es:di+curdir.ID+2],-1
DOSCODE:677E                 pop     cx
DOSCODE:677F                 pop     dx
DOSCODE:6780                 pop     di
DOSCODE:6781                 pop     es
DOSCODE:6782
DOSCODE:6782 GotCDS:                                 ; ...
DOSCODE:6782                 call    Check_PathLen
DOSCODE:6785                 ja      short ChDirErrP
DOSCODE:6787                 test    word ptr es:[di+43h], 8000h ;
DOSCODE:6787                                         ; [ES:DI+curdir.flags],curdir_isnet
DOSCODE:678D                 jnz     short SkipRecency
DOSCODE:678F                 test    word ptr es:[di+43h], 2000h ; for Join and Subst
DOSCODE:678F                                         ; [ES:DI+curdir.flags],curdir_splice
DOSCODE:6795                 jz      short setdirclus
DOSCODE:6797                 mov     cx, 0FFFFh      ; -1
DOSCODE:679A                 mov     dx, cx
DOSCODE:679C
DOSCODE:679C setdirclus:                             ; ...
DOSCODE:679C                 mov     es:[di+49h], cx ; [ES:DI+curdir.ID]
DOSCODE:67A0                 mov     es:[di+4Bh], dx ; [ES:DI+curdir.ID+2]
DOSCODE:67A4                 les     di, ds:THISCDS  ; get logical CDS
DOSCODE:67A8
DOSCODE:67A8 SkipRecency:                            ; ...
DOSCODE:67A8                 call    FStrCpy
DOSCODE:67AB                 xor     al, al
DOSCODE:67AD
DOSCODE:67AD mkdir_ok:                               ; ...
DOSCODE:67AD                 jmp     SYS_RET_OK
DOSCODE:67B0 ; ---------------------------------------------------------------------------
DOSCODE:67B0
DOSCODE:67B0 $MKDIR:                                 ; ...
DOSCODE:67B0                 mov     ss:PATHNAMELEN, 67 ; DIRSTRLEN
DOSCODE:67B7
DOSCODE:67B7 mkdir_x:                                ; ...
DOSCODE:67B7                 mov     si, offset DOS_MKDIR
DOSCODE:67BA
DOSCODE:67BA DoDirCall:                              ; ...
DOSCODE:67BA                 mov     di, offset OPENBUF
DOSCODE:67BD                 push    si
DOSCODE:67BE                 mov     si, dx          ; get source
DOSCODE:67C0                 call    TransPath       ; go munge the path
DOSCODE:67C3                 pop     si
DOSCODE:67C4                 jnb     short MkDirCrack ; no errors, try path
DOSCODE:67C6
DOSCODE:67C6 MkErrP:                                 ; ...
DOSCODE:67C6                 mov     al, 3           ; error_path_not_found
DOSCODE:67C8
DOSCODE:67C8 MkErr:                                  ; ...
DOSCODE:67C8                 jmp     SYS_RET_ERR
DOSCODE:67CB ; ---------------------------------------------------------------------------
DOSCODE:67CB
DOSCODE:67CB MkDirCrack:                             ; ...
DOSCODE:67CB                 cmp     ss:CMETA, 0FFh  ; -1
DOSCODE:67D1                 jnz     short MkErrP
DOSCODE:67D3                 push    si
DOSCODE:67D4                 call    Check_PathLen   ; check path len > [PATNAMELEN]
DOSCODE:67D4                                         ; > 67 or 128
DOSCODE:67D7                 pop     si
DOSCODE:67D8                 jbe     short pathok
DOSCODE:67DA                 mov     al, 5           ; error_access_denied
DOSCODE:67DC                 jmp     short MkErr
DOSCODE:67DE ; ---------------------------------------------------------------------------
DOSCODE:67DE
DOSCODE:67DE pathok:                                 ; ...
DOSCODE:67DE                 call    si              ; go get file
DOSCODE:67E0                 jb      short MkErr     ; error
DOSCODE:67E2                 jmp     short mkdir_ok  ; ok
DOSCODE:67E4
DOSCODE:67E4 ; =============== S U B R O U T I N E =======================================
DOSCODE:67E4
DOSCODE:67E4
DOSCODE:67E4 Check_PathLen   proc near               ; ...
DOSCODE:67E4                 mov     si, ss:WFP_START
DOSCODE:67E4 Check_PathLen   endp
DOSCODE:67E4
DOSCODE:67E9
DOSCODE:67E9 ; =============== S U B R O U T I N E =======================================
DOSCODE:67E9
DOSCODE:67E9
DOSCODE:67E9 Check_PathLen2  proc near               ; ...
DOSCODE:67E9                 push    ss
DOSCODE:67EA                 pop     ds
DOSCODE:67EB                 assume ds:DOSCODE
DOSCODE:67EB                 push    cx
DOSCODE:67EC                 push    dx
DOSCODE:67ED                 call    DStrLen
DOSCODE:67F0                 pop     dx
DOSCODE:67F1                 cmp     cx, PATHNAMELEN
DOSCODE:67F5                 pop     cx
DOSCODE:67F6                 retn
DOSCODE:67F6 Check_PathLen2  endp
DOSCODE:67F6
DOSCODE:67F6 ; ---------------------------------------------------------------------------
DOSCODE:67F7 IOCTLJMPTABLE   dw offset ioctl_getset_data ; ...
DOSCODE:67F9                 dw offset ioctl_getset_data ; 1
DOSCODE:67FB                 dw offset ioctl_control_string ; 2
DOSCODE:67FD                 dw offset ioctl_control_string
DOSCODE:67FF                 dw offset ioctl_get_dev
DOSCODE:6801                 dw offset ioctl_get_dev ; 5
DOSCODE:6803                 dw offset ioctl_status
DOSCODE:6805                 dw offset ioctl_status
DOSCODE:6807                 dw offset ioctl_rem_media
DOSCODE:6809                 dw offset ioctl_drive_attr ; 9
DOSCODE:680B                 dw offset ioctl_handle_redir
DOSCODE:680D                 dw offset Set_Retry_Parameters
DOSCODE:680F                 dw offset GENERICIOCTLHANDLE ; 0Ch
DOSCODE:6811                 dw offset GENERICIOCTL  ; 0Dh
DOSCODE:6813                 dw offset ioctl_drive_owner
DOSCODE:6815                 dw offset ioctl_drive_owner
DOSCODE:6817                 dw offset GENERICIOCTLHANDLE ; query_handle_support
DOSCODE:6819                 dw offset GENERICIOCTL  ; query_device_support ; 11h
DOSCODE:681B
DOSCODE:681B ; =============== S U B R O U T I N E =======================================
DOSCODE:681B
DOSCODE:681B
DOSCODE:681B $IOCTL          proc near               ; ...
DOSCODE:681B
DOSCODE:681B ; FUNCTION CHUNK AT DOSCODE:450E SIZE 0000001C BYTES
DOSCODE:681B ; FUNCTION CHUNK AT DOSCODE:6AC7 SIZE 0000004A BYTES
DOSCODE:681B
DOSCODE:681B                 mov     si, ds          ; Stash DS for calls 2,3,4 and 5
DOSCODE:681D                 push    ss
DOSCODE:681E                 pop     ds
DOSCODE:681F                 cmp     al, 11h         ; al must be between 0 & 11h
DOSCODE:6821                 ja      short ioctl_bad_funj2
DOSCODE:6823                 mov     di, ax
DOSCODE:6825                 and     di, 0FFh
DOSCODE:6829                 add     di, di
DOSCODE:682B                 jmp     cs:IOCTLJMPTABLE[di]
DOSCODE:6830 ; ---------------------------------------------------------------------------
DOSCODE:6830
DOSCODE:6830 ioctl_bad_funj2:                        ; ...
DOSCODE:6830                 jmp     ioctl_bad_fun
DOSCODE:6833 ; ---------------------------------------------------------------------------
DOSCODE:6833
DOSCODE:6833 ioctl_getset_data:                      ; ...
DOSCODE:6833                 call    SFFromHandle
DOSCODE:6836                 jnb     short ioctl_check_permissions ; have valid handle
DOSCODE:6838
DOSCODE:6838 ioctl_bad_handle:                       ; ...
DOSCODE:6838                 mov     al, 6           ; error_invalid_handle
DOSCODE:683A
DOSCODE:683A ioctl_error:                            ; ...
DOSCODE:683A                 jmp     SYS_RET_ERR
DOSCODE:683D ; ---------------------------------------------------------------------------
DOSCODE:683D
DOSCODE:683D ioctl_check_permissions:                ; ...
DOSCODE:683D                 cmp     al, 0
DOSCODE:683F                 mov     al, es:[di+5]   ; [ES:DI+SF_ENTRY.sf_flags]
DOSCODE:6843                 jz      short ioctl_read
DOSCODE:6845                 or      dh, dh
DOSCODE:6847                 jz      short ioctl_check_device
DOSCODE:6849                 mov     al, 0Dh         ; error_invalid_data ; no DH <> 0
DOSCODE:684B                 jmp     short ioctl_error
DOSCODE:684D ; ---------------------------------------------------------------------------
DOSCODE:684D
DOSCODE:684D ioctl_check_device:                     ; ...
DOSCODE:684D                 test    al, 80h         ; devid_device  ; can I set this handle?
DOSCODE:684F                 jz      short ioctl_bad_funj2
DOSCODE:6851                 or      dl, 80h         ; devid_device
DOSCODE:6851                                         ; Make sure user doesn't
DOSCODE:6851                                         ; turn off the device bit!!
DOSCODE:6854                 call    set_exerr_locus_ser
DOSCODE:6857                 mov     es:[di+5], dl   ; [ES:DI+SF_ENTRY.sf_flags]
DOSCODE:685B
DOSCODE:685B ioctl_ok:                               ; ...
DOSCODE:685B                 jmp     SYS_RET_OK
DOSCODE:685E ; ---------------------------------------------------------------------------
DOSCODE:685E
DOSCODE:685E ioctl_read:                             ; ...
DOSCODE:685E                 call    set_exerr_locus_disk
DOSCODE:6861                 xor     ah, ah
DOSCODE:6863                 test    al, 80h         ; devid_device
DOSCODE:6865                 jz      short ioctl_no_high
DOSCODE:6867                 call    set_exerr_locus_ser
DOSCODE:686A                 les     di, es:[di+7]   ; [ES:DI+SF_ENTRY.sf_devptr]
DOSCODE:686A                                         ; Get device pointer
DOSCODE:686E                 mov     ah, es:[di+5]   ; [ES:DI+SYSDEV.ATT+1] ; Get high byte
DOSCODE:6872
DOSCODE:6872 ioctl_no_high:                          ; ...
DOSCODE:6872                 mov     dx, ax
DOSCODE:6874                 call    Get_User_Stack
DOSCODE:6877                 mov     [si+6], dx      ; [SI+user_env.user_DX]
DOSCODE:687A
DOSCODE:687A ioctl_ok_j:                             ; ...
DOSCODE:687A                 jmp     short ioctl_ok
DOSCODE:687C ; ---------------------------------------------------------------------------
DOSCODE:687C
DOSCODE:687C ioctl_control_string:                   ; ...
DOSCODE:687C                 call    SFFromHandle
DOSCODE:687F                 jb      short ioctl_bad_handle
DOSCODE:6881                 test    byte ptr es:[di+5], 80h ; [ES:DI+SF_ENTRY.sf_flags],
DOSCODE:6881                                         ; devid_device
DOSCODE:6886
DOSCODE:6886 ioctl_bad_funj:                         ; ...
DOSCODE:6886                 jz      short ioctl_bad_funj2
DOSCODE:6888                 call    set_exerr_locus_ser
DOSCODE:688B                 les     di, es:[di+7]   ; [ES:DI+SF_ENTRY.sf_devptr]
DOSCODE:688F                 xor     bl, bl
DOSCODE:6891                 jmp     ioctl_do_string
DOSCODE:6894 ; ---------------------------------------------------------------------------
DOSCODE:6894
DOSCODE:6894 ioctl_status:                           ; ...
DOSCODE:6894                 mov     ah, 1
DOSCODE:6896                 sub     al, 6           ; 6=0,7=1
DOSCODE:6898                 jz      short ioctl_get_status
DOSCODE:689A                 mov     ah, 3
DOSCODE:689C
DOSCODE:689C ioctl_get_status:                       ; ...
DOSCODE:689C                 push    ax
DOSCODE:689D                 call    GET_IO_SFT
DOSCODE:68A0                 pop     ax
DOSCODE:68A1                 jnb     short DO_IOFUNC
DOSCODE:68A3
DOSCODE:68A3 ioctl_bad_handle_j:                     ; ...
DOSCODE:68A3                 jmp     short ioctl_bad_handle ; invalid SFT
DOSCODE:68A5 ; ---------------------------------------------------------------------------
DOSCODE:68A5
DOSCODE:68A5 DO_IOFUNC:                              ; ...
DOSCODE:68A5                 call    IOFUNC
DOSCODE:68A8                 mov     ah, al
DOSCODE:68AA                 mov     al, 0FFh
DOSCODE:68AC                 jnz     short ioctl_status_ret
DOSCODE:68AE                 inc     al
DOSCODE:68B0
DOSCODE:68B0 ioctl_status_ret:                       ; ...
DOSCODE:68B0                 jmp     short ioctl_ok_j
DOSCODE:68B2 ; ---------------------------------------------------------------------------
DOSCODE:68B2
DOSCODE:68B2 Set_Retry_Parameters:                   ; ...
DOSCODE:68B2                 mov     RetryLoop, cx
DOSCODE:68B6                 or      dx, dx
DOSCODE:68B8                 jz      short ioctl_bad_funj
DOSCODE:68BA                 mov     RetryCount, dx
DOSCODE:68BE                 jmp     short ioctl_status_ret
DOSCODE:68C0 ; ---------------------------------------------------------------------------
DOSCODE:68C0
DOSCODE:68C0 GENERICIOCTLHANDLE:                     ; ...
DOSCODE:68C0                 call    SFFromHandle
DOSCODE:68C3                 jb      short ioctl_bad_handle_j
DOSCODE:68C5                 test    byte ptr es:[di+6], 80h ; [ES:DI+SF_ENTRY.sf_flags+1],
DOSCODE:68C5                                         ; (sf_isnet>>8)
DOSCODE:68CA                 jnz     short ioctl_bad_funj3
DOSCODE:68CC                 call    set_exerr_locus_ser
DOSCODE:68CF                 les     di, es:[di+7]   ; [es:di+SF_ENTRY.sf_devptr]
DOSCODE:68D3                 mov     IOCTL_drvnum, 0FFh ; invalidate drive number
DOSCODE:68D3                                         ; (for extended -lock/unlock- functions)
DOSCODE:68D8                 jmp     short Do_GenIOCTL
DOSCODE:68DA ; ---------------------------------------------------------------------------
DOSCODE:68DA
DOSCODE:68DA GENERICIOCTL:                           ; ...
DOSCODE:68DA                 call    set_exerr_locus_disk
DOSCODE:68DD                 cmp     ch, 48h         ; category (extended, disk lock/unlock)
DOSCODE:68E0                 jz      short GenIOCTL_chk_net ; extended (MSDOS/PCDOS 7)
DOSCODE:68E2                 cmp     ch, 8           ; IOC_DC ; category (disk control, normal)
DOSCODE:68E5                 jz      short GenIOCTL_chk_net ; Only disk devices are allowed to use
DOSCODE:68E5                                         ; Generic IOCTL
DOSCODE:68E7
DOSCODE:68E7 ioctl_bad_funj3:                        ; ...
DOSCODE:68E7                 jmp     ioctl_bad_fun   ; no handles with Generic IOCTL
DOSCODE:68EA ; ---------------------------------------------------------------------------
DOSCODE:68EA
DOSCODE:68EA GenIOCTL_chk_net:                       ; ...
DOSCODE:68EA                 mov     IOCTL_drvnum, bl ; drive number
DOSCODE:68EE                 call    Check_If_Net
DOSCODE:68F1                 jnz     short ioctl_bad_funj3
DOSCODE:68F3
DOSCODE:68F3 Do_GenIOCTL:                            ; ...
DOSCODE:68F3                 cmp     ch, 48h         ; category code 48h for FAT32
DOSCODE:68F6                 jz      short GenioCTL_extended ; MSDOS/PCDOS 7 functions
DOSCODE:68F6                                         ; (lock/unlock)
DOSCODE:68F8                 cmp     ch, 8           ; disk control (for FAT12/16)
DOSCODE:68FB                 jnz     short GenIOCTL_normal
DOSCODE:68FD
DOSCODE:68FD GenioCTL_extended:                      ; ...
DOSCODE:68FD                 cmp     cl, 6Ah         ; UNLOCK LOGICAL VOLUME
DOSCODE:6900                 jz      short GenIOCTL_chk_lock
DOSCODE:6902                 cmp     cl, 4Ah         ; LOCK LOGICAL VOLUME
DOSCODE:6905                 jnz     short GenIOCTL_normal
DOSCODE:6907
DOSCODE:6907 GenIOCTL_chk_lock:                      ; ...
DOSCODE:6907                 cmp     cl, 4Ah         ; LOCK LOGICAL VOLUME
DOSCODE:690A                 jnz     short GenIOCTL_lock_unlock
DOSCODE:690C                 cmp     bh, 4           ; lock level (0-4)
DOSCODE:690F                 jz      short GenIOCTL_lock_unlock
DOSCODE:6911                 or      bh, bh
DOSCODE:6913                 jnz     short ioctl_bad_fun
DOSCODE:6915
DOSCODE:6915 GenIOCTL_lock_unlock:                   ; ...
DOSCODE:6915                 mov     bl, IOCTL_drvnum ; drive number (1=A:, 2=B: ..)
DOSCODE:6919                 xor     bh, bh
DOSCODE:691B                 dec     bx
DOSCODE:691C                 cmp     bl, 26          ; logical disk number limit
DOSCODE:691F                 jnb     short ioctl_bad_fun
DOSCODE:6921                 cmp     cl, 6Ah         ; UNLOCK LOGICAL VOLUME
DOSCODE:6924                 jnz     short GenIOCTL_lock
DOSCODE:6926                 and     drive_flags[bx], 7Fh ; UNLOCK
DOSCODE:692B                 jmp     short GenIOCTL_OK
DOSCODE:692D ; ---------------------------------------------------------------------------
DOSCODE:692D
DOSCODE:692D GenIOCTL_lock:                          ; ...
DOSCODE:692D                 or      drive_flags[bx], 80h ; LOCK
DOSCODE:6932
DOSCODE:6932 GenIOCTL_OK:                            ; ...
DOSCODE:6932                 jmp     SYS_RET_OK
DOSCODE:6935 ; ---------------------------------------------------------------------------
DOSCODE:6935
DOSCODE:6935 GenIOCTL_normal:                        ; ...
DOSCODE:6935                 test    byte ptr es:[di+4], 40h ; [ES:DI+SYSDEV.ATT],DEV320
DOSCODE:693A                 jz      short ioctl_bad_fun
DOSCODE:693C                 mov     IOCALL_REQFUNC, 13h ; [IOCALL_REQFUNC],GENIOCTL ; 19
DOSCODE:6941                 cmp     al, 10h         ; IOCTL_QUERY_HANDLE
DOSCODE:6943                 jl      short SetIOCtlBlock
DOSCODE:6945                 test    byte ptr es:[di+4], 80h ; byte [ES:DI+SYSDEV.ATT],IOQUERY
DOSCODE:694A                 jz      short ioctl_bad_fun ; No support for query
DOSCODE:694C                 mov     IOCALL_REQFUNC, 19h ; IOCTL_QUERY
DOSCODE:6951
DOSCODE:6951 SetIOCtlBlock:                          ; ...
DOSCODE:6951                 push    es
DOSCODE:6952                 push    di
DOSCODE:6953                 mov     IOCALL, 17h     ; IOCTL_REQ.size ; 23
DOSCODE:6958                 mov     IOCALL_REQUNIT, bl
DOSCODE:695C                 mov     IOMED, ch       ; [IOCALL+IOCTL_REQ.MAJORFUNCTION]
DOSCODE:6960                 mov     byte ptr IOXAD, cl ; [IOCALL+IOCTL_REQ.MINORFUNCTION]
DOSCODE:6964                 mov     word ptr IOXAD+1, si ; [IOCALL+IOCTL_REQ.REG_SI]
DOSCODE:6968                 mov     word ptr IOXAD+3, di ; [IOCALL+IOCTL_REQ.REG_DI]
DOSCODE:696C                 mov     IOSCNT+1, dx    ; [IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET]
DOSCODE:6970                 mov     IOSSEC+1, si    ; [IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET+2]
DOSCODE:6974                 mov     bx, offset IOCALL
DOSCODE:6977                 push    ss
DOSCODE:6978                 pop     es
DOSCODE:6979                 assume es:DOSCODE
DOSCODE:6979                 pop     si
DOSCODE:697A                 pop     ds
DOSCODE:697B                 assume ds:nothing
DOSCODE:697B                 jmp     ioctl_do_IO
DOSCODE:697E ; ---------------------------------------------------------------------------
DOSCODE:697E
DOSCODE:697E ioctl_bad_fun:                          ; ...
DOSCODE:697E                 mov     al, 1           ; error_invalid_function
DOSCODE:6980                 jmp     SYS_RET_ERR
DOSCODE:6983 ; ---------------------------------------------------------------------------
DOSCODE:6983                 jmp     ioctl_bad_handle
DOSCODE:6986 ; ---------------------------------------------------------------------------
DOSCODE:6986
DOSCODE:6986 ioctl_rem_media:                        ; ...
DOSCODE:6986                 call    Check_If_Net
DOSCODE:6989                 jnz     short ioctl_bad_fun
DOSCODE:698B                 test    byte ptr es:[di+5], 8 ; [es:di+SYSDEV.ATT+1],(DEVOPCL>>8)
DOSCODE:6990                 jz      short ioctl_bad_fun
DOSCODE:6992                 mov     ss:IOCALL_REQFUNC, 0Fh ; DEVRMD
DOSCODE:6998                 mov     al, 0Dh         ; REMHL
DOSCODE:699A                 mov     ah, bl
DOSCODE:699C                 mov     word ptr ss:IOCALL, ax ; [SS:IOCALL_REQLEN]
DOSCODE:69A0                 xor     ax, ax
DOSCODE:69A2                 mov     ss:IOCALL_REQSTAT, ax
DOSCODE:69A6                 push    es
DOSCODE:69A7                 pop     ds
DOSCODE:69A8                 assume ds:DOSCODE
DOSCODE:69A8                 mov     si, di
DOSCODE:69AA                 push    ss
DOSCODE:69AB                 pop     es
DOSCODE:69AC                 mov     bx, offset IOCALL
DOSCODE:69AF                 push    ds
DOSCODE:69B0                 push    si
DOSCODE:69B1                 call    DEVIOCALL2
DOSCODE:69B4                 pop     si
DOSCODE:69B5                 pop     ds
DOSCODE:69B6                 assume ds:nothing
DOSCODE:69B6                 mov     ax, ss:IOCALL_REQSTAT
DOSCODE:69BA                 and     ah, 2           ; STBUI>>8
DOSCODE:69BD                 mov     cl, 9
DOSCODE:69BF                 shr     ax, cl
DOSCODE:69C1
DOSCODE:69C1 ioctl_da_ok_j:                          ; ...
DOSCODE:69C1                 jmp     SYS_RET_OK
DOSCODE:69C4 ; ---------------------------------------------------------------------------
DOSCODE:69C4
DOSCODE:69C4 ioctl_drive_attr:                       ; ...
DOSCODE:69C4                 mov     al, bl
DOSCODE:69C6                 call    GETTHISDRV
DOSCODE:69C9                 jb      short ioctl_drv_err
DOSCODE:69CB                 call    Get_Driver_BL
DOSCODE:69CE                 jb      short ioctl_drv_err ; drive not valid
DOSCODE:69D0                 mov     dx, 942h        ; 0942h -> Attribute word
DOSCODE:69D0                                         ; bit 11 - open/close/remmedia calls supported
DOSCODE:69D0                                         ; bit 8 - (new type driver)
DOSCODE:69D0                                         ; bit 6 - Generic IOCTL call supported
DOSCODE:69D0                                         ; bit 1 - driver supports 32-bit sector addressing
DOSCODE:69D3                 jnz     short ioctl_drive_attr2 ; NET device
DOSCODE:69D5                 mov     dx, es:[di+4]   ; [es:di+SYSDEV.ATT]
DOSCODE:69D5                                         ; get device attribute word
DOSCODE:69D9
DOSCODE:69D9 ioctl_drive_attr2:                      ; ...
DOSCODE:69D9                 mov     bl, al          ; drive number (A=0)
DOSCODE:69DB                 les     di, ss:THISCDS  ; NOTE: PCDOS 7.1 has bug here,
DOSCODE:69DB                                         ; ds must be same with ss here...
DOSCODE:69DB                                         ; because there is 'les di, [ds:THISCDS]' in
DOSCODE:69DB                                         ; Get_Driver_BL
DOSCODE:69DB                                         ; and a second 'test byte ptr es:[ di+44h],80h'
DOSCODE:69DB                                         ; is not necessary; also its result (jnz)
DOSCODE:69DB                                         ; overwrites DS. /// Erdogan Tan - 30/01/2024
DOSCODE:69E0                 assume es:nothing
DOSCODE:69E0                 test    byte ptr es:[di+44h], 80h ; [ES:DI+curdir.flags+1],
DOSCODE:69E0                                         ; (curdir_isnet>>8)
DOSCODE:69E5                 jz      short IOCTLShare
DOSCODE:69E7                 mov     dx, 1000h       ; remote device (bit 12)
DOSCODE:69EA
DOSCODE:69EA IOCTLShare:                             ; ...
DOSCODE:69EA                 push    ss
DOSCODE:69EB                 pop     ds
DOSCODE:69EC                 assume ds:DOSCODE
DOSCODE:69EC                 mov     si, offset OPENBUF
DOSCODE:69EF                 add     bl, 41h ; 'A'
DOSCODE:69F2                 mov     [si], bl
DOSCODE:69F4                 mov     word ptr [si+1], 3Ah ; ':'
DOSCODE:69F9                 mov     ax, 300h
DOSCODE:69FC                 clc
DOSCODE:69FD                 int     2Ah             ; Microsoft Networks - CHECK DIRECT I/O
DOSCODE:69FD                                         ; DS:SI -> ASCIZ disk device name (may be full path or only drive
DOSCODE:69FD                                         ; specifier--must include the colon)
DOSCODE:69FD                                         ; Return: CF clear if absolute disk access allowed
DOSCODE:69FF                 jnb     short IOCTLLocal
DOSCODE:6A01                 or      dx, 200h        ; Shared, bit 9
DOSCODE:6A05
DOSCODE:6A05 IOCTLLocal:                             ; ...
DOSCODE:6A05                 test    byte ptr es:[di+44h], 10h ; [ES:DI+curdir.flags+1],(curdir_local>>8)
DOSCODE:6A0A                 jz      short ioctl_set_DX
DOSCODE:6A0C                 or      dx, 8000h
DOSCODE:6A10
DOSCODE:6A10 ioctl_set_DX:                           ; ...
DOSCODE:6A10                 call    Get_User_Stack
DOSCODE:6A13                 mov     [si+6], dx
DOSCODE:6A16
DOSCODE:6A16 ioctl_gd_ok_j:                          ; ...
DOSCODE:6A16                 jmp     short ioctl_da_ok_j
DOSCODE:6A18 ; ---------------------------------------------------------------------------
DOSCODE:6A18
DOSCODE:6A18 ioctl_drv_err:                          ; ...
DOSCODE:6A18                 mov     al, 0Fh         ; error_invalid_drive
DOSCODE:6A1A
DOSCODE:6A1A ioctl_gd_err_j:                         ; ...
DOSCODE:6A1A                 jmp     SYS_RET_ERR
DOSCODE:6A1D ; ---------------------------------------------------------------------------
DOSCODE:6A1D
DOSCODE:6A1D ioctl_handle_redir:                     ; ...
DOSCODE:6A1D                 call    SFFromHandle    ; ES:DI -> SFT
DOSCODE:6A20                 jnb     short ioctl_got_sft ; have valid handle
DOSCODE:6A22                 jmp     ioctl_bad_handle
DOSCODE:6A25 ; ---------------------------------------------------------------------------
DOSCODE:6A25
DOSCODE:6A25 ioctl_got_sft:                          ; ...
DOSCODE:6A25                 mov     dx, es:[di+5]   ; [ES:DI+SF_ENTRY.sf_flags] ; Get flags
DOSCODE:6A29                 jmp     short ioctl_set_DX
DOSCODE:6A2B ; ---------------------------------------------------------------------------
DOSCODE:6A2B
DOSCODE:6A2B ioctl_bad_funj5:                        ; ...
DOSCODE:6A2B                 jmp     ioctl_bad_fun
DOSCODE:6A2E ; ---------------------------------------------------------------------------
DOSCODE:6A2E
DOSCODE:6A2E ioctl_get_dev:                          ; ...
DOSCODE:6A2E                 call    Check_If_Net
DOSCODE:6A31                 jnz     short ioctl_bad_funj5
DOSCODE:6A33
DOSCODE:6A33 ioctl_do_string:                        ; ...
DOSCODE:6A33                 test    byte ptr es:[di+5], 40h ; [ES:DI+SYSDEV.ATT+1],(DEVIOCTL>>8)
DOSCODE:6A38                 jz      short ioctl_bad_funj5
DOSCODE:6A3A                 mov     IOCALL_REQFUNC, 3 ; DEVRDIOCTL ; IOCTL read
DOSCODE:6A3F                 test    al, 1
DOSCODE:6A41                 jz      short ioctl_control_call
DOSCODE:6A43                 mov     IOCALL_REQFUNC, 0Ch ; DEVWRIOCTL ; IOCTL write
DOSCODE:6A48
DOSCODE:6A48 ioctl_control_call:                     ; ...
DOSCODE:6A48                 mov     al, 20          ; It is 22 in
DOSCODE:6A48                                         ; MSDOS 6.22 MSDOS.SYS and Windows ME IO.SYS
DOSCODE:6A4A                 mov     ah, bl
DOSCODE:6A4C                 mov     word ptr IOCALL, ax ; [IOCALL_REQLEN]
DOSCODE:6A4F                 xor     ax, ax
DOSCODE:6A51                 mov     IOCALL_REQSTAT, ax ; [IOCALL_REQSTAT]
DOSCODE:6A54                 mov     IOMED, al
DOSCODE:6A57                 mov     IOSCNT, cx
DOSCODE:6A5B                 mov     word ptr IOXAD, dx
DOSCODE:6A5F                 mov     word ptr IOXAD+2, si
DOSCODE:6A63                 push    es
DOSCODE:6A64                 pop     ds
DOSCODE:6A65                 assume ds:nothing
DOSCODE:6A65                 mov     si, di
DOSCODE:6A67                 push    ss
DOSCODE:6A68                 pop     es
DOSCODE:6A69                 assume es:DOSCODE
DOSCODE:6A69                 mov     bx, offset IOCALL
DOSCODE:6A6C
DOSCODE:6A6C ioctl_do_IO:                            ; ...
DOSCODE:6A6C                 call    DEVIOCALL2
DOSCODE:6A6F                 test    byte ptr ss:IOCALL_REQSTAT+1, 80h ; (STERR>>8)
DOSCODE:6A75                 jnz     short ioctl_string_err
DOSCODE:6A77                 mov     ax, ss:IOSCNT
DOSCODE:6A7B                 jmp     short ioctl_gd_ok_j
DOSCODE:6A7D ; ---------------------------------------------------------------------------
DOSCODE:6A7D
DOSCODE:6A7D ioctl_string_err:                       ; ...
DOSCODE:6A7D                 mov     di, ss:IOCALL_REQSTAT
DOSCODE:6A82                 and     di, 0FFh        ; STECODE
DOSCODE:6A86                 mov     ax, di
DOSCODE:6A88                 call    SET_I24_EXTENDED_ERROR
DOSCODE:6A8B                 mov     ax, ss:EXTERR
DOSCODE:6A8F                 jmp     short ioctl_gd_err_j
DOSCODE:6A8F $IOCTL          endp
DOSCODE:6A8F
DOSCODE:6A91
DOSCODE:6A91 ; =============== S U B R O U T I N E =======================================
DOSCODE:6A91
DOSCODE:6A91
DOSCODE:6A91 Get_Driver_BL   proc near               ; ...
DOSCODE:6A91                 push    ax
DOSCODE:6A92                 mov     al, bl          ; drive number (0=default)
DOSCODE:6A94                 call    GETTHISDRV
DOSCODE:6A97                 jb      short ioctl_bad_drv
DOSCODE:6A99                 xor     bl, bl
DOSCODE:6A9B                 mov     ds:EXTERR_LOCUS, 3 ; errLOC_Net
DOSCODE:6AA0                 les     di, ds:THISCDS
DOSCODE:6AA4                 assume es:nothing
DOSCODE:6AA4                 test    byte ptr es:[di+44h], 80h ; [ES:DI+curdir.flags+1],
DOSCODE:6AA4                                         ; (curdir_isnet>>8)
DOSCODE:6AA9                 les     di, es:[di+45h] ; [ES:DI+curdir.devptr]
DOSCODE:6AAD                 jnz     short got_dev_ptr ; Is net
DOSCODE:6AAF                 call    set_exerr_locus_disk ; mov byte [EXTERR_LOCUS],errLOC_Disk ; 2
DOSCODE:6AB2                 mov     bl, es:[di+1]   ; [ES:DI+DPB.UNIT] ; Unit number
DOSCODE:6AB6                 les     di, es:[di+13h] ; [ES:DI+DPB.DRIVER_ADDR] ; Driver addr
DOSCODE:6ABA
DOSCODE:6ABA got_dev_ptr:                            ; ...
DOSCODE:6ABA                 clc
DOSCODE:6ABB
DOSCODE:6ABB ioctl_bad_drv:                          ; ...
DOSCODE:6ABB                 pop     ax
DOSCODE:6ABC                 retn
DOSCODE:6ABC Get_Driver_BL   endp
DOSCODE:6ABC
DOSCODE:6ABD
DOSCODE:6ABD ; =============== S U B R O U T I N E =======================================
DOSCODE:6ABD
DOSCODE:6ABD
DOSCODE:6ABD Check_If_Net    proc near               ; ...
DOSCODE:6ABD                 call    Get_Driver_BL
DOSCODE:6AC0                 jb      short ioctl_drv_err_pop ; invalid drive letter
DOSCODE:6AC2                 retn                    ; ZF = 1 if not a net device
DOSCODE:6AC3 ; ---------------------------------------------------------------------------
DOSCODE:6AC3
DOSCODE:6AC3 ioctl_drv_err_pop:                      ; ...
DOSCODE:6AC3                 pop     ax
DOSCODE:6AC4                 jmp     ioctl_drv_err
DOSCODE:6AC4 Check_If_Net    endp ; sp-analysis failed
DOSCODE:6AC4
DOSCODE:6AC7 ; ---------------------------------------------------------------------------
DOSCODE:6AC7 ; START OF FUNCTION CHUNK FOR $IOCTL
DOSCODE:6AC7
DOSCODE:6AC7 ioctl_bad_funj4:                        ; ...
DOSCODE:6AC7                 jmp     ioctl_bad_fun
DOSCODE:6ACA ; ---------------------------------------------------------------------------
DOSCODE:6ACA
DOSCODE:6ACA ioctl_string_errj:                      ; ...
DOSCODE:6ACA                 jmp     short ioctl_string_err
DOSCODE:6ACC ; ---------------------------------------------------------------------------
DOSCODE:6ACC
DOSCODE:6ACC ioctl_drive_owner:                      ; ...
DOSCODE:6ACC                 call    Check_If_Net
DOSCODE:6ACF                 jnz     short ioctl_bad_funj4
DOSCODE:6AD1                 test    byte ptr es:[di+4], 40h ; [ES:DI+SYSDEV.ATT],DEV320
DOSCODE:6AD6                 jz      short ioctl_bad_funj4
DOSCODE:6AD8                 mov     ds:IOCALL_REQFUNC, 23 ; DEVGETOWN ; default to get owner
DOSCODE:6ADD                 cmp     al, 0Eh         ; Get Owner ?
DOSCODE:6ADF                 jz      short GetOwner
DOSCODE:6AE1                 mov     ds:IOCALL_REQFUNC, 24 ; DEVSETOWN
DOSCODE:6AE6
DOSCODE:6AE6 GetOwner:                               ; ...
DOSCODE:6AE6                 mov     al, 0Dh         ; OWNHL
DOSCODE:6AE8                 mov     ah, bl          ; Unit number
DOSCODE:6AEA                 mov     word ptr ds:IOCALL, ax ; [IOCALL_REQLEN]
DOSCODE:6AED                 xor     ax, ax
DOSCODE:6AEF                 mov     ds:IOCALL_REQSTAT, ax
DOSCODE:6AF2                 push    es
DOSCODE:6AF3                 pop     ds
DOSCODE:6AF4                 mov     si, di          ; DS:SI -> driver
DOSCODE:6AF6                 push    ss
DOSCODE:6AF7                 pop     es
DOSCODE:6AF8                 assume es:DOSCODE
DOSCODE:6AF8                 mov     bx, offset IOCALL ; ES:BX -> Call header
DOSCODE:6AFB                 push    ds
DOSCODE:6AFC                 push    si
DOSCODE:6AFD                 call    DEVIOCALL2
DOSCODE:6B00                 pop     si
DOSCODE:6B01                 pop     ds
DOSCODE:6B02                 test    byte ptr ss:IOCALL_REQSTAT+1, 80h ; (STERR>>8)
DOSCODE:6B08                 jnz     short ioctl_string_errj
DOSCODE:6B0A                 mov     al, ss:IOCALL_REQUNIT ; Get owner returned by device
DOSCODE:6B0A                                         ; owner returned is 1-based.
DOSCODE:6B0E                 jmp     SYS_RET_OK
DOSCODE:6B0E ; END OF FUNCTION CHUNK FOR $IOCTL
DOSCODE:6B11
DOSCODE:6B11 ; =============== S U B R O U T I N E =======================================
DOSCODE:6B11
DOSCODE:6B11
DOSCODE:6B11 DOS_DELETE      proc near               ; ...
DOSCODE:6B11                 call    TestNet
DOSCODE:6B14                 jnb     short LOCAL_DELETE
DOSCODE:6B16                 mov     ax, 1113h
DOSCODE:6B19                 int     2Fh             ; Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE
DOSCODE:6B19                                         ; SS = DS = DOS CS, SDA first filename pointer -> fully-qualified filename in DOS CS
DOSCODE:6B19                                         ; SDA CDS pointer -> current directory structure for drive with file
DOSCODE:6B19                                         ; Return: CF set on error
DOSCODE:6B1B                 retn
DOSCODE:6B1C ; ---------------------------------------------------------------------------
DOSCODE:6B1C
DOSCODE:6B1C LOCAL_DELETE:                           ; ...
DOSCODE:6B1C                 mov     ds:FOUNDDEL, 0  ; No files found and no files deleted
DOSCODE:6B21                 call    ECritDisk
DOSCODE:6B24                 mov     word ptr ds:CREATING, 0E500h ; DIRFREE*256+0 ; Assume not del *.*
DOSCODE:6B2A                 mov     si, ds:WFP_START
DOSCODE:6B2E
DOSCODE:6B2E SKPNUL:                                 ; ...
DOSCODE:6B2E                 lodsb
DOSCODE:6B2F                 or      al, al
DOSCODE:6B31                 jnz     short SKPNUL    ; go to end
DOSCODE:6B33                 sub     si, 4           ; Back over possible "*.*"
DOSCODE:6B36                 cmp     word ptr [si], 2E2Ah ; "*."
DOSCODE:6B3A                 jnz     short TEST_QUEST
DOSCODE:6B3C                 cmp     byte ptr [si+2], 2Ah ; '*'
DOSCODE:6B40                 jz      short CHECK_ATTS
DOSCODE:6B42
DOSCODE:6B42 TEST_QUEST:                             ; ...
DOSCODE:6B42                 sub     si, 9           ; Back over possible "????????.???"
DOSCODE:6B45                 xchg    di, si
DOSCODE:6B47                 push    ss
DOSCODE:6B48                 pop     es
DOSCODE:6B49                 mov     ax, 3F3Fh       ; '??'
DOSCODE:6B4C                 mov     cx, 4           ; four sets of "??"
DOSCODE:6B4F                 repe scasw
DOSCODE:6B51                 jnz     short NOT_ALL
DOSCODE:6B53                 xchg    di, si
DOSCODE:6B55                 lodsw
DOSCODE:6B56                 cmp     ax, 3F2Eh       ; ".?"
DOSCODE:6B59                 jnz     short NOT_ALL
DOSCODE:6B5B                 lodsw
DOSCODE:6B5C                 cmp     ax, '??'        ; 3F3Fh
DOSCODE:6B5F                 jnz     short NOT_ALL
DOSCODE:6B61
DOSCODE:6B61 CHECK_ATTS:                             ; ...
DOSCODE:6B61                 mov     al, ds:SATTRIB
DOSCODE:6B64                 and     al, 1Fh         ; attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
DOSCODE:6B64                                         ; Look only at hidden bits
DOSCODE:6B66                 cmp     al, 1Fh
DOSCODE:6B68                 jnz     short NOT_ALL
DOSCODE:6B6A                 mov     ds:DELALL, 0    ; DEL *.* - flag deleting all
DOSCODE:6B6F
DOSCODE:6B6F NOT_ALL:                                ; ...
DOSCODE:6B6F                 mov     ds:NoSetDir, 1
DOSCODE:6B74                 call    GetPathNoSet
DOSCODE:6B77                 jnb     short Del_found ; [CURBUF+2]:SI = First Cluster field in dir entry
DOSCODE:6B77                                         ; [CURBUF+2]:BX = Directory entry
DOSCODE:6B79                 jnz     short _bad_path
DOSCODE:6B7B                 or      cl, cl
DOSCODE:6B7D                 jz      short _bad_path
DOSCODE:6B7F
DOSCODE:6B7F No_file:                                ; ...
DOSCODE:6B7F                 mov     ax, 2           ; error_file_not_found
DOSCODE:6B82
DOSCODE:6B82 ErrorReturn:                            ; ...
DOSCODE:6B82                 stc
DOSCODE:6B83                 jmp     No_Set_Flag
DOSCODE:6B86 ; ---------------------------------------------------------------------------
DOSCODE:6B86
DOSCODE:6B86 _bad_path:                              ; ...
DOSCODE:6B86                 mov     ax, 3           ; error_path_not_found
DOSCODE:6B89                 jmp     short ErrorReturn
DOSCODE:6B8B ; ---------------------------------------------------------------------------
DOSCODE:6B8B
DOSCODE:6B8B Del_found:                              ; ...
DOSCODE:6B8B                 jnz     short NOT_DIR   ; Check for dir specified
DOSCODE:6B8D                 cmp     ds:DELALL, 0    ; DelAll = 0 allows delete of dir.
DOSCODE:6B92                 jz      short NOT_DIR
DOSCODE:6B94
DOSCODE:6B94 Del_access_err:                         ; ...
DOSCODE:6B94                 mov     ax, 5
DOSCODE:6B97                 jmp     short ErrorReturn
DOSCODE:6B99 ; ---------------------------------------------------------------------------
DOSCODE:6B99
DOSCODE:6B99 NOT_DIR:                                ; ...
DOSCODE:6B99                 or      ah, ah          ; Check if device name
DOSCODE:6B9B                 js      short Del_access_err ; Can't delete I/O devices
DOSCODE:6B9D
DOSCODE:6B9D DELFILE:                                ; ...
DOSCODE:6B9D                 or      ds:FOUNDDEL, 1  ; FILEFOUND ; file found, not deleted yet
DOSCODE:6BA2                 push    ds
DOSCODE:6BA3                 mov     ah, ds:DELALL
DOSCODE:6BA7                 lds     di, ds:CURBUF
DOSCODE:6BAB                 test    ss:ATTRIB, 1    ; attr_read_only ; are we deleting RO files too?
DOSCODE:6BB1                 jnz     short DoDelete
DOSCODE:6BB3                 test    byte ptr [bx+0Bh], 1 ; [BX+dir_entry.dir_attr],attr_read_only
DOSCODE:6BB7                 jz      short DoDelete  ; not read only
DOSCODE:6BB9
DOSCODE:6BB9 Skip_it:                                ; ...
DOSCODE:6BB9                 pop     ds
DOSCODE:6BBA                 jmp     short DELNXT    ; Skip it (Note ES:BP not set)
DOSCODE:6BBC ; ---------------------------------------------------------------------------
DOSCODE:6BBC
DOSCODE:6BBC DoDelete:                               ; ...
DOSCODE:6BBC                 call    REN_DEL_Check   ; Sets ES:BP = [THISDPB]
DOSCODE:6BBF                 jb      short Skip_it
DOSCODE:6BC1
DOSCODE:6BC1 DEL_SHARE_OK:                           ;
DOSCODE:6BC1                 test    byte ptr [di+5], 40h ; [DI+BUFFINFO.buf_flags],buf_dirty
DOSCODE:6BC5                 jnz     short yesdirty
DOSCODE:6BC7                 call    INC_DIRTY_COUNT
DOSCODE:6BCA                 or      byte ptr [di+5], 40h ; [DI+BUFFINFO.buf_flags],buf_dirty
DOSCODE:6BCE
DOSCODE:6BCE yesdirty:                               ; ...
DOSCODE:6BCE                 mov     [bx], ah        ; [BX+dir_entry.dir_name],AH ; Put in E5h or 0
DOSCODE:6BD0                 xor     bx, bx
DOSCODE:6BD2                 cmp     es:[bp+0Fh], bx
DOSCODE:6BD6                 jnz     short yesdirty_fc_1 ; not FAT32
DOSCODE:6BD8                 mov     bx, [si-6]      ; high word of the first cluster (FAT32)
DOSCODE:6BDB
DOSCODE:6BDB yesdirty_fc_1:                          ; ...
DOSCODE:6BDB                 mov     ss:CLUSTNUM_HW, bx
DOSCODE:6BE0                 mov     bx, [si]
DOSCODE:6BE2                 pop     ds
DOSCODE:6BE3                 or      ds:FOUNDDEL, 10h ; FILEDELETED
DOSCODE:6BE8                 cmp     ds:CLUSTNUM_HW, 0
DOSCODE:6BED                 jnz     short yesdirty_fc_2
DOSCODE:6BEF                 cmp     bx, 2
DOSCODE:6BF2
DOSCODE:6BF2 yesdirty_fc_2:                          ; ...
DOSCODE:6BF2                 jb      short DELNXT    ; File has invalid FIRCLUS (too small)
DOSCODE:6BF4                 cmp     word ptr es:[bp+0Fh], 0 ; [es:bp+DPB.FAT_SIZE]
DOSCODE:6BF9                 jnz     short yesdirty_fc_3
DOSCODE:6BFB                 push    bx
DOSCODE:6BFC                 mov     bx, ds:CLUSTNUM_HW
DOSCODE:6C00                 cmp     bx, es:[bp+2Fh]
DOSCODE:6C04                 pop     bx
DOSCODE:6C05                 jnz     short yesdirty_fc_4
DOSCODE:6C07                 cmp     bx, es:[bp+2Dh]
DOSCODE:6C0B                 jmp     short yesdirty_fc_4
DOSCODE:6C0D ; ---------------------------------------------------------------------------
DOSCODE:6C0D
DOSCODE:6C0D yesdirty_fc_3:                          ; ...
DOSCODE:6C0D                 cmp     bx, es:[bp+0Dh] ; [ES:BP+DPB.MAX_CLUSTER]
DOSCODE:6C11
DOSCODE:6C11 yesdirty_fc_4:                          ; ...
DOSCODE:6C11                 ja      short DELNXT    ; File has invalid FIRCLUS (too big)
DOSCODE:6C13                 call    RELEASE         ; Free file data
DOSCODE:6C16                 jb      short No_fileJ
DOSCODE:6C18                 call    FastOpen_Delete
DOSCODE:6C1B
DOSCODE:6C1B DELNXT:                                 ; ...
DOSCODE:6C1B                 les     bp, ds:THISDPB
DOSCODE:6C1F                 assume es:nothing
DOSCODE:6C1F                 call    GETENTRY        ; Registers need to be reset
DOSCODE:6C22                 jb      short No_fileJ
DOSCODE:6C24                 call    NEXTENT
DOSCODE:6C27                 jb      short DELNXT2
DOSCODE:6C29                 jmp     DELFILE
DOSCODE:6C2C ; ---------------------------------------------------------------------------
DOSCODE:6C2C
DOSCODE:6C2C DELNXT2:                                ; ...
DOSCODE:6C2C                 les     bp, ds:THISDPB
DOSCODE:6C30                 call    update_fat32_fsinfo
DOSCODE:6C33                 mov     al, es:[bp+0]   ; [ES:BP+DPB.DRIVE]
DOSCODE:6C37                 call    FLUSHBUF
DOSCODE:6C3A                 jb      short No_fileJ
DOSCODE:6C3C                 test    ds:FOUNDDEL, 10h ; FILEDELETE
DOSCODE:6C41                 jz      short DelError
DOSCODE:6C43                 test    ds:ATTRIB, 8    ; attr_volume_id
DOSCODE:6C48                 jz      short No_Set_Flag
DOSCODE:6C4A                 push    ax
DOSCODE:6C4B                 push    es
DOSCODE:6C4C                 push    di
DOSCODE:6C4D                 les     di, ds:THISCDS
DOSCODE:6C51                 xor     bh, bh
DOSCODE:6C53                 mov     ah, es:[di]     ; Get drive
DOSCODE:6C56                 sub     ah, 'A'         ; Convert to 0-based
DOSCODE:6C59                 mov     ds:VOLCHNG_FLAG, ah
DOSCODE:6C5D                 call    Set_Media_ID
DOSCODE:6C60                 call    FATREAD_CDS     ; force media check
DOSCODE:6C63                 pop     di
DOSCODE:6C64                 pop     es
DOSCODE:6C65                 pop     ax
DOSCODE:6C66
DOSCODE:6C66 No_Set_Flag:                            ; ...
DOSCODE:6C66                 call    LCritDisk
DOSCODE:6C69                 retn
DOSCODE:6C6A ; ---------------------------------------------------------------------------
DOSCODE:6C6A
DOSCODE:6C6A DelError:                               ; ...
DOSCODE:6C6A                 test    ds:FOUNDDEL, 1  ; FILEFOUND ; not deleted. Did we find file?
DOSCODE:6C6F                 jnz     short Del_access_errJ ; yes. Access denied
DOSCODE:6C71
DOSCODE:6C71 No_fileJ:                               ; ...
DOSCODE:6C71                 jmp     No_file         ; Nope
DOSCODE:6C74 ; ---------------------------------------------------------------------------
DOSCODE:6C74
DOSCODE:6C74 Del_access_errJ:                        ; ...
DOSCODE:6C74                 jmp     Del_access_err
DOSCODE:6C74 DOS_DELETE      endp
DOSCODE:6C74
DOSCODE:6C77
DOSCODE:6C77 ; =============== S U B R O U T I N E =======================================
DOSCODE:6C77
DOSCODE:6C77
DOSCODE:6C77 REN_DEL_Check   proc near               ; ...
DOSCODE:6C77                 push    ds              ; check for access for rename and delete
DOSCODE:6C78                 push    di
DOSCODE:6C79                 push    ax
DOSCODE:6C7A                 push    bx
DOSCODE:6C7B                 push    si
DOSCODE:6C7C                 push    ss
DOSCODE:6C7D                 pop     es
DOSCODE:6C7E                 assume es:DOSCODE
DOSCODE:6C7E                 mov     di, ss:WFP_START ; points to name
DOSCODE:6C83                 mov     si, bx
DOSCODE:6C85                 mov     ds, word ptr ss:CURBUF+2
DOSCODE:6C8A                 assume ds:DOSCODE
DOSCODE:6C8A                 mov     bx, di          ; Set backup limit for skipback
DOSCODE:6C8C                 inc     bx              ; Skip over d: to point to leading '\'
DOSCODE:6C8D                 inc     bx
DOSCODE:6C8E                 call    StrLen          ; CX is length of ES:DI including NUL
DOSCODE:6C91                 dec     cx              ; Don't include nul in count
DOSCODE:6C92                 add     di, cx          ; Point to NUL at end of string
DOSCODE:6C94                 call    SkipBack        ; Back up one element
DOSCODE:6C97                 inc     di              ; Point to start of last element
DOSCODE:6C98                 mov     ss:SAVE_BX, di  ; save for DOS_RENAME
DOSCODE:6C9D                 call    PackName        ; Transfer name from entry to ASCIZ tail.
DOSCODE:6CA0                 pop     si              ; Get back entry pointers
DOSCODE:6CA1                 pop     bx
DOSCODE:6CA2                 push    bx
DOSCODE:6CA3                 push    si              ; Back on stack
DOSCODE:6CA4                 push    ss
DOSCODE:6CA5                 pop     ds
DOSCODE:6CA6                 push    es              ; (not necessary) ; 31/01/2024
DOSCODE:6CA7                 push    di
DOSCODE:6CA8                 call    ShCloseFile     ; Call far [JShare+(13*4)] ; 13 = ShCloseFile
DOSCODE:6CAC                 cmp     fShare, 0FFh
DOSCODE:6CB1                 jnz     short rdc_1
DOSCODE:6CB3                 mov     word ptr THISSFT+2, es
DOSCODE:6CB7                 mov     word ptr THISSFT, di
DOSCODE:6CBB                 jmp     short rdc_2
DOSCODE:6CBD ; ---------------------------------------------------------------------------
DOSCODE:6CBD
DOSCODE:6CBD rdc_1:                                  ; ...
DOSCODE:6CBD                 mov     word ptr THISSFT+2, ds
DOSCODE:6CC1                 mov     word ptr THISSFT, 765h ; AUXSTACK-SF_ENTRY.size
DOSCODE:6CC1                                         ; RENAMEDMA+(384-59)
DOSCODE:6CC7
DOSCODE:6CC7 rdc_2:                                  ; ...
DOSCODE:6CC7                 pop     di
DOSCODE:6CC8                 pop     es
DOSCODE:6CC9                 assume es:nothing
DOSCODE:6CC9                 xor     ah, ah          ; Indicate file to DOOPEN (high bit off)
DOSCODE:6CCB                 call    DOOPEN          ; Fill in SFT for share check
DOSCODE:6CCE                 les     di, THISSFT
DOSCODE:6CD2                 mov     word ptr es:[di+2], 10h ; [ES:DI+SF_ENTRY.sf_mode],SHARING_DENY_BOTH
DOSCODE:6CD2                                         ; requires exclusive access
DOSCODE:6CD8                 mov     word ptr es:[di], 1 ; [ES:DI+SF_ENTRY.sf_ref_count],1 ; Pretend open
DOSCODE:6CDD                 call    ShareEnter
DOSCODE:6CE0                 jb      short CheckDone
DOSCODE:6CE2                 les     di, THISSFT
DOSCODE:6CE6                 mov     word ptr es:[di], 0 ; [ES:DI+SF_ENTRY.sf_ref_count]
DOSCODE:6CE6                                         ; Pretend closed and free
DOSCODE:6CEB                 call    ShareEnd        ; Tell sharer we're done with THISSFT
DOSCODE:6CEE                 clc
DOSCODE:6CEF
DOSCODE:6CEF CheckDone:                              ; ...
DOSCODE:6CEF                 les     bp, THISDPB
DOSCODE:6CF3                 pop     si
DOSCODE:6CF4                 pop     bx
DOSCODE:6CF5                 pop     ax
DOSCODE:6CF6                 pop     di
DOSCODE:6CF7                 pop     ds
DOSCODE:6CF8                 assume ds:nothing
DOSCODE:6CF8                 retn
DOSCODE:6CF8 REN_DEL_Check   endp
DOSCODE:6CF8
DOSCODE:6CF9
DOSCODE:6CF9 ; =============== S U B R O U T I N E =======================================
DOSCODE:6CF9
DOSCODE:6CF9
DOSCODE:6CF9 FastOpen_Delete proc near               ; ...
DOSCODE:6CF9
DOSCODE:6CF9 ; FUNCTION CHUNK AT DOSCODE:6D16 SIZE 0000000B BYTES
DOSCODE:6CF9
DOSCODE:6CF9                 pushf
DOSCODE:6CFA                 push    si
DOSCODE:6CFB                 push    di
DOSCODE:6CFC                 push    bx
DOSCODE:6CFD                 push    ax
DOSCODE:6CFE                 mov     si, ss:WFP_START ; ds:si points to path name
DOSCODE:6D03                 mov     al, 3           ; FONC_delete
DOSCODE:6D05                 jmp     short fastinvoke
DOSCODE:6D05 FastOpen_Delete endp
DOSCODE:6D05
DOSCODE:6D07 ; ---------------------------------------------------------------------------
DOSCODE:6D07
DOSCODE:6D07 FastOpen_Rename:                        ; ...
DOSCODE:6D07                 pushf
DOSCODE:6D08                 push    si
DOSCODE:6D09                 push    di
DOSCODE:6D0A                 push    bx
DOSCODE:6D0B                 push    ax
DOSCODE:6D0C                 mov     si, ss:REN_WFP  ; ds:si-->Path name addrs
DOSCODE:6D11                 mov     di, offset NAME1 ; FONC_Rename
DOSCODE:6D14                 mov     al, 6
DOSCODE:6D16 ; START OF FUNCTION CHUNK FOR FastOpen_Update
DOSCODE:6D16 ;   ADDITIONAL PARENT FUNCTION FastOpen_Delete
DOSCODE:6D16
DOSCODE:6D16 fastinvoke:                             ; ...
DOSCODE:6D16                 mov     bx, offset FastTable_2
DOSCODE:6D19                 call    dword ptr [bx]
DOSCODE:6D1B                 pop     ax
DOSCODE:6D1C                 pop     bx
DOSCODE:6D1D                 pop     di
DOSCODE:6D1E                 pop     si
DOSCODE:6D1F                 popf
DOSCODE:6D20                 retn
DOSCODE:6D20 ; END OF FUNCTION CHUNK FOR FastOpen_Update
DOSCODE:6D21
DOSCODE:6D21 ; =============== S U B R O U T I N E =======================================
DOSCODE:6D21
DOSCODE:6D21
DOSCODE:6D21 FastOpen_Update proc near               ; ...
DOSCODE:6D21
DOSCODE:6D21 ; FUNCTION CHUNK AT DOSCODE:6D16 SIZE 0000000B BYTES
DOSCODE:6D21
DOSCODE:6D21                 pushf
DOSCODE:6D22                 push    si
DOSCODE:6D23                 push    di
DOSCODE:6D24                 push    bx
DOSCODE:6D25                 push    ax
DOSCODE:6D26                 mov     al, 4           ; FONC_update
DOSCODE:6D28                 jmp     short fastinvoke
DOSCODE:6D28 FastOpen_Update endp
DOSCODE:6D28
DOSCODE:6D2A
DOSCODE:6D2A ; =============== S U B R O U T I N E =======================================
DOSCODE:6D2A
DOSCODE:6D2A
DOSCODE:6D2A Fast_Dispatch   proc near               ; ...
DOSCODE:6D2A                 mov     si, offset FastTable_2
DOSCODE:6D2D                 call    dword ptr ss:[si] ; CALL far [SS:SI]
DOSCODE:6D30                 retn
DOSCODE:6D30 Fast_Dispatch   endp
DOSCODE:6D30
DOSCODE:6D31
DOSCODE:6D31 ; =============== S U B R O U T I N E =======================================
DOSCODE:6D31
DOSCODE:6D31
DOSCODE:6D31 DOS_RENAME      proc near               ; ...
DOSCODE:6D31                 call    TestNet
DOSCODE:6D34                 jnb     short LOCAL_RENAME
DOSCODE:6D36                 mov     ax, 1111h
DOSCODE:6D39                 int     2Fh             ; Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE
DOSCODE:6D39                                         ; SS = DS = DOS CS, SDA first filename pointer = offset of fully-qualified old name
DOSCODE:6D39                                         ; SDA CDS pointer -> current directory
DOSCODE:6D39                                         ; Return: CF set on error
DOSCODE:6D3B                 retn
DOSCODE:6D3C ; ---------------------------------------------------------------------------
DOSCODE:6D3C
DOSCODE:6D3C LOCAL_RENAME:                           ; ...
DOSCODE:6D3C                 call    set_exerr_locus_disk
DOSCODE:6D3F                 mov     si, ds:WFP_START
DOSCODE:6D43                 mov     di, ds:REN_WFP
DOSCODE:6D47                 mov     al, [si]
DOSCODE:6D49                 mov     ah, [di]
DOSCODE:6D4B                 or      ax, 2020h       ; Lower case
DOSCODE:6D4E                 cmp     al, ah
DOSCODE:6D50                 jz      short SAMEDRV
DOSCODE:6D52                 mov     ax, 11h         ; error_not_same_device
DOSCODE:6D55                 stc
DOSCODE:6D56                 retn
DOSCODE:6D57 ; ---------------------------------------------------------------------------
DOSCODE:6D57
DOSCODE:6D57 SAMEDRV:                                ; ...
DOSCODE:6D57                 push    word ptr ds:DMAADD+2
DOSCODE:6D5B                 push    word ptr ds:DMAADD
DOSCODE:6D5F                 mov     word ptr ds:DMAADD+2, ds
DOSCODE:6D63                 mov     word ptr ds:DMAADD, offset RENAMEDMA
DOSCODE:6D69                 mov     ds:FOUND_DEV, 0 ; Rename fails on DEVS, assume not a dev
DOSCODE:6D6E                 call    ECritDisk
DOSCODE:6D71                 call    DOS_SEARCH_FIRST ; Sets [NoSetDir] to 1,
DOSCODE:6D71                                         ; [CURBUF+2]:BX points to entry
DOSCODE:6D74                 jnb     short Check_Dev
DOSCODE:6D76                 cmp     ax, 12h         ; error_no_more_files
DOSCODE:6D79                 jnz     short GOTERR
DOSCODE:6D7B                 mov     ax, 2           ; error_file_not_found
DOSCODE:6D7E
DOSCODE:6D7E GOTERR:                                 ; ...
DOSCODE:6D7E                 stc
DOSCODE:6D7F
DOSCODE:6D7F RENAME_POP:                             ; ...
DOSCODE:6D7F                 pop     word ptr ds:DMAADD
DOSCODE:6D83                 pop     word ptr ds:DMAADD+2
DOSCODE:6D87                 call    LCritDisk
DOSCODE:6D8A                 retn
DOSCODE:6D8B ; ---------------------------------------------------------------------------
DOSCODE:6D8B
DOSCODE:6D8B Check_Dev:                              ; ...
DOSCODE:6D8B                 mov     ax, 5           ; error_access_denied
DOSCODE:6D8E                 push    ds
DOSCODE:6D8F                 lds     si, ds:DMAADD   ; check if source a dir
DOSCODE:6D93                 add     si, 21          ; find_buf.attr
DOSCODE:6D96                 test    byte ptr [si+0Bh], 10h ; [SI+dir_entry.dir_attr],attr_directory
DOSCODE:6D9A                 jz      short notdir
DOSCODE:6D9C                 mov     si, ds:REN_WFP  ; if yes
DOSCODE:6DA0                 call    Check_PathLen2  ; make sure path length < PATHNAMELEN (67)
DOSCODE:6DA3
DOSCODE:6DA3 notdir:                                 ; ...
DOSCODE:6DA3                 pop     ds
DOSCODE:6DA4                 ja      short GOTERR
DOSCODE:6DA6                 cmp     ds:FOUND_DEV, 0
DOSCODE:6DAB                 jnz     short GOTERR
DOSCODE:6DAD                 mov     si, bx
DOSCODE:6DAF                 add     si, 26          ; dir_entry.dir_first
DOSCODE:6DB2                 call    REN_DEL_Check
DOSCODE:6DB5                 jnb     short REN_OK1
DOSCODE:6DB7                 mov     ax, 20h         ; error_sharing_violation
DOSCODE:6DBA
DOSCODE:6DBA RENAME_POPJ:                            ; ...
DOSCODE:6DBA                 jmp     short RENAME_POP
DOSCODE:6DBC ; ---------------------------------------------------------------------------
DOSCODE:6DBC
DOSCODE:6DBC REN_OK1:                                ; ...
DOSCODE:6DBC                 lds     si, ds:DMAADD
DOSCODE:6DC0                 add     si, 21          ; find_buf.attr
DOSCODE:6DC3                 test    byte ptr [si+0Bh], 10h ; [SI+dir_entry.dir_attr],attr_directory
DOSCODE:6DC7                 jnz     short SWAP_SOURCE
DOSCODE:6DC9                 call    FastOpen_Delete ; delete dir info in fastopen
DOSCODE:6DCC
DOSCODE:6DCC SWAP_SOURCE:                            ; ...
DOSCODE:6DCC                 mov     ax, ds:WFP_START ; Swap source and destination
DOSCODE:6DCF                 mov     si, ds:REN_WFP
DOSCODE:6DD3                 mov     ds:WFP_START, si
DOSCODE:6DD7                 mov     ds:REN_WFP, ax
DOSCODE:6DDA                 mov     ds:CURR_DIR_END, 0FFFFh ; -1 ; No current dir on dest
DOSCODE:6DE0                 mov     word ptr ds:CREATING, 0E5FFh ; DIRFREE*256+0FFh
DOSCODE:6DE0                                         ; Creating, not DEL *.*
DOSCODE:6DE6                 call    GetPathNoSet
DOSCODE:6DE9                 jb      short NODEST
DOSCODE:6DEB                 or      ah, ah          ; Device?
DOSCODE:6DED                 jns     short SAVEDEST  ; No, continue
DOSCODE:6DEF
DOSCODE:6DEF BAD_ACC:                                ; ...
DOSCODE:6DEF                 mov     ax, 5           ; error_access_denied
DOSCODE:6DF2                 stc
DOSCODE:6DF3
DOSCODE:6DF3 RENAME_CLEAN:                           ; ...
DOSCODE:6DF3                 pushf
DOSCODE:6DF4                 push    ax
DOSCODE:6DF5                 les     bp, ds:THISDPB
DOSCODE:6DF9                 call    update_fat32_fsinfo
DOSCODE:6DFC                 mov     al, ds:THISDRV
DOSCODE:6DFF                 call    FLUSHBUF
DOSCODE:6E02                 pop     ax
DOSCODE:6E03                 cmp     ds:FAILERR, 0
DOSCODE:6E08                 jnz     short BAD_ERR
DOSCODE:6E0A                 popf
DOSCODE:6E0B                 jmp     short RENAME_POPJ
DOSCODE:6E0D ; ---------------------------------------------------------------------------
DOSCODE:6E0D
DOSCODE:6E0D BAD_ERR:                                ; ...
DOSCODE:6E0D                 pop     ax
DOSCODE:6E0E                 mov     ax, 3           ; error_path_not_foun
DOSCODE:6E11                 jmp     GOTERR
DOSCODE:6E14 ; ---------------------------------------------------------------------------
DOSCODE:6E14
DOSCODE:6E14 NODEST:                                 ; ...
DOSCODE:6E14                 jnz     short BAD_PATH
DOSCODE:6E16                 cmp     ds:FAILERR, 0
DOSCODE:6E1B                 jnz     short BAD_PATH  ; Search for dest failed
DOSCODE:6E1D                 or      cl, cl
DOSCODE:6E1F                 jnz     short SAVEDEST
DOSCODE:6E21
DOSCODE:6E21 BAD_PATH:                               ; ...
DOSCODE:6E21                 mov     ax, 3
DOSCODE:6E24                 stc
DOSCODE:6E25                 jmp     short RENAME_POPJ
DOSCODE:6E27 ; ---------------------------------------------------------------------------
DOSCODE:6E27
DOSCODE:6E27 SAVEDEST:                               ; ...
DOSCODE:6E27                 push    ss
DOSCODE:6E28                 pop     es
DOSCODE:6E29                 assume es:DOSCODE
DOSCODE:6E29                 mov     di, offset NAME2
DOSCODE:6E2C                 mov     si, offset NAME1
DOSCODE:6E2F                 mov     cx, 11
DOSCODE:6E32                 rep movsb               ; Save dest with metas at NAME2
DOSCODE:6E34                 mov     ax, ds:DIRSTART_HW
DOSCODE:6E37                 mov     ds:DESTSTART_HW, ax
DOSCODE:6E3A                 mov     ax, ds:DIRSTART
DOSCODE:6E3D                 mov     ds:DESTSTART, ax
DOSCODE:6E40
DOSCODE:6E40 BUILDDEST:                              ; ...
DOSCODE:6E40                 push    ss
DOSCODE:6E41                 pop     es              ; needed due to JMP BUILDDEST below
DOSCODE:6E42                 mov     bx, (offset RENAMEDMA+15h) ; Source of replace chars
DOSCODE:6E45                 mov     di, offset NAME1 ; Real dest name goes here
DOSCODE:6E48                 mov     si, offset NAME2 ; Raw dest
DOSCODE:6E4B                 mov     cx, 11
DOSCODE:6E4E                 call    NEW_RENAME      ; replace ? chars
DOSCODE:6E51                 mov     ds:ATTRIB, 16h  ; attr_all
DOSCODE:6E51                                         ; Stop duplicates with any attributes
DOSCODE:6E56                 mov     ds:CREATING, 0FFh
DOSCODE:6E5B                 call    DEVNAME         ; Check if we built a device name
DOSCODE:6E5E                 jnb     short BAD_ACC
DOSCODE:6E60                 mov     bx, ds:DESTSTART_HW
DOSCODE:6E64                 mov     ds:ROOTCLUST_HW, bx
DOSCODE:6E68                 mov     bx, ds:DESTSTART
DOSCODE:6E6C                 les     bp, ds:THISDPB
DOSCODE:6E70                 assume es:nothing
DOSCODE:6E70                 call    SETDIRSRCH      ; Reset search to start of dir
DOSCODE:6E73                 jb      short BAD_ACCJ  ; Screw up
DOSCODE:6E75                 call    FINDENTRY       ; See if new name already exists
DOSCODE:6E78                 jnb     short BAD_ACCJ  ; Error if found
DOSCODE:6E7A                 cmp     ds:FAILERR, 0
DOSCODE:6E7F                 jnz     short BAD_ACCJ  ; Find failed because user FAILed to I 24
DOSCODE:6E81                 mov     ax, ds:DESTSTART ; DIRSTART of dest
DOSCODE:6E84                 mov     dx, ds:DESTSTART_HW
DOSCODE:6E88                 les     bp, ds:THISDPB
DOSCODE:6E8C                 cmp     word ptr es:[bp+0Fh], 0 ; [es:bp+DPB.FAT_SIZE]
DOSCODE:6E91                 jnz     short builddst_1 ; not FAT32
DOSCODE:6E93                 cmp     dx, word ptr ds:RENAMEDMA+11h
DOSCODE:6E97                 jnz     short builddst_2
DOSCODE:6E99
DOSCODE:6E99 builddst_1:                             ; ...
DOSCODE:6E99                 cmp     ax, word ptr ds:RENAMEDMA+0Fh ; DIRSTART_HW of source
DOSCODE:6E9D                 jz      short SIMPLE_RENAME ; If =, just give new name
DOSCODE:6E9F
DOSCODE:6E9F builddst_2:                             ; ...
DOSCODE:6E9F                 mov     al, ds:RENAMEDMA+20h ; RENAMEDMA+21+dir_entry.dir_attr]
DOSCODE:6EA2                 test    al, 10h         ; attr_directory
DOSCODE:6EA4                 jnz     short BAD_ACCJ  ; Can only do a simple rename on dirs,
DOSCODE:6EA4                                         ; otherwise the . and .. entries get wiped.
DOSCODE:6EA6                 mov     ds:ATTRIB, al
DOSCODE:6EA9                 mov     word ptr ds:THISSFT+2, ds
DOSCODE:6EAD                 mov     si, (offset RENAMEDMA+145h) ; AUXSTACK-SF_ENTRY.size
DOSCODE:6EAD                                         ; RENAMEDMA+325
DOSCODE:6EB0                 mov     word ptr ds:THISSFT, si
DOSCODE:6EB4                 mov     word ptr [si+2], 2 ; [SI+SF_ENTRY.sf_mode],
DOSCODE:6EB4                                         ; SHARING_COMPAT+open_for_both
DOSCODE:6EB9                 xor     cx, cx          ; Set "device ID" for call into makenode
DOSCODE:6EBB                 call    RENAME_MAKE     ; This is in mknode
DOSCODE:6EBE                 jnb     short GOT_DEST
DOSCODE:6EC0
DOSCODE:6EC0 BAD_ACCJ:                               ; ...
DOSCODE:6EC0                 jmp     BAD_ACC
DOSCODE:6EC3 ; ---------------------------------------------------------------------------
DOSCODE:6EC3
DOSCODE:6EC3 GOT_DEST:                               ; ...
DOSCODE:6EC3                 push    bx
DOSCODE:6EC4                 les     di, ds:THISSFT  ; RENAME_MAKE entered this into sharing
DOSCODE:6EC8                 call    ShareEnd        ; we need to remove it.
DOSCODE:6ECB                 pop     bx
DOSCODE:6ECC                 les     di, ds:CURBUF
DOSCODE:6ED0                 call    SET_BUF_DIRTY
DOSCODE:6ED3                 mov     di, bx
DOSCODE:6ED5                 add     di, 11          ; dir_entry.dir_attr ; skip name
DOSCODE:6ED8                 mov     si, (offset RENAMEDMA+20h) ; RENAMEDMA+21+dir_entry.dir_attr
DOSCODE:6EDB                 mov     cx, 21          ; dir_entry.size-dir_entry.dir_attr
DOSCODE:6EDE                 rep movsb
DOSCODE:6EE0                 call    GET_SOURCE
DOSCODE:6EE3                 jb      short RENAME_OVER
DOSCODE:6EE5                 mov     di, bx
DOSCODE:6EE7                 mov     es, word ptr ds:CURBUF+2
DOSCODE:6EEB                 assume es:DOSCODE
DOSCODE:6EEB                 mov     al, 0E5h        ; DIRFREE
DOSCODE:6EED                 stosb
DOSCODE:6EEE                 jmp     short DIRTY_IT
DOSCODE:6EF0 ; ---------------------------------------------------------------------------
DOSCODE:6EF0
DOSCODE:6EF0 SIMPLE_RENAME:                          ; ...
DOSCODE:6EF0                 call    GET_SOURCE
DOSCODE:6EF3                 jb      short RENAME_OVER
DOSCODE:6EF5                 mov     di, bx
DOSCODE:6EF7                 mov     es, word ptr ds:CURBUF+2
DOSCODE:6EFB                 assume es:nothing
DOSCODE:6EFB                 mov     si, offset NAME1
DOSCODE:6EFE                 mov     cx, 11
DOSCODE:6F01                 rep movsb
DOSCODE:6F03
DOSCODE:6F03 DIRTY_IT:                               ; ...
DOSCODE:6F03                 mov     di, word ptr ds:CURBUF
DOSCODE:6F07                 call    SET_BUF_DIRTY
DOSCODE:6F0A                 push    si
DOSCODE:6F0B                 lds     si, ds:DMAADD
DOSCODE:6F0F                 add     si, 21          ; find_buf.attr
DOSCODE:6F12                 test    byte ptr [si+0Bh], 10h ; [SI+dir_entry.dir_attr],
DOSCODE:6F12                                         ; attr_directory
DOSCODE:6F16                 jz      short NOT_DIR2
DOSCODE:6F18                 call    FastOpen_Rename
DOSCODE:6F1B
DOSCODE:6F1B NOT_DIR2:                               ; ...
DOSCODE:6F1B                 pop     si
DOSCODE:6F1C                 mov     si, (offset RENAMEDMA+1)
DOSCODE:6F1F                 call    ECritDisk
DOSCODE:6F22                 mov     ds:CREATING, 0  ; Correct setting for search
DOSCODE:6F27                 call    RENAME_NEXT
DOSCODE:6F2A                 jb      short RENAME_OVER
DOSCODE:6F2C                 lea     si, [bx+1Ah]    ; [BX+dir_entry.dir_first]
DOSCODE:6F2F                 call    REN_DEL_Check
DOSCODE:6F32                 jnb     short REN_OK2
DOSCODE:6F34                 mov     ax, 20h         ; error_sharing_violation
DOSCODE:6F37
DOSCODE:6F37 jmp_to_rename_clean:                    ; ...
DOSCODE:6F37                 jmp     RENAME_CLEAN
DOSCODE:6F3A ; ---------------------------------------------------------------------------
DOSCODE:6F3A
DOSCODE:6F3A REN_OK2:                                ; ...
DOSCODE:6F3A                 mov     al, ds:RENAMEDMA+20h ; [RENAMEDMA+21+dir_entry.dir_attr]
DOSCODE:6F3D                 test    al, 10h         ; attr_directory
DOSCODE:6F3F                 jz      short Ren_Directory
DOSCODE:6F41                 call    FastOpen_Delete
DOSCODE:6F44
DOSCODE:6F44 jmp_to_builddest:                       ; ...
DOSCODE:6F44                 jmp     BUILDDEST
DOSCODE:6F47 ; ---------------------------------------------------------------------------
DOSCODE:6F47
DOSCODE:6F47 Ren_Directory:                          ; ...
DOSCODE:6F47                 call    FastOpen_Rename
DOSCODE:6F4A                 jmp     short jmp_to_builddest
DOSCODE:6F4C ; ---------------------------------------------------------------------------
DOSCODE:6F4C
DOSCODE:6F4C RENAME_OVER:                            ; ...
DOSCODE:6F4C                 clc
DOSCODE:6F4D                 jmp     short jmp_to_rename_clean
DOSCODE:6F4D DOS_RENAME      endp
DOSCODE:6F4D
DOSCODE:6F4F
DOSCODE:6F4F ; =============== S U B R O U T I N E =======================================
DOSCODE:6F4F
DOSCODE:6F4F
DOSCODE:6F4F GET_SOURCE      proc near               ; ...
DOSCODE:6F4F                 les     bp, ds:THISDPB
DOSCODE:6F53                 xor     bx, bx
DOSCODE:6F55                 cmp     es:[bp+0Fh], bx ; DPB.FAT_SIZE > 0 ?
DOSCODE:6F59                 jnz     short gs_cont   ; yes, it is not FAT32
DOSCODE:6F5B                 mov     bx, word ptr ds:RENAMEDMA+11h ; DirStart+2
DOSCODE:6F5F
DOSCODE:6F5F gs_cont:                                ; ...
DOSCODE:6F5F                 mov     ds:ROOTCLUST_HW, bx ; hw of cluster number
DOSCODE:6F63                 mov     bx, word ptr ds:RENAMEDMA+0Fh ; DirStart
DOSCODE:6F67                 call    SETDIRSRCH
DOSCODE:6F6A                 jb      short gs_ret_label
DOSCODE:6F6C                 call    STARTSRCH
DOSCODE:6F6F                 mov     ax, word ptr ds:RENAMEDMA+0Dh ; Lastent
DOSCODE:6F72                 call    GETENT
DOSCODE:6F75
DOSCODE:6F75 gs_ret_label:                           ; ...
DOSCODE:6F75                 retn
DOSCODE:6F75 GET_SOURCE      endp
DOSCODE:6F75
DOSCODE:6F76
DOSCODE:6F76 ; =============== S U B R O U T I N E =======================================
DOSCODE:6F76
DOSCODE:6F76
DOSCODE:6F76 NEW_RENAME      proc near               ; ...
DOSCODE:6F76                 lodsb
DOSCODE:6F77                 cmp     al, '?'         ; 3Fh
DOSCODE:6F79                 jnz     short NOCHG
DOSCODE:6F7B                 mov     al, [bx]        ; Get replace char
DOSCODE:6F7D
DOSCODE:6F7D NOCHG:                                  ; ...
DOSCODE:6F7D                 stosb
DOSCODE:6F7E                 inc     bx              ; Next replace char
DOSCODE:6F7F                 loop    NEW_RENAME
DOSCODE:6F81                 retn
DOSCODE:6F81 NEW_RENAME      endp
DOSCODE:6F81
DOSCODE:6F82
DOSCODE:6F82 ; =============== S U B R O U T I N E =======================================
DOSCODE:6F82
DOSCODE:6F82
DOSCODE:6F82 GET_FILE_INFO   proc near               ; ...
DOSCODE:6F82                 call    TestNet
DOSCODE:6F85                 jnb     short LOCAL_INFO
DOSCODE:6F87                 mov     ax, 110Fh
DOSCODE:6F8A                 int     2Fh             ; Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES
DOSCODE:6F8A                                         ; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
DOSCODE:6F8A                                         ; SDA CDS pointer -> current directory
DOSCODE:6F8A                                         ; Return: CF set on error, AX = file attributes
DOSCODE:6F8C                 retn
DOSCODE:6F8D ; ---------------------------------------------------------------------------
DOSCODE:6F8D
DOSCODE:6F8D LOCAL_INFO:                             ; ...
DOSCODE:6F8D                 call    ECritDisk
DOSCODE:6F90                 mov     ds:NoSetDir, 1  ; if we find a dir, don't change to it
DOSCODE:6F95                 call    GET_FAST_PATH
DOSCODE:6F98                 jnb     short info_check_dev
DOSCODE:6F9A
DOSCODE:6F9A NO_PATH:                                ; ...
DOSCODE:6F9A                 jnz     short bad_path1
DOSCODE:6F9C                 or      cl, cl
DOSCODE:6F9E                 jz      short bad_path1
DOSCODE:6FA0
DOSCODE:6FA0 info_no_file:                           ; ...
DOSCODE:6FA0                 mov     ax, 2           ; error_file_not_found
DOSCODE:6FA3
DOSCODE:6FA3 BadRet:                                 ; ...
DOSCODE:6FA3                 stc
DOSCODE:6FA4
DOSCODE:6FA4 JustRet:                                ; ...
DOSCODE:6FA4                 call    LCritDisk
DOSCODE:6FA7                 retn
DOSCODE:6FA8 ; ---------------------------------------------------------------------------
DOSCODE:6FA8
DOSCODE:6FA8 bad_path1:                              ; ...
DOSCODE:6FA8                 mov     ax, 3           ; error_path_not_found
DOSCODE:6FAB                 jmp     short BadRet
DOSCODE:6FAD ; ---------------------------------------------------------------------------
DOSCODE:6FAD
DOSCODE:6FAD info_check_dev:                         ; ...
DOSCODE:6FAD                 or      ah, ah
DOSCODE:6FAF                 js      short info_no_file ; device
DOSCODE:6FB1                 cmp     word ptr ds:CURBUF, 0FFFFh ; -1 ; is it a root dir?
DOSCODE:6FB6                 jnz     short not_root  ; no, CurBuf ptr is valid
DOSCODE:6FB8                 xor     ah, ah
DOSCODE:6FBA                 mov     al, 10h         ; attr_directory
DOSCODE:6FBC                 clc
DOSCODE:6FBD                 jmp     short JustRet
DOSCODE:6FBF ; ---------------------------------------------------------------------------
DOSCODE:6FBF
DOSCODE:6FBF not_root:                               ; ...
DOSCODE:6FBF                 push    ds
DOSCODE:6FC0                 mov     ds, word ptr ds:CURBUF+2
DOSCODE:6FC4                 mov     si, bx
DOSCODE:6FC6                 xor     bx, bx          ; Assume size=0 (dir)
DOSCODE:6FC8                 mov     di, bx
DOSCODE:6FCA                 mov     cx, [si+16h]    ; [SI+dir_entry.dir_time]
DOSCODE:6FCD                 mov     dx, [si+18h]    ; [SI+dir_entry.dir_date]
DOSCODE:6FD0                 xor     ah, ah
DOSCODE:6FD2                 mov     al, [si+0Bh]    ; [SI+dir_entry.dir_attr]
DOSCODE:6FD5                 test    al, 10h         ; attr_directory
DOSCODE:6FD7                 jnz     short NO_SIZE
DOSCODE:6FD9                 mov     di, [si+1Ch]    ; [SI+dir_entry.dir_size_l]
DOSCODE:6FDC                 mov     bx, [si+1Eh]    ; [SI+dir_entry.dir_size_h]
DOSCODE:6FDF
DOSCODE:6FDF NO_SIZE:                                ; ...
DOSCODE:6FDF                 pop     ds
DOSCODE:6FE0                 clc
DOSCODE:6FE1
DOSCODE:6FE1 OK_BYE:                                 ; ...
DOSCODE:6FE1                 jmp     short JustRet
DOSCODE:6FE1 GET_FILE_INFO   endp
DOSCODE:6FE1
DOSCODE:6FE3
DOSCODE:6FE3 ; =============== S U B R O U T I N E =======================================
DOSCODE:6FE3
DOSCODE:6FE3
DOSCODE:6FE3 SET_FILE_ATTRIBUTE proc near            ; ...
DOSCODE:6FE3                 test    ax, 0FFD8h      ; ~attr_changeable
DOSCODE:6FE6                 jz      short set_look
DOSCODE:6FE8
DOSCODE:6FE8 _BAD_ACC:                               ; ...
DOSCODE:6FE8                 call    set_exerr_locus_unk
DOSCODE:6FEB                 mov     ds:EXTERR_CLASS, 7 ; errCLASS_Apperr
DOSCODE:6FF0                 mov     ds:EXTERR_ACTION, 4 ; errACT_Abort
DOSCODE:6FF5                 mov     ax, 5           ; error_access_denied
DOSCODE:6FF8                 stc
DOSCODE:6FF9                 retn
DOSCODE:6FFA ; ---------------------------------------------------------------------------
DOSCODE:6FFA
DOSCODE:6FFA set_look:                               ; ...
DOSCODE:6FFA                 call    TestNet
DOSCODE:6FFD                 jnb     short LOCAL_SET
DOSCODE:6FFF                 push    ax
DOSCODE:7000                 mov     ax, 110Eh
DOSCODE:7003                 int     2Fh             ; Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES
DOSCODE:7003                                         ; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
DOSCODE:7003                                         ; SDA CDS pointer -> current directory
DOSCODE:7003                                         ; STACK: WORD new file attributes
DOSCODE:7003                                         ; Return: CF set on error
DOSCODE:7005                 pop     bx
DOSCODE:7006                 retn
DOSCODE:7007 ; ---------------------------------------------------------------------------
DOSCODE:7007
DOSCODE:7007 LOCAL_SET:                              ; ...
DOSCODE:7007                 call    ECritDisk
DOSCODE:700A                 push    ax              ; Save new attributes
DOSCODE:700B                 mov     ds:NoSetDir, 1  ; if we find a dir, don't change to it
DOSCODE:7010                 call    GETPATH
DOSCODE:7013                 jnb     short set_check_device
DOSCODE:7015                 pop     bx              ; Clean stack (don't zap AX)
DOSCODE:7016                 jmp     short NO_PATH
DOSCODE:7018 ; ---------------------------------------------------------------------------
DOSCODE:7018
DOSCODE:7018 set_check_device:                       ; ...
DOSCODE:7018                 or      ah, ah
DOSCODE:701A                 jns     short set_check_share
DOSCODE:701C                 pop     ax
DOSCODE:701D                 call    LCritDisk
DOSCODE:7020                 jmp     short _BAD_ACC  ; device
DOSCODE:7022 ; ---------------------------------------------------------------------------
DOSCODE:7022
DOSCODE:7022 set_check_share:                        ; ...
DOSCODE:7022                 pop     ax              ; Get new attributes
DOSCODE:7023                 cmp     word ptr ds:CURBUF, 0FFFFh ; -1 ; is this the root dir
DOSCODE:7028                 jz      short cannot_set_root ; return error
DOSCODE:702A                 call    REN_DEL_Check
DOSCODE:702D                 jnb     short set_do
DOSCODE:702F                 mov     ax, 20h         ; error_sharing_violation
DOSCODE:7032
DOSCODE:7032 jmp_to_OK_BYE:                          ; ...
DOSCODE:7032                 jmp     short OK_BYE
DOSCODE:7034 ; ---------------------------------------------------------------------------
DOSCODE:7034
DOSCODE:7034 cannot_set_root:                        ; ...
DOSCODE:7034                 mov     ax, 5           ; error_access_denied
DOSCODE:7037                 stc
DOSCODE:7038                 jmp     short OK_BYE
DOSCODE:703A ; ---------------------------------------------------------------------------
DOSCODE:703A
DOSCODE:703A set_do:                                 ; ...
DOSCODE:703A                 les     di, ds:CURBUF
DOSCODE:703E                 and     byte ptr es:[bx+0Bh], 0D8h ; [ES:BX+dir_entry.dir_attr],
DOSCODE:703E                                         ; ~attr_changeable
DOSCODE:7043                 or      es:[bx+0Bh], al
DOSCODE:7047                 call    SET_BUF_DIRTY
DOSCODE:704A                 mov     al, ds:THISDRV
DOSCODE:704D                 push    dx
DOSCODE:704E                 push    di
DOSCODE:704F                 mov     ah, 0           ; dir entry update
DOSCODE:7051                 mov     dl, al          ; drive number A=0,B=1,,
DOSCODE:7053                 mov     di, bx
DOSCODE:7055                 call    FastOpen_Update
DOSCODE:7058                 pop     di
DOSCODE:7059                 pop     dx
DOSCODE:705A                 call    FLUSHBUF
DOSCODE:705D                 jnb     short jmp_to_OK_BYE
DOSCODE:705F                 jmp     info_no_file
DOSCODE:705F SET_FILE_ATTRIBUTE endp
DOSCODE:705F
DOSCODE:7062
DOSCODE:7062 ; =============== S U B R O U T I N E =======================================
DOSCODE:7062
DOSCODE:7062
DOSCODE:7062 GET_FAST_PATH   proc near               ; ...
DOSCODE:7062                 or      ss:FastOpenFlg, 1 ; FastOpen_Set
DOSCODE:7068                 call    GETPATH
DOSCODE:706B                 pushf
DOSCODE:706C                 and     ss:FastOpenFlg, 80h ; Fast_yes
DOSCODE:7072                 popf
DOSCODE:7073                 retn
DOSCODE:7073 GET_FAST_PATH   endp
DOSCODE:7073
DOSCODE:7074
DOSCODE:7074 ; =============== S U B R O U T I N E =======================================
DOSCODE:7074
DOSCODE:7074
DOSCODE:7074 DOS_DUP         proc near               ; ...
DOSCODE:7074                 mov     es, cs:DosDSeg
DOSCODE:7079                 les     di, es:THISSFT
DOSCODE:707E
DOSCODE:707E DOS_Dup_Direct:                         ; ...
DOSCODE:707E                 call    IsSFTNet
DOSCODE:7081                 jnz     short DO_INC
DOSCODE:7083                 call    DEV_OPEN_SFT
DOSCODE:7086
DOSCODE:7086 DO_INC:                                 ; ...
DOSCODE:7086                 inc     word ptr es:[di] ; [ES:DI+SF_ENTRY.sf_ref_count]
DOSCODE:7089                 retn
DOSCODE:7089 DOS_DUP         endp
DOSCODE:7089
DOSCODE:708A ; ---------------------------------------------------------------------------
DOSCODE:708A
DOSCODE:708A DOS_CREATE:                             ; ...
DOSCODE:708A                 xor     ah, ah          ; 0 ; Truncate is OK
DOSCODE:708C
DOSCODE:708C Create_inter:                           ; ...
DOSCODE:708C                 test    al, 80h         ; ~(attr_all+attr_ignore+attr_volume_id)
DOSCODE:708E                 jnz     short AttErr
DOSCODE:7090                 test    al, 8           ; attr_volume_id
DOSCODE:7092                 jz      short NoReset
DOSCODE:7094                 or      byte ptr ds:DOS34_FLAG, 80h ; DBCS_VOLID
DOSCODE:7099                 mov     al, 8           ; attr_volume_id
DOSCODE:709B
DOSCODE:709B NoReset:                                ; ...
DOSCODE:709B                 or      al, 20h         ; attr_archive ; File changed
DOSCODE:709D                 test    al, 50h         ; attr_directory+attr_device
DOSCODE:709F                 jz      short ATT_OK
DOSCODE:70A1
DOSCODE:70A1 AttErr:                                 ; ...
DOSCODE:70A1                 mov     ax, 5           ; Attribute problem
DOSCODE:70A4                 call    set_exerr_locus_unk ; MOV byte [EXTERR_LOCUS],errLOC_Unk ; 1
DOSCODE:70A7                 jmp     short SET_MKND_ERR ; Gotta use MKDIR to make dirs,
DOSCODE:70A7                                         ; NEVER allow attr_device to be set
DOSCODE:70A9 ; ---------------------------------------------------------------------------
DOSCODE:70A9
DOSCODE:70A9 ATT_OK:                                 ; ...
DOSCODE:70A9                 les     di, ds:THISSFT
DOSCODE:70AD                 push    es
DOSCODE:70AE                 les     si, ds:THISCDS
DOSCODE:70B2                 cmp     si, 0FFFFh      ; -1
DOSCODE:70B5                 jnz     short TEST_RE_NET
DOSCODE:70B7                 pop     es
DOSCODE:70B8                 test    ds:EXTOPEN_ON, 1 ; EXT_OPEN_ON  ; extended open ?
DOSCODE:70BD                 jz      short NOEXTOP   ; no, do normal
DOSCODE:70BF
DOSCODE:70BF IFS_extopen:                            ; ...
DOSCODE:70BF                 push    ax
DOSCODE:70C0                 mov     ax, 112Eh       ; (MultNET SHL 8) OR 46
DOSCODE:70C3
DOSCODE:70C3 NOEXTOP2:                               ; ...
DOSCODE:70C3                 int     2Fh             ; Multiplex - DOS 4 IFSFUNC.EXE - ???
DOSCODE:70C3                                         ; SS = DS = DOS CS, STACK: WORD ??? low byte = ???
DOSCODE:70C3                                         ; Return: CF set on error
DOSCODE:70C3                                         ; CF clear if successful
DOSCODE:70C5                 pop     bx              ; (BX is trashed anyway)
DOSCODE:70C6                 mov     ds:EXTOPEN_ON, 0
DOSCODE:70CB                 retn
DOSCODE:70CC ; ---------------------------------------------------------------------------
DOSCODE:70CC
DOSCODE:70CC NOEXTOP:                                ; ...
DOSCODE:70CC                 push    ax
DOSCODE:70CD                 mov     ax, 1118h       ; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE FILE
DOSCODE:70CD                                         ; ES:DI -> uninitialized SFT, SS = DOS CS
DOSCODE:70CD                                         ; SDA first filename pointer -> fully-qualified name of file
DOSCODE:70CD                                         ; STACK: WORD file creation mode???
DOSCODE:70D0                 jmp     short NOEXTOP2
DOSCODE:70D2 ; ---------------------------------------------------------------------------
DOSCODE:70D2
DOSCODE:70D2 TEST_RE_NET:                            ; ...
DOSCODE:70D2                 test    byte ptr es:[si+44h], 80h ; [ES:SI+curdir.flags+1],curdir_isnet>>8
DOSCODE:70D7                 pop     es
DOSCODE:70D8                 jz      short LOCAL_CREATE
DOSCODE:70DA                 call    Set_EXT_mode
DOSCODE:70DD                 jb      short dochk
DOSCODE:70DF                 or      word ptr es:[di+2], 2 ; [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
DOSCODE:70E4
DOSCODE:70E4 dochk:                                  ; ...
DOSCODE:70E4                 test    ds:EXTOPEN_ON, 1 ; EXT_OPEN_ON
DOSCODE:70E9                 jnz     short IFS_extopen
DOSCODE:70EB                 push    ax
DOSCODE:70EC                 mov     ax, 1117h       ; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE REMOTE FILE
DOSCODE:70EC                                         ; ES:DI -> uninitialized SFT, SS = DOS CS
DOSCODE:70EC                                         ; SDA first filename pointer -> fully-qualified name of file to open
DOSCODE:70EC                                         ; SDA CDS pointer -> current directory
DOSCODE:70EC                                         ; Return: CF set on error
DOSCODE:70EF                 jmp     short NOEXTOP2
DOSCODE:70F1 ; ---------------------------------------------------------------------------
DOSCODE:70F1
DOSCODE:70F1 LOCAL_CREATE:                           ; ...
DOSCODE:70F1                 call    Set_EXT_mode
DOSCODE:70F4                 jb      short setdone
DOSCODE:70F6                 or      word ptr es:[di+2], 2 ; [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
DOSCODE:70FB
DOSCODE:70FB setdone:                                ; ...
DOSCODE:70FB                 call    ECritDisk
DOSCODE:70FE                 call    MakeNode
DOSCODE:7101                 jnb     short Create_ok
DOSCODE:7103                 mov     ds:VOLCHNG_FLAG, 0FFh ; -1
DOSCODE:7108                 call    LCritDisk
DOSCODE:710B
DOSCODE:710B SET_MKND_ERR:                           ; ...
DOSCODE:710B                 mov     bx, offset CRTERRTAB
DOSCODE:710E                 xlat    byte ptr cs:[bx]
DOSCODE:7110                 stc
DOSCODE:7111                 retn
DOSCODE:7111 ; ---------------------------------------------------------------------------
DOSCODE:7112 CRTERRTAB       db 0                    ; ...
DOSCODE:7113                 db 5                    ; error_access_denied ; MakeNode error 1
DOSCODE:7114                 db 52h                  ; error_cannot_make
DOSCODE:7115                 db 50h                  ; error_file_exists
DOSCODE:7116                 db 3                    ; error_path_not_found
DOSCODE:7117                 db 5                    ; error_access_denied
DOSCODE:7118                 db 20h                  ; error_sharing_violation ; MakeNode error 6
DOSCODE:7119                 db 2                    ; error_file_not_found ; MakeNode error 7
DOSCODE:711A ; ---------------------------------------------------------------------------
DOSCODE:711A
DOSCODE:711A Create_ok:                              ; ...
DOSCODE:711A                 call    FastOpen_Delete
DOSCODE:711D                 mov     al, ds:SATTRIB
DOSCODE:7120                 test    al, 8           ; attr_volume_id
DOSCODE:7122                 jz      short NoVolLabel
DOSCODE:7124                 les     di, ds:THISCDS
DOSCODE:7128                 mov     ah, es:[di]     ; [ES:DI+curdir.text] ; get drive letter
DOSCODE:712B                 sub     ah, 41h ; 'A'   ; convert to drive number
DOSCODE:712E                 mov     ds:VOLCHNG_FLAG, ah ; Set flag to indicate volid change
DOSCODE:7132                 mov     bh, 1           ; set volume id to boot record
DOSCODE:7134                 call    Set_Media_ID
DOSCODE:7137                 call    ECritDisk
DOSCODE:713A                 call    FATREAD_CDS     ; force a media check
DOSCODE:713D                 call    LCritDisk
DOSCODE:7140
DOSCODE:7140 NoVolLabel:                             ; ...
DOSCODE:7140                 mov     ax, 2
DOSCODE:7143                 les     di, ds:THISSFT
DOSCODE:7147                 call    ds:ShSU         ; call far [JShare+(14*4)] ; 14 = ShSU
DOSCODE:714B                 call    LCritDisk
DOSCODE:714E                 jmp     SET_SFT_MODE
DOSCODE:7151 ; ---------------------------------------------------------------------------
DOSCODE:7151
DOSCODE:7151 DOS_Create_New:                         ; ...
DOSCODE:7151                 mov     ah, 1
DOSCODE:7153                 jmp     Create_inter
DOSCODE:7156
DOSCODE:7156 ; =============== S U B R O U T I N E =======================================
DOSCODE:7156
DOSCODE:7156
DOSCODE:7156 Set_Media_ID    proc near               ; ...
DOSCODE:7156                 push    ax
DOSCODE:7157                 push    es
DOSCODE:7158                 push    di
DOSCODE:7159                 inc     ah
DOSCODE:715B                 mov     bl, ah
DOSCODE:715D                 mov     al, 0Dh         ; generic IOCTL
DOSCODE:715F                 mov     cx, 4866h       ; ch = FAT32 disk drive (CATEGORY CODE)
DOSCODE:715F                                         ; cl = minor code,
DOSCODE:715F                                         ;      get volume serial number (and name)
DOSCODE:7162                 mov     dx, offset FAKE_STACK_2F ; Packet_Temp
DOSCODE:7165
DOSCODE:7165 Set_Media_ID_1:                         ; ...
DOSCODE:7165                 push    cx
DOSCODE:7166                 push    bx
DOSCODE:7167                 push    dx
DOSCODE:7168                 xor     bh, bh
DOSCODE:716A                 call    $IOCTL
DOSCODE:716D                 pop     dx
DOSCODE:716E                 pop     bx
DOSCODE:716F                 pop     cx
DOSCODE:7170                 jnb     short Set_Media_ID_2
DOSCODE:7172                 cmp     ch, 48h         ; is it FAT32 disk drive request?
DOSCODE:7175                 stc
DOSCODE:7176                 jnz     short geterr    ; (ch=8 request failed!)
DOSCODE:7178                 mov     ch, 8           ; set category code for (old) FAT disk drive
DOSCODE:7178                                         ; (except FAT32)
DOSCODE:717A                 jmp     short Set_Media_ID_1 ; and try again
DOSCODE:717C ; ---------------------------------------------------------------------------
DOSCODE:717C
DOSCODE:717C Set_Media_ID_2:                         ; ...
DOSCODE:717C                 or      bh, bh
DOSCODE:717E                 jz      short NoName
DOSCODE:7180                 mov     si, offset NAME1
DOSCODE:7183                 jmp     short doset
DOSCODE:7185 ; ---------------------------------------------------------------------------
DOSCODE:7185
DOSCODE:7185 NoName:                                 ; ...
DOSCODE:7185                 mov     si, offset NO_NAME_ID ; "NO NAME    "
DOSCODE:7188
DOSCODE:7188 doset:                                  ; ...
DOSCODE:7188                 mov     di, dx
DOSCODE:718A                 add     di, 6           ; MEDIA_ID_INFO.MEDIA_Label
DOSCODE:718D                 push    ss
DOSCODE:718E                 pop     ds
DOSCODE:718F                 assume ds:DOSCODE
DOSCODE:718F                 push    ss
DOSCODE:7190                 pop     es
DOSCODE:7191                 assume es:DOSCODE
DOSCODE:7191                 push    cx
DOSCODE:7192                 mov     cx, 11
DOSCODE:7195                 rep movsb
DOSCODE:7197                 pop     cx
DOSCODE:7198                 mov     cl, 46h         ; set volume serial number (and name)
DOSCODE:719A                 mov     al, 0Dh         ; generic IOCTL
DOSCODE:719C                 xor     bh, bh
DOSCODE:719E                 call    $IOCTL
DOSCODE:71A1
DOSCODE:71A1 geterr:                                 ; ...
DOSCODE:71A1                 push    ss
DOSCODE:71A2                 pop     ds
DOSCODE:71A3                 pop     di
DOSCODE:71A4                 pop     es
DOSCODE:71A5                 assume es:nothing
DOSCODE:71A5                 pop     ax
DOSCODE:71A6                 retn
DOSCODE:71A6 Set_Media_ID    endp
DOSCODE:71A6
DOSCODE:71A7
DOSCODE:71A7 ; =============== S U B R O U T I N E =======================================
DOSCODE:71A7
DOSCODE:71A7
DOSCODE:71A7 Set_EXT_mode    proc near               ; ...
DOSCODE:71A7                 test    ss:EXTOPEN_ON, 1 ; EXT_OPEN_ON ; from extended open
DOSCODE:71AD                 jz      short NOTEX     ; no, do normal
DOSCODE:71AF                 push    ax
DOSCODE:71B0                 mov     ax, ss:SAVE_BX
DOSCODE:71B4                 or      es:[di+2], ax   ; [ES:DI+SF_ENTRY.sf_mode]
DOSCODE:71B8                 pop     ax
DOSCODE:71B9                 stc
DOSCODE:71BA
DOSCODE:71BA NOTEX:                                  ; ...
DOSCODE:71BA                 retn
DOSCODE:71BA Set_EXT_mode    endp
DOSCODE:71BA
DOSCODE:71BB ; ---------------------------------------------------------------------------
DOSCODE:71BB
DOSCODE:71BB DOS_OPEN:                               ; ...
DOSCODE:71BB                 mov     NoSetDir, 0
DOSCODE:71C0                 call    Check_Access_AX
DOSCODE:71C3                 jb      short do_ret_label
DOSCODE:71C5                 les     di, THISSFT
DOSCODE:71C9                 xor     ah, ah
DOSCODE:71CB                 mov     es:[di+2], al   ; [ES:DI+SF_ENTRY.sf_mode]
DOSCODE:71CF                 push    es
DOSCODE:71D0                 les     si, THISCDS
DOSCODE:71D4                 cmp     si, 0FFFFh      ; -1
DOSCODE:71D7                 jnz     short TEST_RE_NET1
DOSCODE:71D9                 pop     es
DOSCODE:71DA                 test    EXTOPEN_ON, 1   ; EXT_OPEN_ON
DOSCODE:71DF                 jz      short _NOEXTOP  ; do normal
DOSCODE:71E1
DOSCODE:71E1 _IFS_extopen:                           ; ...
DOSCODE:71E1                 mov     al, byte ptr SAVE_BX
DOSCODE:71E4                 push    ax              ; pass create attr to IFS
DOSCODE:71E5                 mov     ax, 112Eh       ; (MultNET*256)+46
DOSCODE:71E8                 int     2Fh             ; Multiplex - DOS 4 IFSFUNC.EXE - ???
DOSCODE:71E8                                         ; SS = DS = DOS CS, STACK: WORD ??? low byte = ???
DOSCODE:71E8                                         ; Return: CF set on error
DOSCODE:71E8                                         ; CF clear if successful
DOSCODE:71EA                 pop     bx              ; trash bx
DOSCODE:71EB
DOSCODE:71EB do_ret_label:                           ; ...
DOSCODE:71EB                 retn
DOSCODE:71EC ; ---------------------------------------------------------------------------
DOSCODE:71EC
DOSCODE:71EC _NOEXTOP:                               ; ...
DOSCODE:71EC                 test    DOS_FLAG, 1     ; EXECOPEN
DOSCODE:71F1                 jz      short not_exec_open
DOSCODE:71F3                 test    byte ptr DOS34_FLAG+1, 8 ; (EXEC_AWARE_REDIR>>8)
DOSCODE:71F8                 jz      short not_exec_open
DOSCODE:71FA                 mov     al, 23h         ; SHARING_DENY_WRITE+EXEC_OPEN
DOSCODE:71FC
DOSCODE:71FC not_exec_open:                          ; ...
DOSCODE:71FC                 push    ax
DOSCODE:71FD                 mov     ax, 1116h
DOSCODE:7200                 int     2Fh             ; Multiplex - NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE
DOSCODE:7200                                         ; ES:DI -> uninitialized SFT, SS = DOS CS
DOSCODE:7200                                         ; SDA first filename pointer -> fully-qualified name of file to open
DOSCODE:7200                                         ; STACK: WORD file open mode
DOSCODE:7200                                         ; Return: CF set on error
DOSCODE:7202                 pop     bx
DOSCODE:7203                 retn
DOSCODE:7204 ; ---------------------------------------------------------------------------
DOSCODE:7204
DOSCODE:7204 TEST_RE_NET1:                           ; ...
DOSCODE:7204                 test    word ptr es:[si+43h], 8000h ; [ES:SI+curdir.flags],curdir_isnet
DOSCODE:720A                 pop     es
DOSCODE:720B                 jz      short LOCAL_OPEN
DOSCODE:720D                 test    EXTOPEN_ON, 1   ; EXT_OPEN_ON
DOSCODE:7212                 jnz     short _IFS_extopen
DOSCODE:7214                 jmp     short _NOEXTOP  ; do_net_int2f
DOSCODE:7216 ; ---------------------------------------------------------------------------
DOSCODE:7216
DOSCODE:7216 LOCAL_OPEN:                             ; ...
DOSCODE:7216                 call    ECritDisk
DOSCODE:7219                 or      FastOpenFlg, 5  ; FastOpen_Set+Special_Fill_Set
DOSCODE:721E                 call    GETPATH
DOSCODE:7221                 jnb     short Open_found
DOSCODE:7223                 jnz     short bad_path2
DOSCODE:7225                 or      cl, cl
DOSCODE:7227                 jz      short bad_path2
DOSCODE:7229                 mov     ax, 2           ; error_file_not_found
DOSCODE:722C
DOSCODE:722C OpenBadRet:                             ; ...
DOSCODE:722C                 and     ss:FastOpenFlg, 80h
DOSCODE:7232                 stc
DOSCODE:7233                 call    LCritDisk
DOSCODE:7236                 jmp     Clear_FastOpen  ; (retn)
DOSCODE:7239 ; ---------------------------------------------------------------------------
DOSCODE:7239
DOSCODE:7239 bad_path2:                              ; ...
DOSCODE:7239                 mov     ax, 3           ; error_path_not_found
DOSCODE:723C                 jmp     short OpenBadRet
DOSCODE:723E ; ---------------------------------------------------------------------------
DOSCODE:723E
DOSCODE:723E Open_Bad_Access:                        ; ...
DOSCODE:723E                 mov     ax, 5           ; error_access_denied
DOSCODE:7241                 jmp     short OpenBadRet
DOSCODE:7243 ; ---------------------------------------------------------------------------
DOSCODE:7243
DOSCODE:7243 Open_found:                             ; ...
DOSCODE:7243                 jz      short Open_Bad_Access
DOSCODE:7245                 or      ah, ah
DOSCODE:7247                 js      short open_ok   ; Devices don't have attributes
DOSCODE:7249                 mov     es, word ptr CURBUF+2 ; get buffer location
DOSCODE:724D                 assume es:DOSCODE
DOSCODE:724D                 mov     al, es:[bx+0Bh] ; [ES:BX+dir_entry.dir_attr]
DOSCODE:7251                 test    al, 8           ; attr_volume_id
DOSCODE:7253                 jnz     short Open_Bad_Access ; can't open volume ids
DOSCODE:7255                 test    al, 1           ; attr_read_only ; check write on read only
DOSCODE:7257                 jz      short open_ok
DOSCODE:7259                 push    ds
DOSCODE:725A                 push    si
DOSCODE:725B                 lds     si, THISSFT
DOSCODE:725F                 assume ds:nothing
DOSCODE:725F                 mov     cx, [si+2]      ; [SI+SF_ENTRY.sf_mode]
DOSCODE:7262                 test    cx, 8000h       ; sf_isFCB ; is it FCB?
DOSCODE:7266                 jnz     short ResetAccess ; yes, reset the access
DOSCODE:7268                 mov     dl, cl
DOSCODE:726A                 and     dl, 0F0h        ; SHARING_MASK
DOSCODE:726D                 cmp     dl, 70h         ; SHARING_NET_FCB ; is it net FCB?
DOSCODE:7270                 jnz     short NormalOpen ; no
DOSCODE:7272
DOSCODE:7272 ResetAccess:                            ; ...
DOSCODE:7272                 and     cx, 0FFFCh      ; ~3 ; ~open_mode_mask ; clear access
DOSCODE:7275                 mov     [si+2], cx      ; [SI+SF_ENTRY.sf_mode]
DOSCODE:7278                 jmp     short FillSFT
DOSCODE:727A ; ---------------------------------------------------------------------------
DOSCODE:727A
DOSCODE:727A NormalOpen:                             ; ...
DOSCODE:727A                 and     cl, 3           ; it was 'and cl,0Fh' in MSDOS 6.22
DOSCODE:727A                                         ; (and cl,access_mask)
DOSCODE:727A                                         ; this may be open_mode_mask
DOSCODE:727D                 cmp     cl, 0           ; open_for_read ; is it open for read?
DOSCODE:7280                 jz      short FillSFT   ; yes
DOSCODE:7282                 pop     si
DOSCODE:7283                 pop     ds
DOSCODE:7284                 jmp     short Open_Bad_Access
DOSCODE:7286 ; ---------------------------------------------------------------------------
DOSCODE:7286
DOSCODE:7286 FillSFT:                                ; ...
DOSCODE:7286                 pop     si
DOSCODE:7287                 pop     ds
DOSCODE:7288
DOSCODE:7288 open_ok:                                ; ...
DOSCODE:7288                 call    DOOPEN          ; Fill in SFT
DOSCODE:728B                 and     ss:FastOpenFlg, 80h ; Fast_yes
DOSCODE:7291                 call    DO_SHARE_CHECK
DOSCODE:7294                 jnb     short SHARE_OK
DOSCODE:7296                 call    LCritDisk
DOSCODE:7299                 jmp     short Clear_FastOpen ; (retn)
DOSCODE:729B ; ---------------------------------------------------------------------------
DOSCODE:729B
DOSCODE:729B SHARE_OK:                               ; ...
DOSCODE:729B                 mov     ax, 3
DOSCODE:729E                 les     di, ds:THISSFT
DOSCODE:72A2                 assume es:nothing
DOSCODE:72A2                 call    ds:ShSU         ; call far [JShare+(14*4)] ; 14 = ShSU
DOSCODE:72A6                 call    LCritDisk
DOSCODE:72A9
DOSCODE:72A9 SET_SFT_MODE:                           ; ...
DOSCODE:72A9                 les     di, ds:THISSFT  ; Finish SFT initialization for new reference
DOSCODE:72AD                 call    DEV_OPEN_SFT
DOSCODE:72B0                 test    word ptr es:[di+2], 8000h ; [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
DOSCODE:72B6                 jz      short Clear_FastOpen ; sf_mode correct
DOSCODE:72B8                 mov     ax, ds:CurrentPDB
DOSCODE:72BB                 mov     es:[di+31h], ax ; [ES:DI+SF_ENTRY.sf_PID]
DOSCODE:72BB                                         ; For FCB sf_PID=PDB
DOSCODE:72BF
DOSCODE:72BF Clear_FastOpen:                         ; ...
DOSCODE:72BF                 retn
DOSCODE:72C0
DOSCODE:72C0 ; =============== S U B R O U T I N E =======================================
DOSCODE:72C0
DOSCODE:72C0
DOSCODE:72C0 SHARE_ERROR     proc near               ; ...
DOSCODE:72C0                 test    word ptr es:[di+2], 8000h ; [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
DOSCODE:72C6                 jnz     short _HARD_ERR
DOSCODE:72C8                 mov     cl, es:[di+2]   ; [ES:DI+SF_ENTRY.sf_mode]
DOSCODE:72CC                 and     cl, 0F0h        ; SHARING_MASK
DOSCODE:72CF                 cmp     cl, 0
DOSCODE:72D2                 jnz     short _NO_HARD_ERR
DOSCODE:72D4
DOSCODE:72D4 _HARD_ERR:                              ; ...
DOSCODE:72D4                 call    SHARE_VIOLATION
DOSCODE:72D7                 jnb     short Clear_FastOpen ; User wants retry
DOSCODE:72D9
DOSCODE:72D9 _NO_HARD_ERR:                           ; ...
DOSCODE:72D9                 mov     ax, 20h
DOSCODE:72DC                 stc
DOSCODE:72DD                 retn
DOSCODE:72DD SHARE_ERROR     endp
DOSCODE:72DD
DOSCODE:72DE
DOSCODE:72DE ; =============== S U B R O U T I N E =======================================
DOSCODE:72DE
DOSCODE:72DE
DOSCODE:72DE DO_SHARE_CHECK  proc near               ; ...
DOSCODE:72DE                 call    ECritDisk       ; enter critical section
DOSCODE:72E1
DOSCODE:72E1 OPN_RETRY:                              ; ...
DOSCODE:72E1                 mov     cx, ds:RetryCount
DOSCODE:72E5
DOSCODE:72E5 OpenShareRetry:                         ; ...
DOSCODE:72E5                 push    cx              ; Save number left to do
DOSCODE:72E6                 call    SHARE_CHECK     ; Final Check
DOSCODE:72E9                 pop     cx              ; CX = # left
DOSCODE:72EA                 jnb     short Share_Ok2 ; No problem with access
DOSCODE:72EC                 call    Idle
DOSCODE:72EF                 loop    OpenShareRetry  ; One more retry used up
DOSCODE:72F1                 les     di, ds:THISSFT
DOSCODE:72F5                 call    SHARE_ERROR
DOSCODE:72F8                 jnb     short OPN_RETRY ; User wants more retry
DOSCODE:72FA
DOSCODE:72FA Share_Ok2:                              ; ...
DOSCODE:72FA                 call    LCritDisk       ; leave critical section
DOSCODE:72FD                 retn
DOSCODE:72FD DO_SHARE_CHECK  endp
DOSCODE:72FD
DOSCODE:72FE
DOSCODE:72FE ; =============== S U B R O U T I N E =======================================
DOSCODE:72FE
DOSCODE:72FE
DOSCODE:72FE Check_Access_AX proc near               ; ...
DOSCODE:72FE                 mov     ds:OPEN_ACCESS, al ; Sharing Mode (bit 4 to 7)
DOSCODE:72FE                                         ; Access Mode (bit 0 to 3)
DOSCODE:7301                 push    bx
DOSCODE:7302                 mov     bl, al
DOSCODE:7304                 and     bl, 0F0h        ; SHARING_MASK
DOSCODE:7307                 cmp     ds:FSHARING, 0
DOSCODE:730C                 jz      short CheckShareMode ; not through server call, must be ok
DOSCODE:730E                 cmp     bl, 70h         ; SHARING_NET_FCB
DOSCODE:7311                 jz      short CheckAccessMode ; we have an FCB
DOSCODE:7313
DOSCODE:7313 CheckShareMode:                         ; ...
DOSCODE:7313                 cmp     bl, 40h         ; is this a good sharing mode?
DOSCODE:7316                 ja      short Make_Bad_Access
DOSCODE:7318
DOSCODE:7318 CheckAccessMode:                        ; ...
DOSCODE:7318                 mov     bl, al
DOSCODE:731A                 and     bl, 3           ; access_mask = 0Fh
DOSCODE:731D                 cmp     bl, 2
DOSCODE:7320                 ja      short Make_Bad_Access
DOSCODE:7322                 pop     bx
DOSCODE:7323                 clc
DOSCODE:7324                 retn
DOSCODE:7325 ; ---------------------------------------------------------------------------
DOSCODE:7325
DOSCODE:7325 Make_Bad_Access:                        ; ...
DOSCODE:7325                 mov     ax, 0Ch         ; error_invalid_access
DOSCODE:7328                 pop     bx
DOSCODE:7329                 stc
DOSCODE:732A                 retn
DOSCODE:732A Check_Access_AX endp
DOSCODE:732A
DOSCODE:732B
DOSCODE:732B ; =============== S U B R O U T I N E =======================================
DOSCODE:732B
DOSCODE:732B
DOSCODE:732B DISK_INFO       proc near               ; ...
DOSCODE:732B                 call    TestNet
DOSCODE:732E                 jnb     short LOCAL_DSK_INFO
DOSCODE:7330                 xor     si, si          ; free cluster count hw = 0
DOSCODE:7332                 xor     di, di          ; number of clusters hw = 0
DOSCODE:7334                 mov     ax, 110Ch
DOSCODE:7337                 int     2Fh             ; Multiplex - NETWORK REDIRECTOR - GET DISK SPACE
DOSCODE:7337                                         ; ES:DI -> current directory
DOSCODE:7337                                         ; Return: AL = sectors per cluster, BX = total clusters
DOSCODE:7337                                         ; CX = bytes per sector, DX = number of available clusters
DOSCODE:7339                 cmp     bx, 0FFFFh
DOSCODE:733C                 jnz     short dsk_info_1
DOSCODE:733E                 mov     di, bx
DOSCODE:7340
DOSCODE:7340 dsk_info_1:                             ; ...
DOSCODE:7340                 cmp     dx, 0FFFFh
DOSCODE:7343                 jnz     short disk_info_retn
DOSCODE:7345                 mov     si, dx
DOSCODE:7347
DOSCODE:7347 disk_info_retn:                         ; ...
DOSCODE:7347                 retn
DOSCODE:7348 ; ---------------------------------------------------------------------------
DOSCODE:7348
DOSCODE:7348 LOCAL_DSK_INFO:                         ; ...
DOSCODE:7348                 call    set_exerr_locus_disk ; mov byte [EXTERR_LOCUS],errLOC_Disk
DOSCODE:734B                 call    ECritDisk
DOSCODE:734E                 call    FATREAD_CDS     ; perform media check
DOSCODE:7351                 jb      short dsk_info_2
DOSCODE:7353                 xor     ax, ax
DOSCODE:7355                 mov     ds:CLUSTNUM_HW, ax ; clear high word of cluster number
DOSCODE:7358                 mov     bx, 2           ; Get first FAT sector into CURBUF
DOSCODE:735B                 call    UNPACK
DOSCODE:735E
DOSCODE:735E dsk_info_2:                             ; ...
DOSCODE:735E                 jnb     short dsk_info_3
DOSCODE:7360                 jmp     CRIT_LEAVE
DOSCODE:7363 ; ---------------------------------------------------------------------------
DOSCODE:7363
DOSCODE:7363 dsk_info_3:                             ; ...
DOSCODE:7363                 lds     si, ds:CURBUF
DOSCODE:7367                 mov     ah, [si+24]     ; [SI+BUFINSIZ] ; get FAT ID BYTE
DOSCODE:736A                 push    ss
DOSCODE:736B                 pop     ds
DOSCODE:736C                 assume ds:DOSCODE
DOSCODE:736C                 xor     si, si
DOSCODE:736E                 mov     di, si
DOSCODE:7370                 mov     dx, es:[bp+1Fh] ; [ES:BP+DPB.FREE_CNT] ; get free count
DOSCODE:7374                 cmp     es:[bp+0Fh], si ; FAT32 (16 bit FAT size = 0) ?
DOSCODE:7378                 jz      short dsk_info_4 ; yes
DOSCODE:737A                 mov     cx, es:[bp+0Dh] ; [ES:BP+DPB.MAX_CLUSTER]
DOSCODE:737E                 jmp     short dsk_info_5 ; zf=0, si=di=0
DOSCODE:7380 ; ---------------------------------------------------------------------------
DOSCODE:7380
DOSCODE:7380 dsk_info_4:                             ; ...
DOSCODE:7380                 mov     di, es:[bp+2Fh] ; DPB.LAST_CLUSTER+2
DOSCODE:7384                 mov     cx, es:[bp+2Dh] ; DPB.LAST_CLUSTER
DOSCODE:7388                 mov     si, es:[bp+21h] ; DPB.FREE_CNT_HW ; hw of free cluster count
DOSCODE:738C                 cmp     dx, si          ; same (zero) ?
DOSCODE:738E
DOSCODE:738E dsk_info_5:                             ; ...
DOSCODE:738E                 jnz     short dsk_info_6 ; not same (not zero)
DOSCODE:7390                 inc     dx
DOSCODE:7391                 jz      short dsk_info_8 ; 0FFFFh -> 0 (free count is invalid/initial)
DOSCODE:7391                                         ; free count calculation is needed
DOSCODE:7393                 dec     dx
DOSCODE:7394
DOSCODE:7394 dsk_info_6:                             ; ...
DOSCODE:7394                 cmp     si, di          ; same hw ?
DOSCODE:7396                 jnz     short dsk_info_7 ; no
DOSCODE:7398                 cmp     dx, cx          ; same lw ?
DOSCODE:739A
DOSCODE:739A dsk_info_7:                             ; ...
DOSCODE:739A                 jb      short GotVal    ; free cluster count < last cluster number
DOSCODE:739C                 xor     dx, dx          ; 0
DOSCODE:739E
DOSCODE:739E dsk_info_8:                             ; ...
DOSCODE:739E                 xor     si, si          ; 0
DOSCODE:73A0                 sub     cx, 1           ; last cluster number - 1 = number of clusters
DOSCODE:73A3                 sbb     di, si
DOSCODE:73A5                 or      byte ptr es:[bp+18h], 1 ; DPB.FIRST_ACCESS ; set first access
DOSCODE:73AA
DOSCODE:73AA SCANFREE:                               ; ...
DOSCODE:73AA                 push    si
DOSCODE:73AB                 push    CCONTENT_HW
DOSCODE:73AF                 push    di
DOSCODE:73B0                 call    UNPACK
DOSCODE:73B3                 pop     di
DOSCODE:73B4                 pop     CCONTENT_HW
DOSCODE:73B8                 pop     si
DOSCODE:73B9                 jb      short CRIT_LEAVE
DOSCODE:73BB                 jnz     short NOTFREECLUS
DOSCODE:73BD                 inc     dx              ; a free one
DOSCODE:73BE                 jnz     short NOTFREECLUS
DOSCODE:73C0                 inc     si              ; increase hw of free cluster count
DOSCODE:73C1
DOSCODE:73C1 NOTFREECLUS:                            ; ...
DOSCODE:73C1                 inc     bx              ; next cluster
DOSCODE:73C2                 jnz     short NOTFREECLUS2
DOSCODE:73C4                 inc     CLUSTNUM_HW     ; increase hw of (next) cluster number
DOSCODE:73C8
DOSCODE:73C8 NOTFREECLUS2:                           ; ...
DOSCODE:73C8                 sub     cx, 1           ; decrease remain cluster count for calculation
DOSCODE:73CB                 sbb     di, 0
DOSCODE:73CE                 jnz     short SCANFREE
DOSCODE:73D0                 jcxz    short NOTFREECLUS3 ; calculation completed
DOSCODE:73D2                 jmp     short SCANFREE
DOSCODE:73D4 ; ---------------------------------------------------------------------------
DOSCODE:73D4
DOSCODE:73D4 NOTFREECLUS3:                           ; ...
DOSCODE:73D4                 mov     di, CLUSTNUM_HW
DOSCODE:73D8                 sub     bx, 1
DOSCODE:73DB                 sbb     di, 0           ; di:bx = last cluster number
DOSCODE:73DE
DOSCODE:73DE ReturnVals:                             ; ...
DOSCODE:73DE                 xor     cx, cx
DOSCODE:73E0                 sub     bx, 1
DOSCODE:73E3                 sbb     di, cx          ; di:bx = number of clusters
DOSCODE:73E5                 mov     al, es:[bp+4]   ; [ES:BP+DPB.CLUSTER_MASK] ; spc - 1
DOSCODE:73E9                 inc     al              ; sectors per cluster
DOSCODE:73EB                 mov     es:[bp+1Fh], dx ; [ES:BP+DPB.FREE_CNT] ; free cluster count, lw
DOSCODE:73EF                 cmp     es:[bp+0Fh], cx ; FAT32 (16 bit FAT size = 0) ?
DOSCODE:73F3                 jnz     short ReturnVals2 ; no
DOSCODE:73F5                 mov     es:[bp+21h], si ; DPB.FREE_CNT_HW ; hw of free cluster count
DOSCODE:73F9                 call    update_fat32_fsinfo
DOSCODE:73FC
DOSCODE:73FC ReturnVals2:                            ; ...
DOSCODE:73FC                 mov     cx, es:[bp+2]   ; [ES:BP+DPB.SECTOR_SIZE] ; bytes per sector
DOSCODE:7400                 clc
DOSCODE:7401
DOSCODE:7401 CRIT_LEAVE:                             ; ...
DOSCODE:7401                 call    LCritDisk
DOSCODE:7404                 retn
DOSCODE:7405 ; ---------------------------------------------------------------------------
DOSCODE:7405
DOSCODE:7405 GotVal:                                 ; ...
DOSCODE:7405                 mov     bx, cx
DOSCODE:7407                 jmp     short ReturnVals
DOSCODE:7407 DISK_INFO       endp
DOSCODE:7407
DOSCODE:7409 ; ---------------------------------------------------------------------------
DOSCODE:7409
DOSCODE:7409 modify_spc:                             ; ...
DOSCODE:7409                 push    ax              ; ax = sectors per cluster
DOSCODE:740A                 push    dx
DOSCODE:740B                 mul     cx              ; bytes per sector
DOSCODE:740D                 cmp     dx, 0
DOSCODE:7410                 jnz     short mspc_1
DOSCODE:7412                 cmp     ax, 16384       ; 16 kilobytes (per cluster)
DOSCODE:7412                                         ; ***
DOSCODE:7412                                         ; actual disk size limit
DOSCODE:7412                                         ; without invalidating cluster counts is
DOSCODE:7412                                         ; 2 GB (512K clusters * 8 sectors per cluster)
DOSCODE:7412                                         ;      (128K clusters * 32 sectors per cluster)
DOSCODE:7415
DOSCODE:7415 mspc_1:                                 ; ...
DOSCODE:7415                 pop     dx
DOSCODE:7416                 pop     ax
DOSCODE:7417                 jbe     short mspc_3    ; bytes per cluster <= 16 KB
DOSCODE:7417                                         ; ***
DOSCODE:7417                                         ; bytes per cluster > 16 KB
DOSCODE:7419                 xor     di, di          ; 0
DOSCODE:741B                 mov     bx, 0FFFEh      ; (invalidated)
DOSCODE:741E                 or      si, si          ; hw of free cluster count
DOSCODE:7420                 jz      short mspc_2    ; si = 0
DOSCODE:7422                 mov     si, di          ; si = 0
DOSCODE:7424                 mov     dx, bx          ; dx = bx = 0FFFEh (invalidated)
DOSCODE:7426
DOSCODE:7426 mspc_2:                                 ; ...
DOSCODE:7426                 retn
DOSCODE:7427 ; ---------------------------------------------------------------------------
DOSCODE:7427
DOSCODE:7427 mspc_3:                                 ; ...
DOSCODE:7427                 shl     ax, 1           ; sectors per clust = sectors per clust * 2
DOSCODE:7427                                         ; (ax <= 32768)
DOSCODE:7429                 shr     di, 1           ; cluster count = cluster count /2
DOSCODE:7429                                         ; di:bx = modified value of total clusters
DOSCODE:742B
DOSCODE:742B mspc_4:
DOSCODE:742B                 rcr     bx, 1
DOSCODE:742D                 shr     si, 1           ; free clusters = free clusters / 2
DOSCODE:742F                 rcr     dx, 1           ; si:dx = modified value of free clusters
DOSCODE:7431
DOSCODE:7431 modify_cluster_count:                   ; ...
DOSCODE:7431                 or      di, di          ; hw of cluster count
DOSCODE:7433                 jnz     short modify_spc
DOSCODE:7435                 retn
DOSCODE:7436
DOSCODE:7436 ; =============== S U B R O U T I N E =======================================
DOSCODE:7436
DOSCODE:7436
DOSCODE:7436 update_fat32_fsinfo proc near           ; ...
DOSCODE:7436                 push    cx
DOSCODE:7437                 push    dx
DOSCODE:7438                 xor     cx, cx
DOSCODE:743A                 mov     dx, es:[bp+25h] ; DPB.FSINFO_SECTOR
DOSCODE:743E                 cmp     es:[bp+0Fh], cx ; DPB.FAT_SIZE
DOSCODE:743E                                         ; (16bit FAT size field = 0 for FAT32 fs)
DOSCODE:7442                 jnz     short u_fat32_inf_1
DOSCODE:7444                 cmp     dx, 0FFFFh      ; -1
DOSCODE:7447                 jnz     short u_fat32_inf_2
DOSCODE:7449
DOSCODE:7449 u_fat32_inf_1:                          ; ...
DOSCODE:7449                 pop     dx
DOSCODE:744A                 pop     cx
DOSCODE:744B                 and     byte ptr es:[bp+18h], 0F4h ; clear bit 0,1 and 3
DOSCODE:744B                                         ; bit 0 - FSINFO update (dirty) bit
DOSCODE:744B                                         ; bit 1 - BPB_RootClus update bit
DOSCODE:744B                                         ; bit 3 - BPB_ExtFlags update bit
DOSCODE:7450                 retn
DOSCODE:7451 ; ---------------------------------------------------------------------------
DOSCODE:7451
DOSCODE:7451 u_fat32_inf_2:                          ; ...
DOSCODE:7451                 push    ax
DOSCODE:7452                 push    bx
DOSCODE:7453                 push    di
DOSCODE:7454                 push    si
DOSCODE:7455                 push    ds
DOSCODE:7456                 cmp     ss:BuffInHMA, 0 ; is buffers in HMA?
DOSCODE:745C                 jz      short u_fat32_inf_3 ; no
DOSCODE:745E                 lds     di, ss:LoMemBuff ; read it into scratch buffer
DOSCODE:7463                 assume ds:nothing
DOSCODE:7463                 sub     di, 24          ; BUFINSIZ ; space for buffer header
DOSCODE:7463                                         ; (buffer header size = 24)
DOSCODE:7466                 clc
DOSCODE:7467                 jmp     short u_fat32_inf_4
DOSCODE:7469 ; ---------------------------------------------------------------------------
DOSCODE:7469
DOSCODE:7469 u_fat32_inf_3:                          ; ...
DOSCODE:7469                 push    es
DOSCODE:746A                 push    bp
DOSCODE:746B                 call    GETCURHEAD      ; ds:di = first buffer in queue
DOSCODE:746E                 push    dx
DOSCODE:746F                 call    BUFWRITE        ; BufWrite writes a buffer to the disk,
DOSCODE:746F                                         ;  if it's dirty.
DOSCODE:7472                 pop     dx
DOSCODE:7473                 pop     bp
DOSCODE:7474                 pop     es
DOSCODE:7475
DOSCODE:7475 u_fat32_inf_4:                          ; ...
DOSCODE:7475                 jb      short u_fat32_inf_5
DOSCODE:7477                 xor     cx, cx
DOSCODE:7479                 lea     bx, [di+24]     ; buffer data address
DOSCODE:747C                 mov     ss:ALLOWED, 18h ; Allowed_FAIL+Allowed_RETRY
DOSCODE:7482                 mov     ss:HIGH_SECTOR, cx ; 0
DOSCODE:7487                 inc     cx              ; cx = sector count
DOSCODE:7487                                         ; es:bp = DPB
DOSCODE:7488                 push    bx              ; ds:bx = buffer (data) address
DOSCODE:7489                 push    dx              ; HIGH_SECTOR:dx = disk sector address
DOSCODE:748A                 call    DREAD           ; read fs info sector
DOSCODE:748D                 pop     dx
DOSCODE:748E                 pop     bx
DOSCODE:748F                 jb      short u_fat32_inf_5
DOSCODE:7491                 cmp     word ptr [bx], 5252h ; 'RR'
DOSCODE:7495                 jnz     short u_fat32_inf_5
DOSCODE:7497                 cmp     word ptr [bx+2], 4161h ; 'aA' ; (NASM syntax)
DOSCODE:749C                 jnz     short u_fat32_inf_5
DOSCODE:749E                 cmp     word ptr [bx+1E4h], 7272h ; 'rr' at offset 484
DOSCODE:74A4                 jnz     short u_fat32_inf_5
DOSCODE:74A6                 cmp     word ptr [bx+1E6h], 6141h ; 'Aa' at offset 486
DOSCODE:74AC                 jnz     short u_fat32_inf_5
DOSCODE:74AE                 cmp     word ptr [bx+1FEh], 0AA55h ; boot signature at offset 510
DOSCODE:74B4                 jnz     short u_fat32_inf_5
DOSCODE:74B6                 mov     ax, es:[bp+1Fh] ; DPB.FREE_CNT
DOSCODE:74BA                 mov     [bx+1E8h], ax   ; FSINFO.Free_Count at offset 488
DOSCODE:74BE                 mov     ax, es:[bp+21h] ; DPB.FREE_CNT+2
DOSCODE:74C2                 mov     [bx+1EAh], ax   ; FSINFO.Free_Count+2
DOSCODE:74C6                 mov     ax, es:[bp+39h] ; DPB.FAT32_NXTFREE
DOSCODE:74CA                 mov     [bx+1ECh], ax   ; FSINFO.Nxt_Free at offset 492
DOSCODE:74CE                 mov     ax, es:[bp+3Bh] ; DPB.FAT32_NXTFREE+2
DOSCODE:74D2                 mov     [bx+1EEh], ax   ; FSINFO.Nxt_Free+2
DOSCODE:74D6                 xor     cx, cx
DOSCODE:74D8                 mov     ss:HIGH_SECTOR, cx ; 0
DOSCODE:74DD                 inc     cx              ; 1
DOSCODE:74DE                 call    DWRITE
DOSCODE:74E1
DOSCODE:74E1 u_fat32_inf_5:                          ; ...
DOSCODE:74E1                 pop     ds
DOSCODE:74E2                 pop     si
DOSCODE:74E3                 pop     di
DOSCODE:74E4                 pop     bx
DOSCODE:74E5                 pop     ax
DOSCODE:74E6                 jmp     u_fat32_inf_1
DOSCODE:74E6 update_fat32_fsinfo endp
DOSCODE:74E6
DOSCODE:74E9
DOSCODE:74E9 ; =============== S U B R O U T I N E =======================================
DOSCODE:74E9
DOSCODE:74E9
DOSCODE:74E9 DOS_SEARCH_FIRST proc near              ; ...
DOSCODE:74E9                 les     di, ds:THISCDS
DOSCODE:74ED                 cmp     di, 0FFFFh
DOSCODE:74F0                 jnz     short loc_74F8
DOSCODE:74F2                 mov     ax, 1119h
DOSCODE:74F5                 int     2Fh             ; Multiplex - NETWORK REDIRECTOR - ???
DOSCODE:74F7                 retn
DOSCODE:74F8 ; ---------------------------------------------------------------------------
DOSCODE:74F8
DOSCODE:74F8 loc_74F8:                               ; ...
DOSCODE:74F8                 test    byte ptr es:[di+44h], 80h
DOSCODE:74FD                 jz      short loc_7505
DOSCODE:74FF                 mov     ax, 111Bh
DOSCODE:7502                 int     2Fh             ; Multiplex - NETWORK REDIRECTOR - FINDFIRST
DOSCODE:7502                                         ; SS = DS = DOS CS, [DTA] = uninitialized 21-byte findfirst search data
DOSCODE:7502                                         ; SDA first filename pointer -> fully-qualified search template
DOSCODE:7502                                         ; SDA CDS pointer -> current directory
DOSCODE:7502                                         ; Return: CF set on error
DOSCODE:7504                 retn
DOSCODE:7505 ; ---------------------------------------------------------------------------
DOSCODE:7505
DOSCODE:7505 loc_7505:                               ; ...
DOSCODE:7505                 call    ECritDisk
DOSCODE:7508                 test    byte ptr ds:DOS34_FLAG+1, 4
DOSCODE:750D                 jz      short loc_7514
DOSCODE:750F                 or      ds:FastOpenFlg, 1
DOSCODE:7514
DOSCODE:7514 loc_7514:                               ; ...
DOSCODE:7514                 mov     ds:NoSetDir, 1
DOSCODE:7519                 mov     si, ss
DOSCODE:751B                 mov     ds, si
DOSCODE:751D                 assume ds:DOSCODE
DOSCODE:751D                 mov     si, WFP_START
DOSCODE:7521
DOSCODE:7521 loc_7521:                               ; ...
DOSCODE:7521                 lodsb
DOSCODE:7522                 or      al, al
DOSCODE:7524                 jz      short loc_752F
DOSCODE:7526                 cmp     al, 3Fh ; '?'
DOSCODE:7528                 jnz     short loc_7521
DOSCODE:752A                 and     FastOpenFlg, 80h
DOSCODE:752F
DOSCODE:752F loc_752F:                               ; ...
DOSCODE:752F                 call    GETPATH
DOSCODE:7532                 jnb     short loc_754D
DOSCODE:7534                 jnz     short loc_7548
DOSCODE:7536                 or      cl, cl
DOSCODE:7538                 jz      short loc_7548
DOSCODE:753A
DOSCODE:753A loc_753A:                               ; ...
DOSCODE:753A                 mov     ax, 12h
DOSCODE:753D
DOSCODE:753D loc_753D:                               ; ...
DOSCODE:753D                 and     ss:FastOpenFlg, 80h
DOSCODE:7543                 stc
DOSCODE:7544                 call    LCritDisk
DOSCODE:7547                 retn
DOSCODE:7548 ; ---------------------------------------------------------------------------
DOSCODE:7548
DOSCODE:7548 loc_7548:                               ; ...
DOSCODE:7548                 mov     ax, 3
DOSCODE:754B                 jmp     short loc_753D
DOSCODE:754D ; ---------------------------------------------------------------------------
DOSCODE:754D
DOSCODE:754D loc_754D:                               ; ...
DOSCODE:754D                 or      ah, ah
DOSCODE:754F                 jns     short loc_755B
DOSCODE:7551                 mov     LASTENT, 0FFFFh
DOSCODE:7557                 inc     FOUND_DEV
DOSCODE:755B
DOSCODE:755B loc_755B:                               ; ...
DOSCODE:755B                 les     di, DMAADD
DOSCODE:755F                 mov     si, WFP_START
DOSCODE:7563                 lodsb
DOSCODE:7564                 sub     al, 40h ; '@'
DOSCODE:7566                 stosb
DOSCODE:7567
DOSCODE:7567 loc_7567:                               ; ...
DOSCODE:7567                 les     di, DMAADD
DOSCODE:756B                 inc     di
DOSCODE:756C                 push    ds
DOSCODE:756D                 test    FastOpenFlg, 10h
DOSCODE:7572                 jz      short loc_757C
DOSCODE:7574                 mov     si, bx
DOSCODE:7576                 mov     ds, word ptr CURBUF+2
DOSCODE:757A                 jmp     short loc_757F
DOSCODE:757C ; ---------------------------------------------------------------------------
DOSCODE:757C
DOSCODE:757C loc_757C:                               ; ...
DOSCODE:757C                 mov     si, 54Bh
DOSCODE:757F
DOSCODE:757F loc_757F:                               ; ...
DOSCODE:757F                 movsb
DOSCODE:7580                 cmp     byte ptr es:[di-1], 5
DOSCODE:7585                 jnz     short loc_758C
DOSCODE:7587                 mov     byte ptr es:[di-1], 0E5h
DOSCODE:758C
DOSCODE:758C loc_758C:                               ; ...
DOSCODE:758C                 mov     cx, 5
DOSCODE:758F                 rep movsw
DOSCODE:7591                 pop     ds
DOSCODE:7592                 assume ds:nothing
DOSCODE:7592                 mov     al, ds:56Bh
DOSCODE:7595                 stosb
DOSCODE:7596                 push    ax
DOSCODE:7597                 mov     ax, ds:348h
DOSCODE:759A                 stosw
DOSCODE:759B                 mov     ax, ds:5C2h
DOSCODE:759E                 stosw
DOSCODE:759F                 mov     ax, ds:0ADCh
DOSCODE:75A2                 stosw
DOSCODE:75A3                 add     di, 2
DOSCODE:75A6                 pop     ax
DOSCODE:75A7                 or      ah, ah
DOSCODE:75A9                 js      short loc_75C6
DOSCODE:75AB                 cmp     word ptr ds:5E2h, 0FFFFh
DOSCODE:75B0                 jnz     short loc_75C2
DOSCODE:75B2                 test    byte ptr ds:1146h, 10h
DOSCODE:75B7                 jnz     short loc_75C2
DOSCODE:75B9                 mov     word ptr es:[di-8], 0FFFFh
DOSCODE:75BF                 jmp     loc_753A
DOSCODE:75C2 ; ---------------------------------------------------------------------------
DOSCODE:75C2
DOSCODE:75C2 loc_75C2:                               ; ...
DOSCODE:75C2                 mov     ds, word ptr ds:5E4h
DOSCODE:75C6
DOSCODE:75C6 loc_75C6:                               ; ...
DOSCODE:75C6                 mov     si, bx
DOSCODE:75C8                 mov     cx, 10h
DOSCODE:75CB                 mov     ax, di
DOSCODE:75CD                 rep movsw
DOSCODE:75CF                 mov     di, ax
DOSCODE:75D1                 cmp     byte ptr es:[di], 5
DOSCODE:75D5                 jnz     short loc_75DB
DOSCODE:75D7                 mov     byte ptr es:[di], 0E5h
DOSCODE:75DB
DOSCODE:75DB loc_75DB:                               ; ...
DOSCODE:75DB                 and     ss:FastOpenFlg, 80h
DOSCODE:75E1                 push    ss
DOSCODE:75E2                 pop     ds
DOSCODE:75E3                 assume ds:DOSCODE
DOSCODE:75E3                 clc
DOSCODE:75E4                 call    LCritDisk
DOSCODE:75E7                 retn
DOSCODE:75E7 DOS_SEARCH_FIRST endp
DOSCODE:75E7
DOSCODE:75E8 ; ---------------------------------------------------------------------------
DOSCODE:75E8                 les     di, DMAADD
DOSCODE:75EC
DOSCODE:75EC ; =============== S U B R O U T I N E =======================================
DOSCODE:75EC
DOSCODE:75EC
DOSCODE:75EC DOS_SEARCH_NEXT proc near               ; ...
DOSCODE:75EC                 mov     al, es:[di]
DOSCODE:75EF                 test    al, 80h
DOSCODE:75F1                 jz      short loc_75F9
DOSCODE:75F3                 mov     ax, 111Ch
DOSCODE:75F6                 int     2Fh             ; Multiplex - NETWORK REDIRECTOR - FINDNEXT
DOSCODE:75F6                                         ; SS = DS = DOS CS, [DTA] = 21-byte findfirst search data
DOSCODE:75F6                                         ; Return: CF set on error, AX = DOS error code
DOSCODE:75F6                                         ; CF clear if successful
DOSCODE:75F8                 retn
DOSCODE:75F9 ; ---------------------------------------------------------------------------
DOSCODE:75F9
DOSCODE:75F9 loc_75F9:                               ; ...
DOSCODE:75F9                 mov     EXTERR_LOCUS, 2
DOSCODE:75FE                 call    ECritDisk
DOSCODE:7601                 mov     word ptr THISCDS, offset DUMMYCDS
DOSCODE:7607                 mov     word ptr THISCDS+2, ds
DOSCODE:760B                 add     al, 40h ; '@'
DOSCODE:760D                 call    InitCDS
DOSCODE:7610                 jb      short loc_7682
DOSCODE:7612                 les     di, THISCDS
DOSCODE:7616                 les     bp, es:[di+45h]
DOSCODE:761A                 mov     word ptr THISDPB, bp
DOSCODE:761E                 mov     word ptr THISDPB+2, es
DOSCODE:7622                 mov     al, es:[bp+0]
DOSCODE:7626                 mov     THISDRV, al
DOSCODE:7629                 mov     word ptr CREATING, 0E500h
DOSCODE:762F                 mov     NoSetDir, 1
DOSCODE:7634                 lds     si, DMAADD
DOSCODE:7638                 assume ds:nothing
DOSCODE:7638                 lodsb
DOSCODE:7638 DOS_SEARCH_NEXT endp
DOSCODE:7638
DOSCODE:7639
DOSCODE:7639 ; =============== S U B R O U T I N E =======================================
DOSCODE:7639
DOSCODE:7639
DOSCODE:7639 RENAME_NEXT     proc near               ; ...
DOSCODE:7639                 mov     di, ss
DOSCODE:763B                 mov     es, di
DOSCODE:763D                 assume es:DOSCODE
DOSCODE:763D                 mov     di, offset NAME1
DOSCODE:7640                 movsb
DOSCODE:7641                 mov     cx, 5
DOSCODE:7644                 rep movsw
DOSCODE:7646                 lodsb
DOSCODE:7647                 mov     ss:ATTRIB, al
DOSCODE:764B                 lodsw
DOSCODE:764C                 or      ax, ax
DOSCODE:764E                 js      short loc_7682
DOSCODE:7650                 push    ax
DOSCODE:7651                 lodsw
DOSCODE:7652                 mov     bx, ax
DOSCODE:7654                 lodsw
DOSCODE:7655                 mov     bp, ss
DOSCODE:7657                 mov     ds, bp
DOSCODE:7659                 assume ds:DOSCODE
DOSCODE:7659                 les     bp, THISDPB
DOSCODE:765D                 assume es:nothing
DOSCODE:765D                 cmp     word ptr es:[bp+0Fh], 0
DOSCODE:7662                 jz      short loc_7666
DOSCODE:7664                 xor     ax, ax
DOSCODE:7666
DOSCODE:7666 loc_7666:                               ; ...
DOSCODE:7666                 mov     ROOTCLUST_HW, ax
DOSCODE:7669                 call    SETDIRSRCH
DOSCODE:766C                 jb      short loc_7681
DOSCODE:766E                 call    STARTSRCH
DOSCODE:7671                 pop     ax
DOSCODE:7672                 call    GETENT
DOSCODE:7675                 jb      short loc_7682
DOSCODE:7677                 call    NEXTENT
DOSCODE:767A                 jb      short loc_7682
DOSCODE:767C                 xor     ah, ah
DOSCODE:767E                 jmp     loc_7567
DOSCODE:7681 ; ---------------------------------------------------------------------------
DOSCODE:7681
DOSCODE:7681 loc_7681:                               ; ...
DOSCODE:7681                 pop     ax
DOSCODE:7682
DOSCODE:7682 loc_7682:                               ; ...
DOSCODE:7682                 jmp     loc_753A
DOSCODE:7682 RENAME_NEXT     endp
DOSCODE:7682
DOSCODE:7685
DOSCODE:7685 ; =============== S U B R O U T I N E =======================================
DOSCODE:7685
DOSCODE:7685
DOSCODE:7685 sub_7685        proc near               ; ...
DOSCODE:7685                 mov     es, ss:CurrentPDB
DOSCODE:768A                 mov     cx, es:32h
DOSCODE:768F
DOSCODE:768F loc_768F:                               ; ...
DOSCODE:768F                 mov     bx, cx
DOSCODE:7691                 push    cx
DOSCODE:7692                 dec     bx
DOSCODE:7693                 call    $CLOSE
DOSCODE:7696                 pop     cx
DOSCODE:7697                 loop    loc_768F
DOSCODE:7699                 push    ss
DOSCODE:769A                 pop     ds
DOSCODE:769B                 mov     ax, 111Dh
DOSCODE:769E                 int     2Fh             ; Multiplex - NETWORK REDIRECTOR - CLOSE ALL REMOTE FILES FOR PROCESS
DOSCODE:769E                                         ; DS???, SS = DOS CS
DOSCODE:76A0                 call    MFTCloseP
DOSCODE:76A4                 les     di, ss:SFTFCB
DOSCODE:76A9
DOSCODE:76A9 loc_76A9:                               ; ...
DOSCODE:76A9                 mov     cx, es
DOSCODE:76AB                 or      cx, di
DOSCODE:76AD                 jcxz    short loc_76D4
DOSCODE:76AF                 push    di
DOSCODE:76B0                 mov     cx, es:[di+4]
DOSCODE:76B4                 jcxz    short loc_76CB
DOSCODE:76B6                 lea     di, [di+6]
DOSCODE:76B9                 mov     ax, ss:PROC_ID
DOSCODE:76BD
DOSCODE:76BD loc_76BD:                               ; ...
DOSCODE:76BD                 cmp     es:[di+31h], ax
DOSCODE:76C1                 jnz     short loc_76C6
DOSCODE:76C3                 call    SFT_FREE
DOSCODE:76C6
DOSCODE:76C6 loc_76C6:                               ; ...
DOSCODE:76C6                 add     di, 3Bh ; ';'
DOSCODE:76C9                 loop    loc_76BD
DOSCODE:76CB
DOSCODE:76CB loc_76CB:                               ; ...
DOSCODE:76CB                 pop     di
DOSCODE:76CC                 les     di, es:[di]
DOSCODE:76CF                 cmp     di, 0FFFFh
DOSCODE:76D2                 jnz     short loc_76A9
DOSCODE:76D4
DOSCODE:76D4 loc_76D4:                               ; ...
DOSCODE:76D4                 xor     bx, bx
DOSCODE:76D6
DOSCODE:76D6 loc_76D6:                               ; ...
DOSCODE:76D6                 push    bx
DOSCODE:76D7                 call    SFFromSFN
DOSCODE:76DA                 pop     bx
DOSCODE:76DB                 jnb     short loc_76DE
DOSCODE:76DD                 retn
DOSCODE:76DE ; ---------------------------------------------------------------------------
DOSCODE:76DE
DOSCODE:76DE loc_76DE:                               ; ...
DOSCODE:76DE                 cmp     word ptr es:[di], 0FFFFh
DOSCODE:76E2                 jnz     short loc_76FB
DOSCODE:76E4                 mov     ax, ss:PROC_ID
DOSCODE:76E8                 cmp     es:[di+31h], ax
DOSCODE:76EC                 jnz     short loc_76FB
DOSCODE:76EE                 mov     ax, ss:USER_ID
DOSCODE:76F2                 sub     ax, es:[di+2Fh]
DOSCODE:76F6                 jnz     short loc_76FB
DOSCODE:76F8                 call    SFT_FREE
DOSCODE:76FB
DOSCODE:76FB loc_76FB:                               ; ...
DOSCODE:76FB                 inc     bx
DOSCODE:76FC                 jmp     short loc_76D6
DOSCODE:76FC sub_7685        endp
DOSCODE:76FC
DOSCODE:76FE ; ---------------------------------------------------------------------------
DOSCODE:76FE
DOSCODE:76FE DOS_CLOSE:                              ; ...
DOSCODE:76FE                 les     di, THISSFT
DOSCODE:7702                 mov     bx, es:[di+5]
DOSCODE:7706                 test    bh, 80h
DOSCODE:7709                 jz      short loc_7711
DOSCODE:770B                 mov     ax, 1106h
DOSCODE:770E                 int     2Fh             ; Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE FILE
DOSCODE:770E                                         ; ES:DI -> SFT
DOSCODE:770E                                         ; SFT DPB field -> DPB of drive containing file
DOSCODE:770E                                         ; Return: CF set on error, AX = DOS error code
DOSCODE:770E                                         ; CF clear if successful
DOSCODE:7710                 retn
DOSCODE:7711 ; ---------------------------------------------------------------------------
DOSCODE:7711
DOSCODE:7711 loc_7711:                               ; ...
DOSCODE:7711                 call    ECritDisk
DOSCODE:7714                 call    sub_78E3
DOSCODE:7717                 call    FREE_SFT
DOSCODE:771A                 push    ss
DOSCODE:771B                 pop     ds
DOSCODE:771C                 push    ax
DOSCODE:771D                 push    bx
DOSCODE:771E                 call    ShareEnd
DOSCODE:7721                 pop     bx
DOSCODE:7722                 pop     ax
DOSCODE:7723
DOSCODE:7723 ; =============== S U B R O U T I N E =======================================
DOSCODE:7723
DOSCODE:7723 ; Attributes: noreturn
DOSCODE:7723
DOSCODE:7723 sub_7723        proc near               ; ...
DOSCODE:7723                 push    ax
DOSCODE:7724                 test    bx, 0C0h
DOSCODE:7728                 jz      short loc_772D
DOSCODE:772A                 jmp     loc_782D
DOSCODE:772D ; ---------------------------------------------------------------------------
DOSCODE:772D
DOSCODE:772D loc_772D:                               ; ...
DOSCODE:772D                 call    sub_7873
DOSCODE:7730                 mov     al, 5
DOSCODE:7732                 jb      short loc_7772
DOSCODE:7734                 test    word ptr [si+2], 4
DOSCODE:7739                 jnz     short loc_7757
DOSCODE:773B                 push    ds
DOSCODE:773C                 push    bx
DOSCODE:773D                 lds     bx, [si+7]
DOSCODE:7740                 assume ds:nothing
DOSCODE:7740                 mov     bl, [bx]
DOSCODE:7742                 xor     bh, bh
DOSCODE:7744                 test    byte ptr ss:[bx+1308h], 4
DOSCODE:774A                 pop     bx
DOSCODE:774B                 jz      short loc_7756
DOSCODE:774D                 pop     ds
DOSCODE:774E                 push    ds
DOSCODE:774F                 call    DATE16
DOSCODE:7752                 mov     es:[di+12h], ax
DOSCODE:7756
DOSCODE:7756 loc_7756:                               ; ...
DOSCODE:7756                 pop     ds
DOSCODE:7757
DOSCODE:7757 loc_7757:                               ; ...
DOSCODE:7757                 push    di
DOSCODE:7758                 push    si
DOSCODE:7759                 lea     si, [si+20h]
DOSCODE:775C                 call    XCHGP
DOSCODE:775F                 call    MetaCompare
DOSCODE:7762                 call    XCHGP
DOSCODE:7765                 pop     si
DOSCODE:7766                 pop     di
DOSCODE:7767                 jz      short loc_7775
DOSCODE:7769                 mov     di, si
DOSCODE:776B                 push    ds
DOSCODE:776C                 pop     es
DOSCODE:776D                 push    ss
DOSCODE:776E                 pop     ds
DOSCODE:776F                 assume ds:DOSCODE
DOSCODE:776F                 stc
DOSCODE:7770                 mov     al, 2
DOSCODE:7772
DOSCODE:7772 loc_7772:                               ; ...
DOSCODE:7772                 jmp     loc_7855
DOSCODE:7775 ; ---------------------------------------------------------------------------
DOSCODE:7775
DOSCODE:7775 loc_7775:                               ; ...
DOSCODE:7775                 mov     al, [si+4]
DOSCODE:7778                 test    word ptr [si+2], 8000h
DOSCODE:777D                 jz      short loc_7789
DOSCODE:777F                 mov     ch, es:[di+0Bh]
DOSCODE:7783                 mov     ss:ATTRIB, al
DOSCODE:7787                 jmp     short loc_778D
DOSCODE:7789 ; ---------------------------------------------------------------------------
DOSCODE:7789
DOSCODE:7789 loc_7789:                               ; ...
DOSCODE:7789                 mov     es:[di+0Bh], al
DOSCODE:778D
DOSCODE:778D loc_778D:                               ; ...
DOSCODE:778D                 or      byte ptr es:[di+0Bh], 20h
DOSCODE:7792                 mov     ax, es:[di+1Ah]
DOSCODE:7796                 mov     ss:OLD_FIRSTCLUS, ax
DOSCODE:779A                 mov     ax, es:[di+14h]
DOSCODE:779E                 mov     ss:OLD_FIRSTCLUS_HW, ax
DOSCODE:77A2                 mov     ax, [si+2Bh]
DOSCODE:77A5                 mov     es:[di+1Ah], ax
DOSCODE:77A9                 mov     ax, [si+2Dh]
DOSCODE:77AC                 mov     es:[di+14h], ax
DOSCODE:77B0                 push    ds
DOSCODE:77B1                 lds     ax, [si+11h]
DOSCODE:77B4                 assume ds:nothing
DOSCODE:77B4                 mov     es:[di+1Ch], ax
DOSCODE:77B8                 mov     word ptr es:[di+1Eh], ds
DOSCODE:77BC                 pop     ds
DOSCODE:77BD                 push    ds
DOSCODE:77BE                 lds     ax, [si+0Dh]
DOSCODE:77C1                 mov     es:[di+16h], ax
DOSCODE:77C5                 mov     word ptr es:[di+18h], ds
DOSCODE:77C9                 pop     ds
DOSCODE:77CA                 test    byte ptr es:[bx+5], 40h
DOSCODE:77CF                 jnz     short loc_77D9
DOSCODE:77D1                 call    INC_DIRTY_COUNT
DOSCODE:77D4                 or      byte ptr es:[bx+5], 40h
DOSCODE:77D9
DOSCODE:77D9 loc_77D9:                               ; ...
DOSCODE:77D9                 push    ds
DOSCODE:77DA                 push    si
DOSCODE:77DB                 mov     cx, [si+2Bh]
DOSCODE:77DE                 mov     al, ss:THISDRV
DOSCODE:77E2                 push    dx
DOSCODE:77E3                 mov     ah, 0
DOSCODE:77E5                 mov     dl, al
DOSCODE:77E7                 push    bx
DOSCODE:77E8                 mov     bx, [si+2Dh]
DOSCODE:77EB                 or      bx, bx
DOSCODE:77ED                 jnz     short loc_77FF
DOSCODE:77EF                 or      cx, cx
DOSCODE:77F1                 jnz     short loc_77FF
DOSCODE:77F3                 mov     ah, 3
DOSCODE:77F5                 mov     dh, [si+1Fh]
DOSCODE:77F8                 lds     di, [si+1Bh]
DOSCODE:77FB                 mov     cx, ds
DOSCODE:77FD                 jmp     short loc_7819
DOSCODE:77FF ; ---------------------------------------------------------------------------
DOSCODE:77FF
DOSCODE:77FF loc_77FF:                               ; ...
DOSCODE:77FF                 cmp     bx, ss:OLD_FIRSTCLUS_HW
DOSCODE:7804                 jnz     short loc_780D
DOSCODE:7806                 cmp     cx, ss:OLD_FIRSTCLUS
DOSCODE:780B                 jz      short loc_7819
DOSCODE:780D
DOSCODE:780D loc_780D:                               ; ...
DOSCODE:780D                 mov     ah, 2
DOSCODE:780F                 mov     cx, ss:OLD_FIRSTCLUS
DOSCODE:7814                 mov     bx, ss:OLD_FIRSTCLUS_HW
DOSCODE:7819
DOSCODE:7819 loc_7819:                               ; ...
DOSCODE:7819                 push    ss
DOSCODE:781A                 pop     ds
DOSCODE:781B                 assume ds:DOSCODE
DOSCODE:781B                 xchg    bx, si
DOSCODE:781D                 call    FastOpen_Update
DOSCODE:7820                 xchg    bx, si
DOSCODE:7822                 pop     bx
DOSCODE:7823                 pop     dx
DOSCODE:7824                 call    FLUSHBUF
DOSCODE:7827                 pop     di
DOSCODE:7828                 pop     es
DOSCODE:7829                 mov     al, 5
DOSCODE:782B                 jb      short loc_7842
DOSCODE:782D
DOSCODE:782D loc_782D:                               ; ...
DOSCODE:782D                 test    word ptr es:[di+5], 8080h
DOSCODE:7833                 jnz     short loc_7855
DOSCODE:7835                 push    es
DOSCODE:7836                 push    bp
DOSCODE:7837                 les     bp, es:[di+7]
DOSCODE:783B                 call    update_fat32_fsinfo
DOSCODE:783E                 pop     bp
DOSCODE:783F                 pop     es
DOSCODE:7840                 jmp     short loc_7855
DOSCODE:7842 ; ---------------------------------------------------------------------------
DOSCODE:7842
DOSCODE:7842 loc_7842:                               ; ...
DOSCODE:7842                 push    ds
DOSCODE:7843                 push    bx
DOSCODE:7844                 lds     bx, es:[di+7]
DOSCODE:7848                 assume ds:nothing
DOSCODE:7848                 mov     bl, [bx]
DOSCODE:784A                 xor     bh, bh
DOSCODE:784C                 and     ss:drive_flags[bx], 0FBh ; clear bit 2
DOSCODE:7852                 pop     bx
DOSCODE:7853                 pop     ds
DOSCODE:7854                 stc
DOSCODE:7855
DOSCODE:7855 loc_7855:                               ; ...
DOSCODE:7855                 pushf
DOSCODE:7856                 call    DEV_CLOSE_SFT
DOSCODE:7856 sub_7723        endp
DOSCODE:7856
DOSCODE:7859 ; ---------------------------------------------------------------------------
DOSCODE:7859                 popf
DOSCODE:785A                 pop     cx
DOSCODE:785B                 pushf
DOSCODE:785C                 loop    NoFree
DOSCODE:785E                 call    SFT_FREE
DOSCODE:7861 ; START OF FUNCTION CHUNK FOR DOS_COMMIT
DOSCODE:7861
DOSCODE:7861 NoFree:                                 ; ...
DOSCODE:7861                 call    LCritDisk
DOSCODE:7864                 popf
DOSCODE:7865                 retn
DOSCODE:7865 ; END OF FUNCTION CHUNK FOR DOS_COMMIT
DOSCODE:7866
DOSCODE:7866 ; =============== S U B R O U T I N E =======================================
DOSCODE:7866
DOSCODE:7866
DOSCODE:7866 FREE_SFT        proc near               ; ...
DOSCODE:7866                 pushf
DOSCODE:7867                 mov     ax, es:[di]
DOSCODE:786A                 dec     ax
DOSCODE:786B                 jnz     short loc_786E
DOSCODE:786D                 dec     ax
DOSCODE:786E
DOSCODE:786E loc_786E:                               ; ...
DOSCODE:786E                 xchg    ax, es:[di]
DOSCODE:7871                 popf
DOSCODE:7872                 retn
DOSCODE:7872 FREE_SFT        endp
DOSCODE:7872
DOSCODE:7873
DOSCODE:7873 ; =============== S U B R O U T I N E =======================================
DOSCODE:7873
DOSCODE:7873
DOSCODE:7873 sub_7873        proc near               ; ...
DOSCODE:7873                 call    set_exerr_locus_disk
DOSCODE:7876                 push    es
DOSCODE:7877                 push    di
DOSCODE:7878                 mov     dx, es:[di+1Dh]
DOSCODE:787C                 mov     ds:607h, dx
DOSCODE:7880                 push    dx
DOSCODE:7881                 mov     dx, es:[di+1Bh]
DOSCODE:7885                 push    dx
DOSCODE:7886                 call    FATREAD_SFT
DOSCODE:7889                 pop     dx
DOSCODE:788A                 pop     word ptr ds:607h
DOSCODE:788E                 jb      short loc_78B5
DOSCODE:7890                 xor     al, al
DOSCODE:7892                 mov     byte ptr ds:34Bh, 18h
DOSCODE:7897                 call    GETBUFFR
DOSCODE:789A                 jb      short loc_78B5
DOSCODE:789C                 pop     si
DOSCODE:789D                 pop     ds
DOSCODE:789E                 les     di, ss:CURBUF
DOSCODE:78A3                 or      byte ptr es:[di+5], 4
DOSCODE:78A8                 mov     bx, di
DOSCODE:78AA                 lea     di, [di+18h]
DOSCODE:78AD                 mov     al, 20h ; ' '
DOSCODE:78AF                 mul     byte ptr [si+1Fh]
DOSCODE:78B2                 add     di, ax
DOSCODE:78B4                 retn
DOSCODE:78B5 ; ---------------------------------------------------------------------------
DOSCODE:78B5
DOSCODE:78B5 loc_78B5:                               ; ...
DOSCODE:78B5                 pop     di
DOSCODE:78B6                 pop     es
DOSCODE:78B7
DOSCODE:78B7 locret_78B7:                            ; ...
DOSCODE:78B7                 retn
DOSCODE:78B7 sub_7873        endp
DOSCODE:78B7
DOSCODE:78B8
DOSCODE:78B8 ; =============== S U B R O U T I N E =======================================
DOSCODE:78B8
DOSCODE:78B8
DOSCODE:78B8 DOS_COMMIT      proc near               ; ...
DOSCODE:78B8
DOSCODE:78B8 ; FUNCTION CHUNK AT DOSCODE:7861 SIZE 00000005 BYTES
DOSCODE:78B8
DOSCODE:78B8                 les     di, ds:59Eh
DOSCODE:78BC                 mov     bx, es:[di+5]
DOSCODE:78C0                 test    bl, 0C0h
DOSCODE:78C3                 jnz     short locret_78B7
DOSCODE:78C5                 test    bh, 80h
DOSCODE:78C8                 jz      short loc_78D0
DOSCODE:78CA                 mov     ax, 1107h
DOSCODE:78CD                 int     2Fh             ; Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE
DOSCODE:78CD                                         ; ES:DI -> SFT
DOSCODE:78CD                                         ; SFT DPB field -> DPB of drive containing file
DOSCODE:78CD                                         ; Return: CF set on error, AX = DOS error code
DOSCODE:78CD                                         ; CF clear if successful
DOSCODE:78CF
DOSCODE:78CF locret_78CF:                            ; ...
DOSCODE:78CF                 retn
DOSCODE:78D0 ; ---------------------------------------------------------------------------
DOSCODE:78D0
DOSCODE:78D0 loc_78D0:                               ; ...
DOSCODE:78D0                 call    ECritDisk
DOSCODE:78D3                 call    sub_78E3
DOSCODE:78D6                 mov     ax, 0FFFFh
DOSCODE:78D9                 call    sub_7723
DOSCODE:78DC ; ---------------------------------------------------------------------------
DOSCODE:78DC                 pushf
DOSCODE:78DD                 call    DEV_OPEN_SFT
DOSCODE:78E0                 jmp     NoFree
DOSCODE:78E0 DOS_COMMIT      endp
DOSCODE:78E0
DOSCODE:78E3
DOSCODE:78E3 ; =============== S U B R O U T I N E =======================================
DOSCODE:78E3
DOSCODE:78E3
DOSCODE:78E3 sub_78E3        proc near               ; ...
DOSCODE:78E3                 test    bx, 40C0h
DOSCODE:78E7                 jnz     short locret_78CF
DOSCODE:78E9                 push    ax
DOSCODE:78EA                 push    bx
DOSCODE:78EB                 call    DATE16
DOSCODE:78EE                 mov     es:[di+0Fh], ax
DOSCODE:78F2                 mov     es:[di+0Dh], dx
DOSCODE:78F6                 xor     ax, ax
DOSCODE:78F8                 call    dword ptr ds:0C8h
DOSCODE:78FC                 pop     bx
DOSCODE:78FD                 pop     ax
DOSCODE:78FE                 retn
DOSCODE:78FE sub_78E3        endp
DOSCODE:78FE
DOSCODE:78FF ; ---------------------------------------------------------------------------
DOSCODE:78FF
DOSCODE:78FF DOS_MKDIR:                              ; ...
DOSCODE:78FF                 call    TestNet
DOSCODE:7902                 jnb     short LOCAL_MKDIR
DOSCODE:7904                 mov     ax, 1103h
DOSCODE:7907                 int     2Fh             ; Multiplex - NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY
DOSCODE:7907                                         ; SS = DOS CS
DOSCODE:7907                                         ; SDA first filename pointer -> fully-qualified directory name
DOSCODE:7907                                         ; SDA CDS pointer -> current directory
DOSCODE:7907                                         ; Return: CF set on error, AX = DOS error code
DOSCODE:7907                                         ; CF clear if successful
DOSCODE:7909                 retn
DOSCODE:790A ; ---------------------------------------------------------------------------
DOSCODE:790A ; START OF FUNCTION CHUNK FOR DOS_CHDIR
DOSCODE:790A
DOSCODE:790A NODEACCERRJ:                            ; ...
DOSCODE:790A                 mov     ax, 5           ; error_access_denied
DOSCODE:790D
DOSCODE:790D _BadRet:                                ; ...
DOSCODE:790D                 stc
DOSCODE:790E
DOSCODE:790E chdir_mkdir_done:                       ; ...
DOSCODE:790E                 call    LCritDisk
DOSCODE:7911                 retn
DOSCODE:7911 ; END OF FUNCTION CHUNK FOR DOS_CHDIR
DOSCODE:7912 ; ---------------------------------------------------------------------------
DOSCODE:7912
DOSCODE:7912 PATHNFJ:                                ; ...
DOSCODE:7912                 call    LCritDisk
DOSCODE:7915                 jmp     SET_MKND_ERR
DOSCODE:7918 ; ---------------------------------------------------------------------------
DOSCODE:7918
DOSCODE:7918 LOCAL_MKDIR:                            ; ...
DOSCODE:7918                 call    ECritDisk
DOSCODE:791B                 mov     word ptr ds:THISSFT+2, ss
DOSCODE:791F                 mov     word ptr ds:THISSFT, 43Eh
DOSCODE:7925                 mov     word ptr ds:RENBUF+33h, 0
DOSCODE:792B                 mov     al, 10h
DOSCODE:792D                 call    MakeNode
DOSCODE:7930                 jb      short PATHNFJ
DOSCODE:7932                 cmp     ax, 3
DOSCODE:7935                 jz      short NODEACCERRJ
DOSCODE:7937                 les     bp, ds:THISDPB
DOSCODE:793B                 lds     di, ds:CURBUF
DOSCODE:793F                 sub     si, di
DOSCODE:7941                 push    si
DOSCODE:7942                 lds     ax, [di+6]
DOSCODE:7945                 push    ds
DOSCODE:7946                 push    ax
DOSCODE:7947                 push    ss
DOSCODE:7948                 pop     ds
DOSCODE:7949                 assume ds:DOSCODE
DOSCODE:7949                 xor     ax, ax
DOSCODE:794B                 mov     dx, ax
DOSCODE:794D                 xchg    dx, DIRSTART_HW
DOSCODE:7951                 xchg    ax, DIRSTART
DOSCODE:7955                 cmp     word ptr es:[bp+0Fh], 0
DOSCODE:795A                 jnz     short loc_796C
DOSCODE:795C                 cmp     es:[bp+35h], ax
DOSCODE:7960                 jnz     short loc_796C
DOSCODE:7962                 cmp     es:[bp+37h], dx
DOSCODE:7966                 jnz     short loc_796C
DOSCODE:7968                 xor     ax, ax
DOSCODE:796A                 xor     dx, dx
DOSCODE:796C
DOSCODE:796C loc_796C:                               ; ...
DOSCODE:796C                 push    dx
DOSCODE:796D                 push    ax
DOSCODE:796E                 call    loc_9424
DOSCODE:7971                 jb      short loc_79F2
DOSCODE:7973                 call    GETENT
DOSCODE:7976                 jb      short loc_79F2
DOSCODE:7978                 les     di, CURBUF
DOSCODE:797C                 call    SET_BUF_DIRTY
DOSCODE:797F                 add     di, 18h
DOSCODE:7982                 mov     ax, 202Eh
DOSCODE:7985                 mov     dx, DIRSTART_HW
DOSCODE:7989                 mov     CLUSTERS_HW, dx
DOSCODE:798D                 mov     dx, DIRSTART
DOSCODE:7991                 call    sub_94F3
DOSCODE:7994                 mov     ax, 2E2Eh
DOSCODE:7997                 pop     dx
DOSCODE:7998                 pop     CLUSTERS_HW
DOSCODE:799C                 call    sub_94F3
DOSCODE:799F                 les     bp, THISDPB
DOSCODE:79A3                 mov     ALLOWED, 18h
DOSCODE:79A8                 pop     dx
DOSCODE:79A9                 pop     HIGH_SECTOR
DOSCODE:79AD                 xor     al, al
DOSCODE:79AF                 call    GETBUFFR
DOSCODE:79B2                 jb      short loc_7A20
DOSCODE:79B4                 mov     ax, DIRSTART_HW
DOSCODE:79B7                 mov     dx, DIRSTART
DOSCODE:79BB                 lds     di, CURBUF
DOSCODE:79BF                 assume ds:nothing
DOSCODE:79BF                 or      byte ptr [di+5], 4
DOSCODE:79C3                 pop     si
DOSCODE:79C4                 add     si, di
DOSCODE:79C6                 mov     [si], dx
DOSCODE:79C8                 mov     [si-6], ax
DOSCODE:79CB                 xor     dx, dx
DOSCODE:79CD                 mov     [si+2], dx
DOSCODE:79D0                 mov     [si+4], dx
DOSCODE:79D3
DOSCODE:79D3 DIRUP:                                  ; ...
DOSCODE:79D3                 test    byte ptr [di+5], 40h ; [DI+BUFFINFO.buf_flags],buf_dirty
DOSCODE:79D7                 jnz     short yesdirty6 ; already dirty
DOSCODE:79D9                 call    INC_DIRTY_COUNT
DOSCODE:79DC                 or      byte ptr [di+5], 40h ; [DI+BUFFINFO.buf_flags],buf_dirty
DOSCODE:79E0
DOSCODE:79E0 yesdirty6:                              ; ...
DOSCODE:79E0                 push    ss
DOSCODE:79E1                 pop     ds
DOSCODE:79E2                 assume ds:DOSCODE
DOSCODE:79E2                 call    update_fat32_fsinfo
DOSCODE:79E5                 mov     al, es:[bp+0]
DOSCODE:79E9                 call    FLUSHBUF
DOSCODE:79EC                 mov     ax, 5           ; error_access_denied
DOSCODE:79EF ; START OF FUNCTION CHUNK FOR DOS_CHDIR
DOSCODE:79EF
DOSCODE:79EF lmd_cd_done:                            ; ...
DOSCODE:79EF                 jmp     chdir_mkdir_done
DOSCODE:79EF ; END OF FUNCTION CHUNK FOR DOS_CHDIR
DOSCODE:79F2 ; ---------------------------------------------------------------------------
DOSCODE:79F2
DOSCODE:79F2 loc_79F2:                               ; ...
DOSCODE:79F2                 pop     dx
DOSCODE:79F3                 pop     dx
DOSCODE:79F4                 pop     dx
DOSCODE:79F5                 pop     HIGH_SECTOR
DOSCODE:79F9                 les     bp, THISDPB
DOSCODE:79FD                 mov     ALLOWED, 18h
DOSCODE:7A02                 xor     al, al
DOSCODE:7A04                 call    GETBUFFR
DOSCODE:7A07                 jb      short loc_7A20
DOSCODE:7A09                 lds     di, CURBUF
DOSCODE:7A0D                 assume ds:nothing
DOSCODE:7A0D                 or      byte ptr [di+5], 4
DOSCODE:7A11                 pop     si
DOSCODE:7A12                 add     si, di
DOSCODE:7A14                 sub     si, 1Ah
DOSCODE:7A17                 mov     byte ptr [si], 0E5h
DOSCODE:7A1A                 call    DIRUP
DOSCODE:7A1D
DOSCODE:7A1D loc_7A1D:                               ; ...
DOSCODE:7A1D                 jmp     NODEACCERRJ
DOSCODE:7A20 ; ---------------------------------------------------------------------------
DOSCODE:7A20
DOSCODE:7A20 loc_7A20:                               ; ...
DOSCODE:7A20                 pop     si
DOSCODE:7A21                 jmp     short loc_7A1D
DOSCODE:7A23
DOSCODE:7A23 ; =============== S U B R O U T I N E =======================================
DOSCODE:7A23
DOSCODE:7A23
DOSCODE:7A23 DOS_CHDIR       proc near               ; ...
DOSCODE:7A23
DOSCODE:7A23 ; FUNCTION CHUNK AT DOSCODE:790A SIZE 00000008 BYTES
DOSCODE:7A23 ; FUNCTION CHUNK AT DOSCODE:79EF SIZE 00000003 BYTES
DOSCODE:7A23
DOSCODE:7A23                 call    TestNet
DOSCODE:7A26                 jnb     short loc_7A2E
DOSCODE:7A28                 mov     ax, 1105h
DOSCODE:7A2B                 int     2Fh             ; Multiplex - NETWORK REDIRECTOR - CHDIR
DOSCODE:7A2B                                         ; SS = DOS CS
DOSCODE:7A2B                                         ; SDA first filename pointer -> fully-qualified directory name
DOSCODE:7A2B                                         ; SDA CDS pointer -> current directory
DOSCODE:7A2B                                         ; Return: CF set on error, AX = DOS error code
DOSCODE:7A2B                                         ; CF clear if successful
DOSCODE:7A2D                 retn
DOSCODE:7A2E ; ---------------------------------------------------------------------------
DOSCODE:7A2E
DOSCODE:7A2E loc_7A2E:                               ; ...
DOSCODE:7A2E                 call    ECritDisk
DOSCODE:7A31                 test    byte ptr es:[di+44h], 20h
DOSCODE:7A36                 jz      short loc_7A44
DOSCODE:7A38                 mov     word ptr es:[di+4Bh], 0FFFFh
DOSCODE:7A3E                 mov     word ptr es:[di+49h], 0FFFFh
DOSCODE:7A44
DOSCODE:7A44 loc_7A44:                               ; ...
DOSCODE:7A44                 mov     ds:NoSetDir, 0
DOSCODE:7A49                 mov     ds:SATTRIB, 16h
DOSCODE:7A4E                 or      ds:FastOpenFlg, 1
DOSCODE:7A53                 call    GETPATH
DOSCODE:7A56                 lahf
DOSCODE:7A57                 and     ds:FastOpenFlg, 80h
DOSCODE:7A5C                 sahf
DOSCODE:7A5D                 mov     ax, 3
DOSCODE:7A60                 jb      short ChDirDone
DOSCODE:7A62                 jnz     short NOTDIRPATH
DOSCODE:7A64                 mov     cx, ds:DIRSTART
DOSCODE:7A68                 clc
DOSCODE:7A69
DOSCODE:7A69 ChDirDone:                              ; ...
DOSCODE:7A69                 jmp     short lmd_cd_done
DOSCODE:7A6B ; ---------------------------------------------------------------------------
DOSCODE:7A6B
DOSCODE:7A6B DOS_RMDIR:                              ; ...
DOSCODE:7A6B                 call    TestNet
DOSCODE:7A6E                 jnb     short LOCAL_RMDIR
DOSCODE:7A70                 mov     ax, 1101h
DOSCODE:7A73                 int     2Fh             ; Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY
DOSCODE:7A73                                         ; SS = DOS CS
DOSCODE:7A73                                         ; SDA first filename pointer -> fully-qualified directory name
DOSCODE:7A73                                         ; SDA CDS pointer -> current directory
DOSCODE:7A73                                         ; Return: CF set on error, AX = DOS error code
DOSCODE:7A73                                         ; CF clear if successful
DOSCODE:7A75                 retn
DOSCODE:7A76 ; ---------------------------------------------------------------------------
DOSCODE:7A76
DOSCODE:7A76 LOCAL_RMDIR:                            ; ...
DOSCODE:7A76                 call    ECritDisk
DOSCODE:7A79                 mov     ds:NoSetDir, 0
DOSCODE:7A7E                 mov     ds:SATTRIB, 16h ; attr_directory+attr_system+attr_hidden
DOSCODE:7A83                 call    GETPATH
DOSCODE:7A86                 jb      short NOPATH    ; Path not found
DOSCODE:7A88                 jnz     short NOTDIRPATH ; Path not a DIR
DOSCODE:7A8A                 mov     di, ds:DIRSTART
DOSCODE:7A8E                 or      di, di          ; Root ?
DOSCODE:7A90                 jnz     short lrd_chk_fat32 ; No
DOSCODE:7A92                 cmp     ds:DIRSTART_HW, 0
DOSCODE:7A97                 jz      short NOTDIRPATH ; root directory
DOSCODE:7A99
DOSCODE:7A99 lrd_chk_fat32:                          ; ...
DOSCODE:7A99                 cmp     word ptr es:[bp+0Fh], 0 ; [es:bp+DPB.FAT_SIZE]
DOSCODE:7A9E                 jnz     short rmdir_get_buf ; not FAT32
DOSCODE:7AA0                 cmp     di, es:[bp+35h] ; [es:bp+DPB.ROOT_CLUSTER]
DOSCODE:7AA4                 jnz     short rmdir_get_buf
DOSCODE:7AA6                 mov     di, ds:DIRSTART_HW
DOSCODE:7AAA                 cmp     di, es:[bp+37h] ; [es:bp+DPB.ROOT_CLUSTER+2]
DOSCODE:7AAE                 jnz     short rmdir_get_buf
DOSCODE:7AB0                 jmp     short NOTDIRPATH
DOSCODE:7AB2 ; ---------------------------------------------------------------------------
DOSCODE:7AB2
DOSCODE:7AB2 NOPATH:                                 ; ...
DOSCODE:7AB2                 mov     ax, 3           ; error_path_not_found
DOSCODE:7AB5                 jmp     _BadRet
DOSCODE:7AB8 ; ---------------------------------------------------------------------------
DOSCODE:7AB8
DOSCODE:7AB8 NOTDIRPATHPOP:                          ; ...
DOSCODE:7AB8                 pop     ax
DOSCODE:7AB9                 pop     ax
DOSCODE:7ABA
DOSCODE:7ABA NOTDIRPATHPOP2:                         ; ...
DOSCODE:7ABA                 pop     ax
DOSCODE:7ABB
DOSCODE:7ABB NOTDIRPATH:                             ; ...
DOSCODE:7ABB                 jmp     NODEACCERRJ
DOSCODE:7ABE ; ---------------------------------------------------------------------------
DOSCODE:7ABE
DOSCODE:7ABE rmdir_get_buf:                          ; ...
DOSCODE:7ABE                 lds     di, ds:CURBUF
DOSCODE:7AC2                 sub     bx, di          ; Compute true offset
DOSCODE:7AC4                 push    bx              ; Save entry pointer
DOSCODE:7AC5                 les     di, [di+6]      ; [DI+BUFFINFO.buf_sector]
DOSCODE:7AC8                 push    es              ; Save sector number
DOSCODE:7AC9                 push    di
DOSCODE:7ACA                 push    ss
DOSCODE:7ACB                 pop     ds
DOSCODE:7ACC                 assume ds:DOSCODE
DOSCODE:7ACC                 push    ss
DOSCODE:7ACD                 pop     es
DOSCODE:7ACE                 assume es:DOSCODE
DOSCODE:7ACE                 mov     di, offset NAME1
DOSCODE:7AD1                 mov     ax, 3Fh ; '?'
DOSCODE:7AD4                 mov     cx, 10
DOSCODE:7AD7                 rep stosb               ; al = '?'
DOSCODE:7AD9                 stosw                   ; ah = 0 ; Nul terminate it
DOSCODE:7ADA                 call    STARTSRCH       ; Set search
DOSCODE:7ADD                 call    GETENTRY        ; Get start of directory
DOSCODE:7AE0                 jb      short NOTDIRPATHPOP ; Screw up
DOSCODE:7AE2                 mov     ds, word ptr CURBUF+2
DOSCODE:7AE6                 mov     si, bx
DOSCODE:7AE8                 lodsw
DOSCODE:7AE9                 cmp     ax, 202Eh       ; First entry '.'?
DOSCODE:7AEC                 jnz     short NOTDIRPATHPOP ; Nope
DOSCODE:7AEE                 add     si, 30          ; Next entry
DOSCODE:7AF1                 lodsw
DOSCODE:7AF2                 cmp     ax, 2E2Eh       ; Second entry '..'?
DOSCODE:7AF5                 jnz     short NOTDIRPATHPOP ; Nope
DOSCODE:7AF7                 push    ss
DOSCODE:7AF8                 pop     ds
DOSCODE:7AF9                 mov     LASTENT, 2      ; Skip . and ..
DOSCODE:7AFF                 call    GETENTRY        ; Get next entry
DOSCODE:7B02                 jb      short NOTDIRPATHPOP ; Screw up
DOSCODE:7B04                 mov     ATTRIB, 16h     ; attr_directory+attr_hidden+attr_system
DOSCODE:7B09                 call    SRCH            ; Do a search
DOSCODE:7B0C                 jnb     short NOTDIRPATHPOP
DOSCODE:7B0E                 cmp     FAILERR, 0
DOSCODE:7B13                 jnz     short NOTDIRPATHPOP ; Failure of search due to I 24 FAIL
DOSCODE:7B15                 les     bp, THISDPB
DOSCODE:7B19                 assume es:nothing
DOSCODE:7B19                 mov     bx, DIRSTART_HW
DOSCODE:7B1D                 mov     CLUSTNUM_HW, bx
DOSCODE:7B21                 mov     bx, DIRSTART
DOSCODE:7B25                 call    RELEASE         ; Release data in sub dir
DOSCODE:7B28                 jb      short NOTDIRPATHPOP
DOSCODE:7B2A                 call    update_fat32_fsinfo
DOSCODE:7B2D                 pop     dx
DOSCODE:7B2E                 pop     HIGH_SECTOR
DOSCODE:7B32                 mov     ALLOWED, 18h
DOSCODE:7B37                 xor     al, al
DOSCODE:7B39                 call    GETBUFFR
DOSCODE:7B3C                 jnb     short loc_7B41
DOSCODE:7B3E                 jmp     NOTDIRPATHPOP2
DOSCODE:7B41 ; ---------------------------------------------------------------------------
DOSCODE:7B41
DOSCODE:7B41 loc_7B41:                               ; ...
DOSCODE:7B41                 lds     di, CURBUF
DOSCODE:7B45                 assume ds:nothing
DOSCODE:7B45                 or      byte ptr [di+5], 4
DOSCODE:7B49                 pop     bx
DOSCODE:7B4A                 add     bx, di
DOSCODE:7B4C                 mov     byte ptr [bx], 0E5h
DOSCODE:7B4F                 push    ds
DOSCODE:7B50                 push    ss
DOSCODE:7B51                 pop     ds
DOSCODE:7B52                 assume ds:DOSCODE
DOSCODE:7B52                 call    FastOpen_Delete
DOSCODE:7B55                 pop     ds
DOSCODE:7B56                 assume ds:nothing
DOSCODE:7B56                 jmp     DIRUP
DOSCODE:7B56 DOS_CHDIR       endp
DOSCODE:7B56
DOSCODE:7B59
DOSCODE:7B59 ; =============== S U B R O U T I N E =======================================
DOSCODE:7B59
DOSCODE:7B59
DOSCODE:7B59 sub_7B59        proc near               ; ...
DOSCODE:7B59                 mov     ds:CONSWAP, 0
DOSCODE:7B5E                 retn
DOSCODE:7B5E sub_7B59        endp
DOSCODE:7B5E
DOSCODE:7B5F
DOSCODE:7B5F ; =============== S U B R O U T I N E =======================================
DOSCODE:7B5F
DOSCODE:7B5F
DOSCODE:7B5F sub_7B5F        proc near               ; ...
DOSCODE:7B5F                 push    ax
DOSCODE:7B60                 mov     ax, ds:59Eh
DOSCODE:7B63                 mov     byte ptr ds:357h, 1
DOSCODE:7B68                 mov     ds:5E6h, ax
DOSCODE:7B6B                 mov     ax, ds:5A0h
DOSCODE:7B6E                 mov     ds:5E8h, ax
DOSCODE:7B71                 pop     ax
DOSCODE:7B72                 retn
DOSCODE:7B72 sub_7B5F        endp
DOSCODE:7B72
DOSCODE:7B73
DOSCODE:7B73 ; =============== S U B R O U T I N E =======================================
DOSCODE:7B73
DOSCODE:7B73 ; Attributes: thunk
DOSCODE:7B73
DOSCODE:7B73 sub_7B73        proc near               ; ...
DOSCODE:7B73                 jmp     sub_8225
DOSCODE:7B73 sub_7B73        endp
DOSCODE:7B73
DOSCODE:7B76
DOSCODE:7B76 ; =============== S U B R O U T I N E =======================================
DOSCODE:7B76
DOSCODE:7B76
DOSCODE:7B76 DOS_READ        proc near               ; ...
DOSCODE:7B76                 les     di, ds:59Eh
DOSCODE:7B7A                 mov     al, es:[di+2]
DOSCODE:7B7E                 and     al, 3
DOSCODE:7B80                 cmp     al, 1
DOSCODE:7B82                 jz      short sub_7B73
DOSCODE:7B84                 call    SETUP
DOSCODE:7B87                 jcxz    short loc_7B94
DOSCODE:7B89                 call    IsSFTNet
DOSCODE:7B8C                 jz      short loc_7B96
DOSCODE:7B8E                 mov     ax, 1108h
DOSCODE:7B91                 int     2Fh             ; Multiplex - NETWORK REDIRECTOR - READ FROM REMOTE FILE
DOSCODE:7B91                                         ; ES:DI -> SFT
DOSCODE:7B91                                         ; SFT DPB field -> DPB of drive containing file
DOSCODE:7B91                                         ; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
DOSCODE:7B91                                         ; Return: CF set on error, CX = bytes read
DOSCODE:7B93                 retn
DOSCODE:7B94 ; ---------------------------------------------------------------------------
DOSCODE:7B94
DOSCODE:7B94 loc_7B94:                               ; ...
DOSCODE:7B94                 clc
DOSCODE:7B95                 retn
DOSCODE:7B96 ; ---------------------------------------------------------------------------
DOSCODE:7B96
DOSCODE:7B96 loc_7B96:                               ; ...
DOSCODE:7B96                 test    byte ptr es:[di+5], 80h
DOSCODE:7B9B                 jnz     short loc_7BAC
DOSCODE:7B9D                 mov     byte ptr ds:323h, 2
DOSCODE:7BA2                 call    ECritDisk
DOSCODE:7BA5                 call    sub_81D5
DOSCODE:7BA8                 call    LCritDisk
DOSCODE:7BAB                 retn
DOSCODE:7BAC ; ---------------------------------------------------------------------------
DOSCODE:7BAC
DOSCODE:7BAC loc_7BAC:                               ; ...
DOSCODE:7BAC                 mov     byte ptr ds:323h, 4
DOSCODE:7BB1                 mov     bl, es:[di+5]
DOSCODE:7BB5                 les     di, ds:32Ch
DOSCODE:7BB9                 test    bl, 40h
DOSCODE:7BBC                 jz      short loc_7BC5
DOSCODE:7BBE                 test    bl, 4
DOSCODE:7BC1                 jz      short loc_7BC8
DOSCODE:7BC3                 xor     al, al
DOSCODE:7BC5
DOSCODE:7BC5 loc_7BC5:                               ; ...
DOSCODE:7BC5                 jmp     loc_7C9A
DOSCODE:7BC8 ; ---------------------------------------------------------------------------
DOSCODE:7BC8
DOSCODE:7BC8 loc_7BC8:                               ; ...
DOSCODE:7BC8                 test    bl, 20h
DOSCODE:7BCB                 jnz     short loc_7BD5
DOSCODE:7BCD                 test    bl, 1
DOSCODE:7BD0                 jz      short loc_7C32
DOSCODE:7BD2                 jmp     loc_7D53
DOSCODE:7BD5 ; ---------------------------------------------------------------------------
DOSCODE:7BD5
DOSCODE:7BD5 loc_7BD5:                               ; ...
DOSCODE:7BD5                 push    es
DOSCODE:7BD6                 pop     ds
DOSCODE:7BD7                 test    ss:IsWin386, 1
DOSCODE:7BDD                 jz      short loc_7BE7
DOSCODE:7BDF                 test    bl, 1
DOSCODE:7BE2                 jz      short loc_7BE7
DOSCODE:7BE4                 jmp     loc_7C9D
DOSCODE:7BE7 ; ---------------------------------------------------------------------------
DOSCODE:7BE7
DOSCODE:7BE7 loc_7BE7:                               ; ...
DOSCODE:7BE7                 mov     bx, di
DOSCODE:7BE9                 xor     ax, ax
DOSCODE:7BEB                 cwd
DOSCODE:7BEC                 call    SETREAD
DOSCODE:7BEF                 push    ds
DOSCODE:7BF0                 lds     si, ss:THISSFT
DOSCODE:7BF5                 call    DEVIOCALL
DOSCODE:7BF8                 mov     dx, di
DOSCODE:7BFA                 mov     ah, 86h
DOSCODE:7BFC                 mov     di, ss:DEVCALL_REQSTAT
DOSCODE:7C01                 or      di, di
DOSCODE:7C03                 jns     short loc_7C28
DOSCODE:7C05                 call    sub_A173
DOSCODE:7C08                 mov     di, dx
DOSCODE:7C0A                 sub     cx, ss:CALLBPB
DOSCODE:7C0F                 add     di, ss:CALLBPB
DOSCODE:7C14                 or      al, al
DOSCODE:7C16                 jz      short loc_7C28
DOSCODE:7C18                 cmp     al, 3
DOSCODE:7C1A                 jz      short loc_7C1F
DOSCODE:7C1C                 pop     ds
DOSCODE:7C1D                 jmp     short loc_7BE7
DOSCODE:7C1F ; ---------------------------------------------------------------------------
DOSCODE:7C1F
DOSCODE:7C1F loc_7C1F:                               ; ...
DOSCODE:7C1F                 pop     di
DOSCODE:7C20
DOSCODE:7C20 loc_7C20:                               ; ...
DOSCODE:7C20                 les     di, ss:THISSFT
DOSCODE:7C25                 jmp     sub_8223
DOSCODE:7C28 ; ---------------------------------------------------------------------------
DOSCODE:7C28
DOSCODE:7C28 loc_7C28:                               ; ...
DOSCODE:7C28                 pop     di
DOSCODE:7C29                 mov     di, dx
DOSCODE:7C2B                 add     di, ss:CALLBPB
DOSCODE:7C30                 jmp     short loc_7BC5
DOSCODE:7C32 ; ---------------------------------------------------------------------------
DOSCODE:7C32
DOSCODE:7C32 loc_7C32:                               ; ...
DOSCODE:7C32                 push    es
DOSCODE:7C33                 pop     ds
DOSCODE:7C34                 mov     bx, di
DOSCODE:7C36                 xor     ax, ax
DOSCODE:7C38                 cwd
DOSCODE:7C39                 push    cx
DOSCODE:7C3A                 mov     cx, 1
DOSCODE:7C3D                 call    SETREAD
DOSCODE:7C40                 pop     cx
DOSCODE:7C41                 lds     si, ss:THISSFT
DOSCODE:7C46                 lds     si, [si+7]
DOSCODE:7C49
DOSCODE:7C49 loc_7C49:                               ; ...
DOSCODE:7C49                 call    DSKSTATCHK
DOSCODE:7C4C                 call    DEVIOCALL2
DOSCODE:7C4F                 push    di
DOSCODE:7C50                 mov     ah, 86h
DOSCODE:7C52                 mov     di, ss:DEVCALL_REQSTAT
DOSCODE:7C57                 or      di, di
DOSCODE:7C59                 jns     short loc_7C72
DOSCODE:7C5B                 call    sub_A173
DOSCODE:7C5E                 pop     di
DOSCODE:7C5F                 mov     ss:CALLBPB, 1
DOSCODE:7C66                 cmp     al, 1
DOSCODE:7C68                 jz      short loc_7C49
DOSCODE:7C6A                 cmp     al, 3
DOSCODE:7C6C                 jz      short loc_7C20
DOSCODE:7C6E                 xor     al, al
DOSCODE:7C70                 jmp     short loc_7C84
DOSCODE:7C72 ; ---------------------------------------------------------------------------
DOSCODE:7C72
DOSCODE:7C72 loc_7C72:                               ; ...
DOSCODE:7C72                 pop     di
DOSCODE:7C73                 cmp     ss:CALLBPB, 1
DOSCODE:7C79                 jnz     short loc_7C9A
DOSCODE:7C7B                 push    ds
DOSCODE:7C7C                 mov     ds, ss:CALLXAD_2
DOSCODE:7C81                 assume ds:DOSCODE
DOSCODE:7C81                 mov     al, [di]
DOSCODE:7C83                 pop     ds
DOSCODE:7C84                 assume ds:nothing
DOSCODE:7C84
DOSCODE:7C84 loc_7C84:                               ; ...
DOSCODE:7C84                 inc     word ptr ss:CALLBR
DOSCODE:7C89                 mov     ss:DEVCALL_REQSTAT, 0
DOSCODE:7C90                 inc     di
DOSCODE:7C91                 cmp     al, 1Ah
DOSCODE:7C93                 jz      short loc_7C9A
DOSCODE:7C95                 cmp     al, 0Dh
DOSCODE:7C97                 loopne  loc_7C49
DOSCODE:7C99                 inc     ax
DOSCODE:7C9A
DOSCODE:7C9A loc_7C9A:                               ; ...
DOSCODE:7C9A                 jmp     loc_7D3E
DOSCODE:7C9D ; ---------------------------------------------------------------------------
DOSCODE:7C9D
DOSCODE:7C9D loc_7C9D:                               ; ...
DOSCODE:7C9D                 mov     bx, di
DOSCODE:7C9F                 xor     ax, ax
DOSCODE:7CA1                 cwd
DOSCODE:7CA2                 call    SETREAD
DOSCODE:7CA5
DOSCODE:7CA5 loc_7CA5:                               ; ...
DOSCODE:7CA5                 mov     byte ptr es:[bx+2], 5
DOSCODE:7CAA                 push    ds
DOSCODE:7CAB                 lds     si, ss:THISSFT
DOSCODE:7CB0                 call    DEVIOCALL
DOSCODE:7CB3                 pop     ds
DOSCODE:7CB4                 test    word ptr es:[bx+3], 8000h
DOSCODE:7CBA                 jz      short loc_7CCF
DOSCODE:7CBC                 push    ds
DOSCODE:7CBD                 mov     dx, di
DOSCODE:7CBF
DOSCODE:7CBF loc_7CBF:                               ; ...
DOSCODE:7CBF                 call    sub_A173
DOSCODE:7CC2                 mov     di, dx
DOSCODE:7CC4                 or      al, al
DOSCODE:7CC6                 jz      short loc_7D16
DOSCODE:7CC8                 cmp     al, 3
DOSCODE:7CCA                 jz      short loc_7D05
DOSCODE:7CCC                 pop     ds
DOSCODE:7CCD                 jmp     short loc_7CA5
DOSCODE:7CCF ; ---------------------------------------------------------------------------
DOSCODE:7CCF
DOSCODE:7CCF loc_7CCF:                               ; ...
DOSCODE:7CCF                 test    word ptr es:[bx+3], 200h
DOSCODE:7CD5                 jnz     short loc_7D0E
DOSCODE:7CD7                 mov     byte ptr es:[bx+2], 4
DOSCODE:7CDC                 mov     word ptr es:[bx+12h], 1
DOSCODE:7CE2                 push    ds
DOSCODE:7CE3                 lds     si, ss:THISSFT
DOSCODE:7CE8                 call    DEVIOCALL
DOSCODE:7CEB                 mov     dx, di
DOSCODE:7CED                 mov     di, es:[bx+3]
DOSCODE:7CF1                 mov     ah, 86h
DOSCODE:7CF3                 test    di, 8000h
DOSCODE:7CF7                 jnz     short loc_7CBF
DOSCODE:7CF9                 pop     ds
DOSCODE:7CFA                 mov     di, dx
DOSCODE:7CFC                 dec     cx
DOSCODE:7CFD                 jz      short loc_7D17
DOSCODE:7CFF                 inc     word ptr es:[bx+0Eh]
DOSCODE:7D03                 jmp     short loc_7CA5
DOSCODE:7D05 ; ---------------------------------------------------------------------------
DOSCODE:7D05
DOSCODE:7D05 loc_7D05:                               ; ...
DOSCODE:7D05                 pop     di
DOSCODE:7D06                 les     di, ss:THISSFT
DOSCODE:7D0B                 jmp     sub_8223
DOSCODE:7D0E ; ---------------------------------------------------------------------------
DOSCODE:7D0E
DOSCODE:7D0E loc_7D0E:                               ; ...
DOSCODE:7D0E                 push    ax
DOSCODE:7D0F                 mov     ah, 84h
DOSCODE:7D11                 int     2Ah             ; Microsoft Networks - KEYBOARD BUSY LOOP
DOSCODE:7D13                 pop     ax
DOSCODE:7D14                 jmp     short loc_7CA5
DOSCODE:7D16 ; ---------------------------------------------------------------------------
DOSCODE:7D16
DOSCODE:7D16 loc_7D16:                               ; ...
DOSCODE:7D16                 pop     ds
DOSCODE:7D17
DOSCODE:7D17 loc_7D17:                               ; ...
DOSCODE:7D17                 add     di, ss:CALLBPB
DOSCODE:7D1C                 jmp     loc_7BC5
DOSCODE:7D1F ; ---------------------------------------------------------------------------
DOSCODE:7D1F
DOSCODE:7D1F loc_7D1F:                               ; ...
DOSCODE:7D1F                 lodsb
DOSCODE:7D20                 stosb
DOSCODE:7D21                 cmp     al, 0Dh
DOSCODE:7D23                 jnz     short loc_7D28
DOSCODE:7D25                 mov     byte ptr [si], 0Ah
DOSCODE:7D28
DOSCODE:7D28 loc_7D28:                               ; ...
DOSCODE:7D28                 cmp     al, 0Ah
DOSCODE:7D2A                 loopne  loc_7D1F
DOSCODE:7D2C                 jnz     short loc_7D35
DOSCODE:7D2E                 xor     si, si
DOSCODE:7D30                 call    OUTT
DOSCODE:7D33                 or      al, 1
DOSCODE:7D35
DOSCODE:7D35 loc_7D35:                               ; ...
DOSCODE:7D35                 push    ss
DOSCODE:7D36                 pop     ds
DOSCODE:7D37                 assume ds:DOSCODE
DOSCODE:7D37                 call    sub_7B59
DOSCODE:7D3A                 mov     CONTPOS, si
DOSCODE:7D3E
DOSCODE:7D3E loc_7D3E:                               ; ...
DOSCODE:7D3E                 push    ss
DOSCODE:7D3F                 pop     ds
DOSCODE:7D40                 mov     NEXTADD, di
DOSCODE:7D44                 jnz     short loc_7D4F
DOSCODE:7D46                 les     di, THISSFT
DOSCODE:7D4A                 and     byte ptr es:[di+5], 0BFh
DOSCODE:7D4F
DOSCODE:7D4F loc_7D4F:                               ; ...
DOSCODE:7D4F                 call    sub_82D7
DOSCODE:7D52                 retn
DOSCODE:7D53 ; ---------------------------------------------------------------------------
DOSCODE:7D53
DOSCODE:7D53 loc_7D53:                               ; ...
DOSCODE:7D53                 call    sub_7B5F
DOSCODE:7D56                 mov     si, CONTPOS
DOSCODE:7D5A                 or      si, si
DOSCODE:7D5C                 jnz     short loc_7D1F
DOSCODE:7D5E                 cmp     CONBUF, 80h
DOSCODE:7D63                 jz      short loc_7D6B
DOSCODE:7D65                 mov     word ptr CONBUF, 0FF80h
DOSCODE:7D6B
DOSCODE:7D6B loc_7D6B:                               ; ...
DOSCODE:7D6B                 push    cx
DOSCODE:7D6C                 push    es
DOSCODE:7D6D                 push    di
DOSCODE:7D6E                 mov     dx, 27Bh
DOSCODE:7D71                 call    $STD_CON_STRING_INPUT
DOSCODE:7D74                 pop     di
DOSCODE:7D75                 pop     es
DOSCODE:7D76                 mov     si, 27Dh
DOSCODE:7D79                 pop     cx
DOSCODE:7D7A                 cmp     byte ptr [si], 1Ah
DOSCODE:7D7D                 jnz     short loc_7D1F
DOSCODE:7D7F                 mov     al, 1Ah
DOSCODE:7D81                 stosb
DOSCODE:7D82                 dec     di
DOSCODE:7D83                 mov     al, 0Ah
DOSCODE:7D85                 call    OUTT
DOSCODE:7D88                 xor     si, si
DOSCODE:7D8A                 jmp     short loc_7D35
DOSCODE:7D8A DOS_READ        endp
DOSCODE:7D8A
DOSCODE:7D8C
DOSCODE:7D8C ; =============== S U B R O U T I N E =======================================
DOSCODE:7D8C
DOSCODE:7D8C ; Attributes: thunk
DOSCODE:7D8C
DOSCODE:7D8C sub_7D8C        proc near               ; ...
DOSCODE:7D8C                 jmp     sub_8225
DOSCODE:7D8C sub_7D8C        endp
DOSCODE:7D8C
DOSCODE:7D8F
DOSCODE:7D8F ; =============== S U B R O U T I N E =======================================
DOSCODE:7D8F
DOSCODE:7D8F
DOSCODE:7D8F DOS_WRITE       proc near               ; ...
DOSCODE:7D8F
DOSCODE:7D8F ; FUNCTION CHUNK AT DOSCODE:7E22 SIZE 000000BF BYTES
DOSCODE:7D8F
DOSCODE:7D8F                 les     di, THISSFT
DOSCODE:7D93                 mov     al, es:[di+2]
DOSCODE:7D97                 and     al, 3
DOSCODE:7D99                 cmp     al, 0
DOSCODE:7D9B                 jz      short sub_7D8C
DOSCODE:7D9D                 test    byte ptr es:[di+3], 80h
DOSCODE:7DA2                 jz      short loc_7DAB
DOSCODE:7DA4                 test    byte ptr es:[di+4], 1
DOSCODE:7DA9                 jnz     short sub_7D8C
DOSCODE:7DAB
DOSCODE:7DAB loc_7DAB:                               ; ...
DOSCODE:7DAB                 call    SETUP
DOSCODE:7DAE                 test    byte ptr es:[di+6], 80h
DOSCODE:7DB3                 jz      short loc_7DBB
DOSCODE:7DB5                 mov     ax, 1109h
DOSCODE:7DB8                 int     2Fh             ; Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE
DOSCODE:7DB8                                         ; ES:DI -> SFT
DOSCODE:7DB8                                         ; SFT DPB field -> DPB of drive containing file
DOSCODE:7DB8                                         ; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
DOSCODE:7DB8                                         ; Return: CF set on error, CX = bytes written
DOSCODE:7DBA                 retn
DOSCODE:7DBB ; ---------------------------------------------------------------------------
DOSCODE:7DBB
DOSCODE:7DBB loc_7DBB:                               ; ...
DOSCODE:7DBB                 test    byte ptr es:[di+5], 80h
DOSCODE:7DC0                 jnz     short loc_7E31
DOSCODE:7DC2                 mov     EXTERR_LOCUS, 2
DOSCODE:7DC7                 call    ECritDisk
DOSCODE:7DCA                 call    _WRITE_OK
DOSCODE:7DCD                 jb      short loc_7DDF
DOSCODE:7DCF                 les     di, THISSFT
DOSCODE:7DD3                 test    byte ptr es:[di+3], 40h
DOSCODE:7DD8                 jz      short loc_7DDF
DOSCODE:7DDA                 push    cx
DOSCODE:7DDB                 call    DOS_COMMIT
DOSCODE:7DDE                 pop     cx
DOSCODE:7DDF
DOSCODE:7DDF loc_7DDF:                               ; ...
DOSCODE:7DDF                 call    LCritDisk
DOSCODE:7DE2                 retn
DOSCODE:7DE3 ; ---------------------------------------------------------------------------
DOSCODE:7DE3
DOSCODE:7DE3 loc_7DE3:                               ; ...
DOSCODE:7DE3                 xor     ax, ax
DOSCODE:7DE5                 call    SETWRITE
DOSCODE:7DE8                 push    ds
DOSCODE:7DE9                 lds     si, ss:THISSFT
DOSCODE:7DEE                 assume ds:nothing
DOSCODE:7DEE                 call    DEVIOCALL
DOSCODE:7DF1                 mov     dx, di
DOSCODE:7DF3                 mov     di, ss:DEVCALL_REQSTAT
DOSCODE:7DF8                 mov     ah, 87h
DOSCODE:7DFA                 or      di, di
DOSCODE:7DFC                 jns     short loc_7E1D
DOSCODE:7DFE                 call    sub_A173
DOSCODE:7E01                 mov     di, ss:CALLBPB
DOSCODE:7E06                 mov     bx, dx
DOSCODE:7E08                 sub     cx, di
DOSCODE:7E0A                 add     bx, di
DOSCODE:7E0C                 mov     di, bx
DOSCODE:7E0E                 or      al, al
DOSCODE:7E10                 jz      short loc_7E1D
DOSCODE:7E12                 cmp     al, 3
DOSCODE:7E14                 jz      short loc_7E19
DOSCODE:7E16                 pop     ds
DOSCODE:7E17                 jmp     short loc_7DE3
DOSCODE:7E19 ; ---------------------------------------------------------------------------
DOSCODE:7E19
DOSCODE:7E19 loc_7E19:                               ; ...
DOSCODE:7E19                 pop     ax
DOSCODE:7E1A                 jmp     loc_7C1F
DOSCODE:7E1D ; ---------------------------------------------------------------------------
DOSCODE:7E1D
DOSCODE:7E1D loc_7E1D:                               ; ...
DOSCODE:7E1D                 pop     ax
DOSCODE:7E1E                 pop     ds
DOSCODE:7E1E DOS_WRITE       endp
DOSCODE:7E1E
DOSCODE:7E1E ; ---------------------------------------------------------------------------
DOSCODE:7E1F                 db 0A1h
DOSCODE:7E1F DOSCODE         ends
DOSCODE:7E1F
DOSCODE:7E20 ; ===========================================================================
DOSCODE:7E20
DOSCODE:7E20 ; Segment type: Regular
DOSCODE:7E20 DOSCODE         segment byte public 'DOSCODE' use16
DOSCODE:7E20                 assume cs:DOSCODE
DOSCODE:7E20                 ;org 7E20h
DOSCODE:7E20                 assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
DOSCODE:7E20                 db  6Ch ; l
DOSCODE:7E21                 db    3
DOSCODE:7E22 ; ---------------------------------------------------------------------------
DOSCODE:7E22 ; START OF FUNCTION CHUNK FOR DOS_WRITE
DOSCODE:7E22
DOSCODE:7E22 loc_7E22:                               ; ...
DOSCODE:7E22                 les     di, ds:59Eh
DOSCODE:7E26                 mov     cx, ax
DOSCODE:7E28                 call    sub_8306
DOSCODE:7E2B                 retn
DOSCODE:7E2C ; ---------------------------------------------------------------------------
DOSCODE:7E2C
DOSCODE:7E2C loc_7E2C:                               ; ...
DOSCODE:7E2C                 mov     dx, cx
DOSCODE:7E2E
DOSCODE:7E2E loc_7E2E:                               ; ...
DOSCODE:7E2E                 jmp     loc_7EBD
DOSCODE:7E31 ; ---------------------------------------------------------------------------
DOSCODE:7E31
DOSCODE:7E31 loc_7E31:                               ; ...
DOSCODE:7E31                 mov     byte ptr ds:323h, 4
DOSCODE:7E36                 or      byte ptr es:[di+5], 40h
DOSCODE:7E3B                 mov     bl, es:[di+5]
DOSCODE:7E3F                 xor     ax, ax
DOSCODE:7E41                 jcxz    short loc_7E22
DOSCODE:7E43                 push    ds
DOSCODE:7E44                 mov     al, bl
DOSCODE:7E46                 lds     bx, ds:32Ch
DOSCODE:7E4A                 mov     di, bx
DOSCODE:7E4C                 cwd
DOSCODE:7E4D                 test    al, 20h
DOSCODE:7E4F                 jnz     short loc_7DE3
DOSCODE:7E51                 test    al, 2
DOSCODE:7E53                 jnz     short loc_7EC3
DOSCODE:7E55                 test    al, 4
DOSCODE:7E57                 jnz     short loc_7E2C
DOSCODE:7E59                 mov     ax, dx
DOSCODE:7E5B                 cmp     byte ptr [bx], 1Ah
DOSCODE:7E5E                 jz      short loc_7E2E
DOSCODE:7E60                 push    cx
DOSCODE:7E61                 mov     cx, 1
DOSCODE:7E64                 call    SETWRITE
DOSCODE:7E67                 lds     si, ss:59Eh
DOSCODE:7E6C                 pop     cx
DOSCODE:7E6D                 lds     si, [si+7]
DOSCODE:7E70
DOSCODE:7E70 loc_7E70:                               ; ...
DOSCODE:7E70                 call    DSKSTATCHK
DOSCODE:7E73                 call    DEVIOCALL2
DOSCODE:7E76                 push    di
DOSCODE:7E77                 mov     di, ss:35Dh
DOSCODE:7E7C                 mov     ah, 87h
DOSCODE:7E7E                 or      di, di
DOSCODE:7E80                 jns     short loc_7E98
DOSCODE:7E82                 call    sub_A173
DOSCODE:7E85                 pop     di
DOSCODE:7E86                 mov     word ptr ss:36Ch, 1
DOSCODE:7E8D                 cmp     al, 1
DOSCODE:7E8F                 jz      short loc_7E70
DOSCODE:7E91                 or      al, al
DOSCODE:7E93                 jz      short loc_7EA1
DOSCODE:7E95                 jmp     loc_7C1F
DOSCODE:7E98 ; ---------------------------------------------------------------------------
DOSCODE:7E98
DOSCODE:7E98 loc_7E98:                               ; ...
DOSCODE:7E98                 pop     di
DOSCODE:7E99                 cmp     word ptr ss:36Ch, 0
DOSCODE:7E9F                 jz      short loc_7EBD
DOSCODE:7EA1
DOSCODE:7EA1 loc_7EA1:                               ; ...
DOSCODE:7EA1                 inc     dx
DOSCODE:7EA2                 inc     word ptr ss:368h
DOSCODE:7EA7                 inc     di
DOSCODE:7EA8                 push    ds
DOSCODE:7EA9                 mov     ds, word ptr ss:36Ah
DOSCODE:7EAE                 cmp     byte ptr [di], 1Ah
DOSCODE:7EB1                 pop     ds
DOSCODE:7EB2                 jz      short loc_7EBD
DOSCODE:7EB4                 mov     word ptr ss:35Dh, 0
DOSCODE:7EBB                 loop    loc_7E70
DOSCODE:7EBD
DOSCODE:7EBD loc_7EBD:                               ; ...
DOSCODE:7EBD                 mov     ax, dx
DOSCODE:7EBF                 pop     ds
DOSCODE:7EC0                 jmp     loc_7E22
DOSCODE:7EC3 ; ---------------------------------------------------------------------------
DOSCODE:7EC3
DOSCODE:7EC3 loc_7EC3:                               ; ...
DOSCODE:7EC3                 push    ds
DOSCODE:7EC4                 push    ss
DOSCODE:7EC5                 pop     ds
DOSCODE:7EC6                 call    sub_7B5F
DOSCODE:7EC9                 pop     ds
DOSCODE:7ECA                 mov     si, bx
DOSCODE:7ECC                 push    cx
DOSCODE:7ECD
DOSCODE:7ECD loc_7ECD:                               ; ...
DOSCODE:7ECD                 lodsb
DOSCODE:7ECE                 cmp     al, 1Ah
DOSCODE:7ED0                 jz      short loc_7ED7
DOSCODE:7ED2                 call    OUTT
DOSCODE:7ED5                 loop    loc_7ECD
DOSCODE:7ED7
DOSCODE:7ED7 loc_7ED7:                               ; ...
DOSCODE:7ED7                 pop     ax
DOSCODE:7ED8                 pop     ds
DOSCODE:7ED9                 sub     ax, cx
DOSCODE:7EDB                 call    sub_7B59
DOSCODE:7EDE                 jmp     loc_7E22
DOSCODE:7EDE ; END OF FUNCTION CHUNK FOR DOS_WRITE
DOSCODE:7EE1
DOSCODE:7EE1 ; =============== S U B R O U T I N E =======================================
DOSCODE:7EE1
DOSCODE:7EE1
DOSCODE:7EE1 GET_IO_SFT      proc near               ; ...
DOSCODE:7EE1                 cmp     ss:CONSWAP, 0
DOSCODE:7EE7                 jnz     short loc_7EFB
DOSCODE:7EE9
DOSCODE:7EE9 loc_7EE9:                               ; ...
DOSCODE:7EE9                 push    ss
DOSCODE:7EEA                 pop     ds
DOSCODE:7EEB                 push    es
DOSCODE:7EEC                 push    di
DOSCODE:7EED                 call    SFFromHandle
DOSCODE:7EF0                 jb      short loc_7EF8
DOSCODE:7EF2                 mov     si, es
DOSCODE:7EF4                 mov     ds, si
DOSCODE:7EF6                 mov     si, di
DOSCODE:7EF8
DOSCODE:7EF8 loc_7EF8:                               ; ...
DOSCODE:7EF8                 pop     di
DOSCODE:7EF9                 pop     es
DOSCODE:7EFA                 retn
DOSCODE:7EFB ; ---------------------------------------------------------------------------
DOSCODE:7EFB
DOSCODE:7EFB loc_7EFB:                               ; ...
DOSCODE:7EFB                 cmp     bx, 1
DOSCODE:7EFE                 ja      short loc_7EE9
DOSCODE:7F00                 lds     si, ss:CONSFT
DOSCODE:7F05                 clc
DOSCODE:7F06
DOSCODE:7F06 locret_7F06:                            ; ...
DOSCODE:7F06                 retn
DOSCODE:7F06 GET_IO_SFT      endp
DOSCODE:7F06
DOSCODE:7F07
DOSCODE:7F07 ; =============== S U B R O U T I N E =======================================
DOSCODE:7F07
DOSCODE:7F07
DOSCODE:7F07 sub_7F07        proc near               ; ...
DOSCODE:7F07                 xor     dx, dx
DOSCODE:7F09                 cmp     ds:DIRSTART_HW, dx
DOSCODE:7F0D                 jnz     short loc_7F18
DOSCODE:7F0F                 cmp     ds:DIRSTART, dx
DOSCODE:7F13                 jnz     short loc_7F18
DOSCODE:7F15                 xchg    ax, dx
DOSCODE:7F16                 jmp     short loc_7F24
DOSCODE:7F18 ; ---------------------------------------------------------------------------
DOSCODE:7F18
DOSCODE:7F18 loc_7F18:                               ; ...
DOSCODE:7F18                 mov     dl, al
DOSCODE:7F1A                 mov     cl, es:[bp+5]
DOSCODE:7F1E                 and     dl, es:[bp+4]
DOSCODE:7F22                 shr     ax, cl
DOSCODE:7F24
DOSCODE:7F24 loc_7F24:                               ; ...
DOSCODE:7F24                 mov     ds:SECCLUSPOS, dl
DOSCODE:7F28                 mov     cx, ax
DOSCODE:7F2A                 mov     ah, dl
DOSCODE:7F2C                 mov     bx, ds:CLUSNUM_HW
DOSCODE:7F30                 mov     ds:NXTCLUSNUM_HW, bx
DOSCODE:7F34                 mov     ds:CLUSTNUM_HW, bx
DOSCODE:7F38                 mov     dx, ds:DIRSEC+2
DOSCODE:7F3C                 mov     bx, ds:CLUSNUM
DOSCODE:7F40                 mov     ds:HIGH_SECTOR, dx
DOSCODE:7F44                 mov     dx, ds:DIRSEC
DOSCODE:7F48                 add     dl, ah
DOSCODE:7F4A                 adc     dh, 0
DOSCODE:7F4D                 adc     ds:HIGH_SECTOR, 0
DOSCODE:7F52                 mov     ds:NXTCLUSNUM, bx
DOSCODE:7F56                 jcxz    short FIRSTCLUSTER
DOSCODE:7F58
DOSCODE:7F58 loc_7F58:                               ; ...
DOSCODE:7F58                 call    UNPACK
DOSCODE:7F5B
DOSCODE:7F5B loc_7F5B:                               ; ...
DOSCODE:7F5B                 jb      short locret_7F06
DOSCODE:7F5D                 push    ds:CLUSTNUM_HW
DOSCODE:7F61                 pop     ds:CLUSTERS_HW
DOSCODE:7F65                 push    ds:CCONTENT_HW
DOSCODE:7F69                 pop     ds:CLUSTNUM_HW
DOSCODE:7F6D                 xchg    bx, di
DOSCODE:7F6F                 call    IsEOF
DOSCODE:7F72                 jnb     short loc_7F76
DOSCODE:7F74                 loop    loc_7F58
DOSCODE:7F76
DOSCODE:7F76 loc_7F76:                               ; ...
DOSCODE:7F76                 mov     ds:NXTCLUSNUM, bx
DOSCODE:7F7A                 mov     bx, ds:CLUSTNUM_HW
DOSCODE:7F7E                 mov     ds:NXTCLUSNUM_HW, bx
DOSCODE:7F82                 mov     dx, di
DOSCODE:7F84                 mov     bx, ds:CLUSTERS_HW
DOSCODE:7F88                 mov     ds:CLUSTNUM_HW, bx
DOSCODE:7F8C                 mov     bl, ah
DOSCODE:7F8E                 call    FIGREC
DOSCODE:7F8E sub_7F07        endp
DOSCODE:7F8E
DOSCODE:7F91
DOSCODE:7F91 ; =============== S U B R O U T I N E =======================================
DOSCODE:7F91
DOSCODE:7F91
DOSCODE:7F91 FIRSTCLUSTER    proc near               ; ...
DOSCODE:7F91                 mov     ds:ALLOWED, 18h
DOSCODE:7F96                 xor     al, al
DOSCODE:7F98                 call    GETBUFFR
DOSCODE:7F9B                 jb      short loc_7F5B
DOSCODE:7F9B FIRSTCLUSTER    endp
DOSCODE:7F9B
DOSCODE:7F9D
DOSCODE:7F9D ; =============== S U B R O U T I N E =======================================
DOSCODE:7F9D
DOSCODE:7F9D
DOSCODE:7F9D sub_7F9D        proc near               ; ...
DOSCODE:7F9D                 push    ds
DOSCODE:7F9E                 push    si
DOSCODE:7F9F                 lds     si, ds:CURBUF
DOSCODE:7FA3                 or      byte ptr [si+5], 4
DOSCODE:7FA7                 pop     si
DOSCODE:7FA8                 pop     ds
DOSCODE:7FA9
DOSCODE:7FA9 dr_ret_label:                           ; ...
DOSCODE:7FA9                 retn
DOSCODE:7FA9 sub_7F9D        endp
DOSCODE:7FA9
DOSCODE:7FAA
DOSCODE:7FAA ; =============== S U B R O U T I N E =======================================
DOSCODE:7FAA
DOSCODE:7FAA
DOSCODE:7FAA FATSECRD        proc near               ; ...
DOSCODE:7FAA
DOSCODE:7FAA ; FUNCTION CHUNK AT DOSCODE:8027 SIZE 00000007 BYTES
DOSCODE:7FAA
DOSCODE:7FAA                 mov     ss:ALLOWED, 18h
DOSCODE:7FB0                 mov     di, cx
DOSCODE:7FB2                 mov     cl, es:[bp+8]
DOSCODE:7FB6                 mov     ax, es:[bp+0Fh]
DOSCODE:7FBA                 xor     ch, ch
DOSCODE:7FBC                 or      ax, ax
DOSCODE:7FBE                 jnz     short loc_7FCA
DOSCODE:7FC0                 test    byte ptr es:[bp+23h], 80h
DOSCODE:7FC5                 jz      short loc_7FCA
DOSCODE:7FC7                 mov     cx, 1
DOSCODE:7FCA
DOSCODE:7FCA loc_7FCA:                               ; ...
DOSCODE:7FCA                 push    ss:HIGH_SECTOR
DOSCODE:7FCF                 push    dx
DOSCODE:7FD0
DOSCODE:7FD0 loc_7FD0:                               ; ...
DOSCODE:7FD0                 push    cx
DOSCODE:7FD1                 push    ax
DOSCODE:7FD2                 push    ss:HIGH_SECTOR
DOSCODE:7FD7                 push    dx
DOSCODE:7FD8                 mov     cx, di
DOSCODE:7FDA                 call    DSKREAD
DOSCODE:7FDD                 pop     dx
DOSCODE:7FDE                 pop     ss:HIGH_SECTOR
DOSCODE:7FE3                 pop     ax
DOSCODE:7FE4                 pop     cx
DOSCODE:7FE5                 jz      short loc_8027
DOSCODE:7FE7                 or      ax, ax
DOSCODE:7FE9                 jnz     short loc_7FFC
DOSCODE:7FEB                 add     dx, es:[bp+31h]
DOSCODE:7FEF                 push    ax
DOSCODE:7FF0                 mov     ax, es:[bp+33h]
DOSCODE:7FF4                 adc     ss:HIGH_SECTOR, ax
DOSCODE:7FF9                 pop     ax
DOSCODE:7FFA                 jmp     short loc_8004
DOSCODE:7FFC ; ---------------------------------------------------------------------------
DOSCODE:7FFC
DOSCODE:7FFC loc_7FFC:                               ; ...
DOSCODE:7FFC                 add     dx, ax
DOSCODE:7FFE                 adc     ss:HIGH_SECTOR, 0
DOSCODE:8004
DOSCODE:8004 loc_8004:                               ; ...
DOSCODE:8004                 loop    loc_7FD0
DOSCODE:8006                 pop     dx
DOSCODE:8007                 pop     ss:HIGH_SECTOR
DOSCODE:800C                 mov     cx, di
DOSCODE:800C FATSECRD        endp
DOSCODE:800C
DOSCODE:800E
DOSCODE:800E ; =============== S U B R O U T I N E =======================================
DOSCODE:800E
DOSCODE:800E
DOSCODE:800E DREAD           proc near               ; ...
DOSCODE:800E                 call    DSKREAD
DOSCODE:8011                 jz      short dr_ret_label
DOSCODE:8013                 mov     ss:READOP, 0    ; Read
DOSCODE:8019                 call    HARDERRRW
DOSCODE:801C                 cmp     al, 1           ; RETRY
DOSCODE:801E                 jz      short DREAD
DOSCODE:8020                 cmp     al, 3           ; FAIL
DOSCODE:8022                 clc
DOSCODE:8023                 jnz     short NO_CAR1   ; IGNORE
DOSCODE:8025                 stc
DOSCODE:8026
DOSCODE:8026 NO_CAR1:                                ; ...
DOSCODE:8026                 retn
DOSCODE:8026 DREAD           endp
DOSCODE:8026
DOSCODE:8027 ; ---------------------------------------------------------------------------
DOSCODE:8027 ; START OF FUNCTION CHUNK FOR FATSECRD
DOSCODE:8027
DOSCODE:8027 loc_8027:                               ; ...
DOSCODE:8027                 pop     dx
DOSCODE:8028                 pop     ss:HIGH_SECTOR
DOSCODE:802D                 retn
DOSCODE:802D ; END OF FUNCTION CHUNK FOR FATSECRD
DOSCODE:802E
DOSCODE:802E ; =============== S U B R O U T I N E =======================================
DOSCODE:802E
DOSCODE:802E
DOSCODE:802E sub_802E        proc near               ; ...
DOSCODE:802E                 test    byte ptr es:[di+4], 8
DOSCODE:8033                 jz      short loc_8039
DOSCODE:8035                 call    sub_8223
DOSCODE:8038                 retn
DOSCODE:8039 ; ---------------------------------------------------------------------------
DOSCODE:8039
DOSCODE:8039 loc_8039:                               ; ...
DOSCODE:8039                 push    cx
DOSCODE:803A                 or      cx, cx
DOSCODE:803C                 jnz     short loc_803F
DOSCODE:803E                 dec     cx
DOSCODE:803F
DOSCODE:803F loc_803F:                               ; ...
DOSCODE:803F                 mov     al, 80h
DOSCODE:8041                 call    sub_C5C7
DOSCODE:8044                 pop     cx
DOSCODE:8045                 jnb     short locret_804C
DOSCODE:8047                 call    sub_81CE
DOSCODE:804A                 jnb     short loc_8039
DOSCODE:804C
DOSCODE:804C locret_804C:                            ; ...
DOSCODE:804C                 retn
DOSCODE:804C sub_802E        endp
DOSCODE:804C
DOSCODE:804D
DOSCODE:804D ; =============== S U B R O U T I N E =======================================
DOSCODE:804D
DOSCODE:804D
DOSCODE:804D sub_804D        proc near               ; ...
DOSCODE:804D                 test    byte ptr es:[di+4], 8
DOSCODE:8052                 jz      short loc_8058
DOSCODE:8054                 call    sub_8225
DOSCODE:8057                 retn
DOSCODE:8058 ; ---------------------------------------------------------------------------
DOSCODE:8058
DOSCODE:8058 loc_8058:                               ; ...
DOSCODE:8058                 xor     al, al
DOSCODE:805A                 call    sub_C5C7
DOSCODE:805D                 jnb     short locret_8064
DOSCODE:805F                 call    sub_81A8
DOSCODE:8062                 jnb     short loc_8058
DOSCODE:8064
DOSCODE:8064 locret_8064:                            ; ...
DOSCODE:8064                 retn
DOSCODE:8064 sub_804D        endp
DOSCODE:8064
DOSCODE:8065
DOSCODE:8065 ; =============== S U B R O U T I N E =======================================
DOSCODE:8065
DOSCODE:8065
DOSCODE:8065 DSKREAD         proc near               ; ...
DOSCODE:8065                 push    cx              ; DS:BX = Transfer address
DOSCODE:8065                                         ; [HIGH_SECTOR]:DX = Disk sector address
DOSCODE:8065                                         ; CX = Sector count
DOSCODE:8065                                         ; ES:BP = DPB
DOSCODE:8066                 mov     ah, es:[bp+17h] ; [ES:BP+DPB.MEDIA]
DOSCODE:806A                 mov     al, es:[bp+1]   ; [ES:BP+DPB.UNIT]
DOSCODE:806E                 push    bx
DOSCODE:806F                 push    es
DOSCODE:8070                 call    SETREAD
DOSCODE:8073                 jmp     short DODSKOP
DOSCODE:8073 DSKREAD         endp
DOSCODE:8073
DOSCODE:8075
DOSCODE:8075 ; =============== S U B R O U T I N E =======================================
DOSCODE:8075
DOSCODE:8075
DOSCODE:8075 DWRITE          proc near               ; ...
DOSCODE:8075                 call    DSKWRITE
DOSCODE:8078                 jnz     short dwrite1
DOSCODE:807A                 retn                    ; Carry clear (retz)
DOSCODE:807B ; ---------------------------------------------------------------------------
DOSCODE:807B
DOSCODE:807B dwrite1:                                ; ...
DOSCODE:807B                 mov     ss:READOP, 1    ; Write
DOSCODE:8081                 call    HARDERRRW
DOSCODE:8084                 cmp     al, 1           ; Check for retry
DOSCODE:8086                 jz      short DWRITE
DOSCODE:8088                 cmp     al, 3           ; Check for FAIL
DOSCODE:808A                 clc
DOSCODE:808B                 jnz     short NO_CAR2   ; Ignore
DOSCODE:808D                 stc
DOSCODE:808E
DOSCODE:808E NO_CAR2:                                ; ...
DOSCODE:808E                 retn
DOSCODE:808E DWRITE          endp
DOSCODE:808E
DOSCODE:808F
DOSCODE:808F ; =============== S U B R O U T I N E =======================================
DOSCODE:808F
DOSCODE:808F
DOSCODE:808F DSKWRITE        proc near               ; ...
DOSCODE:808F                 push    cx              ; DS:BX = Transfer address
DOSCODE:808F                                         ; [HIGH_SECTOR]:DX = Disk sector address
DOSCODE:808F                                         ; CX = Sector count
DOSCODE:808F                                         ; ES:BP = DPB
DOSCODE:8090                 mov     ah, es:[bp+17h] ; [ES:BP+DPB.MEDIA]
DOSCODE:8094                 mov     al, es:[bp+1]   ; [ES:BP+DPB.UNIT]
DOSCODE:8098                 push    bx
DOSCODE:8099                 push    es
DOSCODE:809A                 call    SETWRITE
DOSCODE:809D
DOSCODE:809D DODSKOP:                                ; ...
DOSCODE:809D                 mov     cx, ds
DOSCODE:809F                 pop     ds              ; DS:BP points to DPB
DOSCODE:80A0                 push    ds
DOSCODE:80A1                 lds     si, ds:[bp+13h] ; [ds:BP+DPB.DRIVER_ADDR]
DOSCODE:80A5                 call    DEVIOCALL2
DOSCODE:80A8                 mov     ds, cx
DOSCODE:80AA                 pop     es
DOSCODE:80AB                 pop     bx
DOSCODE:80AC                 pop     di
DOSCODE:80AD                 mov     cx, ss:CALLBPB  ; [SS:CALLSCNT] ; Number of sectors transferred
DOSCODE:80B2                 mov     ax, ss:DEVCALL_REQSTAT
DOSCODE:80B6                 sub     cx, di
DOSCODE:80B8                 neg     cx              ; Number of sectors not transferred
DOSCODE:80BA                 test    ax, 8000h       ; test ah,(STERR>>8)
DOSCODE:80BD                 retn
DOSCODE:80BD DSKWRITE        endp
DOSCODE:80BD
DOSCODE:80BE
DOSCODE:80BE ; =============== S U B R O U T I N E =======================================
DOSCODE:80BE
DOSCODE:80BE
DOSCODE:80BE HARDERRRW       proc near               ; ...
DOSCODE:80BE                 cmp     al, 0Fh         ; error_I24_wrong_disk
DOSCODE:80C0                 jnz     short DO_ERR
DOSCODE:80C2                 push    ax
DOSCODE:80C3                 push    es
DOSCODE:80C4                 les     ax, ss:CALLVIDRW
DOSCODE:80C9                 mov     word ptr ss:EXTERRPT, ax
DOSCODE:80CD                 mov     word ptr ss:EXTERRPT+2, es
DOSCODE:80D2                 pop     es
DOSCODE:80D3                 pop     ax
DOSCODE:80D4
DOSCODE:80D4 DO_ERR:                                 ; ...
DOSCODE:80D4                 call    HARDERR
DOSCODE:80D7                 retn
DOSCODE:80D7 HARDERRRW       endp
DOSCODE:80D7
DOSCODE:80D8
DOSCODE:80D8 ; =============== S U B R O U T I N E =======================================
DOSCODE:80D8
DOSCODE:80D8
DOSCODE:80D8 SETUP           proc near               ; ...
DOSCODE:80D8                 lds     si, es:[di+7]
DOSCODE:80DC                 mov     word ptr ss:58Ch, ds
DOSCODE:80E1                 mov     bx, ss
DOSCODE:80E3                 mov     ds, bx
DOSCODE:80E5                 mov     bx, ds:32Ch
DOSCODE:80E9                 mov     ds:58Ah, si
DOSCODE:80ED                 mov     ds:5B8h, bx
DOSCODE:80F1                 mov     byte ptr ds:574h, 0
DOSCODE:80F6                 mov     ax, es:[di+15h]
DOSCODE:80FA                 mov     dx, es:[di+17h]
DOSCODE:80FE                 mov     ds:5CEh, ax
DOSCODE:8101                 mov     ds:5D0h, dx
DOSCODE:8105                 test    word ptr es:[di+5], 8080h
DOSCODE:810B                 jnz     short loc_8162
DOSCODE:810D                 push    es
DOSCODE:810E                 les     bp, ds:58Ah
DOSCODE:8112                 mov     bl, es:[bp+0]
DOSCODE:8116                 push    cx
DOSCODE:8117                 mov     ds:576h, bl
DOSCODE:811B                 mov     bx, es:[bp+2]
DOSCODE:811F                 call    DIV32
DOSCODE:8122                 mov     ds:5CCh, dx
DOSCODE:8126                 mov     ds:5C4h, ax
DOSCODE:8129                 mov     ds:5C6h, cx
DOSCODE:812D                 mov     bx, ax
DOSCODE:812F                 mov     dx, cx
DOSCODE:8131                 and     bl, es:[bp+4]
DOSCODE:8135                 mov     ds:573h, bl
DOSCODE:8139                 call    sub_8788
DOSCODE:813C                 pop     cx
DOSCODE:813D                 cmp     word ptr es:[bp+0Fh], 0
DOSCODE:8142                 jnz     short loc_8150
DOSCODE:8144                 cmp     dx, es:[bp+2Fh]
DOSCODE:8148                 jnz     short loc_8158
DOSCODE:814A                 cmp     ax, es:[bp+2Dh]
DOSCODE:814E                 jmp     short loc_8158
DOSCODE:8150 ; ---------------------------------------------------------------------------
DOSCODE:8150
DOSCODE:8150 loc_8150:                               ; ...
DOSCODE:8150                 or      dx, dx
DOSCODE:8152                 jnz     short loc_8178
DOSCODE:8154                 cmp     ax, es:[bp+0Dh]
DOSCODE:8158
DOSCODE:8158 loc_8158:                               ; ...
DOSCODE:8158                 ja      short loc_8178
DOSCODE:815A                 mov     ds:5BCh, ax
DOSCODE:815D                 mov     ds:0ADEh, dx
DOSCODE:8161                 pop     es
DOSCODE:8162
DOSCODE:8162 loc_8162:                               ; ...
DOSCODE:8162                 mov     ax, cx
DOSCODE:8164                 add     ax, ds:32Ch
DOSCODE:8168                 jb      short loc_816B
DOSCODE:816A                 retn
DOSCODE:816B ; ---------------------------------------------------------------------------
DOSCODE:816B
DOSCODE:816B loc_816B:                               ; ...
DOSCODE:816B                 mov     ax, ds:32Ch
DOSCODE:816E                 neg     ax
DOSCODE:8170                 jnz     short loc_8173
DOSCODE:8172                 dec     ax
DOSCODE:8173
DOSCODE:8173 loc_8173:                               ; ...
DOSCODE:8173                 mov     cx, ax
DOSCODE:8175                 jcxz    short loc_817B
DOSCODE:8177                 retn
DOSCODE:8178 ; ---------------------------------------------------------------------------
DOSCODE:8178
DOSCODE:8178 loc_8178:                               ; ...
DOSCODE:8178                 pop     es
DOSCODE:8179                 xor     cx, cx
DOSCODE:817B
DOSCODE:817B loc_817B:                               ; ...
DOSCODE:817B                 pop     bx
DOSCODE:817C                 clc
DOSCODE:817D                 retn
DOSCODE:817D SETUP           endp ; sp-analysis failed
DOSCODE:817D
DOSCODE:817E
DOSCODE:817E ; =============== S U B R O U T I N E =======================================
DOSCODE:817E
DOSCODE:817E
DOSCODE:817E BREAKDOWN       proc near               ; ...
DOSCODE:817E                 mov     ax, ds:5CCh
DOSCODE:8181                 mov     bx, cx
DOSCODE:8183                 or      ax, ax
DOSCODE:8185                 jz      short loc_8195
DOSCODE:8187                 sub     ax, es:[bp+2]
DOSCODE:818B                 neg     ax
DOSCODE:818D                 sub     bx, ax
DOSCODE:818F                 jnb     short loc_8195
DOSCODE:8191                 add     ax, bx
DOSCODE:8193                 xor     bx, bx
DOSCODE:8195
DOSCODE:8195 loc_8195:                               ; ...
DOSCODE:8195                 mov     ds:5D2h, ax
DOSCODE:8198                 mov     ax, bx
DOSCODE:819A                 xor     dx, dx
DOSCODE:819C                 div     word ptr es:[bp+2]
DOSCODE:81A0                 mov     ds:5D6h, ax
DOSCODE:81A3                 mov     ds:5D4h, dx
DOSCODE:81A7
DOSCODE:81A7 locret_81A7:                            ; ...
DOSCODE:81A7                 retn
DOSCODE:81A7 BREAKDOWN       endp
DOSCODE:81A7
DOSCODE:81A8
DOSCODE:81A8 ; =============== S U B R O U T I N E =======================================
DOSCODE:81A8
DOSCODE:81A8
DOSCODE:81A8 sub_81A8        proc near               ; ...
DOSCODE:81A8                 mov     byte ptr ds:575h, 0
DOSCODE:81AD
DOSCODE:81AD loc_81AD:                               ; ...
DOSCODE:81AD                 test    byte ptr es:[di+3], 80h
DOSCODE:81B2                 jnz     short loc_81C2
DOSCODE:81B4                 push    cx
DOSCODE:81B5                 mov     cl, es:[di+2]
DOSCODE:81B9                 and     cl, 0F0h
DOSCODE:81BC                 cmp     cl, 0
DOSCODE:81BF                 pop     cx
DOSCODE:81C0                 jnz     short loc_81C7
DOSCODE:81C2
DOSCODE:81C2 loc_81C2:                               ; ...
DOSCODE:81C2                 call    sub_C5DD
DOSCODE:81C5                 jnb     short locret_81A7
DOSCODE:81C7
DOSCODE:81C7 loc_81C7:                               ; ...
DOSCODE:81C7                 xor     cx, cx
DOSCODE:81C9                 mov     ax, 21h ; '!'
DOSCODE:81CC                 stc
DOSCODE:81CD
DOSCODE:81CD locret_81CD:                            ; ...
DOSCODE:81CD                 retn
DOSCODE:81CD sub_81A8        endp
DOSCODE:81CD
DOSCODE:81CE
DOSCODE:81CE ; =============== S U B R O U T I N E =======================================
DOSCODE:81CE
DOSCODE:81CE
DOSCODE:81CE sub_81CE        proc near               ; ...
DOSCODE:81CE                 mov     byte ptr ds:575h, 1
DOSCODE:81D3                 jmp     short loc_81AD
DOSCODE:81D3 sub_81CE        endp
DOSCODE:81D3
DOSCODE:81D5
DOSCODE:81D5 ; =============== S U B R O U T I N E =======================================
DOSCODE:81D5
DOSCODE:81D5
DOSCODE:81D5 sub_81D5        proc near               ; ...
DOSCODE:81D5
DOSCODE:81D5 ; FUNCTION CHUNK AT DOSCODE:821D SIZE 00000006 BYTES
DOSCODE:81D5 ; FUNCTION CHUNK AT DOSCODE:822C SIZE 0000008E BYTES
DOSCODE:81D5 ; FUNCTION CHUNK AT DOSCODE:82BD SIZE 0000001A BYTES
DOSCODE:81D5
DOSCODE:81D5                 mov     ax, es:[di+11h]
DOSCODE:81D9                 mov     bx, es:[di+13h]
DOSCODE:81DD                 sub     ax, ds:5CEh
DOSCODE:81E1                 sbb     bx, ds:5D0h
DOSCODE:81E5                 jb      short loc_8215
DOSCODE:81E7                 jnz     short loc_81F3
DOSCODE:81E9                 or      ax, ax
DOSCODE:81EB                 jz      short loc_8215
DOSCODE:81ED                 cmp     ax, cx
DOSCODE:81EF                 jnb     short loc_81F3
DOSCODE:81F1                 mov     cx, ax
DOSCODE:81F3
DOSCODE:81F3 loc_81F3:                               ; ...
DOSCODE:81F3                 call    sub_804D
DOSCODE:81F6                 jb      short locret_81CD
DOSCODE:81F8                 les     bp, ds:58Ah
DOSCODE:81FC                 call    BREAKDOWN
DOSCODE:81FF                 mov     cx, ds:5BCh
DOSCODE:8203                 mov     dx, ds:0ADEh
DOSCODE:8207                 call    FNDCLUS
DOSCODE:820A                 jb      short sub_8223
DOSCODE:820C                 cmp     word ptr ds:0AF8h, 0
DOSCODE:8211                 jnz     short loc_8215
DOSCODE:8213                 jcxz    short loc_822C
DOSCODE:8215
DOSCODE:8215 loc_8215:                               ; ...
DOSCODE:8215                 mov     ah, 0Eh
DOSCODE:8217                 jmp     loc_8496
DOSCODE:8217 sub_81D5        endp
DOSCODE:8217
DOSCODE:821A
DOSCODE:821A ; =============== S U B R O U T I N E =======================================
DOSCODE:821A
DOSCODE:821A ; Attributes: thunk
DOSCODE:821A
DOSCODE:821A sub_821A        proc near               ; ...
DOSCODE:821A                 jmp     sub_82D7
DOSCODE:821A sub_821A        endp
DOSCODE:821A
DOSCODE:821D ; ---------------------------------------------------------------------------
DOSCODE:821D ; START OF FUNCTION CHUNK FOR sub_81D5
DOSCODE:821D
DOSCODE:821D loc_821D:                               ; ...
DOSCODE:821D                 pop     cx
DOSCODE:821E                 pop     bx
DOSCODE:821F                 pop     word ptr ds:0AECh
DOSCODE:821F ; END OF FUNCTION CHUNK FOR sub_81D5
DOSCODE:8223
DOSCODE:8223 ; =============== S U B R O U T I N E =======================================
DOSCODE:8223
DOSCODE:8223
DOSCODE:8223 sub_8223        proc near               ; ...
DOSCODE:8223                 push    ss
DOSCODE:8224                 pop     ds
DOSCODE:8224 sub_8223        endp
DOSCODE:8224
DOSCODE:8225
DOSCODE:8225 ; =============== S U B R O U T I N E =======================================
DOSCODE:8225
DOSCODE:8225
DOSCODE:8225 sub_8225        proc near               ; ...
DOSCODE:8225                 xor     cx, cx
DOSCODE:8227                 mov     ax, 5
DOSCODE:822A                 stc
DOSCODE:822B                 retn
DOSCODE:822B sub_8225        endp
DOSCODE:822B
DOSCODE:822C ; ---------------------------------------------------------------------------
DOSCODE:822C ; START OF FUNCTION CHUNK FOR sub_81D5
DOSCODE:822C
DOSCODE:822C loc_822C:                               ; ...
DOSCODE:822C                 mov     ds:5BAh, dx
DOSCODE:8230                 mov     ds:5BCh, bx
DOSCODE:8234                 mov     bx, ds:0AE8h
DOSCODE:8238                 mov     ds:0ADEh, bx
DOSCODE:823C                 cmp     word ptr ds:5D2h, 0
DOSCODE:8241                 jz      short loc_8248
DOSCODE:8243                 call    sub_990E
DOSCODE:8246                 jb      short sub_8223
DOSCODE:8248
DOSCODE:8248 loc_8248:                               ; ...
DOSCODE:8248                 cmp     word ptr ds:5D6h, 0
DOSCODE:824D                 jz      short loc_82BD
DOSCODE:824F                 call    NEXTSEC
DOSCODE:8252                 jb      short sub_821A
DOSCODE:8254                 mov     byte ptr ds:574h, 1
DOSCODE:8259                 mov     dl, ds:573h
DOSCODE:825D                 mov     cx, ds:5D6h
DOSCODE:8261                 mov     bx, ds:0ADEh
DOSCODE:8265                 mov     ds:0AE8h, bx
DOSCODE:8269                 mov     bx, ds:5BCh
DOSCODE:826D
DOSCODE:826D loc_826D:                               ; ...
DOSCODE:826D                 call    OPTIMIZE
DOSCODE:8270                 jb      short sub_8223
DOSCODE:8272                 push    word ptr ds:0AECh
DOSCODE:8276                 push    di
DOSCODE:8277                 push    ax
DOSCODE:8278                 push    bx
DOSCODE:8279                 mov     byte ptr ds:34Bh, 38h ; '8'
DOSCODE:827E                 mov     ds, word ptr ds:32Eh
DOSCODE:8282                 push    dx
DOSCODE:8283                 push    cx
DOSCODE:8284                 call    null_sub
DOSCODE:8287                 call    DREAD
DOSCODE:828A                 pop     cx
DOSCODE:828B                 pop     dx
DOSCODE:828C                 pop     word ptr ss:60Ch
DOSCODE:8291                 jb      short loc_821D
DOSCODE:8293                 mov     word ptr ss:60Eh, ds
DOSCODE:8298                 call    DskRdBufScan
DOSCODE:829B                 mov     cx, ss
DOSCODE:829D                 mov     ds, cx
DOSCODE:829F                 pop     cx
DOSCODE:82A0                 pop     bx
DOSCODE:82A1                 pop     word ptr ds:0AE8h
DOSCODE:82A5                 jcxz    short loc_82BD
DOSCODE:82A7                 call    IsEOF
DOSCODE:82AA                 jnb     short sub_82D7
DOSCODE:82AC                 mov     dl, 0
DOSCODE:82AE                 add     word ptr ds:5BAh, 1
DOSCODE:82B3                 adc     word ptr ds:0AE2h, 0
DOSCODE:82B8                 jmp     short loc_826D
DOSCODE:82B8 ; END OF FUNCTION CHUNK FOR sub_81D5
DOSCODE:82BA
DOSCODE:82BA ; =============== S U B R O U T I N E =======================================
DOSCODE:82BA
DOSCODE:82BA ; Attributes: thunk
DOSCODE:82BA
DOSCODE:82BA sub_82BA        proc near               ; ...
DOSCODE:82BA                 jmp     sub_8223
DOSCODE:82BA sub_82BA        endp
DOSCODE:82BA
DOSCODE:82BD ; ---------------------------------------------------------------------------
DOSCODE:82BD ; START OF FUNCTION CHUNK FOR sub_81D5
DOSCODE:82BD
DOSCODE:82BD loc_82BD:                               ; ...
DOSCODE:82BD                 mov     ax, ds:5D4h
DOSCODE:82C0                 or      ax, ax
DOSCODE:82C2                 jz      short sub_82D7
DOSCODE:82C4                 mov     ds:5D2h, ax
DOSCODE:82C7                 call    NEXTSEC
DOSCODE:82CA                 jb      short sub_82D7
DOSCODE:82CC                 mov     word ptr ds:5CCh, 0
DOSCODE:82D2                 call    sub_990E
DOSCODE:82D5                 jb      short sub_82BA
DOSCODE:82D5 ; END OF FUNCTION CHUNK FOR sub_81D5
DOSCODE:82D7
DOSCODE:82D7 ; =============== S U B R O U T I N E =======================================
DOSCODE:82D7
DOSCODE:82D7
DOSCODE:82D7 sub_82D7        proc near               ; ...
DOSCODE:82D7                 les     di, ds:59Eh
DOSCODE:82DB
DOSCODE:82DB loc_82DB:                               ; ...
DOSCODE:82DB                 mov     cx, ds:5B8h
DOSCODE:82DF                 sub     cx, ds:32Ch
DOSCODE:82E3                 test    byte ptr es:[di+5], 80h
DOSCODE:82E8                 jnz     short sub_8306
DOSCODE:82EA                 mov     ax, ds:0ADEh
DOSCODE:82ED                 mov     es:[di+37h], ax
DOSCODE:82F1                 mov     ax, ds:0AE2h
DOSCODE:82F4                 mov     es:[di+0Bh], ax
DOSCODE:82F8                 mov     ax, ds:5BCh
DOSCODE:82FB                 mov     es:[di+35h], ax
DOSCODE:82FF                 mov     ax, ds:5BAh
DOSCODE:8302                 mov     es:[di+19h], ax
DOSCODE:8302 sub_82D7        endp
DOSCODE:8302
DOSCODE:8306
DOSCODE:8306 ; =============== S U B R O U T I N E =======================================
DOSCODE:8306
DOSCODE:8306
DOSCODE:8306 sub_8306        proc near               ; ...
DOSCODE:8306                 jcxz    short loc_8311
DOSCODE:8308                 add     es:[di+15h], cx
DOSCODE:830C                 adc     word ptr es:[di+17h], 0
DOSCODE:8311
DOSCODE:8311 loc_8311:                               ; ...
DOSCODE:8311                 clc
DOSCODE:8312                 retn
DOSCODE:8312 sub_8306        endp
DOSCODE:8312
DOSCODE:8313
DOSCODE:8313 ; =============== S U B R O U T I N E =======================================
DOSCODE:8313
DOSCODE:8313
DOSCODE:8313 DskRdBufScan    proc near               ; ...
DOSCODE:8313                 cmp     ss:DirtyBufferCount, 0
DOSCODE:8319                 jz      short locret_8357
DOSCODE:831B                 mov     bx, ss:HIGH_SECTOR
DOSCODE:8320                 add     cx, dx
DOSCODE:8322                 mov     si, bx
DOSCODE:8324                 adc     si, 0
DOSCODE:8327                 call    GETCURHEAD
DOSCODE:832A                 mov     ax, [di+2]
DOSCODE:832D                 mov     ss:117Eh, ax
DOSCODE:8331                 mov     al, es:[bp+0]
DOSCODE:8335
DOSCODE:8335 bufq:                                   ; ...
DOSCODE:8335                 cmp     al, [di+4]
DOSCODE:8338                 jnz     short loc_834E
DOSCODE:833A                 cmp     bx, [di+8]
DOSCODE:833D                 jnz     short loc_8342
DOSCODE:833F                 cmp     dx, [di+6]
DOSCODE:8342
DOSCODE:8342 loc_8342:                               ; ...
DOSCODE:8342                 ja      short loc_834E
DOSCODE:8344                 cmp     si, [di+8]
DOSCODE:8347                 jnz     short loc_834C
DOSCODE:8349                 cmp     cx, [di+6]
DOSCODE:834C
DOSCODE:834C loc_834C:                               ; ...
DOSCODE:834C                 ja      short loc_8358
DOSCODE:834E
DOSCODE:834E loc_834E:                               ; ...
DOSCODE:834E                 cmp     di, ss:117Eh
DOSCODE:8353                 mov     di, [di]
DOSCODE:8355                 jnz     short bufq
DOSCODE:8357
DOSCODE:8357 locret_8357:                            ; ...
DOSCODE:8357                 retn
DOSCODE:8358 ; ---------------------------------------------------------------------------
DOSCODE:8358
DOSCODE:8358 loc_8358:                               ; ...
DOSCODE:8358                 push    ax
DOSCODE:8359                 test    byte ptr [di+5], 40h
DOSCODE:835D                 jz      short loc_838F
DOSCODE:835F                 push    cx
DOSCODE:8360                 push    dx
DOSCODE:8361                 push    si
DOSCODE:8362                 push    di
DOSCODE:8363                 push    es
DOSCODE:8364                 mov     ax, dx
DOSCODE:8366                 sub     ax, [di+6]
DOSCODE:8369                 neg     ax
DOSCODE:836B                 mov     cx, es:[bp+2]
DOSCODE:836F                 lea     si, [di+18h]
DOSCODE:8372                 mul     cx
DOSCODE:8374                 les     di, ss:60Ch
DOSCODE:8379                 add     di, ax
DOSCODE:837B                 shr     cx, 1
DOSCODE:837D                 cmp     byte ptr ss:6Ah, 0
DOSCODE:8383                 jz      short near ptr loc_8387+1
DOSCODE:8385                 shr     cx, 1
DOSCODE:8387
DOSCODE:8387 loc_8387:                               ; ...
DOSCODE:8387                 rep movsd
DOSCODE:838A                 pop     es
DOSCODE:838B                 pop     di
DOSCODE:838C                 pop     si
DOSCODE:838D                 pop     dx
DOSCODE:838E                 pop     cx
DOSCODE:838F
DOSCODE:838F loc_838F:                               ; ...
DOSCODE:838F                 mov     ax, di
DOSCODE:8391                 call    SCANPLACE
DOSCODE:8394                 cmp     ax, ss:FIRST_BUFF_ADDR
DOSCODE:8399                 pop     ax
DOSCODE:839A                 jnz     short bufq
DOSCODE:839C                 retn
DOSCODE:839C DskRdBufScan    endp
DOSCODE:839C
DOSCODE:839D ; ---------------------------------------------------------------------------
DOSCODE:839D ; START OF FUNCTION CHUNK FOR _WRITE_OK
DOSCODE:839D
DOSCODE:839D WRTEOFJ:                                ; ...
DOSCODE:839D                 jmp     WRTEOF
DOSCODE:839D ; END OF FUNCTION CHUNK FOR _WRITE_OK
DOSCODE:83A0 ; ---------------------------------------------------------------------------
DOSCODE:83A0
DOSCODE:83A0 loc_83A0:                               ; ...
DOSCODE:83A0                 jmp     locret_84A0
DOSCODE:83A3
DOSCODE:83A3 ; =============== S U B R O U T I N E =======================================
DOSCODE:83A3
DOSCODE:83A3
DOSCODE:83A3 _WRITE_OK       proc near               ; ...
DOSCODE:83A3
DOSCODE:83A3 ; FUNCTION CHUNK AT DOSCODE:839D SIZE 00000003 BYTES
DOSCODE:83A3
DOSCODE:83A3                 call    sub_802E
DOSCODE:83A6                 jb      short loc_83A0
DOSCODE:83A8                 and     word ptr es:[di+5], 0BFBFh ; [ES:DI+SF_ENTRY.sf_flags],
DOSCODE:83A8                                         ; ~(sf_close_nodate|devid_file_clean)
DOSCODE:83AE                 les     ax, es:[di+11h] ; [ES:DI+SF_ENTRY.sf_size]
DOSCODE:83B2                 mov     ds:TEMP_VAR2, es
DOSCODE:83B6                 mov     ds:TEMP_VAR, ax
DOSCODE:83B9                 les     bp, ds:THISDPB
DOSCODE:83BD                 call    BREAKDOWN
DOSCODE:83C0                 mov     ax, word ptr ds:BYTPOS
DOSCODE:83C3                 mov     dx, word ptr ds:BYTPOS+2
DOSCODE:83C7                 jcxz    short WRTEOFJ
DOSCODE:83C9                 add     ax, cx
DOSCODE:83CB                 adc     dx, 0
DOSCODE:83CE                 jnb     short loc_83D3
DOSCODE:83D0
DOSCODE:83D0 loc_83D0:                               ; ...
DOSCODE:83D0                 jmp     SET_ACC_ERRW
DOSCODE:83D3 ; ---------------------------------------------------------------------------
DOSCODE:83D3
DOSCODE:83D3 loc_83D3:                               ; ...
DOSCODE:83D3                 test    byte ptr es:[di+3], 10h
DOSCODE:83D8                 jnz     short loc_83E5
DOSCODE:83DA                 cmp     dx, 7FFFh
DOSCODE:83DE                 jnz     short loc_83E3
DOSCODE:83E0                 cmp     ax, 0FFFFh
DOSCODE:83E3
DOSCODE:83E3 loc_83E3:                               ; ...
DOSCODE:83E3                 ja      short loc_83D0
DOSCODE:83E5
DOSCODE:83E5 loc_83E5:                               ; ...
DOSCODE:83E5                 mov     bx, es:[bp+2]   ; [ES:BP+DPB.SECTOR_SIZE]
DOSCODE:83E9                 call    DIV32
DOSCODE:83EC                 mov     si, ax
DOSCODE:83EE                 mov     ds:HIGH_SECTOR, cx
DOSCODE:83F2                 or      dx, dx
DOSCODE:83F4                 push    dx
DOSCODE:83F5                 mov     dx, cx
DOSCODE:83F7                 jnz     short CALCLUS
DOSCODE:83F9                 sub     ax, 1
DOSCODE:83FC                 sbb     dx, 0
DOSCODE:83FF
DOSCODE:83FF CALCLUS:                                ; ...
DOSCODE:83FF                 call    sub_8788
DOSCODE:8402                 pop     cx
DOSCODE:8403                 xchg    cx, dx
DOSCODE:8405                 push    cx
DOSCODE:8406                 push    ax
DOSCODE:8407                 push    dx
DOSCODE:8408                 mov     dx, ds:TEMP_VAR2
DOSCODE:840C                 mov     ax, ds:TEMP_VAR
DOSCODE:840F                 call    DIV32
DOSCODE:8412                 mov     ds:TEMP_VAR2, cx
DOSCODE:8416                 mov     ds:VALSEC+2, cx
DOSCODE:841A                 mov     cx, ax
DOSCODE:841C                 mov     bx, si
DOSCODE:841E                 or      dx, dx
DOSCODE:8420                 jz      short NORND
DOSCODE:8422                 add     ax, 1           ; Round up if any remainder
DOSCODE:8425                 adc     ds:VALSEC+2, 0
DOSCODE:842A
DOSCODE:842A NORND:                                  ; ...
DOSCODE:842A                 mov     ds:VALSEC, ax
DOSCODE:842D                 xor     ax, ax
DOSCODE:842F                 mov     word ptr ds:GROWCNT, ax
DOSCODE:8432                 mov     word ptr ds:GROWCNT+2, ax
DOSCODE:8435                 mov     di, ds:HIGH_SECTOR
DOSCODE:8439                 pop     ax
DOSCODE:843A                 cmp     di, ds:TEMP_VAR2
DOSCODE:843E                 jb      short NOGROW
DOSCODE:8440                 jz      short lowsec
DOSCODE:8442                 sub     bx, cx
DOSCODE:8444                 sbb     di, ds:TEMP_VAR2
DOSCODE:8448                 jmp     short yesgrow
DOSCODE:844A ; ---------------------------------------------------------------------------
DOSCODE:844A
DOSCODE:844A lowsec:                                 ; ...
DOSCODE:844A                 xor     di, di
DOSCODE:844C                 sub     bx, cx
DOSCODE:844E                 jb      short NOGROW
DOSCODE:8450                 jz      short TESTTAIL
DOSCODE:8452
DOSCODE:8452 yesgrow:                                ; ...
DOSCODE:8452                 mov     cx, dx
DOSCODE:8454                 xchg    ax, bx
DOSCODE:8455                 mul     word ptr es:[bp+2] ; [ES:BP+DPB.SECTOR_SIZE]
DOSCODE:8455                                         ; Bytes of full sector growth
DOSCODE:8459                 mov     ds:HIGH_SECTOR, dx
DOSCODE:845D                 mov     ds:TEMP_VAR2, ax
DOSCODE:8460                 mov     ax, di
DOSCODE:8462                 mul     word ptr es:[bp+2]
DOSCODE:8466                 add     ax, ds:HIGH_SECTOR
DOSCODE:846A                 xchg    ax, dx
DOSCODE:846B                 mov     ax, ds:TEMP_VAR2
DOSCODE:846E                 sub     ax, cx
DOSCODE:8470                 sbb     dx, 0
DOSCODE:8473                 add     ax, bx
DOSCODE:8475                 adc     dx, 0
DOSCODE:8478                 jmp     short SETGRW
DOSCODE:847A ; ---------------------------------------------------------------------------
DOSCODE:847A
DOSCODE:847A HAVSTART:                               ; ...
DOSCODE:847A                 mov     ds:CLSKIP_HW, si
DOSCODE:847E                 mov     cx, ax
DOSCODE:8480                 call    SKPCLP
DOSCODE:8483                 mov     ax, ds:CLSKIP_HW
DOSCODE:8486                 cmp     ax, cx
DOSCODE:8488                 jnz     short loc_848C
DOSCODE:848A                 jcxz    short loc_84A1
DOSCODE:848C
DOSCODE:848C loc_848C:                               ; ...
DOSCODE:848C                 mov     ds:CCOUNT_HW, ax
DOSCODE:848F                 call    ALLOCATE
DOSCODE:8492                 jnb     short loc_84A1
DOSCODE:8494
DOSCODE:8494 loc_8494:                               ; ...
DOSCODE:8494                 mov     ah, 0Fh
DOSCODE:8496
DOSCODE:8496 loc_8496:                               ; ...
DOSCODE:8496                 mov     al, ds:THISDRV
DOSCODE:8499                 xor     cx, cx
DOSCODE:849B                 les     di, ds:THISSFT
DOSCODE:849F                 clc
DOSCODE:84A0
DOSCODE:84A0 locret_84A0:                            ; ...
DOSCODE:84A0                 retn
DOSCODE:84A1 ; ---------------------------------------------------------------------------
DOSCODE:84A1
DOSCODE:84A1 loc_84A1:                               ; ...
DOSCODE:84A1                 jmp     DOWRT
DOSCODE:84A4 ; ---------------------------------------------------------------------------
DOSCODE:84A4
DOSCODE:84A4 TESTTAIL:                               ; ...
DOSCODE:84A4                 sub     ax, dx
DOSCODE:84A6                 jbe     short NOGROW
DOSCODE:84A8                 xor     dx, dx
DOSCODE:84AA
DOSCODE:84AA SETGRW:                                 ; ...
DOSCODE:84AA                 mov     word ptr ds:GROWCNT, ax
DOSCODE:84AD                 mov     word ptr ds:GROWCNT+2, dx
DOSCODE:84B1
DOSCODE:84B1 NOGROW:                                 ; ...
DOSCODE:84B1                 mov     cx, ds:CLUSNUM  ; First cluster accessed
DOSCODE:84B5                 mov     dx, ds:CLUSNUM_HW
DOSCODE:84B9                 call    FNDCLUS
DOSCODE:84BC                 pop     ax
DOSCODE:84BD                 pop     si
DOSCODE:84BE                 jb      short ACC_ERRWJ
DOSCODE:84C0                 mov     ds:CLUSNUM, bx
DOSCODE:84C4                 mov     ds:LASTPOS, dx
DOSCODE:84C8                 sub     ax, dx          ; Last cluster minus current cluster
DOSCODE:84CA                 sbb     si, ds:LASTPOS_HW
DOSCODE:84CE                 mov     dx, ds:CLUSTNUM_HW
DOSCODE:84D2                 mov     ds:CLUSNUM_HW, dx
DOSCODE:84D6                 jnz     short NOGROW2
DOSCODE:84D8                 or      ax, ax
DOSCODE:84DA                 jz      short DOWRT
DOSCODE:84DC
DOSCODE:84DC NOGROW2:                                ; ...
DOSCODE:84DC                 cmp     cx, ds:CLSKIP_HW
DOSCODE:84E0                 jnz     short loc_84E4
DOSCODE:84E2                 jcxz    short HAVSTART
DOSCODE:84E4
DOSCODE:84E4 loc_84E4:                               ; ...
DOSCODE:84E4                 push    cx
DOSCODE:84E5                 push    word ptr ds:0AF8h
DOSCODE:84E9                 mov     ds:0AF0h, si
DOSCODE:84ED                 mov     cx, ax
DOSCODE:84EF                 call    ALLOCATE
DOSCODE:84F2                 pop     word ptr ds:0AF8h
DOSCODE:84F6                 pop     cx
DOSCODE:84F7                 jb      short loc_8494
DOSCODE:84F9                 mov     dx, ds:5BAh
DOSCODE:84FD                 add     dx, 1
DOSCODE:8500                 adc     word ptr ds:0AE2h, 0
DOSCODE:8505                 sub     cx, 1
DOSCODE:8508                 sbb     word ptr ds:0AF8h, 0
DOSCODE:850D                 jnz     short loc_8511
DOSCODE:850F                 or      cx, cx
DOSCODE:8511
DOSCODE:8511 loc_8511:                               ; ...
DOSCODE:8511                 jz      short NOSKIP
DOSCODE:8513                 call    SKPCLP
DOSCODE:8516                 jnb     short NOSKIP
DOSCODE:8518
DOSCODE:8518 ACC_ERRWJ:                              ; ...
DOSCODE:8518                 jmp     SET_ACC_ERRW
DOSCODE:851B ; ---------------------------------------------------------------------------
DOSCODE:851B
DOSCODE:851B NOSKIP:                                 ; ...
DOSCODE:851B                 mov     ds:CLUSNUM, bx
DOSCODE:851F                 mov     ax, ds:CLUSTNUM_HW
DOSCODE:8522                 mov     ds:CLUSNUM_HW, ax
DOSCODE:8525                 mov     ds:LASTPOS, dx
DOSCODE:8529
DOSCODE:8529 DOWRT:                                  ; ...
DOSCODE:8529                 cmp     ds:BYTCNT1, 0
DOSCODE:852E                 jz      short WRTMID
DOSCODE:8530                 mov     bx, ds:CLUSNUM_HW
DOSCODE:8534                 mov     ds:CLUSTNUM_HW, bx
DOSCODE:8538                 mov     bx, ds:CLUSNUM
DOSCODE:853C                 call    BUFWRT
DOSCODE:853F                 jb      short ACC_ERRWJ
DOSCODE:8541
DOSCODE:8541 WRTMID:                                 ; ...
DOSCODE:8541                 mov     ax, ds:SECCNT
DOSCODE:8544                 or      ax, ax
DOSCODE:8546                 jnz     short WRTMID2
DOSCODE:8548                 jmp     WRTLAST
DOSCODE:854B ; ---------------------------------------------------------------------------
DOSCODE:854B
DOSCODE:854B WRTMID2:                                ; ...
DOSCODE:854B                 add     word ptr ds:SECPOS, ax
DOSCODE:854F                 adc     word ptr ds:SECPOS+2, 0
DOSCODE:8554                 call    NEXTSEC
DOSCODE:8557                 jb      short SET_ACC_ERRW
DOSCODE:8559                 mov     ds:TRANS, 1
DOSCODE:855E                 mov     dl, ds:SECCLUSPOS
DOSCODE:8562                 mov     bx, ds:CLUSNUM_HW
DOSCODE:8566                 mov     ds:CLUSTNUM_HW, bx
DOSCODE:856A                 mov     bx, ds:CLUSNUM
DOSCODE:856E                 mov     cx, ds:SECCNT
DOSCODE:8572
DOSCODE:8572 WRTLP:                                  ; ...
DOSCODE:8572                 call    OPTIMIZE
DOSCODE:8575                 jb      short SET_ACC_ERRW
DOSCODE:8577                 push    ds:CCONTENT_HW
DOSCODE:857B                 push    di
DOSCODE:857C                 push    ax
DOSCODE:857D                 call    DskWrtBufPurge
DOSCODE:8580                 mov     ds, word ptr ss:DMAADD+2
DOSCODE:8585                 mov     ss:ALLOWED, 38h
DOSCODE:858B
DOSCODE:858B loc_858B:                               ; ...
DOSCODE:858B                 call    DSKWRITE
DOSCODE:858E                 jz      short loc_85A7
DOSCODE:8590                 cmp     al, 27h ; '''
DOSCODE:8592                 jz      short loc_85C2
DOSCODE:8594                 mov     byte ptr ss:575h, 1
DOSCODE:859A                 call    HARDERRRW
DOSCODE:859D                 cmp     al, 1
DOSCODE:859F                 jz      short loc_858B
DOSCODE:85A1                 cmp     al, 3
DOSCODE:85A3                 clc
DOSCODE:85A4                 jnz     short loc_85A7
DOSCODE:85A6                 stc
DOSCODE:85A7
DOSCODE:85A7 loc_85A7:                               ; ...
DOSCODE:85A7                 pop     cx
DOSCODE:85A8                 pop     bx
DOSCODE:85A9                 pop     word ptr ss:0AE8h
DOSCODE:85AE                 push    ss
DOSCODE:85AF                 pop     ds
DOSCODE:85B0                 jb      short SET_ACC_ERRW
DOSCODE:85B2                 jcxz    short WRTLAST
DOSCODE:85B4                 mov     dl, 0
DOSCODE:85B6                 add     word ptr ds:5BAh, 1
DOSCODE:85BB                 adc     word ptr ds:0AE2h, 0
DOSCODE:85C0                 jmp     short WRTLP
DOSCODE:85C2 ; ---------------------------------------------------------------------------
DOSCODE:85C2
DOSCODE:85C2 loc_85C2:                               ; ...
DOSCODE:85C2                 push    ss
DOSCODE:85C3                 pop     ds
DOSCODE:85C4                 pop     cx
DOSCODE:85C5                 pop     bx
DOSCODE:85C6                 pop     word ptr ds:0AE8h
DOSCODE:85CA                 mov     byte ptr ds:60Bh, 1
DOSCODE:85CF                 stc
DOSCODE:85D0                 jmp     loc_8494
DOSCODE:85D3 ; ---------------------------------------------------------------------------
DOSCODE:85D3
DOSCODE:85D3 SET_ACC_ERRW:                           ; ...
DOSCODE:85D3                 jmp     sub_8223
DOSCODE:85D6 ; ---------------------------------------------------------------------------
DOSCODE:85D6
DOSCODE:85D6 WRTLAST:                                ; ...
DOSCODE:85D6                 mov     ax, ds:5D4h
DOSCODE:85D9                 or      ax, ax
DOSCODE:85DB                 jz      short loc_85F0
DOSCODE:85DD                 mov     ds:5D2h, ax
DOSCODE:85E0                 call    NEXTSEC
DOSCODE:85E3                 jb      short SET_ACC_ERRW
DOSCODE:85E5                 mov     word ptr ds:5CCh, 0
DOSCODE:85EB                 call    BUFWRT
DOSCODE:85EE
DOSCODE:85EE loc_85EE:                               ; ...
DOSCODE:85EE                 jb      short SET_ACC_ERRW
DOSCODE:85F0
DOSCODE:85F0 loc_85F0:                               ; ...
DOSCODE:85F0                 les     di, ds:59Eh
DOSCODE:85F4                 mov     ax, ds:5DEh
DOSCODE:85F7                 mov     cx, ds:5E0h
DOSCODE:85FB                 or      ax, ax
DOSCODE:85FD                 jnz     short loc_8601
DOSCODE:85FF                 jcxz    short loc_8610
DOSCODE:8601
DOSCODE:8601 loc_8601:                               ; ...
DOSCODE:8601                 add     es:[di+11h], ax
DOSCODE:8605                 adc     es:[di+13h], cx
DOSCODE:8609                 mov     ax, 1
DOSCODE:860C                 call    dword ptr ds:0C8h
DOSCODE:8610
DOSCODE:8610 loc_8610:                               ; ...
DOSCODE:8610                 jmp     loc_82DB
DOSCODE:8613 ; ---------------------------------------------------------------------------
DOSCODE:8613
DOSCODE:8613 WRTEOF:                                 ; ...
DOSCODE:8613                 mov     cx, ax
DOSCODE:8615                 or      cx, dx
DOSCODE:8617                 jnz     short loc_861C
DOSCODE:8619                 jmp     loc_86C6
DOSCODE:861C ; ---------------------------------------------------------------------------
DOSCODE:861C
DOSCODE:861C loc_861C:                               ; ...
DOSCODE:861C                 cmp     dx, 7FFFh
DOSCODE:8620                 jnz     short loc_8625
DOSCODE:8622                 cmp     ax, 0FFFFh
DOSCODE:8625
DOSCODE:8625 loc_8625:                               ; ...
DOSCODE:8625                 jbe     short loc_8634
DOSCODE:8627                 push    es
DOSCODE:8628                 les     di, ds:THISSFT
DOSCODE:862C                 test    byte ptr es:[di+3], 10h
DOSCODE:8631                 pop     es
DOSCODE:8632                 jz      short SET_ACC_ERRW
DOSCODE:8634
DOSCODE:8634 loc_8634:                               ; ...
DOSCODE:8634                 sub     ax, 1
DOSCODE:8637                 sbb     dx, 0
DOSCODE:863A                 push    bx
DOSCODE:863B                 mov     bx, es:[bp+2]
DOSCODE:863F                 call    DIV32
DOSCODE:8642                 pop     bx
DOSCODE:8643                 mov     dx, cx
DOSCODE:8645                 mov     ds:607h, cx
DOSCODE:8649                 call    sub_8788
DOSCODE:864C                 mov     cx, ax
DOSCODE:864E                 call    FNDCLUS
DOSCODE:8651
DOSCODE:8651 loc_8651:                               ; ...
DOSCODE:8651                 jb      short loc_85EE
DOSCODE:8653                 mov     ax, ds:0AF8h
DOSCODE:8656                 cmp     ax, cx
DOSCODE:8658                 jnz     short loc_865C
DOSCODE:865A                 jcxz    short loc_8685
DOSCODE:865C
DOSCODE:865C loc_865C:                               ; ...
DOSCODE:865C                 mov     ds:0AF0h, ax
DOSCODE:865F                 call    ALLOCATE
DOSCODE:8662                 jb      short loc_8682
DOSCODE:8664
DOSCODE:8664 loc_8664:                               ; ...
DOSCODE:8664                 mov     ax, ds:5CEh
DOSCODE:8667                 les     di, ds:59Eh
DOSCODE:866B                 mov     es:[di+11h], ax
DOSCODE:866F                 mov     ax, ds:5D0h
DOSCODE:8672                 mov     es:[di+13h], ax
DOSCODE:8676                 mov     ax, 2
DOSCODE:8679                 call    dword ptr ds:0C8h
DOSCODE:867D                 xor     cx, cx
DOSCODE:867F                 jmp     sub_8306
DOSCODE:8682 ; ---------------------------------------------------------------------------
DOSCODE:8682
DOSCODE:8682 loc_8682:                               ; ...
DOSCODE:8682                 jmp     loc_8494
DOSCODE:8685 ; ---------------------------------------------------------------------------
DOSCODE:8685
DOSCODE:8685 loc_8685:                               ; ...
DOSCODE:8685                 push    es
DOSCODE:8686                 les     di, ds:59Eh
DOSCODE:868A                 push    ax
DOSCODE:868B                 mov     ax, ds:0AE2h
DOSCODE:868E                 cmp     ax, es:[di+0Bh]
DOSCODE:8692                 pop     ax
DOSCODE:8693                 jnz     short loc_8699
DOSCODE:8695                 cmp     dx, es:[di+19h]
DOSCODE:8699
DOSCODE:8699 loc_8699:                               ; ...
DOSCODE:8699                 jnb     short loc_86B7
DOSCODE:869B                 mov     dx, es:[di+2Bh]
DOSCODE:869F                 mov     word ptr es:[di+19h], 0
DOSCODE:86A5                 mov     es:[di+35h], dx
DOSCODE:86A9                 mov     word ptr es:[di+0Bh], 0
DOSCODE:86AF                 mov     dx, es:[di+2Dh]
DOSCODE:86B3                 mov     es:[di+37h], dx
DOSCODE:86B7
DOSCODE:86B7 loc_86B7:                               ; ...
DOSCODE:86B7                 pop     es
DOSCODE:86B8                 xor     dx, dx
DOSCODE:86BA                 dec     dx
DOSCODE:86BB                 mov     ds:CLUSDATA_HW, dx
DOSCODE:86BF                 call    RELBLKS
DOSCODE:86C2
DOSCODE:86C2 loc_86C2:                               ; ...
DOSCODE:86C2                 jb      short loc_8651
DOSCODE:86C4
DOSCODE:86C4 loc_86C4:                               ; ...
DOSCODE:86C4                 jmp     short loc_8664
DOSCODE:86C6 ; ---------------------------------------------------------------------------
DOSCODE:86C6
DOSCODE:86C6 loc_86C6:                               ; ...
DOSCODE:86C6                 xor     bx, bx
DOSCODE:86C8                 push    es
DOSCODE:86C9                 les     di, ds:THISSFT
DOSCODE:86CD                 xchg    bx, es:[di+2Dh]
DOSCODE:86D1                 mov     ds:CLUSTNUM_HW, bx
DOSCODE:86D5                 xor     bx, bx
DOSCODE:86D7                 mov     es:[di+0Bh], bx
DOSCODE:86DB                 mov     es:[di+37h], bx
DOSCODE:86DF                 mov     es:[di+19h], bx
DOSCODE:86E3                 mov     es:[di+35h], bx
DOSCODE:86E7                 xchg    bx, es:[di+2Bh]
DOSCODE:86EB                 pop     es
DOSCODE:86EC                 cmp     bx, ds:CLUSTNUM_HW
DOSCODE:86F0                 jnz     short loc_86F4
DOSCODE:86F2                 or      bx, bx
DOSCODE:86F4
DOSCODE:86F4 loc_86F4:                               ; ...
DOSCODE:86F4                 jz      short loc_86C4
DOSCODE:86F6                 push    es
DOSCODE:86F7                 push    bp
DOSCODE:86F8                 push    ax
DOSCODE:86F9                 push    cx
DOSCODE:86FA                 les     bp, ds:THISDPB
DOSCODE:86FE                 push    dx
DOSCODE:86FF                 mov     dl, es:[bp+0]
DOSCODE:8703                 mov     cx, bx
DOSCODE:8705                 mov     ah, 2
DOSCODE:8707                 call    FastOpen_Update
DOSCODE:870A                 pop     dx
DOSCODE:870B                 pop     cx
DOSCODE:870C                 pop     ax
DOSCODE:870D                 pop     bp
DOSCODE:870E                 pop     es
DOSCODE:870F                 call    RELEASE
DOSCODE:8712                 jmp     short loc_86C2
DOSCODE:8712 _WRITE_OK       endp
DOSCODE:8712
DOSCODE:8714
DOSCODE:8714 ; =============== S U B R O U T I N E =======================================
DOSCODE:8714
DOSCODE:8714
DOSCODE:8714 DskWrtBufPurge  proc near               ; ...
DOSCODE:8714                 push    bx
DOSCODE:8715                 push    cx
DOSCODE:8716                 mov     bx, ss:HIGH_SECTOR
DOSCODE:871B                 add     cx, dx
DOSCODE:871D                 mov     si, bx
DOSCODE:871F                 adc     si, 0
DOSCODE:8722                 mov     al, es:[bp+0]   ; [es:bp+DPB.DRIVE]
DOSCODE:8726                 call    GETCURHEAD
DOSCODE:8729
DOSCODE:8729 _bufq:                                  ; ...
DOSCODE:8729                 cmp     al, [di+4]      ; [di+BUFFINFO.buf_ID] ; Same drive?
DOSCODE:872C                 jnz     short bufq5     ; no
DOSCODE:872E                 cmp     bx, [di+8]      ; [di+BUFFINFO.buf_sector+2]
DOSCODE:8731                 jnz     short bufq04
DOSCODE:8733                 cmp     dx, [di+6]      ; [di+BUFFINFO.buf_sector]
DOSCODE:8736
DOSCODE:8736 bufq04:                                 ; ...
DOSCODE:8736                 ja      short bufq5
DOSCODE:8738                 cmp     si, [di+8]
DOSCODE:873B                 jnz     short bufq05
DOSCODE:873D                 cmp     cx, [di+6]
DOSCODE:8740
DOSCODE:8740 bufq05:                                 ; ...
DOSCODE:8740                 jbe     short bufq5
DOSCODE:8742                 test    byte ptr [di+5], 40h ; [di+BUFFINFO.buf_flags],buf_dirty
DOSCODE:8746                 jz      short bufq4
DOSCODE:8748                 call    DEC_DIRTY_COUNT
DOSCODE:874B
DOSCODE:874B bufq4:                                  ; ...
DOSCODE:874B                 mov     word ptr [di+4], 20FFh ; [di+BUFFINFO.buf_ID],
DOSCODE:874B                                         ; ((buf_visit<<8)|0FFh)
DOSCODE:8750                 call    SCANPLACE
DOSCODE:8753                 jmp     short bufq6
DOSCODE:8755 ; ---------------------------------------------------------------------------
DOSCODE:8755
DOSCODE:8755 bufq5:                                  ; ...
DOSCODE:8755                 mov     di, [di]        ; [di+BUFFINFO.buf_next]
DOSCODE:8757
DOSCODE:8757 bufq6:                                  ; ...
DOSCODE:8757                 cmp     di, ss:FIRST_BUFF_ADDR
DOSCODE:875C                 jnz     short _bufq     ; go do next buffer.
DOSCODE:875E                 pop     cx
DOSCODE:875F                 pop     bx
DOSCODE:8760                 retn
DOSCODE:8760 DskWrtBufPurge  endp
DOSCODE:8760
DOSCODE:8761
DOSCODE:8761 ; =============== S U B R O U T I N E =======================================
DOSCODE:8761
DOSCODE:8761
DOSCODE:8761 DIV32           proc near               ; ...
DOSCODE:8761                 cmp     bx, 512
DOSCODE:8765                 jnz     short loc_877C
DOSCODE:8767                 mov     cx, dx
DOSCODE:8769                 mov     dx, ax
DOSCODE:876B                 and     dx, 1FFh
DOSCODE:876F                 mov     al, ah
DOSCODE:8771                 mov     ah, cl
DOSCODE:8773                 mov     cl, ch
DOSCODE:8775                 xor     ch, ch
DOSCODE:8777                 shr     cx, 1
DOSCODE:8779                 rcr     ax, 1
DOSCODE:877B                 retn
DOSCODE:877C ; ---------------------------------------------------------------------------
DOSCODE:877C
DOSCODE:877C loc_877C:                               ; ...
DOSCODE:877C                 mov     cx, ax
DOSCODE:877E                 mov     ax, dx
DOSCODE:8780                 xor     dx, dx
DOSCODE:8782                 div     bx
DOSCODE:8784                 xchg    ax, cx
DOSCODE:8785                 div     bx
DOSCODE:8787                 retn
DOSCODE:8787 DIV32           endp
DOSCODE:8787
DOSCODE:8788
DOSCODE:8788 ; =============== S U B R O U T I N E =======================================
DOSCODE:8788
DOSCODE:8788
DOSCODE:8788 sub_8788        proc near               ; ...
DOSCODE:8788                 mov     cl, es:[bp+5]
DOSCODE:878C                 xor     ch, ch
DOSCODE:878E                 jcxz    short locret_8796
DOSCODE:8790
DOSCODE:8790 loc_8790:                               ; ...
DOSCODE:8790                 shr     dx, 1
DOSCODE:8792                 rcr     ax, 1
DOSCODE:8794                 loop    loc_8790
DOSCODE:8796
DOSCODE:8796 locret_8796:                            ; ...
DOSCODE:8796                 retn
DOSCODE:8796 sub_8788        endp
DOSCODE:8796
DOSCODE:8797
DOSCODE:8797 ; =============== S U B R O U T I N E =======================================
DOSCODE:8797
DOSCODE:8797
DOSCODE:8797 FINDENTRY       proc near               ; ...
DOSCODE:8797                 call    STARTSRCH
DOSCODE:879A                 mov     al, ds:ATTRIB
DOSCODE:879D                 and     al, 9Eh         ; ~attr_ignore
DOSCODE:879F                 cmp     al, 8           ; attr_volume_id
DOSCODE:87A1                 jnz     short NOTVOLSRCH
DOSCODE:87A3                 call    SETROOTSRCH
DOSCODE:87A6
DOSCODE:87A6 NOTVOLSRCH:                             ; ...
DOSCODE:87A6                 call    GETENTRY
DOSCODE:87A9                 jnb     short SRCH
DOSCODE:87AB                 jb      short SETESRET_j
DOSCODE:87AD
DOSCODE:87AD SRCH:                                   ; ...
DOSCODE:87AD                 mov     ds:LNE_COUNT, 0 ; reset long name entry count
DOSCODE:87B3
DOSCODE:87B3 SRCH2:                                  ; ...
DOSCODE:87B3                 push    ds
DOSCODE:87B4                 mov     ds, word ptr ds:CURBUF+2
DOSCODE:87B8                 mov     ah, [bx]        ; [BX+dir_entry.dir_name]
DOSCODE:87BA                 or      ah, ah
DOSCODE:87BC                 jz      short FREE
DOSCODE:87BE                 push    ax
DOSCODE:87BF                 mov     al, [bx+0Bh]    ; [BX+dir_entry.dir_attr]
DOSCODE:87C2                 call    check_longname
DOSCODE:87C5                 pop     ax
DOSCODE:87C6                 jz      short NEXTENT2
DOSCODE:87C8                 cmp     ah, ss:DELALL
DOSCODE:87CD                 jz      short FREE
DOSCODE:87CF                 test    byte ptr [bx+0Bh], 8 ; [BX+dir_entry.dir_attr],
DOSCODE:87CF                                         ; attr_volume_id
DOSCODE:87D3                 jz      short CHKFNAM
DOSCODE:87D5                 inc     ss:VOLID
DOSCODE:87DA
DOSCODE:87DA CHKFNAM:                                ; ...
DOSCODE:87DA                 mov     si, ss
DOSCODE:87DC                 mov     es, si
DOSCODE:87DE                 mov     si, bx
DOSCODE:87E0                 mov     di, offset NAME1
DOSCODE:87E3                 cmp     ss:NAME1, 0E5h
DOSCODE:87E9                 jnz     short NO_E5
DOSCODE:87EB                 mov     ss:NAME1, 5
DOSCODE:87F1
DOSCODE:87F1 NO_E5:                                  ; ...
DOSCODE:87F1                 call    MetaCompare
DOSCODE:87F4                 jz      short FOUND
DOSCODE:87F6                 pop     ds
DOSCODE:87F6 FINDENTRY       endp
DOSCODE:87F6
DOSCODE:87F7
DOSCODE:87F7 ; =============== S U B R O U T I N E =======================================
DOSCODE:87F7
DOSCODE:87F7
DOSCODE:87F7 NEXTENT         proc near               ; ...
DOSCODE:87F7                 les     bp, ds:THISDPB
DOSCODE:87FB                 call    NEXTENTRY
DOSCODE:87FE                 jnb     short SRCH
DOSCODE:8800
DOSCODE:8800 SETESRET_j:                             ; ...
DOSCODE:8800                 jmp     short SETESRET
DOSCODE:8802 ; ---------------------------------------------------------------------------
DOSCODE:8802
DOSCODE:8802 NEXTENT2:                               ; ...
DOSCODE:8802                 pop     ds
DOSCODE:8803                 inc     ds:LNE_COUNT    ; Long Name entry count
DOSCODE:8807
DOSCODE:8807 NEXTENT3:                               ; ...
DOSCODE:8807                 les     bp, ds:THISDPB
DOSCODE:880B                 call    NEXTENTRY
DOSCODE:880E                 jnb     short SRCH2
DOSCODE:8810                 jmp     short SETESRET
DOSCODE:8812 ; ---------------------------------------------------------------------------
DOSCODE:8812
DOSCODE:8812 FREE:                                   ; ...
DOSCODE:8812                 pop     ds
DOSCODE:8813                 mov     cx, ds:LASTENT
DOSCODE:8817                 cmp     cx, ds:ENTFREE
DOSCODE:881B                 jnb     short TSTALL
DOSCODE:881D                 mov     ds:ENTFREE, cx
DOSCODE:8821
DOSCODE:8821 TSTALL:                                 ; ...
DOSCODE:8821                 cmp     ah, ds:DELALL
DOSCODE:8825                 jz      short NEXTENT3
DOSCODE:8827                 mov     ds:ENTLAST, cx
DOSCODE:882B                 stc
DOSCODE:882C                 jmp     short SETESRET
DOSCODE:882E ; ---------------------------------------------------------------------------
DOSCODE:882E
DOSCODE:882E FOUND:                                  ; ...
DOSCODE:882E                 mov     ch, [si]
DOSCODE:8830                 pop     ds
DOSCODE:8831                 mov     ah, ds:ATTRIB
DOSCODE:8835                 and     ah, 9Eh         ; ~attr_ignore
DOSCODE:8838                 lea     si, [si+0Fh]    ; [SI+dir_entry.dir_first-dir_entry.dir_attr]
DOSCODE:883B                 test    ch, 8           ; attr_volume_id
DOSCODE:883E                 jz      short check_one_volume_id
DOSCODE:8840                 test    ah, 8           ; attr_volume_id
DOSCODE:8843                 jz      short NEXTENT
DOSCODE:8845                 xor     ah, ah
DOSCODE:8847                 jmp     short RETFF
DOSCODE:8849 ; ---------------------------------------------------------------------------
DOSCODE:8849
DOSCODE:8849 check_one_volume_id:                    ; ...
DOSCODE:8849                 cmp     ah, 8           ; attr_volume_id
DOSCODE:884C                 jz      short NEXTENT
DOSCODE:884E                 call    MatchAttributes
DOSCODE:8851                 jz      short RETFF
DOSCODE:8853                 test    ds:CREATING, 0FFh ; -1
DOSCODE:8858                 jz      short NEXTENT
DOSCODE:885A
DOSCODE:885A RETFF:                                  ; ...
DOSCODE:885A                 les     bp, ds:THISDPB
DOSCODE:885E                 mov     ah, es:[bp+0]
DOSCODE:8862
DOSCODE:8862 SETESRET:                               ; ...
DOSCODE:8862                 push    ss
DOSCODE:8863                 pop     es
DOSCODE:8864                 push    ds:ENTLAST
DOSCODE:8868                 pop     ds:ENTLAST_PREV ; previous ENTLAST
DOSCODE:886C                 jnb     short SETESRETN
DOSCODE:886E                 mov     ds:LNE_COUNT, 0 ; reset long name entry count
DOSCODE:8874
DOSCODE:8874 SETESRETN:                              ; ...
DOSCODE:8874                 retn
DOSCODE:8874 NEXTENT         endp
DOSCODE:8874
DOSCODE:8875
DOSCODE:8875 ; =============== S U B R O U T I N E =======================================
DOSCODE:8875
DOSCODE:8875
DOSCODE:8875 MetaCompare     proc near               ; ...
DOSCODE:8875                 mov     cx, 11
DOSCODE:8878
DOSCODE:8878 WILDCRD:                                ; ...
DOSCODE:8878                 repe cmpsb
DOSCODE:887A                 jz      short MetaRet
DOSCODE:887C                 cmp     byte ptr es:[di-1], 3Fh ; '?'
DOSCODE:8881                 jz      short WILDCRD
DOSCODE:8883
DOSCODE:8883 MetaRet:                                ; ...
DOSCODE:8883                 retn
DOSCODE:8883 MetaCompare     endp
DOSCODE:8883
DOSCODE:8884
DOSCODE:8884 ; =============== S U B R O U T I N E =======================================
DOSCODE:8884
DOSCODE:8884
DOSCODE:8884 NEXTENTRY       proc near               ; ...
DOSCODE:8884                 mov     ax, ds:LASTENT
DOSCODE:8887                 cmp     ax, ds:ENTLAST
DOSCODE:888B                 jz      short loc_88D4
DOSCODE:888D                 inc     ax
DOSCODE:888E                 lea     bx, [bx+20h]
DOSCODE:8891                 cmp     bx, dx
DOSCODE:8893                 jnz     short loc_88D6
DOSCODE:8895                 cmp     ds:DIRSTART, 0
DOSCODE:889A                 jnz     short loc_88AB
DOSCODE:889C                 cmp     ds:DIRSTART_HW, 0
DOSCODE:88A1                 jnz     short loc_88AB
DOSCODE:88A3                 cmp     ax, es:[bp+9]
DOSCODE:88A7                 jnb     short loc_88D4
DOSCODE:88A9                 jmp     short GETENT
DOSCODE:88AB ; ---------------------------------------------------------------------------
DOSCODE:88AB
DOSCODE:88AB loc_88AB:                               ; ...
DOSCODE:88AB                 mov     bl, ds:SECCLUSPOS
DOSCODE:88AF                 inc     bl
DOSCODE:88B1                 cmp     bl, ds:CLUSFAC
DOSCODE:88B5                 jb      short loc_88DB
DOSCODE:88B7                 mov     bx, ds:NXTCLUSNUM_HW
DOSCODE:88BB                 mov     ds:CLUSTNUM_HW, bx
DOSCODE:88BF                 mov     bx, ds:NXTCLUSNUM
DOSCODE:88C3                 call    IsEOF
DOSCODE:88C6                 jnb     short loc_88D4
DOSCODE:88C8                 cmp     ds:CLUSTNUM_HW, 0
DOSCODE:88CD                 jnz     short GETENT
DOSCODE:88CF                 cmp     bx, 2
DOSCODE:88D2                 jnb     short GETENT
DOSCODE:88D4
DOSCODE:88D4 loc_88D4:                               ; ...
DOSCODE:88D4                 stc
DOSCODE:88D5                 retn
DOSCODE:88D6 ; ---------------------------------------------------------------------------
DOSCODE:88D6
DOSCODE:88D6 loc_88D6:                               ; ...
DOSCODE:88D6                 mov     ds:LASTENT, ax
DOSCODE:88D9                 clc
DOSCODE:88DA
DOSCODE:88DA locret_88DA:                            ; ...
DOSCODE:88DA                 retn
DOSCODE:88DB ; ---------------------------------------------------------------------------
DOSCODE:88DB
DOSCODE:88DB loc_88DB:                               ; ...
DOSCODE:88DB                 mov     ds:SECCLUSPOS, bl
DOSCODE:88DF                 mov     ds:LASTENT, ax
DOSCODE:88E2                 push    ds
DOSCODE:88E3                 lds     di, ds:CURBUF
DOSCODE:88E7                 lds     dx, [di+6]
DOSCODE:88EA                 mov     ss:HIGH_SECTOR, ds
DOSCODE:88EF                 add     dx, 1
DOSCODE:88F2                 adc     ss:HIGH_SECTOR, 0
DOSCODE:88F8                 pop     ds
DOSCODE:88F9                 call    FIRSTCLUSTER
DOSCODE:88FC                 xor     bx, bx
DOSCODE:88FE                 jmp     short loc_8924
DOSCODE:88FE NEXTENTRY       endp
DOSCODE:88FE
DOSCODE:8900
DOSCODE:8900 ; =============== S U B R O U T I N E =======================================
DOSCODE:8900
DOSCODE:8900
DOSCODE:8900 GETENTRY        proc near               ; ...
DOSCODE:8900                 mov     ax, ds:LASTENT
DOSCODE:8903
DOSCODE:8903 GETENT:                                 ; ...
DOSCODE:8903                 mov     ds:LASTENT, ax
DOSCODE:8906                 mov     cl, 5
DOSCODE:8908                 rol     ax, cl
DOSCODE:890A                 mov     dx, ax
DOSCODE:890C                 and     ax, 0FFE0h
DOSCODE:890F                 and     dx, 1Fh
DOSCODE:8912                 mov     bx, es:[bp+2]
DOSCODE:8916                 and     bl, 0E0h
DOSCODE:8919                 div     bx
DOSCODE:891B                 mov     bx, dx
DOSCODE:891D                 push    dx
DOSCODE:891E                 call    sub_7F07
DOSCODE:8921                 pop     bx
DOSCODE:8922                 jb      short locret_88DA
DOSCODE:8924
DOSCODE:8924 loc_8924:                               ; ...
DOSCODE:8924                 mov     dx, word ptr ds:CURBUF
DOSCODE:8928                 add     dx, 18h
DOSCODE:892B                 add     bx, dx
DOSCODE:892D                 add     dx, es:[bp+2]
DOSCODE:8931                 clc
DOSCODE:8932                 retn
DOSCODE:8932 GETENTRY        endp
DOSCODE:8932
DOSCODE:8932 ; ---------------------------------------------------------------------------
DOSCODE:8933 sft_fcb_table   db 20 dup(0)            ; ...
DOSCODE:8947 sftfcb_cluster  dw 2 dup(0)             ; ...
DOSCODE:894B sftfcb_direntry dw 0                    ; ...
DOSCODE:894D                 db 114 dup(0)           ; 6*20 = 120 ; entry size = 6 bytes
DOSCODE:89BF SRCH_CLUSTER    dw 0                    ; ...
DOSCODE:89C1 SRCH_CLUSTER_HW dw 0                    ; ...
DOSCODE:89C3
DOSCODE:89C3 ; =============== S U B R O U T I N E =======================================
DOSCODE:89C3
DOSCODE:89C3
DOSCODE:89C3 SETDIRSRCH      proc near               ; ...
DOSCODE:89C3                 cmp     ds:ROOTCLUST_HW, 0
DOSCODE:89C8                 jnz     short SETDIRSRCH_FAT32
DOSCODE:89CA                 or      bx, bx
DOSCODE:89CC                 jz      short SETROOTSRCH
DOSCODE:89CE
DOSCODE:89CE SETDIRSRCH_FAT32:                       ; ...
DOSCODE:89CE                 mov     ax, ds:ROOTCLUST_HW
DOSCODE:89D1                 mov     ds:DIRSTART_HW, ax
DOSCODE:89D4                 mov     ds:CLUSTNUM_HW, ax
DOSCODE:89D7                 mov     ds:DIRSTART, bx
DOSCODE:89DB                 mov     al, es:[bp+4]   ; [ES:BP+DPB.CLUSTER_MASK]
DOSCODE:89DF                 inc     al
DOSCODE:89E1                 mov     ds:CLUSFAC, al
DOSCODE:89E4                 push    si
DOSCODE:89E5                 test    ds:FastOpenFlg, 2 ; [FastOpenFlg],Lookup_Success
DOSCODE:89EA                 jnz     short UNP_OK
DOSCODE:89EC                 call    UNPACK
DOSCODE:89EF                 jnb     short UNP_OK
DOSCODE:89F1                 pop     si
DOSCODE:89F2                 retn
DOSCODE:89F3 ; ---------------------------------------------------------------------------
DOSCODE:89F3
DOSCODE:89F3 UNP_OK:                                 ; ...
DOSCODE:89F3                 mov     ds:CLUSNUM, di  ; CCONTENT_HW:DI = Contents of FAT
DOSCODE:89F3                                         ; for given cluster (from UNPACK)
DOSCODE:89F7                 mov     dx, ds:CCONTENT_HW
DOSCODE:89FB                 mov     ds:CLUSNUM_HW, dx
DOSCODE:89FF                 mov     cs:SRCH_CLUSTER, bx ; Directory start cluster number
DOSCODE:89FF                                         ; for searching/locating (directory entry)
DOSCODE:8A04                 mov     dx, ds:CLUSTNUM_HW
DOSCODE:8A08                 mov     cs:SRCH_CLUSTER_HW, dx
DOSCODE:8A0D                 mov     dx, bx
DOSCODE:8A0F                 xor     bl, bl
DOSCODE:8A11                 mov     ds:SECCLUSPOS, bl ;
DOSCODE:8A11                                         ; CLUSTNUM_HW:DX = Physical cluster number
DOSCODE:8A15                 call    FIGREC
DOSCODE:8A18                 mov     si, ds:HIGH_SECTOR
DOSCODE:8A1C                 mov     ds:DIRSEC+2, si
DOSCODE:8A20                 mov     ds:DIRSEC, dx
DOSCODE:8A24                 pop     si
DOSCODE:8A25                 clc
DOSCODE:8A26                 retn
DOSCODE:8A26 SETDIRSRCH      endp
DOSCODE:8A26
DOSCODE:8A27
DOSCODE:8A27 ; =============== S U B R O U T I N E =======================================
DOSCODE:8A27
DOSCODE:8A27
DOSCODE:8A27 SETROOTSRCH     proc near               ; ...
DOSCODE:8A27                 mov     ds:ROOTCLUST_HW, 0
DOSCODE:8A2D                 cmp     word ptr es:[bp+0Fh], 0 ; DPB.FAT_SIZE
DOSCODE:8A32                 jnz     short SETROOTSRCH_FAT ; not FAT32
DOSCODE:8A34
DOSCODE:8A34 SETROOTSRCH_FAT32:                      ;
DOSCODE:8A34                 mov     bx, es:[bp+37h] ; DPB.ROOT_CLUSTER+2
DOSCODE:8A38                 mov     ds:ROOTCLUST_HW, bx
DOSCODE:8A3C                 cmp     bx, es:[bp+2Fh] ; DPB.LAST_CLUSTER+2
DOSCODE:8A40                 mov     bx, es:[bp+35h] ; DPB.ROOT_CLUSTER
DOSCODE:8A44                 jnz     short sdsrch_fat32_1
DOSCODE:8A46                 cmp     bx, es:[bp+2Dh] ; DPB.LAST_CLUSTER
DOSCODE:8A4A
DOSCODE:8A4A sdsrch_fat32_1:                         ; ...
DOSCODE:8A4A                 ja      short sdsrch_fat32_3
DOSCODE:8A4C                 cmp     ds:ROOTCLUST_HW, 0
DOSCODE:8A51                 jnz     short sdsrch_fat32_2
DOSCODE:8A53                 cmp     bx, 2
DOSCODE:8A56                 jb      short sdsrch_fat32_3
DOSCODE:8A58
DOSCODE:8A58 sdsrch_fat32_2:                         ; ...
DOSCODE:8A58                 jmp     SETDIRSRCH_FAT32
DOSCODE:8A5B ; ---------------------------------------------------------------------------
DOSCODE:8A5B
DOSCODE:8A5B sdsrch_fat32_3:                         ; ...
DOSCODE:8A5B                 stc
DOSCODE:8A5C                 jmp     short setdirsrch_retn
DOSCODE:8A5E ; ---------------------------------------------------------------------------
DOSCODE:8A5E
DOSCODE:8A5E SETROOTSRCH_FAT:                        ; ...
DOSCODE:8A5E                 xor     ax, ax
DOSCODE:8A60                 mov     ds:DIRSEC+2, ax
DOSCODE:8A63                 mov     ds:DIRSTART, ax
DOSCODE:8A66                 mov     ds:DIRSTART_HW, ax
DOSCODE:8A69                 mov     cs:SRCH_CLUSTER_HW, ax ; search start dir cluster num = 1
DOSCODE:8A69                                         ; (root directory)
DOSCODE:8A6D                 inc     ax
DOSCODE:8A6E                 mov     cs:SRCH_CLUSTER, ax ; 1 ; FAT root directory (<2)
DOSCODE:8A72                 dec     ax              ; 0
DOSCODE:8A73                 mov     ds:SECCLUSPOS, al
DOSCODE:8A76                 dec     ax              ; -1
DOSCODE:8A77                 mov     ds:CLUSNUM, ax
DOSCODE:8A7A                 mov     ds:CLUSNUM_HW, ax
DOSCODE:8A7D                 mov     ax, es:[bp+0Bh] ; [ES:BP+DPB.FIRST_SECTOR]
DOSCODE:8A81                 mov     dx, es:[bp+11h] ; [ES:BP+DPB.DIR_SECTOR]
DOSCODE:8A85                 sub     ax, dx
DOSCODE:8A87                 mov     ds:CLUSFAC, al
DOSCODE:8A8A                 mov     ds:DIRSEC, dx
DOSCODE:8A8E                 clc
DOSCODE:8A8F
DOSCODE:8A8F setdirsrch_retn:                        ; ...
DOSCODE:8A8F                 retn
DOSCODE:8A8F SETROOTSRCH     endp
DOSCODE:8A8F
DOSCODE:8A90
DOSCODE:8A90 ; =============== S U B R O U T I N E =======================================
DOSCODE:8A90
DOSCODE:8A90
DOSCODE:8A90 set_sftfcb_entry proc near              ; ...
DOSCODE:8A90                 push    ax              ; set SFT number and entry
DOSCODE:8A90                                         ; in the new internal table
DOSCODE:8A90                                         ; (only for FCB calls)
DOSCODE:8A91                 push    cx
DOSCODE:8A92                 push    dx
DOSCODE:8A93                 push    bx
DOSCODE:8A94                 push    bp
DOSCODE:8A95                 push    si
DOSCODE:8A96                 push    di              ; ES:DI = SFT entry
DOSCODE:8A97                 call    find_sft_entry_number ;
DOSCODE:8A97                                         ; ax = SFT entry index number
DOSCODE:8A97                                         ;      of the last SFT entry
DOSCODE:8A9A                 xor     bx, bx
DOSCODE:8A9C                 mov     cx, 20          ; find empty entry (slot) in the table
DOSCODE:8A9F
DOSCODE:8A9F set_sftfcbe_1:                          ; ...
DOSCODE:8A9F                 cmp     cs:(sftfcb_cluster+2)[bx], 0 ; [cs:bx+sftfcb.cluster+2]
DOSCODE:8A9F                                         ; directory (search) starting cluster, hw
DOSCODE:8AA5                 jnz     short set_sftfcbe_2
DOSCODE:8AA7                 cmp     cs:sftfcb_cluster[bx], 0 ; [cs:bx+sftfcb.cluster]
DOSCODE:8AA7                                         ; directory (search) starting cluster, lw
DOSCODE:8AAD
DOSCODE:8AAD set_sftfcbe_2:                          ; ...
DOSCODE:8AAD                 jnz     short set_sftfcbe_3 ; not empty (sfcb table) entry
DOSCODE:8AAF                 push    cx
DOSCODE:8AB0                 mov     cx, cs:SRCH_CLUSTER ; search start dir cluster number
DOSCODE:8AB5                 mov     cs:sftfcb_cluster[bx], cx ; directory start cluster
DOSCODE:8ABA                 mov     cx, cs:SRCH_CLUSTER_HW
DOSCODE:8ABF                 mov     cs:sftfcb_cluster[bx], cx ; PCDOS 7.1 BUG! (This would be
DOSCODE:8ABF                                         ; 'cs:sftfcb_cluster+2[bx],cx')
DOSCODE:8ABF                                         ; Erdogan Tan - 23/01/2024
DOSCODE:8AC4                 pop     cx
DOSCODE:8AC5                 mov     dx, ss:LASTENT  ; LAST (found) entry in the directory
DOSCODE:8ACA                 mov     cs:sftfcb_direntry[bx], dx ; [cs:bx+sftfcb.direntry]
DOSCODE:8ACA                                         ; directory entry number
DOSCODE:8ACF                 xchg    ax, bx
DOSCODE:8AD0                 xor     dx, dx
DOSCODE:8AD2                 mov     cx, 6           ; sftfcb table has 6 byte entries
DOSCODE:8AD5                 div     cx
DOSCODE:8AD7                 xchg    ax, bx
DOSCODE:8AD8                 mov     cs:sft_fcb_table[bx], al ; put SFT entry number in SFT-FCB
DOSCODE:8AD8                                         ; table (offset is FCB index number 0 to 19)
DOSCODE:8ADD                 jmp     short set_setfcbe_4
DOSCODE:8ADF ; ---------------------------------------------------------------------------
DOSCODE:8ADF
DOSCODE:8ADF set_sftfcbe_3:                          ; ...
DOSCODE:8ADF                 add     bx, 6
DOSCODE:8AE2                 loop    set_sftfcbe_1
DOSCODE:8AE4
DOSCODE:8AE4 set_setfcbe_4:                          ; ...
DOSCODE:8AE4                 pop     di
DOSCODE:8AE5                 pop     si
DOSCODE:8AE6                 pop     bp
DOSCODE:8AE7                 pop     bx
DOSCODE:8AE8                 pop     dx
DOSCODE:8AE9                 pop     cx
DOSCODE:8AEA                 pop     ax
DOSCODE:8AEB                 retn
DOSCODE:8AEB set_sftfcb_entry endp
DOSCODE:8AEB
DOSCODE:8AEC
DOSCODE:8AEC ; =============== S U B R O U T I N E =======================================
DOSCODE:8AEC
DOSCODE:8AEC
DOSCODE:8AEC find_sft_entry_number proc near         ; ...
DOSCODE:8AEC                 push    es              ; es:di = SFT entry
DOSCODE:8AED                 xor     cx, cx
DOSCODE:8AEF                 mov     dx, es
DOSCODE:8AF1                 mov     es, cs:DosDSeg
DOSCODE:8AF6                 les     bx, es:SFT_ADDR ; address of the first SFT
DOSCODE:8AFB
DOSCODE:8AFB f_sfte_1:                               ; ...
DOSCODE:8AFB                 mov     ax, es
DOSCODE:8AFD                 cmp     ax, dx          ; same SFT segment ?
DOSCODE:8AFF                 jnz     short f_sfte_2  ; no
DOSCODE:8B01                 mov     ax, di
DOSCODE:8B03                 sub     ax, bx          ; ax = entry offset
DOSCODE:8B05                 sub     ax, 6           ; ax = offset from start of the SFT table
DOSCODE:8B08                 mov     bx, 59          ; SF_ENTRY.size (SFT entry size)
DOSCODE:8B0B                 xor     dx, dx
DOSCODE:8B0D                 div     bx              ; ax = SFT entry index in the table
DOSCODE:8B0F                 add     ax, cx          ; ax = SFT index number (for requested SFT entry)
DOSCODE:8B11                 pop     es
DOSCODE:8B12                 retn
DOSCODE:8B13 ; ---------------------------------------------------------------------------
DOSCODE:8B13
DOSCODE:8B13 f_sfte_2:                               ; ...
DOSCODE:8B13                 add     cx, es:[bx+4]   ; SFT.SFCount ; number of entries in the table
DOSCODE:8B17                 les     bx, es:[bx]     ; SFT.SFLink
DOSCODE:8B1A                 cmp     bx, 0FFFFh      ; the last SFT
DOSCODE:8B1D                 jnz     short f_sfte_1
DOSCODE:8B1F                 stc                     ; (not found)
DOSCODE:8B20                 pop     es
DOSCODE:8B21                 retn
DOSCODE:8B21 find_sft_entry_number endp
DOSCODE:8B21
DOSCODE:8B22
DOSCODE:8B22 ; =============== S U B R O U T I N E =======================================
DOSCODE:8B22
DOSCODE:8B22
DOSCODE:8B22 int_2Fh_1230h   proc near               ; ...
DOSCODE:8B22                 call    find_sft_entry_number ; Windows95 - FIND SFT ENTRY IN INTERNAL FILE TABLES
DOSCODE:8B25                 jb      short find_sfte_i_error
DOSCODE:8B27                 push    es              ; ax = SFT enty index number (of the requested SFT entry)
DOSCODE:8B28                 push    di
DOSCODE:8B29                 push    cs
DOSCODE:8B2A                 pop     es
DOSCODE:8B2B                 assume es:DOSCODE
DOSCODE:8B2B                 mov     cx, 20          ; statically allocated with 20 entries,
DOSCODE:8B2B                                         ; and used only for FCB calls
DOSCODE:8B2E                 mov     di, offset sft_fcb_table ; new file system (internal) table
DOSCODE:8B2E                                         ;  only for fcb calls
DOSCODE:8B31
DOSCODE:8B31 scan_next_sftfcb:                       ; ...
DOSCODE:8B31                 repne scasb
DOSCODE:8B33                 stc
DOSCODE:8B34                 jnz     short sfte_i_notfound ; not found (cf=1)
DOSCODE:8B36                 lea     bx, [di-1]      ; offset of the entry in the table
DOSCODE:8B39                 sub     bx, offset sft_fcb_table ;
DOSCODE:8B39                                         ; index into new file system table
DOSCODE:8B3D                 mov     dx, bx
DOSCODE:8B3F                 add     bx, bx          ; 2*bx
DOSCODE:8B41                 add     bx, dx          ; 3*bx
DOSCODE:8B43                 add     bx, bx          ; bx = 6*bx  ; entry size = 6 bytes
DOSCODE:8B45                 mov     si, es:(sftfcb_cluster+2)[bx] ; dir start cluster number, hw
DOSCODE:8B4A                 mov     dx, es:sftfcb_direntry[bx] ; directory entry number
DOSCODE:8B4F                 push    cx
DOSCODE:8B50                 mov     cx, es:sftfcb_cluster[bx] ; dir start cluster number, lw
DOSCODE:8B55                 or      cx, cx
DOSCODE:8B57                 jnz     short sfte_i_found
DOSCODE:8B59                 or      si, si
DOSCODE:8B5B                 jnz     short sfte_i_found
DOSCODE:8B5D                 pop     cx
DOSCODE:8B5E                 or      cx, cx
DOSCODE:8B60                 jnz     short scan_next_sftfcb
DOSCODE:8B62                 stc                     ; not found (cf=1)
DOSCODE:8B63                 jmp     short sfte_i_notfound
DOSCODE:8B65 ; ---------------------------------------------------------------------------
DOSCODE:8B65
DOSCODE:8B65 sfte_i_found:                           ; ...
DOSCODE:8B65                 pop     ax              ; clear stack
DOSCODE:8B66                 clc                     ; found (cf=0)
DOSCODE:8B67
DOSCODE:8B67 sfte_i_notfound:                        ; ...
DOSCODE:8B67                 pop     di
DOSCODE:8B68                 pop     es
DOSCODE:8B69                 assume es:nothing
DOSCODE:8B69
DOSCODE:8B69 find_sfte_i_error:                      ; ...
DOSCODE:8B69                 mov     ax, 0
DOSCODE:8B6C                 retn
DOSCODE:8B6C int_2Fh_1230h   endp
DOSCODE:8B6C
DOSCODE:8B6D
DOSCODE:8B6D ; =============== S U B R O U T I N E =======================================
DOSCODE:8B6D
DOSCODE:8B6D
DOSCODE:8B6D SFT_FREE        proc near               ; ...
DOSCODE:8B6D                 push    ax
DOSCODE:8B6E                 push    cx
DOSCODE:8B6F                 push    dx
DOSCODE:8B70                 push    bx
DOSCODE:8B71                 push    bp
DOSCODE:8B72                 push    si
DOSCODE:8B73                 push    di
DOSCODE:8B74                 mov     word ptr es:[di], 0 ; [ES:DI+SF_ENTRY.sf_ref_Count]
DOSCODE:8B79                 call    int_2Fh_1230h
DOSCODE:8B7C                 jb      short sftf_1
DOSCODE:8B7E                 mov     cs:(sftfcb_cluster+2)[bx], 0 ; clear directory start cluster
DOSCODE:8B7E                                         ;  in the new (sftfcb) table
DOSCODE:8B85                 mov     cs:sftfcb_cluster[bx], 0 ; ((empty entry))
DOSCODE:8B8C
DOSCODE:8B8C sftf_1:                                 ; ...
DOSCODE:8B8C                 pop     di
DOSCODE:8B8D                 pop     si
DOSCODE:8B8E                 pop     bp
DOSCODE:8B8F                 pop     bx
DOSCODE:8B90                 pop     dx
DOSCODE:8B91                 pop     cx
DOSCODE:8B92                 pop     ax
DOSCODE:8B93                 retn
DOSCODE:8B93 SFT_FREE        endp
DOSCODE:8B93
DOSCODE:8B94
DOSCODE:8B94 ; =============== S U B R O U T I N E =======================================
DOSCODE:8B94
DOSCODE:8B94
DOSCODE:8B94 check_longname  proc near               ; ...
DOSCODE:8B94                 and     al, 0Fh
DOSCODE:8B96                 cmp     al, 0Fh
DOSCODE:8B98                 retn
DOSCODE:8B98 check_longname  endp
DOSCODE:8B98
DOSCODE:8B99
DOSCODE:8B99 ; =============== S U B R O U T I N E =======================================
DOSCODE:8B99
DOSCODE:8B99
DOSCODE:8B99 GETPATH         proc near               ; ...
DOSCODE:8B99                 mov     word ptr ds:CREATING, 0E500h
DOSCODE:8B99 GETPATH         endp
DOSCODE:8B99
DOSCODE:8B9F
DOSCODE:8B9F ; =============== S U B R O U T I N E =======================================
DOSCODE:8B9F
DOSCODE:8B9F
DOSCODE:8B9F GetPathNoSet    proc near               ; ...
DOSCODE:8B9F
DOSCODE:8B9F ; FUNCTION CHUNK AT DOSCODE:8C9D SIZE 000001B6 BYTES
DOSCODE:8B9F
DOSCODE:8B9F                 call    set_exerr_locus_disk
DOSCODE:8BA2                 mov     word ptr ds:CURBUF, 0FFFFh
DOSCODE:8BA8                 mov     di, ds:WFP_START
DOSCODE:8BAC                 cmp     word ptr [di+1], 5C3Ah ; ':\'
DOSCODE:8BB1                 jz      short loc_8BEA
DOSCODE:8BB3                 add     di, 3
DOSCODE:8BB6                 mov     si, di
DOSCODE:8BB8                 call    sub_8C72
DOSCODE:8BBB                 jb      short loc_8BE8
DOSCODE:8BBD
DOSCODE:8BBD loc_8BBD:                               ; ...
DOSCODE:8BBD                 mov     al, ds:SATTRIB
DOSCODE:8BC0                 mov     ds:ATTRIB, al
DOSCODE:8BC3                 call    set_exerr_locus_unk
DOSCODE:8BC6                 push    ss
DOSCODE:8BC7                 pop     es
DOSCODE:8BC8                 mov     si, offset NAME1
DOSCODE:8BCB                 mov     di, ds:WFP_START
DOSCODE:8BCF                 mov     dx, di
DOSCODE:8BD1                 mov     cx, 8
DOSCODE:8BD4
DOSCODE:8BD4 loc_8BD4:                               ; ...
DOSCODE:8BD4                 lodsb
DOSCODE:8BD5                 stosb
DOSCODE:8BD6                 cmp     al, 20h ; ' '
DOSCODE:8BD8                 jz      short loc_8BDC
DOSCODE:8BDA                 mov     dx, di
DOSCODE:8BDC
DOSCODE:8BDC loc_8BDC:                               ; ...
DOSCODE:8BDC                 loop    loc_8BD4
DOSCODE:8BDE                 mov     di, dx
DOSCODE:8BE0                 mov     [di], cl
DOSCODE:8BE2                 call    sub_8ED3
DOSCODE:8BE5                 inc     al
DOSCODE:8BE7                 retn
DOSCODE:8BE8 ; ---------------------------------------------------------------------------
DOSCODE:8BE8
DOSCODE:8BE8 loc_8BE8:                               ; ...
DOSCODE:8BE8                 jmp     short loc_8BE8
DOSCODE:8BEA ; ---------------------------------------------------------------------------
DOSCODE:8BEA
DOSCODE:8BEA loc_8BEA:                               ; ...
DOSCODE:8BEA                 mov     ds:ATTRIB, 16h
DOSCODE:8BEF                 les     di, ds:THISCDS
DOSCODE:8BF3                 mov     ax, 0FFFFh
DOSCODE:8BF6                 mov     bx, es:[di+4Bh]
DOSCODE:8BFA                 mov     ds:ROOTCLUST_HW, bx
DOSCODE:8BFE                 mov     bx, es:[di+49h]
DOSCODE:8C02                 mov     si, ds:CURR_DIR_END
DOSCODE:8C06                 cmp     si, ax
DOSCODE:8C08                 jz      short loc_8C58
DOSCODE:8C0A                 cmp     ds:ROOTCLUST_HW, ax
DOSCODE:8C0E                 jnz     short loc_8C12
DOSCODE:8C10                 cmp     bx, ax
DOSCODE:8C12
DOSCODE:8C12 loc_8C12:                               ; ...
DOSCODE:8C12                 jz      short loc_8C58
DOSCODE:8C14                 test    ds:FastOpenFlg, 1
DOSCODE:8C19                 jz      short loc_8C65
DOSCODE:8C1B                 push    es
DOSCODE:8C1C                 push    di
DOSCODE:8C1D                 push    cx
DOSCODE:8C1E                 push    word ptr [si-1]
DOSCODE:8C21                 push    si
DOSCODE:8C22                 push    bx
DOSCODE:8C23                 push    ds:ROOTCLUST_HW
DOSCODE:8C27                 mov     byte ptr [si-1], 0
DOSCODE:8C2B                 mov     si, ds:WFP_START
DOSCODE:8C2F                 mov     bx, offset FastOpenTable
DOSCODE:8C32                 mov     di, 0D7Ch
DOSCODE:8C35                 mov     cx, 1147h
DOSCODE:8C38                 mov     al, 1
DOSCODE:8C3A                 push    ds
DOSCODE:8C3B                 pop     es
DOSCODE:8C3C                 call    dword ptr [bx+2]
DOSCODE:8C3F                 jb      short loc_8C49
DOSCODE:8C41                 cmp     byte ptr [si], 0
DOSCODE:8C44                 jz      short loc_8C4A
DOSCODE:8C46                 stc
DOSCODE:8C47                 jmp     short loc_8C4A
DOSCODE:8C49 ; ---------------------------------------------------------------------------
DOSCODE:8C49
DOSCODE:8C49 loc_8C49:                               ; ...
DOSCODE:8C49                 clc
DOSCODE:8C4A
DOSCODE:8C4A loc_8C4A:                               ; ...
DOSCODE:8C4A                 pop     ds:ROOTCLUST_HW
DOSCODE:8C4E                 pop     bx
DOSCODE:8C4F                 pop     si
DOSCODE:8C50                 pop     word ptr [si-1]
DOSCODE:8C53                 pop     cx
DOSCODE:8C54                 pop     di
DOSCODE:8C55                 pop     es
DOSCODE:8C56                 jnb     short loc_8C65
DOSCODE:8C58
DOSCODE:8C58 loc_8C58:                               ; ...
DOSCODE:8C58                 mov     si, ds:WFP_START
DOSCODE:8C5C                 add     si, 3
DOSCODE:8C5F                 les     bp, ds:THISDPB
DOSCODE:8C63                 jmp     short loc_8C9D
DOSCODE:8C65 ; ---------------------------------------------------------------------------
DOSCODE:8C65
DOSCODE:8C65 loc_8C65:                               ; ...
DOSCODE:8C65                 les     bp, ds:THISDPB
DOSCODE:8C69                 call    SETDIRSRCH
DOSCODE:8C6C                 jnb     short loc_8CAE
DOSCODE:8C6E                 xor     cl, cl
DOSCODE:8C70                 stc
DOSCODE:8C71                 retn
DOSCODE:8C71 GetPathNoSet    endp
DOSCODE:8C71
DOSCODE:8C72
DOSCODE:8C72 ; =============== S U B R O U T I N E =======================================
DOSCODE:8C72
DOSCODE:8C72
DOSCODE:8C72 sub_8C72        proc near               ; ...
DOSCODE:8C72                 mov     si, di
DOSCODE:8C74                 push    ss
DOSCODE:8C75                 pop     es
DOSCODE:8C76                 mov     di, offset NAME1
DOSCODE:8C79                 mov     cx, 9
DOSCODE:8C7C
DOSCODE:8C7C loc_8C7C:                               ; ...
DOSCODE:8C7C                 call    sub_9EE4
DOSCODE:8C7F                 cmp     al, 2Eh ; '.'
DOSCODE:8C81                 jz      short loc_8C91
DOSCODE:8C83                 call    PATHCHRCMP
DOSCODE:8C86                 jz      short loc_8C8F
DOSCODE:8C88                 or      al, al
DOSCODE:8C8A                 jz      short loc_8C91
DOSCODE:8C8C                 stosb
DOSCODE:8C8D                 loop    loc_8C7C
DOSCODE:8C8F
DOSCODE:8C8F loc_8C8F:                               ; ...
DOSCODE:8C8F                 stc
DOSCODE:8C90                 retn
DOSCODE:8C91 ; ---------------------------------------------------------------------------
DOSCODE:8C91
DOSCODE:8C91 loc_8C91:                               ; ...
DOSCODE:8C91                 inc     cx
DOSCODE:8C92                 inc     cx
DOSCODE:8C93                 mov     al, 20h ; ' '
DOSCODE:8C95                 rep stosb
DOSCODE:8C97                 push    ss
DOSCODE:8C98                 pop     ds
DOSCODE:8C99                 call    DEVNAME
DOSCODE:8C9C                 retn
DOSCODE:8C9C sub_8C72        endp
DOSCODE:8C9C
DOSCODE:8C9D ; ---------------------------------------------------------------------------
DOSCODE:8C9D ; START OF FUNCTION CHUNK FOR GetPathNoSet
DOSCODE:8C9D
DOSCODE:8C9D loc_8C9D:                               ; ...
DOSCODE:8C9D                 call    SETROOTSRCH
DOSCODE:8CA0                 cmp     byte ptr [si], 0
DOSCODE:8CA3                 jnz     short loc_8CAE
DOSCODE:8CA5                 mov     al, ds:SATTRIB
DOSCODE:8CA8                 mov     ds:ATTRIB, al
DOSCODE:8CAB                 xor     ah, ah
DOSCODE:8CAD                 retn
DOSCODE:8CAE ; ---------------------------------------------------------------------------
DOSCODE:8CAE
DOSCODE:8CAE loc_8CAE:                               ; ...
DOSCODE:8CAE                 push    es
DOSCODE:8CAF                 push    si
DOSCODE:8CB0                 mov     di, si
DOSCODE:8CB2                 mov     cx, ds:DIRSTART
DOSCODE:8CB6                 cmp     ds:CURR_DIR_END, 0FFFFh
DOSCODE:8CBB                 jz      short loc_8CD2
DOSCODE:8CBD                 cmp     di, ds:CURR_DIR_END
DOSCODE:8CC1                 jnz     short loc_8CD2
DOSCODE:8CC3                 les     di, ds:THISCDS
DOSCODE:8CC7                 mov     ax, ds:DIRSTART_HW
DOSCODE:8CCA                 mov     es:[di+4Bh], ax
DOSCODE:8CCE                 mov     es:[di+49h], cx
DOSCODE:8CD2
DOSCODE:8CD2 loc_8CD2:                               ; ...
DOSCODE:8CD2                 push    ss
DOSCODE:8CD3                 pop     es
DOSCODE:8CD4                 mov     di, offset NAME1
DOSCODE:8CD7                 mov     ax, 2020h
DOSCODE:8CDA                 stosb
DOSCODE:8CDB                 stosw
DOSCODE:8CDC                 stosw
DOSCODE:8CDD                 stosw
DOSCODE:8CDE                 stosw
DOSCODE:8CDF                 stosw
DOSCODE:8CE0                 mov     di, offset NAME1
DOSCODE:8CE3                 xor     ah, ah
DOSCODE:8CE5
DOSCODE:8CE5 loc_8CE5:                               ; ...
DOSCODE:8CE5                 inc     cl
DOSCODE:8CE7                 lodsb
DOSCODE:8CE8                 cmp     al, 2Eh ; '.'
DOSCODE:8CEA                 jz      short loc_8CFE
DOSCODE:8CEC                 or      al, al
DOSCODE:8CEE                 jz      short loc_8D17
DOSCODE:8CF0                 cmp     al, 5Ch ; '\'
DOSCODE:8CF2                 jz      short loc_8D17
DOSCODE:8CF4                 cmp     al, 3Fh ; '?'
DOSCODE:8CF6                 jnz     short loc_8CFB
DOSCODE:8CF8                 or      ah, 1
DOSCODE:8CFB
DOSCODE:8CFB loc_8CFB:                               ; ...
DOSCODE:8CFB                 stosb
DOSCODE:8CFC                 jmp     short loc_8CE5
DOSCODE:8CFE ; ---------------------------------------------------------------------------
DOSCODE:8CFE
DOSCODE:8CFE loc_8CFE:                               ; ...
DOSCODE:8CFE                 mov     di, (offset NAME1+8)
DOSCODE:8D01
DOSCODE:8D01 loc_8D01:                               ; ...
DOSCODE:8D01                 lodsb
DOSCODE:8D02                 or      al, al
DOSCODE:8D04                 jz      short loc_8D17
DOSCODE:8D06                 cmp     al, 5Ch ; '\'
DOSCODE:8D08                 jz      short loc_8D17
DOSCODE:8D0A                 cmp     al, 3Fh ; '?'
DOSCODE:8D0C                 jnz     short loc_8D11
DOSCODE:8D0E                 or      ah, 1
DOSCODE:8D11
DOSCODE:8D11 loc_8D11:                               ; ...
DOSCODE:8D11                 stosb
DOSCODE:8D12                 jmp     short loc_8D01
DOSCODE:8D14 ; ---------------------------------------------------------------------------
DOSCODE:8D14
DOSCODE:8D14 loc_8D14:                               ; ...
DOSCODE:8D14                 jmp     loc_8E1B
DOSCODE:8D17 ; ---------------------------------------------------------------------------
DOSCODE:8D17
DOSCODE:8D17 loc_8D17:                               ; ...
DOSCODE:8D17                 dec     si
DOSCODE:8D18                 mov     cl, ah
DOSCODE:8D1A                 or      cl, 80h
DOSCODE:8D1D                 pop     di
DOSCODE:8D1E                 pop     es
DOSCODE:8D1F                 cmp     si, di
DOSCODE:8D21                 jz      short loc_8D14
DOSCODE:8D23                 push    si
DOSCODE:8D24                 mov     al, [si]
DOSCODE:8D26                 or      al, al
DOSCODE:8D28                 jnz     short loc_8D32
DOSCODE:8D2A                 mov     bh, ds:SATTRIB
DOSCODE:8D2E                 mov     ds:ATTRIB, bh
DOSCODE:8D32
DOSCODE:8D32 loc_8D32:                               ; ...
DOSCODE:8D32                 push    es
DOSCODE:8D33                 push    ss
DOSCODE:8D34                 pop     es
DOSCODE:8D35                 call    DEVNAME
DOSCODE:8D38                 pop     es
DOSCODE:8D39                 jb      short loc_8D46
DOSCODE:8D3B                 or      al, al
DOSCODE:8D3D                 jnz     short loc_8D6C
DOSCODE:8D3F                 pop     si
DOSCODE:8D40                 jmp     loc_8BBD
DOSCODE:8D43 ; ---------------------------------------------------------------------------
DOSCODE:8D43
DOSCODE:8D43 loc_8D43:                               ; ...
DOSCODE:8D43                 jmp     loc_8E44
DOSCODE:8D46 ; ---------------------------------------------------------------------------
DOSCODE:8D46
DOSCODE:8D46 loc_8D46:                               ; ...
DOSCODE:8D46                 cmp     ds:NAME1, 0E5h
DOSCODE:8D4B                 jnz     short loc_8D52
DOSCODE:8D4D                 mov     ds:NAME1, 5
DOSCODE:8D52
DOSCODE:8D52 loc_8D52:                               ; ...
DOSCODE:8D52                 push    di
DOSCODE:8D53                 push    es
DOSCODE:8D54                 push    cx
DOSCODE:8D55                 call    sub_9015
DOSCODE:8D58                 jnb     short loc_8D5D
DOSCODE:8D5A                 call    FINDENTRY
DOSCODE:8D5D
DOSCODE:8D5D loc_8D5D:                               ; ...
DOSCODE:8D5D                 pop     cx
DOSCODE:8D5E                 pop     es
DOSCODE:8D5F                 pop     di
DOSCODE:8D60                 jb      short loc_8D43
DOSCODE:8D62                 lds     di, ds:CURBUF
DOSCODE:8D66                 test    byte ptr [bx+0Bh], 10h
DOSCODE:8D6A                 jnz     short loc_8D6F
DOSCODE:8D6C
DOSCODE:8D6C loc_8D6C:                               ; ...
DOSCODE:8D6C                 jmp     loc_8E1F
DOSCODE:8D6F ; ---------------------------------------------------------------------------
DOSCODE:8D6F
DOSCODE:8D6F loc_8D6F:                               ; ...
DOSCODE:8D6F                 cmp     ss:NoSetDir, 0
DOSCODE:8D75                 jz      short loc_8D9D
DOSCODE:8D77                 mov     dx, di
DOSCODE:8D79                 mov     cx, ds
DOSCODE:8D7B                 push    ss
DOSCODE:8D7C                 pop     ds
DOSCODE:8D7D                 pop     di
DOSCODE:8D7E                 test    ds:FastOpenFlg, 1
DOSCODE:8D83                 jz      short loc_8D90
DOSCODE:8D85                 test    ds:FastOpenFlg, 2
DOSCODE:8D8A                 jz      short loc_8D90
DOSCODE:8D8C                 mov     di, ds:0D9Ch
DOSCODE:8D90
DOSCODE:8D90 loc_8D90:                               ; ...
DOSCODE:8D90                 cmp     byte ptr [di], 0
DOSCODE:8D93                 jnz     short loc_8D98
DOSCODE:8D95                 jmp     locret_8E3F
DOSCODE:8D98 ; ---------------------------------------------------------------------------
DOSCODE:8D98
DOSCODE:8D98 loc_8D98:                               ; ...
DOSCODE:8D98                 push    di
DOSCODE:8D99                 mov     di, dx
DOSCODE:8D9B                 mov     ds, cx
DOSCODE:8D9D
DOSCODE:8D9D loc_8D9D:                               ; ...
DOSCODE:8D9D                 xor     dx, dx
DOSCODE:8D9F                 cmp     es:[bp+0Fh], dx
DOSCODE:8DA3                 jnz     short loc_8DA8
DOSCODE:8DA5                 mov     dx, [si-6]
DOSCODE:8DA8
DOSCODE:8DA8 loc_8DA8:                               ; ...
DOSCODE:8DA8                 mov     ss:ROOTCLUST_HW, dx
DOSCODE:8DAD                 mov     dx, [si]
DOSCODE:8DAF                 push    ds
DOSCODE:8DB0                 push    ss
DOSCODE:8DB1                 pop     ds
DOSCODE:8DB2                 test    ds:FastOpenFlg, 2
DOSCODE:8DB7                 jz      short loc_8DC9
DOSCODE:8DB9                 mov     bx, dx
DOSCODE:8DBB                 mov     di, ds:CLUSNUM
DOSCODE:8DBF                 push    ax
DOSCODE:8DC0                 call    SETDIRSRCH
DOSCODE:8DC3                 pop     ax
DOSCODE:8DC4                 add     sp, 2
DOSCODE:8DC7                 jmp     short loc_8E05
DOSCODE:8DC9 ; ---------------------------------------------------------------------------
DOSCODE:8DC9
DOSCODE:8DC9 loc_8DC9:                               ; ...
DOSCODE:8DC9                 pop     ds
DOSCODE:8DCA                 sub     bx, di
DOSCODE:8DCC                 sub     si, di
DOSCODE:8DCE                 push    bx
DOSCODE:8DCF                 push    ax
DOSCODE:8DD0                 push    si
DOSCODE:8DD1                 push    cx
DOSCODE:8DD2                 lds     bx, [di+6]
DOSCODE:8DD5                 push    bx
DOSCODE:8DD6                 push    ds
DOSCODE:8DD7                 mov     bx, dx
DOSCODE:8DD9                 push    ss
DOSCODE:8DDA                 pop     ds
DOSCODE:8DDB                 call    SETDIRSRCH
DOSCODE:8DDE                 pop     ds:HIGH_SECTOR
DOSCODE:8DE2                 pop     dx
DOSCODE:8DE3                 jb      short loc_8DEF
DOSCODE:8DE5                 mov     ds:ALLOWED, 18h
DOSCODE:8DEA                 xor     al, al
DOSCODE:8DEC                 call    GETBUFFR
DOSCODE:8DEF
DOSCODE:8DEF loc_8DEF:                               ; ...
DOSCODE:8DEF                 pop     cx
DOSCODE:8DF0                 pop     si
DOSCODE:8DF1                 pop     ax
DOSCODE:8DF2                 pop     bx
DOSCODE:8DF3                 jnb     short loc_8DFA
DOSCODE:8DF5                 pop     di
DOSCODE:8DF6                 mov     si, di
DOSCODE:8DF8                 jmp     short loc_8E1B
DOSCODE:8DFA ; ---------------------------------------------------------------------------
DOSCODE:8DFA
DOSCODE:8DFA loc_8DFA:                               ; ...
DOSCODE:8DFA                 call    sub_7F9D
DOSCODE:8DFD                 mov     di, word ptr ds:CURBUF
DOSCODE:8E01                 add     si, di
DOSCODE:8E03                 add     bx, di
DOSCODE:8E05
DOSCODE:8E05 loc_8E05:                               ; ...
DOSCODE:8E05                 pop     di
DOSCODE:8E06                 call    sub_90DB
DOSCODE:8E09                 mov     al, [di]
DOSCODE:8E0B                 or      al, al
DOSCODE:8E0D                 jz      short locret_8E3F
DOSCODE:8E0F                 inc     di
DOSCODE:8E10                 mov     si, di
DOSCODE:8E12                 call    PATHCHRCMP
DOSCODE:8E15                 jnz     short loc_8E1A
DOSCODE:8E17                 jmp     loc_8CAE
DOSCODE:8E1A ; ---------------------------------------------------------------------------
DOSCODE:8E1A
DOSCODE:8E1A loc_8E1A:                               ; ...
DOSCODE:8E1A                 dec     si
DOSCODE:8E1B
DOSCODE:8E1B loc_8E1B:                               ; ...
DOSCODE:8E1B                 xor     cl, cl
DOSCODE:8E1D                 jmp     short loc_8E4B
DOSCODE:8E1F ; ---------------------------------------------------------------------------
DOSCODE:8E1F
DOSCODE:8E1F loc_8E1F:                               ; ...
DOSCODE:8E1F                 pop     di
DOSCODE:8E20                 push    ss
DOSCODE:8E21                 pop     ds
DOSCODE:8E22                 test    ds:FastOpenFlg, 1
DOSCODE:8E27                 jz      short loc_8E34
DOSCODE:8E29                 test    ds:FastOpenFlg, 2
DOSCODE:8E2E                 jz      short loc_8E34
DOSCODE:8E30                 mov     di, ds:0D9Ch
DOSCODE:8E34
DOSCODE:8E34 loc_8E34:                               ; ...
DOSCODE:8E34                 mov     al, [di]
DOSCODE:8E36                 or      al, al
DOSCODE:8E38                 jnz     short loc_8E40
DOSCODE:8E3A                 call    sub_90DB
DOSCODE:8E3D                 inc     al
DOSCODE:8E3F
DOSCODE:8E3F locret_8E3F:                            ; ...
DOSCODE:8E3F                 retn
DOSCODE:8E40 ; ---------------------------------------------------------------------------
DOSCODE:8E40
DOSCODE:8E40 loc_8E40:                               ; ...
DOSCODE:8E40                 mov     si, di
DOSCODE:8E42                 jmp     short loc_8E4B
DOSCODE:8E44 ; ---------------------------------------------------------------------------
DOSCODE:8E44
DOSCODE:8E44 loc_8E44:                               ; ...
DOSCODE:8E44                 pop     si
DOSCODE:8E45                 mov     al, [si]
DOSCODE:8E47                 mov     si, di
DOSCODE:8E49                 or      al, al
DOSCODE:8E4B
DOSCODE:8E4B loc_8E4B:                               ; ...
DOSCODE:8E4B                 mov     al, ds:SATTRIB
DOSCODE:8E4E                 mov     ds:ATTRIB, al
DOSCODE:8E51                 stc
DOSCODE:8E52                 retn
DOSCODE:8E52 ; END OF FUNCTION CHUNK FOR GetPathNoSet
DOSCODE:8E53
DOSCODE:8E53 ; =============== S U B R O U T I N E =======================================
DOSCODE:8E53
DOSCODE:8E53
DOSCODE:8E53 STARTSRCH       proc near               ; ...
DOSCODE:8E53                 les     bp, ds:THISDPB
DOSCODE:8E57                 xor     ax, ax
DOSCODE:8E59                 mov     ds:LASTENT, ax
DOSCODE:8E5C                 mov     ds:VOLID, al
DOSCODE:8E5F                 dec     ax
DOSCODE:8E60                 mov     ds:ENTFREE, ax
DOSCODE:8E63                 mov     ds:ENTLAST, ax
DOSCODE:8E66                 retn
DOSCODE:8E66 STARTSRCH       endp
DOSCODE:8E66
DOSCODE:8E67
DOSCODE:8E67 ; =============== S U B R O U T I N E =======================================
DOSCODE:8E67
DOSCODE:8E67
DOSCODE:8E67 MatchAttributes proc near               ; ...
DOSCODE:8E67                 push    ax
DOSCODE:8E68                 mov     al, ss:ATTRIB
DOSCODE:8E6C                 not     al
DOSCODE:8E6E                 and     al, ch
DOSCODE:8E70                 and     al, 16h
DOSCODE:8E72                 pop     ax
DOSCODE:8E73                 retn
DOSCODE:8E73 MatchAttributes endp
DOSCODE:8E73
DOSCODE:8E74
DOSCODE:8E74 ; =============== S U B R O U T I N E =======================================
DOSCODE:8E74
DOSCODE:8E74
DOSCODE:8E74 DEVNAME         proc near               ; ...
DOSCODE:8E74                 push    si
DOSCODE:8E75                 push    di
DOSCODE:8E76                 push    cx
DOSCODE:8E77                 push    ax
DOSCODE:8E78                 push    word ptr ds:NAME1
DOSCODE:8E7C                 cmp     ds:NAME1, 5
DOSCODE:8E81                 jnz     short loc_8E88
DOSCODE:8E83                 mov     ds:NAME1, 0E5h
DOSCODE:8E88
DOSCODE:8E88 loc_8E88:                               ; ...
DOSCODE:8E88                 test    ds:ATTRIB, 8
DOSCODE:8E8D                 jnz     short loc_8EB0
DOSCODE:8E8F                 mov     si, offset NULDEV
DOSCODE:8E92
DOSCODE:8E92 loc_8E92:                               ; ...
DOSCODE:8E92                 test    word ptr [si+4], 8000h
DOSCODE:8E97                 jz      short loc_8EA9
DOSCODE:8E99                 mov     ax, si
DOSCODE:8E9B                 add     si, 10
DOSCODE:8E9E                 mov     di, offset NAME1
DOSCODE:8EA1                 mov     cx, 4
DOSCODE:8EA4                 repe cmpsw
DOSCODE:8EA6                 xchg    ax, si
DOSCODE:8EA7                 jz      short loc_8EBE
DOSCODE:8EA9
DOSCODE:8EA9 loc_8EA9:                               ; ...
DOSCODE:8EA9                 lds     si, [si]
DOSCODE:8EAB                 cmp     si, 0FFFFh
DOSCODE:8EAE                 jnz     short loc_8E92
DOSCODE:8EB0
DOSCODE:8EB0 loc_8EB0:                               ; ...
DOSCODE:8EB0                 stc
DOSCODE:8EB1
DOSCODE:8EB1 loc_8EB1:                               ; ...
DOSCODE:8EB1                 mov     cx, ss
DOSCODE:8EB3                 mov     ds, cx
DOSCODE:8EB5                 pop     word ptr ds:NAME1
DOSCODE:8EB9                 pop     ax
DOSCODE:8EBA                 pop     cx
DOSCODE:8EBB                 pop     di
DOSCODE:8EBC                 pop     si
DOSCODE:8EBD                 retn
DOSCODE:8EBE ; ---------------------------------------------------------------------------
DOSCODE:8EBE
DOSCODE:8EBE loc_8EBE:                               ; ...
DOSCODE:8EBE                 mov     word ptr ss:DEVPT+2, ds
DOSCODE:8EC3                 mov     bh, [si+4]
DOSCODE:8EC6                 or      bh, 0C0h
DOSCODE:8EC9                 and     bh, 0DFh
DOSCODE:8ECC                 mov     word ptr ss:DEVPT, si
DOSCODE:8ED1                 jmp     short loc_8EB1
DOSCODE:8ED1 DEVNAME         endp
DOSCODE:8ED1
DOSCODE:8ED3
DOSCODE:8ED3 ; =============== S U B R O U T I N E =======================================
DOSCODE:8ED3
DOSCODE:8ED3
DOSCODE:8ED3 sub_8ED3        proc near               ; ...
DOSCODE:8ED3                 mov     ax, 2020h
DOSCODE:8ED6                 mov     di, (offset NAME1+8)
DOSCODE:8ED9                 stosw
DOSCODE:8EDA                 stosb
DOSCODE:8EDB                 mov     al, 40h ; '@'
DOSCODE:8EDD                 stosb
DOSCODE:8EDE                 xor     ax, ax
DOSCODE:8EE0                 mov     cx, 0Ah
DOSCODE:8EE3                 rep stosw
DOSCODE:8EE5                 call    DATE16
DOSCODE:8EE8                 mov     di, 561h
DOSCODE:8EEB                 xchg    ax, dx
DOSCODE:8EEC                 stosw
DOSCODE:8EED                 xchg    ax, dx
DOSCODE:8EEE                 stosw
DOSCODE:8EEF                 mov     si, di
DOSCODE:8EF1                 mov     ax, word ptr ds:DEVPT
DOSCODE:8EF4                 stosw
DOSCODE:8EF5                 mov     ax, word ptr ds:DEVPT+2
DOSCODE:8EF8                 stosw
DOSCODE:8EF9                 mov     ah, bh
DOSCODE:8EFB                 mov     bx, offset NAME1
DOSCODE:8EFE                 xor     al, al
DOSCODE:8F00                 retn
DOSCODE:8F00 sub_8ED3        endp
DOSCODE:8F00
DOSCODE:8F01
DOSCODE:8F01 ; =============== S U B R O U T I N E =======================================
DOSCODE:8F01
DOSCODE:8F01 ; Attributes: bp-based frame
DOSCODE:8F01
DOSCODE:8F01 ValidateCDS     proc near               ; ...
DOSCODE:8F01
DOSCODE:8F01 var_6           = dword ptr -6
DOSCODE:8F01 var_2           = word ptr -2
DOSCODE:8F01
DOSCODE:8F01                 push    bp
DOSCODE:8F02                 mov     bp, sp
DOSCODE:8F04                 sub     sp, 6
DOSCODE:8F07                 mov     [bp+var_2], di
DOSCODE:8F0A                 lds     si, ss:THISCDS
DOSCODE:8F0F                 mov     word ptr [bp+var_6], si
DOSCODE:8F12                 mov     word ptr [bp+var_6+2], ds
DOSCODE:8F15                 call    ECritDisk
DOSCODE:8F18                 test    word ptr [si+43h], 8000h
DOSCODE:8F1D                 jz      short loc_8F22
DOSCODE:8F1F                 jmp     loc_8FC6
DOSCODE:8F22 ; ---------------------------------------------------------------------------
DOSCODE:8F22
DOSCODE:8F22 loc_8F22:                               ; ...
DOSCODE:8F22                 xor     dl, dl
DOSCODE:8F24                 xchg    dl, ss:34Ch
DOSCODE:8F29                 push    ss
DOSCODE:8F2A                 pop     es
DOSCODE:8F2B                 call    FStrCpy
DOSCODE:8F2E                 mov     si, [bp+var_2]
DOSCODE:8F31                 push    ss
DOSCODE:8F32                 pop     ds
DOSCODE:8F33                 call    Splice
DOSCODE:8F36                 push    ss
DOSCODE:8F37                 pop     ds
DOSCODE:8F38                 mov     ds:34Ch, dl
DOSCODE:8F3C                 les     di, ds:5A2h
DOSCODE:8F40                 push    bp
DOSCODE:8F41                 call    FATREAD_CDS
DOSCODE:8F44                 pop     bp
DOSCODE:8F45                 jb      short loc_8FC6
DOSCODE:8F47                 lds     si, ds:5A2h
DOSCODE:8F4B                 cmp     word ptr [si+4Bh], 0FFFFh
DOSCODE:8F4F                 jnz     short loc_8F55
DOSCODE:8F51                 cmp     word ptr [si+49h], 0FFFFh
DOSCODE:8F55
DOSCODE:8F55 loc_8F55:                               ; ...
DOSCODE:8F55                 jnz     short loc_8FB8
DOSCODE:8F57                 push    ss
DOSCODE:8F58                 pop     es
DOSCODE:8F59                 push    word ptr ss:5B2h
DOSCODE:8F5E                 cmp     si, word ptr [bp+var_6]
DOSCODE:8F61                 jnz     short loc_8F6E
DOSCODE:8F63                 mov     di, [bp+var_2]
DOSCODE:8F66                 mov     ss:5B2h, di
DOSCODE:8F6B                 call    FStrCpy
DOSCODE:8F6E
DOSCODE:8F6E loc_8F6E:                               ; ...
DOSCODE:8F6E                 push    ss
DOSCODE:8F6F                 pop     ds
DOSCODE:8F70                 push    word ptr ds:56Dh
DOSCODE:8F74                 push    bp
DOSCODE:8F75                 call    DOS_CHDIR
DOSCODE:8F78                 pop     bp
DOSCODE:8F79                 pop     bx
DOSCODE:8F7A                 pop     word ptr ds:5B2h
DOSCODE:8F7E                 mov     ds:56Dh, bl
DOSCODE:8F82                 mov     di, ds:0ADCh
DOSCODE:8F86                 lds     si, [bp+var_6]
DOSCODE:8F89                 jnb     short loc_8F9C
DOSCODE:8F8B                 mov     ss:5A2h, si
DOSCODE:8F90                 mov     word ptr ss:5A4h, ds
DOSCODE:8F95                 xor     cx, cx
DOSCODE:8F97                 xor     di, di
DOSCODE:8F99                 mov     [si+3], cl
DOSCODE:8F9C
DOSCODE:8F9C loc_8F9C:                               ; ...
DOSCODE:8F9C                 lds     si, ss:5A2h
DOSCODE:8FA1                 test    word ptr [si+43h], 2000h
DOSCODE:8FA6                 jz      short loc_8FAD
DOSCODE:8FA8                 mov     cx, 0FFFFh
DOSCODE:8FAB                 mov     di, cx
DOSCODE:8FAD
DOSCODE:8FAD loc_8FAD:                               ; ...
DOSCODE:8FAD                 mov     ss:0ADCh, di
DOSCODE:8FB2                 mov     [si+4Bh], di
DOSCODE:8FB5                 mov     [si+49h], cx
DOSCODE:8FB8
DOSCODE:8FB8 loc_8FB8:                               ; ...
DOSCODE:8FB8                 les     di, [bp+var_6]
DOSCODE:8FBB                 mov     ss:5A2h, di
DOSCODE:8FC0                 mov     word ptr ss:5A4h, es
DOSCODE:8FC5                 clc
DOSCODE:8FC6
DOSCODE:8FC6 loc_8FC6:                               ; ...
DOSCODE:8FC6                 call    LCritDisk
DOSCODE:8FC9                 les     di, [bp+var_6]
DOSCODE:8FCC                 mov     sp, bp
DOSCODE:8FCE                 pop     bp
DOSCODE:8FCF                 retn
DOSCODE:8FCF ValidateCDS     endp
DOSCODE:8FCF
DOSCODE:8FD0
DOSCODE:8FD0 ; =============== S U B R O U T I N E =======================================
DOSCODE:8FD0
DOSCODE:8FD0
DOSCODE:8FD0 sub_8FD0        proc near               ; ...
DOSCODE:8FD0                 push    di
DOSCODE:8FD1                 push    si
DOSCODE:8FD2                 mov     di, si
DOSCODE:8FD4                 mov     al, [si]
DOSCODE:8FD6                 call    PATHCHRCMP
DOSCODE:8FD9                 jnz     short loc_8FF2
DOSCODE:8FDB                 inc     si
DOSCODE:8FDC                 lodsw
DOSCODE:8FDD                 or      ax, 2020h
DOSCODE:8FE0                 cmp     ax, 6564h
DOSCODE:8FE3                 jnz     short loc_9012
DOSCODE:8FE5                 lodsb
DOSCODE:8FE6                 or      al, 20h
DOSCODE:8FE8                 cmp     al, 76h ; 'v'
DOSCODE:8FEA                 jnz     short loc_9012
DOSCODE:8FEC                 lodsb
DOSCODE:8FED                 call    PATHCHRCMP
DOSCODE:8FF0                 jnz     short loc_9012
DOSCODE:8FF2
DOSCODE:8FF2 loc_8FF2:                               ; ...
DOSCODE:8FF2                 push    ds
DOSCODE:8FF3                 push    si
DOSCODE:8FF4                 call    NameTrans
DOSCODE:8FF7                 cmp     byte ptr [si], 0
DOSCODE:8FFA                 stc
DOSCODE:8FFB                 jnz     short loc_9008
DOSCODE:8FFD                 push    ss
DOSCODE:8FFE                 pop     ds
DOSCODE:8FFF                 mov     al, ds:56Dh
DOSCODE:9002                 mov     ds:56Bh, al
DOSCODE:9005                 call    DEVNAME
DOSCODE:9008
DOSCODE:9008 loc_9008:                               ; ...
DOSCODE:9008                 pop     si
DOSCODE:9009                 pop     ds
DOSCODE:900A
DOSCODE:900A loc_900A:                               ; ...
DOSCODE:900A                 pop     di
DOSCODE:900B                 jnb     short loc_900F
DOSCODE:900D                 mov     si, di
DOSCODE:900F
DOSCODE:900F loc_900F:                               ; ...
DOSCODE:900F                 pop     di
DOSCODE:9010                 cmc
DOSCODE:9011                 retn
DOSCODE:9012 ; ---------------------------------------------------------------------------
DOSCODE:9012
DOSCODE:9012 loc_9012:                               ; ...
DOSCODE:9012                 stc
DOSCODE:9013                 jmp     short loc_900A
DOSCODE:9013 sub_8FD0        endp
DOSCODE:9013
DOSCODE:9015
DOSCODE:9015 ; =============== S U B R O U T I N E =======================================
DOSCODE:9015
DOSCODE:9015
DOSCODE:9015 sub_9015        proc near               ; ...
DOSCODE:9015                 test    byte ptr ss:1146h, 1
DOSCODE:901B                 jnz     short loc_9020
DOSCODE:901D
DOSCODE:901D loc_901D:                               ; ...
DOSCODE:901D                 jmp     loc_90D9
DOSCODE:9020 ; ---------------------------------------------------------------------------
DOSCODE:9020
DOSCODE:9020 loc_9020:                               ; ...
DOSCODE:9020                 test    byte ptr ss:1146h, 8
DOSCODE:9026                 jnz     short loc_901D
DOSCODE:9028                 mov     bx, 113Ch
DOSCODE:902B                 mov     si, ss:5B2h
DOSCODE:9030                 mov     di, 0D7Ch
DOSCODE:9033                 mov     cx, 1147h
DOSCODE:9036                 mov     al, 1
DOSCODE:9038                 push    ds
DOSCODE:9039                 pop     es
DOSCODE:903A                 call    dword ptr [bx+2]
DOSCODE:903D                 jnb     short loc_9042
DOSCODE:903F                 jmp     loc_90C8
DOSCODE:9042 ; ---------------------------------------------------------------------------
DOSCODE:9042
DOSCODE:9042 loc_9042:                               ; ...
DOSCODE:9042                 lea     bx, [si-2]
DOSCODE:9045                 cmp     bx, ss:5B2h
DOSCODE:904A                 jz      short loc_90C8
DOSCODE:904C                 cmp     byte ptr [si], 0
DOSCODE:904F                 jnz     short loc_9083
DOSCODE:9051                 push    cx
DOSCODE:9052                 mov     cl, ss:56Bh
DOSCODE:9057                 mov     ch, ss:56Dh
DOSCODE:905C                 mov     ss:56Bh, ch
DOSCODE:9061                 mov     ch, es:[di+0Bh]
DOSCODE:9065                 call    MatchAttributes
DOSCODE:9068                 pop     cx
DOSCODE:9069                 jnz     short loc_90D9
DOSCODE:906B                 cmp     byte ptr ss:34Ch, 0
DOSCODE:9071                 jz      short loc_9083
DOSCODE:9073                 cmp     byte ptr [si], 0
DOSCODE:9076                 jnz     short loc_9083
DOSCODE:9078                 test    byte ptr es:[di+0Bh], 10h
DOSCODE:907D                 jz      short loc_9083
DOSCODE:907F                 mov     bx, cx
DOSCODE:9081                 jmp     short loc_909A
DOSCODE:9083 ; ---------------------------------------------------------------------------
DOSCODE:9083
DOSCODE:9083 loc_9083:                               ; ...
DOSCODE:9083                 mov     bx, cx
DOSCODE:9085                 mov     ax, [bx+0Bh]
DOSCODE:9088                 mov     ss:5C2h, ax
DOSCODE:908C                 mov     ax, [bx+7]
DOSCODE:908F                 mov     ss:0ADEh, ax
DOSCODE:9093                 mov     ax, [bx+5]
DOSCODE:9096                 mov     ss:5BCh, ax
DOSCODE:909A
DOSCODE:909A loc_909A:                               ; ...
DOSCODE:909A                 mov     ss:0D9Ch, si
DOSCODE:909F                 mov     ax, [bx+9]
DOSCODE:90A2                 mov     ss:348h, ax
DOSCODE:90A6                 push    es
DOSCODE:90A7                 les     bx, ss:58Ah
DOSCODE:90AC                 mov     ah, es:[bx]
DOSCODE:90AF                 pop     es
DOSCODE:90B0                 mov     word ptr ss:5E2h, 0
DOSCODE:90B7                 mov     word ptr ss:5E4h, es
DOSCODE:90BC                 mov     bx, di
DOSCODE:90BE                 lea     si, [di+1Ah]
DOSCODE:90C1                 or      byte ptr ss:1146h, 12h
DOSCODE:90C7                 retn
DOSCODE:90C8 ; ---------------------------------------------------------------------------
DOSCODE:90C8
DOSCODE:90C8 loc_90C8:                               ; ...
DOSCODE:90C8                 cmp     ax, 0FFFFh
DOSCODE:90CB                 jnz     short loc_90D3
DOSCODE:90CD                 mov     byte ptr ss:1146h, 0
DOSCODE:90D3
DOSCODE:90D3 loc_90D3:                               ; ...
DOSCODE:90D3                 and     byte ptr ss:1146h, 0FBh
DOSCODE:90D9
DOSCODE:90D9 loc_90D9:                               ; ...
DOSCODE:90D9                 stc
DOSCODE:90DA                 retn
DOSCODE:90DA sub_9015        endp
DOSCODE:90DA
DOSCODE:90DB
DOSCODE:90DB ; =============== S U B R O U T I N E =======================================
DOSCODE:90DB
DOSCODE:90DB
DOSCODE:90DB sub_90DB        proc near               ; ...
DOSCODE:90DB                 pushf
DOSCODE:90DC                 test    byte ptr ss:1146h, 1
DOSCODE:90E2                 jz      short loc_9161
DOSCODE:90E4                 test    byte ptr ss:1146h, 2
DOSCODE:90EA                 jz      short loc_90F9
DOSCODE:90EC                 and     byte ptr ss:1146h, 0FDh
DOSCODE:90F2                 mov     di, ss:0D9Ch
DOSCODE:90F7                 jmp     short loc_915B
DOSCODE:90F9 ; ---------------------------------------------------------------------------
DOSCODE:90F9
DOSCODE:90F9 loc_90F9:                               ; ...
DOSCODE:90F9                 push    ds
DOSCODE:90FA                 push    es
DOSCODE:90FB                 push    bx
DOSCODE:90FC                 push    si
DOSCODE:90FD                 push    di
DOSCODE:90FE                 push    cx
DOSCODE:90FF                 push    ax
DOSCODE:9100                 lds     di, ss:5E2h
DOSCODE:9105                 mov     si, 1147h
DOSCODE:9108                 lds     ax, [di+6]
DOSCODE:910B                 mov     ss:[si+1], ax
DOSCODE:910F                 mov     word ptr ss:[si+3], ds
DOSCODE:9113                 push    ss
DOSCODE:9114                 pop     ds
DOSCODE:9115                 mov     ax, ds:0ADEh
DOSCODE:9118                 mov     [si+7], ax
DOSCODE:911B                 mov     ax, ds:5BCh
DOSCODE:911E                 mov     [si+5], ax
DOSCODE:9121                 mov     ax, ds:348h
DOSCODE:9124                 mov     [si+9], ax
DOSCODE:9127                 mov     ax, ds:5C2h
DOSCODE:912A                 mov     [si+0Bh], ax
DOSCODE:912D                 mov     ax, bx
DOSCODE:912F                 add     di, 18h
DOSCODE:9132                 sub     ax, di
DOSCODE:9134                 mov     cl, 20h ; ' '
DOSCODE:9136                 div     cl
DOSCODE:9138                 mov     [si], al
DOSCODE:913A                 push    ds
DOSCODE:913B                 pop     es
DOSCODE:913C                 mov     ds, word ptr ds:5E4h
DOSCODE:9140                 mov     di, bx
DOSCODE:9142                 cmp     word ptr [di+1Ah], 0
DOSCODE:9146                 jz      short loc_9154
DOSCODE:9148                 push    si
DOSCODE:9149                 pop     bx
DOSCODE:914A                 mov     al, 2
DOSCODE:914C                 mov     si, 113Ch
DOSCODE:914F                 call    dword ptr es:[si+2]
DOSCODE:9153                 clc
DOSCODE:9154
DOSCODE:9154 loc_9154:                               ; ...
DOSCODE:9154                 pop     ax
DOSCODE:9155                 pop     cx
DOSCODE:9156                 pop     di
DOSCODE:9157                 pop     si
DOSCODE:9158                 pop     bx
DOSCODE:9159                 pop     es
DOSCODE:915A                 pop     ds
DOSCODE:915B
DOSCODE:915B loc_915B:                               ; ...
DOSCODE:915B                 or      byte ptr ss:1146h, 8
DOSCODE:9161
DOSCODE:9161 loc_9161:                               ; ...
DOSCODE:9161                 popf
DOSCODE:9162                 retn
DOSCODE:9162 sub_90DB        endp
DOSCODE:9162
DOSCODE:9162 ; ---------------------------------------------------------------------------
DOSCODE:9163 LenTab          db 16h                  ; ...
DOSCODE:9164                 db  0Eh
DOSCODE:9165                 db  16h
DOSCODE:9166                 db  0Dh
DOSCODE:9167                 db  0Dh
DOSCODE:9168                 db  0Eh
DOSCODE:9169 CmdTab          dw 486h                 ; ...
DOSCODE:916B                 db  86h
DOSCODE:916C                 db    5
DOSCODE:916D                 db  87h
DOSCODE:916E                 db    8
DOSCODE:916F                 db  87h
DOSCODE:9170                 db  0Ah
DOSCODE:9171                 db  86h
DOSCODE:9172                 db    7
DOSCODE:9173                 db  86h
DOSCODE:9174                 db    5
DOSCODE:9175
DOSCODE:9175 ; =============== S U B R O U T I N E =======================================
DOSCODE:9175
DOSCODE:9175
DOSCODE:9175 IOFUNC          proc near               ; ...
DOSCODE:9175                 mov     word ptr ss:IOXAD+2, ss
DOSCODE:917A                 mov     word ptr ss:IOXAD, offset DEVIOBUF
DOSCODE:9181                 mov     ss:IOSCNT, 1
DOSCODE:9188                 mov     ss:DEVIOBUF, ax
DOSCODE:918C                 test    byte ptr [si+6], 80h
DOSCODE:9190                 jz      short loc_9195
DOSCODE:9192                 jmp     loc_923A
DOSCODE:9195 ; ---------------------------------------------------------------------------
DOSCODE:9195
DOSCODE:9195 loc_9195:                               ; ...
DOSCODE:9195                 test    byte ptr [si+5], 80h
DOSCODE:9199                 jnz     short loc_919E
DOSCODE:919B                 jmp     loc_923A
DOSCODE:919E ; ---------------------------------------------------------------------------
DOSCODE:919E
DOSCODE:919E loc_919E:                               ; ...
DOSCODE:919E                 push    es
DOSCODE:919F                 call    save_world
DOSCODE:91A2                 mov     dx, ds
DOSCODE:91A4                 mov     bx, ss
DOSCODE:91A6                 mov     ds, bx
DOSCODE:91A8                 mov     es, bx
DOSCODE:91AA                 xor     bx, bx
DOSCODE:91AC                 cmp     ah, 5
DOSCODE:91AF                 jnz     short loc_91B3
DOSCODE:91B1                 mov     bh, 4
DOSCODE:91B3
DOSCODE:91B3 loc_91B3:                               ; ...
DOSCODE:91B3                 mov     ds:IOCALL_REQSTAT, bx
DOSCODE:91B7                 xor     bx, bx
DOSCODE:91B9                 mov     ds:IOMED, bl
DOSCODE:91BD                 mov     bl, ah
DOSCODE:91BF                 mov     ah, cs:LenTab[bx]
DOSCODE:91C4                 add     bx, bx
DOSCODE:91C6                 mov     cx, cs:CmdTab[bx]
DOSCODE:91CB                 mov     bx, offset IOCALL
DOSCODE:91CE                 mov     ds:IOCALL, ah
DOSCODE:91D2                 mov     ds:IOCALL_REQFUNC, ch
DOSCODE:91D6                 mov     ds, dx
DOSCODE:91D8                 call    DEVIOCALL
DOSCODE:91DB                 mov     di, ss:IOCALL_REQSTAT
DOSCODE:91E0                 and     di, di
DOSCODE:91E2                 js      short loc_9219
DOSCODE:91E4
DOSCODE:91E4 loc_91E4:                               ; ...
DOSCODE:91E4                 mov     ax, ss
DOSCODE:91E6                 mov     ds, ax
DOSCODE:91E8                 cmp     ch, 5
DOSCODE:91EB                 jnz     short loc_91F3
DOSCODE:91ED                 mov     al, ds:IOMED
DOSCODE:91F0                 mov     byte ptr ds:DEVIOBUF, al
DOSCODE:91F3
DOSCODE:91F3 loc_91F3:                               ; ...
DOSCODE:91F3                 mov     ah, byte ptr ds:IOCALL_REQSTAT+1
DOSCODE:91F7                 not     ah
DOSCODE:91F9                 and     ah, 2
DOSCODE:91FC                 call    restore_world
DOSCODE:91FF                 pop     es
DOSCODE:9200                 pushf
DOSCODE:9201                 mov     al, ss:IoStatFail
DOSCODE:9205                 cbw
DOSCODE:9206                 inc     ax
DOSCODE:9207                 jnz     short loc_9213
DOSCODE:9209                 dec     ax
DOSCODE:920A                 jnz     short loc_9213
DOSCODE:920C                 inc     ss:IoStatFail
DOSCODE:9211                 popf
DOSCODE:9212                 retn
DOSCODE:9213 ; ---------------------------------------------------------------------------
DOSCODE:9213
DOSCODE:9213 loc_9213:                               ; ...
DOSCODE:9213                 mov     ax, ss:DEVIOBUF
DOSCODE:9217                 popf
DOSCODE:9218                 retn
DOSCODE:9219 ; ---------------------------------------------------------------------------
DOSCODE:9219
DOSCODE:9219 loc_9219:                               ; ...
DOSCODE:9219                 mov     ah, cl
DOSCODE:921B                 call    sub_A173
DOSCODE:921E                 cmp     al, 1
DOSCODE:9220                 jnz     short loc_9229
DOSCODE:9222                 call    restore_world
DOSCODE:9225                 pop     es
DOSCODE:9226                 jmp     IOFUNC
DOSCODE:9229 ; ---------------------------------------------------------------------------
DOSCODE:9229
DOSCODE:9229 loc_9229:                               ; ...
DOSCODE:9229                 and     byte ptr ss:IOCALL_REQSTAT+1, 0FDh
DOSCODE:922F                 cmp     al, 3
DOSCODE:9231                 jnz     short loc_9238
DOSCODE:9233                 dec     ss:IoStatFail
DOSCODE:9238
DOSCODE:9238 loc_9238:                               ; ...
DOSCODE:9238                 jmp     short loc_91E4
DOSCODE:923A ; ---------------------------------------------------------------------------
DOSCODE:923A
DOSCODE:923A loc_923A:                               ; ...
DOSCODE:923A                 or      ah, ah
DOSCODE:923C                 jz      short sub_9261
DOSCODE:923E                 dec     ah
DOSCODE:9240                 jz      short loc_9247
DOSCODE:9242                 dec     ah
DOSCODE:9244                 jz      short loc_9257
DOSCODE:9246                 retn
DOSCODE:9247 ; ---------------------------------------------------------------------------
DOSCODE:9247
DOSCODE:9247 loc_9247:                               ; ...
DOSCODE:9247                 push    word ptr [si+15h]
DOSCODE:924A                 push    word ptr [si+17h]
DOSCODE:924D                 call    sub_9261
DOSCODE:9250 ; ---------------------------------------------------------------------------
DOSCODE:9250                 pop     word ptr [si+17h]
DOSCODE:9253                 pop     word ptr [si+15h]
DOSCODE:9256                 retn
DOSCODE:9257 ; ---------------------------------------------------------------------------
DOSCODE:9257
DOSCODE:9257 loc_9257:                               ; ...
DOSCODE:9257                 call    sub_9281
DOSCODE:925A                 call    DOS_WRITE
DOSCODE:925D                 call    sub_92B5
DOSCODE:925D IOFUNC          endp
DOSCODE:925D
DOSCODE:9260 ; ---------------------------------------------------------------------------
DOSCODE:9260                 retn
DOSCODE:9261
DOSCODE:9261 ; =============== S U B R O U T I N E =======================================
DOSCODE:9261
DOSCODE:9261 ; Attributes: noreturn
DOSCODE:9261
DOSCODE:9261 sub_9261        proc near               ; ...
DOSCODE:9261                 call    sub_9281
DOSCODE:9264                 or      word ptr ss:611h, 40h
DOSCODE:926A                 call    DOS_READ
DOSCODE:926D                 and     word ptr ss:611h, 0FFBFh
DOSCODE:9273                 or      cx, cx
DOSCODE:9275                 call    sub_92B5
DOSCODE:9275 sub_9261        endp
DOSCODE:9275
DOSCODE:9275 ; ---------------------------------------------------------------------------
DOSCODE:9278                 db  36h ; 6
DOSCODE:9279                 db 0A0h
DOSCODE:927A                 db 0BCh
DOSCODE:927B                 db    3
DOSCODE:927C                 db  75h ; u
DOSCODE:927D                 db 0E2h
DOSCODE:927E                 db 0B0h
DOSCODE:927F                 db  1Ah
DOSCODE:9280                 db 0C3h
DOSCODE:9281
DOSCODE:9281 ; =============== S U B R O U T I N E =======================================
DOSCODE:9281
DOSCODE:9281
DOSCODE:9281 sub_9281        proc near               ; ...
DOSCODE:9281                 pop     word ptr ss:36Ch
DOSCODE:9286                 push    es
DOSCODE:9287                 call    save_world
DOSCODE:928A                 mov     word ptr ss:5A0h, ds
DOSCODE:928F                 lds     cx, ss:32Ch
DOSCODE:9294                 push    cx
DOSCODE:9295                 push    ds
DOSCODE:9296                 lds     cx, ss:38Ah
DOSCODE:929B                 mov     ss:32Ch, cx
DOSCODE:92A0                 mov     word ptr ss:32Eh, ds
DOSCODE:92A5                 mov     cx, ss
DOSCODE:92A7                 mov     ds, cx
DOSCODE:92A9                 mov     ds:59Eh, si
DOSCODE:92AD                 mov     cx, ds:38Eh
DOSCODE:92B1                 jmp     word ptr ds:36Ch
DOSCODE:92B1 sub_9281        endp
DOSCODE:92B1
DOSCODE:92B5
DOSCODE:92B5 ; =============== S U B R O U T I N E =======================================
DOSCODE:92B5
DOSCODE:92B5 ; Attributes: noreturn
DOSCODE:92B5
DOSCODE:92B5 sub_92B5        proc near               ; ...
DOSCODE:92B5                 pop     word ptr ds:36Ch
DOSCODE:92B9                 pop     word ptr ds:32Eh
DOSCODE:92BD                 pop     word ptr ds:32Ch
DOSCODE:92C1                 call    restore_world
DOSCODE:92C1 sub_92B5        endp ; sp-analysis failed
DOSCODE:92C1
DOSCODE:92C4                 pop     es
DOSCODE:92C5                 jmp     word ptr ss:36Ch
DOSCODE:92CA
DOSCODE:92CA ; =============== S U B R O U T I N E =======================================
DOSCODE:92CA
DOSCODE:92CA
DOSCODE:92CA DEV_OPEN_SFT    proc near               ; ...
DOSCODE:92CA                 push    es
DOSCODE:92CB                 call    save_world
DOSCODE:92CE                 mov     al, 0Dh
DOSCODE:92D0                 jmp     short loc_92D8
DOSCODE:92D0 DEV_OPEN_SFT    endp
DOSCODE:92D0
DOSCODE:92D2
DOSCODE:92D2 ; =============== S U B R O U T I N E =======================================
DOSCODE:92D2
DOSCODE:92D2 ; Attributes: noreturn
DOSCODE:92D2
DOSCODE:92D2 DEV_CLOSE_SFT   proc near               ; ...
DOSCODE:92D2                 push    es
DOSCODE:92D3                 call    save_world
DOSCODE:92D6                 mov     al, 0Eh
DOSCODE:92D8
DOSCODE:92D8 loc_92D8:                               ; ...
DOSCODE:92D8                 test    byte ptr es:[di+6], 80h
DOSCODE:92DD                 jnz     short loc_9343
DOSCODE:92DF                 xor     ah, ah
DOSCODE:92E1                 test    byte ptr es:[di+5], 80h
DOSCODE:92E6                 les     di, es:[di+7]
DOSCODE:92EA                 jnz     short loc_92FD
DOSCODE:92EC                 cmp     byte ptr ss:303h, 1
DOSCODE:92F2                 jbe     short loc_9343
DOSCODE:92F4                 mov     cx, es:[di]
DOSCODE:92F7                 mov     ah, ch
DOSCODE:92F9                 les     di, es:[di+13h]
DOSCODE:92FD
DOSCODE:92FD loc_92FD:                               ; ...
DOSCODE:92FD                 test    byte ptr es:[di+5], 8
DOSCODE:9302                 jz      short loc_9343
DOSCODE:9304                 push    es
DOSCODE:9305                 pop     ds
DOSCODE:9306                 mov     si, di
DOSCODE:9308
DOSCODE:9308 loc_9308:                               ; ...
DOSCODE:9308                 push    ss
DOSCODE:9309                 pop     es
DOSCODE:930A                 mov     di, 35Ah
DOSCODE:930D                 mov     bx, di
DOSCODE:930F                 push    ax
DOSCODE:9310                 mov     al, 0Dh
DOSCODE:9312                 stosb
DOSCODE:9313                 pop     ax
DOSCODE:9314                 xchg    ah, al
DOSCODE:9316                 stosw
DOSCODE:9317                 xchg    ah, al
DOSCODE:9319                 mov     word ptr es:[di], 0
DOSCODE:931E                 push    ax
DOSCODE:931F                 call    DEVIOCALL2
DOSCODE:9322                 mov     di, es:[bx+3]
DOSCODE:9326                 and     di, di
DOSCODE:9328                 jns     short loc_9342
DOSCODE:932A                 test    byte ptr [si+5], 80h
DOSCODE:932E                 jz      short loc_9334
DOSCODE:9330                 mov     ah, 86h
DOSCODE:9332                 jmp     short loc_9338
DOSCODE:9334 ; ---------------------------------------------------------------------------
DOSCODE:9334
DOSCODE:9334 loc_9334:                               ; ...
DOSCODE:9334                 mov     al, cl
DOSCODE:9336                 mov     ah, 6
DOSCODE:9338
DOSCODE:9338 loc_9338:                               ; ...
DOSCODE:9338                 call    sub_A173
DOSCODE:933B                 cmp     al, 1
DOSCODE:933D                 jnz     short loc_9342
DOSCODE:933F                 pop     ax
DOSCODE:9340                 jmp     short loc_9308
DOSCODE:9342 ; ---------------------------------------------------------------------------
DOSCODE:9342
DOSCODE:9342 loc_9342:                               ; ...
DOSCODE:9342                 pop     ax
DOSCODE:9343
DOSCODE:9343 loc_9343:                               ; ...
DOSCODE:9343                 call    restore_world
DOSCODE:9343 DEV_CLOSE_SFT   endp ; sp-analysis failed
DOSCODE:9343
DOSCODE:9346                 pop     es
DOSCODE:9347                 retn
DOSCODE:9348
DOSCODE:9348 ; =============== S U B R O U T I N E =======================================
DOSCODE:9348
DOSCODE:9348
DOSCODE:9348 DEVIOCALL       proc near               ; ...
DOSCODE:9348                 lds     si, [si+7]      ; CALLNEWSC, HIGH_SECTOR & CALLDEVAD
DOSCODE:9348 DEVIOCALL       endp                    ; LDS SI,[SI+SF_ENTRY.sf_devptr]
DOSCODE:9348
DOSCODE:934B
DOSCODE:934B ; =============== S U B R O U T I N E =======================================
DOSCODE:934B
DOSCODE:934B
DOSCODE:934B DEVIOCALL2      proc near               ; ...
DOSCODE:934B                 call    ECritDevice
DOSCODE:934E                 test    byte ptr [si+5], 80h ; [SI+SYSDEV.ATT+1],(DEVTYP>>8)
DOSCODE:9352                 jnz     short chardev2
DOSCODE:9354                 mov     al, es:[bx+2]   ; [ES:BX+SRHEAD.REQFUNC]
DOSCODE:9358                 cmp     al, 4           ; DEVRD
DOSCODE:935A                 jz      short chkext
DOSCODE:935C                 cmp     al, 8           ; DEVWRT
DOSCODE:935E                 jz      short chkext
DOSCODE:9360                 cmp     al, 9           ; DEVWRTV
DOSCODE:9362                 jnz     short chardev2
DOSCODE:9364
DOSCODE:9364 chkext:                                 ; ...
DOSCODE:9364                 test    byte ptr [si+4], 2 ; [SI+SYSDEV.ATT],EXTDRVR
DOSCODE:9368                 jz      short chksector
DOSCODE:936A                 mov     ax, 0FFFFh      ; -1 ; old sector
DOSCODE:936D                 add     byte ptr es:[bx], 8 ; make length to 30
DOSCODE:9371                 xchg    ax, ss:CALLSSEC
DOSCODE:9376                 mov     ss:CALLNEWSC, ax
DOSCODE:937A                 mov     ax, ss:HIGH_SECTOR
DOSCODE:937E                 mov     ss:CALLNEWSC+2, ax
DOSCODE:9382                 jmp     short chardev2
DOSCODE:9384 ; ---------------------------------------------------------------------------
DOSCODE:9384
DOSCODE:9384 chksector:                              ; ...
DOSCODE:9384                 cmp     ss:HIGH_SECTOR, 0 ; if >32mb
DOSCODE:938A                 jnz     short chardev3  ; then fake error
DOSCODE:938C
DOSCODE:938C chardev2:                               ; ...
DOSCODE:938C                 inc     ss:DEVIO_IN_PROGRESS ; lock (deviocall in progress)
DOSCODE:9391                 mov     ax, [si+6]      ; [SI+SYSDEV.STRAT]
DOSCODE:9394                 mov     word ptr ss:CALLDEVAD, ax
DOSCODE:9398                 mov     word ptr ss:CALLDEVAD+2, ds
DOSCODE:939D                 call    ss:CALLDEVAD
DOSCODE:93A2                 mov     ax, [si+8]      ; [SI+SYSDEV.INT]
DOSCODE:93A5                 mov     word ptr ss:CALLDEVAD, ax
DOSCODE:93A9                 call    ss:CALLDEVAD
DOSCODE:93AE                 dec     ss:DEVIO_IN_PROGRESS ; unlock (deviocall completed)
DOSCODE:93B3
DOSCODE:93B3 dev_exit:                               ; ...
DOSCODE:93B3                 call    LCritDevice
DOSCODE:93B6                 retn
DOSCODE:93B7 ; ---------------------------------------------------------------------------
DOSCODE:93B7
DOSCODE:93B7 chardev3:                               ; ...
DOSCODE:93B7                 mov     word ptr es:[bx+3], 8107h ; [ES:BX+SRHEAD.REQSTAT],
DOSCODE:93B7                                         ; STERR+STDON+error_I24_not_DOS_disk
DOSCODE:93BD                 jmp     short dev_exit
DOSCODE:93BD DEVIOCALL2      endp
DOSCODE:93BD
DOSCODE:93BF
DOSCODE:93BF ; =============== S U B R O U T I N E =======================================
DOSCODE:93BF
DOSCODE:93BF
DOSCODE:93BF SETREAD         proc near               ; ...
DOSCODE:93BF                 push    di
DOSCODE:93C0                 push    cx
DOSCODE:93C1                 push    ax
DOSCODE:93C2                 mov     cl, 4
DOSCODE:93C4
DOSCODE:93C4 loc_93C4:                               ; ...
DOSCODE:93C4                 mov     al, 22
DOSCODE:93C6                 mov     di, ss
DOSCODE:93C8                 mov     es, di
DOSCODE:93CA                 mov     di, offset DEVCALL_REQLEN
DOSCODE:93CD                 stosb
DOSCODE:93CE                 pop     ax
DOSCODE:93CF                 stosb
DOSCODE:93D0                 mov     es:[di], cl
DOSCODE:93D3                 inc     di
DOSCODE:93D4                 mov     word ptr es:[di], 0
DOSCODE:93D9                 add     di, 10
DOSCODE:93DC                 mov     es:[di], ah
DOSCODE:93DF                 inc     di
DOSCODE:93E0                 mov     cx, ax
DOSCODE:93E2                 mov     es:[di], bx
DOSCODE:93E5                 mov     word ptr es:[di+2], ds
DOSCODE:93E9                 add     di, 4
DOSCODE:93EC                 pop     ax
DOSCODE:93ED                 stosw
DOSCODE:93EE                 xchg    ax, dx
DOSCODE:93EF                 stosw
DOSCODE:93F0                 xchg    ax, cx
DOSCODE:93F1                 xchg    dx, cx
DOSCODE:93F3                 pop     di
DOSCODE:93F4                 mov     bx, offset DEVCALL_REQLEN
DOSCODE:93F7                 retn
DOSCODE:93F7 SETREAD         endp
DOSCODE:93F7
DOSCODE:93F8
DOSCODE:93F8 ; =============== S U B R O U T I N E =======================================
DOSCODE:93F8
DOSCODE:93F8
DOSCODE:93F8 SETWRITE        proc near               ; ...
DOSCODE:93F8                 push    di
DOSCODE:93F9                 push    cx
DOSCODE:93FA                 push    ax
DOSCODE:93FB                 mov     cl, 8
DOSCODE:93FD                 add     cl, ss:VDERFLG
DOSCODE:9402                 jmp     short loc_93C4
DOSCODE:9402 SETWRITE        endp
DOSCODE:9402
DOSCODE:9404 ; ---------------------------------------------------------------------------
DOSCODE:9404                 stc
DOSCODE:9405                 retn
DOSCODE:9406 ; ---------------------------------------------------------------------------
DOSCODE:9406                 clc
DOSCODE:9407                 retn
DOSCODE:9408 ; ---------------------------------------------------------------------------
DOSCODE:9408                 stc
DOSCODE:9409                 retn
DOSCODE:940A
DOSCODE:940A ; =============== S U B R O U T I N E =======================================
DOSCODE:940A
DOSCODE:940A
DOSCODE:940A BUILDDIR        proc near               ; ...
DOSCODE:940A                 mov     ax, ds:ENTFREE
DOSCODE:940D                 cmp     ax, 0FFFFh
DOSCODE:9410                 jz      short loc_9414
DOSCODE:9412                 clc
DOSCODE:9413                 retn
DOSCODE:9414 ; ---------------------------------------------------------------------------
DOSCODE:9414
DOSCODE:9414 loc_9414:                               ; ...
DOSCODE:9414                 cmp     ds:DIRSTART_HW, 0
DOSCODE:9419                 jnz     short loc_9424
DOSCODE:941B                 cmp     ds:DIRSTART, 0
DOSCODE:9420                 jnz     short loc_9424
DOSCODE:9422                 stc
DOSCODE:9423
DOSCODE:9423 builddir_retn:                          ; ...
DOSCODE:9423                 retn
DOSCODE:9424 ; ---------------------------------------------------------------------------
DOSCODE:9424
DOSCODE:9424 loc_9424:                               ; ...
DOSCODE:9424                 mov     bx, ds:DIRSTART_HW
DOSCODE:9428                 mov     ds:CLUSTNUM_HW, bx
DOSCODE:942C                 or      bx, bx
DOSCODE:942E                 mov     bx, ds:DIRSTART
DOSCODE:9432                 jnz     short loc_9438
DOSCODE:9434                 or      bx, bx
DOSCODE:9436                 jz      short loc_943D
DOSCODE:9438
DOSCODE:9438 loc_9438:                               ; ...
DOSCODE:9438                 call    GETEOF
DOSCODE:943B                 jb      short builddir_retn
DOSCODE:943D
DOSCODE:943D loc_943D:                               ; ...
DOSCODE:943D                 xor     cx, cx
DOSCODE:943F                 mov     ds:CCOUNT_HW, cx
DOSCODE:9443                 inc     cx
DOSCODE:9444                 call    ALLOCATE
DOSCODE:9447                 jb      short builddir_retn
DOSCODE:9449                 mov     dx, ds:DIRSTART
DOSCODE:944D                 cmp     dx, ds:DIRSTART_HW
DOSCODE:9451                 jnz     short loc_946C
DOSCODE:9453                 or      dx, dx
DOSCODE:9455                 jnz     short loc_946C
DOSCODE:9457                 push    ds:CLUSTNUM_HW
DOSCODE:945B                 pop     ds:ROOTCLUST_HW
DOSCODE:945F                 call    SETDIRSRCH
DOSCODE:9462                 jb      short builddir_retn
DOSCODE:9464                 mov     ds:LASTENT, 0FFFFh
DOSCODE:946A                 jmp     short loc_94AD
DOSCODE:946C ; ---------------------------------------------------------------------------
DOSCODE:946C
DOSCODE:946C loc_946C:                               ; ...
DOSCODE:946C                 push    bx
DOSCODE:946D                 push    ds:CLUSTNUM_HW
DOSCODE:9471                 mov     bx, ds:CLUSNUM_HW
DOSCODE:9475                 mov     ds:CLUSTNUM_HW, bx
DOSCODE:9479                 mov     bx, ds:CLUSNUM
DOSCODE:947D                 call    IsEOF
DOSCODE:9480                 pop     ds:CLUSTNUM_HW
DOSCODE:9484                 pop     bx
DOSCODE:9485                 jb      short loc_94A6
DOSCODE:9487                 mov     ds:CLUSNUM, bx
DOSCODE:948B                 push    cx
DOSCODE:948C                 push    ax
DOSCODE:948D                 push    bp
DOSCODE:948E                 mov     ax, ds:CLUSTNUM_HW
DOSCODE:9491                 mov     ds:CLUSNUM_HW, ax
DOSCODE:9494                 mov     ah, 1
DOSCODE:9496                 mov     dl, es:[bp+0]
DOSCODE:949A                 mov     cx, ds:DIRSTART
DOSCODE:949E                 mov     bp, bx
DOSCODE:94A0                 call    FastOpen_Update
DOSCODE:94A3                 pop     bp
DOSCODE:94A4                 pop     ax
DOSCODE:94A5                 pop     cx
DOSCODE:94A6
DOSCODE:94A6 loc_94A6:                               ; ...
DOSCODE:94A6                 mov     dx, bx
DOSCODE:94A8                 xor     bl, bl
DOSCODE:94AA                 call    FIGREC
DOSCODE:94AD
DOSCODE:94AD loc_94AD:                               ; ...
DOSCODE:94AD                 mov     cl, es:[bp+4]
DOSCODE:94B1                 inc     cx
DOSCODE:94B2                 xor     ch, ch
DOSCODE:94B4
DOSCODE:94B4 loc_94B4:                               ; ...
DOSCODE:94B4                 push    cx
DOSCODE:94B5                 mov     ds:ALLOWED, 18h
DOSCODE:94BA                 mov     al, 0FFh
DOSCODE:94BC                 call    GETBUFFR
DOSCODE:94BF                 jnb     short loc_94C3
DOSCODE:94C1                 pop     cx
DOSCODE:94C2                 retn
DOSCODE:94C3 ; ---------------------------------------------------------------------------
DOSCODE:94C3
DOSCODE:94C3 loc_94C3:                               ; ...
DOSCODE:94C3                 mov     cx, es:[bp+2]
DOSCODE:94C7                 push    es
DOSCODE:94C8                 les     di, ds:CURBUF
DOSCODE:94CC                 or      byte ptr es:[di+5], 4
DOSCODE:94D1                 push    di
DOSCODE:94D2                 add     di, 18h
DOSCODE:94D5                 xor     ax, ax
DOSCODE:94D7                 shr     cx, 1
DOSCODE:94D9                 rep stosw
DOSCODE:94DB                 jnb     short loc_94DE
DOSCODE:94DD                 stosb
DOSCODE:94DE
DOSCODE:94DE loc_94DE:                               ; ...
DOSCODE:94DE                 pop     di
DOSCODE:94DF                 call    SET_BUF_DIRTY
DOSCODE:94E2                 pop     es
DOSCODE:94E3                 add     dx, 1
DOSCODE:94E6                 adc     ds:HIGH_SECTOR, cx
DOSCODE:94EA                 pop     cx
DOSCODE:94EB                 loop    loc_94B4
DOSCODE:94ED                 mov     ax, ds:LASTENT
DOSCODE:94F0                 inc     ax
DOSCODE:94F1                 clc
DOSCODE:94F2                 retn
DOSCODE:94F2 BUILDDIR        endp
DOSCODE:94F2
DOSCODE:94F3
DOSCODE:94F3 ; =============== S U B R O U T I N E =======================================
DOSCODE:94F3
DOSCODE:94F3
DOSCODE:94F3 sub_94F3        proc near               ; ...
DOSCODE:94F3                 stosw
DOSCODE:94F4                 mov     cx, 4
DOSCODE:94F7                 mov     ax, 2020h
DOSCODE:94FA                 rep stosw
DOSCODE:94FC                 stosb
DOSCODE:94FD                 mov     al, 10h
DOSCODE:94FF                 stosb
DOSCODE:9500                 add     di, 8
DOSCODE:9503                 mov     ax, ds:0AF2h
DOSCODE:9506                 stosw
DOSCODE:9507                 mov     si, ds:59Eh
DOSCODE:950B                 mov     ax, [si+0Dh]
DOSCODE:950E                 stosw
DOSCODE:950F                 mov     ax, [si+0Fh]
DOSCODE:9512                 stosw
DOSCODE:9513                 mov     ax, dx
DOSCODE:9515                 stosw
DOSCODE:9516                 xchg    ax, cx
DOSCODE:9517                 stosw
DOSCODE:9518                 stosw
DOSCODE:9519                 retn
DOSCODE:9519 sub_94F3        endp
DOSCODE:9519
DOSCODE:951A
DOSCODE:951A ; =============== S U B R O U T I N E =======================================
DOSCODE:951A
DOSCODE:951A
DOSCODE:951A MakeNode        proc near               ; ...
DOSCODE:951A
DOSCODE:951A ; FUNCTION CHUNK AT DOSCODE:953B SIZE 00000003 BYTES
DOSCODE:951A ; FUNCTION CHUNK AT DOSCODE:955F SIZE 00000040 BYTES
DOSCODE:951A ; FUNCTION CHUNK AT DOSCODE:95A3 SIZE 00000009 BYTES
DOSCODE:951A ; FUNCTION CHUNK AT DOSCODE:95E9 SIZE 00000031 BYTES
DOSCODE:951A
DOSCODE:951A                 mov     word ptr ds:CREATING, 0E5FFh
DOSCODE:9520                 push    ax
DOSCODE:9521                 mov     ds:NoSetDir, 0
DOSCODE:9526                 mov     ds:SATTRIB, al
DOSCODE:9529                 call    GetPathNoSet
DOSCODE:952C                 mov     dl, cl
DOSCODE:952E                 xchg    ax, cx
DOSCODE:952F                 pop     ax
DOSCODE:9530                 jnb     short loc_955F
DOSCODE:9532                 jnz     short loc_9539
DOSCODE:9534                 cmp     dl, 80h
DOSCODE:9537                 jz      short RENAME_MAKE
DOSCODE:9539
DOSCODE:9539 loc_9539:                               ; ...
DOSCODE:9539                 mov     al, 4
DOSCODE:9539 MakeNode        endp
DOSCODE:9539
DOSCODE:953B ; START OF FUNCTION CHUNK FOR RENAME_MAKE
DOSCODE:953B ;   ADDITIONAL PARENT FUNCTION MakeNode
DOSCODE:953B
DOSCODE:953B loc_953B:                               ; ...
DOSCODE:953B                 cbw
DOSCODE:953C                 stc
DOSCODE:953D                 retn
DOSCODE:953D ; END OF FUNCTION CHUNK FOR RENAME_MAKE
DOSCODE:953E
DOSCODE:953E ; =============== S U B R O U T I N E =======================================
DOSCODE:953E
DOSCODE:953E
DOSCODE:953E RENAME_MAKE     proc near               ; ...
DOSCODE:953E
DOSCODE:953E ; FUNCTION CHUNK AT DOSCODE:953B SIZE 00000003 BYTES
DOSCODE:953E ; FUNCTION CHUNK AT DOSCODE:959F SIZE 00000004 BYTES
DOSCODE:953E ; FUNCTION CHUNK AT DOSCODE:95B8 SIZE 00000031 BYTES
DOSCODE:953E
DOSCODE:953E                 test    ds:EXTOPEN_ON, 1
DOSCODE:9543                 jz      short loc_9556
DOSCODE:9545                 or      ds:EXTOPEN_ON, 4
DOSCODE:954A                 test    byte ptr ds:EXTOPEN_FLAG, 0F0h
DOSCODE:954F                 jnz     short loc_9556
DOSCODE:9551                 stc
DOSCODE:9552                 mov     ax, 7
DOSCODE:9555
DOSCODE:9555 locret_9555:                            ; ...
DOSCODE:9555                 retn
DOSCODE:9556 ; ---------------------------------------------------------------------------
DOSCODE:9556
DOSCODE:9556 loc_9556:                               ; ...
DOSCODE:9556                 les     di, ds:THISSFT
DOSCODE:955A                 xor     ax, ax
DOSCODE:955C                 stc
DOSCODE:955D                 jmp     short loc_95B8
DOSCODE:955D RENAME_MAKE     endp
DOSCODE:955D
DOSCODE:955F ; ---------------------------------------------------------------------------
DOSCODE:955F ; START OF FUNCTION CHUNK FOR MakeNode
DOSCODE:955F
DOSCODE:955F loc_955F:                               ; ...
DOSCODE:955F                 jz      short loc_95A8
DOSCODE:9561                 mov     al, 3
DOSCODE:9563                 test    ds:ATTRIB, 18h
DOSCODE:9568                 jnz     short loc_95A4
DOSCODE:956A                 or      ch, ch
DOSCODE:956C                 js      short loc_9588
DOSCODE:956E                 or      ah, ah
DOSCODE:9570                 jnz     short loc_953B
DOSCODE:9572                 push    cx
DOSCODE:9573                 mov     es, word ptr ds:CURBUF+2
DOSCODE:9577                 mov     ch, es:[bx+0Bh]
DOSCODE:957B                 test    ch, 1
DOSCODE:957E                 jnz     short loc_95A3
DOSCODE:9580                 call    MatchAttributes
DOSCODE:9583                 pop     cx
DOSCODE:9584                 jnz     short loc_95A4
DOSCODE:9586                 xor     al, al
DOSCODE:9588
DOSCODE:9588 loc_9588:                               ; ...
DOSCODE:9588                 cbw
DOSCODE:9589                 push    ax
DOSCODE:958A                 push    cx
DOSCODE:958B                 mov     ah, ch
DOSCODE:958D                 call    DOOPEN
DOSCODE:9590                 les     di, ds:59Eh
DOSCODE:9594                 push    si
DOSCODE:9595                 push    bx
DOSCODE:9596                 call    ShareEnter
DOSCODE:9599                 jnb     short loc_95E9
DOSCODE:959B                 pop     bx
DOSCODE:959C                 pop     si
DOSCODE:959D                 pop     cx
DOSCODE:959E                 pop     ax
DOSCODE:959E ; END OF FUNCTION CHUNK FOR MakeNode
DOSCODE:959F ; START OF FUNCTION CHUNK FOR RENAME_MAKE
DOSCODE:959F
DOSCODE:959F loc_959F:                               ; ...
DOSCODE:959F                 mov     al, 6
DOSCODE:95A1                 jmp     short loc_953B
DOSCODE:95A1 ; END OF FUNCTION CHUNK FOR RENAME_MAKE
DOSCODE:95A3 ; ---------------------------------------------------------------------------
DOSCODE:95A3 ; START OF FUNCTION CHUNK FOR MakeNode
DOSCODE:95A3
DOSCODE:95A3 loc_95A3:                               ; ...
DOSCODE:95A3                 pop     cx
DOSCODE:95A4
DOSCODE:95A4 loc_95A4:                               ; ...
DOSCODE:95A4                 mov     al, 5
DOSCODE:95A6                 jmp     short loc_953B
DOSCODE:95A8 ; ---------------------------------------------------------------------------
DOSCODE:95A8
DOSCODE:95A8 loc_95A8:                               ; ...
DOSCODE:95A8                 mov     al, 1
DOSCODE:95AA                 jmp     short loc_953B
DOSCODE:95AA ; END OF FUNCTION CHUNK FOR MakeNode
DOSCODE:95AC
DOSCODE:95AC ; =============== S U B R O U T I N E =======================================
DOSCODE:95AC
DOSCODE:95AC
DOSCODE:95AC sub_95AC        proc near               ; ...
DOSCODE:95AC                 push    ax
DOSCODE:95AD                 mov     ax, cx
DOSCODE:95AF                 call    sub_961A
DOSCODE:95B2                 pop     ax
DOSCODE:95B3                 jnb     short locret_9555
DOSCODE:95B5                 mov     al, 2
DOSCODE:95B7
DOSCODE:95B7 locret_95B7:                            ; ...
DOSCODE:95B7                 retn
DOSCODE:95B7 sub_95AC        endp
DOSCODE:95B7
DOSCODE:95B8 ; ---------------------------------------------------------------------------
DOSCODE:95B8 ; START OF FUNCTION CHUNK FOR RENAME_MAKE
DOSCODE:95B8
DOSCODE:95B8 loc_95B8:                               ; ...
DOSCODE:95B8                 call    sub_95AC
DOSCODE:95BB                 jb      short locret_95B7
DOSCODE:95BD                 test    ds:ATTRIB, 10h
DOSCODE:95C2                 jnz     short locret_95B7
DOSCODE:95C4                 push    ax
DOSCODE:95C5                 push    bx
DOSCODE:95C6                 push    si
DOSCODE:95C7                 call    ShareEnter
DOSCODE:95CA                 pop     si
DOSCODE:95CB                 pop     bx
DOSCODE:95CC                 pop     ax
DOSCODE:95CD                 jnb     short locret_95B7
DOSCODE:95CF                 push    ax
DOSCODE:95D0                 les     di, ds:CURBUF
DOSCODE:95D4                 mov     byte ptr es:[bx], 0E5h
DOSCODE:95D8                 call    SET_BUF_DIRTY
DOSCODE:95DB                 les     bp, ds:THISDPB
DOSCODE:95DF                 mov     al, es:[bp+0]
DOSCODE:95E3                 call    FLUSHBUF
DOSCODE:95E6                 pop     ax
DOSCODE:95E7                 jmp     short loc_959F
DOSCODE:95E7 ; END OF FUNCTION CHUNK FOR RENAME_MAKE
DOSCODE:95E9 ; ---------------------------------------------------------------------------
DOSCODE:95E9 ; START OF FUNCTION CHUNK FOR MakeNode
DOSCODE:95E9
DOSCODE:95E9 loc_95E9:                               ; ...
DOSCODE:95E9                 les     di, ds:THISSFT
DOSCODE:95ED                 xor     ax, ax
DOSCODE:95EF                 call    ECritDisk
DOSCODE:95F2                 xchg    ax, es:[di]
DOSCODE:95F5                 push    ax
DOSCODE:95F6                 push    di
DOSCODE:95F7                 push    es
DOSCODE:95F8                 pushf
DOSCODE:95F9                 call    ShareEnd
DOSCODE:95FC                 popf
DOSCODE:95FD                 pop     es
DOSCODE:95FE                 pop     di
DOSCODE:95FF                 pop     word ptr es:[di]
DOSCODE:9602                 call    LCritDisk
DOSCODE:9605                 pop     bx
DOSCODE:9606                 pop     si
DOSCODE:9607                 pop     cx
DOSCODE:9608                 pop     ax
DOSCODE:9609                 call    sub_95AC
DOSCODE:960C                 jb      short locret_95B7
DOSCODE:960E                 push    ax
DOSCODE:960F                 push    bx
DOSCODE:9610                 push    si
DOSCODE:9611                 pushf
DOSCODE:9612                 call    ShareEnter
DOSCODE:9615                 popf
DOSCODE:9616                 pop     si
DOSCODE:9617                 pop     bx
DOSCODE:9618                 pop     ax
DOSCODE:9619
DOSCODE:9619 locret_9619:                            ; ...
DOSCODE:9619                 retn
DOSCODE:9619 ; END OF FUNCTION CHUNK FOR MakeNode
DOSCODE:961A
DOSCODE:961A ; =============== S U B R O U T I N E =======================================
DOSCODE:961A
DOSCODE:961A
DOSCODE:961A sub_961A        proc near               ; ...
DOSCODE:961A                 les     bp, ds:THISDPB
DOSCODE:961E                 jnb     short loc_9636
DOSCODE:9620                 cmp     ds:FAILERR, 0
DOSCODE:9625                 stc
DOSCODE:9626                 jnz     short locret_9619
DOSCODE:9628                 call    BUILDDIR
DOSCODE:962B                 jb      short locret_9619
DOSCODE:962D                 call    GETENT
DOSCODE:9630                 jb      short locret_9619
DOSCODE:9632                 jmp     short loc_9642
DOSCODE:9634 ; ---------------------------------------------------------------------------
DOSCODE:9634
DOSCODE:9634 loc_9634:                               ; ...
DOSCODE:9634                 stc
DOSCODE:9635
DOSCODE:9635 locret_9635:                            ; ...
DOSCODE:9635                 retn
DOSCODE:9636 ; ---------------------------------------------------------------------------
DOSCODE:9636
DOSCODE:9636 loc_9636:                               ; ...
DOSCODE:9636                 or      ah, ah
DOSCODE:9638                 jns     short loc_963D
DOSCODE:963A                 jmp     DOOPEN
DOSCODE:963D ; ---------------------------------------------------------------------------
DOSCODE:963D
DOSCODE:963D loc_963D:                               ; ...
DOSCODE:963D                 call    sub_9791
DOSCODE:9640                 jb      short locret_9635
DOSCODE:9642
DOSCODE:9642 loc_9642:                               ; ...
DOSCODE:9642                 test    ds:ATTRIB, 8
DOSCODE:9647                 jz      short loc_9650
DOSCODE:9649                 cmp     byte ptr ds:57Bh, 0
DOSCODE:964E                 jnz     short loc_9634
DOSCODE:9650
DOSCODE:9650 loc_9650:                               ; ...
DOSCODE:9650                 mov     es, word ptr ds:5E4h
DOSCODE:9654                 mov     di, bx
DOSCODE:9656                 mov     si, 54Bh
DOSCODE:9659                 mov     cx, 5
DOSCODE:965C                 rep movsw
DOSCODE:965E                 movsb
DOSCODE:965F                 mov     al, ds:56Bh
DOSCODE:9662                 stosb
DOSCODE:9663                 mov     cl, 5
DOSCODE:9665                 xor     ax, ax
DOSCODE:9667                 rep stosw
DOSCODE:9669                 call    DATE16
DOSCODE:966C                 xchg    ax, dx
DOSCODE:966D                 stosw
DOSCODE:966E                 xchg    ax, dx
DOSCODE:966F                 mov     es:[di-6], ax
DOSCODE:9673                 stosw
DOSCODE:9674                 xor     ax, ax
DOSCODE:9676                 push    di
DOSCODE:9677                 stosw
DOSCODE:9678                 stosw
DOSCODE:9679                 stosw
DOSCODE:967A                 mov     si, ds:5E2h
DOSCODE:967E                 test    byte ptr es:[si+5], 40h
DOSCODE:9683                 jnz     short loc_968D
DOSCODE:9685                 call    INC_DIRTY_COUNT
DOSCODE:9688                 or      byte ptr es:[si+5], 40h
DOSCODE:968D
DOSCODE:968D loc_968D:                               ; ...
DOSCODE:968D                 les     bp, ds:58Ah
DOSCODE:9691                 mov     al, es:[bp+0]
DOSCODE:9695                 push    ax
DOSCODE:9696                 push    bx
DOSCODE:9697                 push    es
DOSCODE:9698                 push    di
DOSCODE:9699                 les     di, ds:59Eh
DOSCODE:969D                 test    byte ptr es:[di+5], 80h
DOSCODE:96A2                 jnz     short loc_96B6
DOSCODE:96A4                 push    ds
DOSCODE:96A5                 push    bx
DOSCODE:96A6                 lds     bx, ds:58Ah
DOSCODE:96AA                 mov     es:[di+7], bx
DOSCODE:96AE                 mov     bx, ds
DOSCODE:96B0                 mov     es:[di+9], bx
DOSCODE:96B4                 pop     bx
DOSCODE:96B5                 pop     ds
DOSCODE:96B6
DOSCODE:96B6 loc_96B6:                               ; ...
DOSCODE:96B6                 pop     di
DOSCODE:96B7                 pop     es
DOSCODE:96B8                 call    FLUSHBUF
DOSCODE:96BB                 pop     bx
DOSCODE:96BC                 pop     ax
DOSCODE:96BD                 pop     si
DOSCODE:96BE                 mov     ah, al
DOSCODE:96C0                 jnb     short DOOPEN
DOSCODE:96C2                 retn
DOSCODE:96C2 sub_961A        endp
DOSCODE:96C2
DOSCODE:96C3
DOSCODE:96C3 ; =============== S U B R O U T I N E =======================================
DOSCODE:96C3
DOSCODE:96C3
DOSCODE:96C3 DOOPEN          proc near               ; ...
DOSCODE:96C3                 mov     dh, ah
DOSCODE:96C5                 xor     dl, dl
DOSCODE:96C7                 or      ah, ah
DOSCODE:96C9                 js      short loc_96D8
DOSCODE:96CB                 les     di, ds:THISDPB
DOSCODE:96CF                 cmp     word ptr es:[di+0Fh], 0
DOSCODE:96D4                 jz      short loc_96D8
DOSCODE:96D6                 inc     dl
DOSCODE:96D8
DOSCODE:96D8 loc_96D8:                               ; ...
DOSCODE:96D8                 les     di, ds:THISSFT
DOSCODE:96DC                 add     di, 4
DOSCODE:96DF                 xor     al, al
DOSCODE:96E1                 or      dh, dh
DOSCODE:96E3                 js      short loc_96EC
DOSCODE:96E5                 mov     ds, word ptr ds:CURBUF+2
DOSCODE:96E9                 mov     al, [bx+0Bh]
DOSCODE:96EC
DOSCODE:96EC loc_96EC:                               ; ...
DOSCODE:96EC                 stosb
DOSCODE:96ED                 xor     ax, ax
DOSCODE:96EF                 mov     al, dh
DOSCODE:96F1                 or      al, 40h
DOSCODE:96F3                 stosw
DOSCODE:96F4                 push    ds
DOSCODE:96F5                 lds     ax, [bx+1Ah]
DOSCODE:96F8                 or      dh, dh
DOSCODE:96FA                 js      short loc_9701
DOSCODE:96FC                 lds     ax, ss:THISDPB
DOSCODE:9701
DOSCODE:9701 loc_9701:                               ; ...
DOSCODE:9701                 stosw
DOSCODE:9702                 mov     ax, ds
DOSCODE:9704                 pop     ds
DOSCODE:9705                 stosw
DOSCODE:9706                 push    si
DOSCODE:9707                 add     di, 20h ; ' '
DOSCODE:970A                 movsw
DOSCODE:970B                 add     si, 0FFF8h
DOSCODE:970E                 lodsw
DOSCODE:970F                 or      dl, dl
DOSCODE:9711                 jz      short loc_9715
DOSCODE:9713                 xor     ax, ax
DOSCODE:9715
DOSCODE:9715 loc_9715:                               ; ...
DOSCODE:9715                 stosw
DOSCODE:9716                 add     di, 0FFDEh
DOSCODE:9719                 movsw
DOSCODE:971A                 movsw
DOSCODE:971B                 lodsw
DOSCODE:971C                 lodsw
DOSCODE:971D                 xchg    ax, cx
DOSCODE:971E                 lodsw
DOSCODE:971F                 or      dh, dh
DOSCODE:9721                 jns     short loc_9727
DOSCODE:9723                 xor     ax, ax
DOSCODE:9725                 mov     cx, ax
DOSCODE:9727
DOSCODE:9727 loc_9727:                               ; ...
DOSCODE:9727                 xchg    ax, cx
DOSCODE:9728                 stosw
DOSCODE:9729                 xchg    ax, cx
DOSCODE:972A                 stosw
DOSCODE:972B                 xor     ax, ax
DOSCODE:972D                 stosw
DOSCODE:972E                 stosw
DOSCODE:972F                 or      dh, dh
DOSCODE:9731                 js      short loc_9782
DOSCODE:9733                 stosw
DOSCODE:9734                 add     di, 0FFF0h
DOSCODE:9737                 stosw
DOSCODE:9738                 add     di, 0Eh
DOSCODE:973B                 mov     ax, es:[di+10h]
DOSCODE:973F                 mov     es:[di+1Ah], ax
DOSCODE:9743                 mov     ax, es:[di+12h]
DOSCODE:9747                 mov     es:[di+1Ch], ax
DOSCODE:974B                 push    ds
DOSCODE:974C                 push    ss
DOSCODE:974D                 pop     ds
DOSCODE:974E                 test    byte ptr ds:1146h, 4
DOSCODE:9753                 jz      short loc_9766
DOSCODE:9755                 mov     si, 1147h
DOSCODE:9758                 mov     ax, [si+1]
DOSCODE:975B                 stosw
DOSCODE:975C                 mov     ax, [si+3]
DOSCODE:975F                 stosw
DOSCODE:9760                 mov     al, [si]
DOSCODE:9762                 stosb
DOSCODE:9763                 pop     ds
DOSCODE:9764                 jmp     short loc_9780
DOSCODE:9766 ; ---------------------------------------------------------------------------
DOSCODE:9766
DOSCODE:9766 loc_9766:                               ; ...
DOSCODE:9766                 pop     ds
DOSCODE:9767                 mov     si, ss:5E2h
DOSCODE:976C                 mov     ax, [si+6]
DOSCODE:976F                 stosw
DOSCODE:9770                 mov     ax, [si+8]
DOSCODE:9773                 stosw
DOSCODE:9774                 mov     ax, bx
DOSCODE:9776                 add     si, 18h
DOSCODE:9779                 sub     ax, si
DOSCODE:977B                 mov     cl, 20h ; ' '
DOSCODE:977D                 div     cl
DOSCODE:977F                 stosb
DOSCODE:9780
DOSCODE:9780 loc_9780:                               ; ...
DOSCODE:9780                 jmp     short loc_9785
DOSCODE:9782 ; ---------------------------------------------------------------------------
DOSCODE:9782
DOSCODE:9782 loc_9782:                               ; ...
DOSCODE:9782                 add     di, 7
DOSCODE:9785
DOSCODE:9785 loc_9785:                               ; ...
DOSCODE:9785                 mov     si, bx
DOSCODE:9787                 mov     cx, 0Bh
DOSCODE:978A                 rep movsb
DOSCODE:978C                 pop     si
DOSCODE:978D                 push    ss
DOSCODE:978E                 pop     ds
DOSCODE:978F                 clc
DOSCODE:9790
DOSCODE:9790 locret_9790:                            ; ...
DOSCODE:9790                 retn
DOSCODE:9790 DOOPEN          endp
DOSCODE:9790
DOSCODE:9791
DOSCODE:9791 ; =============== S U B R O U T I N E =======================================
DOSCODE:9791
DOSCODE:9791
DOSCODE:9791 sub_9791        proc near               ; ...
DOSCODE:9791                 push    ds
DOSCODE:9792                 lds     di, ds:5E2h
DOSCODE:9796                 mov     cx, [si]
DOSCODE:9798                 mov     ax, [si-6]
DOSCODE:979B                 mov     dx, [di+8]
DOSCODE:979E                 mov     ss:607h, dx
DOSCODE:97A3                 mov     dx, [di+6]
DOSCODE:97A6                 pop     ds
DOSCODE:97A7                 cmp     word ptr es:[bp+0Fh], 0
DOSCODE:97AC                 jnz     short loc_97C4
DOSCODE:97AE                 cmp     ax, 0
DOSCODE:97B1                 jnz     short loc_97B6
DOSCODE:97B3                 cmp     cx, 2
DOSCODE:97B6
DOSCODE:97B6 loc_97B6:                               ; ...
DOSCODE:97B6                 jb      short loc_97FF
DOSCODE:97B8                 cmp     ax, es:[bp+2Fh]
DOSCODE:97BC                 jnz     short loc_97CF
DOSCODE:97BE                 cmp     cx, es:[bp+2Dh]
DOSCODE:97C2                 jmp     short loc_97CF
DOSCODE:97C4 ; ---------------------------------------------------------------------------
DOSCODE:97C4
DOSCODE:97C4 loc_97C4:                               ; ...
DOSCODE:97C4                 xor     ax, ax
DOSCODE:97C6                 cmp     cx, 2
DOSCODE:97C9                 jb      short loc_97FF
DOSCODE:97CB                 cmp     cx, es:[bp+0Dh]
DOSCODE:97CF
DOSCODE:97CF loc_97CF:                               ; ...
DOSCODE:97CF                 ja      short loc_97FF
DOSCODE:97D1                 sub     bx, di
DOSCODE:97D3                 push    bx
DOSCODE:97D4                 push    word ptr ds:607h
DOSCODE:97D8                 push    dx
DOSCODE:97D9                 mov     bx, cx
DOSCODE:97DB                 mov     ds:0AE8h, ax
DOSCODE:97DE                 call    RELEASE
DOSCODE:97E1                 pop     dx
DOSCODE:97E2                 pop     word ptr ds:607h
DOSCODE:97E6                 jb      short loc_97F2
DOSCODE:97E8                 mov     byte ptr ds:34Bh, 18h
DOSCODE:97ED                 xor     al, al
DOSCODE:97EF                 call    GETBUFFR
DOSCODE:97F2
DOSCODE:97F2 loc_97F2:                               ; ...
DOSCODE:97F2                 pop     bx
DOSCODE:97F3                 jb      short locret_9790
DOSCODE:97F5                 call    sub_7F9D
DOSCODE:97F8                 add     bx, ds:5E2h
DOSCODE:97FC                 lea     si, [bx+1Ah]
DOSCODE:97FF
DOSCODE:97FF loc_97FF:                               ; ...
DOSCODE:97FF                 clc
DOSCODE:9800                 retn
DOSCODE:9800 sub_9791        endp
DOSCODE:9800
DOSCODE:9801
DOSCODE:9801 ; =============== S U B R O U T I N E =======================================
DOSCODE:9801
DOSCODE:9801
DOSCODE:9801 FNDCLUS         proc near               ; ...
DOSCODE:9801                 push    es              ; DX:CX = No. of clusters to skip
DOSCODE:9802                 les     di, ds:THISSFT
DOSCODE:9806                 mov     ds:CLSKIP_HW, dx
DOSCODE:980A                 mov     bx, es:[di+37h] ;  [ES:DI+SF_ENTRY.sf_lstclus+2]
DOSCODE:980E                 mov     ds:CLUSTNUM_HW, bx
DOSCODE:9812                 or      bx, bx
DOSCODE:9814                 mov     dx, es:[di+0Bh] ; [ES:DI+SF_ENTRY.sf_firclus]
DOSCODE:9818                 mov     ds:LASTPOS_HW, dx
DOSCODE:981C                 mov     bx, es:[di+35h] ; [ES:DI+SF_ENTRY.sf_lstclus]
DOSCODE:9820                 mov     dx, es:[di+19h] ; [ES:DI+SF_ENTRY.sf_cluspos]
DOSCODE:9824                 jnz     short fndclus_1
DOSCODE:9826                 or      bx, bx
DOSCODE:9828                 jnz     short fndclus_1
DOSCODE:982A                 jmp     NOCLUS
DOSCODE:982D ; ---------------------------------------------------------------------------
DOSCODE:982D
DOSCODE:982D fndclus_1:                              ; ...
DOSCODE:982D                 sub     cx, dx
DOSCODE:982F                 push    ax
DOSCODE:9830                 mov     ax, ds:LASTPOS_HW
DOSCODE:9833                 sbb     ds:CLSKIP_HW, ax
DOSCODE:9837                 pop     ax
DOSCODE:9838                 jnb     short FINDIT
DOSCODE:983A                 add     cx, dx
DOSCODE:983C                 mov     bx, ds:LASTPOS_HW
DOSCODE:9840                 adc     ds:CLSKIP_HW, bx
DOSCODE:9844                 xor     dx, dx
DOSCODE:9846                 mov     ds:LASTPOS_HW, dx
DOSCODE:984A                 mov     bx, es:[di+2Dh] ; [ES:DI+SF_ENTRY.sf_chain+2]
DOSCODE:984E                 mov     ds:CLUSTNUM_HW, bx
DOSCODE:9852                 mov     bx, es:[di+2Bh] ; [ES:DI+SF_ENTRY.sf_chain]
DOSCODE:9856
DOSCODE:9856 FINDIT:                                 ; ...
DOSCODE:9856                 pop     es
DOSCODE:9857                 cmp     cx, ds:CLSKIP_HW
DOSCODE:985B                 jnz     short SKPCLP
DOSCODE:985D                 jcxz    short RET9
DOSCODE:985D FNDCLUS         endp
DOSCODE:985D
DOSCODE:985F
DOSCODE:985F ; =============== S U B R O U T I N E =======================================
DOSCODE:985F
DOSCODE:985F
DOSCODE:985F SKPCLP          proc near               ; ...
DOSCODE:985F                 push    ds:LASTPOS_HW
DOSCODE:9863                 push    dx
DOSCODE:9864                 push    ds:CLSKIP_HW
DOSCODE:9868                 push    cx
DOSCODE:9869                 call    UNPACK
DOSCODE:986C                 pop     cx
DOSCODE:986D                 pop     ds:CLSKIP_HW
DOSCODE:9871                 pop     dx
DOSCODE:9872                 pop     ds:LASTPOS_HW
DOSCODE:9876                 jb      short fndclus_retn
DOSCODE:9878                 push    ds:CLUSTNUM_HW
DOSCODE:987C                 push    bx
DOSCODE:987D                 mov     bx, di
DOSCODE:987F                 mov     di, ds:CCONTENT_HW
DOSCODE:9883                 mov     ds:CLUSTNUM_HW, di
DOSCODE:9887                 call    IsEOF
DOSCODE:988A                 jb      short SKPCLP2
DOSCODE:988C                 pop     bx
DOSCODE:988D                 pop     ds:CLUSTNUM_HW
DOSCODE:9891                 jmp     short RET9
DOSCODE:9893 ; ---------------------------------------------------------------------------
DOSCODE:9893
DOSCODE:9893 SKPCLP2:                                ; ...
DOSCODE:9893                 add     sp, 4
DOSCODE:9896                 inc     dx
DOSCODE:9897                 jnz     short SKPCLP3
DOSCODE:9899                 inc     ds:LASTPOS_HW
DOSCODE:989D
DOSCODE:989D SKPCLP3:                                ; ...
DOSCODE:989D                 sub     cx, 1
DOSCODE:98A0                 sbb     ds:CLSKIP_HW, 0
DOSCODE:98A5                 jnz     short SKPCLP    ; loop
DOSCODE:98A7                 or      cx, cx
DOSCODE:98A9                 jnz     short SKPCLP    ; loop
DOSCODE:98AB
DOSCODE:98AB RET9:                                   ; ...
DOSCODE:98AB                 clc
DOSCODE:98AC                 retn
DOSCODE:98AD ; ---------------------------------------------------------------------------
DOSCODE:98AD
DOSCODE:98AD NOCLUS:                                 ; ...
DOSCODE:98AD                 pop     es
DOSCODE:98AE                 push    di
DOSCODE:98AF                 xor     di, di
DOSCODE:98B1                 add     cx, 1
DOSCODE:98B4                 adc     ds:CLSKIP_HW, di ; CLSKIP_HW:BX = Last cluster skipped to
DOSCODE:98B8                 sub     dx, 1
DOSCODE:98BB                 sbb     ds:LASTPOS_HW, di ; LASTPOS_HW:DX = Position of last cluster
DOSCODE:98BF                 pop     di
DOSCODE:98C0                 clc
DOSCODE:98C1
DOSCODE:98C1 fndclus_retn:                           ; ...
DOSCODE:98C1                 retn
DOSCODE:98C1 SKPCLP          endp
DOSCODE:98C1
DOSCODE:98C2
DOSCODE:98C2 ; =============== S U B R O U T I N E =======================================
DOSCODE:98C2
DOSCODE:98C2
DOSCODE:98C2 BUFSEC          proc near               ; ...
DOSCODE:98C2                 push    ds:CLUSTNUM_HW
DOSCODE:98C6                 mov     dx, ds:CLUSNUM_HW
DOSCODE:98CA                 mov     ds:CLUSTNUM_HW, dx
DOSCODE:98CE                 mov     dx, ds:CLUSNUM
DOSCODE:98D2                 mov     bl, ds:SECCLUSPOS
DOSCODE:98D6                 mov     ds:ALLOWED, 38h ; Allowed_FAIL+Allowed_RETRY+Allowed_IGNORE
DOSCODE:98DB                 call    FIGREC
DOSCODE:98DE                 call    GETBUFFR
DOSCODE:98E1                 pop     ds:CLUSTNUM_HW
DOSCODE:98E5                 jb      short fndclus_retn
DOSCODE:98E7                 mov     ds:TRANS, 1     ; A transfer is taking place
DOSCODE:98EC                 mov     si, ds:NEXTADD
DOSCODE:98F0                 mov     di, si
DOSCODE:98F2                 mov     cx, ds:BYTCNT1
DOSCODE:98F6                 add     di, cx
DOSCODE:98F8                 mov     ds:NEXTADD, di
DOSCODE:98FC                 les     di, ds:CURBUF
DOSCODE:9900                 or      byte ptr es:[di+5], 8 ; [ES:DI+BUFFINFO.buf_flags],
DOSCODE:9900                                         ; buf_isDATA
DOSCODE:9905                 lea     di, [di+24]     ; [DI+BUFINSIZ] ; Point to buffer
DOSCODE:9908                 add     di, ds:BYTSECPOS
DOSCODE:990C                 clc
DOSCODE:990D                 retn
DOSCODE:990D BUFSEC          endp
DOSCODE:990D
DOSCODE:990E
DOSCODE:990E ; =============== S U B R O U T I N E =======================================
DOSCODE:990E
DOSCODE:990E
DOSCODE:990E sub_990E        proc near               ; ...
DOSCODE:990E                 push    es
DOSCODE:990F                 xor     ax, ax
DOSCODE:9911                 call    BUFSEC
DOSCODE:9914                 jnb     short loc_9919
DOSCODE:9916
DOSCODE:9916 loc_9916:                               ; ...
DOSCODE:9916                 pop     es
DOSCODE:9917                 jmp     short loc_9946
DOSCODE:9919 ; ---------------------------------------------------------------------------
DOSCODE:9919
DOSCODE:9919 loc_9919:                               ; ...
DOSCODE:9919                 mov     bx, es
DOSCODE:991B                 mov     es, word ptr ds:32Eh
DOSCODE:991F                 mov     ds, bx
DOSCODE:9921                 xchg    di, si
DOSCODE:9923                 shr     cx, 1
DOSCODE:9925                 rep movsw
DOSCODE:9927                 adc     cx, 0
DOSCODE:992A                 rep movsb
DOSCODE:992C                 pop     es
DOSCODE:992D                 lds     di, ss:5E2h
DOSCODE:9932                 lea     bx, [di+18h]
DOSCODE:9935                 sub     si, bx
DOSCODE:9937                 call    PLACEBUF
DOSCODE:993A                 cmp     si, es:[bp+2]
DOSCODE:993E                 jb      short loc_9945
DOSCODE:9940                 mov     ss:6Dh, di
DOSCODE:9945
DOSCODE:9945 loc_9945:                               ; ...
DOSCODE:9945                 clc
DOSCODE:9946
DOSCODE:9946 loc_9946:                               ; ...
DOSCODE:9946                 push    ss
DOSCODE:9947                 pop     ds
DOSCODE:9948                 retn
DOSCODE:9948 sub_990E        endp
DOSCODE:9948
DOSCODE:9949
DOSCODE:9949 ; =============== S U B R O U T I N E =======================================
DOSCODE:9949
DOSCODE:9949
DOSCODE:9949 BUFWRT          proc near               ; ...
DOSCODE:9949                 add     word ptr ds:SECPOS, 1
DOSCODE:994E                 adc     word ptr ds:SECPOS+2, 0
DOSCODE:9953                 mov     ax, word ptr ds:SECPOS+2
DOSCODE:9956                 cmp     ax, ds:VALSEC+2
DOSCODE:995A                 mov     al, 1
DOSCODE:995C                 ja      short loc_996D
DOSCODE:995E                 jb      short loc_996B
DOSCODE:9960                 mov     ax, word ptr ds:SECPOS
DOSCODE:9963                 cmp     ax, ds:VALSEC
DOSCODE:9967                 mov     al, 1
DOSCODE:9969                 ja      short loc_996D
DOSCODE:996B
DOSCODE:996B loc_996B:                               ; ...
DOSCODE:996B                 xor     al, al
DOSCODE:996D
DOSCODE:996D loc_996D:                               ; ...
DOSCODE:996D                 push    es
DOSCODE:996E                 call    BUFSEC
DOSCODE:9971                 jb      short loc_9916
DOSCODE:9973                 mov     ds, word ptr ds:32Eh
DOSCODE:9977                 shr     cx, 1
DOSCODE:9979                 rep movsw
DOSCODE:997B                 adc     cx, cx
DOSCODE:997D                 rep movsb
DOSCODE:997F                 pop     es
DOSCODE:9980                 lds     bx, ss:CURBUF
DOSCODE:9985                 test    byte ptr [bx+5], 40h
DOSCODE:9989                 jnz     short loc_9994
DOSCODE:998B                 inc     ss:DirtyBufferCount
DOSCODE:9990                 or      byte ptr [bx+5], 40h
DOSCODE:9994
DOSCODE:9994 loc_9994:                               ; ...
DOSCODE:9994                 lea     si, [bx+18h]
DOSCODE:9997                 sub     di, si
DOSCODE:9999                 cmp     di, es:[bp+2]
DOSCODE:999D                 jb      short loc_99A4
DOSCODE:999F                 mov     word ptr ss:BufferQueue, bx
DOSCODE:99A4
DOSCODE:99A4 loc_99A4:                               ; ...
DOSCODE:99A4                 clc
DOSCODE:99A5                 mov     ax, ss
DOSCODE:99A7                 mov     ds, ax
DOSCODE:99A9                 retn
DOSCODE:99A9 BUFWRT          endp
DOSCODE:99A9
DOSCODE:99AA
DOSCODE:99AA ; =============== S U B R O U T I N E =======================================
DOSCODE:99AA
DOSCODE:99AA
DOSCODE:99AA NEXTSEC         proc near               ; ...
DOSCODE:99AA                 test    ds:TRANS, 0FFh
DOSCODE:99AF                 jz      short loc_99EF
DOSCODE:99B1                 mov     al, ds:SECCLUSPOS
DOSCODE:99B4                 inc     al
DOSCODE:99B6                 cmp     al, es:[bp+4]
DOSCODE:99BA                 jbe     short loc_99EC
DOSCODE:99BC                 mov     bx, ds:CLUSNUM_HW
DOSCODE:99C0                 mov     ds:CLUSTNUM_HW, bx
DOSCODE:99C4                 mov     bx, ds:CLUSNUM
DOSCODE:99C8                 call    IsEOF
DOSCODE:99CB                 jnb     short loc_99F1
DOSCODE:99CD                 call    UNPACK
DOSCODE:99D0                 jb      short loc_99F1
DOSCODE:99D2                 push    di
DOSCODE:99D3                 mov     di, ds:CCONTENT_HW
DOSCODE:99D7                 mov     ds:CLUSNUM_HW, di
DOSCODE:99DB                 pop     di
DOSCODE:99DC                 mov     ds:CLUSNUM, di
DOSCODE:99E0                 add     ds:LASTPOS, 1
DOSCODE:99E5                 adc     word ptr ds:0AE2h, 0
DOSCODE:99EA                 mov     al, 0
DOSCODE:99EC
DOSCODE:99EC loc_99EC:                               ; ...
DOSCODE:99EC                 mov     ds:SECCLUSPOS, al
DOSCODE:99EF
DOSCODE:99EF loc_99EF:                               ; ...
DOSCODE:99EF                 clc
DOSCODE:99F0                 retn
DOSCODE:99F1 ; ---------------------------------------------------------------------------
DOSCODE:99F1
DOSCODE:99F1 loc_99F1:                               ; ...
DOSCODE:99F1                 stc
DOSCODE:99F2                 retn
DOSCODE:99F2 NEXTSEC         endp
DOSCODE:99F2
DOSCODE:99F3
DOSCODE:99F3 ; =============== S U B R O U T I N E =======================================
DOSCODE:99F3
DOSCODE:99F3
DOSCODE:99F3 OPTIMIZE        proc near               ; ...
DOSCODE:99F3                 push    dx
DOSCODE:99F4                 push    word ptr ds:0AE8h
DOSCODE:99F8                 push    bx
DOSCODE:99F9                 mov     al, es:[bp+4]
DOSCODE:99FD                 inc     al
DOSCODE:99FF                 mov     ah, al
DOSCODE:9A01                 sub     al, dl
DOSCODE:9A03                 mov     dx, cx
DOSCODE:9A05                 xor     cx, cx
DOSCODE:9A07
DOSCODE:9A07 loc_9A07:                               ; ...
DOSCODE:9A07                 call    UNPACK
DOSCODE:9A0A                 jb      short loc_9A76
DOSCODE:9A0C                 add     cl, al
DOSCODE:9A0E                 adc     ch, 0
DOSCODE:9A11                 cmp     cx, dx
DOSCODE:9A13                 jnb     short loc_9A7B
DOSCODE:9A15                 mov     al, ah
DOSCODE:9A17                 push    di
DOSCODE:9A18                 xor     di, di
DOSCODE:9A1A                 add     bx, 1
DOSCODE:9A1D                 adc     ds:0AE8h, di
DOSCODE:9A21                 mov     di, ds:0AECh
DOSCODE:9A25                 cmp     di, ds:0AE8h
DOSCODE:9A29                 pop     di
DOSCODE:9A2A                 jnz     short loc_9A30
DOSCODE:9A2C                 cmp     di, bx
DOSCODE:9A2E                 jz      short loc_9A07
DOSCODE:9A30
DOSCODE:9A30 loc_9A30:                               ; ...
DOSCODE:9A30                 sub     bx, 1
DOSCODE:9A33                 sbb     word ptr ds:0AE8h, 0
DOSCODE:9A38
DOSCODE:9A38 loc_9A38:                               ; ...
DOSCODE:9A38                 push    bx
DOSCODE:9A39                 add     ds:5BAh, bx
DOSCODE:9A3D                 mov     bx, ds:0AE8h
DOSCODE:9A41                 adc     ds:0AE2h, bx
DOSCODE:9A45                 mov     ds:0ADEh, bx
DOSCODE:9A49                 pop     word ptr ds:5BCh
DOSCODE:9A4D                 sub     dx, cx
DOSCODE:9A4F                 push    dx
DOSCODE:9A50                 mov     ax, cx
DOSCODE:9A52                 mul     word ptr es:[bp+2]
DOSCODE:9A56                 mov     si, ds:5B8h
DOSCODE:9A5A                 add     ax, si
DOSCODE:9A5C                 mov     ds:5B8h, ax
DOSCODE:9A5F                 pop     ax
DOSCODE:9A60                 pop     dx
DOSCODE:9A61                 pop     bx
DOSCODE:9A62                 mov     ds:0AE8h, bx
DOSCODE:9A66                 sub     ds:5BAh, dx
DOSCODE:9A6A                 sbb     ds:0AE2h, bx
DOSCODE:9A6E                 pop     bx
DOSCODE:9A6F                 call    FIGREC
DOSCODE:9A72                 mov     bx, si
DOSCODE:9A74                 clc
DOSCODE:9A75                 retn
DOSCODE:9A76 ; ---------------------------------------------------------------------------
DOSCODE:9A76
DOSCODE:9A76 loc_9A76:                               ; ...
DOSCODE:9A76                 add     sp, 6
DOSCODE:9A79                 stc
DOSCODE:9A7A                 retn
DOSCODE:9A7B ; ---------------------------------------------------------------------------
DOSCODE:9A7B
DOSCODE:9A7B loc_9A7B:                               ; ...
DOSCODE:9A7B                 sub     cx, dx
DOSCODE:9A7D                 sub     ah, cl
DOSCODE:9A7F                 dec     ah
DOSCODE:9A81                 mov     ds:573h, ah
DOSCODE:9A85                 mov     cx, dx
DOSCODE:9A87                 jmp     short loc_9A38
DOSCODE:9A87 OPTIMIZE        endp
DOSCODE:9A87
DOSCODE:9A89
DOSCODE:9A89 ; =============== S U B R O U T I N E =======================================
DOSCODE:9A89
DOSCODE:9A89
DOSCODE:9A89 FIGREC          proc near               ; ...
DOSCODE:9A89                 push    ax
DOSCODE:9A8A                 push    cx
DOSCODE:9A8B                 xor     cx, cx
DOSCODE:9A8D                 mov     cl, es:[bp+5]   ; DPB.CLUSTER_SHIFT
DOSCODE:9A91                 mov     ax, ss:CLUSTNUM_HW
DOSCODE:9A95                 sub     dx, 2
DOSCODE:9A98                 sbb     ax, 0
DOSCODE:9A9B                 jcxz    short loc_9AA4
DOSCODE:9A9D
DOSCODE:9A9D loc_9A9D:                               ; ...
DOSCODE:9A9D                 clc
DOSCODE:9A9E                 rcl     dx, 1
DOSCODE:9AA0                 rcl     ax, 1
DOSCODE:9AA2                 loop    loc_9A9D
DOSCODE:9AA4
DOSCODE:9AA4 loc_9AA4:                               ; ...
DOSCODE:9AA4                 or      dl, bl
DOSCODE:9AA6                 cmp     word ptr es:[bp+0Fh], 0 ; DPB.FAT_SIZE
DOSCODE:9AAB                 jnz     short loc_9AB7  ; not FAT32
DOSCODE:9AAD                 add     dx, es:[bp+29h] ; DPB.FCLUS_FSECTOR
DOSCODE:9AB1                 adc     ax, es:[bp+2Bh]
DOSCODE:9AB5                 jmp     short loc_9ABE
DOSCODE:9AB7 ; ---------------------------------------------------------------------------
DOSCODE:9AB7
DOSCODE:9AB7 loc_9AB7:                               ; ...
DOSCODE:9AB7                 add     dx, es:[bp+0Bh] ; DPB.FIRST_SECTOR
DOSCODE:9ABB                 adc     ax, 0
DOSCODE:9ABE
DOSCODE:9ABE loc_9ABE:                               ; ...
DOSCODE:9ABE                 mov     ss:HIGH_SECTOR, ax
DOSCODE:9AC2                 pop     cx
DOSCODE:9AC3                 pop     ax
DOSCODE:9AC4
DOSCODE:9AC4 locret_9AC4:                            ; ...
DOSCODE:9AC4                 retn
DOSCODE:9AC4 FIGREC          endp
DOSCODE:9AC4
DOSCODE:9AC5
DOSCODE:9AC5 ; =============== S U B R O U T I N E =======================================
DOSCODE:9AC5
DOSCODE:9AC5
DOSCODE:9AC5 callmagic       proc near               ; ...
DOSCODE:9AC5                 push    ds
DOSCODE:9AC6                 push    ss:OffsetMagicPatch
DOSCODE:9ACB                 retf
DOSCODE:9ACB callmagic       endp ; sp-analysis failed
DOSCODE:9ACB
DOSCODE:9ACC ; ---------------------------------------------------------------------------
DOSCODE:9ACC ; START OF FUNCTION CHUNK FOR ALLOCATE
DOSCODE:9ACC
DOSCODE:9ACC alloc_disk_full:                        ; ...
DOSCODE:9ACC                 jmp     Disk_Full_Return
DOSCODE:9ACC ; END OF FUNCTION CHUNK FOR ALLOCATE
DOSCODE:9ACF
DOSCODE:9ACF ; =============== S U B R O U T I N E =======================================
DOSCODE:9ACF
DOSCODE:9ACF
DOSCODE:9ACF ALLOCATE        proc near               ; ...
DOSCODE:9ACF
DOSCODE:9ACF ; FUNCTION CHUNK AT DOSCODE:9ACC SIZE 00000003 BYTES
DOSCODE:9ACF
DOSCODE:9ACF                 clc                     ; COUNT_HW:CX = Number of clusters to allocate
DOSCODE:9AD0                 push    cs
DOSCODE:9AD1                 call    callmagic
DOSCODE:9AD4                 jb      short alloc_disk_full
DOSCODE:9AD6                 push    bx
DOSCODE:9AD7                 xor     bx, bx          ; 0
DOSCODE:9AD9                 push    ds:CLUSTNUM_HW
DOSCODE:9ADD                 mov     ds:CLUSTNUM_HW, bx ; cluster 0
DOSCODE:9AE1                 call    UNPACK
DOSCODE:9AE4                 mov     ds:FATBYT, di   ;
DOSCODE:9AE4                                         ; CCONTENT_HW:DI = content of FAT
DOSCODE:9AE4                                         ;  (for cluster 0)
DOSCODE:9AE8                 mov     bx, ds:CCONTENT_HW
DOSCODE:9AEC                 mov     ds:FATBYT_HW, bx
DOSCODE:9AF0                 pop     ds:CLUSTNUM_HW
DOSCODE:9AF4                 pop     bx
DOSCODE:9AF5                 jb      short locret_9AC4
DOSCODE:9AF7                 push    ds:CCOUNT_HW
DOSCODE:9AFB                 push    cx
DOSCODE:9AFC                 push    ds:CLUSTNUM_HW
DOSCODE:9B00                 push    bx
DOSCODE:9B01                 mov     dx, bx
DOSCODE:9B03                 xor     bx, bx
DOSCODE:9B05                 cmp     es:[bp+0Fh], bx
DOSCODE:9B09                 xchg    bx, ds:CLUSTNUM_HW
DOSCODE:9B0D                 mov     ds:CLUSDATA_HW, bx
DOSCODE:9B11                 mov     bx, es:[bp+1Dh]
DOSCODE:9B15                 jnz     short loc_9B28
DOSCODE:9B17                 mov     bx, es:[bp+3Bh]
DOSCODE:9B1B                 mov     ds:CLUSTNUM_HW, bx
DOSCODE:9B1F                 cmp     bx, 0
DOSCODE:9B22                 mov     bx, es:[bp+39h]
DOSCODE:9B26                 jnz     short loc_9B2B
DOSCODE:9B28
DOSCODE:9B28 loc_9B28:                               ; ...
DOSCODE:9B28                 cmp     bx, 2
DOSCODE:9B2B
DOSCODE:9B2B loc_9B2B:                               ; ...
DOSCODE:9B2B                 ja      short loc_9B4E
DOSCODE:9B2D
DOSCODE:9B2D loc_9B2D:                               ; ...
DOSCODE:9B2D                 xor     bx, bx
DOSCODE:9B2F                 cmp     es:[bp+0Fh], bx
DOSCODE:9B33                 jnz     short loc_9B3F
DOSCODE:9B35                 mov     word ptr es:[bp+39h], 2
DOSCODE:9B3B                 mov     es:[bp+3Bh], bx
DOSCODE:9B3F
DOSCODE:9B3F loc_9B3F:                               ; ...
DOSCODE:9B3F                 mov     ds:CLUSTNUM_HW, bx
DOSCODE:9B43                 mov     word ptr es:[bp+1Dh], 2
DOSCODE:9B49                 inc     bx
DOSCODE:9B4A                 or      es:[bp+18h], bl
DOSCODE:9B4E
DOSCODE:9B4E loc_9B4E:                               ; ...
DOSCODE:9B4E                 add     bx, 1
DOSCODE:9B51                 adc     ds:CLUSTNUM_HW, 0
DOSCODE:9B56                 cmp     word ptr es:[bp+0Fh], 0
DOSCODE:9B5B                 jnz     short loc_9B6F
DOSCODE:9B5D                 push    bx
DOSCODE:9B5E                 mov     bx, ds:CLUSTNUM_HW
DOSCODE:9B62                 cmp     bx, es:[bp+2Fh]
DOSCODE:9B66                 pop     bx
DOSCODE:9B67                 jnz     short loc_9B73
DOSCODE:9B69                 cmp     bx, es:[bp+2Dh]
DOSCODE:9B6D                 jmp     short loc_9B73
DOSCODE:9B6F ; ---------------------------------------------------------------------------
DOSCODE:9B6F
DOSCODE:9B6F loc_9B6F:                               ; ...
DOSCODE:9B6F                 cmp     bx, es:[bp+0Dh]
DOSCODE:9B73
DOSCODE:9B73 loc_9B73:                               ; ...
DOSCODE:9B73                 jbe     short loc_9B78
DOSCODE:9B75                 jmp     loc_9C9B
DOSCODE:9B78 ; ---------------------------------------------------------------------------
DOSCODE:9B78
DOSCODE:9B78 loc_9B78:                               ; ...
DOSCODE:9B78                 push    cx
DOSCODE:9B79                 push    ds:CCOUNT_HW
DOSCODE:9B7D                 push    bx
DOSCODE:9B7E                 push    ds:CLUSTNUM_HW
DOSCODE:9B82                 push    dx
DOSCODE:9B83                 push    ds:CLUSDATA_HW
DOSCODE:9B87                 call    UNPACK
DOSCODE:9B8A                 pop     ds:CLUSDATA_HW
DOSCODE:9B8E                 pop     dx
DOSCODE:9B8F                 pop     ds:CLUSTNUM_HW
DOSCODE:9B93                 pop     bx
DOSCODE:9B94                 pop     ds:CCOUNT_HW
DOSCODE:9B98                 pop     cx
DOSCODE:9B99                 jnb     short loc_9B9E
DOSCODE:9B9B                 jmp     loc_9C54
DOSCODE:9B9E ; ---------------------------------------------------------------------------
DOSCODE:9B9E
DOSCODE:9B9E loc_9B9E:                               ; ...
DOSCODE:9B9E                 jnz     short loc_9B4E
DOSCODE:9BA0                 mov     es:[bp+1Dh], bx
DOSCODE:9BA4                 cmp     word ptr es:[bp+0Fh], 0
DOSCODE:9BA9                 jnz     short loc_9BB9
DOSCODE:9BAB                 push    bx
DOSCODE:9BAC                 mov     bx, ds:CLUSTNUM_HW
DOSCODE:9BB0                 mov     es:[bp+3Bh], bx
DOSCODE:9BB4                 pop     bx
DOSCODE:9BB5                 mov     es:[bp+39h], bx
DOSCODE:9BB9
DOSCODE:9BB9 loc_9BB9:                               ; ...
DOSCODE:9BB9                 or      byte ptr es:[bp+18h], 1
DOSCODE:9BBE                 push    cx
DOSCODE:9BBF                 push    ds:CCOUNT_HW
DOSCODE:9BC3                 push    bx
DOSCODE:9BC4                 push    ds:CLUSTNUM_HW
DOSCODE:9BC8                 push    dx
DOSCODE:9BC9                 push    ds:CLUSDATA_HW
DOSCODE:9BCD                 xor     dx, dx
DOSCODE:9BCF                 mov     ds:CLUSDATA_HW, dx
DOSCODE:9BD3                 inc     dx
DOSCODE:9BD4                 call    PACK
DOSCODE:9BD7                 pop     ds:CLUSTNUM_HW
DOSCODE:9BDB                 pop     bx
DOSCODE:9BDC                 pop     ds:CLUSDATA_HW
DOSCODE:9BE0                 pop     dx
DOSCODE:9BE1                 pop     word ptr ds:0AF0h
DOSCODE:9BE5                 pop     cx
DOSCODE:9BE6                 jb      short loc_9C54
DOSCODE:9BE8                 push    ax
DOSCODE:9BE9                 xor     ax, ax
DOSCODE:9BEB                 cmp     es:[bp+0Fh], ax
DOSCODE:9BEF                 jnz     short loc_9C08
DOSCODE:9BF1                 dec     ax
DOSCODE:9BF2                 cmp     es:[bp+21h], ax
DOSCODE:9BF6                 jnz     short loc_9BFC
DOSCODE:9BF8                 cmp     es:[bp+1Fh], ax
DOSCODE:9BFC
DOSCODE:9BFC loc_9BFC:                               ; ...
DOSCODE:9BFC                 jz      short loc_9C13
DOSCODE:9BFE                 add     es:[bp+1Fh], ax
DOSCODE:9C02                 adc     es:[bp+21h], ax
DOSCODE:9C06                 jmp     short loc_9C13
DOSCODE:9C08 ; ---------------------------------------------------------------------------
DOSCODE:9C08
DOSCODE:9C08 loc_9C08:                               ; ...
DOSCODE:9C08                 dec     ax
DOSCODE:9C09                 cmp     es:[bp+1Fh], ax
DOSCODE:9C0D                 jz      short loc_9C13
DOSCODE:9C0F                 dec     word ptr es:[bp+1Fh]
DOSCODE:9C13
DOSCODE:9C13 loc_9C13:                               ; ...
DOSCODE:9C13                 pop     ax
DOSCODE:9C14                 push    cx
DOSCODE:9C15                 push    ds:CCOUNT_HW
DOSCODE:9C19                 push    dx
DOSCODE:9C1A                 push    ds:CLUSDATA_HW
DOSCODE:9C1E                 call    PACK
DOSCODE:9C21                 pop     ds:CLUSTNUM_HW
DOSCODE:9C25                 pop     bx
DOSCODE:9C26                 pop     ds:CCOUNT_HW
DOSCODE:9C2A                 pop     cx
DOSCODE:9C2B                 jb      short loc_9C54
DOSCODE:9C2D                 mov     dx, ds:CLUSTNUM_HW
DOSCODE:9C31                 mov     ds:CLUSDATA_HW, dx
DOSCODE:9C35                 mov     dx, bx
DOSCODE:9C37                 sub     cx, 1
DOSCODE:9C3A                 sbb     word ptr ds:0AF0h, 0
DOSCODE:9C3F                 cmp     cx, ds:0AF0h
DOSCODE:9C43                 jnz     short loc_9C47
DOSCODE:9C45                 jcxz    short loc_9C4A
DOSCODE:9C47
DOSCODE:9C47 loc_9C47:                               ; ...
DOSCODE:9C47                 jmp     loc_9B4E
DOSCODE:9C4A ; ---------------------------------------------------------------------------
DOSCODE:9C4A
DOSCODE:9C4A loc_9C4A:                               ; ...
DOSCODE:9C4A                 mov     dx, 0FFFFh
DOSCODE:9C4D                 mov     ds:CLUSDATA_HW, dx
DOSCODE:9C51                 call    PACK
DOSCODE:9C54
DOSCODE:9C54 loc_9C54:                               ; ...
DOSCODE:9C54                 pop     bx
DOSCODE:9C55                 pop     ds:CLUSTNUM_HW
DOSCODE:9C59                 pop     cx
DOSCODE:9C5A                 pop     ds:CCOUNT_HW
DOSCODE:9C5E                 jnb     short loc_9C61
DOSCODE:9C60
DOSCODE:9C60 locret_9C60:                            ; ...
DOSCODE:9C60                 retn
DOSCODE:9C61 ; ---------------------------------------------------------------------------
DOSCODE:9C61
DOSCODE:9C61 loc_9C61:                               ; ...
DOSCODE:9C61                 call    UNPACK
DOSCODE:9C64                 jb      short locret_9C60
DOSCODE:9C66                 call    RESTFATBYT
DOSCODE:9C69                 jb      short locret_9C60
DOSCODE:9C6B                 push    ax
DOSCODE:9C6C                 mov     ax, ds:CCONTENT_HW
DOSCODE:9C6F                 xchg    ax, ds:CLUSTNUM_HW
DOSCODE:9C73                 xchg    bx, di
DOSCODE:9C75                 or      ax, di
DOSCODE:9C77                 pop     ax
DOSCODE:9C78                 jnz     short locret_9C60
DOSCODE:9C7A                 push    dx
DOSCODE:9C7B                 mov     dx, es
DOSCODE:9C7D                 les     di, ds:THISSFT
DOSCODE:9C81                 push    bx
DOSCODE:9C82                 mov     bx, ds:CLUSTNUM_HW
DOSCODE:9C86                 mov     es:[di+2Dh], bx
DOSCODE:9C8A                 mov     es:[di+37h], bx
DOSCODE:9C8E                 pop     bx
DOSCODE:9C8F                 mov     es:[di+2Bh], bx
DOSCODE:9C93                 mov     es:[di+35h], bx
DOSCODE:9C97                 mov     es, dx
DOSCODE:9C99                 pop     dx
DOSCODE:9C9A                 retn
DOSCODE:9C9B ; ---------------------------------------------------------------------------
DOSCODE:9C9B
DOSCODE:9C9B loc_9C9B:                               ; ...
DOSCODE:9C9B                 cmp     word ptr es:[bp+0Fh], 0
DOSCODE:9CA0                 jz      short loc_9CA9
DOSCODE:9CA2                 cmp     word ptr es:[bp+1Dh], 2
DOSCODE:9CA7                 jmp     short loc_9CB5
DOSCODE:9CA9 ; ---------------------------------------------------------------------------
DOSCODE:9CA9
DOSCODE:9CA9 loc_9CA9:                               ; ...
DOSCODE:9CA9                 cmp     word ptr es:[bp+3Bh], 0
DOSCODE:9CAE                 jnz     short loc_9CB5
DOSCODE:9CB0                 cmp     word ptr es:[bp+39h], 2
DOSCODE:9CB5
DOSCODE:9CB5 loc_9CB5:                               ; ...
DOSCODE:9CB5                 jz      short loc_9CBA
DOSCODE:9CB7                 jmp     loc_9B2D
DOSCODE:9CBA ; ---------------------------------------------------------------------------
DOSCODE:9CBA
DOSCODE:9CBA loc_9CBA:                               ; ...
DOSCODE:9CBA                 pop     bx
DOSCODE:9CBB                 mov     dx, 0FFFFh      ; -1
DOSCODE:9CBE                 mov     ds:CLUSDATA_HW, dx
DOSCODE:9CC2                 pop     ds:CLUSTNUM_HW
DOSCODE:9CC6                 call    RELBLKS
DOSCODE:9CC9                 pop     ax
DOSCODE:9CCA                 pop     ds:CLUSTERS_HW
DOSCODE:9CCE                 sub     ax, cx
DOSCODE:9CD0                 sbb     ds:CLUSTERS_HW, 0
DOSCODE:9CD5                 call    RESTFATBYT
DOSCODE:9CD8
DOSCODE:9CD8 Disk_Full_Return:                       ; ...
DOSCODE:9CD8                 mov     ds:DISK_FULL, 1
DOSCODE:9CDD                 stc
DOSCODE:9CDE                 retn
DOSCODE:9CDE ALLOCATE        endp
DOSCODE:9CDE
DOSCODE:9CDF
DOSCODE:9CDF ; =============== S U B R O U T I N E =======================================
DOSCODE:9CDF
DOSCODE:9CDF
DOSCODE:9CDF RESTFATBYT      proc near               ; ...
DOSCODE:9CDF                 push    bx
DOSCODE:9CE0                 push    dx
DOSCODE:9CE1                 push    di
DOSCODE:9CE2                 xor     bx, bx
DOSCODE:9CE4                 push    ds:CLUSTNUM_HW
DOSCODE:9CE8                 push    ds:CLUSDATA_HW
DOSCODE:9CEC                 push    ds:CCONTENT_HW
DOSCODE:9CF0                 mov     ds:CLUSTNUM_HW, bx
DOSCODE:9CF4                 mov     dx, ds:FATBYT_HW
DOSCODE:9CF8                 mov     ds:CLUSDATA_HW, dx
DOSCODE:9CFC                 mov     dx, ds:FATBYT
DOSCODE:9D00                 call    PACK
DOSCODE:9D03                 pop     ds:CCONTENT_HW
DOSCODE:9D07                 pop     ds:CLUSDATA_HW
DOSCODE:9D0B                 pop     ds:CLUSTNUM_HW
DOSCODE:9D0F                 pop     di
DOSCODE:9D10                 pop     dx
DOSCODE:9D11                 pop     bx
DOSCODE:9D12                 retn
DOSCODE:9D12 RESTFATBYT      endp
DOSCODE:9D12
DOSCODE:9D13
DOSCODE:9D13 ; =============== S U B R O U T I N E =======================================
DOSCODE:9D13
DOSCODE:9D13
DOSCODE:9D13 RELEASE         proc near               ; ...
DOSCODE:9D13                 xor     dx, dx
DOSCODE:9D15                 mov     ds:CLUSDATA_HW, dx ; (dx = 0, release)
DOSCODE:9D15 RELEASE         endp
DOSCODE:9D15
DOSCODE:9D19
DOSCODE:9D19 ; =============== S U B R O U T I N E =======================================
DOSCODE:9D19
DOSCODE:9D19
DOSCODE:9D19 RELBLKS         proc near               ; ...
DOSCODE:9D19                 call    UNPACK
DOSCODE:9D1C                 jbe     short RET12
DOSCODE:9D1E                 mov     ax, di          ; CCONTENT_HW:DI= Content of FAT
DOSCODE:9D1E                                         ;  for given cluster (next cluster)
DOSCODE:9D20                 push    dx
DOSCODE:9D21                 push    ax
DOSCODE:9D22                 call    PACK
DOSCODE:9D25                 pop     ax
DOSCODE:9D26                 mov     dx, ds:CCONTENT_HW
DOSCODE:9D2A                 mov     ds:CLUSTNUM_HW, dx ; next cluster (hw) to be released
DOSCODE:9D2E                 mov     bx, ax          ; next cluster (lw) to be released
DOSCODE:9D30                 pop     dx
DOSCODE:9D31                 jb      short RET12
DOSCODE:9D33                 or      dx, dx          ; 0 (delete/release) or -1 (EOF)
DOSCODE:9D35                 jnz     short NO_DEALLOC ; Was putting EOF mark (dx = -1)
DOSCODE:9D37                 cmp     dx, ds:CLUSDATA_HW ; > 0 ? (delete, release)
DOSCODE:9D3B                 jnz     short NO_DEALLOC ; no, EOF (allocate, -1), (dx = 0)
DOSCODE:9D3D                 cmp     word ptr es:[bp+1Fh], 0FFFFh ; [ES:BP+DPB.FREE_CNT],-1
DOSCODE:9D3D                                         ; Free count valid?
DOSCODE:9D42                 jz      short NO_DEALLOC ; No (dx = 0)
DOSCODE:9D44
DOSCODE:9D44 relblks_ifc:                            ; ...
DOSCODE:9D44                 inc     word ptr es:[bp+1Fh] ; [ES:BP+DPB.FREE_CNT]
DOSCODE:9D44                                         ; Increase free count by 1
DOSCODE:9D48                 jnz     short NO_DEALLOC2
DOSCODE:9D4A                 cmp     es:[bp+0Fh], dx ; [ES:BP+DPB.FAT_SIZE]
DOSCODE:9D4E                 jnz     short NO_DEALLOC2 ; not FAT32
DOSCODE:9D50                 inc     word ptr es:[bp+21h] ; [ES:BP+DPB.FREE_CNT+2]
DOSCODE:9D54                 jmp     short NO_DEALLOC2
DOSCODE:9D56 ; ---------------------------------------------------------------------------
DOSCODE:9D56
DOSCODE:9D56 NO_DEALLOC:                             ; ...
DOSCODE:9D56                 cmp     es:[bp+0Fh], dx ; dx is -1 or 0
DOSCODE:9D56                                         ;  (valid 16 bit fat size is another number)
DOSCODE:9D5A                 jnz     short NO_DEALLOC2 ; FAT (FAT16 or FAT12)
DOSCODE:9D5A                                         ; dx = 0, FAT32
DOSCODE:9D5C                 cmp     word ptr es:[bp+21h], 0FFFFh ; [ES:BP+DPB.FREE_CNT+2]
DOSCODE:9D61                 jnz     short relblks_ifc ; BUGGY ! Erdogan Tan - 31/01/2024
DOSCODE:9D61                                         ; (Windows ME 'RELEASE' code is correct)
DOSCODE:9D61                                         ; ((Windows ME IO.SYS - BIOSCODE:C2BBh))
DOSCODE:9D63
DOSCODE:9D63 NO_DEALLOC2:                            ; ...
DOSCODE:9D63                 cmp     ds:CLUSTNUM_HW, 0
DOSCODE:9D68                 jnz     short NO_DEALLOC3
DOSCODE:9D6A                 dec     ax
DOSCODE:9D6B                 jz      short RET12
DOSCODE:9D6D
DOSCODE:9D6D NO_DEALLOC3:                            ; ...
DOSCODE:9D6D                 call    IsEOF
DOSCODE:9D70                 jb      short RELEASE
DOSCODE:9D72
DOSCODE:9D72 RET12:                                  ; ...
DOSCODE:9D72                 retn
DOSCODE:9D72 RELBLKS         endp
DOSCODE:9D72
DOSCODE:9D73 ; ---------------------------------------------------------------------------
DOSCODE:9D73 ; START OF FUNCTION CHUNK FOR GETEOF
DOSCODE:9D73
DOSCODE:9D73 GETEOF1:                                ; ...
DOSCODE:9D73                 mov     di, ax
DOSCODE:9D75                 mov     ds:CLUSTERS_HW, dx ; CLUSTERS_HW:DI = Cluster Count
DOSCODE:9D79                 pop     ax
DOSCODE:9D7A                 pop     dx
DOSCODE:9D7B                 retn
DOSCODE:9D7B ; END OF FUNCTION CHUNK FOR GETEOF
DOSCODE:9D7C
DOSCODE:9D7C ; =============== S U B R O U T I N E =======================================
DOSCODE:9D7C
DOSCODE:9D7C
DOSCODE:9D7C GETEOF          proc near               ; ...
DOSCODE:9D7C
DOSCODE:9D7C ; FUNCTION CHUNK AT DOSCODE:9D73 SIZE 00000009 BYTES
DOSCODE:9D7C
DOSCODE:9D7C                 push    dx
DOSCODE:9D7D                 push    ax
DOSCODE:9D7E                 xor     dx, dx
DOSCODE:9D80                 xor     ax, ax
DOSCODE:9D82
DOSCODE:9D82 GETEOF2:                                ; ...
DOSCODE:9D82                 call    UNPACK
DOSCODE:9D85                 jb      short GETEOF1
DOSCODE:9D87                 inc     ax
DOSCODE:9D88                 jnz     short GETEOF3
DOSCODE:9D8A                 inc     dx
DOSCODE:9D8B
DOSCODE:9D8B GETEOF3:                                ; ...
DOSCODE:9D8B                 push    bx
DOSCODE:9D8C                 push    ds:CLUSTNUM_HW
DOSCODE:9D90                 mov     bx, ds:CCONTENT_HW
DOSCODE:9D94                 mov     ds:CLUSTNUM_HW, bx
DOSCODE:9D98                 mov     bx, di
DOSCODE:9D9A                 call    IsEOF
DOSCODE:9D9D                 pop     ds:CLUSTNUM_HW
DOSCODE:9DA1                 pop     bx
DOSCODE:9DA2                 jnb     short GETEOF1   ; EOF
DOSCODE:9DA4                 mov     bx, ds:CCONTENT_HW ; not EOF
DOSCODE:9DA8                 mov     ds:CLUSTNUM_HW, bx
DOSCODE:9DAC                 mov     bx, di
DOSCODE:9DAE                 jmp     short GETEOF2   ; get next cluster
DOSCODE:9DAE GETEOF          endp
DOSCODE:9DAE
DOSCODE:9DB0
DOSCODE:9DB0 ; =============== S U B R O U T I N E =======================================
DOSCODE:9DB0
DOSCODE:9DB0
DOSCODE:9DB0 MAKEFCB         proc near               ; ...
DOSCODE:9DB0                 xor     dl, dl
DOSCODE:9DB2                 mov     ss:SpaceFlag, dl
DOSCODE:9DB7                 test    al, 2
DOSCODE:9DB9                 jnz     short loc_9DBE
DOSCODE:9DBB                 mov     es:[di], dl
DOSCODE:9DBE
DOSCODE:9DBE loc_9DBE:                               ; ...
DOSCODE:9DBE                 inc     di
DOSCODE:9DBF                 mov     cx, 8
DOSCODE:9DC2                 test    al, 4
DOSCODE:9DC4                 xchg    ax, bx
DOSCODE:9DC5                 mov     al, 20h ; ' '
DOSCODE:9DC7                 jz      short loc_9DCD
DOSCODE:9DC9                 add     di, cx
DOSCODE:9DCB                 xor     cx, cx
DOSCODE:9DCD
DOSCODE:9DCD loc_9DCD:                               ; ...
DOSCODE:9DCD                 rep stosb
DOSCODE:9DCF                 mov     cl, 3
DOSCODE:9DD1                 test    bl, 8
DOSCODE:9DD4                 jz      short loc_9DDA
DOSCODE:9DD6
DOSCODE:9DD6 loc_9DD6:
DOSCODE:9DD6                 add     di, cx
DOSCODE:9DD8                 xor     cx, cx
DOSCODE:9DDA
DOSCODE:9DDA loc_9DDA:                               ; ...
DOSCODE:9DDA                 rep stosb
DOSCODE:9DDC                 xchg    ax, cx
DOSCODE:9DDD                 stosw
DOSCODE:9DDE                 stosw
DOSCODE:9DDF                 sub     di, 10h
DOSCODE:9DE2                 test    bl, 1
DOSCODE:9DE5                 jz      short loc_9DF0
DOSCODE:9DE7                 call    sub_9E74
DOSCODE:9DEA                 call    sub_9F0D
DOSCODE:9DED                 jnz     short loc_9DF3
DOSCODE:9DEF                 inc     si
DOSCODE:9DF0
DOSCODE:9DF0 loc_9DF0:                               ; ...
DOSCODE:9DF0                 call    sub_9E74
DOSCODE:9DF3
DOSCODE:9DF3 loc_9DF3:                               ; ...
DOSCODE:9DF3                 call    sub_9EE4
DOSCODE:9DF6                 jbe     short loc_9E16
DOSCODE:9DF8                 cmp     byte ptr [si], 3Ah ; ':'
DOSCODE:9DFB                 jnz     short loc_9E16
DOSCODE:9DFD                 inc     si
DOSCODE:9DFE                 sub     al, 40h ; '@'
DOSCODE:9E00                 jbe     short loc_9E11
DOSCODE:9E02                 push    ax
DOSCODE:9E03                 call    GetVisDrv
DOSCODE:9E06                 pop     ax
DOSCODE:9E07                 jnb     short loc_9E13
DOSCODE:9E09                 cmp     byte ptr ss:610h, 1Ah
DOSCODE:9E0F                 jz      short loc_9E13
DOSCODE:9E11
DOSCODE:9E11 loc_9E11:                               ; ...
DOSCODE:9E11                 mov     dl, 0FFh
DOSCODE:9E13
DOSCODE:9E13 loc_9E13:                               ; ...
DOSCODE:9E13                 stosb
DOSCODE:9E14                 inc     si
DOSCODE:9E15                 dec     di
DOSCODE:9E16
DOSCODE:9E16 loc_9E16:                               ; ...
DOSCODE:9E16                 dec     si
DOSCODE:9E17                 inc     di
DOSCODE:9E17 MAKEFCB         endp
DOSCODE:9E17
DOSCODE:9E18
DOSCODE:9E18 ; =============== S U B R O U T I N E =======================================
DOSCODE:9E18
DOSCODE:9E18
DOSCODE:9E18 NORMSCAN        proc near               ; ...
DOSCODE:9E18                 mov     cx, 8
DOSCODE:9E1B                 call    sub_9E42
DOSCODE:9E1E                 cmp     byte ptr [si], 2Eh ; '.'
DOSCODE:9E21                 jnz     short loc_9E34
DOSCODE:9E23                 inc     si
DOSCODE:9E24                 mov     cx, 3
DOSCODE:9E27                 test    byte ptr ss:612h, 1
DOSCODE:9E2D                 jz      short loc_9E31
DOSCODE:9E2F                 movsb
DOSCODE:9E30                 dec     cx
DOSCODE:9E31
DOSCODE:9E31 loc_9E31:                               ; ...
DOSCODE:9E31                 call    sub_9E48
DOSCODE:9E34
DOSCODE:9E34 loc_9E34:                               ; ...
DOSCODE:9E34                 mov     al, dl
DOSCODE:9E36                 and     ss:DOS34_FLAG, 0FEFFh
DOSCODE:9E3D                 retn
DOSCODE:9E3D NORMSCAN        endp
DOSCODE:9E3D
DOSCODE:9E3E ; ---------------------------------------------------------------------------
DOSCODE:9E3E ; START OF FUNCTION CHUNK FOR sub_9E42
DOSCODE:9E3E
DOSCODE:9E3E loc_9E3E:                               ; ...
DOSCODE:9E3E                 add     di, cx
DOSCODE:9E40                 dec     si
DOSCODE:9E41                 retn
DOSCODE:9E41 ; END OF FUNCTION CHUNK FOR sub_9E42
DOSCODE:9E42
DOSCODE:9E42 ; =============== S U B R O U T I N E =======================================
DOSCODE:9E42
DOSCODE:9E42
DOSCODE:9E42 sub_9E42        proc near               ; ...
DOSCODE:9E42
DOSCODE:9E42 ; FUNCTION CHUNK AT DOSCODE:9E3E SIZE 00000004 BYTES
DOSCODE:9E42
DOSCODE:9E42                 call    sub_9EE4
DOSCODE:9E45                 jbe     short loc_9E3E
DOSCODE:9E47                 dec     si
DOSCODE:9E47 sub_9E42        endp
DOSCODE:9E47
DOSCODE:9E48
DOSCODE:9E48 ; =============== S U B R O U T I N E =======================================
DOSCODE:9E48
DOSCODE:9E48
DOSCODE:9E48 sub_9E48        proc near               ; ...
DOSCODE:9E48                 call    sub_9EE4
DOSCODE:9E4B                 jnz     short loc_9E59
DOSCODE:9E4D                 test    byte ptr ss:34Eh, 0FFh
DOSCODE:9E53                 jz      short loc_9E6E
DOSCODE:9E55                 cmp     al, 20h ; ' '
DOSCODE:9E57                 jnz     short loc_9E6E
DOSCODE:9E59
DOSCODE:9E59 loc_9E59:                               ; ...
DOSCODE:9E59                 jcxz    short sub_9E48
DOSCODE:9E5B                 dec     cx
DOSCODE:9E5C                 cmp     al, 2Ah ; '*'
DOSCODE:9E5E                 jnz     short loc_9E64
DOSCODE:9E60                 mov     al, 3Fh ; '?'
DOSCODE:9E62                 rep stosb
DOSCODE:9E64
DOSCODE:9E64 loc_9E64:                               ; ...
DOSCODE:9E64                 stosb
DOSCODE:9E65                 cmp     al, 3Fh ; '?'
DOSCODE:9E67                 jnz     short sub_9E48
DOSCODE:9E69                 or      dl, 1
DOSCODE:9E6C                 jmp     short sub_9E48
DOSCODE:9E6E ; ---------------------------------------------------------------------------
DOSCODE:9E6E
DOSCODE:9E6E loc_9E6E:                               ; ...
DOSCODE:9E6E                 mov     al, 20h ; ' '
DOSCODE:9E70                 rep stosb
DOSCODE:9E72                 dec     si
DOSCODE:9E73                 retn
DOSCODE:9E73 sub_9E48        endp
DOSCODE:9E73
DOSCODE:9E74
DOSCODE:9E74 ; =============== S U B R O U T I N E =======================================
DOSCODE:9E74
DOSCODE:9E74
DOSCODE:9E74 sub_9E74        proc near               ; ...
DOSCODE:9E74                 lodsb
DOSCODE:9E75                 call    sub_9F15
DOSCODE:9E78                 jz      short sub_9E74
DOSCODE:9E7A                 dec     si
DOSCODE:9E7B
DOSCODE:9E7B locret_9E7B:                            ; ...
DOSCODE:9E7B                 retn
DOSCODE:9E7B sub_9E74        endp
DOSCODE:9E7B
DOSCODE:9E7C
DOSCODE:9E7C ; =============== S U B R O U T I N E =======================================
DOSCODE:9E7C
DOSCODE:9E7C
DOSCODE:9E7C NameTrans       proc near               ; ...
DOSCODE:9E7C                 mov     ss:SpaceFlag, 1
DOSCODE:9E82                 push    ss
DOSCODE:9E83                 pop     es
DOSCODE:9E84                 mov     di, offset NAME1
DOSCODE:9E87                 push    di
DOSCODE:9E88                 mov     al, 20h ; ' '
DOSCODE:9E8A                 mov     cx, 11
DOSCODE:9E8D                 rep stosb
DOSCODE:9E8F                 xchg    ax, cx
DOSCODE:9E90                 cwd
DOSCODE:9E91                 stosb
DOSCODE:9E92                 pop     di
DOSCODE:9E93                 call    NORMSCAN
DOSCODE:9E96                 cmp     ss:NAME1, 0E5h
DOSCODE:9E9C                 jnz     short locret_9E7B
DOSCODE:9E9E                 mov     ss:NAME1, 5     ; Magic name translation
DOSCODE:9EA4                 retn
DOSCODE:9EA4 NameTrans       endp
DOSCODE:9EA4
DOSCODE:9EA4 ; ---------------------------------------------------------------------------
DOSCODE:9EA5 CharType        db  66h, 66h, 66h, 66h,   6, 66h, 66h, 66h ; ...
DOSCODE:9EA5                 db  66h, 66h, 66h, 66h, 66h, 66h, 66h, 66h
DOSCODE:9EA5                 db 0F8h,0F6h,0FFh,0FFh,0FFh, 4Fh,0F4h, 6Eh
DOSCODE:9EA5                 db 0FFh,0FFh,0FFh,0FFh,0FFh, 44h, 44h,0F4h
DOSCODE:9EA5                 db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
DOSCODE:9EA5                 db 0FFh,0FFh,0FFh,0FFh,0FFh, 6Fh, 66h,0FFh
DOSCODE:9EA5                 db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
DOSCODE:9EA5                 db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0F4h
DOSCODE:9EE4
DOSCODE:9EE4 ; =============== S U B R O U T I N E =======================================
DOSCODE:9EE4
DOSCODE:9EE4
DOSCODE:9EE4 sub_9EE4        proc near               ; ...
DOSCODE:9EE4                 lodsb
DOSCODE:9EE4 sub_9EE4        endp
DOSCODE:9EE4
DOSCODE:9EE5
DOSCODE:9EE5 ; =============== S U B R O U T I N E =======================================
DOSCODE:9EE5
DOSCODE:9EE5
DOSCODE:9EE5 UCase           proc near               ; ...
DOSCODE:9EE5                 push    bx
DOSCODE:9EE6                 mov     bx, offset FILE_UCASE_TAB_2
DOSCODE:9EE9
DOSCODE:9EE9 loc_9EE9:                               ; ...
DOSCODE:9EE9                 cmp     al, 61h ; 'a'
DOSCODE:9EEB                 jb      short loc_9F01
DOSCODE:9EED                 cmp     al, 7Ah ; 'z'
DOSCODE:9EEF                 ja      short loc_9EF3
DOSCODE:9EF1                 sub     al, 20h ; ' '
DOSCODE:9EF3
DOSCODE:9EF3 loc_9EF3:                               ; ...
DOSCODE:9EF3                 cmp     al, 80h
DOSCODE:9EF5                 jb      short loc_9F01
DOSCODE:9EF7                 sub     al, 80h
DOSCODE:9EF9                 push    ds
DOSCODE:9EFA                 mov     ds, cs:DosDSeg
DOSCODE:9EFF                 xlat
DOSCODE:9F00                 pop     ds
DOSCODE:9F01
DOSCODE:9F01 loc_9F01:                               ; ...
DOSCODE:9F01                 push    ax
DOSCODE:9F02                 call    GetCharType
DOSCODE:9F05                 test    al, 1
DOSCODE:9F07                 pop     ax
DOSCODE:9F08                 pop     bx
DOSCODE:9F09                 retn
DOSCODE:9F09 UCase           endp
DOSCODE:9F09
DOSCODE:9F0A
DOSCODE:9F0A ; =============== S U B R O U T I N E =======================================
DOSCODE:9F0A
DOSCODE:9F0A
DOSCODE:9F0A GETLET3         proc near               ; ...
DOSCODE:9F0A                 push    bx
DOSCODE:9F0B                 jmp     short loc_9EE9
DOSCODE:9F0B GETLET3         endp
DOSCODE:9F0B
DOSCODE:9F0D
DOSCODE:9F0D ; =============== S U B R O U T I N E =======================================
DOSCODE:9F0D
DOSCODE:9F0D
DOSCODE:9F0D sub_9F0D        proc near               ; ...
DOSCODE:9F0D                 push    ax
DOSCODE:9F0E                 call    GetCharType
DOSCODE:9F11                 test    al, 2
DOSCODE:9F13                 pop     ax
DOSCODE:9F14                 retn
DOSCODE:9F14 sub_9F0D        endp
DOSCODE:9F14
DOSCODE:9F15
DOSCODE:9F15 ; =============== S U B R O U T I N E =======================================
DOSCODE:9F15
DOSCODE:9F15
DOSCODE:9F15 sub_9F15        proc near               ; ...
DOSCODE:9F15                 push    ax
DOSCODE:9F16                 call    GetCharType
DOSCODE:9F19                 test    al, 4
DOSCODE:9F1B                 pop     ax
DOSCODE:9F1C                 retn
DOSCODE:9F1C sub_9F15        endp
DOSCODE:9F1C
DOSCODE:9F1D
DOSCODE:9F1D ; =============== S U B R O U T I N E =======================================
DOSCODE:9F1D
DOSCODE:9F1D
DOSCODE:9F1D GetCharType     proc near               ; ...
DOSCODE:9F1D                 cmp     al, 7Eh         ; CharType_last ; beyond end of table?
DOSCODE:9F1F                 jnb     short gct_90
DOSCODE:9F21                 push    bx
DOSCODE:9F22                 mov     bx, offset CharType ; load lookup table
DOSCODE:9F25                 shr     al, 1           ; adjust for half-byte table entry size
DOSCODE:9F27                 xlat    byte ptr cs:[bx] ; get flags
DOSCODE:9F29                 pop     bx
DOSCODE:9F2A                 jnb     short gct_80    ; carry clear, no shift needed
DOSCODE:9F2C                 push    cx
DOSCODE:9F2D                 mov     cl, 4           ; we want high nibble, shift it down
DOSCODE:9F2F                 shr     al, cl
DOSCODE:9F31                 pop     cx
DOSCODE:9F32
DOSCODE:9F32 gct_80:                                 ; ...
DOSCODE:9F32                 and     al, 0Fh         ; clear the unused nibble
DOSCODE:9F34                 retn
DOSCODE:9F35 ; ---------------------------------------------------------------------------
DOSCODE:9F35
DOSCODE:9F35 gct_90:                                 ; ...
DOSCODE:9F35                 mov     al, 0Fh         ; set all flags
DOSCODE:9F37                 retn
DOSCODE:9F37 GetCharType     endp
DOSCODE:9F37
DOSCODE:9F38
DOSCODE:9F38 ; =============== S U B R O U T I N E =======================================
DOSCODE:9F38
DOSCODE:9F38
DOSCODE:9F38 PATHCHRCMP      proc near               ; ...
DOSCODE:9F38                 cmp     al, 2Fh ; '/'
DOSCODE:9F3A                 jbe     short loc_9F42
DOSCODE:9F3C                 cmp     al, 5Ch ; '\'
DOSCODE:9F3E                 retn
DOSCODE:9F3F ; ---------------------------------------------------------------------------
DOSCODE:9F3F
DOSCODE:9F3F loc_9F3F:                               ; ...
DOSCODE:9F3F                 mov     al, 5Ch ; '\'
DOSCODE:9F41                 retn
DOSCODE:9F42 ; ---------------------------------------------------------------------------
DOSCODE:9F42
DOSCODE:9F42 loc_9F42:                               ; ...
DOSCODE:9F42                 jz      short loc_9F3F
DOSCODE:9F44                 retn
DOSCODE:9F44 PATHCHRCMP      endp
DOSCODE:9F44
DOSCODE:9F44 ; ---------------------------------------------------------------------------
DOSCODE:9F45 LowInt23Addr    dw offset LowInt23      ; ...
DOSCODE:9F47 LowInt23_SEG    dw 0                    ; ...
DOSCODE:9F49 LowInt24Addr    dw offset LowInt24      ; ...
DOSCODE:9F4B LowInt24_SEG    dw 0                    ; ...
DOSCODE:9F4D LowInt28Addr    dw offset LowInt28      ; ...
DOSCODE:9F4F LowInt28_SEG    dw 0                    ; ...
DOSCODE:9F51
DOSCODE:9F51 ; =============== S U B R O U T I N E =======================================
DOSCODE:9F51
DOSCODE:9F51
DOSCODE:9F51 DSKSTATCHK      proc near               ; ...
DOSCODE:9F51                 cmp     ss:INDOS, 1
DOSCODE:9F57                 jz      short loc_9F5A
DOSCODE:9F59                 retn
DOSCODE:9F5A ; ---------------------------------------------------------------------------
DOSCODE:9F5A
DOSCODE:9F5A loc_9F5A:                               ; ...
DOSCODE:9F5A                 push    cx
DOSCODE:9F5B                 push    es
DOSCODE:9F5C                 push    bx
DOSCODE:9F5D                 push    ds
DOSCODE:9F5E                 push    si
DOSCODE:9F5F                 mov     bx, ss
DOSCODE:9F61                 mov     es, bx
DOSCODE:9F63                 mov     ds, bx
DOSCODE:9F65                 mov     ds:DSKSTCOM, 5
DOSCODE:9F6A                 mov     ds:DSKSTCALL, 0Eh
DOSCODE:9F6F                 mov     ds:DSKSTST, 0
DOSCODE:9F75                 mov     bx, offset DSKSTCALL
DOSCODE:9F78                 lds     si, ds:BCON
DOSCODE:9F7C                 call    DEVIOCALL2
DOSCODE:9F7F                 push    ds
DOSCODE:9F80                 push    ss
DOSCODE:9F81                 pop     ds
DOSCODE:9F82                 test    byte ptr ds:DSKSTST+1, 2
DOSCODE:9F87                 jz      short loc_9F92
DOSCODE:9F89                 xor     al, al
DOSCODE:9F8B
DOSCODE:9F8B loc_9F8B:                               ; ...
DOSCODE:9F8B                 pop     si
DOSCODE:9F8C                 pop     si
DOSCODE:9F8D                 pop     ds
DOSCODE:9F8E                 pop     bx
DOSCODE:9F8F                 pop     es
DOSCODE:9F90                 pop     cx
DOSCODE:9F91                 retn
DOSCODE:9F92 ; ---------------------------------------------------------------------------
DOSCODE:9F92
DOSCODE:9F92 loc_9F92:                               ; ...
DOSCODE:9F92                 mov     al, ds:DSKCHRET
DOSCODE:9F95                 cmp     al, 3
DOSCODE:9F97                 jnz     short loc_9F8B
DOSCODE:9F99                 mov     ds:DSKSTCOM, 4
DOSCODE:9F9E                 mov     ds:DSKSTCALL, 16h
DOSCODE:9FA3                 mov     ds:DSKCHRET, cl
DOSCODE:9FA7                 mov     ds:DSKSTST, 0
DOSCODE:9FAD                 mov     ds:DSKSTCNT, 1
DOSCODE:9FB3                 pop     ds
DOSCODE:9FB4                 call    DEVIOCALL2
DOSCODE:9FB7                 pop     si
DOSCODE:9FB8                 pop     ds
DOSCODE:9FB9                 pop     bx
DOSCODE:9FBA                 pop     es
DOSCODE:9FBB                 pop     cx
DOSCODE:9FBC                 jmp     loc_A08F
DOSCODE:9FBC DSKSTATCHK      endp
DOSCODE:9FBC
DOSCODE:9FBF ; ---------------------------------------------------------------------------
DOSCODE:9FBF ; START OF FUNCTION CHUNK FOR STATCHK
DOSCODE:9FBF
DOSCODE:9FBF loc_9FBF:                               ; ...
DOSCODE:9FBF                 cmp     al, 10h
DOSCODE:9FC1                 jnz     short loc_9FCC
DOSCODE:9FC3                 cmp     ss:SCAN_FLAG, 0
DOSCODE:9FC9                 jz      short loc_9FD1
DOSCODE:9FCB                 retn
DOSCODE:9FCC ; ---------------------------------------------------------------------------
DOSCODE:9FCC
DOSCODE:9FCC loc_9FCC:                               ; ...
DOSCODE:9FCC                 cmp     al, 3
DOSCODE:9FCE                 jz      short loc_9FD1
DOSCODE:9FD0
DOSCODE:9FD0 locret_9FD0:                            ; ...
DOSCODE:9FD0                 retn
DOSCODE:9FD1 ; ---------------------------------------------------------------------------
DOSCODE:9FD1
DOSCODE:9FD1 loc_9FD1:                               ; ...
DOSCODE:9FD1                 jmp     loc_A079
DOSCODE:9FD1 ; END OF FUNCTION CHUNK FOR STATCHK
DOSCODE:9FD4
DOSCODE:9FD4 ; =============== S U B R O U T I N E =======================================
DOSCODE:9FD4
DOSCODE:9FD4
DOSCODE:9FD4 SPOOLINT        proc near               ; ...
DOSCODE:9FD4                 pushf
DOSCODE:9FD5                 cmp     byte ptr ss:IDLEINT, 0
DOSCODE:9FDB                 jz      short loc_A000
DOSCODE:9FDD                 cmp     ss:ERRORMODE, 0
DOSCODE:9FE3                 jnz     short loc_A000
DOSCODE:9FE5                 push    ss:IDLEINT
DOSCODE:9FEA                 cmp     ss:DosHasHMA, 0
DOSCODE:9FF0                 jnz     short loc_9FF6
DOSCODE:9FF2                 int     28h             ; DOS 2+ internal - KEYBOARD BUSY LOOP
DOSCODE:9FF4                 jmp     short loc_9FFB
DOSCODE:9FF6 ; ---------------------------------------------------------------------------
DOSCODE:9FF6
DOSCODE:9FF6 loc_9FF6:                               ; ...
DOSCODE:9FF6                 call    dword ptr cs:LowInt28Addr
DOSCODE:9FFB
DOSCODE:9FFB loc_9FFB:                               ; ...
DOSCODE:9FFB                 pop     ss:IDLEINT
DOSCODE:A000
DOSCODE:A000 loc_A000:                               ; ...
DOSCODE:A000                 popf
DOSCODE:A001
DOSCODE:A001 locret_A001:                            ; ...
DOSCODE:A001                 retn
DOSCODE:A001 SPOOLINT        endp
DOSCODE:A001
DOSCODE:A002
DOSCODE:A002 ; =============== S U B R O U T I N E =======================================
DOSCODE:A002
DOSCODE:A002
DOSCODE:A002 STATCHK         proc far                ; ...
DOSCODE:A002
DOSCODE:A002 ; FUNCTION CHUNK AT DOSCODE:4123 SIZE 00000088 BYTES
DOSCODE:A002 ; FUNCTION CHUNK AT DOSCODE:41AF SIZE 00000003 BYTES
DOSCODE:A002 ; FUNCTION CHUNK AT DOSCODE:41D7 SIZE 00000148 BYTES
DOSCODE:A002 ; FUNCTION CHUNK AT DOSCODE:9FBF SIZE 00000015 BYTES
DOSCODE:A002
DOSCODE:A002                 call    DSKSTATCHK
DOSCODE:A005                 push    bx
DOSCODE:A006                 xor     bx, bx
DOSCODE:A008                 call    GET_IO_SFT
DOSCODE:A00B                 pop     bx
DOSCODE:A00C                 jb      short locret_A001
DOSCODE:A00E                 mov     ah, 1
DOSCODE:A010                 call    IOFUNC
DOSCODE:A013                 jz      short SPOOLINT
DOSCODE:A015                 cmp     al, 13h
DOSCODE:A017                 jnz     short loc_9FBF
DOSCODE:A019                 cmp     ss:SCAN_FLAG, 0
DOSCODE:A01F                 jnz     short locret_9FD0
DOSCODE:A021                 xor     ah, ah
DOSCODE:A023                 call    IOFUNC
DOSCODE:A026                 jmp     short loc_A072
DOSCODE:A028 ; ---------------------------------------------------------------------------
DOSCODE:A028
DOSCODE:A028 loc_A028:                               ; ...
DOSCODE:A028                 not     ss:PFLAG
DOSCODE:A02D                 push    bx
DOSCODE:A02E                 mov     bx, 4
DOSCODE:A031                 call    GET_IO_SFT
DOSCODE:A034                 pop     bx
DOSCODE:A035                 jb      short locret_A001
DOSCODE:A037                 push    es
DOSCODE:A038                 push    di
DOSCODE:A039                 push    ds
DOSCODE:A03A                 pop     es
DOSCODE:A03B                 mov     di, si
DOSCODE:A03D                 test    byte ptr es:[di+6], 8
DOSCODE:A042                 jz      short loc_A05C
DOSCODE:A044                 push    ax
DOSCODE:A045                 mov     ax, 1126h
DOSCODE:A048                 int     2Fh             ; Multiplex - NETWORK REDIRECTOR - ???
DOSCODE:A048                                         ; Return: CF set on error, AX = error code
DOSCODE:A048                                         ; STACK unchanged
DOSCODE:A04A                 pop     ax
DOSCODE:A04B                 jnb     short loc_A05C
DOSCODE:A04D                 mov     ss:PFLAG, 0
DOSCODE:A053                 push    ax
DOSCODE:A054                 mov     ax, 1124h
DOSCODE:A057                 int     2Fh             ; Multiplex - NETWORK REDIRECTOR - ???
DOSCODE:A057                                         ; ES:DI -> SFT, SS = DOS CS
DOSCODE:A059                 pop     ax
DOSCODE:A05A                 jmp     short loc_A06C
DOSCODE:A05C ; ---------------------------------------------------------------------------
DOSCODE:A05C
DOSCODE:A05C loc_A05C:                               ; ...
DOSCODE:A05C                 cmp     ss:PFLAG, 0
DOSCODE:A062                 jnz     short loc_A069
DOSCODE:A064                 call    DEV_CLOSE_SFT
DOSCODE:A067 ; ---------------------------------------------------------------------------
DOSCODE:A067                 jmp     short loc_A06C
DOSCODE:A069 ; ---------------------------------------------------------------------------
DOSCODE:A069
DOSCODE:A069 loc_A069:                               ; ...
DOSCODE:A069                 call    DEV_OPEN_SFT
DOSCODE:A06C
DOSCODE:A06C loc_A06C:                               ; ...
DOSCODE:A06C                 pop     di
DOSCODE:A06D                 pop     es
DOSCODE:A06E
DOSCODE:A06E locret_A06E:                            ; ...
DOSCODE:A06E                 retn
DOSCODE:A06F ; ---------------------------------------------------------------------------
DOSCODE:A06F
DOSCODE:A06F loc_A06F:                               ; ...
DOSCODE:A06F                 call    SPOOLINT
DOSCODE:A072
DOSCODE:A072 loc_A072:                               ; ...
DOSCODE:A072                 mov     ah, 1
DOSCODE:A074                 call    IOFUNC
DOSCODE:A077                 jz      short loc_A06F
DOSCODE:A079
DOSCODE:A079 loc_A079:                               ; ...
DOSCODE:A079                 push    bx
DOSCODE:A07A                 xor     bx, bx
DOSCODE:A07C                 call    GET_IO_SFT
DOSCODE:A07F                 pop     bx
DOSCODE:A080                 jb      short locret_A06E
DOSCODE:A082                 xor     ah, ah
DOSCODE:A084                 call    IOFUNC
DOSCODE:A087                 cmp     al, 10h
DOSCODE:A089                 jz      short loc_A028
DOSCODE:A08B                 cmp     al, 3
DOSCODE:A08D                 jnz     short locret_A06E
DOSCODE:A08F
DOSCODE:A08F loc_A08F:                               ; ...
DOSCODE:A08F                 test    byte ptr ss:DOS34_FLAG+1, 2
DOSCODE:A095                 jnz     short loc_A09F
DOSCODE:A097                 mov     al, 3
DOSCODE:A099                 call    BUFOUT
DOSCODE:A09C                 call    CRLF
DOSCODE:A09F
DOSCODE:A09F loc_A09F:                               ; ...
DOSCODE:A09F                 push    ss
DOSCODE:A0A0                 pop     ds
DOSCODE:A0A1                 cmp     ds:CONSWAP, 0
DOSCODE:A0A6                 jz      short loc_A0AB
DOSCODE:A0A8                 call    sub_7B59
DOSCODE:A0AB
DOSCODE:A0AB loc_A0AB:                               ; ...
DOSCODE:A0AB                 cli
DOSCODE:A0AC                 mov     ss, ds:USER_SS
DOSCODE:A0B0                 mov     sp, ds:USER_SP
DOSCODE:A0B4                 call    restore_world
DOSCODE:A0B7                 pop     es
DOSCODE:A0B8                 push    ds
DOSCODE:A0B9                 mov     ds, cs:DosDSeg
DOSCODE:A0BE                 mov     ds:INDOS, 0
DOSCODE:A0C3                 mov     ds:INDOS_FLAG, 0
DOSCODE:A0C8                 mov     ds:ERRORMODE, 0
DOSCODE:A0CD                 mov     ds:ConC_Spsave, sp
DOSCODE:A0D1                 add     ds:ConC_Spsave, 2
DOSCODE:A0D6                 cmp     ds:DosHasHMA, 0
DOSCODE:A0DB                 pop     ds
DOSCODE:A0DC                 jnz     short loc_A0E3
DOSCODE:A0DE                 clc
DOSCODE:A0DF                 int     23h             ; DOS - CONTROL "C" EXIT ADDRESS
DOSCODE:A0DF                                         ; Return: return via RETF 2 with CF set
DOSCODE:A0DF                                         ; DOS will abort program with errorlevel 0
DOSCODE:A0DF                                         ; else
DOSCODE:A0DF                                         ; interrupted DOS call continues
DOSCODE:A0E1                 jmp     short loc_A0E9
DOSCODE:A0E3 ; ---------------------------------------------------------------------------
DOSCODE:A0E3
DOSCODE:A0E3 loc_A0E3:                               ; ...
DOSCODE:A0E3                 clc
DOSCODE:A0E4                 call    dword ptr cs:LowInt23Addr
DOSCODE:A0E9
DOSCODE:A0E9 loc_A0E9:                               ; ...
DOSCODE:A0E9                 cli
DOSCODE:A0EA                 push    ax
DOSCODE:A0EB                 mov     ax, ds
DOSCODE:A0ED                 mov     ds, cs:DosDSeg
DOSCODE:A0F2                 mov     ds:0D63h, ax
DOSCODE:A0F5                 pop     ax
DOSCODE:A0F6                 mov     ds:33Ah, ax
DOSCODE:A0F9                 pushf
DOSCODE:A0FA                 pop     ax
DOSCODE:A0FB                 cmp     sp, ds:332h
DOSCODE:A0FF                 jnz     short loc_A10B
DOSCODE:A101
DOSCODE:A101 loc_A101:                               ; ...
DOSCODE:A101                 mov     ax, ds:33Ah
DOSCODE:A104                 mov     ds, word ptr ds:0D63h
DOSCODE:A108
DOSCODE:A108 loc_A108:                               ; ...
DOSCODE:A108                 jmp     COMMAND
DOSCODE:A10B ; ---------------------------------------------------------------------------
DOSCODE:A10B
DOSCODE:A10B loc_A10B:                               ; ...
DOSCODE:A10B                 test    al, 1
DOSCODE:A10D                 pop     ax
DOSCODE:A10E                 jz      short loc_A101
DOSCODE:A110                 mov     ds, word ptr ds:0D63h
DOSCODE:A114
DOSCODE:A114 loc_A114:                               ; ...
DOSCODE:A114                 mov     ax, 4C00h
DOSCODE:A117                 push    ds
DOSCODE:A118                 mov     ds, cs:DosDSeg
DOSCODE:A11D                 mov     byte ptr ds:34Dh, 0FFh
DOSCODE:A122                 pop     ds
DOSCODE:A123                 jmp     short loc_A108
DOSCODE:A123 STATCHK         endp ; sp-analysis failed
DOSCODE:A123
DOSCODE:A125 ; ---------------------------------------------------------------------------
DOSCODE:A125
DOSCODE:A125 DIVOV:                                  ; ...
DOSCODE:A125                 mov     si, 48C3h
DOSCODE:A128                 mov     bx, cs:DivMesLen
DOSCODE:A12D                 mov     ss, cs:DosDSeg
DOSCODE:A132                 mov     sp, 7A0h
DOSCODE:A135                 call    sub_A13A
DOSCODE:A138                 jmp     short loc_A114
DOSCODE:A13A
DOSCODE:A13A ; =============== S U B R O U T I N E =======================================
DOSCODE:A13A
DOSCODE:A13A
DOSCODE:A13A sub_A13A        proc near               ; ...
DOSCODE:A13A                 push    ss
DOSCODE:A13B                 pop     es
DOSCODE:A13C                 push    ss
DOSCODE:A13D                 pop     ds
DOSCODE:A13E                 mov     byte ptr ds:394h, 8
DOSCODE:A143                 mov     byte ptr ds:392h, 16h
DOSCODE:A148                 mov     word ptr ds:395h, 0
DOSCODE:A14E                 mov     ds:3A4h, bx
DOSCODE:A152                 mov     bx, 392h
DOSCODE:A155                 mov     ds:3A0h, si
DOSCODE:A159                 mov     word ptr ds:3A2h, cs
DOSCODE:A15D                 lds     si, ds:32h
DOSCODE:A161                 call    DEVIOCALL2
DOSCODE:A164                 mov     word ptr es:3A0h, 3BCh
DOSCODE:A16B                 mov     word ptr es:3A4h, 1
DOSCODE:A172                 retn
DOSCODE:A172 sub_A13A        endp
DOSCODE:A172
DOSCODE:A173
DOSCODE:A173 ; =============== S U B R O U T I N E =======================================
DOSCODE:A173
DOSCODE:A173
DOSCODE:A173 sub_A173        proc near               ; ...
DOSCODE:A173                 cmp     byte ptr ss:320h, 0
DOSCODE:A179                 jnz     short loc_A186
DOSCODE:A17B                 or      ah, 10h
DOSCODE:A17E                 test    byte ptr ss:2FEh, 0FFh
DOSCODE:A184                 jnz     short loc_A189
DOSCODE:A186
DOSCODE:A186 loc_A186:                               ; ...
DOSCODE:A186                 or      ah, 38h
DOSCODE:A189
DOSCODE:A189 loc_A189:                               ; ...
DOSCODE:A189                 mov     ss:34Bh, ah
DOSCODE:A18E                 mov     word ptr ss:582h, es
DOSCODE:A193                 mov     ss:580h, bp
DOSCODE:A198                 push    si
DOSCODE:A199                 and     di, 0FFh
DOSCODE:A19D                 mov     bp, ds
DOSCODE:A19F                 call    near ptr sub_A242
DOSCODE:A1A2                 pop     si
DOSCODE:A1A3                 retn
DOSCODE:A1A3 sub_A173        endp
DOSCODE:A1A3
DOSCODE:A1A4
DOSCODE:A1A4 ; =============== S U B R O U T I N E =======================================
DOSCODE:A1A4
DOSCODE:A1A4
DOSCODE:A1A4 HARDERR         proc near               ; ...
DOSCODE:A1A4                 xchg    ax, di
DOSCODE:A1A5                 and     di, 0FFh
DOSCODE:A1A9                 cmp     di, 0
DOSCODE:A1AC                 jnz     short loc_A1B8
DOSCODE:A1AE                 push    ax
DOSCODE:A1AF                 mov     al, es:[bp+0]
DOSCODE:A1B3                 mov     ss:WPERR, al
DOSCODE:A1B7                 pop     ax
DOSCODE:A1B8
DOSCODE:A1B8 loc_A1B8:                               ; ...
DOSCODE:A1B8                 sub     ax, cx
DOSCODE:A1BA                 add     dx, ax
DOSCODE:A1BC                 adc     ss:HIGH_SECTOR, 0
DOSCODE:A1C2                 push    dx
DOSCODE:A1C3                 mul     word ptr es:[bp+2]
DOSCODE:A1C7                 pop     dx
DOSCODE:A1C8                 add     bx, ax
DOSCODE:A1CA                 xor     ah, ah
DOSCODE:A1CC                 cmp     ss:HIGH_SECTOR, 0
DOSCODE:A1D2                 jnz     short loc_A1DA
DOSCODE:A1D4                 cmp     dx, es:[bp+6]
DOSCODE:A1D8                 jb      short loc_A222
DOSCODE:A1DA
DOSCODE:A1DA loc_A1DA:                               ; ...
DOSCODE:A1DA                 inc     ah
DOSCODE:A1DC                 cmp     word ptr es:[bp+0Fh], 0
DOSCODE:A1E1                 jnz     short loc_A20A
DOSCODE:A1E3                 push    dx
DOSCODE:A1E4                 mov     dx, ss:HIGH_SECTOR
DOSCODE:A1E9                 cmp     dx, es:[bp+2Bh]
DOSCODE:A1ED                 pop     dx
DOSCODE:A1EE                 jnz     short loc_A1F4
DOSCODE:A1F0                 cmp     dx, es:[bp+29h]
DOSCODE:A1F4
DOSCODE:A1F4 loc_A1F4:                               ; ...
DOSCODE:A1F4                 jnb     short loc_A204
DOSCODE:A1F6                 mov     word ptr es:[bp+1Fh], 0FFFFh
DOSCODE:A1FC                 mov     word ptr es:[bp+21h], 0FFFFh
DOSCODE:A202                 jmp     short loc_A222
DOSCODE:A204 ; ---------------------------------------------------------------------------
DOSCODE:A204
DOSCODE:A204 loc_A204:                               ; ...
DOSCODE:A204                 inc     ah
DOSCODE:A206                 inc     ah
DOSCODE:A208                 jmp     short loc_A222
DOSCODE:A20A ; ---------------------------------------------------------------------------
DOSCODE:A20A
DOSCODE:A20A loc_A20A:                               ; ...
DOSCODE:A20A                 cmp     dx, es:[bp+11h]
DOSCODE:A20E                 jnb     short loc_A218
DOSCODE:A210                 mov     word ptr es:[bp+1Fh], 0FFFFh
DOSCODE:A216                 jmp     short loc_A222
DOSCODE:A218 ; ---------------------------------------------------------------------------
DOSCODE:A218
DOSCODE:A218 loc_A218:                               ; ...
DOSCODE:A218                 inc     ah
DOSCODE:A21A
DOSCODE:A21A loc_A21A:
DOSCODE:A21A                 cmp     dx, es:[bp+0Bh]
DOSCODE:A21E                 jb      short loc_A222
DOSCODE:A220                 inc     ah
DOSCODE:A222
DOSCODE:A222 loc_A222:                               ; ...
DOSCODE:A222                 shl     ah, 1
DOSCODE:A224                 or      ah, ss:READOP
DOSCODE:A229                 or      ah, ss:ALLOWED
DOSCODE:A229 HARDERR         endp
DOSCODE:A229
DOSCODE:A22E
DOSCODE:A22E ; =============== S U B R O U T I N E =======================================
DOSCODE:A22E
DOSCODE:A22E
DOSCODE:A22E FATAL           proc near               ; ...
DOSCODE:A22E                 mov     al, es:[bp+0]
DOSCODE:A22E FATAL           endp
DOSCODE:A22E
DOSCODE:A232
DOSCODE:A232 ; =============== S U B R O U T I N E =======================================
DOSCODE:A232
DOSCODE:A232
DOSCODE:A232 FATAL1          proc near               ; ...
DOSCODE:A232                 mov     word ptr ss:582h, es
DOSCODE:A237                 mov     ss:580h, bp
DOSCODE:A23C                 les     si, es:[bp+13h]
DOSCODE:A240                 mov     bp, es
DOSCODE:A240 FATAL1          endp
DOSCODE:A240
DOSCODE:A242
DOSCODE:A242 ; =============== S U B R O U T I N E =======================================
DOSCODE:A242
DOSCODE:A242
DOSCODE:A242 sub_A242        proc far                ; ...
DOSCODE:A242
DOSCODE:A242 ; FUNCTION CHUNK AT DOSCODE:B40B SIZE 0000000D BYTES
DOSCODE:A242 ; FUNCTION CHUNK AT DOSCODE:B420 SIZE 00000022 BYTES
DOSCODE:A242
DOSCODE:A242                 call    SET_I24_EXTENDED_ERROR
DOSCODE:A245                 cmp     di, 0Ch
DOSCODE:A248                 jbe     short NET_I24_ENTRY
DOSCODE:A24A                 mov     di, 0Ch
DOSCODE:A24D
DOSCODE:A24D NET_I24_ENTRY:                          ; ...
DOSCODE:A24D                 cmp     ss:ERRORMODE, 0
DOSCODE:A253                 jz      short loc_A259
DOSCODE:A255                 mov     al, 3
DOSCODE:A257                 jmp     short loc_A2CD
DOSCODE:A259 ; ---------------------------------------------------------------------------
DOSCODE:A259
DOSCODE:A259 loc_A259:                               ; ...
DOSCODE:A259                 mov     ss:588h, sp
DOSCODE:A25E                 push    ss
DOSCODE:A25F                 pop     es
DOSCODE:A260                 cmp     ss:SFN, 0FFFFh
DOSCODE:A266                 jz      short loc_A274
DOSCODE:A268                 push    ds
DOSCODE:A269                 push    si
DOSCODE:A26A                 lds     si, ss:5AEh
DOSCODE:A26F                 mov     byte ptr [si], 0FFh
DOSCODE:A272                 pop     si
DOSCODE:A273                 pop     ds
DOSCODE:A274
DOSCODE:A274 loc_A274:                               ; ...
DOSCODE:A274                 cli
DOSCODE:A275                 inc     ss:ERRORMODE
DOSCODE:A27A                 dec     ss:INDOS
DOSCODE:A27F                 dec     ss:INDOS_FLAG
DOSCODE:A284                 test    ss:EXTOPEN_ON, 2
DOSCODE:A28A                 jz      short loc_A290
DOSCODE:A28C                 mov     al, 3
DOSCODE:A28E                 jmp     short loc_A2B7
DOSCODE:A290 ; ---------------------------------------------------------------------------
DOSCODE:A290
DOSCODE:A290 loc_A290:                               ; ...
DOSCODE:A290                 mov     ss, ss:USER_SS
DOSCODE:A295                 mov     sp, es:USER_SP
DOSCODE:A29A                 cmp     es:DosHasHMA, 0
DOSCODE:A2A0                 jnz     short loc_A2A6
DOSCODE:A2A2                 int     24h             ; DOS - FATAL ERROR HANDLER ADDRESS
DOSCODE:A2A2                                         ; Automatically called upon detection of unrecoverable I/O error.
DOSCODE:A2A4                 jmp     short loc_A2AB
DOSCODE:A2A6 ; ---------------------------------------------------------------------------
DOSCODE:A2A6
DOSCODE:A2A6 loc_A2A6:                               ; ...
DOSCODE:A2A6                 call    dword ptr cs:LowInt24Addr
DOSCODE:A2AB
DOSCODE:A2AB loc_A2AB:                               ; ...
DOSCODE:A2AB                 mov     es:USER_SP, sp
DOSCODE:A2B0                 mov     es:USER_SS, ss
DOSCODE:A2B5                 push    es
DOSCODE:A2B6                 pop     ss
DOSCODE:A2B7
DOSCODE:A2B7 loc_A2B7:                               ; ...
DOSCODE:A2B7                 mov     sp, ss:588h
DOSCODE:A2BC                 inc     ss:INDOS
DOSCODE:A2C1                 inc     ss:INDOS_FLAG
DOSCODE:A2C6                 mov     ss:ERRORMODE, 0
DOSCODE:A2CC                 sti
DOSCODE:A2CD
DOSCODE:A2CD loc_A2CD:                               ; ...
DOSCODE:A2CD                 les     bp, ss:580h
DOSCODE:A2D2                 cmp     al, 1
DOSCODE:A2D4                 jb      short loc_A314
DOSCODE:A2D6                 jz      short loc_A31E
DOSCODE:A2D8                 cmp     al, 3
DOSCODE:A2DA                 jnz     short loc_A326
DOSCODE:A2DC                 test    ss:ALLOWED, 8
DOSCODE:A2E2                 jz      short loc_A326
DOSCODE:A2E4
DOSCODE:A2E4 loc_A2E4:                               ; ...
DOSCODE:A2E4                 mov     al, 3
DOSCODE:A2E6                 test    ss:EXTOPEN_ON, 2
DOSCODE:A2EC                 jnz     short loc_A2F3
DOSCODE:A2EE                 inc     ss:FAILERR
DOSCODE:A2F3
DOSCODE:A2F3 loc_A2F3:                               ; ...
DOSCODE:A2F3                 mov     ss:WPERR, 0FFh
DOSCODE:A2F9                 cmp     ss:SFN, 0FFFFh
DOSCODE:A2FF                 jnz     short loc_A302
DOSCODE:A301                 retn
DOSCODE:A302 ; ---------------------------------------------------------------------------
DOSCODE:A302
DOSCODE:A302 loc_A302:                               ; ...
DOSCODE:A302                 push    ds
DOSCODE:A303                 push    si
DOSCODE:A304                 push    ax
DOSCODE:A305                 mov     ax, ss:SFN
DOSCODE:A309                 lds     si, ss:5AEh
DOSCODE:A30E                 mov     [si], al
DOSCODE:A310                 pop     ax
DOSCODE:A311                 pop     si
DOSCODE:A312                 pop     ds
DOSCODE:A313                 retn
DOSCODE:A314 ; ---------------------------------------------------------------------------
DOSCODE:A314
DOSCODE:A314 loc_A314:                               ; ...
DOSCODE:A314                 test    ss:ALLOWED, 20h
DOSCODE:A31A
DOSCODE:A31A loc_A31A:                               ; ...
DOSCODE:A31A                 jz      short loc_A2E4
DOSCODE:A31C                 jmp     short loc_A2F3
DOSCODE:A31E ; ---------------------------------------------------------------------------
DOSCODE:A31E
DOSCODE:A31E loc_A31E:                               ; ...
DOSCODE:A31E                 test    ss:ALLOWED, 10h
DOSCODE:A324                 jmp     short loc_A31A
DOSCODE:A326 ; ---------------------------------------------------------------------------
DOSCODE:A326
DOSCODE:A326 loc_A326:                               ; ...
DOSCODE:A326                 push    ss
DOSCODE:A327                 pop     ds
DOSCODE:A328                 cmp     ds:CONSWAP, 0
DOSCODE:A32D                 jz      short loc_A332
DOSCODE:A32F                 call    sub_7B59
DOSCODE:A332
DOSCODE:A332 loc_A332:                               ; ...
DOSCODE:A332                 cmp     byte ptr ds:359h, 0
DOSCODE:A337                 jnz     short loc_A2E4
DOSCODE:A339                 mov     byte ptr ds:EXIT_TYPE, 2
DOSCODE:A33E                 xor     al, al
DOSCODE:A340                 jmp     exit_inner
DOSCODE:A343 ; ---------------------------------------------------------------------------
DOSCODE:A343
DOSCODE:A343 loc_A343:                               ; ...
DOSCODE:A343                 push    ds
DOSCODE:A344                 mov     ah, 82h
DOSCODE:A346                 int     2Ah             ; Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
DOSCODE:A348                 mov     byte ptr ss:359h, 0FFh
DOSCODE:A34E                 mov     ax, 1122h
DOSCODE:A351                 int     2Fh             ; Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK
DOSCODE:A351                                         ; SS = DOS CS
DOSCODE:A353                 mov     al, 22h ; '"'
DOSCODE:A355                 call    $GET_INTERRUPT_VECTOR
DOSCODE:A358                 pop     cx
DOSCODE:A359                 push    es
DOSCODE:A35A                 push    bx
DOSCODE:A35B                 mov     bx, ss:330h
DOSCODE:A360                 mov     ds, bx
DOSCODE:A362                 mov     ax, ds:16h
DOSCODE:A365                 cmp     ax, bx
DOSCODE:A367                 jz      short loc_A381
DOSCODE:A369                 cmp     bx, cx
DOSCODE:A36B                 jnz     short loc_A381
DOSCODE:A36D                 push    ax
DOSCODE:A36E                 cmp     byte ptr ss:57Ch, 3
DOSCODE:A374                 jz      short loc_A37C
DOSCODE:A376                 call    sub_B44A
DOSCODE:A379                 call    sub_7685
DOSCODE:A37C
DOSCODE:A37C loc_A37C:                               ; ...
DOSCODE:A37C                 pop     word ptr ss:330h
DOSCODE:A381
DOSCODE:A381 loc_A381:                               ; ...
DOSCODE:A381                 push    ss
DOSCODE:A382                 pop     ds
DOSCODE:A383                 mov     al, 0FFh
DOSCODE:A385                 call    ECritDisk
DOSCODE:A388                 call    FLUSHBUF
DOSCODE:A38B                 call    LCritDisk
DOSCODE:A38E                 cli
DOSCODE:A38F                 mov     byte ptr ds:321h, 0
DOSCODE:A394                 mov     byte ptr ds:12B8h, 0
DOSCODE:A399                 mov     byte ptr ds:322h, 0FFh
DOSCODE:A39E                 mov     byte ptr ds:359h, 0
DOSCODE:A3A3                 pop     word ptr ds:580h
DOSCODE:A3A7                 pop     word ptr ds:582h
DOSCODE:A3AB                 mov     ds, word ptr ds:330h
DOSCODE:A3AF                 mov     ss, word ptr ds:30h
DOSCODE:A3B3                 mov     sp, ds:2Eh
DOSCODE:A3B7                 call    restore_world
DOSCODE:A3B7 sub_A242        endp
DOSCODE:A3B7
DOSCODE:A3BA                 pop     es
DOSCODE:A3BB                 push    ax
DOSCODE:A3BC                 mov     ax, ds
DOSCODE:A3BE                 mov     ds, cs:DosDSeg
DOSCODE:A3C3                 mov     ds:0D63h, ax
DOSCODE:A3C6                 pop     ax
DOSCODE:A3C7                 mov     ds:584h, ax
DOSCODE:A3CA                 pop     ax
DOSCODE:A3CB                 pop     ax
DOSCODE:A3CC                 pop     ax
DOSCODE:A3CD                 lahf
DOSCODE:A3CE                 xchg    ah, al
DOSCODE:A3D0                 and     al, 2
DOSCODE:A3D2                 mov     ah, 0F2h
DOSCODE:A3D4                 push    ax
DOSCODE:A3D5                 push    word ptr ds:582h
DOSCODE:A3D9                 push    word ptr ds:580h
DOSCODE:A3DD                 mov     ax, ds:584h
DOSCODE:A3E0                 mov     ds, word ptr ds:0D63h
DOSCODE:A3E4                 iret
DOSCODE:A3E5
DOSCODE:A3E5 ; =============== S U B R O U T I N E =======================================
DOSCODE:A3E5
DOSCODE:A3E5
DOSCODE:A3E5 SET_I24_EXTENDED_ERROR proc near        ; ...
DOSCODE:A3E5                 push    ax
DOSCODE:A3E6                 mov     ax, offset SPECIAL_VERSION ; ErrMap24End
DOSCODE:A3E6                                         ; size of ErrMap24
DOSCODE:A3E9                 sub     ax, offset ErrMap24
DOSCODE:A3EC                 push    ds
DOSCODE:A3ED                 mov     ds, cs:DosDSeg
DOSCODE:A3F2                 cmp     di, ax
DOSCODE:A3F4                 mov     ax, di
DOSCODE:A3F6                 jnb     short NoTrans
DOSCODE:A3F8                 mov     al, ds:ErrMap24[di]
DOSCODE:A3FC                 xor     ah, ah
DOSCODE:A3FE
DOSCODE:A3FE NoTrans:                                ; ...
DOSCODE:A3FE                 mov     ds:EXTERR, ax
DOSCODE:A401                 pop     ds
DOSCODE:A402                 pop     ax
DOSCODE:A403                 push    si
DOSCODE:A404                 mov     si, offset ERR_TABLE_24
DOSCODE:A407                 call    CAL_LK
DOSCODE:A40A                 pop     si
DOSCODE:A40B                 retn
DOSCODE:A40B SET_I24_EXTENDED_ERROR endp
DOSCODE:A40B
DOSCODE:A40C
DOSCODE:A40C ; =============== S U B R O U T I N E =======================================
DOSCODE:A40C
DOSCODE:A40C
DOSCODE:A40C IsEOF           proc near               ; ...
DOSCODE:A40C                 call    IsFAT32
DOSCODE:A40F                 jnb     short IsEOF_FAT ; 12 or 16 bit compare
DOSCODE:A411                 cmp     ss:CLUSTNUM_HW, 0FFFh ; FAT32
DOSCODE:A418                 jnz     short IsEOF_other1 ; not EOF
DOSCODE:A41A                 cmp     bx, 0FFF8h      ; 32 bit compare
DOSCODE:A41D
DOSCODE:A41D IsEOF_other1:                           ; ...
DOSCODE:A41D                 retn                    ; cf=0 -> EOF, cf=1 -> not EOF
DOSCODE:A41E ; ---------------------------------------------------------------------------
DOSCODE:A41E
DOSCODE:A41E IsEOF_FAT:                              ; ...
DOSCODE:A41E                 cmp     word ptr es:[bp+0Dh], 0FF6h ; [es:bp+DPB.MAX_CLUSTER]
DOSCODE:A41E                                         ; is this 16 bit fat?
DOSCODE:A424                 jnb     short EOF16     ; yes, check for eof there
DOSCODE:A426                 cmp     bx, 0FF0h
DOSCODE:A42A                 jz      short IsEOF_other2
DOSCODE:A42C                 cmp     bx, 0FF8h       ; do the 12 bit compare
DOSCODE:A430
DOSCODE:A430 IsEOF_other2:                           ; ...
DOSCODE:A430                 retn                    ; cf=0 -> EOF, cf=1 -> not EOF
DOSCODE:A431 ; ---------------------------------------------------------------------------
DOSCODE:A431
DOSCODE:A431 EOF16:                                  ; ...
DOSCODE:A431                 cmp     bx, 0FFF8h      ; 16 bit compare
DOSCODE:A434                 retn                    ; cf=0 -> EOF, cf=1 -> not EOF
DOSCODE:A434 IsEOF           endp
DOSCODE:A434
DOSCODE:A435 ; ---------------------------------------------------------------------------
DOSCODE:A435 ; START OF FUNCTION CHUNK FOR UNPACK
DOSCODE:A435
DOSCODE:A435 up_1:                                   ; ...
DOSCODE:A435                 cmp     ds:CLUSTNUM_HW, bx
DOSCODE:A439                 jnz     short up_cont
DOSCODE:A43B                 mov     di, ds:CL0FATENTRY_HW
DOSCODE:A43F                 or      di, di
DOSCODE:A441                 mov     ds:CCONTENT_HW, di
DOSCODE:A445                 mov     di, ds:CL0FATENTRY
DOSCODE:A449                 jnz     short unpack_retn
DOSCODE:A44B                 or      di, di
DOSCODE:A44D
DOSCODE:A44D unpack_retn:                            ; ...
DOSCODE:A44D                 retn
DOSCODE:A44D ; END OF FUNCTION CHUNK FOR UNPACK
DOSCODE:A44E
DOSCODE:A44E ; =============== S U B R O U T I N E =======================================
DOSCODE:A44E
DOSCODE:A44E
DOSCODE:A44E UNPACK          proc near               ; ...
DOSCODE:A44E
DOSCODE:A44E ; FUNCTION CHUNK AT DOSCODE:A435 SIZE 00000019 BYTES
DOSCODE:A44E
DOSCODE:A44E                 or      bx, bx
DOSCODE:A450                 jz      short up_1
DOSCODE:A452
DOSCODE:A452 up_cont:                                ; ...
DOSCODE:A452                 cmp     word ptr es:[bp+0Fh], 0 ; [ES:BP+DPB.FAT_SIZE]
DOSCODE:A457                 jnz     short up_fat    ; not FAT32
DOSCODE:A459                 mov     si, es:[bp+2Fh] ; [ES:BP+DPB.LAST_CLUSTER+2]
DOSCODE:A45D                 cmp     ds:CLUSTNUM_HW, si
DOSCODE:A461                 jnz     short up_2
DOSCODE:A463                 cmp     bx, es:[bp+2Dh] ; [ES:BP+DPB.LAST_CLUSTER]
DOSCODE:A467                 jmp     short up_2
DOSCODE:A469 ; ---------------------------------------------------------------------------
DOSCODE:A469
DOSCODE:A469 up_fat:                                 ; ...
DOSCODE:A469                 cmp     bx, es:[bp+0Dh] ; [ES:BP+DPB.MAX_CLUSTER]
DOSCODE:A46D
DOSCODE:A46D up_2:                                   ; ...
DOSCODE:A46D                 ja      short HURTFAT   ; error (> cluster count)
DOSCODE:A46F                 call    MAPCLUSTER
DOSCODE:A472                 jb      short _DoContext
DOSCODE:A474                 push    word ptr [di+2] ; offset CLUSSAVE+2
DOSCODE:A477                 pop     ss:CCONTENT_HW  ; high word of cluster number
DOSCODE:A47C                 mov     di, [di]        ; offset CLUSSAVE
DOSCODE:A47E                 jnz     short High12
DOSCODE:A480                 call    IsFAT32
DOSCODE:A483                 jb      short up_fat32  ; FAT32 volume (drive)
DOSCODE:A485                 mov     ss:CCONTENT_HW, 0
DOSCODE:A48C                 mov     si, es:[bp+0Dh] ; [ES:BP+DPB.MAX_CLUSTER]
DOSCODE:A48C                                         ; is this 16-bit fat?
DOSCODE:A490                 cmp     si, 0FF6h       ; 4096-10
DOSCODE:A494                 jb      short Unpack12  ; No, go 'AND' off bits
DOSCODE:A496
DOSCODE:A496 up_fat32:                               ; ...
DOSCODE:A496                 or      di, di          ; set zero condition code, clears carry
DOSCODE:A498                 mov     si, ss
DOSCODE:A49A                 mov     ds, si
DOSCODE:A49C                 jnz     short up_retn
DOSCODE:A49E                 or      ds:CCONTENT_HW, di ; CCONTENT_HW:di = 0 -> zf = 1
DOSCODE:A4A2
DOSCODE:A4A2 up_retn:                                ; ...
DOSCODE:A4A2                 retn
DOSCODE:A4A3 ; ---------------------------------------------------------------------------
DOSCODE:A4A3
DOSCODE:A4A3 High12:                                 ; ...
DOSCODE:A4A3                 mov     ss:CCONTENT_HW, 0
DOSCODE:A4AA                 shr     di, 1
DOSCODE:A4AC                 shr     di, 1
DOSCODE:A4AE                 shr     di, 1
DOSCODE:A4B0                 shr     di, 1
DOSCODE:A4B2
DOSCODE:A4B2 Unpack12:                               ; ...
DOSCODE:A4B2                 and     di, 0FFFh
DOSCODE:A4B6
DOSCODE:A4B6 _DoContext:                             ; ...
DOSCODE:A4B6                 mov     si, ss
DOSCODE:A4B8                 mov     ds, si
DOSCODE:A4BA                 retn
DOSCODE:A4BB ; ---------------------------------------------------------------------------
DOSCODE:A4BB
DOSCODE:A4BB HURTFAT:                                ; ...
DOSCODE:A4BB                 call    chk_set_first_access
DOSCODE:A4BE                 push    ax
DOSCODE:A4BF                 mov     ah, 88h         ; Allowed_FAIL+80h
DOSCODE:A4C1                 mov     ss:ALLOWED, 8   ; Allowed_FAIL
DOSCODE:A4C7                 push    ss:CLUSTNUM_HW
DOSCODE:A4CC                 push    bx
DOSCODE:A4CD                 call    FATAL
DOSCODE:A4D0                 pop     bx
DOSCODE:A4D1                 pop     ss:CLUSTNUM_HW
DOSCODE:A4D6                 xor     di, di
DOSCODE:A4D8                 dec     di              ; 0FFFFh
DOSCODE:A4D9                 mov     ss:CCONTENT_HW, di
DOSCODE:A4DE                 cmp     al, 3
DOSCODE:A4E0                 clc
DOSCODE:A4E1                 jnz     short OKU_RET   ; Try to ignore bad FAT
DOSCODE:A4E3                 stc                     ; User said FAIL
DOSCODE:A4E4
DOSCODE:A4E4 OKU_RET:                                ; ...
DOSCODE:A4E4                 pop     ax
DOSCODE:A4E5
DOSCODE:A4E5 hurtfat_retn:                           ; ...
DOSCODE:A4E5                 retn
DOSCODE:A4E5 UNPACK          endp
DOSCODE:A4E5
DOSCODE:A4E6 ; ---------------------------------------------------------------------------
DOSCODE:A4E6 ; START OF FUNCTION CHUNK FOR PACK
DOSCODE:A4E6
DOSCODE:A4E6 p_clust_0:                              ; ...
DOSCODE:A4E6                 cmp     ds:CLUSTNUM_HW, bx ; 0
DOSCODE:A4EA                 jnz     short p_cont
DOSCODE:A4EC                 push    ax
DOSCODE:A4ED                 mov     ax, ds:CLUSDATA_HW ; Cluster Data/Content (High Word)
DOSCODE:A4F0                 mov     ds:CL0FATENTRY_HW, ax
DOSCODE:A4F3                 pop     ax
DOSCODE:A4F4                 mov     ds:CL0FATENTRY, dx
DOSCODE:A4F8                 retn
DOSCODE:A4F8 ; END OF FUNCTION CHUNK FOR PACK
DOSCODE:A4F9
DOSCODE:A4F9 ; =============== S U B R O U T I N E =======================================
DOSCODE:A4F9
DOSCODE:A4F9
DOSCODE:A4F9 PACK            proc near               ; ...
DOSCODE:A4F9
DOSCODE:A4F9 ; FUNCTION CHUNK AT DOSCODE:A4E6 SIZE 00000013 BYTES
DOSCODE:A4F9
DOSCODE:A4F9                 or      bx, bx          ; CLUSDATA_HW:DX = cluster data/content
DOSCODE:A4F9                                         ; CLUSTNUM_HW:BX = cluster number (to be updated)
DOSCODE:A4F9                                         ; ES:BP = pointer to DPB
DOSCODE:A4F9                                         ;
DOSCODE:A4F9                                         ; are we packing cluster 0 ?
DOSCODE:A4FB                 jz      short p_clust_0 ; place value in CL0FATENTRY
DOSCODE:A4FD
DOSCODE:A4FD p_cont:                                 ; ...
DOSCODE:A4FD                 call    MAPCLUSTER
DOSCODE:A500                 jb      short _DoContext
DOSCODE:A502                 mov     si, [di]
DOSCODE:A504                 jz      short ALIGNED
DOSCODE:A506                 add     dx, dx
DOSCODE:A508                 add     dx, dx
DOSCODE:A50A                 add     dx, dx
DOSCODE:A50C                 add     dx, dx
DOSCODE:A50E                 and     si, 0Fh
DOSCODE:A511                 jmp     short PACKIN
DOSCODE:A513 ; ---------------------------------------------------------------------------
DOSCODE:A513
DOSCODE:A513 ALIGNED:                                ; ...
DOSCODE:A513                 call    IsFAT32
DOSCODE:A516                 jnb     short p_fat
DOSCODE:A518                 mov     si, ss:CLUSDATA_HW
DOSCODE:A51D                 xor     si, [di+2]      ; hw of cluster number
DOSCODE:A51D                                         ; offset CLUSSAVE+2
DOSCODE:A520                 and     si, 0FFFh
DOSCODE:A524                 xor     [di+2], si
DOSCODE:A527                 mov     [di], dx
DOSCODE:A529                 jmp     short PACKIN2
DOSCODE:A52B ; ---------------------------------------------------------------------------
DOSCODE:A52B
DOSCODE:A52B p_fat:                                  ; ...
DOSCODE:A52B                 cmp     word ptr es:[bp+0Dh], 0FF6h
DOSCODE:A531                 jnb     short Pack16
DOSCODE:A533                 and     si, 0F000h
DOSCODE:A537                 and     dh, 0Fh
DOSCODE:A53A                 jmp     short PACKIN
DOSCODE:A53C ; ---------------------------------------------------------------------------
DOSCODE:A53C
DOSCODE:A53C Pack16:                                 ; ...
DOSCODE:A53C                 xor     si, si
DOSCODE:A53E
DOSCODE:A53E PACKIN:                                 ; ...
DOSCODE:A53E                 or      si, dx
DOSCODE:A540                 mov     [di], si
DOSCODE:A542
DOSCODE:A542 PACKIN2:                                ; ...
DOSCODE:A542                 lds     si, ss:CURBUF
DOSCODE:A547                 test    byte ptr [si+5], 40h ; [SI+BUFFINFO.buf_flags],buf_dirty
DOSCODE:A54B                 jnz     short yesdirty11
DOSCODE:A54D                 inc     ss:DirtyBufferCount
DOSCODE:A552                 or      byte ptr [si+5], 40h ; [SI+BUFFINFO.buf_flags],buf_dirty
DOSCODE:A556
DOSCODE:A556 yesdirty11:                             ; ...
DOSCODE:A556                 cmp     ss:CLUSSPLIT, 0
DOSCODE:A55C                 mov     dx, ss
DOSCODE:A55E                 mov     ds, dx
DOSCODE:A560                 jz      short hurtfat_retn
DOSCODE:A562                 push    ax
DOSCODE:A563                 push    ds:CLUSTNUM_HW
DOSCODE:A567                 push    bx
DOSCODE:A568                 push    cx
DOSCODE:A569                 mov     ax, ds:CLUSSAVE
DOSCODE:A56C                 add     si, 24          ; BUFINSIZ
DOSCODE:A56F                 mov     ds, word ptr ds:CURBUF+2
DOSCODE:A573                 assume ds:DOSCODE
DOSCODE:A573                 mov     [si], ah
DOSCODE:A575                 lds     dx, ss:CLUSSEC
DOSCODE:A57A                 assume ds:nothing
DOSCODE:A57A                 push    ax
DOSCODE:A57B                 mov     ss:HIGH_SECTOR, ds
DOSCODE:A580                 mov     si, ss
DOSCODE:A582                 mov     ds, si
DOSCODE:A584                 mov     si, 1
DOSCODE:A587                 xor     al, al
DOSCODE:A589                 call    GETBUFFRB
DOSCODE:A58C                 pop     ax
DOSCODE:A58D                 jb      short POPP_RET
DOSCODE:A58F                 lds     di, ds:CURBUF
DOSCODE:A593                 test    byte ptr [di+5], 40h ; [DI+BUFFINFO.buf_flags],buf_dirty
DOSCODE:A597                 jnz     short yesdirty12
DOSCODE:A599                 inc     ss:DirtyBufferCount
DOSCODE:A59E                 or      byte ptr [di+5], 40h ; [DI+BUFFINFO.buf_flags],buf_dirty
DOSCODE:A5A2
DOSCODE:A5A2 yesdirty12:                             ; ...
DOSCODE:A5A2                 add     di, 23          ; BUFINSIZ-1
DOSCODE:A5A5                 add     di, es:[bp+2]   ; [ES:BP+DPB.SECTOR_SIZE]
DOSCODE:A5A9                 clc
DOSCODE:A5AA                 mov     [di], al
DOSCODE:A5AC
DOSCODE:A5AC POPP_RET:                               ; ...
DOSCODE:A5AC                 mov     cx, ss
DOSCODE:A5AE                 mov     ds, cx
DOSCODE:A5B0                 pop     cx
DOSCODE:A5B1                 pop     bx
DOSCODE:A5B2                 pop     ss:CLUSTNUM_HW
DOSCODE:A5B7                 pop     ax
DOSCODE:A5B8                 retn
DOSCODE:A5B8 PACK            endp
DOSCODE:A5B8
DOSCODE:A5B9
DOSCODE:A5B9 ; =============== S U B R O U T I N E =======================================
DOSCODE:A5B9
DOSCODE:A5B9
DOSCODE:A5B9 IsFAT32         proc near               ; ...
DOSCODE:A5B9                 cmp     word ptr es:[bp+0Fh], 1 ; [es:bp+DBP.FAT_SIZE]
DOSCODE:A5BE                 jnb     short isfat32eof_2 ; not FAT32
DOSCODE:A5C0                 cmp     word ptr es:[bp+2Fh], 0 ; [es:bp+DPB.LAST_CLUSTER+2]
DOSCODE:A5C5                 jnz     short isfat32eof_1 ; FAT32
DOSCODE:A5C7                 cmp     word ptr es:[bp+2Dh], 0FFF6h ; [es:bp+DPB.LAST_CLUSTER]
DOSCODE:A5CC
DOSCODE:A5CC isfat32eof_1:                           ; ...
DOSCODE:A5CC                 cmc                     ; cf=1 -> FAT32
DOSCODE:A5CD
DOSCODE:A5CD isfat32eof_2:                           ; ...
DOSCODE:A5CD                 retn
DOSCODE:A5CD IsFAT32         endp
DOSCODE:A5CD
DOSCODE:A5CE ; ---------------------------------------------------------------------------
DOSCODE:A5CE ; START OF FUNCTION CHUNK FOR MAPCLUSTER
DOSCODE:A5CE
DOSCODE:A5CE loc_A5CE:                               ; ...
DOSCODE:A5CE                 xchg    ax, di
DOSCODE:A5CF                 xchg    ax, dx
DOSCODE:A5D0                 div     cx
DOSCODE:A5D2                 xchg    ax, di
DOSCODE:A5D3                 div     cx
DOSCODE:A5D5                 jmp     short loc_A637
DOSCODE:A5D5 ; END OF FUNCTION CHUNK FOR MAPCLUSTER
DOSCODE:A5D7
DOSCODE:A5D7 ; =============== S U B R O U T I N E =======================================
DOSCODE:A5D7
DOSCODE:A5D7
DOSCODE:A5D7 MAPCLUSTER      proc near               ; ...
DOSCODE:A5D7
DOSCODE:A5D7 ; FUNCTION CHUNK AT DOSCODE:A5CE SIZE 00000009 BYTES
DOSCODE:A5D7
DOSCODE:A5D7                 mov     ds:CLUSSPLIT, 0
DOSCODE:A5DC                 push    ax
DOSCODE:A5DD                 push    bx
DOSCODE:A5DE                 push    cx
DOSCODE:A5DF                 push    dx
DOSCODE:A5E0                 push    ds:CLUSTNUM_HW
DOSCODE:A5E4                 mov     ax, bx
DOSCODE:A5E6                 mov     dx, ds:CLUSTNUM_HW
DOSCODE:A5EA                 xor     di, di
DOSCODE:A5EC                 call    IsFAT32
DOSCODE:A5EF                 jnb     short loc_A5FF
DOSCODE:A5F1                 shl     ax, 1
DOSCODE:A5F3                 rcl     dx, 1
DOSCODE:A5F5                 rcl     di, 1
DOSCODE:A5F7                 shl     ax, 1
DOSCODE:A5F9                 rcl     dx, 1
DOSCODE:A5FB                 rcl     di, 1
DOSCODE:A5FD                 jmp     short loc_A613
DOSCODE:A5FF ; ---------------------------------------------------------------------------
DOSCODE:A5FF
DOSCODE:A5FF loc_A5FF:                               ; ...
DOSCODE:A5FF                 cmp     word ptr es:[bp+0Dh], 0FF6h
DOSCODE:A605                 jnb     short loc_A60B
DOSCODE:A607                 shr     dx, 1
DOSCODE:A609                 rcr     ax, 1
DOSCODE:A60B
DOSCODE:A60B loc_A60B:                               ; ...
DOSCODE:A60B                 add     ax, bx
DOSCODE:A60D                 adc     dx, ds:CLUSTNUM_HW
DOSCODE:A611                 adc     di, di
DOSCODE:A613
DOSCODE:A613 loc_A613:                               ; ...
DOSCODE:A613                 mov     cx, es:[bp+2]
DOSCODE:A617                 cmp     cx, 200h
DOSCODE:A61B                 jnz     short loc_A5CE
DOSCODE:A61D                 push    ax
DOSCODE:A61E                 shr     di, 1
DOSCODE:A620                 rcr     dx, 1
DOSCODE:A622                 rcr     ax, 1
DOSCODE:A624                 mov     al, ah
DOSCODE:A626                 mov     ah, dl
DOSCODE:A628                 mov     dl, dh
DOSCODE:A62A                 xor     dh, dh
DOSCODE:A62C                 shr     di, 1
DOSCODE:A62E                 adc     dh, dh
DOSCODE:A630                 xchg    dx, di
DOSCODE:A632                 pop     dx
DOSCODE:A633                 and     dx, 1FFh
DOSCODE:A637
DOSCODE:A637 loc_A637:                               ; ...
DOSCODE:A637                 add     ax, es:[bp+6]
DOSCODE:A63B                 adc     di, 0
DOSCODE:A63E                 dec     cx
DOSCODE:A63F                 push    di
DOSCODE:A640                 push    ax
DOSCODE:A641                 push    dx
DOSCODE:A642                 push    cx
DOSCODE:A643                 mov     dx, ax
DOSCODE:A645                 mov     ds:HIGH_SECTOR, di
DOSCODE:A649                 xor     al, al
DOSCODE:A64B                 mov     si, 1
DOSCODE:A64E                 call    GETBUFFRB
DOSCODE:A651                 pop     cx
DOSCODE:A652                 pop     ax
DOSCODE:A653                 pop     dx
DOSCODE:A654                 pop     bx
DOSCODE:A655                 jb      short loc_A6BC
DOSCODE:A657                 lds     si, ds:CURBUF
DOSCODE:A65B                 lea     di, [si+18h]
DOSCODE:A65E                 add     di, ax
DOSCODE:A660                 cmp     ax, cx
DOSCODE:A662                 jnz     short loc_A69F
DOSCODE:A664                 mov     al, [di]
DOSCODE:A666                 mov     si, ss
DOSCODE:A668                 mov     ds, si
DOSCODE:A66A                 inc     ds:CLUSSPLIT
DOSCODE:A66E                 mov     byte ptr ds:CLUSSAVE, al
DOSCODE:A671                 mov     word ptr ds:CLUSSEC, dx
DOSCODE:A675                 xor     ax, ax
DOSCODE:A677                 add     dx, 1
DOSCODE:A67A                 mov     word ptr ds:CLUSSEC+2, bx
DOSCODE:A67E                 adc     bx, ax
DOSCODE:A680                 mov     ds:HIGH_SECTOR, bx
DOSCODE:A684                 mov     si, 1
DOSCODE:A687                 call    GETBUFFRB
DOSCODE:A68A                 jb      short loc_A6BC
DOSCODE:A68C                 lds     si, ds:CURBUF
DOSCODE:A690                 lea     di, [si+18h]
DOSCODE:A693                 mov     al, [di]
DOSCODE:A695                 mov     di, ss
DOSCODE:A697                 mov     ds, di
DOSCODE:A699                 mov     byte ptr ds:CLUSSAVE+1, al
DOSCODE:A69C                 mov     di, offset CLUSSAVE
DOSCODE:A69F
DOSCODE:A69F loc_A69F:                               ; ...
DOSCODE:A69F                 pop     ss:CLUSTNUM_HW
DOSCODE:A6A4                 pop     dx
DOSCODE:A6A5                 pop     cx
DOSCODE:A6A6                 pop     bx
DOSCODE:A6A7                 xor     ax, ax
DOSCODE:A6A9                 call    IsFAT32
DOSCODE:A6AC                 jb      short loc_A6B8
DOSCODE:A6AE                 cmp     word ptr es:[bp+0Dh], 0FF6h
DOSCODE:A6B4                 jnb     short loc_A6B8
DOSCODE:A6B6                 mov     ax, bx
DOSCODE:A6B8
DOSCODE:A6B8 loc_A6B8:                               ; ...
DOSCODE:A6B8                 test    al, 1
DOSCODE:A6BA                 pop     ax
DOSCODE:A6BB                 retn
DOSCODE:A6BC ; ---------------------------------------------------------------------------
DOSCODE:A6BC
DOSCODE:A6BC loc_A6BC:                               ; ...
DOSCODE:A6BC                 pop     ss:CLUSTNUM_HW
DOSCODE:A6C1                 pop     dx
DOSCODE:A6C2                 pop     cx
DOSCODE:A6C3                 pop     bx
DOSCODE:A6C4                 pop     ax
DOSCODE:A6C5                 retn
DOSCODE:A6C5 MAPCLUSTER      endp ; sp-analysis failed
DOSCODE:A6C5
DOSCODE:A6C6
DOSCODE:A6C6 ; =============== S U B R O U T I N E =======================================
DOSCODE:A6C6
DOSCODE:A6C6
DOSCODE:A6C6 FATREAD_SFT     proc near               ; ...
DOSCODE:A6C6                 les     bp, es:[di+7]   ; [ES:DI+SF_ENTRY.sf_devptr]
DOSCODE:A6CA
DOSCODE:A6CA fatread_gotdpb:                         ; ...
DOSCODE:A6CA                 mov     al, es:[bp+0]
DOSCODE:A6CE                 mov     ds:THISDRV, al
DOSCODE:A6D1                 call    GOTDPB          ; Set THISDPB
DOSCODE:A6D4                 call    FAT_GOT_DPB
DOSCODE:A6D7
DOSCODE:A6D7 fatread_sft_retn:                       ; ...
DOSCODE:A6D7                 retn
DOSCODE:A6D7 FATREAD_SFT     endp
DOSCODE:A6D7
DOSCODE:A6D8
DOSCODE:A6D8 ; =============== S U B R O U T I N E =======================================
DOSCODE:A6D8
DOSCODE:A6D8
DOSCODE:A6D8 FATREAD_CDS     proc near               ; ...
DOSCODE:A6D8                 push    es
DOSCODE:A6D9                 push    di
DOSCODE:A6DA                 les     bp, es:[di+45h] ; [ES:DI+curdir.devptr]
DOSCODE:A6DE                 call    fatread_gotdpb
DOSCODE:A6E1                 pop     di
DOSCODE:A6E2                 pop     es
DOSCODE:A6E3                 jb      short fatread_sft_retn
DOSCODE:A6E5                 jnz     short NO_CHANGE
DOSCODE:A6E7                 mov     ax, 0FFFFh      ; -1
DOSCODE:A6EA                 push    ds
DOSCODE:A6EB                 mov     cl, ds:CDSCOUNT
DOSCODE:A6EF                 xor     ch, ch          ; CX is number of structures
DOSCODE:A6F1                 lds     si, es:[di+45h] ; Find all CDS with this devptr
DOSCODE:A6F5                 les     di, ss:CDSADDR  ; (es:di) = CDS pointer
DOSCODE:A6FA
DOSCODE:A6FA frcd20:                                 ; ...
DOSCODE:A6FA                 test    byte ptr es:[di+44h], 80h ; ES:DI+curdir.flags+1],
DOSCODE:A6FA                                         ; (curdir_isnet>>8)
DOSCODE:A6FF                 jnz     short frcd25
DOSCODE:A701                 cmp     si, es:[di+45h] ; [ES:DI+curdir.devptr]
DOSCODE:A705                 jnz     short frcd25    ; no match
DOSCODE:A707                 mov     bx, ds
DOSCODE:A709                 cmp     bx, es:[di+47h] ; [ES:DI+curdir.devptr+2]
DOSCODE:A70D                 jnz     short frcd25    ; CDS not for this drive
DOSCODE:A70F                 test    es:[di+49h], ax ; [ES:DI+curdir.ID]
DOSCODE:A70F                                         ; If root (0), leave root
DOSCODE:A713                 jz      short frcd25    ; = 0
DOSCODE:A715                 test    es:[di+4Bh], ax ; [ES:DI+curdir.ID+2]
DOSCODE:A719                 jz      short frcd25    ; leave root (= 0)
DOSCODE:A71B                 mov     es:[di+4Bh], ax ; else invalid (-1)
DOSCODE:A71F                 mov     es:[di+49h], ax ; -1
DOSCODE:A723
DOSCODE:A723 frcd25:                                 ; ...
DOSCODE:A723                 add     di, 88          ; add di,curdir.size
DOSCODE:A723                                         ; Point to next CDS
DOSCODE:A726                 loop    frcd20
DOSCODE:A728                 pop     ds
DOSCODE:A729
DOSCODE:A729 NO_CHANGE:                              ; ...
DOSCODE:A729                 les     bp, ds:THISDPB
DOSCODE:A72D                 clc
DOSCODE:A72E                 retn
DOSCODE:A72E FATREAD_CDS     endp
DOSCODE:A72E
DOSCODE:A72F
DOSCODE:A72F ; =============== S U B R O U T I N E =======================================
DOSCODE:A72F
DOSCODE:A72F
DOSCODE:A72F chk_set_first_access proc near          ; ...
DOSCODE:A72F                 cmp     word ptr es:[bp+0Fh], 0 ; DPB.FATSIZE
DOSCODE:A734                 jnz     short chk_set_fa_1 ; FAT (FAT12 or FAT16)
DOSCODE:A734                                         ; FAT32
DOSCODE:A736                 cmp     word ptr es:[bp+21h], 0FFFFh ; DPB.FREE_CNT_HW
DOSCODE:A73B                 mov     word ptr es:[bp+21h], 0FFFFh ; High word of free cluster count
DOSCODE:A741                 jnz     short chk_set_fa_2
DOSCODE:A743
DOSCODE:A743 chk_set_fa_1:                           ; ...
DOSCODE:A743                 cmp     word ptr es:[bp+1Fh], 0FFFFh ; DPB.FREE_CNT
DOSCODE:A748
DOSCODE:A748 chk_set_fa_2:                           ; ...
DOSCODE:A748                 mov     word ptr es:[bp+1Fh], 0FFFFh ; Count of free clusters, -1 if unknown
DOSCODE:A74E                 jz      short chk_set_fa_3
DOSCODE:A750                 or      byte ptr es:[bp+18h], 1 ; DPB.FIRST_ACCESS
DOSCODE:A755
DOSCODE:A755 chk_set_fa_3:                           ; ...
DOSCODE:A755                 retn
DOSCODE:A755 chk_set_first_access endp
DOSCODE:A755
DOSCODE:A756 ; ---------------------------------------------------------------------------
DOSCODE:A756 ; START OF FUNCTION CHUNK FOR FAT_GOT_DPB
DOSCODE:A756
DOSCODE:A756 FATERR:                                 ; ...
DOSCODE:A756                 call    chk_set_first_access ; Err in FAT must force recalc of freespace
DOSCODE:A759                 and     di, 0FFh        ; STECODE
DOSCODE:A75D                 mov     ds:ALLOWED, 18h ; [ALLOWED],Allowed_FAIL+Allowed_RETRY
DOSCODE:A762                 mov     ah, 1Ah         ; 2+Allowed_FAIL+Allowed_RETRY
DOSCODE:A762                                         ; (While trying to read FAT)
DOSCODE:A764                 mov     al, ds:THISDRV  ; Tell which drive
DOSCODE:A767                 call    FATAL1
DOSCODE:A76A                 les     bp, ds:THISDPB
DOSCODE:A76E                 cmp     al, 3
DOSCODE:A770                 jnz     short FAT_GOT_DPB ; User said retry
DOSCODE:A772
DOSCODE:A772 FATERR_fail:                            ; ...
DOSCODE:A772                 stc                     ; User said FAIL
DOSCODE:A773                 retn
DOSCODE:A773 ; END OF FUNCTION CHUNK FOR FAT_GOT_DPB
DOSCODE:A774
DOSCODE:A774 ; =============== S U B R O U T I N E =======================================
DOSCODE:A774
DOSCODE:A774
DOSCODE:A774 FAT_GOT_DPB     proc near               ; ...
DOSCODE:A774
DOSCODE:A774 ; FUNCTION CHUNK AT DOSCODE:A756 SIZE 0000001E BYTES
DOSCODE:A774
DOSCODE:A774                 push    ss              ; SS is DOSDATA
DOSCODE:A775                 pop     ds
DOSCODE:A776                 mov     ax, es
DOSCODE:A778                 or      ax, bp
DOSCODE:A77A                 jz      short FATERR_fail
DOSCODE:A77C                 mov     al, 19
DOSCODE:A77E                 mov     ah, es:[bp+1]   ; [ES:BP+DPB.UNIT]
DOSCODE:A782                 mov     ds:DEVCALL_REQFUNC, 1 ; DEVMDCH
DOSCODE:A787                 mov     word ptr ds:DEVCALL_REQLEN, ax
DOSCODE:A78A                 mov     al, es:[bp+17h] ; [ES:BP+DPB.MEDIA]
DOSCODE:A78E                 mov     ds:DEVCALL_REQSTAT, 0
DOSCODE:A794                 mov     ds:CALLUNIT, al ; [CALLMED]
DOSCODE:A797                 push    es
DOSCODE:A798                 push    ds
DOSCODE:A799                 mov     bx, offset DEVCALL_REQLEN ; offset DEVCALL
DOSCODE:A79C                 lds     si, es:[bp+13h] ; [ES:BP+DPB.DRIVER_ADDR]
DOSCODE:A7A0                 pop     es
DOSCODE:A7A1                 call    DEVIOCALL2
DOSCODE:A7A4                 push    ss
DOSCODE:A7A5                 pop     ds
DOSCODE:A7A6                 pop     es
DOSCODE:A7A7                 mov     di, ds:DEVCALL_REQSTAT
DOSCODE:A7AB                 or      di, di
DOSCODE:A7AD                 js      short FATERR
DOSCODE:A7AF                 mov     ah, es:[bp+18h] ; [ES:BP+DPB.FIRST_ACCESS]
DOSCODE:A7B3                 mov     al, ds:THISDRV  ; Use physical unit number
DOSCODE:A7B6                 and     ah, 80h         ; izolate (FAT) first access bit
DOSCODE:A7B9                 and     byte ptr es:[bp+18h], 7Fh ; clear first access (FAT) bit 7
DOSCODE:A7BE                 cmp     ds:VOLCHNG_FLAG, al
DOSCODE:A7C2                 jnz     short CHECK_BYT
DOSCODE:A7C4                 mov     ds:VOLCHNG_FLAG, 0FFh
DOSCODE:A7C9                 jmp     GOGETBPB
DOSCODE:A7CC ; ---------------------------------------------------------------------------
DOSCODE:A7CC
DOSCODE:A7CC CHECK_BYT:                              ; ...
DOSCODE:A7CC                 or      ah, ds:CALLBR   ; [CALLRBYT]
DOSCODE:A7D0                 js      short NEWDSK
DOSCODE:A7D2                 jz      short CHKBUFFDIRT
DOSCODE:A7D4                 clc
DOSCODE:A7D5                 retn                    ; Media not changed (NZ)
DOSCODE:A7D6 ; ---------------------------------------------------------------------------
DOSCODE:A7D6
DOSCODE:A7D6 DISK_CHNG_ERR:                          ; ...
DOSCODE:A7D6                 push    es
DOSCODE:A7D7                 push    bp
DOSCODE:A7D8                 les     bp, es:[bp+13h] ; [ES:BP+DPB.DRIVER_ADDR]
DOSCODE:A7DC                 test    byte ptr es:[bp+5], 8 ; [es:bp+SYSDEV.ATT+1],(DEVOPCL>>8)
DOSCODE:A7E1                 pop     bp
DOSCODE:A7E2                 pop     es
DOSCODE:A7E3                 jz      short FAIL_OPJ2
DOSCODE:A7E5                 push    ds
DOSCODE:A7E6                 push    di
DOSCODE:A7E7                 push    ss
DOSCODE:A7E8                 pop     ds
DOSCODE:A7E9                 mov     ds:ALLOWED, 18h ; Allowed_FAIL+Allowed_RETRY
DOSCODE:A7EE                 push    es
DOSCODE:A7EF                 les     di, dword ptr ds:CALLVIDM ; Get volume ID pointer
DOSCODE:A7F3                 mov     word ptr ds:EXTERRPT+2, es
DOSCODE:A7F7                 pop     es
DOSCODE:A7F8                 mov     word ptr ds:EXTERRPT, di
DOSCODE:A7FC                 mov     ax, 0Fh         ; error_I24_wrong_disk
DOSCODE:A7FF                 mov     ds:READOP, 1    ; Write
DOSCODE:A804                 call    HARDERR
DOSCODE:A807                 pop     di
DOSCODE:A808                 pop     ds
DOSCODE:A809                 cmp     al, 3
DOSCODE:A80B
DOSCODE:A80B FAIL_OPJ2:                              ; ...
DOSCODE:A80B                 jz      short FAIL_OP
DOSCODE:A80D                 jmp     FAT_GOT_DPB     ; Retry
DOSCODE:A810 ; ---------------------------------------------------------------------------
DOSCODE:A810
DOSCODE:A810 CHKBUFFDIRT:                            ; ...
DOSCODE:A810                 cmp     ss:DirtyBufferCount, 0 ; any dirty buffers ?
DOSCODE:A816                 jz      short NEWDSK    ; no, skip the check
DOSCODE:A818                 call    GETCURHEAD      ; get pointer to first buffer
DOSCODE:A81B
DOSCODE:A81B nbuffer:                                ; ...
DOSCODE:A81B                 cmp     [di+4], al      ; [di+BUFFINFO.buf_ID] ; Unit OK ?
DOSCODE:A81E                 jnz     short lfnxt     ; no
DOSCODE:A820                 test    byte ptr [di+5], 40h ; is the buffer dirty ?
DOSCODE:A824                 jz      short lfnxt     ; no, go for next buffer
DOSCODE:A826                 push    ss
DOSCODE:A827                 clc
DOSCODE:A828                 pop     ds
DOSCODE:A829                 retn
DOSCODE:A82A ; ---------------------------------------------------------------------------
DOSCODE:A82A
DOSCODE:A82A FAIL_OP:                                ; ...
DOSCODE:A82A                 push    ss
DOSCODE:A82B                 stc
DOSCODE:A82C                 pop     ds
DOSCODE:A82D                 retn
DOSCODE:A82E ; ---------------------------------------------------------------------------
DOSCODE:A82E
DOSCODE:A82E jmp_to_DISK_CHNG_ERR:                   ; ...
DOSCODE:A82E                 jmp     short DISK_CHNG_ERR
DOSCODE:A830 ; ---------------------------------------------------------------------------
DOSCODE:A830
DOSCODE:A830 lfnxt:                                  ; ...
DOSCODE:A830                 mov     di, [di]        ; [di+BUFFINFO.buf_next] ; get next buffer
DOSCODE:A832                 cmp     ss:FIRST_BUFF_ADDR, di ; is this where we started ?
DOSCODE:A837                 jnz     short nbuffer   ; no, check this guy also
DOSCODE:A837                                         ; If no dirty buffers, assume Media changed
DOSCODE:A839
DOSCODE:A839 NEWDSK:                                 ; ...
DOSCODE:A839                 mov     word ptr es:[bp+1Fh], 0FFFFh ; [ES:BP+DPB.FREE_CNT],-1
DOSCODE:A839                                         ; Media changed, must recompute
DOSCODE:A83F                 cmp     word ptr es:[bp+0Fh], 0 ; [ES:BP+DPB.FATSIZE] = 0 for FAT32 fs
DOSCODE:A844                 jnz     short newdsk2
DOSCODE:A846                 mov     word ptr es:[bp+21h], 0FFFFh ; [ES:BP+DPB.FREE_CNT_HW],-1
DOSCODE:A84C
DOSCODE:A84C newdsk2:                                ; ...
DOSCODE:A84C                 call    GETCURHEAD
DOSCODE:A84F
DOSCODE:A84F nxbuffer:                               ; ...
DOSCODE:A84F                 cmp     [di+4], al      ; [DI+BUFFINFO.buf_ID],al ; This drive ?
DOSCODE:A852                 jnz     short lfnxt2
DOSCODE:A854                 test    byte ptr [di+5], 40h ; [DI+BUFFINFO.buf_flags],buf_dirty
DOSCODE:A858                 jnz     short jmp_to_DISK_CHNG_ERR
DOSCODE:A85A                 mov     word ptr [di+4], 20FFh ; [DI+BUFFINFO.buf_ID],
DOSCODE:A85A                                         ; (buf_visit*256)+0FFh ; free up
DOSCODE:A85F                 call    SCANPLACE
DOSCODE:A862                 jmp     short skpbuff
DOSCODE:A864 ; ---------------------------------------------------------------------------
DOSCODE:A864
DOSCODE:A864 lfnxt2:                                 ; ...
DOSCODE:A864                 mov     di, [di]
DOSCODE:A866
DOSCODE:A866 skpbuff:                                ; ...
DOSCODE:A866                 cmp     di, ss:FIRST_BUFF_ADDR
DOSCODE:A86B                 jnz     short nxbuffer
DOSCODE:A86D                 cmp     ss:SC_CACHE_COUNT, 0 ; look ahead buffers ?
DOSCODE:A873                 jz      short GOGETBPB  ; no
DOSCODE:A875                 cmp     al, ss:CurSC_DRIVE ; same as changed drive ?
DOSCODE:A87A                 jnz     short GOGETBPB  ; no
DOSCODE:A87C                 mov     ss:CurSC_DRIVE, 0FFh ; invalidate look ahead buffers
DOSCODE:A882
DOSCODE:A882 GOGETBPB:                               ; ...
DOSCODE:A882                 lds     di, es:[bp+13h] ; [ES:BP+DPB.DRIVER_ADDR]
DOSCODE:A886                 test    byte ptr [di+5], 20h ; [DI+SYSDEV.ATT+1],(ISFATBYDEV>>8)
DOSCODE:A88A                 jnz     short GETFREEBUF
DOSCODE:A88C                 push    ss
DOSCODE:A88D                 pop     ds
DOSCODE:A88E                 mov     word ptr es:[bp+2], 200h ; DPB.SECTORSIZE ; bytes per sector
DOSCODE:A894                 mov     word ptr es:[bp+6], 1 ; DPB.FIRST_FAT ; starting sector of FATs
DOSCODE:A89A                 mov     byte ptr es:[bp+8], 1 ; DPB.FAT_COUNT ; number of FATs
DOSCODE:A89F                 mov     word ptr es:[bp+0Dh], 3 ; DPB.MAX_CLUSTER ; cluster count + 1
DOSCODE:A8A5                 mov     word ptr es:[bp+0Fh], 1 ; DPB.FAT_SIZE ; FAT sectors (16 bit)
DOSCODE:A8AB                 mov     ds:CLUSTNUM_HW, 0 ; high word of cluster number (for UNPACK)
DOSCODE:A8B1                 mov     bx, 2           ; Read the 1st FAT sector into CURBUF
DOSCODE:A8B4                 call    UNPACK
DOSCODE:A8B7
DOSCODE:A8B7 FAIL_OPJ:                               ; ...
DOSCODE:A8B7                 jnb     short unpack_ok
DOSCODE:A8B9                 jmp     FAIL_OP
DOSCODE:A8BC ; ---------------------------------------------------------------------------
DOSCODE:A8BC
DOSCODE:A8BC unpack_ok:                              ; ...
DOSCODE:A8BC                 lds     di, ds:CURBUF
DOSCODE:A8C0                 jmp     short GOTGETBUF
DOSCODE:A8C2 ; ---------------------------------------------------------------------------
DOSCODE:A8C2
DOSCODE:A8C2 GETFREEBUF:                             ; ...
DOSCODE:A8C2                 xor     dx, dx
DOSCODE:A8C4                 lds     di, ss:LoMemBuff
DOSCODE:A8C9                 sub     di, 24          ; sub di,BUFINSIZ
DOSCODE:A8CC                 cmp     ss:BuffInHMA, dl ; 0
DOSCODE:A8D1                 jnz     short GOTGETBUF ; buffer is in HMA
DOSCODE:A8D1                                         ; use [LowMemBuff] to transfer at first
DOSCODE:A8D3                 push    es
DOSCODE:A8D4                 push    bp
DOSCODE:A8D5                 mov     ss:HIGH_SECTOR, dx ; 0
DOSCODE:A8DA                 call    GETCURHEAD
DOSCODE:A8DD                 call    BUFWRITE
DOSCODE:A8E0                 pop     bp
DOSCODE:A8E1                 pop     es
DOSCODE:A8E2                 jb      short FAIL_OPJ
DOSCODE:A8E4
DOSCODE:A8E4 GOTGETBUF:                              ; ...
DOSCODE:A8E4                 add     di, 24          ; add di,BUFINSIZ
DOSCODE:A8E7                 mov     ss:CALLXAD_2, ds ; [SS:CALLXAD+2]
DOSCODE:A8EC                 mov     ax, ss
DOSCODE:A8EE                 mov     ds, ax
DOSCODE:A8F0                 mov     word ptr ds:CALLBR, di ; [CALLXAD]
DOSCODE:A8F4                 mov     al, 16h         ; DBPBHL
DOSCODE:A8F6                 mov     ah, es:[bp+1]   ; [ES:BP+DPB.UNIT]
DOSCODE:A8FA                 mov     ds:DEVCALL_REQFUNC, 2 ; DEVBPB
DOSCODE:A8FF                 mov     word ptr ds:DEVCALL_REQLEN, ax
DOSCODE:A902                 mov     ds:DEVCALL_REQSTAT, 0
DOSCODE:A908                 mov     al, es:[bp+17h] ; [ES:BP+DPB.MEDIA]
DOSCODE:A90C                 push    es
DOSCODE:A90D                 push    ds
DOSCODE:A90E                 mov     ds:CALLUNIT, al ; [CALLMED]
DOSCODE:A911                 mov     bx, offset DEVCALL_REQLEN ; offset DEVCALL
DOSCODE:A914                 lds     si, es:[bp+13h] ; [ES:BP+DPB.DRIVER_ADDR]
DOSCODE:A914                                         ; DS:SI Points to device header
DOSCODE:A918                 pop     es              ; ES:BX Points to call header
DOSCODE:A919                 call    DEVIOCALL2
DOSCODE:A91C                 pop     es
DOSCODE:A91D                 mov     di, ss
DOSCODE:A91F                 mov     ds, di
DOSCODE:A921                 mov     di, ds:DEVCALL_REQSTAT
DOSCODE:A925                 or      di, di
DOSCODE:A927                 jns     short gotgetbuf2 ;
DOSCODE:A927                                         ; have error
DOSCODE:A929                 lds     di, dword ptr ds:CALLBR ; [CALLXAD] ; Buffer (data) address
DOSCODE:A92D                 mov     word ptr [di-20], 0FFh ; byte BUFFINFO.buf_ID = 0FFh ; FREE
DOSCODE:A92D                                         ; byte BUFFINFO.buf_flags = 0
DOSCODE:A932                 jmp     FATERR
DOSCODE:A935 ; ---------------------------------------------------------------------------
DOSCODE:A935
DOSCODE:A935 gotgetbuf2:                             ; ...
DOSCODE:A935                 lds     si, dword ptr ds:CALLBPB ; Address of the BPB (DEVCALL offset 18)
DOSCODE:A939                 xor     cx, cx          ; 0
DOSCODE:A93B                 mov     es:[bp+1Dh], cx ; [ES:BP+DPB.NEXT_FREE] = 0
DOSCODE:A93B                                         ; recycle scanning pointer
DOSCODE:A93F                 mov     dx, 4152h       ; 'RA' ; FAT32 extended BPB/DPB signature
DOSCODE:A942                 cmp     [si+0Bh], cx    ; BPB.fatsecs ; 16 bit FAT size = 0 for FAT32 fs
DOSCODE:A945                 jnz     short gotgetbuf3 ; not FAT32
DOSCODE:A947                 mov     es:[bp+39h], cx ; clear reserved bytes (DPB.RESERVED)
DOSCODE:A94B                 mov     es:[bp+3Bh], cx
DOSCODE:A94F                 dec     cx              ; -1
DOSCODE:A950                 mov     es:[bp+1Fh], cx ; (DPB.FREE_CNT) set free count to -1 (unknown)
DOSCODE:A954                 mov     es:[bp+21h], cx
DOSCODE:A958                 mov     cx, 4558h       ; 'XE' ; FAT32 extended BPB/DPB signature
DOSCODE:A95B
DOSCODE:A95B gotgetbuf3:                             ; ...
DOSCODE:A95B                 call    $SETDPB
DOSCODE:A95E                 lds     di, dword ptr ss:CALLBR ; [SS:CALLXAD] ; Get back buffer pointer
DOSCODE:A963                 mov     dx, es:[bp+25h] ; [es:bp+DPB.FSINFO_SECTOR]
DOSCODE:A967                 xor     cx, cx          ; 0
DOSCODE:A969                 cmp     es:[bp+0Fh], cx ; [es:bp+DPB.FAT_SIZE] ; 16 bit FAT size field
DOSCODE:A96D                 jz      short gotgetbuf4 ; FAT32 fs
DOSCODE:A96F                 jmp     gotgetbuf12     ; FAT fs
DOSCODE:A972 ; ---------------------------------------------------------------------------
DOSCODE:A972
DOSCODE:A972 gotgetbuf4:                             ; ...
DOSCODE:A972                 cmp     dx, 0FFFFh      ; invalid ?
DOSCODE:A975                 jnz     short gotgetbuf5 ; no
DOSCODE:A977                 jmp     gotgetbuf12     ; skip reading FSINFO sector
DOSCODE:A97A ; ---------------------------------------------------------------------------
DOSCODE:A97A
DOSCODE:A97A gotgetbuf5:                             ; ...
DOSCODE:A97A                 mov     ss:HIGH_SECTOR, cx ; 0
DOSCODE:A97F                 mov     bx, di
DOSCODE:A981                 cmp     ss:BuffInHMA, 0
DOSCODE:A987                 jz      short gotgetbuf6 ; buffer is in conventional (<=640KB) memory
DOSCODE:A989                 lds     bx, ss:LoMemBuff ; use a buffer in conventional memory
DOSCODE:A98E                 mov     di, bx
DOSCODE:A990
DOSCODE:A990 gotgetbuf6:                             ; ...
DOSCODE:A990                 mov     ss:ALLOWED, 18h ; Allowed_FAIL+Allowed_RETRY
DOSCODE:A996                 inc     cx
DOSCODE:A997                 push    di
DOSCODE:A998                 push    bx
DOSCODE:A999                 call    DREAD
DOSCODE:A99C                 pop     bx
DOSCODE:A99D                 pop     di
DOSCODE:A99E                 jb      short gotgetbuf11 ;
DOSCODE:A99E                                         ; ds:di = (FSINFO sector) buffer
DOSCODE:A99E                                         ; FSI_HeadSig = 41615252h
DOSCODE:A9A0                 cmp     word ptr [di], 5252h ; 'RR' ; check if it is a valid FSINFO sector
DOSCODE:A9A4                 jnz     short gotgetbuf11 ; not valid
DOSCODE:A9A6                 cmp     word ptr [di+2], 4161h ; 'aA' ; (NASM syntax)
DOSCODE:A9AB                 jnz     short gotgetbuf11
DOSCODE:A9AD                 cmp     word ptr [di+484], 7272h ; 'rr' ; FSI_StrucSig = 61417272h
DOSCODE:A9B3                 jnz     short gotgetbuf11
DOSCODE:A9B5                 cmp     word ptr [di+486], 6141h ; 'Aa'
DOSCODE:A9BB                 jnz     short gotgetbuf11 ; not valid
DOSCODE:A9BD                 push    dx              ; valid
DOSCODE:A9BE                 push    bx
DOSCODE:A9BF                 push    cx
DOSCODE:A9C0                 mov     bx, es:[bp+2Fh] ; [es:bp+DPB.LASTCLUSTER+2]
DOSCODE:A9C4                 mov     cx, es:[bp+2Dh] ; [es:bp+DPB.LASTCLUSTER]
DOSCODE:A9C8                 mov     ax, [di+488]    ; FSI_FreeCount ; bx:cx = number of clusters + 1
DOSCODE:A9CC                 mov     dx, [di+490]    ; FSI_FreeCount+2
DOSCODE:A9D0                 cmp     dx, bx          ; is Free Count >= (Number of Clusters + 1) ?
DOSCODE:A9D2                 jnz     short gotgetbuf7 ; if yes, it is invalid value (must be 0FFFFFFFFh)
DOSCODE:A9D4                 cmp     ax, cx
DOSCODE:A9D6
DOSCODE:A9D6 gotgetbuf7:                             ; ...
DOSCODE:A9D6                 jnb     short gotgetbuf8 ; yes, invalid value (must be 0FFFFFFFFh)
DOSCODE:A9D8                 mov     es:[bp+1Fh], ax ; no, valid free count
DOSCODE:A9D8                                         ; save free count into [es:bp+DPB.FREE_CNT]
DOSCODE:A9DC                 mov     es:[bp+21h], dx ; [es:bp+DPB.FREE_CNT+2]
DOSCODE:A9E0
DOSCODE:A9E0 gotgetbuf8:                             ; ...
DOSCODE:A9E0                 mov     ax, [di+492]    ; FSI_Nxt_Free
DOSCODE:A9E4                 mov     dx, [di+494]
DOSCODE:A9E8                 cmp     dx, bx          ; is the next free clust num >= (num of clusters + 1) ?
DOSCODE:A9EA                 jnz     short gotgetbuf9 ; invalid (if dx > bx)
DOSCODE:A9EC                 cmp     ax, cx
DOSCODE:A9EE
DOSCODE:A9EE gotgetbuf9:                             ; ...
DOSCODE:A9EE                 jnb     short gotgetbuf10 ; invalid
DOSCODE:A9F0                 mov     es:[bp+39h], ax ; save next free (search) cluster number
DOSCODE:A9F4                 mov     es:[bp+3Bh], dx ; into [es:bp+DPB.FAT32_NXTFREE]
DOSCODE:A9F8                 mov     es:[bp+1Dh], ax ; and into [es:bp+DPB.NEXT_FREE] ; low word
DOSCODE:A9FC
DOSCODE:A9FC gotgetbuf10:                            ; ...
DOSCODE:A9FC                 pop     cx
DOSCODE:A9FD                 pop     bx
DOSCODE:A9FE                 pop     dx
DOSCODE:A9FF
DOSCODE:A9FF gotgetbuf11:                            ; ...
DOSCODE:A9FF                 cmp     ss:BuffInHMA, 0 ; is buffer in HMA ?
DOSCODE:AA05                 jnz     short gotgetbuf12 ; yes
DOSCODE:AA07                 mov     word ptr [di-20], 0FFh ; invalidate buffer (set it as free buffer)
DOSCODE:AA0C
DOSCODE:AA0C gotgetbuf12:                            ; ...
DOSCODE:AA0C                 cmp     ss:BuffInHMA, 0
DOSCODE:AA12                 jnz     short gotgetbuf16
DOSCODE:AA14                 cmp     word ptr es:[bp+6], 1
DOSCODE:AA19                 jz      short gotgetbuf13
DOSCODE:AA1B                 mov     word ptr [di-20], 0FFh ; invalidate buffer (set it as free buffer)
DOSCODE:AA1B                                         ; di = buffer header + 4 (BUFINFO.buf_ID)
DOSCODE:AA20
DOSCODE:AA20 gotgetbuf13:                            ; ...
DOSCODE:AA20                 mov     al, es:[bp+8]   ; [es:bp+DPB.FAT_COUNT]
DOSCODE:AA24                 mov     [di-14], al     ; BUFFINFO.buf_wrtcnt ; buffer header address + 10
DOSCODE:AA27                 mov     ax, es:[bp+0Fh] ; [es:bp+DPB.FAT_SIZE] ; 16 bit FAT size field
DOSCODE:AA2B                 or      ax, ax
DOSCODE:AA2D                 jnz     short gotgetbuf14 ; FAT (FAT12 or FAT16) fs
DOSCODE:AA2D                                         ; FAT32 fs
DOSCODE:AA2F                 mov     ax, es:[bp+31h] ; [es:bp+DPB.FAT32_SIZE] ; FAT sectors (per one FAT)
DOSCODE:AA33                 mov     [di-13], ax     ; BUFFINFO.buf_wrtcntinc ; # sectors between each write
DOSCODE:AA36                 mov     ax, es:[bp+33h] ; [es:bp+DPB.FAT32_SIZE+2]
DOSCODE:AA3A                 jmp     short gotgetbuf15
DOSCODE:AA3C ; ---------------------------------------------------------------------------
DOSCODE:AA3C
DOSCODE:AA3C gotgetbuf14:                            ; ...
DOSCODE:AA3C                 mov     [di-13], ax     ; BUFFINFO.buf_wrtcntinc
DOSCODE:AA3F                 xor     ax, ax          ; 0
DOSCODE:AA41
DOSCODE:AA41 gotgetbuf15:                            ; ...
DOSCODE:AA41                 mov     [di-15], ax     ; BUFFINFO.buf_wrtcntinc+2 ; hw of sectors per FAT
DOSCODE:AA44
DOSCODE:AA44 gotgetbuf16:                            ; ...
DOSCODE:AA44                 mov     ax, ss          ; SS is DOSDATA
DOSCODE:AA46                 mov     ds, ax
DOSCODE:AA48                 xor     al, al          ; Media changed (Z), Carry clear
DOSCODE:AA4A                 retn
DOSCODE:AA4A FAT_GOT_DPB     endp
DOSCODE:AA4A
DOSCODE:AA4B
DOSCODE:AA4B ; =============== S U B R O U T I N E =======================================
DOSCODE:AA4B
DOSCODE:AA4B
DOSCODE:AA4B GETCURHEAD      proc near               ; ...
DOSCODE:AA4B                 lds     di, ss:BufferQueue ; Pointer to the first buffer
DOSCODE:AA50                 mov     word ptr ss:LastBuffer, 0FFFFh ; -1 ; invalidate last buffer
DOSCODE:AA57                 mov     ss:FIRST_BUFF_ADDR, di ; save first buffer address
DOSCODE:AA5C                 retn
DOSCODE:AA5C GETCURHEAD      endp
DOSCODE:AA5C
DOSCODE:AA5D
DOSCODE:AA5D ; =============== S U B R O U T I N E =======================================
DOSCODE:AA5D
DOSCODE:AA5D
DOSCODE:AA5D SCANPLACE       proc near               ; ...
DOSCODE:AA5D                 push    word ptr [di]
DOSCODE:AA5F                 call    PLACEBUF
DOSCODE:AA62                 pop     di
DOSCODE:AA63                 retn
DOSCODE:AA63 SCANPLACE       endp
DOSCODE:AA63
DOSCODE:AA64
DOSCODE:AA64 ; =============== S U B R O U T I N E =======================================
DOSCODE:AA64
DOSCODE:AA64
DOSCODE:AA64 PLACEBUF        proc near               ; ...
DOSCODE:AA64                 push    ax
DOSCODE:AA65                 push    bx
DOSCODE:AA66                 mov     ax, [di]
DOSCODE:AA68                 mov     bx, ss:6Dh
DOSCODE:AA6D                 cmp     ax, bx
DOSCODE:AA6F                 jz      short loc_AA93
DOSCODE:AA71                 cmp     di, bx
DOSCODE:AA73                 jnz     short loc_AA7B
DOSCODE:AA75                 mov     ss:6Dh, ax
DOSCODE:AA79                 jmp     short loc_AA93
DOSCODE:AA7B ; ---------------------------------------------------------------------------
DOSCODE:AA7B
DOSCODE:AA7B loc_AA7B:                               ; ...
DOSCODE:AA7B                 push    si
DOSCODE:AA7C                 mov     si, [di+2]
DOSCODE:AA7F                 mov     [si], ax
DOSCODE:AA81                 xchg    ax, si
DOSCODE:AA82                 mov     [si+2], ax
DOSCODE:AA85                 mov     si, [bx+2]
DOSCODE:AA88                 mov     [bx+2], di
DOSCODE:AA8B                 mov     [si], di
DOSCODE:AA8D                 mov     [di+2], si
DOSCODE:AA90                 mov     [di], bx
DOSCODE:AA92                 pop     si
DOSCODE:AA93
DOSCODE:AA93 loc_AA93:                               ; ...
DOSCODE:AA93                 pop     bx
DOSCODE:AA94                 pop     ax
DOSCODE:AA95                 cmp     byte ptr [di+4], 0FFh
DOSCODE:AA99                 jnz     short locret_AAA0
DOSCODE:AA9B                 mov     ss:6Dh, di
DOSCODE:AAA0
DOSCODE:AAA0 locret_AAA0:                            ; ...
DOSCODE:AAA0                 retn
DOSCODE:AAA0 PLACEBUF        endp
DOSCODE:AAA0
DOSCODE:AAA1 ; ---------------------------------------------------------------------------
DOSCODE:AAA1
DOSCODE:AAA1 POINTCOMP:                              ; ...
DOSCODE:AAA1                 cmp     si, di
DOSCODE:AAA3                 jnz     short _ret_label
DOSCODE:AAA5                 push    cx
DOSCODE:AAA6                 push    dx
DOSCODE:AAA7                 mov     cx, ds
DOSCODE:AAA9                 mov     dx, es
DOSCODE:AAAB                 cmp     cx, dx
DOSCODE:AAAD                 pop     dx
DOSCODE:AAAE                 pop     cx
DOSCODE:AAAF
DOSCODE:AAAF _ret_label:                             ; ...
DOSCODE:AAAF                 retn
DOSCODE:AAB0 ; ---------------------------------------------------------------------------
DOSCODE:AAB0
DOSCODE:AAB0 GETBUFFR:                               ; ...
DOSCODE:AAB0                 xor     si, si
DOSCODE:AAB2
DOSCODE:AAB2 GETBUFFRB:                              ; ...
DOSCODE:AAB2                 mov     ds:PREREAD, ax
DOSCODE:AAB5                 or      si, si
DOSCODE:AAB7                 jz      short loc_AAE2
DOSCODE:AAB9                 cmp     word ptr es:[bp+0Fh], 0
DOSCODE:AABE                 jnz     short loc_AAE2
DOSCODE:AAC0                 mov     ax, es:[bp+23h]
DOSCODE:AAC4                 test    al, 80h
DOSCODE:AAC6                 jz      short loc_AAE2
DOSCODE:AAC8                 and     ax, 0Fh
DOSCODE:AACB                 jz      short loc_AAE2
DOSCODE:AACD                 push    dx
DOSCODE:AACE                 mov     cx, ax
DOSCODE:AAD0                 mul     word ptr es:[bp+33h]
DOSCODE:AAD4                 xchg    ax, cx
DOSCODE:AAD5                 mul     word ptr es:[bp+31h]
DOSCODE:AAD9                 add     cx, dx
DOSCODE:AADB                 pop     dx
DOSCODE:AADC                 add     dx, ax
DOSCODE:AADE                 adc     ds:HIGH_SECTOR, cx
DOSCODE:AAE2
DOSCODE:AAE2 loc_AAE2:                               ; ...
DOSCODE:AAE2                 mov     al, es:[bp+0]
DOSCODE:AAE6                 mov     bx, 0FFFFh
DOSCODE:AAE9                 lds     di, ds:1Eh
DOSCODE:AAED                 mov     cx, ss:HIGH_SECTOR
DOSCODE:AAF2                 cmp     di, 0FFFFh
DOSCODE:AAF5                 jz      short loc_AB09
DOSCODE:AAF7                 cmp     dx, [di+6]
DOSCODE:AAFA                 jnz     short loc_AB09
DOSCODE:AAFC                 cmp     cx, [di+8]
DOSCODE:AAFF                 jnz     short loc_AB09
DOSCODE:AB01                 cmp     al, [di+4]
DOSCODE:AB04                 jnz     short loc_AB09
DOSCODE:AB06                 jmp     loc_AC1B
DOSCODE:AB09 ; ---------------------------------------------------------------------------
DOSCODE:AB09
DOSCODE:AB09 loc_AB09:                               ; ...
DOSCODE:AB09                 lds     di, ss:BufferQueue
DOSCODE:AB0E                 mov     word ptr ss:LastBuffer, 0FFFFh
DOSCODE:AB15                 mov     ss:FIRST_BUFF_ADDR, di
DOSCODE:AB1A
DOSCODE:AB1A loc_AB1A:                               ; ...
DOSCODE:AB1A                 cmp     dx, [di+6]
DOSCODE:AB1D                 jnz     short loc_AB2C
DOSCODE:AB1F                 cmp     cx, [di+8]
DOSCODE:AB22                 jnz     short loc_AB2C
DOSCODE:AB24                 cmp     al, [di+4]
DOSCODE:AB27                 jnz     short loc_AB2C
DOSCODE:AB29                 jmp     loc_ABD0
DOSCODE:AB2C ; ---------------------------------------------------------------------------
DOSCODE:AB2C
DOSCODE:AB2C loc_AB2C:                               ; ...
DOSCODE:AB2C                 cmp     byte ptr [di+4], 0FFh
DOSCODE:AB30                 jnz     short loc_AB34
DOSCODE:AB32                 mov     bx, di
DOSCODE:AB34
DOSCODE:AB34 loc_AB34:                               ; ...
DOSCODE:AB34                 mov     di, [di]
DOSCODE:AB36                 cmp     di, ss:FIRST_BUFF_ADDR
DOSCODE:AB3B                 jnz     short loc_AB1A
DOSCODE:AB3D                 cmp     bx, 0FFFFh
DOSCODE:AB40                 jz      short loc_AB46
DOSCODE:AB42                 mov     di, bx
DOSCODE:AB44                 jmp     short loc_AB59
DOSCODE:AB46 ; ---------------------------------------------------------------------------
DOSCODE:AB46
DOSCODE:AB46 loc_AB46:                               ; ...
DOSCODE:AB46                 push    cx
DOSCODE:AB47                 push    si
DOSCODE:AB48                 push    dx
DOSCODE:AB49                 push    bp
DOSCODE:AB4A                 push    es
DOSCODE:AB4B                 call    BUFWRITE
DOSCODE:AB4E                 pop     es
DOSCODE:AB4F                 pop     bp
DOSCODE:AB50                 pop     dx
DOSCODE:AB51                 pop     si
DOSCODE:AB52                 pop     ss:HIGH_SECTOR
DOSCODE:AB57                 jb      short loc_ABB6
DOSCODE:AB59
DOSCODE:AB59 loc_AB59:                               ; ...
DOSCODE:AB59                 xor     ah, ah
DOSCODE:AB5B                 cmp     byte ptr ss:PREREAD, ah
DOSCODE:AB60                 jnz     short loc_ABB8
DOSCODE:AB62                 lea     bx, [di+18h]
DOSCODE:AB65                 mov     cx, 1
DOSCODE:AB68                 push    si
DOSCODE:AB69                 push    di
DOSCODE:AB6A                 push    dx
DOSCODE:AB6B                 push    es
DOSCODE:AB6C                 cmp     ss:BuffInHMA, 0
DOSCODE:AB72                 jz      short loc_AB7B
DOSCODE:AB74                 push    ds
DOSCODE:AB75                 push    bx
DOSCODE:AB76                 lds     bx, ss:LoMemBuff
DOSCODE:AB7B
DOSCODE:AB7B loc_AB7B:                               ; ...
DOSCODE:AB7B                 or      si, si
DOSCODE:AB7D                 jz      short loc_AB86
DOSCODE:AB7F                 call    FATSECRD
DOSCODE:AB82                 mov     ah, 2
DOSCODE:AB84                 jmp     short loc_AB8B
DOSCODE:AB86 ; ---------------------------------------------------------------------------
DOSCODE:AB86
DOSCODE:AB86 loc_AB86:                               ; ...
DOSCODE:AB86                 call    DREAD
DOSCODE:AB89                 mov     ah, 0
DOSCODE:AB8B
DOSCODE:AB8B loc_AB8B:                               ; ...
DOSCODE:AB8B                 mov     ch, 0
DOSCODE:AB8D                 mov     cl, ss:BuffInHMA
DOSCODE:AB92                 jcxz    short loc_ABB2
DOSCODE:AB94                 mov     cx, es:[bp+2]
DOSCODE:AB98                 mov     si, bx
DOSCODE:AB9A                 pop     di
DOSCODE:AB9B                 pop     es
DOSCODE:AB9C                 pushf
DOSCODE:AB9D                 shr     cx, 1
DOSCODE:AB9F                 cld
DOSCODE:ABA0                 cmp     ss:DDMOVE, 0
DOSCODE:ABA6                 jz      short near ptr loc_ABAA+1 ; rep movsw (skip 32bit prefix)
DOSCODE:ABA8                 shr     cx, 1
DOSCODE:ABAA
DOSCODE:ABAA loc_ABAA:                               ; ...
DOSCODE:ABAA                 rep movsd
DOSCODE:ABAD                 mov     dx, es
DOSCODE:ABAF                 mov     ds, dx
DOSCODE:ABB1                 popf
DOSCODE:ABB2
DOSCODE:ABB2 loc_ABB2:                               ; ...
DOSCODE:ABB2                 pop     es
DOSCODE:ABB3                 pop     dx
DOSCODE:ABB4                 pop     di
DOSCODE:ABB5                 pop     si
DOSCODE:ABB6
DOSCODE:ABB6 loc_ABB6:                               ; ...
DOSCODE:ABB6                 jb      short loc_AC26
DOSCODE:ABB8
DOSCODE:ABB8 loc_ABB8:                               ; ...
DOSCODE:ABB8                 mov     cx, ss:HIGH_SECTOR
DOSCODE:ABBD                 mov     al, es:[bp+0]
DOSCODE:ABC1                 mov     [di+6], dx
DOSCODE:ABC4                 mov     [di+0Fh], bp
DOSCODE:ABC7                 mov     word ptr [di+11h], es
DOSCODE:ABCA                 mov     [di+8], cx
DOSCODE:ABCD                 mov     [di+4], ax
DOSCODE:ABD0
DOSCODE:ABD0 loc_ABD0:                               ; ...
DOSCODE:ABD0                 mov     byte ptr [di+0Ah], 1
DOSCODE:ABD4                 xor     ax, ax
DOSCODE:ABD6                 mov     [di+0Dh], ax
DOSCODE:ABD9                 or      si, si
DOSCODE:ABDB                 jz      short loc_AC0B
DOSCODE:ABDD                 cmp     word ptr es:[bp+0Fh], 0
DOSCODE:ABE2                 jnz     short loc_AC00
DOSCODE:ABE4                 test    word ptr es:[bp+23h], 80h
DOSCODE:ABEA                 jnz     short loc_ABF3
DOSCODE:ABEC                 mov     al, es:[bp+8]
DOSCODE:ABF0                 mov     [di+0Ah], al
DOSCODE:ABF3
DOSCODE:ABF3 loc_ABF3:                               ; ...
DOSCODE:ABF3                 mov     ax, es:[bp+33h]
DOSCODE:ABF7                 mov     [di+0Dh], ax
DOSCODE:ABFA                 mov     ax, es:[bp+31h]
DOSCODE:ABFE                 jmp     short loc_AC0B
DOSCODE:AC00 ; ---------------------------------------------------------------------------
DOSCODE:AC00
DOSCODE:AC00 loc_AC00:                               ; ...
DOSCODE:AC00                 mov     al, es:[bp+8]
DOSCODE:AC04                 mov     [di+0Ah], al
DOSCODE:AC07                 mov     ax, es:[bp+0Fh]
DOSCODE:AC0B
DOSCODE:AC0B loc_AC0B:                               ; ...
DOSCODE:AC0B                 mov     [di+0Bh], ax
DOSCODE:AC0E                 call    PLACEBUF
DOSCODE:AC11                 mov     word ptr ss:LastBuffer+2, ds
DOSCODE:AC16                 mov     word ptr ss:LastBuffer, di
DOSCODE:AC1B
DOSCODE:AC1B loc_AC1B:                               ; ...
DOSCODE:AC1B                 mov     word ptr ss:CURBUF+2, ds
DOSCODE:AC20                 mov     word ptr ss:CURBUF, di
DOSCODE:AC25                 clc
DOSCODE:AC26
DOSCODE:AC26 loc_AC26:                               ; ...
DOSCODE:AC26                 mov     ax, ss
DOSCODE:AC28                 mov     ds, ax
DOSCODE:AC2A
DOSCODE:AC2A flushbuf_retn:                          ; ...
DOSCODE:AC2A                 retn
DOSCODE:AC2B
DOSCODE:AC2B ; =============== S U B R O U T I N E =======================================
DOSCODE:AC2B
DOSCODE:AC2B
DOSCODE:AC2B FLUSHBUF        proc near               ; ...
DOSCODE:AC2B                 cmp     al, 0FFh        ; -1
DOSCODE:AC2D                 jnz     short flshbuf_2
DOSCODE:AC2F                 mov     bx, 26
DOSCODE:AC32
DOSCODE:AC32 flshbuf_1:                              ; ...
DOSCODE:AC32                 and     ss:drv_flags_1[bx], 0F7h ; [ss:bx+drv_flags-1],0F7h
DOSCODE:AC32                                         ; clear bit 3
DOSCODE:AC38                 dec     bx              ; backward
DOSCODE:AC39                 jnz     short flshbuf_1
DOSCODE:AC3B
DOSCODE:AC3B flshbuf_2:                              ; ...
DOSCODE:AC3B                 call    GETCURHEAD
DOSCODE:AC3E                 test    byte ptr ss:DOS34_FLAG, 4 ; FROM_DISK_RESET
DOSCODE:AC44                 jnz     short scan_buf_queue
DOSCODE:AC46                 cmp     ss:DirtyBufferCount, 0
DOSCODE:AC4C                 jz      short end_scan
DOSCODE:AC4E
DOSCODE:AC4E scan_buf_queue:                         ; ...
DOSCODE:AC4E                 call    CHECKFLUSH
DOSCODE:AC51                 mov     ah, [di+4]      ; [DI+BUFFINFO.buf_ID]
DOSCODE:AC54                 cmp     ss:WPERR, ah
DOSCODE:AC59                 jz      short free_the_buf
DOSCODE:AC5B                 test    byte ptr ss:DOS34_FLAG, 4 ; FROM_DISK_RESET
DOSCODE:AC61                 jz      short flshbuf_3
DOSCODE:AC63
DOSCODE:AC63 free_the_buf:                           ; ...
DOSCODE:AC63                 mov     word ptr [di+4], 0FFh
DOSCODE:AC68
DOSCODE:AC68 flshbuf_3:                              ; ...
DOSCODE:AC68                 mov     di, [di]        ; [DI+BUFFINFO.buf_next]
DOSCODE:AC6A                 cmp     di, ss:FIRST_BUFF_ADDR
DOSCODE:AC6F                 jnz     short scan_buf_queue
DOSCODE:AC71
DOSCODE:AC71 end_scan:                               ; ...
DOSCODE:AC71                 push    ss
DOSCODE:AC72                 pop     ds
DOSCODE:AC73                 cmp     ds:FAILERR, 0
DOSCODE:AC78                 jz      short flushbuf_retn
DOSCODE:AC7A                 stc
DOSCODE:AC7B
DOSCODE:AC7B flushbuf_retn:                          ; ...
DOSCODE:AC7B                 retn
DOSCODE:AC7B FLUSHBUF        endp
DOSCODE:AC7B
DOSCODE:AC7C
DOSCODE:AC7C ; =============== S U B R O U T I N E =======================================
DOSCODE:AC7C
DOSCODE:AC7C
DOSCODE:AC7C CHECKFLUSH      proc near               ; ...
DOSCODE:AC7C                 mov     ah, 0FFh        ; -1
DOSCODE:AC7E                 cmp     [di+4], ah      ; [DI+BUFFINFO.buf_ID]
DOSCODE:AC81                 jz      short flushbuf_retn ; Skip free buffer, carry clear
DOSCODE:AC83                 cmp     ah, al
DOSCODE:AC85                 jz      short DOBUFFER  ; do this buffer
DOSCODE:AC87                 cmp     al, [di+4]      ; [DI+BUFFINFO.buf_ID]
DOSCODE:AC8A                 clc
DOSCODE:AC8B                 jnz     short flushbuf_retn ; Buffer not for this unit or SFT
DOSCODE:AC8D                 xor     bx, bx
DOSCODE:AC8F                 mov     bl, al
DOSCODE:AC91                 test    ss:drive_flags[bx], 8 ; bit 3
DOSCODE:AC97                 jnz     short flushbuf_retn
DOSCODE:AC99
DOSCODE:AC99 DOBUFFER:                               ; ...
DOSCODE:AC99                 test    byte ptr [di+5], 40h ; [DI+BUFFINFO.buf_flags],buf_dirty
DOSCODE:AC9D                 jz      short flushbuf_retn
DOSCODE:AC9F                 push    ax
DOSCODE:ACA0                 push    word ptr [di+4] ; [DI+BUFFINFO.buf_ID]
DOSCODE:ACA3                 call    BUFWRITE
DOSCODE:ACA6                 pop     ax
DOSCODE:ACA7                 jb      short LEAVE_BUF ; Leave buffer marked free (lost)
DOSCODE:ACA9                 and     ah, 0BFh        ; ~buf_dirty  ; Buffer is clean, clears carry
DOSCODE:ACAC                 mov     [di+4], ax      ; [DI+BUFFINFO.buf_ID]
DOSCODE:ACAF
DOSCODE:ACAF LEAVE_BUF:                              ; ...
DOSCODE:ACAF                 pop     ax
DOSCODE:ACB0
DOSCODE:ACB0 checkflush_retn:                        ; ...
DOSCODE:ACB0                 retn
DOSCODE:ACB0 CHECKFLUSH      endp
DOSCODE:ACB0
DOSCODE:ACB1
DOSCODE:ACB1 ; =============== S U B R O U T I N E =======================================
DOSCODE:ACB1
DOSCODE:ACB1
DOSCODE:ACB1 BUFWRITE        proc near               ; ...
DOSCODE:ACB1                 mov     ax, 0FFh
DOSCODE:ACB4                 xchg    ax, [di+4]
DOSCODE:ACB7                 cmp     al, 0FFh
DOSCODE:ACB9                 jz      short checkflush_retn
DOSCODE:ACBB                 test    ah, 40h
DOSCODE:ACBE                 jz      short checkflush_retn
DOSCODE:ACC0                 call    DEC_DIRTY_COUNT
DOSCODE:ACC3                 cmp     al, ss:WPERR
DOSCODE:ACC8                 jz      short checkflush_retn
DOSCODE:ACCA                 les     dx, [di+6]
DOSCODE:ACCD                 lea     bx, [di+18h]
DOSCODE:ACD0                 mov     cl, [di+0Ah]
DOSCODE:ACD3                 mov     ch, 0
DOSCODE:ACD5                 mov     ss:HIGH_SECTOR, es
DOSCODE:ACDA                 les     bp, [di+0Fh]
DOSCODE:ACDD                 mov     ss:ALLOWED, 18h
DOSCODE:ACE3                 test    ah, 8
DOSCODE:ACE6                 jz      short loc_ACEE
DOSCODE:ACE8                 or      ss:ALLOWED, 20h
DOSCODE:ACEE
DOSCODE:ACEE loc_ACEE:                               ; ...
DOSCODE:ACEE                 mov     si, [di+0Dh]
DOSCODE:ACF1                 mov     ax, [di+0Bh]
DOSCODE:ACF4                 push    di
DOSCODE:ACF5                 xor     di, di
DOSCODE:ACF7                 push    ds
DOSCODE:ACF8                 push    bx
DOSCODE:ACF9
DOSCODE:ACF9 loc_ACF9:                               ; ...
DOSCODE:ACF9                 push    si
DOSCODE:ACFA                 push    ss:HIGH_SECTOR
DOSCODE:ACFF                 push    di
DOSCODE:AD00                 push    cx
DOSCODE:AD01                 push    ax
DOSCODE:AD02                 mov     cx, 1
DOSCODE:AD05                 push    bx
DOSCODE:AD06                 push    dx
DOSCODE:AD07                 push    ds
DOSCODE:AD08                 cmp     ss:BuffInHMA, 0
DOSCODE:AD0E                 jz      short loc_AD33
DOSCODE:AD10                 push    cx
DOSCODE:AD11                 push    es
DOSCODE:AD12                 mov     si, bx
DOSCODE:AD14                 mov     cx, es:[bp+2]
DOSCODE:AD18                 les     di, ss:LoMemBuff
DOSCODE:AD1D                 shr     cx, 1
DOSCODE:AD1F                 mov     bx, di
DOSCODE:AD21                 cld
DOSCODE:AD22                 cmp     ss:DDMOVE, 0
DOSCODE:AD28                 jz      short near ptr loc_AD2C+1
DOSCODE:AD2A                 shr     cx, 1
DOSCODE:AD2C
DOSCODE:AD2C loc_AD2C:                               ; ...
DOSCODE:AD2C                 rep movsd
DOSCODE:AD2F                 push    es
DOSCODE:AD30                 pop     ds
DOSCODE:AD31                 pop     es
DOSCODE:AD32                 pop     cx
DOSCODE:AD33
DOSCODE:AD33 loc_AD33:                               ; ...
DOSCODE:AD33                 call    DWRITE
DOSCODE:AD36                 pop     ds
DOSCODE:AD37                 pop     dx
DOSCODE:AD38                 pop     bx
DOSCODE:AD39                 pop     ax
DOSCODE:AD3A                 pop     cx
DOSCODE:AD3B                 pop     di
DOSCODE:AD3C                 pop     ss:HIGH_SECTOR
DOSCODE:AD41                 pop     si
DOSCODE:AD42                 jb      short loc_AD47
DOSCODE:AD44                 mov     di, 1
DOSCODE:AD47
DOSCODE:AD47 loc_AD47:                               ; ...
DOSCODE:AD47                 add     dx, ax
DOSCODE:AD49                 adc     ss:HIGH_SECTOR, si
DOSCODE:AD4E                 loop    loc_ACF9
DOSCODE:AD50                 pop     bx
DOSCODE:AD51                 pop     ds
DOSCODE:AD52                 sub     di, 1
DOSCODE:AD55                 pop     di
DOSCODE:AD56                 retn
DOSCODE:AD56 BUFWRITE        endp
DOSCODE:AD56
DOSCODE:AD57 ; ---------------------------------------------------------------------------
DOSCODE:AD57
DOSCODE:AD57 null_sub:                               ; ...
DOSCODE:AD57                 retn
DOSCODE:AD58 ; ---------------------------------------------------------------------------
DOSCODE:AD58
DOSCODE:AD58 SET_BUF_DIRTY:                          ; ...
DOSCODE:AD58                 test    byte ptr es:[di+5], 40h ; [ES:DI+BUFFINFO.buf_flags],buf_dirty
DOSCODE:AD5D                 jnz     short yesdirty2
DOSCODE:AD5F                 or      byte ptr es:[di+5], 40h ; [ES:DI+BUFFINFO.buf_flags],buf_dirty
DOSCODE:AD64
DOSCODE:AD64 ; =============== S U B R O U T I N E =======================================
DOSCODE:AD64
DOSCODE:AD64
DOSCODE:AD64 INC_DIRTY_COUNT proc near               ; ...
DOSCODE:AD64                 inc     ss:DirtyBufferCount
DOSCODE:AD69
DOSCODE:AD69 yesdirty2:                              ; ...
DOSCODE:AD69                 retn
DOSCODE:AD69 INC_DIRTY_COUNT endp
DOSCODE:AD69
DOSCODE:AD6A
DOSCODE:AD6A ; =============== S U B R O U T I N E =======================================
DOSCODE:AD6A
DOSCODE:AD6A
DOSCODE:AD6A DEC_DIRTY_COUNT proc near               ; ...
DOSCODE:AD6A                 cmp     ss:DirtyBufferCount, 0
DOSCODE:AD70                 jz      short ddcx
DOSCODE:AD72                 dec     ss:DirtyBufferCount
DOSCODE:AD77
DOSCODE:AD77 ddcx:                                   ; ...
DOSCODE:AD77                 retn
DOSCODE:AD77 DEC_DIRTY_COUNT endp
DOSCODE:AD77
DOSCODE:AD78 ; ---------------------------------------------------------------------------
DOSCODE:AD78
DOSCODE:AD78 $WAIT:                                  ; ...
DOSCODE:AD78                 xor     ax, ax
DOSCODE:AD7A                 xchg    ax, ss:exit_code
DOSCODE:AD7F                 jmp     SYS_RET_OK
DOSCODE:AD82 ; ---------------------------------------------------------------------------
DOSCODE:AD82
DOSCODE:AD82 $EXEC:                                  ; ...
DOSCODE:AD82                 mov     ss:A20OFF_COUNT, 0
DOSCODE:AD88                 cmp     al, 5
DOSCODE:AD8A                 jnz     short Exec_@f
DOSCODE:AD8C                 pop     cx
DOSCODE:AD8D                 mov     cx, offset LeaveDOS
DOSCODE:AD90                 push    cx
DOSCODE:AD91
DOSCODE:AD91 Exec_@f:                                ; ...
DOSCODE:AD91                 push    bp
DOSCODE:AD92                 mov     bp, sp
DOSCODE:AD94                 sub     sp, 29
DOSCODE:AD97                 cmp     al, 5
DOSCODE:AD99                 jbe     short Exec_Check_2
DOSCODE:AD9B
DOSCODE:AD9B Exec_Bad_Fun:                           ; ...
DOSCODE:AD9B                 call    set_exerr_locus_unk
DOSCODE:AD9E                 mov     al, 1
DOSCODE:ADA0
DOSCODE:ADA0 loc_ADA0:                               ; ...
DOSCODE:ADA0                 mov     sp, bp
DOSCODE:ADA2                 pop     bp
DOSCODE:ADA3                 jmp     SYS_RET_ERR
DOSCODE:ADA6 ; ---------------------------------------------------------------------------
DOSCODE:ADA6
DOSCODE:ADA6 loc_ADA6:                               ; ...
DOSCODE:ADA6                 call    sub_C697
DOSCODE:ADA9                 jmp     loc_B1C6
DOSCODE:ADAC ; ---------------------------------------------------------------------------
DOSCODE:ADAC
DOSCODE:ADAC Exec_Check_2:                           ; ...
DOSCODE:ADAC                 cmp     al, 2
DOSCODE:ADAE                 jz      short Exec_Bad_Fun
DOSCODE:ADB0                 cmp     al, 4
DOSCODE:ADB2                 jz      short Exec_Bad_Fun
DOSCODE:ADB4                 cmp     al, 5
DOSCODE:ADB6                 jz      short loc_ADA6
DOSCODE:ADB8                 mov     [bp-4], bx
DOSCODE:ADBB                 mov     word ptr [bp-2], es
DOSCODE:ADBE                 mov     [bp-5], al
DOSCODE:ADC1                 mov     byte ptr [bp-6], 0
DOSCODE:ADC5                 mov     [bp-1Ah], dx
DOSCODE:ADC8                 mov     word ptr [bp-18h], ds
DOSCODE:ADCB                 mov     si, dx
DOSCODE:ADCD                 call    DStrLen
DOSCODE:ADD0                 mov     [bp-16h], cx
DOSCODE:ADD3                 mov     al, ss:302h
DOSCODE:ADD7                 mov     ss:84h, al
DOSCODE:ADDB                 mov     al, 0A0h
DOSCODE:ADDD                 push    bp
DOSCODE:ADDE                 or      byte ptr ss:86h, 1
DOSCODE:ADE4                 push    ds
DOSCODE:ADE5                 push    dx
DOSCODE:ADE6                 call    $OPEN
DOSCODE:ADE9                 pop     dx
DOSCODE:ADEA                 pop     ds
DOSCODE:ADEB                 jnb     short loc_ADF2
DOSCODE:ADED                 xor     al, al
DOSCODE:ADEF                 call    $OPEN
DOSCODE:ADF2
DOSCODE:ADF2 loc_ADF2:                               ; ...
DOSCODE:ADF2                 pushf
DOSCODE:ADF3                 and     byte ptr ss:86h, 0FEh
DOSCODE:ADF9                 popf
DOSCODE:ADFA                 pop     bp
DOSCODE:ADFB                 jb      short loc_ADA0
DOSCODE:ADFD                 mov     [bp-8], ax
DOSCODE:AE00                 mov     bx, ax
DOSCODE:AE02                 xor     al, al
DOSCODE:AE04                 call    $IOCTL
DOSCODE:AE07                 jb      short loc_AE10
DOSCODE:AE09                 test    dl, 80h
DOSCODE:AE0C                 jz      short loc_AE18
DOSCODE:AE0E                 mov     al, 2
DOSCODE:AE10
DOSCODE:AE10 loc_AE10:                               ; ...
DOSCODE:AE10                 jmp     loc_AEDC
DOSCODE:AE13 ; ---------------------------------------------------------------------------
DOSCODE:AE13
DOSCODE:AE13 loc_AE13:                               ; ...
DOSCODE:AE13                 mov     al, 0Ah
DOSCODE:AE15                 jmp     loc_AEDC
DOSCODE:AE18 ; ---------------------------------------------------------------------------
DOSCODE:AE18
DOSCODE:AE18 loc_AE18:                               ; ...
DOSCODE:AE18                 mov     word ptr [bp-12h], 0
DOSCODE:AE1D                 mov     word ptr [bp-0Eh], 0
DOSCODE:AE22                 test    byte ptr [bp-5], 2
DOSCODE:AE26                 jnz     short loc_AE7B
DOSCODE:AE28                 lds     si, [bp-4]
DOSCODE:AE2B                 mov     ax, [si]
DOSCODE:AE2D                 or      ax, ax
DOSCODE:AE2F                 jnz     short loc_AE3D
DOSCODE:AE31                 mov     ds, word ptr ss:330h
DOSCODE:AE36                 mov     ax, ds:2Ch
DOSCODE:AE39                 or      ax, ax
DOSCODE:AE3B                 jz      short loc_AE7B
DOSCODE:AE3D
DOSCODE:AE3D loc_AE3D:                               ; ...
DOSCODE:AE3D                 mov     es, ax
DOSCODE:AE3F                 xor     di, di
DOSCODE:AE41                 mov     cx, 8000h
DOSCODE:AE44                 xor     al, al
DOSCODE:AE46
DOSCODE:AE46 loc_AE46:                               ; ...
DOSCODE:AE46                 repne scasb
DOSCODE:AE48                 jnz     short loc_AE13
DOSCODE:AE4A                 dec     cx
DOSCODE:AE4B                 js      short loc_AE13
DOSCODE:AE4D                 scasb
DOSCODE:AE4E                 jnz     short loc_AE46
DOSCODE:AE50                 push    di
DOSCODE:AE51                 lea     bx, [di+11h]
DOSCODE:AE54                 add     bx, [bp-16h]
DOSCODE:AE57                 mov     cl, 4
DOSCODE:AE59                 shr     bx, cl
DOSCODE:AE5B                 push    es
DOSCODE:AE5C                 call    $ALLOC
DOSCODE:AE5F                 pop     ds
DOSCODE:AE60                 pop     cx
DOSCODE:AE61                 jnb     short loc_AE65
DOSCODE:AE63                 jmp     short loc_AED6
DOSCODE:AE65 ; ---------------------------------------------------------------------------
DOSCODE:AE65
DOSCODE:AE65 loc_AE65:                               ; ...
DOSCODE:AE65                 mov     es, ax
DOSCODE:AE67                 mov     [bp-0Eh], ax
DOSCODE:AE6A                 xor     si, si
DOSCODE:AE6C                 mov     di, si
DOSCODE:AE6E                 rep movsb
DOSCODE:AE70                 xchg    ax, cx
DOSCODE:AE71                 inc     ax
DOSCODE:AE72                 stosw
DOSCODE:AE73                 lds     si, [bp-1Ah]
DOSCODE:AE76                 mov     cx, [bp-16h]
DOSCODE:AE79                 rep movsb
DOSCODE:AE7B
DOSCODE:AE7B loc_AE7B:                               ; ...
DOSCODE:AE7B                 push    ss
DOSCODE:AE7C                 pop     ds
DOSCODE:AE7D                 mov     cx, 1Ah
DOSCODE:AE80                 mov     dx, 0EC7h
DOSCODE:AE83                 push    es
DOSCODE:AE84                 push    ds
DOSCODE:AE85                 call    ExecRead
DOSCODE:AE88                 pop     ds
DOSCODE:AE89                 pop     es
DOSCODE:AE8A                 jb      short loc_AEDA
DOSCODE:AE8C                 or      ax, ax
DOSCODE:AE8E                 jz      short loc_AEDA
DOSCODE:AE90                 cmp     ax, 1Ah
DOSCODE:AE93                 jnz     short loc_AEAE
DOSCODE:AE95                 test    word ptr ds:0ED3h, 0FFFFh
DOSCODE:AE9B                 jnz     short loc_AEA1
DOSCODE:AE9D                 mov     byte ptr [bp-6], 0FFh
DOSCODE:AEA1
DOSCODE:AEA1 loc_AEA1:                               ; ...
DOSCODE:AEA1                 mov     ax, ds:0EC7h
DOSCODE:AEA4                 cmp     ax, 5A4Dh
DOSCODE:AEA7                 jz      short loc_AEB1
DOSCODE:AEA9                 cmp     ax, 4D5Ah
DOSCODE:AEAC                 jz      short loc_AEB1
DOSCODE:AEAE
DOSCODE:AEAE loc_AEAE:                               ; ...
DOSCODE:AEAE                 jmp     loc_B0A4
DOSCODE:AEB1 ; ---------------------------------------------------------------------------
DOSCODE:AEB1
DOSCODE:AEB1 loc_AEB1:                               ; ...
DOSCODE:AEB1                 mov     ax, ds:0ECBh
DOSCODE:AEB4                 mov     cl, 5
DOSCODE:AEB6                 shl     ax, cl
DOSCODE:AEB8                 sub     ax, ds:0ECFh
DOSCODE:AEBC                 mov     [bp-0Ch], ax
DOSCODE:AEBF                 test    byte ptr [bp-5], 2
DOSCODE:AEC3                 jz      short loc_AF0C
DOSCODE:AEC5                 les     di, [bp-4]
DOSCODE:AEC8                 push    es
DOSCODE:AEC9                 les     ax, es:[di]
DOSCODE:AECC                 mov     [bp-14h], ax
DOSCODE:AECF                 mov     word ptr [bp-0Ah], es
DOSCODE:AED2                 pop     es
DOSCODE:AED3                 jmp     loc_AFB8
DOSCODE:AED6 ; ---------------------------------------------------------------------------
DOSCODE:AED6
DOSCODE:AED6 loc_AED6:                               ; ...
DOSCODE:AED6                 mov     al, 8
DOSCODE:AED8                 jmp     short loc_AEDC
DOSCODE:AEDA ; ---------------------------------------------------------------------------
DOSCODE:AEDA
DOSCODE:AEDA loc_AEDA:                               ; ...
DOSCODE:AEDA                 mov     al, 0Bh
DOSCODE:AEDC
DOSCODE:AEDC loc_AEDC:                               ; ...
DOSCODE:AEDC                 mov     bx, [bp-8]
DOSCODE:AEDF                 call    Exec_Dealloc
DOSCODE:AEE2                 call    LCritDisk
DOSCODE:AEE5                 push    ax
DOSCODE:AEE6                 push    bp
DOSCODE:AEE7                 call    $CLOSE
DOSCODE:AEEA                 pop     bp
DOSCODE:AEEB                 pop     ax
DOSCODE:AEEC                 jmp     loc_ADA0
DOSCODE:AEEF ; ---------------------------------------------------------------------------
DOSCODE:AEEF
DOSCODE:AEEF loc_AEEF:                               ; ...
DOSCODE:AEEF                 mov     al, ss:302h
DOSCODE:AEF3                 mov     bl, ss:84h
DOSCODE:AEF8                 mov     ss:302h, bl
DOSCODE:AEFD                 test    bl, 40h
DOSCODE:AF00                 jnz     short loc_AED6
DOSCODE:AF02                 test    al, 40h
DOSCODE:AF04                 jz      short loc_AED6
DOSCODE:AF06                 mov     ax, ss:8Ah
DOSCODE:AF0A                 jmp     short loc_AF34
DOSCODE:AF0C ; ---------------------------------------------------------------------------
DOSCODE:AF0C
DOSCODE:AF0C loc_AF0C:                               ; ...
DOSCODE:AF0C                 xor     bx, bx
DOSCODE:AF0E                 mov     [bp-1Dh], bl
DOSCODE:AF11                 cmp     ds:0ED5h, bx
DOSCODE:AF15                 jnz     short loc_AF28
DOSCODE:AF17                 cmp     ds:0ED7h, bx
DOSCODE:AF1B                 jnz     short loc_AF28
DOSCODE:AF1D                 inc     byte ptr [bp-1Dh]
DOSCODE:AF20                 cmp     ax, 0FF0h
DOSCODE:AF23                 jnb     short loc_AF28
DOSCODE:AF25                 add     ax, 10h
DOSCODE:AF28
DOSCODE:AF28 loc_AF28:                               ; ...
DOSCODE:AF28                 test    byte ptr ds:302h, 80h
DOSCODE:AF2D                 jz      short loc_AF34
DOSCODE:AF2F                 or      byte ptr ds:302h, 40h
DOSCODE:AF34
DOSCODE:AF34 loc_AF34:                               ; ...
DOSCODE:AF34                 mov     ds:8Ah, ax
DOSCODE:AF37                 mov     bx, 0FFFFh
DOSCODE:AF3A                 push    ds
DOSCODE:AF3B                 call    $ALLOC
DOSCODE:AF3E                 pop     ds
DOSCODE:AF3F                 mov     ax, ds:8Ah
DOSCODE:AF42                 add     ax, 10h
DOSCODE:AF45                 cmp     bx, 11h
DOSCODE:AF48                 jb      short loc_AEEF
DOSCODE:AF4A                 cmp     ax, bx
DOSCODE:AF4C                 ja      short loc_AEEF
DOSCODE:AF4E                 test    byte ptr [bp-6], 0FFh
DOSCODE:AF52                 jnz     short loc_AF6C
DOSCODE:AF54                 add     ax, ds:0ED1h
DOSCODE:AF58                 jb      short loc_AEEF
DOSCODE:AF5A                 cmp     ax, bx
DOSCODE:AF5C                 ja      short loc_AEEF
DOSCODE:AF5E                 sub     ax, ds:0ED1h
DOSCODE:AF62                 add     ax, ds:0ED3h
DOSCODE:AF66                 jb      short loc_AF6C
DOSCODE:AF68                 cmp     ax, bx
DOSCODE:AF6A                 jbe     short loc_AF6E
DOSCODE:AF6C
DOSCODE:AF6C loc_AF6C:                               ; ...
DOSCODE:AF6C                 mov     ax, bx
DOSCODE:AF6E
DOSCODE:AF6E loc_AF6E:                               ; ...
DOSCODE:AF6E                 push    ds
DOSCODE:AF6F                 mov     bx, ax
DOSCODE:AF71                 mov     [bp-10h], bx
DOSCODE:AF74                 call    $ALLOC
DOSCODE:AF77                 pop     ds
DOSCODE:AF78                 jnb     short loc_AF7D
DOSCODE:AF7A                 jmp     loc_AEEF
DOSCODE:AF7D ; ---------------------------------------------------------------------------
DOSCODE:AF7D
DOSCODE:AF7D loc_AF7D:                               ; ...
DOSCODE:AF7D                 mov     cl, ds:84h
DOSCODE:AF81                 mov     ds:302h, cl
DOSCODE:AF85                 cmp     byte ptr [bp-1Dh], 0
DOSCODE:AF89                 jz      short loc_AF9D
DOSCODE:AF8B                 cmp     bx, 1000h
DOSCODE:AF8F                 jnb     short loc_AF9D
DOSCODE:AF91                 mov     cl, 4
DOSCODE:AF93                 shl     bx, cl
DOSCODE:AF95                 sub     bx, 100h
DOSCODE:AF99                 mov     ds:0ED7h, bx
DOSCODE:AF9D
DOSCODE:AF9D loc_AF9D:                               ; ...
DOSCODE:AF9D                 mov     [bp-12h], ax
DOSCODE:AFA0                 add     ax, 10h
DOSCODE:AFA3                 test    byte ptr [bp-6], 0FFh
DOSCODE:AFA7                 jz      short loc_AFB2
DOSCODE:AFA9                 add     ax, [bp-10h]
DOSCODE:AFAC                 sub     ax, [bp-0Ch]
DOSCODE:AFAF                 sub     ax, 10h
DOSCODE:AFB2
DOSCODE:AFB2 loc_AFB2:                               ; ...
DOSCODE:AFB2                 mov     [bp-0Ah], ax
DOSCODE:AFB5                 mov     [bp-14h], ax
DOSCODE:AFB8
DOSCODE:AFB8 loc_AFB8:                               ; ...
DOSCODE:AFB8                 mov     dx, [bp-14h]
DOSCODE:AFBB                 mov     [bp-1Ch], dx
DOSCODE:AFBE                 mov     dx, ds:0ECFh
DOSCODE:AFC2                 push    dx
DOSCODE:AFC3                 mov     cl, 4
DOSCODE:AFC5                 shl     dx, cl
DOSCODE:AFC7                 pop     ax
DOSCODE:AFC8                 mov     cl, 0Ch
DOSCODE:AFCA                 shr     ax, cl
DOSCODE:AFCC                 mov     cx, ax
DOSCODE:AFCE                 mov     bx, [bp-8]
DOSCODE:AFD1                 push    ds
DOSCODE:AFD2                 xor     al, al
DOSCODE:AFD4                 call    $LSEEK
DOSCODE:AFD7                 pop     ds
DOSCODE:AFD8                 jnb     short loc_AFDD
DOSCODE:AFDA                 jmp     loc_AEDC
DOSCODE:AFDD ; ---------------------------------------------------------------------------
DOSCODE:AFDD
DOSCODE:AFDD loc_AFDD:                               ; ...
DOSCODE:AFDD                 mov     bx, [bp-0Ch]
DOSCODE:AFE0                 cmp     bx, 1000h
DOSCODE:AFE4                 jb      short loc_AFE9
DOSCODE:AFE6                 mov     bx, 0FE0h
DOSCODE:AFE9
DOSCODE:AFE9 loc_AFE9:                               ; ...
DOSCODE:AFE9                 sub     [bp-0Ch], bx
DOSCODE:AFEC                 push    bx
DOSCODE:AFED                 mov     cl, 4
DOSCODE:AFEF                 shl     bx, cl
DOSCODE:AFF1                 mov     cx, bx
DOSCODE:AFF3                 push    ds
DOSCODE:AFF4                 mov     ds, word ptr [bp-14h]
DOSCODE:AFF7                 xor     dx, dx
DOSCODE:AFF9                 push    cx
DOSCODE:AFFA                 call    ExecRead
DOSCODE:AFFD                 pop     cx
DOSCODE:AFFE                 pop     ds
DOSCODE:AFFF                 jb      short loc_B049
DOSCODE:B001                 cmp     cx, ax
DOSCODE:B003                 pop     bx
DOSCODE:B004                 jz      short loc_B00E
DOSCODE:B006                 sub     cx, ax
DOSCODE:B008                 cmp     cx, 200h
DOSCODE:B00C                 jnb     short loc_B049
DOSCODE:B00E
DOSCODE:B00E loc_B00E:                               ; ...
DOSCODE:B00E                 add     [bp-14h], bx
DOSCODE:B011                 test    word ptr [bp-0Ch], 0FFFFh
DOSCODE:B016                 jnz     short loc_AFDD
DOSCODE:B018                 mov     cx, [bp-0Ah]
DOSCODE:B01B                 mov     ax, ds:0ED5h
DOSCODE:B01E                 add     ax, cx
DOSCODE:B020                 mov     ds:0EC1h, ax
DOSCODE:B023                 mov     ax, ds:0ED7h
DOSCODE:B026                 mov     ds:0EBFh, ax
DOSCODE:B029                 les     ax, ds:0EDBh
DOSCODE:B02D                 mov     ds:0EC3h, ax
DOSCODE:B030                 mov     ax, es
DOSCODE:B032                 add     ax, cx
DOSCODE:B034                 mov     ds:0EC5h, ax
DOSCODE:B037                 xor     cx, cx
DOSCODE:B039                 mov     dx, ds:0EDFh
DOSCODE:B03D                 mov     bx, [bp-8]
DOSCODE:B040                 push    ds
DOSCODE:B041                 xor     ax, ax
DOSCODE:B043                 call    $LSEEK
DOSCODE:B046                 pop     ds
DOSCODE:B047                 jnb     short loc_B04C
DOSCODE:B049
DOSCODE:B049 loc_B049:                               ; ...
DOSCODE:B049                 jmp     loc_AEDA
DOSCODE:B04C ; ---------------------------------------------------------------------------
DOSCODE:B04C
DOSCODE:B04C loc_B04C:                               ; ...
DOSCODE:B04C                 mov     dx, ds:0ECDh
DOSCODE:B050
DOSCODE:B050 loc_B050:                               ; ...
DOSCODE:B050                 push    dx
DOSCODE:B051                 mov     dx, 3BEh
DOSCODE:B054                 mov     cx, 18Ch
DOSCODE:B057                 push    ds
DOSCODE:B058                 call    ExecRead
DOSCODE:B05B                 pop     es
DOSCODE:B05C                 pop     dx
DOSCODE:B05D                 jb      short loc_B049
DOSCODE:B05F                 mov     cx, 63h ; 'c'
DOSCODE:B062                 mov     di, 3BEh
DOSCODE:B065                 mov     si, [bp-0Ah]
DOSCODE:B068
DOSCODE:B068 loc_B068:                               ; ...
DOSCODE:B068                 or      dx, dx
DOSCODE:B06A                 jz      short loc_B082
DOSCODE:B06C                 lds     bx, es:[di]
DOSCODE:B06F                 mov     ax, ds
DOSCODE:B071                 add     ax, [bp-1Ch]
DOSCODE:B074                 mov     ds, ax
DOSCODE:B076                 add     [bx], si
DOSCODE:B078                 add     di, 4
DOSCODE:B07B                 dec     dx
DOSCODE:B07C                 loop    loc_B068
DOSCODE:B07E                 push    es
DOSCODE:B07F                 pop     ds
DOSCODE:B080                 jmp     short loc_B050
DOSCODE:B082 ; ---------------------------------------------------------------------------
DOSCODE:B082
DOSCODE:B082 loc_B082:                               ; ...
DOSCODE:B082                 push    es
DOSCODE:B083                 push    ax
DOSCODE:B084                 push    cx
DOSCODE:B085                 mov     es, word ptr [bp-1Ch]
DOSCODE:B088                 mov     ax, ss:0EC5h
DOSCODE:B08C                 mov     cx, ss:0EC3h
DOSCODE:B091                 call    word ptr ss:0D67h
DOSCODE:B096                 call    word ptr ss:133Eh
DOSCODE:B09B                 pop     cx
DOSCODE:B09C                 pop     ax
DOSCODE:B09D                 pop     es
DOSCODE:B09E                 jmp     loc_B17E
DOSCODE:B0A1 ; ---------------------------------------------------------------------------
DOSCODE:B0A1
DOSCODE:B0A1 loc_B0A1:                               ; ...
DOSCODE:B0A1                 jmp     loc_AED6
DOSCODE:B0A4 ; ---------------------------------------------------------------------------
DOSCODE:B0A4
DOSCODE:B0A4 loc_B0A4:                               ; ...
DOSCODE:B0A4                 test    byte ptr [bp-5], 2
DOSCODE:B0A8                 jz      short loc_B0D7
DOSCODE:B0AA                 lds     si, [bp-4]
DOSCODE:B0AD                 lodsw
DOSCODE:B0AE                 mov     [bp-14h], ax
DOSCODE:B0B1                 mov     ax, 0FFFFh
DOSCODE:B0B4                 jmp     short loc_B119
DOSCODE:B0B6 ; ---------------------------------------------------------------------------
DOSCODE:B0B6
DOSCODE:B0B6 loc_B0B6:                               ; ...
DOSCODE:B0B6                 mov     al, ss:302h
DOSCODE:B0BA                 mov     bl, ss:84h
DOSCODE:B0BF                 mov     ss:302h, bl
DOSCODE:B0C4                 test    bl, 40h
DOSCODE:B0C7                 jnz     short loc_B0A1
DOSCODE:B0C9                 test    al, 40h
DOSCODE:B0CB                 jz      short loc_B0A1
DOSCODE:B0CD                 mov     ax, [bp-12h]
DOSCODE:B0D0                 xor     bx, bx
DOSCODE:B0D2                 call    sub_B34B
DOSCODE:B0D5                 jmp     short loc_B0E5
DOSCODE:B0D7 ; ---------------------------------------------------------------------------
DOSCODE:B0D7
DOSCODE:B0D7 loc_B0D7:                               ; ...
DOSCODE:B0D7                 test    byte ptr ss:302h, 80h
DOSCODE:B0DD                 jz      short loc_B0E5
DOSCODE:B0DF                 or      byte ptr ss:302h, 40h
DOSCODE:B0E5
DOSCODE:B0E5 loc_B0E5:                               ; ...
DOSCODE:B0E5                 mov     bx, 0FFFFh
DOSCODE:B0E8                 call    $ALLOC
DOSCODE:B0EB                 or      bx, bx
DOSCODE:B0ED                 jz      short loc_B0B6
DOSCODE:B0EF                 mov     [bp-10h], bx
DOSCODE:B0F2                 push    bx
DOSCODE:B0F3                 call    $ALLOC
DOSCODE:B0F6                 pop     bx
DOSCODE:B0F7                 mov     [bp-12h], ax
DOSCODE:B0FA                 add     ax, 10h
DOSCODE:B0FD                 mov     [bp-14h], ax
DOSCODE:B100                 xor     ax, ax
DOSCODE:B102                 cmp     bx, 1000h
DOSCODE:B106                 jnb     short loc_B116
DOSCODE:B108                 mov     ax, bx
DOSCODE:B10A                 mov     cl, 4
DOSCODE:B10C                 shl     ax, cl
DOSCODE:B10E                 cmp     ax, 200h
DOSCODE:B111                 jbe     short loc_B0B6
DOSCODE:B113                 sub     ax, 100h
DOSCODE:B116
DOSCODE:B116 loc_B116:                               ; ...
DOSCODE:B116                 sub     ax, 100h
DOSCODE:B119
DOSCODE:B119 loc_B119:                               ; ...
DOSCODE:B119                 push    ax
DOSCODE:B11A                 mov     bx, [bp-8]
DOSCODE:B11D                 xor     cx, cx
DOSCODE:B11F                 xor     ax, ax
DOSCODE:B121                 cwd
DOSCODE:B122                 call    $LSEEK
DOSCODE:B125                 pop     cx
DOSCODE:B126                 mov     ds, word ptr [bp-14h]
DOSCODE:B129                 xor     dx, dx
DOSCODE:B12B                 push    cx
DOSCODE:B12C                 call    ExecRead
DOSCODE:B12F                 pop     si
DOSCODE:B130                 jnb     short loc_B135
DOSCODE:B132                 jmp     loc_AEDA
DOSCODE:B135 ; ---------------------------------------------------------------------------
DOSCODE:B135
DOSCODE:B135 loc_B135:                               ; ...
DOSCODE:B135                 cmp     ax, si
DOSCODE:B137                 jnz     short loc_B13C
DOSCODE:B139                 jmp     loc_B0B6
DOSCODE:B13C ; ---------------------------------------------------------------------------
DOSCODE:B13C
DOSCODE:B13C loc_B13C:                               ; ...
DOSCODE:B13C                 mov     bl, ss:84h
DOSCODE:B141                 mov     ss:302h, bl
DOSCODE:B146                 test    byte ptr [bp-5], 2
DOSCODE:B14A                 jnz     short loc_B17E
DOSCODE:B14C                 mov     ax, [bp-14h]
DOSCODE:B14F                 sub     ax, 10h
DOSCODE:B152                 mov     ss:0EC5h, ax
DOSCODE:B156                 mov     word ptr ss:0EC3h, 100h
DOSCODE:B15D                 add     si, 0FEh
DOSCODE:B161                 cmp     si, 0FFFEh
DOSCODE:B164                 jz      short loc_B16A
DOSCODE:B166                 add     si, 100h
DOSCODE:B16A
DOSCODE:B16A loc_B16A:                               ; ...
DOSCODE:B16A                 mov     ss:0EBFh, si
DOSCODE:B16F                 mov     ss:0EC1h, ax
DOSCODE:B173                 mov     ds, ax
DOSCODE:B175                 mov     word ptr [si], 0
DOSCODE:B179                 call    word ptr ss:61h
DOSCODE:B17E
DOSCODE:B17E loc_B17E:                               ; ...
DOSCODE:B17E                 mov     bx, [bp-8]
DOSCODE:B181                 call    Exec_Dealloc
DOSCODE:B184                 push    bp
DOSCODE:B185                 call    $CLOSE
DOSCODE:B188                 pop     bp
DOSCODE:B189                 call    Exec_Alloc
DOSCODE:B18C                 test    byte ptr [bp-5], 2
DOSCODE:B190                 jz      short loc_B1CC
DOSCODE:B192                 call    sub_B359
DOSCODE:B195                 call    sub_B370
DOSCODE:B198                 cmp     byte ptr ss:1322h, 0
DOSCODE:B19E                 jz      short loc_B1C6
DOSCODE:B1A0                 push    si
DOSCODE:B1A1                 push    es
DOSCODE:B1A2                 les     si, ss:1323h
DOSCODE:B1A7                 cmp     byte ptr es:[si], 0
DOSCODE:B1AB                 jz      short loc_B1BE
DOSCODE:B1AD                 mov     es, word ptr ss:330h
DOSCODE:B1B2                 push    word ptr ss:0EBBh
DOSCODE:B1B7                 pop     word ptr es:40h
DOSCODE:B1BC                 jmp     short loc_B1C4
DOSCODE:B1BE ; ---------------------------------------------------------------------------
DOSCODE:B1BE
DOSCODE:B1BE loc_B1BE:                               ; ...
DOSCODE:B1BE                 mov     byte ptr ss:1322h, 0
DOSCODE:B1C4
DOSCODE:B1C4 loc_B1C4:                               ; ...
DOSCODE:B1C4                 pop     es
DOSCODE:B1C5                 pop     si
DOSCODE:B1C6
DOSCODE:B1C6 loc_B1C6:                               ; ...
DOSCODE:B1C6                 mov     sp, bp
DOSCODE:B1C8                 pop     bp
DOSCODE:B1C9                 jmp     SYS_RET_OK
DOSCODE:B1CC ; ---------------------------------------------------------------------------
DOSCODE:B1CC
DOSCODE:B1CC loc_B1CC:                               ; ...
DOSCODE:B1CC                 mov     dx, [bp-12h]
DOSCODE:B1CF                 mov     si, 1
DOSCODE:B1D2                 mov     ax, [bp-0Eh]
DOSCODE:B1D5                 or      ax, ax
DOSCODE:B1D7                 jz      short loc_B1DE
DOSCODE:B1D9                 dec     ax
DOSCODE:B1DA                 mov     ds, ax
DOSCODE:B1DC                 mov     [si], dx
DOSCODE:B1DE
DOSCODE:B1DE loc_B1DE:                               ; ...
DOSCODE:B1DE                 mov     ax, [bp-12h]
DOSCODE:B1E1                 dec     ax
DOSCODE:B1E2                 mov     ds, ax
DOSCODE:B1E4                 mov     [si], dx
DOSCODE:B1E6                 push    ds
DOSCODE:B1E7                 pop     es
DOSCODE:B1E8                 mov     di, 8
DOSCODE:B1EB                 call    sub_B359
DOSCODE:B1EE                 push    cx
DOSCODE:B1EF                 push    si
DOSCODE:B1F0
DOSCODE:B1F0 loc_B1F0:                               ; ...
DOSCODE:B1F0                 lodsb
DOSCODE:B1F1                 cmp     al, 2Eh ; '.'
DOSCODE:B1F3                 jz      short loc_B1FD
DOSCODE:B1F5                 stosb
DOSCODE:B1F6                 cmp     di, 10h
DOSCODE:B1F9                 jnb     short loc_B1FD
DOSCODE:B1FB                 loop    loc_B1F0
DOSCODE:B1FD
DOSCODE:B1FD loc_B1FD:                               ; ...
DOSCODE:B1FD                 xor     al, al
DOSCODE:B1FF                 cmp     di, 10h
DOSCODE:B202                 jnb     short loc_B205
DOSCODE:B204                 stosb
DOSCODE:B205
DOSCODE:B205 loc_B205:                               ; ...
DOSCODE:B205                 pop     si
DOSCODE:B206                 pop     cx
DOSCODE:B207                 call    sub_B370
DOSCODE:B20A                 push    dx
DOSCODE:B20B                 mov     si, [bp-10h]
DOSCODE:B20E                 add     si, dx
DOSCODE:B210                 call    $DUP_PDB
DOSCODE:B213                 pop     dx
DOSCODE:B214                 push    word ptr [bp-0Eh]
DOSCODE:B217                 pop     word ptr es:2Ch
DOSCODE:B21C                 push    ss:SPECIAL_VERSION
DOSCODE:B221                 pop     word ptr es:40h
DOSCODE:B226                 lds     si, [bp-4]
DOSCODE:B229                 push    ds
DOSCODE:B22A                 push    si
DOSCODE:B22B                 lds     si, [si+6]
DOSCODE:B22E                 mov     cx, 0Ch
DOSCODE:B231                 push    cx
DOSCODE:B232                 mov     di, 5Ch ; '\'
DOSCODE:B235                 mov     bl, [si]
DOSCODE:B237                 rep movsb
DOSCODE:B239                 xchg    ax, cx
DOSCODE:B23A                 stosw
DOSCODE:B23B                 stosw
DOSCODE:B23C                 pop     cx
DOSCODE:B23D                 pop     si
DOSCODE:B23E                 pop     ds
DOSCODE:B23F                 push    ds
DOSCODE:B240                 push    si
DOSCODE:B241                 lds     si, [si+0Ah]
DOSCODE:B244                 mov     bh, [si]
DOSCODE:B246                 rep movsb
DOSCODE:B248                 stosw
DOSCODE:B249                 stosw
DOSCODE:B24A                 pop     si
DOSCODE:B24B                 pop     ds
DOSCODE:B24C                 lds     si, [si+2]
DOSCODE:B24F                 or      cl, 80h
DOSCODE:B252                 mov     di, cx
DOSCODE:B254                 rep movsb
DOSCODE:B256                 dec     cl
DOSCODE:B258                 mov     al, bh
DOSCODE:B25A                 xor     bh, bh
DOSCODE:B25C                 call    GetVisDrv
DOSCODE:B25F                 jnb     short Exec_BL
DOSCODE:B261                 mov     bh, cl
DOSCODE:B263
DOSCODE:B263 Exec_BL:                                ; ...
DOSCODE:B263                 mov     al, bl
DOSCODE:B265                 xor     bl, bl
DOSCODE:B267                 call    GetVisDrv
DOSCODE:B26A                 jnb     short Exec_Set_Return
DOSCODE:B26C                 mov     bl, cl
DOSCODE:B26E
DOSCODE:B26E Exec_Set_Return:                        ; ...
DOSCODE:B26E                 call    Get_User_Stack
DOSCODE:B271                 lds     ax, [si+12h]
DOSCODE:B274                 push    ds
DOSCODE:B275                 push    ax
DOSCODE:B276                 mov     es:0Ah, ax
DOSCODE:B27A                 mov     word ptr es:0Ch, ds
DOSCODE:B27F                 xor     ax, ax
DOSCODE:B281                 mov     ds, ax
DOSCODE:B283                 assume ds:DOSCODE
DOSCODE:B283                 pop     UNPACK_OFFSET+1
DOSCODE:B287                 pop     word_8A
DOSCODE:B28B                 mov     word ptr ss:DMAADD, 80h
DOSCODE:B292                 mov     ds, ss:CurrentPDB
DOSCODE:B297                 assume ds:nothing
DOSCODE:B297                 mov     word ptr ss:DMAADD+2, ds
DOSCODE:B29C                 test    byte ptr [bp-5], 1
DOSCODE:B2A0                 jz      short exec_go
DOSCODE:B2A2                 lds     si, ss:exec_init_SP
DOSCODE:B2A7                 les     di, [bp-4]
DOSCODE:B2AA                 mov     word ptr es:[di+10h], ds
DOSCODE:B2AE                 dec     si
DOSCODE:B2AF                 dec     si
DOSCODE:B2B0                 mov     [si], bx
DOSCODE:B2B2                 mov     es:[di+0Eh], si
DOSCODE:B2B6                 lds     ax, ss:exec_init_IP
DOSCODE:B2BB                 mov     word ptr es:[di+14h], ds
DOSCODE:B2BF                 mov     es:[di+12h], ax
DOSCODE:B2C3                 mov     sp, bp
DOSCODE:B2C5                 pop     bp
DOSCODE:B2C6                 jmp     SYS_RET_OK
DOSCODE:B2C9 ; ---------------------------------------------------------------------------
DOSCODE:B2C9
DOSCODE:B2C9 exec_go:                                ; ...
DOSCODE:B2C9                 lds     si, ss:exec_init_IP
DOSCODE:B2CE                 les     di, ss:exec_init_SP
DOSCODE:B2D3                 mov     ax, es
DOSCODE:B2D5                 cmp     ss:DosHasHMA, 0
DOSCODE:B2DB                 jz      short Xfer_To_User
DOSCODE:B2DD                 push    ds
DOSCODE:B2DE                 mov     ds, cs:DosDSeg
DOSCODE:B2E3                 or      ds:DOS_FLAG, 4
DOSCODE:B2E8                 mov     ds:A20OFF_PSP, dx
DOSCODE:B2EC                 mov     ax, ds
DOSCODE:B2EE                 pop     ds
DOSCODE:B2EF                 push    ax
DOSCODE:B2F0                 mov     ax, offset disa20_xfer
DOSCODE:B2F3                 push    ax
DOSCODE:B2F4                 mov     ax, es
DOSCODE:B2F6                 retf
DOSCODE:B2F7 ; ---------------------------------------------------------------------------
DOSCODE:B2F7
DOSCODE:B2F7 Xfer_To_User:                           ; ...
DOSCODE:B2F7                 cli
DOSCODE:B2F8                 mov     ss:INDOS, 0
DOSCODE:B2FE                 mov     ss:INDOS_FLAG, 0
DOSCODE:B304                 mov     ss, ax
DOSCODE:B306                 mov     sp, di
DOSCODE:B308                 sti
DOSCODE:B309                 push    ds
DOSCODE:B30A                 push    si
DOSCODE:B30B                 mov     es, dx
DOSCODE:B30D                 mov     ds, dx
DOSCODE:B30F                 mov     ax, bx
DOSCODE:B311                 retf
DOSCODE:B312
DOSCODE:B312 ; =============== S U B R O U T I N E =======================================
DOSCODE:B312
DOSCODE:B312
DOSCODE:B312 ExecRead        proc near               ; ...
DOSCODE:B312                 call    Exec_Dealloc
DOSCODE:B315                 mov     bx, [bp-8]
DOSCODE:B318                 push    bp
DOSCODE:B319                 call    $READ
DOSCODE:B31C                 pop     bp
DOSCODE:B31D                 call    Exec_Alloc
DOSCODE:B320                 retn
DOSCODE:B320 ExecRead        endp
DOSCODE:B320
DOSCODE:B321
DOSCODE:B321 ; =============== S U B R O U T I N E =======================================
DOSCODE:B321
DOSCODE:B321
DOSCODE:B321 Exec_Dealloc    proc near               ; ...
DOSCODE:B321                 push    bx
DOSCODE:B322                 sub     bx, bx
DOSCODE:B324                 call    ECritDisk
DOSCODE:B327                 call    sub_B33A
DOSCODE:B32A                 pop     bx
DOSCODE:B32B                 retn
DOSCODE:B32B Exec_Dealloc    endp
DOSCODE:B32B
DOSCODE:B32C
DOSCODE:B32C ; =============== S U B R O U T I N E =======================================
DOSCODE:B32C
DOSCODE:B32C
DOSCODE:B32C Exec_Alloc      proc near               ; ...
DOSCODE:B32C                 push    bx
DOSCODE:B32D                 mov     bx, ss:330h
DOSCODE:B332                 call    sub_B33A
DOSCODE:B335                 call    LCritDisk
DOSCODE:B338                 pop     bx
DOSCODE:B339                 retn
DOSCODE:B339 Exec_Alloc      endp
DOSCODE:B339
DOSCODE:B33A
DOSCODE:B33A ; =============== S U B R O U T I N E =======================================
DOSCODE:B33A
DOSCODE:B33A
DOSCODE:B33A sub_B33A        proc near               ; ...
DOSCODE:B33A                 pushf
DOSCODE:B33B                 push    ax
DOSCODE:B33C                 mov     ax, [bp-0Eh]
DOSCODE:B33F                 call    sub_B34B
DOSCODE:B342                 mov     ax, [bp-12h]
DOSCODE:B345                 call    sub_B34B
DOSCODE:B348                 pop     ax
DOSCODE:B349                 popf
DOSCODE:B34A
DOSCODE:B34A locret_B34A:                            ; ...
DOSCODE:B34A                 retn
DOSCODE:B34A sub_B33A        endp
DOSCODE:B34A
DOSCODE:B34B
DOSCODE:B34B ; =============== S U B R O U T I N E =======================================
DOSCODE:B34B
DOSCODE:B34B
DOSCODE:B34B sub_B34B        proc near               ; ...
DOSCODE:B34B                 or      ax, ax
DOSCODE:B34D                 jz      short locret_B34A
DOSCODE:B34F                 dec     ax
DOSCODE:B350                 push    ds
DOSCODE:B351                 mov     ds, ax
DOSCODE:B353                 mov     ds:1, bx
DOSCODE:B357                 pop     ds
DOSCODE:B358                 retn
DOSCODE:B358 sub_B34B        endp
DOSCODE:B358
DOSCODE:B359
DOSCODE:B359 ; =============== S U B R O U T I N E =======================================
DOSCODE:B359
DOSCODE:B359
DOSCODE:B359 sub_B359        proc near               ; ...
DOSCODE:B359                 lds     si, [bp-1Ah]
DOSCODE:B359 sub_B359        endp
DOSCODE:B359
DOSCODE:B35C
DOSCODE:B35C ; =============== S U B R O U T I N E =======================================
DOSCODE:B35C
DOSCODE:B35C
DOSCODE:B35C sub_B35C        proc near               ; ...
DOSCODE:B35C                 mov     cx, si
DOSCODE:B35E
DOSCODE:B35E loc_B35E:                               ; ...
DOSCODE:B35E                 lodsb
DOSCODE:B35F                 cmp     al, 3Ah ; ':'
DOSCODE:B361                 jz      short sub_B35C
DOSCODE:B363                 cmp     al, 5Ch ; '\'
DOSCODE:B365                 jz      short sub_B35C
DOSCODE:B367                 cmp     al, 0
DOSCODE:B369                 jnz     short loc_B35E
DOSCODE:B36B                 sub     si, cx
DOSCODE:B36D                 xchg    si, cx
DOSCODE:B36F                 retn
DOSCODE:B36F sub_B35C        endp
DOSCODE:B36F
DOSCODE:B370
DOSCODE:B370 ; =============== S U B R O U T I N E =======================================
DOSCODE:B370
DOSCODE:B370
DOSCODE:B370 sub_B370        proc near               ; ...
DOSCODE:B370                 dec     cx
DOSCODE:B371                 mov     word ptr ss:0EBBh, 0A07h
DOSCODE:B378                 les     di, ss:5Dh
DOSCODE:B37D                 mov     ax, es
DOSCODE:B37F                 or      ax, di
DOSCODE:B381                 jz      short locret_B3AA
DOSCODE:B383
DOSCODE:B383 loc_B383:                               ; ...
DOSCODE:B383                 mov     al, es:[di]
DOSCODE:B386                 or      al, al
DOSCODE:B388                 jz      short locret_B3AA
DOSCODE:B38A                 mov     ss:60Eh, di
DOSCODE:B38F                 cmp     al, cl
DOSCODE:B391                 jnz     short loc_B3AE
DOSCODE:B393                 inc     di
DOSCODE:B394                 push    cx
DOSCODE:B395                 push    si
DOSCODE:B396                 push    ax
DOSCODE:B397
DOSCODE:B397 loc_B397:                               ; ...
DOSCODE:B397                 lodsb
DOSCODE:B398                 call    UCase
DOSCODE:B39B                 scasb
DOSCODE:B39C                 jnz     short loc_B3AB
DOSCODE:B39E                 loop    loc_B397
DOSCODE:B3A0                 mov     ax, es:[di]
DOSCODE:B3A3                 mov     ss:0EBBh, ax
DOSCODE:B3A7                 pop     ax
DOSCODE:B3A8                 pop     si
DOSCODE:B3A9                 pop     cx
DOSCODE:B3AA
DOSCODE:B3AA locret_B3AA:                            ; ...
DOSCODE:B3AA                 retn
DOSCODE:B3AB ; ---------------------------------------------------------------------------
DOSCODE:B3AB
DOSCODE:B3AB loc_B3AB:                               ; ...
DOSCODE:B3AB                 pop     ax
DOSCODE:B3AC                 pop     si
DOSCODE:B3AD                 pop     cx
DOSCODE:B3AE
DOSCODE:B3AE loc_B3AE:                               ; ...
DOSCODE:B3AE                 mov     di, ss:60Eh
DOSCODE:B3B3                 xor     ah, ah
DOSCODE:B3B5                 add     di, ax
DOSCODE:B3B7                 add     di, 3
DOSCODE:B3BA                 jmp     short loc_B383
DOSCODE:B3BA sub_B370        endp
DOSCODE:B3BA
DOSCODE:B3BC ; ---------------------------------------------------------------------------
DOSCODE:B3BC
DOSCODE:B3BC $KEEP_PROCESS:                          ; ...
DOSCODE:B3BC                 push    ax
DOSCODE:B3BD                 mov     byte ptr ss:EXIT_TYPE, 3
DOSCODE:B3C3                 mov     es, ss:CurrentPDB
DOSCODE:B3C8                 cmp     dx, 6
DOSCODE:B3CB                 jnb     short Keep_Shrink
DOSCODE:B3CD                 mov     dx, 6
DOSCODE:B3D0
DOSCODE:B3D0 Keep_Shrink:                            ; ...
DOSCODE:B3D0                 mov     bx, dx
DOSCODE:B3D2                 push    bx
DOSCODE:B3D3                 push    es
DOSCODE:B3D4                 call    $SETBLOCK
DOSCODE:B3D7                 pop     ds
DOSCODE:B3D8                 pop     bx
DOSCODE:B3D9                 jb      short Keep_Done
DOSCODE:B3DB                 mov     ax, ds
DOSCODE:B3DD                 add     ax, bx
DOSCODE:B3DF                 mov     ds:2, ax
DOSCODE:B3E2
DOSCODE:B3E2 Keep_Done:                              ; ...
DOSCODE:B3E2                 pop     ax
DOSCODE:B3E3                 jmp     short exit_inner
DOSCODE:B3E5 ; ---------------------------------------------------------------------------
DOSCODE:B3E5
DOSCODE:B3E5 stay_resident:                          ; ...
DOSCODE:B3E5                 mov     ax, 3100h
DOSCODE:B3E8                 add     dx, 0Fh
DOSCODE:B3EB                 rcr     dx, 1
DOSCODE:B3ED                 mov     cl, 3
DOSCODE:B3EF                 shr     dx, cl
DOSCODE:B3F1                 jmp     COMMAND
DOSCODE:B3F4 ; ---------------------------------------------------------------------------
DOSCODE:B3F4
DOSCODE:B3F4 $EXIT:                                  ; ...
DOSCODE:B3F4                 xor     ah, ah
DOSCODE:B3F6                 xchg    ah, ss:DidCTRLC
DOSCODE:B3FB                 or      ah, ah
DOSCODE:B3FD                 mov     byte ptr ss:EXIT_TYPE, 0
DOSCODE:B403                 jz      short exit_inner
DOSCODE:B405                 mov     byte ptr ss:EXIT_TYPE, 1
DOSCODE:B40B ; START OF FUNCTION CHUNK FOR sub_A242
DOSCODE:B40B
DOSCODE:B40B exit_inner:                             ; ...
DOSCODE:B40B                 call    Get_User_Stack
DOSCODE:B40E                 push    ss:CurrentPDB
DOSCODE:B413                 pop     word ptr [si+14h]
DOSCODE:B416                 jmp     short abort_inner
DOSCODE:B416 ; END OF FUNCTION CHUNK FOR sub_A242
DOSCODE:B418 ; ---------------------------------------------------------------------------
DOSCODE:B418
DOSCODE:B418 $ABORT:                                 ; ...
DOSCODE:B418                 xor     al, al
DOSCODE:B41A                 mov     byte ptr ss:57Ch, 0
DOSCODE:B420 ; START OF FUNCTION CHUNK FOR sub_A242
DOSCODE:B420
DOSCODE:B420 abort_inner:                            ; ...
DOSCODE:B420                 mov     ah, ss:57Ch
DOSCODE:B425                 mov     ss:334h, ax
DOSCODE:B429                 call    Get_User_Stack
DOSCODE:B42C                 mov     ds, word ptr [si+14h]
DOSCODE:B42F                 xor     ax, ax
DOSCODE:B431                 mov     es, ax
DOSCODE:B433                 assume es:DOSCODE
DOSCODE:B433                 mov     si, 0Ah
DOSCODE:B436                 mov     di, 88h
DOSCODE:B439                 movsw
DOSCODE:B43A                 movsw
DOSCODE:B43B                 movsw
DOSCODE:B43C                 movsw
DOSCODE:B43D                 movsw
DOSCODE:B43E                 movsw
DOSCODE:B43F                 jmp     loc_A343
DOSCODE:B43F ; END OF FUNCTION CHUNK FOR sub_A242
DOSCODE:B442 ; ---------------------------------------------------------------------------
DOSCODE:B442
DOSCODE:B442 RetExePatch:                            ; ...
DOSCODE:B442                 retn
DOSCODE:B443
DOSCODE:B443 ; =============== S U B R O U T I N E =======================================
DOSCODE:B443
DOSCODE:B443
DOSCODE:B443 sub_B443        proc near               ; ...
DOSCODE:B443                 test    byte ptr ss:89h, 1
DOSCODE:B449                 retn
DOSCODE:B449 sub_B443        endp
DOSCODE:B449
DOSCODE:B44A
DOSCODE:B44A ; =============== S U B R O U T I N E =======================================
DOSCODE:B44A
DOSCODE:B44A
DOSCODE:B44A sub_B44A        proc near               ; ...
DOSCODE:B44A                 mov     ax, ss:arena_head
DOSCODE:B44E
DOSCODE:B44E loc_B44E:                               ; ...
DOSCODE:B44E                 mov     di, 0
DOSCODE:B451                 call    check_signature
DOSCODE:B454
DOSCODE:B454 loc_B454:                               ; ...
DOSCODE:B454                 jb      short check_signature_ok
DOSCODE:B456                 push    es
DOSCODE:B457                 pop     ds
DOSCODE:B458                 assume ds:DOSCODE
DOSCODE:B458                 cmp     word ptr byte_0+1, bx
DOSCODE:B45C                 jnz     short loc_B462
DOSCODE:B45E                 mov     word ptr byte_0+1, di
DOSCODE:B462
DOSCODE:B462 loc_B462:                               ; ...
DOSCODE:B462                 cmp     byte ptr [di], 5Ah ; 'Z'
DOSCODE:B465                 jz      short loc_B46C
DOSCODE:B467                 call    sub_B47C
DOSCODE:B46A                 jmp     short loc_B454
DOSCODE:B46C ; ---------------------------------------------------------------------------
DOSCODE:B46C
DOSCODE:B46C loc_B46C:                               ; ...
DOSCODE:B46C                 mov     ax, ss:8Ch
DOSCODE:B470                 cmp     ax, 0FFFFh
DOSCODE:B473                 jz      short check_signature_ok
DOSCODE:B475                 mov     di, ds
DOSCODE:B477                 cmp     di, ax
DOSCODE:B479                 jb      short loc_B44E
DOSCODE:B47B                 retn
DOSCODE:B47B sub_B44A        endp
DOSCODE:B47B
DOSCODE:B47C
DOSCODE:B47C ; =============== S U B R O U T I N E =======================================
DOSCODE:B47C
DOSCODE:B47C
DOSCODE:B47C sub_B47C        proc near               ; ...
DOSCODE:B47C                 mov     ax, ds
DOSCODE:B47E                 add     ax, word ptr byte_0+3
DOSCODE:B482                 inc     ax
DOSCODE:B482 sub_B47C        endp
DOSCODE:B482
DOSCODE:B483
DOSCODE:B483 ; =============== S U B R O U T I N E =======================================
DOSCODE:B483
DOSCODE:B483
DOSCODE:B483 check_signature proc near               ; ...
DOSCODE:B483                 mov     es, ax
DOSCODE:B485                 assume es:nothing
DOSCODE:B485                 cmp     byte ptr es:[di], 4Dh ; 'M'
DOSCODE:B489                 jz      short check_signature_ok
DOSCODE:B48B                 cmp     byte ptr es:[di], 5Ah ; 'Z'
DOSCODE:B48F                 jz      short check_signature_ok
DOSCODE:B491                 stc
DOSCODE:B492
DOSCODE:B492 check_signature_ok:                     ; ...
DOSCODE:B492                 retn
DOSCODE:B492 check_signature endp
DOSCODE:B492
DOSCODE:B493
DOSCODE:B493 ; =============== S U B R O U T I N E =======================================
DOSCODE:B493
DOSCODE:B493
DOSCODE:B493 sub_B493        proc near               ; ...
DOSCODE:B493                 cmp     byte ptr [di], 5Ah ; 'Z'
DOSCODE:B496                 jz      short check_signature_ok
DOSCODE:B498                 call    sub_B47C
DOSCODE:B49B                 jb      short check_signature_ok
DOSCODE:B49D                 cmp     es:1, di
DOSCODE:B4A2                 jnz     short check_signature_ok
DOSCODE:B4A4                 mov     cx, es:3
DOSCODE:B4A9                 inc     cx
DOSCODE:B4AA                 add     word ptr byte_0+3, cx
DOSCODE:B4AE                 mov     cl, es:[di]
DOSCODE:B4B1                 mov     [di], cl
DOSCODE:B4B3                 jmp     short sub_B493
DOSCODE:B4B3 sub_B493        endp
DOSCODE:B4B3
DOSCODE:B4B5
DOSCODE:B4B5 ; =============== S U B R O U T I N E =======================================
DOSCODE:B4B5
DOSCODE:B4B5
DOSCODE:B4B5 $ALLOC          proc near               ; ...
DOSCODE:B4B5
DOSCODE:B4B5 ; FUNCTION CHUNK AT DOSCODE:B52B SIZE 00000024 BYTES
DOSCODE:B4B5 ; FUNCTION CHUNK AT DOSCODE:B54F SIZE 0000000E BYTES
DOSCODE:B4B5 ; FUNCTION CHUNK AT DOSCODE:B55D SIZE 00000076 BYTES
DOSCODE:B4B5 ; FUNCTION CHUNK AT DOSCODE:B5D3 SIZE 0000003A BYTES
DOSCODE:B4B5
DOSCODE:B4B5                 call    ECritDisk
DOSCODE:B4B8                 mov     ax, ss:arena_head
DOSCODE:B4BC                 test    ss:AllocMethod, 0C0h
DOSCODE:B4C2                 mov     ss:START_ARENA, ax
DOSCODE:B4C6                 jz      short loc_B4D5
DOSCODE:B4C8                 call    sub_B443
DOSCODE:B4CB                 jz      short loc_B4D5
DOSCODE:B4CD                 mov     ax, ss:UMB_HEAD
DOSCODE:B4D1                 mov     ss:START_ARENA, ax
DOSCODE:B4D5
DOSCODE:B4D5 loc_B4D5:                               ; ...
DOSCODE:B4D5                 xor     ax, ax
DOSCODE:B4D7                 mov     di, ax
DOSCODE:B4D9                 mov     ss:FirstArena, ax
DOSCODE:B4DD                 mov     ss:BestArena, ax
DOSCODE:B4E1                 mov     ss:LastArena, ax
DOSCODE:B4E5                 push    ax
DOSCODE:B4E6
DOSCODE:B4E6 loc_B4E6:                               ; ...
DOSCODE:B4E6                 mov     ax, ss:START_ARENA
DOSCODE:B4EA                 call    check_signature
DOSCODE:B4ED                 jb      short loc_B522
DOSCODE:B4EF
DOSCODE:B4EF loc_B4EF:                               ; ...
DOSCODE:B4EF                 push    es
DOSCODE:B4F0                 pop     ds
DOSCODE:B4F1                 assume ds:nothing
DOSCODE:B4F1                 cmp     ds:1, di
DOSCODE:B4F5                 jz      short loc_B55D
DOSCODE:B4F7
DOSCODE:B4F7 loc_B4F7:                               ; ...
DOSCODE:B4F7                 call    sub_B443
DOSCODE:B4FA                 jz      short loc_B518
DOSCODE:B4FC                 test    byte ptr ss:302h, 80h
DOSCODE:B502                 jz      short loc_B518
DOSCODE:B504                 mov     ax, ss:8Eh
DOSCODE:B508                 cmp     ax, ss:24h
DOSCODE:B50D                 jnz     short loc_B518
DOSCODE:B50F                 mov     ax, ds
DOSCODE:B511                 cmp     ax, ss:8Ch
DOSCODE:B516                 jmp     short loc_B51B
DOSCODE:B518 ; ---------------------------------------------------------------------------
DOSCODE:B518
DOSCODE:B518 loc_B518:                               ; ...
DOSCODE:B518                 cmp     byte ptr [di], 5Ah ; 'Z'
DOSCODE:B51B
DOSCODE:B51B loc_B51B:                               ; ...
DOSCODE:B51B                 jz      short loc_B52B
DOSCODE:B51D                 call    sub_B47C
DOSCODE:B520                 jnb     short loc_B4EF
DOSCODE:B522
DOSCODE:B522 loc_B522:                               ; ...
DOSCODE:B522                 pop     ax
DOSCODE:B522 $ALLOC          endp
DOSCODE:B522
DOSCODE:B523 ; START OF FUNCTION CHUNK FOR $SETBLOCK
DOSCODE:B523
DOSCODE:B523 loc_B523:                               ; ...
DOSCODE:B523                 call    LCritDisk
DOSCODE:B526
DOSCODE:B526 loc_B526:                               ; ...
DOSCODE:B526                 mov     al, 7
DOSCODE:B528
DOSCODE:B528 loc_B528:                               ; ...
DOSCODE:B528                 jmp     SYS_RET_ERR
DOSCODE:B528 ; END OF FUNCTION CHUNK FOR $SETBLOCK
DOSCODE:B52B ; ---------------------------------------------------------------------------
DOSCODE:B52B ; START OF FUNCTION CHUNK FOR $ALLOC
DOSCODE:B52B
DOSCODE:B52B loc_B52B:                               ; ...
DOSCODE:B52B                 cmp     word ptr ss:340h, 0
DOSCODE:B531                 jz      short loc_B536
DOSCODE:B533                 jmp     loc_B5BA
DOSCODE:B536 ; ---------------------------------------------------------------------------
DOSCODE:B536
DOSCODE:B536 loc_B536:                               ; ...
DOSCODE:B536                 mov     ax, ss:24h
DOSCODE:B53A                 cmp     ax, ss:8Eh
DOSCODE:B53F                 jz      short loc_B54F
DOSCODE:B541                 test    byte ptr ss:302h, 40h
DOSCODE:B547                 jnz     short loc_B54F
DOSCODE:B549                 mov     ss:8Eh, ax
DOSCODE:B54D                 jmp     short loc_B4E6
DOSCODE:B54D ; END OF FUNCTION CHUNK FOR $ALLOC
DOSCODE:B54F ; ---------------------------------------------------------------------------
DOSCODE:B54F ; START OF FUNCTION CHUNK FOR $SETBLOCK
DOSCODE:B54F ;   ADDITIONAL PARENT FUNCTION $ALLOC
DOSCODE:B54F
DOSCODE:B54F loc_B54F:                               ; ...
DOSCODE:B54F                 call    Get_User_Stack
DOSCODE:B552                 pop     bx
DOSCODE:B553                 mov     [si+2], bx
DOSCODE:B556                 call    LCritDisk
DOSCODE:B559                 mov     al, 8
DOSCODE:B55B                 jmp     short loc_B528
DOSCODE:B55B ; END OF FUNCTION CHUNK FOR $SETBLOCK
DOSCODE:B55D ; ---------------------------------------------------------------------------
DOSCODE:B55D ; START OF FUNCTION CHUNK FOR $ALLOC
DOSCODE:B55D
DOSCODE:B55D loc_B55D:                               ; ...
DOSCODE:B55D                 call    sub_B493
DOSCODE:B560                 jb      short loc_B522
DOSCODE:B562                 mov     cx, ds:3
DOSCODE:B566                 pop     dx
DOSCODE:B567                 cmp     cx, dx
DOSCODE:B569                 jbe     short loc_B56D
DOSCODE:B56B                 mov     dx, cx
DOSCODE:B56D
DOSCODE:B56D loc_B56D:                               ; ...
DOSCODE:B56D                 push    dx
DOSCODE:B56E                 cmp     bx, cx
DOSCODE:B570                 ja      short loc_B4F7
DOSCODE:B572                 cmp     word ptr ss:340h, 0
DOSCODE:B578                 jnz     short loc_B57F
DOSCODE:B57A                 mov     word ptr ss:340h, ds
DOSCODE:B57F
DOSCODE:B57F loc_B57F:                               ; ...
DOSCODE:B57F                 cmp     word ptr ss:342h, 0
DOSCODE:B585                 jz      short loc_B595
DOSCODE:B587                 push    es
DOSCODE:B588                 mov     es, word ptr ss:342h
DOSCODE:B58D                 cmp     es:3, cx
DOSCODE:B592                 pop     es
DOSCODE:B593                 jbe     short loc_B59A
DOSCODE:B595
DOSCODE:B595 loc_B595:                               ; ...
DOSCODE:B595                 mov     word ptr ss:342h, ds
DOSCODE:B59A
DOSCODE:B59A loc_B59A:                               ; ...
DOSCODE:B59A                 mov     word ptr ss:344h, ds
DOSCODE:B59F                 jmp     loc_B4F7
DOSCODE:B5A2 ; ---------------------------------------------------------------------------
DOSCODE:B5A2
DOSCODE:B5A2 loc_B5A2:                               ; ...
DOSCODE:B5A2                 mov     ds, word ptr ss:344h
DOSCODE:B5A7                 mov     cx, ds:3
DOSCODE:B5AB                 sub     cx, bx
DOSCODE:B5AD                 mov     dx, ds
DOSCODE:B5AF                 jz      short loc_B5FA
DOSCODE:B5B1                 add     dx, cx
DOSCODE:B5B3                 mov     es, dx
DOSCODE:B5B5                 dec     cx
DOSCODE:B5B6                 xchg    bx, cx
DOSCODE:B5B8                 jmp     short loc_B5E5
DOSCODE:B5BA ; ---------------------------------------------------------------------------
DOSCODE:B5BA
DOSCODE:B5BA loc_B5BA:                               ; ...
DOSCODE:B5BA                 mov     cl, ss:302h
DOSCODE:B5BF                 and     cl, 3Fh
DOSCODE:B5C2                 cmp     cl, 1
DOSCODE:B5C5                 ja      short loc_B5A2
DOSCODE:B5C7                 mov     ds, word ptr ss:340h
DOSCODE:B5CC                 jb      short loc_B5D3
DOSCODE:B5CE                 mov     ds, word ptr ss:342h
DOSCODE:B5CE ; END OF FUNCTION CHUNK FOR $ALLOC
DOSCODE:B5D3 ; START OF FUNCTION CHUNK FOR $SETBLOCK
DOSCODE:B5D3 ;   ADDITIONAL PARENT FUNCTION $ALLOC
DOSCODE:B5D3
DOSCODE:B5D3 loc_B5D3:                               ; ...
DOSCODE:B5D3                 mov     cx, ds:3
DOSCODE:B5D7                 mov     ax, ds
DOSCODE:B5D9                 sub     cx, bx
DOSCODE:B5DB                 mov     dx, ax
DOSCODE:B5DD                 jz      short loc_B5FA
DOSCODE:B5DF                 add     ax, bx
DOSCODE:B5E1                 inc     ax
DOSCODE:B5E2                 mov     es, ax
DOSCODE:B5E4                 dec     cx
DOSCODE:B5E5
DOSCODE:B5E5 loc_B5E5:                               ; ...
DOSCODE:B5E5                 mov     ds:3, bx
DOSCODE:B5E9                 mov     bl, 4Dh ; 'M'
DOSCODE:B5EB                 mov     es:3, cx
DOSCODE:B5F0                 xchg    bl, [di]
DOSCODE:B5F2                 mov     es:1, di
DOSCODE:B5F7                 mov     es:[di], bl
DOSCODE:B5FA
DOSCODE:B5FA loc_B5FA:                               ; ...
DOSCODE:B5FA                 mov     ds, dx
DOSCODE:B5FC                 mov     ax, ss:330h
DOSCODE:B600                 mov     ds:1, ax
DOSCODE:B603                 mov     ax, ds
DOSCODE:B605                 inc     ax
DOSCODE:B606                 pop     bx
DOSCODE:B607                 call    LCritDisk
DOSCODE:B60A
DOSCODE:B60A loc_B60A:                               ; ...
DOSCODE:B60A                 jmp     SYS_RET_OK
DOSCODE:B60A ; END OF FUNCTION CHUNK FOR $SETBLOCK
DOSCODE:B60D
DOSCODE:B60D ; =============== S U B R O U T I N E =======================================
DOSCODE:B60D
DOSCODE:B60D
DOSCODE:B60D $SETBLOCK       proc near               ; ...
DOSCODE:B60D
DOSCODE:B60D ; FUNCTION CHUNK AT DOSCODE:B523 SIZE 00000008 BYTES
DOSCODE:B60D ; FUNCTION CHUNK AT DOSCODE:B54F SIZE 0000000E BYTES
DOSCODE:B60D ; FUNCTION CHUNK AT DOSCODE:B5D3 SIZE 0000003A BYTES
DOSCODE:B60D
DOSCODE:B60D                 call    ECritDisk
DOSCODE:B610                 mov     di, 0
DOSCODE:B613                 mov     ax, es
DOSCODE:B615                 dec     ax
DOSCODE:B616                 call    check_signature
DOSCODE:B619                 jnb     short loc_B61E
DOSCODE:B61B
DOSCODE:B61B loc_B61B:                               ; ...
DOSCODE:B61B                 jmp     loc_B523
DOSCODE:B61E ; ---------------------------------------------------------------------------
DOSCODE:B61E
DOSCODE:B61E loc_B61E:                               ; ...
DOSCODE:B61E                 mov     ds, ax
DOSCODE:B620                 call    sub_B493
DOSCODE:B623                 jb      short loc_B61B
DOSCODE:B625                 mov     cx, ds:3
DOSCODE:B629                 push    cx
DOSCODE:B62A                 cmp     bx, cx
DOSCODE:B62C                 jbe     short loc_B5D3
DOSCODE:B62E                 jmp     loc_B54F
DOSCODE:B62E $SETBLOCK       endp
DOSCODE:B62E
DOSCODE:B631
DOSCODE:B631 ; =============== S U B R O U T I N E =======================================
DOSCODE:B631
DOSCODE:B631
DOSCODE:B631 $DEALLOC        proc near               ; ...
DOSCODE:B631                 call    ECritDisk
DOSCODE:B634                 test    ss:DOS_FLAG, 4
DOSCODE:B63A                 jz      short loc_B649
DOSCODE:B63C                 cmp     ss:A20OFF_COUNT, 0
DOSCODE:B642                 jnz     short loc_B649
DOSCODE:B644                 inc     ss:A20OFF_COUNT
DOSCODE:B649
DOSCODE:B649 loc_B649:                               ; ...
DOSCODE:B649                 mov     di, 0
DOSCODE:B64C                 mov     ax, es
DOSCODE:B64E                 dec     ax
DOSCODE:B64F                 call    check_signature
DOSCODE:B652                 jb      short loc_B65E
DOSCODE:B654                 mov     es:1, di
DOSCODE:B659                 call    LCritDisk
DOSCODE:B65C
DOSCODE:B65C loc_B65C:                               ; ...
DOSCODE:B65C                 jmp     short loc_B60A
DOSCODE:B65E ; ---------------------------------------------------------------------------
DOSCODE:B65E
DOSCODE:B65E loc_B65E:                               ; ...
DOSCODE:B65E                 call    LCritDisk
DOSCODE:B661                 mov     al, 9
DOSCODE:B663
DOSCODE:B663 loc_B663:                               ; ...
DOSCODE:B663                 jmp     SYS_RET_ERR
DOSCODE:B663 $DEALLOC        endp
DOSCODE:B663
DOSCODE:B666 ; ---------------------------------------------------------------------------
DOSCODE:B666
DOSCODE:B666 $ALLOCOPER:                             ; ...
DOSCODE:B666                 or      al, al
DOSCODE:B668                 jz      short loc_B67D
DOSCODE:B66A                 cmp     al, 1
DOSCODE:B66C                 jz      short loc_B685
DOSCODE:B66E                 cmp     al, 2
DOSCODE:B670                 jz      short loc_B696
DOSCODE:B672                 cmp     al, 3
DOSCODE:B674                 jz      short loc_B69E
DOSCODE:B676
DOSCODE:B676 loc_B676:                               ; ...
DOSCODE:B676                 call    set_exerr_locus_mem
DOSCODE:B679                 mov     al, 1
DOSCODE:B67B                 jmp     short loc_B663
DOSCODE:B67D ; ---------------------------------------------------------------------------
DOSCODE:B67D
DOSCODE:B67D loc_B67D:                               ; ...
DOSCODE:B67D                 mov     al, ss:AllocMethod
DOSCODE:B681                 xor     ah, ah
DOSCODE:B683
DOSCODE:B683 loc_B683:                               ; ...
DOSCODE:B683                 jmp     short loc_B65C
DOSCODE:B685 ; ---------------------------------------------------------------------------
DOSCODE:B685
DOSCODE:B685 loc_B685:                               ; ...
DOSCODE:B685                 push    bx
DOSCODE:B686                 and     bl, 3Fh
DOSCODE:B689                 cmp     bx, 2
DOSCODE:B68C                 pop     bx
DOSCODE:B68D                 ja      short loc_B676
DOSCODE:B68F                 mov     ss:302h, bl
DOSCODE:B694                 jmp     short loc_B683
DOSCODE:B696 ; ---------------------------------------------------------------------------
DOSCODE:B696
DOSCODE:B696 loc_B696:                               ; ...
DOSCODE:B696                 mov     al, ss:89h
DOSCODE:B69A                 and     al, 1
DOSCODE:B69C                 jmp     short loc_B683
DOSCODE:B69E ; ---------------------------------------------------------------------------
DOSCODE:B69E
DOSCODE:B69E loc_B69E:                               ; ...
DOSCODE:B69E                 mov     cx, ss:8Ch
DOSCODE:B6A3                 inc     cx
DOSCODE:B6A4                 jz      short loc_B676
DOSCODE:B6A6                 dec     cx
DOSCODE:B6A7                 dec     bx
DOSCODE:B6A8                 jz      short loc_B6C4
DOSCODE:B6AA                 inc     bx
DOSCODE:B6AB                 jz      short loc_B6AF
DOSCODE:B6AD                 jmp     short loc_B676
DOSCODE:B6AF ; ---------------------------------------------------------------------------
DOSCODE:B6AF
DOSCODE:B6AF loc_B6AF:                               ; ...
DOSCODE:B6AF                 call    sub_B443
DOSCODE:B6B2                 jz      short loc_B6C2
DOSCODE:B6B4                 call    sub_B6D9
DOSCODE:B6B7                 mov     byte ptr ds:0, 5Ah ; 'Z'
DOSCODE:B6BC                 and     byte ptr ss:89h, 0FEh
DOSCODE:B6C2
DOSCODE:B6C2 loc_B6C2:                               ; ...
DOSCODE:B6C2                 jmp     short loc_B683
DOSCODE:B6C4 ; ---------------------------------------------------------------------------
DOSCODE:B6C4
DOSCODE:B6C4 loc_B6C4:                               ; ...
DOSCODE:B6C4                 call    sub_B443
DOSCODE:B6C7                 jnz     short loc_B6D7
DOSCODE:B6C9                 call    sub_B6D9
DOSCODE:B6CC                 mov     byte ptr ds:0, 4Dh ; 'M'
DOSCODE:B6D1                 or      byte ptr ss:89h, 1
DOSCODE:B6D7
DOSCODE:B6D7 loc_B6D7:                               ; ...
DOSCODE:B6D7                 jmp     short loc_B683
DOSCODE:B6D9
DOSCODE:B6D9 ; =============== S U B R O U T I N E =======================================
DOSCODE:B6D9
DOSCODE:B6D9
DOSCODE:B6D9 sub_B6D9        proc near               ; ...
DOSCODE:B6D9                 push    ax
DOSCODE:B6DA                 mov     ax, ss:24h
DOSCODE:B6DE                 mov     es, ax
DOSCODE:B6E0                 xor     di, di
DOSCODE:B6E2                 cmp     byte ptr es:[di], 5Ah ; 'Z'
DOSCODE:B6E6                 jz      short loc_B6FE
DOSCODE:B6E8
DOSCODE:B6E8 loc_B6E8:                               ; ...
DOSCODE:B6E8                 mov     ds, ax
DOSCODE:B6EA                 call    sub_B47C
DOSCODE:B6ED                 jb      short loc_B711
DOSCODE:B6EF                 call    sub_B443
DOSCODE:B6F2                 jnz     short loc_B6FA
DOSCODE:B6F4                 cmp     byte ptr es:[di], 5Ah ; 'Z'
DOSCODE:B6F8                 jmp     short loc_B6FC
DOSCODE:B6FA ; ---------------------------------------------------------------------------
DOSCODE:B6FA
DOSCODE:B6FA loc_B6FA:                               ; ...
DOSCODE:B6FA                 cmp     ax, cx
DOSCODE:B6FC
DOSCODE:B6FC loc_B6FC:                               ; ...
DOSCODE:B6FC                 jnz     short loc_B6E8
DOSCODE:B6FE
DOSCODE:B6FE loc_B6FE:                               ; ...
DOSCODE:B6FE                 call    sub_B443
DOSCODE:B701                 jnz     short loc_B70E
DOSCODE:B703                 mov     ds, ax
DOSCODE:B705                 call    sub_B47C
DOSCODE:B708                 jb      short loc_B711
DOSCODE:B70A                 cmp     ax, cx
DOSCODE:B70C                 jnz     short loc_B711
DOSCODE:B70E
DOSCODE:B70E loc_B70E:                               ; ...
DOSCODE:B70E                 clc
DOSCODE:B70F                 pop     ax
DOSCODE:B710                 retn
DOSCODE:B711 ; ---------------------------------------------------------------------------
DOSCODE:B711
DOSCODE:B711 loc_B711:                               ; ...
DOSCODE:B711                 stc
DOSCODE:B712                 pop     ax
DOSCODE:B713                 pop     ax
DOSCODE:B714                 call    set_exerr_locus_mem
DOSCODE:B717                 jmp     loc_B526
DOSCODE:B717 sub_B6D9        endp ; sp-analysis failed
DOSCODE:B717
DOSCODE:B717 ; ---------------------------------------------------------------------------
DOSCODE:B71A word_B71A       dw 0B71Eh               ; ...
DOSCODE:B71C word_B71C       dw 0B76Dh               ; ...
DOSCODE:B71E                 db  0Bh
DOSCODE:B71F                 db 0D4h
DOSCODE:B720                 db 0B7h
DOSCODE:B721                 db  6Eh ; n
DOSCODE:B722                 db 0B7h
DOSCODE:B723                 db 0A5h
DOSCODE:B724                 db 0B7h
DOSCODE:B725                 db 0AEh
DOSCODE:B726                 db 0B7h
DOSCODE:B727                 db 0B5h
DOSCODE:B728                 db 0B7h
DOSCODE:B729                 db 0BCh
DOSCODE:B72A                 db 0B7h
DOSCODE:B72B                 db  15h
DOSCODE:B72C                 db 0B8h
DOSCODE:B72D                 db  39h ; 9
DOSCODE:B72E                 db 0B8h
DOSCODE:B72F                 db  39h ; 9
DOSCODE:B730                 db 0B8h
DOSCODE:B731                 db  39h ; 9
DOSCODE:B732                 db 0B8h
DOSCODE:B733                 db  45h ; E
DOSCODE:B734                 db 0B8h
DOSCODE:B735 ; ---------------------------------------------------------------------------
DOSCODE:B735
DOSCODE:B735 $ServerCall:                            ; ...
DOSCODE:B735                 cmp     al, 7
DOSCODE:B737                 jb      short loc_B73D
DOSCODE:B739                 cmp     al, 9
DOSCODE:B73B                 jbe     short loc_B757
DOSCODE:B73D
DOSCODE:B73D loc_B73D:                               ; ...
DOSCODE:B73D                 mov     si, dx
DOSCODE:B73F                 mov     bx, [si+12h]
DOSCODE:B742                 test    ss:IsWin386, 1
DOSCODE:B748                 jnz     short loc_B74F
DOSCODE:B74A                 mov     ss:USER_ID, bx
DOSCODE:B74F
DOSCODE:B74F loc_B74F:                               ; ...
DOSCODE:B74F                 mov     bx, [si+14h]
DOSCODE:B752                 mov     ss:PROC_ID, bx
DOSCODE:B757
DOSCODE:B757 loc_B757:                               ; ...
DOSCODE:B757                 push    cs:word_B71C
DOSCODE:B75C                 push    cs:word_B71A
DOSCODE:B761                 push    ax
DOSCODE:B762                 call    TableDispatch
DOSCODE:B765                 call    set_exerr_locus_unk
DOSCODE:B768                 mov     al, 1
DOSCODE:B76A
DOSCODE:B76A loc_B76A:                               ; ...
DOSCODE:B76A                 jmp     SYS_RET_ERR
DOSCODE:B76D ; ---------------------------------------------------------------------------
DOSCODE:B76D                 retn
DOSCODE:B76E ; ---------------------------------------------------------------------------
DOSCODE:B76E                 xor     bx, bx
DOSCODE:B770                 push    ss
DOSCODE:B771                 pop     ds
DOSCODE:B772                 call    ECritDisk
DOSCODE:B775
DOSCODE:B775 loc_B775:                               ; ...
DOSCODE:B775                 push    bx
DOSCODE:B776                 call    SFFromSFN
DOSCODE:B779                 jb      short loc_B79E
DOSCODE:B77B                 cmp     word ptr es:[di], 0
DOSCODE:B77F                 jz      short loc_B79A
DOSCODE:B781                 cmp     word ptr es:[di], 0FFFFh
DOSCODE:B785                 jz      short loc_B79A
DOSCODE:B787                 test    word ptr es:[di+5], 8000h
DOSCODE:B78D                 jnz     short loc_B79A
DOSCODE:B78F                 mov     word ptr ds:THISSFT, di
DOSCODE:B793                 mov     word ptr ds:THISSFT+2, es
DOSCODE:B797                 call    DOS_COMMIT
DOSCODE:B79A
DOSCODE:B79A loc_B79A:                               ; ...
DOSCODE:B79A                 pop     bx
DOSCODE:B79B                 inc     bx
DOSCODE:B79C                 jmp     short loc_B775
DOSCODE:B79E ; ---------------------------------------------------------------------------
DOSCODE:B79E
DOSCODE:B79E loc_B79E:                               ; ...
DOSCODE:B79E                 call    LCritDisk
DOSCODE:B7A1                 pop     bx
DOSCODE:B7A2
DOSCODE:B7A2 loc_B7A2:                               ; ...
DOSCODE:B7A2                 jmp     SYS_RET_OK
DOSCODE:B7A5 ; ---------------------------------------------------------------------------
DOSCODE:B7A5                 call    dword ptr ss:0A4h
DOSCODE:B7AA
DOSCODE:B7AA loc_B7AA:                               ; ...
DOSCODE:B7AA                 jnb     short loc_B7A2
DOSCODE:B7AC
DOSCODE:B7AC loc_B7AC:                               ; ...
DOSCODE:B7AC                 jmp     short loc_B76A
DOSCODE:B7AE ; ---------------------------------------------------------------------------
DOSCODE:B7AE                 call    dword ptr ss:9Ch
DOSCODE:B7B3                 jmp     short loc_B7AA
DOSCODE:B7B5 ; ---------------------------------------------------------------------------
DOSCODE:B7B5                 call    dword ptr ss:0A0h
DOSCODE:B7BA                 jmp     short loc_B7AA
DOSCODE:B7BC ; ---------------------------------------------------------------------------
DOSCODE:B7BC                 call    dword ptr ss:0B4h
DOSCODE:B7C1                 jb      short loc_B7AC
DOSCODE:B7C3                 call    Get_User_Stack
DOSCODE:B7C6                 mov     [si+2], bx
DOSCODE:B7C9                 mov     [si+0Ah], di
DOSCODE:B7CC                 mov     word ptr [si+10h], es
DOSCODE:B7CF
DOSCODE:B7CF loc_B7CF:                               ; ...
DOSCODE:B7CF                 mov     [si+4], cx
DOSCODE:B7D2
DOSCODE:B7D2 loc_B7D2:                               ; ...
DOSCODE:B7D2                 jmp     short loc_B7A2
DOSCODE:B7D4 ; ---------------------------------------------------------------------------
DOSCODE:B7D4                 pop     ax
DOSCODE:B7D5                 push    ds
DOSCODE:B7D6                 push    si
DOSCODE:B7D7                 call    Get_User_Stack
DOSCODE:B7DA                 pop     di
DOSCODE:B7DB                 pop     es
DOSCODE:B7DC                 call    XCHGP
DOSCODE:B7DF                 push    si
DOSCODE:B7E0                 mov     cx, 6
DOSCODE:B7E3                 rep movsw
DOSCODE:B7E5                 inc     di
DOSCODE:B7E6                 inc     di
DOSCODE:B7E7                 movsw
DOSCODE:B7E8                 movsw
DOSCODE:B7E9                 pop     si
DOSCODE:B7EA                 mov     ax, [si]
DOSCODE:B7EC                 mov     bx, [si+2]
DOSCODE:B7EF                 mov     cx, [si+4]
DOSCODE:B7F2                 mov     dx, [si+6]
DOSCODE:B7F5                 mov     di, [si+0Ah]
DOSCODE:B7F8                 mov     es, word ptr [si+0Eh]
DOSCODE:B7FB                 push    word ptr [si+8]
DOSCODE:B7FE                 mov     ds, word ptr [si+0Ch]
DOSCODE:B801                 pop     si
DOSCODE:B802                 mov     ss:SAVEDS, ds
DOSCODE:B807                 mov     ss:SAVEBX, bx
DOSCODE:B80C                 mov     ss:FSHARING, 0FFh
DOSCODE:B812                 jmp     REDISP
DOSCODE:B815 ; ---------------------------------------------------------------------------
DOSCODE:B815                 push    ss
DOSCODE:B816                 pop     es
DOSCODE:B817                 mov     di, offset ERRORMODE
DOSCODE:B81A                 mov     cx, 0AFAh
DOSCODE:B81D                 mov     dx, offset USER_IN_AX
DOSCODE:B820                 sub     cx, di
DOSCODE:B822                 sub     dx, di
DOSCODE:B824                 shr     cx, 1
DOSCODE:B826                 adc     cx, 0
DOSCODE:B829                 add     cx, cx
DOSCODE:B82B                 call    Get_User_Stack
DOSCODE:B82E                 mov     word ptr [si+0Eh], es
DOSCODE:B831                 mov     [si+8], di
DOSCODE:B834                 mov     [si+6], dx
DOSCODE:B837                 jmp     short loc_B7CF
DOSCODE:B839 ; ---------------------------------------------------------------------------
DOSCODE:B839                 push    ax
DOSCODE:B83A                 mov     ax, 1125h
DOSCODE:B83D                 int     2Fh             ; Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE
DOSCODE:B83D                                         ; STACK: WORD subfunction
DOSCODE:B83D                                         ; Return: CF set on error, AX = error code
DOSCODE:B83D                                         ; STACK unchanged
DOSCODE:B83F                 pop     bx
DOSCODE:B840                 jnb     short loc_B7D2
DOSCODE:B842                 jmp     SYS_RET_ERR
DOSCODE:B845 ; ---------------------------------------------------------------------------
DOSCODE:B845                 mov     ax, [si]
DOSCODE:B847                 mov     ss:EXTERR, ax
DOSCODE:B84B                 mov     ax, [si+0Ah]
DOSCODE:B84E                 mov     word ptr ss:EXTERRPT, ax
DOSCODE:B852                 mov     ax, [si+0Eh]
DOSCODE:B855                 mov     word ptr ss:EXTERRPT+2, ax
DOSCODE:B859                 mov     ax, [si+2]
DOSCODE:B85C                 mov     word ptr ss:EXTERR_ACTION, ax
DOSCODE:B860                 mov     ax, [si+4]
DOSCODE:B863                 mov     ss:EXTERR_LOCUS, ah
DOSCODE:B868                 retn
DOSCODE:B869
DOSCODE:B869 ; =============== S U B R O U T I N E =======================================
DOSCODE:B869
DOSCODE:B869
DOSCODE:B869 pJFNFromHandle  proc near               ; ...
DOSCODE:B869                 mov     es, cs:DosDSeg
DOSCODE:B86E                 mov     es, es:CurrentPDB
DOSCODE:B873                 cmp     bx, es:32h
DOSCODE:B878                 jnb     short loc_B882
DOSCODE:B87A                 les     di, es:34h
DOSCODE:B87F                 add     di, bx
DOSCODE:B881                 retn
DOSCODE:B882 ; ---------------------------------------------------------------------------
DOSCODE:B882
DOSCODE:B882 loc_B882:                               ; ...
DOSCODE:B882                 mov     al, 6
DOSCODE:B884
DOSCODE:B884 loc_B884:                               ; ...
DOSCODE:B884                 stc
DOSCODE:B885
DOSCODE:B885 locret_B885:                            ; ...
DOSCODE:B885                 retn
DOSCODE:B885 pJFNFromHandle  endp
DOSCODE:B885
DOSCODE:B886
DOSCODE:B886 ; =============== S U B R O U T I N E =======================================
DOSCODE:B886
DOSCODE:B886
DOSCODE:B886 SFFromHandle    proc near               ; ...
DOSCODE:B886                 call    pJFNFromHandle
DOSCODE:B889                 jb      short locret_B885
DOSCODE:B88B                 cmp     byte ptr es:[di], 0FFh
DOSCODE:B88F                 jz      short loc_B89C
DOSCODE:B891                 push    bx
DOSCODE:B892                 mov     bl, es:[di]
DOSCODE:B895                 xor     bh, bh
DOSCODE:B897                 call    SFFromSFN
DOSCODE:B89A                 pop     bx
DOSCODE:B89B                 retn
DOSCODE:B89C ; ---------------------------------------------------------------------------
DOSCODE:B89C
DOSCODE:B89C loc_B89C:                               ; ...
DOSCODE:B89C                 mov     al, 6
DOSCODE:B89E                 jmp     short loc_B884
DOSCODE:B89E SFFromHandle    endp
DOSCODE:B89E
DOSCODE:B8A0
DOSCODE:B8A0 ; =============== S U B R O U T I N E =======================================
DOSCODE:B8A0
DOSCODE:B8A0
DOSCODE:B8A0 SFFromSFN       proc near               ; ...
DOSCODE:B8A0                 mov     es, cs:DosDSeg
DOSCODE:B8A5                 les     di, es:2Ah
DOSCODE:B8AA
DOSCODE:B8AA loc_B8AA:                               ; ...
DOSCODE:B8AA                 cmp     bx, es:[di+4]
DOSCODE:B8AE                 jb      short loc_B8BE
DOSCODE:B8B0                 sub     bx, es:[di+4]
DOSCODE:B8B4                 les     di, es:[di]
DOSCODE:B8B7                 cmp     di, 0FFFFh
DOSCODE:B8BA                 jnz     short loc_B8AA
DOSCODE:B8BC                 stc
DOSCODE:B8BD                 retn
DOSCODE:B8BE ; ---------------------------------------------------------------------------
DOSCODE:B8BE
DOSCODE:B8BE loc_B8BE:                               ; ...
DOSCODE:B8BE                 push    ax
DOSCODE:B8BF                 mov     ax, 3Bh ; ';'
DOSCODE:B8C2                 mul     bl
DOSCODE:B8C4                 add     di, ax
DOSCODE:B8C6                 pop     ax
DOSCODE:B8C7                 add     di, 6
DOSCODE:B8CA                 retn
DOSCODE:B8CA SFFromSFN       endp
DOSCODE:B8CA
DOSCODE:B8CB
DOSCODE:B8CB ; =============== S U B R O U T I N E =======================================
DOSCODE:B8CB
DOSCODE:B8CB
DOSCODE:B8CB JFNFree         proc near               ; ...
DOSCODE:B8CB                 xor     bx, bx
DOSCODE:B8CD
DOSCODE:B8CD loc_B8CD:                               ; ...
DOSCODE:B8CD                 call    pJFNFromHandle
DOSCODE:B8D0                 jb      short loc_B8DB
DOSCODE:B8D2                 cmp     byte ptr es:[di], 0FFh
DOSCODE:B8D6                 jz      short locret_B8DD
DOSCODE:B8D8                 inc     bx
DOSCODE:B8D9                 jmp     short loc_B8CD
DOSCODE:B8DB ; ---------------------------------------------------------------------------
DOSCODE:B8DB
DOSCODE:B8DB loc_B8DB:                               ; ...
DOSCODE:B8DB                 mov     al, 4
DOSCODE:B8DD
DOSCODE:B8DD locret_B8DD:                            ; ...
DOSCODE:B8DD                 retn
DOSCODE:B8DD JFNFree         endp
DOSCODE:B8DD
DOSCODE:B8DE
DOSCODE:B8DE ; =============== S U B R O U T I N E =======================================
DOSCODE:B8DE
DOSCODE:B8DE
DOSCODE:B8DE SFNFree         proc near               ; ...
DOSCODE:B8DE                 push    ax
DOSCODE:B8DF                 xor     bx, bx
DOSCODE:B8E1
DOSCODE:B8E1 loc_B8E1:                               ; ...
DOSCODE:B8E1                 push    bx
DOSCODE:B8E2                 call    SFFromSFN
DOSCODE:B8E5                 pop     bx
DOSCODE:B8E6                 jb      short loc_B923
DOSCODE:B8E8                 cmp     word ptr es:[di], 0
DOSCODE:B8EC                 jz      short loc_B90B
DOSCODE:B8EE                 cmp     word ptr es:[di], 0FFFFh
DOSCODE:B8F2                 jz      short loc_B8F7
DOSCODE:B8F4
DOSCODE:B8F4 loc_B8F4:                               ; ...
DOSCODE:B8F4                 inc     bx
DOSCODE:B8F5                 jmp     short loc_B8E1
DOSCODE:B8F7 ; ---------------------------------------------------------------------------
DOSCODE:B8F7
DOSCODE:B8F7 loc_B8F7:                               ; ...
DOSCODE:B8F7                 mov     ax, ss:USER_ID
DOSCODE:B8FB                 cmp     es:[di+2Fh], ax
DOSCODE:B8FF                 jnz     short loc_B8F4
DOSCODE:B901                 mov     ax, ss:PROC_ID
DOSCODE:B905                 cmp     es:[di+31h], ax
DOSCODE:B909                 jnz     short loc_B8F4
DOSCODE:B90B
DOSCODE:B90B loc_B90B:                               ; ...
DOSCODE:B90B                 mov     word ptr es:[di], 0FFFFh
DOSCODE:B910                 mov     ax, ss:USER_ID
DOSCODE:B914                 mov     es:[di+2Fh], ax
DOSCODE:B918                 mov     ax, ss:PROC_ID
DOSCODE:B91C                 mov     es:[di+31h], ax
DOSCODE:B920                 pop     ax
DOSCODE:B921                 clc
DOSCODE:B922                 retn
DOSCODE:B923 ; ---------------------------------------------------------------------------
DOSCODE:B923
DOSCODE:B923 loc_B923:                               ; ...
DOSCODE:B923                 pop     ax
DOSCODE:B924                 jmp     short loc_B8DB
DOSCODE:B924 SFNFree         endp
DOSCODE:B924
DOSCODE:B926
DOSCODE:B926 ; =============== S U B R O U T I N E =======================================
DOSCODE:B926
DOSCODE:B926
DOSCODE:B926 $CLOSE          proc near               ; ...
DOSCODE:B926                 call    CheckOwner
DOSCODE:B929                 jb      short CloseError
DOSCODE:B92B                 push    ss
DOSCODE:B92C                 pop     ds
DOSCODE:B92D                 mov     word ptr ds:THISSFT, di
DOSCODE:B931                 mov     word ptr ds:5A0h, es
DOSCODE:B935                 cmp     word ptr es:[di], 1
DOSCODE:B939                 jz      short FreeJFN
DOSCODE:B93B                 mov     al, es:[di+2]
DOSCODE:B93F                 and     al, 0F0h
DOSCODE:B941                 cmp     al, 70h
DOSCODE:B943                 jz      short PostFree
DOSCODE:B945
DOSCODE:B945 FreeJFN:                                ; ...
DOSCODE:B945                 call    pJFNFromHandle
DOSCODE:B948                 mov     byte ptr es:[di], 0FFh
DOSCODE:B94C
DOSCODE:B94C PostFree:                               ; ...
DOSCODE:B94C                 call    DOS_CLOSE
DOSCODE:B94F                 jb      short CloseError
DOSCODE:B951                 mov     ah, 3Eh ; '>'
DOSCODE:B953
DOSCODE:B953 loc_B953:                               ; ...
DOSCODE:B953                 jmp     SYS_RET_OK
DOSCODE:B956 ; ---------------------------------------------------------------------------
DOSCODE:B956
DOSCODE:B956 CloseError:                             ; ...
DOSCODE:B956                 jmp     SYS_RET_ERR
DOSCODE:B956 $CLOSE          endp
DOSCODE:B956
DOSCODE:B959 ; ---------------------------------------------------------------------------
DOSCODE:B959
DOSCODE:B959 $COMMIT:                                ; ...
DOSCODE:B959                 call    CheckOwner
DOSCODE:B95C                 jb      short CommitError
DOSCODE:B95E                 push    ss
DOSCODE:B95F                 pop     ds
DOSCODE:B960                 mov     word ptr ds:THISSFT, di
DOSCODE:B964                 mov     word ptr ds:THISSFT+2, es
DOSCODE:B968                 call    DOS_COMMIT
DOSCODE:B96B                 jb      short CommitError
DOSCODE:B96D                 mov     ah, 68h
DOSCODE:B96F                 jmp     short loc_B953
DOSCODE:B971 ; ---------------------------------------------------------------------------
DOSCODE:B971 ; START OF FUNCTION CHUNK FOR $READ
DOSCODE:B971
DOSCODE:B971 CommitError:                            ; ...
DOSCODE:B971                 jmp     short CloseError
DOSCODE:B971 ; END OF FUNCTION CHUNK FOR $READ
DOSCODE:B973 ; ---------------------------------------------------------------------------
DOSCODE:B973
DOSCODE:B973 $ExtHandle:                             ; ...
DOSCODE:B973                 xor     bp, bp
DOSCODE:B975                 cmp     bx, 20
DOSCODE:B978                 jnb     short loc_B97D
DOSCODE:B97A                 mov     bx, 20
DOSCODE:B97D
DOSCODE:B97D loc_B97D:                               ; ...
DOSCODE:B97D                 mov     es, ss:CurrentPDB
DOSCODE:B982                 mov     cx, word ptr es:BCON
DOSCODE:B987                 cmp     bx, cx
DOSCODE:B989                 jz      short loc_B953
DOSCODE:B98B                 ja      short loc_B9AB
DOSCODE:B98D                 inc     bp
DOSCODE:B98E                 mov     ds, es:MAXSEC
DOSCODE:B993                 mov     si, bx
DOSCODE:B995                 sub     cx, bx
DOSCODE:B997
DOSCODE:B997 loc_B997:                               ; ...
DOSCODE:B997                 cmp     byte ptr [si], 0FFh
DOSCODE:B99A                 jnz     short loc_B9D5
DOSCODE:B99C                 inc     si
DOSCODE:B99D                 loop    loc_B997
DOSCODE:B99F                 cmp     bx, 14h
DOSCODE:B9A2                 ja      short loc_B9AB
DOSCODE:B9A4                 inc     bp
DOSCODE:B9A5                 mov     di, 18h
DOSCODE:B9A8                 push    bx
DOSCODE:B9A9                 jmp     short loc_B9C6
DOSCODE:B9AB ; ---------------------------------------------------------------------------
DOSCODE:B9AB
DOSCODE:B9AB loc_B9AB:                               ; ...
DOSCODE:B9AB                 inc     bx
DOSCODE:B9AC                 jz      short loc_BA2A
DOSCODE:B9AE                 dec     bx
DOSCODE:B9AF                 clc
DOSCODE:B9B0                 push    bx
DOSCODE:B9B1                 add     bx, 0Fh
DOSCODE:B9B4                 mov     cl, 4
DOSCODE:B9B6                 rcr     bx, cl
DOSCODE:B9B8                 and     bh, 1Fh
DOSCODE:B9BB                 push    bp
DOSCODE:B9BC                 call    $ALLOC
DOSCODE:B9BF                 pop     bp
DOSCODE:B9C0                 jb      short loc_BA25
DOSCODE:B9C2                 mov     es, ax
DOSCODE:B9C4                 xor     di, di
DOSCODE:B9C6
DOSCODE:B9C6 loc_B9C6:                               ; ...
DOSCODE:B9C6                 mov     ds, word ptr ss:330h
DOSCODE:B9CB                 test    bp, 3
DOSCODE:B9CF                 jz      short loc_B9D9
DOSCODE:B9D1                 pop     cx
DOSCODE:B9D2                 push    cx
DOSCODE:B9D3                 jmp     short loc_B9DD
DOSCODE:B9D5 ; ---------------------------------------------------------------------------
DOSCODE:B9D5
DOSCODE:B9D5 loc_B9D5:                               ; ...
DOSCODE:B9D5                 mov     al, 4
DOSCODE:B9D7 ; START OF FUNCTION CHUNK FOR $READ
DOSCODE:B9D7
DOSCODE:B9D7 loc_B9D7:                               ; ...
DOSCODE:B9D7                 jmp     short CommitError
DOSCODE:B9D7 ; END OF FUNCTION CHUNK FOR $READ
DOSCODE:B9D9 ; ---------------------------------------------------------------------------
DOSCODE:B9D9
DOSCODE:B9D9 loc_B9D9:                               ; ...
DOSCODE:B9D9                 mov     cx, ds:32h
DOSCODE:B9DD
DOSCODE:B9DD loc_B9DD:                               ; ...
DOSCODE:B9DD                 mov     dx, cx
DOSCODE:B9DF                 lds     si, ds:34h
DOSCODE:B9E3                 rep movsb
DOSCODE:B9E5                 pop     cx
DOSCODE:B9E6                 push    cx
DOSCODE:B9E7                 sub     cx, dx
DOSCODE:B9E9                 mov     al, 0FFh
DOSCODE:B9EB                 rep stosb
DOSCODE:B9ED                 mov     ds, word ptr ss:330h
DOSCODE:B9F2                 cmp     word ptr ds:34h, 0
DOSCODE:B9F7                 jnz     short loc_BA06
DOSCODE:B9F9                 push    bp
DOSCODE:B9FA                 push    ds
DOSCODE:B9FB                 push    es
DOSCODE:B9FC                 mov     es, word ptr ds:36h
DOSCODE:BA00                 call    $DEALLOC
DOSCODE:BA03                 pop     es
DOSCODE:BA04                 pop     ds
DOSCODE:BA05                 pop     bp
DOSCODE:BA06
DOSCODE:BA06 loc_BA06:                               ; ...
DOSCODE:BA06                 test    bp, 2
DOSCODE:BA0A                 jz      short loc_BA14
DOSCODE:BA0C                 mov     word ptr ds:34h, 18h
DOSCODE:BA12                 jmp     short loc_BA1A
DOSCODE:BA14 ; ---------------------------------------------------------------------------
DOSCODE:BA14
DOSCODE:BA14 loc_BA14:                               ; ...
DOSCODE:BA14                 mov     word ptr ds:34h, 0
DOSCODE:BA1A
DOSCODE:BA1A loc_BA1A:                               ; ...
DOSCODE:BA1A                 mov     word ptr ds:36h, es
DOSCODE:BA1E                 pop     word ptr ds:32h
DOSCODE:BA22 ; START OF FUNCTION CHUNK FOR $READ
DOSCODE:BA22
DOSCODE:BA22 loc_BA22:                               ; ...
DOSCODE:BA22                 jmp     SYS_RET_OK
DOSCODE:BA22 ; END OF FUNCTION CHUNK FOR $READ
DOSCODE:BA25 ; ---------------------------------------------------------------------------
DOSCODE:BA25
DOSCODE:BA25 loc_BA25:                               ; ...
DOSCODE:BA25                 pop     bx
DOSCODE:BA26                 mov     al, 8
DOSCODE:BA28                 jmp     short loc_B9D7
DOSCODE:BA2A ; ---------------------------------------------------------------------------
DOSCODE:BA2A
DOSCODE:BA2A loc_BA2A:                               ; ...
DOSCODE:BA2A                 mov     al, 1
DOSCODE:BA2C ; START OF FUNCTION CHUNK FOR $READ
DOSCODE:BA2C
DOSCODE:BA2C loc_BA2C:                               ; ...
DOSCODE:BA2C                 jmp     short loc_B9D7
DOSCODE:BA2C ; END OF FUNCTION CHUNK FOR $READ
DOSCODE:BA2E
DOSCODE:BA2E ; =============== S U B R O U T I N E =======================================
DOSCODE:BA2E
DOSCODE:BA2E
DOSCODE:BA2E $READ           proc near               ; ...
DOSCODE:BA2E
DOSCODE:BA2E ; FUNCTION CHUNK AT DOSCODE:B971 SIZE 00000002 BYTES
DOSCODE:BA2E ; FUNCTION CHUNK AT DOSCODE:B9D7 SIZE 00000002 BYTES
DOSCODE:BA2E ; FUNCTION CHUNK AT DOSCODE:BA22 SIZE 00000003 BYTES
DOSCODE:BA2E ; FUNCTION CHUNK AT DOSCODE:BA2C SIZE 00000002 BYTES
DOSCODE:BA2E
DOSCODE:BA2E                 mov     si, offset DOS_READ
DOSCODE:BA31
DOSCODE:BA31 ReadDO:                                 ; ...
DOSCODE:BA31                 call    pJFNFromHandle
DOSCODE:BA34                 jb      short loc_BA8A
DOSCODE:BA36                 mov     al, es:[di]
DOSCODE:BA39                 call    CheckOwner
DOSCODE:BA3C                 jb      short loc_BA8A
DOSCODE:BA3E                 mov     word ptr ss:THISSFT, di
DOSCODE:BA43                 mov     word ptr ss:THISSFT+2, es
DOSCODE:BA48                 test    byte ptr es:[di+3], 20h
DOSCODE:BA4D                 jz      short loc_BA55
DOSCODE:BA4F                 or      ss:EXTOPEN_ON, 2
DOSCODE:BA55
DOSCODE:BA55 loc_BA55:                               ; ...
DOSCODE:BA55                 mov     ax, ds
DOSCODE:BA57                 lds     bx, ss:DMAADD
DOSCODE:BA5C                 push    bx
DOSCODE:BA5D                 push    ds
DOSCODE:BA5E                 mov     bx, dx
DOSCODE:BA60                 shr     bx, 1
DOSCODE:BA62                 shr     bx, 1
DOSCODE:BA64                 shr     bx, 1
DOSCODE:BA66                 shr     bx, 1
DOSCODE:BA68                 add     ax, bx
DOSCODE:BA6A                 and     dx, 0Fh
DOSCODE:BA6D                 mov     word ptr ss:DMAADD, dx
DOSCODE:BA72                 mov     word ptr ss:DMAADD+2, ax
DOSCODE:BA76                 mov     ax, ss
DOSCODE:BA78                 mov     ds, ax
DOSCODE:BA7A                 call    si ; DOS_READ
DOSCODE:BA7C                 pop     word ptr ds:DMAADD+2
DOSCODE:BA80                 pop     word ptr ds:DMAADD
DOSCODE:BA84                 jb      short loc_BA8A
DOSCODE:BA86                 mov     ax, cx
DOSCODE:BA88
DOSCODE:BA88 loc_BA88:                               ; ...
DOSCODE:BA88                 jmp     short loc_BA22
DOSCODE:BA8A ; ---------------------------------------------------------------------------
DOSCODE:BA8A
DOSCODE:BA8A loc_BA8A:                               ; ...
DOSCODE:BA8A                 jmp     short loc_BA2C
DOSCODE:BA8A $READ           endp
DOSCODE:BA8A
DOSCODE:BA8C ; ---------------------------------------------------------------------------
DOSCODE:BA8C
DOSCODE:BA8C $WRITE:                                 ; ...
DOSCODE:BA8C                 mov     si, offset DOS_WRITE
DOSCODE:BA8F                 jmp     short ReadDO
DOSCODE:BA91
DOSCODE:BA91 ; =============== S U B R O U T I N E =======================================
DOSCODE:BA91
DOSCODE:BA91
DOSCODE:BA91 $LSEEK          proc near               ; ...
DOSCODE:BA91                 call    CheckOwner
DOSCODE:BA94
DOSCODE:BA94 loc_BA94:                               ; ...
DOSCODE:BA94                 jb      short loc_BA8A
DOSCODE:BA96                 cmp     al, 2
DOSCODE:BA98                 ja      short loc_BAED
DOSCODE:BA9A                 cmp     al, 1
DOSCODE:BA9C                 jb      short loc_BAA8
DOSCODE:BA9E                 ja      short loc_BABB
DOSCODE:BAA0                 add     dx, es:[di+15h]
DOSCODE:BAA4                 adc     cx, es:[di+17h]
DOSCODE:BAA8
DOSCODE:BAA8 loc_BAA8:                               ; ...
DOSCODE:BAA8                 mov     ax, cx
DOSCODE:BAAA                 xchg    ax, dx
DOSCODE:BAAB
DOSCODE:BAAB loc_BAAB:                               ; ...
DOSCODE:BAAB                 mov     es:[di+15h], ax
DOSCODE:BAAF                 mov     es:[di+17h], dx
DOSCODE:BAB3                 call    Get_User_Stack
DOSCODE:BAB6                 mov     [si+6], dx
DOSCODE:BAB9                 jmp     short loc_BA88
DOSCODE:BABB ; ---------------------------------------------------------------------------
DOSCODE:BABB
DOSCODE:BABB loc_BABB:                               ; ...
DOSCODE:BABB                 test    byte ptr es:[di+6], 80h
DOSCODE:BAC0                 jnz     short loc_BACC
DOSCODE:BAC2
DOSCODE:BAC2 loc_BAC2:                               ; ...
DOSCODE:BAC2                 add     dx, es:[di+11h]
DOSCODE:BAC6                 adc     cx, es:[di+13h]
DOSCODE:BACA                 jmp     short loc_BAA8
DOSCODE:BACC ; ---------------------------------------------------------------------------
DOSCODE:BACC
DOSCODE:BACC loc_BACC:                               ; ...
DOSCODE:BACC                 test    byte ptr es:[di+3], 80h
DOSCODE:BAD1                 jnz     short loc_BAC2
DOSCODE:BAD3                 mov     ax, es:[di+2]
DOSCODE:BAD7                 and     ax, 0F0h
DOSCODE:BADA                 cmp     ax, 40h ; '@'
DOSCODE:BADD                 jz      short loc_BAE4
DOSCODE:BADF                 cmp     ax, 30h ; '0'
DOSCODE:BAE2                 jnz     short loc_BAC2
DOSCODE:BAE4
DOSCODE:BAE4 loc_BAE4:                               ; ...
DOSCODE:BAE4                 mov     ax, 1121h
DOSCODE:BAE7                 int     2Fh             ; Multiplex - NETWORK REDIRECTOR - SEEK FROM END OF REMOTE FILE
DOSCODE:BAE7                                         ; CX:DX = offset (in bytes) from end
DOSCODE:BAE7                                         ; ES:DI -> SFT, SFT DPB field -> DPB of drive with file
DOSCODE:BAE7                                         ; SS = DOS CS
DOSCODE:BAE7                                         ; Return: CF set on error
DOSCODE:BAE7                                         ; CF clear if successful, DX:AX = new file position
DOSCODE:BAE9                 jnb     short loc_BAAB
DOSCODE:BAEB
DOSCODE:BAEB loc_BAEB:                               ; ...
DOSCODE:BAEB                 jmp     short loc_BA8A
DOSCODE:BAED ; ---------------------------------------------------------------------------
DOSCODE:BAED
DOSCODE:BAED loc_BAED:                               ; ...
DOSCODE:BAED                 call    set_exerr_locus_unk
DOSCODE:BAF0                 mov     al, 1
DOSCODE:BAF2
DOSCODE:BAF2 loc_BAF2:                               ; ...
DOSCODE:BAF2                 jmp     SYS_RET_ERR
DOSCODE:BAF2 $LSEEK          endp
DOSCODE:BAF2
DOSCODE:BAF5 ; ---------------------------------------------------------------------------
DOSCODE:BAF5
DOSCODE:BAF5 $FILE_TIMES:                            ; ...
DOSCODE:BAF5                 cmp     al, 7
DOSCODE:BAF7                 jnb     short loc_BAED
DOSCODE:BAF9                 cmp     al, 4
DOSCODE:BAFB                 jnb     short loc_BB01
DOSCODE:BAFD                 cmp     al, 2
DOSCODE:BAFF                 jnb     short loc_BAED
DOSCODE:BB01
DOSCODE:BB01 loc_BB01:                               ; ...
DOSCODE:BB01                 call    CheckOwner
DOSCODE:BB04                 jb      short loc_BA94
DOSCODE:BB06                 cmp     al, 1
DOSCODE:BB08                 ja      short loc_BB42
DOSCODE:BB0A                 or      al, al
DOSCODE:BB0C                 jnz     short ft_set_time
DOSCODE:BB0E                 lds     cx, es:[di+0Dh]
DOSCODE:BB12                 mov     dx, ds
DOSCODE:BB14                 call    Get_User_Stack
DOSCODE:BB17                 mov     [si+4], cx
DOSCODE:BB1A                 mov     [si+6], dx
DOSCODE:BB1D                 jmp     short loc_BB3F
DOSCODE:BB1F ; ---------------------------------------------------------------------------
DOSCODE:BB1F
DOSCODE:BB1F ft_set_time:                            ; ...
DOSCODE:BB1F                 call    ECritDisk
DOSCODE:BB22                 mov     es:[di+0Dh], cx
DOSCODE:BB26                 mov     es:[di+0Fh], dx
DOSCODE:BB2A                 xor     ax, ax
DOSCODE:BB2C                 call    dword ptr ss:0C8h
DOSCODE:BB31                 and     word ptr es:[di+5], 0FFBFh
DOSCODE:BB36                 or      word ptr es:[di+5], 4000h
DOSCODE:BB3C                 call    LCritDisk
DOSCODE:BB3F
DOSCODE:BB3F loc_BB3F:                               ; ...
DOSCODE:BB3F                 jmp     SYS_RET_OK
DOSCODE:BB42 ; ---------------------------------------------------------------------------
DOSCODE:BB42
DOSCODE:BB42 loc_BB42:                               ; ...
DOSCODE:BB42                 test    byte ptr es:[di+5], 80h
DOSCODE:BB47                 jnz     short loc_BB4C
DOSCODE:BB49                 call    IsSFTNet
DOSCODE:BB4C
DOSCODE:BB4C loc_BB4C:                               ; ...
DOSCODE:BB4C                 jz      short loc_BB61
DOSCODE:BB4E                 test    al, 1
DOSCODE:BB50                 jnz     short loc_BB5F
DOSCODE:BB52                 mov     dx, es:[di+0Fh]
DOSCODE:BB56
DOSCODE:BB56 loc_BB56:                               ; ...
DOSCODE:BB56                 call    Get_User_Stack
DOSCODE:BB59                 mov     [si+4], cx
DOSCODE:BB5C                 mov     [si+6], dx
DOSCODE:BB5F
DOSCODE:BB5F loc_BB5F:                               ; ...
DOSCODE:BB5F                 jmp     short loc_BB3F
DOSCODE:BB61 ; ---------------------------------------------------------------------------
DOSCODE:BB61
DOSCODE:BB61 loc_BB61:                               ; ...
DOSCODE:BB61                 push    ss
DOSCODE:BB62                 pop     ds
DOSCODE:BB63                 push    ax
DOSCODE:BB64                 push    dx
DOSCODE:BB65                 push    cx
DOSCODE:BB66                 call    sub_7873
DOSCODE:BB69                 pop     cx
DOSCODE:BB6A                 pop     dx
DOSCODE:BB6B                 jnb     short loc_BB70
DOSCODE:BB6D                 pop     cx
DOSCODE:BB6E
DOSCODE:BB6E loc_BB6E:                               ; ...
DOSCODE:BB6E                 jmp     short loc_BAF2
DOSCODE:BB70 ; ---------------------------------------------------------------------------
DOSCODE:BB70
DOSCODE:BB70 loc_BB70:                               ; ...
DOSCODE:BB70                 pop     ax
DOSCODE:BB71                 test    al, 1
DOSCODE:BB73                 jnz     short loc_BB89
DOSCODE:BB75                 xor     cx, cx
DOSCODE:BB77                 mov     dx, es:[di+12h]
DOSCODE:BB7B                 cmp     al, 6
DOSCODE:BB7D                 jnz     short loc_BB87
DOSCODE:BB7F                 mov     cx, es:[di+0Eh]
DOSCODE:BB83                 mov     dx, es:[di+10h]
DOSCODE:BB87
DOSCODE:BB87 loc_BB87:                               ; ...
DOSCODE:BB87                 jmp     short loc_BB56
DOSCODE:BB89 ; ---------------------------------------------------------------------------
DOSCODE:BB89
DOSCODE:BB89 loc_BB89:                               ; ...
DOSCODE:BB89                 test    dl, 1Fh
DOSCODE:BB8C                 jnz     short loc_BB92
DOSCODE:BB8E
DOSCODE:BB8E loc_BB8E:                               ; ...
DOSCODE:BB8E                 mov     al, 0Dh
DOSCODE:BB90
DOSCODE:BB90 loc_BB90:                               ; ...
DOSCODE:BB90                 jmp     short loc_BB6E
DOSCODE:BB92 ; ---------------------------------------------------------------------------
DOSCODE:BB92
DOSCODE:BB92 loc_BB92:                               ; ...
DOSCODE:BB92                 test    dx, 1E0h
DOSCODE:BB96                 jz      short loc_BB8E
DOSCODE:BB98                 push    dx
DOSCODE:BB99                 and     dx, 1E0h
DOSCODE:BB9D                 cmp     dx, 180h
DOSCODE:BBA1                 pop     dx
DOSCODE:BBA2                 ja      short loc_BB8E
DOSCODE:BBA4                 cmp     al, 5
DOSCODE:BBA6                 jnz     short loc_BBAE
DOSCODE:BBA8                 mov     es:[di+12h], dx
DOSCODE:BBAC                 jmp     short loc_BBCE
DOSCODE:BBAE ; ---------------------------------------------------------------------------
DOSCODE:BBAE
DOSCODE:BBAE loc_BBAE:                               ; ...
DOSCODE:BBAE                 mov     ax, cx
DOSCODE:BBB0                 and     ax, 0F81Fh
DOSCODE:BBB3                 cmp     ah, 0B8h
DOSCODE:BBB6                 ja      short loc_BB8E
DOSCODE:BBB8                 cmp     al, 1Dh
DOSCODE:BBBA                 ja      short loc_BB8E
DOSCODE:BBBC                 mov     ax, cx
DOSCODE:BBBE                 and     ax, 7E0h
DOSCODE:BBC1                 cmp     ax, 760h
DOSCODE:BBC4                 ja      short loc_BB8E
DOSCODE:BBC6                 mov     es:[di+10h], dx
DOSCODE:BBCA                 mov     es:[di+0Eh], cx
DOSCODE:BBCE
DOSCODE:BBCE loc_BBCE:                               ; ...
DOSCODE:BBCE                 test    byte ptr es:[bx+5], 40h
DOSCODE:BBD3                 jnz     short loc_BBDD
DOSCODE:BBD5                 call    INC_DIRTY_COUNT
DOSCODE:BBD8                 or      byte ptr es:[bx+5], 40h
DOSCODE:BBDD
DOSCODE:BBDD loc_BBDD:                               ; ...
DOSCODE:BBDD                 push    es
DOSCODE:BBDE                 pop     ds
DOSCODE:BBDF                 mov     di, bx
DOSCODE:BBE1                 mov     al, 0FFh
DOSCODE:BBE3                 call    CHECKFLUSH
DOSCODE:BBE6                 jb      short loc_BB6E
DOSCODE:BBE8
DOSCODE:BBE8 loc_BBE8:                               ; ...
DOSCODE:BBE8                 jmp     SYS_RET_OK
DOSCODE:BBEB ; ---------------------------------------------------------------------------
DOSCODE:BBEB
DOSCODE:BBEB $DUP:                                   ; ...
DOSCODE:BBEB                 mov     ax, bx
DOSCODE:BBED                 call    JFNFree
DOSCODE:BBF0
DOSCODE:BBF0 loc_BBF0:                               ; ...
DOSCODE:BBF0                 jnb     short loc_BBF5
DOSCODE:BBF2                 jmp     loc_BAEB
DOSCODE:BBF5 ; ---------------------------------------------------------------------------
DOSCODE:BBF5
DOSCODE:BBF5 loc_BBF5:                               ; ...
DOSCODE:BBF5                 push    es
DOSCODE:BBF6                 push    di
DOSCODE:BBF7                 pop     si
DOSCODE:BBF8                 pop     ds
DOSCODE:BBF9                 xchg    ax, bx
DOSCODE:BBFA                 call    CheckOwner
DOSCODE:BBFD                 jnb     short loc_BC01
DOSCODE:BBFF                 jmp     short loc_BB90
DOSCODE:BC01 ; ---------------------------------------------------------------------------
DOSCODE:BC01
DOSCODE:BC01 loc_BC01:                               ; ...
DOSCODE:BC01                 call    DOS_Dup_Direct
DOSCODE:BC04                 call    pJFNFromHandle
DOSCODE:BC07                 mov     bl, es:[di]
DOSCODE:BC0A                 mov     [si], bl
DOSCODE:BC0C                 jmp     short loc_BBE8
DOSCODE:BC0E ; ---------------------------------------------------------------------------
DOSCODE:BC0E
DOSCODE:BC0E $DUP2:                                  ; ...
DOSCODE:BC0E                 push    bx
DOSCODE:BC0F                 push    cx
DOSCODE:BC10                 mov     bx, cx
DOSCODE:BC12                 call    $CLOSE
DOSCODE:BC15                 pop     bx
DOSCODE:BC16                 pop     ax
DOSCODE:BC17                 call    pJFNFromHandle
DOSCODE:BC1A                 jmp     short loc_BBF0
DOSCODE:BC1C
DOSCODE:BC1C ; =============== S U B R O U T I N E =======================================
DOSCODE:BC1C
DOSCODE:BC1C
DOSCODE:BC1C CheckOwner      proc near               ; ...
DOSCODE:BC1C                 call    SFFromHandle
DOSCODE:BC1F                 jb      short locret_BC40
DOSCODE:BC21                 push    ax
DOSCODE:BC22                 test    ss:IsWin386, 1
DOSCODE:BC28                 jz      short loc_BC32
DOSCODE:BC2A                 xor     ax, ax
DOSCODE:BC2C                 pop     ax
DOSCODE:BC2D                 jnz     short loc_BC30
DOSCODE:BC2F
DOSCODE:BC2F locret_BC2F:                            ; ...
DOSCODE:BC2F                 retn
DOSCODE:BC30 ; ---------------------------------------------------------------------------
DOSCODE:BC30
DOSCODE:BC30 loc_BC30:                               ; ...
DOSCODE:BC30                 jmp     short loc_BC3D
DOSCODE:BC32 ; ---------------------------------------------------------------------------
DOSCODE:BC32
DOSCODE:BC32 loc_BC32:                               ; ...
DOSCODE:BC32                 mov     ax, ss:USER_ID
DOSCODE:BC36                 cmp     ax, es:[di+2Fh]
DOSCODE:BC3A                 pop     ax
DOSCODE:BC3B                 jz      short locret_BC2F
DOSCODE:BC3D
DOSCODE:BC3D loc_BC3D:                               ; ...
DOSCODE:BC3D                 mov     al, 6
DOSCODE:BC3F                 stc
DOSCODE:BC40
DOSCODE:BC40 locret_BC40:                            ; ...
DOSCODE:BC40                 retn
DOSCODE:BC40 CheckOwner      endp
DOSCODE:BC40
DOSCODE:BC41 ; ---------------------------------------------------------------------------
DOSCODE:BC41
DOSCODE:BC41 $AssignOper:                            ; ...
DOSCODE:BC41                 cmp     al, 7
DOSCODE:BC43                 jnz     short loc_BC69
DOSCODE:BC45
DOSCODE:BC45 loc_BC45:                               ; ...
DOSCODE:BC45                 push    ax
DOSCODE:BC46                 mov     al, dl
DOSCODE:BC48                 call    GetCDSFromDrv
DOSCODE:BC4B                 pop     ax
DOSCODE:BC4C                 jb      short loc_BC64
DOSCODE:BC4E                 cmp     word ptr [si+45h], 0
DOSCODE:BC52                 jz      short loc_BC64
DOSCODE:BC54                 cmp     al, 7
DOSCODE:BC56                 jnz     short loc_BC5E
DOSCODE:BC58                 or      byte ptr [si+44h], 40h
DOSCODE:BC5C                 jmp     short loc_BC76
DOSCODE:BC5E ; ---------------------------------------------------------------------------
DOSCODE:BC5E
DOSCODE:BC5E loc_BC5E:                               ; ...
DOSCODE:BC5E                 and     byte ptr [si+44h], 0BFh
DOSCODE:BC62                 jmp     short loc_BC76
DOSCODE:BC64 ; ---------------------------------------------------------------------------
DOSCODE:BC64
DOSCODE:BC64 loc_BC64:                               ; ...
DOSCODE:BC64                 mov     ax, 0Fh
DOSCODE:BC67                 jmp     short loc_BC79
DOSCODE:BC69 ; ---------------------------------------------------------------------------
DOSCODE:BC69
DOSCODE:BC69 loc_BC69:                               ; ...
DOSCODE:BC69                 cmp     al, 8
DOSCODE:BC6B                 jz      short loc_BC45
DOSCODE:BC6D                 push    ax
DOSCODE:BC6E                 mov     ax, 111Eh
DOSCODE:BC71                 int     2Fh             ; Multiplex - NETWORK REDIRECTOR - DO REDIRECTION
DOSCODE:BC71                                         ; SS = DOS CS
DOSCODE:BC71                                         ; STACK: WORD function to execute
DOSCODE:BC71                                         ; Return: CF set on error, AX = error code
DOSCODE:BC71                                         ; STACK unchanged
DOSCODE:BC73                 pop     bx
DOSCODE:BC74                 jb      short loc_BC79
DOSCODE:BC76
DOSCODE:BC76 loc_BC76:                               ; ...
DOSCODE:BC76                 jmp     SYS_RET_OK
DOSCODE:BC79 ; ---------------------------------------------------------------------------
DOSCODE:BC79
DOSCODE:BC79 loc_BC79:                               ; ...
DOSCODE:BC79                 jmp     SYS_RET_ERR
DOSCODE:BC7C
DOSCODE:BC7C ; =============== S U B R O U T I N E =======================================
DOSCODE:BC7C
DOSCODE:BC7C
DOSCODE:BC7C FIND_DPB        proc near               ; ...
DOSCODE:BC7C                 lds     si, ss:26h
DOSCODE:BC81
DOSCODE:BC81 loc_BC81:                               ; ...
DOSCODE:BC81                 cmp     si, 0FFFFh
DOSCODE:BC84                 jz      short loc_BC8F
DOSCODE:BC86                 cmp     al, [si]
DOSCODE:BC88                 jz      short locret_BC90
DOSCODE:BC8A                 lds     si, [si+19h]
DOSCODE:BC8D                 jmp     short loc_BC81
DOSCODE:BC8F ; ---------------------------------------------------------------------------
DOSCODE:BC8F
DOSCODE:BC8F loc_BC8F:                               ; ...
DOSCODE:BC8F                 stc
DOSCODE:BC90
DOSCODE:BC90 locret_BC90:                            ; ...
DOSCODE:BC90                 retn
DOSCODE:BC90 FIND_DPB        endp
DOSCODE:BC90
DOSCODE:BC91
DOSCODE:BC91 ; =============== S U B R O U T I N E =======================================
DOSCODE:BC91
DOSCODE:BC91
DOSCODE:BC91 InitCDS         proc near               ; ...
DOSCODE:BC91                 push    ax
DOSCODE:BC92                 les     di, ss:THISCDS
DOSCODE:BC97                 mov     word ptr es:[di+43h], 0
DOSCODE:BC9D                 sub     al, 40h ; '@'
DOSCODE:BC9F                 cmp     ss:NUMIO, al
DOSCODE:BCA4                 jb      short loc_BCDC
DOSCODE:BCA6                 dec     ax
DOSCODE:BCA7                 push    ax
DOSCODE:BCA8                 add     al, 41h ; 'A'
DOSCODE:BCAA                 mov     ah, 3Ah ; ':'
DOSCODE:BCAC                 mov     es:[di], ax
DOSCODE:BCAF                 mov     word ptr es:[di+2], 5Ch ; '\'
DOSCODE:BCB5                 or      byte ptr es:[di+44h], 40h
DOSCODE:BCBA                 sub     ax, ax
DOSCODE:BCBC                 mov     es:[di+49h], ax
DOSCODE:BCC0                 mov     es:[di+4Bh], ax
DOSCODE:BCC4                 mov     al, 2
DOSCODE:BCC6                 mov     es:[di+4Fh], ax
DOSCODE:BCCA                 pop     ax
DOSCODE:BCCB                 push    ds
DOSCODE:BCCC                 push    si
DOSCODE:BCCD                 call    FIND_DPB
DOSCODE:BCD0                 jb      short loc_BCDA
DOSCODE:BCD2                 mov     es:[di+45h], si
DOSCODE:BCD6                 mov     word ptr es:[di+47h], ds
DOSCODE:BCDA
DOSCODE:BCDA loc_BCDA:                               ; ...
DOSCODE:BCDA                 pop     si
DOSCODE:BCDB                 pop     ds
DOSCODE:BCDC
DOSCODE:BCDC loc_BCDC:                               ; ...
DOSCODE:BCDC                 pop     ax
DOSCODE:BCDD
DOSCODE:BCDD locret_BCDD:                            ; ...
DOSCODE:BCDD                 retn
DOSCODE:BCDD InitCDS         endp
DOSCODE:BCDD
DOSCODE:BCDE ; ---------------------------------------------------------------------------
DOSCODE:BCDE
DOSCODE:BCDE $UserOper:                              ; ...
DOSCODE:BCDE                 cmp     al, 1
DOSCODE:BCE0                 jb      short loc_BCEF
DOSCODE:BCE2                 jz      short loc_BD0E
DOSCODE:BCE4                 cmp     al, 5
DOSCODE:BCE6                 jbe     short loc_BD21
DOSCODE:BCE8                 call    set_exerr_locus_unk
DOSCODE:BCEB                 mov     al, 1
DOSCODE:BCED
DOSCODE:BCED loc_BCED:                               ; ...
DOSCODE:BCED                 jmp     short loc_BC79
DOSCODE:BCEF ; ---------------------------------------------------------------------------
DOSCODE:BCEF
DOSCODE:BCEF loc_BCEF:                               ; ...
DOSCODE:BCEF                 push    ds
DOSCODE:BCF0                 pop     es
DOSCODE:BCF1                 mov     di, dx
DOSCODE:BCF3                 mov     cx, ss:0Eh
DOSCODE:BCF8                 call    Get_User_Stack
DOSCODE:BCFB                 mov     [si+4], cx
DOSCODE:BCFE                 push    ss
DOSCODE:BCFF                 pop     ds
DOSCODE:BD00                 mov     si, offset MYNAME
DOSCODE:BD03
DOSCODE:BD03 loc_BD03:                               ; ...
DOSCODE:BD03                 mov     cx, 0Fh
DOSCODE:BD06                 rep movsb
DOSCODE:BD08                 xor     ax, ax
DOSCODE:BD0A                 stosb
DOSCODE:BD0B
DOSCODE:BD0B loc_BD0B:                               ; ...
DOSCODE:BD0B                 jmp     SYS_RET_OK
DOSCODE:BD0E ; ---------------------------------------------------------------------------
DOSCODE:BD0E
DOSCODE:BD0E loc_BD0E:                               ; ...
DOSCODE:BD0E                 mov     ss:0Eh, cx
DOSCODE:BD13                 mov     si, dx
DOSCODE:BD15                 push    ss
DOSCODE:BD16                 pop     es
DOSCODE:BD17                 mov     di, 305h
DOSCODE:BD1A                 inc     byte ptr ss:304h
DOSCODE:BD1F                 jmp     short loc_BD03
DOSCODE:BD21 ; ---------------------------------------------------------------------------
DOSCODE:BD21
DOSCODE:BD21 loc_BD21:                               ; ...
DOSCODE:BD21                 push    ax
DOSCODE:BD22                 mov     ax, 111Fh
DOSCODE:BD25                 int     2Fh             ; Multiplex - NETWORK REDIRECTOR - PRINTER SETUP
DOSCODE:BD25                                         ; STACK: WORD function
DOSCODE:BD25                                         ; Return: CF set on error, AX = error code
DOSCODE:BD25                                         ; STACK unchanged
DOSCODE:BD27                 pop     dx
DOSCODE:BD28                 jnb     short loc_BD0B
DOSCODE:BD2A                 jmp     short loc_BCED
DOSCODE:BD2C
DOSCODE:BD2C ; =============== S U B R O U T I N E =======================================
DOSCODE:BD2C
DOSCODE:BD2C
DOSCODE:BD2C GetVisDrv       proc near               ; ...
DOSCODE:BD2C                 call    GETTHISDRV
DOSCODE:BD2F                 jb      short locret_BCDD
DOSCODE:BD31                 push    ds
DOSCODE:BD32                 push    si
DOSCODE:BD33                 lds     si, ss:5A2h
DOSCODE:BD38                 test    byte ptr [si+44h], 20h
DOSCODE:BD3C                 pop     si
DOSCODE:BD3D                 pop     ds
DOSCODE:BD3E                 jz      short locret_BCDD
DOSCODE:BD40                 mov     ss:DrvErr, 0Fh
DOSCODE:BD46                 stc
DOSCODE:BD47                 retn
DOSCODE:BD47 GetVisDrv       endp
DOSCODE:BD47
DOSCODE:BD48
DOSCODE:BD48 ; =============== S U B R O U T I N E =======================================
DOSCODE:BD48
DOSCODE:BD48
DOSCODE:BD48 GETTHISDRV      proc near               ; ...
DOSCODE:BD48                 or      al, al
DOSCODE:BD4A                 jnz     short loc_BD51
DOSCODE:BD4C                 mov     al, ss:CURDRV
DOSCODE:BD50                 inc     ax
DOSCODE:BD51
DOSCODE:BD51 loc_BD51:                               ; ...
DOSCODE:BD51                 dec     ax
DOSCODE:BD52                 push    ds
DOSCODE:BD53                 push    si
DOSCODE:BD54                 call    set_exerr_locus_disk
DOSCODE:BD57                 cmp     ss:FSHARING, 0
DOSCODE:BD5D                 jz      short loc_BD7F
DOSCODE:BD5F                 push    ax
DOSCODE:BD60                 push    es
DOSCODE:BD61                 push    di
DOSCODE:BD62                 mov     word ptr ss:THISCDS, (offset dword_613 - (offset SFT0_SFTable+4Eh))
DOSCODE:BD69                 mov     word ptr ss:THISCDS+2, ss
DOSCODE:BD6E                 add     al, 41h ; 'A'
DOSCODE:BD70                 call    InitCDS
DOSCODE:BD73                 test    byte ptr es:[di+44h], 40h
DOSCODE:BD78                 pop     di
DOSCODE:BD79                 pop     es
DOSCODE:BD7A                 pop     ax
DOSCODE:BD7B                 jz      short loc_BD8A
DOSCODE:BD7D                 jmp     short loc_BD94
DOSCODE:BD7F ; ---------------------------------------------------------------------------
DOSCODE:BD7F
DOSCODE:BD7F loc_BD7F:                               ; ...
DOSCODE:BD7F                 call    GetCDSFromDrv
DOSCODE:BD82                 jb      short loc_BD8A
DOSCODE:BD84                 test    byte ptr [si+44h], 40h
DOSCODE:BD88                 jnz     short loc_BD94
DOSCODE:BD8A
DOSCODE:BD8A loc_BD8A:                               ; ...
DOSCODE:BD8A                 mov     al, 0Fh
DOSCODE:BD8C                 mov     ss:DrvErr, al
DOSCODE:BD90                 call    set_exerr_locus_unk
DOSCODE:BD93                 stc
DOSCODE:BD94
DOSCODE:BD94 loc_BD94:                               ; ...
DOSCODE:BD94                 pop     si
DOSCODE:BD95                 pop     ds
DOSCODE:BD96                 retn
DOSCODE:BD96 GETTHISDRV      endp
DOSCODE:BD96
DOSCODE:BD97
DOSCODE:BD97 ; =============== S U B R O U T I N E =======================================
DOSCODE:BD97
DOSCODE:BD97
DOSCODE:BD97 GetCDSFromDrv   proc near               ; ...
DOSCODE:BD97                 cmp     al, ss:CDSCOUNT
DOSCODE:BD9C                 jnb     short loc_BDB9
DOSCODE:BD9E                 push    bx
DOSCODE:BD9F                 push    ax
DOSCODE:BDA0                 lds     si, ss:CDSADDR
DOSCODE:BDA5                 mov     bl, 88
DOSCODE:BDA7                 mul     bl
DOSCODE:BDA9                 add     si, ax
DOSCODE:BDAB                 mov     word ptr ss:THISCDS, si
DOSCODE:BDB0                 mov     word ptr ss:THISCDS+2, ds
DOSCODE:BDB5                 pop     ax
DOSCODE:BDB6                 pop     bx
DOSCODE:BDB7                 clc
DOSCODE:BDB8                 retn
DOSCODE:BDB9 ; ---------------------------------------------------------------------------
DOSCODE:BDB9
DOSCODE:BDB9 loc_BDB9:                               ; ...
DOSCODE:BDB9                 stc
DOSCODE:BDBA                 retn
DOSCODE:BDBA GetCDSFromDrv   endp
DOSCODE:BDBA
DOSCODE:BDBB
DOSCODE:BDBB ; =============== S U B R O U T I N E =======================================
DOSCODE:BDBB
DOSCODE:BDBB ; Attributes: bp-based frame
DOSCODE:BDBB
DOSCODE:BDBB TransFCB        proc near               ; ...
DOSCODE:BDBB
DOSCODE:BDBB FCBTmp          = byte ptr -10h
DOSCODE:BDBB
DOSCODE:BDBB                 push    bp
DOSCODE:BDBC                 mov     bp, sp
DOSCODE:BDBE                 sub     sp, 10h
DOSCODE:BDC1                 push    ss
DOSCODE:BDC2                 pop     es
DOSCODE:BDC3                 push    es
DOSCODE:BDC4                 push    di
DOSCODE:BDC5                 lea     di, [bp+FCBTmp] ; point to FCB temp area
DOSCODE:BDC8                 mov     ss:EXTFCB, 0    ; no extended FCB found
DOSCODE:BDCE                 mov     ss:SATTRIB, 0   ; default search attributes
DOSCODE:BDD4                 call    GetExtended     ; get FCB, extended or not
DOSCODE:BDD7                 jz      short GetDrive  ; not an extended FCB, get drive
DOSCODE:BDD9                 mov     al, [si-1]      ; get attributes
DOSCODE:BDDC                 mov     ss:SATTRIB, al  ; store search attributes
DOSCODE:BDE0                 mov     ss:EXTFCB, 0FFh ; -1 ; signal extended FCB
DOSCODE:BDE6
DOSCODE:BDE6 GetDrive:                               ; ...
DOSCODE:BDE6                 lodsb                   ; get drive byte
DOSCODE:BDE7                 call    GETTHISDRV
DOSCODE:BDEA                 jb      short BadPack
DOSCODE:BDEC                 call    TextFromDrive   ; convert 0-based drive to text
DOSCODE:BDEF                 mov     cx, 11
DOSCODE:BDF2                 push    si              ; back over name, ext
DOSCODE:BDF3
DOSCODE:BDF3 FCBScan:                                ; ...
DOSCODE:BDF3                 lodsb                   ; get a byte
DOSCODE:BDF4                 call    GetCharType
DOSCODE:BDF7                 test    al, 8
DOSCODE:BDF9                 jz      short BadPack
DOSCODE:BDFB                 loop    FCBScan
DOSCODE:BDFD                 pop     si
DOSCODE:BDFE                 mov     bx, di
DOSCODE:BE00                 call    PackName
DOSCODE:BE03                 pop     di
DOSCODE:BE04                 pop     es
DOSCODE:BE05                 push    ss
DOSCODE:BE06                 pop     ds
DOSCODE:BE07                 lea     si, [bp+FCBTmp]
DOSCODE:BE0A                 cmp     byte ptr [bx], 0
DOSCODE:BE0D                 jz      short BadPack
DOSCODE:BE0F                 push    bp
DOSCODE:BE10                 call    TransPathSet
DOSCODE:BE13                 pop     bp
DOSCODE:BE14                 jnb     short FCBRet
DOSCODE:BE16
DOSCODE:BE16 BadPack:                                ; ...
DOSCODE:BE16                 stc
DOSCODE:BE17                 mov     al, 3
DOSCODE:BE19
DOSCODE:BE19 FCBRet:                                 ; ...
DOSCODE:BE19                 mov     sp, bp
DOSCODE:BE1B                 pop     bp
DOSCODE:BE1C
DOSCODE:BE1C TransPath_retn:                         ; ...
DOSCODE:BE1C                 retn
DOSCODE:BE1C TransFCB        endp ; sp-analysis failed
DOSCODE:BE1C
DOSCODE:BE1D
DOSCODE:BE1D ; =============== S U B R O U T I N E =======================================
DOSCODE:BE1D
DOSCODE:BE1D
DOSCODE:BE1D TransPath       proc near               ; ...
DOSCODE:BE1D                 xor     al, al
DOSCODE:BE1F                 jmp     short SetSplice
DOSCODE:BE1F TransPath       endp
DOSCODE:BE1F
DOSCODE:BE21
DOSCODE:BE21 ; =============== S U B R O U T I N E =======================================
DOSCODE:BE21
DOSCODE:BE21
DOSCODE:BE21 TransPathSet    proc near               ; ...
DOSCODE:BE21
DOSCODE:BE21 ; FUNCTION CHUNK AT DOSCODE:BEF1 SIZE 000000A5 BYTES
DOSCODE:BE21
DOSCODE:BE21                 mov     al, 0FFh
DOSCODE:BE23
DOSCODE:BE23 SetSplice:                              ; ...
DOSCODE:BE23                 mov     ss:NoSetDir, al
DOSCODE:BE27                 mov     al, 0FFh
DOSCODE:BE29
DOSCODE:BE29 TransPathNoSet:                         ; ...
DOSCODE:BE29                 mov     ss:FSPLICE, al
DOSCODE:BE2D                 mov     ss:CMETA, 0FFh
DOSCODE:BE33                 mov     ss:WFP_START, di
DOSCODE:BE38                 mov     ss:CURR_DIR_END, 0FFFFh
DOSCODE:BE3F                 push    ss
DOSCODE:BE40                 pop     es
DOSCODE:BE41                 lea     bp, [di+86h]
DOSCODE:BE45                 cmp     ss:FSHARING, 0
DOSCODE:BE4B                 jz      short CheckUNC
DOSCODE:BE4D                 call    DriveFromText
DOSCODE:BE50                 call    GETTHISDRV
DOSCODE:BE53                 jb      short NoPath
DOSCODE:BE55                 call    TextFromDrive
DOSCODE:BE58                 lea     bx, [di+1]
DOSCODE:BE5B                 call    Canonicalize
DOSCODE:BE5E                 jb      short TransPath_retn
DOSCODE:BE60                 push    ss
DOSCODE:BE61                 pop     ds
DOSCODE:BE62                 mov     si, ds:WFP_START
DOSCODE:BE66                 test    ds:FSPLICE, 0FFh
DOSCODE:BE6B                 jz      short NoServerSplice
DOSCODE:BE6D                 call    Splice
DOSCODE:BE70
DOSCODE:BE70 NoServerSplice:                         ; ...
DOSCODE:BE70                 push    ss
DOSCODE:BE71                 pop     ds
DOSCODE:BE72                 les     di, ds:THISCDS
DOSCODE:BE76                 call    ECritDisk
DOSCODE:BE79                 call    FATREAD_CDS
DOSCODE:BE7C                 call    LCritDisk
DOSCODE:BE7F
DOSCODE:BE7F NoPath:                                 ; ...
DOSCODE:BE7F                 mov     al, 3
DOSCODE:BE81                 retn
DOSCODE:BE82 ; ---------------------------------------------------------------------------
DOSCODE:BE82
DOSCODE:BE82 CheckUNC:                               ; ...
DOSCODE:BE82                 mov     word ptr ss:THISCDS, 0FFFFh
DOSCODE:BE89                 mov     ax, 1123h
DOSCODE:BE8C                 int     2Fh             ; Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME
DOSCODE:BE8C                                         ; DS:SI -> ASCIZ filename to canonicalize
DOSCODE:BE8C                                         ; ES:DI -> 128-byte buffer for qualified name
DOSCODE:BE8C                                         ; Return: CF set if not resolved
DOSCODE:BE8E                 jnb     short loc_BEB9
DOSCODE:BE90                 call    DriveFromText
DOSCODE:BE93                 push    ax
DOSCODE:BE94                 mov     ax, [si]
DOSCODE:BE96                 call    PATHCHRCMP
DOSCODE:BE99                 xchg    ah, al
DOSCODE:BE9B                 call    PATHCHRCMP
DOSCODE:BE9E                 jnz     short loc_BEBF
DOSCODE:BEA0                 cmp     ah, al
DOSCODE:BEA2                 jnz     short loc_BEBF
DOSCODE:BEA4                 pop     ax
DOSCODE:BEA5                 movsw
DOSCODE:BEA6
DOSCODE:BEA6 loc_BEA6:                               ; ...
DOSCODE:BEA6                 lodsb
DOSCODE:BEA7                 call    UCase
DOSCODE:BEAA                 or      al, al
DOSCODE:BEAC                 jz      short loc_BEBC
DOSCODE:BEAE                 call    PATHCHRCMP
DOSCODE:BEB1                 mov     bx, di
DOSCODE:BEB3                 stosb
DOSCODE:BEB4                 jnz     short loc_BEA6
DOSCODE:BEB6                 call    Canonicalize
DOSCODE:BEB9
DOSCODE:BEB9 loc_BEB9:                               ; ...
DOSCODE:BEB9                 push    ss
DOSCODE:BEBA                 pop     ds
DOSCODE:BEBB                 retn
DOSCODE:BEBC ; ---------------------------------------------------------------------------
DOSCODE:BEBC
DOSCODE:BEBC loc_BEBC:                               ; ...
DOSCODE:BEBC                 stosb
DOSCODE:BEBD                 jmp     short loc_BEB9
DOSCODE:BEBF ; ---------------------------------------------------------------------------
DOSCODE:BEBF
DOSCODE:BEBF loc_BEBF:                               ; ...
DOSCODE:BEBF                 pop     ax
DOSCODE:BEC0                 cmp     byte ptr [si], 0
DOSCODE:BEC3                 jnz     short loc_BEC9
DOSCODE:BEC5                 mov     al, 2
DOSCODE:BEC7                 stc
DOSCODE:BEC8                 retn
DOSCODE:BEC9 ; ---------------------------------------------------------------------------
DOSCODE:BEC9
DOSCODE:BEC9 loc_BEC9:                               ; ...
DOSCODE:BEC9                 push    ax
DOSCODE:BECA                 push    bp
DOSCODE:BECB                 call    sub_BEEE
DOSCODE:BECE                 pop     bp
DOSCODE:BECF                 pop     ax
DOSCODE:BED0                 jnb     short loc_BEF1
DOSCODE:BED2                 mov     ss:FSHARING, 0FFh
DOSCODE:BED8                 call    GETTHISDRV
DOSCODE:BEDB                 mov     ss:FSHARING, 0
DOSCODE:BEE1                 call    TextFromDrive
DOSCODE:BEE4                 mov     al, 2Fh ; '/'
DOSCODE:BEE6                 stosb
DOSCODE:BEE7                 call    StrCpy
DOSCODE:BEEA                 clc
DOSCODE:BEEB                 push    ss
DOSCODE:BEEC                 pop     ds
DOSCODE:BEED
DOSCODE:BEED locret_BEED:                            ; ...
DOSCODE:BEED                 retn
DOSCODE:BEED TransPathSet    endp
DOSCODE:BEED
DOSCODE:BEEE
DOSCODE:BEEE ; =============== S U B R O U T I N E =======================================
DOSCODE:BEEE
DOSCODE:BEEE ; Attributes: thunk
DOSCODE:BEEE
DOSCODE:BEEE sub_BEEE        proc near               ; ...
DOSCODE:BEEE                 jmp     sub_8FD0
DOSCODE:BEEE sub_BEEE        endp
DOSCODE:BEEE
DOSCODE:BEF1 ; ---------------------------------------------------------------------------
DOSCODE:BEF1 ; START OF FUNCTION CHUNK FOR TransPathSet
DOSCODE:BEF1
DOSCODE:BEF1 loc_BEF1:                               ; ...
DOSCODE:BEF1                 call    GetVisDrv
DOSCODE:BEF4                 mov     al, 3
DOSCODE:BEF6                 jb      short locret_BEED
DOSCODE:BEF8                 push    ds
DOSCODE:BEF9                 push    si
DOSCODE:BEFA                 push    es
DOSCODE:BEFB                 push    di
DOSCODE:BEFC                 call    ValidateCDS
DOSCODE:BEFF                 pop     di
DOSCODE:BF00                 pop     es
DOSCODE:BF01                 pop     si
DOSCODE:BF02                 pop     ds
DOSCODE:BF03                 mov     al, 3
DOSCODE:BF05                 jb      short locret_BEED
DOSCODE:BF07                 push    ds
DOSCODE:BF08                 push    si
DOSCODE:BF09                 lds     si, ss:THISCDS
DOSCODE:BF0E                 mov     bx, di
DOSCODE:BF10                 add     bx, [si+4Fh]
DOSCODE:BF13                 lea     bp, [di+86h]
DOSCODE:BF17                 call    FStrCpy
DOSCODE:BF1A                 dec     di
DOSCODE:BF1B                 mov     al, 5Ch ; '\'
DOSCODE:BF1D                 cmp     es:[di-1], al
DOSCODE:BF21                 jz      short loc_BF24
DOSCODE:BF23                 stosb
DOSCODE:BF24
DOSCODE:BF24 loc_BF24:                               ; ...
DOSCODE:BF24                 dec     di
DOSCODE:BF25                 pop     si
DOSCODE:BF26                 pop     ds
DOSCODE:BF27                 call    sub_BFFB
DOSCODE:BF2A                 jnz     short loc_BF3D
DOSCODE:BF2C                 or      al, al
DOSCODE:BF2E                 jz      short loc_BF40
DOSCODE:BF30                 mov     di, bx
DOSCODE:BF32
DOSCODE:BF32 loc_BF32:                               ; ...
DOSCODE:BF32                 lodsb
DOSCODE:BF33                 call    PATHCHRCMP
DOSCODE:BF36                 jz      short loc_BF32
DOSCODE:BF38                 dec     si
DOSCODE:BF39                 or      al, al
DOSCODE:BF3B                 jz      short loc_BF40
DOSCODE:BF3D
DOSCODE:BF3D loc_BF3D:                               ; ...
DOSCODE:BF3D                 mov     al, 5Ch ; '\'
DOSCODE:BF3F                 stosb
DOSCODE:BF40
DOSCODE:BF40 loc_BF40:                               ; ...
DOSCODE:BF40                 call    Canonicalize
DOSCODE:BF43                 jb      short locret_BEED
DOSCODE:BF45                 push    ss
DOSCODE:BF46                 pop     ds
DOSCODE:BF47                 mov     di, ds:WFP_START
DOSCODE:BF4B                 lds     si, ds:THISCDS
DOSCODE:BF4F                 call    PathPref
DOSCODE:BF52                 jnz     short loc_BF68
DOSCODE:BF54                 mov     al, [si-1]
DOSCODE:BF57                 call    PATHCHRCMP
DOSCODE:BF5A                 jz      short loc_BF68
DOSCODE:BF5C                 cmp     byte ptr es:[di], 0
DOSCODE:BF60                 jz      short loc_BF68
DOSCODE:BF62                 inc     di
DOSCODE:BF63                 mov     ss:CURR_DIR_END, di
DOSCODE:BF68
DOSCODE:BF68 loc_BF68:                               ; ...
DOSCODE:BF68                 push    ss
DOSCODE:BF69                 pop     ds
DOSCODE:BF6A                 mov     si, ds:WFP_START
DOSCODE:BF6E                 xor     cx, cx
DOSCODE:BF70                 test    ds:FSPLICE, 0FFh
DOSCODE:BF75                 jz      short loc_BF7A
DOSCODE:BF77                 call    Splice
DOSCODE:BF7A
DOSCODE:BF7A loc_BF7A:                               ; ...
DOSCODE:BF7A                 push    ss
DOSCODE:BF7B                 pop     ds
DOSCODE:BF7C                 les     di, ds:THISCDS
DOSCODE:BF80                 test    word ptr es:[di+43h], 8000h
DOSCODE:BF86                 jnz     short locret_BF95
DOSCODE:BF88                 jcxz    short locret_BF95
DOSCODE:BF8A                 call    ECritDisk
DOSCODE:BF8D                 call    FATREAD_CDS
DOSCODE:BF90                 call    LCritDisk
DOSCODE:BF93                 mov     al, 3
DOSCODE:BF95
DOSCODE:BF95 locret_BF95:                            ; ...
DOSCODE:BF95                 retn
DOSCODE:BF95 ; END OF FUNCTION CHUNK FOR TransPathSet
DOSCODE:BF96
DOSCODE:BF96 ; =============== S U B R O U T I N E =======================================
DOSCODE:BF96
DOSCODE:BF96
DOSCODE:BF96 Canonicalize    proc near               ; ...
DOSCODE:BF96                 lodsb
DOSCODE:BF97                 call    PATHCHRCMP
DOSCODE:BF9A                 jnz     short loc_BFA3
DOSCODE:BF9C                 cmp     di, bp
DOSCODE:BF9E                 jnb     short loc_BFB9
DOSCODE:BFA0                 stosb
DOSCODE:BFA1                 jmp     short Canonicalize
DOSCODE:BFA3 ; ---------------------------------------------------------------------------
DOSCODE:BFA3
DOSCODE:BFA3 loc_BFA3:                               ; ...
DOSCODE:BFA3                 dec     si
DOSCODE:BFA4
DOSCODE:BFA4 loc_BFA4:                               ; ...
DOSCODE:BFA4                 xor     ax, ax
DOSCODE:BFA6                 cmp     [si], al
DOSCODE:BFA8                 jnz     short loc_BFC4
DOSCODE:BFAA                 cmp     byte ptr es:[di-1], 3Ah ; ':'
DOSCODE:BFAF                 jnz     short loc_BFB6
DOSCODE:BFB1                 mov     al, 5Ch ; '\'
DOSCODE:BFB3                 stosb
DOSCODE:BFB4                 mov     al, ah
DOSCODE:BFB6
DOSCODE:BFB6 loc_BFB6:                               ; ...
DOSCODE:BFB6                 stosb
DOSCODE:BFB7                 clc
DOSCODE:BFB8                 retn
DOSCODE:BFB9 ; ---------------------------------------------------------------------------
DOSCODE:BFB9
DOSCODE:BFB9 loc_BFB9:                               ; ...
DOSCODE:BFB9                 call    ScanPathChar
DOSCODE:BFBC                 mov     al, 3
DOSCODE:BFBE                 jz      short loc_BFC2
DOSCODE:BFC0                 mov     al, 2
DOSCODE:BFC2
DOSCODE:BFC2 loc_BFC2:                               ; ...
DOSCODE:BFC2                 stc
DOSCODE:BFC3
DOSCODE:BFC3 locret_BFC3:                            ; ...
DOSCODE:BFC3                 retn
DOSCODE:BFC4 ; ---------------------------------------------------------------------------
DOSCODE:BFC4
DOSCODE:BFC4 loc_BFC4:                               ; ...
DOSCODE:BFC4                 call    sub_C018
DOSCODE:BFC7                 jb      short locret_BFC3
DOSCODE:BFC9                 cmp     word ptr es:[di], 2Eh ; '.'
DOSCODE:BFCD                 jz      short loc_BFD7
DOSCODE:BFCF                 cmp     word ptr es:[di], 2E2Eh
DOSCODE:BFD4                 jnz     short loc_BFE0
DOSCODE:BFD6                 dec     di
DOSCODE:BFD7
DOSCODE:BFD7 loc_BFD7:                               ; ...
DOSCODE:BFD7                 call    SkipBack
DOSCODE:BFDA                 mov     al, 3
DOSCODE:BFDC                 jb      short locret_BFC3
DOSCODE:BFDE                 jmp     short loc_BFE2
DOSCODE:BFE0 ; ---------------------------------------------------------------------------
DOSCODE:BFE0
DOSCODE:BFE0 loc_BFE0:                               ; ...
DOSCODE:BFE0                 add     di, cx
DOSCODE:BFE2
DOSCODE:BFE2 loc_BFE2:                               ; ...
DOSCODE:BFE2                 call    sub_BFFB
DOSCODE:BFE5                 jnz     short loc_BFB9
DOSCODE:BFE7                 lodsb
DOSCODE:BFE8                 call    PATHCHRCMP
DOSCODE:BFEB                 jnz     short loc_BFA3
DOSCODE:BFED                 cmp     di, bp
DOSCODE:BFEF                 jnb     short loc_BFB9
DOSCODE:BFF1                 stosb
DOSCODE:BFF2
DOSCODE:BFF2 loc_BFF2:                               ; ...
DOSCODE:BFF2                 lodsb
DOSCODE:BFF3                 call    PATHCHRCMP
DOSCODE:BFF6                 jz      short loc_BFF2
DOSCODE:BFF8                 dec     si
DOSCODE:BFF9                 jmp     short loc_BFA4
DOSCODE:BFF9 Canonicalize    endp
DOSCODE:BFF9
DOSCODE:BFFB
DOSCODE:BFFB ; =============== S U B R O U T I N E =======================================
DOSCODE:BFFB
DOSCODE:BFFB
DOSCODE:BFFB sub_BFFB        proc near               ; ...
DOSCODE:BFFB                 mov     al, [si]
DOSCODE:BFFB sub_BFFB        endp
DOSCODE:BFFB
DOSCODE:BFFD
DOSCODE:BFFD ; =============== S U B R O U T I N E =======================================
DOSCODE:BFFD
DOSCODE:BFFD
DOSCODE:BFFD PathSepGotCh    proc near               ; ...
DOSCODE:BFFD                 or      al, al
DOSCODE:BFFF                 jz      short locret_BFC3
DOSCODE:C001                 call    PATHCHRCMP
DOSCODE:C004                 retn
DOSCODE:C004 PathSepGotCh    endp
DOSCODE:C004
DOSCODE:C005
DOSCODE:C005 ; =============== S U B R O U T I N E =======================================
DOSCODE:C005
DOSCODE:C005
DOSCODE:C005 SkipBack        proc near               ; ...
DOSCODE:C005                 cmp     di, bx
DOSCODE:C007                 jb      short loc_C014
DOSCODE:C009                 dec     di
DOSCODE:C00A                 mov     al, es:[di]
DOSCODE:C00D                 call    PATHCHRCMP
DOSCODE:C010                 jnz     short SkipBack
DOSCODE:C012                 clc
DOSCODE:C013                 retn
DOSCODE:C014 ; ---------------------------------------------------------------------------
DOSCODE:C014
DOSCODE:C014 loc_C014:                               ; ...
DOSCODE:C014                 mov     al, 3
DOSCODE:C016                 stc
DOSCODE:C017                 retn
DOSCODE:C017 SkipBack        endp
DOSCODE:C017
DOSCODE:C018
DOSCODE:C018 ; =============== S U B R O U T I N E =======================================
DOSCODE:C018
DOSCODE:C018
DOSCODE:C018 sub_C018        proc near               ; ...
DOSCODE:C018                 sub     sp, 0Eh
DOSCODE:C01B                 push    ds
DOSCODE:C01C                 push    si
DOSCODE:C01D                 push    es
DOSCODE:C01E                 push    di
DOSCODE:C01F                 push    bp
DOSCODE:C020                 mov     bp, sp
DOSCODE:C022                 mov     ah, 2Eh ; '.'
DOSCODE:C024                 lodsb
DOSCODE:C025                 stosb
DOSCODE:C026                 cmp     al, ah
DOSCODE:C028                 jnz     short loc_C042
DOSCODE:C02A                 call    sub_BFFB
DOSCODE:C02D                 jz      short loc_C03A
DOSCODE:C02F                 lodsb
DOSCODE:C030                 stosb
DOSCODE:C031                 cmp     al, ah
DOSCODE:C033                 jnz     short loc_C08C
DOSCODE:C035                 call    sub_BFFB
DOSCODE:C038                 jnz     short loc_C08C
DOSCODE:C03A
DOSCODE:C03A loc_C03A:                               ; ...
DOSCODE:C03A                 xor     al, al
DOSCODE:C03C                 stosb
DOSCODE:C03D                 mov     [bp+6], si
DOSCODE:C040                 jmp     short loc_C089
DOSCODE:C042 ; ---------------------------------------------------------------------------
DOSCODE:C042
DOSCODE:C042 loc_C042:                               ; ...
DOSCODE:C042                 mov     si, [bp+6]
DOSCODE:C045                 call    NameTrans
DOSCODE:C048                 cmp     si, [bp+6]
DOSCODE:C04B                 jz      short loc_C08C
DOSCODE:C04D                 cmp     ss:FSHARING, 0
DOSCODE:C053                 jnz     short loc_C065
DOSCODE:C055                 and     dl, 1
DOSCODE:C058                 add     ss:CMETA, dl
DOSCODE:C05D                 jg      short loc_C08C
DOSCODE:C05F                 jnz     short loc_C065
DOSCODE:C061                 or      dl, dl
DOSCODE:C063                 jz      short loc_C094
DOSCODE:C065
DOSCODE:C065 loc_C065:                               ; ...
DOSCODE:C065                 mov     [bp+6], si
DOSCODE:C068                 push    ss
DOSCODE:C069                 pop     ds
DOSCODE:C06A                 mov     si, offset NAME1
DOSCODE:C06D                 lea     di, [bp+0Ah]
DOSCODE:C070                 push    di
DOSCODE:C071                 call    PackName
DOSCODE:C074                 pop     di
DOSCODE:C075                 call    StrLen
DOSCODE:C078                 dec     cx
DOSCODE:C079                 add     cx, [bp+2]
DOSCODE:C07C                 cmp     cx, [bp+0]
DOSCODE:C07F                 jnb     short loc_C08C
DOSCODE:C081                 mov     si, di
DOSCODE:C083                 les     di, [bp+2]
DOSCODE:C086                 call    FStrCpy
DOSCODE:C089
DOSCODE:C089 loc_C089:                               ; ...
DOSCODE:C089                 clc
DOSCODE:C08A                 jmp     short loc_C097
DOSCODE:C08C ; ---------------------------------------------------------------------------
DOSCODE:C08C
DOSCODE:C08C loc_C08C:                               ; ...
DOSCODE:C08C                 stc
DOSCODE:C08D                 call    ScanPathChar
DOSCODE:C090                 mov     al, 2
DOSCODE:C092                 jnz     short loc_C097
DOSCODE:C094
DOSCODE:C094 loc_C094:                               ; ...
DOSCODE:C094                 stc
DOSCODE:C095                 mov     al, 3
DOSCODE:C097
DOSCODE:C097 loc_C097:                               ; ...
DOSCODE:C097                 pop     bp
DOSCODE:C098                 pop     di
DOSCODE:C099                 pop     es
DOSCODE:C09A                 pop     si
DOSCODE:C09B                 pop     ds
DOSCODE:C09C                 lahf
DOSCODE:C09D                 add     sp, 0Eh
DOSCODE:C0A0                 call    StrLen
DOSCODE:C0A3                 dec     cx
DOSCODE:C0A4                 sahf
DOSCODE:C0A5                 retn
DOSCODE:C0A5 sub_C018        endp
DOSCODE:C0A5
DOSCODE:C0A6
DOSCODE:C0A6 ; =============== S U B R O U T I N E =======================================
DOSCODE:C0A6
DOSCODE:C0A6
DOSCODE:C0A6 Splice          proc near               ; ...
DOSCODE:C0A6                 test    ss:SPLICES, 0FFh
DOSCODE:C0AC                 jz      short AllDone
DOSCODE:C0AE                 push    word ptr ss:THISCDS
DOSCODE:C0B3                 push    word ptr ss:THISCDS+2
DOSCODE:C0B8                 push    ds
DOSCODE:C0B9                 push    si
DOSCODE:C0BA                 pop     di
DOSCODE:C0BB                 pop     es
DOSCODE:C0BC                 xor     ax, ax
DOSCODE:C0BE
DOSCODE:C0BE SpliceScan:                             ; ...
DOSCODE:C0BE                 call    GetCDSFromDrv
DOSCODE:C0C1                 jb      short SpliceDone
DOSCODE:C0C3                 inc     al
DOSCODE:C0C5                 test    word ptr [si+43h], 2000h
DOSCODE:C0CA                 jz      short SpliceScan
DOSCODE:C0CC                 push    di
DOSCODE:C0CD                 call    PathPref
DOSCODE:C0D0                 jz      short SpliceFound
DOSCODE:C0D2
DOSCODE:C0D2 SpliceSkip:                             ; ...
DOSCODE:C0D2                 pop     di
DOSCODE:C0D3                 jmp     short SpliceScan
DOSCODE:C0D5 ; ---------------------------------------------------------------------------
DOSCODE:C0D5
DOSCODE:C0D5 SpliceFound:                            ; ...
DOSCODE:C0D5                 cmp     byte ptr es:[di], 0
DOSCODE:C0D9                 jnz     short SpliceDo
DOSCODE:C0DB                 test    ss:NoSetDir, 0FFh
DOSCODE:C0E1                 jnz     short SpliceSkip
DOSCODE:C0E3
DOSCODE:C0E3 SpliceDo:                               ; ...
DOSCODE:C0E3                 mov     si, di
DOSCODE:C0E5                 push    es
DOSCODE:C0E6                 pop     ds
DOSCODE:C0E7                 pop     di
DOSCODE:C0E8                 call    TextFromDrive1
DOSCODE:C0EB                 mov     ax, ss:CURR_DIR_END
DOSCODE:C0EF                 or      ax, ax
DOSCODE:C0F1                 js      short NoPoke
DOSCODE:C0F3                 add     ax, di
DOSCODE:C0F5                 sub     ax, si
DOSCODE:C0F7                 mov     ss:CURR_DIR_END, ax
DOSCODE:C0FB
DOSCODE:C0FB NoPoke:                                 ; ...
DOSCODE:C0FB                 cmp     byte ptr [si], 0
DOSCODE:C0FE                 jnz     short SpliceCopy
DOSCODE:C100                 mov     al, 5Ch ; '\'
DOSCODE:C102                 stosb
DOSCODE:C103
DOSCODE:C103 SpliceCopy:                             ; ...
DOSCODE:C103                 call    FStrCpy
DOSCODE:C106                 add     sp, 4
DOSCODE:C109                 or      cl, 1
DOSCODE:C10C                 jmp     short DoSet
DOSCODE:C10E ; ---------------------------------------------------------------------------
DOSCODE:C10E
DOSCODE:C10E SpliceDone:                             ; ...
DOSCODE:C10E                 pop     word ptr ss:THISCDS+2
DOSCODE:C113                 pop     word ptr ss:THISCDS
DOSCODE:C118
DOSCODE:C118 AllDone:                                ; ...
DOSCODE:C118                 xor     cx, cx
DOSCODE:C11A
DOSCODE:C11A DoSet:                                  ; ...
DOSCODE:C11A                 lds     si, ss:THISCDS
DOSCODE:C11F                 les     di, [si+45h]
DOSCODE:C122                 mov     word ptr ss:THISDPB, di
DOSCODE:C127                 mov     word ptr ss:THISDPB+2, es
DOSCODE:C127 Splice          endp
DOSCODE:C127
DOSCODE:C12C
DOSCODE:C12C ; =============== S U B R O U T I N E =======================================
DOSCODE:C12C
DOSCODE:C12C
DOSCODE:C12C DrvFromTxt_ret  proc near               ; ...
DOSCODE:C12C                 retn
DOSCODE:C12C DrvFromTxt_ret  endp
DOSCODE:C12C
DOSCODE:C12D ; ---------------------------------------------------------------------------
DOSCODE:C12D
DOSCODE:C12D $NameTrans:                             ; ...
DOSCODE:C12D                 push    ds
DOSCODE:C12E                 push    si
DOSCODE:C12F                 push    es
DOSCODE:C130                 push    di
DOSCODE:C131                 push    cx
DOSCODE:C132                 mov     ch, 16h
DOSCODE:C134                 call    SetAttrib
DOSCODE:C137                 mov     di, 3BEh
DOSCODE:C13A                 call    TransPath
DOSCODE:C13D                 pop     cx
DOSCODE:C13E                 pop     di
DOSCODE:C13F                 pop     es
DOSCODE:C140                 pop     si
DOSCODE:C141                 pop     ds
DOSCODE:C142                 jnb     short loc_C147
DOSCODE:C144                 jmp     SYS_RET_ERR
DOSCODE:C147 ; ---------------------------------------------------------------------------
DOSCODE:C147
DOSCODE:C147 loc_C147:                               ; ...
DOSCODE:C147                 mov     si, 3BEh
DOSCODE:C14A                 push    ss
DOSCODE:C14B                 pop     ds
DOSCODE:C14C                 call    FStrCpy
DOSCODE:C14F                 jmp     SYS_RET_OK
DOSCODE:C152
DOSCODE:C152 ; =============== S U B R O U T I N E =======================================
DOSCODE:C152
DOSCODE:C152
DOSCODE:C152 DriveFromText   proc near               ; ...
DOSCODE:C152                 xor     al, al          ; 0
DOSCODE:C154                 cmp     byte ptr [si], 0
DOSCODE:C157                 jz      short DrvFromTxt_ret
DOSCODE:C159                 cmp     byte ptr [si+1], 3Ah ; ':'
DOSCODE:C15D                 jnz     short DrvFromTxt_ret
DOSCODE:C15F                 lodsw
DOSCODE:C160                 or      al, 20h         ; to lowercase
DOSCODE:C162                 sub     al, 60h
DOSCODE:C164                 jnz     short DrvFromTxt_ret ; al = drv number
DOSCODE:C166                 mov     al, 0FFh
DOSCODE:C168                 retn
DOSCODE:C168 DriveFromText   endp
DOSCODE:C168
DOSCODE:C169
DOSCODE:C169 ; =============== S U B R O U T I N E =======================================
DOSCODE:C169
DOSCODE:C169
DOSCODE:C169 TextFromDrive   proc near               ; ...
DOSCODE:C169                 inc     al
DOSCODE:C16B
DOSCODE:C16B TextFromDrive1:                         ; ...
DOSCODE:C16B                 add     al, 40h ; '@'   ; 'A'-1
DOSCODE:C16D                 mov     ah, 3Ah ; ':'
DOSCODE:C16F                 stosw
DOSCODE:C170
DOSCODE:C170 PathPref_retn:                          ; ...
DOSCODE:C170                 retn
DOSCODE:C170 TextFromDrive   endp
DOSCODE:C170
DOSCODE:C171
DOSCODE:C171 ; =============== S U B R O U T I N E =======================================
DOSCODE:C171
DOSCODE:C171
DOSCODE:C171 PathPref        proc near               ; ...
DOSCODE:C171                 call    DStrLen
DOSCODE:C174                 dec     cx
DOSCODE:C175                 repe cmpsb
DOSCODE:C177                 jnz     short PathPref_retn
DOSCODE:C179                 push    ax
DOSCODE:C17A                 mov     al, [si-1]
DOSCODE:C17D                 call    PATHCHRCMP
DOSCODE:C180                 jz      short Prefix
DOSCODE:C182                 mov     al, es:[di]
DOSCODE:C185                 call    PathSepGotCh
DOSCODE:C188
DOSCODE:C188 Prefix:                                 ; ...
DOSCODE:C188                 pop     ax
DOSCODE:C189                 retn
DOSCODE:C189 PathPref        endp
DOSCODE:C189
DOSCODE:C18A
DOSCODE:C18A ; =============== S U B R O U T I N E =======================================
DOSCODE:C18A
DOSCODE:C18A
DOSCODE:C18A ScanPathChar    proc near               ; ...
DOSCODE:C18A                 lodsb
DOSCODE:C18B                 call    PathSepGotCh
DOSCODE:C18E                 jnz     short ScanPathChar
DOSCODE:C190                 call    PATHCHRCMP
DOSCODE:C193                 retn
DOSCODE:C193 ScanPathChar    endp
DOSCODE:C193
DOSCODE:C194
DOSCODE:C194 ; =============== S U B R O U T I N E =======================================
DOSCODE:C194
DOSCODE:C194
DOSCODE:C194 $OPEN           proc near               ; ...
DOSCODE:C194                 xor     ah, ah
DOSCODE:C196
DOSCODE:C196 $Open2:                                 ; ...
DOSCODE:C196                 mov     ch, 16h         ; attr_hidden+attr_system+attr_directory
DOSCODE:C198                 call    SetAttrib
DOSCODE:C19B                 mov     cx, offset DOS_OPEN
DOSCODE:C19E                 push    ax
DOSCODE:C19F
DOSCODE:C19F AccessFile:                             ; ...
DOSCODE:C19F                 call    ECritDisk
DOSCODE:C1A2                 call    SFNFree
DOSCODE:C1A5                 call    LCritDisk
DOSCODE:C1A8                 jb      short OpenFailJ
DOSCODE:C1AA                 mov     ss:SFN, bx
DOSCODE:C1AF                 mov     word ptr ss:THISSFT, di
DOSCODE:C1B4                 mov     word ptr ss:THISSFT+2, es
DOSCODE:C1B9                 call    JFNFree
DOSCODE:C1BC
DOSCODE:C1BC OpenFailJ:                              ; ...
DOSCODE:C1BC                 jb      short OpenFail
DOSCODE:C1BE
DOSCODE:C1BE SaveJFN:
DOSCODE:C1BE                 mov     word ptr ss:PJFN, di
DOSCODE:C1C3                 mov     word ptr ss:PJFN+2, es
DOSCODE:C1C8                 mov     ss:JFN, bx
DOSCODE:C1CD                 mov     bx, ss:SFN
DOSCODE:C1D2                 mov     si, dx
DOSCODE:C1D4                 mov     es:[di], bl
DOSCODE:C1D7                 mov     di, offset OPENBUF
DOSCODE:C1DA                 push    cx
DOSCODE:C1DB                 call    TransPath
DOSCODE:C1DE                 pop     bx
DOSCODE:C1DF                 lds     si, ss:THISSFT
DOSCODE:C1E4                 jb      short OpenCleanJ
DOSCODE:C1E6                 cmp     ss:CMETA, 0FFh
DOSCODE:C1EC                 jz      short loc_C1F6
DOSCODE:C1EE                 mov     al, 2
DOSCODE:C1F0                 jmp     short OpenCleanJ
DOSCODE:C1F2 ; ---------------------------------------------------------------------------
DOSCODE:C1F2
DOSCODE:C1F2 OpenFail:                               ; ...
DOSCODE:C1F2                 sti
DOSCODE:C1F3                 pop     cx
DOSCODE:C1F4                 jmp     short OpenCritLeave
DOSCODE:C1F6 ; ---------------------------------------------------------------------------
DOSCODE:C1F6
DOSCODE:C1F6 loc_C1F6:                               ; ...
DOSCODE:C1F6                 pop     ax
DOSCODE:C1F7                 xor     cx, cx
DOSCODE:C1F9                 cmp     bx, offset DOS_OPEN
DOSCODE:C1FD                 mov     [si+2], cx
DOSCODE:C200                 mov     [si+33h], cx
DOSCODE:C203                 jnz     short loc_C20E
DOSCODE:C205                 test    al, 80h
DOSCODE:C207                 jz      short loc_C20E
DOSCODE:C209                 and     al, 7Fh
DOSCODE:C20B                 mov     cx, 1000h       ; bit 15 = 1 -> remote file
DOSCODE:C20E
DOSCODE:C20E loc_C20E:                               ; ...
DOSCODE:C20E                 push    di
DOSCODE:C20F                 push    es
DOSCODE:C210                 push    ds
DOSCODE:C211                 pop     es
DOSCODE:C212                 push    si
DOSCODE:C213                 pop     di
DOSCODE:C214                 call    Set_EXT_mode
DOSCODE:C217                 pop     es
DOSCODE:C218                 pop     di
DOSCODE:C219                 push    ss
DOSCODE:C21A                 pop     ds
DOSCODE:C21B                 push    cx
DOSCODE:C21C                 call    bx              ; DOS_OPEN (or DOS_CREATE)
DOSCODE:C21E                 pop     cx
DOSCODE:C21F                 lds     si, ds:THISSFT
DOSCODE:C223                 jb      short OpenE2
DOSCODE:C225                 mov     word ptr [si], 1 ; SF_ENTRY.sf_ref_count
DOSCODE:C229                 or      [si+5], cx      ; SF_ENTRY.sf_flags
DOSCODE:C22C                 push    ds
DOSCODE:C22D                 pop     es
DOSCODE:C22E                 mov     di, si
DOSCODE:C230                 call    set_sftfcb_entry ; set SFT-FCB entry
DOSCODE:C230                                         ; in the internal (SFT_FCB) table
DOSCODE:C230                                         ; (used for FCB calls only!)
DOSCODE:C233                 mov     ax, ss:JFN
DOSCODE:C237                 call    ss:ShCol        ; Call far [ss:JShare+(12*4)] ; 12 = ShCol
DOSCODE:C23C                 mov     ss:SFN, 0FFFFh
DOSCODE:C243                 jmp     SYS_RET_OK
DOSCODE:C246 ; ---------------------------------------------------------------------------
DOSCODE:C246
DOSCODE:C246 OpenE2:                                 ; ...
DOSCODE:C246                 cmp     ax, 87          ; error_invalid_parameter
DOSCODE:C249                 jnz     short OpenE
DOSCODE:C24B                 jmp     short OpenCritLeave
DOSCODE:C24D ; ---------------------------------------------------------------------------
DOSCODE:C24D
DOSCODE:C24D OpenCleanJ:                             ; ...
DOSCODE:C24D                 pop     bx
DOSCODE:C24E
DOSCODE:C24E OpenE:                                  ; ...
DOSCODE:C24E                 mov     word ptr [si], 0
DOSCODE:C252                 lds     si, ss:PJFN
DOSCODE:C257                 mov     byte ptr [si], 0FFh
DOSCODE:C25A
DOSCODE:C25A OpenCritLeave:                          ; ...
DOSCODE:C25A                 mov     ss:SFN, 0FFFFh
DOSCODE:C261                 cmp     ss:EXTERR, 37   ; error_Code_Page_Mismatched
DOSCODE:C267                 jnz     short NORERR
DOSCODE:C269                 jmp     From_GetSet
DOSCODE:C26C ; ---------------------------------------------------------------------------
DOSCODE:C26C
DOSCODE:C26C NORERR:                                 ; ...
DOSCODE:C26C                 jmp     SYS_RET_ERR
DOSCODE:C26C $OPEN           endp
DOSCODE:C26C
DOSCODE:C26F
DOSCODE:C26F ; =============== S U B R O U T I N E =======================================
DOSCODE:C26F
DOSCODE:C26F
DOSCODE:C26F $CREAT          proc near               ; ...
DOSCODE:C26F                 push    cx
DOSCODE:C270                 mov     cx, offset DOS_CREATE
DOSCODE:C270 $CREAT          endp ; sp-analysis failed
DOSCODE:C270
DOSCODE:C273 ; START OF FUNCTION CHUNK FOR $CreateNewFile
DOSCODE:C273
DOSCODE:C273 AccessSet:                              ; ...
DOSCODE:C273                 mov     ss:SATTRIB, 6
DOSCODE:C279                 jmp     AccessFile
DOSCODE:C279 ; END OF FUNCTION CHUNK FOR $CreateNewFile
DOSCODE:C27C ; ---------------------------------------------------------------------------
DOSCODE:C27C
DOSCODE:C27C $CHMOD:                                 ; ...
DOSCODE:C27C                 cmp     al, 0FFh        ; MS-DOS 7.20 (Win98) - EXTENDED-LENGTH FILENAME OPERATIONS
DOSCODE:C27C                                         ; AX = 43FFh
DOSCODE:C27C                                         ; BP = 5053h ('PS')
DOSCODE:C27C                                         ; CL = function
DOSCODE:C27C                                         ; 39h "mkdir" create directory
DOSCODE:C27C                                         ; DS:DX -> ASCIZ pathname
DOSCODE:C27C                                         ; 56h rename file
DOSCODE:C27C                                         ; DS:DX -> ASCIZ filename of existing file (no wildcards)
DOSCODE:C27C                                         ; ES:DI -> ASCIZ new filename (no wildcards)
DOSCODE:C27C                                         ;
DOSCODE:C27C                                         ; ref: Ralf Brown's Interrupt List
DOSCODE:C27E                 jnz     short std_chmod
DOSCODE:C280                 cmp     bp, 5053h
DOSCODE:C284                 jnz     short chmod_x_2
DOSCODE:C286                 mov     ah, cl
DOSCODE:C288                 mov     ss:PATHNAMELEN, 128 ; ((mov byte [ss:PATHNAMELEN],128)) ; Retro DOS v5.0
DOSCODE:C28F                 cmp     cl, 39h
DOSCODE:C292                 jnz     short chmod_x_1
DOSCODE:C294                 jmp     mkdir_x
DOSCODE:C297 ; ---------------------------------------------------------------------------
DOSCODE:C297
DOSCODE:C297 chmod_x_1:                              ; ...
DOSCODE:C297                 cmp     cl, 56h
DOSCODE:C29A                 jz      short rename_x
DOSCODE:C29C
DOSCODE:C29C chmod_x_2:                              ; ...
DOSCODE:C29C                 mov     al, 1
DOSCODE:C29E                 jmp     short NORERR
DOSCODE:C2A0 ; ---------------------------------------------------------------------------
DOSCODE:C2A0
DOSCODE:C2A0 std_chmod:                              ; ...
DOSCODE:C2A0                 mov     di, offset OPENBUF
DOSCODE:C2A3                 push    ax
DOSCODE:C2A4                 push    cx
DOSCODE:C2A5                 mov     si, dx
DOSCODE:C2A7                 call    TransPathSet
DOSCODE:C2AA                 pop     cx
DOSCODE:C2AB                 pop     ax
DOSCODE:C2AC                 jb      short NotFound
DOSCODE:C2AE                 push    ss
DOSCODE:C2AF                 pop     ds
DOSCODE:C2B0                 cmp     ds:CMETA, 0FFh
DOSCODE:C2B5                 jnz     short NotFound
DOSCODE:C2B7                 mov     ds:SATTRIB, 16h
DOSCODE:C2BC                 sub     al, 1
DOSCODE:C2BE                 jb      short loc_C2C9
DOSCODE:C2C0                 jz      short loc_C2D7
DOSCODE:C2C2                 call    set_exerr_locus_unk
DOSCODE:C2C5                 mov     al, 1
DOSCODE:C2C7
DOSCODE:C2C7 loc_C2C7:                               ; ...
DOSCODE:C2C7                 jmp     short NORERR
DOSCODE:C2C9 ; ---------------------------------------------------------------------------
DOSCODE:C2C9
DOSCODE:C2C9 loc_C2C9:                               ; ...
DOSCODE:C2C9                 call    GET_FILE_INFO
DOSCODE:C2CC                 jb      short loc_C2E2
DOSCODE:C2CE                 call    Get_User_Stack
DOSCODE:C2D1                 mov     [si+4], ax
DOSCODE:C2D4
DOSCODE:C2D4 loc_C2D4:                               ; ...
DOSCODE:C2D4                 jmp     SYS_RET_OK
DOSCODE:C2D7 ; ---------------------------------------------------------------------------
DOSCODE:C2D7
DOSCODE:C2D7 loc_C2D7:                               ; ...
DOSCODE:C2D7                 mov     ax, cx
DOSCODE:C2D9                 call    SET_FILE_ATTRIBUTE
DOSCODE:C2DC                 jb      short loc_C2E2
DOSCODE:C2DE                 jmp     short UnLinkOK
DOSCODE:C2E0 ; ---------------------------------------------------------------------------
DOSCODE:C2E0
DOSCODE:C2E0 NotFound:                               ; ...
DOSCODE:C2E0                 mov     al, 3
DOSCODE:C2E2
DOSCODE:C2E2 loc_C2E2:                               ; ...
DOSCODE:C2E2                 jmp     short loc_C2C7
DOSCODE:C2E4 ; ---------------------------------------------------------------------------
DOSCODE:C2E4
DOSCODE:C2E4 $UNLINK:                                ; ...
DOSCODE:C2E4                 push    cx
DOSCODE:C2E5                 mov     si, dx
DOSCODE:C2E7                 mov     di, offset OPENBUF
DOSCODE:C2EA                 call    TransPathSet
DOSCODE:C2ED                 pop     cx
DOSCODE:C2EE                 jb      short NotFound
DOSCODE:C2F0                 cmp     ss:CMETA, 0FFh
DOSCODE:C2F6                 jnz     short NotFound
DOSCODE:C2F8                 push    ss
DOSCODE:C2F9                 pop     ds
DOSCODE:C2FA                 mov     ch, 6
DOSCODE:C2FC                 call    SetAttrib
DOSCODE:C2FF                 call    DOS_DELETE
DOSCODE:C302
DOSCODE:C302 UnlinkE:                                ; ...
DOSCODE:C302                 jb      short loc_C2E2
DOSCODE:C304
DOSCODE:C304 UnLinkOK:                               ; ...
DOSCODE:C304                 jmp     short loc_C2D4
DOSCODE:C306 ; ---------------------------------------------------------------------------
DOSCODE:C306
DOSCODE:C306 $RENAME:                                ; ...
DOSCODE:C306                 mov     ss:PATHNAMELEN, 67
DOSCODE:C30D
DOSCODE:C30D rename_x:                               ; ...
DOSCODE:C30D                 push    cx
DOSCODE:C30E                 push    ds
DOSCODE:C30F                 push    dx
DOSCODE:C310                 push    es
DOSCODE:C311                 pop     ds
DOSCODE:C312                 mov     si, di
DOSCODE:C314                 mov     di, offset RENBUF
DOSCODE:C317                 call    TransPathSet
DOSCODE:C31A                 push    ss:WFP_START
DOSCODE:C31F                 pop     ss:REN_WFP
DOSCODE:C324                 pop     si
DOSCODE:C325                 pop     ds
DOSCODE:C326                 pop     cx
DOSCODE:C327
DOSCODE:C327 epjc2:                                  ; ...
DOSCODE:C327                 jb      short NotFound
DOSCODE:C329                 cmp     ss:CMETA, 0FFh
DOSCODE:C32F                 jnz     short NotFound
DOSCODE:C331                 push    cx
DOSCODE:C332                 mov     di, offset OPENBUF
DOSCODE:C335                 call    TransPathSet
DOSCODE:C338                 pop     cx
DOSCODE:C339                 jb      short epjc2
DOSCODE:C33B                 push    ss
DOSCODE:C33C                 pop     ds
DOSCODE:C33D                 cmp     ds:CMETA, 0FFh
DOSCODE:C342                 jb      short NotFound
DOSCODE:C344                 les     di, ds:THISCDS
DOSCODE:C348                 push    di
DOSCODE:C349                 push    es
DOSCODE:C34A                 mov     di, offset OPENBUF
DOSCODE:C34D                 push    ss
DOSCODE:C34E                 pop     es
DOSCODE:C34F                 xor     al, al
DOSCODE:C351
DOSCODE:C351 rnloop:                                 ; ...
DOSCODE:C351                 call    GetCDSFromDrv
DOSCODE:C354                 jb      short dorn
DOSCODE:C356                 call    StrCmp
DOSCODE:C359                 jz      short rnerr
DOSCODE:C35B                 inc     al
DOSCODE:C35D                 jmp     short rnloop
DOSCODE:C35F ; ---------------------------------------------------------------------------
DOSCODE:C35F
DOSCODE:C35F rnerr:                                  ; ...
DOSCODE:C35F                 pop     ax
DOSCODE:C360                 pop     ax
DOSCODE:C361                 mov     al, 10h
DOSCODE:C363                 jmp     SYS_RET_ERR
DOSCODE:C366 ; ---------------------------------------------------------------------------
DOSCODE:C366
DOSCODE:C366 dorn:                                   ; ...
DOSCODE:C366                 pop     word ptr ss:THISCDS+2
DOSCODE:C36B                 pop     word ptr ss:THISCDS
DOSCODE:C370                 push    ss
DOSCODE:C371                 pop     ds
DOSCODE:C372                 mov     ch, 16h
DOSCODE:C374                 call    SetAttrib
DOSCODE:C377                 call    DOS_RENAME
DOSCODE:C37A                 jb      short UnlinkE
DOSCODE:C37C                 jmp     short UnLinkOK
DOSCODE:C37E
DOSCODE:C37E ; =============== S U B R O U T I N E =======================================
DOSCODE:C37E
DOSCODE:C37E
DOSCODE:C37E $CreateNewFile  proc near               ; ...
DOSCODE:C37E
DOSCODE:C37E ; FUNCTION CHUNK AT DOSCODE:C273 SIZE 00000009 BYTES
DOSCODE:C37E
DOSCODE:C37E                 push    cx
DOSCODE:C37F                 mov     cx, offset DOS_Create_New
DOSCODE:C382                 jmp     AccessSet
DOSCODE:C382 $CreateNewFile  endp
DOSCODE:C382
DOSCODE:C385
DOSCODE:C385 ; =============== S U B R O U T I N E =======================================
DOSCODE:C385
DOSCODE:C385
DOSCODE:C385 BinToAscii      proc near               ; ...
DOSCODE:C385                 push    ax
DOSCODE:C386                 xchg    ah, al
DOSCODE:C388                 aam     10h
DOSCODE:C38A                 add     ax, 4141h       ; 'AA'
DOSCODE:C38D                 stosw
DOSCODE:C38E                 pop     ax
DOSCODE:C38F                 aam     10h
DOSCODE:C391                 add     ax, 4141h
DOSCODE:C394                 stosw
DOSCODE:C395                 retn
DOSCODE:C395 BinToAscii      endp
DOSCODE:C395
DOSCODE:C396 ; ---------------------------------------------------------------------------
DOSCODE:C396
DOSCODE:C396 $CreateTempFile:                        ; ...
DOSCODE:C396                 push    bp
DOSCODE:C397                 mov     bp, sp
DOSCODE:C399                 sub     sp, 10
DOSCODE:C39C                 test    cx, 0FFD8h
DOSCODE:C3A0                 jz      short OKatts
DOSCODE:C3A2                 mov     ax, 5
DOSCODE:C3A5                 jmp     short SETTMPERR
DOSCODE:C3A7 ; ---------------------------------------------------------------------------
DOSCODE:C3A7
DOSCODE:C3A7 OKatts:                                 ; ...
DOSCODE:C3A7                 mov     [bp-0Ah], cx
DOSCODE:C3AA                 mov     [bp-8], dx
DOSCODE:C3AD                 mov     word ptr [bp-6], ds
DOSCODE:C3B0                 mov     word ptr [bp-2], ds
DOSCODE:C3B3                 push    ds
DOSCODE:C3B4                 pop     es
DOSCODE:C3B5                 mov     di, dx
DOSCODE:C3B7                 mov     cx, di
DOSCODE:C3B9                 neg     cx
DOSCODE:C3BB                 or      cx, cx
DOSCODE:C3BD                 jnz     short loc_C3C0
DOSCODE:C3BF                 dec     cx
DOSCODE:C3C0
DOSCODE:C3C0 loc_C3C0:                               ; ...
DOSCODE:C3C0                 xor     ax, ax
DOSCODE:C3C2                 repne scasb
DOSCODE:C3C4                 dec     di
DOSCODE:C3C5                 mov     al, es:[di-1]
DOSCODE:C3C9                 call    PATHCHRCMP
DOSCODE:C3CC                 jz      short loc_C3D1
DOSCODE:C3CE                 mov     al, 5Ch ; '\'
DOSCODE:C3D0                 stosb
DOSCODE:C3D1
DOSCODE:C3D1 loc_C3D1:                               ; ...
DOSCODE:C3D1                 mov     [bp-4], di
DOSCODE:C3D4
DOSCODE:C3D4 loc_C3D4:                               ; ...
DOSCODE:C3D4                 push    ss
DOSCODE:C3D5                 pop     ds
DOSCODE:C3D6                 push    bp
DOSCODE:C3D7                 call    READTIME
DOSCODE:C3DA                 pop     bp
DOSCODE:C3DB                 les     di, [bp-4]
DOSCODE:C3DE                 mov     ax, cx
DOSCODE:C3E0                 call    BinToAscii
DOSCODE:C3E3                 mov     ax, dx
DOSCODE:C3E5                 call    BinToAscii
DOSCODE:C3E8                 xor     al, al
DOSCODE:C3EA                 stosb
DOSCODE:C3EB                 lds     dx, [bp-8]
DOSCODE:C3EE                 mov     cx, [bp-0Ah]
DOSCODE:C3F1                 push    bp
DOSCODE:C3F2                 call    $CreateNewFile
DOSCODE:C3F5                 pop     bp
DOSCODE:C3F6                 jnb     short loc_C423
DOSCODE:C3F8                 cmp     al, 50h ; 'P'
DOSCODE:C3FA                 jz      short loc_C3D4
DOSCODE:C3FC                 cmp     al, 5
DOSCODE:C3FE                 jnz     short SETTMPERR
DOSCODE:C400                 mov     al, ss:324h
DOSCODE:C404                 cmp     al, 41h ; 'A'
DOSCODE:C406                 jz      short SETTMPERR
DOSCODE:C408                 cmp     al, 53h ; 'S'
DOSCODE:C40A                 jz      short SETTMPERR
DOSCODE:C40C                 cmp     al, 50h ; 'P'
DOSCODE:C40E                 jz      short loc_C3D4
DOSCODE:C410                 les     di, ss:5A2h
DOSCODE:C415                 cmp     di, 0FFFFh
DOSCODE:C418                 jz      short loc_C3D4
DOSCODE:C41A                 test    word ptr es:[di+43h], 8000h
DOSCODE:C420                 jnz     short loc_C3D4
DOSCODE:C422
DOSCODE:C422 SETTMPERR:                              ; ...
DOSCODE:C422                 stc
DOSCODE:C423
DOSCODE:C423 loc_C423:                               ; ...
DOSCODE:C423                 mov     sp, bp
DOSCODE:C425                 pop     bp
DOSCODE:C426                 jb      short CreateFail
DOSCODE:C428                 jmp     SYS_RET_OK
DOSCODE:C42B ; ---------------------------------------------------------------------------
DOSCODE:C42B
DOSCODE:C42B CreateFail:                             ; ...
DOSCODE:C42B                 jmp     SYS_RET_ERR
DOSCODE:C42E
DOSCODE:C42E ; =============== S U B R O U T I N E =======================================
DOSCODE:C42E
DOSCODE:C42E
DOSCODE:C42E SetAttrib       proc near               ; ...
DOSCODE:C42E                 cmp     byte ptr ss:572h, 0
DOSCODE:C434                 jnz     short loc_C438
DOSCODE:C436                 mov     cl, ch
DOSCODE:C438
DOSCODE:C438 loc_C438:                               ; ...
DOSCODE:C438                 mov     ss:56Dh, cl
DOSCODE:C43D                 retn
DOSCODE:C43D SetAttrib       endp
DOSCODE:C43D
DOSCODE:C43E ; ---------------------------------------------------------------------------
DOSCODE:C43E
DOSCODE:C43E $Extended_Open:                         ; ...
DOSCODE:C43E                 mov     ss:EXTOPEN_FLAG, dx
DOSCODE:C443                 mov     ss:EXTOPEN_IO_MODE, 0
DOSCODE:C44A                 test    dh, 0FEh
DOSCODE:C44D                 jnz     short ext_inval2
DOSCODE:C44F                 mov     ah, dl
DOSCODE:C451                 cmp     dl, 0
DOSCODE:C454                 jz      short ext_inval2
DOSCODE:C456                 and     dl, 0Fh
DOSCODE:C459                 cmp     dl, 2
DOSCODE:C45C                 ja      short ext_inval2
DOSCODE:C45E                 and     ah, 0F0h
DOSCODE:C461                 cmp     ah, 10h
DOSCODE:C464                 ja      short ext_inval2
DOSCODE:C466                 mov     ss:SAVE_ES, es
DOSCODE:C46B                 mov     ss:SAVE_DI, di
DOSCODE:C470                 push    ss:EXTOPEN_FLAG
DOSCODE:C475                 pop     ss:SAVE_DX
DOSCODE:C47A                 mov     ss:SAVE_CX, cx
DOSCODE:C47F                 mov     ss:SAVE_BX, bx
DOSCODE:C484                 mov     ss:SAVE_DS, ds
DOSCODE:C489                 mov     ss:SAVE_SI, si
DOSCODE:C48E                 mov     dx, si
DOSCODE:C490                 mov     ax, bx
DOSCODE:C492                 jmp     short goopen2
DOSCODE:C494 ; ---------------------------------------------------------------------------
DOSCODE:C494
DOSCODE:C494 ext_inval2:                             ; ...
DOSCODE:C494                 mov     al, 1
DOSCODE:C496                 jmp     short CreateFail
DOSCODE:C498 ; ---------------------------------------------------------------------------
DOSCODE:C498
DOSCODE:C498 goopen2:                                ; ...
DOSCODE:C498                 test    bh, 20h
DOSCODE:C49B                 jz      short loc_C4A3
DOSCODE:C49D                 or      byte ptr ss:5F6h, 2
DOSCODE:C4A3
DOSCODE:C4A3 loc_C4A3:                               ; ...
DOSCODE:C4A3                 or      byte ptr ss:5F6h, 1
DOSCODE:C4A9                 mov     byte ptr ss:5F5h, 0
DOSCODE:C4AF                 cmp     byte ptr ss:5F4h, 10h
DOSCODE:C4B5                 jnz     short loc_C4D1
DOSCODE:C4B7                 call    $CreateNewFile
DOSCODE:C4BA                 jb      short locret_C4FF
DOSCODE:C4BC                 cmp     byte ptr ss:5F6h, 0
DOSCODE:C4C2                 jz      short loc_C4CE
DOSCODE:C4C4                 mov     word ptr ss:5F4h, 2
DOSCODE:C4CB                 jmp     loc_C551
DOSCODE:C4CE ; ---------------------------------------------------------------------------
DOSCODE:C4CE
DOSCODE:C4CE loc_C4CE:                               ; ...
DOSCODE:C4CE                 jmp     SYS_RET_OK
DOSCODE:C4D1 ; ---------------------------------------------------------------------------
DOSCODE:C4D1
DOSCODE:C4D1 loc_C4D1:                               ; ...
DOSCODE:C4D1                 test    byte ptr ss:5F4h, 1
DOSCODE:C4D7                 jnz     short loc_C500
DOSCODE:C4D9                 call    $CREAT
DOSCODE:C4DC                 jb      short locret_C4FF
DOSCODE:C4DE                 cmp     byte ptr ss:5F6h, 0
DOSCODE:C4E4                 jz      short loc_C4CE
DOSCODE:C4E6                 mov     word ptr ss:5F4h, 2
DOSCODE:C4ED                 test    byte ptr ss:5F6h, 4
DOSCODE:C4F3                 jnz     short loc_C551
DOSCODE:C4F5                 mov     word ptr ss:5F4h, 3
DOSCODE:C4FC                 jmp     short loc_C551
DOSCODE:C4FE ; ---------------------------------------------------------------------------
DOSCODE:C4FE
DOSCODE:C4FE loc_C4FE:                               ; ...
DOSCODE:C4FE                 stc
DOSCODE:C4FF
DOSCODE:C4FF locret_C4FF:                            ; ...
DOSCODE:C4FF                 retn
DOSCODE:C500 ; ---------------------------------------------------------------------------
DOSCODE:C500
DOSCODE:C500 loc_C500:                               ; ...
DOSCODE:C500                 cmp     byte ptr ss:572h, 0
DOSCODE:C506                 jz      short loc_C50A
DOSCODE:C508                 mov     cl, ch
DOSCODE:C50A
DOSCODE:C50A loc_C50A:                               ; ...
DOSCODE:C50A                 call    $Open2
DOSCODE:C50D                 jnb     short loc_C542
DOSCODE:C50F                 cmp     byte ptr ss:5F6h, 0
DOSCODE:C515                 jz      short loc_C4FE
DOSCODE:C517                 cmp     ax, 2
DOSCODE:C51A                 jnz     short loc_C4FE
DOSCODE:C51C                 test    word ptr ss:5F4h, 10h
DOSCODE:C523                 jnz     short loc_C528
DOSCODE:C525
DOSCODE:C525 loc_C525:                               ; ...
DOSCODE:C525                 jmp     SYS_RET_ERR
DOSCODE:C528 ; ---------------------------------------------------------------------------
DOSCODE:C528
DOSCODE:C528 loc_C528:                               ; ...
DOSCODE:C528                 mov     cx, ss:5FFh
DOSCODE:C52D                 lds     si, ss:603h
DOSCODE:C532                 mov     dx, si
DOSCODE:C534                 call    $CREAT
DOSCODE:C537                 jb      short loc_C525
DOSCODE:C539                 mov     word ptr ss:5F4h, 2
DOSCODE:C540                 jmp     short loc_C551
DOSCODE:C542 ; ---------------------------------------------------------------------------
DOSCODE:C542
DOSCODE:C542 loc_C542:                               ; ...
DOSCODE:C542                 cmp     byte ptr ss:5F6h, 0
DOSCODE:C548                 jz      short loc_C55F
DOSCODE:C54A                 mov     word ptr ss:5F4h, 1
DOSCODE:C551
DOSCODE:C551 loc_C551:                               ; ...
DOSCODE:C551                 push    ax
DOSCODE:C552                 call    Get_User_Stack
DOSCODE:C555                 mov     ax, ss:5F4h
DOSCODE:C559                 mov     [si+4], ax
DOSCODE:C55C                 pop     ax
DOSCODE:C55D                 mov     [si], ax
DOSCODE:C55F
DOSCODE:C55F loc_C55F:                               ; ...
DOSCODE:C55F                 jmp     SYS_RET_OK
DOSCODE:C562 ; ---------------------------------------------------------------------------
DOSCODE:C562
DOSCODE:C562 $LockOper:                              ; ...
DOSCODE:C562                 cmp     al, 1
DOSCODE:C564                 ja      short loc_C572
DOSCODE:C566                 push    di
DOSCODE:C567                 call    SFFromHandle
DOSCODE:C56A                 jnb     short loc_C579
DOSCODE:C56C                 pop     di
DOSCODE:C56D                 mov     al, 6
DOSCODE:C56F
DOSCODE:C56F loc_C56F:                               ; ...
DOSCODE:C56F                 jmp     SYS_RET_ERR
DOSCODE:C572 ; ---------------------------------------------------------------------------
DOSCODE:C572
DOSCODE:C572 loc_C572:                               ; ...
DOSCODE:C572                 call    set_exerr_locus_unk
DOSCODE:C575                 mov     al, 1
DOSCODE:C577
DOSCODE:C577 loc_C577:                               ; ...
DOSCODE:C577                 jmp     short loc_C56F
DOSCODE:C579 ; ---------------------------------------------------------------------------
DOSCODE:C579
DOSCODE:C579 loc_C579:                               ; ...
DOSCODE:C579                 mov     bx, ax
DOSCODE:C57B                 mov     bp, offset Lock_Buffer
DOSCODE:C57E                 mov     [bp+0], dx
DOSCODE:C581                 mov     [bp+2], cx
DOSCODE:C584                 pop     word ptr [bp+4]
DOSCODE:C587                 mov     [bp+6], si
DOSCODE:C58A                 mov     cx, 1
DOSCODE:C58D                 push    ss
DOSCODE:C58E                 pop     ds
DOSCODE:C58F                 mov     dx, bp
DOSCODE:C591                 test    al, 1
DOSCODE:C593                 jnz     short loc_C597
DOSCODE:C595                 jmp     short loc_C5B3
DOSCODE:C597 ; ---------------------------------------------------------------------------
DOSCODE:C597
DOSCODE:C597 loc_C597:                               ; ...
DOSCODE:C597                 test    byte ptr es:[di+6], 80h
DOSCODE:C59C                 jz      short loc_C5A5
DOSCODE:C59E                 mov     ax, 110Ah
DOSCODE:C5A1                 int     2Fh             ; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
DOSCODE:C5A1                                         ; BX = file handle, CX:DX = starting offset, SI = high word of size
DOSCODE:C5A1                                         ; STACK: WORD low word of size, ES:DI -> SFT
DOSCODE:C5A1                                         ; SFT DPB field -> DPB of drive containing file, SS = DOS CS
DOSCODE:C5A1                                         ; Return: CF set error
DOSCODE:C5A3                 jmp     short loc_C5A9
DOSCODE:C5A5 ; ---------------------------------------------------------------------------
DOSCODE:C5A5
DOSCODE:C5A5 loc_C5A5:                               ; ...
DOSCODE:C5A5                 call    ds:clr_block
DOSCODE:C5A9
DOSCODE:C5A9 loc_C5A9:                               ; ...
DOSCODE:C5A9                 jnb     short loc_C5AD
DOSCODE:C5AB                 jmp     short loc_C577
DOSCODE:C5AD ; ---------------------------------------------------------------------------
DOSCODE:C5AD
DOSCODE:C5AD loc_C5AD:                               ; ...
DOSCODE:C5AD                 mov     ax, ds:TEMP_VAR
DOSCODE:C5B0                 jmp     SYS_RET_OK
DOSCODE:C5B3 ; ---------------------------------------------------------------------------
DOSCODE:C5B3
DOSCODE:C5B3 loc_C5B3:                               ; ...
DOSCODE:C5B3                 test    byte ptr es:[di+6], 80h
DOSCODE:C5B8                 jz      short loc_C5C1
DOSCODE:C5BA                 mov     ax, 110Ah
DOSCODE:C5BD                 int     2Fh             ; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
DOSCODE:C5BD                                         ; BX = file handle, CX:DX = starting offset, SI = high word of size
DOSCODE:C5BD                                         ; STACK: WORD low word of size, ES:DI -> SFT
DOSCODE:C5BD                                         ; SFT DPB field -> DPB of drive containing file, SS = DOS CS
DOSCODE:C5BD                                         ; Return: CF set error
DOSCODE:C5BF                 jmp     short loc_C5A9
DOSCODE:C5C1 ; ---------------------------------------------------------------------------
DOSCODE:C5C1
DOSCODE:C5C1 loc_C5C1:                               ; ...
DOSCODE:C5C1                 call    ds:set_block
DOSCODE:C5C5                 jmp     short loc_C5A9
DOSCODE:C5C7
DOSCODE:C5C7 ; =============== S U B R O U T I N E =======================================
DOSCODE:C5C7
DOSCODE:C5C7
DOSCODE:C5C7 sub_C5C7        proc near               ; ...
DOSCODE:C5C7                 mov     bx, ds:RetryCount
DOSCODE:C5CB
DOSCODE:C5CB loc_C5CB:                               ; ...
DOSCODE:C5CB                 push    bx
DOSCODE:C5CC                 push    ax
DOSCODE:C5CD                 call    ds:chk_block
DOSCODE:C5D1                 pop     ax
DOSCODE:C5D2                 pop     bx
DOSCODE:C5D3                 jnb     short locret_C5DC
DOSCODE:C5D5                 call    Idle
DOSCODE:C5D8                 dec     bx
DOSCODE:C5D9                 jnz     short loc_C5CB
DOSCODE:C5DB                 stc
DOSCODE:C5DC
DOSCODE:C5DC locret_C5DC:                            ; ...
DOSCODE:C5DC                 retn
DOSCODE:C5DC sub_C5C7        endp
DOSCODE:C5DC
DOSCODE:C5DD
DOSCODE:C5DD ; =============== S U B R O U T I N E =======================================
DOSCODE:C5DD
DOSCODE:C5DD
DOSCODE:C5DD sub_C5DD        proc near               ; ...
DOSCODE:C5DD                 push    ds
DOSCODE:C5DE                 push    es
DOSCODE:C5DF                 push    di
DOSCODE:C5E0                 push    cx
DOSCODE:C5E1                 mov     ax, 21h ; '!'
DOSCODE:C5E4                 mov     ds:ALLOWED, 18h
DOSCODE:C5E9                 les     bp, ds:THISDPB
DOSCODE:C5ED                 mov     di, 1
DOSCODE:C5F0                 mov     cx, di
DOSCODE:C5F2                 xor     dx, dx
DOSCODE:C5F4                 cmp     es:[bp+0Fh], dx
DOSCODE:C5F8                 jnz     short loc_C608
DOSCODE:C5FA                 mov     dx, es:[bp+2Bh]
DOSCODE:C5FE                 mov     ds:HIGH_SECTOR, dx
DOSCODE:C602                 mov     dx, es:[bp+29h]
DOSCODE:C606                 jmp     short loc_C610
DOSCODE:C608 ; ---------------------------------------------------------------------------
DOSCODE:C608
DOSCODE:C608 loc_C608:                               ; ...
DOSCODE:C608                 mov     ds:HIGH_SECTOR, dx
DOSCODE:C60C                 mov     dx, es:[bp+0Bh]
DOSCODE:C610
DOSCODE:C610 loc_C610:                               ; ...
DOSCODE:C610                 call    HARDERR
DOSCODE:C613                 pop     cx
DOSCODE:C614                 pop     di
DOSCODE:C615                 pop     es
DOSCODE:C616                 pop     ds
DOSCODE:C617                 cmp     al, 1
DOSCODE:C619                 jz      short locret_C5DC
DOSCODE:C61B                 stc
DOSCODE:C61C                 retn
DOSCODE:C61C sub_C5DD        endp
DOSCODE:C61C
DOSCODE:C61D
DOSCODE:C61D ; =============== S U B R O U T I N E =======================================
DOSCODE:C61D
DOSCODE:C61D
DOSCODE:C61D CheckShare      proc near               ; ...
DOSCODE:C61D                 push    ds
DOSCODE:C61E                 mov     ds, cs:DosDSeg
DOSCODE:C623                 cmp     ds:fShare, 0
DOSCODE:C628                 pop     ds
DOSCODE:C629                 retn
DOSCODE:C629 CheckShare      endp
DOSCODE:C629
DOSCODE:C62A
DOSCODE:C62A ; =============== S U B R O U T I N E =======================================
DOSCODE:C62A
DOSCODE:C62A
DOSCODE:C62A SHARE_CHECK     proc near               ; ...
DOSCODE:C62A                 call    ds:MFT_enter
DOSCODE:C62E
DOSCODE:C62E locret_C62E:                            ; ...
DOSCODE:C62E                 retn
DOSCODE:C62E SHARE_CHECK     endp
DOSCODE:C62E
DOSCODE:C62F
DOSCODE:C62F ; =============== S U B R O U T I N E =======================================
DOSCODE:C62F
DOSCODE:C62F
DOSCODE:C62F SHARE_VIOLATION proc near               ; ...
DOSCODE:C62F                 push    ds
DOSCODE:C630                 push    es
DOSCODE:C631                 push    di
DOSCODE:C632                 mov     ds:READOP, 0
DOSCODE:C637                 mov     ds:ALLOWED, 18h
DOSCODE:C63C                 les     bp, ds:THISDPB
DOSCODE:C640                 mov     di, 1
DOSCODE:C643                 mov     cx, di
DOSCODE:C645                 cmp     word ptr es:[bp+0Fh], 0
DOSCODE:C64A                 jz      short loc_C658
DOSCODE:C64C                 mov     ds:HIGH_SECTOR, 0
DOSCODE:C652                 mov     dx, es:[bp+11h]
DOSCODE:C656                 jmp     short loc_C664
DOSCODE:C658 ; ---------------------------------------------------------------------------
DOSCODE:C658
DOSCODE:C658 loc_C658:                               ; ...
DOSCODE:C658                 mov     dx, es:[bp+2Bh]
DOSCODE:C65C                 mov     ds:HIGH_SECTOR, dx
DOSCODE:C660                 mov     dx, es:[bp+29h]
DOSCODE:C664
DOSCODE:C664 loc_C664:                               ; ...
DOSCODE:C664                 call    HARDERR
DOSCODE:C667                 pop     di
DOSCODE:C668                 pop     es
DOSCODE:C669                 pop     ds
DOSCODE:C66A                 cmp     al, 1
DOSCODE:C66C                 jz      short locret_C62E
DOSCODE:C66E                 stc
DOSCODE:C66F                 retn
DOSCODE:C66F SHARE_VIOLATION endp
DOSCODE:C66F
DOSCODE:C670
DOSCODE:C670 ; =============== S U B R O U T I N E =======================================
DOSCODE:C670
DOSCODE:C670
DOSCODE:C670 ShareEnd        proc near               ; ...
DOSCODE:C670                 call    ds:MFTClose
DOSCODE:C674                 retn
DOSCODE:C674 ShareEnd        endp
DOSCODE:C674
DOSCODE:C675
DOSCODE:C675 ; =============== S U B R O U T I N E =======================================
DOSCODE:C675
DOSCODE:C675
DOSCODE:C675 ShareEnter      proc near               ; ...
DOSCODE:C675                 push    cx
DOSCODE:C676
DOSCODE:C676 loc_C676:                               ; ...
DOSCODE:C676                 mov     cx, ds:1Ah
DOSCODE:C67A
DOSCODE:C67A loc_C67A:                               ; ...
DOSCODE:C67A                 les     di, ds:59Eh
DOSCODE:C67E                 xor     ax, ax
DOSCODE:C680                 push    cx
DOSCODE:C681                 mov     es:[di+33h], ax
DOSCODE:C685                 call    SHARE_CHECK
DOSCODE:C688                 pop     cx
DOSCODE:C689                 jnb     short loc_C695
DOSCODE:C68B                 call    Idle
DOSCODE:C68E                 loop    loc_C67A
DOSCODE:C690                 call    SHARE_VIOLATION
DOSCODE:C693                 jnb     short loc_C676
DOSCODE:C695
DOSCODE:C695 loc_C695:                               ; ...
DOSCODE:C695                 pop     cx
DOSCODE:C696                 retn
DOSCODE:C696 ShareEnter      endp
DOSCODE:C696
DOSCODE:C697
DOSCODE:C697 ; =============== S U B R O U T I N E =======================================
DOSCODE:C697
DOSCODE:C697
DOSCODE:C697 sub_C697        proc near               ; ...
DOSCODE:C697                 mov     si, dx
DOSCODE:C699                 test    word ptr [si+2], 1
DOSCODE:C69E                 jz      short loc_C6B8
DOSCODE:C6A0                 mov     ax, [si+8]
DOSCODE:C6A3                 add     ax, 10h
DOSCODE:C6A6                 mov     es, ax
DOSCODE:C6A8                 mov     cx, [si+0Ah]
DOSCODE:C6AB                 mov     ax, [si+0Ch]
DOSCODE:C6AE                 call    word ptr ss:0D67h
DOSCODE:C6B3                 call    word ptr ss:133Eh
DOSCODE:C6B8
DOSCODE:C6B8 loc_C6B8:                               ; ...
DOSCODE:C6B8                 test    word ptr [si+2], 2
DOSCODE:C6BD                 jnz     short loc_C6D7
DOSCODE:C6BF                 push    ds
DOSCODE:C6C0                 push    si
DOSCODE:C6C1                 lds     si, [si+4]
DOSCODE:C6C4                 call    sub_B35C
DOSCODE:C6C7                 call    sub_B370
DOSCODE:C6CA                 pop     si
DOSCODE:C6CB                 pop     ds
DOSCODE:C6CC                 mov     es, word ptr [si+8]
DOSCODE:C6CF                 mov     ax, ss:0EBBh
DOSCODE:C6D3                 mov     es:40h, ax
DOSCODE:C6D7
DOSCODE:C6D7 loc_C6D7:                               ; ...
DOSCODE:C6D7                 cmp     byte ptr ss:0D66h, 0
DOSCODE:C6DD                 jz      short loc_C6FF
DOSCODE:C6DF                 mov     ax, [si+8]
DOSCODE:C6E2                 or      byte ptr ss:86h, 4
DOSCODE:C6E8                 test    word ptr [si+2], 1
DOSCODE:C6ED                 jnz     short loc_C6F6
DOSCODE:C6EF                 push    ds
DOSCODE:C6F0                 mov     ds, ax
DOSCODE:C6F2                 call    IsCopyProt
DOSCODE:C6F5                 pop     ds
DOSCODE:C6F6
DOSCODE:C6F6 loc_C6F6:                               ; ...
DOSCODE:C6F6                 inc     byte ptr ss:85h
DOSCODE:C6FB                 mov     ss:63h, ax
DOSCODE:C6FF
DOSCODE:C6FF loc_C6FF:                               ; ...
DOSCODE:C6FF                 xor     ax, ax
DOSCODE:C701                 retn
DOSCODE:C701 sub_C697        endp
DOSCODE:C701
DOSCODE:C701 ; ---------------------------------------------------------------------------
DOSCODE:C702                 db 0FAh
DOSCODE:C703                 db 0E4h
DOSCODE:C704                 db  21h ; !
DOSCODE:C705                 db  60h ; `
DOSCODE:C706                 db  33h ; 3
DOSCODE:C707                 db 0C0h
DOSCODE:C708                 db 0E6h
DOSCODE:C709                 db  43h ; C
DOSCODE:C70A                 db  8Bh
DOSCODE:C70B                 db  16h
DOSCODE:C70C                 db 0B0h
DOSCODE:C70D                 db  0Eh
DOSCODE:C70E                 db 0E6h
DOSCODE:C70F                 db  37h ; 7
DOSCODE:C710                 db  33h ; 3
DOSCODE:C711                 db 0C0h
DOSCODE:C712                 db 0E6h
DOSCODE:C713                 db 0F2h
DOSCODE:C714                 db  0Fh
DOSCODE:C715                 db  20h
DOSCODE:C716                 db 0C0h
DOSCODE:C717                 db  0Fh
DOSCODE:C718                 db  22h ; "
DOSCODE:C719                 db 0C0h
DOSCODE:C71A                 db 0EAh
DOSCODE:C71B                 db  66h ; f
DOSCODE:C71C                 db  50h ; P
DOSCODE:C71D                 db  51h ; Q
DOSCODE:C71E                 db  0Fh
DOSCODE:C71F                 db  20h
DOSCODE:C720                 db 0C0h
DOSCODE:C721                 db  8Eh
DOSCODE:C722                 db 0D3h
DOSCODE:C723                 db  59h ; Y
DOSCODE:C724                 db  66h ; f
DOSCODE:C725                 db  58h ; X
DOSCODE:C726                 db  93h
DOSCODE:C727                 db  58h ; X
DOSCODE:C728                 db  8Bh
DOSCODE:C729                 db 0CCh
DOSCODE:C72A                 db 0B8h
DOSCODE:C72B                 db  0Ch
DOSCODE:C72C                 db 0DEh
DOSCODE:C72D                 db 0CDh
DOSCODE:C72E                 db  67h ; g
DOSCODE:C72F                 db  8Bh
DOSCODE:C730                 db 0E1h
DOSCODE:C731                 db 0FFh
DOSCODE:C732                 db 0E3h
DOSCODE:C733                 db  93h
DOSCODE:C734                 db  58h ; X
DOSCODE:C735                 db  8Bh
DOSCODE:C736                 db 0CCh
DOSCODE:C737                 db  2Eh ; .
DOSCODE:C738                 db  66h ; f
DOSCODE:C739                 db 0A3h
DOSCODE:C73A                 db    0
DOSCODE:C73B                 db    0
DOSCODE:C73C                 db  2Eh ; .
DOSCODE:C73D                 db  66h ; f
DOSCODE:C73E                 db  89h
DOSCODE:C73F                 db  36h ; 6
DOSCODE:C740                 db    0
DOSCODE:C741                 db    0
DOSCODE:C742                 db  8Bh
DOSCODE:C743                 db 0E1h
DOSCODE:C744                 db  2Eh ; .
DOSCODE:C745                 db  66h ; f
DOSCODE:C746                 db 0A1h
DOSCODE:C747                 db    0
DOSCODE:C748                 db    0
DOSCODE:C749                 db  2Eh ; .
DOSCODE:C74A                 db  66h ; f
DOSCODE:C74B                 db  8Bh
DOSCODE:C74C                 db  36h ; 6
DOSCODE:C74D                 db    0
DOSCODE:C74E                 db    0
DOSCODE:C74F                 db 0FFh
DOSCODE:C750                 db 0E3h
DOSCODE:C751                 db 0FAh, 52h, 51h
DOSCODE:C754                 db 0B8h, 0Ch, 0DEh, 66h, 26h, 0FFh, 1Eh
DOSCODE:C75B                 db 59h, 5Ah, 5Bh
DOSCODE:C75E                 db 0FAh, 66h, 50h, 66h, 53h, 66h, 51h, 66h, 52h
DOSCODE:C767                 db 66h, 5Ah, 66h, 59h, 66h, 5Bh, 66h, 58h, 5Bh
DOSCODE:C770                 db 60h, 6, 1Eh, 0B8h, 0, 0, 8Eh, 0D8h
DOSCODE:C778                 db 1Fh, 7, 61h
DOSCODE:C77B                 db 66h, 60h, 6, 1Eh
DOSCODE:C77F                 db 1Fh, 7, 66h, 61h, 0C3h
DOSCODE:C784                 dw 0C714h
DOSCODE:C786                 dw 3
DOSCODE:C788                 dw 0C717h
DOSCODE:C78A                 dw 4
DOSCODE:C78C                 dw 20h
DOSCODE:C78E                 dw 0C726h
DOSCODE:C790                 dw 4
DOSCODE:C792                 dw 0C72Ah
DOSCODE:C794                 dw 9
DOSCODE:C796                 dw 80h
DOSCODE:C798                 dw 0C751h
DOSCODE:C79A                 dw 3
DOSCODE:C79C                 dw 0C754h
DOSCODE:C79E                 dw 7
DOSCODE:C7A0                 dw 80h
DOSCODE:C7A2                 dw 0C770h
DOSCODE:C7A4                 dw 4
DOSCODE:C7A6                 dw 0C778h
DOSCODE:C7A8                 dw 3
DOSCODE:C7AA                 dw 80h
DOSCODE:C7AC ; ---------------------------------------------------------------------------
DOSCODE:C7AC
DOSCODE:C7AC Rational386Patch:                       ; ...
DOSCODE:C7AC                 cmp     word ptr es:0, 395
DOSCODE:C7B3                 jnb     short locret_C7D7
DOSCODE:C7B5                 cmp     word ptr es:0Ch, 20h ; ' '
DOSCODE:C7BB                 jnz     short locret_C7D7
DOSCODE:C7BD                 push    ax
DOSCODE:C7BE                 mov     ax, 18h
DOSCODE:C7C1                 cmp     es:18h, ax
DOSCODE:C7C6                 jnz     short loc_C7D6
DOSCODE:C7C8                 cmp     es:1Ch, ax
DOSCODE:C7CD                 jnz     short loc_C7D6
DOSCODE:C7CF                 cmp     es:24h, ax
DOSCODE:C7D4                 jz      short rp3Maybe
DOSCODE:C7D6
DOSCODE:C7D6 loc_C7D6:                               ; ...
DOSCODE:C7D6                 pop     ax
DOSCODE:C7D7
DOSCODE:C7D7 locret_C7D7:                            ; ...
DOSCODE:C7D7                 retn
DOSCODE:C7D8 ; ---------------------------------------------------------------------------
DOSCODE:C7D8
DOSCODE:C7D8 rp3Maybe:                               ; ...
DOSCODE:C7D8                 cld
DOSCODE:C7D9                 pusha
DOSCODE:C7DA                 push    es
DOSCODE:C7DB                 push    ds
DOSCODE:C7DC                 sub     sp, 6
DOSCODE:C7DF                 mov     bp, sp
DOSCODE:C7E1                 push    cs
DOSCODE:C7E2                 pop     ds
DOSCODE:C7E3                 assume ds:DOSCODE
DOSCODE:C7E3                 mov     ax, es:0
DOSCODE:C7E7                 mov     [bp+0], ax
DOSCODE:C7EA                 call    sub_C986
DOSCODE:C7ED                 jnz     short loc_C810
DOSCODE:C7EF                 mov     cx, 4500h
DOSCODE:C7F2                 mov     [bp+2], cx
DOSCODE:C7F5                 mov     es, word ptr es:20h
DOSCODE:C7FA                 mov     si, 0C702h
DOSCODE:C7FD                 mov     dx, 0Ah
DOSCODE:C800                 call    ScanCodeSeq
DOSCODE:C803                 jz      short loc_C813
DOSCODE:C805                 mov     si, 0C70Ch
DOSCODE:C808                 mov     dx, 8
DOSCODE:C80B                 call    ScanCodeSeq
DOSCODE:C80E                 jz      short loc_C813
DOSCODE:C810
DOSCODE:C810 loc_C810:                               ; ...
DOSCODE:C810                 jmp     loc_C911
DOSCODE:C813 ; ---------------------------------------------------------------------------
DOSCODE:C813
DOSCODE:C813 loc_C813:                               ; ...
DOSCODE:C813                 mov     [bp+4], di
DOSCODE:C816                 cmp     word ptr [bp+0], 17Dh
DOSCODE:C81B                 jnb     short loc_C865
DOSCODE:C81D                 mov     bx, 0C784h
DOSCODE:C820                 call    FindBadCode
DOSCODE:C823                 jb      short loc_C865
DOSCODE:C825                 push    di
DOSCODE:C826                 mov     di, si
DOSCODE:C828                 mov     dx, 3
DOSCODE:C82B                 cmp     byte ptr es:[di-1], 51h ; 'Q'
DOSCODE:C830                 jnz     short loc_C834
DOSCODE:C832                 dec     di
DOSCODE:C833                 inc     dx
DOSCODE:C834
DOSCODE:C834 loc_C834:                               ; ...
DOSCODE:C834                 mov     si, 0C71Bh
DOSCODE:C837                 mov     cx, 6
DOSCODE:C83A                 call    GenPatch
DOSCODE:C83D                 pop     di
DOSCODE:C83E                 cmp     byte ptr es:[di-1], 59h ; 'Y'
DOSCODE:C843                 jnz     short loc_C84A
DOSCODE:C845                 mov     byte ptr es:[di-1], 90h
DOSCODE:C84A
DOSCODE:C84A loc_C84A:                               ; ...
DOSCODE:C84A                 mov     ax, [bp+4]
DOSCODE:C84D                 mov     es:[di+4], ax
DOSCODE:C851                 push    di
DOSCODE:C852                 mov     si, 0C721h
DOSCODE:C855                 mov     cx, 5
DOSCODE:C858                 call    CopyPatch
DOSCODE:C85B                 pop     bx
DOSCODE:C85C                 add     bx, 8
DOSCODE:C85F                 call    GenJump
DOSCODE:C862                 mov     [bp+4], di
DOSCODE:C865
DOSCODE:C865 loc_C865:                               ; ...
DOSCODE:C865                 mov     bx, 0C78Eh
DOSCODE:C868                 call    FindBadCode
DOSCODE:C86B                 jb      short loc_C8AF
DOSCODE:C86D                 push    word ptr [bp+4]
DOSCODE:C870                 push    di
DOSCODE:C871                 mov     di, si
DOSCODE:C873                 mov     dx, 4
DOSCODE:C876                 mov     si, 0C733h
DOSCODE:C879                 mov     cx, 0Fh
DOSCODE:C87C                 call    GenPatch
DOSCODE:C87F                 pop     di
DOSCODE:C880                 add     di, 5
DOSCODE:C883                 mov     bx, [bp+4]
DOSCODE:C886                 push    bx
DOSCODE:C887                 call    GenJump
DOSCODE:C88A                 mov     si, 0C742h
DOSCODE:C88D                 mov     cx, 0Fh
DOSCODE:C890                 call    CopyPatch
DOSCODE:C893                 pop     di
DOSCODE:C894                 pop     si
DOSCODE:C895                 mov     ax, [bp+4]
DOSCODE:C898                 mov     es:[si+7], ax
DOSCODE:C89C                 mov     es:[di+5], ax
DOSCODE:C8A0                 add     ax, 4
DOSCODE:C8A3                 mov     es:[si+0Dh], ax
DOSCODE:C8A7                 mov     es:[di+0Bh], ax
DOSCODE:C8AB                 add     word ptr [bp+4], 8
DOSCODE:C8AF
DOSCODE:C8AF loc_C8AF:                               ; ...
DOSCODE:C8AF                 mov     bx, 0C798h
DOSCODE:C8B2                 call    FindBadCode
DOSCODE:C8B5                 jb      short loc_C8E3
DOSCODE:C8B7                 add     di, 9
DOSCODE:C8BA                 push    si
DOSCODE:C8BB                 mov     si, 0C75Bh
DOSCODE:C8BE                 mov     dx, 3
DOSCODE:C8C1                 call    ScanCodeSeq_di
DOSCODE:C8C4                 pop     si
DOSCODE:C8C5                 jnz     short loc_C8E3
DOSCODE:C8C7                 push    di
DOSCODE:C8C8                 mov     di, si
DOSCODE:C8CA                 mov     dx, 3
DOSCODE:C8CD                 mov     si, 0C75Eh
DOSCODE:C8D0                 mov     cx, 9
DOSCODE:C8D3                 call    GenPatch
DOSCODE:C8D6                 pop     di
DOSCODE:C8D7                 mov     dx, 3
DOSCODE:C8DA                 mov     si, 0C767h
DOSCODE:C8DD                 mov     cx, 9
DOSCODE:C8E0                 call    GenPatch
DOSCODE:C8E3
DOSCODE:C8E3 loc_C8E3:                               ; ...
DOSCODE:C8E3                 cmp     word ptr [bp+0], 168h
DOSCODE:C8E8                 jbe     short loc_C911
DOSCODE:C8EA                 mov     bx, 0C7A2h
DOSCODE:C8ED                 call    FindBadCode
DOSCODE:C8F0                 jb      short loc_C911
DOSCODE:C8F2                 push    di
DOSCODE:C8F3                 mov     di, si
DOSCODE:C8F5                 mov     dx, 3
DOSCODE:C8F8                 mov     si, 0C77Bh
DOSCODE:C8FB                 mov     cx, 4
DOSCODE:C8FE                 call    GenPatch
DOSCODE:C901                 pop     di
DOSCODE:C902                 mov     bx, [bp+4]
DOSCODE:C905                 call    GenJump
DOSCODE:C908                 mov     si, 0C77Fh
DOSCODE:C90B                 mov     cx, 5
DOSCODE:C90E                 call    CopyPatch
DOSCODE:C911
DOSCODE:C911 loc_C911:                               ; ...
DOSCODE:C911                 add     sp, 6
DOSCODE:C914                 pop     ds
DOSCODE:C915                 assume ds:nothing
DOSCODE:C915                 pop     es
DOSCODE:C916                 popa
DOSCODE:C917                 pop     ax
DOSCODE:C918                 retn
DOSCODE:C919
DOSCODE:C919 ; =============== S U B R O U T I N E =======================================
DOSCODE:C919
DOSCODE:C919
DOSCODE:C919 FindBadCode     proc near               ; ...
DOSCODE:C919                 mov     cx, [bp+2]
DOSCODE:C91C                 mov     si, [bx]
DOSCODE:C91E                 mov     dx, [bx+2]
DOSCODE:C921                 call    ScanCodeSeq
DOSCODE:C924                 jnz     short fbc_error
DOSCODE:C926                 push    di
DOSCODE:C927                 mov     si, [bx+4]
DOSCODE:C92A                 mov     dx, [bx+6]
DOSCODE:C92D                 call    ScanCodeSeq_di
DOSCODE:C930                 pop     si
DOSCODE:C931                 jnz     short fbc_error
DOSCODE:C933                 mov     ax, di
DOSCODE:C935                 sub     ax, si
DOSCODE:C937                 jb      short fbc_error
DOSCODE:C939                 cmp     ax, [bx+8]
DOSCODE:C93C                 ja      short fbc_error
DOSCODE:C93E                 clc
DOSCODE:C93F                 retn
DOSCODE:C940 ; ---------------------------------------------------------------------------
DOSCODE:C940
DOSCODE:C940 fbc_error:                              ; ...
DOSCODE:C940                 stc
DOSCODE:C941                 retn
DOSCODE:C941 FindBadCode     endp
DOSCODE:C941
DOSCODE:C942
DOSCODE:C942 ; =============== S U B R O U T I N E =======================================
DOSCODE:C942
DOSCODE:C942
DOSCODE:C942 GenPatch        proc near               ; ...
DOSCODE:C942                 push    di
DOSCODE:C943                 mov     bx, [bp+4]
DOSCODE:C946                 call    GenJump
DOSCODE:C949                 call    CopyPatch
DOSCODE:C94C                 pop     bx
DOSCODE:C94D                 add     bx, dx
DOSCODE:C94F                 call    GenJump
DOSCODE:C952                 mov     [bp+4], di
DOSCODE:C955                 retn
DOSCODE:C955 GenPatch        endp
DOSCODE:C955
DOSCODE:C956
DOSCODE:C956 ; =============== S U B R O U T I N E =======================================
DOSCODE:C956
DOSCODE:C956
DOSCODE:C956 CopyPatch       proc near               ; ...
DOSCODE:C956                 push    cx
DOSCODE:C957                 mov     di, [bp+4]
DOSCODE:C95A                 cld
DOSCODE:C95B                 rep movsb
DOSCODE:C95D                 pop     cx
DOSCODE:C95E                 mov     [bp+4], di
DOSCODE:C961                 retn
DOSCODE:C961 CopyPatch       endp
DOSCODE:C961
DOSCODE:C962
DOSCODE:C962 ; =============== S U B R O U T I N E =======================================
DOSCODE:C962
DOSCODE:C962
DOSCODE:C962 GenJump         proc near               ; ...
DOSCODE:C962                 mov     al, 0E9h
DOSCODE:C964                 stosb
DOSCODE:C965                 mov     ax, bx
DOSCODE:C967                 sub     ax, di
DOSCODE:C969                 sub     ax, 2
DOSCODE:C96C                 stosw
DOSCODE:C96D                 retn
DOSCODE:C96D GenJump         endp
DOSCODE:C96D
DOSCODE:C96E
DOSCODE:C96E ; =============== S U B R O U T I N E =======================================
DOSCODE:C96E
DOSCODE:C96E
DOSCODE:C96E ScanCodeSeq     proc near               ; ...
DOSCODE:C96E                 mov     di, 200h
DOSCODE:C971
DOSCODE:C971 ScanCodeSeq_di:                         ; ...
DOSCODE:C971                 push    cx
DOSCODE:C972                 sub     cx, dx
DOSCODE:C974                 inc     cx
DOSCODE:C975
DOSCODE:C975 scsagain:                               ; ...
DOSCODE:C975                 push    si
DOSCODE:C976                 push    di
DOSCODE:C977                 push    cx
DOSCODE:C978                 mov     cx, dx
DOSCODE:C97A                 repe cmpsb
DOSCODE:C97C                 pop     cx
DOSCODE:C97D                 pop     di
DOSCODE:C97E                 pop     si
DOSCODE:C97F                 jz      short scsfound
DOSCODE:C981                 inc     di
DOSCODE:C982                 loop    scsagain
DOSCODE:C984
DOSCODE:C984 scsfound:                               ; ...
DOSCODE:C984                 pop     cx
DOSCODE:C985                 retn
DOSCODE:C985 ScanCodeSeq     endp
DOSCODE:C985
DOSCODE:C986
DOSCODE:C986 ; =============== S U B R O U T I N E =======================================
DOSCODE:C986
DOSCODE:C986
DOSCODE:C986 sub_C986        proc near               ; ...
DOSCODE:C986                 mov     si, es:2Ah
DOSCODE:C98B                 mov     bl, 0Ah
DOSCODE:C98D                 add     si, 3
DOSCODE:C990                 call    sub_C9A5
DOSCODE:C993                 jnz     short locret_C9A4
DOSCODE:C995                 call    sub_C9A5
DOSCODE:C998                 jnz     short locret_C9A4
DOSCODE:C99A                 cmp     byte ptr es:[si], 2Eh ; '.'
DOSCODE:C99E                 jnz     short locret_C9A4
DOSCODE:C9A0                 dec     si
DOSCODE:C9A1                 call    sub_C9A5
DOSCODE:C9A4
DOSCODE:C9A4 locret_C9A4:                            ; ...
DOSCODE:C9A4                 retn
DOSCODE:C9A4 sub_C986        endp
DOSCODE:C9A4
DOSCODE:C9A5
DOSCODE:C9A5 ; =============== S U B R O U T I N E =======================================
DOSCODE:C9A5
DOSCODE:C9A5
DOSCODE:C9A5 sub_C9A5        proc near               ; ...
DOSCODE:C9A5                 div     bl
DOSCODE:C9A7                 add     ah, 30h ; '0'
DOSCODE:C9AA                 dec     si
DOSCODE:C9AB                 cmp     es:[si+1], ah
DOSCODE:C9AF                 mov     ah, 0
DOSCODE:C9B1                 retn
DOSCODE:C9B1 sub_C9A5        endp
DOSCODE:C9B1
DOSCODE:C9B2 ; ---------------------------------------------------------------------------
DOSCODE:C9B2
DOSCODE:C9B2 exepatch_start:                         ; ...
DOSCODE:C9B2                 push    es
DOSCODE:C9B3                 mov     ax, ds
DOSCODE:C9B5                 sub     ax, dx
DOSCODE:C9B7                 mov     ds, ax
DOSCODE:C9B9                 mov     es, ax
DOSCODE:C9BB                 mov     di, 0Fh
DOSCODE:C9BE                 push    di
DOSCODE:C9BF                 mov     cx, 10h
DOSCODE:C9C2                 mov     al, 0FFh
DOSCODE:C9C4                 repe scasb
DOSCODE:C9C6                 inc     di
DOSCODE:C9C7                 mov     si, di
DOSCODE:C9C9                 pop     di
DOSCODE:C9CA                 pop     ax
DOSCODE:C9CB                 sub     ax, dx
DOSCODE:C9CD                 mov     es, ax
DOSCODE:C9CF
DOSCODE:C9CF loc_C9CF:                               ; ...
DOSCODE:C9CF                 mov     cx, 204h
DOSCODE:C9D2
DOSCODE:C9D2 loc_C9D2:                               ; ...
DOSCODE:C9D2                 mov     ax, si
DOSCODE:C9D4                 not     ax
DOSCODE:C9D6                 shr     ax, cl
DOSCODE:C9D8                 jz      short loc_C9ED
DOSCODE:C9DA                 mov     dx, ds
DOSCODE:C9DC                 or      si, 0FFF0h
DOSCODE:C9DF                 sub     dx, ax
DOSCODE:C9E1                 jnb     short loc_C9EB
DOSCODE:C9E3                 neg     dx
DOSCODE:C9E5                 shl     dx, cl
DOSCODE:C9E7                 sub     si, dx
DOSCODE:C9E9                 xor     dx, dx
DOSCODE:C9EB
DOSCODE:C9EB loc_C9EB:                               ; ...
DOSCODE:C9EB                 mov     ds, dx
DOSCODE:C9ED                 assume ds:DOSCODE
DOSCODE:C9ED
DOSCODE:C9ED loc_C9ED:                               ; ...
DOSCODE:C9ED                 xchg    si, di
DOSCODE:C9EF                 push    ds
DOSCODE:C9F0                 push    es
DOSCODE:C9F1                 pop     ds
DOSCODE:C9F2                 assume ds:nothing
DOSCODE:C9F2                 pop     es
DOSCODE:C9F3                 dec     ch
DOSCODE:C9F5                 jnz     short loc_C9D2
DOSCODE:C9F7                 lodsb
DOSCODE:C9F8                 xchg    ax, dx
DOSCODE:C9F9                 dec     si
DOSCODE:C9FA                 lodsw
DOSCODE:C9FB                 mov     cx, ax
DOSCODE:C9FD                 inc     si
DOSCODE:C9FE                 mov     al, dl
DOSCODE:CA00                 and     al, 0FEh
DOSCODE:CA02                 cmp     al, 0B0h
DOSCODE:CA04                 jnz     short loc_CA0B
DOSCODE:CA06                 lodsb
DOSCODE:CA07                 rep stosb
DOSCODE:CA09                 jmp     short loc_CA11
DOSCODE:CA0B ; ---------------------------------------------------------------------------
DOSCODE:CA0B
DOSCODE:CA0B loc_CA0B:                               ; ...
DOSCODE:CA0B                 cmp     al, 0B2h
DOSCODE:CA0D                 jnz     short near ptr loc_CA7A+1
DOSCODE:CA0F                 rep movsb
DOSCODE:CA11
DOSCODE:CA11 loc_CA11:                               ; ...
DOSCODE:CA11                 xchg    ax, dx
DOSCODE:CA12                 test    al, 1
DOSCODE:CA14                 jz      short loc_C9CF
DOSCODE:CA16                 nop
DOSCODE:CA17                 nop
DOSCODE:CA18                 mov     bx, es
DOSCODE:CA1A                 mov     ax, ds
DOSCODE:CA1C                 sub     ax, dx
DOSCODE:CA1E                 mov     ds, ax
DOSCODE:CA20                 mov     es, ax
DOSCODE:CA22                 mov     di, 0Fh
DOSCODE:CA25                 mov     cx, 10h
DOSCODE:CA28                 mov     al, 0FFh
DOSCODE:CA2A                 repe scasb
DOSCODE:CA2C                 inc     di
DOSCODE:CA2D                 mov     si, di
DOSCODE:CA2F                 mov     ax, bx
DOSCODE:CA31                 sub     ax, dx
DOSCODE:CA33                 mov     es, ax
DOSCODE:CA35                 mov     di, 0Fh
DOSCODE:CA38                 mov     cl, 4
DOSCODE:CA3A                 mov     ax, si
DOSCODE:CA3C                 not     ax
DOSCODE:CA3E                 shr     ax, cl
DOSCODE:CA40                 jz      short loc_CA4B
DOSCODE:CA42                 mov     dx, ds
DOSCODE:CA44                 sub     dx, ax
DOSCODE:CA46                 mov     ds, dx
DOSCODE:CA48                 assume ds:nothing
DOSCODE:CA48                 or      si, 0FFF0h
DOSCODE:CA4B
DOSCODE:CA4B loc_CA4B:                               ; ...
DOSCODE:CA4B                 mov     ax, di
DOSCODE:CA4D                 not     ax
DOSCODE:CA4F                 shr     ax, cl
DOSCODE:CA51                 jz      short loc_CA5C
DOSCODE:CA53                 mov     dx, es
DOSCODE:CA55                 sub     dx, ax
DOSCODE:CA57                 mov     es, dx
DOSCODE:CA59                 assume es:nothing
DOSCODE:CA59                 or      di, 0FFF0h
DOSCODE:CA5C
DOSCODE:CA5C loc_CA5C:                               ; ...
DOSCODE:CA5C                 mov     bx, es
DOSCODE:CA5E                 mov     ax, ds
DOSCODE:CA60                 dec     ax
DOSCODE:CA61                 mov     ds, ax
DOSCODE:CA63                 assume ds:nothing
DOSCODE:CA63                 mov     es, ax
DOSCODE:CA65                 mov     di, 0Fh
DOSCODE:CA68                 mov     cx, 10h
DOSCODE:CA6B                 mov     al, 0FFh
DOSCODE:CA6D                 repe scasb
DOSCODE:CA6F                 inc     di
DOSCODE:CA70                 mov     si, di
DOSCODE:CA72                 mov     ax, bx
DOSCODE:CA74                 dec     ax
DOSCODE:CA75                 mov     es, ax
DOSCODE:CA77                 assume es:nothing
DOSCODE:CA77                 mov     di, 0Fh
DOSCODE:CA7A
DOSCODE:CA7A loc_CA7A:                               ; ...
DOSCODE:CA7A                 mov     cl, 4
DOSCODE:CA7C                 mov     ax, si
DOSCODE:CA7E                 not     ax
DOSCODE:CA80                 shr     ax, cl
DOSCODE:CA82                 jz      short loc_CA8E
DOSCODE:CA84                 mov     dx, ds
DOSCODE:CA86                 sub     dx, ax
DOSCODE:CA88                 mov     ds, dx
DOSCODE:CA8A                 assume ds:nothing
DOSCODE:CA8A                 or      si, 0FFF0h
DOSCODE:CA8E
DOSCODE:CA8E loc_CA8E:                               ; ...
DOSCODE:CA8E                 mov     ax, di
DOSCODE:CA90                 not     ax
DOSCODE:CA92                 shr     ax, cl
DOSCODE:CA94                 jz      short loc_CAA0
DOSCODE:CA96                 mov     dx, es
DOSCODE:CA98                 sub     dx, ax
DOSCODE:CA9A                 mov     es, dx
DOSCODE:CA9C                 assume es:nothing
DOSCODE:CA9C                 or      di, 0FFF0h
DOSCODE:CAA0
DOSCODE:CAA0 loc_CAA0:                               ; ...
DOSCODE:CAA0                 mov     bx, es
DOSCODE:CAA2                 mov     ax, ds
DOSCODE:CAA4                 dec     ax
DOSCODE:CAA5                 mov     ds, ax
DOSCODE:CAA7                 assume ds:nothing
DOSCODE:CAA7                 mov     es, ax
DOSCODE:CAA9                 assume es:nothing
DOSCODE:CAA9                 mov     di, 0Fh
DOSCODE:CAAC                 mov     cx, 10h
DOSCODE:CAAF                 mov     al, 0FFh
DOSCODE:CAB1                 repe scasb
DOSCODE:CAB3                 inc     di
DOSCODE:CAB4                 mov     si, di
DOSCODE:CAB6                 mov     ax, bx
DOSCODE:CAB8                 dec     ax
DOSCODE:CAB9                 mov     es, ax
DOSCODE:CABB                 assume es:nothing
DOSCODE:CABB                 mov     di, 0Fh
DOSCODE:CABE                 mov     cl, 4
DOSCODE:CAC0                 mov     ax, si
DOSCODE:CAC2                 not     ax
DOSCODE:CAC4                 shr     ax, cl
DOSCODE:CAC6                 jz      short loc_CAD1
DOSCODE:CAC8                 mov     dx, ds
DOSCODE:CACA                 sub     dx, ax
DOSCODE:CACC                 mov     ds, dx
DOSCODE:CACE                 assume ds:nothing
DOSCODE:CACE                 or      si, 0FFF0h
DOSCODE:CAD1
DOSCODE:CAD1 loc_CAD1:                               ; ...
DOSCODE:CAD1                 mov     ax, di
DOSCODE:CAD3                 not     ax
DOSCODE:CAD5                 shr     ax, cl
DOSCODE:CAD7                 jz      short scan_com
DOSCODE:CAD9                 mov     dx, es
DOSCODE:CADB                 sub     dx, ax
DOSCODE:CADD                 mov     es, dx
DOSCODE:CADF                 assume es:nothing
DOSCODE:CADF                 or      di, 0FFF0h
DOSCODE:CAE2
DOSCODE:CAE2 scan_com:                               ; ...
DOSCODE:CAE2                 lodsb
DOSCODE:CAE3                 mov     dl, al
DOSCODE:CAE5                 dec     si
DOSCODE:CAE6                 lodsw
DOSCODE:CAE7                 mov     cx, ax
DOSCODE:CAE9                 inc     si
DOSCODE:CAEA                 mov     al, dl
DOSCODE:CAEC                 and     al, 0FEh
DOSCODE:CAEE                 cmp     al, 0B0h
DOSCODE:CAF0                 jnz     short loc_CAF8
DOSCODE:CAF2                 lodsb
DOSCODE:CAF3                 rep stosb
DOSCODE:CAF5                 jmp     short loc_CAFE
DOSCODE:CAF7 ; ---------------------------------------------------------------------------
DOSCODE:CAF7                 nop
DOSCODE:CAF8
DOSCODE:CAF8 loc_CAF8:                               ; ...
DOSCODE:CAF8                 cmp     al, 0B2h
DOSCODE:CAFA                 jnz     short near ptr loc_CB66+1
DOSCODE:CAFC                 rep movsb
DOSCODE:CAFE
DOSCODE:CAFE loc_CAFE:                               ; ...
DOSCODE:CAFE                 mov     al, dl
DOSCODE:CB00                 test    al, 1
DOSCODE:CB02                 call    sub_CB0B
DOSCODE:CB05                 call    word ptr ss:0D69h
DOSCODE:CB0A                 retn
DOSCODE:CB0B
DOSCODE:CB0B ; =============== S U B R O U T I N E =======================================
DOSCODE:CB0B
DOSCODE:CB0B
DOSCODE:CB0B sub_CB0B        proc near               ; ...
DOSCODE:CB0B                 push    bx
DOSCODE:CB0C                 mov     bx, es
DOSCODE:CB0E                 cmp     bx, 0FFFh
DOSCODE:CB12                 jbe     short loc_CB16
DOSCODE:CB14                 pop     bx
DOSCODE:CB15                 retn
DOSCODE:CB16 ; ---------------------------------------------------------------------------
DOSCODE:CB16
DOSCODE:CB16 loc_CB16:                               ; ...
DOSCODE:CB16                 push    ds
DOSCODE:CB17                 push    es
DOSCODE:CB18                 push    ax
DOSCODE:CB19                 push    cx
DOSCODE:CB1A                 push    si
DOSCODE:CB1B                 push    di
DOSCODE:CB1C                 sub     cx, 2
DOSCODE:CB1F                 jnb     short loc_CB24
DOSCODE:CB21                 jmp     loc_CBDA
DOSCODE:CB24 ; ---------------------------------------------------------------------------
DOSCODE:CB24
DOSCODE:CB24 loc_CB24:                               ; ...
DOSCODE:CB24                 mov     di, cx
DOSCODE:CB26                 mov     es, ax
DOSCODE:CB28                 assume es:nothing
DOSCODE:CB28                 mov     ss:87h, di
DOSCODE:CB2D                 cmp     word ptr es:[di], 4252h
DOSCODE:CB32                 jz      short loc_CB37
DOSCODE:CB34                 jmp     loc_CBDA
DOSCODE:CB37 ; ---------------------------------------------------------------------------
DOSCODE:CB37
DOSCODE:CB37 loc_CB37:                               ; ...
DOSCODE:CB37                 push    cs
DOSCODE:CB38                 pop     ds
DOSCODE:CB39                 assume ds:DOSCODE
DOSCODE:CB39                 add     di, 6Ch ; 'l'
DOSCODE:CB3C                 call    sub_CBE2
DOSCODE:CB3F                 jnz     short loc_CB63
DOSCODE:CB41                 mov     si, 0CA18h
DOSCODE:CB44                 mov     di, ss:87h
DOSCODE:CB49                 add     di, 28h ; '('
DOSCODE:CB4C                 mov     cl, 44h ; 'D'
DOSCODE:CB4E                 mov     bx, 8Eh
DOSCODE:CB51                 mov     ax, 0EF4Eh
DOSCODE:CB54                 call    chk_patchsum
DOSCODE:CB57                 jb      short loc_CB60
DOSCODE:CB59                 mov     si, 0C9B2h
DOSCODE:CB5C                 mov     cl, 66h ; 'f'
DOSCODE:CB5E                 rep movsb
DOSCODE:CB60
DOSCODE:CB60 loc_CB60:                               ; ...
DOSCODE:CB60                 jmp     short loc_CBDA
DOSCODE:CB62 ; ---------------------------------------------------------------------------
DOSCODE:CB62                 nop
DOSCODE:CB63
DOSCODE:CB63 loc_CB63:                               ; ...
DOSCODE:CB63                 mov     di, 76h ; 'v'
DOSCODE:CB66
DOSCODE:CB66 loc_CB66:                               ; ...
DOSCODE:CB66                 call    sub_CBE2
DOSCODE:CB69                 jnz     short loc_CBA8
DOSCODE:CB6B                 mov     si, 0CA5Ch
DOSCODE:CB6E                 mov     di, 32h ; '2'
DOSCODE:CB71                 mov     cl, 44h ; 'D'
DOSCODE:CB73                 mov     bx, 8Ch
DOSCODE:CB76                 mov     ax, 78B2h
DOSCODE:CB79                 call    chk_patchsum
DOSCODE:CB7C                 jnb     short loc_CB8E
DOSCODE:CB7E                 mov     si, 0CA5Ch
DOSCODE:CB81                 mov     cl, 44h ; 'D'
DOSCODE:CB83                 mov     bx, 81h
DOSCODE:CB86                 mov     ax, 1C47h
DOSCODE:CB89                 call    chk_patchsum
DOSCODE:CB8C                 jb      short loc_CBDA
DOSCODE:CB8E
DOSCODE:CB8E loc_CB8E:                               ; ...
DOSCODE:CB8E                 mov     si, 0C9B2h
DOSCODE:CB91                 mov     cl, 3
DOSCODE:CB93                 rep movsb
DOSCODE:CB95                 mov     ax, 4890h
DOSCODE:CB98                 stosw
DOSCODE:CB99                 inc     si
DOSCODE:CB9A                 inc     si
DOSCODE:CB9B                 mov     cl, 14h
DOSCODE:CB9D                 rep movsb
DOSCODE:CB9F                 stosw
DOSCODE:CBA0                 inc     si
DOSCODE:CBA1                 inc     si
DOSCODE:CBA2                 mov     cl, 4Bh ; 'K'
DOSCODE:CBA4                 rep movsb
DOSCODE:CBA6                 jmp     short loc_CBDA
DOSCODE:CBA8 ; ---------------------------------------------------------------------------
DOSCODE:CBA8
DOSCODE:CBA8 loc_CBA8:                               ; ...
DOSCODE:CBA8                 mov     di, 74h ; 't'
DOSCODE:CBAB                 call    sub_CBE2
DOSCODE:CBAE                 jnz     short loc_CBDA
DOSCODE:CBB0                 mov     si, 0CAA0h
DOSCODE:CBB3                 mov     di, 32h ; '2'
DOSCODE:CBB6                 mov     cl, 42h ; 'B'
DOSCODE:CBB8                 mov     bx, 8Bh
DOSCODE:CBBB                 mov     ax, 4EDEh
DOSCODE:CBBE                 call    chk_patchsum
DOSCODE:CBC1                 jb      short loc_CBDA
DOSCODE:CBC3                 mov     si, 0C9B2h
DOSCODE:CBC6                 mov     cl, 3
DOSCODE:CBC8                 rep movsb
DOSCODE:CBCA                 mov     al, 48h ; 'H'
DOSCODE:CBCC                 stosb
DOSCODE:CBCD                 inc     si
DOSCODE:CBCE                 inc     si
DOSCODE:CBCF                 mov     cl, 14h
DOSCODE:CBD1                 rep movsb
DOSCODE:CBD3                 stosb
DOSCODE:CBD4                 inc     si
DOSCODE:CBD5                 inc     si
DOSCODE:CBD6                 mov     cl, 4Bh ; 'K'
DOSCODE:CBD8                 rep movsb
DOSCODE:CBDA
DOSCODE:CBDA loc_CBDA:                               ; ...
DOSCODE:CBDA                 pop     di
DOSCODE:CBDB                 pop     si
DOSCODE:CBDC                 pop     cx
DOSCODE:CBDD                 pop     ax
DOSCODE:CBDE                 pop     es
DOSCODE:CBDF                 pop     ds
DOSCODE:CBE0                 assume ds:nothing
DOSCODE:CBE0                 pop     bx
DOSCODE:CBE1                 retn
DOSCODE:CBE1 sub_CB0B        endp
DOSCODE:CBE1
DOSCODE:CBE2
DOSCODE:CBE2 ; =============== S U B R O U T I N E =======================================
DOSCODE:CBE2
DOSCODE:CBE2
DOSCODE:CBE2 sub_CBE2        proc near               ; ...
DOSCODE:CBE2                 mov     si, offset scan_com
DOSCODE:CBE5                 mov     cx, 32
DOSCODE:CBE8                 repe cmpsb
DOSCODE:CBEA                 jz      short ccs_done
DOSCODE:CBEC                 cmp     byte ptr es:[di-1], 56h ; 'V'
DOSCODE:CBF1                 jnz     short ccs_done
DOSCODE:CBF3                 repe cmpsb
DOSCODE:CBF5
DOSCODE:CBF5 ccs_done:                               ; ...
DOSCODE:CBF5                 retn
DOSCODE:CBF5 sub_CBE2        endp
DOSCODE:CBF5
DOSCODE:CBF6
DOSCODE:CBF6 ; =============== S U B R O U T I N E =======================================
DOSCODE:CBF6
DOSCODE:CBF6
DOSCODE:CBF6 chk_patchsum    proc near               ; ...
DOSCODE:CBF6                 push    di
DOSCODE:CBF7                 repe cmpsb
DOSCODE:CBF9                 jnz     short loc_CC14
DOSCODE:CBFB                 mov     di, ss:87h
DOSCODE:CC00                 mov     cx, bx
DOSCODE:CC02                 mov     bx, ax
DOSCODE:CC04                 xor     ax, ax
DOSCODE:CC06
DOSCODE:CC06 loc_CC06:                               ; ...
DOSCODE:CC06                 add     ax, es:[di]
DOSCODE:CC09                 inc     di
DOSCODE:CC0A                 inc     di
DOSCODE:CC0B                 loop    loc_CC06
DOSCODE:CC0D                 pop     di
DOSCODE:CC0E                 cmp     ax, bx
DOSCODE:CC10                 jnz     short loc_CC14
DOSCODE:CC12                 clc
DOSCODE:CC13                 retn
DOSCODE:CC14 ; ---------------------------------------------------------------------------
DOSCODE:CC14
DOSCODE:CC14 loc_CC14:                               ; ...
DOSCODE:CC14                 stc
DOSCODE:CC15                 retn
DOSCODE:CC15 chk_patchsum    endp ; sp-analysis failed
DOSCODE:CC15
DOSCODE:CC15 ; ---------------------------------------------------------------------------
DOSCODE:CC16 RScanPattern1   db 0, 0, 20h, 0, 0, 0, 40h, 0
DOSCODE:CC1E                 db 1, 0
DOSCODE:CC20                 db 8Bh, 0Eh, 10h, 0, 90h, 0E2h, 0FEh, 0E8h
DOSCODE:CC28                 db 8Bh, 0Eh, 10h, 0, 0E2h, 0FEh, 0E8h
DOSCODE:CC2F ; ---------------------------------------------------------------------------
DOSCODE:CC2F
DOSCODE:CC2F RationalPatch:
DOSCODE:CC2F                 cld
DOSCODE:CC30                 pusha
DOSCODE:CC31                 push    es
DOSCODE:CC32                 push    ds
DOSCODE:CC33                 mov     di, 0Ah
DOSCODE:CC36                 push    cs
DOSCODE:CC37                 pop     ds
DOSCODE:CC38                 assume ds:DOSCODE
DOSCODE:CC38                 mov     si, 0CC16h
DOSCODE:CC3B                 mov     cx, 0Ah
DOSCODE:CC3E                 repe cmpsb
DOSCODE:CC40                 jnz     short loc_CC8C
DOSCODE:CC42                 mov     ax, es:0
DOSCODE:CC46                 cmp     ax, 15Ch
DOSCODE:CC49                 jb      short loc_CC8C
DOSCODE:CC4B                 cmp     ax, 17Fh
DOSCODE:CC4E                 ja      short loc_CC8C
DOSCODE:CC50                 call    sub_C986
DOSCODE:CC53                 jnz     short loc_CC8C
DOSCODE:CC55                 mov     cx, es:16h
DOSCODE:CC5A                 sub     cx, 200h
DOSCODE:CC5E                 mov     es, word ptr es:20h
DOSCODE:CC63                 mov     si, 0CC20h
DOSCODE:CC66                 mov     dx, 8
DOSCODE:CC69                 call    ScanCodeSeq
DOSCODE:CC6C                 jz      short loc_CC79
DOSCODE:CC6E                 mov     si, 0CC28h
DOSCODE:CC71                 mov     dx, 0Fh
DOSCODE:CC74                 call    ScanCodeSeq
DOSCODE:CC77                 jnz     short loc_CC8C
DOSCODE:CC79
DOSCODE:CC79 loc_CC79:                               ; ...
DOSCODE:CC79                 mov     al, 9Ah
DOSCODE:CC7B                 stosb
DOSCODE:CC7C                 mov     ax, 1126h
DOSCODE:CC7F                 stosw
DOSCODE:CC80                 mov     ax, ss
DOSCODE:CC82                 stosw
DOSCODE:CC83                 mov     cx, dx
DOSCODE:CC85                 sub     cx, 6
DOSCODE:CC88                 mov     al, 90h
DOSCODE:CC8A                 rep stosb
DOSCODE:CC8C
DOSCODE:CC8C loc_CC8C:                               ; ...
DOSCODE:CC8C                 pop     ds
DOSCODE:CC8D                 assume ds:nothing
DOSCODE:CC8D                 pop     es
DOSCODE:CC8E                 popa
DOSCODE:CC8F                 retn
DOSCODE:CC8F ; ---------------------------------------------------------------------------
DOSCODE:CC90                 db 89h, 26h, 48h, 1
DOSCODE:CC94                 db 8Ch, 0Eh, 4Ch, 1
DOSCODE:CC98                 db 0C7h, 6, 4Ah, 1, 0, 1
DOSCODE:CC9E                 db 8Ch, 0Eh, 13h, 1
DOSCODE:CCA2                 db 0B8h, 20h, 1
DOSCODE:CCA5                 db 0BEh, 0, 1
DOSCODE:CCA8
DOSCODE:CCA8 ; =============== S U B R O U T I N E =======================================
DOSCODE:CCA8
DOSCODE:CCA8
DOSCODE:CCA8 IsCopyProt      proc near               ; ...
DOSCODE:CCA8                 cmp     word ptr ds:11Bh, 5343h
DOSCODE:CCAE                 jnz     short CP_done
DOSCODE:CCB0                 cmp     word ptr ds:173h, 5044h
DOSCODE:CCB6                 jnz     short CP_done
DOSCODE:CCB8                 cmp     word ptr ds:146h, 0F413h
DOSCODE:CCBE                 jnz     short CP_done
DOSCODE:CCC0                 cmp     word ptr ds:124h, 8000h
DOSCODE:CCC6                 jnz     short CP_done
DOSCODE:CCC8                 push    cs
DOSCODE:CCC9                 pop     es
DOSCODE:CCCA                 assume es:DOSCODE
DOSCODE:CCCA                 mov     di, 0CC90h
DOSCODE:CCCD                 mov     si, 175h
DOSCODE:CCD0                 mov     cx, 18h
DOSCODE:CCD3                 repe cmpsb
DOSCODE:CCD5                 jnz     short CP_done
DOSCODE:CCD7                 mov     byte ptr ss:85h, 0Ah
DOSCODE:CCDD
DOSCODE:CCDD CP_done:                                ; ...
DOSCODE:CCDD                 retn
DOSCODE:CCDD IsCopyProt      endp
DOSCODE:CCDD
DOSCODE:CCDE ; ---------------------------------------------------------------------------
DOSCODE:CCDE
DOSCODE:CCDE initiret:                               ; ...
DOSCODE:CCDE                 iret
DOSCODE:CCDE ; ---------------------------------------------------------------------------
DOSCODE:CCDF InitBioDataSeg  dw 70h                  ; ...
DOSCODE:CCE1
DOSCODE:CCE1 ; =============== S U B R O U T I N E =======================================
DOSCODE:CCE1
DOSCODE:CCE1
DOSCODE:CCE1 ParaRound       proc near               ; ...
DOSCODE:CCE1                 add     ax, 0Fh
DOSCODE:CCE4                 rcr     ax, 1
DOSCODE:CCE6                 shr     ax, 1
DOSCODE:CCE8                 shr     ax, 1
DOSCODE:CCEA                 shr     ax, 1
DOSCODE:CCEC                 retn
DOSCODE:CCEC ParaRound       endp
DOSCODE:CCEC
DOSCODE:CCED
DOSCODE:CCED ; =============== S U B R O U T I N E =======================================
DOSCODE:CCED
DOSCODE:CCED
DOSCODE:CCED WhatCPUType     proc near               ; ...
DOSCODE:CCED                 pushf
DOSCODE:CCEE                 push    bx
DOSCODE:CCEF                 xor     bx, bx
DOSCODE:CCF1                 xor     ax, ax
DOSCODE:CCF3                 push    ax
DOSCODE:CCF4                 popf
DOSCODE:CCF5                 pushf
DOSCODE:CCF6                 pop     ax
DOSCODE:CCF7                 and     ax, 0F000h
DOSCODE:CCFA                 cmp     ax, 0F000h
DOSCODE:CCFD                 jz      short loc_CD0D
DOSCODE:CCFF                 mov     ax, 0F000h
DOSCODE:CD02                 push    ax
DOSCODE:CD03                 popf
DOSCODE:CD04                 pushf
DOSCODE:CD05                 pop     ax
DOSCODE:CD06                 and     ax, 0F000h
DOSCODE:CD09                 jz      short loc_CD0C
DOSCODE:CD0B                 inc     bx
DOSCODE:CD0C
DOSCODE:CD0C loc_CD0C:                               ; ...
DOSCODE:CD0C                 inc     bx
DOSCODE:CD0D
DOSCODE:CD0D loc_CD0D:                               ; ...
DOSCODE:CD0D                 mov     ax, bx
DOSCODE:CD0F                 pop     bx
DOSCODE:CD10                 popf
DOSCODE:CD11                 retn
DOSCODE:CD11 WhatCPUType     endp
DOSCODE:CD11
DOSCODE:CD12 ; ---------------------------------------------------------------------------
DOSCODE:CD12
DOSCODE:CD12 DOSINIT:                                ; ...
DOSCODE:CD12                 cli
DOSCODE:CD13                 cld
DOSCODE:CD14                 push    dx              ; top of memory (memory size in paragraphs)
DOSCODE:CD15                 push    si              ; 0
DOSCODE:CD16                 push    ds              ; IBMDOS.SYS loading segment
DOSCODE:CD17                 push    di              ; 0
DOSCODE:CD18                 mov     bx, es          ; CURRENT_DOS_LOCATION (segment)
DOSCODE:CD1A                 mov     ax, 0D20Fh      ; MEMSTRT ; get offset of end of init code
DOSCODE:CD1D                 add     ax, 0Fh         ; round up
DOSCODE:CD20                 and     ax, 0FFF0h
DOSCODE:CD23                 mov     si, ax          ; DOSDATA segment offset in IBMDOS.SYS
DOSCODE:CD25                 push    cs
DOSCODE:CD26                 pop     ds              ; DOSCODE segment
DOSCODE:CD27                 assume ds:DOSCODE
DOSCODE:CD27                 mov     es, cs:InitBioDataSeg ; BIOSDATA segment (always 0070h)
DOSCODE:CD2C                 assume es:nothing
DOSCODE:CD2C                 mov     es, word ptr es:3 ; DOSDATA segment ptr
DOSCODE:CD31                 assume es:DOSCODE
DOSCODE:CD31                 xor     di, di          ; offset 0
DOSCODE:CD33                 mov     cx, 1346h       ; DOSDATA size (4934 bytes)
DOSCODE:CD36                 rep movsb
DOSCODE:CD38                 pop     di
DOSCODE:CD39                 pop     ds
DOSCODE:CD3A                 assume ds:nothing
DOSCODE:CD3A                 pop     si
DOSCODE:CD3B                 pop     dx
DOSCODE:CD3C                 push    es
DOSCODE:CD3D                 push    ds
DOSCODE:CD3E                 pop     es
DOSCODE:CD3F                 assume es:nothing
DOSCODE:CD3F                 pop     ds
DOSCODE:CD40                 mov     ds:BiosComBlockPtr, di ; CURRENT_DOS_LOCATION (offset = 0)
DOSCODE:CD44                 mov     ds:BiosComBlockPtr+2, bx ; CURRENT_DOS_LOCATION (segment)
DOSCODE:CD48                 mov     cs:DosDSeg, ds
DOSCODE:CD4D                 mov     cs:LowInt23_SEG, ds
DOSCODE:CD52                 mov     cs:LowInt24_SEG, ds
DOSCODE:CD57                 mov     cs:LowInt28_SEG, ds
DOSCODE:CD5C                 mov     ds:ENDMEM, dx
DOSCODE:CD60                 mov     ds:USER_SP, sp
DOSCODE:CD64                 mov     ds:USER_SS, ss
DOSCODE:CD68                 push    ds
DOSCODE:CD69                 pop     ss
DOSCODE:CD6A                 mov     sp, offset DSKSTACK ; "@#IBM:12.01.2003.build_1.32#@ IBMDOS.CO"...
DOSCODE:CD6D                 mov     ax, offset RetExePatch
DOSCODE:CD70                 mov     ds:FixExePatch, ax
DOSCODE:CD73                 mov     ds:UnknownPatch, ax
DOSCODE:CD76                 mov     ds:ChkCopyProt, ax
DOSCODE:CD79                 call    WhatCPUType
DOSCODE:CD7C                 cmp     al, 2
DOSCODE:CD7E                 mov     ax, offset Rational386Patch
DOSCODE:CD81                 jnb     short di_set_patch
DOSCODE:CD83                 mov     ax, offset RetExePatch
DOSCODE:CD86
DOSCODE:CD86 di_set_patch:                           ; ...
DOSCODE:CD86                 mov     ds:Rational386PatchPtr, ax
DOSCODE:CD89                 mov     ax, cs
DOSCODE:CD8B                 mov     ds:TEMP_DOSLOC, ax
DOSCODE:CD8E                 mov     ds:NULDEV+2, es
DOSCODE:CD92                 mov     ds:NULDEV, si
DOSCODE:CD96                 mov     ds:word_EF1, ds
DOSCODE:CD9A                 push    si
DOSCODE:CD9B                 mov     cx, 7
DOSCODE:CD9E                 mov     si, offset InsTBL_CONTPOS_seg
DOSCODE:CDA1
DOSCODE:CDA1 Instance_init_loop:                     ; ...
DOSCODE:CDA1                 mov     word ptr [si], ds
DOSCODE:CDA3                 add     si, 6
DOSCODE:CDA6                 loop    Instance_init_loop
DOSCODE:CDA8                 mov     cx, 5
DOSCODE:CDAB                 mov     si, offset OldInstanceJunk_6
DOSCODE:CDAE
DOSCODE:CDAE OldInstance_init_loop:                  ; ...
DOSCODE:CDAE                 mov     word ptr [si], ds
DOSCODE:CDB0                 add     si, 6
DOSCODE:CDB3                 loop    OldInstance_init_loop
DOSCODE:CDB5                 pop     si
DOSCODE:CDB6                 push    es
DOSCODE:CDB7                 pop     ds
DOSCODE:CDB8                 push    ds
DOSCODE:CDB9                 xor     ax, ax
DOSCODE:CDBB                 mov     ds, ax
DOSCODE:CDBD                 assume ds:DOSCODE
DOSCODE:CDBD                 mov     ax, 0CCDEh
DOSCODE:CDC0                 mov     word ptr 0:0A8h, ax
DOSCODE:CDC3                 mov     ax, cs
DOSCODE:CDC5                 mov     word ptr 0:0A8+2, ax
DOSCODE:CDC8                 pop     ds
DOSCODE:CDC9                 assume ds:nothing
DOSCODE:CDC9                 call    CHARINIT
DOSCODE:CDCC                 push    si
DOSCODE:CDCD                 push    ss
DOSCODE:CDCE                 pop     es
DOSCODE:CDCF                 mov     di, offset SFT0_SFTable
DOSCODE:CDD2                 mov     ax, 3
DOSCODE:CDD5                 stosw                   ; SF_ENTRY.sf_ref_count
DOSCODE:CDD6                 dec     al
DOSCODE:CDD8                 stosw                   ; .sf_mode
DOSCODE:CDD9                 xor     al, al
DOSCODE:CDDB                 stosb                   ; .sf_attr
DOSCODE:CDDC                 mov     al, 0C3h
DOSCODE:CDDE                 stosw                   ; .sf_flags
DOSCODE:CDDF                 mov     ax, si
DOSCODE:CDE1                 stosw                   ; .sf_devptr
DOSCODE:CDE2                 mov     ax, ds
DOSCODE:CDE4                 stosw                   ; SFT0_SFTable + 9 ; .sf_devptr_hw
DOSCODE:CDE5                 xor     ax, ax          ; 0
DOSCODE:CDE7                 add     di, 32
DOSCODE:CDEA                 stosw                   ; SFT0_SFTable + 43 ; .sf_position
DOSCODE:CDEB                 stosw                   ; .sf_position_hw
DOSCODE:CDEC                 add     di, -34         ; 0FFDEh
DOSCODE:CDEF                 stosw                   ; SFT0_SFTable + 13 ; .sf_firclus
DOSCODE:CDF0                 stosw                   ; .sf_firclus_hw
DOSCODE:CDF1                 dec     ax              ; -1
DOSCODE:CDF2                 stosw                   ; SFT0_SFTable + 17 ; .sf_time
DOSCODE:CDF3                 stosw                   ; .sf_date
DOSCODE:CDF4                 inc     ax              ; 0
DOSCODE:CDF5                 stosw                   ; SFT0_SFTable + 21 ; .sf_size
DOSCODE:CDF6                 stosw                   ; .sf_size_hw
DOSCODE:CDF7                 add     di, 7           ; SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
DOSCODE:CDF7                                         ; SFT0_SFTable + 32
DOSCODE:CDFA                 add     si, 10          ; SYSDEV.NAME
DOSCODE:CDFD                 mov     cx, 4
DOSCODE:CE00                 rep movsw
DOSCODE:CE02                 mov     cl, 3
DOSCODE:CE04                 mov     al, 20h ; ' '
DOSCODE:CE06                 rep stosb               ; SFT0_SFTable + 40
DOSCODE:CE08                 pop     si
DOSCODE:CE09                 or      byte ptr [si+4], 3 ; ISCIN|ISCOUT
DOSCODE:CE0D                 mov     word ptr ss:BCON, si
DOSCODE:CE12                 mov     word ptr ss:BCON+2, ds
DOSCODE:CE17
DOSCODE:CE17 CHAR_INIT_LOOP:                         ; ...
DOSCODE:CE17                 lds     si, [si]
DOSCODE:CE19                 call    CHARINIT
DOSCODE:CE1C                 test    byte ptr [si+4], 8
DOSCODE:CE20                 jz      short CHAR_INIT_LOOP
DOSCODE:CE22                 mov     word ptr ss:BCLOCK, si
DOSCODE:CE27                 mov     word ptr ss:BCLOCK+2, ds
DOSCODE:CE2C                 mov     bp, 1346h       ; MEMSTRT ; ES:BP points to DPB
DOSCODE:CE2F                 mov     word ptr ss:DPBHEAD, bp
DOSCODE:CE34                 mov     word ptr ss:DPBHEAD+2, es
DOSCODE:CE39
DOSCODE:CE39 PERDRV:                                 ; ...
DOSCODE:CE39                 lds     si, [si]
DOSCODE:CE3B                 cmp     si, 0FFFFh
DOSCODE:CE3E                 jnz     short PERDRV2
DOSCODE:CE40                 jmp     CONTINIT
DOSCODE:CE43 ; ---------------------------------------------------------------------------
DOSCODE:CE43
DOSCODE:CE43 PERDRV2:                                ; ...
DOSCODE:CE43                 call    CHARINIT
DOSCODE:CE46                 test    word ptr [si+4], 8000h ; [SI+SYSDEV.ATT],DEVTYP
DOSCODE:CE4B                 jnz     short PERDRV
DOSCODE:CE4D                 mov     cl, ss:CALLUNIT
DOSCODE:CE52                 xor     ch, ch
DOSCODE:CE54                 mov     [si+10], cl     ; [si+SYSDEV.NAME]
DOSCODE:CE57                 mov     dl, ss:NUMIO
DOSCODE:CE5C                 xor     dh, dh
DOSCODE:CE5E                 add     ss:NUMIO, cl
DOSCODE:CE63                 push    ds
DOSCODE:CE64                 push    si
DOSCODE:CE65                 lds     bx, dword ptr ss:CALLBPB
DOSCODE:CE6A
DOSCODE:CE6A PERUNIT:                                ; ...
DOSCODE:CE6A                 mov     si, [bx]        ; DS:SI Points to BPB
DOSCODE:CE6C                 inc     bx
DOSCODE:CE6D                 inc     bx
DOSCODE:CE6E                 mov     es:[bp+0], dl   ; DPB.DRIVE
DOSCODE:CE72                 mov     es:[bp+1], dh   ; DPB.UNIT
DOSCODE:CE76                 push    bx
DOSCODE:CE77                 push    cx
DOSCODE:CE78                 push    dx
DOSCODE:CE79                 mov     dx, 4152h       ; 'RA'
DOSCODE:CE7C                 xor     cx, cx          ; 0
DOSCODE:CE7E                 mov     es:[bp+29], cx
DOSCODE:CE82                 cmp     [si+11], cx     ; BPB_FATSz16
DOSCODE:CE85                 jnz     short PERUNIT2  ; FAT (FAT12 or FAT16) -old DPB-
DOSCODE:CE87                 mov     es:[bp+57], cx  ; FAT32 -new- DPB
DOSCODE:CE8B                 mov     es:[bp+59], cx
DOSCODE:CE8F                 dec     cx
DOSCODE:CE90                 mov     es:[bp+31], cx
DOSCODE:CE94                 mov     es:[bp+33], cx
DOSCODE:CE98                 mov     cx, 4558h       ; 'XE'
DOSCODE:CE9B
DOSCODE:CE9B PERUNIT2:                               ; ...
DOSCODE:CE9B                 call    $SETDPB
DOSCODE:CE9E                 mov     ax, es:[bp+2]
DOSCODE:CEA2                 cmp     ax, ss:MAXSEC
DOSCODE:CEA7                 jbe     short NOTMAX
DOSCODE:CEA9                 mov     ss:MAXSEC, ax
DOSCODE:CEAD
DOSCODE:CEAD NOTMAX:                                 ; ...
DOSCODE:CEAD                 mov     ax, bp
DOSCODE:CEAF                 add     ax, 61          ; next DPB (PCDOS 7.1 DPB size = 61)
DOSCODE:CEB2                 mov     es:[bp+25], ax  ; DPB.NEXT_DPB offset
DOSCODE:CEB6                 mov     word ptr es:[bp+27], es ; DPB.NEXT_DPB segment
DOSCODE:CEBA                 mov     byte ptr es:[bp+24], 0FFh ; DPB.FIRST_ACCESS = -1
DOSCODE:CEBF                 pop     dx
DOSCODE:CEC0                 pop     cx
DOSCODE:CEC1                 pop     bx
DOSCODE:CEC2                 mov     ax, ds
DOSCODE:CEC4                 pop     si
DOSCODE:CEC5                 pop     ds
DOSCODE:CEC6                 mov     es:[bp+19], si  ; DPB.DRIVER_ADDR offset
DOSCODE:CECA                 mov     word ptr es:[bp+21], ds ; DPB.DRIVER_ADDR segment
DOSCODE:CECE                 push    ds
DOSCODE:CECF                 push    si
DOSCODE:CED0                 inc     dh
DOSCODE:CED2                 inc     dl
DOSCODE:CED4                 mov     ds, ax
DOSCODE:CED6                 add     bp, 61          ; DPBSIZ
DOSCODE:CED9                 loop    PERUNIT
DOSCODE:CEDB                 pop     si
DOSCODE:CEDC                 pop     ds
DOSCODE:CEDD                 jmp     PERDRV
DOSCODE:CEE0 ; ---------------------------------------------------------------------------
DOSCODE:CEE0
DOSCODE:CEE0 CONTINIT:                               ; ...
DOSCODE:CEE0                 sub     bp, 61          ; sub bp,DPBSIZ ; back up to last dpb
DOSCODE:CEE3                 mov     ax, 0FFFFh
DOSCODE:CEE6                 mov     [bp+25], ax     ; [bp+DPB.NEXT_DPB],-1
DOSCODE:CEE9                 mov     [bp+27], ax
DOSCODE:CEEC                 add     bp, 61
DOSCODE:CEEF                 push    ss
DOSCODE:CEF0                 pop     ds
DOSCODE:CEF1                 mov     ax, bp
DOSCODE:CEF3                 call    ParaRound
DOSCODE:CEF6                 mov     dx, ds
DOSCODE:CEF8                 add     dx, ax
DOSCODE:CEFA                 mov     bx, 0Fh
DOSCODE:CEFD                 mov     cx, ds:ENDMEM
DOSCODE:CF01                 mov     ds:DOSSEG_INIT, ds ; [DSKCHRET+3]
DOSCODE:CF05                 push    dx
DOSCODE:CF06                 mov     ax, ds:TEMP_DOSLOC
DOSCODE:CF09                 mov     es, ax
DOSCODE:CF0B                 mov     ds:TEMP_DOSLOC, 0FFFFh
DOSCODE:CF11                 call    patch_vec_segments
DOSCODE:CF14                 call    patch_misc_segments
DOSCODE:CF17                 mov     ds:TEMP_DOSLOC, es
DOSCODE:CF1B                 pop     dx
DOSCODE:CF1C                 xor     ax, ax
DOSCODE:CF1E                 mov     ds, ax
DOSCODE:CF20                 assume ds:DOSCODE
DOSCODE:CF20                 mov     es, ax          ; 0
DOSCODE:CF22                 assume es:DOSCODE
DOSCODE:CF22                 mov     di, 90h         ; INT 24h vector
DOSCODE:CF22                                         ; addr_int_fatal_abort
DOSCODE:CF25                 mov     ax, ss:TEMP_DOSLOC
DOSCODE:CF29                 mov     [di+2], ax      ; segment
DOSCODE:CF2C                 mov     di, 82h         ; INTBASE+2
DOSCODE:CF2F                 mov     word ptr 0, offset DIVOV
DOSCODE:CF35                 mov     di, 80h         ; INTBASE
DOSCODE:CF38                 mov     ax, offset irett
DOSCODE:CF3B                 mov     cx, 9
DOSCODE:CF3E
DOSCODE:CF3E iset1:                                  ; ...
DOSCODE:CF3E                 stosw
DOSCODE:CF3F                 inc     di
DOSCODE:CF40                 inc     di
DOSCODE:CF41                 loop    iset1
DOSCODE:CF43                 add     di, 4
DOSCODE:CF46                 mov     cx, 6
DOSCODE:CF49
DOSCODE:CF49 iset2:                                  ; ...
DOSCODE:CF49                 stosw
DOSCODE:CF4A                 inc     di
DOSCODE:CF4B                 inc     di
DOSCODE:CF4C                 loop    iset2
DOSCODE:CF4E                 add     di, 8
DOSCODE:CF51                 mov     cx, 14
DOSCODE:CF54
DOSCODE:CF54 iset3:                                  ; ...
DOSCODE:CF54                 stosw
DOSCODE:CF55                 inc     di
DOSCODE:CF56                 inc     di
DOSCODE:CF57                 loop    iset3
DOSCODE:CF59                 mov     word ptr 00BCh, offset INT2F ; mov word [02Fh*4],INT2F
DOSCODE:CF5F                 mov     ax, ss:TEMP_DOSLOC
DOSCODE:CF63                 mov     word ptr 00BEh, ax
DOSCODE:CF66                 mov     byte ptr 00C0h, 0EAh ; mov byte [ENTRYPOINT],mi_long_jmp
DOSCODE:CF6B                 mov     word ptr 00C1h, offset CALL_ENTRY ; mov word [ENTRYPOINT+1],CALL_ENTRY
DOSCODE:CF71                 mov     word ptr 0080h, offset QUIT ; mov word [addr_int_abort],QUIT
DOSCODE:CF77                 mov     word ptr 0084h, offset COMMAND ; mov word [addr_int_command],COMMAND
DOSCODE:CF7D                 mov     word ptr 0088h, 100h ; mov word [addr_int_terminate],100h
DOSCODE:CF83                 mov     word ptr 008Ah, dx ; mov word [addr_int_terminate+2],dx
DOSCODE:CF87                 mov     word ptr 0094h, offset ABSDRD ; mov word [addr_int_disk_read],ABSDRD
DOSCODE:CF8D                 mov     word ptr 0098h, offset ABSDWRT ; mov word [addr_int_disk_write],ABSDWRT
DOSCODE:CF93                 mov     word ptr 009Ch, offset stay_resident ; mov word [addr_int_keep_process],STAY_RESIDENT
DOSCODE:CF99                 push    ss
DOSCODE:CF9A                 pop     ds
DOSCODE:CF9B                 assume ds:nothing
DOSCODE:CF9B                 push    ss
DOSCODE:CF9C                 pop     es
DOSCODE:CF9D                 assume es:nothing
DOSCODE:CF9D                 push    dx
DOSCODE:CF9E                 inc     dx
DOSCODE:CF9F                 mov     ds:CurrentPDB, dx
DOSCODE:CFA3                 xor     di, di
DOSCODE:CFA5                 mov     es, dx
DOSCODE:CFA7                 xor     ax, ax
DOSCODE:CFA9                 mov     cx, 128
DOSCODE:CFAC                 rep stosw
DOSCODE:CFAE                 mov     ax, ds:ENDMEM
DOSCODE:CFB1                 call    SETMEM
DOSCODE:CFB4                 push    ss
DOSCODE:CFB5                 pop     ds
DOSCODE:CFB6                 mov     di, 24          ; PDB.JFN_TABLE
DOSCODE:CFB9                 xor     ax, ax
DOSCODE:CFBB                 stosw
DOSCODE:CFBC                 stosb
DOSCODE:CFBD                 mov     al, 0FFh
DOSCODE:CFBF                 mov     cx, 17          ; FILPERPROC-3
DOSCODE:CFC2                 rep stosb
DOSCODE:CFC4                 push    ss
DOSCODE:CFC5                 pop     es
DOSCODE:CFC6                 mov     word ptr ds:SFT_ADDR+2, ds
DOSCODE:CFCA                 mov     si, offset SysInitTable
DOSCODE:CFCD                 mov     word ptr es:[si+6], es ; [es:si+SYSI_EXT.Country_Tab+2]
DOSCODE:CFD1                 mov     word ptr es:[si+2], es ; [es:si+SYSI_EXT.SysInitVars+2]
DOSCODE:CFD5                 mov     word ptr es:BUFFHEAD+2, es
DOSCODE:CFDA                 mov     si, offset BufferQueue
DOSCODE:CFDD                 mov     word ptr es:BUFFHEAD, si
DOSCODE:CFE2                 pop     dx
DOSCODE:CFE3                 mov     word ptr ds:DMAADD+2, dx
DOSCODE:CFE7                 mov     es:arena_head, dx
DOSCODE:CFEC                 mov     ds, dx
DOSCODE:CFEE                 mov     byte ptr ds:0, 5Ah ; 'Z' ; [ARENA.SIGNATURE],arena_signature_end
DOSCODE:CFF3                 mov     word ptr ds:1, 0 ; [ARENA.OWNER],arena_owner_system
DOSCODE:CFF9                 mov     ax, ss:ENDMEM
DOSCODE:CFFD                 sub     ax, dx
DOSCODE:CFFF                 dec     ax
DOSCODE:D000                 mov     ds:3, ax
DOSCODE:D003                 mov     di, offset SFT0_SFTable ; SFTABL+SFT.SFTable
DOSCODE:D006                 mov     ax, 3
DOSCODE:D009                 stosw
DOSCODE:D00A                 mov     di, offset SysInitTable
DOSCODE:D00D                 inc     dx
DOSCODE:D00E                 mov     ds, dx
DOSCODE:D010                 mov     dx, offset _seg_reinit
DOSCODE:D013                 mov     cx, offset exepatch_start
DOSCODE:D016                 sub     cx, offset $STARTCODE ; sub cx, 3F10h
DOSCODE:D016                                         ; cx = (doscode - exepatch) - dosinit
DOSCODE:D01A                 mov     ax, offset initiret ; SYSBUF
DOSCODE:D01D                 sub     ax, offset $STARTCODE ; sub ax, 3F10h
DOSCODE:D01D                                         ; ax = size of doscode - dosinit
DOSCODE:D020                 mov     sp, ss:USER_SP
DOSCODE:D025                 mov     ss, ss:USER_SS
DOSCODE:D02A                 retf
DOSCODE:D02B
DOSCODE:D02B ; =============== S U B R O U T I N E =======================================
DOSCODE:D02B
DOSCODE:D02B
DOSCODE:D02B CHARINIT        proc near               ; ...
DOSCODE:D02B                 mov     ss:DEVCALL_REQLEN, 25 ; 19h
DOSCODE:D031                 mov     ss:DEVCALL_REQUNIT, 0
DOSCODE:D037                 mov     ss:DEVCALL_REQFUNC, 0
DOSCODE:D03D                 mov     ss:DEVCALL_REQSTAT, 0
DOSCODE:D044                 push    es
DOSCODE:D045                 push    bx
DOSCODE:D046                 push    ax
DOSCODE:D047                 mov     bx, offset DEVCALL_REQLEN ; offset DEVCALL
DOSCODE:D04A                 push    ss
DOSCODE:D04B                 pop     es
DOSCODE:D04C                 call    DEVIOCALL2
DOSCODE:D04F                 pop     ax
DOSCODE:D050                 pop     bx
DOSCODE:D051                 pop     es
DOSCODE:D052                 retn
DOSCODE:D052 CHARINIT        endp
DOSCODE:D052
DOSCODE:D053
DOSCODE:D053 ; =============== S U B R O U T I N E =======================================
DOSCODE:D053
DOSCODE:D053
DOSCODE:D053 check_XMM       proc near               ; ...
DOSCODE:D053                 push    ax
DOSCODE:D054                 mov     ax, 4300h
DOSCODE:D057                 int     2Fh             ; - Multiplex - XMS - INSTALLATION CHECK
DOSCODE:D057                                         ; Return: AL = 80h XMS driver installed
DOSCODE:D057                                         ; AL <> 80h no driver
DOSCODE:D059                 cmp     al, 80h
DOSCODE:D05B                 jnz     short cXMM_no_driver
DOSCODE:D05D                 push    bx
DOSCODE:D05E                 push    dx
DOSCODE:D05F                 push    ds
DOSCODE:D060                 push    es
DOSCODE:D061                 mov     ax, 4310h
DOSCODE:D064                 int     2Fh             ; - Multiplex - XMS - GET DRIVER ADDRESS
DOSCODE:D064                                         ; Return: ES:BX -> driver entry point
DOSCODE:D066                 mov     ds, cs:DosDSeg
DOSCODE:D06B                 mov     word ptr ds:XMMcontrol, bx
DOSCODE:D06F                 mov     word ptr ds:XMMcontrol+2, es
DOSCODE:D073
DOSCODE:D073 cXMMexit:
DOSCODE:D073                 clc
DOSCODE:D074                 pop     es
DOSCODE:D075                 pop     ds
DOSCODE:D076                 pop     dx
DOSCODE:D077                 pop     bx
DOSCODE:D078                 pop     ax
DOSCODE:D079                 retn
DOSCODE:D07A ; ---------------------------------------------------------------------------
DOSCODE:D07A
DOSCODE:D07A cXMM_no_driver:                         ; ...
DOSCODE:D07A                 stc
DOSCODE:D07B                 pop     ax
DOSCODE:D07C                 retn
DOSCODE:D07C check_XMM       endp
DOSCODE:D07C
DOSCODE:D07C ; ---------------------------------------------------------------------------
DOSCODE:D07D byte_D07D       db 0                    ; ...
DOSCODE:D07E ; ---------------------------------------------------------------------------
DOSCODE:D07E
DOSCODE:D07E _seg_reinit:                            ; ...
DOSCODE:D07E                 push    ds
DOSCODE:D07F                 mov     ds, cs:DosDSeg
DOSCODE:D084                 call    patch_misc_segments
DOSCODE:D087                 or      ax, ax
DOSCODE:D089                 jnz     short loc_D0D6
DOSCODE:D08B                 cmp     cs:byte_D07D, al
DOSCODE:D090                 jnz     short loc_D09A
DOSCODE:D092                 mov     ax, ds
DOSCODE:D094                 call    patch_vec_segments
DOSCODE:D097                 call    patch_offset
DOSCODE:D09A
DOSCODE:D09A loc_D09A:                               ; ...
DOSCODE:D09A                 mov     ax, es
DOSCODE:D09C                 mov     di, 0F7Ah
DOSCODE:D09F                 mov     cx, 8
DOSCODE:D0A2                 push    ds
DOSCODE:D0A3                 pop     es
DOSCODE:D0A4
DOSCODE:D0A4 loc_D0A4:                               ; ...
DOSCODE:D0A4                 inc     di
DOSCODE:D0A5                 inc     di
DOSCODE:D0A6                 stosw
DOSCODE:D0A7                 loop    loc_D0A4
DOSCODE:D0A9                 cmp     ax, 0F000h
DOSCODE:D0AC                 jb      short loc_D0DB
DOSCODE:D0AE                 call    check_XMM
DOSCODE:D0B1                 jb      short loc_D0DB
DOSCODE:D0B3                 call    patch_in_nops
DOSCODE:D0B6                 mov     byte ptr ds:0D66h, 1
DOSCODE:D0BB                 mov     word ptr ds:0D67h, 0CB02h
DOSCODE:D0C1                 mov     word ptr ds:61h, 0CCA8h
DOSCODE:D0C7                 call    WhatCPUType
DOSCODE:D0CA                 cmp     al, 1
DOSCODE:D0CC                 jnz     short loc_D0DB
DOSCODE:D0CE                 mov     word ptr ds:0D69h, 0CC2Fh
DOSCODE:D0D4                 jmp     short loc_D0DB
DOSCODE:D0D6 ; ---------------------------------------------------------------------------
DOSCODE:D0D6
DOSCODE:D0D6 loc_D0D6:                               ; ...
DOSCODE:D0D6                 mov     ax, es
DOSCODE:D0D8                 call    patch_vec_segments
DOSCODE:D0DB
DOSCODE:D0DB loc_D0DB:                               ; ...
DOSCODE:D0DB                 mov     cs:byte_D07D, 1
DOSCODE:D0E1                 pop     ds
DOSCODE:D0E2                 retf
DOSCODE:D0E3
DOSCODE:D0E3 ; =============== S U B R O U T I N E =======================================
DOSCODE:D0E3
DOSCODE:D0E3
DOSCODE:D0E3 patch_vec_segments proc near            ; ...
DOSCODE:D0E3                 push    es
DOSCODE:D0E4                 xor     cx, cx
DOSCODE:D0E6                 mov     es, cx
DOSCODE:D0E8                 assume es:DOSCODE
DOSCODE:D0E8                 mov     di, 82h
DOSCODE:D0EB                 mov     word ptr es:byte_0+2, ax
DOSCODE:D0EF                 inc     cx
DOSCODE:D0F0                 inc     cx
DOSCODE:D0F1
DOSCODE:D0F1 loc_D0F1:                               ; ...
DOSCODE:D0F1                 stosw
DOSCODE:D0F2                 inc     di
DOSCODE:D0F3                 inc     di
DOSCODE:D0F4                 loop    loc_D0F1
DOSCODE:D0F6                 add     di, 4
DOSCODE:D0F9                 stosw
DOSCODE:D0FA                 add     di, 6
DOSCODE:D0FD                 mov     cx, 4
DOSCODE:D100
DOSCODE:D100 loc_D100:                               ; ...
DOSCODE:D100                 stosw
DOSCODE:D101                 inc     di
DOSCODE:D102                 inc     di
DOSCODE:D103                 loop    loc_D100
DOSCODE:D105                 add     di, 4
DOSCODE:D108                 mov     cx, 6
DOSCODE:D10B
DOSCODE:D10B loc_D10B:                               ; ...
DOSCODE:D10B                 stosw
DOSCODE:D10C                 inc     di
DOSCODE:D10D                 inc     di
DOSCODE:D10E                 loop    loc_D10B
DOSCODE:D110                 add     di, 8
DOSCODE:D113                 mov     cx, 0Eh
DOSCODE:D116
DOSCODE:D116 loc_D116:                               ; ...
DOSCODE:D116                 stosw
DOSCODE:D117                 inc     di
DOSCODE:D118                 inc     di
DOSCODE:D119                 loop    loc_D116
DOSCODE:D11B                 mov     word ptr es:ShCol+3, ax
DOSCODE:D11F                 pop     es
DOSCODE:D120                 assume es:nothing
DOSCODE:D120                 retn
DOSCODE:D120 patch_vec_segments endp
DOSCODE:D120
DOSCODE:D121
DOSCODE:D121 ; =============== S U B R O U T I N E =======================================
DOSCODE:D121
DOSCODE:D121
DOSCODE:D121 patch_misc_segments proc near           ; ...
DOSCODE:D121                 push    bx
DOSCODE:D122                 push    es
DOSCODE:D123                 push    ax
DOSCODE:D124                 mov     ax, es
DOSCODE:D126                 push    ds
DOSCODE:D127                 pop     es
DOSCODE:D128                 mov     di, 90h
DOSCODE:D12B                 mov     bx, ds:0AA3h
DOSCODE:D12F                 mov     cx, 0Fh
DOSCODE:D132
DOSCODE:D132 loc_D132:                               ; ...
DOSCODE:D132                 inc     di
DOSCODE:D133                 inc     di
DOSCODE:D134                 cmp     bx, 0FFFFh
DOSCODE:D137                 jz      short loc_D13E
DOSCODE:D139                 cmp     bx, es:[di]
DOSCODE:D13C                 jnz     short loc_D13F
DOSCODE:D13E
DOSCODE:D13E loc_D13E:                               ; ...
DOSCODE:D13E                 stosw
DOSCODE:D13F
DOSCODE:D13F loc_D13F:                               ; ...
DOSCODE:D13F                 loop    loc_D132
DOSCODE:D141                 mov     si, 122Ah
DOSCODE:D144                 mov     word ptr [si+4Fh], ds
DOSCODE:D147                 mov     word ptr [si+54h], ds
DOSCODE:D14A                 mov     word ptr [si+59h], ds
DOSCODE:D14D                 mov     word ptr [si+5Eh], ds
DOSCODE:D150                 mov     word ptr [si+80h], ds
DOSCODE:D154                 mov     word ptr [si+63h], ds
DOSCODE:D157                 mov     si, offset FastOpenTable
DOSCODE:D15A                 cmp     ds:TEMP_DOSLOC, 0FFFFh
DOSCODE:D15F                 jz      short loc_D16A
DOSCODE:D161                 mov     cx, ds:TEMP_DOSLOC
DOSCODE:D165                 cmp     cx, [si+4]
DOSCODE:D168                 jnz     short loc_D16D
DOSCODE:D16A
DOSCODE:D16A loc_D16A:                               ; ...
DOSCODE:D16A                 mov     [si+4], ax
DOSCODE:D16D
DOSCODE:D16D loc_D16D:                               ; ...
DOSCODE:D16D                 pop     ax
DOSCODE:D16E                 pop     es
DOSCODE:D16F                 pop     bx
DOSCODE:D170                 retn
DOSCODE:D170 patch_misc_segments endp
DOSCODE:D170
DOSCODE:D171
DOSCODE:D171 ; =============== S U B R O U T I N E =======================================
DOSCODE:D171
DOSCODE:D171
DOSCODE:D171 patch_offset    proc near               ; ...
DOSCODE:D171                 push    es
DOSCODE:D172                 xor     ax, ax
DOSCODE:D174                 mov     es, ax
DOSCODE:D176                 assume es:DOSCODE
DOSCODE:D176                 mov     word ptr es:byte_0, offset ldivov
DOSCODE:D17D                 mov     di, 80h
DOSCODE:D180                 mov     ax, offset lirett
DOSCODE:D183                 mov     cx, 2
DOSCODE:D186
DOSCODE:D186 po_iset1:                               ; ...
DOSCODE:D186                 stosw
DOSCODE:D187                 inc     di
DOSCODE:D188                 inc     di
DOSCODE:D189                 loop    po_iset1
DOSCODE:D18B                 add     di, 4
DOSCODE:D18E                 stosw
DOSCODE:D18F                 add     di, 6
DOSCODE:D192                 mov     cx, 4
DOSCODE:D195
DOSCODE:D195 po_iset2:                               ; ...
DOSCODE:D195                 stosw
DOSCODE:D196                 inc     di
DOSCODE:D197                 inc     di
DOSCODE:D198                 loop    po_iset2
DOSCODE:D19A                 add     di, 4
DOSCODE:D19D                 mov     cx, 6
DOSCODE:D1A0
DOSCODE:D1A0 po_iset3:                               ; ...
DOSCODE:D1A0                 stosw
DOSCODE:D1A1                 inc     di
DOSCODE:D1A2                 inc     di
DOSCODE:D1A3                 loop    po_iset3
DOSCODE:D1A5                 add     di, 8
DOSCODE:D1A8                 mov     cx, 14
DOSCODE:D1AB
DOSCODE:D1AB po_iset4:                               ; ...
DOSCODE:D1AB                 stosw
DOSCODE:D1AC                 inc     di
DOSCODE:D1AD                 inc     di
DOSCODE:D1AE                 loop    po_iset4
DOSCODE:D1B0                 mov     word ptr es:0BCh, offset lint2f
DOSCODE:D1B7                 mov     byte ptr es:0C0h, 0EAh
DOSCODE:D1BD                 mov     word ptr es:0C1h, offset lcall_entry
DOSCODE:D1C4                 mov     word ptr es:80h, offset lquit
DOSCODE:D1CB                 mov     word ptr es:84h, offset lcommand
DOSCODE:D1D2                 mov     word ptr es:94h, offset labsdrd
DOSCODE:D1D9                 mov     word ptr es:98h, offset labsdwrt
DOSCODE:D1E0                 mov     word ptr es:9Ch, offset lstay_resident
DOSCODE:D1E7                 pop     es
DOSCODE:D1E8                 assume es:nothing
DOSCODE:D1E8                 retn
DOSCODE:D1E8 patch_offset    endp
DOSCODE:D1E8
DOSCODE:D1E8 ; ---------------------------------------------------------------------------
DOSCODE:D1E9 patch_table     dw offset ldivov        ; ...
DOSCODE:D1EB                 dw offset lquit
DOSCODE:D1ED                 dw offset lcommand
DOSCODE:D1EF                 dw offset labsdrd
DOSCODE:D1F1                 dw offset labsdwrt
DOSCODE:D1F3                 dw offset lstay_resident
DOSCODE:D1F5                 dw offset lint2f
DOSCODE:D1F7                 dw offset lcall_entry
DOSCODE:D1F9
DOSCODE:D1F9 ; =============== S U B R O U T I N E =======================================
DOSCODE:D1F9
DOSCODE:D1F9
DOSCODE:D1F9 patch_in_nops   proc near               ; ...
DOSCODE:D1F9                 push    ax
DOSCODE:D1FA                 push    si
DOSCODE:D1FB                 mov     si, offset patch_table
DOSCODE:D1FE                 mov     ax, 9090h
DOSCODE:D201                 mov     cx, 8
DOSCODE:D204
DOSCODE:D204 pin_loop:                               ; ...
DOSCODE:D204                 mov     di, cs:[si]
DOSCODE:D207                 stosw
DOSCODE:D208                 inc     si
DOSCODE:D209                 inc     si
DOSCODE:D20A                 loop    pin_loop
DOSCODE:D20C                 pop     si
DOSCODE:D20D                 pop     ax
DOSCODE:D20E                 retn
DOSCODE:D20E patch_in_nops   endp
DOSCODE:D20E
DOSCODE:D20E ; ---------------------------------------------------------------------------
DOSCODE:D20F                 db    0
DOSCODE:D20F DOSCODE         ends
DOSCODE:D20F
DOSCODE:D20F
DOSCODE:D20F                 end
