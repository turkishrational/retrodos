     1                                  ;*****************************************************************************
     2                                  ; MSDOS6.BIN (MSDOS 6.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 03/11/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 07/02/2024 - Retro DOS v4.2 ((Previous: 29/09/2023))
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 07/07/2018 (Retro DOS 3.0), 22/04/2019 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm msdos6.s -l msdos6.lst -o MSDOS6.BIN -Z error.txt)) 	
    11                                  ; ----------------------------------------------------------------------------
    12                                  ; Modified from 'msdos3.s' file of Retro DOS 3.0 source code (10/09/2018)
    13                                  ; ----------------------------------------------------------------------------
    14                                  ; Derived from 'msdos2.s' file of Retro DOS 2.0 source code (04/05/2018)
    15                                  ; ----------------------------------------------------------------------------
    16                                  ; Derived from 'MSCODE.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
    17                                  ; by Microsoft, 25/08/1983 (DOSLINK - 'MSDOS.ASM')
    18                                  ;*****************************************************************************
    19                                  ; main file: 'retrodos4.s'
    20                                  ; incbin 'MSDOS5.BIN'
    21                                  ;=============================================================================
    22                                  ; Modified from 'msdos6.s' (modified MSDOS 6.21 kernel src as Retro DOS v4.0)
    23                                  ; 28/07/2019  /// Retro DOS v4.0 (2022) -> Modified MSDOS 5.0 IO.SYS+MSDOS.SYS
    24                                  ;=============================================================================
    25                                  
    26                                  ; 30/12/2022 - Retro DOS v4.2 Kernel ('msdos6.s')
    27                                  ; Modified from 'msdos5.s' (29/12/2022, Retro DOS v4.1 Kernel) file
    28                                  ; as below:
    29                                  ;	1) MS-DOS version has been changed to 6.22 (It was 5.0) 
    30                                  ;	2) Retro DOS version has been changed to 4.2 (It was 4.1)
    31                                  ; (The content has not been changed except kernel version because the kernel
    32                                  ;  code is already compatible with MSDOS 6.x and it is optimized before.)
    33                                  ;	(But IO.SYS part of the kernel is not same with Retro DOS v4.1 code.)	
    34                                  
    35                                  ; ----------------------------------------------------------------------------
    36                                  
    37                                  ; 03/11/2022 - Erdogan Tan (Istanbul)
    38                                  
    39                                  ; Note:	This code is a part of Retro DOS 4.0 kernel source code
    40                                  ;	(as included binary, 'MSDOS5.BIN') 
    41                                  ;	Equivalent of MSDOS 5.0 MSDOS.SYS kernel file 
    42                                  ;	
    43                                  ;	((MSDOS 6.0 kernel source code has been modified by using disassembled
    44                                  ;	MSDOS 5.0 MSDOS.SYS)) -- Disassembler: HEX-RAYS IDA Pro --
    45                                  ;	((Disassembly -Reverse engineering- reference: MSDOS 6.0 kernel src))
    46                                        
    47                                  ;------ Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    48                                  ;	at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    49                                  ;	moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    50                                  ;	Then SYSINIT code to the next segment (4D6h for current version)..
    51                                  ;	SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    52                                  ;	(MSDOS5.BIN) according to request/setting in 'config.sys' file.
    53                                  
    54                                  ;=============================================================================
    55                                  ; Most of comments in this file are from the original MSDOS 6.0 source code
    56                                  ;-----------------------------------------------------------------------------
    57                                  
    58                                  ; MSDOS 6.0 Kernel source files:
    59                                  ;	MSDATA.ASM, 
    60                                  ; 		(MSHEAD.ASM, MSCONST.ASM,CONST2.ASM, MS_DATA.ASM,
    61                                  ;		DOSTAB.ASM, LMSTUB.ASM, WPATCH.INC, MPATCH.ASM)
    62                                  ;	MSTABLE.ASM, MSCODE.ASM, MSDOSME.ASM (DOSMES.INC), TIME.ASM,
    63                                  ;	GETSET.ASM, PARSE.ASM, MISC.ASM, MISC2.ASM, CRIT.ASM, CPMIO.ASM,
    64                                  ;	CPMIO2.ASM, FCBIO.ASM, FCBIO2.ASM, SEARCH.ASM, PATH.ASM, IOCTL.ASM,
    65                                  ;	DELETE.ASM, RENAME.ASM, FINFO.ASM, DUP.ASM, CREATE.ASM, OPEN.ASM,
    66                                  ;	DINFO.ASM, ISEARCH.ASM, BUF.ASM, ABORT.ASM,CLOSE.ASM, DIRCALL.ASM,
    67                                  ;	DISK.ASM, DISK2.ASM, DISK3.ASM, DIR.ASM, DIR2.ASM, DEV.ASM,
    68                                  ;	MKNODE.ASM, ROM.ASM, FCB.ASM, MSCTRLC.ASM, FAT.ASM, MSPROC.ASM
    69                                  ;	ALLOC.ASM, SRVCALL.ASM, UTIL.ASM, MACRO.ASM, MACRO2.ASM, HANDLE.ASM
    70                                  ;	FILE.ASM, LOCK.ASM, ROMFIND.ASM, SHARE.ASM, MSINIT.ASM, ORIGIN.ASM
    71                                  ;
    72                                  ; MSDOS 2.0 Kernel source files:
    73                                  ; 	MSDOS.ASM (STDSW.ASM + MSHEAD.ASM + MSDATA.ASM)
    74                                  ;	MSCODE.ASM
    75                                  ;	DOSMES.ASM ... STDIO.ASM, TIME.ASM, XENIX.ASM, XENIX2.ASM
    76                                  
    77                                  ;============================================================================
    78                                  ; DOSLINK
    79                                  ;============================================================================
    80                                  ;msdos mscode dosmes misc getset dircall alloc dev dir +
    81                                  ;disk fat rom stdbuf stdcall stdctrlc stdfcb stdproc +
    82                                  ;stdio time xenix xenix2
    83                                  
    84                                  ;============================================================================
    85                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    86                                  ; output in TASM syntax (July 2018 -> NASM syntax) [ IBMDOS.COM, 17/03/1987 ]
    87                                  ;============================================================================
    88                                  ;
    89                                  ; ###########################################################################
    90                                  ; #	This file is generated by The Interactive Disassembler (IDA)	    #
    91                                  ; #	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    #
    92                                  ; #			 Licensed to: Freeware version			    #
    93                                  ; ###########################################################################
    94                                  ;
    95                                  ; Input	MD5   :	75959BC417C19135B982F7959EE9C92A
    96                                  
    97                                  ; ---------------------------------------------------------------------------
    98                                  ; File Name   :	C:\Documents and Settings\Erdoðan Tan\Desktop\MSDOS621.BIN
    99                                  ; Format      :	Binary file
   100                                  ;============================================================================
   101                                  ; MSDOS621.BIN = MSDOS.SYS, 13/02/1994, 38138 bytes (MSDOS 6.21 kernel) 2019
   102                                  ;----------------------------------------------------------------------------
   103                                  ; MSDOS5.BIN = MSDOS.SYS, 11/11/1991, 37394 bytes (MSDOS 5.0 kernel) 2022
   104                                  
   105                                  ;============================================================================
   106                                  ; MSDOS.ASM
   107                                  ;============================================================================
   108                                  
   109                                  ;TITLE   Standard MSDOS
   110                                  ;NAME    MSDOS_2
   111                                  
   112                                  ; Number of disk I/O buffers
   113                                  
   114                                  ;	INCLUDE STDSW.ASM
   115                                  ;       INCLUDE MSHEAD.ASM
   116                                  ;       INCLUDE MSDATA.ASM
   117                                  
   118                                  ;	END
   119                                  
   120                                  ;============================================================================
   121                                  ; STDSW.ASM
   122                                  ;============================================================================
   123                                  
   124                                  TRUE    EQU     0FFFFH
   125                                  FALSE   EQU     ~TRUE ; NOT TRUE
   126                                  
   127                                  ; Use the switches below to produce the standard Microsoft version or the IBM
   128                                  ; version of the operating system
   129                                  ;MSVER   EQU	false
   130                                  ;IBM     EQU	true
   131                                  ;WANG    EQU	FALSE
   132                                  ;ALTVECT EQU	FALSE
   133                                  
   134                                  ; Set this switch to cause DOS to move itself to the end of memory
   135                                  ;HIGHMEM EQU     FALSE
   136                                  
   137                                  ;	IF      IBM
   138                                  ESCCH    EQU	 0			;character to begin escape seq.
   139                                  CANCEL   EQU	 27			;Cancel with escape
   140                                  TOGLINS  EQU	TRUE			;One key toggles insert mode
   141                                  TOGLPRN  EQU	TRUE			;One key toggles printer echo
   142                                  ZEROEXT  EQU	TRUE
   143                                  ;       ELSE
   144                                  ;       IF      WANG			;Are we assembling for WANG?
   145                                  ;ESCCH	 EQU	1FH			;Yes. Use 1FH for escape character
   146                                  ;       ELSE
   147                                  ;ESCCH	 EQU	1BH
   148                                  ;       ENDIF
   149                                  ;CANCEL  EQU	"X"-"@"			;Cancel with Ctrl-X
   150                                  ;TOGLINS EQU	WANG			;Separate keys for insert mode on
   151                                  					;and off if not WANG
   152                                  ;TOGLPRN EQU	FALSE			;Separate keys for printer echo on
   153                                  					;and off
   154                                  ;ZEROEXT EQU	TRUE
   155                                  ;        ENDIF
   156                                  
   157                                  ;============================================================================
   158                                  ; MSHEAD.ASM
   159                                  ;============================================================================
   160                                  
   161                                  ;--------------------------------------------------------------
   162                                  ; TITLE   MSHEAD.ASM -- MS-DOS DEFINITIONS
   163                                  ;--------------------------------------------------------------
   164                                  
   165                                  ; MS-DOS High-performance operating system for the 8086  version 1.28
   166                                  ;        by Microsoft MSDOS development group:
   167                                  ;           Tim Paterson (Ret.)
   168                                  ;           Aaron Reynolds
   169                                  ;           Nancy Panners (Parenting)
   170                                  ;           Mark Zbikowski
   171                                  ;           Chris Peters (BIOS) (ret.)
   172                                  
   173                                  ; ****************** Revision History *************************
   174                                  ;          >> EVERY change must noted below!! <<
   175                                  ;
   176                                  ; 0.34 12/29/80 General release, updating all past customers
   177                                  ; 0.42 02/25/81 32-byte directory entries added
   178                                  ; 0.56 03/23/81 Variable record and sector sizes
   179                                  ; 0.60 03/27/81 Ctrl-C exit changes, including register save on user stack
   180                                  ; 0.74 04/15/81 Recognize I/O devices with file names
   181                                  ; 0.75 04/17/81 Improve and correct buffer handling
   182                                  ; 0.76 04/23/81 Correct directory size when not 2^N entries
   183                                  ; 0.80 04/27/81 Add console input without echo, Functions 7 & 8
   184                                  ; 1.00 04/28/81 Renumber for general release
   185                                  ; 1.01 05/12/81 Fix bug in `STORE'
   186                                  ; 1.10 07/21/81 Fatal error trapping, NUL device, hidden files, date & time,
   187                                  ;               RENAME fix, general cleanup
   188                                  ; 1.11 09/03/81 Don't set CURRENT BLOCK to 0 on open; fix SET FILE SIZE
   189                                  ; 1.12 10/09/81 Zero high half of CURRENT BLOCK after all (CP/M programs don't)
   190                                  ; 1.13 10/29/81 Fix classic "no write-through" error in buffer handling
   191                                  ; 1.20 12/31/81 Add time to FCB; separate FAT from DPT; Kill SMALLDIR; Add
   192                                  ;               FLUSH and MAPDEV calls; allow disk mapping in DSKCHG; Lots
   193                                  ;               of smaller improvements
   194                                  ; 1.21 01/06/82 HIGHMEM switch to run DOS in high memory
   195                                  ; 1.22 01/12/82 Add VERIFY system call to enable/disable verify after write
   196                                  ; 1.23 02/11/82 Add defaulting to parser; use variable escape character Don't
   197                                  ;               zero extent field in IBM version (back to 1.01!)
   198                                  ; 1.24 03/01/82 Restore fcn. 27 to 1.0 level; add fcn. 28
   199                                  ; 1.25 03/03/82 Put marker (00) at end of directory to speed searches
   200                                  ; 1.26 03/03/82 Directory buffers searched as a circular queue, current buffer
   201                                  ;               is searched first when possible to minimize I/O
   202                                  ;      03/03/82 STORE routine optimized to tack on partial sector tail as
   203                                  ;               full sector write when file is growing
   204                                  ;      03/09/82 Multiple I/O buffers
   205                                  ;      03/29/82 Two bugs:  Delete all case resets search to start at beginning
   206                                  ;               of directory (infinite loop possible otherwise), DSKRESET
   207                                  ;               must invalidate all buffers (disk and directory).
   208                                  ; 1.27 03/31/82 Installable device drivers
   209                                  ;                 Function call 47 - Get pointer to device table list
   210                                  ;                 Function call 48 - Assign CON AUX LIST
   211                                  ;      04/01/82 Spooler interrupt (INT 28) added.
   212                                  ; 1.28 04/15/82 DOS retructured to use ASSUMEs and PROC labels around system
   213                                  ;               call entries.  Most CS relative references changed to SS
   214                                  ;               relative with an eye toward putting a portion of the DOS in
   215                                  ;               ROM.  DOS source also broken into header, data and code pieces
   216                                  ;      04/15/82 GETDMA and GETVECT calls added as 24 and 32.  These calls
   217                                  ;               return the current values.
   218                                  ;      04/15/82 INDOS flag implemented for interrupt processing along with
   219                                  ;               call to return flag location (call 29)
   220                                  ;      04/15/82 Volume ID attribute added
   221                                  ;      04/17/82 Changed ABORT return to user to a long ret from a long jump to
   222                                  ;               avoid a CS relative reference.
   223                                  ;      04/17/82 Put call to STATCHK in dispatcher to catch ^C more often
   224                                  ;      04/20/82 Added INT int_upooler into loop ^S wait
   225                                  ;      04/22/82 Dynamic disk I/O buffer allocation and call to manage them
   226                                  ;               call 49.
   227                                  ;      04/23/82 Added GETDSKPTDL as call 50, similar to GETFATPT(DL), returns
   228                                  ;               address of DPB
   229                                  ;      04/29/82 Mod to WRTDEV to look for ^C or ^S at console input when
   230                                  ;               writting to console device via file I/O.  Added a console
   231                                  ;               output attribute to devices.
   232                                  ;      04/30/82 Call to en/dis able ^C check in dispatcher Call 51
   233                                  ;      04/30/82 Code to allow assignment of func 1-12 to disk files as well
   234                                  ;               as devices....  pipes, redirection now possible
   235                                  ;      04/30/82 Expanded GETLIST call to 2.0 standard
   236                                  ;      05/04/82 Change to INT int_fatal_abort callout int HARDERR.  DOS SS
   237                                  ;               (data segment) stashed in ES, INT int_fatal_abort routines must
   238                                  ;               preserve ES.  This mod so HARDERR can be ROMed.
   239                                  ; 1.29 06/01/82 Installable block and character devices as per 2.0 spec
   240                                  ;      06/04/82 Fixed Bug in CLOSE regarding call to CHKFATWRT.  It got left
   241                                  ;               out back about 1.27 or so (oops).  ARR
   242                                  ; 1.30 06/07/82 Directory sector buffering added to main DOS buffer queue
   243                                  ; 1.40 06/15/82 Tree structured directories.  XENIX Path Parser MKDIR CHDIR
   244                                  ;               RMDIR Xenix calls
   245                                  ; 1.41 06/13/82 Made GETBUFFR call PLACEBUF
   246                                  ; 1.50 06/17/82 FATs cached in buffer pool, get FAT pointer calls disappear
   247                                  ;               Frees up lots of memory.
   248                                  ; 1.51 06/24/82 BREAKDOWN modified to do EXACT one sector read/write through
   249                                  ;               system buffers
   250                                  ; 1.52 06/30/82 OPEN, CLOSE, READ, WRITE, DUP, DUP2, LSEEK implemented
   251                                  ; 1.53 07/01/82 OPEN CLOSE mod for Xenix calls, saves and gets remote dir
   252                                  ; 1.54 07/11/82 Function calls 1-12 make use of new 2.0 PDB. Init code
   253                                  ;               changed to set file handle environment.
   254                                  ; 2.00 08/01/82 Number for IBM release
   255                                  ;      01/19/83 No environ bug in EXEC
   256                                  ;      01/19/83 MS-DOS OEM INT 21 extensions (SET_OEM_HANDLER)
   257                                  ;      01/19/83 Performance bug fix in cooked write to NUL
   258                                  ;      01/27/83 Growcnt fixed for 32-bits
   259                                  ;      01/27/83 Find-first problem after create
   260                                  ; 2.01 02/17/83 International DOS
   261                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   262                                  ;               an IBM PC
   263                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
   264                                  ; (MSHEAD.ASM, MSDOS 6.0, 1991) - mshead.asm 1.1 85/04/10 -
   265                                  ; 2.10 03/09/83 Start of NETWORK support
   266                                  ;		New Buffer structure
   267                                  ;		New Sytem file table structure
   268                                  ;		FCB moved to internal representation
   269                                  ;		DOS re-organized
   270                                  ; 2.11 04/21/83 Continuation of 2.10, preliminary Network
   271                                  ;		device interface.
   272                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   273                                  ;               an IBM PC
   274                                  ; 2.50 09/12/83 More network stuff
   275                                  ;
   276                                  ; *************************************************************
   277                                  
   278                                  ; ----------------------------------------------------------------------------
   279                                  ; EQUATES
   280                                  
   281                                  ; Interrupt Entry Points:
   282                                  
   283                                  ; INTBASE:      ABORT
   284                                  ; INTBASE+4:    COMMAND
   285                                  ; INTBASE+8:    BASE EXIT ADDRESS
   286                                  ; INTBASE+C:    CONTROL-C ABORT
   287                                  ; INTBASE+10H:  FATAL ERROR ABORT
   288                                  ; INTBASE+14H:  BIOS DISK READ
   289                                  ; INTBASE+18H:  BIOS DISK WRITE
   290                                  ; INTBASE+1CH:  END BUT STAY RESIDENT (NOT SET BY DOS)
   291                                  ; INTBASE+20H:  SPOOLER INTERRUPT
   292                                  ; INTBASE+40H:  Long jump to CALL entry point
   293                                  
   294                                  ENTRYPOINTSEG   EQU     0Ch
   295                                  MAXDIF          EQU     0FFFh
   296                                  SAVEXIT         EQU     10
   297                                  ; 06/05/2019
   298                                  WRAPOFFSET	EQU	0FEF0h  ; (MISC.ASM, MSDOS 6.0, 1991)
   299                                  
   300                                         ; INCLUDE DOSSYM.ASM
   301                                         ; INCLUDE DEVSYM.ASM
   302                                  
   303                                  ; SUBTTL ^C, terminate/abort/exit and Hard error actions
   304                                  ; PAGE
   305                                  ; There are three kinds of context resets that can occur during normal DOS
   306                                  ; functioning:  ^C trap, terminate/abort/exit, and Hard-disk error.  These must
   307                                  ; be handles in a clean fashion that allows nested executions along with the
   308                                  ; ability to trap one's own errors.
   309                                  ;
   310                                  ; ^C trap - A process may elect to catch his own ^Cs.  This is achieved by
   311                                  ;           using the $GET_INTERRUPT_VECTOR and $SET_INTERRUPT_VECTOR as
   312                                  ;           follows:
   313                                  ;
   314                                  ;           $GET_INTERRUPT_VECTOR for INT int_ctrl_c
   315                                  ;           Save it in static memory.
   316                                  ;           $SET_INTERRUPT_VECTOR for INT int_ctrl_c
   317                                  ;
   318                                  ;           The interrupt service routine must preserve all registers and
   319                                  ;           return carry set iff the operation is to be aborted (via abort
   320                                  ;           system call), otherwise, carry is reset and the operation is
   321                                  ;           restarted.  ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE
   322                                  ;           RESULTS.
   323                                  ;
   324                                  ;           To restore original ^C processing (done on terminate/abort/exit),
   325                                  ;           restore INT int_ctrl_c from the saved vector.
   326                                  ;
   327                                  ; Hard-disk error -- The interrupt service routine for INT int_fatal_abort must
   328                                  ;           also preserve registers and return one of three values in AL: 0 and
   329                                  ;           1 imply retry and ignore (???)  and 2 indicates an abort.  The user
   330                                  ;           himself is not to issue the abort, rather, the dos will do it for
   331                                  ;           him by simulating a normal abort/exit system call.  ANY DEVIATION
   332                                  ;           FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   333                                  ;
   334                                  ; terminate/abort/exit -- The user may not, under any circumstances trap an
   335                                  ;           abort call.  This is reserved for knowledgeable system programs.
   336                                  ;           ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   337                                  
   338                                  ;SUBTTL SEGMENT DECLARATIONS
   339                                  
   340                                  ; The following are all of the segments used.  They are declared in the order
   341                                  ; that they should be placed in the executable
   342                                  
   343                                  ;
   344                                  ; segment ordering for MSDOS
   345                                  ;
   346                                  
   347                                  ;START           SEGMENT BYTE PUBLIC 'START'
   348                                  ;START           ENDS
   349                                  
   350                                  ;CONSTANTS       SEGMENT BYTE PUBLIC 'CONST'
   351                                  ;CONSTANTS       ENDS
   352                                  
   353                                  ;DATA            SEGMENT WORD PUBLIC 'DATA'
   354                                  ;DATA            ENDS
   355                                  
   356                                  ;CODE            SEGMENT BYTE PUBLIC 'CODE'
   357                                  ;CODE            ENDS
   358                                  
   359                                  ;LAST            SEGMENT BYTE PUBLIC 'LAST'
   360                                  ;LAST            ENDS
   361                                  
   362                                  ;DOSGROUP    GROUP   CODE,CONSTANTS,DATA,LAST
   363                                  
   364                                  ; The following segment is defined such that the data/const classes appear
   365                                  ; before the code class for ROMification
   366                                  
   367                                  ;START		SEGMENT BYTE PUBLIC 'START'
   368                                  ;           	ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
   369                                  ;		JMP     DOSINIT
   370                                  ;START		ENDS
   371                                  
   372                                  ;============================================================================
   373                                  ; BPB.INC, MSDOS 6.0, 1991
   374                                  ;============================================================================
   375                                  ; 09/07/2018 - Retro DOS v3.0
   376                                  
   377                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   378                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   379                                  ;									   ;
   380                                  
   381                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   382                                  ;
   383                                  ;	The BPB contains information about the disk structure. It dates
   384                                  ;	back to the earliest FAT systems and so FAT information is
   385                                  ;	intermingled with physical driver information.
   386                                  ;
   387                                  ;	A boot sector contains a BPB for its device; for other disks
   388                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   389                                  ;	information in the DPB.
   390                                  ;
   391                                  ;	The BDS structure contains a BPB within it. 
   392                                  
   393                                  struc A_BPB
   394 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   395 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   396 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   397 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   398 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   399 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   400 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   401 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   402 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   403 0000000F ????                    .BPB_HEADS:		resw	1
   404 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   405 00000013 ????                    			resw	1
   406 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   407 00000017 ????                    			resw	1
   408 00000019 ????????????            			resb	6	; NOTE:  many times these
   409                                  ;					; 	 6 bytes are omitted
   410                                  ;					;	 when BPB manipulations
   411                                  ;					;	 are performed!
   412                                  .size:
   413                                  endstruc
   414                                  
   415                                  ;                                                                          ;
   416                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   417                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   418                                  
   419                                  ;============================================================================
   420                                  ; BUFFER.INC, MSDOS 6.0, 1991
   421                                  ;============================================================================
   422                                  ; 04/05/2019 - Retro DOS v4.0
   423                                  
   424                                  ; <Disk I/O Buffer Header>
   425                                  
   426                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   427                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   428                                  ;									   ;
   429                                  
   430                                  ; Field definition for I/O buffer information
   431                                  
   432                                  struc BUFFINFO
   433 00000000 ????                    .buf_next:	resw 1		; Pointer to next buffer in list
   434 00000002 ????                    .buf_prev:	resw 1		; Pointer to prev buffer in list
   435 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
   436                                  				; SFT table index (bit 7 = 1)
   437                                  				; = FFH if buffer free
   438 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
   439                                  				;	= 0 if Local device buffer
   440                                  				; Bit 6 = 1 if buffer dirty
   441                                  				; Bit 5 = Reserved
   442                                  				; Bit 4 = Search bit (bit 7 = 1)
   443                                  				; Bit 3 = 1 if buffer is DATA
   444                                  				; Bit 2 = 1 if buffer is DIR
   445                                  				; Bit 1 = 1 if buffer is FAT
   446                                  				; Bit 0 = Reserved
   447 00000006 ????????                .buf_sector:	resd 1		; Sector number of buffer (flags bit 7 = 0)
   448                                  ; The next two items are often refed as a word (flags bit 7 = 0)
   449 0000000A ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
   450 0000000B ????                    .buf_wrtcntinc:	resw 1		; "   "     "   , # sectors between each write
   451 0000000D ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
   452 00000011 ????                    .buf_fill:	resw 1		; How full buffer is (flags bit 7 = 1)
   453 00000013 ??                      .buf_reserved:	resb 1		; make DWORD boundary for 386
   454                                  .size:	; 20 bytes
   455                                  endstruc
   456                                  
   457                                  %define buf_offset	BUFFINFO.buf_sector ; 22/07/2019
   458                                  				;For buf_flags bit 7 = 1, this is the byte
   459                                  				;offset of the start of the buffer in
   460                                  				;the file pointed to by buf_ID. Thus
   461                                  				;the buffer starts at location
   462                                  				;buf_offset in the file and contains
   463                                  				;buf_fill bytes.
   464                                  
   465                                  BUFINSIZ        EQU     BUFFINFO.size
   466                                  
   467                                  buf_Free	EQU	0FFh	; buf_id of free buffer
   468                                  
   469                                  ;Flag byte masks
   470                                  buf_isnet	EQU	10000000B
   471                                  buf_dirty	EQU	01000000B
   472                                  ;***
   473                                  buf_visit	EQU	00100000B
   474                                  ;***
   475                                  buf_snbuf	EQU	00010000B
   476                                  
   477                                  buf_isDATA	EQU	00001000B
   478                                  buf_isDIR	EQU	00000100B
   479                                  buf_isFAT	EQU	00000010B
   480                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
   481                                  
   482                                  buf_NetID	EQU	BUFINSIZ
   483                                  
   484                                  ;                                                                          ;
   485                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   486                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   487                                  
   488                                  ;============================================================================
   489                                  ; DOSSSYM.INC, MSDOS 6.0, 1991
   490                                  ;============================================================================
   491                                  ; 04/05/2019 - Retro DOS v4.0
   492                                  
   493                                  ; <Control character definitions>
   494                                  
   495                                  c_DEL	    EQU     7Fh 	;    ASCII rubout or delete previous char
   496                                  c_BS	    EQU     08h 	; ^H ASCII backspace
   497                                  c_CR	    EQU     0Dh 	; ^M ASCII carriage return
   498                                  c_LF	    EQU     0Ah 	; ^J ASCII linefeed
   499                                  c_ETB	    EQU     17h 	; ^W ASCII end of transmission
   500                                  c_NAK	    EQU     15h 	; ^U ASCII negative acknowledge
   501                                  c_ETX	    EQU     03h 	; ^C ASCII end of text
   502                                  c_HT	    EQU     09h 	; ^I ASCII tab
   503                                  
   504                                  ; <User stack inside of system call>
   505                                  ; Location of user registers relative user stack pointer
   506                                  
   507                                  struc	user_env   ; user_environ
   508 00000000 ????                    .user_AX: resw 1
   509 00000002 ????                    .user_BX: resw 1
   510 00000004 ????                    .user_CX: resw 1
   511 00000006 ????                    .user_DX: resw 1
   512 00000008 ????                    .user_SI: resw 1
   513 0000000A ????                    .user_DI: resw 1
   514 0000000C ????                    .user_BP: resw 1
   515 0000000E ????                    .user_DS: resw 1
   516 00000010 ????                    .user_ES: resw 1
   517 00000012 ????                    .user_IP: resw 1
   518 00000014 ????                    .user_CS: resw 1
   519 00000016 ????                    .user_F:  resw 1
   520                                  .size:
   521                                  endstruc
   522                                  
   523                                  ; ---- <Disk map> ----
   524                                  
   525                                  ;	MSDOS partitions the disk into 4 sections:
   526                                  ;
   527                                  ;  phys sector 0:   +-------------------+
   528                                  ;	|	    | boot/reserved	|
   529                                  ;	|	    +-------------------+
   530                                  ;	|	    |  File allocation	|
   531                                  ;	v	    |	   table(s)	|
   532                                  ;		    |  (multiple copies |
   533                                  ;		    |	  are kept)	|
   534                                  ;		    +-------------------+
   535                                  ;		    |	  Directory	|
   536                                  ;		    +-------------------+
   537                                  ;		    |	  File space	|
   538                                  ;		    +-------------------+
   539                                  ;		    |	Unaddressable	|
   540                                  ;		    |  (to end of disk) |
   541                                  ;		    +-------------------+
   542                                  ;
   543                                  ; All partition boundaries are sector boundaries.  The size of the FAT is
   544                                  ; adjusted to maximize the file space addressable.
   545                                  
   546                                  ; <File allocation Table information>
   547                                  
   548                                  ; The File Allocation Table uses a 12-bit entry for each allocation unit on
   549                                  ; the disk.  These entries are packed, two for every three bytes.  The contents
   550                                  ; of entry number N is found by 1) multiplying N by 1.5; 2) adding the result
   551                                  ; to the base address of the Allocation Table; 3) fetching the 16-bit word
   552                                  ; at this address; 4) If N was odd (so that N*1.5 was not an integer), shift
   553                                  ; the word right four bits; 5) mask to 12 bits (AND with 0FFF hex).  Entry
   554                                  ; number zero is used as an end-of-file trap in the OS and is passed to the
   555                                  ; BIOS to help determine disk format.  Entry 1 is reserved for future use.
   556                                  ; The first available allocation unit is assigned entry number two, and even
   557                                  ; though it is the first, is called cluster 2.	Entries greater than 0FF8H
   558                                  ; (12-bit fats) or 0FFF8H (16-bit fats) are end of file marks; entries of zero
   559                                  ; are unallocated.  Otherwise, the contents of a FAT entry is the number of
   560                                  ; the next cluster in the file.
   561                                  ;
   562                                  ; Clusters with bad sectors are tagged with FF7H.  Any non-zero number would
   563                                  ; do because these clusters show as allocated, but are not part of any
   564                                  ; allocation chain and thus will never be allocated to a file.	A particular
   565                                  ; number is selected so that disk checking programs know what to do (ie.  a
   566                                  ; cluster with entry FF7H which is not in a chain is not an error).
   567                                  
   568                                  ;**	Character Type Flags
   569                                  ;
   570                                  ;	These flags are used in a lookup table indexed by the character code.
   571                                  ;	They're used to quickly classify characters when parsing paths.
   572                                  ;	I think that these are only used to parse FCBs - jgl
   573                                  
   574                                  FCHK	equ 1		; I think this means "normal name char, no chks needed" -jgl
   575                                  FDELIM	equ 2		; is a delimiter
   576                                  FSPCHK	equ 4		; set if character is not a space or equivalent
   577                                  FFCB	equ 8		; is valid in an FCB
   578                                  
   579                                  ;** Bit definitions for DOS_FLAG
   580                                  ;
   581                                  ; Bit 0 - this is set when a $open call is made from $exec. This is used in
   582                                  ;	  $open to indicate to the redirector that this open is being made
   583                                  ;	  by an exec call.
   584                                  ;
   585                                  ; Bit 2
   586                                  ;
   587                                  ; M003, M027:
   588                                  ;
   589                                  ; The start up code of MS PASCAL 3.2 programs depend on the 1M address wrap 
   590                                  ; if they load below 64K. This is a likely possiblity in DOS 5.x with DOS in
   591                                  ; the HMA. By default DOS will turn A20 OFF before Xferring control to the
   592                                  ; user program in the case of an Exec call. The next call to DOS will turn
   593                                  ; A20 line ON. It has been observed that MS PASCAL 3.2 start up does an int
   594                                  ; 21 ah=25h call before executing the faulty code. This will turn A20 On. 
   595                                  ; In order to support this we will set Bit 2 of this flag in the DOS exec
   596                                  ; call (msproc.asm) if DOS is running in the HMA. In $set_interrupt_vector in
   597                                  ; getset.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   598                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   599                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   600                                  ; Bit 2 will be unconditionally cleared here.
   601                                  ;
   602                                  ; M009, M027:
   603                                  ;
   604                                  ; Mace utilities MKEYRATE.COM version 1.0 copyright 1987 is an execpacked 
   605                                  ; program converted to a com file. Therefore if DOS is loaded high and if 
   606                                  ; this program is loaded below 64K it will blurt out "packed file is corrupt".
   607                                  ; This program does an int 21 ah=49h before executing the buggy execpacked
   608                                  ; code. This int21 call turns a20 on and hence the problem. In $dealloc
   609                                  ; alloc.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   610                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   611                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   612                                  ; Bit 2 will be unconditionally cleared here.
   613                                  
   614                                  EXECOPEN	EQU	00000001b	; bit 0 of DOS_FLAG
   615                                  SUPPRESS_WINA20	EQU	00000010b	; M025
   616                                  EXECA20OFF	EQU	00000100b	; bit 2 of DOS_FLAG
   617                                  
   618                                  ;============================================================================
   619                                  ; VECTOR.INC, MSDOS 6.0, 1991
   620                                  ;============================================================================
   621                                  ; 04/05/2019 - Retro DOS v4.0
   622                                  
   623                                  ; 09/07/2018 - Retro DOS v3.0 (VECTOR.INC, MSDOS 3.3, 1987)
   624                                  
   625                                  ; <interrupt definitions>
   626                                  
   627                                  INTTAB          EQU     20H
   628                                  INTBASE         EQU     4 * INTTAB
   629                                  ENTRYPOINT      EQU     INTBASE+40H
   630                                  
   631                                  ;	IF      ALTVECT
   632                                  ;ALTTAB  EQU     0F0H
   633                                  ;ALTBASE EQU     4 * ALTTAB
   634                                  ;	ENDIF
   635                                  
   636                                  ;
   637                                  ; interrupt assignments
   638                                  ;
   639                                  ;	IF	NOT ALTVECT
   640                                  int_abort	    EQU     INTTAB	; abort process
   641                                  int_command	    EQU     int_abort+1 ; call MSDOS
   642                                  int_terminate	    EQU     int_abort+2 ; int to terminate address
   643                                  int_ctrl_c	    EQU     int_abort+3 ; ^c trapper
   644                                  int_fatal_abort     EQU     int_abort+4 ; hard disk error
   645                                  int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   646                                  int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   647                                  int_keep_process    EQU     int_abort+7 ; terminate program and stay
   648                                  					; resident
   649                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   650                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   651                                  ;									   ;
   652                                  int_spooler	    EQU     int_abort+8 ; spooler call
   653                                  int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   654                                  int_IBM 	    EQU     int_abort+10; critical section maintenance
   655                                  ;									   ;
   656                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   657                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   658                                  ;	ELSE
   659                                  ;int_abort	    EQU     INTTAB	; abort process
   660                                  ;int_command	    EQU     int_abort+1 ; call MSDOS
   661                                  ;int_terminate	    EQU     ALTTAB	; int to terminate address
   662                                  ;int_ctrl_c	    EQU     int_terminate+1 ; ^c trapper
   663                                  ;int_fatal_abort    EQU     int_terminate+2 ; hard disk error
   664                                  ;int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   665                                  ;int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   666                                  ;int_keep_process   EQU     int_abort+7 ; terminate program and stay resident
   667                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   668                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   669                                  ;									   ;
   670                                  ;int_spooler	    EQU     int_terminate+3 ; spooler call
   671                                  ;int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   672                                  ;									   ;
   673                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   674                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   675                                  ;	ENDIF
   676                                  
   677                                  addr_int_abort		EQU    4 * int_abort
   678                                  addr_int_command	EQU    4 * int_command
   679                                  addr_int_terminate	EQU    4 * int_terminate
   680                                  addr_int_ctrl_c 	EQU    4 * int_ctrl_c
   681                                  addr_int_fatal_abort	EQU    4 * int_fatal_abort
   682                                  addr_int_disk_read	EQU    4 * int_disk_read
   683                                  addr_int_disk_write	EQU    4 * int_disk_write
   684                                  addr_int_keep_process	EQU    4 * int_keep_process
   685                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   686                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   687                                  ;									   ;
   688                                  addr_int_spooler	EQU    4 * int_spooler
   689                                  addr_int_fastcon	EQU    4 * int_fastcon
   690                                  addr_int_ibm		EQU    4 * int_IBM
   691                                  ;									   ;
   692                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   693                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   694                                  
   695                                  ;============================================================================
   696                                  ; DIRENT.INC, MSDOS 6.0, 1991
   697                                  ;============================================================================
   698                                  ; 04/05/2019 - Retro DOS v4.0
   699                                  
   700                                  ; BREAK <Directory entry>
   701                                  
   702                                  ;
   703                                  ;       +---------------------------+
   704                                  ;       |  (12 BYTE) filename/ext   |       0       0
   705                                  ;       +---------------------------+
   706                                  ;       |     (BYTE) attributes     |       11      B
   707                                  ;       +---------------------------+
   708                                  ;       |    (10 BYTE) reserved     |       12      C
   709                                  ;       +---------------------------+
   710                                  ;       | (WORD) time of last write |       22      16
   711                                  ;       +---------------------------+
   712                                  ;       | (WORD) date of last write |       24      18
   713                                  ;       +---------------------------+
   714                                  ;       |   (WORD) First cluster    |       26      1A
   715                                  ;       +---------------------------+
   716                                  ;       |     (DWORD) file size     |       28      1C
   717                                  ;       +---------------------------+
   718                                  ;
   719                                  ;   First byte of filename  = E5 -> free directory entry
   720                                  ;                           = 00 -> end of allocated directory
   721                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   722                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   723                                  ;
   724                                  struc dir_entry
   725 00000000 <res Bh>                .dir_name:	resb 11			; file name
   726 0000000B ??                      .dir_attr:	resb 1			; attribute bits
   727 0000000C ????                    .dir_codepg:	resw 1			; code page DOS 4.00
   728 0000000E ????                    .dir_extcluster: resw 1			; extended attribute starting cluster
   729 00000010 ??                      .dir_attr2:	resb 1			; reserved
   730 00000011 ??????????              .dir_pad:	resb 5			; reserved for expansion
   731 00000016 ????                    .dir_time:	resw 1			; time of last write
   732 00000018 ????                    .dir_date:	resw 1			; date of last write
   733 0000001A ????                    .dir_first:	resw 1			; first allocation unit of file
   734 0000001C ????                    .dir_size_l:	resw 1			; low 16 bits of file size
   735 0000001E ????                    .dir_size_h:	resw 1			; high 16 bits of file size
   736                                  .size:
   737                                  endstruc
   738                                  
   739                                  attr_read_only      EQU      1h
   740                                  attr_hidden         EQU      2h
   741                                  attr_system         EQU      4h
   742                                  attr_volume_id      EQU      8h
   743                                  attr_directory      EQU     10h
   744                                  attr_archive        EQU     20h
   745                                  attr_device	    EQU     40h	; This is a VERY special bit.
   746                                  				;   NO directory entry on a disk EVER
   747                                  				;   has this bit set. It is set non-zero
   748                                  				;   when a device is found by GETPATH
   749                                  
   750                                  attr_all            EQU     attr_hidden+attr_system+attr_directory
   751                                                                          ; OR of hard attributes for FINDENTRY
   752                                  
   753                                  attr_ignore         EQU     attr_read_only+attr_archive
   754                                                                          ; ignore this(ese) attribute(s)
   755                                                                          ; during search first/next
   756                                  
   757                                  attr_changeable     EQU     attr_read_only+attr_hidden+attr_system+attr_archive
   758                                                                          ; changeable via CHMOD
   759                                  
   760                                  DIRFREE		equ	0E5h	; stored in dir_name[0] to indicate free slot
   761                                  
   762                                  ;============================================================================
   763                                  ; DPB.INC, MSDOS 6.0, 1991
   764                                  ;============================================================================
   765                                  ; 24/04/2019 - Retro DOS v4.0
   766                                  
   767                                  ; 19/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 3.3, 1987)
   768                                  ; 07/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 6.0, 1991)
   769                                  
   770                                  ; ---------------------------------------------------------------------------
   771                                  ;**	DPB - Drive Parameter Block
   772                                  ;
   773                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
   774                                  ;	possibly inaccurate deductions from code study... - jgl
   775                                  ;
   776                                  ;	The DPB is DOS's main structure for describing block devices.
   777                                  ;	It contains info about the "Drive" intermingled with info about
   778                                  ;	the FAT file system which is presumably on the drive.  I don't know
   779                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
   780                                  ;
   781                                  ;	The DPBs are statically allocated and chained off of DPBHead.
   782                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
   783                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
   784                                  ; ---------------------------------------------------------------------------
   785                                  
   786                                  struc	DPB
   787 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
   788 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
   789 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
   790 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
   791 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
   792 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
   793 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
   794 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
   795 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
   796 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
   797                                  ; MSDOS 3.3
   798                                  ;.FAT_SIZE:	resb 1		; Number of records occupied by FAT
   799                                  ; MSDOS 6.0
   800 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
   801 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
   802 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
   803 00000017 ??                      .MEDIA:		resb 1		; Media byte
   804 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
   805                                  				; check the first time this DPB is used
   806 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
   807 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
   808 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
   809                                  .size:
   810                                  endstruc
   811                                  
   812                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
   813                                  
   814                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
   815                                  
   816                                  ;                                                                          ;
   817                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   818                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   819                                  
   820                                  ;============================================================================
   821                                  ; SF.INC, MSDOS 6.0, 1991
   822                                  ;============================================================================
   823                                  ; 25/04/2019 - Retro DOS v4.0
   824                                  ; 07/07/2018 - Retro DOS v3.0
   825                                  
   826                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   827                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   828                                  ;                                                                          ;
   829                                  
   830                                  ; ---------------------------------------------------------------------------
   831                                  ;**	SF.INC - System File Table
   832                                  ;
   833                                  ;   AN000   version 4.00   Jan. 1988
   834                                  ;   AN003   PTM 3680 --  make NAME offset the same as before (<=3.30)
   835                                  ;   AN009   PTM 3839	 reorder SFT for MS WINDOWS
   836                                  ; ---------------------------------------------------------------------------
   837                                  ;**	System File Table SuperStructure
   838                                  ;
   839                                  ;	The system file table entries are allocated in contiguous groups.
   840                                  ;	There may be more than one such groups; the SF "superstructure"
   841                                  ;	tracks the groups.
   842                                  ; ---------------------------------------------------------------------------
   843                                  
   844                                  struc	SFT
   845 00000000 ????????                .SFLink:	resd 1
   846 00000004 ????                    .SFCount:	resw 1		; number of entries
   847 00000006 ????                    .SFTable:	resw 1		; beginning of array of the following
   848                                  .size:
   849                                  endstruc
   850                                  
   851                                  ; ---------------------------------------------------------------------------
   852                                  ;**	System file table entry
   853                                  ;
   854                                  ;	These are the structures which are at SFTABLE in the SF structure.
   855                                  ; ---------------------------------------------------------------------------
   856                                  
   857                                  ; 25/04/2019 - Retro DOS v4.0
   858                                  
   859                                  struc SF_ENTRY
   860 00000000 ????                    .sf_ref_count:	resw 1		; number of processes sharing entry
   861                                  				;   if FCB then ref count
   862 00000002 ????                    .sf_mode:	resw 1		; mode of access or high bit on if FCB
   863 00000004 ??                      .sf_attr:	resb 1		; attribute of file
   864 00000005 ????                    .sf_flags:	resw 1		;Bits 8-15
   865                                  				; Bit 15 = 1 if remote file
   866                                  				;	 = 0 if local file or device
   867                                  				; Bit 14 = 1 if date/time is not to be
   868                                  				;   set from clock at CLOSE.  Set by
   869                                  				;   FILETIMES and FCB_CLOSE.  Reset by
   870                                  				;   other reseters of the dirty bit
   871                                  				;   (WRITE)
   872                                  				; Bit 13 = Pipe bit (reserved)
   873                                  				;
   874                                  				; Bits 0-7 (old FCB_devid bits)
   875                                  				; If remote file or local file, bit
   876                                  				; 6=0 if dirty Device ID number, bits
   877                                  				; 0-5 if local file.
   878                                  				; bit 7=0 for local file, bit 7
   879                                  				;      =1 for local I/O device
   880                                  				; If local I/O device, bit 6=0 if EOF (input)
   881                                  				;		Bit 5=1 if Raw mode
   882                                  				;		Bit 0=1 if console input device
   883                                  				;		Bit 1=1 if console output device
   884                                  				;		Bit 2=1 if null device
   885                                  				;		Bit 3=1 if clock device
   886 00000007 ????????                .sf_devptr:	resd	1	; Points to DPB if local file, points
   887                                  				; to device header if local device,
   888                                  				; points to net device header if
   889                                  				; remote
   890 0000000B ????                    .sf_firclus:	resw	1	; First cluster of file (bit 15 = 0)
   891 0000000D ????                    .sf_time:	resw	1	; Time associated with file
   892 0000000F ????                    .sf_date:	resw	1	; Date associated with file
   893 00000011 ????????                .sf_size:	resd 	1	; Size associated with file
   894 00000015 ????????                .sf_position:	resd	1	; Read/Write pointer or LRU count for FCBs
   895                                  
   896                                  ; Starting here, the next 7 bytes may be used by the file system to store
   897                                  ; an ID
   898                                  
   899                                  ; 09/07/2018 - Retro DOS v3.0
   900                                  
   901                                  ; MSDOS 3.3 SF.INC, 1987
   902                                  ;.sf_cluspos:	resw	1	; Position of last cluster accessed
   903                                  ;.sf_lstclus	resw	1	; Last cluster accessed
   904                                  ;.sf_dirsec:	resw	1	; Sector number of directory sector
   905                                  ;				; for this file
   906                                  ;.sf_dirpos:	resb	1	; Offset of this entry in the above
   907                                  
   908                                  ; MSDOS 6.0, SF.INC, 1991
   909 00000019 ????                    .sf_cluspos:	resw	1	; Position of last cluster accessed
   910 0000001B ????????                .sf_dirsec:	resd	1	; Sector number of directory sector
   911                                  				; for this file
   912 0000001F ??                      .sf_dirpos:	resb	1	; Offset of this entry in the above
   913                                  
   914                                  ; End of 7 bytes of file-system specific info.
   915                                  
   916 00000020 <res Bh>                .sf_name:	resb	11	; 11 character name that is in the
   917                                  				; directory entry.  This is used by
   918                                  				; close to detect file deleted and
   919                                  				; disk changed errors.
   920                                  ; SHARING INFO
   921 0000002B ????????                .sf_chain:	resd	1	; link to next SF
   922 0000002F ????                    .sf_UID:	resw	1
   923 00000031 ????                    .sf_PID:	resw	1
   924 00000033 ????                    .sf_MFT:	resw	1
   925                                  
   926                                  ; MSDOS 6.0, SF.INC, 1991
   927 00000035 ????                    .sf_lstclus:	resw	1	;AN009; Last cluster accessed
   928 00000037 ????????                .sf_IFS_HDR:	resd	1
   929                                  
   930                                  .size:
   931                                  endstruc
   932                                  
   933                                  ; 20/07/2018
   934                                  ; MSDOS 3.3, SF.INC, 1987
   935                                  %define sf_netid   SF_ENTRY.sf_cluspos    ; byte
   936                                  %define sf_OpenAge SF_ENTRY.sf_position+2 ; word
   937                                  %define sf_LRU	   SF_ENTRY.sf_position	  ; word
   938                                  ; MSDOS 6.0, SF.INC, 1991
   939                                  %define sf_fsda	     SF_ENTRY.sf_cluspos  ; byte ;DOS 4.00
   940                                  %define sf_serial_ID SF_ENTRY.sf_firclus  ; word ;DOS 4.00
   941                                  
   942                                  ; 19/07/2018
   943                                  ; MSDOS 3.3, SF.INC, 1987
   944                                  
   945                                  sf_default_number  EQU	5
   946                                  
   947                                  ; Note that we need to mark an SFT as being busy for OPEN/CREATE.  This is
   948                                  ; because an INT 24 may prevent us from 'freeing' it.  We mark this as such
   949                                  ; by placing a -1 in the ref_count field.
   950                                  
   951                                  sf_busy EQU -1
   952                                  
   953                                  ; mode mask for FCB detection
   954                                  sf_isFCB		EQU	1000000000000000B
   955                                  
   956                                  ; Flag word masks
   957                                  sf_isnet		EQU	1000000000000000B
   958                                  sf_close_nodate 	EQU	0100000000000000B
   959                                  sf_pipe 		EQU	0010000000000000B
   960                                  sf_no_inherit		EQU	0001000000000000B
   961                                  sf_net_spool		EQU	0000100000000000B
   962                                  
   963                                  ; 25/04/2019
   964                                  sf_entry_size equ SF_ENTRY.size ; 59 (MSDOS 6.0)
   965                                  
   966                                  ; ---------------------------------------------------------------------------
   967                                  ; Local file/device flag masks
   968                                  ; ---------------------------------------------------------------------------
   969                                  
   970                                  devid_file_clean        EQU     40h     ; true if file and not written
   971                                  devid_file_mask_drive   EQU     3Fh     ; mask for drive number
   972                                  
   973                                  devid_device            EQU     80h     ; true if a device
   974                                  devid_device_EOF        EQU     40h     ; true if end of file reached
   975                                  devid_device_raw        EQU     20h     ; true if in raw mode
   976                                  devid_device_special    EQU     10h     ; true if special device
   977                                  devid_device_clock      EQU     08h     ; true if clock device
   978                                  devid_device_null       EQU     04h     ; true if null device
   979                                  devid_device_con_out    EQU     02h     ; true if console output
   980                                  devid_device_con_in     EQU     01h     ; true if console input
   981                                  
   982                                  ; ---------------------------------------------------------------------------
   983                                  ; structure of devid field as returned by IOCTL is:
   984                                  ;
   985                                  ;       BIT     7   6   5   4   3   2   1   0
   986                                  ;             |---|---|---|---|---|---|---|---|
   987                                  ;             | I | E | R | S | I | I | I | I |
   988                                  ;             | S | O | A | P | S | S | S | S |
   989                                  ;             | D | F | W | E | C | N | C | C |
   990                                  ;             | E |   |   | C | L | U | O | I |
   991                                  ;             | V |   |   | L | K | L | T | N |
   992                                  ;             |---|---|---|---|---|---|---|---|
   993                                  ;       ISDEV = 1 if this channel is a device
   994                                  ;             = 0 if this channel is a disk file
   995                                  ;
   996                                  ;       If ISDEV = 1
   997                                  ;
   998                                  ;             EOF = 0 if End Of File on input
   999                                  ;             RAW = 1 if this device is in Raw mode
  1000                                  ;                 = 0 if this device is cooked
  1001                                  ;             ISCLK = 1 if this device is the clock device
  1002                                  ;             ISNUL = 1 if this device is the null device
  1003                                  ;             ISCOT = 1 if this device is the console output
  1004                                  ;             ISCIN = 1 if this device is the console input
  1005                                  ;
  1006                                  ;       If ISDEV = 0
  1007                                  ;             EOF = 0 if channel has been written
  1008                                  ;             Bits 0-5 are the block device number for
  1009                                  ;                 the channel (0 = A, 1 = B, ...)
  1010                                  ; ---------------------------------------------------------------------------
  1011                                  
  1012                                  devid_ISDEV     EQU     80h
  1013                                  devid_EOF       EQU     40h
  1014                                  devid_RAW       EQU     20h
  1015                                  devid_SPECIAL   EQU     10H
  1016                                  devid_ISCLK     EQU     08h
  1017                                  devid_ISNUL     EQU     04h
  1018                                  devid_ISCOT     EQU     02h
  1019                                  devid_ISCIN     EQU     01h
  1020                                  
  1021                                  devid_block_dev EQU     1Fh             ; mask for block device number
  1022                                  
  1023                                  ;============================================================================
  1024                                  ; PDB.INC, MSDOS 6.0, 1991
  1025                                  ;============================================================================
  1026                                  ; 04/05/2019 - Retro DOS v4.0
  1027                                  ; 08/07/2018 - Retro DOS v3.0
  1028                                  
  1029                                  ; ---------------------------------------------------------------------------
  1030                                  ; BREAK <Process data block>
  1031                                  ; ---------------------------------------------------------------------------
  1032                                  ;**	Process data block (otherwise known as program header)
  1033                                  ;
  1034                                  
  1035                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
  1036                                  ;	can be rearranged here, ever. Reserved areas are probably safe
  1037                                  ;	for use.
  1038                                  ; ---------------------------------------------------------------------------
  1039                                  
  1040                                  FILPERPROC	EQU     20
  1041                                  
  1042                                  struc PDB	; Process_data_block
  1043 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
  1044 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
  1045 00000004 ??                                      resb 1
  1046 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
  1047 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
  1048 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
  1049 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
  1050 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
  1051 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
  1052 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
  1053 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
  1054 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
  1055 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
  1056 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
  1057 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
  1058 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
  1059 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
  1060 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
  1061 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
  1062 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
  1063 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
  1064                                  				;  an extended FCB
  1065                                  ;endstruc 	; MSDOS 3.3
  1066                                  	  	; MSDOS 6.0
  1067 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
  1068 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
  1069 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
  1070 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
  1071                                  endstruc
  1072                                  
  1073                                  ;============================================================================
  1074                                  ; EXE.INC, MSDOS 6.0, 1991
  1075                                  ;============================================================================
  1076                                  ; 04/05/2019 - Retro DOS v4.0
  1077                                  
  1078                                  ;**	EXE.INC - Definitions for the EXEC command and EXE files
  1079                                  ; ---------------------------------------------------------------------------
  1080                                  ; The following get used as arguments to the EXEC system call.  They indicate
  1081                                  ; whether or not the program is executed or whether or not a program header
  1082                                  ; gets created.
  1083                                  
  1084                                  exec_func_no_execute EQU 1	; no execute bit
  1085                                  exec_func_overlay    EQU 2	; overlay bit
  1086                                  
  1087                                  struc EXEC0
  1088 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1089 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1090 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1091 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1092                                  .size:
  1093                                  endstruc
  1094                                  
  1095                                  struc EXEC1
  1096 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1097 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1098 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1099 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1100 0000000E ????                    .SP:		resw 1		; stack pointer of program
  1101 00000010 ????                    .SS:		resw 1		; stack seg register of program
  1102 00000012 ????                    .IP:		resw 1		; entry point IP
  1103 00000014 ????                    .CS:		resw 1		; entry point CS
  1104                                  .size:
  1105                                  endstruc
  1106                                  
  1107                                  struc EXEC3
  1108 00000000 ????                    .load_addr:	resw 1		; seg address of load point
  1109 00000002 ????                    .reloc_fac:	resw 1		; relocation factor
  1110                                  endstruc
  1111                                  
  1112                                  ;**	Exit codes (in upper byte) for terminating programs
  1113                                  
  1114                                  EXIT_TERMINATE		EQU	0
  1115                                  EXIT_ABORT		EQU	0
  1116                                  EXIT_CTRL_C		EQU	1
  1117                                  EXIT_HARD_ERROR 	EQU	2
  1118                                  EXIT_KEEP_PROCESS	EQU	3
  1119                                  
  1120                                  ;**	EXE File Header Description
  1121                                  
  1122                                  struc EXE
  1123 00000000 ????                    .signature:   resw 1		; must contain 4D5A (yay zibo!)
  1124 00000002 ????                    .len_mod_512: resw 1		; low 9 bits of length
  1125 00000004 ????                    .pages:       resw 1		; number of 512b pages in file
  1126 00000006 ????                    .rle_count:   resw 1		; count of reloc entries
  1127 00000008 ????                    .par_dir:     resw 1		; number of paragraphs before image
  1128 0000000A ????                    .min_BSS:     resw 1		; minimum number of para of BSS
  1129 0000000C ????                    .max_BSS:     resw 1		; max number of para of BSS
  1130 0000000E ????                    .SS:          resw 1		; stack of image
  1131 00000010 ????                    .SP:          resw 1		; SP of image
  1132 00000012 ????                    .chksum:      resw 1		; checksum of file (ignored)
  1133 00000014 ????                    .IP:          resw 1		; IP of entry
  1134 00000016 ????                    .CS:          resw 1		; CS of entry
  1135 00000018 ????                    .rle_table:   resw 1		; byte offset of reloc table
  1136 0000001A ????                    .iov:         resw 1		; overlay number (0 for root)
  1137 0000001C ????????                .sym_tab:     resd 1		; offset of symbol table in file
  1138                                  .size:
  1139                                  endstruc
  1140                                  
  1141                                  exe_valid_signature     EQU 5A4Dh
  1142                                  exe_valid_old_signature EQU 4D5Ah
  1143                                  
  1144                                  ;**	EXE file symbol info definitions
  1145                                  
  1146                                  struc symbol_entry
  1147 00000000 ????????                .value:	resd 1
  1148 00000004 ????                    .type:	resw 1
  1149 00000006 ??                      .len:	resb 1
  1150 00000007 <res FFh>               .name:	resb 255
  1151                                  endstruc
  1152                                  
  1153                                  ;**	Data structure passed for ExecReady call
  1154                                  
  1155                                  struc ERStruc
  1156 00000000 ????                     .ER_Reserved:	resw	1	; reserved, should be zero
  1157 00000002 ????                     .ER_Flags:	resw	1
  1158 00000004 ????????                 .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
  1159 00000008 ????                     .ER_PSP:	resw	1	; PSP of the program
  1160 0000000A ????????                 .ER_StartAddr:	resd	1	; Start CS:IP of the program
  1161 0000000E ????????                 .ER_ProgSize:	resd	1	; Program size including PSP
  1162                                   .size:
  1163                                  endstruc
  1164                                  
  1165                                  ;** bit fields in ER_Flags
  1166                                  
  1167                                  ER_EXE		equ	0001h
  1168                                  ER_OVERLAY	equ	0002h
  1169                                  
  1170                                  
  1171                                  ;============================================================================
  1172                                  ; ARENA.INC, MSDOS 6.0, 1991
  1173                                  ;============================================================================
  1174                                  ; 24/04/2019 - Retro DOS v4.0
  1175                                  ; 04/08/2018 - Retro DOS v3.0
  1176                                  
  1177                                  ;BREAK <Memory arena structure>
  1178                                  
  1179                                  ;**	Arena Header
  1180                                  
  1181                                  struc ARENA
  1182 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
  1183 00000001 ????                    .OWNER:		resw 1		; owner of arena item
  1184 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
  1185 00000005 ??????                  .RESERVED:	resb 3		; reserved
  1186 00000008 ????????????????        .NAME:		resb 8		; owner file name
  1187                                  .headersize:			
  1188                                  endstruc
  1189                                  
  1190                                  ; 20/05/2019 - Retro DOS v4.0
  1191                                  ARENAHEADERSIZE equ ARENA.headersize 
  1192                                  
  1193                                  ; CAUTION: The routines in ALLOC.ASM rely on the fact that arena_signature
  1194                                  ; and arena_owner_system are all equal to zero and are contained in DI.
  1195                                  ; Change them and change ALLOC.ASM.
  1196                                  
  1197                                  arena_owner_system  EQU 0               ; free block indication
  1198                                  
  1199                                  arena_signature_normal	EQU 4Dh		; valid signature, not end of arena
  1200                                  arena_signature_end     EQU 5Ah         ; valid signature, last block in arena
  1201                                  
  1202                                  FIRST_FIT	EQU	00000000B
  1203                                  BEST_FIT	EQU	00000001B
  1204                                  LAST_FIT	EQU	00000010B
  1205                                  
  1206                                  ; MSDOS 6.0
  1207                                  LOW_FIRST	EQU	00000000B	; M001
  1208                                  HIGH_FIRST	EQU	10000000B	; M001
  1209                                  HIGH_ONLY	EQU	01000000B	; M001
  1210                                  
  1211                                  LINKSTATE	EQU	00000001B	; M002
  1212                                  
  1213                                  HF_MASK		EQU	~HIGH_FIRST	; M001
  1214                                  HO_MASK		EQU	~HIGH_ONLY	; M001
  1215                                  
  1216                                  STRAT_MASK	EQU	HF_MASK & HO_MASK	; M001;
  1217                                  						; M026: used to mask of bits
  1218                                  						; M026: 6 & 7 of AllocMethod
  1219                                  
  1220                                  ;============================================================================
  1221                                  ; MI.INC, MSDOS 6.0, 1991
  1222                                  ;============================================================================
  1223                                  ; 07/07/2018 - Retro DOS v3.0
  1224                                  
  1225                                  ;BREAK <Machine instruction, flag definitions and character types>
  1226                                  
  1227                                  mi_INT		EQU	0CDh
  1228                                  mi_long_jmp	EQU	0EAh
  1229                                  mi_Long_CALL	EQU	09Ah
  1230                                  mi_Long_RET	EQU	0CBh
  1231                                  mi_Near_RET	EQU	0C3h
  1232                                  
  1233                                  ;			xxxxoditszxaxpxc
  1234                                  f_Overflow	EQU	0000100000000000B
  1235                                  f_Direction	EQU	0000010000000000B
  1236                                  f_Interrupt	EQU	0000001000000000B
  1237                                  f_Trace 	EQU	0000000100000000B
  1238                                  f_Sign		EQU	0000000010000000B
  1239                                  f_Zero		EQU	0000000001000000B
  1240                                  f_Aux		EQU	0000000000010000B
  1241                                  f_Parity	EQU	0000000000000100B
  1242                                  f_Carry 	EQU	0000000000000001B
  1243                                  
  1244                                  ;============================================================================
  1245                                  ; FILEMODE.INC, MSDOS 6.0, 1991
  1246                                  ;============================================================================
  1247                                  ; 13/07/2018 - Retro DOS v3.0
  1248                                  ; 29/04/2019 - Retro DOS v4.0
  1249                                  
  1250                                  ;**	Standard I/O file handles
  1251                                  
  1252                                  stdin       EQU     0
  1253                                  stdout      EQU     1
  1254                                  stderr      EQU     2
  1255                                  stdaux      EQU     3
  1256                                  stdprn      EQU     4
  1257                                  
  1258                                  ;**	File Modes
  1259                                  ; <Xenix subfunction assignments>  ; MSDOS 3.3 FILEMODE.INC
  1260                                  
  1261                                  open_for_read   EQU 0
  1262                                  open_for_write  EQU 1
  1263                                  open_for_both   EQU 2
  1264                                  
  1265                                  ; MSDOS 6.0
  1266                                  OPEN_FOR_BOTH	equ 2
  1267                                  EXEC_OPEN	equ 3	; access code of 3 indicates that open was 
  1268                                  				; made from exec
  1269                                  
  1270                                  access_mask	EQU 0Fh ; 09/08/2018
  1271                                  
  1272                                  SHARING_MASK	    equ 0F0h
  1273                                  SHARING_COMPAT	    equ 000h
  1274                                  SHARING_DENY_BOTH   equ 010h
  1275                                  SHARING_DENY_WRITE  equ 020h
  1276                                  SHARING_DENY_READ   equ 030h
  1277                                  SHARING_DENY_NONE   equ 040h
  1278                                  SHARING_NET_FCB     equ 070h
  1279                                  SHARING_NO_INHERIT  equ 080h
  1280                                  
  1281                                  ; 29/04/2019
  1282                                  
  1283                                  ;**	Extended Open Definitions
  1284                                  
  1285                                  RESERVED_BITS_MASK equ 0FE00h	; reserved bits for extended open flags
  1286                                  EXISTS_MASK	   equ 0Fh 	; "file exists" action field
  1287                                  NOT_EXISTS_MASK    equ 0F0h
  1288                                  
  1289                                  ;*	SF_MODE values
  1290                                  
  1291                                  AUTO_COMMIT_WRITE	equ 4000h
  1292                                  INT_24_ERROR		equ 2000h
  1293                                  
  1294                                  ;*	Flags in EXTOPEN_ON
  1295                                  
  1296                                  EXT_OPEN_ON		equ 01h
  1297                                  EXT_FILE_NOT_EXISTS	equ 04h
  1298                                  EXT_OPEN_I24_OFF	equ 02h
  1299                                  
  1300                                  ;*	Flags in EXTOPEN_FLAG
  1301                                  
  1302                                  ACTION_OPENED		equ 01h
  1303                                  ACTION_CREATED_OPENED	equ 02h
  1304                                  ACTION_REPLACED_OPENED	equ 03h
  1305                                  EXT_EXISTS_OPEN 	equ 01h
  1306                                  EXT_EXISTS_FAIL 	equ 00h
  1307                                  EXT_NEXISTS_CREATE	equ 10h
  1308                                  
  1309                                  ;**	Extended Open Structure
  1310                                  
  1311                                  struc EXT_OPEN_PARM
  1312 00000000 ????????                .SET_LIST:	resd 1
  1313 00000004 ????                    .NUM_OF_PARM:	resw 1
  1314                                  endstruc
  1315                                  
  1316                                  ;============================================================================
  1317                                  ; SYSCALL.INC, MSDOS 6.0, 1991
  1318                                  ;============================================================================
  1319                                  ; 29/04/2019 - Retro DOS v4.0
  1320                                  ; 09/07/2018 - Retro DOS v3.0 (SYSCALL.INC, MSDOS 3.3, 1987)
  1321                                  
  1322                                  ; <system call definitions>
  1323                                  
  1324                                  ABORT                           EQU 0   ;  0      0
  1325                                  STD_CON_INPUT                   EQU 1   ;  1      1
  1326                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
  1327                                  STD_AUX_INPUT                   EQU 3   ;  3      3
  1328                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
  1329                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
  1330                                  RAW_CON_IO                      EQU 6   ;  6      6
  1331                                  RAW_CON_INPUT                   EQU 7   ;  7      7
  1332                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
  1333                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
  1334                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
  1335                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
  1336                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
  1337                                  DISK_RESET                      EQU 13  ; 13      D
  1338                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
  1339                                  FCB_OPEN                        EQU 15  ; 15      F
  1340                                  FCB_CLOSE                       EQU 16  ; 16     10
  1341                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
  1342                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
  1343                                  FCB_DELETE                      EQU 19  ; 19     13
  1344                                  FCB_SEQ_READ                    EQU 20  ; 20     14
  1345                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
  1346                                  FCB_CREATE                      EQU 22  ; 22     16
  1347                                  FCB_RENAME                      EQU 23  ; 23     17
  1348                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
  1349                                  SET_DMA                         EQU 26  ; 26     1A
  1350                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1351                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1352                                  ;                                                                          ;
  1353                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
  1354                                  ;                                                                          ;
  1355                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1356                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1357                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
  1358                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
  1359                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
  1360                                  GET_FCB_POSITION                EQU 36  ; 36     24
  1361                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
  1362                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
  1363                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
  1364                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
  1365                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
  1366                                  GET_DATE                        EQU 42  ; 42     2A
  1367                                  SET_DATE                        EQU 43  ; 43     2B
  1368                                  GET_TIME                        EQU 44  ; 44     2C
  1369                                  SET_TIME                        EQU 45  ; 45     2D
  1370                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
  1371                                  ; Extended functionality group
  1372                                  GET_DMA                         EQU 47  ; 47     2F
  1373                                  GET_VERSION                     EQU 48  ; 48     30
  1374                                  KEEP_PROCESS                    EQU 49  ; 49     31
  1375                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1376                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1377                                  ;                                                                          ;
  1378                                  GET_DPB                         EQU 50  ; 50     32
  1379                                  ;                                                                          ;
  1380                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1381                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1382                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
  1383                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
  1384                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
  1385                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
  1386                                  CHAR_OPER                       EQU 55  ; 55     37
  1387                                  INTERNATIONAL                   EQU 56  ; 56     38
  1388                                  ; XENIX CALLS
  1389                                  ;   Directory Group
  1390                                  MKDIR                           EQU 57  ; 57     39
  1391                                  RMDIR                           EQU 58  ; 58     3A
  1392                                  CHDIR                           EQU 59  ; 59     3B
  1393                                  ;   File Group
  1394                                  CREAT                           EQU 60  ; 60     3C
  1395                                  OPEN                            EQU 61  ; 61     3D
  1396                                  CLOSE                           EQU 62  ; 62     3E
  1397                                  READ                            EQU 63  ; 63     3F
  1398                                  WRITE                           EQU 64  ; 64     40
  1399                                  UNLINK                          EQU 65  ; 65     41
  1400                                  LSEEK                           EQU 66  ; 66     42
  1401                                  CHMOD                           EQU 67  ; 67     43
  1402                                  IOCTL                           EQU 68  ; 68     44
  1403                                  XDUP                            EQU 69  ; 69     45
  1404                                  XDUP2                           EQU 70  ; 70     46
  1405                                  CURRENT_DIR                     EQU 71  ; 71     47
  1406                                  ;    Memory Group
  1407                                  ALLOC                           EQU 72  ; 72     48
  1408                                  DEALLOC                         EQU 73  ; 73     49
  1409                                  SETBLOCK                        EQU 74  ; 74     4A
  1410                                  ;    Process Group
  1411                                  EXEC                            EQU 75  ; 75     4B
  1412                                  EXIT                            EQU 76  ; 76     4C
  1413                                  _WAIT				EQU 77  ; 77     4D
  1414                                  FIND_FIRST                      EQU 78  ; 78     4E
  1415                                  ;   Special Group
  1416                                  FIND_NEXT                       EQU 79  ; 79     4F
  1417                                  ; SPECIAL SYSTEM GROUP
  1418                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1419                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1420                                  ;                                                                          ;
  1421                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
  1422                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
  1423                                  GET_IN_VARS                     EQU 82  ; 82     52
  1424                                  SETDPB                          EQU 83  ; 83     53
  1425                                  ;                                                                          ;
  1426                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1427                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1428                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
  1429                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1430                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1431                                  ;                                                                          ;
  1432                                  DUP_PDB                         EQU 85  ; 85     55
  1433                                  ;                                                                          ;
  1434                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1435                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1436                                  RENAME                          EQU 86  ; 86     56
  1437                                  FILE_TIMES                      EQU 87  ; 87     57
  1438                                  ALLOCOPER			EQU 88	; 88	 58
  1439                                  ; Network extention system calls
  1440                                  GETEXTENDEDERROR		EQU 89	; 89	 59
  1441                                  CREATETEMPFILE			EQU 90	; 90	 5A
  1442                                  CREATENEWFILE			EQU 91	; 91	 5B
  1443                                  LOCKOPER			EQU 92	; 92	 5C Lock and Unlock
  1444                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1445                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1446                                  ;									   ;
  1447                                  SERVERCALL			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
  1448                                  					;	    CloseByName, CloseUser,
  1449                                  					;	    CloseUserProcess,
  1450                                  					;	    GetOpenFileList
  1451                                  ;									   ;
  1452                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1453                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1454                                  USEROPER			EQU 94	; 94	 5E Get and Set
  1455                                  ASSINGOPER			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
  1456                                  XNAMETRANS			EQU 96	; 96	 60
  1457                                  PATHPARSE			EQU 97	; 97	 61
  1458                                  GETCURRENTPSP			EQU 98	; 98	 62
  1459                                  HONGEUL 			EQU 99	; 99	 63
  1460                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1461                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1462                                  ;									   ;
  1463                                  SET_PRINTER_FLAG		EQU 100 ; 100	 64
  1464                                  ;									   ;
  1465                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1466                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1467                                  GETEXTCNTRY			EQU 101 ; 101	 65 
  1468                                  GETSETCDPG			EQU 102 ; 102	 66
  1469                                  EXTHANDLE			EQU 103 ; 103	 67
  1470                                  COMMIT				EQU 104 ; 104	 68
  1471                                  
  1472                                  ; 29/04/2019 - Retro DOS v4.0
  1473                                  ; (MSDOS 6.0, SYSCALL.INC, 1987)
  1474                                  
  1475                                  GetSetMediaID			EQU 105 ; 105	 69
  1476                                  IFS_IOCTL			EQU 107 ; 107	 6B
  1477                                  ExtOpen 			EQU 108 ; 108	 6C
  1478                                  
  1479                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1480                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1481                                  ;                                                                          ;
  1482                                  ;ifdef ROMEXEC
  1483                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
  1484                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
  1485                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
  1486                                  ;endif
  1487                                  ;                                                                          ;
  1488                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1489                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1490                                  
  1491                                  SET_OEM_HANDLER			EQU 248 ; 248    F8
  1492                                  ;OEM_C1				EQU 249 ; 249    F9
  1493                                  ;OEM_C2				EQU 250 ; 250    FA
  1494                                  ;OEM_C3				EQU 251 ; 251    FB
  1495                                  ;OEM_C4				EQU 252 ; 252    FC
  1496                                  ;OEM_C5				EQU 253 ; 253    FD
  1497                                  ;OEM_C6				EQU 254 ; 254    FE
  1498                                  ;OEM_C7				EQU 255 ; 255    FF
  1499                                  
  1500                                  ;============================================================================
  1501                                  ; VERSIONA.INC (MSDOS 6.0, 1991)
  1502                                  ;============================================================================
  1503                                  ; 24/04/2019 - Retro DOS 4.0
  1504                                  
  1505                                  ;MAJOR_VERSION	EQU     6
  1506                                  ;;MINOR_VERSION	EQU	00
  1507                                  ;MINOR_VERSION	EQU     21  ; MSDOS 6.21
  1508                                  
  1509                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  1510                                  ;MAJOR_VERSION	EQU     5
  1511                                  ;MINOR_VERSION	EQU     0
  1512                                  
  1513                                  ; 30/12/2022 - Retro DOS v4.2
  1514                                  MAJOR_VERSION	EQU     6
  1515                                  MINOR_VERSION	EQU     22
  1516                                  
  1517                                  ;============================================================================
  1518                                  ; INTNAT.INC, MSDOS 3.3, 1987
  1519                                  ;============================================================================
  1520                                  ; 09/07/2018 - Retro DOS 3.0
  1521                                  
  1522                                  ; Current structure of the data returned by the international call
  1523                                  
  1524                                  struc	INTERNAT_BLOCK		; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
  1525                                  .Date_tim_format:
  1526 00000000 ????                    		RESW 1		; 0-USA, 1-EUR, 2-JAP
  1527                                  .Currency_sym:
  1528 00000002 ??????????              		RESB 5		; Currency Symbol 5 bytes
  1529                                  .Thous_sep:
  1530 00000007 ????                    		RESB 2		; Thousands separator 2 bytes
  1531                                  .Decimal_sep:
  1532 00000009 ????                    		RESB 2		; Decimal separator 2 bytes
  1533                                  .Date_sep:
  1534 0000000B ????                    		RESB 2		; Date separator 2 bytes
  1535                                  .Time_sep:
  1536 0000000D ????                    		RESB 2		; Time separator 2 bytes
  1537                                  .Bit_field:	
  1538 0000000F ??                      		RESB 1		; Bit values
  1539                                                                     ;   Bit 0 = 0 if currency symbol first
  1540                                                                     ;         = 1 if currency symbol last
  1541                                                                     ;   Bit 1 = 0 if No space after currency symbol
  1542                                                                     ;         = 1 if space after currency symbol
  1543                                  .Currency_cents:
  1544 00000010 ??                      		RESB 	1	; Number of places after currency dec point
  1545                                  .Time_24:
  1546 00000011 ??                      		RESB 	1	; 1 if 24 hour time, 0 if 12 hour time
  1547                                  .Map_call:
  1548 00000012 ????                    		RESW	1	; Address of case mapping call (DWORD)
  1549 00000014 ????                                    RESW	1       ; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  1550                                  				;  in pieces.
  1551                                  .Data_sep:
  1552 00000016 ????                    		RESB	2	; Data list separator character
  1553                                  .size:		
  1554                                  endstruc
  1555                                  
  1556                                  ; Max size of the block returned by the INTERNATIONAL call
  1557                                  
  1558                                  internat_block_max	EQU	32
  1559                                  
  1560                                  ;============================================================================
  1561                                  ; SYSVAR.INC (MSDOS 6.0, 1991)
  1562                                  ;============================================================================
  1563                                  ; 08/07/2018 - Retro DOS v3.0
  1564                                  
  1565                                  ;SysInitVars STRUC
  1566                                  struc SYSI
  1567 00000000 ????????                .DPB:	    resd 1		; DPB chain
  1568 00000004 ????????                .SFT:	    resd 1		; SFT chain
  1569 00000008 ????????                .CLOCK:	    resd 1		; CLOCK device
  1570 0000000C ????????                .CON:	    resd 1		; CON device
  1571 00000010 ????                    .MAXSEC:    resw 1		; maximum sector size
  1572 00000012 ????????                .BUF:	    resd 1		; points to Hashinitvar
  1573 00000016 ????????                .CDS:	    resd 1		; CDS list
  1574 0000001A ????????                .FCB:	    resd 1		; FCB chain
  1575 0000001E ????                    .Keep:	    resw 1		; keep count
  1576 00000020 ??                      .NUMIO:	    resb 1		; Number of block devices
  1577 00000021 ??                      .NCDS:	    resb 1		; number of CDS's
  1578 00000022 ????????                .DEV:	    resd 1		; device list
  1579                                  ; 09/07/2018
  1580                                  ; Above parameters are described in MSDOS 3.3 SYSVAR.INC (85/04/10)
  1581                                  ; Following parameters are used with MSDOS 6.0 (Retro DOS v4.0)
  1582 00000026 ????                    .ATTR:	    resw 1		; null device attribute word
  1583 00000028 ????                    .STRAT:	    resw 1		; null device strategy entry point
  1584 0000002A ????                    .INTER:	    resw 1		; null device interrupt entry point
  1585 0000002C ????????????????        .NAME:	    resb 8		; null device name
  1586 00000034 ??                      .SPLICE:    resb 1		; TRUE -> splicees being done
  1587 00000035 ????                    .IBMDOS_SIZE: resw 1		; DOS size in paragraphs
  1588 00000037 ????????                .IFS_DOSCALL@: resd 1		; IFS DOS service routine entry
  1589 0000003B ????????                .IFS:	    resd 1		; IFS header chain
  1590 0000003F ????????                .BUFFERS:   resw 2		; BUFFERS= values (m,n)
  1591 00000043 ??                      .BOOT_DRIVE: resb 1		; boot drive A=1 B=2,..
  1592 00000044 ??                      .DWMOVE:    resb 1		; 1 if 386 machine
  1593 00000045 ????                    .EXT_MEM:   resw 1		; Extended memory size in KB.
  1594                                  endstruc
  1595                                  ;SysInitVars ENDS
  1596                                  
  1597                                  ;This is added for more information exchange between DOS, BIOS.
  1598                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
  1599                                  
  1600                                  ;SysInitVars_Ext struc
  1601                                  struc SYSI_EXT
  1602 00000000 ????????                .SysInitVars:	resd 1		; Points to the above structure.
  1603 00000004 ????????                .Country_Tab:	resd 1		; DOS_Country_cdpg_info
  1604                                  endstruc
  1605                                  ;SysInitVars_Ext ends
  1606                                  
  1607                                  ;============================================================================
  1608                                  ; IOCTL.INC - MSDOS 6.0 - 1991
  1609                                  ;============================================================================
  1610                                  ; 09/07/2018 - Retro DOS v3.0
  1611                                  
  1612                                  ;*** J.K.
  1613                                  ;General Guide -
  1614                                  ;Category Code:
  1615                                  ; 0... .... DOS Defined
  1616                                  ; 1... .... User defined
  1617                                  ; .xxx xxxx Code
  1618                                  
  1619                                  ;Function Code:
  1620                                  ; 0... .... Return error if unsupported
  1621                                  ; 1... .... Ignore if unsupported
  1622                                  ; .0.. .... Intercepted by DOS
  1623                                  ; .1.. .... Passed to driver
  1624                                  ; ..0. .... Sends data/commands to device
  1625                                  ; ..1. .... Quries data/info from device
  1626                                  ; ...x .... Subfunction
  1627                                  ;
  1628                                  ; Note that "Sends/queries" data bit is intended only to regularize the
  1629                                  ; function set.  It plays no critical role; some functions may contain both
  1630                                  ; command and query elements. The convention is that such commands are
  1631                                  ; defined as "sends data".
  1632                                  
  1633                                  ;*****************************;*
  1634                                  ; BLOCK DRIVERS 	      ;*
  1635                                  ;*****************************;*
  1636                                  
  1637                                  ; IOCTL SUB-FUNCTIONS
  1638                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1639                                  IOCTL_GET_DEVICE_INFO	EQU	0
  1640                                  IOCTL_SET_DEVICE_INFO	EQU	1
  1641                                  IOCTL_READ_HANDLE	EQU	2
  1642                                  IOCTL_WRITE_HANDLE	EQU	3
  1643                                  IOCTL_READ_DRIVE	EQU	4
  1644                                  IOCTL_WRITE_DRIVE	EQU	5
  1645                                  IOCTL_GET_INPUT_STATUS	EQU	6
  1646                                  IOCTL_GET_OUTPUT_STATUS EQU	7
  1647                                  IOCTL_CHANGEABLE?	EQU	8
  1648                                  IOCTL_DeviceLocOrRem?	EQU	9
  1649                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
  1650                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
  1651                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
  1652                                  GENERIC_IOCTL		EQU	0Dh   ;13
  1653                                  ; (MSDOS 6.0 + MSDOS 3.3)
  1654                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
  1655                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
  1656                                  ; (MSDOS 6.0)
  1657                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
  1658                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
  1659                                  
  1660                                  ; GENERIC IOCTL CATEGORY CODES
  1661                                  IOC_OTHER		EQU	0	; Other device control J.K. 4/29/86
  1662                                  IOC_SE			EQU	1	; SERIAL DEVICE CONTROL
  1663                                  IOC_TC			EQU	2	; TERMINAL CONTROL
  1664                                  IOC_SC			EQU	3	; SCREEN CONTROL
  1665                                  IOC_KC			EQU	4	; KEYBOARD CONTROL
  1666                                  IOC_PC			EQU	5	; PRINTER CONTROL
  1667                                  IOC_DC			EQU	8	; DISK CONTROL (SAME AS RAWIO)
  1668                                  
  1669                                  ; GENERIC IOCTL SUB-FUNCTIONS
  1670                                  RAWIO			EQU	8
  1671                                  
  1672                                  ; RAWIO SUB-FUNCTIONS
  1673                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1674                                  GET_DEVICE_PARAMETERS	EQU	60H
  1675                                  SET_DEVICE_PARAMETERS	EQU	40H
  1676                                  READ_TRACK		EQU	61H
  1677                                  WRITE_TRACK		EQU	41H
  1678                                  VERIFY_TRACK		EQU	62H
  1679                                  FORMAT_TRACK		EQU	42H
  1680                                  ; (MSDOS 6.0)
  1681                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
  1682                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
  1683                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
  1684                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
  1685                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
  1686                                  
  1687                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
  1688                                  BUILD_DEVICE_BPB	EQU	000000001B
  1689                                  
  1690                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
  1691                                  INSTALL_FAKE_BPB	EQU	000000001B
  1692                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
  1693                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
  1694                                  
  1695                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
  1696                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1697                                  STATUS_FOR_FORMAT	EQU	000000001B
  1698                                  ; (MSDOS 6.0)
  1699                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
  1700                                  
  1701                                  ; CODES RETURNED FROM FORMAT STATUS CALL
  1702                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
  1703                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
  1704                                  
  1705                                  ; DEVICETYPE VALUES
  1706                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1707                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
  1708                                  DEV_5INCH		EQU	0
  1709                                  DEV_5INCH96TPI		EQU	1
  1710                                  DEV_3INCH720KB		EQU	2
  1711                                  DEV_8INCHSS		EQU	3
  1712                                  DEV_8INCHDS		EQU	4
  1713                                  DEV_HARDDISK		EQU	5
  1714                                  DEV_OTHER		EQU	7
  1715                                  ; (MSDOS 6.0)
  1716                                  ;DEV_3INCH1440KB	EQU	7
  1717                                  DEV_3INCH2880KB		EQU	9
  1718                                  ; Retro DOS v2.0 - 26/03/2018
  1719                                  ;;DEV_TAPE		EQU	6
  1720                                  ;;DEV_ERIMO		EQU	8
  1721                                  ;DEV_3INCH2880KB	EQU	9
  1722                                  DEV_3INCH1440KB		EQU	10
  1723                                  
  1724                                  ; (MSDOS 3.3)
  1725                                  ;MAX_DEV_TYPE		EQU	7
  1726                                  
  1727                                  ; (MSDOS 6.0)
  1728                                  MAX_DEV_TYPE		EQU	10	; MAXIMUM DEVICE TYPE THAT WE
  1729                                  					; CURRENTLY SUPPORT.
  1730                                  struc A_SECTORTABLE
  1731 00000000 ????                    .ST_SECTORNUMBER:	resw	1
  1732 00000002 ????                    .ST_SECTORSIZE:		resw	1
  1733                                  .size:
  1734                                  endstruc
  1735                                  
  1736                                  ;============================================================================
  1737                                  ; DEVSYM.INC
  1738                                  ;============================================================================
  1739                                  ; 07/07/2018 - Retro DOS v3.0
  1740                                  ; 30/04/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
  1741                                  
  1742                                  ;**	DevSym.inc - Device Symbols
  1743                                  
  1744                                  ; The device table list has the form:
  1745                                  struc	SYSDEV
  1746 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
  1747 00000004 ????                    .ATT:		resw 1		;Attributes of the device
  1748 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
  1749 00000008 ????                    .INT:		resw 1		;Interrupt entry point
  1750 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
  1751                                  .size:
  1752                                  endstruc
  1753                                  
  1754                                  ;
  1755                                  ; ATTRIBUTE BIT MASKS
  1756                                  ;
  1757                                  ; CHARACTER DEVICES:
  1758                                  ;
  1759                                  ; BIT 15 -> MUST BE 1
  1760                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1761                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
  1762                                  ;     12 -> UNUSED
  1763                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
  1764                                  ;     10 -> MUST BE 0
  1765                                  ;      9 -> MUST BE 0
  1766                                  ;      8 -> UNUSED
  1767                                  ;      7 -> UNUSED
  1768                                  ;      6 -> UNUSED
  1769                                  ;      5 -> UNUSED
  1770                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
  1771                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
  1772                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
  1773                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
  1774                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
  1775                                  ;
  1776                                  ; BLOCK DEVICES:
  1777                                  ;
  1778                                  ; BIT 15 -> MUST BE 0
  1779                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1780                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
  1781                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
  1782                                  ;	    THE SAME PLACE.
  1783                                  ;     12 -> UNUSED
  1784                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
  1785                                  ;     10 -> MUST BE 0
  1786                                  ;      9 -> MUST BE 0
  1787                                  ;      8 -> UNUSED
  1788                                  ;      7 -> UNUSED
  1789                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
  1790                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
  1791                                  ;      5 -> UNUSED
  1792                                  ;      4 -> UNUSED
  1793                                  ;      3 -> UNUSED
  1794                                  ;      2 -> UNUSED
  1795                                  ;      1 -> UNUSED
  1796                                  ;      0 -> UNUSED
  1797                                  ;
  1798                                  
  1799                                  ;Attribute bit masks
  1800                                  DEVTYP	EQU     8000H           ;Bit 15 - 1 if Char, 0 if block
  1801                                  DEVIOCTL EQU    4000H           ;Bit 14 - CONTROL mode bit
  1802                                  ISFATBYDEV EQU  2000H           ;Bit 13 - Device uses FAT ID bytes, comp media.
  1803                                  
  1804                                  ; 09/07/2018 - Retro DOS (DEVSYM.INC, MSDOS 3.3, 1987) 
  1805                                  
  1806                                  OUTTILBUSY EQU	2000H		; OUTPUT UNTIL BUSY IS ENABLED
  1807                                  ISNET	   EQU	1000H		; BIT 12 - 1 IF A NET DEVICE, 0 IF
  1808                                  				;  NOT.  CURRENTLY BLOCK ONLY.
  1809                                  DEVOPCL    EQU	0800H		; BIT 11 - 1 IF THIS DEVICE HAS
  1810                                  				;  OPEN,CLOSE AND REMOVABLE MEDIA
  1811                                  				;  ENTRY POINTS, 0 IF NOT
  1812                                  
  1813                                  EXTENTBIT  EQU	0400H		; BIT 10 - CURRENTLY 0 ON ALL DEVS
  1814                                  				;  THIS BIT IS RESERVED FOR FUTURE USE
  1815                                  				;  TO EXTEND THE DEVICE HEADER BEYOND
  1816                                  				;  ITS CURRENT FORM.
  1817                                  
  1818                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
  1819                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
  1820                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
  1821                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
  1822                                  
  1823                                  IOQUERY	EQU	0080H		;Bit 7 - Supports generic IOCtl query
  1824                                  
  1825                                  DEV320	EQU	0040H		;BIT 6 - FOR BLOCK DEVICES, THIS
  1826                                  				;DEVICE SUPPORTS SET/GET MAP OF
  1827                                  				;LOGICAL DRIVES, AND SUPPORTS
  1828                                  				;GENERIC IOCTL CALLS.
  1829                                  				;FOR CHARACTER DEVICES, THIS
  1830                                  				;DEVICE SUPPORTS GENERIC IOCTL.
  1831                                  				;THIS IS A DOS 3.2 DEVICE DRIVER.
  1832                                  
  1833                                  ISSPEC	EQU     0010H		;Bit 4 - This device is special ; 15/03/2018
  1834                                  ;ISIBM	EQU     0010H		;Bit 4 - This device is special
  1835                                  ISCLOCK EQU     0008H           ;Bit 3 - This device is the clock device.
  1836                                  ISNULL  EQU     0004H           ;Bit 2 - This device is the null device.
  1837                                  ISCOUT  EQU     0002H           ;Bit 1 - This device is the console output.
  1838                                  ISCIN   EQU     0001H           ;Bit 0 - This device is the console input.
  1839                                  
  1840                                  EXTDRVR	EQU	0002h		;BIT 1 - BLOCK DEVICE EXTENDED DRIVER
  1841                                  				; (MSDOS 6.0, DEVSYM.INC, 1991) ; 30/04/2019
  1842                                  
  1843                                  ;Static Reguest Header
  1844                                  struc	SRHEAD
  1845 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
  1846 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
  1847 00000002 ??                      .REQFUNC:	resb 1		;Type of request
  1848 00000003 ????                    .REQSTAT:	resw 1		;Status Word
  1849 00000005 ????????????????                	resb 8		;Reserved for queue links
  1850                                  .size:
  1851                                  endstruc
  1852                                  
  1853                                  ;Status word masks
  1854                                  STERR   EQU     8000H           ;Bit 15 - Error
  1855                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
  1856                                  STDON   EQU     0100H           ;Bit 8 - Done
  1857                                  STECODE EQU     00FFH           ;Error code
  1858                                  WRECODE EQU     0
  1859                                  
  1860                                  ;Function codes
  1861                                  DINITHL EQU     26              ;Size of init header
  1862                                  DMEDHL  EQU     15              ;Size of media check header
  1863                                  DBPBHL  EQU     22              ;Size of Get BPB header
  1864                                  DRDWRHL EQU     22              ;Size of RD/WR header
  1865                                  DRDNDHL EQU     14              ;Size of non destructive read header
  1866                                  DSTATHL EQU     13              ;Size of status header
  1867                                  DFLSHL  EQU     15              ;Size of flush header
  1868                                  
  1869                                  DEVINIT EQU     0               ;Initialization
  1870                                  DEVMDCH EQU     1               ;Media check
  1871                                  DEVBPB  EQU     2               ;Get BPB
  1872                                  DEVRDIOCTL EQU  3               ;IOCTL read
  1873                                  DEVRD   EQU     4               ;Read
  1874                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
  1875                                  DEVIST  EQU     6               ;Input status
  1876                                  DEVIFL  EQU     7               ;Input flush
  1877                                  DEVWRT  EQU     8               ;Write
  1878                                  DEVWRTV EQU     9               ;Write with verify
  1879                                  DEVOST  EQU     10              ;Output status
  1880                                  DEVOFL  EQU     11              ;Output flush
  1881                                  DEVWRIOCTL EQU  12              ;IOCTL write
  1882                                  
  1883                                  ; 09/07/2018 - Retro DOS v3.0 (DEVSYM.INC, MSDOS 3.3, 1987) 
  1884                                  DEVOPN	EQU	13		;DEVICE OPEN
  1885                                  DEVCLS	EQU	14		;DEVICE CLOSE
  1886                                  DOPCLHL EQU	13		;SIZE OF OPEN/CLOSE HEADER
  1887                                  DEVRMD	EQU	15		;REMOVABLE MEDIA
  1888                                  ; 07/08/2018 - Retro DOS v3.0
  1889                                  REMHL	EQU	13		;SIZE OF REMOVABLE MEDIA HEADER
  1890                                  GENIOCTL EQU	19
  1891                                  
  1892                                  ; THE NEXT THREE ARE USED IN DOS 4.0
  1893                                  ;		     20
  1894                                  ;		     21
  1895                                  ;		     22
  1896                                  
  1897                                  DEVGETOWN      EQU   23		;GET DEVICE OWNER
  1898                                  DEVSETOWN      EQU   24		;SET DEVICE OWNER
  1899                                  ; 18/05/2019 - Retro DOS v4.0
  1900                                  IOCTL_QUERY    EQU   25		;Query generic ioctl support
  1901                                  
  1902                                  OWNHL	       EQU   13		;SIZE OF DEVICE OWNER HEADER
  1903                                  
  1904                                  DEVOUT	       EQU   16		; OUTPUT UNTIL BUSY.
  1905                                  DEVOUTL        EQU   DEVWRT	; LENGTH OF OUTPUT UNTIL BUSY
  1906                                  
  1907                                  ; ADDED FOR DOS 5.00
  1908                                  
  1909                                  ; GENERIC IOCTL REQUEST STRUCTURE
  1910                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
  1911                                  
  1912                                  struc IOCTL_REQ
  1913 00000000 <res Dh>                .SRHEAD:	resb SRHEAD.size
  1914                                  				; GENERIC IOCTL ADDITION.
  1915 0000000D ??                      .MAJORFUNCTION: resb 1		;FUNCTION CODE
  1916 0000000E ??                      .MINORFUNCTION: resb 1		;FUNCTION CATEGORY
  1917 0000000F ????                    .REG_SI:	resw 1
  1918 00000011 ????                    .REG_DI:	resw 1
  1919 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
  1920                                  .size: ; 07/08/2018
  1921                                  endstruc
  1922                                  
  1923                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
  1924                                  GEN_IOCTL_WRT_TRK EQU	40H
  1925                                  GEN_IOCTL_RD_TRK  EQU	60H
  1926                                  GEN_IOCTL_FN_TST  EQU	20H	; USED TO DIFF. BET READS AND WRTS
  1927                                  
  1928                                  ;; 32-bit absolute read/write input list structure
  1929                                  
  1930                                  struc ABS_32RW
  1931 00000000 ????????                .SECTOR_RBA:	resd 1		; relative block address
  1932 00000004 ????                    .ABS_RW_COUNT:	resw 1		; number of sectors to be transferred
  1933 00000006 ????????                .BUFFER_ADDR:	resd 1		; data addrress
  1934                                  .size:
  1935                                  endstruc
  1936                                  
  1937                                  ;; media ID info
  1938                                  
  1939                                  struc MEDIA_ID_INFO
  1940 00000000 ????                    .MEDIA_level:	resw	1	; info level
  1941 00000002 ????????                .MEDIA_Serial:	resd	1	; serial #
  1942 00000006 <res Bh>                .MEDIA_Label:	resb	11	; volume label
  1943 00000011 ????????????????        .MEDIA_System:	resb	8	; system type
  1944                                  .size:
  1945                                  endstruc
  1946                                  
  1947                                  ; equates for DOS34_FLAG
  1948                                  ; (BUGBUG: why are bits 0,1,3 and 4 not defined.)
  1949                                  
  1950                                  FROM_DISK_RESET       EQU   000000000100b   ;from disk reset
  1951                                  Force_I24_Fail	      EQU   000000100000b   ;form IFS CALL BACK
  1952                                  Disable_EOF_I24       EQU   000001000000b   ;disable EOF int24 for input status
  1953                                  DBCS_VOLID	      EQU   000010000000b   ;indicate from volume id
  1954                                  DBCS_VOLID2	      EQU   000100000000b   ;indicate 8th char is DBCS
  1955                                  CTRL_BREAK_FLAG       EQU   001000000000b   ;indicate control break is input
  1956                                  SEARCH_FASTOPEN       EQU   010000000000b   ;set fastopen flag for search
  1957                                  EXEC_AWARE_REDIR      EQU   100000000000b   ;M018: this bit is set by a redir 
  1958                                  					    ;M018: that knows how to handle 
  1959                                  					    ;M018: open for exec
  1960                                  
  1961                                  NO_FROM_DISK_RESET    EQU   ~FROM_DISK_RESET	;not from disk reset
  1962                                  NO_Force_I24_Fail     EQU   ~Force_I24_Fail	;not form IFS CALL BACK
  1963                                  NO_Disable_EOF_I24    EQU   ~Disable_EOF_I24
  1964                                  
  1965                                  ;============================================================================
  1966                                  ; ERROR.INC (MSDOS 6.0, 1991)
  1967                                  ;============================================================================
  1968                                  ; 16/07/2018 - Retro DOS v3.0 
  1969                                  
  1970                                  ;**	ERROR.INC - DOS Error Codes
  1971                                  ;
  1972                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
  1973                                  ;    return error codes through AX. If an error occurred then
  1974                                  ;    the carry bit will be set and the error code is in AX. If no error
  1975                                  ;    occurred then the carry bit is reset and AX contains returned info.
  1976                                  ;
  1977                                  ;    Since the set of error codes is being extended as we extend the operating
  1978                                  ;    system, we have provided a means for applications to ask the system for a
  1979                                  ;    recommended course of action when they receive an error.
  1980                                  ;
  1981                                  ;    The GetExtendedError system call returns a universal error, an error
  1982                                  ;    location and a recommended course of action. The universal error code is
  1983                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
  1984                                  ;    is issued.
  1985                                  
  1986                                  ;	2.0 error codes
  1987                                  
  1988                                  error_invalid_function		EQU	1
  1989                                  error_file_not_found		EQU	2
  1990                                  error_path_not_found		EQU	3
  1991                                  error_too_many_open_files	EQU	4
  1992                                  error_access_denied		EQU	5
  1993                                  error_invalid_handle		EQU	6
  1994                                  error_arena_trashed		EQU	7
  1995                                  error_not_enough_memory 	EQU	8
  1996                                  error_invalid_block		EQU	9
  1997                                  error_bad_environment		EQU	10
  1998                                  error_bad_format		EQU	11
  1999                                  error_invalid_access		EQU	12
  2000                                  error_invalid_data		EQU	13
  2001                                  ;**** reserved			EQU	14	; *****
  2002                                  error_invalid_drive		EQU	15
  2003                                  error_current_directory 	EQU	16
  2004                                  error_not_same_device		EQU	17
  2005                                  error_no_more_files		EQU	18
  2006                                  
  2007                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
  2008                                  
  2009                                  error_write_protect		EQU	19
  2010                                  error_bad_unit			EQU	20
  2011                                  error_not_ready 		EQU	21
  2012                                  error_bad_command		EQU	22
  2013                                  error_CRC			EQU	23
  2014                                  error_bad_length		EQU	24
  2015                                  error_seek			EQU	25
  2016                                  error_not_DOS_disk		EQU	26
  2017                                  error_sector_not_found		EQU	27
  2018                                  error_out_of_paper		EQU	28
  2019                                  error_write_fault		EQU	29
  2020                                  error_read_fault		EQU	30
  2021                                  error_gen_failure		EQU	31
  2022                                  
  2023                                  ;	the new 3.0 error codes reported through INT 24
  2024                                  
  2025                                  error_sharing_violation 	EQU	32
  2026                                  error_lock_violation		EQU	33
  2027                                  error_wrong_disk		EQU	34
  2028                                  error_FCB_unavailable		EQU	35
  2029                                  error_sharing_buffer_exceeded	EQU	36
  2030                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00  ;AN000;
  2031                                  error_handle_EOF		EQU	38    ; DOS 4.00  ;AN000;
  2032                                  error_handle_Disk_Full		EQU	39    ; DOS 4.00  ;AN000;
  2033                                  
  2034                                  ;	New OEM network-related errors are 50-79
  2035                                  
  2036                                  error_not_supported		EQU	50
  2037                                  
  2038                                  error_net_access_denied		EQU	65	;M028
  2039                                  
  2040                                  ;	End of INT 24 reportable errors
  2041                                  
  2042                                  error_file_exists		EQU	80
  2043                                  error_DUP_FCB			EQU	81	; *****
  2044                                  error_cannot_make		EQU	82
  2045                                  error_FAIL_I24			EQU	83
  2046                                  
  2047                                  ;	New 3.0 network related error codes
  2048                                  
  2049                                  error_out_of_structures 	EQU	84
  2050                                  error_already_assigned		EQU	85
  2051                                  error_invalid_password		EQU	86
  2052                                  error_invalid_parameter 	EQU	87
  2053                                  error_NET_write_fault		EQU	88
  2054                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00  ;AN000;
  2055                                  
  2056                                  ;	BREAK <Interrupt 24 error codes>
  2057                                  
  2058                                  ;**	Int24 Error Codes
  2059                                  
  2060                                  error_I24_write_protect 	EQU	0
  2061                                  error_I24_bad_unit		EQU	1
  2062                                  error_I24_not_ready		EQU	2
  2063                                  error_I24_bad_command		EQU	3
  2064                                  error_I24_CRC			EQU	4
  2065                                  error_I24_bad_length		EQU	5
  2066                                  error_I24_Seek			EQU	6
  2067                                  error_I24_not_DOS_disk		EQU	7
  2068                                  error_I24_sector_not_found	EQU	8
  2069                                  error_I24_out_of_paper		EQU	9
  2070                                  error_I24_write_fault		EQU	0Ah
  2071                                  error_I24_read_fault		EQU	0Bh
  2072                                  error_I24_gen_failure		EQU	0Ch
  2073                                  ; NOTE: Code 0DH is used by MT-DOS.
  2074                                  error_I24_wrong_disk		EQU	0Fh
  2075                                  
  2076                                  ;	THE FOLLOWING ARE MASKS FOR THE AH REGISTER ON Int 24
  2077                                  ;
  2078                                  ;	NOTE: ABORT is ALWAYS allowed
  2079                                  
  2080                                  Allowed_FAIL			EQU	00001000B
  2081                                  Allowed_RETRY			EQU	00010000B
  2082                                  Allowed_IGNORE			EQU	00100000B
  2083                                  
  2084                                  I24_operation			EQU	00000001B  ;Z if READ,NZ if Write
  2085                                  I24_area			EQU	00000110B  ; 00 if DOS
  2086                                  						   ; 01 if FAT
  2087                                  						   ; 10 if root DIR
  2088                                  						   ; 11 if DATA
  2089                                  I24_class			EQU	10000000B  ;Z if DISK, NZ if FAT or char
  2090                                  
  2091                                  ;	BREAK <GetExtendedError CLASSes ACTIONs LOCUSs>
  2092                                  
  2093                                  ;**	The GetExtendedError call takes an error code and returns CLASS,
  2094                                  ;	ACTION and LOCUS codes to help programs determine the proper action
  2095                                  ;	to take for error codes that they don't explicitly understand.
  2096                                  
  2097                                  ;	Values for error CLASS
  2098                                  
  2099                                  errCLASS_OutRes 	EQU	1	; Out of Resource
  2100                                  errCLASS_TempSit	EQU	2	; Temporary Situation
  2101                                  errCLASS_Auth		EQU	3	; Permission problem
  2102                                  errCLASS_Intrn		EQU	4	; Internal System Error
  2103                                  errCLASS_HrdFail	EQU	5	; Hardware Failure
  2104                                  errCLASS_SysFail	EQU	6	; System Failure
  2105                                  errCLASS_Apperr 	EQU	7	; Application Error
  2106                                  errCLASS_NotFnd 	EQU	8	; Not Found
  2107                                  errCLASS_BadFmt 	EQU	9	; Bad Format
  2108                                  errCLASS_Locked 	EQU	10	; Locked
  2109                                  errCLASS_Media		EQU	11	; Media Failure
  2110                                  errCLASS_Already	EQU	12	; Collision with Existing Item
  2111                                  errCLASS_Unk		EQU	13	; Unknown/other
  2112                                  
  2113                                  ;	Values for error ACTION
  2114                                  
  2115                                  errACT_Retry		EQU	1	; Retry
  2116                                  errACT_DlyRet		EQU	2	; Delay Retry, retry after pause
  2117                                  errACT_User		EQU	3	; Ask user to regive info
  2118                                  errACT_Abort		EQU	4	; abort with clean up
  2119                                  errACT_Panic		EQU	5	; abort immediately
  2120                                  errACT_Ignore		EQU	6	; ignore
  2121                                  errACT_IntRet		EQU	7	; Retry after User Intervention
  2122                                  
  2123                                  ;	Values for error LOCUS
  2124                                  
  2125                                  errLOC_Unk		EQU	1	; No appropriate value
  2126                                  errLOC_Disk		EQU	2	; Random Access Mass Storage
  2127                                  errLOC_Net		EQU	3	; Network
  2128                                  errLOC_SerDev		EQU	4	; Serial Device
  2129                                  errLOC_Mem		EQU	5	; Memory
  2130                                  
  2131                                  ;============================================================================
  2132                                  ; INT2A.INC (MSDOS 6.0, 1991)
  2133                                  ;============================================================================
  2134                                  ; 04/05/2019 - Retro DOS v4.0
  2135                                  
  2136                                  ;**	Int 2A functions
  2137                                  ; ---------------------------------------------------------------------------
  2138                                  ;	Int 2A is an interface to the network code; it's also overloaded
  2139                                  ;		as a critical section handler since critical sections
  2140                                  ;		were originally created to support the net.
  2141                                  ; ---------------------------------------------------------------------------
  2142                                  
  2143                                  ; ---------------------------------------------------------------------------
  2144                                  ;**	This table was created by examining the source and may not be
  2145                                  ;	complete or completely accurate - JGL
  2146                                  ;
  2147                                  ;	M010	MD	8/31/90 - Added definition for AH = 5
  2148                                  
  2149                                  ;	(ah) = 0	installation check
  2150                                  ;			   (returns ah !=0 if installed)
  2151                                  ;	(ah) = 1	cooked net bios call
  2152                                  ;	(ah) = 3	query drive shared
  2153                                  ;			   (ds:si) = "n:" asciz string
  2154                                  ;	(ah) = 4	net bios
  2155                                  ;	       (al) = 0	   cooked net bios call
  2156                                  ;	       (al) = 1	   raw net bios call
  2157                                  ;	       (al) = 2	   ???
  2158                                  ;
  2159                                  ;	(ah) = 5	Get Net Adaptor Resources. CX returns the number of
  2160                                  ;			NCBs available/outstanding. DX returns the number of
  2161                                  ;			sessions. Supposedly, this is documented in an old
  2162                                  ;			IBM PC-LAN reference. Lotus Notes uses it. DOS LAN
  2163                                  ;			Manager 2.0 Enhanced responds to it. But it should
  2164                                  ;			not be used, as it is a hack, only to get Lotus
  2165                                  ;			Notes running.
  2166                                  ;
  2167                                  ;	(ah) = 80h	enter critical section
  2168                                  ;	(ah) = 81h	leave critical section
  2169                                  ;	(ah) = 82h	free all critical sections (Leave-all)
  2170                                  ;	(ah) = 84h	entering idle loop (don't understand how this works)
  2171                                  ; ---------------------------------------------------------------------------
  2172                                  
  2173                                  ;**	Critical section definitions
  2174                                  ; ---------------------------------------------------------------------------
  2175                                  ;	Although DOS is not designed to be reentrant there are some hacks
  2176                                  ;	which various programs use to make it so, in a limited fashion.
  2177                                  ;	Both WIN386 and some servers block copy a section of the DOS data
  2178                                  ;	area so that DOS can be reentered on behalf of another thread/program.
  2179                                  ;	DOS's global data structures, such as the memory arena, are not
  2180                                  ;	in this area, so critical section indicators are used to protect
  2181                                  ;	those areas.  DOS flags a critical section by issuing an INT_IBM
  2182                                  ;	(int 2Ah) at each critical section entry and exit.  Some clients
  2183                                  ;	(such as WIN386) just don't "context switch" the DOS when one
  2184                                  ;	of these is in effect, others, such as the IBM server, go ahead
  2185                                  ;	and reenter the DOS and if they get an int 2A to reenter the same
  2186                                  ;	critical section they then switch away from that second thread and
  2187                                  ;	let the first one finish and exit the section.
  2188                                  ; ---------------------------------------------------------------------------
  2189                                  
  2190                                  ; These below are subject to leave-all sections
  2191                                  critDisk    EQU     1			; Disk I/O critical section
  2192                                  critShare   EQU     1			; Sharer I/O critical section
  2193                                  critMem     EQU     1			; memory maintenance critical section
  2194                                  critSFT     EQU     1			; sft table allocation
  2195                                  critDevice  EQU     2			; Device I/O critical section
  2196                                  critNet     EQU     5			; network critical section
  2197                                  critIFS     EQU     6			; ifsfunc critical section
  2198                                  ; These below are not subject to leave-all sections
  2199                                  critASSIGN  EQU     8			; Assign has munged a system call
  2200                                  
  2201                                  ;============================================================================
  2202                                  ; MULT.INC (MSDOS 6.0, 1991)
  2203                                  ;============================================================================
  2204                                  ; 04/05/2019 - Retro DOS v4.0
  2205                                  
  2206                                  ;Break <Multiplex channels>
  2207                                  
  2208                                  ; ---------------------------------------------------------------------------
  2209                                  ; The current set of defined multiplex channels is (* means documented):
  2210                                  ;
  2211                                  ;   Channel(h)  Issuer          Receiver    Function
  2212                                  ;      00       server          PSPRINT     print job control
  2213                                  ;     *01       print/apps      PRINT       Queueing of files
  2214                                  ;      02       BIOS            REDIR       signal open/close of printers
  2215                                  ;
  2216                                  ;      05       command         REDIR       obtain text of net int 24 message
  2217                                  ;     *06       server/assign   ASSIGN      Install check
  2218                                  ;
  2219                                  ;      08       external driver IBMBIO      interface to internal routines
  2220                                  ;
  2221                                  ;      10       sharer/server   Sharer      install check
  2222                                  ;      11       DOS/server      Redir       install check/redirection funcs
  2223                                  ;      12       sharer/redir    DOS         dos functions and structure maint
  2224                                  ;      13       MSNET           MSNET       movement of NCBs
  2225                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
  2226                                  ;                                           of alternative INT_13 drivers after
  2227                                  ;                                           boot_up
  2228                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
  2229                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
  2230                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
  2231                                  ;      16       WIN386          WIN386      Windows communications
  2232                                  ;      17       Clipboard       WINDOWS     Clipboard interface
  2233                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
  2234                                  ;      19       Shell
  2235                                  ;      1A       Ansi.sys
  2236                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
  2237                                  ;
  2238                                  ;      40h      OS/2
  2239                                  ;      41h      Lanman
  2240                                  ;      42h      Lanman
  2241                                  ;      43h      Himem
  2242                                  ;                               AL = 20h    reserved for Mach 20 Himem support
  2243                                  ;                               AL = 30h    reserved for Himem external A20 code
  2244                                  ;      44h      Dosextender
  2245                                  ;      45H      Windows profiler
  2246                                  ;      46h      Windows/286 DOS extender
  2247                                  ;      47h      Basic Compiler Vn. 7.0
  2248                                  ;      48h      Doskey
  2249                                  ;      49h      DOS 5.x install 
  2250                                  ;      4Ah      Multi Purpose
  2251                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
  2252                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
  2253                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
  2254                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
  2255                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
  2256                                  ;
  2257                                  ;                multSmartdrv           10h
  2258                                  ;                multMagicdrv           11h
  2259                                  ;      4Bh      Task Switcher API
  2260                                  ;
  2261                                  ;      4Ch      APPS            APM         Advanced power management
  2262                                  ;      4Dh      Kana Kanji Converter, MSKK
  2263                                  ;
  2264                                  ;      51h      ODI real mode support driver (for Chicago)
  2265                                  ;
  2266                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
  2267                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
  2268                                  ;
  2269                                  ;      55h      COMMAND.COM
  2270                                  ;                multCOMFIRST           0 - API to determine whether 1st
  2271                                  ;                                           instance of command.com
  2272                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
  2273                                  ;                                           instance of ROM COMMAND
  2274                                  ;      56h      Sewell Development
  2275                                  ;               INTERLNK
  2276                                  ;
  2277                                  ;      57h      Iomega Corp.
  2278                                  ;
  2279                                  ;      ABh      Unspecified IBM use
  2280                                  ;      ACh      Graphics
  2281                                  ;      ADh      NLS (toronto)
  2282                                  ;      AEh
  2283                                  ;      AFh      Mode
  2284                                  ;      B0h      GRAFTABL        GRAFTABL
  2285                                  ;
  2286                                  ;      D7h      Banyan VINES
  2287                                  ; ---------------------------------------------------------------------------
  2288                                  
  2289                                  ;MUX 00-3F reserverd for IBM
  2290                                  ;MUX 80-BF reserverd for IBM
  2291                                  
  2292                                  ;MUX 40-7F reserved for Microsoft
  2293                                  
  2294                                  ;MUX C0-FF users
  2295                                  
  2296                                  MultSHARE   EQU     10h 		; sharer
  2297                                      ;	1   MFT_enter
  2298                                      ;	2   MFTClose
  2299                                      ;	3   MFTclU
  2300                                      ;	4   MFTCloseP
  2301                                      ;	5   MFTCloN
  2302                                      ;	6   set_block
  2303                                      ;	7   clr_block
  2304                                      ;	8   chk_block
  2305                                      ;	9   MFT_get
  2306                                      ;	10  ShSave
  2307                                      ;	11  ShChk
  2308                                      ;	12  ShCol
  2309                                      ;	13  ShCloseFile
  2310                                  
  2311                                  MultNET     EQU     11h 		; Network support
  2312                                  MultIFS     EQU     11h                 ; Network support
  2313                                      ;   1   IFS_RMDIR
  2314                                      ;   2   IFS_SEQ_RMDIR
  2315                                      ;   3   IFS_MKDIR
  2316                                      ;   4   IFS_SEQ_MKDIR
  2317                                      ;   5   IFS_CHDIR
  2318                                      ;   6   IFS_CLOSE
  2319                                      ;   7   IFS_COMMIT
  2320                                      ;   8   IFS_READ
  2321                                      ;   9   IFS_WRITE
  2322                                      ;   10  IFS_LOCK
  2323                                      ;   11  IFS_UNLOCK
  2324                                      ;   12  IFS_DISK_INFO
  2325                                      ;   13  IFS_SET_FILE_ATTRIBUTE
  2326                                      ;   14  IFS_SEQ_SET_FILE_ATTRIBUTE
  2327                                      ;   15  IFS_GET_FILE_INFO
  2328                                      ;   16  IFS_SEQ_GET_FILE_INFO
  2329                                      ;   17  IFS_RENAME
  2330                                      ;   18  IFS_SEQ_RENAME
  2331                                      ;   19  IFS_DELETE
  2332                                      ;   20  IFS_SEQ_DELETE
  2333                                      ;   21  IFS_OPEN
  2334                                      ;   22  IFS_SEQ_OPEN
  2335                                      ;   23  IFS_CREATE
  2336                                      ;   24  IFS_SEQ_CREATE
  2337                                      ;   25  IFS_SEQ_SEARCH_FIRST
  2338                                      ;   26  IFS_SEQ_SEARCH_NEXT
  2339                                      ;   27  IFS_SEARCH_FIRST
  2340                                      ;   28  IFS_SEARCH_NEXT
  2341                                      ;   29  IFS_ABORT
  2342                                      ;   30  IFS_ASSOPER
  2343                                      ;   31  Printer_SET_STRING
  2344                                      ;   32  IFSFlushBuf
  2345                                      ;   33  IFSBufWrite
  2346                                      ;   34  IFSResetEnvironment
  2347                                      ;   35  IFSSpoolCheck
  2348                                      ;   36  IFSSpoolClose
  2349                                      ;   37  IFSDeviceOper
  2350                                      ;   38  IFSSpoolEchoCheck
  2351                                      ;   39      - - -   Unused   - - -
  2352                                      ;   40      - - -   Unused   - - -
  2353                                      ;   41      - - -   Unused   - - -
  2354                                      ;   42  SERVER_DOSCALL_CLOSEFILES_FOR_UID
  2355                                      ;   43  DEVICE_IOCTL
  2356                                      ;   44  IFS_UPDATE_CB
  2357                                      ;   45  IFS_FILE_XATTRIBUTES
  2358                                      ;   46  IFS_XOPEN
  2359                                      ;   47  IFS_DEPENDENT_IOCTL
  2360                                  
  2361                                  MultDOS     EQU     12h 		; DOS call back
  2362                                      ;	1   DOS_CLOSE
  2363                                      ;	2   RECSET
  2364                                      ;	3   Get DOSGROUP
  2365                                      ;	4   PATHCHRCMP
  2366                                      ;	5   OUT
  2367                                      ;	6   NET_I24_ENTRY
  2368                                      ;	7   PLACEBUF
  2369                                      ;	8   FREE_SFT
  2370                                      ;	9   BUFWRITE
  2371                                      ;	10  SHARE_VIOLATION
  2372                                      ;	11  SHARE_ERROR
  2373                                      ;	12  SET_SFT_MODE
  2374                                      ;	13  DATE16
  2375                                      ;	14  SETVISIT
  2376                                      ;	15  SCANPLACE
  2377                                      ;	16  SKIPVISIT
  2378                                      ;	17  StrCpy
  2379                                      ;	18  StrLen
  2380                                      ;	19  UCase
  2381                                      ;	20  POINTCOMP
  2382                                      ;	21  CHECKFLUSH
  2383                                      ;	22  SFFromSFN
  2384                                      ;	23  GetCDSFromDrv
  2385                                      ;	24  Get_User_Stack
  2386                                      ;	25  GetThisDrv
  2387                                      ;	26  DriveFromText
  2388                                      ;	27  SETYEAR
  2389                                      ;	28  DSUM
  2390                                      ;	29  DSLIDE
  2391                                      ;	30  StrCmp
  2392                                      ;	31  initcds
  2393                                      ;	32  pjfnfromhandle
  2394                                      ;	33  $NameTrans
  2395                                      ;	34  CAL_LK
  2396                                      ;	35  DEVNAME
  2397                                      ;	36  Idle
  2398                                      ;   37  DStrLen
  2399                                      ;   38  NLS_OPEN      DOS 3.3
  2400                                      ;   39  $CLOSE        DOS 3.3
  2401                                      ;   40  NLS_LSEEK     DOS 3.3
  2402                                      ;   41  $READ         DOS 3.3
  2403                                      ;   42  FastInit      DOS 4.0
  2404                                      ;   43  NLS_IOCTL     DOS 3.3
  2405                                      ;   44  GetDevList    DOS 3.3
  2406                                      ;   45  NLS_GETEXT    DOS 3.3
  2407                                      ;   46  MSG_RETRIEVAL DOS 4.0
  2408                                      ;   47  FAKE_VERSION  DOS 4.0
  2409                                  
  2410                                  NLSFUNC     EQU     14h 		; NLSFUNC CALL , DOS 3.3
  2411                                      ;	0   NLSInstall
  2412                                      ;	1   ChgCodePage
  2413                                      ;	2   GetExtInfo
  2414                                      ;	3   SetCodePage
  2415                                      ;	4   GetCntry
  2416                                  
  2417                                  multANSI    EQU     1Ah                 ; ANSI multiplex number
  2418                                      ;   0   INSTALL_CHECK               ; install check for ANSI
  2419                                      ;   1   IOCTL_2F                    ; 2F interface to IOCTL
  2420                                      ;   2   DA_INFO_2F                  ; J.K. Information passing to ANSI.
  2421                                  
  2422                                  multMULT        EQU     4Ah
  2423                                  multMAGIC       EQU     256*multMULT + 11h
  2424                                  multMULTRPLTOM  EQU     06h
  2425                                  
  2426                                      ;   0   swap disk function for single floppy drive m/cs
  2427                                      ;       BIOS broadcasts with cx==0, and apps who handle
  2428                                      ;       swap disk messaging set cx == -1. BIOS sets dl == requested
  2429                                      ;       drive
  2430                                      ;
  2431                                      ;   1   Get available HMA & pointer to it. Returns in BX & ES:DI
  2432                                      ;   2   Allocate HMA. BX == number of bytes in HMA to be allocated
  2433                                      ;       returns pointer in ES:DI
  2434                                      ;
  2435                                      ;   3-4 currently used by nobody
  2436                                      ;   5   Switcher API
  2437                                      ;   6   Top of Memory for RPL.
  2438                                      ;           BIOS issues INT 2f AX=4a06 & DX = Top of Mem and any RPL
  2439                                      ;           code present in TOM should respond with a new TOM in DX
  2440                                      ;           to protect itself from MSLOAD & SYSINIT tromping over it.
  2441                                      ;           SYSINIT builds an arena with owner type 8 & name 'RPL' to
  2442                                      ;           protect the RPL code from COMMAND.COM transient protion.
  2443                                      ;           It is the responsibility of RPL program to release the mem.
  2444                                      ;   7   Reserved for PROTMAN support.
  2445                                      ;  10   smartdrv 4.0
  2446                                      ;  11   dblspace api
  2447                                      ;  12   MRCI     api
  2448                                      ;  13   dblspace/mrci stealth packet api
  2449                                  
  2450                                  MultAPM     EQU     4ch             ; Obselete ???
  2451                                      ;       00h     APM_VER_CHK
  2452                                      ;       01h     APM_SUS_SYS_REQ
  2453                                      ;       FFh     APM_SUS_RES_BATT_NOTIFY
  2454                                  
  2455                                  MultPWR_BRDCST  EQU     53h     ; Used by POWER.EXE to broadcast      ; M036
  2456                                  				;  APM events                         ; M036
  2457                                  MultPWR_API     EQU     54h     ; Used for accessing POWER.EXE's API  ; M036
  2458                                  
  2459                                  ;FASTOPEN is not chained through INT 2F   ; DOS 3.3 F.C.
  2460                                  ;	  it calls Multdos 42 to set up an entry routine address
  2461                                      ;	0   Install status  (reserved)
  2462                                      ;	1   Lookup
  2463                                      ;	2   Insert
  2464                                      ;	3   Delete
  2465                                      ;	4   Purge	    (reserved)
  2466                                  
  2467                                  ;============================================================================
  2468                                  ; FIND.INC (MSDOS 6.0, 1991)
  2469                                  ;============================================================================
  2470                                  ; 17/05/2019 - Retro DOS v4.0
  2471                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2472                                  
  2473                                  ;Break	<find first/next buffer>
  2474                                  
  2475                                  struc find_buf
  2476 00000000 ??                      .drive:	    resb 1		; drive of search
  2477 00000001 <res Bh>                .name:	    resb 11		; formatted name
  2478 0000000C ??                      .sattr:	    resb 1		; attribute of search
  2479 0000000D ????                    .LastEnt:   resw 1		; LastEnt
  2480 0000000F ????                    .DirStart:  resw 1		; DirStart
  2481 00000011 ????????                .NETID:	    resb 4 ; MSDOS 6.0 	; Reserved for NET
  2482 00000015 ??                      .attr:	    resb 1		; attribute found
  2483 00000016 ????                    .time:	    resw 1		; time
  2484 00000018 ????                    .date:	    resw 1		; date
  2485 0000001A ????                    .size_l:    resw 1		; low(size)
  2486 0000001C ????                    .size_h:    resw 1		; high(size)
  2487 0000001E <res Dh>                .pname:	    resb 13		; packed name
  2488                                  .size:
  2489                                  endstruc
  2490                                  
  2491                                  ;============================================================================
  2492                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2493                                  ;============================================================================
  2494                                  ; 29/04/2019 - Retro DOS v4.0
  2495                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2496                                  
  2497                                  ;Equates for COUNTRY INFORMATION.
  2498                                  SetCountryInfo	EQU	1	;country info
  2499                                  SetUcase	EQU	2	;uppercase table
  2500                                  SetLcase	EQU	3	;lowercase table (Reserved)
  2501                                  SetUcaseFile	EQU	4	;uppercase file spec table
  2502                                  SetFileList	EQU	5	;valid file character list
  2503                                  SetCollate	EQU	6	;collating sequence
  2504                                  SetDBCS 	EQU	7	;double byte character set
  2505                                  SetALL		EQU	-1	;all the entries
  2506                                  
  2507                                  ;DOS country and code page information table structure.
  2508                                  ;Internally, IBMDOS gives a pointer to this table.
  2509                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
  2510                                  ;this structure.
  2511                                  
  2512                                  struc  DOS_CCDPG	; DOS_country_cdpg_info
  2513 00000000 ????????????????        .ccInfo_reserved: 	resb 8	;reserved for internal use
  2514 00000008 <res 40h>               .ccPath_CountrySys:	resb 64 ;path and filename for country info
  2515 00000048 ????                    .ccSysCodePage:		resw 1	;system code page id
  2516 0000004A ????                    .ccNumber_of_entries:	resw 1  ; (default value = 6)
  2517 0000004C ??                      .ccSetUcase:		resb 1  ; (default value = SetUcase)
  2518 0000004D ????????                .ccUcase_ptr:		resd 1	;pointer to Ucase table
  2519                                  
  2520 00000051 ??                      .ccSetUcaseFile:	resb 1	; (default value = SetUcaseFile)
  2521 00000052 ????????                .ccFileUcase_ptr: 	resd 1	;pointer to File Ucase table
  2522                                  
  2523 00000056 ??                      .ccSetFileList:		resb 1 	; (default value = SetFileList)
  2524 00000057 ????????                .ccFileChar_ptr:	resd 1	;pointer to File char list table
  2525                                  
  2526 0000005B ??                      .ccSetCollate:		resb 1	; (default value = SetCollate)
  2527 0000005C ????????                .ccCollate_ptr:		resd 1	;pointer to collate table
  2528                                  
  2529                                  ; MSDOS 6.0
  2530 00000060 ??                      .ccSetDBCS:		resb 1	; (default value = SetDBCS)
  2531 00000061 ????????                .ccDBCS_ptr:		resd 1	; pointer to DBCS table
  2532                                  
  2533 00000065 ??                      .ccSetCountryInfo:	resb 1  ; (default value = SetCountryInfo)
  2534 00000066 ????                    .ccCountryInfoLen:	resw 1	;length of country info
  2535 00000068 ????                    .ccDosCountry:		resw 1	;system country code id
  2536 0000006A ????                    .ccDosCodePage:		resw 1	;system code page id
  2537 0000006C ????                    .ccDFormat:		resw 1	;date format
  2538 0000006E ??????????              .ccCurSymbol:		resb 5	;5 byte of (currency symbol+0)
  2539 00000073 ????                    .cc1000Sep:		resb 2	;2 byte of (1000 sep. + 0)
  2540 00000075 ????                    .ccDecSep:		resb 2	;2 byte of (Decimal sep. + 0)
  2541 00000077 ????                    .ccDateSep:		resb 2	;2 byte of (date sep. + 0)
  2542 00000079 ????                    .ccTimeSep:		resb 2	;2 byte of (time sep. + 0)
  2543 0000007B ??                      .ccCFormat:		resb 1	;currency format flags
  2544 0000007C ??                      .ccCSigDigits:		resb 1	;# of digits in currency
  2545 0000007D ??                      .ccTFormat:		resb 1	;time format
  2546 0000007E ????????                .ccMono_ptr:		resd 1	;monocase routine entry point
  2547 00000082 ????                    .ccListSep:		resb 2	;data list separator
  2548 00000084 <res Ah>                .ccReserved_area: 	resw 5	;reserved
  2549                                  .size:
  2550                                  endstruc
  2551                                  
  2552                                  ;Ucase table
  2553                                  struc CC_UCASE_TAB
  2554 00000000 ????                    .ccUcase_leng:		resw 1	; (default value = 128)
  2555 00000002 <res 80h>               .ccUcase_data:		resb 128
  2556                                  endstruc
  2557                                  
  2558                                  ;File Ucase table
  2559                                  struc CC_FILE_UCASE_TAB
  2560 00000000 ????                    .ccFileucase_leng:	resw 1	; (default value = 128)
  2561 00000002 <res 80h>               .ccFileucase_data:	resb 128
  2562                                  endstruc
  2563                                  
  2564                                  ;File char list
  2565                                  struc CC_FILE_CHAR_TAB
  2566 00000000 ????                    .ccFilechar_leng:	resw 1
  2567 00000002 <res 2Eh>               .ccFilechar_data:	resb 46
  2568                                  endstruc
  2569                                  
  2570                                  ;collate table
  2571                                  struc CC_COLLATE_TAB
  2572 00000000 ????                    .ccCollate_leng:	resw 1	; (default value = 128)
  2573 00000002 <res 100h>              .ccCollate_data:	resb 256
  2574                                  endstruc
  2575                                  
  2576                                  OLD_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDFormat - 10)
  2577                                  NEW_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDosCountry) ; 38
  2578                                  
  2579                                  ; 06/08/2018
  2580                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2581                                  
  2582                                  ;CAPITALIZATION equates
  2583                                  CAP_ONE_CHAR	equ	20H
  2584                                  CAP_STRING	equ	21H
  2585                                  CAP_ASCIIZ	equ	22H
  2586                                  CHECK_YES_NO	equ	23H
  2587                                  UPPER_TABLE	equ	80H
  2588                                  
  2589                                  ;NLS_YES	equ	59H  ; 'Y'
  2590                                  ;NLS_yes2	equ	79H  ; 'y' 	
  2591                                  ;NLS_NO		equ	4EH  ; 'N'	
  2592                                  ;NLS_no2	equ	6EH  ; 'n'	
  2593                                  
  2594                                  ;============================================================================
  2595                                  ; CURDIR.INC (MSDOS 6.0, 1991)
  2596                                  ;============================================================================
  2597                                  ; 25/04/2019 - Retro DOS v4.0
  2598                                  ; 09/07/2018 - Retro DOS v3.0 (CURDIR.INC, MSDOS 3.3, 1987)
  2599                                  
  2600                                  ;BREAK <Current directory list structure>
  2601                                  
  2602                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2603                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2604                                  ;									   ;
  2605                                  ; CDS items are used bu the internal routines to store cluster numbers and ;
  2606                                  ; network identifiers for each logical name.  The ID field is used dually, ;
  2607                                  ; both as net ID and for a cluster number for local devices.  In the case  ;
  2608                                  ; of local devices, the cluster number will be -1 if there is a potential  ;
  2609                                  ; of the disk being changed or if the path must be recracked.		   ;
  2610                                  ;
  2611                                  ;	Some pathnames have special preambles, such as
  2612                                  ;
  2613                                  ;		\\machine\sharename\...
  2614                                  ;	For these pathnames we can't allow ".." processing to back us
  2615                                  ;	up into the special front part of the name.  The CURDIR_END field
  2616                                  ;	holds the address of the seperator character which marks
  2617                                  ;	the split between the special preamble and the regular
  2618                                  ;	path list; ".." processing isn't allowed to back us up past
  2619                                  ;	(i.e., before) CURDIR_END
  2620                                  ;	For the root, it points at the leading /.  For net
  2621                                  ;	assignments it points at the end (nul) of the initial assignment:
  2622                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
  2623                                  ;	  ^		 ^		     ^
  2624                                  
  2625                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
  2626                                  TEMPLEN 	EQU	DIRSTRLEN*2
  2627                                  
  2628                                  struc curdir	; curdir_list
  2629 00000000 <res 43h>               .text:		resb DIRSTRLEN		; text of assignment and curdir
  2630 00000043 ????                    .flags:		resw 1			; various flags
  2631 00000045 ????????                .devptr:	resd 1			; local pointer to DPB or net device
  2632 00000049 ????????                .ID:		resw 2			; cluster of current dir (net ID)
  2633 0000004D ????                    .user_word:	resw 1
  2634 0000004F ????                    .end:		resw 1			; index to ".." backup limit - see above
  2635                                  ; MSDOS 6.0
  2636 00000051 ??                      .type:		resb 1			; IFS drive (2=ifs, 4=netuse)
  2637 00000052 ????????                .ifs_hdr:	resd 1			; Ptr to File System Header
  2638 00000056 ????                    .fsda:		resb 2			; File System Dependent Data Area
  2639                                  .size:
  2640                                  endstruc
  2641                                  
  2642                                  curdirLen	EQU curdir.size	; 88	; Needed for screwed up
  2643                                  
  2644                                  %define curdir_netID curdir_ID  ; dword
  2645                                  
  2646                                  ;**	Flag values for CURDIR_FLAGS
  2647                                  
  2648                                  curdir_isnet	EQU	1000000000000000B
  2649                                  CURDIR_isifs	EQU	1000000000000000B ; MSDOS 6.0	
  2650                                  curdir_inuse	EQU	0100000000000000B
  2651                                  curdir_splice	EQU	0010000000000000B
  2652                                  curdir_local	EQU	0001000000000000B
  2653                                  
  2654                                  ;									   ;
  2655                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2656                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2657                                  
  2658                                  ;============================================================================
  2659                                  ; CPMFCB.INC (MSDOS 3.3, 1987)
  2660                                  ;============================================================================
  2661                                  ; 09/07/2018 - Retro DOS v3.0
  2662                                  
  2663                                  ;BREAK <File Control Block definition>
  2664                                  
  2665                                  ;
  2666                                  ; Field definition for FCBs
  2667                                  ; The FCB has the following structure:
  2668                                  ;
  2669                                  ;	+---------------------------+
  2670                                  ;	|   Drive indicator(byte)   |
  2671                                  ;	+---------------------------+
  2672                                  ;	|    Filename (8 chars)     |
  2673                                  ;	+---------------------------+
  2674                                  ;	|    Extension (3 chars)    |
  2675                                  ;	+---------------------------+
  2676                                  ;	|   Current Extent(word)    |
  2677                                  ;	+---------------------------+
  2678                                  ;	|    Record size (word)     |
  2679                                  ;	+---------------------------+
  2680                                  ;	|    File Size (2 words)    |
  2681                                  ;	+---------------------------+
  2682                                  ;	|	Date of write	    |
  2683                                  ;	+---------------------------+
  2684                                  ;	|	Time of write	    |
  2685                                  ;	+---------------------------+
  2686                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2687                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2688                                  ;									   ;
  2689                                  ;	+---------------------------+
  2690                                  ;	|   8 bytes reserved	    |
  2691                                  ;	+---------------------------+
  2692                                  ;									   ;
  2693                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2694                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2695                                  ;	|    next record number     |
  2696                                  ;	+---------------------------+
  2697                                  ;	|   random record number    |
  2698                                  ;	+---------------------------+
  2699                                  ;
  2700                                  
  2701                                  struc	SYS_FCB
  2702 00000000 ??                      .drive:	resb 1
  2703 00000001 ????????????????        .name:	resb 8
  2704 00000009 ??????                  .ext:	resb 3
  2705 0000000C ????                    .EXTENT: resw 1
  2706 0000000E ????                    .RECSIZ: resw 1			; Size of record (user settable)
  2707 00000010 ????                    .FILSIZ: resw 1			; Size of file in bytes; used with the
  2708                                  				; following word
  2709 00000012 ????                    .DRVBP:	resw 1			; BP for SEARCH FIRST and SEARCH NEXT
  2710 00000014 ????                    .FDATE:	resw 1			; Date of last writing
  2711 00000016 ????                    .FTIME:	resw 1			; Time of last writing
  2712                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2713                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2714                                  ;									   ;
  2715 00000018 ????????????????        .reserved: resb 8		; RESERVED
  2716                                  ;									   ;
  2717                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2718                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2719 00000020 ??                      .NR:	resb 1			; Next record
  2720 00000021 ????????                .RR:	resb 4			; Random record
  2721                                  .size:
  2722                                  endstruc
  2723                                  
  2724                                  FILDIRENT EQU SYS_FCB.FILSIZ	; Used only by SEARCH FIRST and SEARCH
  2725                                  				; NEXT
  2726                                  ; 20/07/2018
  2727                                  %define fcb_sfn	SYS_FCB.reserved ; byte
  2728                                  
  2729                                  ; Note that fcb_net_handle, fcb_nsl_drive, fcb_nsld_drive and fcb_l_drive
  2730                                  ; all must point to the same byte.  Otherwise, the FCBRegen will fail.
  2731                                  ; NOTE about this byte (fcb_nsl_drive)
  2732                                  ;   The high two bits of this byte are used as follows to indicate the FCB type
  2733                                  ;	00 means a local file or device with sharing loaded
  2734                                  ;	10 means a remote (network) file
  2735                                  ;	01 means a local file with no sharing loaded
  2736                                  ;	11 means a local device with no sharing loaded
  2737                                  
  2738                                  ; 20/07/2018
  2739                                  
  2740                                  ;
  2741                                  ; Network FCB
  2742                                  ;
  2743                                  
  2744                                  %define fcb_net_drive	SYS_FCB.reserved+1  ; byte
  2745                                  %define fcb_net_handle	SYS_FCB.reserved+2  ; word
  2746                                  %define fcb_netID	SYS_FCB.reserved+4  ; dword		
  2747                                  
  2748                                  ;
  2749                                  ; No sharing local file FCB
  2750                                  ;
  2751                                  
  2752                                  %define fcb_nsl_drive	SYS_FCB.reserved+1  ; byte
  2753                                  %define fcb_nsl_bits	SYS_FCB.reserved+2  ; byte	
  2754                                  %define fcb_nsl_firclus SYS_FCB.reserved+3  ; word	
  2755                                  %define fcb_nsl_dirsec	SYS_FCB.reserved+5  ; word
  2756                                  %define fcb_nsl_dirpos  SYS_FCB.reserved+7  ; byte
  2757                                  
  2758                                  ;
  2759                                  ; No sharing local device FCB
  2760                                  ;
  2761                                  
  2762                                  %define fcb_nsld_drive	SYS_FCB.reserved+1  ; byte	
  2763                                  %define fcb_nsld_drvptr SYS_FCB.reserved+2  ; dword
  2764                                  
  2765                                  ;
  2766                                  ; Sharing local FCB
  2767                                  ;
  2768                                  
  2769                                  %define fcb_l_drive	SYS_FCB.reserved+1  ; byte
  2770                                  %define fcb_l_firclus	SYS_FCB.reserved+2  ; word
  2771                                  %define fcb_l_mfs	SYS_FCB.reserved+4  ; word
  2772                                  %define fcb_l_attr	SYS_FCB.reserved+6  ; byte
  2773                                  
  2774                                  ;
  2775                                  ; Bogusness:  the four cases are:
  2776                                  ;
  2777                                  ;   local file	    00
  2778                                  ;   local device    40
  2779                                  ;   local sharing   C0
  2780                                  ;   network	    80
  2781                                  ;
  2782                                  ; Since sharing and network collide, we cannot use a test instruction for
  2783                                  ; deciding whether a network or a share check in involved
  2784                                  ;
  2785                                  FCBDEVICE   EQU 040h
  2786                                  FCBNETWORK  EQU 080h
  2787                                  FCBSHARE    EQU 0C0h
  2788                                  
  2789                                  ; FCBSPECIAL must be able to mask off both net and share
  2790                                  FCBSPECIAL  EQU 080h
  2791                                  FCBMASK     EQU 0C0h
  2792                                  
  2793                                  ;============================================================================
  2794                                  ; FASTOPEN.INC, MSDOS 6.0, 1991
  2795                                  ;============================================================================
  2796                                  ; 11/07/2018 - Retro DOS v3.0
  2797                                  ; 25/04/2019 - Retro DOS v4.0
  2798                                  
  2799                                  struc FEI	; FASTOPEN_EXTENDED_INFO
  2800 00000000 ??                      .dirpos:	resb 1
  2801 00000001 ????????                .dirsec:	resd 1 ; MSDOS 6.0
  2802                                  ;.dirsec:	resw 1 ; MSDOS 3.3
  2803 00000005 ????                    .clusnum:	resw 1
  2804 00000007 ????                    .lastent:	resw 1	; for search first ; MSDOS 6.0
  2805 00000009 ????                    .dirstart:	resw 1	; for search first ; MSDOS 6.0
  2806                                  .size:
  2807                                  endstruc
  2808                                  
  2809                                  ; 23/07/2018
  2810                                  ;FASTOPEN NAME CACHING Subfunctions
  2811                                  FONC_Look_up	equ	1
  2812                                  FONC_insert	equ	2
  2813                                  FONC_delete	equ	3
  2814                                  FONC_update	equ	4
  2815                                  FONC_purge	equ	5	;reserved for the future use.
  2816                                  FONC_Rename	equ	6	;AN001
  2817                                  
  2818                                  ; 27/07/2018
  2819                                  ;FastOpen Data Structure
  2820                                  struc fastopen_entry	;Fastopen Entry pointer in DOS
  2821 00000000 ????                    .entry_size:	resw 1	; = 4	; size of the following
  2822 00000002 ????????                .name_caching:	resd 1
  2823                                  ; MSDOS 6.0
  2824                                  ;.fatchain_caching: resd 1	;reserved for future use
  2825                                  .size:
  2826                                  endstruc
  2827                                  
  2828                                  ; 27/07/2018
  2829                                  ;Equates used in DOS.
  2830                                  FastOpen_Set	       equ     00000001b
  2831                                  FastOpen_Reset	       equ     11111110b
  2832                                  Lookup_Success	       equ     00000010b
  2833                                  Lookup_Reset	       equ     11111101b
  2834                                  Special_Fill_Set       equ     00000100b
  2835                                  Special_Fill_Reset     equ     11111011b
  2836                                  No_Lookup	       equ     00001000b
  2837                                  Set_For_Search	       equ     00010000b	;DCR 167
  2838                                  
  2839                                  ; 09/08/2018 
  2840                                  ; (FASTXXXX.INC, MSDOS 6.0, 1991)
  2841                                  ; Fastxxx equates
  2842                                  FastOpen_ID	   equ	   1
  2843                                  FastSeek_ID	   equ	   2
  2844                                  Fast_yes	   equ	   10000000B	 ; fastxxx flag
  2845                                  
  2846                                  ;Structure definitions
  2847                                  ;
  2848                                  struc Fasttable_Entry	 ; Fastxxx  Entry pointer in DOS
  2849 00000000 ????                    .Fast_Entry_Num: resw 1	 ; number of entries
  2850 00000002 ????????                .FastOpen_Seek:	 resd 1	 ; fastopen & fastseek entry address
  2851                                  endstruc
  2852                                  
  2853                                  ;============================================================================
  2854                                  ; LOCK.INC, MSDOS 6.0, 1991
  2855                                  ;============================================================================
  2856                                  ; 14/07/2018 - Retro DOS v3.0
  2857                                  
  2858                                  ;**	LOCK.INC - Definitions for Record Locking
  2859                                  
  2860                                  ;**	LOCK functions
  2861                                  
  2862                                  LOCK_ALL	    equ    0
  2863                                  UNLOCK_ALL	    equ    1
  2864                                  LOCK_MUL_RANGE	    equ    2
  2865                                  UNLOCK_MUL_RANGE    equ    3
  2866                                  LOCK_READ	    equ    4
  2867                                  WRITE_UNLOCK	    equ    5
  2868                                  LOCK_ADD	    equ    6
  2869                                  
  2870                                  ;**	Structure for Lock buffer
  2871                                  
  2872                                  struc LockBuf
  2873 00000000 ????????                .Lock_position:	resd 1		; file position for LOCK
  2874 00000004 ????????                .Lock_length:	resd 1		; number of bytes to LOCK
  2875                                  endstruc
  2876                                  
  2877                                  ;============================================================================
  2878                                  ; DPL.ASM, MSDOS 6.0, 1991
  2879                                  ;============================================================================
  2880                                  ; 04/08/2018 - Retro DOS v3.0
  2881                                  
  2882                                  ; (SRVCALL.ASM)
  2883                                  
  2884                                  struc DPL
  2885 00000000 ????                    .AX:	resw	1	; AX register
  2886 00000002 ????                    .BX:	resw	1	; BX register
  2887 00000004 ????                    .CX:	resw	1	; CX register
  2888 00000006 ????                    .DX:	resw	1	; DX register
  2889 00000008 ????                    .SI:	resw	1	; SI register
  2890 0000000A ????                    .DI:	resw	1	; DI register
  2891 0000000C ????                    .DS:	resw	1	; DS register
  2892 0000000E ????                    .ES:	resw	1	; ES register
  2893 00000010 ????                    .rsrvd: resw	1	; Reserved
  2894 00000012 ????                    .UID:	resw	1	; User (Machine) ID (0 = local macine)
  2895 00000014 ????                    .PID:	resw	1	; Process ID (0 = local user PID)
  2896                                  .size:
  2897                                  endstruc
  2898                                   
  2899                                  ;----------------------------------------------------------------------------
  2900                                  ; DOSDATA
  2901                                  ;----------------------------------------------------------------------------
  2902                                  ;============================================================================
  2903                                  ; 24/04/2019 - Retro DOS v4.0
  2904                                  
  2905                                  DosDataSg equ 3 ; DOS Data Segment address (dw in 'retrodos4.s')
  2906                                  		; ((just after resident IO.SYS code&data))
  2907                                  
  2908                                  ;============================================================================
  2909                                  ; WIN386.INC, MSDOS 6.0, 1991
  2910                                  ;============================================================================
  2911                                  ; 24/04/2019 - Retro DOS 4.0
  2912                                  
  2913                                  ;
  2914                                  ;  Symbols and structures relating to WIN386 support.
  2915                                  ;
  2916                                  ;  Used by files in both the DOS and the BIOS.
  2917                                  ;
  2918                                  ;  Created: 7-13-89 by MRW
  2919                                  ;
  2920                                  
  2921                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
  2922                                  
  2923                                  MultWin386		equ     16h	; Int 2f multiplex number
  2924                                  
  2925                                  Win386_Init		equ	05h	; Win386 initialization
  2926                                  Win386_Exit		equ	06h	; Win386 exit
  2927                                  Win386_Devcall		equ	07h	; Win386 device call out
  2928                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
  2929                                  
  2930                                  ; When Win386_Devcall is broadcast, BX is the Device ID. DOS must 
  2931                                  ; answer call outs from the DOSMGR
  2932                                  
  2933                                  Win386_DOSMGR		equ	15H
  2934                                  
  2935                                  ; The following structures are used to communicate instance data to 
  2936                                  ; Win386 from the DOS and the BIOS. See Win386 API documentation
  2937                                  ; (chapter 3, "Call Out Interfaces") for further description.
  2938                                  
  2939                                  struc Win386_SIS	; Startup Info Structure
  2940 00000000 ????                     .Version:		resb	2	; db 3, 0
  2941 00000002 ????????                 .Next_Dev_Ptr:		resd	1	; pointer to next SIS in list
  2942 00000006 ????????                 .Virt_Dev_File_Ptr:	resd	1
  2943 0000000A ????????                 .Reference_Data:	resd	1
  2944 0000000E ????????                 .Instance_Data_Ptr:	resd	1	; pointer to instance data array
  2945                                  endstruc
  2946                                  
  2947                                  size_of_Win386_SIS equ 18 ; 24/04/2019 - Retro DOS v4.0
  2948                                  
  2949                                  struc Win386_IIS	; Instance Item Structure
  2950 00000000 ????????                .Ptr:			resd	1	; pointer to an instance item
  2951 00000004 ????                    .Size:			resw	1	; size of an instance item
  2952                                  endstruc
  2953                                  
  2954                                  size_of_Win386_IIS equ 6 ; 24/04/2019 - Retro DOS v4.0
  2955                                  
  2956                                  ;Win386 DOSMGR function return values to indicate operation done
  2957                                  
  2958                                  WIN_OP_DONE		equ	0B97Ch	; 
  2959                                  DOSMGR_OP_DONE		equ	0A2ABh	;
  2960                                  
  2961                                  ;M021
  2962                                  ; WInoldap callout multiplex number
  2963                                  
  2964                                  WINOLDAP		equ	46h	;
  2965                                  
  2966                                  ;============================================================================
  2967                                  ;----------------------------------------------------------------------------
  2968                                  ; DOSCODE
  2969                                  ;----------------------------------------------------------------------------
  2970                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  2971                                  
  2972                                  ;============================================================================
  2973                                  ; MSHEAD.ASM (MSDOS 6.0, 1991)
  2974                                  ;============================================================================
  2975                                  ; 16/07/2018 - Retro DOS 3.0
  2976                                  ;----------------------------------------------------------------------------
  2977                                  ; 24/04/2019 - Retro DOS 4.0
  2978                                  
  2979                                  ; MSDOS 6.0
  2980                                  ;----------------------------------------------------------------------------
  2981                                  ; FILE : ORIGIN.INC
  2982                                  ;----------------------------------------------------------------------------
  2983                                  ; This is included in origin.asm and mshead.asm. Contains the equate that
  2984                                  ; is used for ORGing the DOS code.
  2985                                  ;
  2986                                  ; Brief Description of the necessacity of this ORG:
  2987                                  ; -------------------------------------------------
  2988                                  ;
  2989                                  ; A special problem exits when running out of the HMA. The HMA starts at 
  2990                                  ; address FFFF:10. There is no place in the HMA with an offset of zero.
  2991                                  ; This means programs running out off the HMA must use non-zero offset base
  2992                                  ; addresses. It also means that if we're running multiple programs from the
  2993                                  ; HMA, the base offset of each segment must atleast be as big as all of the
  2994                                  ; HMA segments that precede it.
  2995                                  ; 
  2996                                  ; One solution to this problem to ORG each module at 64K minus its size.
  2997                                  ; For instance a code segment 1234h bytes in length would org'd at edcbh.
  2998                                  ; This gives max. flexibility regarding it's location in the HMA. By 
  2999                                  ; selecting segment values between f124h and ffffh it could be located 
  3000                                  ; anywhere in the HMA. The problem with this is that programs with such 
  3001                                  ; high ORGs would not be able to run in low RAM.
  3002                                  ;
  3003                                  ; A compromise solution is to set the ORG address somewhere between 0010h
  3004                                  ; and ffffh - their size. In the particular case of the BIOS and the DOS 
  3005                                  ; the following solution has been implemented:
  3006                                  ;
  3007                                  ; The Bios Code segment will have a very small offset and run at the very
  3008                                  ; front of the HMA, after the VDISK header. THE Dos Code segment will have 
  3009                                  ; a base offset of (700+<min. size off RAM based BIOS>+<min. size of the DOS
  3010                                  ; DATA segment when DOS is running low>). This will reflect the lowest 
  3011                                  ; possible physical address at which DOS code will run, while still providing
  3012                                  ; max. possible flexibility in HMA positioning. This offset MUST NOT be 
  3013                                  ; smaller then that 20+size of Bios Code segment when running high. This is 
  3014                                  ; mostly true.
  3015                                  ;
  3016                                  ; Also this ORG'd value must be communicated to the BIOS. This is done by
  3017                                  ; putting this value after the first jmp instruction in the DOS code in
  3018                                  ; mshead.asm. 
  3019                                  ;
  3020                                  ; In order for the stripz utility to know how many zeroes to be stripped 
  3021                                  ; out, this value is placed at the beginning of the binary in origin.asm.
  3022                                  ;
  3023                                  ; Revision History:
  3024                                  ;
  3025                                  ; Currently this is being done manually. Therefore any change in the DOS DATA
  3026                                  ; Size or the BIOS size should be reflected here. --- Feb 90
  3027                                  ;
  3028                                  ; BDSIZE.INC contains the equates for BIODATASIZE, BIOCODESIZ and DOSDATASIZ.
  3029                                  ; A utility called getsize will obtain the corresponding values from msdos
  3030                                  ; and msbio.map and update the values in BDSIZ.INC if they are different. 
  3031                                  ; DOS should now be built using the batch file makedos.bat which invokes this
  3032                                  ; utility. The FORMAT of BDSIZE.INC should not be changed as getsize is 
  3033                                  ; dependant on that.				  --- Apr 3 '90
  3034                                  ;
  3035                                  ; For ROMDOS, however, there is no need to org the doscode to any location
  3036                                  ; other than zero.  Therefore the stripz utility will not need to be used,
  3037                                  ; so the offset will not need to be included at the beginning of the code
  3038                                  ; segment.  Also, the BIOS can just assume that the resident code begins
  3039                                  ; at offset zero within the segment.
  3040                                  ; 
  3041                                  ;
  3042                                  ;--------------------------------------------------------------------------
  3043                                  
  3044                                  BIODATASTART	EQU	00700h
  3045                                  ;include	bdsize.inc	; this sets the values:
  3046                                  				;	BIODATASIZ
  3047                                  				;	BIOCODESIZ
  3048                                  				;	DOSDATASIZ
  3049                                  
  3050                                  ; 05/12/2022
  3051                                  ;BIODATASIZ EQU 00910H	; 0900h for MSDOS 6.21 IO.SYS
  3052                                  			; 0900h for MSDOS 5.0 IO.SYS
  3053                                  ;BIOCODESIZ EQU 01A70H	; 1A70h for MSDOS 6.21 IO.SYS
  3054                                  			; 1A60h for MSDOS 5.0 IO.SYS
  3055                                  ;DOSDATASIZ EQU 01370H	; 1370h for MSDOS 6.21 IO.SYS
  3056                                  			; 1370h for MSDOS 5.0 IO.SYS
  3057                                  ;ifndef ROMDOS
  3058                                  ;
  3059                                  ;BYTSTART	EQU    	BIODATASTART+BIODATASIZ+BIOCODESIZ+DOSDATASIZ
  3060                                  ;PARASTART	EQU	(BYTSTART + 0FH) AND (NOT 0FH)	
  3061                                  ;
  3062                                  ;else
  3063                                  ;
  3064                                  ;BYTSTART	EQU	0
  3065                                  ;PARASTART	EQU	0
  3066                                  ;
  3067                                  ;endif ; ROMDOS
  3068                                  
  3069                                  ; 24/04/2019 - Retro DOS v4.0 - Modification
  3070                                  ; -----------------------------------------------------------------
  3071                                  ;MSDAT001E equ 136Ah ; 4970 ; for MSDOS 6.21	
  3072                                  ;MSDAT001E equ 1370h ; 4976 ; for Retro DOS v4.0 modif. 25/05/2019	
  3073                                  ;DOSDATASIZE equ MSDAT001E
  3074                                  ; 05/12/2022
  3075                                  ;DOSDATASIZE equ $ ; 29/04/2019 ; -only- for RETRO DOS v4.0 :
  3076                                  ;_PARASTART_ equ DOSDATASIZE ; segment value will point to start of
  3077                                  			    ; of DOSDATA (in low memory) while
  3078                                  			    ; dos/kernel code starts just after 
  3079                                  			    ; this data block ((org = DOSDATASIZE))
  3080                                  			    ; (in low memory or in HMA)	
  3081                                  ; -----------------------------------------------------------------
  3082                                  
  3083                                  ; 04/11/2022	
  3084                                  ; -----------------------------------------------------------------	
  3085                                  ; NOTE:
  3086                                  ; Microsoft dos programmers were calling 'IO.SYS' as dos 'BIOS'
  3087                                  ; (Also, they were calling 'ROMBIOS' as 'ROM' only!)
  3088                                  ; -----------------------------------------------------------------
  3089                                  
  3090                                  ; ----------------------------------------------------------------------------
  3091                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3092                                  ; ----------------------------------------------------------------------------
  3093                                  
  3094                                  ;segment .code vstart=3DD0h ; 06/12/2022
  3095                                  ; 29/09/2023
  3096                                  segment .code vstart=3DE0h ; 19/09/2023 - Retro DOS v4.2 (Modified MSDOS 6.22)
  3097                                  								
  3098                                  ; ============================================================================
  3099                                  
  3100                                  
  3101                                  ;[ORG 3DE0h]
  3102                                  
  3103                                  ;[ORG _PARASTART_]     ; [org 136Ah]
  3104                                  
  3105                                  ;[ORG 1370h] ; 25/05/2019 - Retro DOS v4.0
  3106                                  
  3107                                  	; 05/12/2022 - RetroDOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3108                                  	;PARASTART equ 3DD0h ; BIOSDATASTART+BIOSDATASIZE
  3109                                  			     ; +BIOSCODESIZE+DOSDATASIZE (rounded up)
  3110                                  	
  3111                                  	; 29/09/2023 
  3112                                  	; 19/09/2023 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
  3113                                  	PARASTART equ 3DE0h	; (MSDOS 6.22 MSDOS.SYS)
  3114                                  
  3115                                  	[ORG PARASTART]	
  3116                                  
  3117                                  _$STARTCODE:
  3118                                  
  3119                                  ;PARASTART:
  3120 00000000 E91676                          JMP     DOSINIT
  3121                                  
  3122                                  	;dw	PARASTART	; PARASTART = 3DE0h for MSDOS 6.0, 6.22
  3123                                  	; 04/11/2022
  3124 00000003 [0000]                  	dw	_$STARTCODE	; PARASTART = 3DD0h for MSDOS 5.0
  3125                                  
  3126                                  BioDataSeg:
  3127 00000005 7000                    	dw	0070h		; Bios data segment fixed at 70h
  3128                                  
  3129                                  ; DosDSeg is a data word in the DOSCODE segment that is loaded with
  3130                                  ; the segment address of DOSDATA. This is purely an optimization, that
  3131                                  ; allows getting the DOS data segment without going through the 
  3132                                  ; BIOS data segment. It is used by the "getdseg" macro.
  3133                                  
  3134                                  DosDSeg:
  3135 00000007 0000                    	dw	0
  3136                                  	
  3137                                  ;============================================================================
  3138                                  ; MSTABLE.ASM (MSDOS 6.0, 1991)
  3139                                  ;============================================================================
  3140                                  ; 16/07/2018 - Retro DOS 3.0
  3141                                  ; 29/04/2019 - Retro DOS 4.0
  3142                                  
  3143                                  	; (MSDOS version)
  3144                                  	; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3145                                  	;db	6
  3146                                  	;db	20
  3147                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
  3148                                  	; DOSCODE:3DD9h (MSDOS 5.0, MSDOS.SYS)
  3149                                  	;db	5
  3150                                  	;db	0	
  3151                                  
  3152                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
  3153                                  MSVERS:				; MS-DOS version in hex for $GET_VERSION
  3154 00000009 06                      MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  3155 0000000A 16                      MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  3156                                  
  3157                                  ;;hkn YRTAB & MONTAB moved to DOSDATA in ms_data.asm
  3158                                  ;	I_am	YRTAB,8,<200,166,200,165,200,165,200,165>   ; [SYSTEM]
  3159                                  ;	I_am	MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> ; [SYSTEM]
  3160                                  
  3161                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3162                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
  3163                                  ;
  3164                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
  3165                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
  3166                                  
  3167                                  ; This is the error code mapping table for INT 21 errors. This table defines
  3168                                  ; those error codes which are "allowed" for each system call. If the error
  3169                                  ; code ABOUT to be returned is not "allowed" for the call, the correct action
  3170                                  ; is to return the "real" error via Extended error, and one of the allowed
  3171                                  ; errors on the actual call.
  3172                                  ;
  3173                                  ; The table is organized as follows:
  3174                                  ;
  3175                                  ;    Each entry in the table is of variable size, but the first
  3176                                  ;       two bytes are always:
  3177                                  ;
  3178                                  ;       Call#,Cnt of bytes following this byte
  3179                                  ;
  3180                                  ; EXAMPLE:
  3181                                  ;       Call 61 (OPEN)
  3182                                  ;
  3183                                  ;       DB      61,5,12,3,2,4,5
  3184                                  ;
  3185                                  ;       61 is the AH INT 21 call value for OPEN.
  3186                                  ;        5 indicates that there are 5 bytes after this byte (12,3,2,4,5).
  3187                                  ;       Next five bytes are those error codes which are "allowed" on OPEN.
  3188                                  ;       The order of these values is not important EXCEPT FOR THE LAST ONE (in
  3189                                  ;       this case 5).  The last value will be the one returned on the call if
  3190                                  ;       the "real" error is not one of the allowed ones.
  3191                                  ;
  3192                                  ; There are a number of calls (for instance all of the FCB calls) for which
  3193                                  ;   there is NO entry.  This means that NO error codes are returned on this
  3194                                  ;   call, so set up an Extended error and leave the current error code alone.
  3195                                  ;
  3196                                  ; The table is terminated by a call value of 0FFh
  3197                                  
  3198                                  ;PUBLIC I21_MAP_E_TAB
  3199                                  	; 10/08/2018
  3200                                  
  3201                                  ; 29/04/2019
  3202                                  ; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3203                                  ; 04/11/2022
  3204                                  ; DOSCODE:3DDBh	(MSDOS 5.0 MSDOS.SYS)
  3205                                  
  3206                                  I21_MAP_E_TAB:	; LABEL	BYTE
  3207 0000000B 38020102                    DB  INTERNATIONAL,2,error_invalid_function,error_file_not_found
  3208 0000000F 3903030205                  DB  MKDIR,3,error_path_not_found,error_file_not_found,error_access_denied
  3209 00000014 3A041003                    DB  RMDIR,4,error_current_directory,error_path_not_found
  3210 00000018 0205                        DB          error_file_not_found,error_access_denied
  3211 0000001A 3B020203                    DB  CHDIR,2,error_file_not_found,error_path_not_found
  3212 0000001E 3C040302                    DB  CREAT,4,error_path_not_found,error_file_not_found
  3213 00000022 04                          DB          error_too_many_open_files
  3214 00000023 05                          DB          error_access_denied
  3215                                      ; MSDOS 6.0
  3216 00000024 3D0603020C                  DB	OPEN,6,error_path_not_found,error_file_not_found,error_invalid_access
  3217 00000029 04                          DB          error_too_many_open_files
  3218 0000002A 1A05                        DB          error_not_DOS_disk,error_access_denied
  3219                                      ; MSDOS 3.3
  3220                                      ;DB	OPEN,5,error_path_not_found,error_file_not_found,error_invalid_access
  3221                                      ;DB		error_too_many_open_files,error_access_denied
  3222 0000002C 3E0106                      DB  CLOSE,1,error_invalid_handle
  3223 0000002F 3F020605                    DB  READ,2,error_invalid_handle,error_access_denied
  3224 00000033 40020605                    DB  WRITE,2,error_invalid_handle,error_access_denied
  3225 00000037 4103030205                  DB  UNLINK,3,error_path_not_found,error_file_not_found,error_access_denied
  3226 0000003C 42020601                    DB  LSEEK,2,error_invalid_handle,error_invalid_function
  3227 00000040 4304030201                  DB  CHMOD,4,error_path_not_found,error_file_not_found,error_invalid_function
  3228 00000045 05                          DB          error_access_denied
  3229 00000046 44050F0D01                  DB  IOCTL,5,error_invalid_drive,error_invalid_data,error_invalid_function
  3230 0000004B 0605                        DB          error_invalid_handle,error_access_denied
  3231 0000004D 45020604                    DB  XDUP,2,error_invalid_handle,error_too_many_open_files
  3232 00000051 46020604                    DB  XDUP2,2,error_invalid_handle,error_too_many_open_files
  3233                                      ; MSDOS 6.0	
  3234 00000055 47021A0F                    DB  CURRENT_DIR,2,error_not_DOS_disk,error_invalid_drive
  3235                                      ; MSDOS 3.3	
  3236                                      ;DB  CURRENT_DIR,1,error_invalid_drive
  3237 00000059 48020708                    DB  ALLOC,2,error_arena_trashed,error_not_enough_memory
  3238 0000005D 49020709                    DB  DEALLOC,2,error_arena_trashed,error_invalid_block
  3239 00000061 4A03070908                  DB  SETBLOCK,3,error_arena_trashed,error_invalid_block,error_not_enough_memory
  3240 00000066 4B08030102                  DB  EXEC,8,error_path_not_found,error_invalid_function,error_file_not_found
  3241 0000006B 040B0A                      DB          error_too_many_open_files,error_bad_format,error_bad_environment
  3242 0000006E 0805                        DB          error_not_enough_memory,error_access_denied
  3243 00000070 4E03030212                  DB  FIND_FIRST,3,error_path_not_found,error_file_not_found,error_no_more_files
  3244 00000075 4F0112                      DB  FIND_NEXT,1,error_no_more_files
  3245                                      ; MSDOS 6.0
  3246 00000078 5605110302                  DB  RENAME,5,error_not_same_device,error_path_not_found,error_file_not_found
  3247 0000007D 1005                        DB		error_current_directory,error_access_denied
  3248                                      ; MSDOS 3.3
  3249                                      ;DB  RENAME,4,error_not_same_device,error_path_not_found,error_file_not_found
  3250                                      ;DB		error_access_denied
  3251                                      ; MSDOS 6.0	
  3252 0000007F 57040608                    DB  FILE_TIMES,4,error_invalid_handle,error_not_enough_memory
  3253 00000083 0D01                        DB		error_invalid_data,error_invalid_function
  3254                                      ; MSDOS 3.3	
  3255                                      ;DB  FILE_TIMES,2,error_invalid_handle,error_invalid_function
  3256 00000085 580101                      DB  ALLOCOPER,1,error_invalid_function
  3257 00000088 5A040302                    DB  CREATETEMPFILE,4,error_path_not_found,error_file_not_found
  3258 0000008C 0405                        DB          error_too_many_open_files,error_access_denied
  3259 0000008E 5B055003                    DB  CREATENEWFILE,5,error_file_exists,error_path_not_found
  3260 00000092 020405                      DB          error_file_not_found,error_too_many_open_files,error_access_denied
  3261 00000095 5C040601                    DB  LOCKOPER,4,error_invalid_handle,error_invalid_function
  3262 00000099 2421                        DB          error_sharing_buffer_exceeded,error_lock_violation
  3263 0000009B 65020102                    DB  GETEXTCNTRY,2,error_invalid_function,error_file_not_found	;DOS 3.3
  3264 0000009F 66020102                    DB  GETSETCDPG,2,error_invalid_function,error_file_not_found        ;DOS 3.3
  3265 000000A3 680106                      DB  COMMIT,1,error_invalid_handle                                   ;DOS 3.3
  3266 000000A6 67030408                    DB  EXTHANDLE,3,error_too_many_open_files,error_not_enough_memory
  3267 000000AA 01                          DB              error_invalid_function
  3268                                      ; MSDOS 6.0		
  3269 000000AB 6C0A                        DB	ExtOpen,10
  3270 000000AD 03020C                      DB	  error_path_not_found,error_file_not_found,error_invalid_access
  3271 000000B0 045008                      DB		error_too_many_open_files,error_file_exists,error_not_enough_memory
  3272 000000B3 1A0D                        DB		error_not_DOS_disk,error_invalid_data
  3273 000000B5 0105                        DB		error_invalid_function,error_access_denied
  3274 000000B7 69040F0D                    DB	GetSetMediaID,4,error_invalid_drive,error_invalid_data
  3275 000000BB 0105                        DB		error_invalid_function,error_access_denied
  3276 000000BD FF                          DB  0FFh
  3277                                  
  3278                                  ;19/09/2023
  3279                                  ;22/12/2022
  3280                                  ;04/11/2022	
  3281                                  ;29/04/2019 - Retro DOS v4.0
  3282                                  ;============================================================================
  3283                                  ; 	Retro DOS v4.0
  3284                                  ;============================================================================
  3285 000000BE 00                      	db 	0
  3286                                  RETRODOSMSG:
  3287 000000BF 0D0A                    	db	13,10
  3288                                  	;;;;;db	"Retro DOS v4.0 by Erdogan Tan [2019]"
  3289                                  	;;;;db	"Retro DOS v4.0 by Erdogan Tan [2022]"
  3290                                  	;;;db	"Retro DOS v4.1 by Erdogan Tan [2022]"	; 28/12/2022
  3291                                  	;;db	"Retro DOS v4.2 by Erdogan Tan [2022]"	; 30/12/2022
  3292                                  	;db	"Retro DOS v4.2 by Erdogan Tan [2023]"
  3293 000000C1 526574726F20444F53-     	db	"Retro DOS v4.2 by Erdogan Tan [2024]"	; 05/01/2024
  3293 000000CA 2076342E3220627920-
  3293 000000D3 4572646F67616E2054-
  3293 000000DC 616E205B323032345D 
  3294 000000E5 0D0A2400                	db	13,10,"$", 0 
  3295                                  
  3296                                  ;============================================================================
  3297                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  3298                                  ;============================================================================
  3299                                  ; 11/07/2018 - Retro DOS v3.0
  3300                                  
  3301                                  	%define short_addr dw  ; 03/03/2018 - Retro DOS v2.0
  3302 000000E9 90                      align 2
  3303                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0E00h
  3304                                  
  3305                                  ; Standard Functions
  3306                                  ;DISPATCH  LABEL WORD
  3307                                  DISPATCH:
  3308                                  	; 16/07/2018 - Retro DOS v3.0
  3309                                  	; (MSDOS 3.3)
  3310                                  
  3311                                  ; 29/04/2019
  3312                                  ; DOSCODE:3E9Eh (MSDOS 6.21, MSDOS.SYS)
  3313                                  
  3314                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3315                                  ; DOSCODE:3E8Eh (MSDOS 5.0, MSDOS.SYS)
  3316                                  
  3317 000000EA [4B61]                          short_addr  _$ABORT			    ;  0      0
  3318 000000EC [3C16]                          short_addr  _$STD_CON_INPUT		    ;  1      1
  3319 000000EE [4516]                          short_addr  _$STD_CON_OUTPUT		    ;  2      2
  3320 000000F0 [F716]                          short_addr  _$STD_AUX_INPUT		    ;  3      3
  3321 000000F2 [1217]                          short_addr  _$STD_AUX_OUTPUT		    ;  4      4
  3322 000000F4 [1817]                          short_addr  _$STD_PRINTER_OUTPUT	    ;  5      5
  3323 000000F6 [8315]                          short_addr  _$RAW_CON_IO		    ;  6      6
  3324 000000F8 [AF15]                          short_addr  _$RAW_CON_INPUT		    ;  7      7
  3325 000000FA [5D13]                          short_addr  _$STD_CON_INPUT_NO_ECHO	    ;  8      8
  3326 000000FC [B613]                          short_addr  _$STD_CON_STRING_OUTPUT	    ;  9      9
  3327 000000FE [C213]                          short_addr  _$STD_CON_STRING_INPUT	    ; 10      A
  3328 00000100 [2C17]                          short_addr  _$STD_CON_INPUT_STATUS	    ; 11      B
  3329 00000102 [3617]                          short_addr  _$STD_CON_INPUT_FLUSH	    ; 12      C
  3330 00000104 [810F]                          short_addr  _$DISK_RESET		    ; 13      D
  3331 00000106 [680E]                          short_addr  _$SET_DEFAULT_DRIVE		    ; 14      E
  3332 00000108 [051E]                          short_addr  _$FCB_OPEN			    ; 15      F
  3333 0000010A [D517]                          short_addr  _$FCB_CLOSE			    ; 16     10
  3334 0000010C [F41E]                          short_addr  _$DIR_SEARCH_FIRST		    ; 17     11
  3335 0000010E [3A1F]                          short_addr  _$DIR_SEARCH_NEXT		    ; 18     12
  3336 00000110 [7B17]                          short_addr  _$FCB_DELETE		    ; 19     13
  3337 00000112 [5C1C]                          short_addr  _$FCB_SEQ_READ		    ; 20     14
  3338 00000114 [601C]                          short_addr  _$FCB_SEQ_WRITE	            ; 21     15
  3339 00000116 [E41E]                          short_addr  _$FCB_CREATE		    ; 22     16
  3340 00000118 [4118]                          short_addr  _$FCB_RENAME		    ; 23     17
  3341                                  	; 16/07/2018
  3342                                          ;short_addr _CPMFUNC			    ; 24     18	
  3343 0000011A [5306]                          short_addr  NO_OP			    ; 24     18
  3344 0000011C [630E]                          short_addr  _$GET_DEFAULT_DRIVE		    ; 25     19
  3345 0000011E [580E]                          short_addr  _$SET_DMA			    ; 26     1A
  3346                                  
  3347                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3348                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3349                                  ;                                                                          ;
  3350 00000120 [100F]                          short_addr  _$SLEAZEFUNC		    ; 27     1B
  3351 00000122 [120F]                          short_addr  _$SLEAZEFUNCDL		    ; 28     1C
  3352                                  ;                                                                          ;
  3353                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3354                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3355                                  
  3356                                          ;short_addr  _CPMFUNC			    ; 29     1D
  3357                                          ;short_addr  _CPMFUNC			    ; 30     1E
  3358                                  
  3359                                  ; 08/07/2018 - Retro DOS v3.0
  3360                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3361                                  
  3362 00000124 [5306]                  	short_addr  NO_OP			    ; 29     1D
  3363 00000126 [5306]                  	short_addr  NO_OP			    ; 30     1E
  3364                                  
  3365                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3366                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3367                                  ;                                                                          ;
  3368 00000128 [510F]                          short_addr  _$GET_DEFAULT_DPB               ; 31     1F
  3369                                  ;                                                                          ;
  3370                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3371                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3372                                          ;short_addr _CPMFUNC			    ; 32     20
  3373                                  
  3374                                  ; 08/07/2018 - Retro DOS v3.0
  3375                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3376                                  
  3377 0000012A [5306]                  	short_addr  NO_OP			    ; 32     20
  3378                                  
  3379 0000012C [641C]                          short_addr  _$FCB_RANDOM_READ               ; 33     21
  3380 0000012E [681C]                          short_addr  _$FCB_RANDOM_WRITE              ; 34     22
  3381 00000130 [8D17]                          short_addr  _$GET_FCB_FILE_LENGTH	    ; 35     23
  3382 00000132 [6317]                          short_addr  _$GET_FCB_POSITION		    ; 36     24
  3383                                  
  3384                                  ;MAXCALL = ($-DISPATCH)/2 - 1
  3385                                  MAXCALL EQU ($-DISPATCH)/2 - 1
  3386                                  
  3387                                  ; Extended Functions
  3388 00000134 [890E]                          short_addr  _$SET_INTERRUPT_VECTOR	    ; 37     25
  3389                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3390                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3391                                  ;                                                                          ;
  3392 00000136 [8E10]                          short_addr  _$CREATE_PROCESS_DATA_BLOCK	    ; 38     26
  3393                                  ;                                                                          ;
  3394                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3395                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3396 00000138 [581C]                          short_addr  _$FCB_RANDOM_READ_BLOCK	    ; 39     27
  3397 0000013A [541C]                          short_addr  _$FCB_RANDOM_WRITE_BLOCK        ; 40     28
  3398 0000013C [050F]                          short_addr  _$PARSE_FILE_DESCRIPTOR	    ; 41     29
  3399 0000013E [5E0A]                          short_addr  _$GET_DATE                      ; 42     2A
  3400 00000140 [7B0A]                          short_addr  _$SET_DATE                      ; 43     2B
  3401 00000142 [9A0A]                          short_addr  _$GET_TIME                      ; 44     2C
  3402 00000144 [AB0A]                          short_addr  _$SET_TIME                      ; 45     2D
  3403 00000146 [490C]                          short_addr  _$SET_VERIFY_ON_WRITE           ; 46     2E
  3404                                  
  3405                                  ; Extended functionality group
  3406 00000148 [450E]                          short_addr  _$GET_DMA                       ; 47     2F
  3407 0000014A [200C]                          short_addr  _$GET_VERSION                   ; 48     30
  3408 0000014C [EF60]                          short_addr  _$KEEP_PROCESS		    ; 49     31
  3409                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3410                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3411                                  ;                                                                          ;
  3412 0000014E [530F]                          short_addr  _$GET_DPB			    ; 50     32
  3413                                  ;                                                                          ;
  3414                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3415                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3416 00000150 [6702]                          short_addr  _$SET_CTRL_C_TRAPPING           ; 51     33
  3417 00000152 [3B0F]                          short_addr  _$GET_INDOS_FLAG                ; 52     34
  3418 00000154 [7A0E]                          short_addr  _$GET_INTERRUPT_VECTOR          ; 53     35
  3419 00000156 [220E]                          short_addr  _$GET_DRIVE_FREESPACE           ; 54     36
  3420 00000158 [B60E]                          short_addr  _$CHAR_OPER                     ; 55     37
  3421 0000015A [500C]                          short_addr  _$INTERNATIONAL                 ; 56     38
  3422                                  ; XENIX CALLS
  3423                                  ;   Directory Group
  3424 0000015C [C021]                          short_addr  _$MKDIR			    ; 57     39
  3425 0000015E [0C21]                          short_addr  _$RMDIR			    ; 58     3A
  3426 00000160 [4721]                          short_addr  _$CHDIR			    ; 59     3B
  3427                                  ;   File Group
  3428 00000162 [0D6F]                          short_addr  _$CREAT			    ; 60     3C
  3429 00000164 [366E]                          short_addr  _$OPEN			    ; 61     3D
  3430 00000166 [6766]                          short_addr  _$CLOSE		 	    ; 62     3E
  3431 00000168 [7867]                          short_addr  _$READ			    ; 63     3F
  3432 0000016A [DE67]                          short_addr  _$WRITE			    ; 64     40
  3433 0000016C [5D6F]                          short_addr  _$UNLINK			    ; 65     41
  3434 0000016E [E367]                          short_addr  _$LSEEK			    ; 66     42
  3435 00000170 [1A6F]                          short_addr  _$CHMOD			    ; 67     43
  3436 00000172 [2122]                          short_addr  _$IOCTL			    ; 68     44
  3437 00000174 [9868]                          short_addr  _$DUP			    ; 69     45
  3438 00000176 [B668]                          short_addr  _$DUP2			    ; 70     46
  3439 00000178 [A820]                          short_addr  _$CURRENT_DIR		    ; 71     47
  3440                                  ;   Memory Group
  3441 0000017A [E261]                          short_addr  _$ALLOC			    ; 72     48
  3442 0000017C [5C63]                          short_addr  _$DEALLOC                       ; 73     49
  3443 0000017E [3863]                          short_addr  _$SETBLOCK                      ; 74     4A
  3444                                  ;   Process Group
  3445 00000180 [C95A]                          short_addr  _$EXEC			    ; 75     4B
  3446 00000182 [2761]                          short_addr  _$EXIT			    ; 76     4C
  3447 00000184 [BF5A]                          short_addr  _$WAIT			    ; 77     4D
  3448 00000186 [F21F]                          short_addr  _$FIND_FIRST		    ; 78     4E
  3449                                  ;   Special Group
  3450 00000188 [4620]                          short_addr  _$FIND_NEXT			    ; 79     4F
  3451                                  ; SPECIAL SYSTEM GROUP
  3452                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3453                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3454                                  ;                                                                          ;
  3455 0000018A [B902]                          short_addr  _$SET_CURRENT_PDB		    ; 80     50
  3456 0000018C [C502]                          short_addr  _$GET_CURRENT_PDB               ; 81     51
  3457 0000018E [470F]                          short_addr  _$GET_IN_VARS                   ; 82     52
  3458 00000190 [B60F]                          short_addr  _$SETDPB			    ; 83     53
  3459                                  ;                                                                          ;
  3460                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3461                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3462 00000192 [440C]                          short_addr  _$GET_VERIFY_ON_WRITE	    ; 84     54
  3463                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3464                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3465                                  ;                                                                          ;
  3466 00000194 [7D10]                          short_addr  _$DUP_PDB                       ; 85     55
  3467                                  ;                                                                          ;
  3468                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3469                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3470 00000196 [836F]                          short_addr  _$RENAME			    ; 86     56
  3471 00000198 [4A68]                          short_addr  _$FILE_TIMES                    ; 87     57
  3472 0000019A [9163]                          short_addr  _$ALLOCOPER                     ; 88     58
  3473                                  
  3474                                  ; 08/07/2018 - Retro DOS v3.0
  3475                                  ; -------------------------------------------------------------------------;
  3476                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3477                                  
  3478                                  ; Network extention system calls
  3479 0000019C [CA0E]                          short_addr  _$GetExtendedError              ; 89     59
  3480 0000019E [0E70]                          short_addr  _$CreateTempFile                ; 90     5A
  3481 000001A0 [F66F]                          short_addr  _$CreateNewFile                 ; 91     5B
  3482 000001A2 [EF71]                          short_addr  _$LockOper                      ; 92     5C
  3483 000001A4 [7764]                          short_addr  _$ServerCall                    ; 93     5D
  3484 000001A6 [8069]                          short_addr  _$UserOper                      ; 94     5E
  3485 000001A8 [E568]                          short_addr  _$AssignOper                    ; 95     5F
  3486 000001AA [D16D]                          short_addr  _$NameTrans                     ; 96     60
  3487 000001AC [5306]                  	short_addr  NO_OP			    ; 97     61
  3488 000001AE [C502]                          short_addr  _$GET_CURRENT_PDB		    ; 98     62
  3489                                  ; the next call is reserved for hangool sys call
  3490                                  	; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3491 000001B0 [EA0E]                  	short_addr  _$ECS_Call			    ; 99     63
  3492                                  	;short_addr  NO_OP  ;  MSDOS 3.3	    ; 99     63
  3493                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3494                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3495                                  ;                                                                          ;
  3496 000001B2 [D102]                          short_addr  _$SET_PRINTER_FLAG              ; 100    64
  3497                                  ;                                                                          ;
  3498                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3499                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3500 000001B4 [D30C]                          short_addr  _$GetExtCntry                   ; 101    65
  3501 000001B6 [D00D]                          short_addr  _$GetSetCdPg                    ; 102    66
  3502 000001B8 [B466]                          short_addr  _$ExtHandle                     ; 103    67
  3503 000001BA [9A66]                          short_addr  _$COMMIT                        ; 104    68
  3504                                  
  3505                                  ; 08/07/2018
  3506                                  ; Above system calls are valid for Retro DOS v3.0 (MSDOS 3.3) 
  3507                                  ; Following system calls are valid for Retro DOS v4.0 (MSDOS 6.0)
  3508                                  
  3509                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3510 000001BC [8011]                  	short_addr  _$GSetMediaID                   ; 105    69   ;AN000;
  3511 000001BE [9A66]                  	short_addr  _$COMMIT                        ; 106    6A   ;AN000;
  3512 000001C0 [5306]                  	short_addr  NO_OP                           ; 107    6B   
  3513                                  						    ; IFS_IOCTL no longer 
  3514                                  						    ; supported
  3515 000001C2 [A470]                  	short_addr  _$Extended_Open                 ; 108    6C   ;AN000;
  3516                                  
  3517                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3518                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3519                                  ;                                                                          ;
  3520                                  ;ifdef ROMEXEC
  3521                                  ;       short_addr  $ROM_FIND_FIRST	   	    ; 109    6D
  3522                                  ;       short_addr  $ROM_FIND_NEXT	   	    ; 110    6E
  3523                                  ;	short_addr  $ROM_EXCLUDE		    ; 111    6F	  ; M078
  3524                                  ;endif
  3525                                  ;                                                                          ;
  3526                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3527                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3528                                  
  3529                                  ;MAXCOM  = ($-DISPATCH)/2 - 1
  3530                                  
  3531                                  MAXCOM  EQU ($-DISPATCH)/2 - 1
  3532                                  
  3533                                  ; 08/07/2018 - Retro DOS v3.0
  3534                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3535                                  
  3536                                  ;	If 	Installed
  3537                                  
  3538                                  align 2
  3539                                  
  3540                                  ;PUBLIC FOO
  3541                                  
  3542                                  FOO:	; LABEL WORD
  3543 000001C4 [1007]                          short_addr  Leave2F
  3544                                  
  3545 000001C6 [C801]                  DTab:	DW  DOSTable
  3546                                  
  3547                                  	;PUBLIC FOO,DTAB
  3548                                  
  3549                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0ED6h
  3550                                  
  3551                                  ; 29/04/2019
  3552                                  ; DOSCODE:3F7Ch (MSDOS 6.21, MSDOS.SYS)
  3553                                  
  3554                                  
  3555                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3556                                  ; DOSCODE:3F6Ch (MSDOS 5.0, MSDOS.SYS)
  3557                                         
  3558                                  DOSTable:  ; LABEL  WORD
  3559 000001C8 30                              DB      (DOSTableEnd-DOSTable-1)/2 ; db  48
  3560 000001C9 [3509]                          short_addr  DOSInstall          ;   0 install check
  3561 000001CB [AE2E]                          short_addr  DOS_CLOSE           ;   1   DOS_CLOSE
  3562 000001CD [AB0E]                          short_addr  RECSET              ;   2   RECSET
  3563 000001CF [2F09]                          short_addr  DosGetGroup         ;   3   Get DOSGROUP
  3564 000001D1 [F44F]                          short_addr  PATHCHRCMP          ;   4   PATHCHRCMP
  3565 000001D3 [4716]                          short_addr  OUTT                ;   5   OUT
  3566 000001D5 [CA52]                          short_addr  NET_I24_ENTRY       ;   6   NET_I24_ENTRY
  3567 000001D7 [4958]                          short_addr  PLACEBUF            ;   7   PLACEBUF
  3568 000001D9 [A32F]                          short_addr  FREE_SFT            ;   8   FREE_SFT
  3569 000001DB [0E5A]                          short_addr  BUFWRITE            ;   9   BUFWRITE
  3570 000001DD [A372]                          short_addr  SHARE_VIOLATION     ;   10  SHARE_VIOLATION
  3571 000001DF [FA2B]                          short_addr  SHARE_ERROR         ;   11  SHARE_ERROR
  3572 000001E1 [E42B]                          short_addr  SET_SFT_MODE        ;   12  SET_SFT_MODE
  3573 000001E3 [E60A]                          short_addr  DATE16              ;   13  DATE16
  3574 000001E5 [EC11]                          short_addr  Idle		;   14      empty slot
  3575 000001E7 [4258]                          short_addr  SCANPLACE           ;   15  SCANPLACE
  3576 000001E9 [EC11]                          short_addr  Idle		;   16      empty slot
  3577 000001EB [B911]                          short_addr  StrCpy              ;   17  StrCpy
  3578 000001ED [D111]                          short_addr  StrLen              ;   18  StrLen
  3579 000001EF [9F4F]                          short_addr  UCase		;   19  UCase
  3580 000001F1 [8658]                          short_addr  POINTCOMP           ;   20  POINTCOMP
  3581 000001F3 [E559]                          short_addr  CHECKFLUSH          ;   21  CHECKFLUSH
  3582 000001F5 [E265]                          short_addr  SFFromSFN           ;   22  SFFromSFN
  3583 000001F7 [456A]                          short_addr  GetCDSFromDrv       ;   23  GetCDSFromDrv
  3584 000001F9 [8104]                          short_addr  Get_User_Stack      ;   24  Get_User_Stack
  3585 000001FB [F069]                          short_addr  GETTHISDRV          ;   25  GetThisDrv
  3586 000001FD [F66D]                          short_addr  DriveFromText       ;   26  DriveFromText
  3587 000001FF [870B]                          short_addr  SETYEAR             ;   27  SETYEAR
  3588 00000201 [160C]                          short_addr  DSUM                ;   28  DSUM
  3589 00000203 [7D0B]                          short_addr  DSLIDE              ;   29  DSLIDE
  3590 00000205 [9711]                          short_addr  StrCmp              ;   30  StrCmp
  3591 00000207 [3369]                          short_addr  InitCDS             ;   31  initcds
  3592 00000209 [AF65]                          short_addr  pJFNFromHandle      ;   32  pJfnFromHandle
  3593 0000020B [D16D]                          short_addr  _$NameTrans		;   33  $NameTrans
  3594 0000020D [7A06]                          short_addr  CAL_LK              ;   34  CAL_LK
  3595 0000020F [1F41]                          short_addr  DEVNAME             ;   35  DEVNAME
  3596 00000211 [EC11]                          short_addr  Idle                ;   36  Idle
  3597 00000213 [DF11]                          short_addr  DStrLen             ;   37  DStrLen
  3598 00000215 [8E12]                          short_addr  NLS_OPEN            ;   38  NLS_OPEN      DOS 3.3
  3599 00000217 [6766]                          short_addr  _$CLOSE		;   39  $CLOSE        DOS 3.3
  3600 00000219 [9412]                          short_addr  NLS_LSEEK           ;   40  NLS_LSEEK     DOS 3.3
  3601 0000021B [7867]                          short_addr  _$READ		;   41  $READ         DOS 3.3
  3602 0000021D [5012]                          short_addr  FastInit            ;   42  FastInit      DOS 3.4  ;AN000;
  3603 0000021F [D112]                          short_addr  NLS_IOCTL           ;   43  NLS_IOCTL     DOS 3.3
  3604 00000221 [C012]                          short_addr  GetDevList          ;   44  GetDevList    DOS 3.3
  3605 00000223 [EE12]                          short_addr  NLS_GETEXT          ;   45  NLS_GETEXT    DOS 3.3
  3606                                          
  3607                                  	; 29/04/2019 - Retro DOS v4.0
  3608 00000225 [F212]                  	short_addr  MSG_RETRIEVAL	;   46  MSG_RETRIEVAL DOS 4.0  ;AN000;
  3609                                  
  3610 00000227 [5306]                  	short_addr  NO_OP		;   M006: 47  no longer supported
  3611                                  ;*** 	short_addr  Fake_Version	;   47  Fake_Version  DOS 4.0  ;AN006;
  3612                                  
  3613                                  DOSTableEnd:  ; LABEL BYTE
  3614                                  
  3615                                  	;ENDIF
  3616                                  
  3617                                  ; ----------------------------------------------------------------------------
  3618                                  ; BREAK   <Copyright notice and version>
  3619                                  ; ----------------------------------------------------------------------------
  3620                                  
  3621                                  ;CODSTRT EQU	$
  3622                                  
  3623                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
  3624                                  ; (MSTABLE.ASM, MSDOS 6.0, 1991)
  3625                                  
  3626                                  ; NOTE WARNING: This declaration of HEADER must be THE LAST thing in this
  3627                                  ;       module. The reason is so that the data alignments are the same in
  3628                                  ;       IBM-DOS and MS-DOS up through header.
  3629                                  
  3630                                  	;PUBLIC	HEADER
  3631                                  
  3632                                  HEADER:	; LABEL	BYTE
  3633                                          ;IF	DEBUG
  3634                                          ;DB	13,10,"Debugging DOS version "
  3635                                          ;DB	MAJOR_VERSION + "0"
  3636                                          ;DB	"."
  3637                                          ;DB	(MINOR_VERSION / 10) + "0"
  3638                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3639                                          ;ENDIF
  3640                                  
  3641                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3642                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
  3643                                  %if 0
  3644                                          ;IF	NOT IBM
  3645                                          DB	13,10,"MS-DOS version "
  3646                                          DB	MAJOR_VERSION + "0"
  3647                                          DB	"."
  3648                                          DB	(MINOR_VERSION / 10) + "0"
  3649                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3650                                          DB	(MINOR_VERSION % 10) + "0"
  3651                                  
  3652                                          ;IF	HIGHMEM
  3653                                          ;DB	"H"
  3654                                          ;ENDIF
  3655                                  
  3656                                  	;DB	13,10,"Copyright 1981,82,83,84,88 Microsoft Corp.",13,10,"$"
  3657                                  	; 30/04/2019 - Retro DOS v4.0
  3658                                  	DB	13,10,"Copyright 1981-1993 Microsoft Corp.",13,10,"$"	
  3659                                  
  3660                                  	;ENDIF
  3661                                  
  3662                                  %endif
  3663                                  
  3664                                  ;IF DEBUG
  3665                                  ;	DB	13,10,"$"
  3666                                  ;ENDIF
  3667                                  
  3668                                  ;include copyrigh.inc
  3669                                  
  3670                                  ; DOSCODE:3FDDh (MSDOS 6.21, MSDOS.SYS)
  3671                                  
  3672                                  	;DB	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
  3673                                  	;DB	"Licensed Material - Property of Microsoft "
  3674                                  	;DB	"All rights reserved "
  3675                                  
  3676                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3677                                  ; DOSCODE:3FCDh (MSDOS 5.0, MSDOS.SYS)
  3678                                  
  3679                                  ; 28/12/2022 - Retro DOS v4.1
  3680                                  %if 0
  3681                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  3682                                  ms_copyright:
  3683                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
  3684                                  	db	'Licensed Material - Property of Microsoft '
  3685                                  	db	'All rights reserved '
  3686                                  
  3687                                  %endif
  3688                                  	;; 28/12/2022 - Retro DOS v4.1
  3689                                  ;ms_copyright:	
  3690                                    	;db	13,10,"MS DOS Version 5.0"
  3691                                  	;db	13,10,"Copyright 1981-1991 Microsoft Corp.",13,10,"$",0	
  3692                                  
  3693                                  ;	; 21/09/2023 - Retro DOS v4.2 MSDOS.SYS
  3694                                  ;	; (MSDOS 6.22 MSDOS.SYS - DOSCODE:3FDDh (File offset: 509))
  3695                                  ;ms_copyright:
  3696                                  ;	db 'MS DOS Version 6 (C)Copyright 1981-1994 Microsoft Corp '
  3697                                  ;	db 'Licensed Material - Property of Microsoft All rights reserved '
  3698                                  
  3699                                  	; 20/09/2023 - Retro DOS v4.2
  3700                                  ms_copyright:	
  3701 00000229 0D0A4D5320444F5320-       	db	13,10,"MS DOS Version 6.22"
  3701 00000232 56657273696F6E2036-
  3701 0000023B 2E3232             
  3702 0000023E 0D0A436F7079726967-     	db	13,10,"Copyright 1981-1994 Microsoft Corp.",13,10,"$",0	
  3702 00000247 687420313938312D31-
  3702 00000250 393934204D6963726F-
  3702 00000259 736F667420436F7270-
  3702 00000262 2E0D0A2400         
  3703                                  
  3704                                  ;============================================================================
  3705                                  ; MSCODE.ASM
  3706                                  ;============================================================================
  3707                                  
  3708                                  ; Retro DOS v2.0 (NASM 2.11) source code modifications by Erdogan Tan
  3709                                  ; 03/03/2018
  3710                                  
  3711                                  ;
  3712                                  ; MSCODE.ASM -- MSDOS code
  3713                                  ;
  3714                                  
  3715                                  ;INCLUDE DOSSEG.ASM
  3716                                  ;INCLUDE STDSW.ASM
  3717                                  
  3718                                  ;CODE    SEGMENT BYTE PUBLIC  'CODE'
  3719                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  3720                                  
  3721                                  ;.xcref
  3722                                  ;INCLUDE DOSSYM.ASM
  3723                                  ;INCLUDE DEVSYM.ASM
  3724                                  ;.cref
  3725                                  ;.list
  3726                                  
  3727                                  ;IFNDEF  KANJI
  3728                                  ;KANJI   EQU     0       ; FALSE
  3729                                  ;ENDIF
  3730                                  
  3731                                  ;IFNDEF  IBM
  3732                                  ;IBM     EQU     0
  3733                                  ;ENDIF
  3734                                  
  3735                                  ;IFNDEF  HIGHMEM
  3736                                  ;HIGHMEM  EQU     0
  3737                                  ;ENDIF
  3738                                  
  3739                                          ;i_need  USER_SP,WORD
  3740                                          ;i_need  USER_SS,WORD
  3741                                          ;i_need  SAVEDS,WORD
  3742                                          ;i_need  SAVEBX,WORD
  3743                                          ;i_need  INDOS,BYTE
  3744                                          ;i_need  NSP,WORD
  3745                                          ;i_need  NSS,WORD
  3746                                          ;i_need  CURRENTPDB,WORD
  3747                                          ;i_need  AUXSTACK,BYTE
  3748                                          ;i_need  CONSWAP,BYTE
  3749                                          ;i_need  IDLEINT,BYTE
  3750                                          ;i_need  NOSETDIR,BYTE
  3751                                          ;i_need  ERRORMODE,BYTE
  3752                                          ;i_need  IOSTACK,BYTE
  3753                                          ;i_need  WPERR,BYTE
  3754                                          ;i_need  DSKSTACK,BYTE
  3755                                          ;i_need  CNTCFLAG,BYTE
  3756                                          ;i_need  LEAVEADDR,WORD
  3757                                          ;i_need  NULLDEVPT,DWORD
  3758                                  
  3759                                          ;IF NOT IBM
  3760                                          ;i_need  OEM_HANDLER,DWORD
  3761                                          ;ENDIF
  3762                                  
  3763                                          ;EXTRN   DSKSTATCHK:NEAR,GETBP:NEAR,DSKREAD:NEAR,DSKWRITE:NEAR
  3764                                  
  3765                                  ;============================================================================
  3766                                  ; MSDISP.ASM, MSDOS 6.0, 1991
  3767                                  ;============================================================================
  3768                                  ; 11/07/2018 - Retro DOS v3.0
  3769                                  ; 01/05/2019 - Retro DOS v4.0
  3770                                  
  3771                                  ; DosCode SEGMENT
  3772                                  
  3773                                  ; ==========================================================================
  3774                                  ;
  3775                                  ; $Set_CTRL_C_Trapping
  3776                                  ;
  3777                                  ; Function:
  3778                                  ;	Enable disable ^C checking in dispatcher
  3779                                  ;
  3780                                  ; Inputs:
  3781                                  ;		AL = 0 read ^C status
  3782                                  ;		AL = 1 Set ^C status, DL = 0/1 for ^C off/on
  3783                                  ;		AL = 2 Set ^C status to contents of DL.	Output is old state.
  3784                                  ;		AL = 5 get DOS boot drive
  3785                                  ;		AL = 6 Get version number
  3786                                  ;			RETURNS:
  3787                                  ;				BH = Minor version number
  3788                                  ;				BL = Major version number
  3789                                  ;				DL = DOS internal revision
  3790                                  ;				DH = DOS type flags
  3791                                  ;					Bit 3 	- DOS in ROM
  3792                                  ;					Bit 4 	- DOS in HMA
  3793                                  ;					Bit 0-2, 5-7 - Reserved
  3794                                  ; Outputs:
  3795                                  ;		If AL = 0 then DL = 0/1 for ^C off/on
  3796                                  ;
  3797                                  ; History:
  3798                                  ;      removed	AL = 3 Get CPSW state to DL	    DOS 3.4
  3799                                  ;      removed	AL = 4 Set CPSW state from DL	    DOS 3.4
  3800                                  ; ==========================================================================
  3801                                  
  3802                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3803                                  ; DOSCODE:4045h (MSDOS 5.0, MSDOS.SYS)
  3804                                  
  3805                                  ; 01/01/2024 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
  3806                                  ; DOSCODE:4052h (MSDOS 6.21, MSDOS.SYS)
  3807                                  ; DOSCODE:4052h (MSDOS 6.22, MSDOS.SYS)
  3808                                  ; DOSCODE:4123h (PCDOS 7.1, IBMDOS.COM)
  3809                                  
  3810                                  _$SET_CTRL_C_TRAPPING:
  3811                                  	; 01/05/2019 - Retro DOS v4.0
  3812                                  
  3813 00000267 3C06                    	cmp	AL,6			; Is this a valid subfunction?
  3814 00000269 7603                    	jbe	short scct_1		; If yes continue processing
  3815                                  
  3816 0000026B B0FF                    	mov	AL,0FFh			; Else set AL to -1 and
  3817 0000026D CF                      	iret
  3818                                  scct_1:
  3819 0000026E 1E                      	push	DS
  3820                                  
  3821                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3822 0000026F 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3823                                  	
  3824 00000274 50                      	push	AX			; DL only register that can change
  3825 00000275 56                      	push	SI
  3826                                  
  3827 00000276 BE[3703]                	mov	SI,CNTCFLAG		; DS:SI --> Ctrl C Status byte
  3828 00000279 30E4                    	xor	AH,AH			; Clear high byte of AX
  3829 0000027B 09C0                    	or	AX,AX			; Check for subfunction 0
  3830 0000027D 7504                    	jnz	short scct_2		; If not 0 jmp to next check
  3831                                  
  3832 0000027F 8A14                    	mov	DL,[SI]			; Else move current ctrl C status
  3833 00000281 EB30                    	jmp	SHORT scct_9s		; into DL and jmp to exit
  3834                                  scct_2:
  3835 00000283 48                      	dec	AX			; Now dec AX and see if it was 1
  3836 00000284 7507                    	jnz	short scct_3		; If not 0 it wasn't 1 so do next chk
  3837                                  
  3838 00000286 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3839 00000289 8814                    	mov	[SI],DL			; save it as new Ctrl C status
  3840 0000028B EB26                    	jmp	SHORT scct_9s		; Jmp to exit
  3841                                  scct_3:
  3842 0000028D 48                      	dec	AX			; Dec AX again to see if it was 2
  3843 0000028E 7507                    	jnz	short scct_4		; If not 0 wasn't 2 so go to next chk
  3844                                  
  3845 00000290 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3846 00000293 8614                    	xchg	[SI],DL			; Exchange DL with old status byte
  3847 00000295 EB1C                    	jmp	SHORT scct_9s		; Jump to exit (returning old status)
  3848                                  scct_4:
  3849 00000297 3C03                    	cmp	al,3 ; 01/01/2024 (PCDOS 7.1 IBMDOS.COM)
  3850                                  	;cmp	AX,3 			; Test for 5 after it was dec twice
  3851 00000299 7506                    	jne	short scct_5		; If not equal then not get boot drv
  3852 0000029B 8A16[6900]              	mov	DL,[BOOTDRIVE]		; Else return boot drive in DL
  3853 0000029F EB12                    	jmp	SHORT scct_9s		; Jump to exit (returning boot drive)
  3854                                  scct_5:
  3855 000002A1 3C04                    	cmp	al,4 ; 01/01/2024 (PCDOS 7.1 IBMDOS.COM)
  3856                                  	;cmp	AX,4 			; Test for 6 after it was dec twice
  3857 000002A3 750E                    	jne	short scct_9s		; If not equal then not get version
  3858                                  	
  3859                                  	;mov	BX,(Minor_Version SHL 8) + Major_Version
  3860                                  	;mov	bx,1406h	; DOSCODE:4092h (MSDOS 6.21, MSDOS.SYS)
  3861 000002A5 BB0616                  	mov	bx,(MINOR_VERSION<<8)+MAJOR_VERSION
  3862                                  	
  3863                                  	;mov	dl,0
  3864                                  	;mov	DL,DOSREVNM ; 0
  3865                                  
  3866                                  	;xor	dh,dh			; assume vanilla DOS
  3867                                  	; 01/01/2024
  3868 000002A8 BA0000                  	mov	dx,0
  3869 000002AB 3836[F211]              	cmp	byte [DosHasHMA],dh ; 0
  3870                                  	;cmp	byte [DosHasHMA],0	; is DOS in HMA?  (M021)
  3871                                  	;je	short @F
  3872 000002AF 7402                    	je	short scct_6
  3873                                  	; 01/01/2024
  3874 000002B1 B610                    	mov	dh,10h
  3875                                  	;or	dh,10h
  3876                                  	;;or	DH,DOSINHMA ; 10h
  3877                                  ;@@:
  3878                                  scct_6:
  3879                                  
  3880                                  ;ifdef ROMDOS
  3881                                  ;	or	DH,DOSINROM ; 08h
  3882                                  ;endif ; ROMDOS
  3883                                  
  3884                                  scct_9s:
  3885 000002B3 5E                      	pop	SI
  3886 000002B4 58                      	pop	AX
  3887 000002B5 1F                      	pop	DS
  3888                                  scct_9f:
  3889 000002B6 CF                      	iret
  3890                                  
  3891                                  SetCtrlShortEntry:			; This allows a conditional entry
  3892                                  					; from main dispatch code
  3893 000002B7 EBAE                    	jmp	SHORT _$SET_CTRL_C_TRAPPING
  3894                                  
  3895                                  ; ==========================================================================
  3896                                  ;									   
  3897                                  ; The following two routines are dispatched to directly with ints disabled
  3898                                  ; immediately after the int 21h entry.	no DIS state is set.
  3899                                  ;
  3900                                  ; $Set_current_PDB takes BX and sets it to be the current process
  3901                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3902                                  ;
  3903                                  ; ==========================================================================
  3904                                  
  3905                                  _$SET_CURRENT_PDB:
  3906 000002B9 1E                      	push	DS
  3907                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3908 000002BA 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3909 000002BF 891E[3003]              	mov	[CurrentPDB],BX		; Set new PSP segment from caller's BX
  3910 000002C3 1F                      	pop	DS
  3911 000002C4 CF                      	iret
  3912                                  
  3913                                  ; ==========================================================================
  3914                                  ;
  3915                                  ; $get_current_PDB returns in BX the current process
  3916                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3917                                  ;
  3918                                  ; ==========================================================================
  3919                                  
  3920                                  _$GET_CURRENT_PDB:
  3921 000002C5 1E                      	push	DS
  3922                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3923 000002C6 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3924 000002CB 8B1E[3003]              	mov	BX,[CurrentPDB]		; Return current PSP segment in BX
  3925 000002CF 1F                      	pop	DS
  3926 000002D0 CF                      	iret
  3927                                  
  3928                                  ; ==========================================================================
  3929                                  ;
  3930                                  ; Sets the Printer Flag to whatever is in AL.
  3931                                  ; NOTE: THIS PROCEDURE IS SUBJECT TO CHANGE!!!
  3932                                  ;
  3933                                  ; ==========================================================================
  3934                                  
  3935                                  _$SET_PRINTER_FLAG:
  3936 000002D1 1E                      	push	ds
  3937                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3938 000002D2 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3939 000002D7 A2[A00A]                	mov	[PRINTER_FLAG],AL 	; Set printer flag from caller's AL
  3940 000002DA 1F                      	pop	ds
  3941 000002DB CF                      	iret
  3942                                  
  3943                                  ; 01/05/2019 - Retro DOS v4.0
  3944                                  ; 08/07/2018 - Retro DOS v3.0
  3945                                  ; (MSDISP.ASM, MSDOS 6.0, 1991)
  3946                                  
  3947                                  ; ----------------------------------------------------------------------------
  3948                                  ; BREAK   <System call entry points and dispatcher>
  3949                                  ; ----------------------------------------------------------------------------
  3950                                  
  3951                                  ; DOSCODE:40CCh (MSDOS 6.21, MSDOS.SYS)
  3952                                  
  3953                                  ; ==========================================================================
  3954                                  ;
  3955                                  ; The Quit entry point is where all INT 20h's come from. These are old- style
  3956                                  ; exit system calls. The CS of the caller indicates which Process is dying.
  3957                                  ; The error code is presumed to be 0. We simulate an ABORT system call.
  3958                                  ;
  3959                                  ; ==========================================================================
  3960                                  
  3961                                  SYSTEM_CALL:    ; PROC NEAR
  3962                                  
  3963                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3964                                  ; DOSCODE:40BFh (MSDOS 5.0, MSDOS.SYS)
  3965                                  
  3966                                  ;entry	QUIT				
  3967                                  QUIT:				; INT 20H entry point	
  3968                                  	;MOV	AH,0
  3969 000002DC 30E4                    	xor	ah,ah ; 08/07/2018
  3970 000002DE EB36                    	JMP     SHORT SAVREGS
  3971                                  
  3972                                  ; ---------------------------------------------------------------------------
  3973                                  
  3974                                  	; The system call in AH is out of the range that we know how
  3975                                  	; to handle. We arbitrarily set the contents of AL to 0 and
  3976                                  	; IRET. Note that we CANNOT set the carry flag to indicate an
  3977                                  	; error as this may break some programs compatability.
  3978                                  
  3979                                  BADCALL:
  3980                                          ;MOV	AL,0
  3981 000002E0 30C0                    	xor	al,al ; 08/07/2018
  3982                                  IRETT:	; 06/05/2019
  3983                                  _IRET:
  3984 000002E2 CF                              IRET
  3985                                  
  3986                                  ; ---------------------------------------------------------------------------
  3987                                  
  3988                                  ; 01/05/2019 - Retro DOS v4.0
  3989                                  ; DOSCODE:40D3h (MSDOS 6.21 MSDOS.SYS)
  3990                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3991                                  ; DOSCODE:40C6h (MSDOS 5.0 MSDOS.SYS)
  3992                                  
  3993                                  	; An alternative method of entering the system is to perform a
  3994                                  	; CALL 5 in the program segment prefix with the contents of CL
  3995                                  	; indicating what system call the user would like. A subset of
  3996                                  	; the possible system calls is allowed here only the
  3997                                  	; CPM-compatible calls may get dispatched.
  3998                                  
  3999                                  		; System call entry point and dispatcher
  4000                                  CALL_ENTRY:
  4001 000002E3 1E                      	push	DS
  4002                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4003 000002E4 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4004 000002E9 8F06[EC05]              	pop	word [SAVEDS]		; Save original DS
  4005                                  
  4006 000002ED 58                              POP     AX                      ; IP from the long call at 5
  4007 000002EE 58                              POP     AX                      ; Segment from the long call at 5
  4008 000002EF 8F06[8405]              	POP	WORD [USER_SP]		; IP from the CALL 5
  4009                                  
  4010                                  		; Re-order the stack to simulate an interrupt 21.
  4011                                  
  4012 000002F3 9C                      	PUSHF				; Start re-ordering the stack
  4013 000002F4 FA                      	CLI
  4014 000002F5 50                              PUSH    AX                      ; Save segment
  4015 000002F6 FF36[8405]                      PUSH	WORD [USER_SP]		; Stack now ordered as if INT had been used
  4016                                  	; 04/11/2022
  4017                                  	; DOSCODE:40EAh (MSDOS 6.21 MSDOS.SYS)
  4018                                  	; DOSCODE:40DDh (MSDOS 5.0 MSDOS.SYS)
  4019 000002FA FF36[EC05]              	push	word [SAVEDS]
  4020 000002FE 1F                      	pop	ds
  4021                                  	;
  4022                                  	;cmp	cl,36
  4023 000002FF 80F924                          CMP     CL,MAXCALL              ; This entry point doesn't get as many calls
  4024 00000302 77DC                            JA      SHORT BADCALL
  4025 00000304 88CC                            MOV     AH,CL
  4026                                  	; 08/07/2018
  4027 00000306 EB0E                    	jmp	short SAVREGS
  4028                                  
  4029                                  ; ---------------------------------------------------------------------------
  4030                                  
  4031                                  ; 01/05/2019 - Retro DOS v4.0
  4032                                  
  4033                                  	; This is the normal INT 21 entry point. We first perform a
  4034                                  	; quick test to see if we need to perform expensive DOS-entry
  4035                                  	; functions. Certain system calls are done without interrupts
  4036                                  	; being enabled.
  4037                                  
  4038                                  	;entry	COMMAND 		; Interrupt call entry point (int 21h)
  4039                                  
  4040                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4041                                  ; 04/11/2022
  4042                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4043                                  
  4044                                  COMMAND:
  4045                                  	; 22/12/2022
  4046 00000308 FA                      	cli
  4047                                  
  4048                                  	; 01/05/2019 - Retro DOS v4.0
  4049                                  	; 08/07/2018 - Retro DOS v3.0
  4050                                  
  4051                                  ; 22/12/2022
  4052                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4053                                  	;IF	NOT IBM
  4054 00000309 80FCF8                  	CMP	AH,SET_OEM_HANDLER
  4055 0000030C 7203                    	JB	SHORT NOTOEM
  4056 0000030E E97A01                  	JMP	_$SET_OEM_HANDLER
  4057                                  
  4058                                  NOTOEM:
  4059                                  	;ENDIF
  4060                                  
  4061                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4062                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4063                                  
  4064                                  	; 22/12/2022
  4065                                  	;cli	; 08/07/2018
  4066                                  
  4067                                  _COMMAND: ; MSDOS 3.3 (IBM)
  4068                                  	;cmp	ah,6Ch   ; MSDOS 6.21 ; Max int 21h function call number
  4069                                  	; 04/11/2022
  4070 00000311 80FC6C                  	CMP     AH,MAXCOM  ; 6Ch for MSDOS 6.0 (6.21,6.22) & MSDOS 5.0
  4071                                  	;JBE	SHORT SAVREGS
  4072 00000314 77CA                            JA	SHORT BADCALL ; 08/07/2018
  4073                                  
  4074                                  	; 31/05/2019
  4075                                  
  4076                                  	; The following set of calls are issued by the server at
  4077                                  	; *arbitrary* times and, therefore, must be executed on
  4078                                  	; the user's entry stack and executed with interrupts off.
  4079                                  
  4080                                  SAVREGS:
  4081                                  	; 01/05/2019 - Retro DOS v4.0
  4082                                  	; 10/08/2018
  4083                                  	; 08/07/2018 - Retro DOS v3.0
  4084 00000316 80FC33                  	cmp	ah,33h			; Check Minimum special case #
  4085                                  	;;je	_$SET_CTRL_C_TRAPPING
  4086                                  	;je	short SetCtrlShortEntry ; If equal jmp directly to function
  4087 00000319 7218                    	jb	short SaveAllRegs	; Not special case so continue	
  4088                                  	; 04/11/2022
  4089 0000031B 749A                    	je	short SetCtrlShortEntry ; If equal jmp directly to function
  4090 0000031D 80FC64                  	cmp	ah,64h			; Check Max case number
  4091 00000320 7711                    	ja	short SaveAllRegs	; Not special case so continue
  4092 00000322 74AD                    	je	short _$SET_PRINTER_FLAG ; If equal jmp directly to function
  4093 00000324 80FC51                  	cmp	ah,51h			; Is this a Get PSP call (51h)?
  4094 00000327 749C                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4095 00000329 80FC62                  	cmp	ah,62h			; Is this a Get PSP call (62h)?
  4096 0000032C 7497                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4097 0000032E 80FC50                  	cmp     ah,50h			; Is this a Set PSP call (50h) ?
  4098 00000331 7486                    	je	short _$SET_CURRENT_PDB	; Yes, jmp directly to function
  4099                                  
  4100                                  SaveAllRegs:
  4101                                  	; 01/05/2019 - Retro DOS v4.0
  4102                                  
  4103 00000333 06                              push	ES
  4104 00000334 1E                      	push	DS
  4105 00000335 55                      	push	BP
  4106 00000336 57                      	push	DI
  4107 00000337 56                      	push	SI
  4108 00000338 52                      	push	DX
  4109 00000339 51                      	push	CX
  4110 0000033A 53                      	push	BX
  4111 0000033B 50                      	push	AX
  4112                                  
  4113 0000033C 8CD8                    	mov	AX,DS
  4114                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4115 0000033E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4116 00000343 A3[EC05]                	mov	[SAVEDS],AX		; save caller's DS
  4117 00000346 891E[EA05]              	mov	[SAVEBX],BX
  4118                                  
  4119                                          ;INC     BYTE [INDOS]		; Flag that we're in the DOS
  4120                                  	
  4121                                  	; 08/07/2018 - Retro DOS v3.0        
  4122                                  	;xor     ax,ax
  4123                                  	;mov     [USER_ID],ax
  4124                                  	;mov     ax,[CurrentPDB]
  4125                                  	;mov     [PROC_ID],ax
  4126                                  
  4127                                  	; 01/05/2019
  4128                                  
  4129                                  	; Note: Nsp and Nss have to be unconditionally initialized here 
  4130                                  	; even if InDOS is zero. Programs like CROSSTALK 3.7 depend on
  4131                                  	; this!!!
  4132                                  
  4133 0000034A A1[8405]                	MOV     AX,[USER_SP]
  4134 0000034D A3[F205]                        MOV     [NSP],AX
  4135 00000350 A1[8605]                        MOV     AX,[USER_SS]
  4136 00000353 A3[F005]                        MOV     [NSS],AX
  4137                                  
  4138 00000356 31C0                    	xor	AX,AX ; 0
  4139 00000358 A2[7205]                	mov	[FSHARING],AL		; allow redirection
  4140                                  
  4141 0000035B F606[3010]01            	test	byte [IsWin386],1	; WIN386 patch. Do not update USER_ID
  4142 00000360 7503                    	jnz	short set_indos_flag	; if win386 present
  4143 00000362 A3[3E03]                	mov	[USER_ID],AX
  4144                                  set_indos_flag:
  4145 00000365 FE06[2103]              	INC     BYTE [INDOS]		; Flag that we're in the DOS
  4146                                  
  4147 00000369 8926[8405]                      MOV     [USER_SP],SP
  4148 0000036D 8C16[8605]                      MOV     [USER_SS],SS
  4149                                  
  4150 00000371 A1[3003]                	mov	AX,[CurrentPDB]
  4151 00000374 A3[3C03]                	mov	[PROC_ID],AX
  4152 00000377 8ED8                    	mov	DS,AX
  4153 00000379 58                      	pop	AX
  4154 0000037A 50                      	push	AX
  4155                                  
  4156                                  	; save user stack in his area for later returns (possibly from EXEC)
  4157                                  
  4158 0000037B 89262E00                        MOV     [PDB.USER_STACK],SP
  4159 0000037F 8C163000                        MOV     [PDB.USER_STACK+2],SS
  4160                                  
  4161                                  	; 18/07/2018
  4162                                  	;mov	byte [CS:FSHARING], 0
  4163                                  
  4164                                  	;MOV     BX,CS			; no holes here.
  4165                                  	;MOV     SS,BX
  4166                                  
  4167                                  	;getdseg <ss>			; ss -> dosdat, already flag is CLI
  4168 00000383 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
  4169                                  					;entry	REDISP
  4170                                  REDISP:
  4171 00000388 BC[A007]                        MOV     SP,AUXSTACK		; Enough stack for interrupts
  4172 0000038B FB                              STI                             ; stack is in our space now...
  4173                                  
  4174 0000038C 8CD3                    	mov	bx,ss
  4175 0000038E 8EDB                    	mov	ds,bx
  4176                                  
  4177 00000390 93                      	xchg	ax,bx
  4178                                  
  4179 00000391 31C0                    	xor	ax,ax ; 0
  4180                                  
  4181                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4182                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:416Eh  (from org 3DD0h)
  4183                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:417Bh (from org 3DE0h)
  4184                                  
  4185                                  	; (Note: ss: segment prefix was not needed here! ds=ss ! -04/11/2022-)
  4186                                  
  4187                                  	;mov	[ss:EXTOPEN_ON],al ; 0	; Clear extended open flag
  4188                                  	;;and	word [ss:DOS34_FLAG],EXEC_AWARE_REDIR
  4189                                  	;and	word [ss:DOS34_FLAG],800h ; clear all bits except bit 11
  4190                                  	;mov	[ss:CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4191                                  	;mov	[ss:NoSetDir],al ; 0	; set directories on search
  4192                                  	;mov	[ss:FAILERR],al ; 0	; FAIL not in progress
  4193                                  	;inc	ax
  4194                                  	;;inc	AL			; AL = 1
  4195                                  	;mov	[ss:IDLEINT],al		; presume that we can issue INT 28
  4196                                  
  4197                                  	; 15/12/2022
  4198 00000393 A2[F605]                	mov	[EXTOPEN_ON],al ; 0	; Clear extended open flag
  4199                                  	;and	word [DOS34_FLAG],EXEC_AWARE_REDIR
  4200 00000396 8126[1106]0008          	and	word [DOS34_FLAG],800h	; clear all bits except bit 11
  4201 0000039C A2[5703]                	mov	[CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4202                                  	;mov	byte [IDLEINT],1
  4203 0000039F A2[4C03]                	mov	[NoSetDir],al ; 0	; set directories on search
  4204 000003A2 A2[4A03]                	mov	[FAILERR],al ; 0	; FAIL not in progress
  4205 000003A5 40                      	inc	ax
  4206                                  	;inc	al			; AL = 1
  4207 000003A6 A2[5803]                	mov	[IDLEINT],al		; presume that we can issue INT 28
  4208                                  
  4209 000003A9 93                      	XCHG	AX,BX			; Restore AX and BX = 1		
  4210                                  
  4211 000003AA 88E3                    	MOV     BL,AH			
  4212 000003AC D1E3                            SHL     BX,1			; 2 bytes per call in table
  4213                                         
  4214 000003AE FC                      	CLD
  4215                                  		; Since the DOS maintains mucho state information across system
  4216                                  		; calls, we must be very careful about which stack we use.
  4217                                  		; First, all abort operations must be on the disk stack. This
  4218                                  		; is due to the fact that we may be hitting the disk (close
  4219                                  		; operations, flushing) and may need to report an INT 24.
  4220                                          
  4221 000003AF 08E4                    	OR      AH,AH
  4222 000003B1 7416                            JZ      SHORT DSKROUT		; ABORT
  4223                                  
  4224                                          ;CMP	AH,12
  4225                                          ;JBE	SHORT IOROUT		; Character I/O
  4226                                          ;CMP	AH,GET_CURRENT_PDB      ; INT 24 needs GET,SET PDB
  4227                                          ;JZ	SHORT IOROUT
  4228                                          ;CMP	AH,SET_CURRENT_PDB
  4229                                          ;JNZ	SHORT DSKROUT
  4230                                  
  4231                                  		; Second, PRINT and PSPRINT and the server issue
  4232                                  		; GetExtendedError calls at INT 28 and INT 24 time.
  4233                                  		; This call MUST, therefore, use the AUXSTACK.
  4234                                  
  4235                                  	; 10/08/2018
  4236 000003B3 80FC59                  	cmp     ah,GETEXTENDEDERROR ; 59h
  4237 000003B6 7434                    	je      short DISPCALL
  4238                                  	
  4239                                  	; 01/05/2019
  4240                                  	
  4241                                  		; Old 1-12 system calls may be either on the IOSTACK (normal
  4242                                  		; operation) or on the AUXSTACK (at INT 24 time).
  4243                                  
  4244 000003B8 80FC0C                  	cmp     ah,12 ; STD_CON_INPUT_FLUSH ; 0Ch
  4245 000003BB 770C                    	ja      short DSKROUT
  4246                                  
  4247                                  IOROUT:
  4248                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4249                                  	; (ss: prefix was not needed here! ds=ss)
  4250                                  	;cmp	byte [ss:ERRORMODE],0	; Are we in an INT 24? 
  4251                                  	; 15/12/2022
  4252 000003BD 803E[2003]00            	cmp     BYTE [ERRORMODE],0	; Are we in an INT 24?
  4253 000003C2 7528                            JNZ     SHORT DISPCALL		; Stay on AUXSTACK if INT 24
  4254 000003C4 BC[A00A]                        MOV     SP,IOSTACK
  4255 000003C7 EB23                            JMP     SHORT DISPCALL
  4256                                  
  4257                                  		; We are on a system call that is classified as "the rest".
  4258                                  		; We place ourselves onto the DSKSTACK and away we go.
  4259                                  		; We know at this point:
  4260                                  		; *  An INT 24 cannot be in progress. Therefore we reset
  4261                                  		;    ErrorMode and WpErr
  4262                                  		; *  That there can be no critical sections in effect.
  4263                                  		;    We signal the server to remove all the resources.
  4264                                  
  4265                                  DSKROUT:
  4266                                  	; 01/01/2024
  4267                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4268                                  	; 08/07/2018 - Retro DOS v3.0
  4269 000003C9 A3[3A03]                	mov     [USER_IN_AX],ax		; Remember what user is doing
  4270                                  	; 01/01/2024
  4271                                  	;mov	byte [EXTERR_LOCUS],1	; errLOC_Unk (Default)
  4272                                  	;MOV	BYTE [WPERR],-1		; error mode, so good place to
  4273                                  	                   		; make sure flags are reset
  4274 000003CC C706[2203]FF01          	mov	word [WPERR],1FFh ; (PCDOS 7.1 IBMDOS.COM))
  4275                                  
  4276                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4277                                  	; (ss: prefix was not needed here! ds=ss)
  4278                                  
  4279                                  	;mov	[ss:USER_IN_AX],ax	; Remember what user is doing
  4280                                  	;mov	byte [ss:EXTERR_LOCUS],1 ; errLOC_Unk (Default)
  4281                                  	;mov	byte [ss:ERRORMODE],0	; Cannot make non 1-12 calls in
  4282                                  	;mov	byte [ss:WPERR],-1	; error mode, so good place to
  4283                                                                          ; make sure flags are reset
  4284 000003D2 50                      	push    ax
  4285 000003D3 B482                    	mov     ah,82h			; Release all resource information
  4286 000003D5 CD2A                    	int     2Ah 		; Microsoft Networks 
  4287                                  				; END DOS CRITICAL SECTIONS 0 THROUGH 7
  4288 000003D7 58                      	pop     ax
  4289                                  
  4290                                  		; Since we are going to be running on the DSKStack and since
  4291                                  		; INT 28 people will use the DSKStack, we must turn OFF the
  4292                                  		; generation of INT 28's.
  4293                                  
  4294                                  	; 15/12/2022
  4295                                  	;mov     byte [ss:IDLEINT],0
  4296                                  	;
  4297                                          ;mov	sp,DSKSTACK
  4298                                  	;test	byte [ss:CNTCFLAG],-1  ; 0FFh
  4299                                          ;jz	short DISPCALL
  4300                                  
  4301 000003D8 C606[5803]00            	mov     byte [IDLEINT],0
  4302                                  
  4303 000003DD BC[2009]                	MOV     SP,DSKSTACK
  4304 000003E0 F606[3703]FF            	TEST    BYTE [CNTCFLAG],-1
  4305 000003E5 7405                    	JZ      SHORT DISPCALL
  4306                                  
  4307 000003E7 50                              PUSH    AX
  4308                                          ;invoke	DSKSTATCHK
  4309 000003E8 E8224C                          CALL	DSKSTATCHK
  4310 000003EB 58                      	POP     AX
  4311                                  DISPCALL:
  4312                                  	; 01/05/2019 - Retro DOS v4.0
  4313 000003EC 2E8B9F[EA00]            	mov	bx,[CS:BX+DISPATCH]
  4314                                  
  4315                                  	; 15/12/2022
  4316 000003F1 871E[EA05]              	xchg	bx,[SAVEBX]
  4317 000003F5 8E1E[EC05]              	MOV	DS,[SAVEDS]
  4318                                  
  4319                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4320                                  	; (ss: prefix was not needed here! ds=ss)        
  4321                                  	;xchg	bx,[ss:SAVEBX]
  4322                                  	;mov	ds,[ss:SAVEDS]
  4323                                  
  4324 000003F9 36FF16[EA05]            	call	word [SS:SAVEBX] ; near call
  4325                                  
  4326                                  	; The EXEXA20OFF bit of DOS_FLAG will now be unconditionally cleared
  4327                                  	; here. Please see under M003, M009 and M068 tags in dossym.inc
  4328                                  	; for explanation. Also NOTE that a call to ExecReady (ax=4b05) will
  4329                                  	; return to LeaveDos and hence will not clear this bit. This is 
  4330                                  	; because this bit is used to indicate to the next int 21 call that
  4331                                  	; the previous int 21 was an exec.
  4332                                  	;
  4333                                  	; So do not add any code between the call above and the label 
  4334                                  	; LeaveDOS if it needs to be executed even for ax=4b05
  4335                                  
  4336                                  	;and	byte [ss:DOS_FLAG],~EXECA20OFF
  4337 000003FE 368026[8600]FB          	and	byte [ss:DOS_FLAG],0FBh
  4338                                  
  4339                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4340                                  ; DOSCODE:41F7h
  4341                                  
  4342                                  ; 01/01/2024 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
  4343                                  ; DOSCODE:4204h
  4344                                  
  4345                                  ;entry LEAVE
  4346                                  ;;;_LEAVE:				; Exit from a system call
  4347                                  LeaveDOS: ; 18/07/2018 
  4348                                  ;ASSUME	SS:NOTHING			; User routines may misbehave
  4349 00000404 FA                      	CLI
  4350                                  
  4351                                  	; 01/05/2019
  4352                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4353 00000405 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4354 0000040A 803E[8500]00            	cmp	byte [A20OFF_COUNT],0	; M068: Q: is count 0
  4355 0000040F 7526                    	jne	short disa20		; M068: N: dec count and turn a20 off
  4356                                  
  4357                                  LeaveA20On:
  4358 00000411 FE0E[2103]                      DEC     BYTE [INDOS]
  4359                                          ; 04/11/2022
  4360 00000415 8E16[8605]              	mov	ss,[USER_SS]
  4361 00000419 8B26[8405]              	MOV     SP,[USER_SP]
  4362                                  	;MOV	SS,[USER_SS]
  4363 0000041D 89E5                    	MOV     BP,SP
  4364                                  	;MOV	[BP.user_AX],AL	
  4365                                          ; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4366                                  	;;mov	[bp+0],al ; MSDOS 5.0 MSDOS.SYS - DOSCODE:4212h
  4367                                  	;MOV	[BP+user_env.user_AX],AL  ; user_env.user_AX = 0
  4368                                  
  4369                                  	; 15/12/2022
  4370 0000041F 884600                  	MOV	[BP],AL	; mov [bp+0],al
  4371                                  	
  4372                                  	;MOV	AX,[NSP]
  4373                                          ;MOV	[USER_SP],AX
  4374                                          ;MOV	AX,[NSS]
  4375                                          ;MOV	[USER_SS],AX
  4376                                  	; 01/01/2024
  4377 00000422 C406[F005]              	les	ax,[NSS] ; (PCDOS 7.1 IBMDOS.COM)
  4378 00000426 A3[8605]                	mov	[USER_SS],ax
  4379 00000429 8C06[8405]              	mov	[USER_SP],es
  4380                                  
  4381 0000042D 58                      	pop	AX
  4382 0000042E 5B                      	pop	BX
  4383 0000042F 59                      	pop	CX
  4384 00000430 5A                      	pop	DX
  4385 00000431 5E                      	pop	SI
  4386 00000432 5F                      	pop	DI
  4387 00000433 5D                      	pop	BP
  4388 00000434 1F                      	pop	DS
  4389 00000435 07                      	pop	ES
  4390                                  
  4391 00000436 CF                              IRET
  4392                                  
  4393                                  disa20:	   				; M068 - Start
  4394 00000437 8B1E[6300]              	mov	bx,[A20OFF_PSP]		; bx = PSP for which a20 to be off'd
  4395 0000043B 3B1E[3003]              	cmp	bx,[CurrentPDB]		; Q: do the PSP's match
  4396 0000043F 75D0                    	jne	short LeaveA20On	; N: don't clear bit and don't turn 
  4397                                  					;    a20 off
  4398                                  					; Y: turn a20 off and dec a20off_count
  4399 00000441 FE0E[8500]              	dec	byte [A20OFF_COUNT]	; M068 - End
  4400                                   					; Start - M004
  4401 00000445 1E                      	push	ds			; segment of stub
  4402 00000446 BB[1311]                	mov	bx,disa20_iret		; offset in stub
  4403 00000449 53                      	push	bx
  4404 0000044A CB                      	retf	  			; go to stub
  4405                                  					; End - M004
  4406                                  ;SYSTEM_CALL ENDP
  4407                                  
  4408                                  ; DOSCODE:424Ch (MSDOS 6.21, MSDOS.SYS)
  4409                                  ; 04/11/2022
  4410                                  ; DOSCODE:423Fh (MSDOS 5.0, MSDOS.SYS)
  4411                                  
  4412                                  ; ==========================================================================
  4413                                  ;
  4414                                  ; Restore_World restores all registers ('cept SS:SP, CS:IP, flags) from
  4415                                  ; the stack prior to giving the user control
  4416                                  ;
  4417                                  ; ==========================================================================
  4418                                  
  4419                                  ; 01/05/2019 - Retro DOS v4.0
  4420                                  
  4421                                          ;procedure restore_world,NEAR
  4422                                  restore_world:
  4423                                  	;getdseg <es>		; es -> dosdata
  4424 0000044B 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4425                                  
  4426 00000450 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4427                                  
  4428 00000455 58                              POP     AX
  4429 00000456 5B                              POP     BX
  4430 00000457 59                              POP     CX
  4431 00000458 5A                              POP     DX
  4432 00000459 5E                              POP     SI
  4433 0000045A 5F                              POP     DI
  4434 0000045B 5D                              POP     BP
  4435 0000045C 1F                              POP     DS
  4436                                  
  4437 0000045D 26FF26[EE05]                   	jmp	word [ES:RESTORE_TMP]
  4438                                  
  4439                                  ;restore_world	ENDP
  4440                                  
  4441                                  ; 01/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDISP.ASM, 1991)
  4442                                  
  4443                                  ; DOSCODE:4263h (MSDOS 6.21, MSDOS.SYS)
  4444                                  ; 04/11/2022
  4445                                  ; DOSCODE:4256h (MSDOS 5.0, MSDOS.SYS)
  4446                                  
  4447                                  ; ==========================================================================
  4448                                  ;
  4449                                  ; Save_World saves complete registers on the stack
  4450                                  ;
  4451                                  ; ==========================================================================
  4452                                  
  4453                                          ;procedure save_world,NEAR
  4454                                  save_world:
  4455                                  	;getdseg <es>		; es -> dosdata
  4456 00000462 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4457                                  
  4458 00000467 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4459                                  
  4460                                  	; 12/05/2019
  4461                                          
  4462 0000046C 1E                      	PUSH    DS
  4463 0000046D 55                              PUSH    BP
  4464 0000046E 57                              PUSH    DI
  4465 0000046F 56                              PUSH    SI
  4466 00000470 52                              PUSH    DX
  4467 00000471 51                              PUSH    CX
  4468 00000472 53                              PUSH    BX
  4469 00000473 50                              PUSH    AX
  4470                                  
  4471 00000474 26FF36[EE05]            	push	word [ES:RESTORE_TMP]
  4472                                  
  4473 00000479 55                      	push	BP		
  4474 0000047A 89E5                    	mov	BP,SP
  4475 0000047C 8E4614                  	mov	ES,[BP+20]	; es was pushed before call
  4476 0000047F 5D                      	pop	BP
  4477                                  	
  4478 00000480 C3                      	retn
  4479                                  
  4480                                  ;save_world	ENDP
  4481                                  
  4482                                  ; 01/05/2019
  4483                                  
  4484                                  ; DOSCODE:4282h (MSDOS 6.21, MSDOS.SYS)
  4485                                  ; 04/11/2022
  4486                                  ; DOSCODE:4275h (MSDOS 5.0, MSDOS.SYS)
  4487                                  
  4488                                  ; ==========================================================================
  4489                                  ;
  4490                                  ; Get_User_Stack returns the user's stack (and hence registers) in DS:SI
  4491                                  ;
  4492                                  ; ==========================================================================
  4493                                  
  4494                                          ;procedure get_user_stack,NEAR
  4495                                  Get_User_Stack:
  4496                                          ;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4497 00000481 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4498 00000486 C536[8405]                      lds	si,[USER_SP]
  4499 0000048A C3                      	retn
  4500                                  
  4501                                  ;get_user_stack  ENDP
  4502                                  
  4503                                  ; 22/12/2022
  4504                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4505                                  ;%if 0
  4506                                  
  4507                                  ; ---------------------------------------------------------------------------
  4508                                  ;
  4509                                  ; Set_OEM_Handler -- Set OEM sys call address and handle OEM Calls
  4510                                  ; Inputs:
  4511                                  ;	User registers, User Stack, INTS disabled
  4512                                  ;	If CALL F8, DS:DX is new handler address
  4513                                  ; Function:
  4514                                  ;	Process OEM INT 21 extensions
  4515                                  ; Outputs:
  4516                                  ;	Jumps to OEM_HANDLER if appropriate
  4517                                  ;
  4518                                  ; ---------------------------------------------------------------------------
  4519                                  
  4520                                  ;IF	NOT IBM
  4521                                  
  4522                                  _$SET_OEM_HANDLER:
  4523                                  	; 01/05/2019 - Retro DOS v4.0
  4524                                  	
  4525                                  	;(cmp	ah,SET OEM HANDLER  ; 0F8h)
  4526                                  	;(jb	short NOTOOEM)
  4527                                  
  4528 0000048B 06                      	push	es ; *
  4529                                  	;getdseg <es>			; es -> dosdata
  4530 0000048C 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4531                                  
  4532 00000491 750C                    	jne	short check_trueversion_request ; check Retro DOS true version
  4533                                  						; (message) request	
  4534                                  	; AH = 0F8h = SET OEM HANDLER
  4535                                  
  4536 00000493 268916[1400]            	MOV     [es:OEM_HANDLER],DX	; Set Handler
  4537 00000498 268C1E[1600]            	MOV     [es:OEM_HANDLER+2],DS
  4538                                  
  4539 0000049D 07                      	pop	es ; *
  4540                                  
  4541 0000049E CF                      	IRET                            ; Quick return, Have altered no registers
  4542                                  
  4543                                  check_trueversion_request:
  4544                                  	; 18/07/2019 - Retro DOS v3.0
  4545                                  
  4546                                  	; Retro DOS v2.0 - 20/04/2018
  4547 0000049F 83F8FF                  	CMP	AX,0FFFFh
  4548                                  	; 18/07/2018
  4549 000004A2 7520                    	jne	short DO_OEM_FUNC ; 01/05/2019
  4550                                  
  4551                                  	; 01/05/2019
  4552 000004A4 07                      	pop	es ; *
  4553                                  
  4554 000004A5 B40E                    	mov	ah,0Eh
  4555                                  
  4556                                  	; Retro DOS v4.0 feature only!
  4557 000004A7 81FBA101                	cmp	bx,417  ; Signature to bypass
  4558                                  			; Retro DOS true version message	
  4559 000004AB 7414                    	je	short true_version_iret
  4560                                  
  4561 000004AD 56                      	push	si
  4562 000004AE 53                      	push	bx
  4563                                  
  4564 000004AF BE[BF00]                	mov	si,RETRODOSMSG
  4565                                  wrdosmsg:
  4566                                  	;movb	ah,0Eh
  4567 000004B2 BB0700                  	mov	bx,7
  4568                                  wrdosmsg_nxt:
  4569 000004B5 2EAC                    	cs	lodsb
  4570 000004B7 3C24                    	cmp	al,'$'
  4571 000004B9 7404                    	je	short wrdosmsg_ok		
  4572 000004BB CD10                    	int	10h
  4573 000004BD EBF6                    	jmp	short wrdosmsg_nxt
  4574                                  
  4575                                  wrdosmsg_ok:
  4576 000004BF 5B                      	pop	bx
  4577 000004C0 5E                      	pop	si
  4578                                  
  4579                                  true_version_iret:
  4580                                  	; ah = 0Eh
  4581                                  	;mov	al,40h ; Retro DOS v4.0
  4582                                  	; 
  4583                                  	;mov	al,41h ; Retro DOS v4.1 
  4584                                  	; 30/12/2022
  4585 000004C1 B042                    	mov	al,42h ; Retro DOS v4.2
  4586 000004C3 CF                      	iret
  4587                                  
  4588                                  	; If above F8 try to jump to handler
  4589                                  
  4590                                  DO_OEM_FUNC:
  4591                                  	; 01/05/2019
  4592 000004C4 26833E[1400]FF          	cmp     word [es:OEM_HANDLER],-1
  4593 000004CA 7504                    	JNE     short OEM_JMP
  4594 000004CC 07                      	pop	es ; *
  4595 000004CD E910FE                  	JMP     BADCALL                 ; Handler not initialized
  4596                                  OEM_JMP:
  4597 000004D0 06                      	push	es
  4598 000004D1 1F                      	pop	ds ; DOSDATA segment !
  4599 000004D2 07                      	pop	es ; *
  4600                                  
  4601                                  	; 22/12/2022
  4602 000004D3 FB                      	sti	; (enable interrupts before jumping to private handler)  
  4603                                  
  4604 000004D4 FF2E[1400]              	JMP     FAR [OEM_HANDLER]
  4605                                  
  4606                                  ;       ENDIF
  4607                                  
  4608                                  ; ---------------------------------------------------------------------------
  4609                                  
  4610                                  ;%endif
  4611                                  
  4612                                  ;============================================================================
  4613                                  ; MCODE.ASM, MSDOS 6.0, 1991
  4614                                  ;============================================================================
  4615                                  ; 17/07/2018 - Retro DOS v3.0
  4616                                  
  4617                                  ;	TITLE	MISC DOS ROUTINES - Int 25 and 26 handlers and other
  4618                                  ;	NAME	IBMCODE
  4619                                  
  4620                                  ;BREAK <NullDev -- Driver for null device>
  4621                                  
  4622                                  ; ROMDOS note:
  4623                                  ;	NUL device driver used to be here, but it was removed and placed in
  4624                                  ;	DOSDATA, because the entry points have to be in the segment as the
  4625                                  ;	header, which is also in DOSDATA.
  4626                                  
  4627                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>
  4628                                  
  4629                                  ;----------------------------------------------------------------------------
  4630                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4631                                  ;----------------------------------------------------------------------------
  4632                                  ; DOSCODE:428Ch (MSDOS 6.21 MSDOS.SYS)
  4633                                  ; DOSCODE:427Fh (MSDOS 5.0 MSDOS.SYS)
  4634                                  
  4635                                  ;Public MSC001S,MSC001E
  4636                                  ;MSC001S label byte
  4637                                  	;IF	IBM
  4638                                  ; Codes returned by BIOS
  4639                                  ERRIN:
  4640 000004D8 02                      	DB	2			; NO RESPONSE
  4641 000004D9 06                      	DB	6			; SEEK FAILURE
  4642 000004DA 0C                      	DB	12			; GENERAL ERROR
  4643 000004DB 04                      	DB	4			; BAD CRC
  4644 000004DC 08                      	DB	8			; SECTOR NOT FOUND
  4645 000004DD 00                      	DB	0			; WRITE ATTEMPT ON WRITE-PROTECT DISK
  4646                                  ERROUT:
  4647                                  ; DISK ERRORS RETURNED FROM INT 25 and 26
  4648 000004DE 80                      	DB	80H			; NO RESPONSE
  4649 000004DF 40                      	DB	40H			; Seek failure
  4650 000004E0 02                      	DB	2			; Address Mark not found
  4651 000004E1 10                      	DB	10H			; BAD CRC
  4652 000004E2 04                      	DB	4			; SECTOR NOT FOUND
  4653 000004E3 03                      	DB	3			; WRITE ATTEMPT TO WRITE-PROTECT DISK
  4654                                  
  4655                                  NUMERR	EQU	$-ERROUT
  4656                                  	;ENDIF
  4657                                  ;MSC001E label byte
  4658                                  ;----------------------------------------------------------------------------
  4659                                  
  4660                                  ;============================================================================
  4661                                  ; MSCODE.ASM - MSDOS 6.0 - 1991
  4662                                  ;============================================================================
  4663                                  ; 18/07/2018 - Retro DOS v3.0
  4664                                  ; 15/05/2019 - Retro DOS v4.0
  4665                                  
  4666                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>>
  4667                                  
  4668                                  ;   AbsSetup - setup for abs disk functions
  4669                                  ;----------------------------------------------------------------------------
  4670                                  
  4671                                  AbsSetup:
  4672                                  	; 02/01/2024
  4673 000004E4 1E                      	push	ds ; *
  4674 000004E5 16                      	push	ss
  4675 000004E6 1F                      	pop	ds
  4676 000004E7 FE06[2103]              	inc	byte [INDOS]
  4677                                  	;INC	byte [SS:INDOS]		; SS override
  4678 000004EB FB                      	STI
  4679 000004EC FC                      	CLD
  4680                                  	; 02/01/2024
  4681                                  	;PUSH	DS
  4682                                  	;push	ss
  4683                                  	;pop	ds
  4684 000004ED E80901                  	CALL	GETBP
  4685                                  	; 02/01/2024
  4686 000004F0 1F                      	pop	ds ; *
  4687 000004F1 7239                    	JC	short errdriv 		; PM. error drive ;AN000;
  4688                                  	;mov	word [es:bp+1Fh]
  4689 000004F3 26C7461FFFFF            	MOV	WORD [ES:BP+DPB.FREE_CNT],-1 ; do not trust user at all.
  4690                                  
  4691                                  	; 02/01/2024
  4692                                  ;errdriv:
  4693                                  ;	POP	DS
  4694                                  ;	jnc	short AbsSetup2
  4695                                  ;AbsSetup_retn:
  4696                                  ;	retn
  4697                                  
  4698                                  AbsSetup2:
  4699                                  	; 15/05/2019 - Retro DOS v4.0
  4700                                  	; MSDOS 6.0
  4701                                  					; SS override
  4702 000004F9 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0 ;>32mb	from API		;AN000;
  4703 00000500 E83504                  	CALL	RW32_CONVERT		;>32mb convert 32bit format to 16bit ;AN000;
  4704 00000503 7227                    	jc	short AbsSetup_retn
  4705 00000505 E89055                  	call	SET_RQ_SC_PARMS 	;LB. set up SC parms		;AN000;
  4706                                  
  4707                                  	; MSDOS 3.3 (& MSDOS 6.0)
  4708 00000508 1E                      	PUSH	DS
  4709 00000509 56                      	PUSH	SI
  4710 0000050A 50                      	PUSH	AX
  4711                                  
  4712 0000050B 16                      	push	ss
  4713 0000050C 1F                      	pop	ds
  4714                                  	
  4715 0000050D BE[BE03]                	MOV	SI,OPENBUF
  4716 00000510 8804                    	MOV	[SI],AL
  4717 00000512 800441                  	ADD	BYTE [SI],"A"
  4718 00000515 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
  4719 0000051A B80003                  	MOV	AX,0300H
  4720 0000051D F8                      	CLC
  4721 0000051E CD2A                    	INT	int_IBM ; int 2Ah	; Will set carry if shared
  4722                                  		
  4723                                  		; 04/11/2022
  4724                                  		; (INT 2Ah - AX = 0300h)
  4725                                  		; Microsoft Networks - CHECK DIRECT I/O
  4726                                  		; DS:SI -> ASCIIZ disk device name (may be full path or
  4727                                  		;    only drive specifier--must include the colon)
  4728                                  		; Return: CF clear if absolute disk access allowed
  4729                                  
  4730 00000520 58                      	POP	AX
  4731 00000521 5E                      	POP	SI
  4732 00000522 1F                      	POP	DS
  4733 00000523 7307                    	jnc	short AbsSetup_retn
  4734                                  
  4735                                  	;mov	word [ss:EXTERR],32h
  4736 00000525 36C706[2403]3200        	MOV	word [ss:EXTERR],error_not_supported
  4737                                  errdriv:	; 02/01/2024
  4738                                  AbsSetup_retn:
  4739 0000052C C3                      	retn
  4740                                  
  4741                                  ;---------------------------------------------------------------------------
  4742                                  ;
  4743                                  ; Procedure Name : ABSDRD
  4744                                  ;
  4745                                  ; Interrupt 25 handler. Performs absolute disk read.
  4746                                  ; Inputs:	AL - 0-based drive number
  4747                                  ;		DS:BX point to destination buffer
  4748                                  ;		CX number of logical sectors to read
  4749                                  ;		DX starting logical sector number (0-based)
  4750                                  ; Outputs:	Original flags still on stack
  4751                                  ;		Carry set
  4752                                  ;		    AH error from BIOS
  4753                                  ;		    AL same as low byte of DI from INT 24
  4754                                  ;
  4755                                  ;---------------------------------------------------------------------------
  4756                                          ;procedure   ABSDRD,FAR
  4757                                  ABSDRD:
  4758                                  	; 15/05/2019 - Retro DOS v4.0
  4759                                  	; MSDOS 6.21 (DOSCODE:42E5h)
  4760                                  	; 04/11/2022
  4761                                  	; MSDOS 5.0 (DOSCODE:42D8h)
  4762                                  	
  4763                                  	; MSDOS 6.0
  4764 0000052D FA                      	CLI
  4765                                  	
  4766                                  ;	set up ds to point to DOSDATA
  4767                                  
  4768 0000052E 50                      	push	ax			; preserve AX value
  4769 0000052F 8CD8                    	mov	ax,ds			; store DS value in AX
  4770                                  	;getdseg <ds>
  4771 00000531 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4772 00000536 A3[0A0D]                	mov	[TEMPSEG],ax		; store DS value in TEMPSEG
  4773 00000539 58                      	pop	ax			; restore AX value
  4774                                  
  4775                                  	; M072:
  4776                                  	; We shall save es on the user stack here. We need to use ES in
  4777                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4778                                  	; time in order to restore the user stack.
  4779                                  
  4780 0000053A 06                      	push	es  ; ****		; M072
  4781                                  
  4782 0000053B 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4783 0000053F 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4784                                  
  4785                                  ; 	set up ss to point to DOSDATA
  4786                                  ;
  4787                                  ; NOTE! Due to an obscure bug in the 80286, you cannot use the ROMDOS
  4788                                  ; version of the getdseg macro with the SS register! An interrupt will
  4789                                  ; sneak through.
  4790                                  
  4791                                  ;ifndef ROMDOS
  4792                                  	;getdseg <ss>			; cli in entry of routine
  4793 00000543 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4794                                  ;else
  4795                                  ;	mov	ds, cs:[BioDataSeg]
  4796                                  ;	assume	ds:bdata
  4797                                  ;
  4798                                  ;	mov	ss, ds:[DosDataSg]
  4799                                  ;	assume	ss:DOSDATA
  4800                                  ;
  4801                                  ;endif ; ROMDOS
  4802                                  
  4803 00000548 BC[2009]                	MOV	SP,DSKSTACK
  4804                                  
  4805 0000054B 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore DS value
  4806                                  
  4807 0000054F 06                      	push	es ; *** (MSDOS 6.21)
  4808 00000550 E80FFF                  	call	save_world		; save all regs
  4809                                  
  4810 00000553 06                      	PUSH	ES ; **
  4811 00000554 E88DFF                  	CALL	AbsSetup
  4812 00000557 723D                    	JC	short ILEAVE
  4813                                  
  4814                                  	; Here is a gross temporary fix to get around a serious design flaw in
  4815                                  	;  the secondary cache. The secondary cache does not check for media
  4816                                  	;  changed (it should). Hence, you can change disks, do an absolute
  4817                                  	;  read, and get data from the previous disk. To get around this,
  4818                                  	;  we just won't use the secondary cache for absolute disk reads.
  4819                                  	;                                                      -mw 8/5/88
  4820                                  
  4821                                  	;EnterCrit critDisk
  4822 00000559 E8970D                  	call	ECritDisk
  4823 0000055C 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC  ;AN000;
  4824                                  	;LeaveCrit critDisk
  4825 00000562 E8A90D                  	call	LCritDisk
  4826                                  
  4827                                          ;invoke	DSKREAD
  4828 00000565 E84831                  	CALL	DSKREAD
  4829 00000568 7513                            jnz	short ERR_LEAVE		;Jump if read unsuccessful.
  4830                                  
  4831 0000056A 89F9                            mov     cx,di
  4832 0000056C 368C1E[0E06]                    mov     [ss:TEMP_VAR2],ds
  4833 00000571 36891E[0C06]                    mov     [ss:TEMP_VAR],bx
  4834                                  
  4835                                  ;       CX = # of contiguous sectors read. (These constitute a block of
  4836                                  ;            sectors, also termed an "Extent".)
  4837                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4838                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
  4839                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4840                                  ;
  4841                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
  4842                                  ;	buffers must be "read" into the transfer memory block, so that the
  4843                                  ;       transfer memory reflects the most recent data.
  4844                                  
  4845                                  	;invoke	DskRdBufScan		;This trashes DS, but don't care.
  4846 00000576 E88433                          call	DskRdBufScan
  4847 00000579 EB1B                    	jmp     short ILEAVE
  4848                                  
  4849                                  TLEAVE:
  4850 0000057B 7419                    	JZ	short ILEAVE
  4851                                  
  4852                                  ERR_LEAVE:				; M039
  4853                                  	; 15/07/2018 - Retro DOS v3.0
  4854                                          ;IF	IBM
  4855                                  ; Translate the error code to ancient 1.1 codes
  4856 0000057D 06                              PUSH    ES ; *
  4857 0000057E 0E                              PUSH    CS
  4858 0000057F 07                              POP     ES
  4859 00000580 30E4                            XOR     AH,AH			; Nul error code
  4860                                  	;mov	cx,6
  4861 00000582 B90600                          MOV     CX,NUMERR		; Number of possible error conditions
  4862 00000585 BF[D804]                        MOV     DI,ERRIN		; Point to error conditions
  4863 00000588 F2AE                            REPNE   SCASB
  4864 0000058A 7504                            JNZ     SHORT LEAVECODE		; Not found
  4865                                  	;mov	ah,[ES:DI+5]
  4866 0000058C 268A6505                        MOV     AH,[ES:DI+NUMERR-1]	; Get translation
  4867                                  LEAVECODE:
  4868 00000590 07                              POP     ES ; *
  4869                                  	; 15/05/2019 - Retro DOS v4.0
  4870 00000591 36A3[B80D]              	mov	[ss:AbsDskErr],ax
  4871                                          ;ENDIF
  4872                                  
  4873 00000595 F9                              STC
  4874                                  ILEAVE:
  4875                                  	; 15/05/2019
  4876 00000596 07                              POP     ES ; **
  4877 00000597 E8B1FE                  	call	restore_world
  4878 0000059A 07                              pop	es ; *** (MSDOS 6.21)
  4879 0000059B FA                      	CLI
  4880 0000059C 36A1[B80D]              	mov     ax,[ss:AbsDskErr]	; restore error
  4881 000005A0 36FE0E[2103]            	DEC	BYTE [SS:INDOS]
  4882 000005A5 16                              push	ss			; M072 - Start
  4883 000005A6 07                      	pop	es			; es - dosdata
  4884 000005A7 268E16[1B06]                    mov	ss,[es:AbsRdWr_SS]	; M013
  4885 000005AC 268B26[1D06]            	mov	sp,[es:AbsRdWr_SP]	; M013
  4886 000005B1 07                      	pop	es  ; ****		; Note es was saved on user
  4887                                  					; stack at entry 
  4888                                  					; M072 - End
  4889 000005B2 FB                              STI
  4890 000005B3 CB                      	RETF   ; ! FAR return !
  4891                                  
  4892                                  ;ABSDRD	ENDP
  4893                                  
  4894                                  ;---------------------------------------------------------------------------
  4895                                  ;
  4896                                  ; Procedure Name : ABSDWRT
  4897                                  ;
  4898                                  ; Interrupt 26 handler. Performs absolute disk write.
  4899                                  ; Inputs:	AL - 0-based drive number
  4900                                  ;		DS:BX point to source buffer
  4901                                  ;		CX number of logical sectors to write
  4902                                  ;		DX starting logical sector number (0-based)
  4903                                  ; Outputs:	Original flags still on stack
  4904                                  ;		Carry set
  4905                                  ;		    AH error from BIOS
  4906                                  ;		    AL same as low byte of DI from INT 24
  4907                                  ;
  4908                                  ;---------------------------------------------------------------------------
  4909                                          ;procedure   ABSDWRT,FAR
  4910                                  ABSDWRT:
  4911                                  	; 15/05/2019 - Retro DOS v4.0
  4912                                  	; MSDOS 6.21 (DOSCODE:436Ch)
  4913                                  	; 04/11/2022
  4914                                  	; MSDOS 5.0 (DOSCODE:435Fh)
  4915                                  
  4916 000005B4 FA                      	CLI
  4917                                  
  4918                                  ;	set up ds to point to DOSDATA
  4919                                  
  4920 000005B5 50                      	push	ax
  4921 000005B6 8CD8                    	mov	ax,ds
  4922                                  	;getdseg <ds>
  4923 000005B8 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4924 000005BD A3[0A0D]                	mov	[TEMPSEG],ax
  4925 000005C0 58                      	pop	ax
  4926                                  
  4927                                  	; M072:
  4928                                  	; We shall save es on the user stack here. We need to use ES in
  4929                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4930                                  	; time in order to restore the user stack.
  4931                                  
  4932 000005C1 06                      	push	es ; ****		; M072
  4933                                  
  4934 000005C2 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4935 000005C6 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4936                                  
  4937                                  	; set up ss to point to DOSDATA
  4938                                  	;
  4939                                  	; NOTE! Due to an obscure bug in the 80286, you cannot use the 
  4940                                  	; ROMDOS version of the getdseg macro with the SS register!
  4941                                  	; An interrupt will sneak through.
  4942                                  
  4943                                  ;ifndef ROMDOS
  4944                                  	;getdseg <ss>			; cli in entry of routine
  4945 000005CA 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4946                                  ;else
  4947                                  ;	mov	ds, cs:[BioDataSeg]
  4948                                  ;	assume	ds:bdata
  4949                                  ;
  4950                                  ;	mov	ss, ds:[DosDataSg]
  4951                                  ;	assume	ss:DOSDATA
  4952                                  ;
  4953                                  ;endif ; ROMDOS
  4954                                  
  4955 000005CF BC[2009]                	MOV	SP,DSKSTACK
  4956                                  		; we are now switched to DOS's disk stack
  4957                                  
  4958 000005D2 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore user's ds
  4959                                  
  4960 000005D6 06                      	push	es ; *** (MSDOS 6.21)
  4961                                  
  4962 000005D7 E888FE                  	call	save_world	      	; save all regs
  4963                                  
  4964 000005DA 06                      	PUSH	ES ; **
  4965 000005DB E806FF                  	CALL	AbsSetup
  4966 000005DE 72B6                    	JC	short ILEAVE
  4967                                  
  4968                                  	;EnterCrit critDisk
  4969 000005E0 E8100D                  	call	ECritDisk
  4970 000005E3 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC ;AN000;
  4971 000005E9 E89103                  	CALL	Fastxxx_Purge		 ; purge fatopen ;AN000;
  4972                                  	;LeaveCrit critDisk
  4973 000005EC E81F0D                  	call	LCritDisk
  4974                                  
  4975                                  ;M039
  4976                                  ;       DS:BX = transfer address (source data address).
  4977                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
  4978                                  ;	     sectors, also termed an "Extent".)
  4979                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4980                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4981                                  ;       [CURSC_DRIVE] = -1 (invalid drive).
  4982                                  ;
  4983                                  ;       Free any buffered sectors which are in Extent; they are being over-
  4984                                  ;       written. Note that all the above registers are preserved for
  4985                                  ;       DSKWRITE.
  4986                                  
  4987 000005EF 1E                              push    ds
  4988                                  	;invoke	DskWrtBufPurge          ;This trashes DS.
  4989 000005F0 E82136                  	call	DskWrtBufPurge
  4990 000005F3 1F                              pop     ds
  4991                                  ;M039
  4992                                  	;invoke	DSKWRITE
  4993 000005F4 E8E230                  	call	DSKWRITE
  4994 000005F7 EB82                    	JMP	short TLEAVE
  4995                                  
  4996                                  ;ABSDWRT ENDP
  4997                                  
  4998                                  ;----------------------------------------------------------------------------
  4999                                  ;
  5000                                  ; Procedure Name : GETBP
  5001                                  ;
  5002                                  ; Inputs:
  5003                                  ;	AL = Logical unit number (A = 0)
  5004                                  ; Function:
  5005                                  ;	Find Drive Parameter Block
  5006                                  ; Outputs:
  5007                                  ;	ES:BP points to DPB
  5008                                  ;	[THISDPB] = ES:BP
  5009                                  ;	Carry set if unit number bad or unit is a NET device.
  5010                                  ;		Later case sets extended error error_I24_not_supported
  5011                                  ; No other registers alteredjjj
  5012                                  ;
  5013                                  ;----------------------------------------------------------------------------
  5014                                  
  5015                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5016                                  GETBP:
  5017                                  	; 15/05/2019 - Retro DOS v4.0
  5018                                  	; 11/07/2018 - Retro DOS v3.0
  5019 000005F9 50                      	PUSH	AX
  5020 000005FA 0401                    	ADD	AL, 1		; No increment; need carry flag
  5021 000005FC 7216                    	JC	SHORT SKIPGET
  5022 000005FE E8EF63                  	CALL	GETTHISDRV
  5023                                  	; MSDOS 6.0
  5024 00000601 7311                    	JNC	SHORT SKIPGET		;PM. good drive		;AN000;
  5025 00000603 30E4                    	XOR	AH,AH			;DCR. ax= error code 	;AN000;
  5026 00000605 83F81A                  	CMP	AX,error_not_DOS_disk	;DCR. is unknown media ? ;AN000;
  5027 00000608 740A                    	JZ	SHORT SKIPGET 		;DCR. yes, let it go 	;AN000;
  5028 0000060A F9                      	STC				;DCR.			;AN000;
  5029 0000060B A3[2403]                	MOV	[EXTERR],AX	;PM. invalid drive or Non DOS drive ;AN000;
  5030 0000060E C706[B80D]0102          	MOV	WORD [AbsDskErr],201h
  5031                                  SKIPGET:
  5032 00000614 58                      	POP	AX
  5033 00000615 7212                    	JC	SHORT GETBP_RETN ; 15/12/2022
  5034                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  5035                                  	;jnc	short getbp_t
  5036                                  	;retn
  5037                                  getbp_t:
  5038 00000617 C42E[A205]              	LES	BP,[THISCDS]
  5039                                  	; 15/12/2022
  5040 0000061B 26F6464480              	test	byte [es:bp+curdir.flags+1],curdir_isnet>>8
  5041                                  	; 07/12/2022
  5042                                  	;TEST	WORD [ES:BP+43H],8000H
  5043                                  	;TEST	WORD [ES:BP+curdir.flags],curdir_isnet ; Clears carry
  5044 00000620 7408                    	JZ	SHORT GETBP_CDS
  5045 00000622 C706[2403]3200          	MOV	WORD [EXTERR],error_not_supported  ; 32h
  5046 00000628 F9                      	STC
  5047                                  GETBP_RETN:
  5048 00000629 C3                      	RETN
  5049                                  
  5050                                  GETBP_CDS:
  5051                                  	;LES	BP,[ES:BP+45H]
  5052 0000062A 26C46E45                	LES	BP,[ES:BP+curdir.devptr]
  5053                                  GOTDPB:
  5054                                  	; Load THISDPB from ES:BP
  5055 0000062E 892E[8A05]              	MOV	[THISDPB],BP
  5056 00000632 8C06[8C05]              	MOV	[THISDPB+2],ES
  5057 00000636 C3                      	RETN
  5058                                  
  5059                                  ;BREAK <SYS_RET_OK SYS_RET_ERR CAL_LK ETAB_LK set system call returns>
  5060                                  
  5061                                  ;----------------------------------------------------------------------------
  5062                                  ;
  5063                                  ; Procedure Name : SYS_RETURN
  5064                                  ;
  5065                                  ; These are the general system call exit mechanisms. All internal system
  5066                                  ; calls will transfer (jump) to one of these at the end. Their sole purpose
  5067                                  ; is to set the user's flags and set his AX register for return.
  5068                                  ;
  5069                                  ;----------------------------------------------------------------------------
  5070                                  
  5071                                          ;procedure   SYS_RETURN,NEAR
  5072                                  SYS_RETURN:        
  5073                                          ;entry	SYS_RET_OK
  5074                                  SYS_RET_OK:   
  5075 00000637 E847FE                  	call    Get_User_Stack
  5076                                  		; turn off user's carry flag
  5077                                  SYS_RET_OK_clc: ; 25/06/2019 
  5078                                          ;;and	word [SI+16h],0FFFEh 
  5079                                  	;and	word [SI+user_env.user_F],~f_Carry 
  5080                                          ; 25/06/2019
  5081 0000063A 806416FE                	and	byte [SI+user_env.user_F],~f_Carry ; 0FEh
  5082 0000063E EB10                    	JMP     SHORT DO_RET
  5083                                  
  5084                                          ;entry   SYS_RET_ERR
  5085                                  SYS_RET_ERR:        
  5086 00000640 30E4                    	XOR     AH,AH 		; hack to allow for smaller error rets
  5087 00000642 E86C00                  	call	ETAB_LK 	; Make sure code is OK, EXTERR gets set
  5088 00000645 E81A00                  	CALL	ErrorMap
  5089                                  
  5090                                  	;entry	From_GetSet
  5091                                  From_GetSet:
  5092 00000648 E836FE                          call    Get_User_Stack
  5093                                  		 ; signal carry to user
  5094                                  	;;or	word [SI+16h],1
  5095                                  	;OR	word [SI+user_env.user_F],f_Carry
  5096                                  	; 25/06/2019
  5097 0000064B 804C1601                	or	byte [SI+user_env.user_F],f_Carry
  5098 0000064F F9                      	STC			; also, signal internal error
  5099                                  DO_RET:
  5100                                          ;MOV	[SI+user_env.user_AX],AX ; Really only sets AH
  5101 00000650 8904                    	MOV	[SI],AX
  5102 00000652 C3                      	RETN
  5103                                  
  5104                                  	;entry	FCB_RET_OK
  5105                                  FCB_RET_OK:
  5106                                  	;entry	NO_OP		; obsolete system calls dispatch to here
  5107                                  NO_OP:
  5108 00000653 30C0                    	XOR	AL,AL
  5109 00000655 C3                      	retn
  5110                                  
  5111                                  	;entry	FCB_RET_ERR
  5112                                  FCB_RET_ERR:
  5113 00000656 30E4                    	XOR	AH,AH
  5114 00000658 36A3[2403]              	mov	[ss:EXTERR],AX
  5115 0000065C E80300                  	CALL	ErrorMap
  5116 0000065F B0FF                    	MOV	AL,-1
  5117 00000661 C3                      	retn
  5118                                  
  5119                                  	;entry	ErrorMap
  5120                                  ErrorMap:
  5121 00000662 56                      	PUSH	SI
  5122                                  				; ERR_TABLE_21 is now in DOSDATA
  5123 00000663 BE[DB0D]                	MOV	SI,ERR_TABLE_21
  5124                                  				; SS override for FAILERR and EXTERR
  5125 00000666 36803E[4A03]00          	CMP	byte [SS:FAILERR],0 ; Check for SPECIAL case.
  5126 0000066C 7407                    	JZ	short EXTENDED_NORMAL ; All is OK.
  5127                                  		 ; Ooops, this is the REAL reason
  5128                                  	;mov	word [SS:EXTERR],53h
  5129 0000066E 36C706[2403]5300        	MOV	word [SS:EXTERR],error_FAIL_I24
  5130                                  EXTENDED_NORMAL:
  5131 00000675 E80200                  	call	CAL_LK		; Set CLASS,ACTION,LOCUS for EXTERR
  5132 00000678 5E                      	POP	SI
  5133 00000679 C3                      	retn
  5134                                  
  5135                                  	;EndProc SYS_RETURN
  5136                                  
  5137                                  ;---------------------------------------------------------------------------
  5138                                  ;
  5139                                  ; Procedure Name : CAL_LK
  5140                                  ;
  5141                                  ; Inputs:
  5142                                  ;	SI is OFFSET in DOSDATA of CLASS,ACTION,LOCUS Table to use
  5143                                  ;		(DS NEED not be DOSDATA)
  5144                                  ;	[EXTERR] is set with error
  5145                                  ; Function:
  5146                                  ;	Look up and set CLASS ACTION and LOCUS values for GetExtendedError
  5147                                  ; Outputs:
  5148                                  ;	[EXTERR_CLASS] set
  5149                                  ;	[EXTERR_ACTION] set
  5150                                  ;	[EXTERR_LOCUS] set  (EXCEPT on certain errors as determined by table)
  5151                                  ; Destroys SI, FLAGS
  5152                                  ;
  5153                                  ;---------------------------------------------------------------------------
  5154                                  
  5155                                  	;procedure CAL_LK,NEAR
  5156                                  CAL_LK:
  5157 0000067A 1E                      	PUSH	DS
  5158 0000067B 50                      	PUSH	AX
  5159 0000067C 53                      	PUSH	BX
  5160                                  
  5161                                  ;M048	Context DS		; DS:SI -> Table
  5162                                  ;
  5163                                  ; Since this function can be called thru int 2f we shall not assume that SS
  5164                                  ; is DOSDATA
  5165                                  
  5166                                  	;getdseg  <ds>	; M048: DS:SI -> Table
  5167                                  	; 15/05/2019 - Retro DOS v4.0
  5168 0000067D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5169                                  
  5170                                  	; 18/07/2018
  5171                                  	;push	ss
  5172                                  	;pop	ds
  5173                                  
  5174 00000682 8B1E[2403]              	MOV	BX,[EXTERR]	; Get error in BL
  5175                                  TABLK1:
  5176 00000686 AC                      	LODSB
  5177                                  
  5178 00000687 3CFF                    	CMP	AL,0FFH
  5179 00000689 7409                    	JZ	short GOT_VALS	; End of table
  5180 0000068B 38D8                    	CMP	AL,BL
  5181 0000068D 7405                    	JZ	short GOT_VALS	; Got entry
  5182 0000068F 83C603                  	ADD	SI,3		; Next table entry
  5183                                  	; 15/08/2018
  5184 00000692 EBF2                    	JMP	short TABLK1
  5185                                  
  5186                                  GOT_VALS:
  5187 00000694 AD                      	LODSW			; AL is CLASS, AH is ACTION
  5188                                  
  5189 00000695 80FCFF                  	CMP	AH,0FFH
  5190 00000698 7404                    	JZ	short NO_SET_ACT
  5191 0000069A 8826[2603]              	MOV	[EXTERR_ACTION],AH ; Set ACTION
  5192                                  NO_SET_ACT:
  5193 0000069E 3CFF                    	CMP	AL,0FFH
  5194 000006A0 7403                    	JZ	short NO_SET_CLS
  5195 000006A2 A2[2703]                	MOV	[EXTERR_CLASS],AL ; Set CLASS
  5196                                  NO_SET_CLS:
  5197 000006A5 AC                      	LODSB			; Get LOCUS
  5198                                  
  5199 000006A6 3CFF                    	CMP	AL,0FFH
  5200 000006A8 7403                    	JZ	short NO_SET_LOC
  5201 000006AA A2[2303]                	MOV	[EXTERR_LOCUS],AL
  5202                                  NO_SET_LOC:
  5203 000006AD 5B                      	POP	BX
  5204 000006AE 58                      	POP	AX
  5205 000006AF 1F                      	POP	DS
  5206 000006B0 C3                      	retn
  5207                                  
  5208                                  	;EndProc CAL_LK
  5209                                  
  5210                                  ;---------------------------------------------------------------------------
  5211                                  ;
  5212                                  ; Procedure Name : ETAB_LK
  5213                                  ;
  5214                                  ; Inputs:
  5215                                  ;	AX is error code
  5216                                  ;	[USER_IN_AX] has AH value of system call involved
  5217                                  ; Function:
  5218                                  ;	Make sure error code is appropriate to this call.
  5219                                  ; Outputs:
  5220                                  ;	AX MAY be mapped error code
  5221                                  ;	[EXTERR] = Input AX
  5222                                  ; Destroys ONLY AX and FLAGS
  5223                                  ;
  5224                                  ;---------------------------------------------------------------------------
  5225                                  
  5226                                  	;procedure ETAB_LK,NEAR
  5227                                  
  5228                                  ETAB_LK: ; 10/08/2018 - Retro DOS v3.0
  5229 000006B1 1E                      	PUSH	DS
  5230 000006B2 56                      	PUSH	SI
  5231 000006B3 51                      	PUSH	CX
  5232 000006B4 53                      	PUSH	BX
  5233                                  
  5234                                  	;Context DS			; SS is DOSDATA
  5235                                  
  5236 000006B5 16                      	push	ss
  5237 000006B6 1F                      	pop	ds
  5238                                  
  5239 000006B7 A3[2403]                	MOV	[EXTERR],AX		; Set EXTERR with "real" error
  5240                                  
  5241                                  					; I21_MAP_E_TAB is now in DOSCODE
  5242 000006BA BE[0B00]                	MOV	SI,I21_MAP_E_TAB
  5243 000006BD 88C7                    	MOV	BH,AL			; Real code to BH
  5244 000006BF 8A1E[3B03]              	MOV	BL,[USER_IN_AX+1]	; Sys call to BL
  5245                                  TABLK2:
  5246                                  	; 15/05/2019 - Retro DOS v4.0
  5247 000006C3 2E                      	cs
  5248 000006C4 AD                      	lodsw	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:447Dh)
  5249                                  	
  5250                                  	; 18/07/2018 - Retro DOS v3.0
  5251                                  	;lodsw		; IBMDOS.COM (MSDOS 3.3) - Offset 16F7h
  5252                                  
  5253 000006C5 3CFF                    	CMP	AL,0FFH 		; End of table?
  5254 000006C7 740C                    	JZ	short NOT_IN_TABLE	; Yes
  5255 000006C9 38D8                    	CMP	AL,BL			; Found call?
  5256 000006CB 740C                    	JZ	short GOT_CALL		; Yes
  5257 000006CD 86E0                    	XCHG	AH,AL			; Count to AL
  5258 000006CF 30E4                    	XOR	AH,AH			; Make word for add
  5259 000006D1 01C6                    	ADD	SI,AX			; Next table entry
  5260 000006D3 EBEE                    	JMP	short TABLK2
  5261                                  
  5262                                  NOT_IN_TABLE:
  5263 000006D5 88F8                    	MOV	AL,BH			; Restore original code
  5264 000006D7 EB0C                    	JMP	SHORT NO_MAP
  5265                                  
  5266                                  GOT_CALL:
  5267 000006D9 88E1                    	MOV	CL,AH
  5268 000006DB 30ED                    	XOR	CH,CH			; Count of valid err codes to CX
  5269                                  CHECK_CODE:
  5270                                  	; 15/05/2019 - Retro DOS v4.0
  5271 000006DD 2E                      	cs
  5272 000006DE AC                      	lodsb	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:4497h)
  5273                                  
  5274                                  	; 18/07/2018
  5275                                  	;lodsb		; IBMDOS.COM (MSDOS 3.3) - Offset 1710h
  5276                                  
  5277 000006DF 38F8                    	CMP	AL,BH			; Code OK?
  5278 000006E1 7402                    	JZ	short NO_MAP		; Yes
  5279 000006E3 E2F8                    	LOOP	CHECK_CODE
  5280                                  NO_MAP:
  5281 000006E5 30E4                    	XOR	AH,AH			; AX is now valid code
  5282 000006E7 5B                      	POP	BX
  5283 000006E8 59                      	POP	CX
  5284 000006E9 5E                      	POP	SI
  5285 000006EA 1F                      	POP	DS
  5286 000006EB C3                      	retn
  5287                                  
  5288                                  	;EndProc ETAB_LK
  5289                                  
  5290                                  ; 18/07/2018 - Retro DOS v3.0
  5291                                  ;---------------------------------------------------------------------------
  5292                                  ; BREAK <DOS 2F Handler and default NET 2F handler>
  5293                                  
  5294                                  ;IF installed ; (*)
  5295                                  
  5296                                  ;---------------------------------------------------------------------------
  5297                                  ;
  5298                                  ; Procedure Name : SetBad
  5299                                  ;
  5300                                  ; SetBad sets up info for bad functions
  5301                                  ;
  5302                                  ;---------------------------------------------------------------------------
  5303                                  
  5304                                  SetBad:
  5305                                  	;mov	ax,1
  5306 000006EC B80100                  	MOV	AX,error_invalid_function ; ALL NET REQUESTS get inv func
  5307                                  
  5308                                  	; MSDOS 3.3
  5309                                  	;;mov	byte [cs:EXTERR_LOCUS],1
  5310                                  	;MOV	byte [CS:EXTERR_LOCUS],errLOC_Unk
  5311                                  
  5312                                  ;	set up ds to point to DOSDATA
  5313                                  
  5314                                  	; 15/05/2019 - Retro DOS v4.0
  5315                                  	; MSDOS 6.0
  5316 000006EF 1E                      	push	ds
  5317                                  
  5318                                  	;getdseg <ds>
  5319 000006F0 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5320                                  
  5321 000006F5 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1	
  5322                                  
  5323 000006FA 1F                      	pop	ds	  	;hkn; restore ds
  5324                                  
  5325 000006FB F9                      	STC
  5326 000006FC C3                      	retn
  5327                                  
  5328                                  ;--------------------------------------------------------------------------
  5329                                  ;
  5330                                  ; Procedure Name : BadCall
  5331                                  ;
  5332                                  ; BadCall is the initial routine for bad function calls
  5333                                  ;
  5334                                  ;--------------------------------------------------------------------------
  5335                                  
  5336                                  BadCall:
  5337 000006FD E8ECFF                  	call	SetBad
  5338 00000700 CB                      	retf
  5339                                  
  5340                                  ;--------------------------------------------------------------------------
  5341                                  ;
  5342                                  ; OKCall always sets carry to off.
  5343                                  ;
  5344                                  ;-----------------------------------------------------------------------
  5345                                  
  5346                                  OKCall:
  5347 00000701 F8                      	CLC
  5348 00000702 CB                      	retf
  5349                                  
  5350                                  ;---------------------------------------------------------------------------
  5351                                  ;
  5352                                  ; Procedure Name : INT2F
  5353                                  ;
  5354                                  ; INT 2F handler works as follows:
  5355                                  ;   PUSH    AX
  5356                                  ;   MOV     AX,multiplex:function
  5357                                  ;   INT     2F
  5358                                  ;   POP     ...
  5359                                  ; The handler itself needs to make the AX available for the various routines.
  5360                                  ;
  5361                                  ;----------------------------------------------------------------------------
  5362                                  
  5363                                  ; 15/05/2019 - Retro DOS v4.0
  5364                                  
  5365                                  ;KERNEL_SEGMENT equ 70h
  5366                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5367                                  DOSBIODATASEG equ 70h
  5368                                  
  5369                                  ; retrodos4.s - offset in BIOSDATA
  5370                                  bios_i2f equ 5
  5371                                  
  5372                                  ;PUBLIC	Int2F
  5373                                  ;INT2F	PROC	FAR
  5374                                  
  5375                                  ; 15/05/2019
  5376                                  ; DOSCODE:44BDh (MSDOS 6.21, MSDOS.SYS)
  5377                                  
  5378                                  ; 04/11/2022
  5379                                  ; DOSCODE:44B0h (MSDOS 5.0, MSDOS.SYS)
  5380                                  
  5381                                  	; 05/01/2024
  5382                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5383                                  	; 18/07/2018 - Retro DOS v3.0
  5384                                  INT2F:
  5385                                  	; Offset 172Fh in IBMDOS.COM (MSDOS 3.3), 1987
  5386                                  INT2FNT:
  5387                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5388 00000703 FB                      	STI
  5389                                  	;cmp	ah,11h
  5390 00000704 80FC11                  	CMP	AH,MultNET
  5391 00000707 750A                    	JNZ	short INT2FSHR
  5392                                  TestInstall:
  5393 00000709 08C0                    	OR	AL,AL
  5394 0000070B 7403                    	JZ	short Leave2F
  5395                                  BadFunc:
  5396 0000070D E8DCFF                  	CALL	SetBad
  5397                                  
  5398                                  	;entry	Leave2F
  5399                                  Leave2F:
  5400 00000710 CA0200                  	RETF	2			; long return + clear flags off stack
  5401                                  
  5402                                  INT2FSHR:
  5403                                  	;cmp	ah,10h
  5404 00000713 80FC10                  	CMP	AH,MultSHARE		; is this a share request
  5405 00000716 74F1                    	JZ	short TestInstall	; yes, check for installation
  5406                                  INT2FNLS:
  5407                                  	;cmp	ah,14h
  5408 00000718 80FC14                  	CMP	AH,NLSFUNC		; is this a DOS 3.3 NLSFUNC request
  5409 0000071B 74EC                    	JZ	short TestInstall	; yes check for installation
  5410                                  INT2FDOS:
  5411                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5412                                  
  5413                                  	; 18/07/2018
  5414                                  	; MSDOS 3.3
  5415                                  	;;cmp	ah,12h	
  5416                                  	;CMP	AH,MultDOS
  5417                                  	;jz	short DispatchDOS
  5418                                  	;iret
  5419                                  
  5420                                  	; 15/05/2019
  5421                                  	; MSDOS 6.0
  5422                                  	;cmp	ah,12h	; 07/12/2022
  5423 0000071D 80FC12                  	CMP	AH,MultDOS
  5424 00000720 7503                    	JNZ	short check_win		;check if win386 broadcast
  5425 00000722 E9F201                  	jmp	DispatchDOS
  5426                                  
  5427                                  	; .... win386 .... 
  5428                                  
  5429                                  check_win:
  5430                                  	;cmp	ah,16h
  5431 00000725 80FC16                  	cmp	ah,MultWin386		; Is this a broadcast from Win386?
  5432 00000728 7408                    	je	short Win386_Msg
  5433                                  
  5434                                  	; M044
  5435                                  	; Check if the callout is from Winoldap indicating swapping out or in 
  5436                                  	; of Windows. If so, do special action of going and saving last para
  5437                                  	; of the Windows memory arena which Winoldap does not save due to a 
  5438                                  	; bug
  5439                                  
  5440 0000072A 80FC46                  	cmp	ah,WINOLDAP ; 46h	; from Winoldap?
  5441                                  	;jne	short next_i2f		; no, chain on
  5442                                  	; 15/12/2022
  5443                                  	;jmp	winold_swap		; yes, do desired action
  5444 0000072D 7442                    	je	short winold_swap
  5445 0000072F E90501                  	jmp	next_i2f
  5446                                  
  5447                                  	; 15/12/2022
  5448                                  ;next_i2f:
  5449                                  ;	;;;jmp	bios_i2f
  5450                                  ;	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5451                                  ;	;jmp	KERNEL_SEGMENT:bios_i2f
  5452                                  ;	; 04/11/2022
  5453                                  ;	jmp	DOSBIODATASEG:bios_i2f
  5454                                  
  5455                                  ;	IRET				; This assume that we are at the head
  5456                                  					; of the list
  5457                                  ;INT2F	ENDP
  5458                                  
  5459                                  ; 15/05/2019 - Retro DOS v4.0
  5460                                  
  5461                                  ; We have received a message from Win386. There are three possible
  5462                                  ; messages we could get from Win386:
  5463                                  ;
  5464                                  ; Init 		- for this, we set the IsWin386 flag and return a pointer
  5465                                  ;		  to the Win386 startup info structure.
  5466                                  ; Exit		- for this, we clear the IsWin386 flag.
  5467                                  ; DOSMGR query 	- for this, we need to indicate that instance data
  5468                                  ;		  has already been handled. this is indicated by setting
  5469                                  ;		  CX to a non-zero value.
  5470                                  
  5471                                  Win386_Msg:
  5472 00000732 1E                      	push	ds
  5473                                  
  5474                                  	;getdseg <DS>			; ds is DOSDATA
  5475 00000733 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5476                                  
  5477                                  	; For WIN386 2.xx instance data
  5478                                  
  5479 00000738 3C03                    	cmp	al,3			; win386 2.xx instance data call?
  5480 0000073A 7503                    	jne	short Win386_Msg_exit
  5481 0000073C E92A01                  	jmp	OldWin386Init		; yes, return instance data
  5482                                  Win386_Msg_exit:
  5483 0000073F 3C06                    	cmp	al,Win386_Exit	 ; 6	; is it an exit call?
  5484 00000741 7503                    	jne	short Win386_Msg_devcall
  5485 00000743 E92C01                  	jmp	Win386_Leaving
  5486                                  Win386_Msg_devcall:
  5487 00000746 3C07                    	cmp	al,Win386_Devcall ; 7	; is it call from DOSMGR?
  5488 00000748 7503                    	jne	short Win386_Msg_init
  5489 0000074A E96001                  	jmp	Win386_Query
  5490                                  Win386_Msg_init:
  5491 0000074D 3C05                    	cmp	al,Win386_Init	; 5	; is it an init call?
  5492 0000074F 7403                    	je	short Win386_Starting
  5493 00000751 E9E200                  	jmp	win_nexti2f		; no, return
  5494                                  Win386_Starting:
  5495                                  	; 17/12/2022
  5496 00000754 F6C201                  	test	dl,1
  5497                                  	;test	dx,1			; is this really win386?
  5498 00000757 7403                    	jz	short Win386_vchk	; YES! go and handle it
  5499 00000759 E9DA00                  	jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5500                                  Win386_vchk:
  5501                                  	; M018 -- start of block changes
  5502                                  	; The VxD needs to be loaded only for Win 3.0. If version is greater 
  5503                                  	; than 030Ah, we skip the VxD presence check
  5504                                  
  5505                                  ;M067 -- Begin changes
  5506                                  ; If Win 3.0 is run, the VxD ptr has been initialized. If Win 3.1 is now
  5507                                  ;run, it tries to unnecesarily load the VxD even though it is not needed.
  5508                                  ;So, we null out the VxD ptr before the check.
  5509                                  
  5510                                  	;mov	word [Win386_Info+6],0
  5511 0000075C C706[E80F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],0
  5512                                  	;mov	word [Win386_Info+8],0
  5513 00000762 C706[EA0F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],0
  5514                                  
  5515                                  ;M067 -- End changes
  5516                                  
  5517                                  ;ifdef JAPAN
  5518                                  ;	cmp	di,0300h		; version >= 300 i.e 3.10 ;M037
  5519                                  ;else
  5520 00000768 81FF0A03                	cmp	di,030Ah		; version >= 30a i.e 3.10 ;M037
  5521                                  ;endif
  5522                                  	;ljae	noVxD31			; yes, VxD not needed 	 ;M037
  5523 0000076C 724E                    	jb	short Win386_vxd
  5524 0000076E E9DD00                  	jmp	noVxD31
  5525                                  
  5526                                  	; 15/12/2022
  5527                                  winold_swap:
  5528 00000771 1E                      	push	ds
  5529 00000772 06                      	push	es
  5530 00000773 56                      	push	si
  5531 00000774 57                      	push	di
  5532 00000775 51                      	push	cx
  5533                                  
  5534                                  	;getdseg <ds>			;ds = DOSDATA
  5535 00000776 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5536                                  
  5537 0000077B 3C01                    	cmp	al,1			;swap Windows out call
  5538 0000077D 751B                    	jne	short swapin		;no, check if Swap in call
  5539 0000077F E88801                  	call	getwinlast
  5540 00000782 1E                      	push	ds
  5541 00000783 07                      	pop	es
  5542 00000784 8EDE                    	mov	ds,si			;ds = memory arena of Windows
  5543 00000786 31F6                    	xor	si,si
  5544 00000788 BF[0600]                	mov	di,WinoldPatch1
  5545 0000078B B90800                  	mov	cx,8
  5546 0000078E FC                      	cld
  5547 0000078F 51                      	push	cx
  5548 00000790 F3A4                    	rep	movsb			;save first 8 bytes
  5549 00000792 59                      	pop	cx
  5550 00000793 BF[CD0D]                	mov	di,WinoldPatch2
  5551 00000796 F3A4                    	rep	movsb			;save next 8 bytes
  5552 00000798 EB1B                    	jmp	short winold_done
  5553                                  swapin:
  5554 0000079A 3C02                    	cmp	al,2			;swap Windows in call?
  5555 0000079C 7517                    	jne	short winold_done	;no, something else, pass it on
  5556 0000079E E86901                  	call	getwinlast
  5557 000007A1 8EC6                    	mov	es,si
  5558 000007A3 31FF                    	xor	di,di
  5559 000007A5 BE[0600]                	mov	si,WinoldPatch1
  5560 000007A8 B90800                  	mov	cx,8
  5561 000007AB FC                      	cld
  5562 000007AC 51                      	push	cx
  5563 000007AD F3A4                    	rep	movsb			;restore first 8 bytes
  5564 000007AF 59                      	pop	cx
  5565 000007B0 BE[CD0D]                	mov	si,WinoldPatch2
  5566 000007B3 F3A4                    	rep	movsb			;restore next 8 bytes
  5567                                  winold_done:
  5568 000007B5 59                      	pop	cx
  5569 000007B6 5F                      	pop	di
  5570 000007B7 5E                      	pop	si
  5571 000007B8 07                      	pop	es
  5572 000007B9 1F                      	pop	ds
  5573 000007BA EB7B                    	jmp	short next_i2f		;chain on
  5574                                  	; 15/12/2022
  5575                                  	;jmp	next_i2f	
  5576                                  
  5577                                  Win386_vxd:
  5578 000007BC 50                      	push	ax
  5579 000007BD 53                      	push	bx
  5580 000007BE 51                      	push	cx
  5581 000007BF 52                      	push	dx
  5582 000007C0 56                      	push	si
  5583 000007C1 57                      	push	di			; save regs !!dont change order!!
  5584                                  
  5585 000007C2 8B1E[8C00]              	mov	bx,[UMB_HEAD]		; M062 - Start
  5586 000007C6 83FBFF                  	cmp	bx,0FFFFh    		; Q: have umbs been initialized
  5587 000007C9 741F                    	je	short Vxd31		; N: continue
  5588                                  					; Y: save arena associated with 
  5589                                  					;    umb_head
  5590                                  
  5591 000007CB C606[DA0D]01            	mov	byte [UmbSaveFlag],1	; indicate that we're saving 
  5592                                  					; umb_arena
  5593 000007D0 1E                      	push	ds
  5594 000007D1 06                      	push	es
  5595                                  
  5596                                  	;mov	ax,ds
  5597                                  	;mov	es,ax			; es - > dosdata
  5598                                  	; 05/01/2024
  5599 000007D2 1E                      	push	ds
  5600 000007D3 07                      	pop	es
  5601                                  
  5602 000007D4 8EDB                    	mov	ds,bx
  5603 000007D6 31F6                    	xor	si,si			; ds:si -> umb_head
  5604                                  
  5605 000007D8 FC                      	cld
  5606                                  
  5607 000007D9 BF[F511]                	mov	di,UmbSave1
  5608 000007DC B90B00                  	mov	cx,11
  5609 000007DF F3A4                    	rep	movsb
  5610                                  
  5611 000007E1 BF[D50D]                	mov	di,UmbSave2
  5612                                  	;mov	cx,5
  5613                                  	; 18/12/2022
  5614 000007E4 B105                    	mov	cl,5
  5615 000007E6 F3A4                    	rep	movsb	
  5616                                  
  5617 000007E8 07                      	pop	es
  5618 000007E9 1F                      	pop	ds			; M062 - End
  5619                                  
  5620                                  Vxd31:
  5621                                  	;test	byte [DOS_FLAG],2
  5622 000007EA F606[8600]02            	test	byte [DOS_FLAG],SUPPRESS_WINA20	; M066
  5623 000007EF 7408                    	jz	short Dont_Supress		; M066
  5624 000007F1 5F                      	pop	di				; M066
  5625 000007F2 5E                      	pop	si				; M066
  5626 000007F3 5A                      	pop	dx				; M066
  5627 000007F4 59                      	pop	cx				; M066
  5628 000007F5 5B                      	pop	bx				; M066
  5629 000007F6 58                      	pop	ax				; M066
  5630 000007F7 EB55                    	jmp	short noVxD31			; M066
  5631                                  
  5632                                  	; We check here if the VxD is available in the root of the boot drive. 
  5633                                  	; We do an extended open to suppress any error messages
  5634                                  	
  5635                                  Dont_Supress:
  5636 000007F9 A0[6900]                	mov	al,[BOOTDRIVE]
  5637 000007FC 0440                    	add	al,'A' - 1		; get drive letter
  5638 000007FE A2[3110]                	mov	[VxDpath],al		; path is root of bootdrive
  5639                                  	;mov	ah,ExtOpen  ;6Ch	; extended open
  5640                                  	;mov	al,0			; no extended attributes
  5641                                  	; 18/12/2022
  5642 00000801 B8006C                  	mov	ax,ExtOpen<<8 ; 6C00h
  5643 00000804 BB8020                  	mov	bx,2080h		; read access, compatibility mode
  5644                                  					; no inherit, suppress crit err
  5645 00000807 B90700                  	mov	cx,7			; hidden,system,read-only attr
  5646 0000080A BA0100                  	mov	dx,1			; fail if file does not exist
  5647 0000080D BE[3110]                	mov	si,VxDpath	
  5648                                  					; path of VxD file
  5649 00000810 BFFFFF                  	mov	di,0FFFFh		; no extended attributes
  5650                                  
  5651 00000813 CD21                    	int	21h			; do extended open
  5652                                  
  5653 00000815 5F                      	pop	di
  5654 00000816 5E                      	pop	si
  5655 00000817 5A                      	pop	dx
  5656 00000818 59                      	pop	cx
  5657                                  
  5658 00000819 7321                    	jnc	short VxDthere		; we found the VxD, go ahead
  5659                                  
  5660                                  	; We could not find the VxD. Cannot let windows load. Return cx != 0 
  5661                                  	; to indicate error to Windows after displaying message to user that 
  5662                                  	; VxD needs to be present to run Windows in enhanced mode.
  5663                                  
  5664 0000081B 52                      	push	dx
  5665 0000081C 1E                      	push	ds
  5666 0000081D 56                      	push	si
  5667 0000081E BE[B209]                	mov	si,NoVxDErrMsg
  5668 00000821 0E                      	push	cs
  5669 00000822 1F                      	pop	ds
  5670 00000823 B96300                  	mov	cx,VxDMesLen ; 99	;
  5671 00000826 B402                    	mov	ah,2			; write char to console
  5672 00000828 FC                      	cld
  5673                                  vxdlp:
  5674 00000829 AC                      	lodsb
  5675 0000082A 86D0                    	xchg	dl,al			; get char in dl
  5676 0000082C CD21                    	int	21h
  5677 0000082E E2F9                    	loop	vxdlp
  5678                                  
  5679 00000830 5E                      	pop	si
  5680 00000831 1F                      	pop	ds
  5681 00000832 5A                      	pop	dx
  5682 00000833 5B                      	pop	bx
  5683 00000834 58                      	pop	ax			;all registers restored
  5684 00000835 41                      	inc	cx			;cx != 0 to indicate error
  5685                                  	; 15/12/22022
  5686                                  	;jmp	win_nexti2f		;chain on
  5687                                  	;jmp	short win_nexti2f
  5688                                  
  5689                                  	; 15/12/2022
  5690                                  win_nexti2f:
  5691 00000836 1F                      	pop	ds
  5692                                  	;jmp	short next_i2f		; go to BIOS i2f handler
  5693                                  	; 15/12/2022
  5694                                  next_i2f:
  5695                                  	;;;jmp	bios_i2f
  5696                                  	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5697                                  	;jmp	KERNEL_SEGMENT:bios_i2f
  5698                                  	; 04/11/2022
  5699 00000837 EA05007000              	jmp	DOSBIODATASEG:bios_i2f
  5700                                  
  5701                                  VxDthere:
  5702 0000083C 89C3                    	mov	bx,ax
  5703 0000083E B43E                    	mov	ah,CLOSE ; 3Eh
  5704 00000840 CD21                    	int	21h			;close the file
  5705                                  
  5706                                  	; Update the VxD ptr in the instance data structure with path to VxD
  5707                                  
  5708                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  5709                                  	;mov	bx,Win386_Info
  5710                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5711                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5712                                  	; 15/12/2022
  5713 00000842 C706[E80F][3110]        	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5714 00000848 8C1E[EA0F]              	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5715                                  
  5716 0000084C 5B                      	pop	bx
  5717 0000084D 58                      	pop	ax
  5718                                  noVxD31:
  5719                                  	; M018; End of block changes
  5720                                  
  5721 0000084E 800E[3010]01            	or	byte [IsWin386],1 	; Indicate WIN386 present
  5722 00000853 800E[0C0D]01            	or	byte [redir_patch],1	; Enable critical sections; M002
  5723                                  
  5724                                  	; M002;
  5725                                  	; Save the previous es:bx (instance data ptr) into our instance table
  5726                                  
  5727 00000858 52                      	push	dx			; M002
  5728 00000859 89DA                    	mov	dx,bx			; M002
  5729                                  					; point ES:BX to Win386_Info ; M002
  5730 0000085B BB[E20F]                	mov	bx,Win386_Info 
  5731 0000085E 895702                  	mov	[bx+2],dx		; M002
  5732 00000861 8C4704                  	mov	[bx+4],es		; M002
  5733 00000864 5A                      	pop	dx			; M002
  5734 00000865 1E                      	push	ds			; M002
  5735 00000866 07                      	pop	es			; M002
  5736                                  	;jmp	win_nexti2f		; M002
  5737                                  	; 15/12/2022
  5738 00000867 EBCD                    	jmp	short win_nexti2f
  5739                                  
  5740                                  	; 15/12/2022
  5741                                  	; Code to return Win386 2.xx instance table
  5742                                  OldWin386Init:
  5743 00000869 58                      	pop	ax			; discard ds pushed on stack
  5744 0000086A BE[C811]                	mov	si,OldInstanceJunk 
  5745                                  					; ds:si = instance table
  5746 0000086D B84852                  	mov	ax,5248h ; 'HR'		; indicate instance data present
  5747                                  	;jmp	next_i2f
  5748                                  	; 15/12/2022
  5749 00000870 EBC5                    	jmp	short next_i2f
  5750                                  
  5751                                  Win386_Leaving:
  5752                                  	; 15/12/2022
  5753 00000872 F6C201                  	test 	dl,1
  5754                                  	;test	dx,1			; is this really win386?
  5755                                  	;jz	short Win386_Leaving_c
  5756                                  	;jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5757                                  	; 15/12/2022
  5758 00000875 75BF                    	jnz	short win_nexti2f	
  5759                                  
  5760                                  Win386_Leaving_c:
  5761                                  					; M062 - Start
  5762 00000877 803E[DA0D]01            	cmp	byte [UmbSaveFlag],1	; Q: was umb_arena saved at win start
  5763                                  					;    up.
  5764 0000087C 7523                    	jne	short noumb		; N: not saved 
  5765 0000087E C606[DA0D]00            	mov	byte [UmbSaveFlag],0	; Y: clear UmbSaveFlag and restore 
  5766                                  					;    previously saved umb_head
  5767                                  	; 05/01/2024
  5768                                  	;push	ax ; (not necessary)
  5769 00000883 06                      	push	es
  5770 00000884 51                      	push	cx
  5771 00000885 56                      	push	si
  5772 00000886 57                      	push	di
  5773                                  
  5774                                  	;mov	ax,[UMB_HEAD]
  5775                                  	;mov	es,ax
  5776                                  	; 05/01/2024
  5777 00000887 8E06[8C00]              	mov	es,[UMB_HEAD]
  5778 0000088B 31FF                    	xor	di,di			; es:di -> umb_head
  5779                                  
  5780 0000088D FC                      	cld
  5781                                  
  5782 0000088E BE[F511]                	mov	si,UmbSave1
  5783 00000891 B90B00                  	mov	cx,11
  5784 00000894 F3A4                    	rep	movsb
  5785 00000896 BE[D50D]                	mov	si,UmbSave2
  5786                                  	;mov	cx,5
  5787                                  	; 18/12/2022
  5788 00000899 B105                    	mov	cl,5
  5789 0000089B F3A4                    	rep	movsb
  5790                                  
  5791 0000089D 5F                      	pop	di
  5792 0000089E 5E                      	pop	si
  5793 0000089F 59                      	pop	cx
  5794 000008A0 07                      	pop	es
  5795                                  	; 05/01/2024
  5796                                  	;pop	ax
  5797                                  noumb:					; M062 - End
  5798 000008A1 8026[3010]00            	and	byte [IsWin386],0	; Win386 is gone
  5799 000008A6 8026[0C0D]00            	and	byte [redir_patch],0	; Disable critical sections ; M002
  5800 000008AB EB89                    	jmp	short win_nexti2f
  5801                                  
  5802                                  ;	; 15/12/2022
  5803                                  ;	; Code to return Win386 2.xx instance table
  5804                                  ;OldWin386Init:
  5805                                  ;	pop	ax			; discard ds pushed on stack
  5806                                  ;	mov	si,OldInstanceJunk 
  5807                                  ;					; ds:si = instance table
  5808                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5809                                  ;	;jmp	next_i2f
  5810                                  ;	; 15/12/2022
  5811                                  ;	jmp	short _next_i2f
  5812                                  
  5813                                  Win386_Query:
  5814 000008AD 83FB15                  	cmp	bx,Win386_DOSMGR ; 15h	; is this from DOSMGR?
  5815 000008B0 7584                    	jne	short win_nexti2f     	; no, ignore it & chain to next
  5816 000008B2 09C9                    	or	cx,cx			; is it an instance query?
  5817 000008B4 7508                    	jne	short dosmgr_func	; no, some DOSMGR query
  5818 000008B6 41                      	inc	cx			; indicate that data is instanced
  5819                                  ;
  5820                                  ; M001; We were previously returning a null ptr in es:bx. This will not work.
  5821                                  ; M001; WIN386 needs a ptr to a table in es:bx with the following offsets:
  5822                                  ; M001;  
  5823                                  ; M001; OFFSETS STRUC
  5824                                  ; M001; 	Major_version	db	?
  5825                                  ; M001; 	Minor_version	db	?
  5826                                  ; M001; 	SaveDS		dw	?
  5827                                  ; M001; 	SaveBX		dw	?
  5828                                  ; M001; 	Indos		dw	?
  5829                                  ; M001; 	User_id		dw	?
  5830                                  ; M001; 	CritPatch	dw	?
  5831                                  ; M001; OFFSETS	ENDS
  5832                                  ; M001; 
  5833                                  ; M001; User_Id is the only variable really important for proper functioning  
  5834                                  ; M001; of Win386. The other variables are used at init time to patch stuff
  5835                                  ; M001; out. In DOS 5.0, we do the patching ourselves. But we still need to 
  5836                                  ; M001; pass this table because Win386 depends on this table to get the 
  5837                                  ; M001; User_Id offset.
  5838                                  ; M001; 
  5839 000008B7 BB[2210]                	mov	bx,Win386_DOSVars	; M001 
  5840 000008BA 1E                      	push	ds			; M001
  5841 000008BB 07                      	pop	es			; es:bx points at offset table ; M001
  5842 000008BC EB40                    	jmp	short PopIret		; M001
  5843                                  
  5844                                  ; 15/12/2022
  5845                                  ;	; Code to return Win386 2.xx instance table
  5846                                  ;OldWin386Init:
  5847                                  ;	pop	ax			; discard ds pushed on stack
  5848                                  ;	mov	si,OldInstanceJunk 
  5849                                  ;					; ds:si = instance table
  5850                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5851                                  ;	;jmp	next_i2f
  5852                                  ;	; 15/12/2022
  5853                                  ;	jmp	short _next_i2f
  5854                                  
  5855                                  dosmgr_func:
  5856 000008BE 49                      	dec	cx
  5857 000008BF 7435                    	jz	short win386_patch	; call to patch DOS
  5858 000008C1 49                      	dec	cx
  5859 000008C2 743A                    	jz	short PopIret		; remove DOS patches, ignore
  5860 000008C4 49                      	dec	cx
  5861 000008C5 7439                    	jz	short win386_size	; get size of DOS data structures
  5862 000008C7 49                      	dec	cx
  5863 000008C8 7428                    	jz	short win386_inst	; instance more data
  5864                                  	;dec	cx
  5865                                  	;jnz	short PopIret		; no functions above this
  5866                                  	; 05/01/2024 (PCDOS 7.1 IBMDOS.COM DOSCODE:4771h)
  5867 000008CA E232                    	loop	PopIret
  5868                                  
  5869                                  	; Get DOS device driver size -- es:di points at device driver header
  5870                                  	; In DOS 4.x, the para before the device header contains an arena 
  5871                                  	; header for the driver.
  5872                                  
  5873 000008CC 8CC0                    	mov	ax,es			; ax = device header segment
  5874                                  
  5875                                  	; We check to see if we have a memory arena for this device driver. 
  5876                                  	; The way to do this would be to look at the previous para to see if
  5877                                  	; it has a 'D' marking it as an arena and also see if the owner-field 
  5878                                  	; in the arena is the same as the device header segment. These two 
  5879                                  	; checks together should take care of all cases
  5880                                  
  5881 000008CE 48                      	dec	ax			; get arena header
  5882 000008CF 06                      	push	es
  5883 000008D0 8EC0                    	mov	es,ax			; arena header for device driver
  5884                                  
  5885 000008D2 26803D44                	cmp	byte [es:di],'D'	; is it a device arena?
  5886 000008D6 7517                    	jnz	short cantsize		; no, cant size this driver
  5887 000008D8 40                      	inc	ax			; get back device header segment
  5888 000008D9 26394501                	cmp	[es:di+1],ax		; owner field pointing at driver?
  5889 000008DD 7510                    	jnz	short cantsize		; no, not a proper arena
  5890                                  
  5891 000008DF 268B4503                	mov	ax,[es:di+3]		; get arena size in paras
  5892 000008E3 07                      	pop	es
  5893                                  
  5894                                  	; We have to multiply by 16 to get the number of bytes in (bx:cx)
  5895                                  	; Speed is not critical and so we choose the shortest method 
  5896                                  	; -- use "mul"
  5897                                  
  5898 000008E4 BB1000                  	mov	bx,16
  5899 000008E7 F7E3                    	mul	bx
  5900 000008E9 89C1                    	mov	cx,ax
  5901 000008EB 89D3                    	mov	bx,dx
  5902 000008ED EB09                    	jmp	short win386_done	; return with device driver size
  5903                                  cantsize:
  5904 000008EF 07                      	pop	es
  5905 000008F0 31C0                    	xor	ax,ax
  5906                                  win386_inst:	; 05/01/2024
  5907 000008F2 31D2                    	xor	dx,dx			; ask DOSMGR to use its methods
  5908 000008F4 EB08                    	jmp	short PopIret		; return
  5909                                  
  5910                                  win386_patch:
  5911                                  	; dx contains bits marking the patches to be applied. We return 
  5912                                  	; the field with all bits set to indicate that all patches have been
  5913                                  	; done
  5914                                  
  5915 000008F6 89D3                    	mov	bx,dx			; move patch bitfield to bx
  5916                                   	;jmp	short win386_done	; done, return
  5917                                  	; 15/12/2022
  5918                                  	; 15/12/2022
  5919                                  win386_done:
  5920 000008F8 B87CB9                  	mov	ax,WIN_OP_DONE		; 0B97Ch
  5921 000008FB BAABA2                  	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5922                                  PopIret:
  5923 000008FE 1F                      	pop	ds
  5924 000008FF CF                      	iret	
  5925                                  
  5926                                  win386_size:
  5927                                  	; Return the size of DOS data structures -- currently only CDS size
  5928                                  
  5929                                  	; 17/12/2022
  5930 00000900 F6C201                  	test	dl,1
  5931                                  	;test	dx,1			; check for CDS size bit
  5932 00000903 74F9                    	jz	short PopIret		; no, unknown structure -- return
  5933                                  
  5934 00000905 B95800                  	mov	cx,curdirLen	; 88 	; cx = CDS size
  5935 00000908 EBEE                    	jmp	short win386_done	; return with the size
  5936                                  
  5937                                  ; 05/01/2024
  5938                                  %if 0
  5939                                  win386_inst:
  5940                                  	; WIN386 check to see if DOS has identified the CDS,SFT and device
  5941                                  	; chain as instance data. Currently, we let the WIN386 DOSMGR handle
  5942                                  	; this by returning a status of not previously instanced. The basic
  5943                                  	; structure of these things have not changed and so the current
  5944                                  	; DOSMGR code should be able to work it out
  5945                                  
  5946                                  	xor	dx,dx			; make sure dx has a not done value
  5947                                  	jmp	short PopIret		; skip done indication
  5948                                  %endif
  5949                                  
  5950                                  	; 15/12/2022
  5951                                  ;win386_done:
  5952                                  ;	mov	ax,WIN_OP_DONE		; 0B97Ch
  5953                                  ;	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5954                                  ;PopIret:
  5955                                  ;	pop	ds
  5956                                  ;	iret				; return back up the chain
  5957                                  
  5958                                  	; 15/12/2022
  5959                                  ;win_nexti2f:
  5960                                  	;pop	ds
  5961                                  	;jmp	next_i2f		; go to BIOS i2f handler
  5962                                  
  5963                                  ;End WIN386 support
  5964                                  
  5965                                  ; 15/05/2019
  5966                                  
  5967                                  ;M044; Start of changes
  5968                                  ; Winoldap has a bug in that its calculations for the Windows memory image
  5969                                  ; to save is off by 1 para. This para can happen to be a Windows arena if the
  5970                                  ; DOS top of memory happens to be at an odd boundary (as is the case when
  5971                                  ; UMBs are present). This is because Windows builds its arenas only at even
  5972                                  ; para boundaries. This arena now gets trashed when Windows is swapped back
  5973                                  ; in leading to a crash. Winoldap issues callouts when it swaps Windows out
  5974                                  ; and back in. We sit on these callouts. On the Windows swapout, we save the
  5975                                  ; last para of the Windows memory block and then restore this para on the
  5976                                  ; Windows swapin callout. 
  5977                                  
  5978                                  getwinlast:
  5979                                  	; 07/12/2022
  5980 0000090A 8B36[3003]              	mov	si,[CurrentPDB]
  5981 0000090E 4E                      	dec	si
  5982 0000090F 8EC6                    	mov	es,si
  5983 00000911 2603360300              	add	si,[es:3]
  5984 00000916 C3                      	retn
  5985                                  
  5986                                  ; 15/12/2022
  5987                                  %if 0
  5988                                  winold_swap:
  5989                                  	push	ds
  5990                                  	push	es
  5991                                  	push	si
  5992                                  	push	di
  5993                                  	push	cx
  5994                                  
  5995                                  	;getdseg <ds>			;ds = DOSDATA
  5996                                  	mov	ds,[cs:DosDSeg]
  5997                                  
  5998                                  	cmp	al,1			;swap Windows out call
  5999                                  	jne	short swapin		;no, check if Swap in call
  6000                                  	call	getwinlast
  6001                                  	push	ds
  6002                                  	pop	es
  6003                                  	mov	ds,si			;ds = memory arena of Windows
  6004                                  	xor	si,si
  6005                                  	mov	di,WinoldPatch1
  6006                                  	mov	cx,8
  6007                                  	cld
  6008                                  	push	cx
  6009                                  	rep	movsb			;save first 8 bytes
  6010                                  	pop	cx
  6011                                  	mov	di,WinoldPatch2
  6012                                  	rep	movsb			;save next 8 bytes
  6013                                  	jmp	short winold_done
  6014                                  swapin:
  6015                                  	cmp	al,2			;swap Windows in call?
  6016                                  	jne	short winold_done	;no, something else, pass it on
  6017                                  	call	getwinlast
  6018                                  	mov	es,si
  6019                                  	xor	di,di
  6020                                  	mov	si,WinoldPatch1
  6021                                  	mov	cx,8
  6022                                  	cld
  6023                                  	push	cx
  6024                                  	rep	movsb			;restore first 8 bytes
  6025                                  	pop	cx
  6026                                  	mov	si,WinoldPatch2
  6027                                  	rep	movsb			;restore next 8 bytes
  6028                                  winold_done:
  6029                                  	pop	cx
  6030                                  	pop	di
  6031                                  	pop	si
  6032                                  	pop	es
  6033                                  	pop	ds
  6034                                  	jmp	next_i2f		;chain on
  6035                                  
  6036                                  %endif
  6037                                  
  6038                                  ;M044; End of changes
  6039                                  
  6040                                  ; 15/05/2019
  6041                                  
  6042                                  DispatchDOS:
  6043 00000917 2EFF36[C401]            	PUSH	word [CS:FOO]		; push return address
  6044 0000091C 2EFF36[C601]            	PUSH	word [CS:DTab]		; push table address
  6045 00000921 50                      	PUSH	AX			; push index
  6046 00000922 55                      	PUSH	BP
  6047 00000923 89E5                    	MOV	BP,SP
  6048                                  		; stack looks like:
  6049                                  		;   0	BP
  6050                                  		;   2	DISPATCH
  6051                                  		;   4	TABLE
  6052                                  		;   6	RETURN
  6053                                  		;   8	LONG-RETURN
  6054                                  		;   C	FLAGS
  6055                                  		;   E	AX
  6056                                  	
  6057 00000925 8B460E                  	MOV	AX,[BP+0Eh]		; get AX value
  6058 00000928 5D                      	POP	BP
  6059 00000929 E8DA08                  	call	TableDispatch
  6060 0000092C E9DEFD                  	JMP	BadFunc 		; return indicates invalid function
  6061                                  
  6062                                  INT2F_etcetera:
  6063                                  	;entry	DosGetGroup
  6064                                  DosGetGroup:
  6065                                  	; MSDOS 3.3
  6066                                  	;push	cs
  6067                                  	;pop	ds
  6068                                  	;retn
  6069                                  
  6070                                  	; MSDOS 6.0
  6071                                  ;SR; Cannot use CS now
  6072                                  ;
  6073                                  ;	PUSH	CS
  6074                                  ;	POP	DS
  6075                                  
  6076                                  	; 04/11/2022
  6077                                  	; (MSDOS 5.0 MSDOS.SYS - DOSCODE:46FBh)
  6078                                  
  6079                                  	;getdseg <ds>
  6080 0000092F 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6081 00000934 C3                      	retn
  6082                                  
  6083                                  	;entry	DOSInstall
  6084                                  DOSInstall:
  6085 00000935 B0FF                    	MOV	AL,0FFh
  6086 00000937 C3                      	retn
  6087                                  
  6088                                  ;ENDIF ; (*)
  6089                                  
  6090                                  
  6091                                  ; 15/05/2019 - Retro DOS v4.0
  6092                                  
  6093                                  ;------------------------------------------------------------------------
  6094                                  ;
  6095                                  ; Procedure Name : RW32_CONVERT
  6096                                  ;
  6097                                  ;Input: same as ABSDRD and ABSDWRT
  6098                                  ;	 ES:BP -> DPB
  6099                                  ;Functions: convert 32bit absolute RW input parms to 16bit input parms
  6100                                  ;Output: carry set when CX=-1 and drive is less then 32mb
  6101                                  ;	 carry clear, parms ok
  6102                                  ;
  6103                                  ;------------------------------------------------------------------------
  6104                                  
  6105                                  	; 06/01/2024
  6106                                  RW32_CONVERT:
  6107                                  	;inc	cx ; *	; 01 -> 0
  6108 00000938 83F9FF                  	CMP	CX,-1			   ;>32mb  new format ?	;AN000;
  6109 0000093B 7429                    	JZ	short new32format	   ;>32mb  yes		;AN000;
  6110                                  	;dec	cx ; *
  6111 0000093D 50                      	PUSH	AX			   ;>32mb  save ax	;AN000;
  6112 0000093E 52                      	PUSH	DX			   ;>32mb  save dx	;AN000;
  6113                                  	;mov	ax,[es:bp+0Dh]
  6114 0000093F 268B460D                	MOV	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  get max cluster # ;AN000;
  6115                                  	;mov	dl,[es:bp+4]
  6116 00000943 268A5604                	MOV	DL,[ES:BP+DPB.CLUSTER_MASK] ;>32mb		;AN000;
  6117 00000947 80FAFE                  	CMP	DL,0FEh ; 254		;>32mb  removable ?	;AN000;
  6118 0000094A 7407                    	JZ	short letold		;>32mb  yes		;AN000;
  6119                                  	;INC	DL			;>32mb			;AN000;
  6120                                  	; 17/12/2022
  6121 0000094C 42                      	inc	dx
  6122 0000094D 30F6                    	XOR	DH,DH			;>32mb  dx = sector/cluster ;AN000;
  6123 0000094F F7E2                    	MUL	DX			;>32mb  dx:ax= max sector # ;AN000;
  6124 00000951 09D2                    	OR	DX,DX	; (clears CF)	;>32mb  > 32mb ?	;AN000;
  6125                                  letold:
  6126 00000953 5A                      	POP	DX			;>32mb  restore dx	;AN000;
  6127 00000954 58                      	POP	AX			;>32mb  restore ax 	;AN000;
  6128 00000955 7425                    	JZ	short old_style	; cf=0	;>32mb  no 		;AN000;
  6129                                  
  6130 00000957 1E                      	push	ds
  6131                                  	;getdseg <ds>
  6132 00000958 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6133 0000095D C706[B80D]0702          	mov	word [AbsDskErr],207h	;>32mb  bad address mark
  6134 00000963 1F                      	pop	ds
  6135                                  
  6136 00000964 F9                      	STC				;>32mb			;AN000;
  6137 00000965 C3                      	retn				;>32mb			;AN000;
  6138                                  
  6139                                  new32format:
  6140                                  	;mov	dx,[bx+2]
  6141 00000966 8B5702                  	MOV	DX,[BX+ABS_32RW.SECTOR_RBA+2] ;>32mb		;AN000;
  6142                                  
  6143 00000969 1E                      	push	ds			; set up ds to DOSDATA
  6144                                  	;getdseg <ds>
  6145 0000096A 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6146 0000096F 8916[0706]              	MOV	[HIGH_SECTOR],DX	;>32mb			;AN000;
  6147 00000973 1F                      	pop	ds
  6148                                  
  6149 00000974 8B17                    	mov	dx,[bx]
  6150                                  	;MOV	DX,[BX+ABS_32RW.SECTOR_RBA]  ;>32mb		;AN000;
  6151                                  	;mov	cx,[bx+4]
  6152 00000976 8B4F04                  	MOV	CX,[BX+ABS_32RW.ABS_RW_COUNT] ;>32mb		;AN000;
  6153                                  	;lds	bx,[bx+6]
  6154 00000979 C55F06                  	LDS	BX,[BX+ABS_32RW.BUFFER_ADDR] ;>32mb		;AN000;
  6155                                  old_style:				;>32mb			;AN000;
  6156                                  	; 06/01/2024
  6157                                  	; cf=0
  6158                                  	;CLC				;>32mb			;AN000;
  6159 0000097C C3                      	retn				;>32mb			;AN000;
  6160                                  
  6161                                  ;------------------------------------------------------------------------
  6162                                  ;
  6163                                  ; Procedure Name : Fastxxx_Purge
  6164                                  ;
  6165                                  ; Input: None
  6166                                  ; Functions: Purge Fastopen/ Cache Buffers
  6167                                  ; Output: None
  6168                                  ;
  6169                                  ;------------------------------------------------------------------------
  6170                                  
  6171                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6172                                  
  6173                                  Fastxxx_Purge:
  6174 0000097D 50                      	PUSH	AX			; save regs.	;AN000;
  6175 0000097E 56                      	PUSH	SI						;AN000;
  6176 0000097F 52                      	PUSH	DX						;AN000;
  6177                                  topen:
  6178 00000980 1E                      	push	ds			; set up ds to DOSDATA
  6179                                  	;getdseg <ds>
  6180 00000981 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6181                                  
  6182 00000986 F606[3A0D]80            	TEST	byte [FastOpenFlg],Fast_yes ; 80h 
  6183                                  					; fastopen installed ?	;AN000;
  6184 0000098B 1F                      	pop	ds
  6185 0000098C 740B                    	JZ	short nofast		; no			;AN000;
  6186 0000098E B401                    	MOV	AH,FastOpen_ID	; 1				;AN000;
  6187                                  dofast:
  6188 00000990 B005                    	MOV	AL,FONC_purge  ;5	; purge			;AN000;
  6189                                  	;;mov	dl,[es:bp+0]
  6190                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  6191                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; set up drive number	;AN000;
  6192                                  	; 15/12/2022
  6193 00000992 268A5600                	mov	dl,[es:bp]
  6194                                  	;invoke	Fast_Dispatch		; call fastopen/seek	;AN000;
  6195 00000996 E8F31C                  	call	Fast_Dispatch
  6196                                  nofast:
  6197 00000999 5A                      	POP	DX						;AN000;
  6198 0000099A 5E                      	POP	SI			; restore regs		;AN000;
  6199 0000099B 58                      	POP	AX			 			;AN000;
  6200 0000099C C3                      	retn				; exit
  6201                                  
  6202                                  ;============================================================================
  6203                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6204                                  ;============================================================================
  6205                                  ; 29/04/2019 - Retro DOS v4.0
  6206                                  
  6207                                  ;include dossym.inc
  6208                                  ;include dosmac.inc
  6209                                  ;include doscntry.inc
  6210                                  
  6211                                  ; DOSCODE Segment
  6212                                  
  6213                                  ; 17/07/2018 - Retro DOS v3.0  [ DOSMES.INC (MSDOS 3.3, 1987) ]
  6214                                  ; ---------------------------------------------------------------------------
  6215                                  ;include divmes.inc
  6216                                  
  6217                                  ; DOSCODE:4778h (MSDOS 6.21, MSDOS.SYS)
  6218                                  ; -------------------------------------
  6219                                  ; DOSCODE:476Bh (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6220                                  
  6221                                  ; THIS IS THE ONLY DOS "MESSAGE". IT DOES NOT NEED A TERMINATOR.
  6222                                  	;PUBLIC	DIVMES
  6223                                  
  6224 0000099D 0D0A44697669646520-     DIVMES:	DB	13,10,"Divide overflow",13,10
  6224 000009A6 6F766572666C6F770D-
  6224 000009AF 0A                 
  6225                                  
  6226                                  	;PUBLIC	DivMesLen
  6227                                  DivMesLen:
  6228 000009B0 1300                    	DW	$-DIVMES  ; 19	; Length of the above message in bytes
  6229                                  
  6230                                  ; DOSCODE:478Dh (MSDOS 6.21, MSDOS.SYS)
  6231                                  ; -------------------------------------
  6232                                  ; DOSCODE:4780h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6233                                  
  6234                                  ; (MSDOS 6.0)
  6235                                  ; VxD not found error message
  6236                                  
  6237                                  NoVxDErrMsg:
  6238 000009B2 596F75206D75737420-     	db  'You must have the file WINA20.386 in the root of your boot drive'
  6238 000009BB 686176652074686520-
  6238 000009C4 66696C652057494E41-
  6238 000009CD 32302E33383620696E-
  6238 000009D6 2074686520726F6F74-
  6238 000009DF 206F6620796F757220-
  6238 000009E8 626F6F742064726976-
  6238 000009F1 65                 
  6239 000009F2 0D0A746F2072756E20-     	db  0Dh,0Ah,'to run Windows in Enhanced Mode',0Dh,0Ah
  6239 000009FB 57696E646F77732069-
  6239 00000A04 6E20456E68616E6365-
  6239 00000A0D 64204D6F64650D0A   
  6240                                  
  6241                                  VxDMesLen equ $ - NoVxDErrMsg  ; 99
  6242                                  
  6243                                  ; 13/05/2019 - Retro DOS v4.0
  6244                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6245                                  
  6246                                  ;include yesno.asm  (MNSDOS 6.0)
  6247                                  ; -------------------------------------
  6248                                  ; DOSCODE:47F0h (MSDOS 6.21, MSDOS.SYS)
  6249                                  ; DOSCODE:47E3h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6250                                  
  6251                                  ; This is for country Yes and No
  6252                                  
  6253 00000A15 59                      NLS_YES:	db 'Y'
  6254 00000A16 4E                      NLS_NO:		db 'N'
  6255 00000A17 79                      NLS_yes2:	db 'y'
  6256 00000A18 6E                      NLS_no2:	db 'n'
  6257                                  
  6258                                  ; ---------------------------------------------------------------------------
  6259                                  
  6260                                  ; DOSCODE:47F4h (MSDOS 6.21, MSDOS.SYS)
  6261                                  ; DOSCODE:47E7h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6262                                  
  6263                                  ;SUBTTL EDIT FUNCTION ASSIGNMENTS AND HEADERS
  6264                                  
  6265                                  ; The following two tables implement the current buffered input editing
  6266                                  ; routines. The tables are pairwise associated in reverse order for ease
  6267                                  ; in indexing. That is; The first entry in ESCTAB corresponds to the last
  6268                                  ; entry in ESCFUNC, and the last entry in ESCTAB to the first entry in ESCFUNC.
  6269                                  
  6270                                  	;PUBLIC	CANCHAR
  6271                                  CANCHAR:
  6272 00000A19 1B                      	DB	CANCEL	; 1Bh	;Cancel line character
  6273                                  	
  6274                                  	;PUBLIC	ESCCHAR
  6275                                  ESCCHAR:
  6276 00000A1A 00                      	DB	ESCCH	; 0	;Lead-in character for escape sequences
  6277                                  	
  6278                                  	;IF	NOT Rainbow
  6279                                  
  6280                                  ESCTAB:	; LABEL BYTE
  6281                                  
  6282                                  	;IF	IBM
  6283 00000A1B 40                      	DB	64		; Ctrl-Z - F6
  6284 00000A1C 4D                      	DB	77		; Copy one char - -->
  6285 00000A1D 3B                      	DB	59		; Copy one char - F1
  6286 00000A1E 53                      	DB	83		; Skip one char - DEL
  6287 00000A1F 3C                      	DB	60		; Copy to char - F2
  6288 00000A20 3E                      	DB	62		; Skip to char - F4
  6289 00000A21 3D                      	DB	61		; Copy line - F3
  6290 00000A22 3D                      	DB	61		; Kill line (no change to template ) - Not used
  6291 00000A23 3F                      	DB	63		; Reedit line (new template) - F5
  6292 00000A24 4B                      	DB	75		; Backspace - <--
  6293 00000A25 52                      	DB	82		; Enter insert mode - INS (toggle)
  6294 00000A26 52                      	DB	82		; Exit insert mode - INS (toggle)
  6295 00000A27 41                      	DB	65		; Escape character - F7
  6296 00000A28 41                      	DB	65		; End of table
  6297                                  	;ENDIF
  6298                                  
  6299                                  ESCEND: ; LABEL BYTE
  6300                                  
  6301                                  ESCTABLEN EQU ESCEND-ESCTAB
  6302                                  
  6303                                  ESCFUNC: ; LABEL WORD
  6304                                  	
  6305 00000A29 [FB13]                  	short_addr  GETCH	; Ignore the escape sequence
  6306 00000A2B [7814]                  	short_addr  TWOESC
  6307 00000A2D [6D15]                  	short_addr  EXITINS
  6308 00000A2F [6D15]                  	short_addr  ENTERINS
  6309 00000A31 [7314]                  	short_addr  BACKSP
  6310 00000A33 [5915]                  	short_addr  REEDIT
  6311 00000A35 [6014]                  	short_addr  KILNEW
  6312 00000A37 [EF14]                  	short_addr  COPYLIN
  6313 00000A39 [2115]                  	short_addr  SKIPSTR
  6314 00000A3B [F514]                  	short_addr  COPYSTR
  6315 00000A3D [1815]                  	short_addr  SKIPONE
  6316 00000A3F [FA14]                  	short_addr  COPYONE
  6317 00000A41 [FA14]                  	short_addr  COPYONE
  6318 00000A43 [7415]                  	short_addr  CTRLZ
  6319                                  
  6320                                  	;ENDIF
  6321                                  
  6322                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6323                                  ; ---------------------------------------------------------------------------
  6324                                  ; DOSMES.ASM (MSDOS 2.11, 1983)
  6325                                  
  6326                                  ; OEMFunction key is expected to process a single function
  6327                                  ;   key input from a device and dispatch to the proper
  6328                                  ;   routines leaving all registers UNTOUCHED.
  6329                                  ;
  6330                                  ; Inputs:   CS, SS are DOSGROUP
  6331                                  ; Outputs:  None. This function is expected to JMP to onw of
  6332                                  ;           the following labels:
  6333                                  ;
  6334                                  ;           GetCh       - ignore the sequence
  6335                                  ;           TwoEsc      - insert an ESCChar in the buffer
  6336                                  ;           ExitIns     - toggle insert mode
  6337                                  ;           EnterIns    - toggle insert mode
  6338                                  ;           BackSp      - move backwards one space
  6339                                  ;           ReEdit      - reedit the line with a new template
  6340                                  ;           KilNew      - discard the current line and start from scratch
  6341                                  ;           CopyLin     - copy the rest of the template into the line
  6342                                  ;           SkipStr     - read the next character and skip to it in the template
  6343                                  ;           CopyStr     - read next char and copy from template to line until char
  6344                                  ;           SkipOne     - advance position in template one character
  6345                                  ;           CopyOne     - copy next character in template into line
  6346                                  ;           CtrlZ       - place a ^Z into the template
  6347                                  ; Registers that are allowed to be modified by this function are:
  6348                                  ;           AX, CX, BP
  6349                                  
  6350                                  ; 13/05/2019 - Retro DOS v4.0
  6351                                  ; -------------------------------------
  6352                                  ; DOSCODE:4820h (MSDOS 6.21, MSDOS.SYS)
  6353                                  
  6354                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6355                                  ; -------------------------------------
  6356                                  ; DOSCODE:4813h (MSDOS 5.0, MSDOS.SYS)
  6357                                  
  6358                                  OEMFunctionKey:
  6359 00000A45 E81509                  	CALL	_$STD_CON_INPUT_NO_ECHO	; Get the second byte of the sequence
  6360 00000A48 B10E                    	MOV     CL,ESCTABLEN ; 14	; length of table for scan
  6361 00000A4A 57                      	PUSH    DI                      ; save DI (cannot change it!)
  6362 00000A4B BF[1B0A]                	MOV     DI,ESCTAB		; offset of second byte table
  6363 00000A4E 06                      	push	es
  6364 00000A4F 0E                      	push	cs
  6365 00000A50 07                      	pop	es
  6366 00000A51 F2AE                    	REPNE   SCASB                   ; Look it up in the table
  6367 00000A53 07                      	pop	es
  6368 00000A54 5F                      	POP     DI                      ; restore DI
  6369 00000A55 D1E1                    	SHL     CX,1                    ; convert byte offset to word
  6370 00000A57 89CD                    	MOV     BP,CX                   ; move to indexable register
  6371                                  	;JMP	word [BP+ESCFUNC]	; Go to the right routine
  6372 00000A59 2EFFA6[290A]            	JMP	word [CS:BP+ESCFUNC]
  6373                                  
  6374                                  ;DOSCODE ENDS
  6375                                  	
  6376                                  ;============================================================================
  6377                                  ; TIME.ASM (MSDOS 6.0, 1991)
  6378                                  ;============================================================================
  6379                                  ; Retro DOS v3.0 - 18/07/2018
  6380                                  
  6381                                  ; SYSCALL.ASM (MSDOS 2.11, 1983)
  6382                                  ;----------------------------------------------------------------------------
  6383                                  ; Retro DOS v2.0 - 13/03/2018
  6384                                  
  6385                                  ;**	TIME.ASM - System Calls and low level routines for DATE and TIME
  6386                                  
  6387                                  	;BREAK <DATE AND TIME - SYSTEM CALLS 42,43,44,45>
  6388                                  
  6389                                  ;**	$GET_DATE - Get Current Date
  6390                                  ;----------------------------------------
  6391                                  ;	ENTRY	none
  6392                                  ;	EXIT	(cx:dx) = current date
  6393                                  ;	USES	all
  6394                                  
  6395                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6396                                  
  6397                                  _$GET_DATE:	;System call 42
  6398                                  
  6399 00000A5E 16                      	PUSH	SS
  6400 00000A5F 1F                      	POP	DS
  6401 00000A60 E8AD00                  	CALL	READTIME	;Check for rollover to next day
  6402 00000A63 A1[5203]                	MOV	AX,[YEAR]
  6403                                  
  6404                                  ;	WARNING!!!! DAY and MONTH must be adjacently allocated!
  6405                                  
  6406 00000A66 8B1E[5003]              	MOV	BX,[DAY]	; fetch both day and month
  6407 00000A6A E814FA                  	CALL	Get_User_Stack	;Get pointer to user registers
  6408                                  	;MOV	[SI+6],BX	;DH=month, DL=day
  6409 00000A6D 895C06                  	MOV	[SI+user_env.user_DX],BX
  6410 00000A70 05BC07                  	ADD	AX,1980		;Put bias back
  6411                                  	;MOV	[SI+4],AX	;CX=year
  6412 00000A73 894404                  	MOV	[SI+user_env.user_CX],AX
  6413 00000A76 36A0[5603]              	MOV	AL,[SS:WEEKDAY]	;hkn; SS override
  6414                                  RET20:	; 05/11/2022
  6415                                  RET24:	; 18/12/2022
  6416 00000A7A C3                      	RETN
  6417                                  
  6418                                  ;**	$SET_DATE - Set Current Date
  6419                                  ;----------------------------------------
  6420                                  ;	ENTRY	(cx:dx) = current date
  6421                                  ;	EXIT	(al) = -1 iff bad date
  6422                                  ;		(al) = 0 if ok
  6423                                  ;	USES	all
  6424                                  
  6425                                  _$SET_DATE:	;System call 43
  6426                                  
  6427 00000A7B B0FF                    	MOV	AL,-1		;Be ready to flag error
  6428 00000A7D 81E9BC07                	SUB	CX,1980		;Fix bias in year
  6429                                  	;JC	SHORT RET24	;Error if not big enough
  6430                                  	; 05/11/2022
  6431 00000A81 72F7                    	jc	short RET20
  6432 00000A83 83F977                  	CMP	CX,119		;Year must be less than 2100
  6433 00000A86 77F2                    	JA	SHORT RET24
  6434 00000A88 08F6                    	OR	DH,DH
  6435                                  	;JZ	SHORT RET24
  6436                                   	; 05/11/2022
  6437 00000A8A 74EE                    	jz	short RET20
  6438 00000A8C 08D2                    	OR	DL,DL
  6439                                  	;JZ	SHORT RET24	;Error if either month or day is 0
  6440                                  	; 05/11/2022
  6441 00000A8E 74EA                    	jz	short RET20
  6442 00000A90 80FE0C                  	CMP	DH,12		;Check against max. month
  6443 00000A93 77E5                    	JA	SHORT RET24
  6444 00000A95 16                      	PUSH	SS
  6445 00000A96 1F                      	POP	DS
  6446                                  	;CALL	DODATE
  6447                                  	; 18/12/2022
  6448 00000A97 E90301                  	jmp	DODATE
  6449                                  ;RET24:  
  6450                                  	;RETN
  6451                                  
  6452                                  ;**	$GET_TIME - Get Current Time
  6453                                  ;----------------------------------------
  6454                                  ;	ENTRY	none
  6455                                  ;	EXIT	(cx:dx) = current time
  6456                                  ;	USES	all
  6457                                  
  6458                                  _$GET_TIME:			;System call 44
  6459                                  
  6460 00000A9A 16                      	PUSH	SS
  6461 00000A9B 1F                      	POP	DS
  6462 00000A9C E87100                  	CALL	READTIME
  6463 00000A9F E8DFF9                  	CALL	Get_User_Stack	;Get pointer to user registers
  6464                                  	;MOV	[SI+6],DX
  6465 00000AA2 895406                  	MOV	[SI+user_env.user_DX],DX
  6466                                  	;MOV	[SI+4],CX
  6467 00000AA5 894C04                  	MOV	[SI+user_env.user_CX],CX
  6468                                  set_time_ok:	; 06/01/2024
  6469 00000AA8 30C0                    	XOR	AL,AL
  6470                                  RET26:  
  6471 00000AAA C3                      	RETN
  6472                                  
  6473                                  ;**	$SET_TIME - Set Current Time
  6474                                  ;----------------------------------------
  6475                                  ;	ENTRY	(cx:dx) = time
  6476                                  ;	EXIT	(al) = 0 if 0k
  6477                                  ;		(al) = -1 if invalid
  6478                                  ;	USES	ALL
  6479                                  
  6480                                  _$SET_TIME:			;System call 45
  6481                                  
  6482 00000AAB B0FF                    	MOV	AL,-1		;Flag in case of error
  6483 00000AAD 80FD18                  	CMP	CH,24		;Check hours
  6484 00000AB0 73F8                    	JAE	SHORT RET26
  6485 00000AB2 80F93C                  	CMP	CL,60		;Check minutes
  6486 00000AB5 73F3                    	JAE	SHORT RET26
  6487 00000AB7 80FE3C                  	CMP	DH,60		;Check seconds
  6488 00000ABA 73EE                    	JAE	SHORT RET26
  6489 00000ABC 80FA64                  	CMP	DL,100		;Check 1/100's
  6490 00000ABF 73E9                    	JAE	SHORT RET26
  6491 00000AC1 51                      	PUSH	CX
  6492 00000AC2 52                      	PUSH	DX
  6493 00000AC3 16                      	PUSH	SS
  6494 00000AC4 1F                      	POP	DS
  6495                                  
  6496                                  ; 07/02/2024
  6497                                  %if 0
  6498                                  	MOV	BX,TIMEBUF
  6499                                  	MOV	CX,6
  6500                                  	; 06/02/2024 ; *
  6501                                  	;;XOR	DX,DX
  6502                                  	;;MOV	AX,DX
  6503                                  	;xor	ax,ax
  6504                                  	;cwd	; 06/01/2024
  6505                                  	PUSH	BX
  6506                                  	;CALL	SETREAD
  6507                                  	; 06/02/2024 ; *
  6508                                  	call	SETREAD_X
  6509                                  %else
  6510 00000AC5 E86E3B                  	call	SETREAD_XT
  6511                                  %endif
  6512                                  
  6513 00000AC8 1E                      	PUSH	DS
  6514 00000AC9 C536[2E00]              	LDS	SI,[BCLOCK]
  6515 00000ACD E8EC3A                  	CALL	DEVIOCALL2	;Get correct day count
  6516 00000AD0 1F                      	POP	DS
  6517 00000AD1 5B                      	POP	BX
  6518 00000AD2 E89E3B                  	CALL	SETWRITE
  6519 00000AD5 8F06[BA03]              	POP	WORD [TIMEBUF+4]
  6520 00000AD9 8F06[B803]              	POP	WORD [TIMEBUF+2]
  6521 00000ADD C536[2E00]              	LDS	SI,[BCLOCK]
  6522 00000AE1 E8D83A                  	CALL	DEVIOCALL2	;Set the time
  6523                                  	; 06/01/2024
  6524                                  	;XOR	AL,AL
  6525                                  	;RETN
  6526 00000AE4 EBC2                    	jmp	short set_time_ok
  6527                                  
  6528                                  ; 11/07/2018 - Retro DOS v3.0
  6529                                  ; Retro DOS v2.0 - 14/03/2018
  6530                                  
  6531                                  FOURYEARS EQU 3*365 + 366  ; = 1461 
  6532                                  
  6533                                  ;SUBTTL DATE16, READTIME, DODATE -- GUTS OF TIME AND DATE
  6534                                  ;----------------------------------------------------------
  6535                                  ; Date16 returns the current date in AX, current time in DX
  6536                                  ;   AX - YYYYYYYMMMMDDDDD  years months days
  6537                                  ;   DX - HHHHHMMMMMMSSSSS  hours minutes seconds/2
  6538                                  
  6539                                  DATE16:
  6540                                  	
  6541                                  ;M048	Context DS
  6542                                  ;
  6543                                  ; Since this function can be called thru int 2f we shall not assume that SS
  6544                                  ; is DOSDATA
  6545                                  
  6546                                  	;push	ss
  6547                                  	;pop	ds
  6548                                  
  6549                                  	;getdseg <ds>		; M048
  6550                                  
  6551                                  	; 13/05/2019 - Retro DOS v4.0
  6552 00000AE6 2E8E1E[0700]            	mov	ds, [cs:DosDSeg]	
  6553                                  
  6554 00000AEB 51                      	PUSH	CX
  6555 00000AEC 06                      	PUSH	ES
  6556 00000AED E82000                  	CALL	READTIME
  6557 00000AF0 07                      	POP	ES
  6558 00000AF1 D0E1                    	SHL	CL,1		;Minutes to left part of byte
  6559 00000AF3 D0E1                    	SHL	CL,1
  6560 00000AF5 D1E1                    	SHL	CX,1		;Push hours and minutes to left end
  6561 00000AF7 D1E1                    	SHL	CX,1
  6562 00000AF9 D1E1                    	SHL	CX,1
  6563 00000AFB D0EE                    	SHR	DH,1		;Count every two seconds
  6564 00000AFD 08F1                    	OR	CL,DH		;Combine seconds with hours and minutes
  6565 00000AFF 89CA                    	MOV	DX,CX
  6566                                  
  6567                                  ;	WARNING! MONTH and YEAR must be adjacently allocated
  6568                                  
  6569 00000B01 A1[5103]                	MOV	AX,[MONTH]	;Fetch month and year
  6570 00000B04 B104                    	MOV	CL,4
  6571 00000B06 D2E0                    	SHL	AL,CL		;Push month to left to make room for day
  6572 00000B08 D1E0                    	SHL	AX,1
  6573 00000B0A 59                      	POP	CX
  6574 00000B0B 0A06[5003]              	OR	AL,[DAY]
  6575                                  RET21:
  6576 00000B0F C3                      	RETN
  6577                                  
  6578                                  ;----------------------------------------------------------
  6579                                  
  6580                                  READTIME:
  6581                                  
  6582                                  ;Gets time in CX:DX. Figures new date if it has changed.
  6583                                  ;Uses AX, CX, DX.
  6584                                  
  6585 00000B10 C706[910D]0000          	MOV	word [DATE_FLAG],0 ; reset date flag for CPMIO
  6586 00000B16 56                      	PUSH	SI
  6587 00000B17 53                      	PUSH	BX
  6588                                  
  6589 00000B18 BB[B603]                	MOV	BX,TIMEBUF
  6590                                  ; 07/02/2024
  6591                                  %if 0
  6592                                  	MOV	CX,6
  6593                                  	; 06/02/2024
  6594                                  	;;XOR	DX,DX
  6595                                  	;;MOV	AX,DX
  6596                                  	;; 06/01/2024
  6597                                  	;xor	ax,ax
  6598                                  	;cwd
  6599                                  	;CALL	SETREAD
  6600                                  	; 06/02/2024
  6601                                  	call	SETREAD_X
  6602                                  %else
  6603 00000B1B E81C3B                  	call	SETREAD_XTC
  6604                                  %endif
  6605 00000B1E 1E                      	PUSH	DS
  6606 00000B1F C536[2E00]              	LDS	SI,[BCLOCK]
  6607 00000B23 E8963A                  	CALL	DEVIOCALL2	;Get correct date and time
  6608 00000B26 1F                      	POP	DS
  6609 00000B27 5B                      	POP	BX
  6610 00000B28 5E                      	POP	SI
  6611 00000B29 A1[B603]                	MOV	AX,[TIMEBUF]
  6612 00000B2C 8B0E[B803]              	MOV	CX,[TIMEBUF+2]
  6613 00000B30 8B16[BA03]              	MOV	DX,[TIMEBUF+4]
  6614 00000B34 3B06[5403]              	CMP	AX,[DAYCNT]	;See if day count is the same
  6615                                  	;JZ	SHORT RET22
  6616 00000B38 74D5                    	JZ	SHORT RET21 ; 18/07/2018
  6617                                  	;cmp	ax,43830
  6618 00000B3A 3D36AB                  	CMP	AX,FOURYEARS*30 ;Number of days in 120 years
  6619 00000B3D 733D                    	JAE	SHORT RET22	;Ignore if too large
  6620 00000B3F A3[5403]                	MOV	[DAYCNT],AX
  6621 00000B42 56                      	PUSH	SI
  6622 00000B43 51                      	PUSH	CX
  6623 00000B44 52                      	PUSH	DX		;Save time
  6624 00000B45 31D2                    	XOR	DX,DX
  6625                                  	;mov	cx,1461
  6626 00000B47 B9B505                  	MOV	CX,FOURYEARS	;Number of days in 4 years
  6627 00000B4A F7F1                    	DIV	CX		;Compute number of 4-year units
  6628 00000B4C D1E0                    	SHL	AX,1
  6629 00000B4E D1E0                    	SHL	AX,1
  6630 00000B50 D1E0                    	SHL	AX,1		;Multiply by 8 (no. of half-years)
  6631 00000B52 89C1                    	MOV	CX,AX		;<240 implies AH=0
  6632                                  
  6633 00000B54 BE[140D]                	MOV	SI,YRTAB	;Table of days in each year
  6634                                  
  6635 00000B57 E82300                  	CALL	DSLIDE		;Find out which of four years we're in
  6636 00000B5A D1E9                    	SHR	CX,1		;Convert half-years to whole years
  6637 00000B5C 7304                    	JNC	SHORT SK	;Extra half-year?
  6638 00000B5E 81C2C800                	ADD	DX,200
  6639                                  SK:
  6640 00000B62 E82200                  	CALL	SETYEAR
  6641 00000B65 B101                    	MOV	CL,1		;At least at first month in year
  6642                                  
  6643 00000B67 BE[1C0D]                	MOV	SI,MONTAB	;Table of days in each month
  6644                                  	
  6645 00000B6A E81000                  	CALL	DSLIDE		;Find out which month we're in
  6646 00000B6D 880E[5103]              	MOV	[MONTH],CL
  6647 00000B71 42                      	INC	DX		;Remainder is day of month (start with one)
  6648 00000B72 8816[5003]              	MOV	[DAY],DL
  6649 00000B76 E88A00                  	CALL	WKDAY		;Set day of week
  6650 00000B79 5A                      	POP	DX
  6651 00000B7A 59                      	POP	CX
  6652 00000B7B 5E                      	POP	SI
  6653                                  RET22:  
  6654 00000B7C C3                      	RETN
  6655                                  
  6656                                  ;----------------------------------------------------------
  6657                                  
  6658                                  DSLIDE:
  6659                                  	;MOV	AH,0
  6660                                  	; 06/01/2024
  6661                                  	; (AH=0)
  6662                                  DSLIDE1:
  6663 00000B7D AC                      	LODSB			;Get count of days
  6664 00000B7E 39C2                    	CMP	DX,AX		;See if it will fit
  6665                                  	;JB	SHORT RET23	;If not, done
  6666 00000B80 72FA                    	jb	short RET22 ; 13/05/2019 - Retro DOS v4.0
  6667 00000B82 29C2                    	SUB	DX,AX
  6668 00000B84 41                      	INC	CX		;Count one more month/year
  6669 00000B85 EBF6                    	JMP	SHORT DSLIDE1
  6670                                  
  6671                                  ;----------------------------------------------------------
  6672                                  
  6673                                  SETYEAR:
  6674                                  
  6675                                  ;Set year with value in CX. Adjust length of February for this year.
  6676                                  
  6677                                  ; NOTE: This can also be called thru int 2f. If this is called then it will
  6678                                  ;	  set DS to DOSDATA. Since the only guy calling this should be the DOS
  6679                                  ;	redir, DS will be DOSDATA anyway. It is going to be in-efficient to
  6680                                  ;	preserve DS as CHKYR is also called as a routine.
  6681                                  
  6682                                  	; MSDOS 6.0 (18/07/2018) ; *
  6683                                  
  6684                                  	;GETDSEG DS
  6685                                  
  6686                                  	;PUSH	CS  ; *
  6687                                  	;POP	DS  ; *
  6688                                  
  6689                                  	; 13/05/2019 - Retro DOS v4.0
  6690 00000B87 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6691                                  
  6692                                  	; Offset 18CEh in IBMDOS.COM (MSDOS 3.3), 1987
  6693                                  	; 05/11/2022 
  6694                                  	; DOSCODE:4970h in MSDOS.SYS (MSDOS 5.0), 1991 
  6695                                  
  6696 00000B8C 880E[5203]              	MOV	[YEAR],CL
  6697                                  CHKYR:
  6698 00000B90 F6C103                  	TEST	CL,3		;Check for leap year
  6699 00000B93 B01C                    	MOV	AL,28
  6700 00000B95 7502                    	JNZ	SHORT SAVFEB	;28 days if no leap year
  6701 00000B97 FEC0                    	INC	AL		;Add leap day
  6702                                  SAVFEB:
  6703 00000B99 A2[1D0D]                	mov	[february],al
  6704                                  	;MOV	[MONTAB+1],AL	;Store for February
  6705                                  RET23:  
  6706 00000B9C C3                      	RETN
  6707                                  
  6708                                  ;----------------------------------------------------------
  6709                                  
  6710                                  DODATE:
  6711 00000B9D E8F0FF                  	CALL	CHKYR		;Set Feb. up for new year
  6712 00000BA0 88F0                    	MOV	AL,DH
  6713                                  
  6714 00000BA2 BB[1B0D]                	MOV	BX,MONTAB-1	;DOSDATA:0D1Bh for MSDOS 6.21
  6715                                  
  6716 00000BA5 D7                      	XLAT			;Look up days in month
  6717 00000BA6 38D0                    	CMP	AL,DL
  6718 00000BA8 B0FF                    	MOV	AL,-1		;Restore error flag, just in case
  6719                                  	;JB	SHORT RET25	;Error if too many days
  6720 00000BAA 72F0                    	jb	short RET23 ; 18/07/2018
  6721 00000BAC E8D8FF                  	CALL	SETYEAR
  6722                                  ;
  6723                                  ; WARNING! DAY and MONTH must be adjacently allocated
  6724                                  ;
  6725 00000BAF 8916[5003]              	MOV	[DAY],DX	;Set both day and month
  6726 00000BB3 D1E9                    	SHR	CX,1
  6727 00000BB5 D1E9                    	SHR	CX,1
  6728                                  	;mov	ax,1461
  6729 00000BB7 B8B505                  	MOV	AX,FOURYEARS
  6730 00000BBA 89D3                    	MOV	BX,DX
  6731 00000BBC F7E1                    	MUL	CX
  6732 00000BBE 8A0E[5203]              	MOV	CL,[YEAR]
  6733 00000BC2 80E103                  	AND	CL,3
  6734                                  
  6735 00000BC5 BE[140D]                	MOV	SI,YRTAB
  6736                                  
  6737 00000BC8 89C2                    	MOV	DX,AX
  6738 00000BCA D1E1                    	SHL	CX,1		;Two entries per year, so double count
  6739 00000BCC E84700                  	CALL	DSUM		;Add up the days in each year
  6740 00000BCF 88F9                    	MOV	CL,BH		;Month of year
  6741                                  
  6742 00000BD1 BE[1C0D]                	MOV	SI,MONTAB
  6743                                  
  6744 00000BD4 49                      	DEC	CX		;Account for months starting with one
  6745 00000BD5 E83E00                  	CALL	DSUM		;Add up days in each month
  6746 00000BD8 88D9                    	MOV	CL,BL		;Day of month
  6747 00000BDA 49                      	DEC	CX		;Account for days starting with one
  6748 00000BDB 01CA                    	ADD	DX,CX		;Add in to day total
  6749 00000BDD 92                      	XCHG	AX,DX		;Get day count in AX
  6750 00000BDE A3[5403]                	MOV	[DAYCNT],AX
  6751 00000BE1 56                      	PUSH	SI
  6752 00000BE2 53                      	PUSH	BX
  6753 00000BE3 50                      	PUSH	AX
  6754                                  
  6755                                  ; 07/02/2024
  6756                                  %if 0
  6757                                  	MOV	BX,TIMEBUF
  6758                                  	MOV	CX,6
  6759                                  	; 06/02/2024 ; *
  6760                                  	;;XOR	DX,DX
  6761                                  	;;MOV	AX,DX
  6762                                  	;; 06/01/2024
  6763                                  	;xor	ax,ax
  6764                                  	;cwd
  6765                                  	PUSH	BX
  6766                                  	;CALL	SETREAD
  6767                                  	; 06/02/2024 ; *
  6768                                  	call	SETREAD_X
  6769                                  %else
  6770 00000BE4 E84F3A                  	call	SETREAD_XT
  6771                                  %endif
  6772                                  
  6773 00000BE7 1E                      	PUSH	DS
  6774 00000BE8 C536[2E00]              	LDS	SI,[BCLOCK]
  6775 00000BEC E8CD39                  	CALL	DEVIOCALL2	;Get correct date and time
  6776 00000BEF 1F                      	POP	DS
  6777 00000BF0 5B                      	POP	BX
  6778 00000BF1 E87F3A                  	CALL	SETWRITE
  6779 00000BF4 8F06[B603]              	POP	WORD [TIMEBUF]
  6780 00000BF8 1E                      	PUSH	DS
  6781 00000BF9 C536[2E00]              	LDS	SI,[BCLOCK]
  6782 00000BFD E8BC39                  	CALL	DEVIOCALL2	;Set the date
  6783 00000C00 1F                      	POP	DS
  6784 00000C01 5B                      	POP	BX
  6785 00000C02 5E                      	POP	SI
  6786                                  WKDAY:
  6787 00000C03 A1[5403]                	MOV	AX,[DAYCNT]
  6788 00000C06 31D2                    	XOR	DX,DX
  6789 00000C08 B90700                  	MOV	CX,7
  6790 00000C0B 40                      	INC	AX
  6791 00000C0C 40                      	INC	AX		;First day was Tuesday
  6792 00000C0D F7F1                    	DIV	CX		;Compute day of week
  6793 00000C0F 8816[5603]              	MOV	[WEEKDAY],DL
  6794 00000C13 30C0                    	XOR	AL,AL		;Flag OK
  6795                                  RET25:
  6796 00000C15 C3                      	RETN
  6797                                  
  6798                                  ;----------------------------------------------------------
  6799                                  
  6800                                  ;**	DSUM - Compute the sum of a string of bytes
  6801                                  ;
  6802                                  ;	ENTRY	(cx) = byte count
  6803                                  ;		(ds:si) = byte address
  6804                                  ;		(dx) = sum register, initialized by caller
  6805                                  ;	EXIT	(dx) updated
  6806                                  ;	USES	ax, cx, dx, si, flags
  6807                                  
  6808                                  DSUM:
  6809 00000C16 B400                    	MOV	AH,0
  6810 00000C18 E305                    	JCXZ	DSUM9 ; 13/05/2019 - Retro DOS v4.0
  6811                                  	;JCXZ	RET25 ; 18/07/2018
  6812                                  DSUM1:
  6813 00000C1A AC                      	LODSB
  6814 00000C1B 01C2                    	ADD	DX,AX
  6815 00000C1D E2FB                    	LOOP	DSUM1
  6816                                  DSUM9:
  6817 00000C1F C3                      	RETN
  6818                                  
  6819                                  ;============================================================================
  6820                                  ; GETSET.ASM (MSDOS 6.0, 1991)
  6821                                  ;============================================================================
  6822                                  ; 29/04/2019 - Retro DOS v4.0
  6823                                  ; 18/07/2018 - Retro DOS v3.0 (GETSET.ASM, MSDOS 6.0, 1991)
  6824                                  
  6825                                  ; 12/03/2018 - Retro DOS v2.0 
  6826                                  
  6827                                  ;TITLE	GETSET - GETting and SETting MS-DOS system calls
  6828                                  ;NAME	GETSET
  6829                                  
  6830                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  6831                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
  6832                                  
  6833                                  ;USERNUM:
  6834                                  ;	DW	0			; 24 bit user number
  6835                                  ;       DB      0
  6836                                  ;;	IF      IBM
  6837                                  ;;OEMNUM: DB    0			; 8 bit OEM number
  6838                                  ;;	ELSE
  6839                                  ;OEMNUM: DB     0FFH			; 8 bit OEM number
  6840                                  ;;	ENDIF
  6841                                  
  6842                                  ;MSVERS:		; MS-DOS version in hex for $GET_VERSION
  6843                                  ;; 08/07/2018 - Retro DOS v3.0
  6844                                  ;MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  6845                                  ;MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  6846                                  
  6847                                  ;BREAK <$Get_Version -- Return MSDOS version number>
  6848                                  ;----------------------------------------------------------------------------
  6849                                  
  6850                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6851                                  ; DOSCODE:4A0Fh (MSDOS 5.0 MSDOS.SYS)
  6852                                  
  6853                                  _$GET_VERSION:
  6854                                  
  6855                                  ; Inputs:
  6856                                  ;       None
  6857                                  ; Function:
  6858                                  ;       Return MS-DOS version number
  6859                                  ; Outputs:
  6860                                  ;       OEM number in BH
  6861                                  ;       User number in BL:CX (24 bits)
  6862                                  ;       Version number as AL.AH in binary
  6863                                  ;       NOTE: On pre 1.28 DOSs AL will be zero
  6864                                  
  6865                                  ; MSDOS 6.0
  6866                                  ;
  6867                                  ;	Fake_Count is used to lie about the version numbers to support
  6868                                  ;	old binarys. See ms_table.asm for more info.
  6869                                  ;
  6870                                  ;		if input al = 00
  6871                                  ;		  (bh) = OEM number			
  6872                                  ;		else if input al = 01
  6873                                  ;		  (bh) = version flags
  6874                                  ;		 
  6875                                  ;		       	 bits 0-2 = DOS internal revision
  6876                                  ;		       	 bits 3-7 = DOS type flags
  6877                                  ;		              bit 3    = DOS is in ROM
  6878                                  ;		              bit 4    = DOS in in HMA
  6879                                  ;		              bits 5-7 = reserved
  6880                                  ;               M007 change - only bit 3 is now valid. Other bits
  6881                                  ;               are 0 when AL = 1
  6882                                  
  6883                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  6884 00000C20 36C50E[B203]            	lds	cx, [ss:USERNUM]
  6885 00000C25 8CDB                    	mov	bx, ds
  6886                                  
  6887                                  	; MSDOS 3.3 (IBMDOS.COM, offset 196Dh)
  6888                                  	;--------------------------------------
  6889                                  	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:4A1Ch)
  6890                                  
  6891 00000C27 16                              PUSH    SS
  6892 00000C28 1F                              POP     DS
  6893                                          
  6894                                  	; 06/01/2024
  6895                                  	;MOV	BX,[USERNUM+2]
  6896                                          ;MOV	CX,[USERNUM]
  6897                                  
  6898                                  	; 13/05/2019 - Retro DOS v4.0
  6899                                  
  6900                                  	;If AL == 1, ROMDOS will return BH = dos internal version # &
  6901                                  	;DOS flags
  6902                                  
  6903 00000C29 3C01                    	cmp	AL,1
  6904 00000C2B 7502                    	jne	short Norm_Vers
  6905                                  
  6906                                  ;ifdef ROMDOS
  6907                                  ;	mov	BH,DOSINROM 	; Just set the bit for ROM version
  6908                                  ;				(DOSINROM = 8)
  6909                                  ;else
  6910 00000C2D 30FF                            xor     bh,bh		; Otherwise return 0
  6911                                  ;endif				;M007 end
  6912                                  
  6913                                  Norm_Vers:
  6914                                  	;MOV	AX,[MSVERS]  ; MSDOS 3.3
  6915                                  
  6916                                          	; MSDOS 6.0	; MSVERS is a label in TABLE segment	
  6917                                  	; 13/05/2019 - Retro DOS v4.0
  6918 00000C2F 1E                      	push	ds		; Get the version number from the
  6919 00000C30 8E1E[3003]              	mov	ds,[CurrentPDB]	; current app's PSP segment
  6920                                  	;mov	ax,[40h]
  6921 00000C34 A14000                  	mov	ax,[PDB.Version] ; AX = DOS version number	
  6922                                  	; 07/12/2022
  6923 00000C37 1F                      	pop	ds
  6924 00000C38 E846F8                  	call	Get_User_Stack
  6925                                  				; Put values for return registers
  6926                                  				; in the proper place on the user's	 
  6927                                  				; stack addressed by DS:SI
  6928                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  6929                                  gdrvfspc_ret:
  6930                                          ;MOV	[SI+user_env.user_AX],AX
  6931 00000C3B 8904                            MOV	[SI],AX
  6932                                          ;MOV	[SI+4],CX
  6933 00000C3D 894C04                  	mov	[SI+user_env.user_CX],CX
  6934                                  set_user_bx:
  6935                                  	;MOV	[SI+2],BX
  6936 00000C40 895C02                  	mov	[SI+user_env.user_BX],BX
  6937                                  
  6938 00000C43 C3                      	RETN
  6939                                  
  6940                                  ; 18/07/2018 - Retro DOS v3.0
  6941                                  
  6942                                  ;BREAK <$Get/Set_Verify_on_Write - return/set verify-after-write flag>
  6943                                  ;----------------------------------------------------------------------------
  6944                                  
  6945                                  ;**	$Get_Verify_On_Write - Get Status of Verify on write flag
  6946                                  ;
  6947                                  ;	ENTRY	none
  6948                                  ;	EXIT	(al) = value of VERIFY flag
  6949                                  ;	USES	all
  6950                                  
  6951                                  
  6952                                  _$GET_VERIFY_ON_WRITE:
  6953                                  
  6954                                  ;hkn; SS override
  6955 00000C44 36A0[FF02]              	MOV	AL,[SS:VERFLG]	; Retro DOS v2.0 - 12/03/2018
  6956 00000C48 C3                      	retn
  6957                                  
  6958                                  ;**	$Set_Verify_On_Write - Set Status of Verify on write flag
  6959                                  ;
  6960                                  ;	ENTRY	(al) = value of VERIFY flag
  6961                                  ;	EXIT	none
  6962                                  ;	USES	all
  6963                                  
  6964                                  _$SET_VERIFY_ON_WRITE:
  6965                                  
  6966 00000C49 2401                    	AND	AL,1
  6967                                  ;hkn; SS override
  6968 00000C4B 36A2[FF02]              	MOV	[SS:VERFLG],AL	; Retro DOS v2.0 - 12/03/2018
  6969                                  RET27:	; 18/07/2018
  6970 00000C4F C3                      	retn
  6971                                  
  6972                                  ; 19/07/2018 - Retro DOS v3.0
  6973                                  
  6974                                  ;BREAK <$International - return country-dependent information>
  6975                                  ;----------------------------------------------------------------------------
  6976                                  ;
  6977                                  ; Procedure Name : $INTERNATIONAL
  6978                                  ;
  6979                                  ; Inputs:
  6980                                  ;	MOV	AH,International
  6981                                  ;	MOV	AL,country	(al = 0 => current country)
  6982                                  ;      [MOV	BX,country]
  6983                                  ;	LDS	DX,block
  6984                                  ;	INT	21
  6985                                  ; Function:
  6986                                  ;	give users an idea of what country the application is running
  6987                                  ; Outputs:
  6988                                  ;	IF DX != -1 on input (get country)
  6989                                  ;	  AL = 0 means return current country table.
  6990                                  ;	  0<AL<0FFH means return country table for country AL
  6991                                  ;	  AL = 0FF means return country table for country BX
  6992                                  ;	  No Carry:
  6993                                  ;	     Register BX will contain the 16-bit country code.
  6994                                  ;	     Register AL will contain the low 8 bits of the country code.
  6995                                  ;	     The block pointed to by DS:DX is filled in with the information
  6996                                  ;	     for the particular country.
  6997                                  ;		BYTE  Size of this table excluding this byte and the next
  6998                                  ;		BYTE  Country code represented by this table
  6999                                  ;			A sequence of n bytes, where n is the number specified
  7000                                  ;			by the first byte above and is not > internat_block_max,
  7001                                  ;			in the correct order for being returned by the
  7002                                  ;			INTERNATIONAL call as follows:
  7003                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  7004                                  ;		5 BYTE	Currency symbol null terminated
  7005                                  ;		2 BYTE	thousands separator null terminated
  7006                                  ;		2 BYTE	Decimal point null terminated
  7007                                  ;		2 BYTE	Date separator null terminated
  7008                                  ;		2 BYTE	Time separator null terminated
  7009                                  ;		1 BYTE	Bit field.  Currency format.
  7010                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  7011                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  7012                                  ;		1 BYTE	No. of significant decimal digits in currency
  7013                                  ;		1 BYTE	Bit field.  Time format.
  7014                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  7015                                  ;		DWORD	Call address of case conversion routine
  7016                                  ;		2 BYTE	Data list separator null terminated.
  7017                                  ;	  Carry:
  7018                                  ;	     Register AX has the error code.
  7019                                  ;	IF DX = -1 on input (set current country)
  7020                                  ;	  AL = 0 is an error
  7021                                  ;	  0<AL<0FFH means set current country to country AL
  7022                                  ;	  AL = 0FF means set current country to country BX
  7023                                  ;	  No Carry:
  7024                                  ;	    Current country SET
  7025                                  ;	    Register AL will contain the low 8 bits of the country code.
  7026                                  ;	  Carry:
  7027                                  ;	     Register AX has the error code.
  7028                                  ;-----------------------------------------------------------------------------
  7029                                  
  7030                                  ;procedure   $INTERNATIONAL,NEAR   ; DOS 3.3
  7031                                  
  7032                                  ; 13/05/2019 - Retro DOS v4.0
  7033                                  ; DOSCODE:4A4Dh (MSDOS 6.21, MSDOS.SYS)
  7034                                  
  7035                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7036                                  ; DOSCODE:4A40h (MSDOS 5.0, MSDOS.SYS)
  7037                                  
  7038                                  _$INTERNATIONAL:  ; IBMDOS.COM (MSDOS 3.3), offset 1992h
  7039                                  	 
  7040 00000C50 3CFF                    	CMP	AL,0FFH
  7041 00000C52 7404                    	JZ	short BX_HAS_CODE	; -1 means country code is in BX
  7042 00000C54 88C3                    	MOV	BL,AL			; Put AL country code in BX
  7043 00000C56 30FF                    	XOR	BH,BH
  7044                                  BX_HAS_CODE:
  7045 00000C58 1E                      	PUSH	DS
  7046 00000C59 07                      	POP	ES
  7047 00000C5A 52                      	PUSH	DX
  7048 00000C5B 5F                      	POP	DI			; User buffer to ES:DI
  7049                                  
  7050                                  ;hkn; SS is DOSDATA
  7051                                  ;	context DS
  7052                                  
  7053 00000C5C 16                      	push	ss
  7054 00000C5D 1F                      	pop	ds
  7055                                  
  7056 00000C5E 83FFFF                  	CMP	DI,-1
  7057 00000C61 745D                    	JZ	short international_set
  7058 00000C63 09DB                    	OR	BX,BX
  7059 00000C65 7505                    	JNZ	short international_find
  7060                                  
  7061                                  ;hkn; country_cdpg is in DOSDATA segment.
  7062 00000C67 BE[0012]                	MOV	SI,COUNTRY_CDPG
  7063                                  
  7064 00000C6A EB39                    	JMP	SHORT international_copy
  7065                                  
  7066                                  international_find:
  7067                                  	;MOV	BP,0			 ; flag it for GetCntry only
  7068                                  	; 06/01/2024
  7069 00000C6C 31ED                    	xor	bp,bp ; 0
  7070 00000C6E E80A00                  	CALL	international_get
  7071 00000C71 7255                    	JC	short errtn
  7072                                  	;CMP	BX,0			 ; nlsfunc finished it ?
  7073                                  	; 06/01/2024
  7074 00000C73 09DB                    	or	bx,bx
  7075 00000C75 752E                    	JNZ	SHORT international_copy ; no, copy by myself
  7076 00000C77 89D3                    	MOV	BX,DX			 ; put country back
  7077 00000C79 EB3A                    	JMP	SHORT international_ok3
  7078                                  
  7079                                  international_get:
  7080 00000C7B BE[0012]                	MOV	SI,COUNTRY_CDPG
  7081                                  
  7082                                  ;hkn; country_cdpg is in DOSDATA segment.
  7083                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7084                                  
  7085                                  	; MSDOS 3.3
  7086                                  	;;cmp	bx,[SI+63h]
  7087                                  	;CMP	BX,[SI+DOS_CCDPG.ccDosCountry]
  7088                                  	;jz	short RET27
  7089                                  
  7090                                  	; 13/05/2019 - Retro DOS v4.0
  7091                                  
  7092                                  	; MSDOS 6.0
  7093                                  	;cmp	bx,[ss:si+68h]
  7094 00000C7E 363B5C68                	CMP	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7095 00000C82 74CB                    	jz	short RET27			; return if equal
  7096                                  
  7097 00000C84 89DA                    	MOV	DX,BX
  7098 00000C86 31DB                    	XOR	BX,BX			; bx = 0, default code page
  7099                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7100 00000C88 B80014                  	mov	ax,1400h
  7101 00000C8B CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7102                                  			; Return: AL = 00h not installed, OK to install
  7103                                  			; 01h not installed, not OK
  7104                                  			; FFh installed
  7105 00000C8D 3CFF                    	CMP	AL,0FFH
  7106 00000C8F 7510                    	JNZ	short interr		; not in memory
  7107                                  	
  7108                                  	; 06/01/2024
  7109 00000C91 B80314                  	mov	ax,1403h		; set country info
  7110                                  
  7111                                  	;cmp	bp,0
  7112 00000C94 09ED                    	or	bp,bp			; GetCntry ?
  7113 00000C96 7501                    	JNZ	short stcdpg
  7114                                  	
  7115                                  	;CallInstall GetCntry,NLSFUNC,4	; get country info
  7116                                  	;mov	ax,1404h
  7117 00000C98 40                      	inc	ax	; AX = 1404h ; get country info
  7118                                  
  7119                                  	; 06/01/2024
  7120                                  	;int	2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7121                                  	;		; BX = code page, DX = country code,
  7122                                  	;		; DS:SI -> internal code page structure
  7123                                  	;		; ES:DI -> user buffer
  7124                                  	;		; Return: AL = status
  7125                                  	;
  7126                                  	;JMP	short chkok
  7127                                  	
  7128                                  	;nop
  7129                                  
  7130                                  stcdpg:
  7131                                  	;CallInstall SetCodePage,NLSFUNC,3  ; set country info
  7132                                  	; 06/01/2024
  7133                                  	;mov     ax,1403h
  7134                                  gscdpg:
  7135 00000C99 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - SET COUNTRY INFO
  7136                                  			; DS:SI -> internal code page structure
  7137                                  			; BX = code page, DX = country code
  7138                                  			; Return: AL = status
  7139                                  chkok:
  7140 00000C9B 08C0                    	or	al,al			; success ?
  7141                                  	;retz				; yes
  7142 00000C9D 74B0                    	jz	short RET27
  7143                                  
  7144                                  setcarry:
  7145 00000C9F F9                      	STC				; set carry
  7146 00000CA0 C3                      	retn
  7147                                  interr:
  7148 00000CA1 B0FF                    	MOV	AL,0FFH			; flag nlsfunc error
  7149 00000CA3 EBFA                    	JMP	short setcarry
  7150                                  
  7151                                  international_copy:
  7152                                  
  7153                                  ;hkn; country_cdpg is in DOSDATA segment.
  7154                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7155                                  
  7156                                  	; MSDOS 3.3
  7157                                  	;;mov	bx,[SI+63h]
  7158                                  	;mov	BX,[SI+DOS_CCDPG.ccDosCountry]
  7159                                  	;mov	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; 08/09/2018
  7160                                  
  7161                                  	; 13/05/2019 - Retro DOS v4.0
  7162                                  
  7163                                  	; MSDOS 6.0
  7164                                  	;mov	bx,[ss:si+68h]
  7165 00000CA5 368B5C68                	MOV	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7166 00000CA9 BE[6C12]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; COUNTRY_CDPG + 108
  7167                                  
  7168                                  	;mov	cx,24
  7169 00000CAC B91800                  	MOV	CX,OLD_COUNTRY_SIZE
  7170                                  
  7171                                  	; MSDOS 6.0
  7172                                  
  7173                                  ;hkn;	must set up DS to SS so that international info can be copied
  7174                                  	
  7175 00000CAF 1E                      	push	ds
  7176                                  
  7177 00000CB0 16                      	push	ss			; cs -> ss
  7178 00000CB1 1F                      	pop	ds
  7179                                  
  7180 00000CB2 F3A4                    	REP	MOVSB			; copy country info
  7181                                  
  7182                                  	; MSDOS 6.0
  7183                                  
  7184 00000CB4 1F                      	pop	ds	;hkn;	restore ds
  7185                                  
  7186                                  international_ok3:
  7187 00000CB5 E8C9F7                  	call	Get_User_Stack
  7188                                  ;ASSUME	DS:NOTHING
  7189                                  	;MOV	[SI+2],BX
  7190 00000CB8 895C02                  	MOV	[SI+user_env.user_BX],BX
  7191                                  international_ok:
  7192 00000CBB 89D8                    	MOV	AX,BX			; Return country code in AX too.
  7193                                  ;SYS_RET_OK_jmp:
  7194                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7195                                  nono:	; 15/12/2022
  7196                                  SYS_RET_OK_jmp:
  7197 00000CBD E977F9                  	jmp	SYS_RET_OK
  7198                                  
  7199                                  international_set:
  7200                                  
  7201                                  ;hkn; ASSUME	DS:DOSGROUP
  7202                                  ;ASSUME	DS:DOSDATA
  7203                                  
  7204 00000CC0 BD0100                  	MOV	BP,1			; flag it for SetCodePage only
  7205 00000CC3 E8B5FF                  	CALL	international_get
  7206 00000CC6 73F3                    	JNC	short international_ok
  7207                                  errtn:
  7208 00000CC8 3CFF                    	CMP	AL,0FFH
  7209 00000CCA 7403                    	JZ	short errtn2
  7210                                  errtn1:
  7211 00000CCC E971F9                  	jmp	SYS_RET_ERR		; return what we got from NLSFUNC
  7212                                  errtn2:
  7213                                  	;error	error_invalid_function	; NLSFUNC not existent
  7214                                  
  7215                                  	;mov	al,1
  7216 00000CCF B001                    	mov	al,error_invalid_function 
  7217 00000CD1 EBF9                    	jmp	short errtn1 ; 13/05/2019 - Retro DOS v4.0
  7218                                  ;errtn3:
  7219                                  ;	jmp	SYS_RET_ERR
  7220                                  
  7221                                  ;EndProc $INTERNATIONAL
  7222                                  
  7223                                  ; 19/07/2018
  7224                                  
  7225                                  ;BREAK <$GetExtCntry - return extended country-dependent information>
  7226                                  
  7227                                  ;----------------------------------------------------------------------------
  7228                                  ;
  7229                                  ; Procedure Name : $GetExtCntry
  7230                                  ;
  7231                                  ; Inputs:
  7232                                  ;	if AL >= 20H
  7233                                  ;	  AL= 20H    capitalize single char, DL= char
  7234                                  ;	      21H    capitalize string, CX= string length
  7235                                  ;	      22H    capitalize ASCIIZ string
  7236                                  ;	      23H    YES/NO check, DL=1st char DH= 2nd char (DBCS)
  7237                                  ;	      80H bit 0 = use normal upper case table
  7238                                  ;		      1 = use file upper case table
  7239                                  ;	   DS:DX points to string
  7240                                  ;
  7241                                  ;	else
  7242                                  ;
  7243                                  ;	MOV	AH,GetExtCntry	 ; DOS 3.3
  7244                                  ;	MOV	AL,INFO_ID	( info type,-1 selects all )
  7245                                  ;	MOV	BX,CODE_PAGE	( -1 = active code page )
  7246                                  ;	MOV	DX,COUNTRY_ID	( -1 = active country )
  7247                                  ;	MOV	CX,SIZE 	( amount of data to return )
  7248                                  ;	LES	DI,COUNTRY_INFO ( buffer for returned data )
  7249                                  ;	INT	21
  7250                                  ; Function:
  7251                                  ;	give users extended country dependent information
  7252                                  ;	or capitalize chars
  7253                                  ; Outputs:
  7254                                  ;	  No Carry:
  7255                                  ;	     extended country info is succesfully returned
  7256                                  ;	  Carry:
  7257                                  ;	     Register AX has the error code.
  7258                                  ;	     AX=0, NO	 for YES/NO CHECK
  7259                                  ;		1, YES
  7260                                  ;----------------------------------------------------------------------------
  7261                                  
  7262                                  ;procedure   $GetExtCntry,NEAR	; DOS 3.3
  7263                                  
  7264                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7265                                  
  7266                                  	; MSDOS 6.0
  7267                                  _$GetExtCntry:
  7268 00000CD3 3C20                    	CMP	AL,CAP_ONE_CHAR 	; < 20H ?
  7269 00000CD5 7269                    	JB	short notcap
  7270                                  capcap: 				;
  7271 00000CD7 A880                    	TEST	AL,UPPER_TABLE	; 80h	; which upper case table
  7272 00000CD9 7505                    	JNZ	short fileupper		; file upper case
  7273                                  
  7274                                  ;hkn; UCASE_TAB in DOSDATA
  7275 00000CDB BB[AF0A]                	MOV	BX,UCASE_TAB+2		; get normal upper case
  7276 00000CDE EB05                    	JMP	SHORT capit
  7277                                  
  7278                                  fileupper:
  7279                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM - DOSCODE:4C57h)
  7280                                  	; ((Note: This must be a bugfix, because bit 7 of AX is 1 here!))
  7281                                  	; AL >= 80h
  7282 00000CE0 247F                    	and	al,7Fh 
  7283                                  
  7284                                  ;hkn; FILE_UCASE_TAB in DOSDATA
  7285 00000CE2 BB[310B]                	MOV	BX,FILE_UCASE_TAB+2 ; get file upper case
  7286                                  capit:					;
  7287 00000CE5 3C20                    	CMP	AL,CAP_ONE_CHAR 	; cap one char ?
  7288 00000CE7 750D                    	JNZ	short chkyes		; no
  7289 00000CE9 88D0                    	MOV	AL,DL			; set up AL
  7290 00000CEB E8D642                  	call	GETLET3 		; upper case it
  7291 00000CEE E890F7                  	call	Get_User_Stack		; get user stack
  7292                                  	;mov	[si+6],al
  7293 00000CF1 884406                  	MOV	[SI+user_env.user_DX],AL ; user's DL=AL
  7294 00000CF4 EBC7                    	JMP	SHORT nono		; done
  7295                                  chkyes: 				;
  7296 00000CF6 3C23                    	CMP	AL,CHECK_YES_NO	; 23h	; check YES or NO ?
  7297 00000CF8 7522                    	JNZ	short capstring		; no
  7298                                  
  7299 00000CFA 31C0                    	XOR	AX,AX			; presume NO
  7300                                  		      
  7301                                  ;hkn; NLS_YES, NLS_NO, NLS_yes2, NLS_no2 is defined in msdos.cl3 which is
  7302                                  ;hkn; included in yesno.asm in the DOSCODE segment.
  7303                                  
  7304                                  	; 06/08/2018 - Retro DOS v3.0
  7305                                  	; 13/05/2019 - Retro DOS v4.0
  7306                                  	;cmp	dl,'Y'
  7307 00000CFC 2E3A16[150A]            	CMP	DL,[cs:NLS_YES]		; is 'Y' ?
  7308 00000D01 7416                    	JZ	short yesyes		; yes
  7309                                  	;cmp	dl,'y'
  7310 00000D03 2E3A16[170A]            	CMP	DL,[cs:NLS_yes2]	; is 'y' ?
  7311 00000D08 740F                    	JZ	short yesyes		; yes
  7312                                  	;cmp	dl,'N'
  7313 00000D0A 2E3A16[160A]            	CMP	DL,[cs:NLS_NO]		; is  'N'?
  7314 00000D0F 74AC                    	JZ	short nono		; no
  7315                                  	;cmp	dl,'n'
  7316 00000D11 2E3A16[180A]            	CMP	DL,[cs:NLS_no2]		; is 'n' ?
  7317 00000D16 74A5                    	JZ	short nono		; no
  7318                                  ;dbcs_char:				;
  7319 00000D18 40                      	INC	AX			; not YES or NO
  7320                                  yesyes: 				;
  7321 00000D19 40                      	INC	AX			; return 1
  7322                                  	; 15/12/2022
  7323                                  ;nono:	
  7324 00000D1A EBA1                    	jmp	short SYS_RET_OK_jmp	;
  7325                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7326                                  	;jmp	SYS_RET_OK		; done
  7327                                  
  7328                                  capstring:				;
  7329 00000D1C 89D6                    	MOV	SI,DX			; si=dx
  7330 00000D1E 3C21                    	CMP	AL,CAP_STRING	; 21h	; cap string ?
  7331 00000D20 750D                    	JNZ	short capascii		; no
  7332                                  	;OR	CX,CX			; check count 0
  7333                                  	;JZ	short nono		; yes finished
  7334                                  	; 06/01/2024
  7335 00000D22 E399                    	jcxz	nono
  7336                                  concap: 				;
  7337 00000D24 AC                      	LODSB				; get char
  7338 00000D25 E89C42                  	call	GETLET3 		; upper case it
  7339 00000D28 8844FF                  	MOV	byte [SI-1],AL		; store back
  7340                                  ;next99: 				;
  7341 00000D2B E2F7                    	LOOP	concap			; continue
  7342 00000D2D EB8E                    	JMP	short nono		; done
  7343                                  capascii:				;
  7344 00000D2F 3C22                    	CMP	AL,CAP_ASCIIZ	; 22h	; cap ASCIIZ string ?
  7345 00000D31 7545                    	JNZ	short capinval		; no
  7346                                  concap2:				;
  7347 00000D33 AC                      	LODSB				; get char
  7348 00000D34 08C0                    	or	al,al			; end of string ?
  7349 00000D36 7485                    	JZ	short nono		; yes
  7350 00000D38 E88942                  	call	GETLET3 		; upper case it
  7351 00000D3B 8844FF                  	MOV	[SI-1],AL		; store back
  7352 00000D3E EBF3                    	JMP	short concap2 		; continue
  7353                                  
  7354                                  	; MSDOS 3.3 (& MSDOS 6.0)
  7355                                  
  7356                                  ; Offset 1A19h in IBMDOS.COM (MSDOS 3.3), 1987 	
  7357                                  ; _$GetExtCntry:
  7358                                  
  7359                                  notcap:
  7360 00000D40 83F905                  	CMP	CX,5			; minimum size is 5
  7361 00000D43 7277                    	jb	short sizeerror
  7362                                  
  7363                                  GEC_CONT:
  7364                                  ;hkn; SS is DOSDATA
  7365                                  	;context DS
  7366                                  
  7367 00000D45 16                      	push	ss
  7368                                  	;pop	es  ; ! (Retro DOS v3.0 BUG) !
  7369 00000D46 1F                      	pop	ds  ; 13/05/2019 - Retro DOS v4.0	
  7370                                  	
  7371                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7372 00000D47 BE[0012]                	MOV	SI,COUNTRY_CDPG
  7373                                  
  7374 00000D4A 83FAFF                  	CMP	DX,-1			; active country ?
  7375 00000D4D 7503                    	JNZ	short GETCDPG 		; no
  7376                                  
  7377                                  ;hkn; use DS override to accesss country_cdpg fields
  7378                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7379                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7380 00000D4F 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]
  7381                                  					; get active country id;smr;use DS
  7382                                  GETCDPG:
  7383 00000D52 83FBFF                  	CMP	BX,-1			; active code page?
  7384 00000D55 7503                    	JNZ	short CHKAGAIN		; no, check again
  7385                                  
  7386                                  ;hkn; use DS override to accesss country_cdpg fields
  7387                                  	;;mov	bx,[si+65h] ; MSDOS 3.3	
  7388                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7389 00000D57 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7390                                  					; get active code page id;smr;Use DS
  7391                                  CHKAGAIN:
  7392                                  	;cmp	dx,[si+68h] ; MSDOS 6.0
  7393 00000D5A 3B5468                  	CMP	DX,[SI+DOS_CCDPG.ccDosCountry]
  7394                                  					; same as active country id?;smr;use DS
  7395 00000D5D 7550                    	JNZ	short CHKNLS		; no
  7396                                  	;cmp	bx,[si+6Ah] ; MSDOS 6.0	
  7397 00000D5F 3B5C6A                  	CMP	BX,[SI+DOS_CCDPG.ccDosCodePage]	
  7398                                  					; same as active code pg id?;smr;use DS
  7399 00000D62 754B                    	JNZ	short CHKNLS		; no
  7400                                  CHKTYPE:
  7401                                  	;mov	bx,[si+48h]
  7402 00000D64 8B5C48                  	MOV	BX,[SI+DOS_CCDPG.ccSysCodePage]	
  7403                                  					; bx = sys code page id;smr;use DS
  7404 00000D67 51                      	PUSH	CX			; save cx
  7405                                  	;mov	cx,[si+4Ah]
  7406 00000D68 8B4C4A                  	MOV	CX,[SI+DOS_CCDPG.ccNumber_of_entries]  ;smr;use DS
  7407                                  	;mov	si,COUNTRY_CDPG+76
  7408 00000D6B BE[4C12]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccSetUcase   ;smr;CDPG in DOSDATA
  7409                                  NXTENTRY:
  7410 00000D6E 3A04                    	CMP	AL,[SI] 		; compare info type;smr;use DS
  7411 00000D70 740B                    	JZ	short FOUNDIT
  7412 00000D72 83C605                  	ADD	SI,5			; next entry
  7413 00000D75 E2F7                    	LOOP	NXTENTRY
  7414 00000D77 59                      	POP	CX
  7415                                  capinval:
  7416                                  	;error	error_invalid_function	; info type not found
  7417                                  	;mov	al,1
  7418 00000D78 B001                    	mov	al,error_invalid_function
  7419                                  ;SYS_RET_ERR_jmp:
  7420                                  	;jmp	SYS_RET_ERR
  7421                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7422                                  SYS_RET_ERR_jmp:
  7423 00000D7A E9C3F8                  	jmp	SYS_RET_ERR	
  7424                                  
  7425                                  FOUNDIT:
  7426 00000D7D A4                      	MOVSB				; move info id byte
  7427 00000D7E 59                      	POP	CX			; restore char count
  7428                                  	;cmp	al,1
  7429 00000D7F 3C01                    	CMP	AL,SetCountryInfo	; select country info type ?
  7430 00000D81 7415                    	JZ	short setsize
  7431 00000D83 B90400                  	MOV	CX,4			; 4 bytes will be moved
  7432 00000D86 B80500                  	MOV	AX,5			; 5 bytes will be returned in CX
  7433                                  OK_RETN:
  7434 00000D89 F3A4                    	REP	MOVSB			; copy info
  7435 00000D8B 89C1                    	MOV	CX,AX			; CX = actual length returned
  7436 00000D8D 89D8                    	MOV	AX,BX			; return sys code page in ax
  7437                                  GETDONE:
  7438 00000D8F E8EFF6                  	call	Get_User_Stack		; return actual length to user's CX
  7439                                  	;mov	[si+4],cx 
  7440 00000D92 894C04                  	MOV	[SI+user_env.user_CX],CX
  7441                                  	;jmp	SYS_RET_OK
  7442                                  	; 15/12/2022
  7443                                  	; 25/06/2019
  7444 00000D95 E9A2F8                  	jmp	SYS_RET_OK_clc
  7445                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7446                                  	; 15/12/2022
  7447                                  ;nono_jmp:
  7448                                  	;jmp	short nono
  7449                                  setsize:
  7450 00000D98 83E903                  	SUB	CX,3			; size after length field
  7451 00000D9B 390C                    	CMP	[SI],CX			; less than table size ;smr;use ds
  7452 00000D9D 7302                    	JAE	short setsize2		; no
  7453 00000D9F 8B0C                    	MOV	CX,[SI]			; truncate to table size ;smr;use ds
  7454                                  setsize2:
  7455 00000DA1 26890D                  	MOV	[ES:DI],CX		; copy actual length to user's
  7456                                  	;ADD	DI,2			; update index
  7457                                  	;ADD	SI,2
  7458                                  	; 06/01/2024
  7459 00000DA4 47                      	inc	di
  7460 00000DA5 47                      	inc	di
  7461 00000DA6 46                      	inc	si
  7462 00000DA7 46                      	inc	si
  7463 00000DA8 89C8                    	MOV	AX,CX
  7464 00000DAA 83C003                  	ADD	AX,3			; AX has the actual length
  7465 00000DAD EBDA                    	JMP	short OK_RETN 		; go move it
  7466                                  CHKNLS:
  7467 00000DAF 30E4                    	XOR	AH,AH
  7468                                  	;PUSH	AX			; save info type
  7469                                  	;POP	BP			; bp = info type
  7470                                  	; 06/01/2024
  7471 00000DB1 89C5                    	mov	bp,ax
  7472                                  	
  7473                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7474 00000DB3 B80014                  	mov     ax,1400h
  7475 00000DB6 CD2F                    	int     2Fh     ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7476                                  			; Return: AL = 00h not installed, OK to install
  7477                                  			; 01h not installed, not OK
  7478                                  			; FFh installed
  7479 00000DB8 3CFF                    	CMP	AL,0FFH
  7480 00000DBA 7404                    	JZ	short NLSNXT		; in memory
  7481                                  
  7482                                  sizeerror:
  7483                                  	;error	error_invalid_function
  7484                                  	;mov	al,1
  7485 00000DBC B001                    	mov	al,error_invalid_function
  7486                                  	;jmp	SYS_RET_ERR
  7487                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7488                                  sys_ret_err_jmp2:
  7489 00000DBE EBBA                    	jmp	short SYS_RET_ERR_jmp
  7490                                  
  7491                                  NLSNXT: 
  7492                                  	;CallInstall GetExtInfo,NLSFUNC,2 ;get extended info
  7493 00000DC0 B80214                  	mov     ax,1402h
  7494 00000DC3 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7495                                  			; BP = subfunction, BX = code page
  7496                                  			; DX = country code, DS:SI -> internal code page structure
  7497                                  			; ES:DI -> user buffer, CX = size of user buffer
  7498                                  			; Return: AL = status
  7499                                  			; 00h successful
  7500                                  			; else DOS error code
  7501                                  
  7502 00000DC5 3C00                    	CMP	AL,0			; success ?
  7503 00000DC7 7505                    	JNZ	short NLSERROR
  7504                                  	;mov	ax,[si+48h] ; 13/05/2019
  7505 00000DC9 8B4448                  	MOV	AX,[SI+DOS_CCDPG.ccSysCodePage]
  7506                                  			; ax = sys code page id;smr;use ds;
  7507                                  			;BUGBUG;check whether DS is OK after the above calls
  7508 00000DCC EBC1                    	JMP	short GETDONE
  7509                                  seterr:
  7510                                  	; 15/12/2022
  7511                                  NLSERROR:
  7512                                  	;jmp	SYS_RET_ERR		; return what is got from NLSFUNC
  7513                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7514                                  	;jmp	short sys_ret_err_jmp2
  7515                                  	; 15/12/2022
  7516 00000DCE EBAA                    	jmp	short SYS_RET_ERR_jmp
  7517                                  
  7518                                  ;EndProc $GetExtCntry
  7519                                  
  7520                                  ; 13/05/2019 - Retro DOS v4.0
  7521                                  ; DOSCODE:4BD6h (MSDOS 6.21, MSDOS.SYS)
  7522                                  
  7523                                  ;BREAK <$GetSetCdPg - get or set global code page>
  7524                                  ;----------------------------------------------------------------------------
  7525                                  ;**	$GetSetCdPg - Get or Set Global Code Page
  7526                                  ;
  7527                                  ;   System call format:
  7528                                  ;
  7529                                  ;	MOV	AH,GetSetCdPg	; DOS 3.3
  7530                                  ;	MOV	AL,n		; n = 1 : get code page, n = 2 : set code page
  7531                                  ;	MOV	BX,CODE_PAGE	(set code page only)
  7532                                  ;	INT	21
  7533                                  ;
  7534                                  ;	ENTRY	(al) = n
  7535                                  ;		(bx) = code page
  7536                                  ;	EXIT	'C' clear
  7537                                  ;		  global code page is set	(set global code page)
  7538                                  ;		  (BX) = active code page id	(get global code page)
  7539                                  ;		  (DX) = system code page id	(get global code page)
  7540                                  ;		'C' set
  7541                                  ;		  (AX) = error code
  7542                                  
  7543                                  ;procedure  $GetSetCdPg,NEAR   ; DOS 3.3
  7544                                  
  7545                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7546                                  	; DOSCODE:4BC9h
  7547                                  
  7548                                  _$GetSetCdPg:
  7549                                  
  7550                                  ;hkn; SS is DOSDATA
  7551                                  	;context DS
  7552                                  
  7553 00000DD0 16                      	push	ss
  7554 00000DD1 1F                      	pop	ds
  7555                                  
  7556                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7557 00000DD2 BE[0012]                	MOV	SI,COUNTRY_CDPG	  ; (DOSDATA:122Ah for MSDOS 6.21)
  7558                                  
  7559 00000DD5 3C01                    	CMP	AL,1		       ; get global code page
  7560 00000DD7 7512                    	JNZ	short setglpg 	       ; set global code page
  7561                                  	
  7562                                  	;;mov	bx,[si+65h] ; MSDOS 3.3
  7563                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7564 00000DD9 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7565                                  					; get active code page id;smr;use ds
  7566                                  	;mov	dx,[si+48h]
  7567 00000DDC 8B5448                  	MOV	DX,[SI+DOS_CCDPG.ccSysCodePage]
  7568                                  				  	; get sys code page id;smr;use ds
  7569 00000DDF E89FF6                  	call	Get_User_Stack
  7570                                  ;ASSUME DS:NOTHING
  7571                                  	;;mov	[si+2],bx
  7572                                  	;MOV	[SI+user_env.user_BX],BX ; update returned bx
  7573                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7574 00000DE2 E85BFE                  	call    set_user_bx	; MOV [SI+user_env.user_BX],BX 
  7575                                  	;mov	[si+6],dx
  7576 00000DE5 895406                  	MOV	[SI+user_env.user_DX],DX ; update returned dx
  7577                                  OK_RETURN:
  7578                                  	; 15/12/2022
  7579                                  	;transfer SYS_RET_OK
  7580 00000DE8 E94CF8                  	jmp	SYS_RET_OK
  7581                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7582                                  	;jmp	short nono_jmp
  7583                                  
  7584                                  ;hkn; ASSUME DS:DOSGROUP
  7585                                  ;ASSUME	DS:DOSDATA
  7586                                  
  7587                                  setglpg:
  7588 00000DEB 3C02                    	CMP	AL,2
  7589 00000DED 752F                    	JNZ	short nomem
  7590                                  	
  7591                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7592                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7593 00000DEF 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]	;smr;use ds
  7594                                  	
  7595                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7596 00000DF2 B80014                  	mov     ax,1400h
  7597 00000DF5 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7598                                  			; Return: AL = 00h not installed, OK to install
  7599                                  			; 01h not installed, not OK
  7600                                  			; FFh installed
  7601 00000DF7 3CFF                    	CMP	AL,0FFH
  7602 00000DF9 7523                    	JNZ	short nomem		; not in memory
  7603                                  
  7604                                  	;CallInstall SetCodePage,NLSFUNC,1 ;set the code page
  7605 00000DFB B80114                  	mov     ax,1401h
  7606 00000DFE CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - CHANGE CODE PAGE
  7607                                  			; DS:SI -> internal code page structure
  7608                                  			; BX = new code page, DX = country code???
  7609                                  			; Return: AL = status
  7610                                  			; 00h successful
  7611                                  			; else DOS error code
  7612                                  	;cmp	al,0
  7613 00000E00 08C0                    	or	al,al			; success ?
  7614 00000E02 74E4                    	JZ	short OK_RETURN		; yes
  7615                                  
  7616 00000E04 3C41                    	CMP	AL,65			; set device code page failed
  7617 00000E06 75C6                    	JNZ	short seterr
  7618                                  	;MOV	AX,65
  7619                                  	; 06/01/2024
  7620 00000E08 98                      	cbw
  7621 00000E09 A3[2403]                	MOV	[EXTERR],AX
  7622                                  	;mov	byte [EXTERR_ACTION],6
  7623                                  	;mov	byte [EXTERR_CLASS],5
  7624                                  	;mov	byte [EXTERR_LOCUS],4
  7625 00000E0C C606[2603]06            	MOV	byte [EXTERR_ACTION],errACT_Ignore
  7626 00000E11 C606[2703]05            	MOV	byte [EXTERR_CLASS],errCLASS_HrdFail
  7627 00000E16 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
  7628                                  	;transfer From_GetSet
  7629 00000E1B E92AF8                  	jmp	From_GetSet
  7630                                  
  7631                                  	; 15/12/2022
  7632                                  ;seterr:
  7633                                  	;;;transfer SYS_RET_ERR
  7634                                  	;;jmp	SYS_RET_ERR
  7635                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7636                                  	;jmp	short NLSERROR
  7637                                  
  7638                                  nomem:
  7639                                  	;error	error_invalid_function	; function not defined
  7640                                  	;mov	al,1
  7641 00000E1E B001                    	mov	al,error_invalid_function
  7642 00000E20 EBAC                    	jmp	short seterr
  7643                                  
  7644                                  ;EndProc $GetSetCdPg
  7645                                  
  7646                                  ; 09/01/2024
  7647                                  ; 13/05/2019 - Retro DOS v4.0
  7648                                  ; DOSCODE:4C2Bh (MSDOS 6.21, MSDOS.SYS)
  7649                                  
  7650                                  ;BREAK <$Get_Drive_Freespace -- Return bytes of free disk space on a drive>
  7651                                  ;----------------------------------------------------------------------------
  7652                                  ;**	$Get_Drive_Freespace - Return amount of drive free space
  7653                                  ;
  7654                                  ;	$Get_Drive_Freespace returns the # of free allocation units on a
  7655                                  ;		drive.
  7656                                  ;
  7657                                  ;	This call returns the same info in the same registers (except for the
  7658                                  ;	FAT pointer) as the old FAT pointer calls
  7659                                  ;
  7660                                  ;	ENTRY	DL = Drive number
  7661                                  ;	EXIT	AX = Sectors per allocation unit
  7662                                  ;		   = -1 if bad drive specified
  7663                                  ;		On User Stack
  7664                                  ;		    BX = Number of free allocation units
  7665                                  ;		    DX = Total Number of allocation units on disk
  7666                                  ;		    CX = Sector size
  7667                                  
  7668                                  ;procedure   $GET_DRIVE_FREESPACE,NEAR
  7669                                  
  7670                                  _$GET_DRIVE_FREESPACE:
  7671                                  
  7672                                  ;hkn; SS is DOSDATA
  7673                                  	;context DS
  7674 00000E22 16                      	push	ss
  7675 00000E23 1F                      	pop	ds
  7676                                  
  7677 00000E24 88D0                    	MOV	AL,DL
  7678                                  	;invoke	GetThisDrv		; Get drive
  7679 00000E26 E8C75B                  	call	GETTHISDRV
  7680                                  SET_AX_RET:
  7681 00000E29 7212                    	JC	short BADFDRV
  7682                                  	;invoke	DISK_INFO
  7683 00000E2B E8321E                  	call	DISK_INFO
  7684 00000E2E 87D3                    	XCHG	DX,BX
  7685                                  	;JC	short SET_AX_RET	; User FAILed to I 24
  7686                                  	; 06/01/2024
  7687 00000E30 720B                    	jc	short BADFDRV
  7688 00000E32 30E4                    	XOR	AH,AH			; Chuck Fat ID byte
  7689                                  DoSt:
  7690 00000E34 E84AF6                  	call	Get_User_Stack
  7691                                  ;ASSUME	DS:NOTHING
  7692                                  	;mov	[si+6],dx
  7693                                  	;;mov	[si+4],cx
  7694                                  	;;mov	[si+2],bx
  7695                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7696 00000E37 895406                  	MOV	[SI+user_env.user_DX],DX ; total clusters
  7697                                  	;MOV	[SI+user_env.user_CX],CX
  7698                                  	;MOV	[SI+user_env.user_BX],BX
  7699                                  	;;MOV	[SI+user_env.user_AX],AX
  7700                                  	;mov	[si],ax
  7701                                  	;;return
  7702                                  	;retn
  7703                                  	; 09/01/2024
  7704 00000E3A E9FEFD                  	jmp     gdrvfspc_ret    ; ax = sectors per cluster (modified)
  7705                                  
  7706                                  BADFDRV:
  7707                                  	; MSDOS 3.3
  7708                                  	;;mov	al,0Fh
  7709                                  	;mov	al,error_invalid_drive	; Assume error
  7710                                  
  7711                                  	; 13/05/2019 - Retro DOS v4.0
  7712                                  
  7713                                  	; MSDOS 6.0 & MSDOS 3.3
  7714                                  	;invoke	FCB_RET_ERR
  7715 00000E3D E816F8                  	call	FCB_RET_ERR
  7716                                  	
  7717 00000E40 B8FFFF                  	MOV	AX,-1
  7718 00000E43 EBEF                    	JMP	short DoSt
  7719                                  
  7720                                  ;EndProc $GET_DRIVE_FREESPACE
  7721                                  
  7722                                  ;	BREAK <$Get_DMA, $Set_DMA -- Get/Set current DMA address>
  7723                                  ;----------------------------------------------------------------------------
  7724                                  ;**	$Get_DMA - Get Disk Transfer Address
  7725                                  ;
  7726                                  ;	ENTRY	none
  7727                                  ;	EXIT	ES:BX is current transfer address
  7728                                  ;	USES	all
  7729                                  
  7730                                  	; 09/01/2024
  7731                                  _$GET_DMA:
  7732 00000E45 368B1E[2C03]            	MOV	BX,[SS:DMAADD]
  7733 00000E4A 368B0E[2E03]            	MOV	CX,[SS:DMAADD+2]
  7734 00000E4F E82FF6                  	call	Get_User_Stack
  7735                                  	;mov	[si+2],bx
  7736                                  	;mov	[si+10h],cx
  7737                                  	; 09/01/2024
  7738                                  	;MOV	[SI+user_env.user_BX],BX
  7739 00000E52 894C10                  	MOV	[SI+user_env.user_ES],CX
  7740                                  	;retn
  7741                                  	; 09/01/2024
  7742 00000E55 E9E8FD                  	jmp	set_user_bx ; (PCDOS 7.1 IBMDOS.COM)
  7743                                  
  7744                                  ;**	$Set_DMA - Set Disk Transfer Address
  7745                                  ;----------------------------------------------------------------------------
  7746                                  ;	ENTRY	DS:DX is current transfer address
  7747                                  ;	EXIT	none
  7748                                  ;	USES	all
  7749                                  
  7750                                  _$SET_DMA:
  7751 00000E58 368916[2C03]            	MOV	[SS:DMAADD],DX
  7752 00000E5D 368C1E[2E03]            	MOV	[SS:DMAADD+2],DS
  7753 00000E62 C3                      	retn
  7754                                  
  7755                                  ;	BREAK <$Get_Default_Drive, $Set_Default_Drive -- Set/Get default drive>
  7756                                  ;------------------------------------------------------------------------------
  7757                                  
  7758                                  ;**	$Get_Default_Drive - Get Current Default Drive
  7759                                  ;-----------------------------------------------------
  7760                                  ;	ENTRY	none
  7761                                  ;	EXIT	(AL) = drive number
  7762                                  ;	USES	all
  7763                                  
  7764                                  _$GET_DEFAULT_DRIVE:
  7765 00000E63 36A0[3603]              	MOV	AL,[SS:CURDRV]
  7766 00000E67 C3                      	retn
  7767                                  
  7768                                  ;**	$Set_Default_Drive - Specify new Default Drive
  7769                                  ;-----------------------------------------------------
  7770                                  ;	ENTRY	(DL) = Drive number for new default drive
  7771                                  ;	EXIT	(AL) = Number of drives, NO ERROR RETURN IF DRIVE NUMBER BAD
  7772                                  
  7773                                  _$SET_DEFAULT_DRIVE:
  7774 00000E68 88D0                    	MOV	AL,DL
  7775 00000E6A FEC0                    	INC	AL			; A=1, B=2...
  7776 00000E6C E8655B                  	call	GetVisDrv		; see if visible drive
  7777 00000E6F 7204                    	JC	short SETRET		; errors do not set
  7778 00000E71 36A2[3603]              	MOV	[SS:CURDRV],AL		; no, set
  7779                                  
  7780                                  SETRET:
  7781 00000E75 36A0[4700]              	MOV	AL,[SS:CDSCOUNT]	; let user see what the count really is
  7782 00000E79 C3                      	retn
  7783                                  
  7784                                  ;BREAK <$Get/Set_Interrupt_Vector - Get/Set interrupt vectors>
  7785                                  ;----------------------------------------------------------------------------
  7786                                  
  7787                                  ;**	$Get_Interrupt_Vector - Get Interrupt Vector
  7788                                  ;---------------------------------------------------
  7789                                  ;	$Get_Interrupt_Vector is the official way for user pgms to get the
  7790                                  ;	contents of an interrupt vector.
  7791                                  ;
  7792                                  ;	ENTRY	(AL) = interrupt number
  7793                                  ;	EXIT	(ES:BX) = current interrupt vector
  7794                                  
  7795                                  _$GET_INTERRUPT_VECTOR:
  7796 00000E7A E82E00                  	CALL	RECSET
  7797 00000E7D 26C41F                  	LES	BX,[ES:BX]
  7798 00000E80 E8FEF5                  	call	Get_User_Stack
  7799                                  set_user_es_bx:
  7800                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7801                                  	;;mov	[si+2],bx
  7802                                  	;mov	[si+10h],es
  7803                                  	;MOV	[SI+user_env.user_BX],BX
  7804 00000E83 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7805                                  	;retn
  7806 00000E86 E9B7FD                  	jmp	set_user_bx
  7807                                  
  7808                                  ;**	$Set_Interrupt_Vector - Set Interrupt Vector
  7809                                  ;---------------------------------------------------
  7810                                  ;	$Set_Interrupt_Vector is the official way for user pgms to set the
  7811                                  ;	contents of an interrupt vector.
  7812                                  ;
  7813                                  ;	M004, M068: Also set A20OFF_COUNT to 1 if EXECA20OFF bit has been set 
  7814                                  ;	and if A20OFF_COUNT is non-zero. See under tag M003 in inc\dossym.inc 
  7815                                  ;	for explanation.
  7816                                  ;
  7817                                  ;	ENTRY	(AL) = interrupt number
  7818                                  ;		(ds:dx) = desired new vector value
  7819                                  ;	EXIT	none
  7820                                  ;	USES	all
  7821                                  
  7822                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7823                                  ; 13/05/2019 - Retro DOS v4.0
  7824                                  
  7825                                  _$SET_INTERRUPT_VECTOR:
  7826 00000E89 E81F00                  	CALL	RECSET
  7827 00000E8C FA                      	CLI				; Watch out!!!!! Folks sometimes use
  7828 00000E8D 268917                  	MOV	[ES:BX],DX		;   this for hardware ints (like timer).
  7829 00000E90 268C5F02                	MOV	[ES:BX+2],DS
  7830 00000E94 FB                      	STI
  7831                                  					; M004, M068 - Start
  7832                                  	; MSDOS 6.0
  7833 00000E95 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF ; 4
  7834                                  					; Q: was the previous call an int 21h
  7835                                  					;    exec call
  7836                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7837                                  	;jnz	short siv_1		; Y: go set count
  7838                                  	;retn				; N: return
  7839                                  	; 15/12/2022
  7840 00000E9B 740D                    	jz	short siv_2
  7841                                  siv_1:	
  7842 00000E9D 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT],0 ; Q: is count 0
  7843 00000EA3 7505                    	jnz	short siv_2		 ; N: done
  7844                                  	; 20/09/2023
  7845 00000EA5 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]
  7846                                  	;mov	byte [ss:A20OFF_COUNT],1 ; Y: set it to 1 to indicate to dos
  7847                                  					 ; dispatcher to turn A20 Off before
  7848                                  					 ; returning to user.
  7849                                  siv_2:
  7850                                  	; 07/12/2022
  7851 00000EAA C3                      	retn				; M004, M068 - End
  7852                                  	
  7853                                  RECSET:
  7854 00000EAB 31DB                    	XOR	BX,BX
  7855 00000EAD 8EC3                    	MOV	ES,BX
  7856 00000EAF 88C3                    	MOV	BL,AL
  7857 00000EB1 D1E3                    	SHL	BX,1
  7858 00000EB3 D1E3                    	SHL	BX,1
  7859 00000EB5 C3                      	retn
  7860                                  
  7861                                  ;	BREAK <$Char_Oper - hack on paths, switches so that xenix can look like PCDOS>
  7862                                  ;-------------------------------------------------------------------------------------
  7863                                  
  7864                                  ;**	$Char_Oper - Manipulate Switch Character
  7865                                  ;
  7866                                  ;	This function was put in to facilitate XENIX path/switch compatibility
  7867                                  ;
  7868                                  ;	ENTRY	AL = function:
  7869                                  ;		    0 - read switch char
  7870                                  ;		    1 - set switch char (char in DL)
  7871                                  ;		    2 - read device availability
  7872                                  ;			Always returns available
  7873                                  ;		    3 - set device availability
  7874                                  ;			No longer supported (NOP)
  7875                                  ;	EXIT	(al) = 0xff iff error
  7876                                  ;		(al) != 0xff if ok
  7877                                  ;		  (dl) = character/flag, if "read switch char" subfunction
  7878                                  ;	USES	AL, DL
  7879                                  ;
  7880                                  ;	NOTE	This already obsolete function has been deactivated in DOS 5.0
  7881                                  ;		The character / is always returned for subfunction 0,
  7882                                  ;		subfunction 2 always returns -1, all other subfunctions are ignored.
  7883                                  
  7884                                  ; 13/05/2019 - Retro DOS v4.0
  7885                                  ; DOSCODE:4CC9h (MSDOS 6.21, MSDOS.SYS)
  7886                                  
  7887                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7888                                  ; DOSCODE:4CBCh (MSDOS 5.0, MSDOS.SYS)
  7889                                  
  7890                                  _$CHAR_OPER:
  7891                                  	; MSDOS 6.0
  7892 00000EB6 08C0                    	or	al,al				; get switch?
  7893 00000EB8 B22F                    	mov	dl,'/'				; assume yes
  7894 00000EBA 7407                    	jz	short chop_1			; jump if yes
  7895 00000EBC 3C02                    	cmp	al,2				; check device availability?
  7896 00000EBE B2FF                    	mov	dl,-1				; assume yes
  7897 00000EC0 7401                    	jz	short chop_1			; jump if yes
  7898 00000EC2 C3                      	retn					; otherwise just quit
  7899                                  
  7900                                  ; subfunctions requiring return of value to user come here. DL holds
  7901                                  ; value to return
  7902                                  
  7903                                  chop_1:
  7904 00000EC3 E8BBF5                  	call	Get_User_Stack
  7905 00000EC6 895406                  	mov	[SI+user_env.user_DX],dx	; store value for user
  7906 00000EC9 C3                      	retn
  7907                                  
  7908                                  	; MSDOS 3.3
  7909                                  	; Offset 1B87h in IBMDOS.COM (MSDOS 3.3), 1987
  7910                                  	;push	ss
  7911                                  	;pop	ds
  7912                                  	;cmp	al,1
  7913                                  	;jb	short chop_1
  7914                                  	;jz	short chop_2
  7915                                  	;cmp	al,3
  7916                                  	;jb	short chop_3
  7917                                  	;jz	short chop_5
  7918                                  	;mov	al,0FFh
  7919                                  	;retn
  7920                                  ;chop_1:
  7921                                  	;mov	dl,[chSwitch]
  7922                                  	;jmp	short chop_4
  7923                                  ;chop_2:
  7924                                  	;mov	[chSwitch],dl
  7925                                  	;retn
  7926                                  ;chop_3:
  7927                                  	;mov	dl, FFh
  7928                                  ;chop_4:
  7929                                  	;call	Get_User_Stack
  7930                                  	;mov	[si+6],dx
  7931                                  ;chop_5:
  7932                                  	;retn
  7933                                  
  7934                                  ;**	$GetExtendedError - Return Extended error code
  7935                                  ;----------------------------------------------------------------------------
  7936                                  ;	This function reads up the extended error info from the static
  7937                                  ;	variables where it was stored.
  7938                                  ;
  7939                                  ;	ENTRY	none
  7940                                  ;	EXIT	AX = Extended error code (0 means no extended error)
  7941                                  ;		BL = recommended action
  7942                                  ;		BH = class of error
  7943                                  ;		CH = locus of error
  7944                                  ;		ES:DI = may be pointer
  7945                                  ;	USES	ALL
  7946                                  
  7947                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7948                                  
  7949                                  _$GetExtendedError:
  7950 00000ECA 16                      	push	ss
  7951 00000ECB 1F                      	pop	ds
  7952 00000ECC A1[2403]                	MOV	AX,[EXTERR]
  7953 00000ECF C43E[2803]              	LES	DI,[EXTERRPT]
  7954 00000ED3 8B1E[2603]              	MOV	BX,[EXTERR_ACTION]	; BL = Action, BH = Class
  7955 00000ED7 8A2E[2303]              	MOV	CH,[EXTERR_LOCUS]
  7956 00000EDB E8A3F5                  	call	Get_User_Stack
  7957                                  	;mov	[si+0Ah],di
  7958 00000EDE 897C0A                  	MOV	[SI+user_env.user_DI],DI
  7959                                  
  7960                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7961                                  	;;mov	[si+10h],es
  7962                                  	;MOV	[SI+user_env.user_ES],ES
  7963                                  	;;mov	[si+2],bx
  7964                                  	;MOV	[SI+user_env.user_BX],BX
  7965 00000EE1 E89FFF                  	call	set_user_es_bx
  7966                                  
  7967                                  	;mov	[si+4],cx
  7968 00000EE4 894C04                  	MOV	[SI+user_env.user_CX],CX
  7969                                  jmp_SYS_RET_OK:
  7970                                  	; 15/12/2022
  7971                                  	;jmp	SYS_RET_OK
  7972                                  	; 25/06/2019
  7973 00000EE7 E950F7                  	jmp	SYS_RET_OK_clc ; 15/12/2022
  7974                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7975                                  ;jmp_SYS_RET_OK:
  7976                                  	;jmp	SYS_RET_OK
  7977                                  
  7978                                  ; --------------------------------------------------------------------------
  7979                                  ; 09/01/2024
  7980                                  %if 0
  7981                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7982                                  	; DOSCODE:4CF3h
  7983                                  ;patch_or_unknown:
  7984                                  ;get_code_page:
  7985                                  	push    si
  7986                                  	mov     si, COUNTRY_CDPG
  7987                                  	;mov	ax, [si+DOS_CCDPG.ccDosCodePage]
  7988                                  	mov     ax, [ss:si+6Ah]
  7989                                  	pop     si
  7990                                  	retn
  7991                                  %endif
  7992                                  ; --------------------------------------------------------------------------
  7993                                  
  7994                                  ; 29/04/2019 - Retro DOS v4.0
  7995                                  
  7996                                  ;BREAK	<ECS_call - Extended Code System support function>
  7997                                  ;---------------------------------------------------------------------------
  7998                                  ; Inputs:
  7999                                  ;	AL = 0	get lead byte table
  8000                                  ;		on return DS:SI has the table location
  8001                                  ;
  8002                                  ;	AL = 1	set / reset interim console flag
  8003                                  ;		DL = flag (00H or 01H)
  8004                                  ;		no return
  8005                                  ;
  8006                                  ;	AL = 2	get interim console flag
  8007                                  ;		on return DL = current flag value
  8008                                  ;
  8009                                  ;	AL = OTHER then error, and returns with:
  8010                                  ;		AX = error_invalid_function
  8011                                  ;
  8012                                  ;  NOTE: THIS CALL DOES GUARANTEE THAT REGISTER OTHER THAN
  8013                                  ;	 SS:SP WILL BE PRESERVED!
  8014                                  ;---------------------------------------------------------------------------
  8015                                  
  8016                                  _$ECS_Call:
  8017 00000EEA 08C0                    	or	al,al			; AL = 0 (get table)?
  8018                                  	;jnz	short _okok
  8019                                  	; 15/12/2022
  8020 00000EEC 7403                    	jz	short get_lbt
  8021                                  ;_okok:
  8022 00000EEE E946F7                  	jmp	SYS_RET_OK
  8023                                  get_lbt:
  8024 00000EF1 E88DF5                  	call	Get_User_Stack		; *
  8025                                  
  8026                                  ;hkn; dbcs_table moved low to dosdata
  8027                                  	;mov	word [si+8],DBCS_TAB+2
  8028 00000EF4 C74408[E50C]            	mov	word [si+user_env.user_SI],DBCS_TAB+2
  8029                                  
  8030 00000EF9 06                      	push	es
  8031                                  	;getdseg <es>			; es = DOSDATA
  8032 00000EFA 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  8033                                  	;mov	[si+14],es
  8034 00000EFF 8C440E                  	mov	[SI+user_env.user_DS],es
  8035 00000F02 07                      	pop	es
  8036                                  
  8037                                  	; 15/12/2022
  8038 00000F03 EBE2                    	jmp	short jmp_SYS_RET_OK ; jmp SYS_RET_OK_clc ; *
  8039                                  ;_okok:
  8040                                  	; 15/12/2022	
  8041                                  	;;transfer SYS_RET_OK
  8042                                  	;jmp	short jmp_SYS_RET_OK
  8043                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8044                                  	;;jmp	SYS_RET_OK
  8045                                  	;jmp	short jmp_SYS_RET_OK
  8046                                  
  8047                                  ;============================================================================
  8048                                  ; PARSE.ASM, MSDOS 6.0, 1991
  8049                                  ;============================================================================
  8050                                  ; 19/07/2018 - Retro DOS v3.0
  8051                                  ; 15/05/2019 - Retro DOS v4.0
  8052                                  
  8053                                  ; System calls for parsing command lines
  8054                                  ;
  8055                                  ;   $PARSE_FILE_DESCRIPTOR
  8056                                  ;
  8057                                  ;   Modification history:
  8058                                  ;
  8059                                  ;       Created: ARR 30 March 1983
  8060                                  ;               EE PathParse 10 Sept 1983
  8061                                  ;
  8062                                  
  8063                                  ;BREAK <$Parse_File_Descriptor -- Parse an arbitrary string into an FCB>
  8064                                  ;---------------------------------------------------------------------------
  8065                                  ; Inputs:
  8066                                  ;       DS:SI Points to a command line
  8067                                  ;       ES:DI Points to an empty FCB
  8068                                  ;       Bit 0 of AL = 1 At most one leading separator scanned off
  8069                                  ;                   = 0 Parse stops if separator encountered
  8070                                  ;       Bit 1 of AL = 1 If drive field blank in command line - leave FCB
  8071                                  ;                   = 0  "    "    "     "         "      "  - put 0 in FCB
  8072                                  ;       Bit 2 of AL = 1 If filename field blank - leave FCB
  8073                                  ;                   = 0  "       "      "       - put blanks in FCB
  8074                                  ;       Bit 3 of AL = 1 If extension field blank - leave FCB
  8075                                  ;                   = 0  "       "      "        - put blanks in FCB
  8076                                  ; Function:
  8077                                  ;       Parse command line into FCB
  8078                                  ; Returns:
  8079                                  ;       AL = 1 if '*' or '?' in filename or extension, 0 otherwise
  8080                                  ;       DS:SI points to first character after filename
  8081                                  ;---------------------------------------------------------------------------
  8082                                  
  8083                                  _$PARSE_FILE_DESCRIPTOR:
  8084 00000F05 E85E3F                  	call	MAKEFCB
  8085 00000F08 56                      	PUSH    SI
  8086 00000F09 E875F5                  	call	Get_User_Stack
  8087                                  	;pop	word [si+8]
  8088 00000F0C 8F4408                  	POP     word [SI+user_env.user_SI]
  8089 00000F0F C3                      	retn
  8090                                  
  8091                                  ;============================================================================
  8092                                  ; MISC.ASM, MSDOS 6.0, 1991
  8093                                  ;============================================================================
  8094                                  ; 19/07/2018 - Retro DOS v3.0
  8095                                  
  8096                                  ; 29/04/2019 - Retro DOS v4.0
  8097                                  
  8098                                  ;ENTRYPOINTSEG	EQU	0CH
  8099                                  ;MAXDIF		EQU	0FFFH
  8100                                  ;SAVEXIT 	EQU	10
  8101                                  ;WRAPOFFSET	EQU	0FEF0h
  8102                                  
  8103                                  ;
  8104                                  ;----------------------------------------------------------------------------
  8105                                  ;
  8106                                  ;**	$SLEAZEFUNC - Get a Pointer to the Media Byte
  8107                                  ;
  8108                                  ;	Return Stuff sort of like old get fat call
  8109                                  ;
  8110                                  ;	ENTRY	none
  8111                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  8112                                  ;			GOD help anyone who tries to do ANYTHING except
  8113                                  ;			READ this ONE byte.
  8114                                  ;		DX = Total Number of allocation units on disk
  8115                                  ;		CX = Sector size
  8116                                  ;		AL = Sectors per allocation unit
  8117                                  ;		   = -1 if bad drive specified
  8118                                  ;	USES	all
  8119                                  ;
  8120                                  ;**	$SLEAZEFUNCDL - Get a Pointer to the Media Byte
  8121                                  ;
  8122                                  ;	Identical to $SLEAZEFUNC except (dl) = drive
  8123                                  ;
  8124                                  ;	ENTRY	(dl) = drive (0=default, 1=A, 2=B, etc.)
  8125                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  8126                                  ;			GOD help anyone who tries to do ANYTHING except
  8127                                  ;			READ this ONE byte.
  8128                                  ;		DX = Total Number of allocation units on disk
  8129                                  ;		CX = Sector size
  8130                                  ;		AL = Sectors per allocation unit
  8131                                  ;		   = -1 if bad drive specified
  8132                                  ;	USES	all
  8133                                  ;
  8134                                  ;----------------------------------------------------------------------------
  8135                                  ;
  8136                                  
  8137                                  _$SLEAZEFUNC:
  8138                                  	; 10/01/2024
  8139                                  	; 15/05/2019 - Retro DOS v4.0
  8140 00000F10 B200                    	MOV	DL,0
  8141                                  _$SLEAZEFUNCDL:
  8142 00000F12 16                      	push	ss
  8143 00000F13 1F                      	pop	ds
  8144                                  	
  8145 00000F14 88D0                    	MOV	AL,DL
  8146 00000F16 E8D75A                  	call	GETTHISDRV		; Get CDS structure
  8147                                  SET_AL_RET:
  8148                                  	; MSDOS 3.3
  8149                                  	;;mov	al, 0Fh
  8150                                  	;MOV	AL,error_invalid_drive	; Assume error	;AC000;
  8151                                  	
  8152                                  	; MSDOS 6.0 & MSDOS 3.3
  8153 00000F19 721D                    	JC	short BADSLDRIVE
  8154                                  
  8155 00000F1B E8421D                  	call	DISK_INFO
  8156                                  	;JC	short SET_AL_RET	; User FAILed to I 24
  8157 00000F1E 7218                    	jc	short BADSLDRIVE
  8158 00000F20 8826[9805]              	MOV	[FATBYTE],AH
  8159                                  
  8160                                  ; NOTE THAT A FIXED MEMORY CELL IS USED --> THIS CALL IS NOT
  8161                                  ; RE-ENTRANT. USERS BETTER GET THE ID BYTE BEFORE THEY MAKE THE
  8162                                  ; CALL AGAIN
  8163                                  
  8164                                  	; 10/01/2024
  8165                                  	;MOV	DI,FATBYTE
  8166 00000F24 30E4                    	XOR	AH,AH			; AL has sectors/cluster
  8167 00000F26 E858F5                  	call	Get_User_Stack
  8168                                  	;mov	[si+4],cx
  8169                                  	;mov	[si+6],bx
  8170                                  	;mov	[si+2],di
  8171 00000F29 894C04                  	MOV	[SI+user_env.user_CX],CX
  8172 00000F2C 895C06                  	MOV	[SI+user_env.user_DX],BX
  8173                                  	;MOV	[SI+user_env.user_BX],DI
  8174                                  	; 10/01/2024
  8175 00000F2F C74402[9805]            	MOV	word [SI+user_env.user_BX],FATBYTE
  8176                                  	
  8177                                  	;mov	[si+0Eh],ss
  8178 00000F34 8C540E                  	MOV     [SI+user_env.user_DS],SS ; stash correct pointer
  8179                                  
  8180 00000F37 C3                      	retn
  8181                                  
  8182                                  BADSLDRIVE:
  8183 00000F38 E91BF7                  	jmp	FCB_RET_ERR
  8184                                  
  8185                                  ;
  8186                                  ;----------------------------------------------------------------------------
  8187                                  ;
  8188                                  ;**	$Get_INDOS_Flag - Return location of DOS Critical Section Flag
  8189                                  ;
  8190                                  ;	Returns location of DOS status for interrupt routines
  8191                                  ;
  8192                                  ;	ENTRY	none
  8193                                  ;	EXIT	(es:bx) = flag location
  8194                                  ;	USES	all
  8195                                  ;
  8196                                  ;----------------------------------------------------------------------------
  8197                                  ;
  8198                                  
  8199                                  _$GET_INDOS_FLAG:
  8200 00000F3B E843F5                          CALL	Get_User_Stack
  8201                                          ;MOV	WORD [SI+2],INDOS
  8202 00000F3E C74402[2103]            	MOV     word [SI+user_env.user_BX],INDOS
  8203                                  getin_segm:	; 13/01/2024
  8204                                  	;MOV	[SI+10H],SS
  8205 00000F43 8C5410                  	MOV	[SI+user_env.user_ES],SS
  8206 00000F46 C3                      	RETN 
  8207                                  ;
  8208                                  ;----------------------------------------------------------------------------
  8209                                  ;
  8210                                  ;**	$Get_IN_Vars - Return Pointer to DOS Variables
  8211                                  ;
  8212                                  ;	Return a pointer to interesting DOS variables This call is version
  8213                                  ;	dependent and is subject to change without notice in future versions.
  8214                                  ;	Use at risk.
  8215                                  ;
  8216                                  ;	ENTRY	none
  8217                                  ;	EXIT	(es:bx) = address of SYSINITVAR
  8218                                  ;	uses	ALL
  8219                                  ;
  8220                                  ;----------------------------------------------------------------------------
  8221                                  ;
  8222                                  
  8223                                  	; 13/01/2024
  8224                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:5226h
  8225                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:4D65h
  8226                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:4D58h	
  8227                                  
  8228                                  _$GET_IN_VARS:
  8229 00000F47 E837F5                  	CALL	Get_User_Stack
  8230                                  	;MOV	WORD [SI+2],SYSINITVAR
  8231                                  	;MOV	word [SI+user_env.user_BX],SYSINITVAR
  8232 00000F4A C74402[2600]            	MOV	word [SI+user_env.user_BX],SYSINITVARS
  8233                                  	; 13/01/2024
  8234                                  	;;MOV	[SI+10H],SS
  8235                                  	;MOV	[SI+user_env.user_ES],SS
  8236                                  	;RETN
  8237 00000F4F EBF2                    	jmp	short getin_segm
  8238                                  
  8239                                  ;
  8240                                  ;----------------------------------------------------------------------------
  8241                                  ;
  8242                                  ;**	$Get_Default_DPB - Return a pointer to the Default DPB
  8243                                  ;
  8244                                  ;	Return pointer to drive parameter table for default drive
  8245                                  ;
  8246                                  ;	ENTRY	none
  8247                                  ;	EXIT	(ds:bx) = DPB address
  8248                                  ;	USES	all
  8249                                  ;
  8250                                  ;**	$Get_DPB - Return a pointer to a specified DPB
  8251                                  ;
  8252                                  ;	Return pointer to a specified drive parameter table
  8253                                  ;
  8254                                  ;	ENTRY	(dl) = drive # (0 = default, 1=A, 2=B, etc.)
  8255                                  ;	EXIT	(al) = 0 iff ok
  8256                                  ;		  (ds:bx) = DPB address
  8257                                  ;		(al) = -1 if bad drive
  8258                                  ;	USES	all
  8259                                  ;
  8260                                  ;----------------------------------------------------------------------------
  8261                                  ;
  8262                                  
  8263                                  ; 15/05/2019 - Retro DOS v4.0
  8264                                  
  8265                                  _$GET_DEFAULT_DPB:
  8266 00000F51 B200                    	MOV	DL,0
  8267                                  _$GET_DPB:
  8268 00000F53 16                      	push	ss
  8269 00000F54 1F                      	pop	ds
  8270                                  
  8271 00000F55 88D0                    	MOV	AL,DL
  8272 00000F57 E8965A                  	call	GETTHISDRV		; Get CDS structure
  8273 00000F5A 7222                    	JC	short ISNODRV 		; no valid drive
  8274 00000F5C C43E[A205]              	LES	DI,[THISCDS]		; check for net CDS
  8275                                  	;;test	word [es:di+43h],8000h
  8276                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  8277                                  	;test	byte [es:di+44h],80h
  8278 00000F60 26F6454480              	test	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  8279 00000F65 7517                    	JNZ	short ISNODRV 		; No DPB to point at on NET stuff
  8280 00000F67 E88903                  	call	ECritDisk
  8281 00000F6A E8C046                  	call	FATREAD_CDS		; Force Media Check and return DPB
  8282 00000F6D E89E03                  	call	LCritDisk
  8283 00000F70 720C                    	JC	short ISNODRV 		; User FAILed to I 24, only error we
  8284                                  					;   have.
  8285 00000F72 E80CF5                  	call	Get_User_Stack
  8286                                  	;mov	[si+2],bp
  8287 00000F75 896C02                  	MOV	[SI+user_env.user_BX],BP
  8288                                  	;mov	[si+0Eh],es
  8289 00000F78 8C440E                  	MOV	[SI+user_env.user_DS],ES
  8290 00000F7B 30C0                    	XOR	AL,AL
  8291 00000F7D C3                      	retn
  8292                                  ISNODRV:
  8293 00000F7E B0FF                    	MOV	AL,-1
  8294 00000F80 C3                      	retn
  8295                                  
  8296                                  ;
  8297                                  ;----------------------------------------------------------------------------
  8298                                  ;
  8299                                  ;**	$Disk_Reset - Flush out Dirty Buffers
  8300                                  ;
  8301                                  ;	$DiskReset flushes and invalidates all buffers.  BUGBUG - do
  8302                                  ;		we really invalidate?  SHould we?  THis screws non-removable
  8303                                  ;		caching.  Maybe CHKDSK relies upon it, though....
  8304                                  ;
  8305                                  ;	ENTRY	none
  8306                                  ;	EXIT	none
  8307                                  ;	USES	all
  8308                                  ;
  8309                                  ;----------------------------------------------------------------------------
  8310                                  ;
  8311                                  
  8312                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8313                                  	; DOSCODE:4D94h
  8314                                  _$DISK_RESET:
  8315                                  	; 15/05/2019 - Retro DOS v4.0
  8316 00000F81 B0FF                    	mov	al,0FFh	; -1
  8317 00000F83 16                      	push	ss
  8318 00000F84 1F                      	pop	ds
  8319                                  	; 06/11/2022
  8320                                  	;MOV	AL,-1
  8321 00000F85 E86B03                  	call	ECritDisk
  8322                                  	; MSDOS 6.0
  8323                                  	;;or	word [DOS34_FLAG],4
  8324                                  	;or	word [DOS34_FLAG],FROM_DISK_RESET    ;AN000;
  8325 00000F88 800E[1106]04            	or	byte [DOS34_FLAG],FROM_DISK_RESET ; 4 ; 15/05/2019
  8326 00000F8D E8164A                  	call	FLUSHBUF
  8327                                  	; MSDOS 6.0
  8328                                  	;and	word [DOS34_FLAG],0FFFBh
  8329                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8330                                  	;and	word [DOS34_FLAG],NO_FROM_DISK_RESET ;AN000;
  8331                                  	; 15/12/2022
  8332 00000F90 8026[1106]FB            	and	byte [DOS34_FLAG],NO_FROM_DISK_RESET ; 0FBh ; 15/05/2019
  8333 00000F95 C706[B50D]0000          	mov	word [SC_STATUS],0	; Throw out secondary cache M041
  8334                                  ;
  8335                                  ; We will "ignore" any errors on the flush, and go ahead and invalidate. This
  8336                                  ; call doesn't return any errors and it is supposed to FORCE a known state, so
  8337                                  ; let's do it.
  8338                                  ;
  8339                                  ; Invalidate 'last-buffer' used
  8340                                  ;
  8341 00000F9B BBFFFF                  	MOV	BX,-1 ; 0FFFFh	
  8342 00000F9E 891E[2000]              	MOV	[LastBuffer+2],BX
  8343 00000FA2 891E[1E00]              	MOV	[LastBuffer],BX
  8344                                  
  8345                                  	; MSDOS 3.3 
  8346                                  	; IBMDOS.COM, Offset 1C66h
  8347                                  	;;;;
  8348                                  	;lds	si,[BUFFHEAD]
  8349                                  	;mov	ax,20FFh	; .buf_ID,    AL = FFh (Free buffer)
  8350                                  				; .buf_flags, AH = 0, reset/clear
  8351                                  ;DRST_1:
  8352                                  	;;mov	[si+4],ax
  8353                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8354                                  	;lds	si,[SI]
  8355                                  	;cmp	si,bx ; -1
  8356                                  	;je	short DRST_2
  8357                                  	;;mov	[si+4],ax
  8358                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8359                                  	;lds	si,[SI]
  8360                                  	;cmp	si,bx
  8361                                  	;jne	short DRST_1
  8362                                  	;;;;
  8363                                  ;DRST_2:
  8364 00000FA6 E86503                  	call	LCritDisk
  8365 00000FA9 B8FFFF                  	MOV	AX,-1
  8366                                  	; 07/12/2022
  8367                                  	;mov	ax,0FFFFh
  8368                                  	;CallInstall NetFlushBuf,MultNET,32,AX,AX
  8369 00000FAC 50                      	push	ax ; * MSDOS 6.0 ; 15/05/2019
  8370 00000FAD B82011                  	mov     ax,1120h
  8371 00000FB0 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS
  8372                                  			; DS = DOS CS
  8373                                  			; Return: CF clear (successful)
  8374 00000FB2 58                      	pop	ax ; * MSDOS 6.0 ; 15/05/2019
  8375                                  	
  8376 00000FB3 C3                      	retn
  8377                                  
  8378                                  	; 19/07/2018 - Retro DOS v3.0
  8379                                  
  8380                                  ;
  8381                                  ;	BREAK <$SetDPB - Create a valid DPB from a user-specified BPB>
  8382                                  ;
  8383                                  ;----------------------------------------------------------------------------
  8384                                  ;
  8385                                  ;**	$SetDPB - Create a DPB
  8386                                  ;
  8387                                  ;	SetDPB Creates a valid DPB from a user-specified BPB
  8388                                  ;
  8389                                  ;	ENTRY	ES:BP Points to DPB
  8390                                  ;		DS:SI Points to BPB
  8391                                  ;	EXIT	DPB setup
  8392                                  ;	USES	ALL but BP, DS, ES
  8393                                  ;
  8394                                  ;----------------------------------------------------------------------------
  8395                                  ;
  8396                                  
  8397                                  ; 10/05/2019 - Retro DOS v4.0
  8398                                  
  8399                                  ; DOSCODE:4DD6h (MSDOS 6.21, MSDOS.SYS)
  8400                                  
  8401                                  ; MSDOS 6.0
  8402 00000FB4 0300                    word3:	dw	3			; M008 -- word value for divides
  8403                                  
  8404                                  ; 13/01/2024
  8405                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8406                                  ; DOSCODE:4DC9h (MSDOS 5.0, MSDOS.SYS)
  8407                                  
  8408                                  ;procedure   $SETDPB,NEAR
  8409                                  
  8410                                  _$SETDPB:
  8411 00000FB6 89EF                    	MOV	DI,BP
  8412                                  	;ADD	DI,2			; Skip over dpb_drive and dpb_UNIT
  8413                                  	; 13/01/2024
  8414 00000FB8 47                      	inc	di
  8415 00000FB9 47                      	inc	di
  8416 00000FBA AD                      	LODSW
  8417 00000FBB AB                      	STOSW				; dpb_sector_size
  8418                                  	; MSDOS 6.0
  8419                                  	;cmp	byte [si+3],0
  8420 00000FBC 807C0300                	CMP	BYTE [SI+A_BPB.BPB_NUMBEROFFATS-2],0 ; FAT file system drive ;AN000;
  8421 00000FC0 7509                    	JNZ	short yesfat			     ; yes		;AN000;
  8422                                  	;mov	byte [es:di+4],0
  8423 00000FC2 26C6450400              	MOV	BYTE [ES:DI+DPB.FAT_COUNT-4],0
  8424                                  	; 13/01/2024
  8425 00000FC7 89C3                    	mov	bx,ax
  8426 00000FC9 EB70                    	JMP	short setend			     ; NO		;AN000;
  8427                                  
  8428                                  yesfat: ; 10/08/2018
  8429 00000FCB 89C2                    	MOV	DX,AX
  8430 00000FCD AC                      	LODSB
  8431                                  	;DEC	AL
  8432                                  	; 17/12/2022
  8433 00000FCE 48                      	dec	ax
  8434 00000FCF AA                      	STOSB				; dpb_cluster_mask
  8435                                  	;INC	AL
  8436 00000FD0 40                      	inc	ax
  8437 00000FD1 30E4                    	XOR	AH,AH
  8438                                  LOG2LOOP:
  8439 00000FD3 A801                    	test	AL,1
  8440 00000FD5 7506                    	JNZ	short SAVLOG
  8441 00000FD7 FEC4                    	INC	AH
  8442 00000FD9 D0E8                    	SHR	AL,1
  8443 00000FDB EBF6                    	JMP	SHORT LOG2LOOP
  8444                                  SAVLOG:
  8445 00000FDD 88E0                    	MOV	AL,AH
  8446 00000FDF AA                      	STOSB				; dpb_cluster_shift
  8447 00000FE0 88C3                    	MOV	BL,AL
  8448 00000FE2 A5                      	MOVSW				; dpb_first_FAT Start of FAT (# of reserved sectors)
  8449 00000FE3 AC                      	LODSB
  8450 00000FE4 AA                      	STOSB				; dpb_FAT_count Number of FATs
  8451                                  ;	OR	AL,AL			; NONFAT ?				;AN000;
  8452                                  ;	JZ	short setend		; yes, don't do anything                ;AN000;
  8453 00000FE5 88C7                    	MOV	BH,AL
  8454 00000FE7 AD                      	LODSW
  8455 00000FE8 AB                      	STOSW				; dpb_root_entries Number of directory entries
  8456 00000FE9 B105                    	MOV	CL,5
  8457 00000FEB D3EA                    	SHR	DX,CL			; Directory entries per sector
  8458 00000FED 48                      	DEC	AX
  8459 00000FEE 01D0                    	ADD	AX,DX			; Cause Round Up
  8460 00000FF0 89D1                    	MOV	CX,DX
  8461 00000FF2 31D2                    	XOR	DX,DX
  8462 00000FF4 F7F1                    	DIV	CX
  8463 00000FF6 89C1                    	MOV	CX,AX			; Number of (root) directory sectors
  8464 00000FF8 47                      	INC	DI
  8465 00000FF9 47                      	INC	DI			; Skip dpb_first_sector
  8466 00000FFA A5                      	MOVSW			; Total number of sectors in DSKSIZ (temp as dpb_max_cluster)
  8467 00000FFB AC                      	LODSB
  8468                                  	;mov	[es:bp+17h],al
  8469 00000FFC 26884617                	MOV	[ES:BP+DPB.MEDIA],AL	; Media byte
  8470 00001000 AD                      	LODSW				; Number of sectors in a FAT
  8471                                  	
  8472                                  	;;;
  8473                                  	;MSDOS 3.3
  8474                                  	;
  8475                                  	;STOSB		; DPB.FAT_SIZE
  8476                                  	;MUL	BH
  8477                                  	
  8478                                  	;MSDOS 6.0
  8479                                  	;
  8480 00001001 AB                      	STOSW		; DPB.FAT_SIZE	;AC000;;>32mb dpb_FAT_size
  8481 00001002 88FA                    	MOV	DL,BH			;AN000;;>32mb
  8482 00001004 30F6                    	XOR	DH,DH			;AN000;;>32mb
  8483 00001006 F7E2                    	MUL	DX			;AC000;;>32mb Space occupied by all FATs
  8484                                  	;;;
  8485                                  	
  8486                                  	;add	ax,[es:bp+6]
  8487 00001008 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
  8488 0000100C AB                      	STOSW				; dpb_dir_sector
  8489 0000100D 01C8                    	ADD	AX,CX			; Add number of (root) directory sectors
  8490                                  	;mov	[es:bp+0Bh],ax
  8491 0000100F 2689460B                	MOV	[ES:BP+DPB.FIRST_SECTOR],AX
  8492                                  	
  8493                                  	; MSDOS 6.0
  8494 00001013 88D9                    	MOV	CL,BL			;F.C. >32mb				;AN000;
  8495                                  	;;cmp	word [es:bp+0Dh],0
  8496                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8497                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8498                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8499                                  	; 15/12/2022
  8500                                  	; 28/07/2019
  8501 00001015 268B5E0D                	mov	bx,[ES:BP+DSKSIZ]
  8502 00001019 09DB                    	or	bx,bx
  8503 0000101B 751A                    	JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8504                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8505                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8506                                  	
  8507                                  
  8508 0000101D 30ED                    	XOR	CH,CH			;F.C. >32mb				;AN000;
  8509                                  	;mov	bx,[si+8]
  8510 0000101F 8B5C08                  	MOV	BX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK]	;AN000;
  8511                                  	;mov	dx,[si+10]
  8512 00001022 8B540A                  	MOV	DX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK+2]	;AN000;
  8513 00001025 29C3                    	SUB	BX,AX			;AN000;;F.C. >32mb
  8514 00001027 83DA00                  	SBB	DX,0			;AN000;;F.C. >32mb
  8515 0000102A 09C9                    	OR	CX,CX			;AN000;;F.C. >32mb
  8516 0000102C 7407                    	JZ	short norot		;AN000;;F.C. >32mb
  8517                                  rott:					;AN000;;F.C. >32mb
  8518 0000102E F8                      	CLC				;AN000;;F.C. >32mb
  8519 0000102F D1DA                    	RCR	DX,1			;AN000;;F.C. >32mb
  8520 00001031 D1DB                    	RCR	BX,1			;AN000;;F.C. >32mb
  8521 00001033 E2F9                    	LOOP	rott			;AN000;;F.C. >32mb
  8522                                  norot:					;AN000;
  8523                                  	; 15/12/2022
  8524                                  	;MOV	AX,BX			;AN000;;F.C. >32mb
  8525 00001035 EB04                    	JMP	short setend		;AN000;;F.C. >32mb
  8526                                  normal_dpb:
  8527                                  	;;sub	ax,[es:bp+0Dh]
  8528                                  	;SUB	AX,[ES:BP+DSKSIZ]
  8529                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8530                                  	; 15/12/2022
  8531                                  	; bx = [es:bp+DSKSIZ]
  8532                                  	;sub	ax,bx ; 28/07/2019
  8533                                  	;;SUB	AX,[ES:BP+DSKSIZ]
  8534                                  	; 15/12/2022
  8535 00001037 29C3                    	sub	bx,ax
  8536                                  	;NEG	AX			; Sectors in data area
  8537                                  ;;	MOV	CL,BL			; dpb_cluster_shift
  8538                                  	; 15/12/2022
  8539                                  	; CL = cluster shift
  8540                                  	; BX = number of data sectors 
  8541                                  	;SHR	AX,CL			; Div by sectors/cluster
  8542 00001039 D3EB                    	shr	bx,cl 
  8543                                  setend:
  8544                                  ;	M008 - CAS
  8545                                  ;
  8546                                  	; 15/12/2022
  8547 0000103B 43                      	inc	bx
  8548                                  	;INC	AX			; +2 (reserved), -1 (count -> max)
  8549                                  ;
  8550                                  ;	There has been a bug in our fatsize calculation for so long
  8551                                  ;	  that we can't correct it now without causing some user to
  8552                                  ;	  experience data loss. There are even cases where allowing
  8553                                  ;	  the number of clusters to exceed the fats is the optimal
  8554                                  ;	  case -- where adding 2 more fat sectors would make the
  8555                                  ;	  data field smaller so that there's nothing to use the extra
  8556                                  ;	  fat sectors for.
  8557                                  ;
  8558                                  ;	Note that this bug had very minor known symptoms. CHKDSK would
  8559                                  ;	  still report that there was a cluster left when the disk was
  8560                                  ;	  actually full. Very graceful failure for a corrupt system
  8561                                  ;	  configuration. There may be worse cases that were never
  8562                                  ;	  properly traced back to this bug. The problem cases only
  8563                                  ;	  occurred when partition sizes were very near FAT sector
  8564                                  ;	  rounding boundaries, which were rare cases.
  8565                                  ;
  8566                                  ;	Also, it's possible that some third-party partition program might
  8567                                  ;	  create a partition that had a less-than-perfect FAT calculation
  8568                                  ;	  scheme. In this hypothetical case, the number of allocation
  8569                                  ;	  clusters which don't actually have FAT entries to represent
  8570                                  ;	  them might be larger and might create a more catastrophic
  8571                                  ;	  failure. So we'll provide the safeguard of limiting the
  8572                                  ;	  max_cluster to the amount that will fit in the FATs.
  8573                                  ;
  8574                                  ;	ax = maximum legal cluster, ES:BP -> dpb
  8575                                  
  8576                                  ;	make sure the number of fat sectors is actually enough to
  8577                                  ;	  hold that many clusters. otherwise, back the number of
  8578                                  ;	  clusters down
  8579                                  
  8580                                  	; 15/12/2022
  8581                                  	; bx = number of clusters
  8582                                  
  8583                                  	; 19/07/2018 - Retro DOS v3.0
  8584                                  	; MSDOS 6.0
  8585                                  	; 15/12/2022
  8586                                  	;mov	bx,ax			; remember calculated # clusters
  8587                                  
  8588                                  	; 01/08/2018 (MSDOS 3.3)
  8589                                  	;mov	al,[ES:BP+DPB.FAT_SIZE]
  8590                                  	;xor	ah,ah 
  8591                                  
  8592                                  	; 10/05/2019 - Retro DOS v4.0
  8593                                  	;mov	ax,[ES:BP+0Fh]
  8594 0000103C 268B460F                	mov	ax,[ES:BP+DPB.FAT_SIZE]
  8595                                  
  8596                                  	;mul	word [es:bp+2]	
  8597 00001040 26F76602                	mul	word [ES:BP+DPB.SECTOR_SIZE] ; how big is the FAT?
  8598 00001044 81FBF60F                	cmp	bx,4096-10  ; 0FF6h	; test for 12 vs. 16 bit fat
  8599 00001048 720D                    	jb	short setend_fat12
  8600 0000104A D1EA                    	shr	dx,1
  8601                                  
  8602                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8603                                  	; 15/12/2022
  8604                                  ;cs3 7/2/92
  8605 0000104C 751C                    	jnz	short setend_faterr	; some bonehead gave us more fatspace
  8606                                  					; than enough for the maximum FAT,
  8607                                  					; so go ahead and use the calculated
  8608                                  					; number of clusters.
  8609                                  ;cs3 7/2/92
  8610                                  
  8611 0000104E D1D8                    	rcr	ax,1			; find number of entries
  8612 00001050 3DF70F                  	cmp	ax,4096-10+1		; would this truncation move us
  8613                                  ;					;  into 12-bit fatland?
  8614 00001053 7215                    	jb	short setend_faterr	; then go ahead and let the
  8615                                  ;					;  inconsistency pass through
  8616                                  ;					;  rather than lose data by
  8617                                  ;					;  correcting the fat type
  8618 00001055 EB0E                    	jmp	short setend_fat16
  8619                                  
  8620                                  setend_fat12:
  8621 00001057 01C0                    	add	ax,ax			; (fatsiz*2)/3 = # of fat entries
  8622 00001059 11D2                    	adc	dx,dx
  8623                                  
  8624                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8625                                  ;cs3 7/2/92
  8626                                  	; 15/12/2022
  8627 0000105B 83FA03                  	cmp	dx,3			; if our fatspace is WAY more than
  8628 0000105E 730A                    	jnb	short setend_faterr	; we need, we may get an overflow
  8629                                  					; here. Check for it and use
  8630                                  					; the calculated size in this case.
  8631                                  ;cs3 7/2/92
  8632                                  
  8633 00001060 2EF736[B40F]            	div	word [cs:word3]
  8634                                  
  8635                                  setend_fat16:
  8636 00001065 48                      	dec	ax			; limit at 1
  8637 00001066 39D8                    	cmp	ax,bx			; is fat big enough?
  8638 00001068 7602                    	jbe	short setend_fat	; use max value that'll fit
  8639                                  
  8640                                  setend_faterr:
  8641 0000106A 89D8                    	mov	ax,bx			; use calculated value
  8642                                  
  8643                                  setend_fat:
  8644                                  
  8645                                  ;	now ax = maximum legal cluster
  8646                                  
  8647                                  ;	end M008
  8648                                  
  8649                                  	;mov	[es:bp+0Dh], ax
  8650 0000106C 2689460D                	MOV	[ES:BP+DPB.MAX_CLUSTER],AX
  8651                                  	;;mov	word [es:bp+1Ch],0  ; MSDOS 3.3
  8652                                  	;mov	word [es:bp+1Dh],0  ; MSDOS 6.0
  8653 00001070 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 
  8654                                  					; Init so first ALLOC starts at
  8655                                  					; begining of FAT
  8656                                  	;;mov	word [es:bp+1Eh],-1 ; MSDOS 3.3
  8657                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
  8658 00001076 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; current count is invalid.
  8659                                  
  8660 0000107C C3                      	retn
  8661                                  
  8662                                  ;EndProc $SETDPB
  8663                                  
  8664                                  ;BREAK <$Create_Process_Data_Block,SetMem -- Set up process data block>
  8665                                  
  8666                                  ;
  8667                                  ;----------------------------------------------------------------------------
  8668                                  ;
  8669                                  ;**	$Dup_PDB
  8670                                  ;
  8671                                  ; Inputs:   DX is new segment address of process
  8672                                  ;	    SI is end of new allocation block
  8673                                  ;
  8674                                  ;----------------------------------------------------------------------------
  8675                                  ;
  8676                                  
  8677                                  _$DUP_PDB:
  8678                                  
  8679                                  ;hkn;	CreatePDB would have a CS override. This is not valid.
  8680                                  ;hkn;	Must set up ds in order to acess CreatePDB. Also SS is 
  8681                                  ;hkn;	has been assumed to be NOTHING. It may not have DOSDATA.
  8682                                  
  8683                                  	; MSDOS 3.3
  8684                                  	;MOV	byte [CS:CreatePDB],0FFh  ; indicate a new process
  8685                                  	;MOV	DS,[CS:CurrentPDB]
  8686                                  
  8687                                  	; 15/05/2019 - Retro DOS v4.0
  8688                                  	; MSDOS 6.0
  8689 0000107D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  8690 00001082 C606[A803]FF            	MOV	byte [CreatePDB],0FFh
  8691 00001087 8E1E[3003]              	MOV	DS,[CurrentPDB]
  8692                                  
  8693 0000108B 56                      	PUSH	SI
  8694 0000108C EB0A                    	JMP	SHORT CreateCopy
  8695                                  
  8696                                  ;
  8697                                  ;----------------------------------------------------------------------------
  8698                                  ;
  8699                                  ; Inputs:
  8700                                  ;	DX = Segment number of new base
  8701                                  ; Function:
  8702                                  ;	Set up program base and copy term and ^C from int area
  8703                                  ; Returns:
  8704                                  ;	None
  8705                                  ; Called at DOS init
  8706                                  ;
  8707                                  ;----------------------------------------------------------------------------
  8708                                  ;
  8709                                  
  8710                                  ; 15/05/2019 - Retro DOS v4.0
  8711                                  ; DOSCODE:4EB6h (MSDOS 6.21, MSDOS.SYS)
  8712                                  
  8713                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8714                                  ; DOSCODE:4EA2h (MSDOS 5.0, MSDOS.SYS)
  8715                                  
  8716                                  _$CREATE_PROCESS_DATA_BLOCK:
  8717                                  			; Offset 1D02h in IBMDOS.COM (MSDOS 3.3), 1987
  8718 0000108E E8F0F3                  	CALL	Get_User_Stack
  8719                                  	;mov	ds,[si+14h]
  8720 00001091 8E5C14                  	MOV	DS,[SI+user_env.user_CS]
  8721                                  	;push	word [2]
  8722 00001094 FF360200                	PUSH	word [PDB.BLOCK_LEN] ;*
  8723                                  CreateCopy:
  8724 00001098 8EC2                    	MOV	ES,DX
  8725                                  
  8726 0000109A 31F6                    	XOR	SI,SI			; copy entire PDB
  8727 0000109C 89F7                    	MOV	DI,SI
  8728 0000109E B98000                  	MOV	CX,128
  8729 000010A1 F3A5                    	REP	MOVSW
  8730                                  
  8731                                  ; DOS 3.3 7/9/86
  8732                                  	;mov	cx,20
  8733                                  	;MOV	CX,FILPERPROC		; copy handles in case of
  8734                                  	; 15/12/2022
  8735 000010A3 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8736                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8737                                  	;mov	cx,FILPERPROC
  8738                                  
  8739                                  	;mov	di,18h
  8740 000010A5 BF1800                  	MOV	DI,PDB.JFN_TABLE	; Set Handle Count has been issued
  8741                                  	;;PUSH	DS ; * 15/05/2019
  8742                                  	;;lds	si,[34h]
  8743                                  	;LDS	SI,[PDB.JFN_Pointer]
  8744                                  	;REP	MOVSB
  8745                                  	;;POP	DS ; * 15/05/2019
  8746                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8747                                  	; 05/12/2022
  8748                                  	; (push ds then pop ds is not needed here!)
  8749                                  	;push	ds
  8750                                  	;lds	si,[34h]
  8751 000010A8 C5363400                	lds	si,[PDB.JFN_Pointer]
  8752 000010AC F3A4                    	rep	movsb
  8753                                  	;pop	ds
  8754                                  
  8755                                  ; DOS 3.3 7/9/86
  8756                                  	;hkn ;CreatePDB would have a CS override. This is not valid.
  8757                                  	;hkn ;Must set up ds in order to access CreatePDB. Also SS is 
  8758                                  	;hkn ;has been assumed to be NOTHING. It may not have DOSDATA.
  8759                                  
  8760 000010AE 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] ; 15/05/2019
  8761                                  
  8762                                  	;;test	byte [cs:CreatePDB],0FFh
  8763                                  	;cmp	byte [CS:CreatePDB],0	; Shall we create a process?
  8764                                  	; 17/12/2022
  8765 000010B3 380E[A803]              	cmp	[CreatePDB],cl ; 0
  8766                                  	;cmp	byte [CreatePDB],0 ; 15/05/2019
  8767 000010B7 744A                    	JZ	short Create_PDB_cont 	; nope, old style call
  8768                                  
  8769                                  ; Here we set up for a new process...
  8770                                  
  8771                                  	;PUSH	CS			; Called at DOSINIT time, NO SS
  8772                                  	;POP	DS
  8773                                  
  8774                                  	; MSDOS 6.0
  8775                                  	;;getdseg <ds>			; ds -> dosdata
  8776                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8777                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8778                                  	; (nonsense! but i put this for addr compatibility as temporary)
  8779                                  	; 15/12/2022
  8780                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8781                                  
  8782 000010B9 31DB                    	XOR	BX,BX			; dup all jfns
  8783                                  	;mov	cx,20
  8784                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8785                                  	;MOV	CX,FILPERPROC		; only 20 of them
  8786                                  	; 15/12/2022
  8787 000010BB B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8788                                  
  8789                                  Create_dup_jfn:
  8790 000010BD 06                      	PUSH	ES ;**			; save new PDB
  8791 000010BE E80B55                  	call	SFFromHandle		; get sf pointer
  8792 000010C1 B0FF                    	MOV	AL,-1			; unassigned JFN
  8793 000010C3 7224                    	JC	short CreateStash	; file was not really open
  8794                                  	;;test	word [es:di+5],1000h
  8795                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_no_inherit
  8796                                  	; 15/05/2019
  8797                                  	;test	byte [es:di+6],10h
  8798 000010C5 26F6450610              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_no_inherit>>8)
  8799 000010CA 751D                    	JNZ	short CreateStash	; if no-inherit bit is set, skip dup.
  8800                                  
  8801                                  ; We do not inherit network file handles.
  8802                                  
  8803                                  	;mov	ah,[es:di+2]
  8804 000010CC 268A6502                	MOV	AH,[ES:DI+SF_ENTRY.sf_mode]
  8805                                  	;and	ah,0F0h
  8806 000010D0 80E4F0                  	AND	AH,SHARING_MASK
  8807                                  	;cmp	ah,70h
  8808 000010D3 80FC70                  	CMP	AH,SHARING_NET_FCB
  8809 000010D6 7411                    	jz	short CreateStash
  8810                                  
  8811                                  ; The handle we have found is duplicatable (and inheritable). Perform
  8812                                  ; duplication operation.
  8813                                  
  8814 000010D8 893E[9E05]              	MOV	[THISSFT],DI
  8815 000010DC 8C06[A005]              	MOV	[THISSFT+2],ES
  8816 000010E0 E8D918                  	call	DOS_DUP 		; signal duplication
  8817                                  
  8818                                  ; get the old sfn for copy
  8819                                  
  8820 000010E3 E8C954                  	call	pJFNFromHandle		; ES:DI is jfn
  8821 000010E6 268A05                  	MOV	AL,[ES:DI]		; get sfn
  8822                                  
  8823                                  ; Take AL (old sfn or -1) and stash it into the new position
  8824                                  
  8825                                  CreateStash:
  8826 000010E9 07                      	POP	ES ;**
  8827                                  	;mov	[es:bx+18h],al
  8828 000010EA 26884718                	MOV	[ES:BX+PDB.JFN_TABLE],AL ; copy into new place!
  8829 000010EE 43                      	INC	BX			; next jfn...
  8830 000010EF E2CC                    	LOOP	Create_dup_jfn
  8831                                  
  8832 000010F1 8B1E[3003]              	MOV	BX,[CurrentPDB]		; get current process
  8833                                  	; 06/11/2022
  8834                                  	;mov	[es:16h],bx
  8835 000010F5 26891E1600              	MOV	[ES:PDB.PARENT_PID],BX	; stash in child
  8836 000010FA 8C06[3003]              	MOV	[CurrentPDB],ES
  8837                                  	;MOV	DS,BX ; 28/07/2019
  8838                                  	; 07/12/2022
  8839                                  	;mov	ds,[cs:DosDSeg]
  8840                                  	; 15/12/2022
  8841                                  	; ds = [cs:DosDSeg]
  8842 000010FE C606[A803]00            	mov	byte [CreatePDB],0	; reset flag
  8843                                  	;mov	ds,bx
  8844                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8845                                  	; 15/12/2022
  8846                                  	;mov	ds,bx
  8847                                  
  8848                                  ; end of new process create
  8849                                  
  8850                                  Create_PDB_cont:
  8851                                  	;MOV	BYTE [CS:CreatePDB],0	; reset flag
  8852                                  
  8853                                  ;hkn; It comes to this point from 2 places. So, change to DOSDATA temporarily	
  8854                                  
  8855                                  	;; 28/07/2019
  8856                                  	;;push	ds
  8857                                  	;;mov	ds,[cs:DosDSeg]
  8858                                  	;mov	byte [CreatePDB],0
  8859                                  	;;pop	ds
  8860                                  
  8861                                  ; 05/12/2022
  8862                                  ;	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8863                                  ;	; (push-pop ds is nonsense here! 
  8864                                  ;	;  but i am using same code with original MSDOS.SYS
  8865                                  ;	;  for address compatibility.)
  8866                                  ;	push	ds
  8867                                  ;	; ds = [cs:DosDSeg] !
  8868                                  ;	mov	ds,[cs:DosDSeg]  ; again !
  8869                                  ;	mov	byte [CreatePDB],0
  8870                                  ;	pop	ds
  8871                                  
  8872 00001103 58                      	POP	AX ;*
  8873                                  
  8874                                  	;entry	SETMEM
  8875                                  
  8876                                  	; 17/12/2022
  8877                                  	; cx = 0
  8878                                  
  8879                                  ;---------------------------------------------------------------------------
  8880                                  ; Inputs:
  8881                                  ;	AX = Size of memory in paragraphs
  8882                                  ;	DX = Segment
  8883                                  ; Function:
  8884                                  ;	Completely prepares a program base at the
  8885                                  ;	specified segment.
  8886                                  ; Called at DOS init
  8887                                  ; Outputs:
  8888                                  ;	DS = DX
  8889                                  ;	ES = DX
  8890                                  ;	[0] has INT int_abort
  8891                                  ;	[2] = First unavailable segment
  8892                                  ;	[5] to [9] form a long call to the entry point
  8893                                  ;	[10] to [13] have exit address (from int_terminate)
  8894                                  ;	[14] to [17] have ctrl-C exit address (from int_ctrl_c)
  8895                                  ;	[18] to [21] have fatal error address (from int_fatal_abort)
  8896                                  ; DX,BP unchanged. All other registers destroyed.
  8897                                  ;---------------------------------------------------------------------------
  8898                                  
  8899                                  SETMEM:
  8900                                  	;XOR	CX,CX
  8901                                  	; 17/12/2022
  8902                                  	; cx = 0
  8903 00001104 8ED9                    	MOV	DS,CX
  8904 00001106 8EC2                    	MOV	ES,DX
  8905                                  	;mov	si,88h
  8906 00001108 BE8800                  	MOV	SI,addr_int_terminate
  8907                                  	;mov	di,10 ; 0Ah
  8908 0000110B BF0A00                  	MOV	DI,SAVEXIT
  8909                                  	;MOV	CX,6
  8910                                  	; 15/12/2022
  8911 0000110E B106                    	mov	cl,6
  8912 00001110 F3A5                    	REP	MOVSW
  8913 00001112 26A30200                	MOV	[ES:2],AX
  8914 00001116 29D0                    	SUB	AX,DX
  8915 00001118 3DFF0F                  	CMP	AX,MAXDIF ; 0FFFh
  8916 0000111B 7603                    	JBE	short HAVDIF
  8917 0000111D B8FF0F                  	MOV	AX,MAXDIF
  8918                                  HAVDIF:
  8919 00001120 83E810                  	SUB	AX,10h			; Allow for 100h byte "stack"
  8920 00001123 BB0C00                  	MOV	BX,ENTRYPOINTSEG ; 0Ch	;	in .COM files
  8921 00001126 29C3                    	SUB	BX,AX
  8922 00001128 B104                    	MOV	CL,4
  8923 0000112A D3E0                    	SHL	AX,CL
  8924 0000112C 8EDA                    	MOV	DS,DX
  8925                                  
  8926                                  	; (MSDOS 6.0 note)
  8927                                  	;
  8928                                  	; The address in BX:AX will be F01D:FEF0 if there is 64K or more 
  8929                                  	; memory in the system. This is equivalent to 0:c0 if A20 is OFF.
  8930                                  	; If DOS is in HMA this equivalence is no longer valid as A20 is ON.
  8931                                  	; But the BIOS which now resides in FFFF:30 has 5 bytes in FFFF:D0
  8932                                  	; (F01D:FEF0) which is the same as the ones in 0:C0, thereby 
  8933                                  	; making this equvalence valid for this particular case. If however
  8934                                  	; there is less than 64K remaining the address in BX:AX will not 
  8935                                  	; be the same as above. We will then stuff 0:c0, the call 5 address
  8936                                  	; into the PSP.
  8937                                  	;
  8938                                  	; Therefore for the case where there is less than 64K remaining in 
  8939                                  	; the system old CPM Apps that look at PSP:6 to determine memory
  8940                                  	; requirements will not work. Call 5, however will continue to work
  8941                                  	; for all cases.
  8942                                  	;
  8943                                  
  8944                                  	;mov	[6],ax
  8945                                  	;mov	[8],bx
  8946                                  
  8947 0000112E A30600                  	MOV	[PDB.CPM_CALL+1],AX
  8948 00001131 891E0800                	MOV	[PDB.CPM_CALL+3],BX
  8949                                  
  8950                                  	; 06/05/2019 - Retro DOS v4.0
  8951 00001135 3DF0FE                  	cmp	ax,WRAPOFFSET ; 0FEF0h	; Q: does the system have >= 64k of
  8952                                  					;    memory left
  8953 00001138 740C                    	je	short addr_ok		; Y: the above calculated address is
  8954                                  					;    OK
  8955                                  					; N: 
  8956                                  
  8957 0000113A C7060600C000            	MOV	WORD [PDB.CPM_CALL+1],0C0h
  8958 00001140 C70608000000            	MOV	WORD [PDB.CPM_CALL+3],0
  8959                                  addr_ok:
  8960                                  	;mov	word [0],20CDh
  8961 00001146 C7060000CD20            	MOV	word [PDB.EXIT_CALL],(int_abort*256) + mi_INT
  8962                                  	;mov	byte [5],9Ah
  8963 0000114C C60605009A              	MOV	BYTE [PDB.CPM_CALL],mi_Long_CALL
  8964                                  	;mov	word [50h],21CDh
  8965 00001151 C7065000CD21            	MOV	WORD [PDB.CALL_SYSTEM],(int_command*256) + mi_INT
  8966                                  	;mov	byte [52h],0CBh
  8967 00001157 C6065200CB              	MOV	BYTE [PDB.CALL_SYSTEM+2],mi_Long_RET
  8968                                  	;mov	word [34h],18h
  8969 0000115C C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE
  8970                                  	;mov	word [36h],ds
  8971 00001162 8C1E3600                	MOV	WORD [PDB.JFN_Pointer+2],DS
  8972                                  	;mov	word [32h],20
  8973 00001166 C70632001400            	MOV	WORD [PDB.JFN_Length],FILPERPROC
  8974                                  ;
  8975                                  ; The server runs several PDB's without creating them VIA EXEC.  We need to
  8976                                  ; enumerate all PDB's at CPS time in order to find all references to a
  8977                                  ; particular SFT.  We perform this by requiring that the server link together
  8978                                  ; for us all sub-PDB's that he creates. The requirement for us, now, is to
  8979                                  ; initialize this pointer.
  8980                                  ;
  8981                                   	;mov	word [38h],-1
  8982 0000116C C7063800FFFF            	MOV	word [PDB.Next_PDB],-1
  8983                                  	;mov	word [3Ah],-1
  8984 00001172 C7063A00FFFF            	MOV	word [PDB.Next_PDB+2],-1
  8985                                  
  8986                                  	; 06/05/2019
  8987                                  	; Set the real version number in the PSP - 5.00
  8988                                  
  8989                                  	;mov	word [es:PDB.Version],1406h ; MSDOS 6.21 (DOSCODE:4FB6h)
  8990                                  	; 07/12/2022
  8991 00001178 26C70640000616          	mov	word [ES:PDB.Version],(MINOR_VERSION*256)+MAJOR_VERSION
  8992                                  
  8993 0000117F C3                      	retn
  8994                                  
  8995                                  ; 29/04/2019 - Retro DOS v4.0
  8996                                  
  8997                                  ;BREAK <$GSetMediaID -- get set media ID>
  8998                                  
  8999                                  ;---------------------------------------------------------------------------
  9000                                  ; Inputs:
  9001                                  ;	BL= drive number as defined in IOCTL
  9002                                  ;	AL= 0 get media ID
  9003                                  ;	    1 set media ID
  9004                                  ;	DS:DX= buffer containing information
  9005                                  ;		DW  0  info level (set on input)
  9006                                  ;		DD  ?  serial #
  9007                                  ;		DB  11 dup(?)  volume id
  9008                                  ;		DB   8 dup(?)  file system type
  9009                                  ; Function:
  9010                                  ;	Get or set media ID
  9011                                  ; Returns:
  9012                                  ;	carry clear, DS:DX is filled
  9013                                  ;	carry set, error
  9014                                  ;---------------------------------------------------------------------------
  9015                                  
  9016                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9017                                  _$GSetMediaID:
  9018                                  	; RAWIO - GET_MEDIA_ID
  9019 00001180 B96608                  	mov	cx,0866h	      ;AN000;MS.; assume get  for IOCTL
  9020 00001183 3C00                    	cmp	al,0		      ;AN001;MS.; get ?
  9021 00001185 7406                    	je	short doioctl 	      ;AN000;MS.; yes
  9022                                  	;cmp	al,1		      ;AN000;MS.; set ?
  9023                                  	;jne	short errorfunc	      ;AN000;MS.; no
  9024                                  	; 15/12/2022
  9025 00001187 FEC8                    	dec	al
  9026 00001189 7507                    	jnz	short errorfunc ; al > 1
  9027                                  	; RAWIO - SET_MEDIA_ID
  9028                                  	;mov	cx,0846h	      ;AN001;MS.;
  9029                                  	; 15/12/2022
  9030 0000118B B146                    	mov	cl,46h	; cx = 0846h 
  9031                                  doioctl:			      ;AN000;
  9032 0000118D B00D                    	mov	al,0Dh		      ;AN000;MS.; generic IOCTL
  9033                                  	;invoke	$IOCTL		      ;AN000;MS.; let IOCTL take care of it
  9034                                  	;call	_$IOCTL
  9035                                  	;retn			      ;AN000;MS.;
  9036                                  	; 15/12/2022
  9037 0000118F E98F10                  	jmp	_$IOCTL
  9038                                  errorfunc:			      ;AN000;
  9039                                  	;error	error_invalid_function;AN000;MS. ; invalid function
  9040                                  	;mov	al,1
  9041 00001192 B001                    	mov	al,error_invalid_function
  9042 00001194 E9A9F4                  	jmp	SYS_RET_ERR
  9043                                  
  9044                                  ; 16/05/2019 - Retro DOS v4.0
  9045                                  
  9046                                  ;============================================================================
  9047                                  ; MISC2.ASM, MSDOS 6.0, 1991
  9048                                  ;============================================================================
  9049                                  ; 20/07/2018 - Retro DOS v3.0
  9050                                  ; 29/04/2019 - Retro DOS v4.0
  9051                                  
  9052                                  ; Break <STRCMP - compare two ASCIZ strings DS:SI to ES:DI>
  9053                                  ;----------------------------------------------------------------------------
  9054                                  ;
  9055                                  ;   Strcmp - compare ASCIZ DS:SI to ES:DI. Case INSENSITIVE. '/' = '\'
  9056                                  ;	     Strings of different lengths don't match.
  9057                                  ;   Inputs:  DS:SI - pointer to source string  ES:DI - pointer to dest string
  9058                                  ;   Outputs: Z if strings same, NZ if different
  9059                                  ;   Registers modified: NONE
  9060                                  ;----------------------------------------------------------------------------
  9061                                  
  9062                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9063                                  StrCmp:
  9064 00001197 56                      	push	si
  9065 00001198 57                      	push	di
  9066 00001199 50                      	push	ax
  9067                                  Cmplp:
  9068 0000119A AC                      	LODSB
  9069 0000119B E8013E                  	call	UCase			; convert to upper case
  9070 0000119E E8533E                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  9071 000011A1 88C4                    	MOV	AH,AL
  9072 000011A3 268A05                  	MOV	AL,[ES:DI]
  9073 000011A6 47                      	INC	DI
  9074 000011A7 E8F53D                  	call	UCase			; convert to upper case
  9075 000011AA E8473E                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  9076 000011AD 38C4                    	CMP	AH,AL
  9077 000011AF 7504                    	JNZ	short PopRet		; Strings dif
  9078                                  
  9079 000011B1 08C0                    	OR	AL,AL
  9080 000011B3 75E5                    	JNZ	short Cmplp		; More string
  9081                                  PopRet:
  9082 000011B5 58                      	pop	ax
  9083 000011B6 5F                      	pop	di
  9084 000011B7 5E                      	pop	si
  9085 000011B8 C3                      	retn
  9086                                  
  9087                                  ;Break <STRCPY - copy ASCIZ string from DS:SI to ES:DI>
  9088                                  ;----------------------------------------------------------------------------
  9089                                  ;
  9090                                  ;   Strcpy - copy an ASCIZ string from DS:SI to ES:DI and make uppercase
  9091                                  ;   FStrcpy - copy an ASCIZ string from DS:SI to ES:DI. no modification of
  9092                                  ;	characters.
  9093                                  ;
  9094                                  ;   Inputs:	DS:SI - pointer to source string
  9095                                  ;		ES:DI - pointer to destination string
  9096                                  ;   Outputs:	ES:DI point byte after nul byte at end of dest string
  9097                                  ;		DS:SI point byte after nul byte at end of source string
  9098                                  ;   Registers modified: SI,DI
  9099                                  ;----------------------------------------------------------------------------
  9100                                  
  9101                                  StrCpy:
  9102 000011B9 50                      	push	ax
  9103                                  CPYLoop:
  9104 000011BA AC                      	LODSB
  9105 000011BB E8E13D                  	call	UCase			; convert to upper case
  9106 000011BE E8333E                  	call	PATHCHRCMP		; convert / to \ ;
  9107 000011C1 AA                      	STOSB
  9108                                  
  9109 000011C2 08C0                    	OR	AL,AL
  9110 000011C4 75F4                    	JNZ	short CPYLoop
  9111 000011C6 58                      	pop	ax
  9112 000011C7 C3                      	retn
  9113                                  
  9114                                  ;----------------------------------------------------------------------------
  9115                                  ; Procedure Name : FStrCpy
  9116                                  ;----------------------------------------------------------------------------
  9117                                  
  9118                                  FStrCpy:
  9119 000011C8 50                      	push	ax
  9120                                  FCPYLoop:
  9121 000011C9 AC                      	LODSB
  9122 000011CA AA                      	STOSB
  9123 000011CB 08C0                    	OR	AL,AL
  9124 000011CD 75FA                    	JNZ	short FCPYLoop
  9125 000011CF 58                      	pop	ax
  9126 000011D0 C3                      	retn
  9127                                  
  9128                                  ; 20/07/2018 - Retro DOS v3.0
  9129                                  ;----------------------------------------------------------------------------
  9130                                  ; UCase, IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1E2Fh
  9131                                  ;----------------------------------------------------------------------------
  9132                                  ;
  9133                                  ;UCase:	
  9134                                  ;	call	_UCase	 ; Offset 5518h (GetLet, Offset 5517h)
  9135                                  ;	retn
  9136                                  
  9137                                  ;Break <StrLen - compute length of string ES:DI>
  9138                                  ;----------------------------------------------------------------------------
  9139                                  ;**	StrLen - Compute Length of String
  9140                                  ;
  9141                                  ;	StrLen computes the length of a string, including the trailing 00
  9142                                  ;
  9143                                  ;	ENTRY	(es:di) = address of string
  9144                                  ;	EXIT	(cx) = size of string
  9145                                  ;	USES	cx, flags
  9146                                  ;----------------------------------------------------------------------------
  9147                                  
  9148                                  StrLen:
  9149 000011D1 57                      	push	di
  9150 000011D2 50                      	push	ax
  9151                                  	;MOV	CX,-1
  9152 000011D3 B9FFFF                  	mov	cx,65535
  9153 000011D6 30C0                    	XOR	AL,AL
  9154 000011D8 F2AE                    	REPNE	SCASB
  9155 000011DA F7D1                    	NOT	CX
  9156 000011DC 58                      	pop	ax
  9157 000011DD 5F                      	pop	di
  9158 000011DE C3                      	retn
  9159                                  
  9160                                  ;----------------------------------------------------------------------------
  9161                                  ;**	DStrLen - Compute Length of String
  9162                                  ;
  9163                                  ;	ENTRY	(ds:si) = address of string
  9164                                  ;	EXIT	(cx) = size of string, including trailing NUL
  9165                                  ;	USES	cx, flags
  9166                                  ;----------------------------------------------------------------------------
  9167                                  
  9168                                  DStrLen:	; BUGBUG - this guy is a pig, who uses him?
  9169 000011DF E80300                  	CALL	XCHGP
  9170 000011E2 E8ECFF                  	CALL	StrLen
  9171                                  	;CALL	XCHGP
  9172                                  	;retn
  9173                                  	; 18/12/2022
  9174                                  	;jmp	short XCHGP
  9175                                  
  9176                                  ;----------------------------------------------------------------------------
  9177                                  ;**	XCHGP - Exchange Source and Destination Pointers
  9178                                  ;
  9179                                  ;	XCHGP exchanges (DS:SI) and (ES:DI)
  9180                                  ;
  9181                                  ;	ENTRY	none
  9182                                  ;	EXIT	pairs exchanged
  9183                                  ;	USES	SI, DI, DS, ES
  9184                                  ;----------------------------------------------------------------------------
  9185                                  
  9186                                  XCHGP:
  9187 000011E5 1E                      	push	ds
  9188 000011E6 06                      	push	es
  9189 000011E7 1F                      	pop	ds
  9190 000011E8 07                      	pop	es
  9191 000011E9 87F7                    	XCHG	SI,DI
  9192                                  xchgp_retn:
  9193 000011EB C3                      	retn
  9194                                  
  9195                                  ;Break	<Idle - wait for a specified amount of time>
  9196                                  ;----------------------------------------------------------------------------
  9197                                  ;
  9198                                  ;   Idle - when retrying an operation due to a lock/sharing violation,
  9199                                  ;   	   we spin until RetryLoop is exhausted.
  9200                                  ;
  9201                                  ;   Inputs:	RetryLoop is the number of times we spin
  9202                                  ;   Outputs:	Wait
  9203                                  ;   Registers modified: none
  9204                                  ;----------------------------------------------------------------------------
  9205                                  
  9206                                  Idle:
  9207                                  	;test	byte [SS:FSHARING],0FFh
  9208 000011EC 36803E[7205]00          	cmp	byte [SS:FSHARING],0	;hkn; SS override
  9209                                  	;retnz
  9210 000011F2 75F7                    	jnz	short xchgp_retn
  9211                                  	;SAVE	<CX>
  9212 000011F4 51                      	push	cx
  9213 000011F5 368B0E[1C00]            	MOV	CX,[ss:RetryLoop]	;hkn; SS override
  9214 000011FA E308                    	JCXZ	Idle3
  9215                                  Idle1:	
  9216 000011FC 51                      	PUSH	CX
  9217 000011FD 31C9                    	XOR	CX,CX
  9218                                  Idle2:	
  9219 000011FF E2FE                    	LOOP	Idle2
  9220 00001201 59                      	POP	CX
  9221 00001202 E2F8                    	LOOP	Idle1
  9222                                  Idle3:	
  9223                                  	;RESTORE <CX>
  9224 00001204 59                      	pop	cx
  9225 00001205 C3                      	retn
  9226                                  
  9227                                  ;Break	<TableDispatch - dispatch to a table>
  9228                                  ;----------------------------------------------------------------------------
  9229                                  ;
  9230                                  ;   TableDispatch - given a table and an index, jmp to the approptiate
  9231                                  ;   routine. Preserve all input registers to the routine.
  9232                                  ;
  9233                                  ;   Inputs:	Push	return address
  9234                                  ;		Push	Table address
  9235                                  ;		Push	index (byte)
  9236                                  ;   Outputs:	appropriate routine gets jumped to.
  9237                                  ;		return indicates invalid index
  9238                                  ;   Registers modified: none.
  9239                                  ;----------------------------------------------------------------------------
  9240                                  
  9241                                  struc TFrame	 ; TableFrame
  9242 00000000 ????                    .OldBP:	 resw 1  ; 0
  9243 00000002 ????                    .OldRet: resw 1  ; 2
  9244 00000004 ??                      .Index:	 resb 1  ; 4
  9245 00000005 ??                      .Pad:	 resb 1  ; 5  
  9246 00000006 ????                    .Tab:	 resw 1  ; 6
  9247 00000008 ????                    .NewRet: resw 1  ; 8
  9248                                  endstruc
  9249                                  
  9250                                  TableDispatch:
  9251 00001206 55                      	PUSH	BP
  9252 00001207 89E5                    	MOV	BP,SP
  9253 00001209 53                      	PUSH	BX			; save BX
  9254                                  	;mov	bx,[bp+6]
  9255 0000120A 8B5E06                  	MOV	BX,[BP+TFrame.Tab]	; get pointer to table
  9256 0000120D 2E8A1F                  	MOV	BL,[CS:BX]		; maximum index
  9257                                  	;cmp	[bp+4],bl
  9258 00001210 385E04                  	CMP	[BP+TFrame.Index],BL	; table error?
  9259 00001213 7317                    	JAE	short TableError	; yes
  9260                                  	;mov	bl,[bp+4]
  9261 00001215 8A5E04                  	MOV	BL,[BP+TFrame.Index]	; get desired table index
  9262 00001218 30FF                    	XOR	BH,BH			; convert to word
  9263 0000121A D1E3                    	SHL	BX,1			; convert to word pointer
  9264 0000121C 43                      	INC	BX			; point past first length byte
  9265                                  	; 17/08/2018
  9266                                  	;add	bx,[bp+6]
  9267 0000121D 035E06                  	ADD	BX,[BP+TFrame.Tab]	; get real offset
  9268 00001220 2E8B1F                  	MOV	BX,[CS:BX]		; get contents of table entry
  9269                                  	;mov	[bp+6],bx
  9270 00001223 895E06                  	MOV	[BP+TFrame.Tab],BX	; put table entry into return address
  9271 00001226 5B                      	POP	BX			; restore BX
  9272 00001227 5D                      	POP	BP			; restore BP
  9273 00001228 83C404                  	ADD	SP,4			; clean off Index and our return addr
  9274 0000122B C3                      	retn				; do operation
  9275                                  TableError:
  9276 0000122C 5B                      	POP	BX			; restore BX
  9277 0000122D 5D                      	POP	BP			; restore BP
  9278 0000122E C20600                  	RETN	6			; clean off Index, Table and RetAddr
  9279                                  
  9280                                  ;Break	<TestNet - determine if a CDS is for the network>
  9281                                  ;----------------------------------------------------------------------------
  9282                                  ;
  9283                                  ;   TestNet - examine CDS pointed to by ThisCDS and see if it indicates a
  9284                                  ;	network CDS. This will handle NULL cds also.
  9285                                  ;
  9286                                  ;   Inputs:	ThisCDS points to CDS or NULL
  9287                                  ;   Outputs:	ES:DI = ThisCDS
  9288                                  ;		carry Set => network
  9289                                  ;		carry Clear => local
  9290                                  ;   Registers modified: none.
  9291                                  ;----------------------------------------------------------------------------
  9292                                  
  9293                                  TestNet:
  9294                                  	;LES	DI,[CS:THISCDS]
  9295                                  
  9296                                  	; 16/05/2019 - Retro DOS v4.0
  9297 00001231 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9298 00001236 26C43E[A205]            	LES	DI,[ES:THISCDS]
  9299 0000123B 83FFFF                  	CMP	DI,-1
  9300 0000123E 7408                    	JZ	short CMCRet		; UNC? carry is clear
  9301                                  	;;test	word [es:di+43h],8000h
  9302                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  9303                                  	;test	byte [es:di+44h],80h
  9304 00001240 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  9305 00001245 7501                    	JNZ	short CMCRet		; jump has carry clear
  9306 00001247 C3                      	retn				; carry is clear
  9307                                  CMCRet: 
  9308 00001248 F5                      	CMC
  9309 00001249 C3                      	retn
  9310                                  
  9311                                  ;Break	<IsSFTNet - see if an sft is for the network>
  9312                                  ;----------------------------------------------------------------------------
  9313                                  ;
  9314                                  ;   IsSFTNet - examine SF pointed to by ES:DI and see if it indicates a
  9315                                  ;	network file.
  9316                                  ;
  9317                                  ;   Inputs:	ES:DI point to SFT
  9318                                  ;   Outputs:	Zero set if not network sft
  9319                                  ;		zero reset otherwise
  9320                                  ;		Carry CLEAR!!!
  9321                                  ;   Registers modified: none.
  9322                                  ;----------------------------------------------------------------------------
  9323                                  
  9324                                  IsSFTNet:
  9325                                  	;;test	word [es:di+5],8000h
  9326                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
  9327                                  	; 16/05/2019 
  9328                                  	;test	byte [es:di+6],80h
  9329 0000124A 26F6450680              	TEST	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
  9330 0000124F C3                      	retn
  9331                                  
  9332                                  ;Break	<FastInit - Initialize FastTable entries >
  9333                                  ;----------------------------------------------------------------------------
  9334                                  ;   DOS 4.00   2/9/87
  9335                                  ;   FastInit  - initialize the FASTXXX routine entry
  9336                                  ;		  in the FastTable
  9337                                  ;
  9338                                  ;   Inputs:	BX = FASTXXX ID ( 1=fastopen )
  9339                                  ;		DS:SI = address of FASTXXX routine entry
  9340                                  ;		   SI = -1 for query only
  9341                                  ;   Outputs:	Carry flag clear, if success
  9342                                  ;		Carry flag set,   if failure
  9343                                  ;
  9344                                  ;
  9345                                  ;----------------------------------------------------------------------------
  9346                                  
  9347                                  ;Procedure FastInit,NEAR
  9348                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9349                                  
  9350                                  ;	; MSDOS 3.3
  9351                                  ;	; IBMDOS.COM (1987) - Offset 1EB3h
  9352                                  ;FastInit:
  9353                                  ;	mov	di,FastTable ; FastOpenTable
  9354                                  ;	mov	ax,[cs:di+4]		; Entry segment
  9355                                  ;	mov	bx,cs			; get DOS segment
  9356                                  ;	cmp	ax,bx			; first time installed ?	
  9357                                  ;	je	short ok_install	; yes
  9358                                  ;	stc				; set carry
  9359                                  ;	retn				; (cf=1 means) already installed !
  9360                                  ;
  9361                                  ;ok_install:
  9362                                  ;	mov	bx,FastTable ; FastOpenTable
  9363                                  ;	mov	cx,ds
  9364                                  ;	; set address of FASTXXX (FASTOPEN) routine entry
  9365                                  ;	mov	[cs:bx+4],cx
  9366                                  ;	mov	[cs:bx+2],si
  9367                                  ;	retn
  9368                                  
  9369                                  ; 16/05/2019 - Retro DOS v4.0
  9370                                  
  9371                                  FastInit:
  9372                                  	; MSDOS 6.0
  9373                                  	;hkn; set up es to dosdataseg.
  9374 00001250 06                      	push	es
  9375                                  	;getdseg <es>			; es -> dosdata
  9376 00001251 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9377                                  
  9378                                  	;hkn; FastTable is in DOSDATA
  9379 00001256 BF[320D]                	MOV	DI,FastTable+2		;AN000;FO. points to fastxxx entry
  9380 00001259 4B                      	DEC	BX			;AN000;FO.;; decrement index
  9381 0000125A 89DA                    	MOV	DX,BX			;AN000;FO.;; save bx
  9382 0000125C D1E3                    	SHL	BX,1			;AN000;FO.;; times 4, each entry is DWORD
  9383 0000125E D1E3                    	SHL	BX,1			;AN000;FO.
  9384 00001260 01DF                    	ADD	DI,BX			;AN000;FO. index to the entry
  9385 00001262 268B4502                	MOV	AX,[ES:DI+2]		;AN000;FO. get entry segment
  9386                                  fcheck: 				;AN000;
  9387 00001266 8CC9                    	MOV	CX,CS			;AN000;FO.;; get DOS segment
  9388 00001268 39C8                    	CMP	AX,CX			;AN000;FO.;; first time installed ?
  9389 0000126A 7405                    	JZ	short ok_install	;AN000;FO.;; yes
  9390 0000126C 09C0                    	OR	AX,AX			;AN000;FO.;
  9391                                  	;JZ	short ok_install	;AN000;FO.;
  9392                                  	;STC				;AN000;FO.;; already installed !
  9393                                  	;JMP	SHORT FSret		;AN000;FO. set carry
  9394                                  	; 14/01/2024
  9395 0000126E F9                      	stc
  9396 0000126F 7517                    	jnz	short FSret
  9397                                  ok_install:				;AN000;
  9398 00001271 83FEFF                  	CMP	SI,-1			;AN000;FO.; Query only ?
  9399 00001274 7412                    	JZ	short FSret		;AN000;FO.; yes
  9400 00001276 8CD9                    	MOV	CX,DS			;AN000;FO.; get FASTXXX entry segment
  9401 00001278 26894D02                	MOV	[ES:DI+2],CX		;AN000;FO.; initialize routine entry
  9402 0000127C 268935                  	MOV	[ES:DI],SI		;AN000;FO.; initialize routine offset
  9403                                  
  9404                                  ;hkn; FastFlg moved to DOSDATA
  9405 0000127F BF[3A0D]                	MOV	DI,FastFlg		;AN000;FO.; get addr of FASTXXX flags
  9406 00001282 01D7                    	ADD	DI,DX			;AN000;FO.; index to a FASTXXX flag
  9407                                  	;or	byte [es:di],80h
  9408 00001284 26800D80                	OR	byte [ES:DI],Fast_yes	;AN000;FO.; indicate installed
  9409                                  FSret:					;AN000;
  9410 00001288 07                      	pop	es
  9411 00001289 C3                      	retn				;AN000;FO.
  9412                                  
  9413                                  ;EndProc FastInit
  9414                                  
  9415                                  ;Break	<FastRet - initial routine in FastOpenTable >
  9416                                  ;----------------------------------------------------------------------------
  9417                                  ;   DOS 3.3   6/10/86
  9418                                  ;   FastRet	- indicate FASTXXXX  not in memory
  9419                                  ;
  9420                                  ;   Inputs:	None
  9421                                  ;   Outputs:	AX = -1 and carry flag set
  9422                                  ;
  9423                                  ;   Registers modified: none.
  9424                                  ;----------------------------------------------------------------------------
  9425                                  
  9426                                  FastRet:
  9427                                  	;mov	ax,-1
  9428                                  	;stc
  9429                                  	;retf
  9430 0000128A F9                      	STC
  9431 0000128B 19C0                    	sbb	ax,ax		; (ax) = -1, 'C' set
  9432 0000128D CB                      	RETF
  9433                                  
  9434                                  ;Break	<NLS_OPEN - do $open for NLSFUNC>
  9435                                  ;----------------------------------------------------------------------------
  9436                                  ;   DOS 3.3   6/10/86
  9437                                  ;   NLS_OPEN	- call $OPEN for NLSFUNC
  9438                                  ;
  9439                                  ;   Inputs:	Same input as $OPEN except CL = mode
  9440                                  ;   Outputs:	same output as $OPEN
  9441                                  ;
  9442                                  ;----------------------------------------------------------------------------
  9443                                  
  9444                                  ;hkn; NOTE! SS MUST HAVE BEEN SET UP TO DOSDATA BY THE TIME THESE
  9445                                  ;hkn; NLS FUNCTIONS ARE CALLED!!! THERE FORE WE WILL USE SS OVERRIDES
  9446                                  ;hkn; IN ORDER TO ACCESS DOS DATA VARIABLES!
  9447                                  
  9448                                  NLS_OPEN:
  9449                                  ;	MOV	BL,[CPSWFLAG]	 ; disable code page matching logic
  9450                                  ;	MOV	BYTE [CPSWFLAG],0
  9451                                  ;	PUSH	BX		 ; save current state
  9452                                  
  9453 0000128E 88C8                    	MOV	AL,CL		 ; set up correct interface for $OPEN
  9454 00001290 E8A35B                  	call	_$OPEN
  9455                                  
  9456                                  ;	POP	BX		 ; restore current state
  9457                                  ;	MOV	[CPSWFLAG],BL
  9458                                  
  9459 00001293 C3                      	RETN
  9460                                  
  9461                                  ;Break	<NLS_LSEEK - do $LSEEK for NLSFUNC>
  9462                                  ;----------------------------------------------------------------------------
  9463                                  ;   DOS 3.3   6/10/86
  9464                                  ;   NLS_LSEEK	- call $LSEEK for NLSFUNC
  9465                                  ;
  9466                                  ;   Inputs:	BP = open mode
  9467                                  ;   Outputs:	same output as $LSEEK
  9468                                  ;
  9469                                  ;----------------------------------------------------------------------------
  9470                                  
  9471                                  ; 16/05/2019 - Retro DOS v4.0
  9472                                  
  9473                                  NLS_LSEEK:
  9474 00001294 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9475 00001299 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9476 0000129E E81000                  	CALL	Fake_User_Stack
  9477 000012A1 89E8                    	MOV	AX,BP		; set up correct interface for $LSEEK
  9478 000012A3 E83D55                  	call	_$LSEEK
  9479 000012A6 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9480 000012AB 368F06[8405]            	POP	word [SS:USER_SP]
  9481 000012B0 C3                      	RETN
  9482                                  
  9483                                  ;Break	<Fake_User_Stack - save user stack>
  9484                                  ;----------------------------------------------------------------------------
  9485                                  ;   DOS 3.3   6/10/86
  9486                                  ;   Fake_User_Stack - save user stack pointer
  9487                                  ;
  9488                                  ;----------------------------------------------------------------------------
  9489                                  
  9490                                  Fake_User_Stack:
  9491 000012B1 36A1[6A0D]              	MOV	AX,[SS:USER_SP_2F] ; replace with INT 2F stack
  9492 000012B5 36A3[8405]              	MOV	[SS:USER_SP],AX
  9493 000012B9 8CD0                    	MOV	AX,SS
  9494 000012BB 36A3[8605]              	MOV	[SS:USER_SS],AX
  9495 000012BF C3                      	RETN
  9496                                  
  9497                                  ;Break	<GetDevList - get device header list pointer>
  9498                                  ;----------------------------------------------------------------------------
  9499                                  ;   DOS 3.3   7/25/86
  9500                                  ;   GetDevList - get device header list pointer
  9501                                  ;
  9502                                  ;   Output: AX:BX points to the device header list
  9503                                  ;----------------------------------------------------------------------------
  9504                                  
  9505                                  GetDevList:
  9506                                  	; 16/05/2019 - Retro DOS v4.0
  9507 000012C0 BE[280D]                	MOV	SI,SysInitTable
  9508 000012C3 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  9509 000012C8 C534                    	LDS	SI,[SI]
  9510                                  	;mov	ax,[si+34]  ; SSYSINITVARS offset 34 = [SI+SYSI.DEV]
  9511 000012CA 8B4422                  	MOV	AX,[SI+SYSI.DEV]
  9512                                  	;mov	bx,[si+36]  ; SSYSINITVARS offset 36 = [SI+SYSI.DEV+2]
  9513 000012CD 8B5C24                  	MOV	BX,[SI+SYSI.DEV+2]
  9514 000012D0 C3                      	RETN
  9515                                  
  9516                                  ;Break	<NLS_IOCTL - do $IOCTL for NLSFUNC>
  9517                                  ;----------------------------------------------------------------------------
  9518                                  ;   DOS 3.3   7/25/86
  9519                                  ;   NLS_IOCTL	- call $IOCTL for NLSFUNC
  9520                                  ;
  9521                                  ;   Inputs:	BP = function code 0CH
  9522                                  ;   Outputs:	same output as generic $IOCTL
  9523                                  ;
  9524                                  ;----------------------------------------------------------------------------
  9525                                  
  9526                                  NLS_IOCTL:
  9527                                  	; 16/05/2019 - Retro DOS v4.0
  9528 000012D1 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9529 000012D6 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9530 000012DB E8D3FF                  	CALL	Fake_User_Stack
  9531 000012DE 89E8                    	MOV	AX,BP		; set up correct interface for $IOCTL
  9532 000012E0 E83E0F                  	call	_$IOCTL
  9533 000012E3 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9534 000012E8 368F06[8405]            	POP	word [SS:USER_SP]
  9535 000012ED C3                      	RETN
  9536                                  
  9537                                  ;Break	<NLS_GETEXT- get extended error for NLSFUNC>
  9538                                  ;----------------------------------------------------------------------------
  9539                                  ;   DOS 3.3   7/25/86
  9540                                  ;   NLS_GETEXT	-
  9541                                  ;
  9542                                  ;   Inputs:	none
  9543                                  ;   Outputs:	AX = extended error
  9544                                  ;
  9545                                  ;----------------------------------------------------------------------------
  9546                                  
  9547                                  NLS_GETEXT:
  9548                                  	; 16/05/2019 - Retro DOS v4.0
  9549 000012EE 36A1[2403]              	MOV	AX,[SS:EXTERR]	 ; return extended error
  9550                                  	; 23/09/2023
  9551                                  MSG_RETRIEVAL:
  9552 000012F2 C3                      	RETN
  9553                                  
  9554                                  ; 29/04/2019 - Retro DOS v4.0
  9555                                  
  9556                                  ;Break	<MSG_RETRIEVAL- get beginning addr of system and parser messages>
  9557                                  
  9558                                  ;----------------------------------------------------------------------------
  9559                                  ;   DOS 4.00
  9560                                  ;
  9561                                  ;   Inputs:	DL=0 get extended error message addr
  9562                                  ;		  =1 set extended error message addr
  9563                                  ;		  =2 get parser error message addr
  9564                                  ;		  =3 set parser error message addr
  9565                                  ;		  =4 get critical error message addr
  9566                                  ;		  =5 set critical error message addr
  9567                                  ;		  =6 get file system error message addr
  9568                                  ;		  =7 set file system error message addr
  9569                                  ;		  =8 get address for code reduction
  9570                                  ;		  =9 set address for code reduction
  9571                                  ;   Function:	get/set message address
  9572                                  ;   Outputs:	ES:DI points to addr when get
  9573                                  ;----------------------------------------------------------------------------
  9574                                  
  9575                                  ;Procedure MSG_RETRIEVAL,NEAR
  9576                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9577                                  
  9578                                  ; 23/09/2023
  9579                                  ;MSG_RETRIEVAL:
  9580                                  
  9581                                  ;;	NOTE:  This function lives in command.com resident code now.
  9582                                  ;;	If the int 2F ever gets this far, we'll return registers
  9583                                  ;;	unchanged, which produces the same result as before, if
  9584                                  ;;	command.com wasn't present (and therefore no messages available).
  9585                                  ;;
  9586                                  ;;	I didn't point the entry in the 2F table to No_Op because
  9587                                  ;;	No_Op zeroes AL.
  9588                                  ;;
  9589                                  ;;;hkn; set up ds to point to DOSDATA
  9590                                  ;;	push	ds
  9591                                  ;;	getdseg	<ds>			; ds -> dosdata
  9592                                  ;;
  9593                                  ;;	PUSH	AX		    ;AN000;;MS. save regs
  9594                                  ;;	PUSH	SI		    ;AN000;;MS. save regs
  9595                                  ;;	MOV	AX,DX		    ;AN000;;MS.
  9596                                  ;;	MOV	SI,OFFSET DOSDATA:MSG_EXTERROR ;AN000;;MS.
  9597                                  ;;	test	AL,1		    ;AN000;;MS. get ?
  9598                                  ;;	JZ	toget		    ;AN000;;MS. yes
  9599                                  ;;	DEC	AL		    ;AN000;;MS.
  9600                                  ;;toget:				    ;AN000;
  9601                                  ;;	SHL	AL,1		    ;AN000;;MS. times 2
  9602                                  ;;	XOR	AH,AH		    ;AN000;;MS.
  9603                                  ;;	ADD	SI,AX		    ;AN000;;MS. position to the entry
  9604                                  ;;	test	DL,1		    ;AN000;;MS. get ?
  9605                                  ;;	JZ	getget			     ;AN000;;MS. yes
  9606                                  ;;	MOV	WORD PTR DS:[SI],DI    ;AN000;;MS. set MSG
  9607                                  ;;	MOV	WORD PTR DS:[SI+2],ES  ;AN000;;MS. address to ES:DI
  9608                                  ;;	JMP	SHORT MSGret		     ;AN000;;MS. exit
  9609                                  ;;getget: 				     ;AN000;
  9610                                  ;;	LES	DI,DWORD PTR DS:[SI]	     ;AN000;;MS. get msg addr
  9611                                  ;;MSGret: 				     ;AN000;
  9612                                  ;;	POP	SI			     ;AN000;;MS.
  9613                                  ;;	POP	AX			     ;AN000;;MS.
  9614                                  ;;
  9615                                  ;;	pop	ds
  9616                                  
  9617                                  ;	return				     ;AN000;;MS. exit
  9618                                  
  9619                                  ; 23/09/2023
  9620                                  ;	retn	; 29/04/2019
  9621                                  
  9622                                  ;============================================================================
  9623                                  ; ECritDisk, LCritDisk, ECritDevice, LCritDevice
  9624                                  ; IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1F36h
  9625                                  ;============================================================================
  9626                                  ; 20/07/2018 - Retro DOS v3.0
  9627                                  
  9628                                  ;	; MSDOS 3.3
  9629                                  ;	; 08/08/2018 - Retro DOS v3.0
  9630                                  ;ECritMEM:
  9631                                  ;ECritSFT:
  9632                                  ;	;
  9633                                  ;ECritDisk:
  9634                                  ;	retn
  9635                                  ;	;push	ax
  9636                                  ;	
  9637                                  ;	mov	ax,8001h
  9638                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9639                                  ;			; AL = critical section number (00h-0Fh)
  9640                                  ;	pop	ax
  9641                                  ;	retn
  9642                                  ;
  9643                                  ;	; MSDOS 3.3
  9644                                  ;	; 08/08/2018 - Retro DOS v3.0
  9645                                  ;LCritMEM:
  9646                                  ;LCritSFT:
  9647                                  ;	;
  9648                                  ;LCritDisk:
  9649                                  ;	retn
  9650                                  ;	;push	ax
  9651                                  ;	
  9652                                  ;	mov	ax,8101h
  9653                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9654                                  ;			; AL = critical section number (00h-0Fh)
  9655                                  ;	pop	ax
  9656                                  ;	retn
  9657                                  ;
  9658                                  ;ECritDevice:
  9659                                  ;	retn
  9660                                  ;	;push	ax
  9661                                  ;	
  9662                                  ;	mov	ax,8002h
  9663                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9664                                  ;			; AL = critical section number (00h-0Fh)
  9665                                  ;	pop	ax
  9666                                  ;	retn
  9667                                  ;
  9668                                  ;LCritDevice:
  9669                                  ;	retn
  9670                                  ;	;push	ax
  9671                                  ;	
  9672                                  ;	mov	ax,8102h
  9673                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9674                                  ;			; AL = critical section number (00h-0Fh)
  9675                                  ;	pop	ax
  9676                                  ;	retn
  9677                                  
  9678                                  ;============================================================================
  9679                                  ; CRIT.ASM, MSDOS 6.0, 1991
  9680                                  ;============================================================================
  9681                                  ; 12/05/2019 - Retro DOS v4.0
  9682                                  
  9683                                  ; Critical Section Routines
  9684                                  
  9685                                  ; MSDOS 6.21 - MSDOS.SYS - DOSCODE:513Ah
  9686                                  
  9687                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9688                                  ; DOSCODE:5126h (MSDOS 5.0 MSDOS.SYS)
  9689                                  
  9690                                  ; ---------------------------------------------------------------------------
  9691                                  ; Each handler must leave everything untouched; including flags!
  9692                                  ;
  9693                                  ; Sleaze for time savings: first instruction is a return. This is patched
  9694                                  ; by the sharer to be a PUSH AX to complete the correct routines.
  9695                                  ; ---------------------------------------------------------------------------
  9696                                  
  9697                                  ; (DOSMAC.INC, MSDOS 6.0, 1991)
  9698                                  ; ---------------------------------------------------------------------------
  9699                                  ; Some old versions of the 80286 have a bug in the chip. The popf instruction
  9700                                  ; will enable interrupts. Therefore in a section of code with interrupts
  9701                                  ; disabled and you need a popf instruction use the 'popff' macro instead.
  9702                                  ; ---------------------------------------------------------------------------
  9703                                  
  9704                                  ;%macro POPFF 0
  9705                                  ;	jmp	$+3
  9706                                  ;	iret
  9707                                  ;	push	cs
  9708                                  ;	call	$-2
  9709                                  ;%endmacro
  9710                                  
  9711                                  ; ---------------------------
  9712                                  
  9713                                  ;Procedure  ECritDisk,NEAR
  9714                                  	;public  ECritMEM
  9715                                  	;public  ECritSFT
  9716                                  ECritMEM:
  9717                                  ECritSFT:
  9718                                  ;
  9719                                  ECritDisk:
  9720                                  
  9721                                  ;SR; Check if critical section is to be entered
  9722                                  
  9723 000012F3 9C                      	pushf
  9724 000012F4 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9725 000012FA 740D                    	jz	short ECritDisk_2
  9726                                  
  9727                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9728                                  ;	;popff  ; * (macro)
  9729                                  ;	jmp	short ECritDisk_1 ; *
  9730                                  ;
  9731                                  ;ECritDisk_iret: ; *
  9732                                  ;	iret ; *
  9733                                  
  9734                                  	; 16/12/2022
  9735                                  	; 13/11/2022
  9736                                  	;jmp	short ECritDisk_1
  9737                                  	; 06/11/2022
  9738                                  ;ECritDisk_iret:
  9739                                  ;	iret	
  9740                                  
  9741                                  	; 06/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9742                                  ECritDisk_1:
  9743 000012FC 0E                      	push	cs ; *
  9744 000012FD E80800                  	call	ECritDisk_iret ; *		
  9745                                  	
  9746                                  ECritDisk_0:
  9747 00001300 50                      	PUSH    AX
  9748                                  	;MOV	AX,8000h+critDisk
  9749                                  	;INT	int_IBM
  9750 00001301 B80180                  	mov	ax,8001h
  9751 00001304 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9752                                  			; AL = critical section number (00h-0Fh)
  9753 00001306 58                      	POP     AX
  9754 00001307 C3                      	retn
  9755                                  
  9756                                  	; 16/12/2022
  9757                                  	; 13/11/2022
  9758                                  ECritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0
  9759                                  LCritDisk_iret: 
  9760 00001308 CF                      	iret
  9761                                  
  9762                                  ECritDisk_2:
  9763                                  	;;popff ; *
  9764                                  	;;retn
  9765                                  ;	jmp	short ECritDisk_3 ; *
  9766                                  ;ECritDisk_iret2: ; *
  9767                                  ;	iret
  9768                                  	
  9769                                  	; 16/12/2022
  9770                                  	; 13/11/2022
  9771                                  	;jmp	short ECritDisk_3
  9772                                  ;ECritDisk_iret2:
  9773                                  	;iret
  9774                                  
  9775                                  ECritDisk_3:
  9776 00001309 0E                      	push    cs ; *
  9777                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9778                                  	;call	ECritDisk_iret2 ; *
  9779                                  	;retn
  9780                                  	; 16/12/2022
  9781 0000130A E8FBFF                  	call	ECritDisk_iret
  9782 0000130D C3                      	retn
  9783                                  
  9784                                  ;EndProc ECritDisk
  9785                                  
  9786                                  ; ---------------------------
  9787                                  
  9788                                  ;Procedure   LCritDisk,NEAR
  9789                                  	;public  LCritMEM
  9790                                  	;public  LCritSFT
  9791                                  LCritMEM:
  9792                                  LCritSFT:
  9793                                  ;
  9794                                  LCritDisk:
  9795                                  
  9796                                  ;SR; Check if critical section is to be entered
  9797                                  
  9798 0000130E 9C                      	pushf
  9799 0000130F 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9800 00001315 740C                    	jz	short LCritDisk_2
  9801                                  	;popff  ; * (macro)
  9802                                  ;	jmp	short LCritDisk_1 ; *
  9803                                  ;
  9804                                  ;LCritDisk_iret: ; *
  9805                                  ;	iret ; *
  9806                                  
  9807                                  	; 16/12/2022
  9808                                  	; 13/11/2022
  9809                                  	;jmp	short LCritDisk_1
  9810                                  ;LCritDisk_iret:
  9811                                  	;iret
  9812                                  
  9813                                  LCritDisk_1:
  9814 00001317 0E                      	push	cs ; *
  9815 00001318 E8EDFF                  	call	LCritDisk_iret ; *		
  9816                                  	
  9817                                  LCritDisk_0:
  9818 0000131B 50                      	PUSH	AX
  9819                                  	;MOV	AX,8100h+critDisk
  9820                                  	;INT	int_IBM
  9821 0000131C B80181                  	mov	ax,8101h
  9822 0000131F CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9823                                  			; AL = critical section number (00h-0Fh)
  9824 00001321 58                      	POP	AX
  9825 00001322 C3                      	retn
  9826                                  
  9827                                  ;LCritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9828                                  ;	iret
  9829                                  
  9830                                  LCritDisk_2:
  9831                                  	;;popff ; *
  9832                                  	;;retn
  9833                                  ;	jmp	short LCritDisk_3 ; *
  9834                                  ;LCritDisk_iret2: ; *
  9835                                  ;	iret
  9836                                  
  9837                                  	; 16/12/2022
  9838                                  	; 13/11/2022
  9839                                  	;jmp	short LCritDisk_3
  9840                                  ;LCritDisk_iret2:
  9841                                  	;iret
  9842                                  
  9843                                  LCritDisk_3:
  9844 00001323 0E                      	push    cs ; *
  9845                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9846                                  	;call	LCritDisk_iret2 ; *
  9847                                  	;retn
  9848                                  	; 16/12/2022
  9849 00001324 E8E1FF                  	call	LCritDisk_iret
  9850 00001327 C3                      	retn
  9851                                  
  9852                                  ;EndProc LCritDisk
  9853                                  
  9854                                  ; ---------------------------
  9855                                  
  9856                                  ;Procedure   ECritDevice,NEAR
  9857                                  
  9858                                  ECritDevice:
  9859                                  
  9860                                  ;SR; Check if critical section is to be entered
  9861                                  
  9862 00001328 9C                      	pushf
  9863 00001329 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9864 0000132F 740D                    	jz	short ECritDevice_2
  9865                                  	;popff  ; * (macro)
  9866                                  ;	jmp	short ECritDevice_1 ; *
  9867                                  ;
  9868                                  ;ECritDevice_iret: ; *
  9869                                  ;	iret ; *
  9870                                  
  9871                                  	; 16/12/2022	
  9872                                  	; 13/11/2022
  9873                                  	;jmp	short ECritDevice_1
  9874                                  ;ECritDevice_iret:
  9875                                  	;iret
  9876                                  
  9877                                  ECritDevice_1:
  9878 00001331 0E                      	push	cs ; *
  9879 00001332 E80800                  	call	ECritDevice_iret ; *		
  9880                                  	
  9881                                  ECritDevice_0:
  9882 00001335 50                      	PUSH	AX
  9883                                  	;MOV	AX,8000h+critDevice
  9884                                  	;INT	int_IBM
  9885 00001336 B80280                  	mov	ax,8002h
  9886 00001339 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9887                                  			; AL = critical section number (00h-0Fh)
  9888 0000133B 58                      	POP     AX
  9889 0000133C C3                      	retn
  9890                                  
  9891                                  	; 16/12/2022
  9892                                  	; 06/12/2022
  9893                                  ECritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0
  9894                                  LCritDevice_iret: 
  9895 0000133D CF                      	iret
  9896                                  
  9897                                  ECritDevice_2:
  9898                                  	;;popff ; *
  9899                                  	;;retn
  9900                                  ;	jmp	short ECritDevice_3 ; *
  9901                                  ;ECritDevice_iret2: ; *
  9902                                  ;	iret
  9903                                  
  9904                                  	; 16/12/2022
  9905                                  	; 13/11/2022
  9906                                  	;jmp	short ECritDevice_3
  9907                                  ;ECritDevice_iret2:
  9908                                  	;iret
  9909                                  
  9910                                  ECritDevice_3:
  9911 0000133E 0E                      	push    cs ; *
  9912                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9913                                  	;call	ECritDevice_iret2 ; *
  9914                                  	;retn
  9915                                  	; 16/12/2022
  9916 0000133F E8FBFF                  	call	ECritDevice_iret
  9917 00001342 C3                      	retn
  9918                                  
  9919                                  ;EndProc ECritDevice
  9920                                  
  9921                                  ; ---------------------------
  9922                                  
  9923                                  ;Procedure   LCritDevice,NEAR
  9924                                  
  9925                                  LCritDevice:
  9926                                  
  9927                                  ;SR; Check if critical section is to be entered
  9928                                  
  9929 00001343 9C                      	pushf
  9930 00001344 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9931 0000134A 740C                    	jz	short LCritDevice_2
  9932                                  	;popff  ; * (macro)
  9933                                  ;	jmp	short LCritDevice_1 ; *
  9934                                  ;
  9935                                  ;LCritDevice_iret: ; *
  9936                                  ;	iret ; *
  9937                                  
  9938                                  	; 16/12/2022
  9939                                  	; 13/11/2022
  9940                                  	;jmp	short LCritDevice_1
  9941                                  ;LCritDevice_iret:
  9942                                  	;iret
  9943                                  
  9944                                  LCritDevice_1:
  9945 0000134C 0E                      	push	cs ; *
  9946 0000134D E8EDFF                  	call	LCritDevice_iret ; *		
  9947                                  	
  9948                                  LCritDevice_0:
  9949 00001350 50                      	PUSH	AX
  9950                                  	;MOV	AX,8100h+critDevice
  9951                                  	;INT	int_IBM
  9952 00001351 B80281                  	mov	ax,8102h
  9953 00001354 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9954                                  			; AL = critical section number (00h-0Fh)
  9955 00001356 58                      	POP     AX
  9956 00001357 C3                      	retn
  9957                                  
  9958                                  ;LCritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9959                                  ;	iret
  9960                                  
  9961                                  LCritDevice_2:
  9962                                  	;;popff ; *
  9963                                  	;;retn
  9964                                  ;	jmp	short LCritDevice_3 ; *
  9965                                  ;LCritDevice_iret2: ; *
  9966                                  ;	iret
  9967                                  
  9968                                  	; 16/12/2022
  9969                                  	; 13/11/2022
  9970                                  	;jmp	short LCritDevice_3
  9971                                  ;LCritDevice_iret2:
  9972                                  	;iret
  9973                                  
  9974                                  LCritDevice_3:
  9975 00001358 0E                      	push    cs ; *
  9976                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9977                                  	;call	LCritDevice_iret2 ; *
  9978                                  	;retn
  9979                                  	; 16/12/2022
  9980 00001359 E8E1FF                  	call	LCritDevice_iret
  9981 0000135C C3                      	retn
  9982                                  
  9983                                  ;EndProc LCritDevice
  9984                                  
  9985                                  ;============================================================================
  9986                                  ; CPMIO.ASM, MSDOS 6.0, 1991
  9987                                  ;============================================================================
  9988                                  ; 20/07/2018 - Retro DOS v3.0
  9989                                  
  9990                                  ;============================================================================
  9991                                  ; STDIO.ASM - (MSDOS 2.0)
  9992                                  ;============================================================================
  9993                                  
  9994                                  ;
  9995                                  ; Standard device IO for MSDOS (first 12 function calls)
  9996                                  ;
  9997                                  
  9998                                  ;.xlist
  9999                                  ;.xcref
 10000                                  ;INCLUDE STDSW.ASM
 10001                                  ;INCLUDE DOSSEG.ASM
 10002                                  ;.cref
 10003                                  ;.list
 10004                                  
 10005                                  ;TITLE   STDIO - device IO for MSDOS
 10006                                  ;NAME    STDIO
 10007                                  
 10008                                  ;INCLUDE IO.ASM
 10009                                  
 10010                                  ; ---------------------------------------------------------------------------
 10011                                  ;
 10012                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
 10013                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
 10014                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
 10015                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
 10016                                  ;			    to restore MSDOS 2.0 device IO source code 
 10017                                  ;
 10018                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)	
 10019                                  	
 10020                                  ;============================================================================
 10021                                  ; STDIO.ASM - (MSDOS 2.0)
 10022                                  ;============================================================================
 10023                                  
 10024                                  ;
 10025                                  ; Standard device IO for MSDOS (first 12 function calls)
 10026                                  ;
 10027                                  
 10028                                  ;.xlist
 10029                                  ;.xcref
 10030                                  ;INCLUDE STDSW.ASM
 10031                                  ;INCLUDE DOSSEG.ASM
 10032                                  ;.cref
 10033                                  ;.list
 10034                                  
 10035                                  ;TITLE   STDIO - device IO for MSDOS
 10036                                  ;NAME    STDIO
 10037                                  
 10038                                  ;INCLUDE IO.ASM
 10039                                  
 10040                                  ; ---------------------------------------------------------------------------
 10041                                  ;
 10042                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
 10043                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
 10044                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
 10045                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
 10046                                  ;			    to restore MSDOS 2.0 device IO source code 
 10047                                  ;
 10048                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)		
 10049                                  ;
 10050                                  ;============================================================================
 10051                                  ; IO.ASM (MSDOS 2.0) (IBMDOS.COM 2.0) - STRIN.ASM (MSDOS 2.0, 19/08/1983)
 10052                                  ;============================================================================
 10053                                  ; Retro DOS v2.0 by Erdogan Tan, 13/03/2018 - 14/03/2018
 10054                                  
 10055                                  ; (Disassembled code of IBMDOS.COM, 08/03/1983) - Dissassembler: IDA Pro Free
 10056                                  ; (Comments are from CPMIO.ASM - 1991, MSDOS 6.0) 
 10057                                  
 10058                                  ;============================================================================
 10059                                  ; CPMIO.ASM (MSDOS 6.0, 1991)
 10060                                  ;============================================================================
 10061                                  ; Retro DOS v4.0 by Erdogan Tan, 04/05/2019
 10062                                  
 10063                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10064                                  
 10065                                  ;**	Standard device IO for MSDOS (first 12 function calls)
 10066                                  ;
 10067                                  ;	TITLE	IBMCPMIO - device IO for MSDOS
 10068                                  ;	NAME	IBMCPMIO
 10069                                  
 10070                                  ;	Old style CP/M 1-12 system calls to talk to reserved devices
 10071                                  ;
 10072                                  ;	$Std_Con_Input_No_Echo
 10073                                  ;	$Std_Con_String_Output
 10074                                  ;	$Std_Con_String_Input
 10075                                  ;	$RawConIO
 10076                                  ;	$RawConInput
 10077                                  ;	RAWOUT
 10078                                  ;	RAWOUT2
 10079                                  ;
 10080                                  
 10081                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
 10082                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
 10083                                  ; references to be SS or CS relative which is desired.
 10084                                  
 10085                                  ; ---------------------------------------------------------------------------
 10086                                  
 10087                                  ;	TITLE	CPMIO2 - device IO for MSDOS
 10088                                  ;	NAME	CPMIO2
 10089                                  
 10090                                  ;
 10091                                  ;	Microsoft Confidential
 10092                                  ;	Copyright (C) Microsoft Corporation 1991
 10093                                  ;	All Rights Reserved.
 10094                                  ;
 10095                                  
 10096                                  ;**	Old style CP/M 1-12 system calls to talk to reserved devices
 10097                                  ;
 10098                                  ;	$Std_Con_Input
 10099                                  ;	$Std_Con_Output
 10100                                  ;	OUTT
 10101                                  ;	TAB
 10102                                  ;	BUFOUT
 10103                                  ;	$Std_Aux_Input
 10104                                  ;	$Std_Aux_Output
 10105                                  ;	$Std_Printer_Output
 10106                                  ;	$Std_Con_Input_Status
 10107                                  ;	$Std_Con_Input_Flush
 10108                                  ;
 10109                                  ;	Revision History:
 10110                                  ;
 10111                                  ;	  AN000	 version 4.00 - Jan. 1988
 10112                                  
 10113                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
 10114                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
 10115                                  ; references to be SS or CS relative which is desired.
 10116                                  
 10117                                  ;DOSCODE SEGMENT
 10118                                  ;	ASSUME	SS:DOSDATA,CS:DOSCODE
 10119                                  
 10120                                  
 10121                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 10122                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 10123                                  ;hkn;	not valid. 
 10124                                  
 10125                                  ; DOSCODE:51BAh (MSDOS 6.21, MSDOS.SYS)
 10126                                  ; 08/11/2022
 10127                                  ; DOSCODE:51A6h (MSDOS 5.0, MSDOS.SYS)
 10128                                  
 10129                                  ;
 10130                                  ;----------------------------------------------------------------------------
 10131                                  ;
 10132                                  ; Procedure : $Std_Con_Input_No_Echo
 10133                                  ;
 10134                                  ;----------------------------------------------------------------------------
 10135                                  ;
 10136                                  
 10137                                  _$STD_CON_INPUT_NO_ECHO:   ;System call 8
 10138                                  
 10139                                  ; Inputs:
 10140                                  ;	None
 10141                                  ; Function:
 10142                                  ;	Input character from console, no echo
 10143                                  ; Returns:
 10144                                  ;	AL = character
 10145                                  
 10146 0000135D 1E                      	push	ds
 10147 0000135E 56                      	push	si
 10148                                  INTEST:
 10149 0000135F E85C3D                  	call	STATCHK
 10150 00001362 753B                    	jnz	short GET ; 08/09/2018
 10151                                  ;*************************************************************************
 10152                                  ;hkn; SS override
 10153 00001364 36803E[A00A]00          	cmp	byte [SS:PRINTER_FLAG],0  ; is printer idle?
 10154 0000136A 7505                    	jnz	short no_sys_wait
 10155 0000136C B405                    	mov	ah,5			; get input status with system wait
 10156 0000136E E87630                  	call	IOFUNC
 10157                                  no_sys_wait:
 10158                                  ;**************************************************************************
 10159 00001371 B484                    	MOV	AH,84h
 10160 00001373 CD2A                    	INT	int_IBM	 ; int 2Ah
 10161                                  
 10162                                  ;;; 7/15/86  update the date in the idle loop
 10163                                  ;;; Dec 19, 1986 D.C.L. changed following CMP to Byte Ptr from Word Ptr
 10164                                  ;;;;		 to shorten loop in consideration of the PC Convertible
 10165                                  
 10166                                  ;hkn; SS override
 10167 00001375 36803E[910D]FF          	CMP	byte [SS:DATE_FLAG],-1	; date is updated may be every
 10168 0000137B 751B                    	JNZ	short NoUpdate		; 65535 x ? ms if no one calls
 10169                                  
 10170 0000137D 50                      	PUSH	AX
 10171 0000137E 53                      	PUSH	BX			; following is tricky,
 10172 0000137F 51                      	PUSH	CX			; it may be called by critical handler
 10173 00001380 52                      	PUSH	DX			; at that time, DEVCALL is used by
 10174                                  					; other's READ or WRITE
 10175 00001381 1E                      	PUSH	DS			; save DS = SFT's segment
 10176                                  
 10177                                  ;hkn; READTIME must use ds = DOSDATA
 10178                                  ;hkn;	PUSH	CS			; READTIME must use DS=CS
 10179                                  
 10180 00001382 16                      	PUSH	SS ; 04/05/2019
 10181 00001383 1F                      	POP	DS
 10182                                  
 10183 00001384 B80000                  	MOV	AX,0			; therefore, we save DEVCALL
 10184 00001387 E89102                  	CALL	Save_Restore_Packet	; save DEVCALL packet
 10185                                  	;invoke	READTIME		; readtime
 10186 0000138A E883F7                  	call	READTIME
 10187 0000138D B80100                  	MOV	AX,1
 10188 00001390 E88802                  	CALL	Save_Restore_Packet	; restore DEVCALL packet
 10189                                  
 10190                                  ;	; MSDOS 3.3 (IBMDOS.COM, Offset 1F8Ch)
 10191                                  ;	; (MSDOS 6.0 code does not contain IBM DOS FETCHI_TAG check)
 10192                                  ;	push	bx
 10193                                  ;	mov	bx,DATE_FLAG
 10194                                  ;	add	bx,2  ; mov bx,FETCHI_FLAG
 10195                                  ;	cmp	word [cs:bx],5872h
 10196                                  ;	jz	short FETCHI_TAG_chk_ok
 10197                                  ;	call	DOSINIT
 10198                                  ;FETCHI_TAG_chk_ok:
 10199                                  ;	pop	bx
 10200                                  
 10201 00001393 1F                      	POP	DS			; restore DS
 10202 00001394 5A                      	POP	DX
 10203 00001395 59                      	POP	CX
 10204 00001396 5B                      	POP	BX
 10205 00001397 58                      	POP	AX
 10206                                  NoUpdate:
 10207                                  
 10208                                  ;hkn; SS override
 10209 00001398 36FF06[910D]            	INC	word [SS:DATE_FLAG]
 10210                                  
 10211                                  ;;; 7/15/86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 10212 0000139D EBC0                    	JMP	short INTEST
 10213                                  GET:
 10214 0000139F 30E4                    	XOR	AH,AH
 10215 000013A1 E84330                  	call	IOFUNC
 10216 000013A4 5E                      	POP	SI
 10217 000013A5 1F                      	POP	DS
 10218                                  ;;; 7/15/86
 10219                                  
 10220                                  ;hkn; SS override
 10221                                  	; MSDOS 6.0
 10222 000013A6 36C606[900D]00          	MOV	BYTE [SS:SCAN_FLAG],0
 10223                                  	;
 10224 000013AC 3C00                    	CMP	AL,0	    ; extended code ( AL )
 10225 000013AE 7505                    	JNZ	short noscan
 10226                                  
 10227                                  ;hkn; SS override
 10228                                  	;MOV	BYTE [SS:SCAN_FLAG],1 ; set this flag for ALT_Q key
 10229                                  	; 20/06/2023
 10230 000013B0 36FE06[900D]            	inc	byte [SS:SCAN_FLAG]
 10231                                  noscan:
 10232 000013B5 C3                      	retn
 10233                                  ;
 10234                                  ;----------------------------------------------------------------------------
 10235                                  ;
 10236                                  ;**	$STD_CON_STRING_OUTPUT - Console String Output
 10237                                  ;
 10238                                  ;
 10239                                  ;	ENTRY	(DS:DX) Point to output string '$' terminated
 10240                                  ;	EXIT	none
 10241                                  ;	USES	ALL
 10242                                  ;
 10243                                  ;----------------------------------------------------------------------------
 10244                                  ;
 10245                                  
 10246                                  _$STD_CON_STRING_OUTPUT:	;System call 9
 10247                                  
 10248 000013B6 89D6                    	mov	si,dx
 10249                                  STRING_OUT1:	
 10250 000013B8 AC                      	lodsb
 10251 000013B9 3C24                    	cmp	al,'$'
 10252 000013BB 74F8                    	je	short noscan
 10253                                  NEXT_STR1:
 10254 000013BD E88702                  	call	OUTT
 10255 000013C0 EBF6                    	jmp	short STRING_OUT1
 10256                                  
 10257                                  ;----------------------------------------------------------------------------
 10258                                  ;
 10259                                  ;**	$STD_CON_STRING_INPUT - Input Line from Console
 10260                                  ;
 10261                                  ;	$STD_CON_STRING_INPUT Fills a buffer from console input until CR
 10262                                  ;
 10263                                  ;	ENTRY	(ds:dx) = input buffer
 10264                                  ;	EXIT	none
 10265                                  ;	USES	ALL
 10266                                  ;
 10267                                  ;----------------------------------------------------------------------------
 10268                                  
 10269                                  	; 15/01/2024
 10270                                  
 10271                                  _$STD_CON_STRING_INPUT:		;System call 10
 10272                                  
 10273                                  	; 15/01/2024
 10274                                  	;mov	ax,ss
 10275                                  	;mov	es,ax
 10276 000013C2 16                      	push	ss
 10277 000013C3 07                      	pop	es
 10278                                  
 10279 000013C4 89D6                    	mov	si,dx
 10280 000013C6 30ED                    	xor	ch,ch
 10281 000013C8 AD                      	lodsw
 10282                                  
 10283                                  ;	(AL) = the buffer length
 10284                                  ;	(AH) = the template length
 10285                                  
 10286 000013C9 08C0                            or	al,al
 10287 000013CB 74E8                            jz	short noscan	;Buffer is 0 length!!?
 10288 000013CD 88E3                    	mov	bl,ah		;Init template counter
 10289 000013CF 88EF                            mov	bh,ch		;Init template counter
 10290                                  
 10291                                  ;	(BL) = the number of bytes in the template
 10292                                  
 10293 000013D1 38D8                            cmp	al,bl
 10294 000013D3 7605                            jbe	short NOEDIT	;If length of buffer inconsistent with contents
 10295 000013D5 80380D                          cmp	byte [bx+si],c_CR ; 0Dh
 10296 000013D8 7402                            jz	short EDITON	;If CR correctly placed EDIT is OK
 10297                                  
 10298                                  ; The number of chars in the template is >= the number of chars in buffer or
 10299                                  ; there is no CR at the end of the template. This is an inconsistant state
 10300                                  ; of affairs. Pretend that the template was empty:
 10301                                  ;
 10302                                  
 10303                                  NOEDIT:	
 10304 000013DA 88EB                    	mov	bl,ch		;Reset buffer
 10305                                  EDITON: 
 10306 000013DC 88C2                    	mov	dl,al
 10307 000013DE 4A                      	dec	dx		;DL is # of bytes we can put in the buffer
 10308                                  
 10309                                  ;	Top level. We begin to read a line in.
 10310                                  
 10311                                  NEWLIN: 
 10312 000013DF 36A0[F901]              	mov	al,[SS:CARPOS]
 10313 000013E3 36A2[FA01]              	mov	[SS:STARTPOS],al ;Remember position in raw buffer
 10314                                  
 10315 000013E7 56                      	push	si
 10316 000013E8 BF[FB01]                	mov	di,INBUF ;Build the new line here
 10317 000013EB 36882E[7905]            	mov	byte [SS:INSMODE],ch ;Insert mode off
 10318 000013F0 88EF                    	mov	bh,ch		;No chars from template yet
 10319 000013F2 88EE                    	mov	dh,ch		;No chars to new line yet
 10320 000013F4 E866FF                  	call	_$STD_CON_INPUT_NO_ECHO ;Get first char
 10321 000013F7 3C0A                    	cmp	al,c_LF		; 0Ah	;Linefeed 
 10322 000013F9 7503                    	jnz	short GOTCH
 10323                                  
 10324                                  ;	This is the main loop of reading in a character and processing it.
 10325                                  ;
 10326                                  ;	(BH) = the index of the next byte in the template
 10327                                  ;	(BL) = the length of the template
 10328                                  ;	(DH) = the number of bytes in the buffer
 10329                                  ;	(DL) = the length of the buffer
 10330                                  
 10331                                  GETCH:
 10332 000013FB E85FFF                  	call	_$STD_CON_INPUT_NO_ECHO
 10333                                  GOTCH:
 10334                                  ;
 10335                                  ; Brain-damaged Tim Patterson ignored ^F in case his BIOS did not flush the
 10336                                  ; input queue.
 10337                                  ;
 10338 000013FE 3C06                            cmp	al,"F"-"@"  ; CMP AL, 6  ; Ignore ^F
 10339 00001400 74F9                    	jz	short GETCH
 10340                                  
 10341                                  ;	If the leading char is the function-key lead byte
 10342                                  
 10343                                  	;cmp	al,[SS:ESCCHAR]
 10344                                  
 10345                                  	; 04/05/2019 - Retro DOS v4.0
 10346                                  
 10347                                  ;hkn; 	ESCCHAR is in TABLE seg (DOSCODE)
 10348                                  
 10349 00001402 2E3A06[1A0A]            	CMP	AL,[cs:ESCCHAR]
 10350 00001407 7439                            jz	short ESCAPE	;change reserved keyword DBM 5-7-87
 10351                                  
 10352                                  ;	Rubout and ^H are both destructive backspaces.
 10353                                  
 10354 00001409 3C7F                            cmp	al,c_DEL ; 7FH
 10355                                          ;jz	short BACKSPJ
 10356                                          ; 15/01/2024
 10357 0000140B 7466                    	je	short BACKSP
 10358 0000140D 3C08                    	cmp	al,c_BS  ; 8
 10359                                          ;jz	short BACKSPJ
 10360                                          ; 15/01/2024
 10361 0000140F 7462                    	je	short BACKSP
 10362                                  
 10363                                  	; 04/05/2019 -	MSDOS 6.0, also MSDOS 6.21 has bug (bullshit) here. 
 10364                                  	;		Two NOPs -instead of a JMP short, as two bytes-
 10365                                  	;	   	after CMP and a CMP again!
 10366                                  	;		
 10367                                  	;		-It would be better if they use a 'JMP short' to 
 10368                                  	;	      	DOSCODE:5279h from DOSCODE:5271h and leave NOPs
 10369                                  	;		between them. Then, they would be able use a patch
 10370                                  	;		between 5271h and 5279h when if it will be required.
 10371                                  	;		I think Tim Patterson would not do this CMP mistake!-
 10372                                  	;	
 10373                                  	; (MSDOS.SYS, from DOSCODE:5271h to DOSCODE:5279h)
 10374                                  
 10375                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10376                                  	;
 10377                                  	; (Note: nops below might be used for patching code for Windows 3.1)
 10378                                  
 10379                                  ;DOSCODE:526D	cmp     al, 8
 10380                                  ;DOSCODE:526F	jz      short BACKSPJ
 10381                                  ;DOSCODE:5271	cmp     al, 17h
 10382                                  ;DOSCODE:5273	nop
 10383                                  ;DOSCODE:5274	nop
 10384                                  ;DOSCODE:5275	cmp     al, 15h
 10385                                  ;DOSCODE:5277	nop
 10386                                  ;DOSCODE:5278	nop
 10387                                  ;DOSCODE:5279	cmp     al, 0Dh
 10388                                  ;DOSCODE:527B	jz      short ENDLIN
 10389                                  ;DOSCODE:527D	cmp     al, 0Ah
 10390                                  ;DOSCODE:527F	jz      short PHYCRLF
 10391                                  	
 10392                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10393                                  	; DOSCODE:525Dh
 10394                                  
 10395                                  ; 16/12/2022
 10396                                  %if 0
 10397                                  	; MSDOS 6.0
 10398                                  ;	^W deletes backward once and then backs up until a letter is before the
 10399                                  ;	cursor
 10400                                  
 10401                                  	CMP     AL,"W"-"@" ; 17h
 10402                                  
 10403                                  ;	The removal of the comment characters before the jump statement will
 10404                                  ;	cause ^W to backup a word.
 10405                                  
 10406                                  ;***	JZ	short WordDel
 10407                                  	NOP
 10408                                  	NOP
 10409                                  
 10410                                  	CMP     AL,"U"-"@" ; 15h
 10411                                  
 10412                                  ;	The removal of the comment characters before the jump statement will
 10413                                  ;	cause ^U to clear a line.
 10414                                  
 10415                                  ;***	JZ	short LineDel
 10416                                  	NOP
 10417                                  	NOP
 10418                                  
 10419                                  %endif
 10420                                  
 10421                                  ;	CR terminates the line.
 10422                                  
 10423 00001411 3C0D                            cmp	al,c_CR ; 0Dh
 10424 00001413 7430                            jz	short ENDLIN
 10425                                  
 10426                                  ;	LF goes to a new line and keeps on reading.
 10427                                  
 10428 00001415 3C0A                            cmp	al,c_LF ; 0Ah
 10429 00001417 7442                    	jz	short PHYCRLF
 10430                                  
 10431                                  ;	^X (or ESC) deletes the line and starts over
 10432                                  
 10433                                  	; MSDOS 3.3
 10434                                  	;cmp	al,[ss:CANCHAR] ; 1Bh
 10435                                  	;jz	short KILNEW
 10436                                  
 10437                                  	; MSDOS 6.0 (& MSDOS 6.21)
 10438                                  
 10439                                  ;hkn; 	CANCHAR is in TABLE seg (DOSCODE), so CS override
 10440                                  
 10441 00001419 2E3A06[190A]            	cmp	al,[cs:CANCHAR] ; 1Bh
 10442 0000141E 7440                    	jz	short KILNEW
 10443                                  	
 10444                                  	;cmp	al,CANCEL ; 1Bh	; Retro DOS v3.0
 10445                                  	;jz	short KILNEW
 10446                                  
 10447                                  ; Otherwise, we save the input character.
 10448                                  
 10449                                  SAVCH:	
 10450 00001420 38D6                    	cmp	dh,dl
 10451 00001422 7317                    	jnb	short BUFFUL		; buffer is full.
 10452 00001424 AA                              stosb
 10453 00001425 FEC6                    	inc	dh                      ; increment count in buffer.
 10454 00001427 E8B102                  	call	BUFOUT			; Print control chars nicely
 10455                                  
 10456 0000142A 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10457 00001430 75C9                    	jnz	short GETCH		; insertmode => don't advance template
 10458 00001432 38DF                            cmp	bh,bl
 10459 00001434 73C5                            jnb	short GETCH		; no more characters in template
 10460 00001436 46                              inc	si                      ; Skip to next char in template
 10461 00001437 FEC7                            inc	bh                      ; remember position in template
 10462 00001439 EBC0                            jmp	short GETCH
 10463                                  
 10464                                  	; 15/01/2024
 10465                                  ;BACKSPJ: 
 10466                                  	;jmp	short BACKSP
 10467                                  
 10468                                  BUFFUL: 
 10469 0000143B B007                    	mov	al, 7			; Bell to signal full buffer
 10470 0000143D E80702                  	call	OUTT
 10471 00001440 EBB9                    	jmp	short GETCH
 10472                                  
 10473                                  ESCAPE: 
 10474                                  	;transfer OEMFunctionKey
 10475 00001442 E900F6                  	JMP	OEMFunctionKey		; let the OEM's handle the key dispatch
 10476                                  
 10477                                  ENDLIN:
 10478 00001445 AA                              stosb				; Put the CR in the buffer
 10479 00001446 E8FE01                  	call	OUTT                    ; Echo it
 10480 00001449 5F                              pop	di                      ; Get start of user buffer
 10481 0000144A 8875FF                          mov	[di-1], dh		; Tell user how many bytes
 10482 0000144D FEC6                            inc	dh			; DH is length including CR
 10483                                  
 10484                                  COPYNEW:
 10485                                  	; (IBMDOS.COM, MSDOS 2.0, STRIN.ASM)
 10486                                  	;mov	bp, es
 10487                                  	;mov	bx, ds
 10488                                  	;mov	es, bx
 10489                                  	;mov	ds, bp
 10490                                  	;mov	si, INBUF
 10491                                  	;mov	cl, dh
 10492                                  	;rep	movsb
 10493                                  	;retn
 10494                                  
 10495                                  	; CPMIO.ASM (MSDOS 6.0)
 10496                                  	; (IBMDOS.COM, MSDOS 3.3, Offset 2061h) 
 10497                                  	;SAVE	<DS,ES>
 10498 0000144F 1E                      	PUSH	DS
 10499 00001450 06                      	PUSH	ES
 10500                                  	;RESTORE <DS,ES>		; XCHG ES,DS
 10501 00001451 1F                      	POP	DS
 10502 00001452 07                      	POP	ES
 10503                                  
 10504                                  ;;hkn; INBUF is in DOSDATA
 10505 00001453 BE[FB01]                        MOV     SI,INBUF
 10506 00001456 88F1                            MOV     CL,DH                   ; set up count
 10507 00001458 F3A4                            REP     MOVSB                   ; Copy final line to user buffer
 10508                                  OLDBAK_RETN:
 10509 0000145A C3                              RETN
 10510                                  
 10511                                  ;	Output a CRLF to the user screen and do NOT store it into the buffer
 10512                                  
 10513                                  PHYCRLF:
 10514 0000145B E81B01                  	CALL	CRLF
 10515 0000145E EB9B                            JMP	short GETCH
 10516                                  
 10517                                  	; MSDOS 6.0 (& MSDOS 3.3, IBMDOS.COM, 1987)
 10518                                  
 10519                                  ; DOSCODE:52CAh (MSDOS 621, MSDOS.SYS)
 10520                                  
 10521                                  	; Note: Following routines were not used in IBMDOS.COM
 10522                                  	;	-CRTL+W, CRTL+U is not activated-
 10523                                  	;	but they were in the kernel code!?)
 10524                                  
 10525                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10526                                  	; DOSCODE:52B6h
 10527                                  
 10528                                  ;;;;;;;;
 10529                                  
 10530                                  ; 16/12/2022
 10531                                  %if 0
 10532                                  ;
 10533                                  ; Delete the previous line
 10534                                  ;
 10535                                  LineDel:
 10536                                  	OR      DH,DH
 10537                                  	JZ	short GETCH	 ; 06/12/2022
 10538                                  	Call    BackSpace
 10539                                  	JMP	short LineDel
 10540                                  
 10541                                  %endif
 10542                                  
 10543                                  ;
 10544                                  ; delete the previous word.
 10545                                  ;
 10546                                  WordDel:
 10547                                  WordLoop:
 10548                                  ;	Call    BackSpace               ; backspace the one spot
 10549                                  ;	OR      DH,DH
 10550                                  ;	JZ	short GetChj
 10551                                  ;	MOV     AL,[ES:DI-1]
 10552                                  ;	cmp     al,'0'
 10553                                  ;	jb	short GetChj
 10554                                  ;	cmp     al,'9'
 10555                                  ;	jbe	short WordLoop
 10556                                  ;	OR      AL,20h
 10557                                  ;	CMP     AL,'a'
 10558                                  ;	JB	short GetChj
 10559                                  ;	CMP     AL,'z'
 10560                                  ;	JBE	short WordLoop
 10561                                  ;GetChj: 
 10562                                  ;	JMP	GETCH
 10563                                  
 10564                                  ; 16/12/2022
 10565                                  %if 0
 10566                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10567                                  	; (Worddel is not called or jumped from anywhere!)
 10568                                  WordDel:
 10569                                  WordLoop:
 10570                                  	Call    BackSpace               ; backspace the one spot
 10571                                  	OR      DH,DH
 10572                                  	JZ	short GetChj
 10573                                  	MOV     AL,[ES:DI-1]
 10574                                  	cmp     al,'0'
 10575                                  	jb	short GetChj
 10576                                  	cmp     al,'9'
 10577                                  	jbe	short WordLoop
 10578                                  	OR      AL,20h
 10579                                  	CMP     AL,'a'
 10580                                  	JB	short GetChj
 10581                                  	CMP     AL,'z'
 10582                                  	JBE	short WordLoop
 10583                                  GetChj: 
 10584                                  	JMP	GETCH
 10585                                  
 10586                                  %endif
 10587                                  
 10588                                  ;;;;;;;;
 10589                                  
 10590                                  ; DOSCODE:52F3h (MSDOS 621, MSDOS.SYS)
 10591                                  
 10592                                  ; The user wants to throw away what he's typed in and wants to start over.
 10593                                  ; We print the backslash and then go to the next line and tab to the correct
 10594                                  ; spot to begin the buffered input.
 10595                                  
 10596                                  KILNEW:
 10597 00001460 B05C                            mov	al,'\'
 10598 00001462 E8E201                          call	OUTT            ;Print the CANCEL indicator
 10599 00001465 5E                              pop	si		;Remember start of edit buffer
 10600                                  PUTNEW:
 10601 00001466 E81001                  	call	CRLF            ;Go to next line on screen
 10602 00001469 36A0[FA01]              	mov	al,[SS:STARTPOS]
 10603 0000146D E84B02                  	call	TAB             ;Tab over
 10604 00001470 E96CFF                          JMP     NEWLIN		;Start over again
 10605                                  
 10606                                  ;	Destructively back up one character position
 10607                                  
 10608                                  BACKSP:
 10609                                  	; 09/09/2018
 10610 00001473 E80800                  	Call    BackSpace
 10611 00001476 EB83                    	JMP     short GETCH	; 15/01/2024
 10612                                  
 10613                                  	; 15/01/2024
 10614                                  ;User really wants an ESC character in his line
 10615                                  TWOESC:	
 10616 00001478 2EA0[1A0A]              	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10617 0000147C EBA2                    	jmp	short SAVCH
 10618                                  
 10619                                  BackSpace:
 10620 0000147E 08F6                    	or	dh,dh
 10621 00001480 7419                    	jz	short OLDBAK	;No chars in line, do nothing to line
 10622 00001482 E85800                  	call	BACKUP          ;Do the backup
 10623 00001485 268A05                  	mov	al,[es:di]	;Get the deleted char
 10624 00001488 3C20                            cmp	al,20h	; ' '
 10625 0000148A 730F                    	jnb	short OLDBAK	;Was a normal char
 10626 0000148C 3C09                            cmp	al,c_HT ; 9
 10627 0000148E 741B                    	jz	short BAKTAB	;Was a tab, fix up users display
 10628                                  ;; 9/27/86 fix for ctrl-U backspace
 10629 00001490 3C15                    	CMP     AL,"U"-"@" ; 15h ; ctrl-U is a section symbol not ^U
 10630 00001492 7407                    	JZ	short OLDBAK
 10631 00001494 3C14                           	CMP     AL,"T"-"@" ; 14h ; ctrl-T is a paragraphs symbol not ^T
 10632 00001496 7403                    	JZ	short OLDBAK
 10633                                  ;; 9/27/86 fix for ctrl-U backspace
 10634 00001498 E84500                          call	BACKMES         ;Was a control char, zap the '^'
 10635                                  OLDBAK:
 10636 0000149B 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10637 000014A1 75B7                    	jnz	short OLDBAK_RETN ;In insert mode, done
 10638 000014A3 08FF                    	or	bh,bh
 10639 000014A5 74B3                            jz	short OLDBAK_RETN 
 10640                                  				;Not advanced in template, stay where we are
 10641 000014A7 FECF                    	dec	bh		;Go back in template
 10642 000014A9 4E                              dec	si
 10643 000014AA C3                      	retn
 10644                                  BAKTAB:
 10645 000014AB 57                              push	di
 10646 000014AC 4F                              dec	di		;Back up one char
 10647 000014AD FD                              std			;Go backward
 10648 000014AE 88F1                            mov	cl,dh		;Number of chars currently in line
 10649 000014B0 B020                            mov	al,20h	; ' '
 10650 000014B2 53                              push	bx
 10651 000014B3 B307                            mov	bl,7		;Max
 10652 000014B5 E30E                            jcxz	FIGTAB		;At start, do nothing
 10653                                  FNDPOS:
 10654 000014B7 AE                              scasb			;Look back
 10655 000014B8 7609                    	jbe	short CHKCNT
 10656 000014BA 26807D0109              	cmp	byte [es:di+1],9
 10657 000014BF 7409                    	jz	short HAVTAB	;Found a tab
 10658 000014C1 FECB                    	dec	bl		;Back one char if non tab control char
 10659                                  CHKCNT:
 10660 000014C3 E2F2                            loop	FNDPOS
 10661                                  FIGTAB:		
 10662 000014C5 362A1E[FA01]            	sub	bl,[SS:STARTPOS]
 10663                                  HAVTAB:
 10664 000014CA 28F3                    	sub	bl,dh
 10665 000014CC 00D9                    	add	cl,bl
 10666 000014CE 80E107                  	and	cl,7		;CX has correct number to erase
 10667 000014D1 FC                      	cld			;Back to normal
 10668 000014D2 5B                      	pop	bx
 10669 000014D3 5F                      	pop	di
 10670 000014D4 74C5                    	jz	short OLDBAK	;Nothing to erase
 10671                                  TABBAK:
 10672 000014D6 E80700                  	call	BACKMES
 10673 000014D9 E2FB                    	loop	TABBAK		;Erase correct number of chars
 10674 000014DB EBBE                    	jmp	short OLDBAK
 10675                                  
 10676                                  BACKUP:
 10677 000014DD FECE                            dec	dh		;Back up in line
 10678 000014DF 4F                              dec	di
 10679                                  BACKMES:
 10680 000014E0 B008                            mov	al,c_BS ; 8	;Backspace
 10681 000014E2 E86201                          call	OUTT
 10682 000014E5 B020                            mov	al,20h ; ' '	;Erase
 10683 000014E7 E85D01                          call	OUTT
 10684 000014EA B008                            mov	al,c_BS ; 8	;Backspace
 10685 000014EC E95801                  	jmp	OUTT		;Done
 10686                                  
 10687                                  	; 15/01/2024
 10688                                  ;User really wants an ESC character in his line
 10689                                  ;TWOESC:	
 10690                                  ;	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10691                                  ;	jmp	SAVCH
 10692                                  
 10693                                  ;Copy the rest of the template
 10694                                  COPYLIN:
 10695 000014EF 88D9                            mov	cl,bl		;Total size of template
 10696 000014F1 28F9                    	sub	cl,bh		;Minus position in template, is number to move
 10697 000014F3 EB07                            jmp	short COPYEACH
 10698                                  
 10699                                  COPYSTR:
 10700 000014F5 E83200                  	call	FINDOLD         ;Find the char
 10701 000014F8 EB02                    	jmp	short COPYEACH  ;Copy up to it
 10702                                  
 10703                                  ;Copy one char from template to line
 10704                                  COPYONE:
 10705 000014FA B101                            mov	cl,1
 10706                                  ;Copy CX chars from template to line
 10707                                  COPYEACH:
 10708 000014FC 36C606[7905]00                  mov	byte [SS:INSMODE],0	;All copies turn off insert mode
 10709 00001502 38D6                    	cmp	dh,dl
 10710 00001504 740F                            jz	short GETCH2		;At end of line, can't do anything
 10711 00001506 38DF                            cmp	bh,bl
 10712 00001508 740B                            jz	short GETCH2		;At end of template, can't do anything
 10713 0000150A AC                              lodsb
 10714 0000150B AA                              stosb
 10715 0000150C E8CC01                  	call	BUFOUT
 10716 0000150F FEC7                            inc	bh			;Ahead in template
 10717 00001511 FEC6                            inc	dh			;Ahead in line
 10718 00001513 E2E7                            loop	COPYEACH
 10719                                  GETCH2:
 10720 00001515 E9E3FE                          jmp	GETCH
 10721                                  
 10722                                  ;Skip one char in template
 10723                                  SKIPONE:
 10724 00001518 38DF                    	cmp	bh,bl
 10725 0000151A 74F9                    	jz	short GETCH2		;At end of template
 10726 0000151C FEC7                    	inc	bh			;Ahead in template
 10727 0000151E 46                      	inc	si
 10728                                          ;jmp	GETCH
 10729                                  	; 15/01/2024
 10730 0000151F EBF4                    	jmp	short GETCH2
 10731                                  
 10732                                  SKIPSTR:
 10733 00001521 E80600                  	call	FINDOLD                 ;Find out how far to go
 10734 00001524 01CE                            add	si,cx			;Go there
 10735 00001526 00CF                            add	bh,cl
 10736                                          ;jmp	GETCH
 10737                                  	; 15/01/2024
 10738 00001528 EBEB                    	jmp	short GETCH2
 10739                                  
 10740                                  ;Get the next user char, and look ahead in template for a match
 10741                                  ;CX indicates how many chars to skip to get there on output
 10742                                  ;NOTE: WARNING: If the operation cannot be done, the return
 10743                                  ;       address is popped off and a jump to GETCH is taken.
 10744                                  ;       Make sure nothing extra on stack when this routine
 10745                                  ;       is called!!! (no PUSHes before calling it).
 10746                                  
 10747                                  FINDOLD:
 10748 0000152A E830FE                          call	_$STD_CON_INPUT_NO_ECHO
 10749                                  
 10750                                  	; STRIN.ASM (MSDOS 2.11, 19/07/2018) 
 10751                                  
 10752                                  	;CMP	AL,[SS:ESCCHAR]	
 10753                                  	;JNZ	SHORT FINDSETUP
 10754                                  
 10755                                  	; CPMIO.ASM (MSDOS 6.0, 04/05/2019 - Retro DOS v4.0)
 10756                                  
 10757                                  ;hkn; ESCCHAR is in TABLE seg (DOSCODE), so CS override
 10758                                  
 10759 0000152D 2E3A06[1A0A]            	CMP	AL,[CS:ESCCHAR]		; did he type a function key?
 10760 00001532 7505                    	JNZ	SHORT FINDSETUP		; no, set up for scan
 10761                                  
 10762 00001534 E826FE                  	CALL	_$STD_CON_INPUT_NO_ECHO	; eat next char
 10763 00001537 EB1D                            JMP	SHORT NOTFND		; go try again
 10764                                  FINDSETUP:
 10765 00001539 88D9                    	mov	cl,bl
 10766 0000153B 28F9                            sub	cl,bh		;CX is number of chars to end of template
 10767 0000153D 7417                    	jz	short NOTFND	;At end of template
 10768 0000153F 49                              dec	cx		;Cannot point past end, limit search
 10769 00001540 7414                            jz	short NOTFND	;If only one char in template, forget it
 10770 00001542 06                      	push	es
 10771 00001543 1E                      	push	ds
 10772 00001544 07                      	pop	es
 10773 00001545 57                      	push	di
 10774 00001546 89F7                    	mov	di,si		;Template to ES:DI
 10775 00001548 47                      	inc	di
 10776 00001549 F2AE                    	repne	scasb		;Look
 10777 0000154B 5F                      	pop	di
 10778 0000154C 07                      	pop	es
 10779 0000154D 7507                    	jnz	short NOTFND	;Didn't find the char
 10780 0000154F F6D1                            not	cl		;Turn how far to go into how far we went
 10781 00001551 00D9                            add	cl,bl		;Add size of template
 10782 00001553 28F9                            sub	cl,bh		;Subtract current pos, result distance to skip
 10783                                  FINDOLD_RETN:
 10784 00001555 C3                      	retn
 10785                                  
 10786                                  NOTFND:
 10787 00001556 5D                      	pop	bp              ;Chuck return address
 10788                                  	;jmp	GETCH
 10789                                  	; 15/01/2024
 10790                                  GETCH2_j:
 10791 00001557 EBBC                    	jmp	short GETCH2
 10792                                  
 10793                                  REEDIT:
 10794 00001559 B040                    	mov	al,'@'		;Output re-edit character
 10795 0000155B E8E900                  	call	OUTT
 10796 0000155E 5F                      	pop	di
 10797 0000155F 57                      	push	di
 10798 00001560 06                      	push	es
 10799 00001561 1E                      	push	ds
 10800 00001562 E8EAFE                  	call	COPYNEW		;Copy current line into template
 10801 00001565 1F                      	pop	ds
 10802 00001566 07                      	pop	es
 10803 00001567 5E                      	pop	si
 10804 00001568 88F3                    	mov	bl,dh		;Size of line is new size template
 10805 0000156A E9F9FE                  	jmp	PUTNEW		;Start over again
 10806                                  
 10807                                  EXITINS:
 10808                                  ENTERINS:
 10809 0000156D 36F616[7905]            	not	byte [SS:INSMODE]
 10810                                  	;jmp	GETCH
 10811                                  	; 15/01/2024
 10812 00001572 EBE3                    	jmp	short GETCH2_j
 10813                                  
 10814                                  ;Put a real live ^Z in the buffer (embedded)
 10815                                  CTRLZ:
 10816 00001574 B01A                    	mov	al,"Z"-"@" ; 1Ah
 10817 00001576 E9A7FE                          jmp	SAVCH
 10818                                  
 10819                                  ;Output a CRLF
 10820                                  CRLF:
 10821 00001579 B00D                    	mov	al,c_CR ; 0Dh 
 10822 0000157B E8C900                  	call	OUTT
 10823 0000157E B00A                    	mov	al,c_LF ; 0Ah
 10824 00001580 E9C400                  	jmp	OUTT
 10825                                  
 10826                                  ;
 10827                                  ;----------------------------------------------------------------------------
 10828                                  ;
 10829                                  ;**	$RAW_CON_IO - Do Raw Console I/O
 10830                                  ;
 10831                                  ;	Input or output raw character from console, no echo
 10832                                  ;
 10833                                  ;	ENTRY	DL = -1 if input
 10834                                  ;		   =  output character if output
 10835                                  ;	EXIT	(AL) = input character if input
 10836                                  ;	USES	all
 10837                                  ;
 10838                                  ;----------------------------------------------------------------------------
 10839                                  ; 20/07/2018 - Retro DOS v3.0
 10840                                  
 10841                                  ; 04/05/2019 - Retro DOS v4.0
 10842                                  ; DOSCODE:541Ch (MSDOS 6.21, MSDOS.SYS)
 10843                                  
 10844                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10845                                  ; DOSCODE:5408h (MSDOS 5.0, MSDOS.SYS)
 10846                                  
 10847                                  _$RAW_CON_IO:			; System call 6
 10848 00001583 88D0                    	MOV	AL,DL
 10849 00001585 3CFF                    	CMP	AL,-1
 10850 00001587 7541                    	JNZ	SHORT RAWOUT ; 16/12/2022
 10851                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10852                                  	;jz	short rci1
 10853                                  	;jmp	short RAWOUT
 10854                                  	; 16/12/202
 10855                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10856                                  	;nop
 10857                                  rci1:
 10858                                  			; Get pointer to register save area
 10859 00001589 36C43E[8405]            	LES	DI,[SS:USER_SP] ; 12/03/2018
 10860 0000158E 31DB                    	XOR	BX,BX
 10861                                      	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10862 00001590 E81520                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10863                                          ;JC	SHORT RET17
 10864 00001593 72C0                            jc	short FINDOLD_RETN
 10865 00001595 B401                    	MOV	AH,1
 10866 00001597 E84D2E                  	CALL	IOFUNC
 10867 0000159A 750B                    	JNZ	SHORT RESFLG
 10868 0000159C E8F13A                  	CALL	SPOOLINT
 10869                                  	;OR	BYTE [ES:DI+16H],40H
 10870 0000159F 26804D1640              	OR	BYTE [ES:DI+user_env.user_F],40H ; Set user's zero flag
 10871 000015A4 30C0                    	XOR	AL,AL
 10872                                  RET17:
 10873 000015A6 C3                      	RETN
 10874                                  
 10875                                  RESFLG:
 10876                                  	;AND	BYTE [ES:DI+16H],0FFH-40H  ; 0BFh
 10877 000015A7 26806516BF              	AND	BYTE [ES:DI+user_env.user_F],0FFH-40H
 10878                                  				; Reset user's zero flag
 10879                                  ;RILP:
 10880                                  rci0:
 10881 000015AC E8E13A                  	CALL	SPOOLINT
 10882                                  ;
 10883                                  ;----------------------------------------------------------------------------
 10884                                  ;
 10885                                  ;**	$Raw_CON_INPUT - Raw Console Input
 10886                                  ;
 10887                                  ;	Input raw character from console, no echo
 10888                                  ;
 10889                                  ;	ENTRY	none
 10890                                  ;	EXIT	(al) = character
 10891                                  ;	USES	all
 10892                                  ;
 10893                                  ;----------------------------------------------------------------------------
 10894                                  ;
 10895                                  
 10896                                  ;rci0:	invoke	SPOOLINT
 10897                                  
 10898                                  	;entry	$RAW_CON_INPUT
 10899                                  
 10900                                  	; 04/05/2019 - Retro DOS v4.0
 10901                                  
 10902                                  ; DOSCODE:544Bh (MSDOS 6.21, MSDOS.SYS)
 10903                                  
 10904                                  _$RAW_CON_INPUT:		; System call 7
 10905 000015AF 53                      	push	bx
 10906 000015B0 31DB                    	XOR	BX,BX
 10907                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10908 000015B2 E8F31F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10909 000015B5 5B                      	pop	bx
 10910 000015B6 72EE                    	JC	SHORT RET17
 10911 000015B8 B401                    	MOV	AH,1
 10912 000015BA E82A2E                  	CALL	IOFUNC
 10913                                  	;JZ	SHORT RILP	; MSDOS 2.11
 10914                                  	;XOR	AH,AH
 10915                                          ;CALL	IOFUNC
 10916                                          ;RETN
 10917 000015BD 7506                    	jnz	short rci5	; MSDOS 3.3 & MSDOS 6.0
 10918 000015BF B484                    	MOV	AH,84h
 10919 000015C1 CD2A                    	INT	int_IBM  ; int 2Ah
 10920 000015C3 EBE7                    	JMP	short rci0
 10921                                  rci5:	
 10922 000015C5 30E4                    	XOR	AH,AH
 10923                                  	;CALL	IOFUNC
 10924                                  	;RETN
 10925                                  	; 18/12/2022
 10926 000015C7 E91D2E                  	jmp	IOFUNC
 10927                                  
 10928                                  ;       Output the character in AL to stdout
 10929                                  ;
 10930                                  	;entry	RAWOUT
 10931                                  RAWOUT:
 10932 000015CA 53                      	PUSH    BX
 10933 000015CB BB0100                  	MOV     BX,1
 10934                                  
 10935                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10936 000015CE E8D71F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10937 000015D1 721B                    	JC	SHORT RAWRET1
 10938                                  
 10939                                  	;
 10940                                  	; MSDOS 2.11
 10941                                          ;TEST	BYTE [SI+18H],080H	; output to file?
 10942                                          ;JZ	SHORT RAWNORM		; if so, do normally
 10943                                          ;PUSH	DS
 10944                                          ;PUSH	SI
 10945                                          ;LDS	SI,[SI+19H]		; output to special?
 10946                                  	;TEST	BYTE [SI+4],ISSPEC
 10947                                  	;POP	SI
 10948                                  	;
 10949                                          
 10950                                  	; MSDOS 3.3 & MSDOS 6.0
 10951                                  	;mov	bx,[si+5]
 10952 000015D3 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags] ;hkn; DS set up by get_io_sft
 10953                                   ;
 10954                                   ; If we are a network handle OR if we are not a local device then go do the
 10955                                   ; output the hard way.
 10956                                   ;	
 10957                                  	;and	bx,8080h
 10958 000015D6 81E38080                	AND	BX,sf_isnet+devid_device
 10959                                  	;cmp	bx,80h
 10960 000015DA 81FB8000                	CMP	BX,devid_device
 10961 000015DE 7510                    	jnz     short RAWNORM
 10962 000015E0 1E                      	push    ds
 10963                                  	;lds	bx,[si+7]
 10964 000015E1 C55C07                  	LDS	BX,[SI+SF_ENTRY.sf_devptr] ; output to special?
 10965                                  	;test	byte [bx+4],10h
 10966 000015E4 F6470410                	TEST	BYTE [BX+SYSDEV.ATT],ISSPEC
 10967                                  	;
 10968                                  
 10969 000015E8 1F                      	POP	DS
 10970 000015E9 7405                    	JZ	SHORT RAWNORM		; if not, do normally
 10971                                  
 10972 000015EB CD29                    	INT	int_fastcon  ; int 29h	; quickly output the char
 10973                                  
 10974                                  	;JMP	SHORT RAWRET
 10975                                  ;RAWNORM:
 10976                                  ;	CALL    RAWOUT3
 10977                                  RAWRET: 
 10978 000015ED F8                      	CLC
 10979                                  RAWRET1:
 10980 000015EE 5B                      	POP     BX
 10981                                  RAWRET2:
 10982 000015EF C3                      	RETN
 10983                                  RAWNORM:
 10984 000015F0 E80700                  	CALL    RAWOUT3
 10985 000015F3 EBF8                    	jmp	short RAWRET
 10986                                  
 10987                                  ;	Output the character in AL to handle in BX
 10988                                  ;
 10989                                  ;	entry	RAWOUT2
 10990                                  
 10991                                  RAWOUT2:
 10992                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10993                                  	;JC	SHORT RET18
 10994 000015F5 E8B01F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10995 000015F8 72F5                    	JC	SHORT RAWRET2
 10996                                  RAWOUT3:
 10997 000015FA 50                      	PUSH	AX
 10998 000015FB EB0C                    	JMP	SHORT RAWOSTRT
 10999                                  ROLP:
 11000 000015FD E8903A                  	CALL	SPOOLINT
 11001                                  
 11002                                  	; 01/05/2019 - Retro DOS v4.0
 11003                                  
 11004                                  	; MSDOS 6.0
 11005                                  	;OR	word [ss:DOS34_FLAG],CTRL_BREAK_FLAG ; 001000000000b
 11006                                  	; 17/12/2022
 11007 00001600 36800E[1206]02          	or	byte [ss:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8) ; 02h
 11008                                  	;or	word [ss:DOS34_FLAG],200h
 11009                                  				;AN002; set control break
 11010                                  	;invoke DSKSTATCHK
 11011 00001606 E8043A                  	call	DSKSTATCHK	;AN002; check control break
 11012                                  RAWOSTRT:
 11013 00001609 B403                    	MOV	AH,3
 11014 0000160B E8D92D                  	CALL	IOFUNC
 11015 0000160E 74ED                    	JZ	SHORT ROLP
 11016                                  
 11017                                  	; MSDOS 6.0
 11018                                  ;SR;
 11019                                  ; IOFUNC now returns ax = 0ffffh if there was an I24 on a status call and
 11020                                  ;the user failed. We do not send a char if this happens. We however return
 11021                                  ;to the caller with carry clear because this DOS call does not return any
 11022                                  ;status. 
 11023                                  ;
 11024 00001610 40                      	inc	ax		;fail on I24 if ax = -1
 11025 00001611 58                      	POP	AX
 11026 00001612 7405                    	jz	short nosend	;yes, do not send char
 11027 00001614 B402                    	MOV	AH,2
 11028 00001616 E8CE2D                  	call	IOFUNC
 11029                                  nosend:
 11030 00001619 F8                      	CLC			; Clear carry indicating successful
 11031 0000161A C3                      	retn
 11032                                  
 11033                                  	; MSDOS 3.3 & MSDOS 2.11
 11034                                  	;POP	AX
 11035                                  	;MOV	AH,2
 11036                                          ;CALL	IOFUNC
 11037                                  	;CLC			; Clear carry indicating successful
 11038                                  ;RET18:    
 11039                                  	;RETN
 11040                                  
 11041                                  ;;10/08/2018
 11042                                  ; 20/07/2018 - Retro DOS v3.0
 11043                                  ; ---------------------------------------------------------------------------
 11044                                  ; Retro DOS v2.0 (MSDOS 2.11) - OUTMES
 11045                                  ; ---------------------------------------------------------------------------
 11046                                  
 11047                                  ; This routine is called at DOS init
 11048                                  
 11049                                  ;;	;procedure OUTMES,NEAR ; String output for internal messages
 11050                                  ;;OUTMES:
 11051                                  ;;	;LODS	CS:BYTE PTR [SI]
 11052                                  ;;	CS	LODSB
 11053                                  ;;	CMP     AL,"$" ; 24h
 11054                                  ;;	JZ	SHORT RET18
 11055                                  ;;	CALL	OUTT
 11056                                  ;;	JMP     SHORT OUTMES
 11057                                  
 11058                                  ; ---------------------------------------------------------------------------
 11059                                  
 11060                                  ; 20/07/2018 - Retro DOS v3.0
 11061                                  
 11062                                  ; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 2252h
 11063                                  
 11064                                  ;
 11065                                  ;----------------------------------------------------------------------------
 11066                                  ;
 11067                                  ; Inputs:
 11068                                  ;	AX=0 save the DEVCALL request packet
 11069                                  ;	  =1 restore the DEVCALL request packet
 11070                                  ; Function:
 11071                                  ;	save or restore the DEVCALL packet
 11072                                  ; Returns:
 11073                                  ;	none
 11074                                  ;
 11075                                  ;----------------------------------------------------------------------------
 11076                                  ;
 11077                                  
 11078                                  ; 04/05/2019 - Retro DOS v4.0
 11079                                  ; DOSCODE:54B9h (MSDOS 6.21, MSDOS.SYS)
 11080                                  
 11081                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11082                                  ; DOSCODE:54A5h (MSDOS 5.0, MSDOS.SYS)
 11083                                  
 11084                                  ; 12/05/2019
 11085                                  
 11086                                  	; 15/01/2024
 11087                                  
 11088                                  Save_Restore_Packet:
 11089 0000161B 1E                      	PUSH	DS
 11090 0000161C 06                      	PUSH	ES
 11091 0000161D 56                      	PUSH	SI
 11092 0000161E 57                      	PUSH	DI
 11093                                  
 11094                                  	; 16/12/2022
 11095                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11096                                  	; 09/09/2018
 11097 0000161F BF[6C0D]                	mov	di,FAKE_STACK_2F
 11098 00001622 BE[5A03]                	mov	si,DEVCALL
 11099 00001625 BE[5A03]                	mov	si,DEVCALL
 11100                                  	;
 11101                                  	; 21/09/2023
 11102 00001628 09C0                    	or	ax,ax 
 11103                                  	;CMP	AX,0		; save packet
 11104 0000162A 7402                    	JZ	short save_packet ; 16/12/2022
 11105                                  	;je	short set_seg
 11106                                  
 11107                                  	; MSDOS 6.0
 11108                                  restore_packet:
 11109                                  ;	MOV	SI,OFFSET DOSDATA:Packet_Temp	;source
 11110                                  ;	MOV	DI,OFFSET DOSDATA:DEVCALL	;destination
 11111                                  	; MSDOS 3.3
 11112                                  	;mov	si,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11113                                  	;mov	di,DEVCALL  ; 09/09/2018
 11114                                  	;
 11115                                  	;JMP	short set_seg
 11116                                  
 11117                                  	; 16/12/2022	
 11118                                  	; 09/09/2018
 11119 0000162C 87F7                    	xchg	si,di  ; DI = offset DEVCALL, SI = offset FAKE_STACK_2F
 11120                                  
 11121                                  ; 16/12/2022
 11122                                  %if 0
 11123                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11124                                  	cmp	ax,0		; save packet
 11125                                  	jz	short save_packet
 11126                                  	mov	si,FAKE_STACK_2F ; 07/12/2022
 11127                                  	mov	di,DEVCALL 
 11128                                  	jmp	short set_seg
 11129                                  
 11130                                  	; MSDOS 6.0
 11131                                  save_packet:
 11132                                  ;	MOV	DI,OFFSET DOSDATA:Packet_Temp	;destination
 11133                                  ;	MOV	SI,OFFSET DOSDATA:DEVCALL	;source
 11134                                  	; 09/09/2018
 11135                                  	; MSDOS 3.3
 11136                                  	;mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11137                                  	;mov	si,DEVCALL ; 09/09/2018
 11138                                  
 11139                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11140                                  	mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11141                                  	mov	si,DEVCALL
 11142                                  %endif
 11143                                  
 11144                                  ; 15/01/2024
 11145                                  ; 16/12/2022
 11146                                  save_packet:
 11147                                  ;set_seg:
 11148                                  	; MSDOS 3.3
 11149                                  	;mov	ax,cs
 11150                                  
 11151                                  	; MSDOS 6.0
 11152                                  	;MOV	AX,SS		; set DS,ES to DOSDATA
 11153                                  	;MOV	DS,AX
 11154                                  	;MOV	ES,AX
 11155                                  	; 15/01/2024
 11156 0000162E 16                      	push	ss
 11157 0000162F 1F                      	pop	ds
 11158 00001630 1E                      	push	ds
 11159 00001631 07                      	pop	es
 11160                                  
 11161 00001632 B90B00                  	MOV	CX,11		; 11 words to move
 11162 00001635 F3A5                    	REP	MOVSW
 11163                                  
 11164 00001637 5F                      	POP	DI
 11165 00001638 5E                      	POP	SI
 11166 00001639 07                      	POP	ES
 11167 0000163A 1F                      	POP	DS
 11168 0000163B C3                      	retn
 11169                                  
 11170                                  ;============================================================================
 11171                                  ; CPMIO2.ASM, MSDOS 6.0, 1991
 11172                                  ;============================================================================
 11173                                  ; 20/07/2018 - Retro DOS v3.0
 11174                                  ; 01/05/2019 - Retro DOS v4.0
 11175                                  
 11176                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 11177                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 11178                                  ;hkn;	not valid. 
 11179                                  
 11180                                  ;
 11181                                  ;----------------------------------------------------------------------------
 11182                                  ;
 11183                                  ;**	$STD_CON_INPUT - System Call 1
 11184                                  ;
 11185                                  ;	Input character from console, echo
 11186                                  ;
 11187                                  ;	ENTRY	none
 11188                                  ;	EXIT	(al) = character
 11189                                  ;	USES	ALL
 11190                                  ;
 11191                                  ;----------------------------------------------------------------------------
 11192                                  ;
 11193                                  
 11194                                  _$STD_CON_INPUT:	;System call 1
 11195                                  	
 11196 0000163C E81EFD                  	CALL	_$STD_CON_INPUT_NO_ECHO
 11197 0000163F 50                      	PUSH	AX
 11198 00001640 E80400                  	CALL	OUTT
 11199 00001643 58                      	POP	AX
 11200                                  CON_INPUT_RETN:	
 11201 00001644 C3                      	RETN
 11202                                  
 11203                                  ;
 11204                                  ;----------------------------------------------------------------------------
 11205                                  ;
 11206                                  ;**	$STD_CON_OUTPUT - System Call 2
 11207                                  ;
 11208                                  ;	Output character to console
 11209                                  ;
 11210                                  ;	ENTRY	(dl) = character
 11211                                  ;	EXIT	none
 11212                                  ;	USES	all
 11213                                  ;
 11214                                  ;----------------------------------------------------------------------------
 11215                                  ;
 11216                                  
 11217                                  ; DOSCODE:54E9h (MSDOS 6.21, MSDOS.SYS)
 11218                                  
 11219                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11220                                  ; DOSCODE:54D5h (MSDOS 5.0, MSDOS.SYS)
 11221                                  
 11222                                  _$STD_CON_OUTPUT:	;System call 2
 11223                                  
 11224 00001645 88D0                    	MOV	AL,DL
 11225                                  OUTT:
 11226 00001647 3C20                    	CMP	AL,20H ; " "
 11227 00001649 725C                    	JB	SHORT CTRLOUT
 11228 0000164B 3C7F                    	CMP	AL,c_DEL ; 7Fh
 11229 0000164D 7405                    	JZ	SHORT OUTCH
 11230                                  OUTCHA:	
 11231                                  	;INC	BYTE PTR [CARPOS]
 11232 0000164F 36FE06[F901]            	INC	BYTE [SS:CARPOS]
 11233                                  OUTCH:
 11234 00001654 1E                      	PUSH	DS
 11235 00001655 56                      	PUSH	SI
 11236                                  	;INC	BYTE PTR [CHARCO]		;invoke statchk...
 11237                                  	;AND	BYTE PTR [CHARCO],00111111B	;AN000; every 64th char
 11238 00001656 36FE06[0003]            	INC	BYTE [SS:CHARCO]	
 11239                                  	;AND	BYTE [SS:CHARCO],00111111B
 11240                                  	; 01/05/2019 - Retro DOS v4.0
 11241 0000165B 368026[0003]3F          	and	byte [SS:CHARCO],3Fh
 11242 00001661 7505                    	JNZ	SHORT OUTSKIP
 11243                                  
 11244 00001663 50                      	PUSH	AX
 11245 00001664 E8573A                  	CALL	STATCHK
 11246 00001667 58                      	POP	AX
 11247                                  OUTSKIP:
 11248 00001668 E85FFF                  	CALL	RAWOUT				;output the character
 11249                                  
 11250 0000166B 5E                      	POP	SI
 11251 0000166C 1F                      	POP	DS
 11252                                  
 11253                                  	;TEST	BYTE PTR [PFLAG],-1
 11254                                  	;retz
 11255 0000166D 36F606[FE02]FF          	TEST	BYTE [SS:PFLAG],0FFh
 11256 00001673 74CF                    	JZ	SHORT CON_INPUT_RETN
 11257                                  
 11258 00001675 53                      	PUSH	BX
 11259 00001676 1E                      	PUSH	DS
 11260 00001677 56                      	PUSH	SI
 11261 00001678 BB0100                  	MOV	BX,1
 11262                                  	; 20/07/2018 - Retro DOS v3.0
 11263                                  	; MSDOS 3.3
 11264                                  	; MSDOS 6.0 (CPMIO2.ASM)
 11265 0000167B E82A1F                  	CALL	GET_IO_SFT		;hkn; GET_IO_SFT will set up DS:SI
 11266                                  					;hkn; to sft entry
 11267 0000167E 7224                    	JC	SHORT TRIPOPJ
 11268                                  
 11269                                  	; 01/05/2019 - Retro DOS v4.0
 11270                                  
 11271                                  	;mov	bx,[si+5]
 11272 00001680 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags]
 11273                                  	;test	bx,8000h
 11274                                  	;TEST	BX,sf_isnet	; 8000h		; output to NET?
 11275 00001683 F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 11276 00001686 751C                    	JNZ	short TRIPOPJ 			; if so, no echo
 11277                                  	;;test	bx,80h
 11278                                  	;TEST	BX,devid_device 		; output to file?
 11279 00001688 F6C380                  	test	bl,devid_device ; 80h
 11280 0000168B 7417                    	JZ	SHORT TRIPOPJ 			; if so, no echo
 11281                                  	; 14/03/2018
 11282                                  	;call	GET_IO_FCB	 	; IBMDOS.COM, MSDOS 2.11
 11283                                  	;jc	short TRIPOPJ
 11284                                  	; MSDOS 2.11
 11285                                  	;test	byte [SI+18H], 80h
 11286                                  	;jz	short TRIPOPJ
 11287 0000168D BB0400                  	MOV	BX,4
 11288 00001690 E8151F                  	CALL	GET_IO_SFT
 11289 00001693 720F                    	JC	SHORT TRIPOPJ
 11290                                  	;;test	word [si+5], 800h
 11291                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_net_spool ; 800H
 11292                                  	;test	byte [si+6],8 ; 08/11/2022
 11293 00001695 F6440608                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8) ; 8 
 11294                                  						; StdPrn redirected?
 11295                                  	;;JZ	SHORT LISSTRT2J			; No, OK to echo
 11296                                  	;jz	LISSTRT2 ; 10/08/2018 
 11297                                  	; 16/12/2022
 11298 00001699 7503                    	jnz	short outch1
 11299 0000169B E98700                  	jmp	LISSTRT2
 11300                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11301                                  	;jz	short LISSTRT2J
 11302                                  outch1:
 11303                                  	;MOV	BYTE [PFLAG],0
 11304 0000169E 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0		; If a spool, NEVER echo
 11305                                  	; MSDOS 2.11
 11306                                  	;mov	bx,4
 11307                                  	;jmp	short LISSTRT2
 11308                                  	
 11309                                  TRIPOPJ:
 11310                                  	; 20/07/2018
 11311 000016A4 E98100                  	JMP	TRIPOP
 11312                                  
 11313                                  	; 16/12/2022
 11314                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11315                                  ;LISSTRT2J:
 11316                                  ;	JMP	LISSTRT2
 11317                                  
 11318                                  CTRLOUT:
 11319 000016A7 3C0D                    	CMP	AL,c_CR ; 0Dh
 11320 000016A9 7420                    	JZ	SHORT ZERPOS
 11321 000016AB 3C08                    	CMP	AL,c_BS ; 8
 11322 000016AD 7424                    	JZ	SHORT BACKPOS
 11323 000016AF 3C09                    	CMP	AL,c_HT ; 9
 11324 000016B1 75A1                    	JNZ	SHORT OUTCH
 11325                                  	;MOV	AL,[CARPOS]
 11326 000016B3 36A0[F901]              	MOV	AL,[SS:CARPOS]
 11327 000016B7 0CF8                    	OR	AL,0F8H
 11328 000016B9 F6D8                    	NEG	AL
 11329                                  TAB:
 11330 000016BB 51                      	PUSH	CX
 11331 000016BC 88C1                    	MOV	CL,AL
 11332 000016BE B500                    	MOV	CH,0
 11333 000016C0 E307                    	JCXZ	POPTAB
 11334                                  TABLP:
 11335 000016C2 B020                    	MOV	AL," "
 11336 000016C4 E880FF                  	CALL	OUTT
 11337 000016C7 E2F9                    	LOOP	TABLP
 11338                                  POPTAB:
 11339 000016C9 59                      	POP	CX
 11340                                  
 11341 000016CA C3                      	RETN
 11342                                  
 11343                                  ZERPOS:
 11344                                  	;MOV	BYTE PTR [CARPOS],0
 11345 000016CB 36C606[F901]00          	MOV	BYTE [SS:CARPOS],0
 11346                                  	; 10/08/2018
 11347 000016D1 EB81                    	JMP	short OUTCH ; 04/05/2019
 11348                                  	
 11349                                  	; 18/12/2022
 11350                                  ;OUTJ:	
 11351                                  	;JMP	OUTT
 11352                                  
 11353                                  BACKPOS:
 11354                                  	;DEC	BYTE PTR [CARPOS]
 11355 000016D3 36FE0E[F901]            	DEC	BYTE [SS:CARPOS]
 11356 000016D8 E979FF                  	JMP	OUTCH
 11357                                  
 11358                                  BUFOUT:
 11359 000016DB 3C20                    	CMP	AL," "
 11360 000016DD 7315                    	JAE	SHORT OUTJ		;Normal char
 11361 000016DF 3C09                    	CMP	AL,9
 11362 000016E1 7411                    	JZ	SHORT OUTJ		;OUT knows how to expand tabs
 11363                                  	;DOS 3.3  7/14/86
 11364 000016E3 3C15                    	CMP	AL,"U"-"@" ; 15h	; turn ^U to section symbol
 11365 000016E5 740D                    	JZ	short CTRLU
 11366 000016E7 3C14                    	CMP	AL,"T"-"@" ; 14h	; turn ^T to paragraph symbol
 11367 000016E9 7409                    	JZ	short CTRLU
 11368                                  NOT_CTRLU:
 11369                                  	;DOS 3.3  7/14/86
 11370 000016EB 50                      	PUSH	AX
 11371 000016EC B05E                    	MOV	AL,"^"
 11372 000016EE E856FF                  	CALL	OUTT		;Print '^' before control chars
 11373 000016F1 58                      	POP	AX
 11374 000016F2 0C40                    	OR	AL,40H		;Turn it into Upper case mate
 11375                                  CTRLU:
 11376                                  	;CALL	OUTT
 11377                                  	; 18/12/2022
 11378                                  OUTJ:
 11379 000016F4 E950FF                  	jmp	OUTT
 11380                                  ;BUFOUT_RETN:
 11381                                  	;RETN
 11382                                  
 11383                                  ;
 11384                                  ;----------------------------------------------------------------------------
 11385                                  ;
 11386                                  ;**	$STD_AUX_INPUT - System Call 3
 11387                                  ;
 11388                                  ;	$STD_AUX_INPUT returns a character from Aux Input
 11389                                  ;
 11390                                  ;	ENTRY	none
 11391                                  ;	EXIT	(al) = character
 11392                                  ;	USES	all
 11393                                  ;
 11394                                  ;----------------------------------------------------------------------------
 11395                                  ;
 11396                                  
 11397                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11398                                  
 11399                                  _$STD_AUX_INPUT:	;System call 3
 11400                                  
 11401 000016F7 E8C439                  	CALL	STATCHK
 11402 000016FA BB0300                  	MOV	BX,3
 11403 000016FD E8A81E                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11404                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11405                                  	;retc
 11406                                  	; 16/12/2022
 11407                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11408                                  	;JC	SHORT BUFOUT_RETN
 11409                                  	;JMP	SHORT TAISTRT
 11410                                  	; 07/12/2022
 11411 00001700 7304                    	jnc	SHORT TAISTRT
 11412 00001702 C3                      	retn	
 11413                                  
 11414                                  AUXILP:
 11415 00001703 E88A39                  	CALL	SPOOLINT
 11416                                  TAISTRT:
 11417 00001706 B401                    	MOV	AH,1
 11418 00001708 E8DC2C                  	CALL	IOFUNC
 11419 0000170B 74F6                    	JZ	SHORT AUXILP
 11420 0000170D 30E4                    	XOR	AH,AH
 11421                                  	; 16/12/2022
 11422                                  	;CALL	IOFUNC
 11423                                  	;RETN
 11424                                  	; 07/12/2022
 11425 0000170F E9D52C                  	jmp	IOFUNC
 11426                                  
 11427                                  ;
 11428                                  ;----------------------------------------------------------------------------
 11429                                  ;
 11430                                  ;**	$STD_AUX_OUTPUT - Output character to AUX
 11431                                  ;
 11432                                  ;	ENTRY	(dl) = character
 11433                                  ;	EXIT	none
 11434                                  ;	USES	all
 11435                                  ;
 11436                                  ;----------------------------------------------------------------------------
 11437                                  ;
 11438                                  
 11439                                  _$STD_AUX_OUTPUT:	;System call 4
 11440                                  
 11441 00001712 53                      	PUSH	BX
 11442 00001713 BB0300                  	MOV	BX,3
 11443 00001716 EB04                    	JMP	SHORT SENDOUT
 11444                                  
 11445                                  ;
 11446                                  ;----------------------------------------------------------------------------
 11447                                  ;
 11448                                  ;**	$STD_PRINTER_OUTPUT - Output character to printer
 11449                                  ;
 11450                                  ;	ENTRY	(dl) = character
 11451                                  ;	EXIT	none
 11452                                  ;	USES	all
 11453                                  ;
 11454                                  ;----------------------------------------------------------------------------
 11455                                  ;
 11456                                  
 11457                                  _$STD_PRINTER_OUTPUT:	;System call 5
 11458                                  
 11459 00001718 53                      	PUSH	BX
 11460 00001719 BB0400                  	MOV	BX,4
 11461                                  
 11462                                  SENDOUT:
 11463 0000171C 88D0                    	MOV	AL,DL
 11464 0000171E 50                      	PUSH	AX
 11465 0000171F E89C39                  	CALL	STATCHK
 11466 00001722 58                      	POP	AX
 11467 00001723 1E                      	PUSH	DS
 11468 00001724 56                      	PUSH	SI
 11469                                  LISSTRT2:
 11470 00001725 E8CDFE                  	CALL	RAWOUT2
 11471                                  TRIPOP:
 11472 00001728 5E                      	POP	SI
 11473 00001729 1F                      	POP	DS
 11474 0000172A 5B                      	POP	BX
 11475                                  SCIS_RETN:	; 20/07/2018
 11476 0000172B C3                      	RETN
 11477                                  ;
 11478                                  ;----------------------------------------------------------------------------
 11479                                  ;
 11480                                  ;**	$STD_CON_INPUT_STATUS - System Call 11
 11481                                  ;
 11482                                  ;	Check console input status
 11483                                  ;
 11484                                  ;	ENTRY	none
 11485                                  ;	EXIT	AL = -1 character available, = 0 no character
 11486                                  ;	USES	all
 11487                                  ;
 11488                                  ;----------------------------------------------------------------------------
 11489                                  ;
 11490                                  
 11491                                  _$STD_CON_INPUT_STATUS:		;System call 11
 11492                                  
 11493 0000172C E88F39                  	CALL	STATCHK
 11494 0000172F B000                    	MOV	AL,0		; no xor!!
 11495                                  	;retz
 11496 00001731 74F8                    	JZ	SHORT SCIS_RETN ; 15/04/2018
 11497 00001733 0CFF                    	OR	AL,-1
 11498                                  ;SCIS_RETN:
 11499 00001735 C3                      	RETN
 11500                                  
 11501                                  ;
 11502                                  ;----------------------------------------------------------------------------
 11503                                  ;
 11504                                  ;**	$STD_CON_INPUT_FLUSH - System Call 12
 11505                                  ;
 11506                                  ;	Flush console input buffer and perform call in AL
 11507                                  ;
 11508                                  ;	ENTRY	(AL) = DOS function to be called after flush (1,6,7,8,10)
 11509                                  ;	EXIT	(al) = 0 iff (al) was not one of the supported fcns
 11510                                  ;		return arguments for the fcn supplied in (AL)
 11511                                  ;	USES	all
 11512                                  ;
 11513                                  ;----------------------------------------------------------------------------
 11514                                  ;
 11515                                  
 11516                                  _$STD_CON_INPUT_FLUSH:		;System call 12
 11517                                  
 11518 00001736 50                      	PUSH	AX
 11519 00001737 52                      	PUSH	DX
 11520 00001738 31DB                    	XOR	BX,BX
 11521 0000173A E86B1E                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11522                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11523 0000173D 7205                    	JC	SHORT BADJFNCON
 11524 0000173F B404                    	MOV	AH,4
 11525 00001741 E8A32C                  	CALL	IOFUNC
 11526                                  
 11527                                  BADJFNCON:
 11528 00001744 5A                      	POP	DX
 11529 00001745 58                      	POP	AX
 11530 00001746 88C4                    	MOV	AH,AL
 11531 00001748 3C01                    	CMP	AL,1
 11532 0000174A 7413                    	JZ	SHORT REDISPJ
 11533 0000174C 3C06                    	CMP	AL,6
 11534 0000174E 740F                    	JZ	SHORT REDISPJ
 11535 00001750 3C07                    	CMP	AL,7
 11536 00001752 740B                    	JZ	SHORT REDISPJ
 11537 00001754 3C08                    	CMP	AL,8
 11538 00001756 7407                    	JZ	SHORT REDISPJ
 11539 00001758 3C0A                    	CMP	AL,10
 11540 0000175A 7403                    	JZ	SHORT REDISPJ
 11541 0000175C B000                    	MOV	AL,0
 11542 0000175E C3                      	RETN
 11543                                  
 11544                                  REDISPJ:
 11545 0000175F FA                      	CLI
 11546                                  	;transfer REDISP
 11547 00001760 E925EC                  	JMP	REDISP
 11548                                  
 11549                                  ;============================================================================
 11550                                  ; FCBIO.ASM, MSDOS 6.0, 1991
 11551                                  ;============================================================================
 11552                                  ; 20/07/2018 - Retro DOS v3.0
 11553                                  ; 17/05/2019 - Retro DOS v4.0
 11554                                  
 11555                                  ;**	FCBIO.ASM - Ancient 1.0 1.1 FCB system calls
 11556                                  ;
 11557                                  ;	$GET_FCB_POSITION
 11558                                  ;	$FCB_DELETE
 11559                                  ;	$GET_FCB_FILE_LENGTH
 11560                                  ;	$FCB_CLOSE
 11561                                  ;	$FCB_RENAME
 11562                                  ;	SaveFCBInfo
 11563                                  ;	ResetLRU
 11564                                  ;	SetOpenAge
 11565                                  ;	LRUFCB
 11566                                  ;	FCBRegen
 11567                                  ;	BlastSFT
 11568                                  ;	CheckFCB
 11569                                  ;	SFTFromFCB
 11570                                  ;	FCBHardErr
 11571                                  ;
 11572                                  ;	Revision history:
 11573                                  ;
 11574                                  ;		Created: ARR 4 April 1983"
 11575                                  ;			 MZ  6 June  1983 completion of functions
 11576                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 11577                                  ;					  times.  Change so successive closes work by
 11578                                  ;					  always returning OK.	Also, detect I/O to
 11579                                  ;					  already closed FCB and return EOF.
 11580                                  ;			 MZ 16 Jan   1984 More braindamage.  Need to separate info
 11581                                  ;					  out of sft into FCB for reconnection
 11582                                  ;
 11583                                  ;		A000	 version 4.00  Jan. 1988
 11584                                  
 11585                                  ;Break <$Get_FCB_Position - set random record fields to current pos>
 11586                                  ;----------------------------------------------------------------------------
 11587                                  ;
 11588                                  ;   $Get_FCB_Position - look at an FCB, retrieve the current position from the
 11589                                  ;	extent and next record field and set the random record field to point
 11590                                  ;	to that record
 11591                                  ;
 11592                                  ;   Inputs:	DS:DX point to a possible extended FCB
 11593                                  ;   Outputs:	The random record field of the FCB is set to the current record
 11594                                  ;   Registers modified: all
 11595                                  ;
 11596                                  ;----------------------------------------------------------------------------
 11597                                  ;
 11598                                  
 11599                                  _$GET_FCB_POSITION:
 11600 00001763 E8D404                  	call	GetExtended		; point to FCB
 11601 00001766 E8A504                  	call	GetExtent		; DX:AX is current record
 11602                                  	;mov	[si+21h],ax
 11603 00001769 894421                  	MOV	[SI+SYS_FCB.RR],AX 	; drop in low order piece
 11604                                  	;mov	[si+23h],dl
 11605 0000176C 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; drop in high order piece
 11606                                  	;cmp	word [si+0Eh],64
 11607 0000176F 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 11608 00001773 7303                    	JAE	short GetFCBBye
 11609                                  	;mov	[si+24h],dh
 11610 00001775 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 11611                                  GoodPath:	; 16/12/2022
 11612                                  GetFCBBye:
 11613 00001778 E9D8EE                  	jmp	FCB_RET_OK
 11614                                  
 11615                                  ;Break <$FCB_Delete - remove several files that match the input FCB>
 11616                                  ;----------------------------------------------------------------------------
 11617                                  ;
 11618                                  ;**	$FCB_Delete - Delete from FCB Template
 11619                                  ;
 11620                                  ;	given an FCB, remove all directory entries in the current
 11621                                  ;	directory that have names that match the FCB's ?  marks.
 11622                                  ;
 11623                                  ;	ENTRY	(DS:DX) = address of FCB
 11624                                  ;	EXIT	entries matching the FCB are deleted
 11625                                  ;		(al) = ff iff no entries were deleted
 11626                                  ;	USES	all
 11627                                  ;
 11628                                  ;----------------------------------------------------------------------------
 11629                                  ;
 11630                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11631                                  
 11632                                  _$FCB_DELETE:		; System call 19
 11633                                  					; OpenBuf is in DOSDATA
 11634 0000177B BF[BE03]                	MOV	DI,OPENBUF 		; appropriate place 
 11635                                  
 11636 0000177E E8E452                  	call	TransFCB		; convert FCB to path
 11637 00001781 7207                    	JC	short BadPath 		; signal no deletions
 11638                                  
 11639 00001783 16                      	push	SS
 11640 00001784 1F                      	pop	DS			; SS is DOSDATA
 11641                                  
 11642 00001785 E8370D                  	call	DOS_DELETE		; wham
 11643                                  	;JC	short BadPath
 11644                                  	; 16/12/2022
 11645 00001788 73EE                    	jnc 	short GoodPath
 11646                                  ;GoodPath:
 11647                                  ;	;jmp	FCB_RET_OK		; do a good return
 11648                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11649                                  ;	jmp	short GetFCBBye
 11650                                  
 11651                                  BadPath:
 11652                                  	; Error code is in AX
 11653                                  
 11654 0000178A E9C9EE                  	jmp	FCB_RET_ERR		; let someone else signal the error
 11655                                  
 11656                                  ;Break <$Get_FCB_File_Length - return the length of a file>
 11657                                  ;----------------------------------------------------------------------------
 11658                                  ;
 11659                                  ;   $Get_FCB_File_Length - set the random record field to the length of the
 11660                                  ;	file in records (rounded up if partial).
 11661                                  ;
 11662                                  ;   Inputs:	DS:DX - point to a possible extended FCB
 11663                                  ;   Outputs:	Random record field updated to reflect the number of records
 11664                                  ;   Registers modified: all
 11665                                  ;
 11666                                  ;----------------------------------------------------------------------------
 11667                                  ;
 11668                                  	; 15/01/2024
 11669                                  
 11670                                  _$GET_FCB_FILE_LENGTH:
 11671                                  
 11672 0000178D E8AA04                  	call	GetExtended		; get real FCB pointer
 11673                                  					; DX points to Input FCB
 11674                                  
 11675                                  					; OpenBuf is in DOSDATA
 11676 00001790 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 11677                                  
 11678 00001793 1E                      	push	ds			; save pointer to true FCB
 11679 00001794 56                      	push	si
 11680 00001795 E8CD52                  	call	TransFCB		; Trans name DS:DX, sets SATTRIB
 11681 00001798 5E                      	pop	si
 11682 00001799 1F                      	pop	ds
 11683 0000179A 72EE                    	JC	short BadPath
 11684 0000179C 1E                      	push	ds			; save pointer
 11685 0000179D 56                      	push	si
 11686 0000179E 16                      	push	ss		
 11687 0000179F 1F                      	pop	ds
 11688 000017A0 E81A11                  	call	GET_FILE_INFO		; grab the info
 11689 000017A3 5E                      	pop	si			; get pointer back
 11690 000017A4 1F                      	pop	ds
 11691 000017A5 72E3                    	JC	short BadPath 		; invalid something
 11692                                  	; 15/01/2024
 11693                                  	;MOV	DX,BX (*)		; get high order size
 11694                                  	;MOV	AX,DI (**)		; get low order size
 11695 000017A7 89D8                    	mov	ax,bx ; hw of file size
 11696                                  	;
 11697                                  	;mov	bx,[si+0Eh]
 11698 000017A9 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 11699 000017AC 09DB                    	OR	BX,BX			; empty record => 0 size for file
 11700 000017AE 7502                    	JNZ	short GetSize 		; not empty
 11701                                  	;MOV	BX,128
 11702 000017B0 B380                    	mov	bl,128	; 15/01/2024
 11703                                  GetSize:
 11704                                  	; 15/01/2024
 11705                                  	;MOV	DI,AX			; save low order word
 11706                                  	;MOV	AX,DX			; move high order for divide
 11707                                  	;xchg	ax,dx ; (*)
 11708                                  	; ax = hw of file size
 11709                                  
 11710 000017B2 31D2                    	XOR	DX,DX			; clear out high
 11711 000017B4 F7F3                    	DIV	BX			; wham
 11712 000017B6 50                      	PUSH	AX			; save dividend
 11713 000017B7 89F8                    	MOV	AX,DI ; (**)		; get low order piece
 11714 000017B9 F7F3                    	DIV	BX			; wham
 11715 000017BB 89D1                    	MOV	CX,DX			; save remainder
 11716 000017BD 5A                      	POP	DX			; get high order dividend
 11717 000017BE E306                    	JCXZ	LengthStore		; no roundup
 11718 000017C0 83C001                  	ADD	AX,1
 11719 000017C3 83D200                  	ADC	DX,0			; 32-bit increment
 11720                                  LengthStore:
 11721                                  	;mov	[si+21h],ax
 11722 000017C6 894421                  	MOV	[SI+SYS_FCB.RR],AX	; store low order
 11723                                  	;mov	[si+23h],dl
 11724 000017C9 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; store high order
 11725 000017CC 08F6                    	OR	DH,DH
 11726 000017CE 74A8                    	JZ	short GoodPath		; not storing insignificant zero
 11727                                  	;mov	[si+24h],dh
 11728 000017D0 887424                  	MOV	[SI+SYS_FCB.RR+3],DH	; save that high piece
 11729                                  	; 16/12/2022
 11730                                  GoodRet:
 11731                                  	;jmp	FCB_RET_OK
 11732 000017D3 EBA3                    	jmp	short GoodPath
 11733                                  
 11734                                  ;Break <$FCB_Close - close a file>
 11735                                  ;----------------------------------------------------------------------------
 11736                                  ;
 11737                                  ;   $FCB_Close - given an FCB, look up the SFN and close it. Do not free it
 11738                                  ;	as the FCB may be used for further I/O
 11739                                  ;
 11740                                  ;   Inputs:	DS:DX point to FCB
 11741                                  ;   Outputs:	AL = FF if file was not found on disk
 11742                                  ;   Registers modified: all
 11743                                  ;
 11744                                  ;----------------------------------------------------------------------------
 11745                                  ;
 11746                                  
 11747                                  	; 16/01/2024
 11748                                  
 11749                                  _$FCB_CLOSE:		; System call 16
 11750                                  
 11751 000017D5 30C0                    	XOR	AL,AL			; default search attributes
 11752 000017D7 E86004                  	call	GetExtended		; DS:SI point to real FCB
 11753 000017DA 7403                    	JZ	short NoAttr		; not extended
 11754 000017DC 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 11755                                  NoAttr:
 11756                                  					; SS override
 11757 000017DF 36A2[6B05]              	MOV	[SS:ATTRIB],AL		; stash away found attributes
 11758 000017E3 E8C303                  	call	SFTFromFCB
 11759 000017E6 72EB                    	JC	short GoodRet 		; MZ 16 Jan Assume death
 11760                                  
 11761                                  	; If the sharer is present, then the SFT is not regenable. Thus, 
 11762                                  	; there is no need to set the SFT's attribute.
 11763                                  
 11764                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11765                                  	;;; done
 11766                                  
 11767                                  	;mov	al,[es:di+4]
 11768 000017E8 268A4504                	MOV	AL,[ES:DI+SF_ENTRY.sf_attr]
 11769 000017EC 30E4                    	XOR	AH,AH
 11770 000017EE 50                      	PUSH	AX
 11771                                  
 11772                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11773                                  	;;; done
 11774                                  
 11775 000017EF E89F5A                  	call	CheckShare
 11776 000017F2 7508                    	JNZ	short NoStash
 11777 000017F4 36A0[6B05]              	MOV	AL,[SS:ATTRIB]
 11778                                  	;mov	[es:di+4],al
 11779 000017F8 26884504                	MOV	[ES:DI+SF_ENTRY.sf_attr],AL ; attempted attribute for close
 11780                                  NoStash:
 11781                                  
 11782                                  ; 16/01/2024
 11783                                  %if 0
 11784                                  	;mov	ax,[si+14h]
 11785                                  	MOV	AX,[SI+SYS_FCB.FDATE] ; move in the time and date
 11786                                  	;mov	[es:di+0Fh],ax
 11787                                  	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 11788                                  	;mov	ax,[si+16h]
 11789                                  	MOV	AX,[SI+SYS_FCB.FTIME]
 11790                                  	;mov	[es:di+0Dh],ax
 11791                                  	MOV	[ES:DI+SF_ENTRY.sf_time],AX
 11792                                  	;mov	ax,[si+10h]
 11793                                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 11794                                  	;mov	[es:di+11h],ax
 11795                                  	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 11796                                  	;mov	ax,[si+12h]
 11797                                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 11798                                  	;mov	[es:di+13h],ax
 11799                                  	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 11800                                  	;or	word [es:di+5],4000h
 11801                                  	; 17/12/2022
 11802                                  	or	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11803                                  	;OR	word [ES:DI+SF_ENTRY.sf_flags],sf_close_nodate
 11804                                  %else
 11805                                  	; 16/01/2024 (PCDOS 7.1 IBMDOS.COM)
 11806 000017FC 1E                      	push	ds
 11807                                  	;lds	ax,[si+14h]
 11808 000017FD C54414                  	lds	ax,[si+SYS_FCB.FDATE]	; move in the time and date
 11809                                  	;mov	[es:di+0Fh],ax
 11810 00001800 2689450F                	mov	[es:di+SF_ENTRY.sf_date],ax
 11811                                  	;mov	[es:di+0Dh],ds		
 11812 00001804 268C5D0D                	mov	[es:di+SF_ENTRY.sf_time],ds
 11813 00001808 1F                      	pop	ds
 11814                                  	;lds	ax,[si+10h]
 11815 00001809 C54410                  	lds	ax,[si+SYS_FCB.FILSIZ]
 11816                                  	;mov	[es:di+11h],ax
 11817 0000180C 26894511                	mov	[es:di+SF_ENTRY.sf_size],ax
 11818                                  	;mov	[es:di+13h],ds
 11819 00001810 268C5D13                	mov	[es:di+SF_ENTRY.sf_size+2],ds
 11820                                  	; 16/01/2024
 11821                                  	;;or	word [es:di+5], 4000h
 11822                                  	;or	word [es:di+SF_ENTRY.sf_flags], sf_close_nodate
 11823 00001814 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11824                                  %endif
 11825                                  
 11826 00001819 16                      	push	ss
 11827 0000181A 1F                      	pop	ds
 11828 0000181B E89016                  	call	DOS_CLOSE	; wham
 11829 0000181E C43E[9E05]              	LES	DI,[THISSFT]
 11830                                  
 11831                                  	;;; 9/8/86 F.C. restore SFT attribute
 11832 00001822 59                      	POP	CX
 11833                                  	;mov	[es:di+4],cl
 11834 00001823 26884D04                	MOV	[ES:DI+SF_ENTRY.sf_attr],CL
 11835                                  	;;; 9/8/86 F.C. restore SFT attribute
 11836                                  
 11837 00001827 9C                      	PUSHF
 11838                                  	;test	word [es:di],0FFFFh
 11839                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],0
 11840                                  				; zero ref count gets blasted
 11841 00001828 26833D00                	cmp	word [ES:DI],0
 11842 0000182C 7507                    	jnz     short CloseOK
 11843 0000182E 50                      	PUSH	AX
 11844 0000182F B04D                    	MOV	AL,'M' ; 4Dh
 11845 00001831 E8F202                  	call	BlastSFT
 11846 00001834 58                      	POP	AX
 11847                                  CloseOK:
 11848 00001835 9D                      	POPF
 11849 00001836 739B                    	JNC	short GoodRet
 11850                                  	;cmp	al,6
 11851 00001838 3C06                    	CMP	AL,error_invalid_handle
 11852 0000183A 7497                    	JZ	short GoodRet
 11853                                  	;mov	al,2
 11854 0000183C B002                    	MOV	AL,error_file_not_found
 11855                                  fren90:
 11856                                  	; 16/12/2022
 11857                                  fcb_close_err:
 11858 0000183E E915EE                  	jmp	FCB_RET_ERR
 11859                                  
 11860                                  ;
 11861                                  ;----------------------------------------------------------------------------
 11862                                  ;
 11863                                  ;**	$FCB_Rename - Rename a File
 11864                                  ;
 11865                                  ;	$FCB_Rename - rename a file in place within a directory. Renames
 11866                                  ;	multiple files copying from the meta characters.
 11867                                  ;
 11868                                  ;	ENTRY	DS:DX point to an FCB. The normal name field is the source
 11869                                  ;		    name of the files to be renamed. Starting at offset 11h
 11870                                  ;		    in the FCB is the destination name.
 11871                                  ;	EXIT	AL = 0 -> no error occurred and all files were renamed
 11872                                  ;		AL = FF -> some files may have been renamed but:
 11873                                  ;			rename to existing file or source file not found
 11874                                  ;	USES	ALL
 11875                                  ;
 11876                                  ;----------------------------------------------------------------------------
 11877                                  ;
 11878                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11879                                  
 11880                                  _$FCB_RENAME:		; System call 23
 11881                                  
 11882 00001841 E8F603                  	call	GetExtended		; get pointer to real FCB
 11883 00001844 52                      	push	dx
 11884 00001845 8A04                    	MOV	AL,[SI] 		; get drive byte
 11885 00001847 83C610                  	ADD	SI,10h			; point to destination
 11886                                  
 11887                                  					; RenBuf is in DOSDATA
 11888 0000184A BF[3E04]                	MOV	DI,RENBUF		; point to destination buffer
 11889 0000184D FF34                    	push	word [SI]
 11890 0000184F 1E                      	push	ds
 11891                                  	;push	di			; save source pointer for TransFCB
 11892                                  	; 16/01/2024 - BugFix !
 11893 00001850 56                      	push	si
 11894 00001851 8804                    	MOV	[SI],AL			; drop in real drive
 11895 00001853 89F2                    	MOV	DX,SI			; let TransFCB know where the FCB is
 11896 00001855 E80D52                  	call	TransFCB		; munch this pathname
 11897 00001858 5E                      	pop	si
 11898 00001859 1F                      	pop	ds	
 11899 0000185A 8F04                    	pop	WORD [SI]		; get path back
 11900 0000185C 5A                      	pop	dx			; Original FCB pointer
 11901 0000185D 72DF                    	JC	short fren90		; bad path -> error
 11902                                  
 11903                                  					; SS override for WFP_Start & Ren_WFP
 11904 0000185F 368B36[B205]            	MOV	SI,[ss:WFP_START]	; get pointer
 11905 00001864 368936[B405]            	MOV	[ss:REN_WFP],SI		; stash it
 11906                                  
 11907                                  					; OpenBuf is in DOSDATA
 11908 00001869 BF[BE03]                	MOV	DI,OPENBUF		; appropriate spot
 11909 0000186C E8F651                  	call	TransFCB		; wham
 11910                                  					; NOTE that this call is pointing
 11911                                  					;  back to the ORIGINAL FCB so
 11912                                  					;  SATTRIB gets set correctly
 11913 0000186F 72CD                    	JC	short fren90		; error
 11914 00001871 E81F0E                  	call	DOS_RENAME
 11915 00001874 72C8                    	JC	short fren90
 11916                                  	; 16/12/2022
 11917 00001876 E9DAED                  	jmp	FCB_RET_OK
 11918                                  	
 11919                                  ;	Error -
 11920                                  ;
 11921                                  ;	(al) = error code
 11922                                  
 11923                                  	; 16/12/2022
 11924                                  ;fren90:	
 11925                                  ;	;jmp	FCB_RET_ERR
 11926                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11927                                  ;	jmp	short fcb_close_err
 11928                                  
 11929                                  ;Break <Misbehavior fixers>
 11930                                  ;
 11931                                  ;   FCBs suffer from several problems. First, they are maintained in the
 11932                                  ;   user's space so he may move them at will. Second, they have a small
 11933                                  ;   reserved area that may be used for system information. Third, there was
 11934                                  ;   never any "rules for behavior" for FCBs; there was no protocol for their
 11935                                  ;   usage.
 11936                                  ;
 11937                                  ;   This results in the following misbehavior:
 11938                                  ;
 11939                                  ;	infinite opens of the same file:
 11940                                  ;
 11941                                  ;	While (TRUE) {			While (TRUE) {
 11942                                  ;	    FCBOpen (FCB);		    FCBOpen (FCB);
 11943                                  ;	    Read (FCB); 		    Write (FCB);
 11944                                  ;	    }				    }
 11945                                  ;
 11946                                  ;	infinite opens of different files:
 11947                                  ;
 11948                                  ;	While (TRUE) {			While (TRUE) {
 11949                                  ;	    FCBOpen (FCB[i++]); 	    FCBOpen (FCB[i++]);
 11950                                  ;	    Read (FCB); 		    Write (FCB);
 11951                                  ;	    }				    }
 11952                                  ;
 11953                                  ;	multiple closes of the same file:
 11954                                  ;
 11955                                  ;	FCBOpen (FCB);
 11956                                  ;	while (TRUE)
 11957                                  ;	    FCBClose (FCB);
 11958                                  ;
 11959                                  ;	I/O after closing file:
 11960                                  ;
 11961                                  ;	FCBOpen (FCB);
 11962                                  ;	while (TRUE) {
 11963                                  ;	    FCBWrite (FCB);
 11964                                  ;	    FCBClose (FCB);
 11965                                  ;	    }
 11966                                  ;
 11967                                  ;   The following is am implementation of a methodology for emulating the
 11968                                  ;   above with the exception of I/O after close. We are NOT attempting to
 11969                                  ;   resolve that particular misbehavior. We will enforce correct behaviour in
 11970                                  ;   FCBs when they refer to a network file or when there is file sharing on
 11971                                  ;   the local machine.
 11972                                  ;
 11973                                  ;   The reserved fields of the FCB (10 bytes worth) is divided up into various
 11974                                  ;   structures depending on the file itself and the state of operations of the
 11975                                  ;   OS. The information contained in this reserved field is enough to
 11976                                  ;   regenerate the SFT for the local non-shared file. It is assumed that this
 11977                                  ;   regeneration procedure may be expensive. The SFT for the FCB is
 11978                                  ;   maintained in a LRU cache as the ONLY performance inprovement.
 11979                                  ;
 11980                                  ;   No regeneration of SFTs is attempted for network FCBs.
 11981                                  ;
 11982                                  ;   To regenerate the SFT for a local FCB, it is necessary to determine if the
 11983                                  ;   file sharer is working. If the file sharer is present then the SFT is not
 11984                                  ;   regenerated.
 11985                                  ;
 11986                                  ;   Finally, if there is no local sharing, the full name of the file is no
 11987                                  ;   longer available. We can make up for this by using the following
 11988                                  ;   information:
 11989                                  ;
 11990                                  ;	The Drive number (from the DPB).
 11991                                  ;	The physical sector of the directory that contains the entry.
 11992                                  ;	The relative position of the entry in the sector.
 11993                                  ;	The first cluster field.
 11994                                  ;	The last used SFT.
 11995                                  ;      OR In the case of a device FCB
 11996                                  ;	The low 6 bits of sf_flags (indicating device type)
 11997                                  ;	The pointer to the device header
 11998                                  ;
 11999                                  ;   We read in the particular directory sector and examine the indicated
 12000                                  ;   directory entry. If it matches, then we are kosher; otherwise, we fail.
 12001                                  ;
 12002                                  ;   Some key items need to be remembered:
 12003                                  ;
 12004                                  ;	Even though we are caching SFTs, they may contain useful sharing
 12005                                  ;	information. We enforce good behavior on the FCBs.
 12006                                  ;
 12007                                  ;	Network support must not treat FCBs as impacting the ref counts on
 12008                                  ;	open VCs. The VCs may be closed only at process termination.
 12009                                  ;
 12010                                  ;	If this is not an installed version of the DOS, file sharing will
 12011                                  ;	always be present.
 12012                                  ;
 12013                                  ;	We MUST always initialize lstclus to = firclus when regenerating a
 12014                                  ;	file. Otherwise we start allocating clusters up the wazoo.
 12015                                  ;
 12016                                  ;	Always initialize, during regeneration, the mode field to both isFCB
 12017                                  ;	and open_for_both. This is so the FCB code in the sharer can find the
 12018                                  ;	proper OI record.
 12019                                  ;
 12020                                  ;   The test bits are:
 12021                                  ;
 12022                                  ;	00 -> local file
 12023                                  ;	40 -> sharing local
 12024                                  ;	80 -> network
 12025                                  ;	C0 -> local device
 12026                                  
 12027                                  ;Break	<SaveFCBInfo - store pertinent information from an SFT into the FCB>
 12028                                  ;----------------------------------------------------------------------------
 12029                                  ;
 12030                                  ;   SaveFCBInfo - given an FCB and its associated SFT, copy the relevant
 12031                                  ;	pieces of information into the FCB to allow for subsequent
 12032                                  ;	regeneration. Poke LRU also.
 12033                                  ;
 12034                                  ;   Inputs:	ThisSFT points to a complete SFT.
 12035                                  ;		DS:SI point to the FCB (not an extended one)
 12036                                  ;   Outputs:	The relevant reserved fields in the FCB are filled in.
 12037                                  ;		DS:SI preserved
 12038                                  ;		ES:DI point to sft
 12039                                  ;   Registers modified: All
 12040                                  ;
 12041                                  ;
 12042                                  ;----------------------------------------------------------------------------
 12043                                  ;
 12044                                  
 12045                                  	; 20/01/2024
 12046                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12047                                  
 12048                                  SaveFCBInfo:
 12049                                  
 12050 00001879 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; SS override
 12051 0000187E E8C9F9                  	call	IsSFTNet
 12052 00001881 740B                    	JZ	short SaveLocal		; if not network then save local info
 12053                                  ;
 12054                                  ;----- In net support -----
 12055                                  ;
 12056                                  	; 17/05/2019 - Retro DOS v4.0
 12057                                  
 12058                                  	; MSDOS 3.3
 12059                                  	;;mov	ax,[es:di+1Dh]
 12060                                  	;mov	ax,[es:di+SF_ENTRY.sf_dirsec]
 12061                                  	;;mov	[si+1Ah],ax
 12062                                  	;mov	[si+fcb_net_handle],ax
 12063                                  	;push	es
 12064                                  	;push	di
 12065                                  	;;les	di,[es:di+19h]
 12066                                  	;LES	DI,[ES:DI+sf_netid]
 12067                                  	;;mov	[si+1Ch],di
 12068                                  	;MOV	[SI+fcb_netID],DI	; save net ID
 12069                                  	;;mov 	[si+1Eh],es
 12070                                  	;MOV	[SI+fcb_netID+2],ES
 12071                                  	;pop	di
 12072                                  	;pop	es
 12073                                  
 12074                                  	; MSDOS 6.0
 12075                                  	;mov	ax,[es:di+0Bh]
 12076 00001883 268B450B                	MOV	AX,[ES:DI+sf_serial_ID] ;AN000;;IFS. save IFS ID
 12077                                  	;mov	[si+1Ch],ax
 12078 00001887 89441C                  	MOV	[SI+fcb_netID],ax	;AN000;;IFS.
 12079                                  	
 12080                                  	;mov	bl,80h
 12081 0000188A B380                    	MOV	BL,FCBNETWORK
 12082                                  ;
 12083                                  ;----- END In net support -----
 12084                                  ;
 12085 0000188C EB63                    	jmp	SHORT SaveSFN
 12086                                  
 12087                                  SaveLocal:
 12088                                  	;IF	Installed
 12089 0000188E E8005A                  	call	CheckShare
 12090                                  	;JZ	short SaveNoShare	; no sharer
 12091                                  	;JMP	short SaveShare		; sharer present
 12092                                  	; 16/12/2022
 12093                                  	; 28/07/2019
 12094 00001891 7559                    	jnz	short SaveShare
 12095                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12096                                  	;JZ	short SaveNoShare	; no sharer
 12097                                  	;JMP	short SaveShare		; sharer present
 12098                                  
 12099                                  SaveNoShare:
 12100                                  	;;test 	word [es:di+5],80h
 12101                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 12102 00001893 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 80h	
 12103 00001898 7542                    	JNZ	short SaveNoShareDev	; Device
 12104                                  
 12105                                  	; Save no sharing local file information
 12106                                  
 12107                                  	;;mov	ax,[es:di+1Dh]  ; MSDOS 3.3
 12108                                  	;mov	ax,[es:di+1Bh]  ; MSDOS 6.0
 12109 0000189A 268B451B                	MOV	AX,[ES:DI+SF_ENTRY.sf_dirsec] ; get directory sector F.C.
 12110                                  	;mov	[si+1Dh],ax
 12111 0000189E 89441D                  	MOV	[SI+fcb_nsl_dirsec],AX
 12112                                  
 12113                                  	; MSDOS 6.0
 12114                                  
 12115                                  	;SR; Store high byte of directory sector
 12116                                  	;mov	ax,[es:di+1Dh]
 12117 000018A1 268B451D                	mov	ax,[es:di+SF_ENTRY.sf_dirsec+2] ; get high word
 12118                                  	
 12119                                  	; SR;
 12120                                  	; We have to store the read-only and archive attributes of the file.
 12121                                  	; We extract it from the SFT and store it in the top two bits of the 
 12122                                  	; sector number ( sector number == 22 bits only )
 12123                                  
 12124                                  	;mov	bl,[es:di+4]
 12125 000018A5 268A5D04                	mov	bl,[es:di+SF_ENTRY.sf_attr]
 12126 000018A9 88DF                    	mov	bh,bl
 12127 000018AB D0CB                    	ror	bl,1
 12128 000018AD D0E7                    	shl	bh,1
 12129 000018AF 08FB                    	or	bl,bh
 12130 000018B1 80E3C0                  	and	bl,0C0h
 12131 000018B4 08D8                    	or	al,bl
 12132                                  	;mov	[si+18h],al ; 08/11/2022
 12133 000018B6 884418                  	mov	[si+fcb_sfn],al	; sector number = 22 bits
 12134                                  
 12135                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12136                                  	;mov	al,[es:di+1Fh]
 12137 000018B9 268A451F                	MOV	AL,[ES:DI+SF_ENTRY.sf_dirpos] ; location in sector
 12138                                  	;mov	[si+1Fh],al
 12139 000018BD 88441F                  	MOV	[SI+fcb_nsl_dirpos],AL
 12140                                  	;mov	ax,[es:di+0Bh]
 12141 000018C0 268B450B                	MOV	AX,[ES:DI+SF_ENTRY.sf_firclus] ; first cluster
 12142                                  	;mov	[si+1Bh],ax
 12143 000018C4 89441B                  	MOV	[SI+fcb_nsl_firclus],AX
 12144 000018C7 B300                    	MOV	BL,0
 12145                                  
 12146                                  	; Create the bits field from the dirty/device bits of the flags word 
 12147                                  	; and the mode byte
 12148                                  
 12149                                  SetFCBBits:
 12150                                  	;mov	ax,[es:di+5]
 12151 000018C9 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12152 000018CD 24C0                    	AND	AL,0C0h 		; mask off drive bits
 12153                                  	;or	al,[es:di+2]
 12154 000018CF 260A4502                	OR	AL,[ES:DI+SF_ENTRY.sf_mode] ; stick in open mode
 12155                                  	;mov	[si+1Ah], al
 12156 000018D3 88441A                  	MOV	[SI+fcb_nsl_bits],AL	; save dirty info
 12157                                  
 12158                                  	; MSDOS 6.0
 12159                                  	
 12160                                  	; SR;
 12161                                  	; Check if we came here for local file or device. If for local file, 
 12162                                  	; skip setting of SFT index
 12163                                  	
 12164 000018D6 08DB                    	or	bl,bl
 12165 000018D8 7428                    	jz	short SaveNoSFN		; do not save SFN if local file
 12166                                  
 12167 000018DA EB15                    	JMP	short SaveSFN 		; go and save SFN
 12168                                  
 12169                                  	; Save no sharing local device information
 12170                                  
 12171                                  SaveNoShareDev:
 12172                                  	; 20/01/2024
 12173                                  	;;mov	ax,[es:di+7]
 12174                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_devptr]
 12175                                  	;;mov	[si+1Ah],ax
 12176                                  	;MOV	[SI+fcb_nsld_drvptr],AX
 12177                                  	;;mov	ax,[es:di+9]
 12178                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_devptr+2]
 12179                                  	;MOV	[SI+fcb_nsld_drvptr+2],AX
 12180                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12181 000018DC 06                      	push	es
 12182 000018DD 26C44507                	les	ax,[es:di+SF_ENTRY.sf_devptr]
 12183 000018E1 89441A                  	mov	[si+fcb_nsld_drvptr],ax
 12184 000018E4 8C441C                  	mov	[si+fcb_nsld_drvptr+2],es
 12185 000018E7 07                      	pop	es
 12186                                  	
 12187                                  	;mov	bl,40h
 12188 000018E8 B340                    	MOV	BL,FCBDEVICE
 12189                                  	; 28/12/2022
 12190 000018EA EBDD                    	JMP	short SetFCBBits	; go and save SFN
 12191                                  
 12192                                  SaveShare:
 12193                                  	;ENDIF
 12194                                  
 12195                                  ;----- In share support -----
 12196                                  
 12197                                  	;call	far [ss:ShSave]
 12198 000018EC 36FF1E[B800]            	Call	far [ss:JShare+(10*4)] ; 10 = ShSave ; SS Override
 12199                                  
 12200                                  ;----- end in share support -----
 12201                                  
 12202                                  	; 17/05/2019
 12203                                  
 12204                                  SaveSFN:
 12205                                  	;lea	ax,[di-6]
 12206 000018F1 8D45FA                  	LEA	AX,[DI-SFT.SFTable]
 12207                                  	
 12208                                  	; Adjust for offset to table.
 12209                                  	
 12210 000018F4 362B06[4000]            	SUB	AX,[SS:SFTFCB]		; SS override for SftFCB
 12211                                  
 12212 000018F9 53                      	push	bx			;bx = FCB type (net/Share or local)
 12213                                  	;;mov	bl,53 ; MSDOS 3.3
 12214                                  	;mov	bl,59 ; MSDOS 6.0
 12215 000018FA B33B                    	MOV	BL,SF_ENTRY.size
 12216 000018FC F6F3                    	DIV	BL
 12217                                  	;mov	[si+18h],al
 12218 000018FE 884418                  	MOV	[SI+fcb_sfn],AL		; last used SFN
 12219 00001901 5B                      	pop	bx			;restore bx
 12220                                  
 12221                                  SaveNoSFN:
 12222                                  	;mov	ax,[es:di+5]
 12223 00001902 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12224 00001906 243F                    	AND	AL,3Fh			; get real drive
 12225 00001908 08D8                    	OR	AL,BL
 12226                                  	;mov	[si+19h],al
 12227 0000190A 884419                  	MOV	[SI+fcb_l_drive],AL
 12228                                  
 12229 0000190D 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; get lru count
 12230 00001911 40                      	INC	AX
 12231                                  	;mov	[es:di+15h],ax
 12232 00001912 26894515                	MOV	[ES:DI+sf_LRU],AX
 12233 00001916 7506                    	JNZ	short SimpleStuff
 12234                                  	
 12235                                  	; lru flag overflowed. Run through all FCB sfts and adjust:  
 12236                                  	; LRU < 8000H get set to 0. Others -= 8000h. This LRU = 8000h
 12237                                  	
 12238                                  	;mov	bx,15h
 12239 00001918 BB1500                  	MOV	BX,SF_ENTRY.sf_position
 12240 0000191B E80500                  	call	ResetLRU
 12241                                  
 12242                                  	; Set new LRU to AX
 12243                                  SimpleStuff:
 12244 0000191E 36A3[1000]              	MOV	[SS:FCBLRU],AX
 12245 00001922 C3                      	retn
 12246                                  
 12247                                  ;Break	<ResetLRU - reset overflowed lru counts>
 12248                                  ;----------------------------------------------------------------------------
 12249                                  ;
 12250                                  ;   ResetLRU - during lru updates, we may wrap at 64K. We must walk the
 12251                                  ;   entire set of SFTs and subtract 8000h from their lru counts and truncate
 12252                                  ;   at 0.
 12253                                  ;
 12254                                  ;   Inputs:	BX is offset into SFT field where lru firld is kept
 12255                                  ;		ES:DI point to SFT currently being updated
 12256                                  ;   Outputs:	All FCB SFTs have their lru fields truncated
 12257                                  ;		AX has 8000h
 12258                                  ;   Registers modified: none
 12259                                  ;
 12260                                  ;----------------------------------------------------------------------------
 12261                                  ;
 12262                                  
 12263                                  	; 17/05/2019 - Retro DOS v4.0
 12264                                  ResetLRU:
 12265                                  	; ResetLRU is only called from fcbio.asm. So SS can be assumed to be 
 12266                                  	; DOSDATA
 12267                                  
 12268 00001923 B80080                  	MOV	AX,8000h
 12269 00001926 06                      	push	es
 12270 00001927 57                      	push	di
 12271                                  	;LES	DI,[CS:SFTFCB]		; get pointer to head
 12272 00001928 36C43E[4000]            	LES	DI,[SS:SFTFCB] ; MSDOS 6.0
 12273                                  	;mov	cx,[es:di+4]
 12274 0000192D 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 12275                                  	;lea	di,[di+6]
 12276 00001931 8D7D06                  	LEA	DI,[DI+SFT.SFTable] 	; point at table
 12277                                  ovScan:
 12278 00001934 262901                  	SUB	[ES:DI+BX],AX		; decrement lru count
 12279 00001937 7703                    	JA	short ovLoop
 12280 00001939 268901                  	MOV	[ES:DI+BX],AX		; truncate at 0
 12281                                  ovLoop:
 12282                                  	;;add	di,53	; MSDOS 3.3
 12283                                  	;add	di,59	; MSDOS 6.0	
 12284 0000193C 83C73B                  	ADD	DI,SF_ENTRY.size	; advance to next
 12285 0000193F E2F3                    	LOOP	ovScan
 12286 00001941 5F                      	pop	di
 12287 00001942 07                      	pop	es
 12288 00001943 268901                  	MOV	[ES:DI+BX],AX
 12289 00001946 C3                      	retn
 12290                                  
 12291                                  ;IF  0  ; We dont need this routine any more.
 12292                                  ;
 12293                                  ;Break	<SetOpenAge - update the open age of a SFT>
 12294                                  ;----------------------------------------------------------------------------
 12295                                  ;
 12296                                  ;   SetOpenAge - In order to maintain the first N open files in the FCB cache,
 12297                                  ;   we keep the 'open age' or an LRU count based on opens. We update the
 12298                                  ;   count here and fill in the appropriate field.
 12299                                  ;
 12300                                  ;   Inputs:	ES:DI point to SFT
 12301                                  ;   Outputs:	ES:DI has the open age field filled in.
 12302                                  ;		If open age has wraparound, we will have subtracted 8000h
 12303                                  ;		    from all open ages.
 12304                                  ;   Registers modified: AX
 12305                                  ;
 12306                                  ;----------------------------------------------------------------------------
 12307                                  ;
 12308                                  ;SetOpenAge:
 12309                                  ;	; 20/07/2018 - Retro DOS v3.0
 12310                                  ;	; MSDOS 3.3 - IBMDOS.COM, Offset 2597h 
 12311                                  ;	; (& MSDOS 6.0, FCBIO.ASM)
 12312                                  ;
 12313                                  ;	; SetOpenAge is called from fcbio2.asm. SS can be assumed to be valid.
 12314                                  ;
 12315                                  ;	MOV	AX,[CS:OpenLRU]	; SS override
 12316                                  ;	INC	AX
 12317                                  ;	;mov	[es:di+17h],ax
 12318                                  ;	MOV	[ES:DI+sf_OpenAge],AX
 12319                                  ;	JNZ	short SetDone
 12320                                  ;	;mov	bx,17h
 12321                                  ;	MOV	BX,SF_ENTRY.sf_position+2 ; mov bx,sf_OpenAge
 12322                                  ;	call	ResetLRU
 12323                                  ;SetDone:
 12324                                  ;	MOV	[CS:OpenLRU],AX
 12325                                  ;	retn
 12326                                  ;
 12327                                  ;ENDIF	; SetOpenAge no longer needed
 12328                                  
 12329                                  ; 21/07/2018 - Retro DOS v3.0
 12330                                  ; LRUFCB for MSDOS 6.0 !
 12331                                  
 12332                                  ;Break	<LRUFCB - perform LRU on FCB sfts>
 12333                                  ;----------------------------------------------------------------------------
 12334                                  ;
 12335                                  ;   LRUFCB - find LRU fcb in cache. Set ThisSFT and return it. We preserve
 12336                                  ;	the first keepcount sfts if they are network sfts or if sharing is
 12337                                  ;	loaded.  If carry is set then NO BLASTING is NECESSARY.
 12338                                  ;
 12339                                  ;   Inputs:	none
 12340                                  ;   Outputs:	ES:DI point to SFT
 12341                                  ;		ThisSFT points to SFT
 12342                                  ;		SFT is zeroed
 12343                                  ;		Carry set of closes failed
 12344                                  ;   Registers modified: none
 12345                                  ;
 12346                                  ;----------------------------------------------------------------------------
 12347                                  ;
 12348                                  ; MSDOS 6.0
 12349                                  ;IF 0	; rewritten this routine
 12350                                  ;
 12351                                  ;LRUFCB: ; MSDOS 3.3 - IBMDOS.COM (1987) - Offset 25ADh
 12352                                  ;	call	save_world
 12353                                  ;	
 12354                                  ; Find nth oldest NET/SHARE FCB. We want to find its age for the second scan
 12355                                  ; to find the lease recently used one that is younger than the open age.  We
 12356                                  ; operate be scanning the list n times finding the least age that is greater
 12357                                  ; or equal to the previous minimum age.
 12358                                  ;
 12359                                  ;   BP is the count of times we need to go through this loop.
 12360                                  ;   AX is the current acceptable minimum age to consider
 12361                                  ;
 12362                                  ;	mov	bp,[CS:KEEPCOUNT]	; k = keepcount;
 12363                                  ;	XOR	AX,AX			; low = 0;
 12364                                  ;
 12365                                  ; If we've scanned the table n times, then we are done.
 12366                                  ;
 12367                                  ;lru1:
 12368                                  ;	CMP	bp,0			; while (k--) {
 12369                                  ;	JZ	short lru75
 12370                                  ;	DEC	bp
 12371                                  ;
 12372                                  ; Set up for scan.
 12373                                  ;
 12374                                  ;   AX is the minimum age for consideration
 12375                                  ;   BX is the minimum age found during the scan
 12376                                  ;   SI is the position of the entry that corresponds to BX
 12377                                  ;
 12378                                  ;	MOV	BX,-1			;     min = 0xffff;
 12379                                  ;	MOV	si,BX			;     pos = 0xffff;
 12380                                  ;	LES	DI,[CS:SFTFCB]		;     for (CX=FCBCount; CX>0; CX--)
 12381                                  ;	;mov	cx,[es:di+4]
 12382                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12383                                  ;	;lea	di,[di+6]
 12384                                  ;	LEA	DI,[DI+SFT.SFTable]
 12385                                  ;
 12386                                  ; Innermost loop.  If the current entry is free, then we are done.  Or, if the
 12387                                  ; current entry is busy (indicating a previous aborted allocation), then we
 12388                                  ; are done.  In both cases, we use the found entry.
 12389                                  ;
 12390                                  ;lru2:
 12391                                  ;	cmp	word [es:di],0
 12392                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0
 12393                                  ;	jz	short lru25
 12394                                  ;	;cmp	word [es:di],-1
 12395                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 12396                                  ;	cmp	word [es:di],sf_busy
 12397                                  ;	jnz	short lru3
 12398                                  ;
 12399                                  ; The entry is usable without further scan.  Go and use it.
 12400                                  ;
 12401                                  ;lru25:
 12402                                  ;	MOV	si,DI			;	      pos = i;
 12403                                  ;	JMP	short lru11		;	      goto got;
 12404                                  ;
 12405                                  ; See if the entry is for the network or for the sharer.
 12406                                  ;
 12407                                  ;  If for the sharer or network then
 12408                                  ;	if the age < current minimum AND >= allowed minimum then
 12409                                  ;	    this entry becomes current minimum
 12410                                  ;
 12411                                  ;lru3:
 12412                                  ;	;test	word [es:di+5],8000h
 12413                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet 
 12414                                  ;					;	  if (!net[i]
 12415                                  ;	JNZ	short lru35
 12416                                  ;if installed
 12417                                  ;	call	CheckShare		;		&& !sharing)
 12418                                  ;	JZ	short lru5		;	  else
 12419                                  ;ENDIF
 12420                                  ;
 12421                                  ; This SFT is for the net or is for the sharer. See if it less than the
 12422                                  ; current minimum.
 12423                                  ;
 12424                                  ;lru35:
 12425                                  ;	;mov	dx,[es:di+17h]
 12426                                  ;	MOV	DX,[ES:DI+sf_OpenAge]
 12427                                  ;	CMP	DX,AX			;	  if (age[i] >= low &&
 12428                                  ;	JB	short lru5
 12429                                  ;	CMP	DX,BX
 12430                                  ;	JAE	short lru5		;	      age[i] < min) {
 12431                                  ;
 12432                                  ; entry is new minimum.  Remember his age.
 12433                                  ;
 12434                                  ;	mov	bx,DX			;	      min = age[i];
 12435                                  ;	mov	si,di			;	      pos = i;
 12436                                  ;
 12437                                  ; End of loop.	gp back for more
 12438                                  ;
 12439                                  ;lru5:
 12440                                  ;	;add	di,53
 12441                                  ;	add	di,SF_ENTRY.size
 12442                                  ;	loop	lru2			;	      }
 12443                                  ;
 12444                                  ; The scan is complete. If we have successfully found a new minimum (pos != -1)
 12445                                  ; set then threshold value to this new minimum + 1. Otherwise, the scan is
 12446                                  ; complete.  Go find LRU.
 12447                                  ;
 12448                                  ;lru6:	
 12449                                  ;	cmp	si,-1			; position not -1?
 12450                                  ;	jz	short lru75		; no, done with everything
 12451                                  ;	lea	ax,[bx+1]		; set new threshold age
 12452                                  ;	jmp	short lru1		; go and loop for more
 12453                                  ;lru65:	
 12454                                  ;	stc
 12455                                  ;	jmp	short LRUDead		;	  return -1;
 12456                                  ;
 12457                                  ; Main loop is done. We have AX being the age+1 of the nth oldest sharer or
 12458                                  ; network entry. We now make a second pass through to find the LRU entry
 12459                                  ; that is local-no-share or has age >= AX
 12460                                  ;
 12461                                  ;lru75:
 12462                                  ;	mov	bx,-1			; min = 0xffff;
 12463                                  ;	mov	si,bx			; pos = 0xffff;
 12464                                  ;	LES	DI,[CS:SFTFCB]		; for (CX=FCBCount; CX>0; CX--)
 12465                                  ;	;mov	cx,[es:di+4]
 12466                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12467                                  ;	;lea	di,[di+6]
 12468                                  ;	LEA	DI,[DI+SFT.SFTable]
 12469                                  ;
 12470                                  ; If this is is local-no-share then go check for LRU else if age >= threshold
 12471                                  ; then check for lru.
 12472                                  ;
 12473                                  ;lru8:
 12474                                  ;	;test	word [es:di+5],8000h
 12475                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12476                                  ;	jnz	short lru85		; is for network, go check age
 12477                                  ;	call	CheckShare		; sharer here?
 12478                                  ;	jz	short lru86		; no, go check lru
 12479                                  ;
 12480                                  ; Network or sharer.  Check age
 12481                                  ;
 12482                                  ;lru85:
 12483                                  ;	;cmp	[es:di+17h],ax
 12484                                  ;	cmp	[es:di+sf_OpenAge],ax
 12485                                  ;	jb	short lru9		; age is before threshold, skip it
 12486                                  ;
 12487                                  ; Check LRU
 12488                                  ;
 12489                                  ;lru86:
 12490                                  ;	;cmp	[es:di+15h],bx
 12491                                  ;	cmp	[es:di+sf_LRU],bx	; is LRU less than current LRU?
 12492                                  ;	jae	short lru9		; no, skip this
 12493                                  ;	mov	si,di			; remember position
 12494                                  ;	;mov	bx,[es:di+15h]
 12495                                  ;	mov	bx,[es:di+sf_LRU]	; remember new minimum LRU
 12496                                  ;
 12497                                  ; Done with this entry, go back for more.
 12498                                  ;
 12499                                  ;lru9:
 12500                                  ;	;add	di, 53
 12501                                  ;	add	di,SF_ENTRY.size
 12502                                  ;	loop	lru8
 12503                                  ;
 12504                                  ; Scan is complete. If we found NOTHING that satisfied us then we bomb
 12505                                  ; out. The conditions here are:
 12506                                  ;
 12507                                  ;  No local-no-shares AND all net/share entries are older than threshold
 12508                                  ;
 12509                                  ;lru10:
 12510                                  ;	cmp	si,-1			; if no one f
 12511                                  ;	jz	short lru65		;     return -1;
 12512                                  ;lru11:
 12513                                  ;	mov	di,si
 12514                                  ;	MOV	[CS:THISSFT],DI		; set thissft
 12515                                  ;	MOV	[CS:THISSFT+2],ES
 12516                                  ;
 12517                                  ; If we have sharing or thisSFT is a net sft, then close it until ref count
 12518                                  ; is 0.
 12519                                  ;
 12520                                  ;	;test	word [es:di+5],8000h
 12521                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12522                                  ;	JNZ	short LRUClose
 12523                                  ;IF INSTALLED
 12524                                  ;	call	CheckShare
 12525                                  ;	JZ	short LRUDone
 12526                                  ;ENDIF
 12527                                  ;
 12528                                  ; Repeat close until ref count is 0
 12529                                  ;
 12530                                  ;LRUClose:
 12531                                  ;	push	ss
 12532                                  ;	pop	ds
 12533                                  ;	LES	DI,[THISSFT]
 12534                                  ;	cmp     word [es:di],0
 12535                                  ;	;CMP	word [ES:DI+SFT.sf_ref_count],0 ; is ref count still <> 0?
 12536                                  ;	JZ	short LRUDone 		; nope, all done
 12537                                  ;	call	DOS_CLOSE
 12538                                  ;	jnc	short LRUClose		; no error => clean up
 12539                                  ;	;cmp	al,6
 12540                                  ;	cmp	al,error_invalid_handle
 12541                                  ;	jz	short LRUClose
 12542                                  ;	stc
 12543                                  ;	JMP	short LRUDead
 12544                                  ;LRUDone:
 12545                                  ;	XOR	AL,AL
 12546                                  ;	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12547                                  ;
 12548                                  ;LRUDead:
 12549                                  ;	call	restore_world
 12550                                  ;	LES     DI,[CS:THISSFT]
 12551                                  ;	jnc	short LRUFCB_retn
 12552                                  ;LRUFCB_err:
 12553                                  ;	; mov	al, 23h	
 12554                                  ;	MOV	AL,error_FCB_unavailable
 12555                                  ;LRUFCB_retn:	
 12556                                  ;	retn:
 12557                                  ;
 12558                                  ;ENDIF	; LRUFCB has been rewritten below.
 12559                                  
 12560                                  ; 17/05/2019 - Retro DOS v4.0
 12561                                  ; LRUFCB for MSDOS 6.0 !
 12562                                  ;----------------------------------------------------------------------------
 12563                                  ;
 12564                                  ; LruFCB -- allocate the LRU SFT from the SFT Table. The LRU scheme
 12565                                  ; maintains separate counts for net/Share and local SFTs. We allocate a 
 12566                                  ; net/Share SFT only if we do not find a local SFT. This helps keep
 12567                                  ; net/Share SFTs which cannot be regenerated for as long as possible. We
 12568                                  ; optimize regeneration operations by keeping track of the current local
 12569                                  ; SFT. This avoids scanning of the SFTs as long as we have at least one 
 12570                                  ; local SFT in the SFT Block.
 12571                                  ;
 12572                                  ; Inputs: al = 0 => Regenerate SFT operation
 12573                                  ;	    = 1 => Allocate new SFT for Open/Create
 12574                                  ;
 12575                                  ; Outputs: Carry clear
 12576                                  ;	 	es:di = Address of allocated SFT
 12577                                  ;	  	ThisSFT = Address of allocated SFT
 12578                                  ;
 12579                                  ;	  carry set if closes of net/Share files failed 
 12580                                  ;		al = error_FCB_unavailable
 12581                                  ;
 12582                                  ; Registers affected: None
 12583                                  ;
 12584                                  ;----------------------------------------------------------------------------
 12585                                  
 12586                                  ;LruFCB	PROC	NEAR
 12587                                  LRUFCB:
 12588                                  	; 17/05/2019 - Retro DOS v4.0
 12589                                  	; DOSCODE:5805h (MSDOS 6.21, MSDOS.SYS)
 12590                                  
 12591                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12592                                  	; DOSCODE:57F1h (MSDOS 5.0, MSDOS.SYS)
 12593                                  
 12594                                  	; 20/01/2024
 12595                                  
 12596 00001947 06                      	push	es	; * (MSDOS 6.21)
 12597                                  	
 12598 00001948 E817EB                  	call	save_world
 12599                                  	
 12600                                  	;getdseg <ds>		;ds = DOSDATA
 12601 0000194B 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 12602                                  
 12603 00001950 08C0                    	or	al,al		;Check if regenerate allocation
 12604 00001952 7516                    	jnz	short lru1	;Try to find SFT to use
 12605                                  
 12606                                  	; This is a regen call. If LocalSFT contains the address of a valid
 12607                                  	; local SFT, just return that SFT to reuse
 12608                                  
 12609                                  	; 20/01/2024
 12610                                  	;mov	di,[LocalSFT]
 12611                                  	;or	di,[LocalSFT+2]	;is address == 0?
 12612                                  	;jz	short lru1	;invalid local SFT, find one
 12613                                  
 12614                                  	; We have found a valid local SFT. Recycle this SFT
 12615                                  
 12616 00001954 C43E[4410]              	les	di,[LocalSFT]
 12617                                  
 12618                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12619 00001958 8CC1                    	mov	cx,es
 12620 0000195A 09F9                    	or	cx,di		; is address == 0?
 12621 0000195C 740C                    	jz	short lru1	; invalid local SFT, find one
 12622                                  
 12623                                  gotlocalSFT:
 12624 0000195E 893E[9E05]              	mov	[THISSFT],di
 12625 00001962 8C06[A005]              	mov	[THISSFT+2],es
 12626 00001966 F8                      	clc
 12627 00001967 E9A900                  	jmp	LRUDone		;clear up SFT and return
 12628                                  
 12629                                  lru1:
 12630 0000196A C43E[4000]              	les	di,[SFTFCB]	;es:di = SF Table for FCBs
 12631                                  	;mov	cx,[es:di+4]
 12632 0000196E 268B4D04                	mov	cx,[es:di+SFT.SFCount]	;cx = number of SFTs
 12633                                  	;lea	di,[di+6]
 12634 00001972 8D7D06                  	lea	di,[di+SFT.SFTable]	;es:di = first SFT
 12635                                  
 12636                                  	; We scan through all the SFTs scanning for a free one. It also 
 12637                                  	; remembers the LRU SFT for net/Share SFTs and local SFTs separately.
 12638                                  	; bx = min. LRU for local SFTs
 12639                                  	; si = pos. of local SFT with min. LRU
 12640                                  	; dx = min. LRU for net/Share SFTs
 12641                                  	; bp = pos. of net/Share SFT with min. LRU
 12642                                  
 12643 00001975 BBFFFF                  	mov	bx,-1		; init. to 0xffff ( max. LRU value )
 12644 00001978 89DE                    	mov	si,bx
 12645 0000197A 89DA                    	mov	dx,bx
 12646 0000197C 89DD                    	mov	bp,bx
 12647                                  
 12648                                  findSFT:
 12649                                  	;See if this SFT is a free one. If so, return it
 12650 0000197E 26830D00                	or	word [es:di],0
 12651                                  	;or	word [es:di+SF_ENTRY.sf_ref_count],0 ;reference count = 0 ?
 12652 00001982 744C                    	jz	short gotSFT	;yes, SFT is free
 12653                                  	;;cmp	word [es:di],-1
 12654                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy ;Is it busy?
 12655 00001984 26833DFF                	cmp	word [es:di],sf_busy ; -1 
 12656 00001988 7446                    	jz	short gotSFT	;no, can use it
 12657                                  
 12658                                  	; Check if this SFT is local and store its address in LocalSFT. Can be
 12659                                  	; used for a later regen.
 12660                                  
 12661                                  	; 16/12/2022
 12662                                  	; 08/11/2022
 12663                                  	;test	byte [es:di+6],80h
 12664 0000198A 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 12665                                  	; 08/11/2022 Retro DOS v4.0 (MSDOS 5.0 MSDOS.SYS compatibility)
 12666                                  	;;test	word [es:di+5],8000h
 12667                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; network SFT?
 12668 0000198F 7531                    	jnz	short lru5	;yes, get net/Share LRU
 12669                                  
 12670                                  ;IF installed
 12671 00001991 E8FD58                  	call	CheckShare	;Share present?
 12672                                  ;ENDIF
 12673 00001994 752C                    	jnz	short lru5	;yes, get net/Share LRU
 12674                                  
 12675                                  	;Local SFT, register its address
 12676                                  
 12677                                  	; !!HACK!!!
 12678                                  	; There is a slightly dirty hack out here in a desperate bid to save
 12679                                  	; code space. There is similar code duplicated at label 'gotSFT'. We
 12680                                  	; enter from there if al = 0, update the LocalSFT variable, and since
 12681                                  	; al = 0, we jump out of the loop to the exit point. I have commented
 12682                                  	; out the code that previously existed at label 'gotSFT'
 12683                                  
 12684                                  hackpoint:
 12685 00001996 893E[4410]              	mov	[LocalSFT],di
 12686 0000199A 8C06[4610]              	mov	[LocalSFT+2],es	;store local SFT address
 12687                                  
 12688 0000199E 08C0                    	or	al,al		;Is operation = REGEN?
 12689 000019A0 74BC                    	jz	short gotlocalSFT ;yes, return this SFT for reuse
 12690                                  
 12691                                  	;Get LRU for local files
 12692                                  	
 12693                                  	;cmp	[es:di+15h],bx
 12694 000019A2 26395D15                	cmp	[es:di+sf_LRU],bx ;SFT.LRU < min?
 12695 000019A6 7306                    	jae	short lru4	;no, skip 
 12696                                  
 12697                                  	;mov	bx,[es:di+15h]
 12698 000019A8 268B5D15                	mov	bx,[es:di+sf_LRU] ;yes, store new minimum
 12699 000019AC 89FE                    	mov	si,di		;store SFT position
 12700                                  lru4:
 12701                                  	;add	di,59
 12702 000019AE 83C73B                  	add	di,SF_ENTRY.size ;go to next SFT
 12703 000019B1 E2CB                    	loop	findSFT
 12704                                  	
 12705                                  	; 20/01/2024
 12706 000019B3 49                      	dec	cx ; -1
 12707                                  
 12708                                  	; Check whether we got a net/Share or local SFT. If local SFT
 12709                                  	; available, we will reuse it instead of net/Share LRU
 12710                                  
 12711 000019B4 89F7                    	mov	di,si
 12712                                  	;cmp	si,-1		;local SFT available?
 12713 000019B6 39CE                    	cmp	si,cx ; 20/01/2024
 12714 000019B8 7516                    	jnz	short gotSFT	;yes, return it
 12715                                  
 12716                                  	;No local SFT, see if we got a net/Share SFT
 12717                                  
 12718 000019BA 89EF                    	mov	di,bp
 12719                                  
 12720 000019BC 39CD                    	cmp	bp,cx ; -1 ; 20/01/2024
 12721                                  	;cmp	bp,-1		;net/Share SFT available?
 12722 000019BE 752D                    	jnz	short gotnetSFT	;yes, return it
 12723                                  noSFT:
 12724                                  	; NB: This error should never occur. We always must have an LRU SFT.
 12725                                  	; This error can occur only if the SFT has been corrupted or the LRU
 12726                                  	; count is not maintained properly.
 12727                                  
 12728 000019C0 EB4E                    	jmp	short errorbadSFT ;error, no FCB available.
 12729                                  
 12730                                  	; Handle the LRU for net/Share SFTs
 12731                                  lru5:
 12732                                  	;cmp	[es:di+15h],dx
 12733 000019C2 26395515                	cmp	[es:di+sf_LRU],dx ;SFT.LRU < min?
 12734 000019C6 73E6                    	jae	short lru4	;no, skip
 12735                                  
 12736                                  	;mov	dx,[es:di+15h]
 12737 000019C8 268B5515                	mov	dx,[es:di+sf_LRU] ;yes, store new minimum
 12738                                  
 12739 000019CC 89FD                    	mov	bp,di		;store SFT position
 12740 000019CE EBDE                    	jmp	short lru4	;continue with next SFT
 12741                                  
 12742                                  gotSFT:
 12743 000019D0 08C0                    	or	al,al
 12744 000019D2 74C2                    	jz	short hackpoint	;save es:di in LocalSFT
 12745                                  
 12746                                  	; HACK!!!
 12747                                  	; The code here differs from the code at 'hackpoint' only in the
 12748                                  	; order of the check for al. If al = 0, we can jump to 'hackpoint'
 12749                                  	; and then from there jump out to 'gotlocalSFT'. The original code
 12750                                  	; has been commented out below and replaced by the code just above.
 12751                                  
 12752                                  ;If regen, then this SFT can be registered as a local one ( even if free ).
 12753                                  ;
 12754                                  ;	or	al,al		  ;Regen?
 12755                                  ;	jnz	short notlocaluse ;yes, register it and return
 12756                                  ;
 12757                                  ;Register this SFT as a local one
 12758                                  ;
 12759                                  ;	mov	[LocalSFT],di
 12760                                  ;	mov	[LocalSFT+2],es
 12761                                  ;	jmp	gotlocalSFT	;return to caller
 12762                                  ;
 12763                                  ;notlocaluse:
 12764                                  
 12765                                  	; The caller is probably going to use this SFT for a net/Share file.
 12766                                  	; We will come here only on a Open/Create when the caller($FCB_OPEN)
 12767                                  	; does not really know whether it is a local file or not. We
 12768                                  	; invalidate LocalSFT if the SFT we are going to use was previously
 12769                                  	; registered as a local SFT that can be recycled.
 12770                                  
 12771 000019D4 8CC0                    	mov	ax,es
 12772 000019D6 393E[4410]              	cmp	[LocalSFT],di		;Offset same?
 12773 000019DA 750E                    	jne	short notinvalid
 12774 000019DC 3906[4610]              	cmp	[LocalSFT+2],ax		;Segments same?
 12775                                  	;je	short zerolocalSFT	;no, no need to invalidate
 12776                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12777 000019E0 7508                    	jne	short notinvalid
 12778                                  zerolocalSFT:	
 12779 000019E2 31C0                    	xor	ax,ax ; 0
 12780 000019E4 A3[4410]                	mov	[LocalSFT],ax
 12781 000019E7 A3[4610]                	mov	[LocalSFT+2],ax
 12782                                  	
 12783                                  notinvalid:
 12784 000019EA E971FF                  	jmp	gotlocalSFT
 12785                                  
 12786                                  	; The SFT we are going to use was registered in the LocalSFT variable.
 12787                                  	; Invalidate this variable i.e LocalSFT = NULL
 12788                                  
 12789                                  ;zerolocalSFT:
 12790                                  	;xor	ax,ax ; 0
 12791                                  	;mov	[LocalSFT],ax
 12792                                  	;mov	[LocalSFT+2],ax
 12793                                  	;
 12794                                  	;jmp	gotlocalSFT
 12795                                  
 12796                                  gotnetSFT:
 12797                                  	; We have an SFT that is currently net/Share. If it is going to be
 12798                                  	; used for a regen, we know it has to be a local SFT. Update the
 12799                                  	; LocalSFT variable
 12800                                  
 12801 000019ED 08C0                    	or	al,al
 12802 000019EF 7508                    	jnz	short closenet
 12803                                  
 12804 000019F1 893E[4410]              	mov	[LocalSFT],di
 12805 000019F5 8C06[4610]              	mov	[LocalSFT+2],es	;store local SFT address
 12806                                  closenet:
 12807 000019F9 893E[9E05]              	mov	[THISSFT],di	; set thissft
 12808 000019FD 8C06[A005]              	mov	[THISSFT+2],es
 12809                                  
 12810                                  	; If we have sharing or thisSFT is a net sft, then close it until ref
 12811                                  	; count is 0.
 12812                                  	; NB: We come here only if it is a net/Share SFT that is going to be
 12813                                  	; recycled -- no need to check for this.
 12814                                  
 12815                                  LRUClose:
 12816 00001A01 26833D00                	cmp	word [es:di],0
 12817                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0 ; is ref count still <> 0?
 12818 00001A05 740C                    	jz	short LRUDone	; nope, all done
 12819                                  
 12820 00001A07 E8A414                  	call	DOS_CLOSE
 12821 00001A0A 73F5                    	jnc	short LRUClose	; no error => clean up
 12822                                  
 12823                                  	; Bugbug: I dont know why we are trying to close after we get an
 12824                                  	; error closing. Seems like we could have a potential infinite loop
 12825                                  	; here. This has to be verified.
 12826                                  
 12827 00001A0C 3C06                    	cmp	al,error_invalid_handle ; 6
 12828 00001A0E 74F1                    	je	short LRUClose
 12829                                  errorbadSFT:
 12830 00001A10 F9                      	stc
 12831 00001A11 EB05                    	JMP	short LRUDead
 12832                                  LRUDone:
 12833 00001A13 30C0                    	XOR	AL,AL
 12834 00001A15 E80E01                  	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12835                                  
 12836                                  LRUDead:
 12837 00001A18 E830EA                  	call	restore_world		; use macro
 12838                                  	
 12839 00001A1B 07                      	pop	es ; * (MSDOS 6.21)
 12840                                  
 12841                                  	;getdseg <es>
 12842 00001A1C 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 12843 00001A21 26C43E[9E05]            	les	di,[es:THISSFT]		;es:di points at allocated SFT
 12844                                  
 12845                                  	;;retnc
 12846                                  	;jc	short LruFCB_err
 12847                                  	;retn
 12848                                  
 12849                                  	; 16/12/2022
 12850                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12851 00001A26 7302                    	jnc	short LruFCB_retn
 12852                                  	;jc	short LruFCB_err
 12853                                  	;retn
 12854                                  		
 12855                                  LruFCB_err:
 12856 00001A28 B023                    	MOV	AL,error_FCB_unavailable ; 23h
 12857                                  LruFCB_retn:
 12858 00001A2A C3                      	retn
 12859                                  	
 12860                                  ;LruFCB	ENDP
 12861                                  
 12862                                  ; 17/05/2019 - Retro DOS v4.0
 12863                                  
 12864                                  ; DOSCODE:58F3h (MSDOS 6.21, MSDOS.SYS)
 12865                                  
 12866                                  ; --------------------------------------------------------------------------
 12867                                  ;**** RegenCopyName -- This function copies the filename from the FCB to
 12868                                  ; SFT and also to DOS local buffers. There was duplicate code in FCBRegen
 12869                                  ; to copy the name to different destinations
 12870                                  ;
 12871                                  ; Inputs: ds:si = source string
 12872                                  ;	 es:di = destination string
 12873                                  ;	 cx = length of string
 12874                                  ;
 12875                                  ; Outputs: String copied to destination
 12876                                  ;
 12877                                  ; Registers affected: cx,di,si
 12878                                  ; --------------------------------------------------------------------------
 12879                                  
 12880                                  RegenCopyName:
 12881                                  CopyName:
 12882 00001A2B AC                      	lodsb			;load character
 12883 00001A2C E87035                  	call	UCase		; convert char to upper case
 12884                                  StuffChar2:
 12885 00001A2F AA                      	STOSB			;store converted character
 12886 00001A30 E2F9                    	LOOP	CopyName	;
 12887                                  DoneName:
 12888 00001A32 C3                      	retn
 12889                                  
 12890                                  ; --------------------------------------------------------------------------
 12891                                  
 12892                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12893                                  FCBRegen:
 12894                                  	; called from SFTFromFCB. SS already DOSDATA
 12895                                  
 12896                                  	; General data filling. Mode is sf_isFCB + open_for_both, date/time 
 12897                                  	; we do not fill, size we do no fill, position we do not fill,
 12898                                  	; bit 14 of flags = TRUE, other bits = FALSE
 12899                                  
 12900                                  	;mov	al,[si+19h]
 12901 00001A33 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 12902                                  
 12903                                  	; We discriminate based on the first two bits in the reserved field.
 12904                                  	
 12905                                  	;test	al,80h
 12906 00001A36 A880                    	test	AL,FCBSPECIAL		; check for no sharing test
 12907 00001A38 741C                    	JZ	short RegenNoSharing	; yes, go regen from no sharing
 12908                                  
 12909                                  	; The FCB is for a network or a sharing based system. At this point 
 12910                                  	; we have already closed the SFT for this guy and reconnection is 
 12911                                  	; impossible.
 12912                                  	;
 12913                                  	; Remember that he may have given us a FCB with bogus information in
 12914                                  	; it. Check to see if sharing is present or if the redir is present.
 12915                                  	; If either is around, presume that we have cycled out the FCB and 
 12916                                  	; give the hard error. Otherwise, just return with carry set.
 12917                                  
 12918 00001A3A E85458                  	call	CheckShare		; test for sharer
 12919 00001A3D 7509                    	JNZ	short RegenFail		; yep, fail this.
 12920                                  	
 12921                                  	;mov	ax,1100h
 12922 00001A3F B80011                  	MOV	AX,MultNET<<8		; install check on multnet
 12923 00001A42 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - INSTALLATION CHECK
 12924                                  			; Return: AL = 00h  not installed, OK to install
 12925                                  			; 01h  not installed, not OK to install
 12926                                  			; FFh  installed
 12927 00001A44 08C0                    	OR	AL,AL			; is it there?
 12928 00001A46 740C                    	JZ	short RegenDead		; no, just fail the operation
 12929                                  RegenFail:
 12930                                  	; 17/05/2019 - Retro DOS v4.0
 12931                                  	;MOV	AX,[CS:USER_IN_AX]	; SS override
 12932 00001A48 36A1[3A03]              	mov	ax,[SS:USER_IN_AX] ; MSDOS 6.0
 12933                                  
 12934                                  	;cmp	ah,10h
 12935 00001A4C 80FC10                  	cmp	AH,FCB_CLOSE
 12936 00001A4F 7403                    	jz	short RegenDead
 12937 00001A51 E88B01                  	call	FCBHardErr		; massive hard error.
 12938                                  RegenDead:
 12939 00001A54 F9                      	STC				; carry set
 12940                                  FCBRegen_retn:
 12941 00001A55 C3                      	retn
 12942                                  
 12943                                  	; Local FCB without sharing. Check to see if sharing is loaded. If 
 12944                                  	; so fail the operation.
 12945                                  
 12946                                  RegenNoSharing:
 12947 00001A56 E83858                  	call	CheckShare		; Sharing around?
 12948 00001A59 75ED                    	JNZ	short RegenFail
 12949                                  	
 12950                                  	; Find an SFT for this guy.
 12951                                  	
 12952                                  	; 17/05/2019 - Retro DOS v4.0
 12953                                  
 12954                                  	; MSDOS 3.3
 12955                                  	;call	LRUFCB
 12956                                  	;jc	short FCBRegen_retn
 12957                                  	
 12958                                  	; MSDOS 6.0
 12959 00001A5B 50                      	push	ax
 12960 00001A5C B000                    	mov	al,0			;indicate it is a regen operation
 12961 00001A5E E8E6FE                  	call	LRUFCB
 12962 00001A61 58                      	pop	ax
 12963 00001A62 72F1                    	jc	short FCBRegen_retn
 12964                                  
 12965                                  	;mov	word [es:di+2],8002h
 12966 00001A64 26C745020280            	MOV	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB+open_for_both+SHARING_COMPAT
 12967 00001A6A 243F                    	AND	AL,3Fh			; get drive number for flags
 12968 00001A6C 98                      	CBW
 12969                                  	;or	ax,4000h
 12970 00001A6D 0D0040                  	OR	AX,sf_close_nodate	; normal FCB operation
 12971                                  
 12972                                  	; The bits field consists of the upper two bits (dirty and device) 
 12973                                  	; from the SFT and the low 4 bits from the open mode.
 12974                                  
 12975                                  	;mov	cl,[si+1Ah]
 12976 00001A70 8A4C1A                  	MOV	CL,[SI+fcb_nsl_bits]	; stick in dirty bits.
 12977 00001A73 88CD                    	MOV	CH,CL
 12978 00001A75 80E5C0                  	AND	CH,0C0h 		; mask off the dirty/device bits
 12979 00001A78 08E8                    	OR	AL,CH
 12980                                  	;and	cl,0Fh
 12981 00001A7A 80E10F                  	AND	CL,access_mask		; get the mode bits
 12982                                  	;mov	[es:di+2],cl
 12983 00001A7D 26884D02                	MOV	[ES:DI+SF_ENTRY.sf_mode],CL
 12984                                  	;mov	[es:di+5],ax
 12985 00001A81 26894505                	MOV	[ES:DI+SF_ENTRY.sf_flags],AX ; initial flags
 12986                                  	;MOV	AX,[CS:PROC_ID]		; SS override
 12987 00001A85 36A1[3C03]              	mov	ax,[ss:PROC_ID] ; MSDOS 6.0
 12988                                  	;mov	[es:di+31h],ax
 12989 00001A89 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX
 12990 00001A8D 1E                      	push	ds
 12991 00001A8E 56                      	push	si
 12992 00001A8F 06                      	push	es
 12993 00001A90 57                      	push	di
 12994 00001A91 16                      	push	ss
 12995 00001A92 07                      	pop	es
 12996 00001A93 BF[4B05]                	MOV	DI,NAME1		; NAME1 is in DOSDATA
 12997                                  
 12998 00001A96 B90800                  	MOV	CX,8
 12999 00001A99 46                      	INC	SI			; Skip past drive byte to name in FCB
 13000                                  
 13001                                  	; MSDOS 3.3
 13002                                  ;RegenCopyName:
 13003                                  	;lodsb
 13004                                  	;call	UCase
 13005                                  	;stosb
 13006                                  	;loop	RegenCopyName
 13007                                  
 13008                                  	; MSDOS 6.0
 13009 00001A9A E88EFF                  	call	RegenCopyName		;copy the name to NAME1
 13010                                  
 13011 00001A9D 16                      	push	ss	; SS is DOSDATA
 13012 00001A9E 1F                      	pop	ds
 13013                                  
 13014                                  	;mov	byte [ATTRIB],16h
 13015 00001A9F C606[6B05]16            	MOV	byte [ATTRIB],attr_hidden+attr_system+attr_directory
 13016                                  					; Must set this to something interesting
 13017                                  					; to call DEVNAME.
 13018 00001AA4 E87826                  	call	DEVNAME 		; check for device
 13019 00001AA7 5E                      	pop	si
 13020 00001AA8 07                      	pop	es
 13021 00001AA9 5E                      	pop	si
 13022 00001AAA 1F                      	pop	ds
 13023 00001AAB 7219                    	JC	short RegenFileNoSharing ; not found on device list => file
 13024                                  
 13025                                  	; Device found. We can ignore disk-specific info
 13026                                  
 13027                                  	;mov	[es:di+5],bh
 13028 00001AAD 26887D05                	MOV	[ES:DI+SF_ENTRY.sf_flags],BH ; device parms
 13029                                  	;mov	byte [es:di+4],0
 13030 00001AB1 26C6450400              	MOV	byte [ES:DI+SF_ENTRY.sf_attr],0 ; attribute
 13031                                  					; SS override
 13032                                  	;LDS	SI,[CS:DEVPT]		; get device driver
 13033 00001AB6 36C536[9A05]            	lds	si,[ss:DEVPT] ; MSDOS 6.0
 13034                                  	;mov	[es:di+7],si
 13035 00001ABB 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 13036                                  	;mov	[es:di+9],ds
 13037 00001ABF 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 13038 00001AC3 C3                      	retn				; carry is clear
 13039                                  
 13040                                  RegenDeadJ:
 13041 00001AC4 EB8E                    	JMP	short RegenDead
 13042                                  
 13043                                  	; File found. Just copy in the remaining pieces.
 13044                                  
 13045                                  RegenFileNoSharing:
 13046                                  	;mov	ax,[es:di+5]
 13047 00001AC6 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 13048 00001ACA 83E03F                  	AND	AX,03Fh
 13049 00001ACD 1E                      	push	ds
 13050 00001ACE 56                      	push	si
 13051 00001ACF E84C4E                  	call	FIND_DPB
 13052                                  	;mov	[es:di+7],si
 13053 00001AD2 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 13054                                  	;mov	[es:di+9],ds
 13055 00001AD6 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 13056 00001ADA 5E                      	pop	si
 13057 00001ADB 1F                      	pop	ds
 13058 00001ADC 72E6                    	jc	short RegenDeadJ	; if find DPB fails, then drive
 13059                                  					; indicator was bogus
 13060                                  	;mov	ax,[si+1Dh]
 13061 00001ADE 8B441D                  	MOV	AX,[SI+fcb_nsl_dirsec]
 13062                                  	;;mov	[es:di+1Dh],ax ; MSDOS 3.3
 13063                                  	;mov	[es:di+1Bh],ax ; MSDOS 6.0
 13064 00001AE1 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_dirsec],AX
 13065                                  
 13066                                  	; MSDOS 6.0
 13067                                  
 13068                                  	; SR;
 13069                                  	; Extract the read-only and archive bits from the top 2 bits of the sector
 13070                                  	; number
 13071                                  
 13072                                  	;mov	al,[si+18h]
 13073 00001AE5 8A4418                  	mov	al,[si+fcb_sfn]
 13074 00001AE8 24C0                    	and	al,0C0h		;get the 2 attribute bits
 13075 00001AEA 88C4                    	mov	ah,al
 13076 00001AEC D0C4                    	rol	ah,1
 13077 00001AEE D0E8                    	shr	al,1
 13078 00001AF0 08E0                    	or	al,ah
 13079 00001AF2 243F                    	and	al,03Fh		;mask off unused bits
 13080                                  	;mov	[es:di+4],al
 13081 00001AF4 26884504                	mov	[es:di+SF_ENTRY.sf_attr],al
 13082                                  
 13083                                  	; SR;
 13084                                  	; Update the higher word of the directory sector from the FCB
 13085                                  
 13086                                  	;;mov	al,[si+18h]
 13087 00001AF8 8A4418                  	mov	al,[si+fcb_sfn]
 13088 00001AFB 243F                    	and	al,03Fh		;mask off top 2 bits -- attr bits
 13089 00001AFD 28E4                    	sub	ah,ah
 13090                                  	;mov	[es:di+1Dh],ax
 13091 00001AFF 2689451D                	mov	[es:di+SF_ENTRY.sf_dirsec+2],ax ;update high word
 13092                                  
 13093                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13094                                  	;mov	ax,[si+1Bh]
 13095 00001B03 8B441B                  	MOV	AX,[SI+fcb_nsl_firclus]
 13096                                  	;mov	[es:di+0Bh],ax
 13097 00001B06 2689450B                	MOV	[ES:DI+SF_ENTRY.sf_firclus],AX
 13098                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 13099                                  	;mov	[es:di+35h],ax ; MSDOS 6.0
 13100 00001B0A 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 13101                                  	;mov	al,[si+1Fh]
 13102 00001B0E 8A441F                  	MOV	AL,[SI+fcb_nsl_dirpos]
 13103                                  	;mov  	[es:di+1Fh],al
 13104 00001B11 2688451F                	MOV	[ES:DI+SF_ENTRY.sf_dirpos],AL
 13105                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 13106 00001B15 26FF05                  	inc	word [ES:DI]		; Increment reference count.
 13107                                  					; Existing FCB entries would be
 13108                                  					; flushed unnecessarily because of
 13109                                  					; check in CheckFCB of the ref_count.
 13110                                  					; July 22/85 - BAS
 13111                                  	;lea	si,[si+1]
 13112 00001B18 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 13113                                  	;lea	di,[di+20h]
 13114 00001B1B 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 13115                                  	;mov	cx,11
 13116 00001B1E B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13117                                  	
 13118                                  	; MSDOS 6.0
 13119 00001B21 E807FF                  	call	RegenCopyName	;copy name to SFT 
 13120                                  	
 13121                                  	; MSDOS 3.3
 13122                                  ;RegenCopyName2:
 13123                                  	;lodsb
 13124                                  	;call    UCase
 13125                                  	;stosb
 13126                                  	;loop    RegenCopyName2
 13127                                  
 13128 00001B24 F8                      	clc
 13129 00001B25 C3                      	retn
 13130                                  
 13131                                  ; 17/05/2019 - Retro DOS v4.0
 13132                                  
 13133                                  ;**	BlastSFT - FIll SFT with Garbage
 13134                                  ; --------------------------------------------------------------------------
 13135                                  ;	BlastSFT is used when an SFT is no longer needed; it's called with
 13136                                  ;	various garbage values to put into the SFT.  I don't know why,
 13137                                  ;	presumably to help with debugging (jgl).  We clear the few fields
 13138                                  ;	necessary to show that the SFT is free after filling it.
 13139                                  ;
 13140                                  ;	ENTRY	(es:di) = address of SFT
 13141                                  ;		(al) = fill character
 13142                                  ;	EXIT	(ax) = -1
 13143                                  ;		'C' clear
 13144                                  ;	USES	AX, CX, Flags
 13145                                  
 13146                                  BlastSFT:
 13147 00001B26 57                      	push	di
 13148                                  	;mov	cx,53 ; MSDOS 3.3
 13149                                  	;mov	cx,59 ; MSDOS 6.0
 13150 00001B27 B93B00                  	mov	cx,SF_ENTRY.size
 13151 00001B2A F3AA                    	rep	stosb
 13152 00001B2C 5F                      	pop	di
 13153 00001B2D 29C0                    	sub	ax,ax	; 0		; clear 'C'-----------------;
 13154 00001B2F 268905                  	mov	[es:di],ax
 13155                                  	;mov	[es:di+SF_ENTRY.sf_ref_count],ax ; set ref count    ;
 13156                                  	;mov	[es:di+15h],ax
 13157 00001B32 26894515                	mov	[es:di+sf_LRU],ax	; set lru		    ;
 13158 00001B36 48                      	dec	ax	; -1					    ;
 13159                                  	;mov	[es:di+17h],ax ; 0FFFFh ; -1
 13160 00001B37 26894517                	mov	[es:di+sf_OpenAge],ax	; set open age to -1	    ;
 13161                                  BlastSFT_retn:
 13162 00001B3B C3                      	retn				; return with 'C' clear     ;
 13163                                  
 13164                                  ;Break	<CheckFCB - see if the SFT pointed to by the FCB is still OK>
 13165                                  ; --------------------------------------------------------------------------
 13166                                  ;
 13167                                  ;   CheckFCB - examine an FCB and its contents to see if it needs to be
 13168                                  ;   regenerated.
 13169                                  ;
 13170                                  ;   Inputs:	DS:SI point to FCB (not extended)
 13171                                  ;		AL is SFT index
 13172                                  ;   Outputs:	Carry Set - FCB needs to be regened
 13173                                  ;		Carry clear - FCB is OK. ES:DI point to SFT
 13174                                  ;   Registers modified: AX and BX
 13175                                  ;
 13176                                  ; --------------------------------------------------------------------------
 13177                                  
 13178                                  	; 21/01/2024
 13179                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13180                                  	; DOSCODE:59F0h (MSDOS 5.0, MSDOS.SYS)
 13181                                  CheckFCB:
 13182                                  		
 13183                                  	; called from $fcb_open and sftfromfcb. SS already set up to DOSDATA
 13184                                  
 13185                                  	; MSDOS 3.3
 13186                                  
 13187                                  	; LES	DI,[CS:SFTFCB]
 13188                                  
 13189                                  	; MSDOS 6.0
 13190                                  	
 13191                                  	; SR;
 13192                                  	; We check if the given FCB is for a local file. If so, we return a 
 13193                                  	; bad SFT status forcing the caller to regenerate the SFT.
 13194                                  
 13195                                  	;test	byte [si+19h],0C0h
 13196 00001B3C F64419C0                	test	byte [si+fcb_l_drive],FCBNETWORK|FCBSHARE|FCBDEVICE
 13197 00001B40 7447                    	jz	short BadSFT		;Local file, return bad SFT
 13198 00001B42 36C43E[4000]            	LES     DI,[SS:SFTFCB]		; SS override
 13199                                  
 13200                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13201                                  	;cmp	[es:di+4],al
 13202 00001B47 26384504                	CMP	[ES:DI+SFT.SFCount],AL
 13203 00001B4B 723C                    	JC	short BadSFT
 13204                                  	;;mov	bl,53 ; MSDOS 3.3
 13205                                  	;mov	bl,59 ; MSDOS 6.0
 13206 00001B4D B33B                    	MOV	BL,SF_ENTRY.size
 13207 00001B4F F6E3                    	MUL	BL
 13208                                  	;lea	di,[di+6]
 13209 00001B51 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 13210 00001B54 01C7                    	ADD	DI,AX
 13211                                  	;MOV	AX,[CS:PROC_ID]	; MSDOS 3.3
 13212 00001B56 36A1[3C03]              	mov	ax,[SS:PROC_ID] ; MSDOS 6.0  ; SS override
 13213                                  	;cmp	[es:di+31h],ax
 13214 00001B5A 26394531                	CMP	[ES:DI+SF_ENTRY.sf_PID],AX
 13215 00001B5E 7529                    	JNZ	short BadSFT		; must match process
 13216 00001B60 26833D00                	cmp	word [es:di],0
 13217                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],0
 13218 00001B64 7423                    	JZ	short BadSFT		; must also be in use
 13219                                  	;mov	al,[si+19h]
 13220 00001B66 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 13221                                  	;test	al,80h
 13222 00001B69 A880                    	test	AL,FCBSPECIAL		; a special FCB?
 13223 00001B6B 7428                    	JZ	short CheckNoShare	; No. try local or device
 13224                                  
 13225                                  	; Since we are a special FCB, try NOT to use a bogus test instruction.
 13226                                  	; FCBSHARE is a superset of FCBNETWORK.
 13227                                  
 13228 00001B6D 50                      	PUSH	AX
 13229                                  	;and	al,0C0h
 13230 00001B6E 24C0                    	AND	AL,FCBMASK
 13231                                  	;cmp	al,0C0h
 13232 00001B70 3CC0                    	CMP	AL,FCBSHARE		; net FCB?
 13233 00001B72 58                      	POP	AX
 13234 00001B73 7516                    	JNZ	short CheckNet		; yes
 13235                                  ;
 13236                                  ;----- In share support -----
 13237                                  ;
 13238                                  	;call	far [cs:JShare+(11*4)]
 13239 00001B75 36FF1E[BC00]            	Call    far [ss:JShare+(11*4)] ; 11 = ShChk ; SS Override
 13240 00001B7A 720D                    	JC	short BadSFT
 13241                                  
 13242                                  ; 21/01/2024
 13243                                  %if 0
 13244                                  	JMP	SHORT CheckD
 13245                                  ;
 13246                                  ;----- End in share support -----
 13247                                  ;
 13248                                  	; 09/11/2022
 13249                                  	; (There is not any procedure/sub
 13250                                  	;  which calls or jumps to CheckFirClus here)
 13251                                  	;;;
 13252                                  CheckFirClus:
 13253                                  	;cmp     bx,[es:di+0Bh]
 13254                                  	; 07/12/2022
 13255                                  	CMP	BX,[ES:DI+SF_ENTRY.sf_firclus]
 13256                                  	JNZ	short BadSFT
 13257                                  	;;;
 13258                                  %endif
 13259                                  
 13260                                  CheckD: 
 13261 00001B7C 243F                    	AND	AL,3Fh
 13262                                  	;mov	ah,[es:di+5]
 13263 00001B7E 268A6505                	MOV	AH,[ES:DI+SF_ENTRY.sf_flags]
 13264 00001B82 80E43F                  	AND	AH,3Fh
 13265 00001B85 38C4                    	CMP	AH,AL
 13266                                  	; 16/12/2022
 13267 00001B87 74B2                    	jz	short BlastSFT_retn	; carry is clear
 13268                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13269                                  	;jnz	short BadSFT
 13270                                  ;CheckD_retn:
 13271                                  	;retn
 13272                                  BadSFT: 
 13273 00001B89 F9                      	STC
 13274 00001B8A C3                      	retn
 13275                                  				
 13276                                  CheckNet:
 13277                                  	; 17/05/2019 - Retro DOS v4.0
 13278                                  	
 13279                                  ;----- In net support -----
 13280                                  
 13281                                  	; MSDOS 3.3
 13282                                  	;;mov	ax,[si+1Ah]
 13283                                  	;mov	ax,[si+fcb_net_handle]
 13284                                  	;;cmp	ax,[es:di+1Dh]
 13285                                  	;cmp	ax,[ES:DI+SF_ENTRY.sf_dirsec]
 13286                                  	;jnz	short BadSFT
 13287                                  	;;cmp	ax,[es:di+19h]
 13288                                  	;cmp	ax,[ES:DI+sf_netid]
 13289                                  	;jnz     short BadSFT
 13290                                  	;;mov	ax,[si+1Eh]
 13291                                  	;mov	ax,[si+fcb_l_attr]
 13292                                  	;;cmp	ax,[es:di+1Bh]
 13293                                  	;cmp	ax,[es:di+SF_ENTRY.sf_lstclus]
 13294                                  	;jnz     short BadSFT
 13295                                  
 13296                                  	; MSDOS 6.0
 13297                                  	;mov	ax,[si+1Ch]
 13298 00001B8B 8B441C                  	MOV	AX,[SI+fcb_netID]	;AN000;IFS.DOS 4.00
 13299                                  	; 09/11/2022
 13300                                  	;cmp	ax,[es:di+0Bh] 
 13301 00001B8E 263B450B                	CMP	AX,[ES:DI+sf_serial_ID]	;AN000;IFS.DOS 4.00
 13302 00001B92 75F5                    	JNZ	short BadSFT
 13303                                  
 13304                                  ;----- END In net support -----
 13305                                  
 13306                                  CheckNet_retn:
 13307 00001B94 C3                      	retn
 13308                                  
 13309                                  CheckNoShare:
 13310                                  
 13311                                  ; 16/12/2022
 13312                                  ;	; 09/11/2022 (following test instruction is nonsense!)
 13313                                  ;	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 13314                                  ;	;test	al,40h
 13315                                  ;	test	AL,FCBDEVICE		; Device?
 13316                                  ;	;jnz	short $+2 ; 09/11/2022
 13317                                  ;	JNZ	short CheckNoShareDev 	; Yes
 13318                                  
 13319                                  	; MSDOS 3.3 - IBMDOS.COM - Offset 27EFh
 13320                                  	;;mov	bx,[si+1Dh]
 13321                                  	;MOV	BX,[SI+fcb_nsl_dirsec]
 13322                                  	;;cmp	bx,[es:di+1Dh]
 13323                                  	;cmp	bx,[ES:DI+SF_ENTRY.sf_dirsec]
 13324                                  	;jnz	short BadSFT
 13325                                  	;;mov	bl,[si+1Fh]
 13326                                  	;MOV	bl,[SI+fcb_nsl_dirpos]
 13327                                  	;;cmp	bl,[es:di+1Fh]
 13328                                  	;cmp	bl,[ES:DI+SF_ENTRY.sf_dirpos]
 13329                                  	;jnz	short BadSFT
 13330                                  	;;mov	bl,[si+1Ah]
 13331                                  	;MOV	bl,[SI+fcb_nsl_bits]
 13332                                  	;;mov	bh,[es:di+5]
 13333                                  	;MOV	bh,[ES:DI+SF_ENTRY.sf_flags]
 13334                                  	;xor	bh,bl
 13335                                  	;and	bh,0C0h
 13336                                  	;jnz	short BadSFT
 13337                                  	;;xor	bl,[es:di+2]
 13338                                  	;xor	bl,[ES:DI+SF_ENTRY.sf_mode]
 13339                                  	;and	bl,0Fh
 13340                                  	;jnz	short BadSFT
 13341                                  	;push	di
 13342                                  	;push	si
 13343                                  	;;lea	di,[di+20h]  ; MSDOS 3.3
 13344                                  	;LEA	DI,[DI+SF_ENTRY.sf_name]
 13345                                  	;;lea	si,[si+1]
 13346                                  	;LEA	SI,[SI+SYS_FCB.name]
 13347                                  	;;mov	cx,11
 13348                                  	;MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13349                                  	;repe	cmpsb
 13350                                  	;pop	si
 13351                                  	;pop	di
 13352                                  	;jnz	short BadSFT
 13353                                  	;;mov	bx,[si+1Bh]
 13354                                  	;MOV	bX,[SI+fcb_nsl_firclus]
 13355                                  	;jmp	short CheckFirClus
 13356                                  
 13357                                  	; MSDOS 6.0
 13358                                  
 13359                                  	; SR;
 13360                                  	; The code below to match a local FCB with its SFT can no longer be
 13361                                  	; used. We just return a no-match status. This check is done right
 13362                                  	; at the top.
 13363                                  
 13364                                  CheckNoShareDev:
 13365                                  	;mov	bx,[si+1Ah]
 13366 00001B95 8B5C1A                  	MOV	BX,[SI+fcb_nsld_drvptr]
 13367                                  	;cmp	bx,[es:di+7]
 13368 00001B98 263B5D07                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr]
 13369 00001B9C 75EB                    	JNZ	short BadSFT
 13370                                  	;mov	bx,[si+1Ch]
 13371 00001B9E 8B5C1C                  	MOV	BX,[SI+fcb_nsld_drvptr+2]
 13372                                  	;cmp	bx,[es:di+9]
 13373 00001BA1 263B5D09                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr+2]
 13374 00001BA5 75E2                    	JNZ	short BadSFT
 13375 00001BA7 EBD3                    	JMP	short CheckD
 13376                                  
 13377                                  ;Break	<SFTFromFCB - take a FCB and obtain a SFT from it>
 13378                                  ;----------------------------------------------------------------------------
 13379                                  ;
 13380                                  ;   SFTFromFCB - the workhorse of this compatability crap. Check to see if
 13381                                  ;	the SFT for the FCB is Good. If so, make ThisSFT point to it. If not
 13382                                  ;	good, get one from the cache and regenerate it. Overlay the LRU field
 13383                                  ;	with PID
 13384                                  ;
 13385                                  ;   Inputs:	DS:SI point to FCB
 13386                                  ;   Outputs:	ThisSFT point to appropriate SFT
 13387                                  ;		Carry clear -> OK ES:DI -> SFT
 13388                                  ;		Carry set -> error in ax
 13389                                  ;   Registers modified: ES,DI, AX
 13390                                  ;
 13391                                  ;----------------------------------------------------------------------------
 13392                                  
 13393                                  SFTFromFCB:
 13394                                  	; called from fcbio and $fcb_close. SS already set up to DOSDATA
 13395                                  
 13396                                  	; 17/05/2019 - Retro DOS v4.0
 13397                                  
 13398 00001BA9 50                      	push	ax
 13399 00001BAA 53                      	push	bx
 13400                                  	;mov	al,[si+18h]
 13401 00001BAB 8A4418                  	MOV	AL,[SI+fcb_sfn] 	; set SFN for check
 13402 00001BAE E88BFF                  	call	CheckFCB
 13403 00001BB1 5B                      	pop	bx
 13404 00001BB2 58                      	pop	ax
 13405                                  	;MOV	[CS:THISSFT],DI		; SS override
 13406                                  	;MOV	[CS:THISSFT+2],ES
 13407 00001BB3 36893E[9E05]            	MOV	[SS:THISSFT],DI		; SS override
 13408 00001BB8 368C06[A005]            	MOV	[SS:THISSFT+2],ES
 13409 00001BBD 7311                    	JNC	short Set_SFT		; no problems, just set thissft
 13410                                  	
 13411                                  	; 09/11/2022 (MSDOS 5.0)
 13412                                  	; 31/05/2019
 13413 00001BBF 06                      	push	es ; * (MSDOS 6.21) & (MSDOS 5.0)
 13414 00001BC0 E89FE8                  	call	save_world
 13415 00001BC3 E86DFE                  	call	FCBRegen
 13416 00001BC6 E882E8                  	call	restore_world		; use macro restore world
 13417 00001BC9 07                      	pop	es ; * (MSDOS 6.21) ; 31/05/2019 ; 09/11/2022 (MSDOS 5.0)	
 13418                                  
 13419                                  	;MOV	AX,[CS:EXTERR]		; SS override
 13420 00001BCA 36A1[2403]              	MOV	AX,[SS:EXTERR]		; SS override
 13421 00001BCE 72C4                    	jc	short CheckNet_retn
 13422                                  
 13423                                  Set_SFT: 
 13424                                  	;LES	DI,[CS:THISSFT]		; SS override for THISSFT & PROC_ID
 13425 00001BD0 36C43E[9E05]            	les	di,[ss:THISSFT]
 13426                                  	;PUSH	word [CS:PROC_ID]	; set process id
 13427 00001BD5 36FF36[3C03]            	push	word [ss:PROC_ID]
 13428                                  	;pop	word [es:di+31h]
 13429 00001BDA 268F4531                	POP     word [ES:DI+SF_ENTRY.sf_PID]
 13430 00001BDE C3                      	retn				; carry is clear
 13431                                  
 13432                                  ;Break	<FCBHardErr - generate INT 24 for hard errors on FCBS>
 13433                                  ;----------------------------------------------------------------------------
 13434                                  ;
 13435                                  ;   FCBHardErr - signal to a user app that he is trying to use an
 13436                                  ;	unavailable FCB.
 13437                                  ;
 13438                                  ;   Inputs:	none.
 13439                                  ;   Outputs:	none.
 13440                                  ;   Registers modified: all
 13441                                  ;
 13442                                  ;----------------------------------------------------------------------------
 13443                                  
 13444                                  FCBHardErr:
 13445                                  	; 17/05/2019 - Retro DOS v4.0
 13446 00001BDF 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 13447                                  	;
 13448                                  	;mov	ax,23h
 13449 00001BE4 B82300                  	MOV	AX,error_FCB_unavailable
 13450                                  	;;mov	byte [cs:ALLOWED],8
 13451                                  	;MOV	byte [CS:ALLOWED],Allowed_FAIL
 13452 00001BE7 26C606[4B03]08          	mov	byte [es:ALLOWED],Allowed_FAIL	
 13453                                  	
 13454                                  	;LES	BP,[CS:THISDPB]
 13455 00001BED 26C42E[8A05]            	les	bp,[es:THISDPB]
 13456                                  	
 13457 00001BF2 BF0100                  	MOV	DI,1			; Fake some registers
 13458 00001BF5 89F9                    	MOV	CX,DI
 13459                                  	;mov	dx,[es:bp+0Bh]
 13460 00001BF7 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 13461 00001BFB E85F36                  	call	HARDERR
 13462 00001BFE F9                      	STC
 13463 00001BFF C3                      	retn
 13464                                  
 13465                                  ;============================================================================
 13466                                  ; FCBIO2.ASM, MSDOS 6.0, 1991
 13467                                  ;============================================================================
 13468                                  ; 21/07/2018 - Retro DOS v3.0
 13469                                  ; 17/05/2019 - Retro DOS v4.0
 13470                                  
 13471                                  ;**	FCBIO2.ASM - Ancient 1.0 1.1 FCB system calls
 13472                                  ;
 13473                                  ;	GetRR
 13474                                  ;	GetExtent
 13475                                  ;	SetExtent
 13476                                  ;	GetExtended
 13477                                  ;	GetRecSize
 13478                                  ;	FCBIO
 13479                                  ;	$FCB_OPEN
 13480                                  ;	$FCB_CREATE
 13481                                  ;	$FCB_RANDOM_WRITE_BLOCK
 13482                                  ;	$FCB_RANDOM_READ_BLOCK
 13483                                  ;	$FCB_SEQ_READ
 13484                                  ;	$FCB_SEQ_WRITE
 13485                                  ;	$FCB_RANDOM_READ
 13486                                  ;	$FCB_RANDOM_WRITE
 13487                                  ;
 13488                                  ;	Revision history:
 13489                                  ;
 13490                                  ;		Created: ARR 4 April 1983
 13491                                  ;			 MZ  6 June  1983 completion of functions
 13492                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 13493                                  ;				  times.  Change so successive closes work by
 13494                                  ;				  always returning OK.	Also, detect I/O to
 13495                                  ;				  already closed FCB and return EOF.
 13496                                  ;		 MZ 16 Jan   1984 More braindamage.  Need to separate info
 13497                                  ;				  out of sft into FCB for reconnection
 13498                                  ;
 13499                                  ;	    A000   version 4.00	Jan. 1988
 13500                                  
 13501                                  ; Defintions for FCBOp flags
 13502                                  
 13503                                  RANDOM	equ 2				; random operation
 13504                                  FCBREAD equ 4				; doing a read
 13505                                  BLOCK	equ 8				; doing a block I/O
 13506                                  
 13507                                  ;Break <GetRR - return the random record field in DX:AX>
 13508                                  ;---------------------------------------------------------------------------
 13509                                  ;
 13510                                  ;   GetRR - correctly load DX:AX with the random record field (3 or 4 bytes)
 13511                                  ;	from the FCB pointed to by DS:SI
 13512                                  ;
 13513                                  ;   Inputs:	DS:SI point to an FCB
 13514                                  ;		BX has record size
 13515                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13516                                  ;   Registers modified: none
 13517                                  ;---------------------------------------------------------------------------
 13518                                  
 13519                                  GetRR:
 13520                                  	;mov	ax,[si+21h]
 13521 00001C00 8B4421                  	MOV	AX,[SI+SYS_FCB.RR]	; get low order part
 13522                                  	;mov	dx,[si+23h]
 13523 00001C03 8B5423                  	MOV	DX,[SI+SYS_FCB.RR+2]	; get high order part
 13524 00001C06 83FB40                  	CMP	BX,64			; ignore MSB of RR if recsiz > 64
 13525 00001C09 7202                    	JB	short GetRRBye
 13526                                  GetExtent_bye:	; 21/01/2024
 13527 00001C0B 30F6                    	XOR	DH,DH
 13528                                  GetRRBye:
 13529 00001C0D C3                      	retn
 13530                                  
 13531                                  ;Break <GetExtent - retrieve next location for sequential IO>
 13532                                  ;---------------------------------------------------------------------------
 13533                                  ;
 13534                                  ;   GetExtent - Construct the next record to perform I/O from the EXTENT and
 13535                                  ;	NR fields in the FCB.
 13536                                  ;
 13537                                  ;   Inputs:	DS:SI - point to FCB
 13538                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13539                                  ;   Registers modified: none
 13540                                  ;---------------------------------------------------------------------------
 13541                                  
 13542                                  GetExtent:
 13543                                  	;mov	al,[si+20h]
 13544 00001C0E 8A4420                  	MOV	AL,[SI+SYS_FCB.NR]	; get low order piece
 13545                                  	;mov	dx,[si+0Ch]
 13546 00001C11 8B540C                  	MOV	DX,[SI+SYS_FCB.EXTENT]	; get high order piece
 13547 00001C14 D0E0                    	SHL	AL,1
 13548 00001C16 D1EA                    	SHR	DX,1
 13549 00001C18 D0D8                    	RCR	AL,1	; move low order bit of DL to high order of AH
 13550 00001C1A 88D4                    	MOV	AH,DL
 13551 00001C1C 88F2                    	MOV	DL,DH
 13552                                  	; 21/01/2024
 13553                                  	;XOR	DH,DH
 13554                                  	;retn
 13555 00001C1E EBEB                    	jmp	short GetExtent_bye
 13556                                  
 13557                                  ;Break <SetExtent - update the extent/NR field>
 13558                                  ;---------------------------------------------------------------------------
 13559                                  ;
 13560                                  ;   SetExtent - change the position of an FCB by filling in the extent/NR
 13561                                  ;	fields
 13562                                  ;
 13563                                  ;   Inputs:	DS:SI point to FCB
 13564                                  ;		DX:AX is a record location in file
 13565                                  ;   Outputs:	Extent/NR fields are filled in
 13566                                  ;   Registers modified: CX
 13567                                  ;---------------------------------------------------------------------------
 13568                                  
 13569                                  SetExtent:
 13570 00001C20 50                      	push	ax
 13571 00001C21 52                      	push	dx
 13572 00001C22 89C1                    	MOV	CX,AX
 13573 00001C24 247F                    	AND	AL,7FH			; next rec field
 13574                                  	;mov	[si+20h],al
 13575 00001C26 884420                  	MOV	[SI+SYS_FCB.NR],AL
 13576 00001C29 80E180                  	AND	CL,80H			; save upper bit
 13577 00001C2C D1E1                    	SHL	CX,1
 13578 00001C2E D1D2                    	RCL	DX,1			; move high bit of CX to low bit of DX
 13579 00001C30 88E8                    	MOV	AL,CH
 13580 00001C32 88D4                    	MOV	AH,DL
 13581                                  	;mov	[si+0Ch], ax
 13582 00001C34 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; all done
 13583 00001C37 5A                      	pop	dx
 13584 00001C38 58                      	pop	ax
 13585 00001C39 C3                      	retn
 13586                                  
 13587                                  ;Break <GetExtended - find FCB in potential extended fcb>
 13588                                  ;---------------------------------------------------------------------------
 13589                                  ;
 13590                                  ;   GetExtended - Make DS:SI point to FCB from DS:DX
 13591                                  ;
 13592                                  ;   Inputs:	DS:DX point to a possible extended FCB
 13593                                  ;   Outputs:	DS:SI point to the FCB part
 13594                                  ;		zeroflag set if not extended fcb
 13595                                  ;   Registers modified: SI
 13596                                  ;---------------------------------------------------------------------------
 13597                                  
 13598                                  GetExtended:
 13599 00001C3A 89D6                    	MOV	SI,DX			; point to Something
 13600 00001C3C 803CFF                  	CMP	BYTE [SI],-1		; look for extention
 13601 00001C3F 7503                    	JNZ	short GetBye		; not there
 13602 00001C41 83C607                  	ADD	SI,7			; point to FCB
 13603                                  GetBye:
 13604 00001C44 39D6                    	CMP	SI,DX			; set condition codes
 13605                                  getextd_retn:
 13606 00001C46 C3                      	retn
 13607                                  
 13608                                  ;Break <GetRecSize - return in BX the FCB record size>
 13609                                  ;---------------------------------------------------------------------------
 13610                                  ;
 13611                                  ;   GetRecSize - return in BX the record size from the FCB at DS:SI
 13612                                  ;
 13613                                  ;   Inputs:	DS:SI point to a non-extended FCB
 13614                                  ;   Outputs:	BX contains the record size
 13615                                  ;   Registers modified: None
 13616                                  ;---------------------------------------------------------------------------
 13617                                  
 13618                                  	; 22/01/2024
 13619                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13620                                  GetRecSize:
 13621                                  	;mov	bx,[si+0Eh]
 13622 00001C47 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 13623 00001C4A 09DB                    	OR	BX,BX			; is it nul?
 13624                                  	;jz	short getextd_retn
 13625                                  	; 22/01/2024 (BugFix)
 13626 00001C4C 75F8                    	jnz	short getextd_retn
 13627                                  	;MOV	BX,128			; use default size
 13628 00001C4E B380                    	mov	bl,128
 13629                                  	;mov	[si+0Eh],bx
 13630 00001C50 895C0E                  	MOV	[SI+SYS_FCB.RECSIZ],BX	; stuff it back
 13631 00001C53 C3                      	retn
 13632                                  ; 23/01/2024 - Retro DOS v5.0
 13633                                  ; PCDOS 7.1 IBMDOS.COM - DOSCODE:61B3h
 13634                                  ; 23/01/2024 - Retro DOS v4.2
 13635                                  ; MSDOS 6.22 MSDOS.SYS - DOSCODE:5DC1h
 13636                                  ; 23/01/2024 - Retro DOS v4.1
 13637                                  ; MSDOS 5.0 MSDOS.SYS - DOSCODE:5DADh
 13638                                  
 13639                                  ; 22/07/2018 - Retro DOS v3.0
 13640                                  
 13641                                  ;BREAK <$FCB_Random_write_Block - write a block of records to a file >
 13642                                  ;----------------------------------------------------------------------------
 13643                                  ;
 13644                                  ;   $FCB_Random_Write_Block - retrieve a location from the FCB, seek to it
 13645                                  ;	and write a number of blocks from it.
 13646                                  ;
 13647                                  ;   Inputs:	DS:DX point to an FCB
 13648                                  ;   Outputs:	AL = 0 write was successful and the FCB position is updated
 13649                                  ;		AL <> 0 Not enough room on disk for the output
 13650                                  ;
 13651                                  ;----------------------------------------------------------------------------
 13652                                  
 13653                                  _$FCB_RANDOM_WRITE_BLOCK:
 13654                                  	;mov	AL,0Ah
 13655 00001C54 B00A                    	MOV	AL,RANDOM+BLOCK
 13656 00001C56 EB12                    	JMP	short FCBIO	; 23/01/2024
 13657                                  
 13658                                  ;BREAK <$FCB_Random_Read_Block - read a block of records to a file >
 13659                                  ;----------------------------------------------------------------------------
 13660                                  ;
 13661                                  ;   $FCB_Random_Read_Block - retrieve a location from the FCB, seek to it
 13662                                  ;	and read a number of blocks from it.
 13663                                  ;
 13664                                  ;   Inputs:	DS:DX point to an FCB
 13665                                  ;   Outputs:	AL = error codes defined above
 13666                                  ;
 13667                                  ;----------------------------------------------------------------------------
 13668                                  
 13669                                  _$FCB_RANDOM_READ_BLOCK:
 13670                                  	;mov	AL,0Eh
 13671 00001C58 B00E                    	MOV	AL,RANDOM+FCBREAD+BLOCK
 13672 00001C5A EB0E                    	JMP	short FCBIO	; 23/01/2024
 13673                                  
 13674                                  ;BREAK <$FCB_Seq_Read - read the next record from a file >
 13675                                  ;----------------------------------------------------------------------------
 13676                                  ;
 13677                                  ;   $FCB_Seq_Read - retrieve the next record from an FCB and read it into
 13678                                  ;	memory
 13679                                  ;
 13680                                  ;   Inputs:	DS:DX point to an FCB
 13681                                  ;   Outputs:	AL = error codes defined above
 13682                                  ;
 13683                                  ;----------------------------------------------------------------------------
 13684                                  
 13685                                  _$FCB_SEQ_READ:
 13686                                  	;mov	AL,4
 13687 00001C5C B004                    	MOV	AL,FCBREAD
 13688 00001C5E EB0A                    	JMP	short FCBIO	; 23/01/2024
 13689                                  
 13690                                  ;BREAK <$FCB_Seq_Write - write the next record to a file >
 13691                                  ;----------------------------------------------------------------------------
 13692                                  ;
 13693                                  ;   $FCB_Seq_Write - retrieve the next record from an FCB and write it to the
 13694                                  ;	file
 13695                                  ;
 13696                                  ;   Inputs:	DS:DX point to an FCB
 13697                                  ;   Outputs:	AL = error codes defined above
 13698                                  ;
 13699                                  ;----------------------------------------------------------------------------
 13700                                  
 13701                                  _$FCB_SEQ_WRITE:
 13702 00001C60 B000                    	MOV	AL,0
 13703 00001C62 EB06                    	JMP	short FCBIO	; 23/01/2024
 13704                                  
 13705                                  ;BREAK <$FCB_Random_Read - Read a single record from a file >
 13706                                  ;----------------------------------------------------------------------------
 13707                                  ;
 13708                                  ;   $FCB_Random_Read - retrieve a location from the FCB, seek to it and read a
 13709                                  ;	record from it.
 13710                                  ;
 13711                                  ;   Inputs:	DS:DX point to an FCB
 13712                                  ;   Outputs:	AL = error codes defined above
 13713                                  ;
 13714                                  ;----------------------------------------------------------------------------
 13715                                  
 13716                                  _$FCB_RANDOM_READ:
 13717                                  	;mov	AL,6
 13718 00001C64 B006                    	MOV	AL,RANDOM+FCBREAD
 13719                                  	; 23/01/2024
 13720                                  	;jmp	FCBIO 		; single block
 13721 00001C66 EB02                    	jmp	short FCBIO
 13722                                  
 13723                                  ;BREAK <$FCB_Random_Write - write a single record to a file >
 13724                                  ;----------------------------------------------------------------------------
 13725                                  ;
 13726                                  ;   $FCB_Random_Write - retrieve a location from the FCB, seek to it and write
 13727                                  ;	a record to it.
 13728                                  ;
 13729                                  ;   Inputs:	DS:DX point to an FCB
 13730                                  ;   Outputs:	AL = error codes defined above
 13731                                  ;
 13732                                  ;----------------------------------------------------------------------------
 13733                                  
 13734                                  _$FCB_RANDOM_WRITE:
 13735                                  	;mov	AL,2
 13736 00001C68 B002                    	MOV	AL,RANDOM
 13737                                  	; 23/01/2024
 13738                                  	;;jmp	FCBIO
 13739                                  	;jmp	short FCBIO
 13740                                  
 13741                                  ;BREAK <FCBIO - do internal FCB I/O>
 13742                                  ;---------------------------------------------------------------------------
 13743                                  ;
 13744                                  ;   FCBIO - look at FCBOP and merge all FCB operations into a single routine.
 13745                                  ;
 13746                                  ;   Inputs:	FCBOP flags which operations need to be performed
 13747                                  ;		DS:DX point to FCB
 13748                                  ;		CX may have count of number of records to xfer
 13749                                  ;   Outputs:	AL has error code
 13750                                  ;   Registers modified: all
 13751                                  ;---------------------------------------------------------------------------
 13752                                  
 13753                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13754                                  	; DOSCODE:5B17h (MSDOS 5.0 MSDOS.SYS)
 13755                                  
 13756                                  	; 23/01/2024
 13757                                  	; DOSCODE:5B2Bh (MSDOS 6.22 MSDOS.SYS)
 13758                                  
 13759                                  	; 23/01/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMDOS.COM)
 13760                                  	; DOSCODE:61C9h (PCDOS 7.1 IBMDOS.COM)
 13761                                  
 13762                                  FCBIO:
 13763                                  
 13764                                  FEOF	EQU	1
 13765                                  FTRIM	EQU	2
 13766                                  
 13767                                  %define	FCBErr	byte [bp-1]  ; byte
 13768                                  %define	cRec	word [bp-3]  ; word
 13769                                  ;%define RecPos	word [bp-7]  ; dword
 13770                                  %define RecPosL	word [bp-7]  ; word
 13771                                  %define RecPosH	word [bp-5]  ; word
 13772                                  %define	RecSize	word [bp-9]  ; word
 13773                                  ;%define bPos	word [bp-13] ; dword
 13774                                  %define bPosL	word [bp-13] ; word
 13775                                  %define bPosH	word [bp-11] ; word
 13776                                  %define cByte	word [bp-15] ; word
 13777                                  %define cResult word [bp-17] ; word
 13778                                  %define	cRecRes	word [bp-19] ; word
 13779                                  %define	FCBOp	byte [bp-20] ; byte
 13780                                  ; 23/01/2024
 13781                                  %define bPos bp-13
 13782                                  
 13783                                  	;Enter
 13784                                  
 13785 00001C6A 55                      	push	bp
 13786 00001C6B 89E5                    	mov	bp,sp
 13787 00001C6D 83EC14                  	sub	sp,20
 13788                                  	;mov	[bp-20],al
 13789 00001C70 8846EC                  	MOV	FCBOp,AL
 13790                                  	;mov	byte [bp-1],0
 13791 00001C73 C646FF00                	MOV	FCBErr,0		;   FCBErr = 0;
 13792 00001C77 E8C0FF                  	call	GetExtended		;   FCB = GetExtended ();
 13793                                  	;test	byte [bp-20],8
 13794 00001C7A F646EC08                	TEST	FCBOp,BLOCK		;   if ((OP&BLOCK) == 0)
 13795 00001C7E 7503                    	JNZ	short GetPos
 13796 00001C80 B90100                  	MOV	CX,1			;	cRec = 1;
 13797                                  GetPos:
 13798                                  	;mov	[bp-3],cx
 13799 00001C83 894EFD                  	MOV	cRec,CX 		;*Tail coalesce
 13800 00001C86 E885FF                  	call	GetExtent		;   RecPos = GetExtent ();
 13801 00001C89 E8BBFF                  	call	GetRecSize		;   RecSize = GetRecSize ();
 13802                                  	;mov	[bp-9],bx
 13803 00001C8C 895EF7                  	MOV	RecSize,BX
 13804                                  	;test	byte [bp-20],2
 13805 00001C8F F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&RANDOM) <> 0)
 13806 00001C93 7403                    	JZ	short GetRec
 13807 00001C95 E868FF                  	call	GetRR			;	RecPos = GetRR ();
 13808                                  GetRec:
 13809                                  	;mov	[bp-7],ax
 13810 00001C98 8946F9                  	MOV	RecPosL,AX		;*Tail coalesce
 13811                                  	;mov	[bp-5],dx
 13812 00001C9B 8956FB                  	MOV	RecPosH,DX
 13813 00001C9E E87FFF                  	call	SetExtent		;   SetExtent (RecPos);
 13814                                  	;mov	ax,[bp-5]
 13815 00001CA1 8B46FB                  	MOV	AX,RecPosH		;   bPos = RecPos * RecSize;
 13816 00001CA4 F7E3                    	MUL	BX
 13817 00001CA6 89C7                    	MOV	DI,AX
 13818                                  	;mov	ax,[bp-7]
 13819 00001CA8 8B46F9                  	MOV	AX,RecPosL
 13820 00001CAB F7E3                    	MUL	BX
 13821 00001CAD 01FA                    	ADD	DX,DI
 13822                                  	;mov	[bp-13],ax
 13823 00001CAF 8946F3                  	MOV	bPosL,AX
 13824                                  	;mov	[bp-11],dx
 13825 00001CB2 8956F5                  	MOV	bPosH,DX
 13826                                  	;mov	ax,[bp-3]
 13827 00001CB5 8B46FD                  	MOV	AX,cRec 		;   cByte = cRec * RecSize;
 13828 00001CB8 F7E3                    	MUL	BX
 13829                                  	;mov	[bp-15],ax
 13830 00001CBA 8946F1                  	MOV	cByte,AX
 13831                                  
 13832                                  ;hkn; 	SS override
 13833 00001CBD 360306[2C03]            	ADD	AX,[SS:DMAADD]		;   if (cByte+DMA > 64K) {
 13834 00001CC2 83D200                  	ADC	DX,0
 13835 00001CC5 7419                    	JZ	short DoOper
 13836                                  	;mov	byte [bp-1],2
 13837 00001CC7 C646FF02                	MOV	FCBErr,FTRIM		;	FCBErr = FTRIM;
 13838                                  
 13839                                  ;hkn; 	SS override
 13840 00001CCB 36A1[2C03]              	MOV	AX,[SS:DMAADD]		;	cRec = (64K-DMA)/RecSize;
 13841 00001CCF F7D8                    	NEG	AX
 13842 00001CD1 7501                    	JNZ	short DoDiv
 13843 00001CD3 48                      	DEC	AX
 13844                                  DoDiv:
 13845 00001CD4 31D2                    	XOR	DX,DX
 13846 00001CD6 F7F3                    	DIV	BX
 13847                                  	;mov	[bp-3],ax
 13848 00001CD8 8946FD                  	MOV	cRec,AX
 13849 00001CDB F7E3                    	MUL	BX			;	cByte = cRec * RecSize;
 13850                                  	;mov	[bp-15],ax
 13851 00001CDD 8946F1                  	MOV	cByte,AX		;	}
 13852                                  DoOper:
 13853 00001CE0 31DB                    	XOR	BX,BX
 13854                                  	;mov	[bp-17],bx
 13855 00001CE2 895EEF                  	MOV	cResult,BX		;   cResult = 0;
 13856                                  	;cmp	[bp-15],bx
 13857 00001CE5 395EF1                  	CMP	cByte,BX		;   if (cByte <> 0 ||
 13858 00001CE8 7506                    	JNZ	short DoGetExt
 13859                                  	;test	byte [bp-1],2
 13860 00001CEA F646FF02                	TEST	FCBErr,FTRIM		;	(FCBErr&FTRIM) == 0) {
 13861                                  	;JZ	short DoGetExt
 13862                                  	;JMP	short SkipOp
 13863                                  	; 16/12/2022
 13864 00001CEE 7572                    	jnz	short SkipOp
 13865                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13866                                  	;JZ	short DoGetExt
 13867                                  	;JMP	short SkipOp
 13868                                  DoGetExt:
 13869 00001CF0 E8B6FE                  	call	SFTFromFCB		;	if (!SFTFromFCB (SFT,FCB))
 13870 00001CF3 730F                    	JNC	short ContinueOp
 13871                                  FCBDeath:
 13872 00001CF5 E85EE9                  	call	FCB_RET_ERR		; signal error, map for extended
 13873                                  	;mov	word [bp-19],0
 13874 00001CF8 C746ED0000              	MOV	cRecRes,0		; no bytes transferred
 13875                                  	;mov	byte [bp-1],1
 13876 00001CFD C646FF01                	MOV	FCBErr,FEOF		;	    return FTRIM;
 13877 00001D01 E9EB00                  	JMP	FCBSave 		; bam!
 13878                                  ContinueOp:
 13879                                  	; 23/01/2024
 13880                                  	; (PCDOS 7.1 IBMDOS.COM)
 13881                                  	;
 13882                                  	;;mov	ax,[si+10h]
 13883                                  	;MOV	AX,[SI+SYS_FCB.FILSIZ]
 13884                                  	;;mov	[es:di+11h],ax
 13885                                  	;MOV	[ES:DI+SF_ENTRY.sf_size],AX
 13886                                  	;;mov	ax,[si+12h]
 13887                                  	;MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 13888                                  	;;mov	[es:di+13h],ax
 13889                                  	;MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 13890                                  	;;;
 13891 00001D04 1E                      	push	ds
 13892 00001D05 C54410                  	lds	ax,[si+SYS_FCB.FILSIZ]
 13893 00001D08 26894511                	mov	[es:di+SF_ENTRY.sf_size],ax
 13894 00001D0C 268C5D13                	mov	[es:di+SF_ENTRY.sf_size+2],ds
 13895 00001D10 C546F3                  	lds	ax,[bPos] ; lds ax,[bp-13]
 13896 00001D13 8CDA                    	mov	dx,ds
 13897 00001D15 1F                      	pop	ds
 13898                                  	;;;
 13899                                  	;;mov	ax,[bp-13]
 13900                                  	;MOV	AX,bPosL
 13901                                  	;;mov	dx,[bp-11]
 13902                                  	;MOV	DX,bPosH
 13903                                  
 13904                                  	;mov	[es:di+15h],ax
 13905 00001D16 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 13906                                  	;xchg	dx,[es:di+17h]
 13907 00001D1A 26875517                	XCHG	[ES:DI+SF_ENTRY.sf_position+2],DX
 13908 00001D1E 52                      	PUSH	DX			; save away Open age.
 13909                                  	;mov	cx,[bp-15]
 13910 00001D1F 8B4EF1                  	MOV	CX,cByte		;	cResult =
 13911                                  
 13912                                  ;hkn; DOS_Read is in DOSCODE
 13913 00001D22 BF[4232]                	MOV	DI,DOS_READ		;	    *(OP&FCBRead ? DOS_Read
 13914                                  	;test	byte [bp-20],4
 13915 00001D25 F646EC04                	TEST	FCBOp,FCBREAD		;		 : DOS_Write)(cRec);
 13916 00001D29 7503                    	JNZ	short DoContext
 13917                                  
 13918                                  ;hkn; DOS_Write is in DOSCODE
 13919 00001D2B BF[5534]                	MOV	DI,DOS_WRITE
 13920                                  DoContext:
 13921 00001D2E 55                      	push	bp
 13922 00001D2F 1E                      	push	ds
 13923 00001D30 56                      	push	si
 13924                                  
 13925                                  ;hkn; SS is DOSDATA
 13926 00001D31 16                      	push	ss
 13927 00001D32 1F                      	pop	ds
 13928                                  
 13929                                  ;; Fix for disk full
 13930 00001D33 FFD7                    	CALL	DI	; DOS_READ or DOS_WRITE
 13931                                  	
 13932 00001D35 5E                      	pop	si
 13933 00001D36 1F                      	pop	ds
 13934 00001D37 5D                      	pop	bp
 13935 00001D38 72BB                    	JC	short FCBDeath
 13936                                  	
 13937 00001D3A 36803E[0B06]00          	CMP	BYTE [SS:DISK_FULL],0	; treat disk full as error
 13938 00001D40 740A                    	JZ	short NODSKFULL
 13939 00001D42 36C606[0B06]00          	MOV	BYTE [SS:DISK_FULL],0	; clear the flag
 13940                                  
 13941                                  	; (MSDOS 5.0-6.22 MSDOS.SYS) ; 23/01/2024
 13942                                  	;mov	byte [bp-1],1 
 13943 00001D48 C646FF01                	MOV	FCBErr,FEOF		; set disk full flag
 13944                                  
 13945                                  	; 23/01/2024
 13946                                  	; (PCDOS 7.1 IBMDOS.COM)
 13947                                  	;;mov	byte [bp-1],1 
 13948                                  	;MOV	FCBErr,FEOF		; set disk full flag
 13949                                  
 13950                                  NODSKFULL:
 13951                                  ;; Fix for disk full
 13952                                  	;mov	[bp-17],cx
 13953 00001D4C 894EEF                  	MOV	cResult,CX
 13954 00001D4F E827FB                  	call	SaveFCBInfo		;	SaveFCBInfo (FCB);
 13955                                  	;pop	word [es:di+17h]	
 13956 00001D52 268F4517                	POP	WORD [ES:DI+SF_ENTRY.sf_position+2] ; restore open age
 13957                                  			       ; (sf_OpenAge = SF_ENTRY.sf_position+2)
 13958                                  
 13959                                  	; 23/01/2024
 13960                                  	; (PCDOS 7.1 IBMDOS.COM)
 13961                                  	;
 13962                                  	;;mov	ax,[es:di+11h]
 13963                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 13964                                  	;;mov	[si+10h],ax
 13965                                  	;MOV	[SI+SYS_FCB.FILSIZ],AX
 13966                                  	;;mov	ax,[es:di+13h]
 13967                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 13968                                  	;;mov	[si+12h],ax
 13969                                  	;MOV	[SI+SYS_FCB.FILSIZ+2],AX
 13970                                  	;;;
 13971 00001D56 06                      	push	es
 13972 00001D57 26C44511                	les	ax,[es:di+SF_ENTRY.sf_size]
 13973 00001D5B 894410                  	mov	[si+SYS_FCB.FILSIZ],ax
 13974 00001D5E 8C4412                  	mov	[si+SYS_FCB.FILSIZ+2],es
 13975 00001D61 07                      	pop	es
 13976                                  	;;;
 13977                                  					;	}
 13978                                  SkipOp:
 13979                                  	;mov	ax,[bp-17]
 13980 00001D62 8B46EF                  	MOV	AX,cResult		;   cRecRes = cResult / RecSize;
 13981 00001D65 31D2                    	XOR	DX,DX
 13982                                  	;div	word [bp-9]
 13983 00001D67 F776F7                  	DIV	RecSize
 13984                                  	;mov	[bp-19],ax
 13985 00001D6A 8946ED                  	MOV	cRecRes,AX
 13986                                  	;add	[bp-7],ax
 13987 00001D6D 0146F9                  	ADD	RecPosL,AX		;   RecPos += cRecResult;
 13988                                  	;adc	word [bp-5],0
 13989 00001D70 8356FB00                	ADC	RecPosH,0
 13990                                  
 13991                                  ; If we have not gotten the expected number of records, we signal an EOF
 13992                                  ; condition. On input, this is EOF. On output this is usually disk full.
 13993                                  ; BUT... Under 2.0 and before, all device output IGNORED this condition. So
 13994                                  ; do we.
 13995                                  
 13996                                  	;cmp	ax,[bp-3]
 13997 00001D74 3B46FD                  	CMP	AX,cRec 		;   if (cRecRes <> cRec)
 13998 00001D77 7411                    	JZ	short TryBlank
 13999                                  	;test	byte [bp-20],4
 14000 00001D79 F646EC04                	TEST	FCBOp,FCBREAD		;	if (OP&FCBRead || !DEVICE)
 14001 00001D7D 7507                    	JNZ	short SetEOF
 14002                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14003                                  	; MSDOS 3.3
 14004                                  	;;test	word [es:di+5],80h
 14005                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 14006                                  	;JNZ	short TryBlank
 14007                                  	; MSDOS 5.0 & MSDOS 6.0
 14008                                  	;test	byte [es:di+5],80h
 14009 00001D7F 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 14010 00001D84 7504                    	jnz	short TryBlank
 14011                                  
 14012                                  SetEOF:
 14013                                  	;mov	byte [bp-1],1
 14014 00001D86 C646FF01                	MOV	FCBErr,FEOF		;	FCBErr = FEOF;
 14015                                  TryBlank:				;
 14016 00001D8A 09D2                    	OR	DX,DX			;   if (cResult%RecSize <> 0) {
 14017 00001D8C 7426                    	JZ	short SetExt
 14018                                  	;add	word [bp-7],1
 14019 00001D8E 8346F901                	ADD	RecPosL,1		;	RecPos++;
 14020                                  	;adc	word [bp-5],0
 14021 00001D92 8356FB00                	ADC	RecPosH,0
 14022                                  	;test	byte [bp-20],4
 14023 00001D96 F646EC04                	TEST	FCBOp,FCBREAD		;	if(OP&FCBRead) <> 0) {
 14024 00001D9A 7418                    	JZ	short SetExt
 14025                                  	;inc	word [bp-19]
 14026 00001D9C FF46ED                  	INC	cRecRes 		;	cRecRes++;
 14027                                  	;mov	byte [bp-1],3
 14028 00001D9F C646FF03                	MOV	FCBErr,FTRIM+FEOF	;	FCBErr = FTRIM | FEOF;
 14029                                  	;mov	cx,[bp-9]
 14030 00001DA3 8B4EF7                  	MOV	CX,RecSize		;	Blank (RecSize-cResult%RecSize,
 14031 00001DA6 29D1                    	SUB	CX,DX			;	       DMA+cResult);
 14032 00001DA8 30C0                    	XOR	AL,AL
 14033                                  ;hkn; 	SS override
 14034 00001DAA 36C43E[2C03]            	les     di,[ss:DMAADD]
 14035                                  	;add	di,[bp-17]
 14036 00001DAF 037EEF                  	ADD	DI,cResult
 14037 00001DB2 F3AA                    	REP	STOSB			;   }	}
 14038                                  SetExt:
 14039                                  	;mov	dx,[bp-5]
 14040 00001DB4 8B56FB                  	MOV	DX,RecPosH
 14041                                  	;mov	ax,[bp-7]
 14042 00001DB7 8B46F9                  	MOV	AX,RecPosL
 14043                                  	;test	byte [bp-20],2
 14044 00001DBA F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&Random) == 0 ||
 14045 00001DBE 7406                    	JZ	short DoSetExt
 14046                                  	;test	byte [bp-20],8
 14047 00001DC0 F646EC08                	TEST	FCBOp,BLOCK		;	(OP&BLOCK) <> 0)
 14048 00001DC4 7403                    	JZ	short TrySetRR
 14049                                  DoSetExt:
 14050 00001DC6 E857FE                  	call	SetExtent		;	SetExtent (RecPos, FCB);
 14051                                  TrySetRR:
 14052                                  	;test	byte [bp-20],8
 14053 00001DC9 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 14054 00001DCD 740F                    	JZ	short TryReturn
 14055                                  	;mov	[si+21h],ax
 14056 00001DCF 894421                  	MOV	[SI+SYS_FCB.RR],AX	;	FCB->RR = RecPos;
 14057                                  	;mov	[si+23h],dl
 14058 00001DD2 885423                  	MOV	[SI+SYS_FCB.RR+2],DL
 14059                                  	;cmp	word [si+0Eh],64
 14060 00001DD5 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 14061 00001DD9 7303                    	JAE	short TryReturn
 14062                                  	;mov	[si+24h],dh
 14063 00001DDB 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 14064                                  TryReturn: 
 14065                                  	;test	byte [bp-20],4
 14066 00001DDE F646EC04                	TEST	FCBOp,FCBREAD		;   if (!(FCBOP & FCBREAD)) {
 14067 00001DE2 750B                    	JNZ	short FCBSave
 14068 00001DE4 1E                      	push	ds			;	FCB->FDate = date;
 14069 00001DE5 E8FEEC                  	call	DATE16			;	FCB->FTime = time;
 14070 00001DE8 1F                      	pop	ds
 14071                                  	;mov	[si+14h],ax
 14072 00001DE9 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 14073                                  	;mov	[si+16h],dx
 14074 00001DEC 895416                  	MOV	[SI+SYS_FCB.FTIME],DX	;	}
 14075                                  FCBSave: 
 14076                                  	;test	byte [bp-20],8
 14077 00001DEF F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 14078 00001DF3 7409                    	jz	short DoReturn
 14079                                  	;mov	cx,[bp-19]
 14080 00001DF5 8B4EED                  	MOV	CX,cRecRes		;	user_CX = cRecRes;
 14081 00001DF8 E886E6                  	call    Get_User_Stack
 14082                                  	;mov	[si+4],cx
 14083 00001DFB 894C04                  	MOV	[SI+user_env.user_CX],CX
 14084                                  DoReturn:
 14085                                  	;mov	al,[bp-1]
 14086 00001DFE 8A46FF                  	MOV	AL,FCBErr		;   return (FCBERR);
 14087                                  	;Leave	
 14088 00001E01 89EC                    	mov     sp,bp
 14089 00001E03 5D                      	pop     bp
 14090 00001E04 C3                      	retn
 14091                                  
 14092                                  ; 22/07/2018 - Retro DOS v3.0
 14093                                  
 14094                                  ;Break <$FCB_Open - open an old-style FCB>
 14095                                  ;---------------------------------------------------------------------------
 14096                                  ;
 14097                                  ;   $FCB_Open - CPM compatability file open. The user has formatted an FCB
 14098                                  ;	for us and asked to have the rest filled in.
 14099                                  ;
 14100                                  ;   Inputs:	DS:DX point to an unopenned FCB
 14101                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 14102                                  ;		FCB has the following fields filled in:
 14103                                  ;		    Time/Date Extent/NR Size
 14104                                  ;---------------------------------------------------------------------------
 14105                                  
 14106                                  _$FCB_OPEN:			; System call 15
 14107                                  
 14108 00001E05 B80200                  	MOV	AX,SHARING_COMPAT+open_for_both
 14109                                  
 14110                                  ;hkn; DOS_Open is in DOSCODE
 14111 00001E08 B9[F82A]                	MOV	CX,DOS_OPEN
 14112                                  
 14113                                  ; The following is common code for Creation and openning of FCBs. AX is
 14114                                  ; either attributes (for create) or open mode (for open)... DS:DX points to
 14115                                  ; the FCB
 14116                                  
 14117                                  DoAccess:
 14118 00001E0B 1E                      	push	ds
 14119 00001E0C 52                      	push	dx
 14120 00001E0D 51                      	push	cx
 14121 00001E0E 50                      	push	ax			; save FCB pointer away
 14122                                  
 14123                                  ;hkn; 	OpenBuf is in DOSDATA
 14124 00001E0F BF[BE03]                	MOV	DI,OPENBUF
 14125 00001E12 E8504C                  	call	TransFCB		; crunch the fcb
 14126 00001E15 58                      	pop	ax
 14127 00001E16 59                      	pop	cx
 14128 00001E17 5A                      	pop	dx
 14129 00001E18 1F                      	pop	ds			; get fcb
 14130 00001E19 7303                    	JNC	short FindFCB		; everything seems ok
 14131                                  FCBOpenErr:
 14132                                  	; AL has error code
 14133 00001E1B E938E8                  	jmp	FCB_RET_ERR
 14134                                  FindFCB:
 14135 00001E1E E819FE                  	call	GetExtended		; DS:SI will point to FCB
 14136                                  
 14137                                  	; 17/05/2019 - Retro DOS v4.0
 14138                                  
 14139                                  	; MSDOS 3.3
 14140                                  	;call	LRUFCB
 14141                                  	;jc	short HardMessage
 14142                                  
 14143                                  	; MSDOS 6.0
 14144 00001E21 50                      	push	ax
 14145 00001E22 B001                    	mov	al,1			;indicate Open/Create operation
 14146 00001E24 E820FB                  	call	LRUFCB			; get a sft entry (no error)
 14147 00001E27 58                      	pop	ax
 14148 00001E28 722A                    	jc	short HardMessage
 14149                                  	
 14150                                  	;mov	word [es:di+2],8000h
 14151 00001E2A 26C745020080            	mov	word [es:di+SF_ENTRY.sf_mode],sf_isFCB
 14152 00001E30 1E                      	push	ds
 14153 00001E31 56                      	push	si	
 14154 00001E32 53                      	push	bx			; save fcb pointer
 14155 00001E33 89CE                    	MOV	SI,CX
 14156                                  
 14157                                  ;hkn; SS is DOSDATA
 14158 00001E35 16                      	push	ss
 14159 00001E36 1F                      	pop	ds			    ; let DOS_Open see variables
 14160 00001E37 FFD6                    	CALL	SI ; DOS_OPEN or DOS_CREATE ; go open the file
 14161 00001E39 5B                      	pop	bx
 14162 00001E3A 5E                      	pop	si
 14163 00001E3B 1F                      	pop	ds			; get fcb
 14164                                  
 14165                                  ;hkn; SS override
 14166 00001E3C 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; get sf pointer
 14167 00001E41 7318                    	JNC	short FCBOK		; operation succeeded
 14168                                  failopen:
 14169 00001E43 50                      	PUSH	AX
 14170 00001E44 B052                    	MOV	AL,"R"	; 52h		; clear out field (free sft)
 14171 00001E46 E8DDFC                  	call	BlastSFT
 14172 00001E49 58                      	POP	AX
 14173                                  	;cmp	ax,4
 14174 00001E4A 83F804                  	CMP	AX,error_too_many_open_files
 14175 00001E4D 7405                    	JZ	short HardMessage
 14176                                  	;cmp	ax,24h
 14177 00001E4F 83F824                  	CMP	AX,error_sharing_buffer_exceeded
 14178 00001E52 7505                    	jnz	short DeadFCB
 14179                                  HardMessage:
 14180 00001E54 50                      	PUSH	AX
 14181 00001E55 E887FD                  	call	FCBHardErr
 14182 00001E58 58                      	POP	AX
 14183                                  DeadFCB:
 14184                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14185                                  	;jmp	FCB_RET_ERR
 14186 00001E59 EBC0                    	jmp	short FCBOpenErr
 14187                                  FCBOK:
 14188                                  	; MSDOS 6.0
 14189 00001E5B E8ECF3                  	call	IsSFTNet		;AN007;F.C. >32mb  Non Fat file?
 14190 00001E5E 750F                    	JNZ	short FCBOK2		;AN007;F.C. >32mb  yes
 14191 00001E60 E82E54                  	call	CheckShare		;AN000;F.C. >32mb  share around?
 14192 00001E63 750A                    	JNZ	short FCBOK2		;AN000;F.C. >32mb  yes
 14193                                  ;SR;
 14194                                  ; If we reach here, we know we have got a local SFT. Let's update the 
 14195                                  ; LocalSFT variable to reflect this.
 14196                                  
 14197 00001E65 36893E[4410]            	mov	[ss:LocalSFT],di
 14198 00001E6A 368C06[4610]            	mov	[ss:LocalSFT+2],es; Store the SFT address
 14199                                  ;;SR;
 14200                                  ;; The check below is not valid anymore since we regenerate for media > 32M.
 14201                                  ;;
 14202                                  ;;	CMP	WORD [ES:DI+SF_ENTRY.sf_dirsec+2],0 
 14203                                  ;;					       ;AN000;F.C. >32mb  if dirsec >32mb
 14204                                  ;;	JZ	short FCBOK2		       ;AN000;F.C. >32mb    then error
 14205                                  ;;	MOV	AX,error_sys_comp_not_loaded   ;AN000;F.C. >32mb
 14206                                  ;;	JMP	short failopen		       ;AN000;F.C. >32mb
 14207                                  
 14208                                  FCBOK2:
 14209                                  	; MSDOS 6.0 (& MSDOS 3.3)
 14210 00001E6F 26FF05                  	inc	word [es:di]
 14211                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] ; increment reference count
 14212 00001E72 E804FA                  	call	SaveFCBInfo
 14213                                  	; MSDOS 3.3
 14214                                  	;call	SetOpenAge
 14215                                  	; MSDOS 6.0 (& MSDOS 3.3)
 14216                                  	;test	word [es:di+5],80h
 14217                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 14218 00001E75 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device  ; 28/07/2019
 14219 00001E7A 7508                    	JNZ	short FCBNoDrive	; do not munge drive on devices
 14220 00001E7C 8A04                    	MOV	AL,[SI]			; get drive byte
 14221 00001E7E E86F4B                  	call	GETTHISDRV		; convert
 14222                                  	;INC	AL
 14223                                  	; 17/12/2022
 14224 00001E81 40                      	inc	ax
 14225 00001E82 8804                    	MOV	[SI],AL			; stash in good drive letter
 14226                                  
 14227                                  FCBNoDrive:
 14228                                  	;mov	word [si+0Eh],128
 14229 00001E84 C7440E8000              	MOV	word [SI+SYS_FCB.RECSIZ],80h ; stuff in default record size
 14230                                  
 14231                                  	; 23/01/2024
 14232                                  	; (PCDOS 7.1 IBMDOS.COM)
 14233                                  	;;;
 14234                                  	;;mov	ax,[es:di+0Dh]
 14235                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_time] ; set time
 14236                                  	;;mov	[si+16h],ax
 14237                                  	;MOV	[SI+SYS_FCB.FTIME],AX
 14238                                  	;;mov	ax,[es:di+0Fh]
 14239                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_date] ; set date
 14240                                  	;;mov	[si+14h],ax
 14241                                  	;MOV	[SI+SYS_FCB.FDATE],AX
 14242                                  	;;mov	ax,[es:di+11h]
 14243                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size] ; set sizes
 14244                                  	;;mov	[si+10h],ax
 14245                                  	;MOV	[SI+SYS_FCB.FILSIZ],AX
 14246                                  	;;mov	ax,[es:di+13h]
 14247                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 14248                                  	;;mov	[si+12h],ax
 14249                                  	;MOV	[SI+SYS_FCB.FILSIZ+2],AX
 14250                                  	;
 14251 00001E89 06                      	push	es
 14252                                  	;les	ax,[es:di+0Dh]
 14253 00001E8A 26C4450D                	les	ax,[es:di+SF_ENTRY.sf_time]
 14254                                  	;mov	[si+16h],ax
 14255 00001E8E 894416                  	mov	[si+SYS_FCB.FTIME],ax	; set time
 14256                                  	;mov	[si+14h],es
 14257 00001E91 8C4414                  	mov	[si+SYS_FCB.FDATE],es	; set date
 14258 00001E94 07                      	pop	es
 14259 00001E95 06                      	push	es
 14260                                  	;les	ax,[es:di+11h]
 14261 00001E96 26C44511                	les	ax,[es:di+SF_ENTRY.sf_size] ; set size
 14262                                  	;mov	[si+10h],ax
 14263 00001E9A 894410                  	mov	[si+SYS_FCB.FILSIZ],ax
 14264                                  	;mov	[si+12h],ax
 14265 00001E9D 8C4412                  	mov	[si+SYS_FCB.FILSIZ+2],es
 14266 00001EA0 07                      	pop	es
 14267                                  	;;;
 14268                                  	
 14269 00001EA1 31C0                    	XOR	AX,AX			; convenient zero
 14270                                  	;mov	[si+0Ch],ax
 14271 00001EA3 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; point to beginning of file
 14272                                  
 14273                                  ; We must scan the set of FCB SFTs for one that appears to match the current
 14274                                  ; one.	We cheat and use CheckFCB to match the FCBs.
 14275                                  
 14276                                  ;hkn; 	SS override
 14277 00001EA6 36C43E[4000]            	LES	DI,[SS:SFTFCB]		; get the pointer to head of the list
 14278                                  	;mov	ah,[es:di+4]
 14279 00001EAB 268A6504                	MOV	AH,[ES:DI+SFT.SFCount]	; get number of SFTs to scan
 14280                                  OpenScan:
 14281                                  	;cmp	al,[si+18h]
 14282 00001EAF 3A4418                  	CMP	AL,[SI+fcb_sfn]		; don't compare ourselves
 14283 00001EB2 7407                    	JZ	short SkipCheck
 14284 00001EB4 50                      	push	ax			; preserve count
 14285 00001EB5 E884FC                  	call	CheckFCB		; do they match
 14286 00001EB8 58                      	pop	ax			; get count back
 14287 00001EB9 7309                    	JNC	short OpenFound		; found a match!
 14288                                  SkipCheck:
 14289 00001EBB FEC0                    	INC	AL			; advance to next FCB
 14290 00001EBD 38E0                    	CMP	AL,AH			; table full?
 14291 00001EBF 75EE                    	JNZ	short OpenScan		; no, go for more
 14292                                  OpenDone:
 14293 00001EC1 30C0                    	xor	al,al			; return success
 14294 00001EC3 C3                      	retn
 14295                                  
 14296                                  ; The SFT at ES:DI is the one that is already in use for this FCB. We set the
 14297                                  ; FCB to use this one. We increment its ref count. We do NOT close it at all.
 14298                                  ; Consider:
 14299                                  ;
 14300                                  ;   open (foo)	delete (foo) open (bar)
 14301                                  ;
 14302                                  ; This causes us to recycle (potentially) bar through the same local SFT as
 14303                                  ; foo even though foo is no longer needed; this is due to the server closing
 14304                                  ; foo for us when we delete it. Unfortunately, we cannot see this closure.
 14305                                  ; If we were to CLOSE bar, the server would then close the only reference to
 14306                                  ; bar and subsequent I/O would be lost to the redirector.
 14307                                  ;
 14308                                  ; This gets solved by NOT closing the sft, but zeroing the ref count
 14309                                  ; (effectively freeing the SFT) and informing the sharer (if relevant) that
 14310                                  ; the SFT is no longer in use. Note that the SHARER MUST keep its ref counts
 14311                                  ; around. This will allow us to access the same file through multiple network
 14312                                  ; connections and NOT prematurely terminate when the ref count on one
 14313                                  ; connection goes to zero.
 14314                                  
 14315                                  OpenFound:
 14316                                  	;mov	[si+18h],al
 14317 00001EC4 884418                  	MOV	[SI+fcb_sfn],AL 	; assign with this
 14318 00001EC7 26FF05                  	inc	word [es:di]
 14319                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 14320                                  					; remember this new invocation
 14321                                  	; 24/01/2024
 14322 00001ECA 16                      	push	ss
 14323 00001ECB 1F                      	pop	ds
 14324                                  	
 14325                                  	;MOV	AX,[SS:FCBLRU]		; update LRU counts
 14326 00001ECC A1[1000]                	mov	ax,[FCBLRU] ; 24/01/2024
 14327                                  	;mov	[es:di+15h],ax
 14328 00001ECF 26894515                	MOV	[ES:DI+sf_LRU],AX
 14329                                  ;
 14330                                  ; We have an FCB sft that is now of no use. We release sharing info and then
 14331                                  ; blast it to prevent other reuse.
 14332                                  ;
 14333                                  	;push	ss
 14334                                  	;pop	ds
 14335                                  
 14336 00001ED3 C43E[9E05]              	LES	DI,[THISSFT]
 14337 00001ED7 26FF0D                  	dec	word [es:di]
 14338                                  	;DEC	word [ES:DI+SF_ENTRY.sf_ref_count]
 14339                                  					; free the newly allocated SFT
 14340 00001EDA E8EC53                  	call	ShareEnd
 14341 00001EDD B043                    	MOV	AL,'C'	 ; 43h
 14342 00001EDF E844FC                  	call	BlastSFT
 14343 00001EE2 EBDD                    	JMP	short OpenDone
 14344                                  
 14345                                  ;BREAK	<$FCB_Create - create a new directory entry>
 14346                                  ;----------------------------------------------------------------------------
 14347                                  ;
 14348                                  ;   $FCB_Create - CPM compatability file create. The user has formatted an
 14349                                  ;	FCB for us and asked to have the rest filled in.
 14350                                  ;
 14351                                  ;   Inputs:	DS:DX point to an unopenned FCB
 14352                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 14353                                  ;		FCB has the following fields filled in:
 14354                                  ;		    Time/Date Extent/NR Size
 14355                                  ;----------------------------------------------------------------------------
 14356                                  
 14357                                  _$FCB_CREATE:		; System call 22
 14358                                  
 14359                                  ;hkn; DOS_Create is in DOSCODE
 14360 00001EE4 B9[D229]                	MOV	CX,DOS_CREATE		; routine to call
 14361 00001EE7 31C0                    	XOR	AX,AX			; attributes to create
 14362 00001EE9 E84EFD                  	call	GetExtended		; get extended FCB
 14363 00001EEC 7403                    	JZ	short DoAccessJ		; not an extended FCB
 14364 00001EEE 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 14365                                  DoAccessJ:
 14366 00001EF1 E917FF                  	JMP	DoAccess		; do dirty work
 14367                                  
 14368                                  ;============================================================================
 14369                                  ; SEARCH.ASM, MSDOS 6.0, 1991
 14370                                  ;============================================================================
 14371                                  ; 22/07/2018 - Retro DOS v3.0
 14372                                  ; 17/05/2019 - Retro DOS v4.0
 14373                                  
 14374                                  ; DOSCODE:5DDFh (MSDOS 6.21, MSDOS.SYS)
 14375                                  
 14376                                  ; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14377                                  ; DOSCODE:5DCBh (MSDOS 5.0, MSDOS.SYS)
 14378                                  
 14379                                  ;**	Search.asm
 14380                                  ;----------------------------------------------------------------------------
 14381                                  ;	Directory search system calls.
 14382                                  ;	These will be passed direct text of the pathname from the user. 
 14383                                  ;	They will need to be passed through the macro expander prior to
 14384                                  ;	being sent through the low-level stuff. 
 14385                                  ;	I/O specs are defined in DISPATCH. The system calls are:
 14386                                  ;
 14387                                  ;	$Dir_Search_First	  written
 14388                                  ;	$Dir_Search_Next	  written
 14389                                  ;	$Find_First	  written
 14390                                  ;	$Find_Next		  written
 14391                                  ;	PackName		  written
 14392                                  ;
 14393                                  ;	Modification history:
 14394                                  ;
 14395                                  ;	  Created: ARR 4 April 1983
 14396                                  
 14397                                  ;----------------------------------------------------------------------------
 14398                                  ; Procedure Name : $DIR_SEARCH_FIRST
 14399                                  ;
 14400                                  ; Inputs:
 14401                                  ;	DS:DX Points to unopenned FCB
 14402                                  ; Function:
 14403                                  ;	Directory is searched for first matching entry and the directory
 14404                                  ;	entry is loaded at the disk transfer address
 14405                                  ; Returns:
 14406                                  ;	AL = -1 if no entries matched, otherwise 0
 14407                                  ;----------------------------------------------------------------------------
 14408                                  
 14409                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 2B88h
 14410                                  
 14411                                  	; 24/01/2024
 14412                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5DCBh
 14413                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5DDFh
 14414                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:647Bh
 14415                                  
 14416                                  _$DIR_SEARCH_FIRST:
 14417 00001EF4 368916[A605]            	MOV	[SS:THISFCB],DX
 14418 00001EF9 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14419 00001EFE 89D6                    	MOV	SI,DX
 14420 00001F00 803CFF                  	CMP	BYTE [SI],0FFH
 14421 00001F03 7503                    	JNZ	short NORMFCB4
 14422 00001F05 83C607                  	ADD	SI,7			; Point to drive select byte
 14423                                  NORMFCB4:
 14424 00001F08 FF34                    	push	word [SI]		; Save original drive byte for later
 14425                                  
 14426 00001F0A 16                      	push	ss
 14427 00001F0B 07                      	pop	es			; get es to address DOSGroup
 14428                                  
 14429 00001F0C BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14430 00001F0F E8534B                  	call	TransFCB		; convert the FCB, set SATTRIB EXTFCB
 14431 00001F12 7304                    	JNC	short SearchIt		; no error, go and look
 14432 00001F14 5B                      	pop	bx			; Clean stack
 14433                                  
 14434                                  ; Error code is in AX
 14435                                  
 14436                                  	; 09/11/2022
 14437                                  dcf_errj:
 14438 00001F15 E93EE7                  	jmp	FCB_RET_ERR		; error
 14439                                  
 14440                                  SearchIt:
 14441 00001F18 16                      	push	ss
 14442 00001F19 1F                      	pop	ds			; get ready for search
 14443                                  	;push	word [DMAADD]
 14444                                  	;push	word [DMAADD+2]
 14445                                  	; 24/01/2024
 14446 00001F1A C43E[2C03]              	les	di,[DMAADD]
 14447 00001F1E 57                      	push	di
 14448 00001F1F 06                      	push	es
 14449 00001F20 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14450 00001F26 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14451                                  	; MSDOS 3.3
 14452                                  	;call	DOS_SEARCH_FIRST
 14453                                  	; MSDOS 6.0
 14454 00001F2A E8930D                  	call	GET_FAST_SEARCH		; search
 14455 00001F2D 8F06[2E03]              	pop	word [DMAADD+2]
 14456 00001F31 8F06[2C03]              	pop	word [DMAADD]
 14457 00001F35 735C                    	JNC	short SearchSet		; no error, transfer info
 14458 00001F37 5B                      	pop	bx			; Clean stack
 14459                                  
 14460                                  ; Error code is in AX
 14461                                  
 14462                                  	; 09/11/2022
 14463                                  	;jmp	FCB_RET_ERR
 14464 00001F38 EBDB                    	jmp	short dcf_errj
 14465                                  
 14466                                  ;----------------------------------------------------------------------------
 14467                                  ;
 14468                                  ; Procedure Name : $DIR_SEARCH_NEXT
 14469                                  ;
 14470                                  ; Inputs:
 14471                                  ;	DS:DX points to unopenned FCB returned by $DIR_SEARCH_FIRST
 14472                                  ; Function:
 14473                                  ;	Directory is searched for the next matching entry and the directory
 14474                                  ;	entry is loaded at the disk transfer address
 14475                                  ; Returns:
 14476                                  ;	AL = -1 if no entries matched, otherwise 0
 14477                                  ;----------------------------------------------------------------------------
 14478                                  
 14479                                  	; 24/01/2024
 14480                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5E5Fh
 14481                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5E73h
 14482                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:6517h
 14483                                  
 14484                                  _$DIR_SEARCH_NEXT:
 14485 00001F3A 368916[A605]            	MOV	[SS:THISFCB],DX
 14486 00001F3F 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14487 00001F44 36C606[6D05]00          	MOV	byte [SS:SATTRIB],0
 14488 00001F4A 36C606[6C05]00          	MOV	byte [SS:EXTFCB],0
 14489                                  
 14490 00001F50 16                      	push	ss
 14491 00001F51 07                      	pop	es
 14492                                  
 14493 00001F52 BF[BE04]                	MOV	DI,SEARCHBUF
 14494                                  
 14495 00001F55 89D6                    	MOV	SI,DX
 14496 00001F57 803CFF                  	CMP	BYTE [SI],0FFh
 14497 00001F5A 750D                    	JNZ	short NORMFCB6
 14498 00001F5C 83C606                  	ADD	SI,6
 14499 00001F5F AC                      	LODSB
 14500                                  
 14501 00001F60 36A2[6D05]              	MOV	[SS:SATTRIB],AL
 14502 00001F64 36FE0E[6C05]            	DEC	byte [SS:EXTFCB]
 14503                                  NORMFCB6:
 14504 00001F69 AC                      	LODSB				; Get original user drive byte
 14505 00001F6A 50                      	push	ax			; Put it on stack
 14506 00001F6B 8A4414                  	MOV	AL,[SI+20]		; Get correct search contin drive byte
 14507 00001F6E AA                      	STOSB				; Put in correct place
 14508 00001F6F B90A00                  	MOV	CX,20/2
 14509 00001F72 F3A5                    	REP	MOVSW			; Transfer in rest of search contin info
 14510                                  
 14511 00001F74 16                      	push	ss
 14512 00001F75 1F                      	pop	ds
 14513                                  
 14514                                  	;push	word [DMAADD]
 14515                                  	;push	word [DMAADD+2]
 14516                                  	; 24/01/2024
 14517 00001F76 C43E[2C03]              	les	di,[DMAADD]
 14518 00001F7A 57                      	push	di
 14519 00001F7B 06                      	push	es
 14520 00001F7C C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14521 00001F82 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14522 00001F86 E8330E                  	call	DOS_SEARCH_NEXT 	; Find it
 14523 00001F89 8F06[2E03]              	pop	word [DMAADD+2]
 14524 00001F8D 8F06[2C03]              	pop	word [DMAADD]
 14525 00001F91 724A                    	JC	short SearchNoMore
 14526                                  	; 24/01/2024
 14527                                  	;JMP	SearchSet		; Ok set return
 14528                                  
 14529                                  ;;;	; 24/01/2024
 14530                                  
 14531                                  ; The search was successful (or the search-next). We store the information
 14532                                  ; into the user's FCB for continuation.
 14533                                  
 14534                                  SearchSet:
 14535 00001F93 BE[BE04]                	MOV	SI,SEARCHBUF
 14536 00001F96 C43E[A605]              	LES	DI,[THISFCB]		; point to the FCB
 14537 00001F9A F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14538 00001F9F 7403                    	JZ	short NORMFCB1
 14539 00001FA1 83C707                  	ADD	DI,7			; Point past the extension
 14540                                  NORMFCB1:
 14541 00001FA4 5B                      	pop	bx			; Get original drive byte
 14542 00001FA5 08DB                    	OR	BL,BL
 14543 00001FA7 7506                    	JNZ	short SearchDrv
 14544 00001FA9 8A1E[3603]              	MOV	BL,[CURDRV]
 14545 00001FAD FEC3                    	INC	BL
 14546                                  SearchDrv:
 14547 00001FAF AC                      	LODSB				; Get correct search contin drive byte
 14548 00001FB0 86C3                    	XCHG	AL,BL			; Search byte to BL, user byte to AL
 14549 00001FB2 47                      	INC	DI
 14550                                  	;STOSB				; Store the correct "user" drive byte
 14551                                  					;  at the start of the search info
 14552 00001FB3 B90A00                  	MOV	CX,20/2
 14553 00001FB6 F3A5                    	REP	MOVSW			; Rest of search cont info, SI -> entry
 14554 00001FB8 86C3                    	XCHG	AL,BL			; User drive byte back to BL, search
 14555                                  					;   byte to AL
 14556 00001FBA AA                      	STOSB				; Search contin drive byte at end of
 14557                                  					;   contin info
 14558 00001FBB C43E[2C03]              	LES	DI,[DMAADD]
 14559 00001FBF F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14560 00001FC4 740D                    	JZ	short NORMFCB2
 14561 00001FC6 B0FF                    	MOV	AL,0FFh
 14562 00001FC8 AA                      	STOSB
 14563 00001FC9 FEC0                    	INC	AL
 14564                                  	;MOV	CX,5
 14565                                  	; 17/12/2022
 14566 00001FCB B105                    	mov	cl,5
 14567 00001FCD F3AA                    	REP	STOSB
 14568 00001FCF A0[6D05]                	MOV	AL,[SATTRIB]
 14569 00001FD2 AA                      	STOSB
 14570                                  NORMFCB2:
 14571 00001FD3 88D8                    	MOV	AL,BL			; User Drive byte
 14572 00001FD5 AA                      	STOSB
 14573                                  	;MOV	CX,16			; 32 / 2 words of dir entry
 14574                                  	; 17/12/2022
 14575 00001FD6 B110                    	mov	cl,16
 14576 00001FD8 F3A5                    	REP	MOVSW
 14577 00001FDA E976E6                  	jmp	FCB_RET_OK
 14578                                  ;;;
 14579                                  
 14580                                  SearchNoMore:
 14581 00001FDD C43E[A605]              	LES	DI,[THISFCB]
 14582 00001FE1 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14583 00001FE6 7403                    	JZ	short NORMFCB8
 14584 00001FE8 83C707                  	ADD	DI,7			; Point past the extension
 14585                                  NORMFCB8:
 14586 00001FEB 5B                      	pop	bx			; Get original drive byte
 14587 00001FEC 26881D                  	MOV	[ES:DI],BL		; Store the correct "user" drive byte
 14588                                  					;  at the right spot
 14589                                  ; error code is in AX
 14590                                  
 14591 00001FEF E964E6                  	jmp	FCB_RET_ERR
 14592                                  
 14593                                  ; 17/05/2019 - Retro DOS v4.0
 14594                                  
 14595                                  ; DOSCODE:5EE6h (MSDOS 6.21, MSDOS.SYS)
 14596                                  
 14597                                  ;---------------------------------------------------------------------------
 14598                                  ;
 14599                                  ;   Procedure Name : $FIND_FIRST
 14600                                  ; 
 14601                                  ;   Assembler usage:
 14602                                  ;	    MOV AH, FindFirst
 14603                                  ;	    LDS DX, name
 14604                                  ;	    MOV CX, attr
 14605                                  ;	    INT 21h
 14606                                  ;	; DMA address has datablock
 14607                                  ;
 14608                                  ;   Error Returns:
 14609                                  ;	    AX = error_path_not_found
 14610                                  ;	       = error_no_more_files
 14611                                  ;---------------------------------------------------------------------------
 14612                                  
 14613                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14614                                  	; DOSCODE:5ED2h (MSDOS 5.0, MSDOS.SYS)
 14615                                  
 14616                                  	; 24/01/2024
 14617                                  	; DOSCODE:5EE6h (MSDOS 6.22, MSDOS.SYS)
 14618                                  
 14619                                  _$FIND_FIRST:
 14620 00001FF2 89D6                    	MOV	SI,DX			; get name in appropriate place
 14621 00001FF4 36880E[6D05]            	MOV	[SS:SATTRIB],CL		; Search attribute to correct loc
 14622                                  
 14623 00001FF9 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14624                                  
 14625 00001FFC E8CC4A                  	call	TransPathSet		; convert the path
 14626 00001FFF 7305                    	JNC	short Find_it 		; no error, go and look
 14627                                  FindError:
 14628                                  	;mov	al,3
 14629 00002001 B003                    	mov	al, error_path_not_found ; error and map into one.
 14630                                  	; 09/11/2022
 14631                                  FF_errj:
 14632 00002003 E93AE6                  	jmp	SYS_RET_ERR
 14633                                  Find_it:
 14634 00002006 16                      	push	ss
 14635 00002007 1F                      	pop	ds
 14636                                  
 14637                                  	;push	word [DMAADD]
 14638                                  	;push	word [DMAADD+2]
 14639                                  	; 24/01/2024 (PCDOS 7.1 IBMDOS.COM)
 14640 00002008 C43E[2C03]              	les	di,[DMAADD]
 14641 0000200C 57                      	push	di
 14642 0000200D 06                      	push	es
 14643 0000200E C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14644 00002014 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14645                                  	; MSDOS 3.3
 14646                                  	;call	DOS_SEARCH_FIRST
 14647                                  	; MSDOS 6.0
 14648 00002018 E8A50C                  	call	GET_FAST_SEARCH 	; search
 14649 0000201B 8F06[2E03]              	pop	word [DMAADD+2]
 14650 0000201F 8F06[2C03]              	pop	word [DMAADD]
 14651                                  	
 14652                                  	; 16/12/2022
 14653                                  	;JNC	short FindSet 		; no error, transfer info
 14654 00002023 72DE                    	jc	short FF_errj	; jmp SYS_RET_ERR
 14655                                  	;
 14656                                  	;jmp	SYS_RET_ERR
 14657                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14658                                  ;FFF_errj:
 14659                                  	;jmp	short FF_errj	; jmp SYS_RET_ERR
 14660                                  
 14661                                  FindSet:
 14662 00002025 BE[BE04]                	MOV	SI,SEARCHBUF
 14663 00002028 C43E[2C03]              	LES	DI,[DMAADD]
 14664 0000202C B91500                  	MOV	CX,21
 14665 0000202F F3A4                    	REP	MOVSB
 14666 00002031 56                      	PUSH	SI			; Save pointer to start of entry
 14667                                  	;mov	al,[si+0Bh]
 14668 00002032 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 14669 00002035 AA                      	STOSB
 14670                                  	;add	si,16h ; 22
 14671 00002036 83C616                  	ADD	SI,dir_entry.dir_time
 14672 00002039 A5                      	MOVSW				; dir_time
 14673 0000203A A5                      	MOVSW				; dir_date
 14674 0000203B 46                      	INC	SI
 14675 0000203C 46                      	INC	SI			; Skip dir_first
 14676 0000203D A5                      	MOVSW				; dir_size (2 words)
 14677 0000203E A5                      	MOVSW
 14678 0000203F 5E                      	POP	SI			; Point back to dir_name
 14679 00002040 E83300                   	CALL	PackName
 14680 00002043 E9F1E5                  	jmp	SYS_RET_OK		; bye with no errors
 14681                                  
 14682                                  ;---------------------------------------------------------------------------
 14683                                  ;
 14684                                  ;   Procedure Name : $FIND_NEXT
 14685                                  ;
 14686                                  ;   Assembler usage:
 14687                                  ;	; dma points at area returned by find_first
 14688                                  ;	    MOV AH, findnext
 14689                                  ;	    INT 21h
 14690                                  ;	; next entry is at dma
 14691                                  ;
 14692                                  ;   Error Returns:
 14693                                  ;	    AX = error_no_more_files
 14694                                  ;---------------------------------------------------------------------------
 14695                                  
 14696                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14697                                  
 14698                                  	; 24/01/2024
 14699                                  	; DOSCODE:5F3Eh (MSDOS 6.22, MSDOS.SYS)
 14700                                  
 14701                                  _$FIND_NEXT:
 14702 00002046 16                      	push	ss
 14703 00002047 07                      	pop	es
 14704                                  
 14705 00002048 BF[BE04]                	MOV	DI,SEARCHBUF
 14706                                  
 14707 0000204B 36C536[2C03]            	LDS	SI,[SS:DMAADD]
 14708                                  
 14709 00002050 B91500                  	MOV	CX,21
 14710 00002053 F3A4                    	REP	MOVSB			; Put the search continuation info
 14711                                  					;  in the right place
 14712 00002055 16                      	push	ss
 14713 00002056 1F                      	pop	ds			; get ready for search
 14714                                  	
 14715                                  	;push	word [DMAADD]
 14716                                  	;push	word [DMAADD+2]
 14717                                  	; 24/01/2024
 14718 00002057 C43E[2C03]              	les	di,[DMAADD]
 14719 0000205B 57                      	push	di
 14720 0000205C 06                      	push	es
 14721 0000205D C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14722 00002063 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14723 00002067 E8520D                  	call	DOS_SEARCH_NEXT 	; Find it
 14724 0000206A 8F06[2E03]              	pop	word [DMAADD+2]
 14725 0000206E 8F06[2C03]              	pop	word [DMAADD]
 14726 00002072 73B1                    	JNC	short FindSet 		; No error, set info
 14727                                  	;jmp	SYS_RET_ERR
 14728                                  	; 16/12/2022
 14729 00002074 EB8D                    	jmp	short FF_errj	; jmp SYS_RET_ERR
 14730                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14731                                  	;jmp	short FFF_errj	; jmp SYS_RET_ERR
 14732                                  
 14733                                  ;---------------------------------------------------------------------------
 14734                                  ;**	PackName - Convert file names from FCB to ASCIZ format.
 14735                                  ;
 14736                                  ;	PackName transfers a file name from DS:SI to ES:DI and converts it to
 14737                                  ;	the ASCIZ format.
 14738                                  ;
 14739                                  ;	ENTRY	(DS:SI) = 11 character FCB or dir entry name
 14740                                  ;		(ES:DI) = destination area (13 bytes)
 14741                                  ;	EXIT	(ds:SI) and (es:DI) advanced
 14742                                  ;	USES	al, CX, SI, DI, Flags  (BUGBUG - not verified - jgl)
 14743                                  ;---------------------------------------------------------------------------
 14744                                  
 14745                                  	; 25/01/2024 - Retro DOS v4.2
 14746                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5F70h
 14747                                  
 14748                                  PackName:
 14749                                  ;	Move over 8 characters to cover the name component, then trim it's
 14750                                  ;	trailing blanks.
 14751                                  
 14752                                  	;MOV	CX,8			; Pack the name
 14753                                  	;REP	MOVSB			; Move all of it
 14754                                  	; 25/01/2024
 14755 00002076 B90400                  	mov	cx,4
 14756 00002079 F3A5                    	rep	movsw
 14757                                  main_kill_tail:
 14758 0000207B 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14759 00002080 7507                    	JNZ	short find_check_dot
 14760 00002082 4F                      	DEC	DI			; Back up over trailing space
 14761 00002083 41                      	INC	CX
 14762 00002084 83F908                  	CMP	CX,8
 14763 00002087 72F2                    	JB	short main_kill_tail
 14764                                  find_check_dot:
 14765                                  	;CMP	WORD [SI],(" " << 8) | " "
 14766 00002089 813C2020                	cmp     word [si],2020h 
 14767 0000208D 7506                    	JNZ	short got_ext 		; Some chars in extension
 14768 0000208F 807C0220                	CMP	BYTE [SI+2]," "
 14769 00002093 740F                    	JZ	short find_done		; No extension
 14770                                  got_ext:
 14771 00002095 B02E                    	MOV	AL,"."	; 2Eh
 14772 00002097 AA                      	STOSB
 14773                                  	;MOV	CX,3
 14774                                  	;; 18/12/2022
 14775                                  	;;mov	cl,3
 14776                                  	;;REP	MOVSB
 14777                                  	;movsb
 14778                                  	;movsb
 14779                                  	;movsb
 14780                                  	; 25/01/2024
 14781 00002098 A5                      	movsw
 14782 00002099 A4                      	movsb
 14783                                  ext_kill_tail:
 14784 0000209A 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14785 0000209F 7503                    	JNZ	short find_done
 14786 000020A1 4F                      	DEC	DI			; Back up over trailing space
 14787 000020A2 EBF6                    	JMP	short ext_kill_tail
 14788                                  find_done:
 14789 000020A4 31C0                    	XOR	AX,AX
 14790 000020A6 AA                      	STOSB				; NUL terminate
 14791 000020A7 C3                      	retn
 14792                                  
 14793                                  ;---------------------------------------------------------------------------
 14794                                  
 14795                                  ; 24/01/2024
 14796                                  %if 0
 14797                                  	; 17/05/2019 - Retro DOS v4.0
 14798                                  GET_FAST_SEARCH:
 14799                                  	; 22/07/2018
 14800                                  	; MSDOS 6.0
 14801                                  	; 17/12/2022
 14802                                  	OR	byte [ss:DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)  ; 04h
 14803                                  	;OR	word [ss:DOS34_FLAG],SEARCH_FASTOPEN  ; 400h
 14804                                  					;FO.trigger fastopen ;AN000;
 14805                                  	;call	DOS_SEARCH_FIRST
 14806                                  	;retn
 14807                                  	; 17/12/2022
 14808                                  	jmp	DOS_SEARCH_FIRST
 14809                                  %endif
 14810                                  
 14811                                  ;============================================================================
 14812                                  ; PATH.ASM, MSDOS 6.0, 1991
 14813                                  ;============================================================================
 14814                                  ; 06/08/2018 - Retro DOS v3.0
 14815                                  ; 17/05/2019 - Retro DOS v4.0
 14816                                  
 14817                                  ; DOSCODE:5FB0h (MSDOS 6.21, MSDOS.SYS)
 14818                                  
 14819                                  ;**	Directory related system calls. These will be passed direct text of the
 14820                                  ;	pathname from the user. They will need to be passed through the macro
 14821                                  ;	expander prior to being sent through the low-level stuff. I/O specs are
 14822                                  ;	defined in DISPATCH. The system calls are:
 14823                                  ;
 14824                                  ;	$CURRENT_DIR  Written
 14825                                  ;	$RMDIR	  Written
 14826                                  ;	$CHDIR	  Written
 14827                                  ;	$MKDIR	  Written
 14828                                  ;
 14829                                  ;
 14830                                  ;	Modification history:
 14831                                  ;
 14832                                  ;	    Created: ARR 4 April 1983
 14833                                  ;		 MZ 10 May 1983     CurrentDir implemented
 14834                                  ;		 MZ 11 May 1983     RmDir, ChDir, MkDir implemented
 14835                                  ;		 EE 19 Oct 1983     RmDir no longer allows you to delete a
 14836                                  ;				    current directory.
 14837                                  ;		 MZ 19 Jan 1983     Brain damaged applications rely on success
 14838                                  
 14839                                  ;	I_Need	ThisCDS,DWORD		; pointer to Current CDS
 14840                                  ;	I_Need	WFP_Start,WORD		; pointer to beginning of directory text
 14841                                  ;	I_Need	Curr_Dir_End,WORD	; offset to end of directory part
 14842                                  ;	I_Need	OpenBuf,128		; temp spot for translated name
 14843                                  ;	I_need	fSplice,BYTE		; TRUE => do splice
 14844                                  ;	I_Need	NoSetDir,BYTE		; TRUE => no exact match on splice
 14845                                  ;	I_Need	cMeta,BYTE
 14846                                  ;	I_Need	DrvErr,BYTE					;AN000;
 14847                                  
 14848                                  ;BREAK <$CURRENT_DIR - dump the current directory into user space>
 14849                                  ;----------------------------------------------------------------------------
 14850                                  ;
 14851                                  ;   Procedure Name : $CURRENT_DIR
 14852                                  ;
 14853                                  ;   Assembler usage:
 14854                                  ;		LDS	SI,area
 14855                                  ;		MOV	DL,drive
 14856                                  ;		INT	21h
 14857                                  ;	    ; DS:SI is a pointer to 64 byte area that contains drive
 14858                                  ;	    ; current directory.
 14859                                  ;   Error returns:
 14860                                  ;	    AX = error_invalid_drive
 14861                                  ;
 14862                                  ;----------------------------------------------------------------------------
 14863                                  
 14864                                  	; 06/08/2018 - Retro DOS v3.0
 14865                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 2D4Eh
 14866                                  
 14867                                  	; 25/01/2024 - Retro DOS v4.2
 14868                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5F9Ch
 14869                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5FB0h
 14870                                  	; Windows ME IO.SYS - BIOSCODE:6393h
 14871                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:6664h
 14872                                  
 14873                                  _$CURRENT_DIR:
 14874 000020A8 E848F2                  	call	ECritDisk
 14875 000020AB 88D0                    	MOV	AL,DL			; get drive number (0=def, 1=A)
 14876 000020AD E82449                  	call	GetVisDrv		; grab it
 14877 000020B0 7310                    	JNC	short CurrentValidate 	; no error -> go and validate dir
 14878                                  CurdirErr:
 14879 000020B2 E859F2                  	call	LCritDisk
 14880                                  
 14881                                  	; MSDOS 3.3
 14882                                  	;mov	al,0Fh
 14883                                  	
 14884                                  	; MSDOS 6.0
 14885 000020B5 1E                      	push	ds
 14886 000020B6 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 14887 000020BB A0[1006]                	mov	al,[DrvErr]		;IFS.			;AN000;
 14888 000020BE 1F                      	pop	ds
 14889                                  
 14890                                  curdir_errj:
 14891 000020BF E97EE5                  	jmp	SYS_RET_ERR		;IFS. make noise	;AN000;
 14892                                  
 14893                                  CurrentValidate:
 14894 000020C2 1E                      	push	ds			; save destination
 14895 000020C3 56                      	push	si
 14896                                  	
 14897                                  	;LDS	SI,[CS:THISCDS] ; MSDOS 3.3
 14898                                  	
 14899                                  	; MSDOS 6.0
 14900 000020C4 2E8E1E[0700]            	mov     ds,[cs:DosDSeg]
 14901                                  	; 25/01/2024 (PCDOS 7.1 IBMDOS.COM)
 14902 000020C9 C606[4C03]00            	mov	byte [NoSetDir],0 ; *
 14903                                  	
 14904                                  	; 25/01/2024
 14905                                  	;lds     si,[THISCDS]
 14906                                  
 14907                                  ; 16/12/2022
 14908                                  %if 0
 14909                                  	; 09/11/2022 (following test instruction is nonsense!)
 14910                                  	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 14911                                  
 14912                                  	;test	word [si+43h],8000h
 14913                                  	TEST	word [SI+curdir.flags],curdir_isnet
 14914                                  	;jnz	short $+2  ; 09/11/2022	
 14915                                  	jnz	short DoCheck
 14916                                  %endif
 14917                                  
 14918                                  ; Random optimization nuked due to some utilities using GetCurrentDir to do
 14919                                  ; media check.
 14920                                  ;	CMP	word [SI+curdir.ID],0
 14921                                  ;	JZ	short GetDst
 14922                                  DoCheck:
 14923                                  	;MOV	byte [cs:NoSetDir],0	; interested only in contents
 14924                                  
 14925                                  	; 25/01/2024
 14926                                  	; MSDOS 6.0
 14927                                  	;push	ds
 14928                                  	;mov	ds,[cs:DosDSeg]
 14929                                  	;mov	byte [NoSetDir],0 ; *
 14930                                  	;pop	ds
 14931                                  
 14932 000020CE BF[BE03]                	MOV	DI,OPENBUF
 14933 000020D1 E8D820                  	call	ValidateCDS		; output is ES:DI -> CDS
 14934                                  
 14935 000020D4 06                      	push	es	 		; swap source and destination
 14936 000020D5 57                      	push	di
 14937 000020D6 5E                      	pop	si
 14938 000020D7 1F                      	pop	ds
 14939                                  GetDst:
 14940 000020D8 5F                      	pop	di
 14941 000020D9 07                      	pop	es			; get real destination
 14942 000020DA 72D6                    	JC	short CurdirErr
 14943                                  	;ADD	SI,curdir.text ; add si,0 ; 09/08/2018
 14944                                  	;
 14945                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14946                                  	; DOSCODE:5FE2h (MSDOS 5.0, MSDOS.SYS)
 14947                                  	; 16/12/2022
 14948                                  	;add	si,0  ; add si,curdir.text
 14949                                  	;
 14950                                  	;add	si,[si+4Fh] ; 17/05/2019
 14951 000020DC 03744F                  	ADD	SI,[SI+curdir.end]
 14952 000020DF 803C5C                  	CMP	BYTE [SI],'\'	; 5Ch	; root or subdirs present?
 14953 000020E2 7501                    	JNZ	short CurrentCopy
 14954 000020E4 46                      	INC	SI
 14955                                  CurrentCopy:
 14956                                  ;	call	FStrCpy
 14957                                  ;; 10/29/86 E5 char
 14958 000020E5 50                      	PUSH	AX
 14959 000020E6 AC                      	LODSB				; get char
 14960 000020E7 08C0                    	OR	AL,AL
 14961 000020E9 7413                    	JZ	short FOK
 14962 000020EB 3C05                    	CMP	AL,05H
 14963 000020ED 740D                    	JZ	short FCHANGE
 14964 000020EF EB01                    	JMP	short FFF
 14965                                  FCPYNEXT:
 14966 000020F1 AC                      	LODSB				; get char
 14967                                  FFF:
 14968 000020F2 3C5C                    	CMP	AL,'\'			; beginning of directory
 14969 000020F4 7508                    	JNZ	short FOK		; no
 14970 000020F6 AA                      	STOSB				; put into user's buffer
 14971 000020F7 AC                      	LODSB				; 1st char of dir is 05?
 14972 000020F8 3C05                    	CMP	AL,05H
 14973 000020FA 7502                    	JNZ	short FOK		; no
 14974                                  FCHANGE:
 14975 000020FC B0E5                    	MOV	AL,0E5H			; make it E5
 14976                                  FOK:
 14977 000020FE AA                      	STOSB				; put into user's buffer
 14978 000020FF 08C0                    	OR	AL,AL			; final char
 14979 00002101 75EE                    	JNZ	short FCPYNEXT		; no
 14980 00002103 58                      	POP	AX
 14981                                  
 14982                                  ;; 10/29/86 E5 char
 14983 00002104 30C0                    	xor	AL,AL			; MZ 19 Jan 84
 14984 00002106 E805F2                  	call	LCritDisk
 14985 00002109 E92BE5                  	jmp	SYS_RET_OK		; no more, bye!
 14986                                  
 14987                                  ; 17/05/2019 - Retro DOS v4.0
 14988                                  
 14989                                  ; DOSCODE:6029h (MSDOS 6.21, MSDOS.SYS)
 14990                                  
 14991                                  ;BREAK <$RmDir -- Remove a directory>
 14992                                  ;----------------------------------------------------------------------------
 14993                                  ;
 14994                                  ; Procedure Name : $RmDir
 14995                                  ;
 14996                                  ; Inputs:
 14997                                  ;	DS:DX Points to asciz name
 14998                                  ; Function:
 14999                                  ;	Delete directory if empty
 15000                                  ; Returns:
 15001                                  ;	STD XENIX Return
 15002                                  ;	AX = error_path_not_found If path bad
 15003                                  ;	AX = error_access_denied If
 15004                                  ;		Directory not empty
 15005                                  ;		Path not directory
 15006                                  ;		Root directory specified
 15007                                  ;		Directory malformed (. and .. not first two entries)
 15008                                  ;		User tries to delete a current directory
 15009                                  ;	AX = error_current_directory
 15010                                  ;
 15011                                  ;----------------------------------------------------------------------------
 15012                                  
 15013                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15014                                  	; DOSCODE:6015h (MSDOS 5.0, MSDOS.SYS)
 15015                                  
 15016                                  _$RMDIR:
 15017 0000210C 52                      	push	dx			; Save ptr to name
 15018 0000210D 1E                      	push	ds
 15019 0000210E 89D6                    	mov	si,dx			; Load ptr into si
 15020 00002110 BF[BE03]                	mov	di,OPENBUF		; di = ptr to buf for trans name
 15021 00002113 57                      	push	di
 15022 00002114 E8BC49                  	call	TransPathNoSet		; Translate the name
 15023 00002117 5F                      	pop	di			; di = ptr to buf for trans name
 15024 00002118 7306                    	jnc	short rmlset		; If transpath succeeded, continue
 15025 0000211A 1F                      	pop	ds
 15026 0000211B 5A                      	pop	dx			; Restore the name
 15027                                  	;mov	al,3
 15028 0000211C B003                    	mov	al,error_path_not_found ; Otherwise, return an error
 15029                                  	; 16/12/2022
 15030                                  rmdir_errj: ; 10/08/2018
 15031                                  chdir_errj:
 15032 0000211E EB9F                    	jmp	short curdir_errj
 15033                                  	;jmp	SYS_RET_ERR
 15034                                  rmlset:
 15035 00002120 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	;   if (cMeta >= 0)
 15036 00002126 7512                    	Jnz	short rmerr		;	return (-1);
 15037 00002128 16                      	push	ss
 15038 00002129 07                      	pop	es
 15039 0000212A 30C0                    	xor	al,al			; al = 0 , ie drive a:
 15040                                  rmloop: 
 15041 0000212C E81649                  	call	GetCDSFromDrv		; Get curdir for drive in al
 15042 0000212F 720F                    	jc	short rmcont		; If error, exit loop & cont normally
 15043 00002131 E863F0                  	call	StrCmp			; Are the 2 paths the same?
 15044 00002134 7404                    	jz	short rmerr		; Yes, report error.
 15045 00002136 FEC0                    	inc	al			; No, inc al to next drive number
 15046 00002138 EBF2                    	jmp	short rmloop		; Go check next drive.
 15047                                  rmerr:
 15048 0000213A 1F                      	pop	ds
 15049 0000213B 5A                      	pop	dx			; Restore the name
 15050                                  	;mov	al,10h
 15051 0000213C B010                    	mov	al,error_current_directory ; error
 15052                                  	; 16/12/2022
 15053                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15054                                  ;chdir_errj:
 15055 0000213E EBDE                    	jmp	short rmdir_errj
 15056                                  rmcont:
 15057 00002140 1F                      	pop	ds
 15058 00002141 5A                      	pop	dx			; Restore the name
 15059 00002142 BE[6B31]                	MOV	SI,DOS_RMDIR
 15060 00002145 EB7C                    	JMP	DoDirCall
 15061                                  
 15062                                  ; 17/05/2019 - Retro DOS v4.0
 15063                                  
 15064                                  ; DOSCODE:6065h (MSDOS 6.21, MSDOS.SYS)
 15065                                  
 15066                                  ;BREAK <$ChDir -- Change current directory on a drive>
 15067                                  ;----------------------------------------------------------------------------
 15068                                  ;
 15069                                  ; $ChDir - Top-level change directory system call.  This call is responsible
 15070                                  ; for setting up the CDS for the specified drive appropriately.  There are
 15071                                  ; several cases to consider:
 15072                                  ;
 15073                                  ;   o	Local, simple CDS.  In this case, we take the input path and convert
 15074                                  ;	it into a WFP.	We verify the existance of this directory and then
 15075                                  ;	copy the WFP into the CDS and set up the ID field to point to the
 15076                                  ;	directory cluster.
 15077                                  ;   o	Net CDS.  We form the path from the root (including network prefix)
 15078                                  ;	and verify its existance (via DOS_Chdir).  If successful, we copy the
 15079                                  ;	WFP back into the CDS.
 15080                                  ;   o	SUBST'ed CDS.  This is no different than the local, simple CDS.
 15081                                  ;   o	JOIN'ed CDS.  This is trouble as there are two CDS's at work.  If we
 15082                                  ;	call TransPath, we will get the PHYSICAL CDS that the path refers to
 15083                                  ;	and the PHYSICAL WFP that the input path refers to.  This is perfectly
 15084                                  ;	good for the validation but not for currency.  We call TransPathNoSet
 15085                                  ;	to process the path but to return the logical CDS and the logical
 15086                                  ;	path.  We then copy the logical path into the logical CDS.
 15087                                  ;
 15088                                  ; Inputs:
 15089                                  ;	DS:DX Points to asciz name
 15090                                  ; Returns:
 15091                                  ;	STD XENIX Return
 15092                                  ;	AX = chdir_path_not_found if error
 15093                                  ;
 15094                                  ;----------------------------------------------------------------------------
 15095                                  
 15096                                  _$CHDIR:
 15097 00002147 BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 15098 0000214A 89D6                    	MOV	SI,DX			; get source
 15099 0000214C E87849                  	call	TransPath		; go munge the path and get real CDS
 15100 0000214F 7304                    	JNC	short ChDirCrack	; no errors, try path
 15101                                  ChDirErrP:
 15102                                  	;mov	al,3
 15103 00002151 B003                    	MOV	AL,error_path_not_found
 15104                                  ChDirErr:
 15105                                  	;jmp	SYS_RET_ERR 	; oops!
 15106                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15107 00002153 EBC9                    	jmp	short chdir_errj
 15108                                  
 15109                                  ChDirCrack:
 15110 00002155 803E[7A05]FF            	CMP	byte [CMETA],-1		; No meta chars allowed.
 15111 0000215A 75F5                    	JNZ	short ChDirErrP
 15112                                  
 15113                                  ; We cannot do a ChDir (yet) on a raw CDS. This is treated as a path not
 15114                                  ; found.
 15115                                  
 15116 0000215C C43E[A205]              	LES	DI,[THISCDS]
 15117 00002160 83FFFF                  	CMP	DI,-1			;   if (ThisCDS == NULL)
 15118 00002163 74EC                    	JZ	short ChDirErrP		;	error ();
 15119                                  
 15120                                  ; Find out if the directory exists.
 15121                                  
 15122 00002165 E8C00F                  	call	DOS_CHDIR
 15123                                  	;Jc	short ChDirErr
 15124                                  	; 16/12/2022
 15125 00002168 72B4                    	jc	short chdir_errj
 15126                                  ;
 15127                                  ; Get back CDS to see if a join as seen. Set the currency pointer (only if
 15128                                  ; not network). If one was seen, all we need to do is copy in the text
 15129                                  ;
 15130 0000216A C43E[A205]              	LES	DI,[THISCDS]
 15131                                  	;test	word [es:di+43h],2000h
 15132                                  	; 17/12/2022
 15133 0000216E 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 15134                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice
 15135 00002173 7425                    	JZ	short GotCDS
 15136                                  
 15137                                  ; The CDS was joined. Let's go back and grab the logical CDS.
 15138                                  
 15139 00002175 06                      	push	es	
 15140 00002176 57                      	push	di
 15141 00002177 51                      	push	cx			; save CDS and cluster...
 15142 00002178 E806E3                  	call	Get_User_Stack		; get original text
 15143                                  	
 15144                                  	;mov	di,[si+6]
 15145 0000217B 8B7C06                  	MOV	DI,[SI+user_env.user_DX]
 15146                                  	;mov	ds,[si+0Eh]
 15147 0000217E 8E5C0E                  	MOV	DS,[SI+user_env.user_DS]
 15148                                  	
 15149 00002181 BE[BE03]                	MOV	SI,OPENBUF		; spot for translated name
 15150 00002184 87F7                    	XCHG	SI,DI
 15151 00002186 30C0                    	XOR	AL,AL			; do no splicing
 15152 00002188 57                      	push	di
 15153 00002189 E84749                  	call	TransPathNoSet		; Munge path
 15154 0000218C 5E                      	pop	si
 15155                                  
 15156                                  ; There should NEVER be an error here.
 15157                                  
 15158                                  ;IF FALSE
 15159                                  ;	JNC SKipErr
 15160                                  ;	fmt <>,<>,<"$p: Internal CHDIR error\n">
 15161                                  ;SkipErr:
 15162                                  ;ENDIF
 15163 0000218D C43E[A205]              	LES	DI,[THISCDS]		; get new CDS
 15164                                  	;mov	word [es:di+49h],-1
 15165 00002191 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],-1
 15166                                  					; no valid cluster here...
 15167 00002197 59                      	pop	cx
 15168 00002198 5F                      	pop	di
 15169 00002199 07                      	pop	es
 15170                                  
 15171                                  ; ES:DI point to the physical CDS, CX is the ID (local only)
 15172                                  
 15173                                  GotCDS:
 15174                                  
 15175                                  ; wfp_start points to the text. See if it is long enough
 15176                                  
 15177                                  	; MSDOS 3.3
 15178                                  	;push	ss
 15179                                  	;pop	ds
 15180                                  	;mov	si,[WFP_START]
 15181                                  	;push	cx
 15182                                  	;call	DStrLen
 15183                                  	;cmp	cx,67 ; cmp cx,DIRSTRLEN
 15184                                  	;pop	cx
 15185                                  	;ja	short ChDirErrP
 15186                                  
 15187                                  	; MSDOS 6.0
 15188 0000219A E85000                  	CALL	Check_PathLen		;PTM.		;AN000;
 15189 0000219D 77B2                    	JA	short ChDirErrP
 15190                                  	; MSDOS 3.3 & MSDOS 6.0
 15191                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 15192                                  	; 17/12/2022
 15193 0000219F 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8
 15194 000021A4 7512                    	JNZ	short SkipRecency
 15195                                  	; MSDOS 6.0
 15196                                  	;test	word [es:di+43h],2000h
 15197                                  	; 17/12/2022
 15198 000021A6 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 15199                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice 
 15200                                  					;PTM. for Join and Subst ;AN000;
 15201 000021AB 7403                    	JZ	short setdirclus	;PTM.		;AN000;
 15202 000021AD B9FFFF                  	MOV	CX,-1			;PTM.		;AN000;
 15203                                  setdirclus:
 15204                                  	;mov	[es:di+49h],cx
 15205 000021B0 26894D49                	MOV	[ES:DI+curdir.ID],CX
 15206 000021B4 C43E[A205]              	LES	DI,[THISCDS]		; get logical CDS
 15207                                  SkipRecency:
 15208 000021B8 E80DF0                  	call	FStrCpy
 15209 000021BB 30C0                    	XOR	AL,AL
 15210                                  mkdir_ok:
 15211 000021BD E977E4                  	jmp	SYS_RET_OK
 15212                                  
 15213                                  ; 17/05/2019 - Retro DOS v4.0
 15214                                  
 15215                                  ; DOSCODE:60E1h (MSDOS 6.21, MSDOS.SYS)
 15216                                  
 15217                                  ;BREAK <$MkDir - Make a directory entry>
 15218                                  ;---------------------------------------------------------------------------
 15219                                  ;
 15220                                  ; Procedure Name : $MkDir
 15221                                  ; Inputs:
 15222                                  ;	DS:DX Points to asciz name
 15223                                  ; Function:
 15224                                  ;	Make a new directory
 15225                                  ; Returns:
 15226                                  ;	STD XENIX Return
 15227                                  ;	AX = mkdir_path_not_found if path bad
 15228                                  ;	AX = mkdir_access_denied  If
 15229                                  ;		Directory cannot be created
 15230                                  ;		Node already exists
 15231                                  ;		Device name given
 15232                                  ;		Disk or directory(root) full
 15233                                  ;---------------------------------------------------------------------------
 15234                                  
 15235                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15236                                  
 15237                                  _$MKDIR:
 15238 000021C0 BE[3B30]                	MOV	SI,DOS_MKDIR
 15239                                  DoDirCall:
 15240 000021C3 BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 15241                                  
 15242 000021C6 56                      	push	si
 15243 000021C7 89D6                    	MOV	SI,DX			; get source
 15244 000021C9 E8FB48                  	call	TransPath		; go munge the path
 15245 000021CC 5E                      	pop	si
 15246 000021CD 7305                    	JNC	short MkDirCrack	; no errors, try path
 15247                                  MkErrP:
 15248 000021CF B003                    	MOV	AL,error_path_not_found	; oops!
 15249                                  MkErr:
 15250 000021D1 E96CE4                  	jmp	SYS_RET_ERR
 15251                                  MkDirCrack:
 15252 000021D4 36803E[7A05]FF          	CMP	byte [SS:CMETA],-1
 15253 000021DA 75F3                    	JNZ	short MkErrP
 15254                                  
 15255                                  	; MSDOS 3.3
 15256                                  	;push	ss
 15257                                  	;pop	ds
 15258                                  	;call	si
 15259                                  	;jb	short MkErr
 15260                                  	;;jmp	short mkdir_ok
 15261                                  	;jmp	SYS_RET_OK
 15262                                  
 15263                                  	; MSDOS 6.0
 15264 000021DC 56                      	PUSH	SI			;PTM.			;AN000;
 15265 000021DD E80D00                  	CALL	Check_PathLen		;PTM. check path len > 67 ? ;AN000;
 15266 000021E0 5E                      	POP	SI			;PTM.			;AN000;
 15267 000021E1 7604                    	JBE	short pathok		;PTM.			;AN000;
 15268                                  	;mov	al,5
 15269 000021E3 B005                    	MOV	AL,error_access_denied	;PTM. ops!
 15270                                  	;jmp	SYS_RET_ERR		;PTM.
 15271 000021E5 EBEA                    	jmp	short MkErr
 15272                                  pathok:
 15273 000021E7 FFD6                    	CALL	SI			; go get file
 15274 000021E9 72E6                    	JC	short MkErr		; no errors
 15275                                  	; 16/12/2022
 15276                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15277 000021EB EBD0                    	jmp	short mkdir_ok
 15278                                  	;jmp	SYS_RET_OK
 15279                                  
 15280                                  ;----------------------------------------------------------------------------
 15281                                  ;
 15282                                  ; Procedure Name : Check_PathLen
 15283                                  ;
 15284                                  ; Inputs:
 15285                                  ;	nothing
 15286                                  ; Function:
 15287                                  ;	check if final path length greater than 67
 15288                                  ; Returns:
 15289                                  ;	Above flag set if > 67
 15290                                  ;
 15291                                  ;---------------------------------------------------------------------------
 15292                                  
 15293                                  Check_PathLen:
 15294                                  	; 09/09/2018
 15295                                  	;mov	SI,[WFP_START]
 15296 000021ED 368B36[B205]            	MOV	SI,[SS:WFP_START] ; MSDOS 6.0
 15297                                  Check_PathLen2:
 15298 000021F2 16                      	push	ss
 15299 000021F3 1F                      	pop	ds
 15300                                  	;mov	SI,[WFP_START]	  ; MSDOS 3.3
 15301 000021F4 51                      	push	CX	
 15302 000021F5 E8E7EF                  	CALL	DStrLen
 15303 000021F8 83F943                  	CMP	CX,DIRSTRLEN ; 67
 15304 000021FB 59                      	POP	CX
 15305 000021FC C3                      	retn
 15306                                  
 15307                                  ;============================================================================
 15308                                  ; IOCTL.ASM, MSDOS 6.0, 1991
 15309                                  ;============================================================================
 15310                                  ; 07/08/2018 - Retro DOS v3.0
 15311                                  ; 17/05/2019 - Retro DOS v4.0
 15312                                  
 15313                                  ;**	IOCTL system call.
 15314                                  ;----------------------------------------------------------------------------
 15315                                  ;	$IOCTL
 15316                                  ;
 15317                                  ;	  Revision history:
 15318                                  ;
 15319                                  ;		Created: ARR 4 April 1983
 15320                                  ;
 15321                                  ;		GenericIOCTL added:		KGS	22 April 1985
 15322                                  ;
 15323                                  ;		A000	version 4.00	Jan. 1988
 15324                                  ;
 15325                                  ;		Used jump table to dispatch IOCTL functions. HKN 3/12/90
 15326                                  ;
 15327                                  
 15328                                  ;BREAK <IOCTL - munge on a handle to do device specific stuff>
 15329                                  ;---------------------------------------------------------------------------
 15330                                  ;
 15331                                  ;   Assembler usage:
 15332                                  ;	    MOV     BX, Handle
 15333                                  ;	    MOV     DX, Data
 15334                                  ;
 15335                                  ;	(or LDS     DX,BUF
 15336                                  ;	    MOV     CX,COUNT)
 15337                                  ;
 15338                                  ;	    MOV     AH, Ioctl
 15339                                  ;	    MOV     AL, Request
 15340                                  ;	    INT     21h
 15341                                  ;
 15342                                  ;   AH = 0  Return a combination of low byte of sf_flags and device driver
 15343                                  ;	    attribute word in DX, handle in BX:
 15344                                  ;	    DH = high word of device driver attributes
 15345                                  ;	    DL = low byte of sf_flags
 15346                                  ;	 1  Set the bits contained in DX to sf_flags.  DH MUST be 0.  Handle
 15347                                  ;	    in BX.
 15348                                  ;	 2  Read CX bytes from the device control channel for handle in BX
 15349                                  ;	    into DS:DX.  Return number read in AX.
 15350                                  ;	 3  Write CX bytes to the device control channel for handle in BX from
 15351                                  ;	    DS:DX.  Return bytes written in AX.
 15352                                  ;	 4  Read CX bytes from the device control channel for drive in BX
 15353                                  ;	    into DS:DX.  Return number read in AX.
 15354                                  ;	 5  Write CX bytes to the device control channel for drive in BX from
 15355                                  ;	    DS:DX.  Return bytes written in AX.
 15356                                  ;	 6  Return input status of handle in BX. If a read will go to the
 15357                                  ;	    device, AL = 0FFh, otherwise 0.
 15358                                  ;	 7  Return output status of handle in BX. If a write will go to the
 15359                                  ;	    device, AL = 0FFh, otherwise 0.
 15360                                  ;	 8  Given a drive in BX, return 1 if the device contains non-
 15361                                  ;	    removable media, 0 otherwise.
 15362                                  ;	 9  Return the contents of the device attribute word in DX for the
 15363                                  ;	    drive in BX.  0200h is the bit for shared.	1000h is the bit for
 15364                                  ;	    network. 8000h is the bit for local use.
 15365                                  ;	 A  Return 8000h if the handle in BX is for the network or not.
 15366                                  ;	 B  Change the retry delay and the retry count for the system. BX is
 15367                                  ;	    the count and CX is the delay.
 15368                                  ;
 15369                                  ;   Error returns:
 15370                                  ;	    AX = error_invalid_handle
 15371                                  ;	       = error_invalid_function
 15372                                  ;	       = error_invalid_data
 15373                                  ;
 15374                                  ;-------------------------------------------------------------------------------
 15375                                  ;
 15376                                  ;   This is the documentation copied from DOS 4.0 it is much better
 15377                                  ;   than the above
 15378                                  ;
 15379                                  ;	There are several basic forms of IOCTL calls:
 15380                                  ;
 15381                                  ;
 15382                                  ;	** Get/Set device information:	**
 15383                                  ;
 15384                                  ;	ENTRY	(AL) = function code
 15385                                  ;		  0 - Get device information
 15386                                  ;		  1 - Set device information
 15387                                  ;		(BX) = file handle
 15388                                  ;		(DX) = info for "Set Device Information"
 15389                                  ;	EXIT	'C' set if error
 15390                                  ;		  (AX) = error code
 15391                                  ;		'C' clear if OK
 15392                                  ;		  (DX) = info for "Get Device Information"
 15393                                  ;	USES	ALL
 15394                                  ;
 15395                                  ;
 15396                                  ;	**  Read/Write Control Data From/To Handle  **
 15397                                  ;
 15398                                  ;	ENTRY	(AL) = function code
 15399                                  ;		  2 - Read device control info
 15400                                  ;		  3 - Write device control info
 15401                                  ;		(BX) = file handle
 15402                                  ;		(CX) = transfer count
 15403                                  ;		(DS:DX) = address for data
 15404                                  ;	EXIT	'C' set if error
 15405                                  ;		  (AX) = error code
 15406                                  ;		'C' clear if OK
 15407                                  ;		  (AX) = count of bytes transfered
 15408                                  ;	USES	ALL
 15409                                  ;
 15410                                  ;
 15411                                  ;	**  Read/Write Control Data From/To Block Device  **
 15412                                  ;
 15413                                  ;	ENTRY	(AL) = function code
 15414                                  ;		  4 - Read device control info
 15415                                  ;		  5 - Write device control info
 15416                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 15417                                  ;		(CX) = transfer count
 15418                                  ;		(DS:DX) = address for data
 15419                                  ;	EXIT	'C' set if error
 15420                                  ;		  (AX) = error code
 15421                                  ;		'C' clear if OK
 15422                                  ;		  (AX) = count of bytes transfered
 15423                                  ;	USES	ALL
 15424                                  ;
 15425                                  ;
 15426                                  ;	**  Get Input/Output Status  **
 15427                                  ;
 15428                                  ;	ENTRY	(AL) = function code
 15429                                  ;		  6 - Get Input status
 15430                                  ;		  7 - Get Output Status
 15431                                  ;		(BX) = file handle
 15432                                  ;	EXIT	'C' set if error
 15433                                  ;		  (AX) = error code
 15434                                  ;		'C' clear if OK
 15435                                  ;		  (AL) = 00 if not ready
 15436                                  ;		  (AL) = FF if ready
 15437                                  ;	USES	ALL
 15438                                  ;
 15439                                  ;
 15440                                  ;	**  Get Drive Information  **
 15441                                  ;
 15442                                  ;	ENTRY	(AL) = function code
 15443                                  ;		  8 - Check for removable media
 15444                                  ;		  9 - Get device attributes
 15445                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 15446                                  ;	EXIT	'C' set if error
 15447                                  ;		  (AX) = error code
 15448                                  ;		'C' clear if OK
 15449                                  ;		  (AX) = 0/1 media is removable/fixed (func. 8)
 15450                                  ;		  (DX) = device attribute word (func. 9)
 15451                                  ;	USES	ALL
 15452                                  ;
 15453                                  ;
 15454                                  ;	**  Get Redirected bit	**
 15455                                  ;
 15456                                  ;	ENTRY	(AL) = function code
 15457                                  ;		  0Ah - Network stuff
 15458                                  ;		(BX) = file handle
 15459                                  ;	EXIT	'C' set if error
 15460                                  ;		  (AX) = error code
 15461                                  ;		'C' clear if OK
 15462                                  ;		  (DX) = SFT flags word, 8000h set if network file
 15463                                  ;	USES	ALL
 15464                                  ;
 15465                                  ;
 15466                                  ;	**  Change sharer retry parameters  **
 15467                                  ;
 15468                                  ;	ENTRY	(AL) = function code
 15469                                  ;		  0Bh - Set retry parameters
 15470                                  ;		(CX) = retry loop count
 15471                                  ;		(DX) = number of retries
 15472                                  ;	EXIT	'C' set if error
 15473                                  ;		  (AX) = error code
 15474                                  ;		'C' clear if OK
 15475                                  ;	USES	ALL
 15476                                  ;
 15477                                  ;
 15478                                  ;   =================================================================
 15479                                  ;
 15480                                  ;	**  New Standard Control  **
 15481                                  ;
 15482                                  ;	ALL NEW IOCTL FACILITIES SHOULD USE THIS FORM.	THE OTHER
 15483                                  ;	FORMS ARE OBSOLETE.
 15484                                  ;
 15485                                  ;   =================================================================
 15486                                  ;
 15487                                  ;	ENTRY	(AL) = function code
 15488                                  ;		  0Ch - Control Function subcode
 15489                                  ;		(BX) = File Handle
 15490                                  ;		(CH) = Category Indicator
 15491                                  ;		(CL) = Function within category
 15492                                  ;		(DS:DX) = address for data, if any
 15493                                  ;		(SI) = Passed to device as argument, use depends upon function
 15494                                  ;		(DI) = Passed to device as argument, use depends upon function
 15495                                  ;	EXIT	'C' set if error
 15496                                  ;		  (AX) = error code
 15497                                  ;		'C' clear if OK
 15498                                  ;		  (SI) = Return value, meaning is function dependent
 15499                                  ;		  (DI) = Return value, meaning is function dependent
 15500                                  ;		  (DS:DX) = Return address, use is function dependent
 15501                                  ;	USES	ALL
 15502                                  ;
 15503                                  ;    ============== Generic IOCTL Definitions for DOS 3.2 ============
 15504                                  ;     (See inc\ioctl.inc for more info)
 15505                                  ;
 15506                                  ;	ENTRY	(AL) = function code
 15507                                  ;		  0Dh - Control Function subcode
 15508                                  ;		(BL) = Drive Number (0 = Default, 1= 'A')
 15509                                  ;		(CH) = Category Indicator
 15510                                  ;		(CL) = Function within category
 15511                                  ;		(DS:DX) = address for data, if any
 15512                                  ;		(SI) = Passed to device as argument, use depends upon function
 15513                                  ;		(DI) = Passed to device as argument, use depends upon function
 15514                                  ;
 15515                                  ;	EXIT	'C' set if error
 15516                                  ;		  (AX) = error code
 15517                                  ;		'C' clear if OK
 15518                                  ;		  (DS:DX) = Return address, use is function dependent
 15519                                  ;	USES	ALL
 15520                                  ;
 15521                                  ;---------------------------------------------------------------------------
 15522                                  	
 15523                                  	; 17/05/2019 - Retro DOS v4.0
 15524                                  	; DOSCODE:611Eh (MSDOS 6.21, MSDOS.SYS)
 15525                                  
 15526                                  	; 11/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15527                                  	; DOSCODE:610Ah (MSDOS 5.0, MSDOS.SYS)
 15528                                  
 15529                                  IOCTLJMPTABLE:	;label	word
 15530                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15531 000021FD [3922]                  	dw	ioctl_getset_data	; 0
 15532 000021FF [3922]                  	dw	ioctl_getset_data   	; 1
 15533 00002201 [8922]                  	dw	ioctl_control_string	; 2
 15534 00002203 [8922]                  	dw	ioctl_control_string	; 3
 15535 00002205 [D723]                  	dw	ioctl_get_dev		; 4
 15536 00002207 [D723]                  	dw	ioctl_get_dev		; 5
 15537 00002209 [A322]                  	dw	ioctl_status		; 6
 15538 0000220B [A322]                  	dw	ioctl_status		; 7
 15539 0000220D [4423]                  	dw	ioctl_rem_media		; 8
 15540 0000220F [7F23]                  	dw	ioctl_drive_attr	; 9
 15541 00002211 [C923]                  	dw	ioctl_handle_redir	; A
 15542 00002213 [BF22]                  	dw	Set_Retry_Parameters	; B
 15543 00002215 [CD22]                  	dw	GENERICIOCTLHANDLE	; C
 15544 00002217 [E422]                  	dw	GENERICIOCTL		; D
 15545                                  	; MSDOS 6.0 (& MSDOS 3.3)
 15546 00002219 [7A24]                  	dw	ioctl_drive_owner	; E
 15547 0000221B [7A24]                  	dw	ioctl_drive_owner	; F
 15548                                  	; MSDOS 6.0
 15549 0000221D [CD22]                  	dw	query_handle_support	; 10h
 15550 0000221F [E422]                  	dw	query_device_support	; 11h
 15551                                  
 15552                                  	; 11/11/2022
 15553                                  _$IOCTL:
 15554 00002221 8CDE                    	MOV	SI,DS			; Stash DS for calls 2,3,4 and 5
 15555 00002223 16                      	push	ss
 15556 00002224 1F                      	pop	ds			;hkn; SS is DOSDATA
 15557                                  
 15558                                  	; MSDOS 3.3
 15559                                  	;cmp	al,0Fh 
 15560                                  	; MSDOS 6.0
 15561 00002225 3C11                    	cmp	al,11h			; al must be between 0 & 11h
 15562 00002227 770D                    	ja	short ioctl_bad_funj2	; if not bad function #
 15563                                  
 15564                                  	; 14/01/2024
 15565                                  	; 28/05/2019
 15566                                  	;push	AX	; 14/01/2024	; Need to save AL for generic IOCTL
 15567 00002229 89C7                    	mov	di,ax			; di NOT a PARM
 15568 0000222B 81E7FF00                	and	di,0FFh			; di = al
 15569 0000222F D1E7                    	shl	di,1			; di = index into jmp table
 15570                                  	;pop	AX			; Restore AL for generic IOCTL
 15571                                  
 15572 00002231 2EFFA5[FD21]            	jmp	word [CS:DI+IOCTLJMPTABLE]
 15573                                  
 15574                                  ioctl_bad_funj2:
 15575 00002236 E90301                  	JMP	ioctl_bad_fun  ; 10/08/2018
 15576                                  
 15577                                  ;--------------------------------------------------------------------------
 15578                                  ;
 15579                                  ; IOCTL: AL = 0,1
 15580                                  ;
 15581                                  ; ENTRY: DS = DOSDATA
 15582                                  ;
 15583                                  ;--------------------------------------------------------------------------
 15584                                  
 15585                                  ioctl_getset_data:
 15586                                  	; MSDOS 6.0
 15587 00002239 E89043                  	call	SFFromHandle		; ES:DI -> SFT
 15588 0000223C 7305                    	JNC	short ioctl_check_permissions ; have valid handle
 15589                                  ioctl_bad_handle:
 15590                                  	;mov	al,6
 15591 0000223E B006                    	mov	al,error_invalid_handle
 15592                                  ioctl_error:
 15593 00002240 E9FDE3                  	jmp	SYS_RET_ERR
 15594                                  
 15595                                  ioctl_check_permissions:
 15596 00002243 3C00                    	CMP	AL,0
 15597                                  	;mov	al,[es:di+5]
 15598 00002245 268A4505                	MOV	AL,[ES:DI+SF_ENTRY.sf_flags]; Get low byte of flags
 15599 00002249 741B                    	JZ	short ioctl_read	; read the byte
 15600                                  
 15601 0000224B 08F6                    	or	dh,dh
 15602 0000224D 7404                    	JZ	short ioctl_check_device ; can I set with this data?
 15603                                  	;mov	al,0Dh
 15604 0000224F B00D                    	mov	al,error_invalid_data	; no DH <> 0
 15605                                  	;jmp	SYS_RET_ERR
 15606 00002251 EBED                    	jmp	short ioctl_error
 15607                                  
 15608                                  ioctl_check_device:
 15609 00002253 A880                    	test	AL,devid_device  ; 80h	; can I set this handle?
 15610 00002255 74DF                    	jz	short ioctl_bad_funj2
 15611 00002257 80CA80                  	OR	DL,devid_device 	; Make sure user doesn't turn off the
 15612                                  					;   device bit!! He can muck with the
 15613                                  					;   others at will.
 15614 0000225A C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15615 0000225F 26885505                	MOV	BYTE [ES:DI+SF_ENTRY.sf_flags],DL  ;AC000;MS.; Set flags
 15616                                  ioctl_ok:
 15617 00002263 E9D1E3                  	jmp	SYS_RET_OK
 15618                                  
 15619                                  ioctl_read:
 15620 00002266 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk  ; 2
 15621 0000226B 30E4                    	XOR	AH,AH
 15622 0000226D A880                    	test	AL,devid_device 	; Should I set high byte
 15623 0000226F 740D                    	JZ	short ioctl_no_high	; no
 15624 00002271 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15625                                  	;les	di,[es:di+7]
 15626 00002276 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15627                                  	;mov	ah,[es:di+5]
 15628 0000227A 268A6505                	MOV	AH,[ES:DI+SYSDEV.ATT+1] ; Get high byte
 15629                                  ioctl_no_high:
 15630 0000227E 89C2                    	MOV	DX,AX
 15631                                  ioctl_set_dx:	; 16/12/2022
 15632 00002280 E8FEE1                  	call	Get_User_Stack
 15633                                  	;mov	[si+6],dx
 15634 00002283 895406                  	MOV	[SI+user_env.user_DX],DX
 15635                                  	;;jmp	SYS_RET_OK
 15636                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15637                                  ioctl_ok_j:
 15638                                  	; 16/12/2022
 15639 00002286 E9B1E3                  	jmp	SYS_RET_OK_clc	 ; (after 'Get_User_Stack') 
 15640                                  	;jmp	short ioctl_ok
 15641                                  	; 26/07/2019
 15642                                  	;jmp	SYS_RET_OK_clc
 15643                                  
 15644                                  ;--------------------------------------------------------------------------
 15645                                  ;
 15646                                  ; IOCTL: AL = 2,3
 15647                                  ;
 15648                                  ; ENTRY: DS = DOSDATA
 15649                                  ;	 SI = user's DS
 15650                                  ;
 15651                                  ;--------------------------------------------------------------------------
 15652                                  
 15653                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15654                                  ioctl_control_string:
 15655 00002289 E84043                  	call	SFFromHandle		; ES:DI -> SFT
 15656 0000228C 72B0                    	JC	short ioctl_bad_handle	; invalid handle
 15657                                  	; 07/12/2022
 15658                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15659                                  	;jz	short ioctl_bad_funj2			; No it is a file
 15660                                  	; MSDOS 5.0 & MSDOS 6.0
 15661 0000228E 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15662 00002293 74A1                    	jz	short ioctl_bad_funj2			; No it is a file
 15663 00002295 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 15664 0000229A 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15665 0000229E 30DB                    	XOR	BL,BL			; Unit number of char dev = 0
 15666 000022A0 E93C01                  	JMP	ioctl_do_string
 15667                                  
 15668                                  ;--------------------------------------------------------------------------
 15669                                  ;
 15670                                  ; IOCTL: AL = 6,7
 15671                                  ;
 15672                                  ; ENTRY: DS = DOSDATA
 15673                                  ;
 15674                                  ;--------------------------------------------------------------------------
 15675                                  
 15676                                  ioctl_status:
 15677 000022A3 B401                    	MOV	AH,1
 15678 000022A5 2C06                    	SUB	AL,6			; 6=0,7=1
 15679 000022A7 7402                    	JZ	short ioctl_get_status
 15680 000022A9 B403                    	MOV	AH,3
 15681                                  ioctl_get_status:
 15682 000022AB 50                      	PUSH	AX
 15683 000022AC E8F912                  	call	GET_IO_SFT
 15684 000022AF 58                      	POP	AX
 15685                                  	;JNC	short DO_IOFUNC
 15686                                  	;JMP	short ioctl_bad_handle	; invalid SFT
 15687                                  	; 16/12/2022
 15688 000022B0 728C                    	jc	short ioctl_bad_handle
 15689                                  DO_IOFUNC:
 15690 000022B2 E83221                  	call	IOFUNC
 15691 000022B5 88C4                    	MOV	AH,AL
 15692 000022B7 B0FF                    	MOV	AL,0FFH
 15693                                  	;JNZ	short ioctl_status_ret
 15694                                  	; 29/01/2024
 15695 000022B9 75A8                    	jnz	short ioctl_ok
 15696 000022BB FEC0                    	INC	AL
 15697                                  ioctl_status_ret:
 15698                                  	;jmp	SYS_RET_OK
 15699                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15700                                  	;jmp	short ioctl_ok_j
 15701                                  	; 16/12/2022
 15702 000022BD EBA4                    	jmp	short ioctl_ok
 15703                                  
 15704                                  ;--------------------------------------------------------------------------
 15705                                  ;
 15706                                  ; IOCTL: AL = B
 15707                                  ;
 15708                                  ; ENTRY: DS = DOSDATA
 15709                                  ;
 15710                                  ;--------------------------------------------------------------------------
 15711                                  
 15712                                  Set_Retry_Parameters:
 15713                                  	; 09/09/2018
 15714 000022BF 890E[1C00]              	MOV	[RetryLoop],CX		; 0 retry loop count allowed
 15715 000022C3 09D2                    	OR	DX,DX			; zero retries not allowed
 15716 000022C5 7475                    	JZ	short ioctl_bad_fun
 15717 000022C7 8916[1A00]              	MOV	[RetryCount],DX		; Set new retry count
 15718                                  doneok:
 15719                                  	;jmp	SYS_RET_OK		; Done
 15720                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15721                                  	;jmp	short ioctl_status_ret
 15722                                  	; 16/12/2022
 15723 000022CB EB96                    	jmp	short ioctl_ok	 ; jmp SYS_RET_OK
 15724                                  
 15725                                  ;--------------------------------------------------------------------------
 15726                                  ;
 15727                                  ; Generic IOCTL entry point. AL = C, D, 10h, 11h
 15728                                  ;
 15729                                  ;	here we invoke the Generic IOCTL using the IOCTL_Req structure.
 15730                                  ;	SI:DX -> Users Device Parameter Table
 15731                                  ;	IOCALL -> IOCTL_Req structure
 15732                                  ;
 15733                                  ; 	If on entry AL >= IOCTL_QUERY_HANDLE the function is a
 15734                                  ;	QueryIOCtlSupport call ELSE it's a standard generic IOCtl
 15735                                  ;	call.
 15736                                  ;
 15737                                  ; BUGBUG: Don't push anything on the stack between GENERIOCTL: and 
 15738                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15739                                  ;         return address off the stack if the drive is invalid.
 15740                                  ;
 15741                                  ;--------------------------------------------------------------------------
 15742                                  
 15743                                  query_handle_support:	; Entry point for handles
 15744                                  GENERICIOCTLHANDLE:
 15745 000022CD E8FC42                  	call	SFFromHandle		; Get SFT for device.
 15746 000022D0 726F                    	jc	short ioctl_bad_handlej
 15747                                  
 15748                                  	;test	word [es:di+5],8000h
 15749                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet	; M031;
 15750                                  	;test	byte [es:di+6],80h
 15751 000022D2 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 15752 000022D7 7563                    	jnz	short ioctl_bad_fun	; Cannot do this over net.
 15753                                  
 15754 000022D9 C606[2303]04            	mov	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15755                                  	;les	di,[es:di+7]
 15756 000022DE 26C47D07                	les	di,[es:di+SF_ENTRY.sf_devptr]	; Get pointer to device.
 15757 000022E2 EB0F                    	jmp	short Do_GenIOCTL
 15758                                  
 15759                                  query_device_support:	; Entry point for devices:
 15760                                  GENERICIOCTL:
 15761 000022E4 C606[2303]02            	mov	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 15762 000022E9 80FD08                  	cmp	ch,IOC_DC ; 8		; Only disk devices are allowed to use
 15763 000022EC 754E                    	jne	short ioctl_bad_fun	; no handles with Generic IOCTL.
 15764                                  
 15765 000022EE E87A01                  	CALL	Check_If_Net		; ES:DI := Get_hdr_block of device in BL
 15766 000022F1 7549                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15767                                  
 15768                                  Do_GenIOCTL:
 15769                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320 
 15770                                  					; Can device handle Generic IOCTL funcs
 15771                                  	; 09/09/2018
 15772                                  	;test	byte [es:di+4],40h
 15773 000022F3 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 15774 000022F8 7442                    	jz	short ioctl_bad_fun
 15775                                  
 15776                                  	; 17/05/2019 - Retro DOS v4.0
 15777                                  
 15778                                  	; MSDOS 6.0
 15779                                  	;mov	byte [IOCALL_REQFUNC],19 ; 13h
 15780 000022FA C606[7E03]13            	mov	byte [IOCALL_REQFUNC],GENIOCTL ; Assume real Request
 15781                                  	;cmp	al,10h
 15782 000022FF 3C10                    	cmp	AL,IOCTL_QUERY_HANDLE	; See if this is just a query
 15783 00002301 7C0C                    	jl	short SetIOCtlBlock
 15784                                  	
 15785                                  	;TEST	word [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15786                                  	;test	byte [es:di+4],80h 
 15787 00002303 26F6450480              	TEST	byte [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15788 00002308 7432                    	jz	short ioctl_bad_fun	; No support for query 
 15789                                  	;
 15790                                  	;mov	byte [IOCALL_REQFUNC],19h	
 15791 0000230A C606[7E03]19            	mov	byte [IOCALL_REQFUNC],IOCTL_QUERY ; Just a query (5.00)
 15792                                  
 15793                                  SetIOCtlBlock:
 15794 0000230F 06                      	PUSH	ES			; DEVIOCALL2 expects Device header block
 15795 00002310 57                      	PUSH	DI			; in DS:SI
 15796                                  					; Setup Generic IOCTL Request Block
 15797                                  	;mov	byte [IOCALL_REQLEN],23
 15798 00002311 C606[7C03]17            	mov	byte [IOCALL_REQLEN],IOCTL_REQ.size
 15799                                  	; 07/09/2018 (MSDOS 3.3)
 15800                                  	;;mov	byte [IOCALL_REQFUNC],19
 15801                                  	;mov	byte [IOCALL_REQFUNC],GENIOCTL ; 07/09/2018
 15802                                  	;
 15803 00002316 881E[7D03]              	MOV	[IOCALL_REQUNIT],BL
 15804 0000231A 882E[8903]              	MOV	[IOCALL+IOCTL_REQ.MAJORFUNCTION],CH
 15805 0000231E 880E[8A03]              	MOV	[IOCALL+IOCTL_REQ.MINORFUNCTION],CL
 15806 00002322 8936[8B03]              	MOV	[IOCALL+IOCTL_REQ.REG_SI],SI
 15807 00002326 893E[8D03]              	MOV	[IOCALL+IOCTL_REQ.REG_DI],DI
 15808 0000232A 8916[8F03]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET],DX
 15809 0000232E 8936[9103]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET+2],SI
 15810                                  
 15811                                  ;hkn; IOCALL is in DOSDATA
 15812 00002332 BB[7C03]                	MOV	BX,IOCALL
 15813                                  
 15814 00002335 16                      	PUSH	SS
 15815 00002336 07                      	POP	ES
 15816                                  					; DS:SI -> Device header.
 15817 00002337 5E                      	POP	SI
 15818 00002338 1F                      	POP	DS
 15819                                  	; 10/08/2018
 15820 00002339 E9DC00                  	jmp	ioctl_do_IO		; Perform Call to device driver
 15821                                  
 15822                                  ioctl_bad_fun:
 15823 0000233C B001                    	mov	al, error_invalid_function  ; 1
 15824 0000233E E9FFE2                  	jmp	SYS_RET_ERR	
 15825                                  
 15826                                  ioctl_bad_handlej:
 15827 00002341 E9FAFE                  	jmp	ioctl_bad_handle
 15828                                  
 15829                                  ;---------------------------------------------------------------------------
 15830                                  ;
 15831                                  ; IOCTL: AL = 8
 15832                                  ;
 15833                                  ; ENTRY: DS = DOSDATA
 15834                                  ;
 15835                                  ; BUGBUG: Don't push anything on the stack between ioctl_rem_media: and 
 15836                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15837                                  ;         return address off the stack if the drive is invalid.
 15838                                  ;
 15839                                  ;-------------------------------------------------------------------------
 15840                                  
 15841                                  	; 30/01/2024
 15842                                  ioctl_rem_media:
 15843                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15844 00002344 E82401                  	CALL	Check_If_Net
 15845 00002347 75F3                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15846                                  					;   certainly don't know how to do this
 15847                                  					;   call.
 15848                                  	;test	word [es:di+4],800h
 15849                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL ; See if device can
 15850                                  	;test	byte [es:di+5],8
 15851 00002349 26F6450508              	TEST	byte [es:di+SYSDEV.ATT+1],(DEVOPCL>>8)
 15852 0000234E 74EC                    	JZ	short ioctl_bad_fun		; NO
 15853                                  
 15854                                  ;hkn; SS override for IOCALL
 15855                                  	; 30/01/2024
 15856                                  	; ds = ss = DOSDATA segment ('Get_Driver_BL' in 'Check_If_Net')
 15857                                  	;MOV	byte [SS:IOCALL_REQFUNC],DEVRMD ; 15
 15858 00002350 C606[7E03]0F            	mov	byte [IOCALL_REQFUNC],DEVRMD ; 15
 15859 00002355 B00D                    	MOV	AL,REMHL  ; 13
 15860 00002357 88DC                    	MOV	AH,BL			; Unit number
 15861                                  	;MOV	[SS:IOCALL_REQLEN],AX
 15862 00002359 A3[7C03]                	mov	[IOCALL_REQLEN],ax	
 15863 0000235C 31C0                    	XOR	AX,AX
 15864                                  	;MOV	[SS:IOCALL_REQSTAT],AX
 15865 0000235E A3[7F03]                	mov	[IOCALL_REQSTAT],ax ; 0
 15866                                  	
 15867 00002361 06                      	PUSH	ES
 15868 00002362 1F                      	POP	DS
 15869 00002363 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15870 00002365 16                      	PUSH	SS
 15871 00002366 07                      	POP	ES
 15872                                  
 15873                                  ;hkn; IOCALL is in DOSDATA (msconst.asm)
 15874                                  	; 30/01/2024
 15875                                  	; (ds <> ss, ss = DOSDATA segment)
 15876 00002367 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15877 0000236A 1E                      	push	ds
 15878 0000236B 56                      	push	si
 15879 0000236C E84D22                  	call	DEVIOCALL2
 15880 0000236F 5E                      	pop	si
 15881 00002370 1F                      	pop	ds
 15882                                  
 15883                                  ;hkn; SS override
 15884 00002371 36A1[7F03]              	MOV	AX,[SS:IOCALL_REQSTAT]	; Get Status word
 15885                                  	;AND	AX,STBUI ; 200h		; Mask to busy bit
 15886                                  	; 29/01/2024
 15887 00002375 80E402                  	and	ah,STBUI>>8
 15888 00002378 B109                    	MOV	CL,9
 15889 0000237A D3E8                    	SHR	AX,CL			; Busy bit to bit 0
 15890                                  ioctl_da_ok_j:	; 11/11/2022
 15891 0000237C E9B8E2                  	jmp	SYS_RET_OK
 15892                                  
 15893                                  ;-------------------------------------------------------------------------
 15894                                  ;
 15895                                  ; IOCTL: AL = 9
 15896                                  ;
 15897                                  ; ENTRY: DS = DOSDATA
 15898                                  ;
 15899                                  ;-------------------------------------------------------------------------
 15900                                  
 15901                                  ioctl_drive_attr:
 15902                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15903 0000237F 88D8                    	mov	al,bl
 15904 00002381 E86C46                  	call	GETTHISDRV
 15905 00002384 723E                    	jc	short ioctl_drv_err
 15906 00002386 E8B500                  	call	Get_Driver_BL
 15907                                  	; MSDOS 6.0
 15908 00002389 7239                    	JC	short ioctl_drv_err	; drive not valid
 15909                                  
 15910                                  	;mov	dx,[es:di+4]
 15911 0000238B 268B5504                	mov	dx,[es:di+SYSDEV.ATT]	
 15912                                  					; get device attribute word
 15913 0000238F 88C3                    	MOV	BL,AL			; Phys letter to BL (A=0)
 15914                                  
 15915                                  ;hkn; SS override
 15916                                  	;LES	DI,[SS:THISCDS]
 15917                                  	; 30/01/2024
 15918 00002391 C43E[A205]              	les	di,[THISCDS] ; (Get_Driver_BL)
 15919                                  
 15920                                  	;test	word [es:di+43h],8000h
 15921                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15922                                  	;test	byte [es:di+44h],80h
 15923 00002395 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15924 0000239A 7403                    	JZ	short IOCTLShare
 15925                                  
 15926                                  	;or	dx,1000h ; (MSDOS 3.3)
 15927                                  
 15928                                  ;	Net devices don't return a device attribute word.
 15929                                  ;	Bit 12 = 1, meaning net device, all others = 0.
 15930                                  
 15931 0000239C BA0010                  	MOV	DX,1000h ; MSDOS 6.0
 15932                                  
 15933                                  IOCTLShare:
 15934                                  	; 30/01/2024
 15935                                  	; ds = ss = DOSDATA segment
 15936                                  	;push	ss
 15937                                  	;pop	ds
 15938                                  
 15939 0000239F BE[BE03]                	MOV	SI,OPENBUF
 15940 000023A2 80C341                  	ADD	BL,"A"	; 41h
 15941 000023A5 881C                    	MOV	[SI],BL
 15942 000023A7 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
 15943 000023AC B80003                  	MOV	AX,0300h
 15944 000023AF F8                      	CLC
 15945                                  	;INT	int_IBM
 15946 000023B0 CD2A                    	int     2Ah	; Microsoft Networks - CHECK DIRECT I/O
 15947                                  			; DS:SI -> ASCIZ disk device name 
 15948                                  			; (may be full path or only drive
 15949                                  			; specifier--must include the colon)
 15950                                  			; Return: CF clear if absolute disk access allowed
 15951 000023B2 7303                    	JNC	short IOCTLLocal	; Not shared
 15952                                  	;OR	DX,0200H		; Shared, bit 9
 15953                                  	; 17/12/2022
 15954 000023B4 80CE02                  	or	dh,02h
 15955                                  IOCTLLocal:
 15956                                  	;test	word [es:di+43h],1000h
 15957                                  	;TEST	word [ES:DI+curdir.flags],curdir_local
 15958                                  	;test	byte [es:di+44h],10h
 15959 000023B7 26F6454410              	TEST	byte [ES:DI+curdir.flags+1],(curdir_local>>8)
 15960                                  	;JZ	short ioctl_set_DX
 15961                                  	; 16/12/2022
 15962 000023BC 7403                    	jz	short _ioctl_set_DX
 15963                                  	;OR	DX,8000h
 15964                                  	; 17/12/2022
 15965 000023BE 80CE80                  	or	dh,80h
 15966                                  ;ioctl_set_DX:
 15967                                  _ioctl_set_DX:
 15968                                  	; 16/12/2022
 15969 000023C1 E9BCFE                  	jmp	ioctl_set_dx
 15970                                  ; 16/12/2022
 15971                                  %if 0	
 15972                                  	call	Get_User_Stack
 15973                                  	MOV	[SI+user_env.user_DX],DX
 15974                                  	;;jmp	SYS_RET_OK
 15975                                  	;; 25/06/2019
 15976                                  	;jmp	SYS_RET_OK_clc
 15977                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15978                                  ioctl_gd_ok_j:
 15979                                  	jmp	short ioctl_da_ok_j
 15980                                  %endif
 15981                                  
 15982                                  ioctl_drv_err:
 15983 000023C4 B00F                    	mov	al,error_invalid_drive ; 0Fh
 15984                                  ioctl_gd_err_j:	; 11/11/2022
 15985 000023C6 E977E2                  	jmp	SYS_RET_ERR
 15986                                  
 15987                                  ;--------------------------------------------------------------------------
 15988                                  ;
 15989                                  ; IOCTL: AL = A
 15990                                  ;
 15991                                  ; ENTRY: DS = DOSDATA
 15992                                  ;
 15993                                  ;--------------------------------------------------------------------------
 15994                                  
 15995                                  ioctl_handle_redir:
 15996 000023C9 E80042                  	call	SFFromHandle		; ES:DI -> SFT
 15997 000023CC 7303                    	JNC	short ioctl_got_sft	; have valid handle
 15998 000023CE E96DFE                  	jmp	ioctl_bad_handle ; 10/08/2018
 15999                                  
 16000                                  ioctl_got_sft:
 16001                                  	;mov	dx,[es:di+5]
 16002 000023D1 268B5505                	MOV	DX,[ES:DI+SF_ENTRY.sf_flags] ; Get flags
 16003                                  	;JMP	short ioctl_set_DX	; pass dx to user and return
 16004                                  	; 16/12/2022
 16005 000023D5 EBEA                    	jmp	short _ioctl_set_DX
 16006                                  
 16007                                  	; 16/12/2022
 16008                                  ;ioctl_bad_funj:
 16009                                  	;JMP	ioctl_bad_fun
 16010                                  
 16011                                  ;--------------------------------------------------------------------------
 16012                                  ;
 16013                                  ; IOCTL: AL= 4,5
 16014                                  ;
 16015                                  ; ENTRY: DS = DOSDATA
 16016                                  ;	 SI = user's DS
 16017                                  ;
 16018                                  ;
 16019                                  ; BUGBUG: Don't push anything on the stack between ioctl_get_dev: and 
 16020                                  ;         the call to Check_If_Net because Check_If_Net gets our
 16021                                  ;         return address off the stack if the drive is invalid.
 16022                                  ;
 16023                                  ;-------------------------------------------------------------------------
 16024                                  
 16025                                  ioctl_get_dev:
 16026 000023D7 E89100                  	CALL	Check_If_Net
 16027                                  	;JNZ	short ioctl_bad_funj	; There are no "net devices", and they
 16028                                  					; certainly don't know how to do this
 16029                                  					; call.
 16030                                  	; 16/12/2022
 16031 000023DA 7403                    	jz	short ioctl_do_string
 16032                                  ioctl_bad_funj:
 16033 000023DC E95DFF                  	JMP	ioctl_bad_fun
 16034                                  
 16035                                  ioctl_do_string:
 16036                                  	;test	word [es:di+4],4000h
 16037                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVIOCTL; See if device accepts control
 16038                                  	;test	byte [es:di+5],40h
 16039 000023DF 26F6450540              	TEST	byte [ES:DI+SYSDEV.ATT+1],(DEVIOCTL>>8)
 16040 000023E4 74F6                    	JZ	short ioctl_bad_funj		; NO
 16041                                  					; assume IOCTL read
 16042 000023E6 C606[7E03]03            	MOV	byte [IOCALL_REQFUNC],DEVRDIOCTL  ; 3
 16043                                  
 16044 000023EB A801                    	TEST	AL,1			; is it func. 4/5 or 2/3
 16045 000023ED 7405                    	JZ	short ioctl_control_call ; it is read. goto ioctl_control_call
 16046                                  
 16047                                  					; it is an IOCTL write
 16048 000023EF C606[7E03]0C            	MOV	byte [IOCALL_REQFUNC],DEVWRIOCTL ; 12
 16049                                  
 16050                                  ioctl_control_call:
 16051 000023F4 B016                    	MOV	AL,DRDWRHL ; 22
 16052                                  ioctl_setup_pkt:
 16053 000023F6 88DC                    	MOV	AH,BL			; Unit number
 16054 000023F8 A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 16055 000023FB 31C0                    	XOR	AX,AX
 16056 000023FD A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 16057 00002400 A2[8903]                	MOV	[IOMED],AL
 16058 00002403 890E[8E03]              	MOV	[IOSCNT],CX
 16059 00002407 8916[8A03]              	MOV	[IOXAD],DX
 16060 0000240B 8936[8C03]              	MOV	[IOXAD+2],SI
 16061 0000240F 06                      	PUSH	ES
 16062 00002410 1F                      	POP	DS
 16063 00002411 89FE                    	MOV	SI,DI			; DS:SI -> driver
 16064 00002413 16                      	PUSH	SS
 16065 00002414 07                      	POP	ES
 16066                                  
 16067 00002415 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 16068                                  ioctl_do_IO:
 16069 00002418 E8A121                  	call	DEVIOCALL2
 16070                                  
 16071                                  ;hkn; SS override for IOCALL
 16072                                  	;test	word [SS:IOCALL_REQSTAT],8000h
 16073                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 16074                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 16075 0000241B 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 16076 00002421 7507                    	JNZ	short ioctl_string_err
 16077                                  
 16078                                  ;hkn; SS override
 16079 00002423 36A1[8E03]              	MOV	AX,[SS:IOSCNT]		; Get actual bytes transferred
 16080                                  	; 16/12/2022
 16081 00002427 E90DE2                  	jmp	SYS_RET_OK
 16082                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16083                                  	;jmp	short ioctl_gd_ok_j
 16084                                  
 16085                                  ioctl_string_err:
 16086 0000242A 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	;Get Error
 16087                                  device_err:
 16088 0000242F 81E7FF00                	AND	DI,STECODE ; 00FFh	; mask out irrelevant bits
 16089 00002433 89F8                    	MOV	AX,DI
 16090 00002435 E82130                  	call	SET_I24_EXTENDED_ERROR
 16091                                  
 16092                                  ;hkn; use SS override
 16093                                  ;hkn;	mov	ax,[CS:EXTERR]
 16094 00002438 36A1[2403]              	mov	ax,[SS:EXTERR]
 16095                                  	;jmp	SYS_RET_ERR
 16096                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16097 0000243C EB88                    	jmp	short ioctl_gd_err_j
 16098                                  
 16099                                  ; 17/05/2019 - Retro DOS v4.0
 16100                                  
 16101                                  ;--------------------------------------------------------------------------
 16102                                  ; Proc name : Get_Driver_BL
 16103                                  ;
 16104                                  ;	DS is DOSDATA
 16105                                  ;	BL is drive number (0=default)
 16106                                  ;	Returns pointer to device in ES:DI, unit number in BL if carry clear
 16107                                  ;	No regs modified
 16108                                  ;
 16109                                  ;---------------------------------------------------------------------------
 16110                                  
 16111                                  	; 30/01/2024
 16112                                  Get_Driver_BL:
 16113 0000243E 50                      	PUSH	AX
 16114 0000243F 88D8                    	MOV	AL,BL			; Drive
 16115 00002441 E8AC45                  	call	GETTHISDRV
 16116 00002444 7223                    	jc	short ioctl_bad_drv
 16117 00002446 30DB                    	XOR	BL,BL			; Unit zero on Net device
 16118 00002448 C606[2303]03            	MOV	byte [EXTERR_LOCUS],errLOC_Net ; 3
 16119 0000244D C43E[A205]              	LES	DI,[THISCDS]
 16120                                  	;test	word [es:di+43h],8000h
 16121                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 16122                                  	;test	byte [es:di+44h],80h
 16123 00002451 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 16124                                  	;les	di,[es:di+45h]
 16125 00002456 26C47D45                	LES	DI,[ES:DI+curdir.devptr] ; ES:DI -> Dpb or net dev
 16126 0000245A 750D                    	JNZ	short got_dev_ptr	 ; Is net
 16127 0000245C C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 16128                                  	;mov	bl,[es:di+1]
 16129 00002461 268A5D01                	MOV	BL,[ES:DI+DPB.UNIT]	; Unit number
 16130                                  	;les	di,[es:di+13h]
 16131 00002465 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Driver addr
 16132                                  got_dev_ptr:
 16133                                  	; 30/01/2024
 16134                                  	; cf=0
 16135                                  	;CLC
 16136                                  ioctl_bad_drv:
 16137 00002469 58                      	POP	AX
 16138 0000246A C3                      	retn
 16139                                  
 16140                                  ;-------------------------------------------------------------------------
 16141                                  ; Proc Name : Check_If_Net:
 16142                                  ;
 16143                                  ;
 16144                                  ; Checks if the device is over the net or not. Returns result in ZERO flag.
 16145                                  ; If no device is found, the return address is popped off the stack, and a
 16146                                  ; jump is made to ioctl_drv_err.
 16147                                  ;
 16148                                  ; On Entry:
 16149                                  ; Registers same as those for Get_Driver_BL
 16150                                  ;
 16151                                  ; On Exit:
 16152                                  ; ZERO flag	- set if not a net device
 16153                                  ;		- reset if net device
 16154                                  ; ES:DI -> the device
 16155                                  ;
 16156                                  ;
 16157                                  ; BUGBUG: This function assumes the following stack setup on entry
 16158                                  ;
 16159                                  ;	  SP+2 -> Error return address
 16160                                  ;	  SP   -> Normal return address
 16161                                  ;
 16162                                  ;-------------------------------------------------------------------------
 16163                                  
 16164                                  	; 30/01/2024 - Retro DOS v5.0
 16165                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:639Ch
 16166                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:6A91h
 16167                                  	; Windows ME IO.SYS - BIOSCODE:68E1h
 16168                                  
 16169                                  Check_If_Net:
 16170                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16171 0000246B E8D0FF                  	CALL	Get_Driver_BL
 16172 0000246E 7201                    	JC	short ioctl_drv_err_pop	; invalid drive letter
 16173                                  
 16174                                  ; 30/01/2024 ('Get_Driver_BL' returns with
 16175                                  ;	      'curdir_isnet' condition/ZF, no need to a second test)
 16176                                  %if 0
 16177                                  	;;;
 16178                                  	; (PCDOS 7.1 IBMDOS.COM, Windows ME IO.SYS)
 16179                                  	PUSH	ES
 16180                                  	PUSH	DI
 16181                                  	LES	DI,[THISCDS]
 16182                                  	;test	word [es:di+43h],8000h
 16183                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 16184                                  	;test	byte [es:di+44h],80h
 16185                                  	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 16186                                  	POP	DI
 16187                                  	POP	ES
 16188                                  	;;;
 16189                                  %endif
 16190 00002470 C3                      	retn
 16191                                  
 16192                                  ioctl_drv_err_pop:
 16193 00002471 58                      	pop	ax			; pop off return address
 16194 00002472 E94FFF                  	jmp	ioctl_drv_err
 16195                                  
 16196                                  ioctl_bad_funj3:
 16197 00002475 E9C4FE                  	jmp	ioctl_bad_fun
 16198                                  
 16199                                  ioctl_string_errj:
 16200 00002478 EBB0                    	jmp	short ioctl_string_err  ; 25/05/2019
 16201                                  
 16202                                  ;--------------------------------------------------------------------------
 16203                                  ;
 16204                                  ; IOCTL: AL = E, F
 16205                                  ;
 16206                                  ; ENTRY: DS = DOSDATA
 16207                                  ;
 16208                                  ;
 16209                                  ; BUGBUG: Don't push anything on the stack between ioctl_drive_owner: and 
 16210                                  ;         the call to Check_If_Net because Check_If_Net gets our
 16211                                  ;         return address off the stack if the drive is invalid.
 16212                                  ;
 16213                                  ;--------------------------------------------------------------------------
 16214                                  
 16215                                  ioctl_drive_owner:
 16216                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16217 0000247A E8EEFF                  	Call	Check_If_Net
 16218 0000247D 75F6                    	JNZ	short ioctl_bad_funj3 	; There are no "net devices", and they
 16219                                  					;   certainly don't know how to do this
 16220                                  					;   call.
 16221                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320	; See if device can handle this
 16222                                  	; 09/09/2018
 16223                                  	;test	byte [es:di+4],40h
 16224 0000247F 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 16225 00002484 74EF                    	JZ	short ioctl_bad_funj3 	; NO
 16226                                  	;mov	byte [IOCALL_REQFUNC],23
 16227 00002486 C606[7E03]17            	mov	byte [IOCALL_REQFUNC],DEVGETOWN	; default to get owner
 16228 0000248B 3C0E                    	cmp	al,0Eh			; Get Owner ?
 16229 0000248D 7405                    	jz	short GetOwner
 16230                                  SetOwner:
 16231 0000248F C606[7E03]18            	MOV	byte [IOCALL_REQFUNC],DEVSETOWN ; 24
 16232                                  GetOwner:
 16233 00002494 B00D                    	MOV	AL,OWNHL ; 13
 16234 00002496 88DC                    	MOV	AH,BL			; Unit number
 16235 00002498 A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 16236 0000249B 31C0                    	XOR	AX,AX
 16237 0000249D A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 16238 000024A0 06                      	PUSH	ES
 16239 000024A1 1F                      	POP	DS
 16240 000024A2 89FE                    	MOV	SI,DI			; DS:SI -> driver
 16241 000024A4 16                      	PUSH	SS
 16242 000024A5 07                      	POP	ES
 16243 000024A6 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 16244 000024A9 1E                      	push	ds
 16245 000024AA 56                      	push	si
 16246 000024AB E80E21                  	call	DEVIOCALL2
 16247 000024AE 5E                      	pop	si
 16248 000024AF 1F                      	pop	ds
 16249                                  ;hkn; SS override
 16250                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 16251                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 16252 000024B0 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 16253 000024B6 75C0                    	jnz	short ioctl_string_errj
 16254 000024B8 36A0[7D03]              	MOV	AL,[SS:IOCALL_REQUNIT]	; Get owner returned by device
 16255                                  					; owner returned is 1-based.
 16256 000024BC E978E1                  	jmp	SYS_RET_OK
 16257                                  
 16258                                  ;============================================================================
 16259                                  ; DELETE.ASM, MSDOS 6.0, 1991
 16260                                  ;============================================================================
 16261                                  ; 07/08/2018 - Retro DOS v3.0
 16262                                  ; 17/05/2019 - Retro DOS v4.0
 16263                                  
 16264                                  ;	TITLE	DOS_DELETE - Internal DELETE call for MS-DOS
 16265                                  ;	NAME	DOS_DELETE
 16266                                  
 16267                                  ;
 16268                                  ;	Microsoft Confidential
 16269                                  ;	Copyright (C) Microsoft Corporation 1991
 16270                                  ;	All Rights Reserved.
 16271                                  ;
 16272                                  
 16273                                  ;**	DELETE.ASM - Low level routine for deleting files
 16274                                  ;----------------------------------------------------------------------------
 16275                                  ;		DOS_DELETE
 16276                                  ;		REN_DEL_Check
 16277                                  ;		FastOpen_Delete	       ; DOS 3.3
 16278                                  ;		FastOpen_Update	       ; DOS 3.3
 16279                                  
 16280                                  ;   Revision history:
 16281                                  ;
 16282                                  ;   A000  version 4.00	Jan. 1988
 16283                                  ;   A001  Fastopen Rename fix	April 1989
 16284                                  
 16285                                  ;Installed = TRUE
 16286                                  
 16287                                  ;	i_need	NoSetDir,BYTE
 16288                                  ;	i_need	Creating,BYTE
 16289                                  ;	i_need	DELALL,BYTE
 16290                                  ;	i_need	THISDPB,DWORD
 16291                                  ;	i_need	THISSFT,DWORD
 16292                                  ;	i_need	THISCDS,DWORD
 16293                                  ;	i_need	CURBUF,DWORD
 16294                                  ;	i_need	ATTRIB,BYTE
 16295                                  ;	i_need	SATTRIB,BYTE
 16296                                  ;	i_need	WFP_START,WORD
 16297                                  ;	i_need	REN_WFP,WORD			 ;BN001
 16298                                  ;	i_need	NAME1,BYTE			 ;BN001
 16299                                  ;	i_need	FoundDel,BYTE
 16300                                  ;	i_need	AUXSTACK,BYTE
 16301                                  ;	i_need	VOLCHNG_FLAG,BYTE
 16302                                  ;	i_need	JShare,DWORD
 16303                                  ;	i_need	FastOpenTable,BYTE		  ; DOS 3.3
 16304                                  ;	i_need	FastTable,BYTE			  ; DOS 4.00
 16305                                  ;
 16306                                  ;	i_need	Del_ExtCluster,WORD		  ; DOS 4.00
 16307                                  ;
 16308                                  ;	i_need	SAVE_BX,WORD			  ; DOS 4.00
 16309                                  ;	i_need	DMAADD,DWORD
 16310                                  ;	i_need	RENAMEDMA,BYTE
 16311                                  
 16312                                  ;----------------------------------------------------------------------------
 16313                                  ;
 16314                                  ; Procedure Name : DOS_DELETE
 16315                                  ;
 16316                                  ; Inputs:
 16317                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16318                                  ;		terminated)
 16319                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16320                                  ;		( = -1 if current dir not involved, else
 16321                                  ;		 Points to first char after last "/" of current dir part)
 16322                                  ;	[THISCDS] Points to CDS being used
 16323                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16324                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16325                                  ; Function:
 16326                                  ;	Delete the specified file(s)
 16327                                  ; Outputs:
 16328                                  ;	CARRY CLEAR
 16329                                  ;		OK
 16330                                  ;	CARRY SET
 16331                                  ;	    AX is error code
 16332                                  ;		error_file_not_found
 16333                                  ;			Last element of path not found
 16334                                  ;		error_path_not_found
 16335                                  ;			Bad path (not in curr dir part if present)
 16336                                  ;		error_bad_curr_dir
 16337                                  ;			Bad path in current directory part of path
 16338                                  ;		error_access_denied
 16339                                  ;			Attempt to delete device or directory
 16340                                  ;		***error_sharing_violation***
 16341                                  ;			Deny both access required, generates an INT 24.
 16342                                  ;			This error is NOT returned. The INT 24H is generated,
 16343                                  ;			  and the file is ignored (not deleted). Delete will
 16344                                  ;			  simply continue on looking for more files.
 16345                                  ;			  Carry will NOT be set in this case.
 16346                                  ; DS preserved, others destroyed
 16347                                  ;
 16348                                  ;----------------------------------------------------------------------------
 16349                                  
 16350                                  FILEFOUND   equ 01h
 16351                                  FILEDELETED equ 10h
 16352                                  
 16353                                  
 16354                                  	; 12/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16355                                  	; DOSCODE:63E9h (MSDOS 5.0, MSDOS.SYS)
 16356                                  
 16357                                  	; 30/01/2024
 16358                                  
 16359                                  DOS_DELETE:
 16360                                  
 16361                                  ;hkn; DOS_Delete is called from file.asm and fcbio.asm. DS has been set up 
 16362                                  ;hkn; appropriately at this point.
 16363                                  
 16364 000024BF E86FED                  	call	TestNet
 16365 000024C2 7306                    	JNC	short LOCAL_DELETE
 16366                                  
 16367                                  ;IF NOT Installed
 16368                                  ;	transfer NET_DELETE
 16369                                  ;ELSE
 16370                                  	;MOV	AX,(MultNET SHL 8) | 19
 16371                                  	;INT	2FH
 16372                                  	;return
 16373                                  
 16374 000024C4 B81311                  	mov	ax,1113h
 16375 000024C7 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE
 16376                                  			; SS = DS = DOS CS, SDA first filename pointer -> 
 16377                                  			;		fully-qualified filename in DOS CS
 16378                                  			; SDA CDS pointer -> current directory structure for drive with file
 16379                                  			; Return: CF set on error
 16380 000024C9 C3                      	retn
 16381                                  ;ENDIF
 16382                                  
 16383                                  LOCAL_DELETE:
 16384 000024CA C606[6F05]00            	MOV	byte [FOUNDDEL],0	; No files found and no files deleted
 16385 000024CF E821EE                  	call	ECritDisk
 16386                                  	;mov	word [CREATING],0E500h
 16387 000024D2 C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Assume not del *.*
 16388 000024D8 8B36[B205]              	MOV	SI,[WFP_START]
 16389                                  SKPNUL:
 16390 000024DC AC                      	LODSB
 16391 000024DD 08C0                    	OR	AL,AL
 16392 000024DF 75FB                    	JNZ	short SKPNUL		; go to end
 16393 000024E1 83EE04                  	SUB	SI,4			; Back over possible "*.*"
 16394 000024E4 813C2A2E                	CMP	WORD [SI],2E2Ah ; "*."
 16395 000024E8 7506                    	JNZ	short TEST_QUEST
 16396 000024EA 807C022A                	CMP	BYTE [SI+2],"*"
 16397 000024EE 741F                    	JZ	short CHECK_ATTS
 16398                                  TEST_QUEST:
 16399 000024F0 83EE09                  	SUB	SI,9		; Back over possible "????????.???"
 16400 000024F3 87FE                    	XCHG	DI,SI
 16401                                  
 16402 000024F5 16                      	push	ss
 16403                                  	;pop	ds ; ! Retro DOS v3.0 BUG !
 16404 000024F6 07                      	pop	es ; 17/05/2019
 16405                                  
 16406 000024F7 B83F3F                  	MOV	AX,"??" ; 3F3Fh
 16407 000024FA B90400                  	MOV	CX,4		; four sets of "??"
 16408 000024FD F3AF                    	REPE	SCASW
 16409 000024FF 751C                    	JNZ	short NOT_ALL
 16410 00002501 87FE                    	XCHG	DI,SI
 16411 00002503 AD                      	LODSW
 16412 00002504 3D2E3F                  	CMP	AX,3F2Eh ; ".?"
 16413 00002507 7514                    	JNZ	short NOT_ALL
 16414 00002509 AD                      	LODSW
 16415 0000250A 3D3F3F                  	CMP	AX,"??"
 16416 0000250D 750E                    	JNZ	short NOT_ALL
 16417                                  CHECK_ATTS:
 16418 0000250F A0[6D05]                	MOV	AL,[SATTRIB]
 16419                                  	;and	al,1Fh
 16420 00002512 241F                    	AND	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 16421                                  					; Look only at hidden bits
 16422                                  	;cmp	al,1Fh
 16423 00002514 3C1F                    	CMP	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 16424                                  					; All must be set
 16425 00002516 7505                    	JNZ	short NOT_ALL
 16426                                  
 16427                                  ; NOTE WARNING DANGER-----
 16428                                  ;    This DELALL stuff is not safe. It allows directories to be deleted.
 16429                                  ;	It should ONLY be used by FORMAT in the ROOT directory.
 16430                                  
 16431 00002518 C606[7F05]00            	MOV	byte [DELALL],0		; DEL *.* - flag deleting all
 16432                                  NOT_ALL:
 16433 0000251D C606[4C03]01            	MOV	byte [NoSetDir],1
 16434 00002522 E84C19                  	call	GetPathNoSet
 16435 00002525 7312                    	JNC	short Del_found
 16436 00002527 750B                    	JNZ	short _bad_path
 16437 00002529 08C9                    	OR	CL,CL
 16438 0000252B 7407                    	JZ	short _bad_path
 16439                                  No_file:
 16440 0000252D B80200                  	MOV	AX,error_file_not_found
 16441                                  ErrorReturn:
 16442 00002530 F9                      	STC
 16443                                  	;call	LCritDisk
 16444                                  	;retn
 16445                                  	; 18/12/2022
 16446 00002531 E9DAED                  	jmp	LCritDisk
 16447                                  
 16448                                  _bad_path:
 16449 00002534 B80300                  	MOV	AX,error_path_not_found
 16450 00002537 EBF7                    	JMP	short ErrorReturn
 16451                                  
 16452                                  Del_found:
 16453 00002539 750C                    	JNZ	short NOT_DIR		; Check for dir specified
 16454 0000253B 803E[7F05]00            	CMP	byte [DELALL],0		; DelAll = 0 allows delete of dir.
 16455 00002540 7405                    	JZ	short NOT_DIR
 16456                                  Del_access_err:
 16457 00002542 B80500                  	MOV	AX,error_access_denied
 16458 00002545 EBE9                    	JMP	short ErrorReturn
 16459                                  
 16460                                  NOT_DIR:
 16461 00002547 08E4                    	OR	AH,AH			; Check if device name
 16462 00002549 78F7                    	JS	short Del_access_err	; Can't delete I/O devices
 16463                                  
 16464                                  ; Main delete loop. CURBUF+2:BX points to a matching directory entry.
 16465                                  
 16466                                  DELFILE:
 16467 0000254B 800E[6F05]01            	OR	byte [FOUNDDEL],FILEFOUND ; file found, not deleted yet
 16468                                  
 16469                                  ; If we are deleting the Volume ID, then we set VOLUME_CHNG flag to make
 16470                                  ; DOS issue a build BPB call the next time this drive is accessed.
 16471                                  
 16472 00002550 1E                      	PUSH	DS
 16473 00002551 8A26[7F05]              	MOV	AH,[DELALL]
 16474 00002555 C53E[E205]              	LDS	DI,[CURBUF]
 16475                                  	
 16476                                  ;hkn; SS override
 16477 00002559 36F606[6B05]01          	TEST	byte [SS:ATTRIB],attr_read_only ; are we deleting RO files too?
 16478 0000255F 7509                    	JNZ	short DoDelete		; yes
 16479                                  
 16480 00002561 F6470B01                	TEST	byte [BX+dir_entry.dir_attr],attr_read_only
 16481 00002565 7403                    	JZ	short DoDelete		; not read only
 16482                                  
 16483                                  	; 30/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16484                                  Skip_it:
 16485 00002567 1F                      	POP	DS
 16486 00002568 EB2F                    	JMP	SHORT DELNXT		; Skip it (Note ES:BP not set)
 16487                                  
 16488                                  DoDelete:
 16489 0000256A E88100                  	call	REN_DEL_Check		; Sets ES:BP = [THISDPB]
 16490                                  	;JNC	short DEL_SHARE_OK
 16491                                  	;POP	DS
 16492                                  	;JMP	SHORT DELNXT		; Skip it
 16493                                  	; 30/01/2024
 16494 0000256D 72F8                    	jc	short Skip_it
 16495                                  
 16496                                  DEL_SHARE_OK:
 16497                                  	; 17/05/2019 - Retro DOS v4.0
 16498                                  	; MSDOS 6.0
 16499                                  	;test	byte [di+5],40h
 16500 0000256F F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16501                                  					;LB. if already dirty		  ;AN000;
 16502 00002573 7507                    	JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 16503 00002575 E83335                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 16504                                  	;or	byte [di+5],40h
 16505 00002578 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16506                                  yesdirty:
 16507 0000257C 8827                    	mov	[bx],ah 
 16508                                  	;MOV	[BX+dir_entry.dir_name],AH ; Put in E5H or 0
 16509 0000257E 8B1C                    	MOV	BX,[SI] 		; Get firclus pointer
 16510 00002580 1F                      	POP	DS
 16511 00002581 800E[6F05]10            	OR	byte [FOUNDDEL],FILEDELETED ; 10h ; Deleted file
 16512                                  
 16513 00002586 83FB02                  	CMP	BX,2
 16514 00002589 720E                    	JB	short DELNXT		; File has invalid FIRCLUS (too small)
 16515                                  	;cmp	bx,[es:bp+0Dh]
 16516 0000258B 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 16517 0000258F 7708                    	JA	short DELNXT		; File has invalid FIRCLUS (too big)
 16518                                  
 16519 00002591 E88528                  	call	RELEASE 		; Free file data
 16520 00002594 7252                    	JC	short No_fileJ
 16521                                  
 16522                                  ; DOS 3.3  FastOpen
 16523                                  
 16524 00002596 E8C200                  	CALL	FastOpen_Delete 	; delete the dir info in fastopen
 16525                                  
 16526                                  ; DOS 3.3  FastOpen
 16527                                  
 16528                                  DELNXT:
 16529 00002599 C42E[8A05]              	LES	BP,[THISDPB]		; Possible to get here without this set
 16530 0000259D E83C18                  	call	GETENTRY		; Registers need to be reset
 16531 000025A0 7246                    	JC	short No_fileJ
 16532 000025A2 E87517                  	call	NEXTENT
 16533 000025A5 73A4                    	JNC	short DELFILE
 16534 000025A7 C42E[8A05]              	LES	BP,[THISDPB]		; NEXTENT sets ES=DOSGROUP
 16535                                  	; 12/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16536                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 16537                                  	;;mov	al,[es:bp+0]
 16538                                  	; 15/12/2022
 16539 000025AB 268A4600                	MOV	AL,[ES:BP]
 16540 000025AF E8F433                  	call	FLUSHBUF
 16541 000025B2 7234                    	JC	short No_fileJ
 16542                                  ;
 16543                                  ; Now we need to test FoundDel for our flags. The cases to consider are:
 16544                                  ;
 16545                                  ;   not found not deleted		file not found
 16546                                  ;   not found	  deleted		*** impossible ***
 16547                                  ;	found not deleted		access denied (read-only)
 16548                                  ;	found	  deleted		no error
 16549                                  ;
 16550 000025B4 F606[6F05]10            	TEST	byte [FOUNDDEL],FILEDELETED ; did we delete a file?
 16551 000025B9 7426                    	JZ	short DelError		; no, figure out what's wrong.
 16552                                  ; We set VOLCHNG_FLAG to indicate that we have changed the volume label
 16553                                  ; and to force the DOS to issue a media check.
 16554 000025BB F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id ; 8
 16555 000025C0 741C                    	jz	short No_Set_Flag
 16556 000025C2 50                      	PUSH	AX
 16557 000025C3 06                      	PUSH	ES
 16558 000025C4 57                      	PUSH	DI
 16559 000025C5 C43E[A205]              	LES	DI,[THISCDS]
 16560 000025C9 268A25                  	MOV	AH,[ES:DI]		; Get drive
 16561 000025CC 80EC41                  	SUB	AH,'A'                  ; Convert to 0-based
 16562 000025CF 8826[A10A]              	mov	[VOLCHNG_FLAG],AH
 16563                                  	
 16564                                  	; MSDOS 6.0
 16565 000025D3 30FF                    	XOR	BH,BH			;>32mb delete volume id from boot record ;AN000;
 16566 000025D5 E8C804                  	call	Set_Media_ID		;>32mb set volume id to boot record	 ;AN000;
 16567                                  	 
 16568 000025D8 E85230                  	call	FATREAD_CDS		; force media check
 16569 000025DB 5F                      	POP	DI
 16570 000025DC 07                      	POP	ES
 16571 000025DD 58                      	POP	AX
 16572                                  No_Set_Flag:
 16573                                  	;call	LCritDisk		; carry is clear
 16574                                  	;retn
 16575                                  	; 18/12/2022
 16576 000025DE E92DED                  	jmp	LCritDisk
 16577                                  DelError:
 16578 000025E1 F606[6F05]01            	TEST	byte [FOUNDDEL],FILEFOUND ; not deleted. Did we find file?
 16579 000025E6 7503                    	JNZ	short Del_access_errJ 	; yes. Access denied
 16580                                  No_fileJ:
 16581 000025E8 E942FF                  	JMP	No_file ; 10/08/2018 		; Nope
 16582                                  Del_access_errJ:
 16583 000025EB E954FF                  	JMP	Del_access_err ; 10/08/2018
 16584                                  
 16585                                  ; 08/08/2018 - Retro DOS v3.0
 16586                                  
 16587                                  ;Break	<REN_DEL_Check - check for access for rename and delete>
 16588                                  ;---------------------------------------------------------------------------
 16589                                  ; Procedure Name : REN_DEL_Check
 16590                                  ;
 16591                                  ; Inputs:
 16592                                  ;	[THISDPB] set
 16593                                  ;	[CURBUF+2]:BX points to entry
 16594                                  ;	[CURBUF+2]:SI points to firclus field of entry
 16595                                  ;	[WFP_Start] points to name
 16596                                  ; Function:
 16597                                  ;	Check for Exclusive access on given file.
 16598                                  ;	  Used by RENAME, SET_FILE_INFO, and DELETE.
 16599                                  ; Outputs:
 16600                                  ;	ES:BP = [THISDPB]
 16601                                  ;	NOTE: The WFP string pointed to by [WFP_Start] Will be Modified.  The
 16602                                  ;		last element will be loaded from the directory entry.  This is
 16603                                  ;		so the name given to the sharer doesn't have any meta chars in
 16604                                  ;		it.
 16605                                  ;	Carry set if sharing violation, INT 24H generated
 16606                                  ;	    NOTE THAT AX IS NOT error_sharing_violation.
 16607                                  ;		This is because input AX is preserved.
 16608                                  ;		Caller must set the error if needed.
 16609                                  ;	Carry clear
 16610                                  ;		OK
 16611                                  ; AX,DS,BX,SI,DI preserved
 16612                                  ;---------------------------------------------------------------------------
 16613                                  
 16614                                  REN_DEL_Check:
 16615                                  
 16616 000025EE 1E                      	PUSH	DS
 16617 000025EF 57                      	PUSH	DI
 16618 000025F0 50                      	PUSH	AX
 16619 000025F1 53                      	PUSH	BX
 16620 000025F2 56                      	PUSH	SI		; Save CURBUF pointers
 16621                                  	
 16622 000025F3 16                      	push	ss
 16623 000025F4 07                      	pop	es
 16624                                  
 16625                                  ;hkn; context ES will assume ES to DOSDATA
 16626                                  ;hkn; ASSUME	ES:DOSGROUP
 16627                                  
 16628                                  ;hkn; SS override
 16629 000025F5 368B3E[B205]            	MOV	DI,[SS:WFP_START] ; ES:DI -> WFP
 16630 000025FA 89DE                    	MOV	SI,BX
 16631                                  
 16632                                  ;hkn; SS override
 16633 000025FC 368E1E[E405]            	MOV	DS,[SS:CURBUF+2] ; DS:SI -> entry (FCB style name)
 16634 00002601 89FB                    	MOV	BX,DI		; Set backup limit for skipback
 16635                                  	;ADD	BX,2		; Skip over d: to point to leading '\'
 16636                                  	; 31/01/2024
 16637 00002603 43                      	inc	bx
 16638 00002604 43                      	inc	bx
 16639 00002605 E8C9EB                  	call	StrLen		; CX is length of ES:DI including NUL
 16640 00002608 49                      	DEC	CX		; Don't include nul in count
 16641 00002609 01CF                    	ADD	DI,CX		; Point to NUL at end of string
 16642 0000260B E89C46                  	call	SkipBack	; Back up one element
 16643 0000260E 47                      	INC	DI		; Point to start of last element
 16644                                  
 16645                                  	; 17/05/2019 - Retro DOS v4.0
 16646                                  ;hkn; SS override
 16647                                  	; MSDOS 6.0
 16648 0000260F 36893E[0106]            	MOV	[SS:SAVE_BX],DI	;IFS. save for DOS_RENAME   ;AN000;
 16649                                  	;
 16650 00002614 E85FFA                  	call	PackName	; Transfer name from entry to ASCIZ tail.
 16651 00002617 5E                      	POP	SI		; Get back entry pointers
 16652 00002618 5B                      	POP	BX
 16653 00002619 53                      	PUSH	BX
 16654 0000261A 56                      	PUSH	SI		; Back on stack
 16655                                  	
 16656 0000261B 16                      	push	ss
 16657 0000261C 1F                      	pop	ds
 16658                                  
 16659                                  ;hkn; context DS will assume ES to DOSDATA
 16660                                  ;hkn; ASSUME	DS:DOSGROUP
 16661                                  
 16662                                  ; Close the file if possible by us.
 16663                                  ;
 16664                                  ;if installed
 16665 0000261D FF1E[C400]              	Call	far [JShare+(13*4)] ; 13 = ShCloseFile
 16666                                  ;else
 16667                                  ;	Call	ShCloseFile
 16668                                  ;endif
 16669 00002621 8C1E[A005]              	MOV	[THISSFT+2],DS
 16670                                  
 16671                                  ;hkn; AUXSTACK is in DOSDATA
 16672 00002625 C706[9E05][6507]        	MOV	word [THISSFT],AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+(384-59)
 16673                                  				; Scratch space
 16674 0000262B 30E4                    	XOR	AH,AH		; Indicate file to DOOPEN (high bit off)
 16675 0000262D E87324                  	call	DOOPEN		; Fill in SFT for share check
 16676 00002630 C43E[9E05]              	LES	DI,[THISSFT]
 16677                                  	;mov	word [es:di+2],10h
 16678 00002634 26C745021000            	MOV	word [ES:DI+SF_ENTRY.sf_mode],SHARING_DENY_BOTH ; 10h
 16679                                  				; requires exclusive access
 16680                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],1 ; Pretend open
 16681 0000263A 26C7050100              	mov	word [ES:DI],1
 16682 0000263F E88C4C                  	call	ShareEnter
 16683 00002642 720D                    	jc	short CheckDone
 16684 00002644 C43E[9E05]              	LES	DI,[THISSFT]
 16685                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],0
 16686 00002648 26C7050000              	mov	word [ES:DI],0	; Pretend closed and free
 16687                                  	
 16688 0000264D E8794C                  	call	ShareEnd	; Tell sharer we're done with THISSFT
 16689 00002650 F8                      	CLC
 16690                                  CheckDone:
 16691 00002651 C42E[8A05]              	LES	BP,[THISDPB]
 16692 00002655 5E                      	POP	SI
 16693 00002656 5B                      	POP	BX
 16694 00002657 58                      	POP	AX
 16695 00002658 5F                      	POP	DI
 16696 00002659 1F                      	POP	DS
 16697 0000265A C3                      	retn
 16698                                  
 16699                                  ;Break	<FastOpen_Delete - delete dir info in fastopen>
 16700                                  ;---------------------------------------------------------------------------
 16701                                  ; Procedure Name : FastOpen_Delete
 16702                                  ; Inputs:
 16703                                  ;	None
 16704                                  ; Function:
 16705                                  ;	Call FastOpen to delete the dir info.
 16706                                  ; Outputs:
 16707                                  ;	None
 16708                                  ;---------------------------------------------------------------------------
 16709                                  
 16710                                  	; 31/01/2024
 16711                                  
 16712                                  FastOpen_Delete:
 16713 0000265B 9C                      	PUSHF			; save flag
 16714 0000265C 56                      	PUSH	SI		; save registers
 16715 0000265D 57                      	push	di ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16716 0000265E 53                      	PUSH	BX
 16717 0000265F 50                      	PUSH	AX
 16718                                  	;mov	si,[WFP_START] ; MSDOS 3.3
 16719                                  ;hkn; SS override
 16720                                  	; 17/05/2019 - Retro DOS v4.0
 16721                                  	; MSDOS 6.0
 16722 00002660 368B36[B205]            	MOV	SI,[ss:WFP_START] ; ds:si points to path name
 16723                                  	
 16724 00002665 B003                    	MOV	AL,FONC_delete	; al = 3
 16725                                  
 16726                                  ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16727                                  %if 0 
 16728                                  fastinvoke:
 16729                                  ;hkn; FastTable is in DOSDATA
 16730                                  	MOV	BX,FastTable+2
 16731                                  	CALL	far [BX]	; call fastopen
 16732                                  	POP	AX		; restore registers
 16733                                  	POP	BX
 16734                                  	;pop	di ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16735                                  	POP	SI
 16736                                  	POPF			; restore flag
 16737                                  	retn
 16738                                  %else
 16739 00002667 EB0F                    	jmp	short fastinvoke ; 31/01/2024
 16740                                  %endif
 16741                                  
 16742                                  	; 13/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16743                                  	; DOSCODE:65A0h (MSDOS 5.0 MSDOS.SYS)
 16744                                  
 16745                                  	; 31/01/2024 Retro DOS v5.0 (Modified PCDOS 7.1 IBMDOS.COM)
 16746                                  	; DOSCODE:65B4h (MSDOS 6.22 MSDOS.SYS)
 16747                                  	; DOSCODE:6D07h (PCDOS 7.1 IBMDOS.COM)
 16748                                  
 16749                                  ;Break	<FastOpen_Rename - Rename directory>	   ; PTR 5622
 16750                                  ;---------------------------------------------------------------------------
 16751                                  ; PROCEDURE Name : FastOpen_Rename
 16752                                  ;
 16753                                  ; Inputs:
 16754                                  ;	 REN_WFP   = Path Name
 16755                                  ;	 NAME1	   = New Name
 16756                                  ; Function:
 16757                                  ;	Call FastOpen to rename the dir entry in the cache
 16758                                  ; Outputs:
 16759                                  ;	None
 16760                                  ;---------------------------------------------------------------------------
 16761                                  
 16762                                  FastOpen_Rename:
 16763                                  	; 17/05/2019 - Retro DOS v4.0
 16764                                  	; 08/08/2018 - Retro DOS v3.0
 16765                                  	; MSDOS 6.0
 16766 00002669 9C                      	PUSHF			;AN001 save flag
 16767 0000266A 56                      	PUSH	SI		;AN001 save registers
 16768 0000266B 57                      	PUSH	DI		;AN001
 16769 0000266C 53                      	PUSH	BX		;AN001
 16770 0000266D 50                      	PUSH	AX		;AN001
 16771                                  	;
 16772                                  ;hkn; SS override
 16773 0000266E 368B36[B405]            	MOV	SI,[SS:REN_WFP]	;AN001	;;AN001  ds:si-->Path name addrs
 16774                                  
 16775                                  ;hkn; NAME1 is in DOSDATA
 16776 00002673 BF[4B05]                	MOV	DI,NAME1	;;AN001  ds:di-->New name addrs
 16777                                  	;mov	al,6
 16778 00002676 B006                    	MOV	AL,FONC_Rename	;;AN001  al = 6
 16779                                  
 16780                                  fastinvoke:	; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16781                                  	
 16782                                  ;hkn; FastTable is in DOSDATA
 16783 00002678 BB[320D]                	MOV	BX,FastTable+2
 16784 0000267B FF1F                    	CALL	far [BX]	;;AN001  call fastopen
 16785                                  	
 16786 0000267D 58                      	POP	AX		; restore registers  ;AN001
 16787 0000267E 5B                      	POP	BX				     ;AN001
 16788 0000267F 5F                      	POP	DI				     ;AN001
 16789 00002680 5E                      	POP	SI				     ;AN001
 16790 00002681 9D                      	POPF			; restore flag	     ;AN001
 16791 00002682 C3                      	retn					     ;AN001
 16792                                  
 16793                                  ;Break	<FastOpen_Update - update dir info in fastopen>
 16794                                  ;---------------------------------------------------------------------------
 16795                                  ; Procedure Name : FastOpen_Update
 16796                                  ;
 16797                                  ; Inputs:
 16798                                  ;	DL     drive number (A=0,B=1,,,)
 16799                                  ;	CX     first cluster #
 16800                                  ;	AH     0 updates dir entry
 16801                                  ;	       1 updates CLUSNUM , BP = new CLUSNUM
 16802                                  ;	ES:DI  directory entry
 16803                                  ; Function:
 16804                                  ;	Call FastOpen to update the dir info.
 16805                                  ; Outputs:
 16806                                  ;	None
 16807                                  ;---------------------------------------------------------------------------
 16808                                  
 16809                                  FastOpen_Update:
 16810 00002683 9C                      	PUSHF			; save flag
 16811 00002684 56                      	PUSH	SI
 16812 00002685 57                      	push	di ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16813 00002686 53                      	PUSH	BX		; save regs
 16814 00002687 50                      	PUSH	AX
 16815 00002688 B004                    	MOV	AL,FONC_update	; al = 4
 16816 0000268A EBEC                    	JMP	short fastinvoke
 16817                                  
 16818                                  	; 17/05/2019
 16819                                  
 16820                                  	; MSDOS 6.0
 16821                                  ;entry Fast_Dispatch		; future fastxxxx entry	;AN000;
 16822                                  ;---------------------------------------------------------------------------
 16823                                  Fast_Dispatch:
 16824                                  ;hkn; FastTable is in DOSDATA
 16825 0000268C BE[320D]                	MOV	SI,FastTable+2	; index to the	     ;AN000;
 16826                                  ;hkn; use SS override
 16827 0000268F 36FF1C                  	CALL	far [SS:SI]	; RMFD call fastopen
 16828 00002692 C3                      	retn
 16829                                  
 16830                                  ;============================================================================
 16831                                  ; RENAME.ASM, MSDOS 6.0, 1991
 16832                                  ;============================================================================
 16833                                  ; 08/08/2018 - Retro DOS v3.0
 16834                                  ; 17/05/2019 - Retro DOS v4.0
 16835                                  
 16836                                  ;	TITLE	DOS_RENAME - Internal RENAME call for MS-DOS
 16837                                  ;	NAME	DOS_RENAME
 16838                                  
 16839                                  ;**	Low level routine for renaming files
 16840                                  ;----------------------------------------------------------------------------
 16841                                  ;	DOS_RENAME
 16842                                  ;
 16843                                  ;	Modification history:
 16844                                  ;
 16845                                  ;	    Created: ARR 30 March 1983
 16846                                  
 16847                                  ;----------------------------------------------------------------------------
 16848                                  ;
 16849                                  ; Procedure Name : DOS_RENAME
 16850                                  ;
 16851                                  ; Inputs:
 16852                                  ;	[WFP_START] Points to SOURCE WFP string ("d:/" must be first 3
 16853                                  ;		chars, NUL terminated)
 16854                                  ;	[CURR_DIR_END] Points to end of Current dir part of string [SOURCE]
 16855                                  ;		( = -1 if current dir not involved, else
 16856                                  ;		 Points to first char after last "/" of current dir part)
 16857                                  ;	[REN_WFP] Points to DEST WFP string ("d:/" must be first 3
 16858                                  ;		chars, NUL terminated)
 16859                                  ;	[THISCDS] Points to CDS being used
 16860                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16861                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16862                                  ; Function:
 16863                                  ;	Rename the specified file(s)
 16864                                  ;	NOTE: This routine uses most of AUXSTACK as a temp buffer.
 16865                                  ; Outputs:
 16866                                  ;	CARRY CLEAR
 16867                                  ;	    OK
 16868                                  ;	CARRY SET
 16869                                  ;	    AX is error code
 16870                                  ;		error_file_not_found
 16871                                  ;			No match for source, or dest path invalid
 16872                                  ;		error_not_same_device
 16873                                  ;			Source and dest are on different devices
 16874                                  ;		error_access_denied
 16875                                  ;			Directory specified (not simple rename),
 16876                                  ;			Device name given, Destination exists.
 16877                                  ;			NOTE: In third case some renames may have
 16878                                  ;			 been done if metas.
 16879                                  ;		error_path_not_found
 16880                                  ;			Bad path (not in curr dir part if present)
 16881                                  ;			SOURCE ONLY
 16882                                  ;		error_bad_curr_dir
 16883                                  ;			Bad path in current directory part of path
 16884                                  ;			SOURCE ONLY
 16885                                  ;		error_sharing_violation
 16886                                  ;			Deny both access required, generates an INT 24.
 16887                                  ; DS preserved, others destroyed
 16888                                  ;
 16889                                  ;----------------------------------------------------------------------------
 16890                                  
 16891                                  	; 14/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16892                                  
 16893                                  	; 31/01/2024
 16894                                  
 16895                                  DOS_RENAME:
 16896                                  
 16897                                  ;hkn; DOS_RENAME is called from file.asm and fcbio.asm. DS has been set up
 16898                                  ;hkn; at this point to DOSDATA.
 16899                                  
 16900 00002693 E89BEB                  	call	TestNet
 16901 00002696 7306                    	JNC	short LOCAL_RENAME
 16902                                  
 16903                                  ;IF NOT Installed
 16904                                  ;	transfer NET_RENAME
 16905                                  ;ELSE
 16906                                  	;MOV	AX,(MultNET SHL 8) OR 17
 16907                                  	;INT	2FH
 16908                                  	;return
 16909                                  
 16910 00002698 B81111                  	mov     ax, 1111h
 16911 0000269B CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE
 16912                                  			; SS = DS = DOS CS, 
 16913                                  			; SDA first filename pointer = offset of fully-qualified old name
 16914                                  			; SDA CDS pointer -> current directory
 16915                                  			; Return: CF set on error
 16916 0000269D C3                      	retn
 16917                                  ;ENDIF
 16918                                  
 16919                                  LOCAL_RENAME:
 16920 0000269E C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 16921 000026A3 8B36[B205]              	MOV	SI,[WFP_START]
 16922 000026A7 8B3E[B405]              	MOV	DI,[REN_WFP]
 16923 000026AB 8A04                    	MOV	AL,[SI]
 16924 000026AD 8A25                    	MOV	AH,[DI]
 16925 000026AF 0D2020                  	OR	AX,2020H		; Lower case
 16926 000026B2 38E0                    	CMP	AL,AH
 16927 000026B4 7405                    	JZ	short SAMEDRV
 16928 000026B6 B81100                  	MOV	AX,error_not_same_device ; 11h
 16929 000026B9 F9                      	STC
 16930 000026BA C3                      	retn
 16931                                  
 16932                                  SAMEDRV:
 16933 000026BB FF36[2E03]              	PUSH	WORD [DMAADD+2]
 16934 000026BF FF36[2C03]              	PUSH	WORD [DMAADD]
 16935 000026C3 8C1E[2E03]              	MOV	[DMAADD+2],DS
 16936                                  
 16937                                  ;hkn; RENAMEDMA is in DOSDATA
 16938 000026C7 C706[2C03][2006]        	MOV	WORD [DMAADD],RENAMEDMA
 16939 000026CD C606[7005]00            	MOV	byte [FOUND_DEV],0	; Rename fails on DEVS, assume not a dev
 16940 000026D2 E81EEC                  	call	ECritDisk
 16941 000026D5 E8EE05                  	call	DOS_SEARCH_FIRST	; Sets [NoSetDir] to 1, [CURBUF+2]:BX
 16942                                  					;    points to entry
 16943 000026D8 7314                    	JNC	short Check_Dev
 16944 000026DA 83F812                  	CMP	AX,error_no_more_files ; 12h
 16945 000026DD 7503                    	JNZ	short GOTERR
 16946 000026DF B80200                  	MOV	AX,error_file_not_found ; 2
 16947                                  GOTERR:
 16948 000026E2 F9                      	STC
 16949                                  RENAME_POP:
 16950 000026E3 8F06[2C03]              	POP	WORD [DMAADD]
 16951 000026E7 8F06[2E03]              	POP	WORD [DMAADD+2]
 16952                                  	;call	LCritDisk
 16953                                  	;retn
 16954                                  	; 16/12/2022
 16955 000026EB E920EC                  	jmp	LCritDisk
 16956                                  
 16957                                  Check_Dev:
 16958                                  	; 17/05/2019 - Retro DOS v4.0
 16959                                  	;mov	ax,5
 16960 000026EE B80500                  	MOV	AX,error_access_denied	; Assume error
 16961                                  	
 16962                                  	; MSDOS 6.0
 16963 000026F1 1E                      	PUSH	DS			      ;PTM.			    ;AN000;
 16964 000026F2 C536[2C03]              	LDS	SI,[DMAADD]		      ;PTM.  check if source a dir  ;AN000;
 16965                                  	;add	si,21
 16966 000026F6 83C615                  	ADD	SI,find_buf.attr	      ;PTM.			    ;AN000;
 16967                                  	;test	byte [si+11],10h
 16968 000026F9 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;PTM.	    ;AN000;
 16969 000026FD 7407                    	JZ	short notdir		      ;PTM.			    ;AN000;
 16970 000026FF 8B36[B405]              	MOV	SI,[REN_WFP]		      ;PTM.  if yes, make sure path ;AN000;
 16971 00002703 E8ECFA                  	call	Check_PathLen2		      ;PTM.   length < 67	    ;AN000;
 16972                                  notdir:
 16973 00002706 1F                      	POP	DS			      ;PTM.			    ;AN000;
 16974 00002707 77D9                    	JA	short GOTERR		      ;PTM.			    ;AN000;
 16975                                  
 16976                                  	; MSDOS 3.3 & MSDOS 6.0
 16977 00002709 803E[7005]00            	CMP	byte [FOUND_DEV],0
 16978 0000270E 75D2                    	JNZ	short GOTERR
 16979                                  
 16980                                  ; At this point a source has been found. There is search continuation info (a
 16981                                  ; la DOS_SEARCH_NEXT) for the source at RENAMEDMA, together with the first
 16982                                  ; directory entry found.
 16983                                  ; [THISCDS], [THISDPB], and [THISDRV] are set and will remain correct
 16984                                  ; throughout the RENAME since it is known at this point that the source and
 16985                                  ; destination are both on the same device.
 16986                                  ; [SATTRIB] is also set.
 16987                                  
 16988 00002710 89DE                    	MOV	SI,BX
 16989                                  	;add	si,26
 16990 00002712 83C61A                  	ADD	SI,dir_entry.dir_first
 16991 00002715 E8D6FE                  	call	REN_DEL_Check
 16992 00002718 7305                    	JNC	short REN_OK1
 16993 0000271A B82000                  	MOV	AX,error_sharing_violation  ; 20h
 16994 0000271D EBC4                    	JMP	short RENAME_POP
 16995                                  
 16996                                  ;------------------------------------------------------------------------------
 16997                                  ; Check if the source is a file or directory. If file, delete the entry
 16998                                  ; from the Fastopen cache. If directory, rename it later
 16999                                  ;------------------------------------------------------------------------------
 17000                                  
 17001                                  REN_OK1:				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 17002                                  	; MSDOS 6.0
 17003                                  	; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 17004                                  	;PUSH	SI
 17005 0000271F C536[2C03]              	LDS	SI,[DMAADD]		;BN00X; PTM. check if source a dir ;AN000;
 17006                                  	;add	si,21
 17007 00002723 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 17008                                  	;test	byte [si+11],10h
 17009 00002726 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM. ;AN000;
 17010                                  	;JZ	short NOT_DIR1		;;BN00XPTM.			;AN000;
 17011 0000272A 7503                    	jnz	short SWAP_SOURCE ; 31/01/2024
 17012                                  	;POP	SI			;BN00X
 17013                                  	;JMP	SHORT SWAP_SOURCE	;BN00X
 17014                                  ;NOT_DIR1:				;;BN00X it is a file, delete the entry
 17015                                  	;POP	SI
 17016                                  
 17017                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17018 0000272C E82CFF                  	call	FastOpen_Delete 	; delete dir info in fastopen DOS 3.3
 17019                                  SWAP_SOURCE:
 17020                                  	; MSDOS 3.3
 17021                                  	;MOV	SI,[REN_WFP]
 17022                                  	;MOV	[WFP_START],SI
 17023                                  	; MSDOS 6.0
 17024 0000272F A1[B205]                	MOV	AX,[WFP_START]		; Swap source and destination
 17025 00002732 8B36[B405]              	MOV	SI,[REN_WFP]		; Swap source and destination
 17026 00002736 8936[B205]              	MOV	[WFP_START],SI		; WFP_START = Destination path
 17027 0000273A A3[B405]                	MOV	[REN_WFP],AX		; REN_WFP   = Source path
 17028                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17029 0000273D C706[B605]FFFF          	MOV	word [CURR_DIR_END],-1	; No current dir on dest
 17030                                  	;mov	word [CREATING],0E5FFh
 17031 00002743 C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256+0FFh  ; Creating, not DEL *.*
 17032                                  					; A rename is like a CREATE_NEW as far
 17033                                  					; as the destination is concerned.
 17034 00002749 E82517                  	call	GetPathNoSet
 17035                                  
 17036                                  ;   If this GETPATH fails due to file not found, we know all renames will work
 17037                                  ;   since no files match the destination name. If it fails for any other
 17038                                  ;   reason, the rename fails on a path not found, or whatever (also fails if
 17039                                  ;   we find a device or directory). If the GETPATH succeeds, we aren't sure
 17040                                  ;   if the rename should fail because we haven't built an explicit name by
 17041                                  ;   substituting for the meta chars in it. In this case the destination file
 17042                                  ;   spec with metas is in [NAME1] and the explicit source name is at RENAMEDMA
 17043                                  ;   in the directory entry part.
 17044                                  	
 17045 0000274C 7223                    	JC	short NODEST
 17046                                  	
 17047                                  	; MSDOS 6.0
 17048                                  	;JZ	short BAD_ACC 		; Dest string is a directory	;AC000;
 17049                                  	; !! MSDOS 3.3 !!
 17050                                  	;JZ	short BAD_ACC ; !!	; Dest string is a directory
 17051                                  
 17052 0000274E 08E4                    	OR	AH,AH			; Device?
 17053 00002750 792C                    	JNS	short SAVEDEST		; No, continue
 17054                                  BAD_ACC:
 17055 00002752 B80500                  	MOV	AX,error_access_denied
 17056 00002755 F9                      	STC
 17057                                  RENAME_CLEAN:
 17058 00002756 9C                      	PUSHF				; Save carry state
 17059 00002757 50                      	PUSH	AX			; and error code (if carry set)
 17060 00002758 A0[7605]                	MOV	AL,[THISDRV]
 17061 0000275B E84832                  	call	FLUSHBUF
 17062 0000275E 58                      	POP	AX
 17063 0000275F 803E[4A03]00            	CMP	byte [FAILERR],0
 17064 00002764 7504                    	JNZ	short BAD_ERR		; User FAILed to I 24
 17065 00002766 9D                      	POPF
 17066 00002767 E979FF                  	JMP	RENAME_POP
 17067                                  
 17068                                  BAD_ERR:
 17069 0000276A 58                      	POP	AX			; Saved flags
 17070                                  	; 16/12/202
 17071                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17072                                  BAD_PATH: ; *
 17073 0000276B B80300                  	MOV	AX,error_path_not_found
 17074 0000276E E971FF                  	JMP	GOTERR
 17075                                  
 17076                                  NODEST:
 17077 00002771 75F8                    	JNZ	short BAD_PATH
 17078 00002773 803E[4A03]00            	CMP	byte [FAILERR],0
 17079 00002778 75F1                    	JNZ	short BAD_PATH		; Search for dest failed 
 17080                                  					; because user FAILed on I 24
 17081                                  	; 14/11/2022
 17082 0000277A 08C9                    	OR	CL,CL
 17083                                  	;JNZ	short SAVEDEST
 17084                                  	; 17/05/2019
 17085 0000277C 74ED                    	jz	short BAD_PATH ; *
 17086                                  ;BAD_PATH: ; *
 17087                                  ;	MOV	AX,error_path_not_found
 17088                                  ;	;STC
 17089                                  ;	;JMP	RENAME_POP
 17090                                  ;	; 17/05/2019
 17091                                  ;	jmp	GOTERR 
 17092                                  
 17093                                  ; 16/12/2022
 17094                                  %if 0
 17095                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17096                                  	or	cl,cl
 17097                                  	jnz	short SAVEDEST
 17098                                  	;jz	short BAD_PATH ; *
 17099                                  BAD_PATH: ; *
 17100                                  	;mov	ax,3
 17101                                  	mov	ax,error_path_not_found
 17102                                  	stc
 17103                                  	jmp	RENAME_POP
 17104                                  %endif
 17105                                  
 17106                                  SAVEDEST:
 17107 0000277E 16                      	push	ss
 17108 0000277F 07                      	pop	es
 17109                                  
 17110                                  ;hkn; NAME1 & NAME2 is in DOSDATA
 17111 00002780 BF[5705]                	MOV	DI,NAME2
 17112 00002783 BE[4B05]                	MOV	SI,NAME1
 17113                                  
 17114 00002786 B90B00                  	MOV	CX,11
 17115 00002789 F3A4                    	REP	MOVSB			; Save dest with metas at NAME2
 17116 0000278B A1[C205]                	MOV	AX,[DIRSTART]
 17117 0000278E A3[6405]                	MOV	[DESTSTART],AX
 17118                                  BUILDDEST:
 17119                                  	; 31/01/2024
 17120                                  	;push	ss
 17121                                  	;pop	es			; needed due to JMP BUILDDEST below
 17122                                  
 17123                                  ;hkn; RENAMEDMA, NAME1, NAME2 in DOSDATA
 17124 00002791 BB[3506]                	MOV	BX,RENAMEDMA+21		; Source of replace chars
 17125 00002794 BF[4B05]                	MOV	DI,NAME1		; Real dest name goes here
 17126 00002797 BE[5705]                	MOV	SI,NAME2		; Raw dest
 17127                                  
 17128 0000279A B90B00                  	MOV	CX,11
 17129                                  
 17130                                  	; 17/05/2019 - Retro DOS v4.0
 17131                                  	
 17132                                  	; MSDOS 6.0
 17133 0000279D E81101                  	CALL	NEW_RENAME		;IFS. replace ? chars	;AN000;
 17134                                  
 17135                                  	; MSDOS 3.3
 17136                                  
 17137                                  ; 08/08/2018 - Retro DOS v3.0
 17138                                  ; MSDOS 6.0 
 17139                                  ;---------------------------------------------------------------------------
 17140                                  ;Procedure: NEW_RENAME
 17141                                  ;
 17142                                  ;Input: DS:SI -> raw string with ?
 17143                                  ;	ES:DI -> destination string
 17144                                  ;	DS:BX -> source string
 17145                                  ;Function: replace ? chars of raw string with chars in source string and
 17146                                  ;	   put in destination string
 17147                                  ;Output: ES:DI-> new string
 17148                                  ;---------------------------------------------------------------------------
 17149                                  ;
 17150                                  ;NEW_RENAME:
 17151                                  ;NEWNAM:
 17152                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 341Ah
 17153                                  ;	LODSB
 17154                                  ;	CMP	AL,"?"
 17155                                  ;	JNZ	short NOCHG
 17156                                  ;	MOV	AL,[BX] 		; Get replace char
 17157                                  ;NOCHG:
 17158                                  ;	STOSB
 17159                                  ;	INC	BX			; Next replace char
 17160                                  ;	LOOP	NEWNAM
 17161                                  ;	; MSDOS 6.0
 17162                                  ;	;retn
 17163                                  
 17164                                  	; MSDOS 3.3 & MSDOS 6.0
 17165                                  	;mov	byte [ATTRIB],16h
 17166 000027A0 C606[6B05]16            	MOV	byte [ATTRIB],attr_all	; Stop duplicates with any attributes
 17167 000027A5 C606[7E05]FF            	MOV	byte [CREATING],0FFH
 17168 000027AA E87219                  	call	DEVNAME 		; Check if we built a device name
 17169 000027AD 73A3                    	JNC	short BAD_ACC
 17170 000027AF 8B1E[6405]              	MOV	BX,[DESTSTART]
 17171 000027B3 C42E[8A05]              	LES	BP,[THISDPB]
 17172 000027B7 E85416                  	call	SETDIRSRCH		; Reset search to start of dir
 17173 000027BA 7296                    	JC	short BAD_ACC 		; Screw up
 17174 000027BC E81115                  	call	FINDENTRY		; See if new name already exists
 17175 000027BF 7391                    	JNC	short BAD_ACC 		; Error if found
 17176 000027C1 803E[4A03]00            	CMP	byte [FAILERR],0
 17177 000027C6 752A                    	JNZ	short BAD_ACCJ		; Find failed because user FAILed to I 24
 17178 000027C8 A1[6405]                	MOV	AX,[DESTSTART]		; DIRSTART of dest
 17179 000027CB 3B06[2F06]              	CMP	AX,[RENAMEDMA+15]	; DIRSTART of source
 17180 000027CF 745D                    	JZ	short SIMPLE_RENAME	; If =, just give new name
 17181                                  
 17182                                  	;mov	al,[RENAMEDMA+32]
 17183 000027D1 A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr]
 17184 000027D4 A810                    	TEST	AL,attr_directory ; 10h
 17185 000027D6 751A                    	JNZ	short BAD_ACCJ		; Can only do a simple rename on dirs,
 17186                                  					; otherwise the . and .. entries get
 17187                                  					; wiped.
 17188 000027D8 A2[6B05]                	MOV	[ATTRIB],AL
 17189 000027DB 8C1E[A005]              	MOV	[THISSFT+2],DS
 17190                                  
 17191                                  ;hkn; AUXSTACK is in DOSDATA
 17192                                  	;mov	si,RENAMEDMA+145h
 17193 000027DF BE[6507]                	MOV	SI,AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+325
 17194 000027E2 8936[9E05]              	MOV	[THISSFT],SI
 17195                                  	;mov	word [SI+2],2
 17196 000027E6 C744020200              	MOV	word [SI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 17197 000027EB 31C9                    	XOR	CX,CX			; Set "device ID" for call into makenode
 17198 000027ED E81B21                  	call	RENAME_MAKE		; This is in mknode
 17199 000027F0 7303                    	JNC	short GOT_DEST
 17200                                  BAD_ACCJ:
 17201 000027F2 E95DFF                  	JMP	BAD_ACC
 17202                                  
 17203                                  GOT_DEST:
 17204 000027F5 53                      	push	bx
 17205 000027F6 C43E[9E05]              	LES	DI,[THISSFT]		; RENAME_MAKE entered this into sharing
 17206 000027FA E8CC4A                  	call	ShareEnd		; we need to remove it.
 17207 000027FD 5B                      	pop	bx
 17208                                  
 17209                                  ; A zero length entry with the correct new name has now been made at
 17210                                  ;   [CURBUF+2]:BX.
 17211                                  
 17212 000027FE C43E[E205]              	LES	DI,[CURBUF]
 17213                                  
 17214                                  	; MSDOS 6.0
 17215                                  	;test	byte [es:di+5],40h
 17216 00002802 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17217                                  					;LB. if already dirty		  ;AN000;
 17218 00002807 7508                    	JNZ	short yesdirty1		;LB.  don't increment dirty count ;AN000;
 17219 00002809 E89F32                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17220                                  	;or	byte [es:di+5],40h
 17221 0000280C 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17222                                  yesdirty1:
 17223 00002811 89DF                    	MOV	DI,BX
 17224                                  	;add	di,11
 17225 00002813 83C70B                  	ADD	DI,dir_entry.dir_attr	; Skip name
 17226                                  
 17227                                  ;hkn; RENAMEDMA is in DOSDATA
 17228                                  	;mov	si,[RENAMEDMA+32]
 17229 00002816 BE[4006]                	MOV	SI,RENAMEDMA+21+dir_entry.dir_attr
 17230                                  	;mov	cx,21
 17231 00002819 B91500                  	MOV	CX,dir_entry.size-dir_entry.dir_attr
 17232 0000281C F3A4                    	REP	MOVSB
 17233 0000281E E87A00                  	CALL	GET_SOURCE
 17234 00002821 7275                    	JC	short RENAME_OVER
 17235 00002823 89DF                    	MOV	DI,BX
 17236 00002825 8E06[E405]              	MOV	ES,[CURBUF+2]
 17237 00002829 B0E5                    	MOV	AL,DIRFREE ; 0E5h
 17238 0000282B AA                      	STOSB				; "free" the source
 17239 0000282C EB13                    	JMP	SHORT DIRTY_IT
 17240                                  
 17241                                  SIMPLE_RENAME:
 17242 0000282E E86A00                  	CALL	GET_SOURCE		; Get the source back
 17243 00002831 7265                    	JC	short RENAME_OVER
 17244 00002833 89DF                    	MOV	DI,BX
 17245 00002835 8E06[E405]              	MOV	ES,[CURBUF+2]
 17246                                  
 17247                                  ;hkn; NAME1 is in DOSDATA
 17248 00002839 BE[4B05]                	MOV	SI,NAME1		; New Name
 17249 0000283C B90B00                  	MOV	CX,11
 17250 0000283F F3A4                    	REP	MOVSB
 17251                                  DIRTY_IT:
 17252 00002841 8B3E[E205]              	MOV	DI,[CURBUF]
 17253                                  
 17254                                  	; MSDOS 6.0
 17255 00002845 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17256                                  					;LB. if already dirty		  ;AN000;
 17257 0000284A 7508                    	JNZ	short yesdirty2		;LB.  don't increment dirty count ;AN000;
 17258 0000284C E85C32                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17259                                  	
 17260 0000284F 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17261                                  
 17262                                  ;------------------------------------------------------------------------------
 17263                                  ; Check if the source is a directory of file. If directory rename it to the
 17264                                  ; the new name in the Fastopen cache buffer. If file name it has been
 17265                                  ; previously deleted.
 17266                                  ;------------------------------------------------------------------------------
 17267                                  
 17268                                  yesdirty2:
 17269                                  	; MSDOS 6.0
 17270 00002854 56                      	PUSH	SI
 17271 00002855 C536[2C03]              	LDS	SI,[DMAADD]		;;BN00XPTM. chek if source a dir ;AN000;
 17272 00002859 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 17273 0000285C F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.	;AN000;
 17274 00002860 7403                    	JZ	short NOT_DIR2		;;BN00XPTM.			;AN000;
 17275 00002862 E804FE                  	call	FastOpen_Rename		;;BN00X rename dir entry in fastopen
 17276                                  	; 31/01/2024
 17277                                  	;POP	SI
 17278                                  	;JMP	SHORT NOT_DIRTY1
 17279                                  NOT_DIR2:				;;BN00X it is a file, delete the entry
 17280 00002865 5E                      	POP	SI
 17281                                  NOT_DIRTY1:				;;BN00X
 17282                                  NEXT_SOURCE:
 17283                                  ;hkn; RENAMEDMA is in DOSDATA
 17284 00002866 BE[2106]                	MOV	SI,RENAMEDMA+1		;Name
 17285                                  
 17286                                  ; WARNING! Rename_Next leaves the disk critical section *ALWAYS*. We need
 17287                                  ; to enter it before going to RENAME_Next.
 17288                                  
 17289 00002869 E887EA                  	call	ECritDisk
 17290 0000286C C606[7E05]00            	MOV	byte [CREATING],0 ; Correct setting for search (we changed it
 17291                                  				  ;  to FF when we made the prev new file).
 17292 00002871 E89405                  	call	RENAME_NEXT
 17293                                  
 17294                                  ; Note, now, that we have exited the previous ENTER and so are back to where
 17295                                  ; we were before.
 17296                                  
 17297 00002874 7222                    	JC	short RENAME_OVER
 17298                                  
 17299                                  	;lea	si,[bx+26]
 17300 00002876 8D771A                  	LEA	SI,[BX+dir_entry.dir_first]
 17301 00002879 E872FD                  	call	REN_DEL_Check
 17302 0000287C 7306                    	JNC	short REN_OK2
 17303 0000287E B82000                  	MOV	AX,error_sharing_violation ; 20h
 17304                                  jmp_to_rename_clean: ; 28/12/2022
 17305 00002881 E9D2FE                  	JMP	RENAME_CLEAN ; 10/08/2018
 17306                                  
 17307                                  ;------------------------------------------------------------------------------
 17308                                  ; Check if file or directory. If file, delete file from the Fastopen cache,
 17309                                  ; if directory, rename directory name in the Fastopen cache.
 17310                                  ;-----------------------------------------------------------------------------
 17311                                  
 17312                                  REN_OK2:
 17313                                  	; MSDOS 6.0
 17314                                  	;mov	al,[RERNAMEDMA+32]
 17315 00002884 A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr] ; PTR P5622
 17316                                  	;test	al,10h
 17317 00002887 A810                    	TEST	AL,attr_directory	;;BN00X directory
 17318 00002889 7408                    	JZ	short Ren_Directory	;;BN00X no - file, delete it
 17319                                  	
 17320                                  	; MSDOS 3.3 & MSDOS 6.0
 17321 0000288B E8CDFD                  	call	FastOpen_Delete 	;;BN00X delete dir info in fastopen DOS 3.3
 17322                                  jmp_to_builddest: ; 28/12/2022
 17323                                  	; 31/01/2024
 17324 0000288E 16                      	push	ss
 17325 0000288F 07                      	pop	es
 17326 00002890 E9FEFE                  	JMP	BUILDDEST		;;BN00X
 17327                                  
 17328                                  	; MSDOS 6.0
 17329                                  Ren_Directory:
 17330 00002893 E8D3FD                  	call	FastOpen_Rename 	;;BN00X delete dir info in fastopen DOS 3.3
 17331                                  	;JMP	BUILDDEST
 17332                                  	; 28/12/2022
 17333 00002896 EBF6                    	jmp	short jmp_to_builddest
 17334                                  
 17335                                  RENAME_OVER:
 17336 00002898 F8                      	CLC
 17337                                  	;JMP	RENAME_CLEAN ; 10/08/2018
 17338                                  	; 28/12/2022
 17339 00002899 EBE6                    	jmp	short jmp_to_rename_clean
 17340                                  
 17341                                  ;----------------------------------------------------------------------------
 17342                                  ; Procedure: GET_SOURCE
 17343                                  ;
 17344                                  ; Inputs:
 17345                                  ;	RENAMEDMA has source info
 17346                                  ; Function:
 17347                                  ;	Re-find the source
 17348                                  ; Output:
 17349                                  ;	[CURBUF] set
 17350                                  ;	[CURBUF+2]:BX points to entry
 17351                                  ;	Carry set if error (currently user FAILed to I 24)
 17352                                  ; DS preserved, others destroyed
 17353                                  ;----------------------------------------------------------------------------
 17354                                  
 17355                                  GET_SOURCE:
 17356 0000289B 8B1E[2F06]              	MOV	BX,[RENAMEDMA+15]	; DirStart
 17357 0000289F C42E[8A05]              	LES	BP,[THISDPB]
 17358 000028A3 E86815                  	call	SETDIRSRCH
 17359 000028A6 7214                    	JC	short gs_ret_label	; retc
 17360 000028A8 E85318                  	call	STARTSRCH
 17361 000028AB A1[2D06]                	MOV	AX,[RENAMEDMA+13]	; Lastent
 17362                                  	;call	GETENT
 17363                                  	; 18/12/2022
 17364 000028AE E92E15                  	jmp	GETENT
 17365                                  ;gs_ret_label:
 17366                                  	;retn
 17367                                  
 17368                                  ; MSDOS 6.0 
 17369                                  ;---------------------------------------------------------------------------
 17370                                  ;Procedure: NEW_RENAME
 17371                                  ;
 17372                                  ;Input: DS:SI -> raw string with ?
 17373                                  ;	ES:DI -> destination string
 17374                                  ;	DS:BX -> source string
 17375                                  ;Function: replace ? chars of raw string with chars in source string and
 17376                                  ;	   put in destination string
 17377                                  ;Output: ES:DI-> new string
 17378                                  ;---------------------------------------------------------------------------
 17379                                  
 17380                                  NEW_RENAME:
 17381                                  	; 17/05/2019 - Retro DOS v4.0
 17382                                  NEWNAM:
 17383                                  	; DOSCODE:680Eh (MSDOS 6.21, MSDOS.SYS)
 17384 000028B1 AC                      	LODSB
 17385 000028B2 3C3F                    	CMP	AL,"?" ; 3Fh
 17386 000028B4 7502                    	JNZ	short NOCHG
 17387 000028B6 8A07                    	MOV	AL,[BX] 		; Get replace char
 17388                                  NOCHG:
 17389 000028B8 AA                      	STOSB
 17390 000028B9 43                      	INC	BX			; Next replace char
 17391 000028BA E2F5                    	LOOP	NEWNAM
 17392                                  	; MSDOS 6.0
 17393                                  gs_ret_label:	; 18/12/2022
 17394 000028BC C3                      	retn
 17395                                  
 17396                                  ;============================================================================
 17397                                  ; FINFO.ASM, MSDOS 6.0, 1991
 17398                                  ;============================================================================
 17399                                  ; 08/08/2018 - Retro DOS v3.0
 17400                                  ; 17/05/2019 - Retro DOS v4.0
 17401                                  
 17402                                  ;**	Low level routines for returning file information and setting file
 17403                                  ;	attributes
 17404                                  ;
 17405                                  ;	GET_FILE_INFO
 17406                                  ;	SET_FILE_ATTRIBUTE
 17407                                  ;
 17408                                  ;	Modification history:
 17409                                  ;
 17410                                  ;	    Created: ARR 30 March 1983
 17411                                  ;
 17412                                  ;	M025: Return access_denied if attempting to set
 17413                                  ;	      attribute of root directory.
 17414                                  ;
 17415                                  
 17416                                  ;SUBTTL GET_FILE_INFO -- Get File Information
 17417                                  
 17418                                  ;---------------------------------------------------------------------------
 17419                                  ; Procedure Name : GET_FILE_INFO
 17420                                  ;
 17421                                  ; Inputs:
 17422                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17423                                  ;		terminated)
 17424                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17425                                  ;		( = -1 if current dir not involved, else
 17426                                  ;		 Points to first char after last "/" of current dir part)
 17427                                  ;	[THISCDS] Points to CDS being used
 17428                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17429                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17430                                  ; Function:
 17431                                  ;	Get Information about a file
 17432                                  ; Returns:
 17433                                  ;	CARRY CLEAR
 17434                                  ;	    AX = Attribute of file
 17435                                  ;	    CX = Time stamp of file
 17436                                  ;	    DX = Date stamp of file
 17437                                  ;	    BX:DI = Size of file (32 bit)
 17438                                  ;	CARRY SET
 17439                                  ;	    AX is error code
 17440                                  ;		error_file_not_found
 17441                                  ;			Last element of path not found
 17442                                  ;		error_path_not_found
 17443                                  ;			Bad path (not in curr dir part if present)
 17444                                  ;		error_bad_curr_dir
 17445                                  ;			Bad path in current directory part of path
 17446                                  ; DS preserved, others destroyed
 17447                                  ;---------------------------------------------------------------------------
 17448                                  
 17449                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17450                                  
 17451                                  GET_FILE_INFO:
 17452                                  
 17453                                  ;hkn; get_file_info is called from file.asm and fcbio.asm. DS has been set 
 17454                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17455                                  
 17456 000028BD E871E9                  	call	TestNet
 17457 000028C0 7306                    	JNC	short LOCAL_INFO
 17458                                  
 17459                                  ;IF NOT Installed
 17460                                  ;	transfer NET_GET_FILE_INFO
 17461                                  ;ELSE
 17462                                  ;	MOV	AX,(MultNET SHL 8) OR 15
 17463                                  ;	INT	2FH
 17464                                  ;	return
 17465                                  
 17466 000028C2 B80F11                  	mov     ax, 110Fh
 17467 000028C5 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES
 17468                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17469                                  			; SDA CDS pointer -> current directory
 17470                                  			; Return: CF set on error, AX = file attributes
 17471 000028C7 C3                      	retn
 17472                                  ;ENDIF
 17473                                  
 17474                                  LOCAL_INFO:
 17475 000028C8 E828EA                  	call	ECritDisk
 17476 000028CB C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17477                                  	; MSDOS 3.3
 17478                                  	;call	GETPATH
 17479                                  	; MSDOS 6.0
 17480 000028D0 E8D700                  	call	GET_FAST_PATH
 17481                                  	; MSDOS 3.3 & MSDOS 6.0
 17482 000028D3 7312                    	JNC	short info_check_dev
 17483                                  NO_PATH:
 17484 000028D5 750B                    	JNZ	short bad_path1
 17485 000028D7 08C9                    	OR	CL,CL
 17486 000028D9 7407                    	JZ	short bad_path1
 17487                                  info_no_file:
 17488 000028DB B80200                  	MOV	AX,error_file_not_found
 17489                                  BadRet:
 17490 000028DE F9                      	STC
 17491                                  JustRet:
 17492                                  	;call	LCritDisk
 17493                                  	;retn
 17494                                  	; 18/12/2022
 17495 000028DF E92CEA                  	jmp	LCritDisk
 17496                                  
 17497                                  bad_path1:
 17498 000028E2 B80300                  	MOV	AX,error_path_not_found
 17499 000028E5 EBF7                    	jmp	short BadRet
 17500                                  
 17501                                  info_check_dev:
 17502 000028E7 08E4                    	OR	AH,AH
 17503 000028E9 78F0                    	JS	short info_no_file	; device
 17504                                  
 17505                                  	; MSDOS 6.0
 17506                                  ;SR;
 17507                                  ; If root dir then CurBuf == -1. Check for this case and return subdir attr
 17508                                  ;for a root dir
 17509                                  
 17510 000028EB 833E[E205]FF            	cmp	word [CURBUF],-1	;is it a root dir?
 17511 000028F0 7506                    	jne	short not_root		;no, CurBuf ptr is valid
 17512                                  
 17513 000028F2 30E4                    	xor	ah,ah
 17514 000028F4 B010                    	mov	al,attr_directory ; 10h
 17515                                  	;clc
 17516                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17517                                  	; (DOSCODE:683Eh)
 17518                                  	; 16/12/2022
 17519                                  	;clc
 17520 000028F6 EBE7                    	jmp	short JustRet
 17521                                  
 17522                                  not_root:
 17523                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17524 000028F8 1E                      	PUSH	DS
 17525 000028F9 8E1E[E405]              	MOV	DS,[CURBUF+2]
 17526 000028FD 89DE                    	MOV	SI,BX
 17527 000028FF 31DB                    	XOR	BX,BX			; Assume size=0 (dir)
 17528 00002901 89DF                    	MOV	DI,BX
 17529                                  	;mov	cx,[si+16h]
 17530 00002903 8B4C16                  	MOV	CX,[SI+dir_entry.dir_time]
 17531                                  	;mov	dx,[si+18h]
 17532 00002906 8B5418                  	MOV	DX,[SI+dir_entry.dir_date]
 17533 00002909 30E4                    	XOR	AH,AH
 17534                                  	;mov	al,[si+0Bh]
 17535 0000290B 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 17536                                  	;test	al,10h
 17537 0000290E A810                    	TEST	AL,attr_directory
 17538 00002910 7506                    	JNZ	short NO_SIZE
 17539                                  	;mov	di,[si+1Ch]
 17540 00002912 8B7C1C                  	MOV	DI,[SI+dir_entry.dir_size_l]
 17541                                  	;mov	bx,[si+1Eh]
 17542 00002915 8B5C1E                  	MOV	BX,[SI+dir_entry.dir_size_h]
 17543                                  NO_SIZE:
 17544 00002918 1F                      	POP	DS
 17545                                  	;CLC
 17546                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17547                                  	; (DOSCODE:6864h)
 17548                                  	; 16/12/2022
 17549                                  	;clc
 17550 00002919 EBC4                    	jmp	short JustRet
 17551                                  
 17552                                  ;Break	<SET_FILE_ATTRIBUTE -- Set File Attribute>
 17553                                  ;-------------------------------------------------------------------------------
 17554                                  ; Procedure Name : SET_FILE_ATTRIBUTE
 17555                                  ; Inputs:
 17556                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17557                                  ;		terminated)
 17558                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17559                                  ;		( = -1 if current dir not involved, else
 17560                                  ;		 Points to first char after last "/" of current dir part)
 17561                                  ;	[THISCDS] Points to CDS being used
 17562                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17563                                  ;	[SATTRIB] is attribute of search (determines what files may be found)
 17564                                  ;	AX is new attributes to give to file
 17565                                  ; Function:
 17566                                  ;	Set File Attributes
 17567                                  ; Returns:
 17568                                  ;	CARRY CLEAR
 17569                                  ;	    No error
 17570                                  ;	CARRY SET
 17571                                  ;	    AX is error code
 17572                                  ;		error_file_not_found
 17573                                  ;			Last element of path not found
 17574                                  ;		error_path_not_found
 17575                                  ;			Bad path (not in curr dir part if present)
 17576                                  ;		error_bad_curr_dir
 17577                                  ;			Bad path in current directory part of path
 17578                                  ;		error_access_denied
 17579                                  ;			Attempt to set an attribute which cannot be set
 17580                                  ;			(attr_directory, attr_volume_ID)
 17581                                  ;		error_sharing_violation
 17582                                  ;			Sharing mode of file did not allow the change
 17583                                  ;			(this request requires exclusive write/read access)
 17584                                  ;			(INT 24H generated)
 17585                                  ; DS preserved, others destroyed
 17586                                  ;----------------------------------------------------------------------------
 17587                                  
 17588                                  SET_FILE_ATTRIBUTE:
 17589                                  
 17590                                  ;hkn; set_file_attr is called from file.asm. DS has been set 
 17591                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17592                                  
 17593 0000291B A9D8FF                  	TEST	AX,~attr_changeable ; 0FFD8h
 17594 0000291E 7414                    	JZ	short set_look
 17595                                  _BAD_ACC:
 17596 00002920 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17597 00002925 C606[2703]07            	MOV	byte [EXTERR_CLASS],errCLASS_Apperr ; 7
 17598 0000292A C606[2603]04            	MOV	byte [EXTERR_ACTION],errACT_Abort ; 4
 17599 0000292F B80500                  	MOV	AX,error_access_denied ; 5
 17600 00002932 F9                      	STC
 17601 00002933 C3                      	retn
 17602                                  
 17603                                  set_look:
 17604 00002934 E8FAE8                  	call	TestNet
 17605 00002937 7308                    	JNC	short LOCAL_SET
 17606                                  
 17607                                  ;IF NOT Installed
 17608                                  ;	transfer NET_SEQ_SET_FILE_ATTRIBUTE
 17609                                  ;ELSE
 17610 00002939 50                      	PUSH	AX
 17611                                  	
 17612                                  	;MOV	AX,(MultNET SHL 8) OR 14
 17613                                  	;INT	2FH
 17614                                  
 17615 0000293A B80E11                  	mov     ax, 110Eh
 17616 0000293D CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES
 17617                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17618                                  			; SDA CDS pointer -> current directory
 17619                                  			; STACK: WORD new file attributes
 17620                                  			; Return: CF set on error
 17621                                  
 17622 0000293F 5B                      	POP	BX			; clean stack
 17623 00002940 C3                      	retn
 17624                                  ;ENDIF
 17625                                  
 17626                                  LOCAL_SET:
 17627 00002941 E8AFE9                  	call	ECritDisk
 17628 00002944 50                      	PUSH	AX			; Save new attributes
 17629 00002945 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17630 0000294A E81E15                  	call	GETPATH 		; get path through fastopen if there	;AC000;
 17631 0000294D 7308                    	JNC	short set_check_device
 17632 0000294F 5B                      	POP	BX			; Clean stack (don't zap AX)
 17633 00002950 EB83                    	JMP	short NO_PATH
 17634                                  
 17635                                  	; MSDOS 6.0
 17636                                  cannot_set_root:			; M025:
 17637 00002952 B80500                  	mov	ax,error_access_denied	; M025: return error is attempting
 17638                                  	;stc				; M025: to set attr. of root
 17639                                  	;jmp	short OK_BYE		; M025:
 17640                                  	; 01/02/2024
 17641 00002955 EB87                    	jmp	short BadRet
 17642                                  
 17643                                  set_check_device:
 17644 00002957 08E4                    	OR	AH,AH
 17645 00002959 7906                    	JNS	short set_check_share
 17646 0000295B 58                      	POP	AX
 17647 0000295C E8AFE9                  	call	LCritDisk
 17648 0000295F EBBF                    	JMP	short _BAD_ACC 		; device
 17649                                  
 17650                                  set_check_share:
 17651 00002961 58                      	POP	AX			; Get new attributes
 17652                                  
 17653                                  	; MSDOS 6.0
 17654 00002962 833E[E205]FF            	cmp	word [CURBUF], -1	; M025: Q: is this the root dir
 17655 00002967 74E9                    	je	short cannot_set_root	; M025: Y: return error
 17656                                  
 17657                                  	; MSDOS 3.3 & MSDOS 6.0
 17658 00002969 E882FC                  	call	REN_DEL_Check
 17659 0000296C 7305                    	JNC	short set_do
 17660 0000296E B82000                  	MOV	AX,error_sharing_violation ; 32
 17661 00002971 EB34                    	jmp	short OK_BYE
 17662                                  
 17663                                  set_do:
 17664                                  	; MSDOS 3.3 & MSDOS 6.0
 17665 00002973 C43E[E205]              	LES	DI,[CURBUF]
 17666 00002977 2680670BD8              	AND	BYTE [ES:BX+dir_entry.dir_attr],~attr_changeable ; 0D8h
 17667 0000297C 2608470B                	OR	BYTE [ES:BX+dir_entry.dir_attr],AL
 17668                                  
 17669                                  	; MSDOS 6.0
 17670 00002980 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17671                                  					;LB. if already dirty		  ;AN000;
 17672 00002985 7508                    	JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 17673 00002987 E82131                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17674                                  	
 17675 0000298A 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17676                                  yesdirty3:
 17677 0000298F A0[7605]                	MOV	AL,[THISDRV]
 17678                                  ;;;; 10/1/86 F.C update fastopen cache
 17679 00002992 52                      	PUSH	DX
 17680 00002993 57                      	PUSH	DI
 17681 00002994 B400                    	MOV	AH,0		  ; dir entry update
 17682 00002996 88C2                    	MOV	DL,AL		  ; drive number A=0,B=1,,
 17683 00002998 89DF                    	MOV	DI,BX		  ; ES:DI -> dir entry
 17684 0000299A E8E6FC                  	call	FastOpen_Update
 17685 0000299D 5F                      	POP	DI
 17686 0000299E 5A                      	POP	DX
 17687                                  ;;;; 9/11/86 F.C update fastopen cache
 17688 0000299F E80430                  	call	FLUSHBUF
 17689 000029A2 7303                    	JNC	short OK_BYE
 17690 000029A4 B80200                  	MOV	AX,error_file_not_found
 17691                                  OK_BYE:
 17692                                  	;call	LCritDisk
 17693                                  	;retn
 17694                                  	; 16/12/2022
 17695 000029A7 E964E9                  	jmp	LCritDisk
 17696                                  
 17697                                  	; 17/05/2019 - Retro DOS v4.0
 17698                                  
 17699                                  	; MSDOS 6.0
 17700                                  GET_FAST_PATH:
 17701                                  ;hkn; use SS override for FastOpenFlg
 17702 000029AA 36800E[3A0D]01          	OR	byte [ss:FastOpenFlg],FastOpen_Set
 17703                                  					;FO. trigger fastopen	;AN000;
 17704 000029B0 E8B814                  	call	GETPATH
 17705 000029B3 9C                      	PUSHF			 	;FO.			;AN000;
 17706 000029B4 368026[3A0D]80          	AND	byte [ss:FastOpenFlg],Fast_yes 
 17707                                  					;FO. clear all fastopen flags ;AN000;
 17708 000029BA 9D                      	POPF				;FO.			;AN000;
 17709 000029BB C3                      	retn
 17710                                  
 17711                                  ;============================================================================
 17712                                  ; DUP.ASM, MSDOS 6.0, 1991
 17713                                  ;============================================================================
 17714                                  ; 08/08/2018 - Retro DOS v3.0
 17715                                  ; 17/05/2019 - Retro DOS v4.0
 17716                                  
 17717                                  ;** 	Low level DUP routine for use by EXEC when creating a new process.
 17718                                  ;   	Exports the DUP to the server machine and increments the SFT ref count
 17719                                  ;
 17720                                  ;	DOS_DUP
 17721                                  ;
 17722                                  ;	Modification history:
 17723                                  ;
 17724                                  ;	  Created: ARR 30 March 1983
 17725                                  
 17726                                  ;BREAK <DOS_DUP -- DUP SFT across network>
 17727                                  ;---------------------------------------------------------------------------
 17728                                  ; Procedure Name : DOS_DUP
 17729                                  ;
 17730                                  ; Inputs:
 17731                                  ;	[THISSFT] set to the SFT for the file being DUPed
 17732                                  ;		(a non net SFT is OK, in this case the ref
 17733                                  ;		 count is simply incremented)
 17734                                  ; Function:
 17735                                  ;	Signal to the devices that a logical open is occurring
 17736                                  ; Returns:
 17737                                  ;	ES:DI point to SFT
 17738                                  ;    Carry clear
 17739                                  ;	SFT ref_count is incremented
 17740                                  ; Registers modified: None.
 17741                                  ; NOTE:
 17742                                  ;	This routine is called from $CREATE_PROCESS_DATA_BLOCK at DOSINIT
 17743                                  ;	time with SS NOT DOSGROUP. There will be no Network handles at
 17744                                  ;	that time.
 17745                                  ;---------------------------------------------------------------------------
 17746                                  
 17747                                  DOS_DUP:
 17748                                  	;LES	DI,[CS:THISSFT]  ; MSDOS 3.3
 17749                                  
 17750                                  	; MSDOS 6.0
 17751 000029BC 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 17752 000029C1 26C43E[9E05]            	les	di,[es:THISSFT]
 17753                                  
 17754                                  	;Entry	Dos_Dup_Direct
 17755                                  DOS_Dup_Direct:
 17756 000029C6 E881E8                  	call	IsSFTNet
 17757 000029C9 7503                    	JNZ	short DO_INC
 17758 000029CB E86A1B                  	call	DEV_OPEN_SFT
 17759                                  DO_INC:
 17760                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 17761 000029CE 26FF05                  	inc	word [ES:DI]		; Clears carry (if this ever wraps
 17762                                  					;   we're in big trouble anyway)
 17763 000029D1 C3                      	retn
 17764                                  
 17765                                  ;============================================================================
 17766                                  ; CREATE.ASM, MSDOS 6.0, 1991
 17767                                  ;============================================================================
 17768                                  ; 08/08/2018 - Retro DOS v3.0
 17769                                  ; 18/05/2019 - Retro DOS v4.0
 17770                                  
 17771                                  ;TITLE	DOS_CREATE/DOS_CREATE_NEW - Internal CREATE calls for MS-DOS
 17772                                  ;NAME	DOS_CREATE
 17773                                  ;----------------------------------------------------------------------------
 17774                                  ;**	Internal Create and Create new to create a local or NET file and SFT.
 17775                                  ;
 17776                                  ;	DOS_CREATE
 17777                                  ;	DOS_CREATE_NEW
 17778                                  ;	SET_MKND_ERR
 17779                                  ;	SET_Media_ID
 17780                                  ;	SET_EXT_Mode
 17781                                  ;
 17782                                  ;	Revision history:
 17783                                  ;
 17784                                  ;	    A000 version 4.00	  Jan. 1988
 17785                                  ;	    A001  D490 -- Change IOCTL subfunctios from 63h,43h to 66h, 46h
 17786                                  
 17787                                  ;Installed = TRUE
 17788                                  
 17789                                  ;	i_need	THISSFT,DWORD
 17790                                  ;	i_need	THISCDS,DWORD
 17791                                  ;	I_need	EXTERR,WORD
 17792                                  ;	I_Need	ExtErr_locus,BYTE
 17793                                  ;	I_need	JShare,DWORD
 17794                                  ;	I_need	VOLCHNG_FLAG,BYTE
 17795                                  ;	I_need	SATTRIB,BYTE
 17796                                  ;	I_need	CALLVIDM,DWORD
 17797                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000; extended open
 17798                                  ;	I_need	NAME1,BYTE			  ;AN000;
 17799                                  ;	I_need	NO_NAME_ID,BYTE 		  ;AN000;
 17800                                  ;	I_need	Packet_Temp,WORD		  ;AN000;
 17801                                  ;	I_need	DOS34_FLAG,WORD 		  ;AN000;
 17802                                  ;	I_need	SAVE_BX,WORD			  ;AN000;
 17803                                  
 17804                                  ;***	DOS_CREATE - Create a File
 17805                                  ;----------------------------------------------------------------------------
 17806                                  ;	DOS_Create is called to create the specified file, truncating
 17807                                  ;	the old one if it exists.
 17808                                  ;
 17809                                  ;	ENTRY	AX is Attribute to create
 17810                                  ;		(ds) = DOSDATA
 17811                                  ;		[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17812                                  ;			terminated)
 17813                                  ;		[CURR_DIR_END] Points to end of Current dir part of string
 17814                                  ;			( = -1 if current dir not involved, else
 17815                                  ;			 Points to first char after last "/" of current dir part)
 17816                                  ;		[THISCDS] Points to CDS being used
 17817                                  ;			(Low word = -1 if NUL CDS (Net direct request))
 17818                                  ;		[THISSFT] Points to SFT to fill in if file created
 17819                                  ;			(sf_mode field set so that FCB may be detected)
 17820                                  ;		[SATTRIB] Is attribute of search, determines what files can be found
 17821                                  ;
 17822                                  ;	EXIT	sf_ref_count is NOT altered
 17823                                  ;		CARRY CLEAR
 17824                                  ;		    THISSFT filled in.
 17825                                  ;			sf_mode = unchanged for FCB, sharing_compat + open_for_both
 17826                                  ;		CARRY SET
 17827                                  ;		    AX is error code
 17828                                  ;			error_path_not_found
 17829                                  ;				Bad path (not in curr dir part if present)
 17830                                  ;			error_bad_curr_dir
 17831                                  ;				Bad path in current directory part of path
 17832                                  ;			error_access_denied
 17833                                  ;				Attempt to re-create read only file , or
 17834                                  ;				create a second volume id or create a dir
 17835                                  ;			error_sharing_violation
 17836                                  ;				The sharing mode was correct but not allowed
 17837                                  ;				generates an INT 24
 17838                                  ;	USES	all but DS
 17839                                  ;----------------------------------------------------------------------------
 17840                                  
 17841                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17842                                  	; DOSCODE:6920h (MSDOS 5.0, MSDOS.SYS)
 17843                                  
 17844                                  DOS_CREATE:
 17845                                  	; 18/05/2019 - Retro DOS v4.0
 17846                                  	; DOSCODE:6934h (MSDOS 6.21, MSDOS.SYS)
 17847                                  
 17848                                  ;hkn; dispatched to from file.asm and fcbio.asm. DS set up to DOSDATA at 
 17849                                  ;hkn; this point.
 17850                                  
 17851 000029D2 30E4                    	XOR	AH,AH		; Truncate is OK
 17852                                  
 17853                                  ;	Enter here from Dos_Create_New
 17854                                  ;
 17855                                  ;	(ah) = 0 iff truncate OK
 17856                                  
 17857                                  Create_inter:
 17858 000029D4 A8C0                    	TEST	AL,~(attr_all+attr_ignore+attr_volume_id) ; 80h
 17859                                  				; Mask out any meaningless bits
 17860 000029D6 7511                    	JNZ	short AttErr
 17861 000029D8 A808                    	TEST	AL,attr_volume_id
 17862 000029DA 7407                    	JZ	short NoReset
 17863                                  	
 17864                                  	; MSDOS 6.0
 17865                                  	; 16/12/2022
 17866 000029DC 800E[1106]80            	OR	byte [DOS34_FLAG],DBCS_VOLID ; 80h ;AN000;FOR dbcs volid
 17867                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17868                                  	;or	word [DOS34_FLAG],DBCS_VOLID ; 80h 
 17869                                  	
 17870 000029E1 B008                    	MOV	AL,attr_volume_id ; 8
 17871                                  NoReset:
 17872 000029E3 0C20                    	OR	AL,attr_archive ; File changed  ; 20h
 17873 000029E5 A850                    	TEST	AL,attr_directory+attr_device ; 50h
 17874 000029E7 740A                    	JZ	short ATT_OK
 17875                                  AttErr:
 17876 000029E9 B80500                  	MOV	AX,5		; Attribute problem
 17877 000029EC C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17878 000029F1 EB62                    	JMP	SHORT SET_MKND_ERR ; Gotta use MKDIR to make dirs, NEVER allow
 17879                                  				   ;	attr_device to be set.
 17880                                  ATT_OK:
 17881 000029F3 C43E[9E05]              	LES	DI,[THISSFT]
 17882 000029F7 06                      	PUSH	ES
 17883 000029F8 C436[A205]              	LES	SI,[THISCDS]
 17884 000029FC 83FEFF                  	CMP	SI,-1
 17885 000029FF 751B                    	JNE	short TEST_RE_NET
 17886                                  
 17887                                  ;	No CDS, it must be redirected.
 17888                                  
 17889 00002A01 07                      	POP	ES
 17890                                  
 17891                                  	; MSDOS 6.0
 17892                                  ;Extended open hooks
 17893                                  	;test	byte [EXTOPEN_ON],1
 17894 00002A02 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17895 00002A07 740D                    	JZ	short NOEXTOP 		    ;AN000;EO. no, do normal
 17896                                  IFS_extopen:				    ;AN000;EO.
 17897 00002A09 50                      	PUSH	AX			    ;AN000;EO. pass create attr
 17898                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;AN000;EO. issue extended open verb
 17899 00002A0A B82E11                  	mov	ax,112Eh
 17900                                  NOEXTOP2:	; 01/02/2024 (PCDOS 7.1 IBMDOS.COM)
 17901 00002A0D CD2F                    	INT	2FH			    ;AN000;EO.
 17902 00002A0F 5B                      	POP	BX			    ;AN000;EO. trash bx
 17903 00002A10 C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;AN000;EO.
 17904 00002A15 C3                      	retn				    ;AN000;EO.
 17905                                  NOEXTOP:				    ;AN000;
 17906                                  ;Extended open hooks
 17907                                  
 17908                                  ;IF NOT Installed
 17909                                  ;	transfer NET_SEQ_CREATE
 17910                                  ;ELSE
 17911 00002A16 50                      	PUSH	AX
 17912                                  
 17913                                  	;MOV	AX,(MultNET SHL 8) OR 24
 17914                                  	;INT	2FH
 17915                                  
 17916 00002A17 B81811                  	mov	ax,1118h
 17917                                  	; 01/02/2024
 17918                                  	;int	2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE FILE
 17919                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17920                                  			; SDA first filename pointer -> fully-qualified name of file
 17921                                  			; STACK: WORD file creation mode???
 17922                                  
 17923                                  	;POP	BX			; BX is trashed anyway
 17924                                  	;retn
 17925 00002A1A EBF1                    	jmp	short NOEXTOP2 ; 01/02/2024
 17926                                  ;ENDIF
 17927                                  
 17928                                  ;	We have a CDS. See if it's network
 17929                                  
 17930                                  TEST_RE_NET:
 17931                                  	;;test	word [es:si+43h],8000h
 17932                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 17933                                  	; 07/12/2022
 17934                                  	;test	byte [es:si+44h],80h
 17935                                  	; 17/12/2022
 17936 00002A1C 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 17937 00002A21 07                      	POP	ES
 17938 00002A22 7417                    	JZ	short LOCAL_CREATE
 17939                                  
 17940                                  	; MSDOS 6.0
 17941 00002A24 E8BD00                  	CALL	Set_EXT_mode		    ;AN000;EO.
 17942 00002A27 7205                    	JC	SHORT dochk		    ;AN000;EO.
 17943                                  	;;or	word [es:di+2],2
 17944                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17945                                  	; 17/12/2022
 17946 00002A29 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17947                                  
 17948                                  ;Extended open hooks
 17949                                  dochk:
 17950 00002A2E F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17951 00002A33 75D4                    	JNZ	short IFS_extopen	    ;AN000;EO. yes, issue extended open
 17952                                  ;Extended open hooks
 17953                                  
 17954                                  ;IF NOT Installed
 17955                                  ;	transfer NET_CREATE
 17956                                  ;ELSE
 17957 00002A35 50                      	PUSH	AX
 17958                                  	
 17959                                  	;MOV	AX,(MultNET SHL 8) OR 23
 17960                                  	;INT	2FH
 17961                                  	
 17962 00002A36 B81711                  	mov	ax,1117h
 17963                                  	
 17964                                  	; 01/02/2024
 17965                                  	;int	2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE REMOTE FILE
 17966                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17967                                  			; SDA first filename pointer -> fully-qualified name of file to open
 17968                                  			; SDA CDS pointer -> current directory
 17969                                  			; Return: CF set on error
 17970                                  
 17971                                  	;POP	BX			; BX is trashed anyway
 17972                                  ;nomore:
 17973                                  	;retn
 17974 00002A39 EBD2                    	jmp	short NOEXTOP2 ; 01/02/2024
 17975                                  ;ENDIF
 17976                                  
 17977                                  ;**	It's a local create. We have a local CDS for it.
 17978                                  
 17979                                  LOCAL_CREATE:
 17980                                  	; MSDOS 6.0
 17981 00002A3B E8A600                  	CALL	Set_EXT_mode	;AN000;EO. set mode if from extended open
 17982 00002A3E 7205                    	JC	short setdone	;AN000;EO.
 17983                                  	
 17984                                  	; MSDOS 3.3 & MSDOS 6.0
 17985                                  	; 17/12/2022
 17986                                  	;;or	word [es:di+2],2
 17987                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 17988                                  	;or	byte [es:di+2],2
 17989 00002A40 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both	
 17990                                  setdone:
 17991 00002A45 E8ABE8                  	call	ECritDisk
 17992 00002A48 E89A1E                  	call	MakeNode
 17993 00002A4B 7317                    	JNC	short Create_ok
 17994 00002A4D C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1	; indicate no change in volume label
 17995 00002A52 E8B9E8                  	call	LCritDisk
 17996                                  
 17997                                  	;entry	SET_MKND_ERR
 17998                                  SET_MKND_ERR:
 17999                                  
 18000                                  ;	Looks up MakeNode errors and converts them. AL is MakeNode
 18001                                  ;	error, SI is GETPATH bad spot return if path_not_found error.
 18002                                  
 18003                                  ;hkn; CRTERRTAB is in TABLE seg (DOSCODE)
 18004 00002A55 BB[5C2A]                	MOV     BX,CRTERRTAB
 18005                                  	;XLAT  ; MSDOS 3.3
 18006                                  	; 18/05/2019 - Retro DOS v4.0
 18007 00002A58 2E                      	CS
 18008 00002A59 D7                      	XLAT
 18009                                  CreatBadRet:
 18010 00002A5A F9                      	STC
 18011 00002A5B C3                      	retn
 18012                                  
 18013                                  ; 13/05/2019 - Retro DOS v4.0
 18014                                  ; DOSCODE:69C4h (MSDOS 6.21, MSDOS.SYS)
 18015                                  ; ---------------------------------------------------------------------------
 18016                                  
 18017                                  ;** Internal Create and Create new to create a local or NET file and SFT.
 18018                                  
 18019                                  ; 17/07/2018 - Retro DOS v3.0
 18020                                  ; Offset 12B1h of IBMDOS.COM (MSDOS 3.3), 1987
 18021                                  
 18022                                  ;CRTERRTAB: ; 19/07/2018 - MSDOS 3.3	
 18023                                  ;	db	0,5,52h,50h,3,5,20h
 18024                                  
 18025                                  ;CRTERRTAB: ; 18/05/2019 - MSDOS 6.0	
 18026                                  ;	db	0,5,52h,50h,3,5,20h,2
 18027                                  
 18028                                  ; 08/08/2018
 18029                                  
 18030                                  CRTERRTAB:	;LABEL BYTE	; Lookup table for MakeNode returns
 18031 00002A5C 00                      	DB	0			; none
 18032 00002A5D 05                      	DB	error_access_denied	; MakeNode error 1
 18033 00002A5E 52                      	DB	error_cannot_make	; MakeNode error 2
 18034 00002A5F 50                      	DB	error_file_exists	; MakeNode error 3
 18035 00002A60 03                      	DB	error_path_not_found	; MakeNode error 4
 18036 00002A61 05                      	DB	error_access_denied	; MakeNode error 5
 18037 00002A62 20                      	DB	error_sharing_violation ; MakeNode error 6
 18038                                  	; MSDOS 6.0
 18039 00002A63 02                      	DB	error_file_not_found	; MakeNode error 7
 18040                                  
 18041                                  ; ---------------------------------------------------------------------------
 18042                                  
 18043                                  ; We have just created a new file. This results in the truncation of old
 18044                                  ; files. We must inform the sharer to slash all the open SFT's for this
 18045                                  ; file to the current size.
 18046                                  
 18047                                  ; If we created a volume id on the diskette, set the VOLCHNG_FLAG to logical
 18048                                  ; drive number to force a Build BPB after Media Check.
 18049                                  
 18050                                  ;;; FASTOPEN 8/29/86
 18051                                  Create_ok:
 18052 00002A64 E8F4FB                  	call	FastOpen_Delete
 18053                                  ;;; FASTOPEN 8/29/86
 18054 00002A67 A0[6D05]                	mov	al,[SATTRIB]
 18055 00002A6A A808                    	test	al,attr_volume_id
 18056 00002A6C 741C                    	jz	short NoVolLabel
 18057 00002A6E C43E[A205]              	LES	DI,[THISCDS]
 18058                                  	;mov	ah,[ES:DI+curdir.text]	; get drive letter
 18059 00002A72 268A25                  	mov	ah,[ES:DI] ; 09/08/2018
 18060 00002A75 80EC41                  	sub	ah,'A'	; 41h		; convert to drive number
 18061 00002A78 8826[A10A]              	mov	[VOLCHNG_FLAG],ah	;Set flag to indicate volid change
 18062                                  	
 18063                                  	; 18/05/2019 - Retro DOS v4.0
 18064                                  
 18065                                  	; MSDOS 6.0
 18066 00002A7C B701                    	MOV	BH,1			;AN000;>32mb set volume id to boot record
 18067 00002A7E E81F00                  	CALL	Set_Media_ID		;AN000;>32mb
 18068                                  	
 18069 00002A81 E86FE8                  	call	ECritDisk
 18070 00002A84 E8A62B                  	call	FATREAD_CDS		; force a media check
 18071 00002A87 E884E8                  	call	LCritDisk
 18072                                  
 18073                                  NoVolLabel:
 18074 00002A8A B80200                  	MOV	ax,2
 18075 00002A8D C43E[9E05]              	LES	DI,[THISSFT]
 18076                                  ;if installed
 18077                                  	;call	JShare + 14 * 4
 18078 00002A91 FF1E[C800]              	call	far [JShare+(14*4)] ; 14 = ShSU
 18079                                  ;else
 18080                                  ;	Call	ShSU
 18081                                  ;endif
 18082 00002A95 E876E8                  	call	LCritDisk
 18083 00002A98 E94901                  	jmp	SET_SFT_MODE
 18084                                  
 18085                                  ;---------------------------------------------------------------------------
 18086                                  ; Procedure Name : Dos_Create_New
 18087                                  ;
 18088                                  ; Inputs:
 18089                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18090                                  ;		terminated)
 18091                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18092                                  ;		( = -1 if current dir not involved, else
 18093                                  ;		 Points to first char after last "/" of current dir part)
 18094                                  ;	[THISCDS] Points to CDS being used
 18095                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18096                                  ;	[THISSFT] Points to SFT to fill in if file created
 18097                                  ;		(sf_mode field set so that FCB may be detected)
 18098                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18099                                  ;	AX is Attribute to create
 18100                                  ; Function:
 18101                                  ;	Try to create the specified file truncating an old one that exists
 18102                                  ; Outputs:
 18103                                  ;	sf_ref_count is NOT altered
 18104                                  ;	CARRY CLEAR
 18105                                  ;	    THISSFT filled in.
 18106                                  ;		sf_mode = sharing_compat + open_for_both for Non-FCB SFT
 18107                                  ;	CARRY SET
 18108                                  ;	    AX is error code
 18109                                  ;		error_path_not_found
 18110                                  ;			Bad path (not in curr dir part if present)
 18111                                  ;		error_bad_curr_dir
 18112                                  ;			Bad path in current directory part of path
 18113                                  ;		error_access_denied
 18114                                  ;			Create a second volume id or create a dir
 18115                                  ;		error_file_exists
 18116                                  ;			Already a file by this name
 18117                                  ; DS preserved, others destroyed
 18118                                  ;---------------------------------------------------------------------------
 18119                                  
 18120                                  DOS_Create_New:
 18121 00002A9B B401                    	MOV	AH,1		; Truncate is NOT OK
 18122 00002A9D E934FF                  	JMP	Create_inter
 18123                                  
 18124                                  ; MSDOS 6.0
 18125                                  ;---------------------------------------------------------------------------
 18126                                  ; Procedure Name : Set_Media_ID
 18127                                  ;
 18128                                  ; Inputs:
 18129                                  ;	NAME1= Volume ID
 18130                                  ;	BH= 0, delete volume id
 18131                                  ;	    1, set new volume id
 18132                                  ;	DS= DOSGROUP
 18133                                  ; Function:
 18134                                  ;	Set Volume ID to DOS 4.00 Boot record.
 18135                                  ; Outputs:
 18136                                  ;	CARRY CLEAR
 18137                                  ;	    volume id set
 18138                                  ;	CARRY SET
 18139                                  ;	    AX is error code
 18140                                  ;---------------------------------------------------------------------------
 18141                                  
 18142                                  	; 18/05/2019 - Retro DOS v4.0
 18143                                  Set_Media_ID:
 18144 00002AA0 50                      	PUSH	AX		;AN000;;>32mb
 18145 00002AA1 06                      	PUSH	ES		;AN000;;>32mb
 18146 00002AA2 57                      	PUSH	DI		;AN000;;>32mb
 18147                                  
 18148 00002AA3 FEC4                    	INC	AH		;AN000;;>32mb  bl=drive #
 18149 00002AA5 88E3                    	MOV	BL,AH		;AN000;;>32mb  bl=drive # (A=1,B=2,,,)
 18150 00002AA7 B00D                    	MOV	AL,0DH		;AN000;;>32mb  generic IOCTL
 18151 00002AA9 B96608                  	MOV	CX,0866H	;AN001;;>32mb  get media id
 18152                                  
 18153                                  ;hkn; PACKET_TEMP is in DOSDATA
 18154 00002AAC BA[6C0D]                	MOV	DX,Packet_Temp	;AN000;>32mb
 18155                                  
 18156 00002AAF 53                      	PUSH	BX		;AN000;;>32mb
 18157 00002AB0 52                      	PUSH	DX		;AN000;;>32mb
 18158 00002AB1 30FF                    	XOR	BH,BH		;AN000;;>32mb
 18159                                  
 18160                                  	;invoke	$IOCTL		;AN000;;>32mb
 18161 00002AB3 E86BF7                  	call	_$IOCTL	
 18162                                  
 18163 00002AB6 5A                      	POP	DX		;AN000;;>32mb
 18164 00002AB7 5B                      	POP	BX		;AN000;;>32mb
 18165 00002AB8 7224                    	JC	short geterr	;AN000;;>32mb
 18166                                  
 18167 00002ABA 08FF                    	OR	BH,BH		;AN000;;>32mb delete volume id
 18168 00002ABC 7405                    	JZ	short NoName	;AN000;>32mb yes
 18169                                  
 18170                                  ;hkn; NAME1 is in DOSDATA
 18171 00002ABE BE[4B05]                	MOV	SI,NAME1	;AN000;>32mb
 18172                                  
 18173 00002AC1 EB03                    	JMP	SHORT doset	;AN000;>32mb yes
 18174                                  NoName: 			;AN000;
 18175                                  
 18176                                  ;hkn; NO_NAME_ID is in DOSDATA
 18177 00002AC3 BE[BA0D]                	MOV	SI,NO_NAME_ID	;AN000;>32mb
 18178                                  
 18179                                  doset:				;AN000;
 18180 00002AC6 89D7                    	MOV	DI,DX		;AN000;;>32mb
 18181                                  	;add	di,6
 18182 00002AC8 83C706                  	ADD	DI,MEDIA_ID_INFO.MEDIA_Label ;AN000;;>32mb
 18183                                  
 18184                                  ;hkn; ES & DS must point to SS
 18185                                  ;hkn;	PUSH	CS		;AN000;;>32mb  move new volume id to packet
 18186 00002ACB 16                      	PUSH	SS		;AN000;;>32mb  move new volume id to packet
 18187                                  
 18188 00002ACC 1F                      	POP	DS		;AN000;;>32mb
 18189                                  
 18190                                  ;hkn;	PUSH	CS		;AN000;;>32mb
 18191 00002ACD 16                      	PUSH	SS		;AN000;;>32mb
 18192                                  
 18193 00002ACE 07                      	POP	ES		;AN000;;>32mb
 18194 00002ACF B90B00                  	MOV	CX,11		;AN000;;>32mb
 18195 00002AD2 F3A4                    	REP	MOVSB		;AN000;;>32mb
 18196 00002AD4 B94608                  	MOV	CX,0846H	;AN001;;>32mb
 18197 00002AD7 B00D                    	MOV	AL,0DH		;AN000;;>32mb
 18198 00002AD9 30FF                    	XOR	BH,BH		;AN000;;>32mb
 18199                                  	;invoke	$IOCTL		;AN000;;>32mb  set volume id
 18200 00002ADB E843F7                  	call	_$IOCTL	
 18201                                  geterr: 			;AN000;
 18202                                  ;hkn;	PUSH	CS		;AN000;>32mb
 18203 00002ADE 16                      	PUSH	SS		;AN000;>32mb
 18204                                  
 18205 00002ADF 1F                      	POP	DS		;AN000;>32mb   ds= dosgroup
 18206                                  
 18207 00002AE0 5F                      	POP	DI		;AN000;;>32mb
 18208 00002AE1 07                      	POP	ES		;AN000;;>32mb
 18209 00002AE2 58                      	POP	AX		;AN000;;>32mb
 18210 00002AE3 C3                      	retn			;AN000;>32mb
 18211                                  
 18212                                  ; MSDOS 6.0
 18213                                  ;---------------------------------------------------------------------------
 18214                                  ; Procedure Name : Set_EXT_mode
 18215                                  ;
 18216                                  ; Inputs:
 18217                                  ;	[EXTOPEN_ON]= flag for extended open
 18218                                  ;	SAVE_BX= mode specified in Extended Open
 18219                                  ; Function:
 18220                                  ;	Set mode in ThisSFT
 18221                                  ; Outputs:
 18222                                  ;	carry set,mode is set if from Extended Open
 18223                                  ;	carry clear, mode not set yet
 18224                                  ;---------------------------------------------------------------------------
 18225                                  
 18226                                  ; 13/05/2019 - Retro DOS v4.0
 18227                                  
 18228                                  Set_EXT_mode:
 18229                                  
 18230                                  ;hkn; SS override
 18231 00002AE4 36F606[F605]01          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 18232 00002AEA 740B                    	JZ	short NOTEX		    ;AN000;EO. no, do normal
 18233 00002AEC 50                      	PUSH	AX			    ;AN000;EO.
 18234                                  
 18235                                  ;hkn; SS override
 18236 00002AED 36A1[0106]              	MOV	AX,[ss:SAVE_BX]		    ;AN000;EO.
 18237                                  	;or	[es:di+2],ax
 18238 00002AF1 26094502                	OR	[ES:DI+SF_ENTRY.sf_mode],AX ;AN000;EO.
 18239 00002AF5 58                      	POP	AX			    ;AN000;EO.
 18240 00002AF6 F9                      	STC				    ;AN000;EO.
 18241                                  NOTEX:					    ;AN000;
 18242 00002AF7 C3                      	retn				    ;AN000;EO.
 18243                                  
 18244                                  ;============================================================================
 18245                                  ; OPEN.ASM, MSDOS 6.0, 1991
 18246                                  ;============================================================================
 18247                                  ; 08/08/2018 - Retro DOS v3.0
 18248                                  ; 18/05/2019 - Retro DOS v4.0
 18249                                  
 18250                                  ;	TITLE	DOS_OPEN - Internal OPEN call for MS-DOS
 18251                                  ;	NAME	DOS_OPEN
 18252                                  
 18253                                  ;**	OPEN.ASM - File Open
 18254                                  ;----------------------------------------------------------------------------
 18255                                  ;	Low level routines for openning a file from a file spec.
 18256                                  ;	Also misc routines for sharing errors
 18257                                  ;
 18258                                  ;	DOS_Open
 18259                                  ;	Check_Access_AX
 18260                                  ;	SHARE_ERROR
 18261                                  ;	SET_SFT_MODE
 18262                                  ;	Code_Page_Mismatched_Error		   ; DOS 4.00
 18263                                  ;
 18264                                  ;	Revision history:
 18265                                  ;
 18266                                  ;	    Created: ARR 30 March 1983
 18267                                  ;	    A000	version 4.00   Jan. 1988
 18268                                  ;
 18269                                  ;	M034 - The value in save_bx must be pushed on to the stack for
 18270                                  ; 	       remote extended opens and not save_cx.
 18271                                  ;
 18272                                  ;	M035 - if open made from exec then we must set the appropriate bits
 18273                                  ;	       on the stack before calling off to the redir.
 18274                                  ;	M042 - Bit 11 of DOS34_FLAG set indicates that the redir knows how 
 18275                                  ;	       to handle open from exec. In this case set the appropriate bit
 18276                                  ;	       else do not.
 18277                                  ;----------------------------------------------------------------------------	
 18278                                  
 18279                                  ;Installed = TRUE
 18280                                  
 18281                                  ;	i_need	NoSetDir,BYTE
 18282                                  ;	i_need	THISSFT,DWORD
 18283                                  ;	i_need	THISCDS,DWORD
 18284                                  ;	i_need	CURBUF,DWORD
 18285                                  ;	i_need	CurrentPDB,WORD
 18286                                  ;	i_need	CURR_DIR_END,WORD
 18287                                  ;	I_need	RetryCount,WORD
 18288                                  ;	I_need	Open_Access,BYTE
 18289                                  ;	I_need	fSharing,BYTE
 18290                                  ;	i_need	JShare,DWORD
 18291                                  ;	I_need	FastOpenFlg,byte
 18292                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000;; DOS 4.00
 18293                                  ;	I_need	ALLOWED,BYTE			  ;AN000;; DOS 4.00
 18294                                  ;	I_need	EXTERR,WORD			  ;AN000;; DOS 4.00
 18295                                  ;	I_need	EXTERR_LOCUS,BYTE		  ;AN000;; DOS 4.00
 18296                                  ;	I_need	EXTERR_ACTION,BYTE		  ;AN000;; DOS 4.00
 18297                                  ;	I_need	EXTERR_CLASS,BYTE		  ;AN000;; DOS 4.00
 18298                                  ;	I_need	CPSWFLAG,BYTE			  ;AN000;; DOS 4.00
 18299                                  ;	I_need	EXITHOLD,DWORD			  ;AN000;; DOS 4.00
 18300                                  ;	I_need	THISDPB,DWORD			  ;AN000;; DOS 4.00
 18301                                  ;	I_need	SAVE_CX,WORD			  ;AN000;; DOS 4.00
 18302                                  ;	I_need	SAVE_BX,WORD			  ;M034
 18303                                  ;
 18304                                  ;	I_need	DOS_FLAG,BYTE
 18305                                  ;	I_need	DOS34_FLAG,WORD			  ;M042
 18306                                  
 18307                                  ;Break	<DOS_Open - internal file access>
 18308                                  ;---------------------------------------------------------------------------
 18309                                  ; Procedure Name : DOS_Open
 18310                                  ;
 18311                                  ; Inputs:
 18312                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18313                                  ;		terminated)
 18314                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18315                                  ;		( = -1 if current dir not involved, else
 18316                                  ;		 Points to first char after last "/" of current dir part)
 18317                                  ;	[THISCDS] Points to CDS being used
 18318                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18319                                  ;	[THISSFT] Points to SFT to fill in if file found
 18320                                  ;		(sf_mode field set so that FCB may be detected)
 18321                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18322                                  ;	AX is Access and Sharing mode
 18323                                  ;	  High NIBBLE of AL (Sharing Mode)
 18324                                  ;		sharing_compat	   file is opened in compatibility mode
 18325                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18326                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18327                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18328                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18329                                  ;	  Low NIBBLE of AL (Access Mode)
 18330                                  ;		open_for_read	file is opened for reading
 18331                                  ;		open_for_write	file is opened for writing
 18332                                  ;		open_for_both	file is opened for both reading and writing.
 18333                                  ;
 18334                                  ;	  For FCB SFTs AL should = sharing_compat + open_for_both
 18335                                  ;		(not checked)
 18336                                  ; Function:
 18337                                  ;	Try to open the specified file
 18338                                  ; Outputs:
 18339                                  ;	sf_ref_count is NOT altered
 18340                                  ;	CARRY CLEAR
 18341                                  ;	    THISSFT filled in.
 18342                                  ;	CARRY SET
 18343                                  ;	    AX is error code
 18344                                  ;		error_file_not_found
 18345                                  ;			Last element of path not found
 18346                                  ;		error_path_not_found
 18347                                  ;			Bad path (not in curr dir part if present)
 18348                                  ;		error_bad_curr_dir
 18349                                  ;			Bad path in current directory part of path
 18350                                  ;		error_invalid_access
 18351                                  ;			Bad sharing mode or bad access mode or bad combination
 18352                                  ;		error_access_denied
 18353                                  ;			Attempt to open read only file for writting, or
 18354                                  ;			open a directory
 18355                                  ;		error_sharing_violation
 18356                                  ;			The sharing mode was correct but not allowed
 18357                                  ;			generates an INT 24 on compatibility mode SFTs
 18358                                  ; DS preserved, others destroyed
 18359                                  ;----------------------------------------------------------------------------
 18360                                  
 18361                                  ; 18/05/2019 - Retro DOS v4.0
 18362                                  ; DOSCODE:6A60h (MSDOS 6.21, MSDOS.SYS)
 18363                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18364                                  ; DOSCODE:6A4Ch (MSDOS 5.0, MSDOS.SYS)
 18365                                  
 18366                                  DOS_OPEN:
 18367                                  	; DS has been set up to DOSDATA in file.asm and fcbio2.asm. 
 18368                                  
 18369 00002AF8 C606[4C03]00            	MOV	byte [NoSetDir],0
 18370 00002AFD E83301                  	CALL	Check_Access_AX
 18371 00002B00 722B                    	JC	short do_ret_label	    ; retc
 18372                                  
 18373 00002B02 C43E[9E05]              	LES	DI,[THISSFT]
 18374 00002B06 30E4                    	XOR	AH,AH
 18375                                  
 18376                                  	; sleaze! move only access/sharing mode in. Leave sf_isFCB unchanged
 18377                                  
 18378 00002B08 26884502                	MOV	[ES:DI+SF_ENTRY.sf_mode],AL ; For moment do this on FCBs too
 18379 00002B0C 06                      	PUSH	ES
 18380 00002B0D C436[A205]              	LES	SI,[THISCDS]
 18381                                  	; 18/08/2018
 18382 00002B11 83FEFF                  	CMP	SI,-1
 18383 00002B14 7530                    	JNZ	short TEST_RE_NET1
 18384 00002B16 07                      	POP	ES
 18385                                  
 18386                                  	; MSDOS 6.0
 18387                                  ;Extended open hooks
 18388 00002B17 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extnded open		;AN000;
 18389 00002B1C 7410                    	JZ	short _NOEXTOP 		    ;FT. no, do normal			;AN000;
 18390                                  _IFS_extopen:									;AN000;
 18391 00002B1E A0[0106]                	MOV	AL,[SAVE_BX]		    ; M034 - save_bx has original bx  
 18392                                  					    ; with which call was made. This
 18393                                  					    ; has the open access bits. 
 18394                                  	;;MOV	AL,[SAVE_CX]		    ; M034 - FT. al= create attribute
 18395                                  	
 18396 00002B21 50                      	PUSH	AX			    ;FT. pass create attr to IFS	;AN000;
 18397                                  	;mov	ax,112Eh
 18398                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;FT. issue extended open verb	;AN000;
 18399 00002B22 B82E11                  	mov	ax,(MultNET*256)+46 
 18400 00002B25 CD2F                    	INT	2FH			    ;FT.				;AN000;
 18401 00002B27 5B                      	POP	BX			    ;FT. trash bx			;AN000;
 18402 00002B28 C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;FT.				;AN000;
 18403                                  
 18404                                  do_ret_label:
 18405 00002B2D C3                      	retn				    ;FT.				;AN000;
 18406                                  _NOEXTOP:
 18407                                  ;Extended open hooks
 18408                                  	;
 18409                                  ;IF NOT Installed
 18410                                  	;transfer NET_SEQ_OPEN
 18411                                  ;ELSE
 18412                                  	
 18413                                  do_net_int2f:
 18414 00002B2E F606[8600]01            	test	byte [DOS_FLAG],EXECOPEN ; Q: was this open call made from exec
 18415 00002B33 7409                    	jz	short not_exec_open	; N: just do net open
 18416                                  					; Y: check to see if redir is aware
 18417                                  					;    of this 
 18418                                  	
 18419                                  					; M042 - start
 18420                                  	;test	word [DOS34_FLAG],EXEC_AWARE_REDIR ; 800h
 18421 00002B35 F606[1206]08            	test	byte [DOS34_FLAG+1],(EXEC_AWARE_REDIR>>8)
 18422                                  					; Q: does this redir know how to 
 18423                                  					;    this
 18424 00002B3A 7402                    	jz	short not_exec_open	; N: just do net open
 18425                                  					; Y: set bit 3 of access byte and 
 18426                                  					;    set sharing mode to DENY_WRITE
 18427                                  					; M042 - end
 18428                                  	
 18429                                  	; NOTE: This specific mode has not been set for the code assembled
 18430                                  	; under the "NOT Installed" conditional. Currently Installed is 
 18431                                  	; always one.
 18432                                  					; M035 - set the bits on the stack
 18433                                  	;mov	al,23h
 18434 00002B3C B023                    	mov	AL,SHARING_DENY_WRITE+EXEC_OPEN
 18435                                  	
 18436                                  not_exec_open:
 18437                                  	; MSDOS 3.3 & MSDOS 6.0
 18438 00002B3E 50                      	PUSH	AX
 18439                                  
 18440                                  	;MOV	AX,(MultNET SHL 8) OR 22
 18441                                  	;INT	2FH
 18442                                  
 18443 00002B3F B81611                  	mov     ax,1116h
 18444 00002B42 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE
 18445                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 18446                                  			; SDA first filename pointer -> fully-qualified name of file to open
 18447                                  			; STACK: WORD file open mode
 18448                                  			; Return: CF set on error
 18449                                  
 18450 00002B44 5B                      	POP	BX			; clean stack
 18451                                  ;do_ret_label: ; 09/08/2018
 18452 00002B45 C3                      	retn
 18453                                  ;ENDIF
 18454                                  
 18455                                  TEST_RE_NET1:
 18456                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 18457                                  	; 17/12/2022
 18458 00002B46 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 18459 00002B4B 07                      	POP	ES
 18460                                  	; 18/05/2019
 18461 00002B4C 7409                    	JZ	short LOCAL_OPEN
 18462                                  
 18463                                  ;Extended open hooks
 18464                                  	; MSDOS 6.0
 18465 00002B4E F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extended open	;AN000;
 18466 00002B53 75C9                    	JNZ	short _IFS_extopen	      ;FT. isuue extended open	;AN000;
 18467                                  ;Extended open hooks
 18468                                  
 18469                                  ;IF NOT Installed
 18470                                  ;	transfer NET_OPEN
 18471                                  ;ELSE
 18472 00002B55 EBD7                    	jmp	short do_net_int2f
 18473                                  ;ENDIF
 18474                                  
 18475                                  LOCAL_OPEN:
 18476                                  	; MSDOS 3.3 & MSDOS 6.0
 18477 00002B57 E899E7                  	call	ECritDisk
 18478                                  
 18479                                  ; DOS 3.3 FastOPen 6/16/86
 18480                                  
 18481                                  	;or	byte [FastOpenFlg],5
 18482 00002B5A 800E[3A0D]05            	OR	byte [FastOpenFlg],FastOpen_Set+Special_Fill_Set ; only open can
 18483                                  
 18484 00002B5F E80913                  	call	GETPATH
 18485                                  
 18486                                  ; DOS 3.3 FastOPen 6/16/86
 18487                                  
 18488 00002B62 731D                    	JNC	short Open_found
 18489 00002B64 7511                    	JNZ	short bad_path2
 18490 00002B66 08C9                    	OR	CL,CL
 18491 00002B68 740D                    	JZ	short bad_path2
 18492                                  OpenFNF:
 18493 00002B6A B80200                  	MOV	AX,error_file_not_found	; 2
 18494                                  OpenBadRet:
 18495                                  ;hkn; FastOpenFlg is in DOSDATA use SS override
 18496                                  	; 12/08/2018
 18497                                  	;mov	byte [cs:FastOpenFlg],0 ; IBMDOS.COM (MSDOS 3.3) offset 36CAh
 18498                                  	; MSDOS 6.0
 18499 00002B6D 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 18500 00002B73 F9                      	STC
 18501                                  	;call	LCritDisk
 18502                                  	; 16/12/2022
 18503 00002B74 E997E7                  	jmp	LCritDisk
 18504                                  	;;JMP	Clear_FastOpen ; 10/08/2018
 18505                                  	;retn 	; 08/09/2018
 18506                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18507                                  	;jmp	Clear_FastOpen
 18508                                  
 18509                                  bad_path2:
 18510 00002B77 B80300                  	MOV	AX,error_path_not_found	; 3
 18511 00002B7A EBF1                    	JMP	short OpenBadRet
 18512                                  
 18513                                  Open_Bad_Access:
 18514 00002B7C B80500                  	MOV	AX,error_access_denied	; 5
 18515 00002B7F EBEC                    	JMP	short OpenBadRet
 18516                                  
 18517                                  Open_found:
 18518 00002B81 74F9                    	JZ	short Open_Bad_Access 	; test for directories
 18519 00002B83 08E4                    	OR	AH,AH
 18520 00002B85 783E                    	JS	short open_ok		; Devices don't have attributes
 18521 00002B87 8E06[E405]              	MOV	ES,[CURBUF+2]		; get buffer location
 18522                                  	;mov	al,[es:bx+0Bh]
 18523 00002B8B 268A470B                	MOV	AL,[ES:BX+dir_entry.dir_attr]
 18524 00002B8F A808                    	TEST	AL,attr_volume_id	; can't open volume ids
 18525 00002B91 75E9                    	JNZ	short Open_Bad_Access
 18526 00002B93 A801                    	TEST	AL,attr_read_only	; check write on read only
 18527 00002B95 742E                    	JZ	short open_ok
 18528                                  
 18529                                  ; The file is marked READ-ONLY. We verify that the open mode allows access to
 18530                                  ; the read-only file. Unfortunately, with FCB's and net-FCB's we cannot
 18531                                  ; determine at the OPEN time if such access is allowed. Thus, we defer such
 18532                                  ; processing until the actual write operation:
 18533                                  ;
 18534                                  ; If FCB, then we change the mode to be read_only.
 18535                                  ; If net_FCB, then we change the mode to be read_only.
 18536                                  ; If not open for read then error.
 18537                                  
 18538 00002B97 1E                      	push	ds
 18539 00002B98 56                      	push	si
 18540 00002B99 C536[9E05]              	LDS	SI,[THISSFT]
 18541                                  	;mov	cx,[si+2]
 18542 00002B9D 8B4C02                  	MOV	CX,[SI+SF_ENTRY.sf_mode]
 18543                                  	; 17/12/2022
 18544                                  	;test	ch,80h
 18545 00002BA0 F6C580                  	test	ch,sf_isFCB>>8
 18546                                  	;TEST	CX,sf_isFCB ; 8000h	; is it FCB?
 18547 00002BA3 750A                    	JNZ	short ResetAccess	; yes, reset the access
 18548 00002BA5 88CA                    	MOV	DL,CL
 18549 00002BA7 80E2F0                  	AND	DL,SHARING_MASK	; 0F0h
 18550 00002BAA 80FA70                  	CMP	DL,SHARING_NET_FCB ; 70h ; is it net FCB?
 18551 00002BAD 7508                    	JNZ	short NormalOpen	; no
 18552                                  ResetAccess:
 18553                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)	
 18554                                  	;AND	CX,~access_mask	; 0FFF0h ; clear access
 18555                                  	; 16/12/2022
 18556 00002BAF 80E1F0                  	and	cl,0F0h ; 18/05/2019
 18557                                  ;	OR	CX,open_for_read ; 0	; stick in open_for_read
 18558 00002BB2 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],CX
 18559 00002BB5 EB0C                    	JMP	SHORT FillSFT
 18560                                  
 18561                                  ; The SFT is normal. See if the requested access is open_for_read
 18562                                  
 18563                                  NormalOpen:
 18564 00002BB7 80E10F                  	AND	CL,access_mask	;0Fh	; remove extras
 18565 00002BBA 80F900                  	CMP	CL,open_for_read ; 0	; is it open for read?
 18566 00002BBD 7404                    	JZ	short FillSFT
 18567 00002BBF 5E                      	pop	si
 18568 00002BC0 1F                      	pop	ds
 18569 00002BC1 EBB9                    	JMP	short Open_Bad_Access
 18570                                  ;
 18571                                  ; All done, restore registers and fill the SFT.
 18572                                  ;
 18573                                  FillSFT:
 18574 00002BC3 5E                      	pop	si
 18575 00002BC4 1F                      	pop	ds
 18576                                  open_ok:
 18577 00002BC5 E8DB1E                  	call	DOOPEN			; Fill in SFT
 18578                                  
 18579                                  ;hkn; FastOpenFlg is in DOSDATA. use SS override
 18580                                  	; 18/05/2019
 18581                                  	;and	byte [ss:FastOpenFlag],80h
 18582 00002BC8 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes	;; DOS 3.3
 18583                                  	; 12/08/2018
 18584                                  	;and	byte [FastOpenFlg],Fast_yes	
 18585                                  
 18586                                  	; MSDOS 6.0
 18587 00002BCE E84300                  	CALL	DO_SHARE_CHECK
 18588 00002BD1 7303                    	JNC	short SHARE_OK
 18589                                  	;call	LCritDisk
 18590                                  	; 16/12/2022
 18591 00002BD3 E938E7                  	jmp	LCritDisk
 18592                                  	;;JMP	short Clear_FastOpen
 18593                                  	;retn	; 18/05/2019
 18594                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18595                                  	;jmp	short Clear_FastOpen	
 18596                                  
 18597                                  	; MSDOS 3.3
 18598                                  ;DO_SHARE_CHECK:
 18599                                  ;	MOV	CX,[RetryCount]		; Get # tries to do
 18600                                  ;OpenShareRetry:
 18601                                  ;	push	cx			; Save number left to do
 18602                                  ;	call	SHARE_CHECK		; Final Check
 18603                                  ;	pop	cx			; CX = # left
 18604                                  ;	JNC	short SHARE_OK		; No problem with access
 18605                                  ;	call	Idle
 18606                                  ;	LOOP	OpenShareRetry		; One more retry used up
 18607                                  ;OpenShareFail:
 18608                                  ;	LES	DI,[THISSFT]
 18609                                  ;	call	SHARE_ERROR
 18610                                  ;	JNC	short DO_SHARE_CHECK	; User wants more retry
 18611                                  	
 18612                                  	;12/08/2018
 18613                                  	;mov	byte [ss:FastOpenFlg],0
 18614                                  	;08/09/2018
 18615                                  	;mov	byte [FastOpenFlg],0
 18616                                  	;call	LCritDisk
 18617                                  	;JMP	short Clear_FastOpen
 18618                                  	;retn
 18619                                  
 18620                                  SHARE_OK:
 18621                                  	; MSDOS 3.3 & MSDOS 6.0
 18622 00002BD6 B80300                  	MOV	AX,3
 18623 00002BD9 C43E[9E05]              	LES	DI,[THISSFT]
 18624                                  ;if installed
 18625                                  	;call	JShare + 14 * 4
 18626 00002BDD FF1E[C800]              	call	far [JShare+(14*4)]  ; 14 = ShSU
 18627                                  ;else
 18628                                  ;	Call	ShSU
 18629                                  ;endif
 18630 00002BE1 E82AE7                  	call	LCritDisk
 18631                                  	
 18632                                  	;FallThru Set_SFT_Mode
 18633                                  
 18634                                  ;----------------------------------------------------------------------------
 18635                                  ; Procedure Name : SET_SFT_MODE
 18636                                  ;
 18637                                  ; Finish SFT initialization for new reference. Set the correct mode.
 18638                                  ;
 18639                                  ;   Inputs:
 18640                                  ;	ThisSFT points to SFT
 18641                                  ;
 18642                                  ;   Outputs:
 18643                                  ;	Carry clear
 18644                                  ;   Registers modified: AX.
 18645                                  ;---------------------------------------------------------------------------
 18646                                  
 18647                                  ;hkn; called from create. DS already set up to DOSDATA.
 18648                                  
 18649                                  SET_SFT_MODE:
 18650 00002BE4 C43E[9E05]              	LES	DI,[THISSFT]
 18651 00002BE8 E84D19                  	call	DEV_OPEN_SFT
 18652                                  	;test	word [es:di+2],8000h
 18653                                  	; 17/12/2022
 18654                                  	;test	byte [es:di+3],80h
 18655 00002BEB 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8
 18656                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; Clears carry
 18657 00002BF0 7407                    	JZ	short Clear_FastOpen	; sf_mode correct (retz)
 18658 00002BF2 A1[3003]                	MOV	AX,[CurrentPDB]
 18659                                  	;mov	[es:di+31h],ax
 18660 00002BF5 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX ; For FCB sf_PID=PDB
 18661                                  
 18662                                  Clear_FastOpen:
 18663 00002BF9 C3                      	retn			       ;;;;; DOS 3.3
 18664                                  
 18665                                  ;----------------------------------------------------------------------------
 18666                                  ; Procedure Name : SHARE_ERROR
 18667                                  ;
 18668                                  ; Called on sharing violations. ES:DI points to SFT. AX has error code
 18669                                  ; If SFT is FCB or compatibility mode gens INT 24 error.
 18670                                  ; Returns carry set AX=error_sharing_violation if user says ignore (can't
 18671                                  ; really ignore). Carry clear if user wants a retry. ES, DI, DS preserved
 18672                                  ;---------------------------------------------------------------------------
 18673                                  
 18674                                  SHARE_ERROR:
 18675                                  	; 17/12/2022
 18676                                  	;test	byte [es:di+3],80h
 18677 00002BFA 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8 ; 80h
 18678                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; 8000h
 18679 00002BFF 7509                    	JNZ	short _HARD_ERR
 18680 00002C01 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 18681 00002C05 80E1F0                  	AND	CL,SHARING_MASK  ; 0F0h
 18682                                  	;CMP	CL,SHARING_COMPAT ; 0
 18683                                  	;JNE	short _NO_HARD_ERR
 18684                                  	; 21/09/2023
 18685 00002C08 7505                    	jnz	short _NO_HARD_ERR
 18686                                  _HARD_ERR:
 18687 00002C0A E89646                  	call	SHARE_VIOLATION
 18688                                  	;retnc				; User wants retry
 18689 00002C0D 73EA                    	jnc	short Clear_FastOpen
 18690                                  _NO_HARD_ERR:
 18691 00002C0F B82000                  	MOV	AX,error_sharing_violation  ; 20h
 18692 00002C12 F9                      	STC
 18693 00002C13 C3                      	retn
 18694                                  
 18695                                  ; MSDOS 6.0
 18696                                  ;----------------------------------------------------------------------------
 18697                                  ; Procedure Name : DO_SHARE_CHECK
 18698                                  ;
 18699                                  ; Input: THISDPB, WFP_Start, THISSFT set
 18700                                  ; Functions: check file sharing mode is valid
 18701                                  ; Output: carry set, error
 18702                                  ;	  carry clear, share ok
 18703                                  ;----------------------------------------------------------------------------
 18704                                  
 18705                                  	; 18/05/2019 - Retro DOS v4.0
 18706                                  DO_SHARE_CHECK:
 18707 00002C14 E8DCE6                  	call	ECritDisk		; enter critical section
 18708                                  OPN_RETRY:
 18709 00002C17 8B0E[1A00]              	MOV	CX,[RetryCount]		; Get # tries to do
 18710                                  OpenShareRetry:
 18711 00002C1B 51                      	push	cx			; Save number left to do
 18712 00002C1C E87F46                  	call	SHARE_CHECK		; Final Check
 18713 00002C1F 59                      	pop	cx			; CX = # left
 18714 00002C20 730E                    	JNC	short Share_Ok2		; No problem with access
 18715 00002C22 E8C7E5                  	call	Idle
 18716 00002C25 E2F4                    	LOOP	OpenShareRetry		; One more retry used up
 18717                                  OpenShareFail:
 18718 00002C27 C43E[9E05]              	LES	DI,[THISSFT]
 18719 00002C2B E8CCFF                  	call	SHARE_ERROR
 18720 00002C2E 73E7                    	JNC	short OPN_RETRY		; User wants more retry
 18721                                  Share_Ok2:
 18722                                  	;call	LCritDisk		; leave critical section
 18723                                  	;retn
 18724                                  	; 18/12/2022
 18725 00002C30 E9DBE6                  	jmp	LCritDisk
 18726                                  
 18727                                  ;-----------------------------------------------------------------------------
 18728                                  ; Procedure Name : Check_Access
 18729                                  ;
 18730                                  ; Inputs:
 18731                                  ;	AX is mode
 18732                                  ;	  High NIBBLE of AL (Sharing Mode)
 18733                                  ;		sharing_compat	   file is opened in compatibility mode
 18734                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18735                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18736                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18737                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18738                                  ;	  Low NIBBLE of AL (Access Mode)
 18739                                  ;		open_for_read	file is opened for reading
 18740                                  ;		open_for_write	file is opened for writing
 18741                                  ;		open_for_both	file is opened for both reading and writing.
 18742                                  ; Function:
 18743                                  ;	Check this access mode for correctness
 18744                                  ; Outputs:
 18745                                  ;	[open_access] = AL input
 18746                                  ;	Carry Clear
 18747                                  ;		Mode is correct
 18748                                  ;		AX unchanged
 18749                                  ;	Carry Set
 18750                                  ;		Mode is bad
 18751                                  ;		AX = error_invalid_access
 18752                                  ; No other registers effected
 18753                                  ;----------------------------------------------------------------------------
 18754                                  
 18755                                  Check_Access_AX:
 18756 00002C33 A2[6E05]                	MOV	[OPEN_ACCESS],AL
 18757 00002C36 53                      	PUSH	BX
 18758                                  
 18759                                  ;	If sharing, then test for special sharing mode for FCBs
 18760                                  
 18761 00002C37 88C3                    	MOV	BL,AL
 18762 00002C39 80E3F0                  	AND	BL,SHARING_MASK ; 0F0h
 18763 00002C3C 803E[7205]FF            	CMP	byte [FSHARING],-1
 18764 00002C41 7505                    	JNZ	short CheckShareMode	; not through server call, must be ok
 18765 00002C43 80FB70                  	CMP	BL,SHARING_NET_FCB
 18766 00002C46 7405                    	JZ	short CheckAccessMode	; yes, we have an FCB
 18767                                  CheckShareMode:
 18768 00002C48 80FB40                  	CMP	BL,40h			; is this a good sharing mode?
 18769 00002C4B 770D                    	JA	short Make_Bad_Access
 18770                                  CheckAccessMode:
 18771 00002C4D 88C3                    	MOV	BL,AL
 18772 00002C4F 80E30F                  	AND	BL,access_mask
 18773 00002C52 80FB02                  	CMP	BL,2
 18774 00002C55 7703                    	JA	short Make_Bad_Access
 18775 00002C57 5B                      	POP	BX
 18776 00002C58 F8                      	CLC
 18777 00002C59 C3                      	retn
 18778                                  
 18779                                  Make_Bad_Access:
 18780 00002C5A B80C00                  	MOV	AX,error_invalid_access ; 0Ch
 18781 00002C5D 5B                      	POP	BX
 18782 00002C5E F9                      	STC
 18783 00002C5F C3                      	retn
 18784                                  
 18785                                  ;============================================================================
 18786                                  ; DINFO.ASM, MSDOS 6.0, 1991
 18787                                  ;============================================================================
 18788                                  ; 08/08/2018 - Retro DOS v3.0
 18789                                  ; 18/05/2019 - Retro DOS v4.0
 18790                                  
 18791                                  ;**	Low level routine for returning disk drive information from a local
 18792                                  ;	  or NET device
 18793                                  ;
 18794                                  ;	DISK_INFO
 18795                                  ;
 18796                                  ;	  Modification history:
 18797                                  ;
 18798                                  ;		Created: ARR 30 March 1983
 18799                                  
 18800                                  ;	Break	<DISK_INFO -- Get Disk Drive Information>
 18801                                  ;---------------------------------------------------------------------------
 18802                                  ; Procedure Name : DISK_INFO
 18803                                  ;
 18804                                  ; Inputs:
 18805                                  ;	[THISCDS] Points to the Macro List Structure of interest
 18806                                  ;		(It MAY NOT be NUL, error not detected)
 18807                                  ; Function:
 18808                                  ;	Get Interesting Drive Information
 18809                                  ; Returns:
 18810                                  ;	DX = Number of free allocation units
 18811                                  ;	BX = Total Number of allocation units on disk
 18812                                  ;	CX = Sector size
 18813                                  ;	AL = Sectors per allocation unit
 18814                                  ;	AH = FAT ID BYTE
 18815                                  ;	Carry set if error (currently user FAILed to I 24)
 18816                                  ; Segs except ES preserved, others destroyed
 18817                                  ;----------------------------------------------------------------------------
 18818                                  
 18819                                  ;hkn; called from getset.asm and misc.asm. DS has already been set up to 
 18820                                  ;hkn; DOSDATA. 
 18821                                  
 18822                                  DISK_INFO:
 18823                                  	; 08/08/2018 - Retro DOS v3.0
 18824                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 37C5h
 18825                                  
 18826 00002C60 E8CEE5                  	call	TestNet
 18827 00002C63 7306                    	JNC	short LOCAL_DSK_INFO
 18828                                  
 18829                                  ;IF NOT Installed
 18830                                  ;	transfer NET_DISK_INFO
 18831                                  ;ELSE
 18832                                  	;MOV	AX,(MultNET SHL 8) OR 12
 18833                                  	;INT	2FH
 18834                                  	;return
 18835                                  
 18836 00002C65 B80C11                  	mov     ax,110Ch
 18837 00002C68 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET DISK SPACE
 18838                                  			; ES:DI -> current directory
 18839                                  			; Return: AL = sectors per cluster, BX = total clusters
 18840                                  			; CX = bytes per sector, DX = number of available clusters
 18841 00002C6A C3                      	retn
 18842                                  ;ENDIF
 18843                                  
 18844                                  LOCAL_DSK_INFO:
 18845 00002C6B C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18846 00002C70 E880E6                  	call	ECritDisk
 18847 00002C73 E8B729                  	call	FATREAD_CDS		; perform media check.
 18848 00002C76 7241                    	JC	short CRIT_LEAVE
 18849 00002C78 BB0200                  	MOV	BX,2
 18850 00002C7B E81928                  	call	UNPACK			; Get first FAT sector into CURBUF
 18851 00002C7E 7239                    	JC	short CRIT_LEAVE
 18852 00002C80 C536[E205]              	LDS	SI,[CURBUF]
 18853                                  	;mov	ah,[si+20]
 18854 00002C84 8A6414                  	MOV	AH,[SI+BUFINSIZ]	; get FAT ID BYTE
 18855                                  
 18856                                  ;hkn; SS is DOSDATA
 18857 00002C87 16                      	push	ss
 18858 00002C88 1F                      	pop	ds
 18859                                  	;mov	cx,[es:bp+0Dh]
 18860 00002C89 268B4E0D                	MOV	CX,[ES:BP+DPB.MAX_CLUSTER]
 18861                                  
 18862                                  ; Examine the current free count. If it indicates that we have an invalid
 18863                                  ; count, do the expensive calculation.
 18864                                  
 18865                                  	;mov	dx,[es:bp+1Fh]
 18866 00002C8D 268B561F                	MOV	DX,[ES:BP+DPB.FREE_CNT] ; get free count
 18867 00002C91 83FAFF                  	CMP	DX,-1			; is it valid?
 18868 00002C94 7404                    	JZ	short DoScan
 18869                                  
 18870                                  ; Check to see if it is in a reasonable range. If so, trust it and return.
 18871                                  ; Otherwise, we need to blast out an internal error message and then recompute
 18872                                  ; the count.
 18873                                  
 18874 00002C96 39CA                    	CMP	DX,CX			; is it in a reasonable range?
 18875 00002C98 7222                    	JB	short GotVal		; yes, trust it.
 18876                                  DoScan:
 18877 00002C9A 31D2                    	XOR	DX,DX
 18878 00002C9C 49                      	DEC	CX
 18879                                  SCANFREE:
 18880 00002C9D E8F727                  	call	UNPACK
 18881 00002CA0 7217                    	JC	short CRIT_LEAVE
 18882 00002CA2 7501                    	JNZ	short NOTFREECLUS
 18883 00002CA4 42                      	INC	DX			; A free one
 18884                                  NOTFREECLUS:
 18885 00002CA5 43                      	INC	BX			; Next cluster
 18886 00002CA6 E2F5                    	LOOP	SCANFREE
 18887 00002CA8 4B                      	DEC	BX			; BX was next cluster. Convert to
 18888                                  ReturnVals:
 18889 00002CA9 4B                      	DEC	BX			; count
 18890                                  	;mov	al,[es:bp+4]
 18891 00002CAA 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 18892 00002CAE FEC0                    	INC	AL			; Sectors/cluster
 18893                                  	;mov	cx,[es:bp+2]
 18894 00002CB0 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE] ; Bytes/sector
 18895                                  	;mov	[es:bp+1Fh],dx
 18896 00002CB4 2689561F                	MOV	[ES:BP+DPB.FREE_CNT],DX
 18897 00002CB8 F8                      	CLC
 18898                                  CRIT_LEAVE:
 18899                                  	;call	LCritDisk
 18900                                  	;retn
 18901                                  	; 17/12/2022
 18902 00002CB9 E952E6                  	jmp	LCritDisk
 18903                                  
 18904                                  ; We have correctly computed everything previously. Load up registers for
 18905                                  ; return.
 18906                                  
 18907                                  GotVal: 
 18908 00002CBC 89CB                    	MOV	BX,CX			; get cluster count
 18909 00002CBE EBE9                    	JMP	short ReturnVals
 18910                                  
 18911                                  ;============================================================================
 18912                                  ; ISEARCH.ASM, MSDOS 6.0, 1991
 18913                                  ;============================================================================
 18914                                  ; 22/07/2018 - Retro DOS v3.0
 18915                                  
 18916                                  ;	TITLE	DOS_SEARCH - Internal SEARCH calls for MS-DOS
 18917                                  ;	NAME	DOS_SEARCH
 18918                                  
 18919                                  ;**	Low level routines for doing local and NET directory searches
 18920                                  ;
 18921                                  ;	DOS_SEARCH_FIRST
 18922                                  ;	DOS_SEARCH_NEXT
 18923                                  ;	RENAME_NEXT
 18924                                  ;
 18925                                  ;	Revision history:
 18926                                  ;
 18927                                  ;	    Created: ARR 30 March 1983
 18928                                  ;	    A000	version 4.00  Jan. 1988
 18929                                  ;	    A001	PTM 3564 -- search for fastopen
 18930                                  
 18931                                  ;Installed = TRUE
 18932                                  
 18933                                  ;--------------------------------------------------------------------------
 18934                                  ;
 18935                                  ; Procedure Name : DOS_SEARCH_FIRST
 18936                                  ;
 18937                                  ; Inputs:
 18938                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18939                                  ;		terminated)
 18940                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18941                                  ;		( = -1 if current dir not involved, else
 18942                                  ;		 Points to first char after last "/" of current dir part)
 18943                                  ;	[THISCDS] Points to CDS being used
 18944                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18945                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18946                                  ;	[DMAADD] Points to 53 byte buffer
 18947                                  ; Function:
 18948                                  ;	Initiate a search for the given file spec
 18949                                  ; Outputs:
 18950                                  ;	CARRY CLEAR
 18951                                  ;	    The 53 bytes ot DMAADD are filled in as follows:
 18952                                  ;
 18953                                  ;	LOCAL
 18954                                  ;	    Drive Byte (A=1, B=2, ...) High bit clear
 18955                                  ;		NEVER STORE DRIVE BYTE AFTER  found_it
 18956                                  ;	    11 byte search name with Meta chars in it
 18957                                  ;	    Search Attribute Byte, attribute of search
 18958                                  ;	    WORD LastEnt value
 18959                                  ;	    WORD DirStart
 18960                                  ;	    4 byte pad
 18961                                  ;	    32 bytes of the directory entry found
 18962                                  ;	NET
 18963                                  ;	    21 bytes First byte has high bit set
 18964                                  ;	    32 bytes of the directory entry found
 18965                                  ;
 18966                                  ;	CARRY SET
 18967                                  ;	    AX = error code
 18968                                  ;		error_no_more_files
 18969                                  ;			No match for this file
 18970                                  ;		error_path_not_found
 18971                                  ;			Bad path (not in curr dir part if present)
 18972                                  ;		error_bad_curr_dir
 18973                                  ;			Bad path in current directory part of path
 18974                                  ; DS preserved, others destroyed
 18975                                  ;---------------------------------------------------------------------------
 18976                                  
 18977                                  ; 24/01/2024
 18978                                  %if 1
 18979                                  	; 17/05/2019 - Retro DOS v4.0
 18980                                  GET_FAST_SEARCH:
 18981                                  	; 22/07/2018
 18982                                  	; MSDOS 6.0
 18983                                  	; 17/12/2022
 18984 00002CC0 36800E[1206]04          	OR	byte [ss:DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)  ; 04h
 18985                                  	;OR	word [ss:DOS34_FLAG],SEARCH_FASTOPEN  ; 400h
 18986                                  					;FO.trigger fastopen ;AN000;
 18987                                  	;call	DOS_SEARCH_FIRST
 18988                                  	;retn
 18989                                  	; 24/01/2024
 18990                                  	; 17/12/2022
 18991                                  	;jmp	DOS_SEARCH_FIRST
 18992                                  %endif
 18993                                  
 18994                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18995                                  	; DOSCODE:6C22h (MSDOS 5.0, MSDOS.SYS)
 18996                                  
 18997                                  DOS_SEARCH_FIRST:
 18998                                  	; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 3826h
 18999                                  
 19000 00002CC6 C43E[A205]              	LES	DI,[THISCDS]
 19001 00002CCA 83FFFF                  	CMP	DI,-1
 19002 00002CCD 7506                    	JNZ	short TEST_RE_NET2
 19003                                  
 19004                                  ;IF NOT Installed
 19005                                  ;	transfer NET_SEQ_SEARCH_FIRST
 19006                                  ;ELSE
 19007                                  	;mov	ax,1119h
 19008 00002CCF B81911                  	MOV	AX,(MultNET<<8)|25
 19009 00002CD2 CD2F                    	INT	2Fh
 19010 00002CD4 C3                      	retn
 19011                                  ;ENDIF
 19012                                  
 19013                                  TEST_RE_NET2:
 19014                                  	;test	word [es:di+43h],8000h
 19015                                  	; 17/12/2022
 19016                                  	;test	byte [es:di+44h],80h
 19017                                  	; 28/12/2022
 19018 00002CD5 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8
 19019                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 19020 00002CDA 7406                    	JZ	short LOCAL_SEARCH_FIRST
 19021                                  
 19022                                  ;IF NOT Installed
 19023                                  ;	transfer NET_SEARCH_FIRST
 19024                                  ;ELSE
 19025                                  	;mov	ax,111Bh
 19026 00002CDC B81B11                  	MOV	AX,(MultNET<<8)|27
 19027 00002CDF CD2F                    	INT	2FH
 19028 00002CE1 C3                      	retn
 19029                                  ;ENDIF
 19030                                  	; 18/05/2019 - Retro DOS v4.0
 19031                                  LOCAL_SEARCH_FIRST:
 19032 00002CE2 E80EE6                  	call	ECritDisk
 19033                                  	; MSDOS 6.0
 19034                                  	;;test	word [DOS34_FLAG],400h
 19035                                  	; 17/12/2022
 19036                                  	;test	byte [DOS34_FLAG+1],04h
 19037 00002CE5 F606[1206]04            	test	byte [DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)
 19038                                  	;TEST	word [DOS34_FLAG],SEARCH_FASTOPEN ;AN000;
 19039 00002CEA 7405                    	JZ	short NOFN			;AN000;
 19040                                  	;or	byte [FastOpenFlg],1
 19041 00002CEC 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	;AN000;
 19042                                  NOFN:						;AN000;
 19043 00002CF1 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 19044                                  
 19045                                  ; 03/02/2024
 19046                                  %if 0
 19047                                  	; MSDOS 6.0
 19048                                  	CALL	CHECK_QUESTION		;AN000;;FO. is '?' in path
 19049                                  	JNC	short norm_GETPATH	;AN000;;FO. no
 19050                                  %else
 19051                                  	; 03/02/2024
 19052 00002CF6 16                      	push	ss
 19053 00002CF7 1F                      	pop	ds			;AN000;;FO. ds:si -> final path
 19054 00002CF8 8B36[B205]              	mov	si,[WFP_START]		;AN000;;FO.
 19055                                  getnext:				;AN000;
 19056 00002CFC AC                      	lodsb				;AN000;;FO. get char
 19057 00002CFD 08C0                    	or	al,al			;AN000;;FO. is it null
 19058 00002CFF 7409                    	jz	short NO_Question	;AN000;;FO. yes
 19059 00002D01 3C3F                    	cmp	al,'?'                  ;AN000;;FO. is '?'
 19060 00002D03 75F7                    	jne	short getnext 		;AN000;;FO. no
 19061                                  %endif
 19062                                  	;and	byte [FastOpenFlg],80h
 19063 00002D05 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 19064                                  NO_Question:	; 03/02/2024
 19065                                  norm_GETPATH:
 19066 00002D0A E85E11                  	call	GETPATH
 19067                                  	; BX = offset NAME1
 19068                                  ;_getdone:
 19069 00002D0D 7318                    	JNC	short find_check_dev
 19070 00002D0F 7511                    	JNZ	short bad_path3
 19071 00002D11 08C9                    	OR	CL,CL
 19072 00002D13 740D                    	JZ	short bad_path3
 19073                                  find_no_more:
 19074                                  	;mov	ax,12h
 19075 00002D15 B81200                  	MOV	AX,error_no_more_files
 19076                                  BadBye:
 19077                                  	; MSDOS 6.0
 19078 00002D18 368026[3A0D]80          	AND	byte [SS:FastOpenFlg],Fast_yes  ;AN000;;FO. reset fastopen
 19079                                  
 19080 00002D1E F9                      	STC
 19081                                  	;call	LCritDisk
 19082                                  	;retn
 19083                                  	; 18/12/2022
 19084 00002D1F E9ECE5                  	jmp	LCritDisk
 19085                                  
 19086                                  bad_path3:
 19087                                  	;mov	ax,3
 19088 00002D22 B80300                  	MOV	AX,error_path_not_found
 19089 00002D25 EBF1                    	JMP	short BadBye
 19090                                  
 19091                                  find_check_dev:
 19092 00002D27 08E4                    	OR	AH,AH
 19093 00002D29 790A                    	JNS	short found_entry
 19094 00002D2B C706[4803]FFFF          	MOV	word [LASTENT],-1	; Cause DOS_SEARCH_NEXT to fail
 19095 00002D31 FE06[7005]              	INC	byte [FOUND_DEV]	; Tell DOS_RENAME we found a device
 19096                                  found_entry:
 19097                                  
 19098                                  ; We set the physical drive byte here Instead of after found_it; Doing
 19099                                  ; a search-next may not have wfp_start set correctly
 19100                                  
 19101 00002D35 C43E[2C03]              	LES	DI,[DMAADD]
 19102 00002D39 8B36[B205]              	MOV	SI,[WFP_START]		; get pointer to beginning
 19103 00002D3D AC                      	LODSB
 19104 00002D3E 2C40                    	SUB	AL,'A'-1                ; logical drive
 19105 00002D40 AA                      	STOSB				; High bit not set (local)
 19106                                  found_it:
 19107 00002D41 C43E[2C03]              	LES	DI,[DMAADD]
 19108 00002D45 47                      	INC	DI
 19109                                  
 19110                                  	; MSDOS 6.0
 19111 00002D46 1E                      	PUSH	DS				  ;FO.;AN001; save ds
 19112                                  	;test	byte [FastOpenFlg],10h
 19113 00002D47 F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search ;FO.;AN001; from fastopen
 19114 00002D4C 7408                    	JZ	short notfast			  ;FO.;AN001;
 19115 00002D4E 89DE                    	MOV	SI,BX				  ;FO.;AN001;
 19116 00002D50 8E1E[E405]              	MOV	DS,[CURBUF+2]			  ;FO.;AN001;
 19117 00002D54 EB03                    	JMP	SHORT movmov			  ;FO.;AN001;
 19118                                  
 19119                                  notfast:
 19120 00002D56 BE[4B05]                	MOV	SI,NAME1		; find_buf 2 = formatted name
 19121                                  movmov:
 19122                                  ; Special E5 code
 19123 00002D59 A4                      	MOVSB
 19124 00002D5A 26807DFF05              	CMP	BYTE [ES:DI-1],5
 19125 00002D5F 7505                    	JNZ	short NOTKANJB
 19126 00002D61 26C645FFE5              	MOV	BYTE [ES:DI-1],0E5H
 19127                                  NOTKANJB:
 19128                                  	;MOV	CX,10
 19129                                  	;REP	MOVSB
 19130                                  	; 03/02/2024
 19131 00002D66 B90500                  	mov	cx,5
 19132 00002D69 F3A5                    	rep	movsw
 19133                                  
 19134                                  	; 08/09/2018
 19135 00002D6B 1F                      	POP	DS			;FO.;AN001; restore ds
 19136                                  
 19137 00002D6C A0[6B05]                	MOV	AL,[ATTRIB]
 19138 00002D6F AA                      	STOSB
 19139 00002D70 50                      	PUSH	AX			; Save AH device info
 19140 00002D71 A1[4803]                	MOV	AX,[LASTENT]
 19141 00002D74 AB                      	STOSW
 19142 00002D75 A1[C205]                	MOV	AX,[DIRSTART]
 19143 00002D78 AB                      	STOSW
 19144                                  ; 4 bytes of 21 byte cont structure left for NET stuff
 19145 00002D79 83C704                  	ADD	DI,4
 19146 00002D7C 58                      	POP	AX			; Recover AH device info
 19147 00002D7D 08E4                    	OR	AH,AH
 19148 00002D7F 781B                    	JS	short DOSREL		; Device entry is DOSGROUP relative
 19149 00002D81 833E[E205]FF            	CMP	WORD [CURBUF],-1
 19150 00002D86 7510                    	JNZ	short OKSTORE
 19151                                  
 19152                                  	; MSDOS 6.0
 19153 00002D88 F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search
 19154                                  					;AN000;;FO. from fastopen and is good
 19155 00002D8D 7509                    	JNZ	short OKSTORE		;AN000;;FO.
 19156                                  
 19157                                  	; The user has specified the root directory itself, rather than some
 19158                                  	; contents of it. We can't "find" that.
 19159                                  
 19160 00002D8F 26C745F8FFFF            	MOV	WORD [ES:DI-8],-1	; Cause DOS_SEARCH_NEXT to fail by
 19161                                  					;   stuffing a -1 at Lastent
 19162 00002D95 E97DFF                  	JMP	find_no_more
 19163                                  
 19164                                  OKSTORE:
 19165 00002D98 8E1E[E405]              	MOV	DS,[CURBUF+2]
 19166                                  DOSREL:
 19167                                  	; BX = offset NAME1 (from GETPATH)
 19168 00002D9C 89DE                    	MOV	SI,BX			; SI-> start of entry
 19169                                  
 19170                                  ; NOTE: DOS_RENAME depends on BX not being altered after this point
 19171                                  
 19172                                  	;;mov	cx,32
 19173                                  	;MOV	CX,dir_entry.size
 19174                                  	; 03/02/2024
 19175 00002D9E B91000                  	mov	cx,dir_entry.size>>1
 19176                                  ;;;;; 7/29/86
 19177 00002DA1 89F8                    	MOV	AX,DI			; save the 1st byte addr
 19178                                  	;REP	MOVSB
 19179 00002DA3 F3A5                    	rep	movsw
 19180                                  	;
 19181 00002DA5 89C7                    	MOV	DI,AX			; restore 1st byte addr
 19182 00002DA7 26803D05                	CMP	BYTE [ES:DI],05H	; special char check
 19183 00002DAB 7504                    	JNZ	short NO05
 19184 00002DAD 26C605E5                	MOV	BYTE [ES:DI],0E5H	; convert it back to E5
 19185                                  NO05:
 19186                                  
 19187                                  ;;;;; 7/29/86
 19188                                  
 19189                                  ;hkn; FastOpenflg is in DOSDATA use SS
 19190                                  	; 16/12/2022
 19191                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 19192                                  	; MSDOS 6.0
 19193                                  	;AND	byte [SS:FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 19194                                  	; 18/05/2019 - Retro DOS v4.0
 19195 00002DB1 16                      	push	ss
 19196 00002DB2 1F                      	pop	ds
 19197                                  	; 16/12/2022
 19198 00002DB3 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes
 19199                                  
 19200                                  ;hkn; SS is DOSDATA
 19201                                  	;push	ss
 19202                                  	;pop	ds
 19203 00002DB8 F8                      	CLC
 19204                                  	;call	LCritDisk
 19205                                  	;retn
 19206                                  	; 16/12/2022
 19207 00002DB9 E952E5                  	jmp	LCritDisk
 19208                                  
 19209                                  ;BREAK <DOS_SEARCH_NEXT - scan for subsequent matches>
 19210                                  ;----------------------------------------------------------------------------
 19211                                  ;
 19212                                  ; Procedure Name : DOS_SEARCH_NEXT
 19213                                  ;
 19214                                  ; Inputs:
 19215                                  ;	[DMAADD] Points to 53 byte buffer returned by DOS_SEARCH_FIRST
 19216                                  ;	    (only first 21 bytes must have valid information)
 19217                                  ; Function:
 19218                                  ;	Look for subsequent matches
 19219                                  ; Outputs:
 19220                                  ;	CARRY CLEAR
 19221                                  ;	    The 53 bytes at DMAADD are updated for next call
 19222                                  ;		(see DOS_SEARCH_FIRST)
 19223                                  ;	CARRY SET
 19224                                  ;	    AX = error code
 19225                                  ;		error_no_more_files
 19226                                  ;			No more files to find
 19227                                  ; DS preserved, others destroyed
 19228                                  ;---------------------------------------------------------------------------
 19229                                  
 19230                                  ;hkn; called from search.asm. DS already set up at this point.
 19231                                  
 19232                                  DOS_SEARCH_NEXT:
 19233 00002DBC C43E[2C03]              	LES	DI,[DMAADD]
 19234 00002DC0 268A05                  	MOV	AL,[ES:DI]
 19235 00002DC3 A880                    	TEST	AL,80H			; Test for NET
 19236 00002DC5 7406                    	JZ	short LOCAL_SEARCH_NEXT
 19237                                  ;IF NOT Installed
 19238                                  ;	transfer NET_SEARCH_NEXT
 19239                                  ;ELSE
 19240                                  	;mov	ax,111Ch
 19241 00002DC7 B81C11                  	MOV	AX,(MultNET<<8)|28
 19242 00002DCA CD2F                    	INT	2FH  ; Multiplex - NETWORK REDIRECTOR - FINDNEXT
 19243                                  		     ; SS = DS = DOS CS, [DTA] = 21-byte findfirst search data
 19244                                  		     ; Return: CF set on error, AX = DOS error code
 19245                                  		     ; CF clear if successful
 19246 00002DCC C3                      	retn
 19247                                  ;ENDIF
 19248                                  
 19249                                  LOCAL_SEARCH_NEXT:
 19250                                  	;AL is drive A=1
 19251                                  	;mov	byte [EXTERR_LOCUS],2
 19252 00002DCD C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19253 00002DD2 E81EE5                  	call	ECritDisk
 19254                                  
 19255                                  ;hkn; DummyCDS is in DOSDATA
 19256 00002DD5 C706[A205][F304]        	MOV     word [THISCDS],DUMMYCDS
 19257                                  ;hkn; Segment address is DOSDATA - use ds
 19258                                  ;hkn;	MOV     WORD [THISCDS+2],CS
 19259 00002DDB 8C1E[A405]              	mov	[THISCDS+2],DS
 19260                                  
 19261 00002DDF 0440                    	ADD	AL,'A'-1
 19262 00002DE1 E84F3B                  	call	InitCDS
 19263                                  
 19264                                  ;	call	GETTHISDRV		; Set CDS pointer
 19265                                  
 19266 00002DE4 7246                    	JC	short No_files		; Bogus drive letter
 19267 00002DE6 C43E[A205]              	LES	DI,[THISCDS]		; Get CDS pointer
 19268                                  	;les	bp,[es:di+45h]
 19269 00002DEA 26C46D45                	LES	BP,[ES:DI+curdir.devptr] ; Get DPB pointer
 19270 00002DEE E83DD8                  	call	GOTDPB			; [THISDPB] = ES:BP
 19271                                  
 19272                                  	; 16/12/2022
 19273 00002DF1 268A4600                	mov	al,[ES:BP]
 19274                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 19275                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[ES:BP+0]
 19276 00002DF5 A2[7605]                	mov	[THISDRV],AL
 19277                                  	;mov	word [CREATING],0E500h
 19278 00002DF8 C706[7E05]00E5          	MOV	WORD [CREATING],(DIRFREE*256)+0
 19279 00002DFE C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 19280 00002E03 C536[2C03]              	LDS	SI,[DMAADD]
 19281 00002E07 AC                      	LODSB				; Drive Byte
 19282                                  
 19283                                  	;entry	RENAME_NEXT		; Entry used by DOS_RENAME
 19284                                  RENAME_NEXT:
 19285                                  	;context ES
 19286 00002E08 16                      	push	ss
 19287 00002E09 07                      	pop	es			; THIS BLOWS ES:BP POINTER TO DPB
 19288                                  
 19289                                  ;hkn; NAME1 is in DOSDATA
 19290 00002E0A BF[4B05]                	MOV	DI,NAME1
 19291                                  
 19292 00002E0D B90B00                  	MOV	CX,11
 19293 00002E10 F3A4                    	REP	MOVSB			; Search name
 19294 00002E12 AC                      	LODSB				; Attribute
 19295                                  
 19296                                  ;hkn; SS override
 19297 00002E13 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 19298 00002E17 AD                      	LODSW				; LastEnt
 19299 00002E18 09C0                    	OR	AX,AX
 19300                                  	; 03/02/2024
 19301                                  	;JNS	short cont_load
 19302 00002E1A 7810                    	js	short No_files
 19303                                  ;No_files:
 19304                                  	;JMP	find_no_more
 19305                                  
 19306                                  cont_load:
 19307 00002E1C 50                      	PUSH	AX			; Save LastEnt
 19308 00002E1D AD                      	LODSW				; DirStart
 19309 00002E1E 89C3                    	MOV	BX,AX
 19310                                  
 19311                                  ;hkn; SS is DOSDATA
 19312                                  	;context DS
 19313 00002E20 16                      	push	ss
 19314 00002E21 1F                      	pop	ds
 19315 00002E22 C42E[8A05]              	LES	BP,[THISDPB]		; Recover ES:BP
 19316                                  	;invoke	SetDirSrch
 19317 00002E26 E8E50F                  	call	SETDIRSRCH
 19318 00002E29 7304                    	JNC	short SEARCH_GOON
 19319 00002E2B 58                      	POP	AX			; Clean stack
 19320                                  	;JMP	short No_files
 19321                                  	; 03/02/2024
 19322                                  No_files:
 19323 00002E2C E9E6FE                  	JMP	find_no_more
 19324                                  
 19325                                  SEARCH_GOON:
 19326 00002E2F E8CC12                  	call	STARTSRCH
 19327 00002E32 58                      	POP	AX
 19328 00002E33 E8A90F                  	call	GETENT
 19329 00002E36 72F4                    	JC	short No_files
 19330 00002E38 E8DF0E                  	call	NEXTENT
 19331 00002E3B 72EF                    	JC	short No_files
 19332 00002E3D 30E4                    	XOR	AH,AH			; If Search_Next, can't be a DEV
 19333 00002E3F E9FFFE                  	JMP	found_it ; 10/08/2018
 19334                                  
 19335                                  ; MSDOS 6.0
 19336                                  ;---------------------------------------------------------------------------
 19337                                  ;
 19338                                  ; Procedure Name : CHECK_QUESTION
 19339                                  ;
 19340                                  ; Input: [WFP_START]= pointer to final path
 19341                                  ; Function: check '?' char
 19342                                  ; Output: carry clear, if no '?'
 19343                                  ;	 carry set, if '?' exists
 19344                                  ;---------------------------------------------------------------------------
 19345                                  
 19346                                  ; 03/02/2024
 19347                                  %if 0
 19348                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19349                                  CHECK_QUESTION:
 19350                                  ;hkn;	wfp_start is in DOSDATA;hkn;	MOV	WORD PTR ThisCDS+2,CS
 19351                                  ;hkn;	PUSH	CS			;AN000;;FO.
 19352                                  	push	ss
 19353                                  	POP	DS			;AN000;;FO. ds:si -> final path
 19354                                  	; 16/12/2022
 19355                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 19356                                  	MOV	SI,[WFP_START]		;AN000;;FO.
 19357                                  	;mov	si,[ss:WFP_START]
 19358                                  getnext:				;AN000;
 19359                                  	LODSB				;AN000;;FO. get char
 19360                                  	OR	AL,AL			;AN000;;FO. is it null
 19361                                  	JZ	short NO_Question	;AN000;;FO. yes
 19362                                  	CMP	AL,'?'                  ;AN000;;FO. is '?'
 19363                                  	JNZ	short getnext 		;AN000;;FO. no
 19364                                  	STC				;AN000;;FO.
 19365                                  NO_Question:				;AN000;
 19366                                  	retn				;AN000;;FO.
 19367                                  %endif
 19368                                  
 19369                                  ;============================================================================
 19370                                  ; ABORT.ASM, MSDOS 6.0, 1991
 19371                                  ;============================================================================
 19372                                  ; 23/07/2018 - Retro DOS v3.0
 19373                                  ; 18/05/2019 - Retro DOS v4.0
 19374                                  
 19375                                  ;**
 19376                                  ;
 19377                                  ; Internal Abort call closes all handles and FCBs associated with a process.
 19378                                  ;  If process has NET resources a close all is sent out over the net.
 19379                                  ;
 19380                                  ;   DOS_ABORT
 19381                                  ;
 19382                                  ;   Modification history:
 19383                                  ;
 19384                                  ;       Created: ARR 30 March 1983
 19385                                  ;
 19386                                  ;	M038	SR	10/16/90	Free SFT with the PSP of the process
 19387                                  ;				being terminated only if it is busy.
 19388                                  ;
 19389                                  
 19390                                  ;Break   <DOS_ABORT -- CLOSE all files for process>
 19391                                  ;--------------------------------------------------------------------------
 19392                                  ;
 19393                                  ; Procedure Name : DOS_ABORT
 19394                                  ;
 19395                                  ; Inputs:
 19396                                  ;       [CurrentPDB] set to PID of process aborting
 19397                                  ; Function:
 19398                                  ;       Close all files and free all SFTs for this PID
 19399                                  ; Returns:
 19400                                  ;       None
 19401                                  ; All destroyed except stack
 19402                                  ;---------------------------------------------------------------------------
 19403                                  
 19404                                  DOS_ABORT:
 19405 00002E42 368E06[3003]            	MOV     ES,[SS:CurrentPDB]	; SS override
 19406 00002E47 268B0E3200              	MOV     CX,[ES:PDB.JFN_Length]  ; Number of JFNs
 19407                                  reset_free_jfn:
 19408 00002E4C 89CB                    	MOV     BX,CX
 19409 00002E4E 51                      	PUSH    CX
 19410 00002E4F 4B                      	DEC     BX                      ; get jfn (start with last one)
 19411                                  
 19412 00002E50 E81438                  	CALL	_$CLOSE
 19413 00002E53 59                      	POP     CX
 19414 00002E54 E2F6                    	LOOP    reset_free_jfn          ; and do 'em all
 19415                                  
 19416                                  ; Note: We do need to explicitly close FCBs. Reasons are as follows: If we
 19417                                  ; are running in the no-sharing no-network environment, we are simulating the
 19418                                  ; 2.0 world and thus if the user doesn't close the file, that is his problem
 19419                                  ; BUT... the cache remains in a state with garbage that may be reused by the
 19420                                  ; next process. We scan the set and blast the ref counts of the FCBs we own.
 19421                                  ;
 19422                                  ; If sharing is loaded, then the following call to close process will
 19423                                  ; correctly close all FCBs. We will then need to walk the list AFTER here.
 19424                                  ;
 19425                                  ; Finally, the following call to NET_Abort will cause an EOP to be sent to all
 19426                                  ; known network resources. These resources are then responsible for cleaning
 19427                                  ; up after this process.
 19428                                  ;
 19429                                  ; Sleazy, eh?
 19430                                  
 19431                                  	;context DS			; SS is DOSDATA
 19432 00002E56 16                      	push	ss
 19433 00002E57 1F                      	pop	ds  ; 09/09/2018
 19434                                  
 19435                                  	;CallInstall Net_Abort, MultNET, 29
 19436 00002E58 B81D11                  	mov	ax,111Dh
 19437 00002E5B CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR 
 19438                                  			;	    - CLOSE ALL REMOTE FILES FOR PROCESS
 19439                                  			; DS???, SS = DOS CS
 19440                                  ;if installed
 19441 00002E5D FF1E[A000]              	call	far [JShare+(4*4)]	; 4 = MFTCloseP
 19442                                  ;else
 19443                                  ;	call 	MFTCloseP
 19444                                  ;endif
 19445                                  
 19446                                  ; Scan the FCB cache for guys that belong to this process and zap their ref
 19447                                  ; counts.
 19448                                  					; SS override
 19449 00002E61 36C43E[4000]            	les     di,[ss:SFTFCB]		; grab the pointer to the table
 19450                                  	;mov	cx,[es:di+4]
 19451 00002E66 268B4D04                	mov     cx,[es:di+SFT.SFCount]
 19452 00002E6A E317                    	jcxz    FCBScanDone
 19453                                  	;lea	di,[di+6]
 19454 00002E6C 8D7D06                  	LEA     DI,[DI+SFT.SFTable]	; point at table
 19455 00002E6F 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 19456                                  FCBTest:
 19457                                  	;cmp	[es:di+31h],ax
 19458 00002E73 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax ; is this one of ours
 19459 00002E77 7505                    	jnz	short FCBNext		; no, skip it
 19460 00002E79 26C7050000              	mov	word [es:di],0
 19461                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0  ; yes, blast ref count
 19462                                  FCBNext:
 19463 00002E7E 83C73B                  	add     di,SF_ENTRY.size ; 59 (for MSDOS 6.0)
 19464 00002E81 E2F0                    	loop    FCBTest
 19465                                  FCBScanDone:
 19466                                  
 19467                                  ; Walk the SFT to eliminate all busy SFT's for this process.
 19468                                  
 19469 00002E83 31DB                    	XOR     BX,BX
 19470                                  Scan:
 19471 00002E85 53                      	push    bx
 19472 00002E86 E85937                  	call	SFFromSFN
 19473 00002E89 5B                      	pop     bx
 19474                                  	;jnc	short Scan1
 19475                                  	;retn
 19476                                  
 19477                                  	; 18/12/2022
 19478                                  	;jc	short NO_Question ; retn
 19479                                  	; 03/02/2024
 19480 00002E8A 7234                    	jc	short RET2
 19481                                  
 19482                                  ;M038
 19483                                  ; Do what the comment above says, check for busy state
 19484                                  
 19485                                  Scan1:
 19486                                  	;cmp	word [es:di],0
 19487                                  	;jz	short scan_next  ; MSDOS 3.3
 19488                                  	; MSDOS 6.0
 19489 00002E8C 26833DFF                	cmp	word [es:di],sf_busy ; -1
 19490                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 19491                                  				; Is Sft busy? ;M038
 19492 00002E90 7519                    	jnz	short scan_next
 19493                                  ;
 19494                                  ; we have a SFT that is busy. See if it is for the current process
 19495                                  ;
 19496 00002E92 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 19497                                  	;cmp	[es:di+31h],ax
 19498 00002E96 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax
 19499 00002E9A 750F                    	jnz	short scan_next
 19500 00002E9C 36A1[3E03]              	mov     ax,[SS:USER_ID]		; SS override
 19501                                  	;cmp	[es:di+2Fh],ax
 19502 00002EA0 2639452F                	cmp	[es:di+SF_ENTRY.sf_UID],ax
 19503 00002EA4 7505                    	jnz	short scan_next
 19504                                  
 19505                                  ; This SFT is labelled as ours.
 19506                                  
 19507 00002EA6 26C7050000              	mov	word [es:di],0
 19508                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0
 19509                                  scan_next:
 19510 00002EAB 43                      	inc     bx
 19511 00002EAC EBD7                    	jmp     short Scan
 19512                                  
 19513                                  ;============================================================================
 19514                                  ; CLOSE.ASM, MSDOS 6.0, 1991
 19515                                  ;============================================================================
 19516                                  ; 23/07/2018 - Retro DOS v3.0
 19517                                  ; 18/05/2019 - Retro DOS v4.0
 19518                                  
 19519                                  ;**	Internal Close and Commit calls to close a local or NET SFT.
 19520                                  ;
 19521                                  ;	DOS_CLOSE
 19522                                  ;	DOS_COMMIT
 19523                                  ;	FREE_SFT
 19524                                  ;	SetSFTTimes
 19525                                  ;
 19526                                  ;	Revision history:
 19527                                  ;
 19528                                  ;	   AN000  version 4.00	Jan. 1988
 19529                                  ;	   A005   PTM 3718 --- lost clusters when fastopen installed
 19530                                  ;	   A011   PTM 4766 --- C2 fastopen problem
 19531                                  
 19532                                  ;Installed = TRUE
 19533                                  
 19534                                  ;Break <DOS_CLOSE -- CLOSE FILE from SFT>
 19535                                  ;---------------------------------------------------------------------------
 19536                                  ;
 19537                                  ; Procedure Name : DOS_CLOSE
 19538                                  ;
 19539                                  ; Inputs:
 19540                                  ;	[THISSFT] set to the SFT for the file being used
 19541                                  ; Function:
 19542                                  ;	Close the indicated file via the SFT
 19543                                  ; Returns:
 19544                                  ;	sf_ref_count decremented otherwise
 19545                                  ;	ES:DI point to SFT
 19546                                  ;	Carry set if error
 19547                                  ;	    AX has error code
 19548                                  ; DS preserved, others destroyed
 19549                                  ;---------------------------------------------------------------------------
 19550                                  
 19551                                  ;hkn; DOS_CLOSE called from fcbio.asm and handle.asm. DS already set up.
 19552                                  
 19553                                  ; 18/05/2019 - Retro DOS v4.0
 19554                                  ; DOSCODE:6E2Eh (MSDOS 6.21, MSDOS.SYS)
 19555                                  
 19556                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19557                                  ; DOSCODE:6E1Ah (MSDOS 5.0, MSDOS.SYS)
 19558                                  
 19559                                  ; 23/07/2018 - IBMDOS.COM (MSDOS 3.3), 1987 - Offset 39D0h
 19560                                  
 19561                                  DOS_CLOSE:
 19562 00002EAE C43E[9E05]              	LES	DI,[THISSFT]
 19563                                  	;mov	bx,[ES:DI+5]
 19564 00002EB2 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19565                                  
 19566                                  ; Network closes are handled entirely by the net code.
 19567                                  
 19568                                  	;;test	bx,8000h
 19569                                  	;TEST	BX,sf_isnet
 19570                                  	; 17/12/2022
 19571                                  	;test	bh,80h
 19572 00002EB6 F6C780                  	test	bh,(sf_isnet>>8)
 19573 00002EB9 7406                    	JZ	short LocalClose
 19574                                  
 19575                                  	;CallInstall Net_Close,MultNET,6
 19576 00002EBB B80611                  	mov     ax,1106h
 19577 00002EBE CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE FILE
 19578                                  			; ES:DI -> SFT
 19579                                  			; SFT DPB field -> DPB of drive containing file
 19580                                  			; Return: CF set on error, AX = DOS error code
 19581                                  			; CF clear if successful
 19582                                  RET2:		; 03/02/2024
 19583 00002EC0 C3                      	retn
 19584                                  
 19585                                  ; All closes release the sharing information.
 19586                                  ; No commit releases sharing information
 19587                                  ;
 19588                                  ; All closes decrement the ref count.
 19589                                  ; No commit decrements the ref count.
 19590                                  
 19591                                  LocalClose:
 19592 00002EC1 E82FE4                  	call	ECritDisk
 19593 00002EC4 E85801                  	CALL	SetSFTTimes
 19594 00002EC7 E8D900                  	CALL	FREE_SFT		; dec ref count or mark as busy
 19595                                  
 19596                                  ;hkn; SS is DOSDATA
 19597                                  	;Context DS
 19598 00002ECA 16                      	push	ss
 19599 00002ECB 1F                      	pop	ds
 19600                                  
 19601 00002ECC 50                      	push	ax
 19602 00002ECD 53                      	push	bx
 19603 00002ECE E8F843                  	call	ShareEnd
 19604 00002ED1 5B                      	pop	bx
 19605 00002ED2 58                      	pop	ax
 19606                                  
 19607                                  ; Commit enters here. AX from commit MUST be <> 1, BX is flags word
 19608                                  
 19609                                  CloseEntry:
 19610 00002ED3 50                      	PUSH	AX
 19611                                  
 19612                                  ; File clean or device does not get stamped nor disk looked at.
 19613                                  
 19614                                  	;test	bx,0C0h
 19615                                  	; 17/12/2022
 19616 00002ED4 F6C3C0                  	test	bl,devid_file_clean+devid_device
 19617                                  	;TEST	BX,devid_file_clean+devid_device
 19618 00002ED7 7403                    	JZ	short rdir
 19619                                  	; 14/11/2022
 19620 00002ED9 E9B500                  	JMP	FREE_SFT_OK		; either clean or device
 19621                                  	;jnz	short FREE_SFT_OK ; 24/07/2019	
 19622                                  
 19623                                  ; Retrieve the directory entry for the file
 19624                                  
 19625                                  rdir:
 19626 00002EDC E8D100                  	CALL	DirFromSFT
 19627                                  	;mov	al,5
 19628 00002EDF B005                    	MOV	AL,error_access_denied
 19629 00002EE1 7303                    	JNC	short clook
 19630                                  	; 14/11/2022
 19631 00002EE3 E9AC00                  	JMP	CloseFinish		; pretend the close worked.
 19632                                  	;jc	short CloseFinish ; 24/07/2019
 19633                                  clook:
 19634                                  
 19635                                  ; ES:DI points to entry
 19636                                  ; DS:SI points to SFT
 19637                                  ; ES:BX points to buffer header
 19638                                  
 19639 00002EE6 57                      	push	di
 19640 00002EE7 56                      	push	si
 19641                                  	;lea	si,[si+20h]
 19642 00002EE8 8D7420                  	LEA	SI,[SI+SF_ENTRY.sf_name]
 19643                                  
 19644                                  ; ES:DI point to directory entry
 19645                                  ; DS:SI point to unpacked name
 19646                                  
 19647 00002EEB E8F7E2                  	call	XCHGP
 19648                                  
 19649                                  ; ES:DI point to unpacked name
 19650                                  ; DS:SI point to directory entry
 19651                                  
 19652 00002EEE E8870E                  	call	MetaCompare
 19653 00002EF1 E8F1E2                  	call	XCHGP
 19654 00002EF4 5E                      	pop	si
 19655 00002EF5 5F                      	pop	di
 19656 00002EF6 740C                    	JZ	short CLOSE_GO		; Name OK
 19657                                  Bye:	
 19658 00002EF8 89F7                    	MOV	DI,SI
 19659 00002EFA 1E                      	PUSH	DS
 19660 00002EFB 07                      	POP	ES			; ES:DI points to SFT
 19661 00002EFC 16                      	PUSH	SS
 19662 00002EFD 1F                      	POP	DS
 19663 00002EFE F9                      	STC
 19664                                  	;mov	al,2
 19665 00002EFF B002                    	MOV	AL,error_file_not_found
 19666 00002F01 E98E00                  	JMP	CloseFinish ; 24/07/2019
 19667                                  
 19668                                  	; 18/05/2019 - Retro DOS v4.0
 19669                                  CLOSE_GO:
 19670                                  	; 03/02/2024
 19671                                  	;mov	al,[si+4]
 19672 00002F04 8A4404                  	mov	al,[si+SF_ENTRY.sf_attr]
 19673                                  	
 19674                                  	; MSDOS 6.0
 19675                                  	;test	word [si+2],8000h
 19676                                  	;TEST	word [SI+SF_ENTRY.sf_mode],sf_isFCB ; FCB ?
 19677                                  	; 17/12/2022
 19678                                  	;test	byte [si+3],80h
 19679 00002F07 F6440380                	test	byte [SI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8) ; FCB ?
 19680 00002F0B 740A                    	JZ	short nofcb		; no, set dir attr, sf_attr
 19681                                  	; MSDOS 3.3 & MSDOS 6.0
 19682                                  	;mov	ch,[es:di+0Bh]
 19683 00002F0D 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]
 19684                                  
 19685                                  	; 03/02/2024
 19686                                  	;;mov	al,[si+4]
 19687                                  	;MOV	AL,[SI+SF_ENTRY.sf_attr]
 19688                                  
 19689                                  ;hkn; SS override
 19690 00002F11 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 19691                                  	; MSDOS 3.3
 19692                                  	;;call	MatchAttributes
 19693                                  	;;JNZ	short Bye		; attributes do not match
 19694                                  	; 18/05/2019
 19695 00002F15 EB04                    	JMP	SHORT setattr		;FT.
 19696                                  nofcb:
 19697                                  	; 03/02/2024
 19698                                  	; MSDOS 6.0
 19699                                  	;;mov	al,[si+4]
 19700                                  	;MOV	AL,[SI+SF_ENTRY.sf_attr] ;FT.		;AN000;
 19701                                  
 19702 00002F17 2688450B                	MOV	[ES:DI+dir_entry.dir_attr],AL ;FT.	;AN000;
 19703                                  setattr:
 19704                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19705                                  	;or	byte [es:di+0Bh],20h
 19706 00002F1B 26804D0B20              	OR	BYTE [ES:DI+dir_entry.dir_attr],attr_archive ;Set archive
 19707                                  	; MSDOS 6.0
 19708                                  	;mov	ax,[es:di+1Ah]
 19709 00002F20 268B451A                	MOV	AX,[ES:DI+dir_entry.dir_first] ;AN011
 19710                                  					;F.O. save old first cluster
 19711                                  ;hkn; SS override
 19712 00002F24 36A3[BE0F]              	MOV	[SS:OLD_FIRSTCLUS],AX	;AN011;F.O. save old first cluster
 19713                                  
 19714                                  ; 03/02/2024
 19715                                  %if 0
 19716                                  	;mov	ax,[si+0Bh]
 19717                                  	MOV	AX,[SI+SF_ENTRY.sf_firclus]
 19718                                  	;mov	[es:di+1Ah],ax
 19719                                  	MOV	[ES:DI+dir_entry.dir_first],AX	;Set firclus pointer
 19720                                  	;mov	ax,[si+11h]
 19721                                  	MOV	AX,[SI+SF_ENTRY.sf_size]
 19722                                  	;mov	[es:di+1Ch],ax
 19723                                  	MOV	[ES:DI+dir_entry.dir_size_l],AX	;Set size
 19724                                  	;mov	ax,[si+13h]
 19725                                  	MOV	AX,[SI+SF_ENTRY.sf_size+2]
 19726                                  	;mov	[es:di+1Eh],ax
 19727                                  	MOV	[ES:DI+dir_entry.dir_size_h],AX
 19728                                  	;mov	ax,[si+0Fh]
 19729                                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 19730                                  	;mov	[es:di+18h],ax
 19731                                  	MOV	[ES:DI+dir_entry.dir_date],AX	;Set date
 19732                                  	;mov	ax,[si+0Dh]
 19733                                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 19734                                  	;mov	[es:di+16h],ax
 19735                                  	MOV	[ES:DI+dir_entry.dir_time],AX	;Set time
 19736                                  %else
 19737                                  	; 03/02/2024 - Retro DOS v4.2
 19738 00002F28 56                      	push	si
 19739 00002F29 83C60B                  	add	si,0Bh
 19740 00002F2C AD                      	lodsw	; [si+SF_ENTRY.sf_firclus]
 19741                                  	;mov	[es:di+1Ah],ax
 19742 00002F2D 2689451A                	mov	[es:di+dir_entry.dir_first],ax	; Set first cluster
 19743 00002F31 AD                      	lodsw	; [si+SF_ENTRY.sf_time]
 19744 00002F32 26894516                	mov	[es:di+dir_entry.dir_time],ax	; Set time
 19745 00002F36 AD                      	lodsw	; [si+SF_ENTRY.sf_date]
 19746 00002F37 26894518                	mov	[es:di+dir_entry.dir_date],ax	; Set date
 19747 00002F3B AD                      	lodsw	; [si+SF_ENTRY.sf_size]
 19748 00002F3C 2689451C                	mov	[es:di+dir_entry.dir_size_l],ax	; Set size
 19749 00002F40 AD                      	lodsw	; [si+SF_ENTRY.sf_size+2]
 19750 00002F41 2689451E                	mov	[es:di+dir_entry.dir_size_h],ax
 19751 00002F45 5E                      	pop	si
 19752                                  %endif
 19753                                  
 19754                                  	; MSDOS 6.0
 19755                                  ;; File Tagging
 19756 00002F46 26F6470540              	TEST	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty
 19757                                  				  ;LB. if already dirty		    ;AN000;
 19758 00002F4B 7508                    	JNZ	short yesdirty4	  ;LB.  don't increment dirty count ;AN000;
 19759                                  	; 02/06/2019
 19760 00002F4D E85B2B                  	call	INC_DIRTY_COUNT   ;LB.				    ;AN000;
 19761                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19762                                  	;or	byte [es:bx+5],40h
 19763 00002F50 26804F0540              	OR	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty
 19764                                  yesdirty4:
 19765 00002F55 1E                      	push	ds
 19766 00002F56 56                      	push	si
 19767                                  	; MSDOS 6.0
 19768                                  	;mov	cx,[si+0Bh]
 19769                                  	; 07/12/2022
 19770 00002F57 8B4C0B                  	MOV	CX,[SI+SF_ENTRY.sf_firclus] ; do this for Fastopen
 19771                                  ;hkn; SS override
 19772 00002F5A 36A0[7605]              	MOV	AL,[SS:THISDRV]
 19773                                  	; MSDOS 3.3 
 19774                                  	;push	ss
 19775                                  	;pop	ds
 19776                                  	;MOV	AL,[THISDRV]
 19777                                  ;;; 10/1/86  update fastopen cache
 19778                                  	; MSDOS 3.3 & MSDOS 6.0
 19779 00002F5E 52                      	PUSH	DX
 19780 00002F5F B400                    	MOV	AH,0			; dir entry update
 19781 00002F61 88C2                    	MOV	DL,AL			; drive number A=0, B=1,,,
 19782                                  	; MSDOS 6.0
 19783 00002F63 09C9                    	OR	CX,CX			;AN005; first cluster 0; may be truncated
 19784 00002F65 750D                    	JNZ	short do_update2	;AN005; no, do update
 19785 00002F67 B403                    	MOV	AH,3			;AN005; do a delete cache entry
 19786                                  	;mov	di,[si+1Bh]
 19787 00002F69 8B7C1B                  	MOV	DI,[SI+SF_ENTRY.sf_dirsec] ;AN005; cx:di = dir sector
 19788                                  	;mov	cx,[si+1Dh]
 19789 00002F6C 8B4C1D                  	MOV	CX,[SI+SF_ENTRY.sf_dirsec+2] ;AN005;
 19790                                  	;mov	dh,[si+1Fh]
 19791 00002F6F 8A741F                  	MOV	DH,[SI+SF_ENTRY.sf_dirpos] ;AN005; dh = dir pos
 19792 00002F72 EB0E                    	JMP	SHORT do_update 	;AN011;F.O.
 19793                                  do_update2:				;AN011;F.O.
 19794                                  ;hkn; SS override fort OLD_FIRSTCLUS
 19795                                  	; 
 19796 00002F74 363B0E[BE0F]            	CMP	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O. same as old first clusetr?
 19797 00002F79 7407                    	JZ	short do_update		;AN011;F.O. yes
 19798 00002F7B B402                    	MOV	AH,2			;AN011;F.O. delete the old entry
 19799 00002F7D 368B0E[BE0F]            	MOV	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O.
 19800                                  do_update:				;AN005;
 19801                                  ;hkn; SS is DOSDATA
 19802                                  	;Context DS
 19803 00002F82 16                      	push	ss
 19804 00002F83 1F                      	pop	ds
 19805                                  	; MSDOS 3.3 & MSDOS 6.0
 19806 00002F84 E8FCF6                  	call	FastOpen_Update 	; invoke fastopen
 19807 00002F87 5A                      	POP	DX
 19808                                  
 19809                                  ;;; 10/1/86  update fastopen cache
 19810 00002F88 E81B2A                  	call	FLUSHBUF		; flush all relevant buffers
 19811 00002F8B 5F                      	pop	di
 19812 00002F8C 07                      	pop	es
 19813                                  	;mov	al,5
 19814 00002F8D B005                    	MOV	AL,error_access_denied
 19815 00002F8F 7201                    	JC	short CloseFinish
 19816                                  FREE_SFT_OK:
 19817 00002F91 F8                      	CLC				; signal no error.
 19818                                  CloseFinish:
 19819                                  
 19820                                  ; Indicate to the device that the SFT is being closed.
 19821                                  
 19822                                  ;;;; 7/21/86
 19823 00002F92 9C                      	PUSHF				; save flag from DirFromSFT
 19824 00002F93 E8AA15                  	call	DEV_CLOSE_SFT
 19825 00002F96 9D                      	POPF
 19826                                  ;;;; 7/21/86
 19827                                  ;
 19828                                  ; See if the ref count indicates that we have busied the SFT. If so, mark the
 19829                                  ; SFT as being free. Note that we do NOT need to be in critSFT as we are ONLY
 19830                                  ; going to be moving from busy to free.
 19831                                  ;
 19832 00002F97 59                      	POP	CX			; get old ref count
 19833 00002F98 9C                      	PUSHF
 19834                                  	; 03/02/2024
 19835                                  	;DEC	CX			; if cx != 1
 19836                                  	;JNZ	short NoFree		; then do NOT free SFT
 19837 00002F99 E203                    	loop	NoFree ; PCDOS 7.1 IBMDOS.COM
 19838                                  
 19839 00002F9B 26890D                  	mov	[es:di],cx ; 0
 19840                                  	;MOV	[ES:DI+SF_ENTRY.sf_ref_Count],CX ; mov [es:di+0],cx
 19841                                  NoFree:
 19842 00002F9E E86DE3                  	call	LCritDisk
 19843 00002FA1 9D                      	POPF
 19844 00002FA2 C3                      	retn
 19845                                  
 19846                                  ;---------------------------------------------------------------------------
 19847                                  ;
 19848                                  ; Procedure Name : FREE_SFT
 19849                                  ;
 19850                                  ; ES:DI -> SFT. Decs sft_ref_count. If the count goes to 0, mark it as busy.
 19851                                  ; Flags preserved. Return old ref count in AX
 19852                                  ;
 19853                                  ; Note that busy is indicated by the SFT ref count being -1.
 19854                                  ;
 19855                                  ;---------------------------------------------------------------------------
 19856                                  
 19857                                  FREE_SFT:
 19858 00002FA3 9C                      	PUSHF		; Save carry state
 19859 00002FA4 268B05                  	mov	ax,[es:di]
 19860                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19861 00002FA7 48                      	DEC	AX
 19862 00002FA8 7501                    	JNZ	short SetCount
 19863 00002FAA 48                      	DEC	AX
 19864                                  SetCount:
 19865 00002FAB 268705                  	xchg	ax,[es:di]
 19866                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19867 00002FAE 9D                      	POPF
 19868 00002FAF C3                      	retn
 19869                                  
 19870                                  	; 18/05/2019 - Retro DOS v4.0
 19871                                  
 19872                                  ;----------------------------------------------------------------------------
 19873                                  ;
 19874                                  ; Procedure Name : DirFromSFT
 19875                                  ;
 19876                                  ;   DirFromSFT - locate a directory entry given an SFT.
 19877                                  ;
 19878                                  ;   Inputs:	ES:DI point to SFT
 19879                                  ;		DS = DOSDATA
 19880                                  ;   Outputs:
 19881                                  ;		EXTERR_LOCUS = errLOC_Disk
 19882                                  ;		CurBuf points to buffer
 19883                                  ;		Carry Clear -> operation OK
 19884                                  ;		    ES:DI point to entry
 19885                                  ;		    ES:BX point to buffer
 19886                                  ;		    DS:SI point to SFT
 19887                                  ;		Carry SET   -> operation failed
 19888                                  ;		    registers trashified
 19889                                  ;   Registers modified: ALL
 19890                                  ;----------------------------------------------------------------------------
 19891                                  
 19892                                  DirFromSFT:
 19893                                  	;mov	byte [EXTERR_LOCUS],2
 19894 00002FB0 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19895 00002FB5 06                      	push	es
 19896 00002FB6 57                      	push	di
 19897                                  	; MSDOS 3.3
 19898                                  	;;mov	dx,[es:di+1Dh]
 19899                                  	;MOV	dx,[ES:DI+SF_ENTRY.sf_dirsec]
 19900                                  	; MSDOS 6.0
 19901                                  	;mov	dx,[es:[di+1Dh]
 19902 00002FB7 268B551D                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec+2]  ;F.C. >32mb
 19903 00002FBB 8916[0706]              	MOV	[HIGH_SECTOR],DX		 ;F.C. >32mb
 19904                                  	; 04/02/2024
 19905 00002FBF 52                      	push	dx
 19906                                  	;mov	dx,[es:di+1Bh]
 19907 00002FC0 268B551B                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec]
 19908                                  	; 04/02/2024
 19909                                  	; 19/05/2019
 19910                                  	;PUSH	word [HIGH_SECTOR]	;F.C. >32mb
 19911                                  	; MSDOS 3.3 & MSDOS 6.0
 19912 00002FC4 52                      	PUSH	DX
 19913 00002FC5 E85526                  	call	FATREAD_SFT		; ES:BP points to DPB, [THISDRV] set
 19914                                  					; [THISDPB] set
 19915 00002FC8 5A                      	POP	DX
 19916 00002FC9 8F06[0706]              	POP	word [HIGH_SECTOR]	;F.C. >32mb
 19917 00002FCD 721E                    	JC	short PopDone
 19918                                  	; 22/09/2023
 19919                                  	;XOR	AL,AL	; *		; Pre read
 19920                                  	;;mov	byte [ALLOWED],18h
 19921                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 19922                                  	;call	GETBUFFR
 19923                                  	; 22/09/2023
 19924 00002FCF E8D028                  	call	GETBUFFER ; * 		; Pre read
 19925 00002FD2 7219                    	JC	short PopDone
 19926 00002FD4 5E                      	pop	si
 19927 00002FD5 1F                      	pop	ds			; Get back SFT pointer
 19928                                  
 19929                                  ;hkn; SS override
 19930 00002FD6 36C43E[E205]            	LES	DI,[SS:CURBUF]
 19931                                  	;or	byte [es:di+5],4
 19932 00002FDB 26804D0504              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 19933 00002FE0 89FB                    	MOV	BX,DI			; ES:BX point to buffer header
 19934                                  	;;lea	di,[di+16] ; MSDOS 3.3
 19935                                  	;lea	di,[di+20] ; MSDOS 6.0
 19936 00002FE2 8D7D14                  	LEA	DI,[DI+BUFINSIZ] 	; Point to buffer
 19937                                  	;mov	al,32
 19938 00002FE5 B020                    	MOV	AL,dir_entry.size
 19939                                  	;mul	byte [si+1Fh] ; MSDOS 6.0
 19940 00002FE7 F6641F                  	MUL	byte [SI+SF_ENTRY.sf_dirpos]
 19941 00002FEA 01C7                    	ADD	DI,AX			; Point at the entry
 19942 00002FEC C3                      	retn				; carry is clear
 19943                                  PopDone:
 19944 00002FED 5F                      	pop	di
 19945 00002FEE 07                      	pop	es
 19946                                  PopDone_retn:
 19947 00002FEF C3                      	retn
 19948                                  
 19949                                  ;----------------------------------------------------------------------------
 19950                                  ;
 19951                                  ;**	DOS_Commit - UPdate Directory Entries
 19952                                  ;
 19953                                  ;	ENTRY	same as DOS_CLOSE (??? BUGBUG - update this jgl)
 19954                                  ;		(DS) = DOSGROUP
 19955                                  ;	EXIT	Same as DOS_CLOSE except ref_count field is not altered
 19956                                  ;	USES	all but DS
 19957                                  ;
 19958                                  ;----------------------------------------------------------------------------
 19959                                  
 19960                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19961                                  ; DOSCODE:6F72h (MSDOS 5.0, MSDOS.SYS)
 19962                                  
 19963                                  DOS_COMMIT:
 19964                                  	;hkn; called from srvcall. DS already set up.
 19965 00002FF0 C43E[9E05]              	LES	DI,[THISSFT]
 19966                                  	;mov	bx,[es:di+5]
 19967 00002FF4 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19968                                  	;test	bx,0C0h
 19969                                  	; 17/12/2022
 19970 00002FF8 F6C3C0                  	test	bl,devid_file_clean+devid_device ;Clears carry
 19971                                  	;TEST	BX,devid_file_clean+devid_device ;Clears carry
 19972 00002FFB 75F2                    	jnz	short PopDone_retn
 19973                                  	;test	bx,8000h
 19974                                  	; 17/12/2022
 19975                                  	;test	bh,80h
 19976 00002FFD F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 19977                                  	;TEST	BX,sf_isnet ; 8000h
 19978 00003000 7406                    	JZ	short LOCAL_COMMIT
 19979                                  
 19980                                  ;IF NOT Installed
 19981                                  ;	transfer NET_COMMIT
 19982                                  ;ELSE
 19983                                  	;mov	ax,1107h
 19984 00003002 B80711                  	MOV	AX,(MultNET<<8)|7
 19985 00003005 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE
 19986                                  			; ES:DI -> SFT
 19987                                  			; SFT DPB field -> DPB of drive containing file
 19988                                  			; Return: CF set on error, AX = DOS error code
 19989                                  			; CF clear if successful
 19990                                  localcommit_retn: ; 18/12/2022	
 19991 00003007 C3                      	retn
 19992                                  ;ENDIF
 19993                                  
 19994                                  ; Perform local commit operation by doing a close but not releaseing the SFT.
 19995                                  ; There are three ways we can do this. One is to enter a critical section to
 19996                                  ; protect a potential free. The second is to increment the ref count to mask
 19997                                  ; the close decrementing.
 19998                                  ;
 19999                                  ; The proper way is to let the caller's of close decide if a decrement should
 20000                                  ; be done. We do this by providing another entry into close after the
 20001                                  ; decrement and after the share information release.
 20002                                  
 20003                                  ; DOSCODE:6FA0h (MSDOS 6.21, MSDOS.SYS)
 20004                                  ; DOSCODE:6F8Ch (MSDOS 5.0, MSDOS.SYS) 
 20005                                  
 20006                                  LOCAL_COMMIT:
 20007 00003008 E8E8E2                  	call	ECritDisk
 20008                                  	; MSDOS 6.0
 20009 0000300B E8E5E2                  	call	ECritDisk	;PTM.
 20010 0000300E E80E00                  	call	SetSFTTimes
 20011 00003011 B8FFFF                  	MOV	AX,-1
 20012 00003014 E8BCFE                  	call	CloseEntry
 20013                                  	; MSDOS 6.0
 20014 00003017 9C                      	PUSHF			;PTM.				;AN000;
 20015 00003018 E81D15                  	call	DEV_OPEN_SFT	;PTM.  increment device count	;AN000;
 20016 0000301B 9D                      	POPF			;PTM.				;AN000;
 20017                                  	;call	LCritDisk	;PTM.				;AN000;
 20018                                  	; 18/12/2022
 20019 0000301C E9EFE2                  	jmp	LCritDisk
 20020                                  ;localcommit_retn:
 20021                                  ;	retn
 20022                                  
 20023                                  ;Break	<SetSFTTimes - signal a change in the times for an SFT>
 20024                                  ;----------------------------------------------------------------------------
 20025                                  ;
 20026                                  ; Procedure Name : SetSFTTimes
 20027                                  ;
 20028                                  ;   SetSFTTimes - Examine the flags for a SFT and set the time appropriately.
 20029                                  ;   Reflect these times in other SFT's for the same file.
 20030                                  ;
 20031                                  ;   Inputs:	ES:DI point to SFT
 20032                                  ;		BX = sf_flags set apprpriately
 20033                                  ;   Outputs:	Set sft times to current time if File & dirty & !nodate
 20034                                  ;   Registers modified: All except ES:DI, BX, AX
 20035                                  ;
 20036                                  ;----------------------------------------------------------------------------
 20037                                  
 20038                                  	; 04/02/2024 - Retro DOS v4.2
 20039                                  
 20040                                  SetSFTTimes:
 20041                                  
 20042                                  ; 04/02/2024
 20043                                  %if 0
 20044                                  ;	File clean or device does not get stamped nor disk looked at.
 20045                                  	
 20046                                  	;test	bx,0C0h
 20047                                  	; 17/12/2022
 20048                                  	test	bl,devid_file_clean+devid_device
 20049                                  	;TEST	BX,devid_file_clean+devid_device
 20050                                  	;retnz				; clean or device => no timestamp
 20051                                  	jnz	short localcommit_retn
 20052                                  
 20053                                  ;	file and dirty. See if date is good
 20054                                  
 20055                                  	;test	bx,4000h
 20056                                  	; 17/12/2022
 20057                                  	;test	bh,40h
 20058                                  	test	bh,(sf_close_nodate>>8)
 20059                                  	;TEST	BX,sf_close_nodate
 20060                                  	;retnz				; nodate => no timestamp
 20061                                  	jnz	short localcommit_retn
 20062                                  %else
 20063                                  	; 04/02/2024
 20064                                  	; (PCDOS 7.1 IBMDOS.COM)
 20065                                  	;test	bx,40C0h
 20066 0000301F F7C3C040                	test	bx,sf_close_nodate+devid_file_clean+devid_device
 20067 00003023 75E2                    	jnz	short localcommit_retn
 20068                                  %endif
 20069                                  
 20070 00003025 50                      	push	ax
 20071 00003026 53                      	push	bx
 20072 00003027 E8BCDA                  	call	DATE16			; Date/Time to AX/DX
 20073                                  	;mov	[es:di+0Fh],ax
 20074 0000302A 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 20075                                  	;mov	[es:di+0Dh],dx
 20076 0000302E 2689550D                	MOV	[ES:DI+SF_ENTRY.sf_time],DX
 20077 00003032 31C0                    	XOR	AX,AX
 20078                                  ;if installed
 20079                                  	;call	JShare + 14 * 4
 20080 00003034 FF1E[C800]              	call	far [JShare+(14*4)]	; 14 = ShSU
 20081                                  ;else
 20082                                  ;	call	ShSU
 20083                                  ;endif
 20084 00003038 5B                      	pop	bx
 20085 00003039 58                      	pop	ax
 20086 0000303A C3                      	retn
 20087                                  
 20088                                  ;============================================================================
 20089                                  ; DIRCALL.ASM, MSDOS 6.0, 1991
 20090                                  ;============================================================================
 20091                                  ; 23/07/2018 - Retro DOS v3.0
 20092                                  ; 18/05/2019 - Retro DOS v4.0
 20093                                  
 20094                                  ; DOSCODE:6FDAh (MSDOS 6.21, MSDOS.SYS)
 20095                                  
 20096                                  ;TITLE DIRCALL - Directory manipulation internal calls
 20097                                  ;NAME  DIRCALL
 20098                                  
 20099                                  ;**	Low level directory manipulation routines for making removing and
 20100                                  ;	  verifying local or NET directories
 20101                                  ;
 20102                                  ;	DOS_MKDIR
 20103                                  ;	DOS_CHDIR
 20104                                  ;	DOS_RMDIR
 20105                                  ;
 20106                                  ;	Modification history:
 20107                                  ;
 20108                                  ;		Created: ARR 30 March 1983
 20109                                  
 20110                                  ;BREAK <DOS_MkDir - Make a directory entry>
 20111                                  ;---------------------------------------------------------------------------
 20112                                  ;
 20113                                  ; Procedure Name : DOS_MkDir
 20114                                  ;
 20115                                  ; Inputs:
 20116                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 20117                                  ;		terminated)
 20118                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 20119                                  ;		( = -1 if current dir not involved, else
 20120                                  ;		 Points to first char after last "/" of current dir part)
 20121                                  ;	[THISCDS] Points to CDS being used
 20122                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 20123                                  ; Function:
 20124                                  ;	Make a new directory
 20125                                  ; Returns:
 20126                                  ;	Carry Clear
 20127                                  ;		No error
 20128                                  ;	Carry Set
 20129                                  ;	    AX is error code
 20130                                  ;		error_path_not_found
 20131                                  ;			Bad path (not in curr dir part if present)
 20132                                  ;		error_bad_curr_dir
 20133                                  ;			Bad path in current directory part of path
 20134                                  ;		error_access_denied
 20135                                  ;			Already exists, device name
 20136                                  ; DS preserved, Others destroyed
 20137                                  ;---------------------------------------------------------------------------
 20138                                  
 20139                                  ;hkn; called from path.asm. DS already set up.
 20140                                  
 20141                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20142                                  ; DOSCODE:6FC6h (MSDOS 5.0, MSDOS.SYS)
 20143                                  
 20144                                  ; 04/02/2024 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
 20145                                  ; DOSCODE:6FDAh (MSDOS 6.22, MSDOS.SYS)
 20146                                  
 20147                                  DOS_MKDIR:
 20148 0000303B E8F3E1                  	call	TestNet
 20149 0000303E 7313                    	JNC	short LOCAL_MKDIR
 20150                                  
 20151                                  ;IF NOT Installed
 20152                                  ;	transfer NET_MKDIR
 20153                                  ;ELSE
 20154                                  	;mov	ax,1103h
 20155 00003040 B80311                  	MOV	AX,(MultNET<<8)|3
 20156 00003043 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY
 20157                                  			; SS = DOS CS
 20158                                  			; SDA first filename pointer -> fully-qualified directory name
 20159                                  			; SDA CDS pointer -> current directory
 20160                                  			; Return: CF set on error, AX = DOS error code
 20161                                  			; CF clear if successful
 20162 00003045 C3                      	retn
 20163                                  ;ENDIF
 20164                                  
 20165                                  NODEACCERRJ:
 20166                                  	;mov	ax,5
 20167 00003046 B80500                  	MOV	AX,error_access_denied
 20168                                  _BadRet:
 20169 00003049 F9                      	STC
 20170                                  	;call	LCritDisk
 20171                                  	;retn
 20172                                  	; 18/12/2022
 20173 0000304A E9C1E2                  	jmp	LCritDisk
 20174                                  
 20175                                  PATHNFJ:
 20176 0000304D E8BEE2                  	call	LCritDisk
 20177 00003050 E902FA                  	jmp	SET_MKND_ERR	; Map the MakeNode error and return
 20178                                  
 20179                                  LOCAL_MKDIR:
 20180 00003053 E89DE2                  	call	ECritDisk
 20181                                  
 20182                                  ; MakeNode requires an SFT to fiddle with. We Use a temp spot (RENBUF)
 20183                                  
 20184 00003056 8C16[A005]              	MOV	[THISSFT+2],SS
 20185                                  
 20186                                  ;hkn; DOSDATA
 20187 0000305A C706[9E05][3E04]        	MOV	WORD [THISSFT],RENBUF
 20188                                  
 20189                                  ;  NOTE: Need WORD PTR because MASM takes type of
 20190                                  ;   TempSFT (byte) instead of type of sf_mft (word).
 20191                                  
 20192                                  	;mov	word [RENBUF+33h],0 ; MSDOS 6.0
 20193 00003060 C706[7104]0000          	MOV	WORD [RENBUF+SF_ENTRY.sf_MFT],0
 20194                                  				; make sure SHARER won't complain.
 20195                                  	;mov	al,10h
 20196 00003066 B010                    	MOV	AL,attr_directory
 20197 00003068 E87A18                  	call	MakeNode
 20198 0000306B 72E0                    	JC	short PATHNFJ
 20199 0000306D 83F803                  	CMP	AX,3
 20200 00003070 74D4                    	JZ	short NODEACCERRJ ; Can't make a device into a directory
 20201 00003072 C42E[8A05]              	LES	BP,[THISDPB]	; Makenode zaps this
 20202 00003076 C53E[E205]              	LDS	DI,[CURBUF]
 20203 0000307A 29FE                    	SUB	SI,DI
 20204 0000307C 56                      	PUSH	SI		; Pointer to dir_first
 20205                                  
 20206                                  ; 04/02/2024
 20207                                  %if 0
 20208                                  	; MSDOS 6.0
 20209                                  	;push	word [DI+8]
 20210                                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;F.C. >32mb
 20211                                  	; MSDOS 3.3 & MSDOS 6.0
 20212                                  	;push	word [di+6]
 20213                                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Sector of new node
 20214                                  %else
 20215                                  	; 04/02/2024
 20216                                  	; (PCDOS 7.1 IBMDOS.COM)
 20217 0000307D C54506                  	lds	ax,[di+BUFFINFO.buf_sector] ; Sector of new node
 20218 00003080 1E                      	push	ds
 20219 00003081 50                      	push	ax
 20220                                  %endif
 20221                                  
 20222 00003082 16                      	push	ss
 20223 00003083 1F                      	pop	ds
 20224                                  
 20225                                  	; 04/02/2024
 20226                                  	;PUSH	word [DIRSTART]	; Parent for .. entry
 20227 00003084 31C0                    	XOR	AX,AX
 20228                                  	;MOV	[DIRSTART],AX	; Null directory
 20229 00003086 8706[C205]              	xchg	ax,[DIRSTART]
 20230 0000308A 50                      	push	ax
 20231                                  
 20232 0000308B E89317                  	call	NEWDIR
 20233 0000308E 726F                    	JC	short NODEEXISTSPOPDEL ; No room
 20234 00003090 E84C0D                  	call	GETENT		; First entry
 20235 00003093 726A                    	JC	short NODEEXISTSPOPDEL ; Screw up
 20236 00003095 C43E[E205]              	LES	DI,[CURBUF]
 20237                                  
 20238                                  	; MSDOS 6.0
 20239 00003099 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 20240                                  				 ;LB. if already dirty		    ;AN000;
 20241 0000309E 7508                    	JNZ	short yesdirty5	 ;LB.   don't increment dirty count ;AN000;
 20242 000030A0 E8082A                  	call	INC_DIRTY_COUNT  ;LB.				    ;AN000;
 20243                                  	
 20244                                  	; MSDOS 3.3 & MSDOS 6.0
 20245                                  	;or	byte [es:di+5],40h  ; 07/12/2022
 20246 000030A3 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 20247                                  yesdirty5:
 20248                                  	;;add	di,16 ; MSDOS 3.3
 20249                                  	;add	di,20 ; MSDOS 6.0
 20250 000030A8 83C714                  	ADD	DI,BUFINSIZ	; Point at buffer
 20251 000030AB B82E20                  	MOV	AX,202EH	; ". "
 20252 000030AE 8B16[C205]              	MOV	DX,[DIRSTART]	; Point at itself
 20253 000030B2 E80C18                  	call	SETDOTENT
 20254 000030B5 B82E2E                  	MOV	AX,2E2EH	; ".."
 20255 000030B8 5A                      	POP	DX		; Parent
 20256 000030B9 E80518                  	call	SETDOTENT
 20257 000030BC C42E[8A05]              	LES	BP,[THISDPB]
 20258                                  	; 22/09/2023
 20259                                  	;;mov	byte [ALLOWED],18h
 20260                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20261 000030C0 5A                      	POP	DX		; Entry sector
 20262                                  	; MSDOS 6.0
 20263 000030C1 8F06[0706]              	POP	word [HIGH_SECTOR] ;F.C. >32mb
 20264                                  
 20265                                  	;XOR	AL,AL ; *	; Pre read
 20266                                  	;call	GETBUFFR
 20267                                  	; 22/09/2023
 20268 000030C5 E8DA27                  	call	GETBUFFER ; *	; Pre read
 20269 000030C8 725B                    	JC	short NODEEXISTSP
 20270 000030CA 8B16[C205]              	MOV	DX,[DIRSTART]
 20271 000030CE C53E[E205]              	LDS	DI,[CURBUF]
 20272                                  	;or	byte [di+5],4
 20273 000030D2 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20274 000030D6 5E                      	POP	SI		; dir_first pointer
 20275 000030D7 01FE                    	ADD	SI,DI
 20276 000030D9 8914                    	MOV	[SI],DX
 20277 000030DB 31D2                    	XOR	DX,DX
 20278 000030DD 895402                  	MOV	[SI+2],DX	; Zero size
 20279 000030E0 895404                  	MOV	[SI+4],DX
 20280                                  DIRUP:
 20281                                  	; MSDOS 6.0
 20282 000030E3 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 20283                                  	;			 ;LB. if already dirty 		   ;AN000;
 20284 000030E7 7507                    	JNZ	short yesdirty6	 ;LB.  don't increment dirty count ;AN000;
 20285 000030E9 E8BF29                  	call	INC_DIRTY_COUNT  ;LB.				   ;AN000;
 20286                                  	
 20287                                  	; MSDOS 3.3 & MSDOS 6.0
 20288                                  	;or	byte [di+5],40h
 20289 000030EC 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty	; Dirty buffer
 20290                                  yesdirty6:
 20291 000030F0 16                      	push	ss
 20292 000030F1 1F                      	pop	ds
 20293 000030F2 268A4600                	mov	al,[es:bp]
 20294                                  	;MOV	AL,[ES:BP+DPB.DRIVE]  ; mov al,[es:bp+0]
 20295 000030F6 E8AD28                  	call	FLUSHBUF
 20296                                  	;mov	ax,5
 20297 000030F9 B80500                  	MOV	AX,error_access_denied
 20298                                  	;call	LCritDisk
 20299                                  	;retn
 20300                                  	; 18/12/2022
 20301 000030FC E90FE2                  	jmp	LCritDisk
 20302                                  
 20303                                  NODEEXISTSPOPDEL:
 20304 000030FF 5A                      	POP	DX		; Parent
 20305 00003100 5A                      	POP	DX		; Entry sector
 20306                                  	; MSDOS 6.0 
 20307 00003101 8F06[0706]              	POP	word [HIGH_SECTOR] ; F.C. >32mb
 20308 00003105 C42E[8A05]              	LES	BP,[THISDPB]
 20309                                  	; 22/09/2023
 20310                                  	;;mov	byte [ALLOWED],18h
 20311                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20312                                  	;XOR	AL,AL ; *	; Pre read
 20313                                  	;call	GETBUFFR
 20314                                  	; 22/09/2023
 20315 00003109 E89627                  	call	GETBUFFER ; *	; Pre read
 20316 0000310C 7217                    	JC	short NODEEXISTSP
 20317 0000310E C53E[E205]              	LDS	DI,[CURBUF]
 20318                                  	;or	byte [di+5],4
 20319 00003112 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20320 00003116 5E                      	POP	SI		; dir_first pointer
 20321 00003117 01FE                    	ADD	SI,DI
 20322                                  	;sub	si,1Ah ; 26
 20323 00003119 83EE1A                  	SUB	SI,dir_entry.dir_first	;Point back to start of dir entry
 20324 0000311C C604E5                  	MOV	BYTE [SI],0E5H	; Free the entry
 20325 0000311F E8C1FF                  	CALL	DIRUP		; Error doesn't matter since erroring anyway
 20326                                  NODEEXISTS:
 20327 00003122 E921FF                  	JMP	NODEACCERRJ ; 10/08/2018
 20328                                  
 20329                                  NODEEXISTSP:
 20330 00003125 5E                      	POP	SI		; Clean stack
 20331 00003126 EBFA                    	JMP	short NODEEXISTS
 20332                                  
 20333                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20334                                  
 20335                                  ;BREAK <DOS_ChDir -- Verify a directory>
 20336                                  ;----------------------------------------------------------------------------
 20337                                  ;
 20338                                  ; Procedure Name : DOS_ChDir
 20339                                  ;
 20340                                  ; Inputs:
 20341                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 20342                                  ;		terminated)
 20343                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 20344                                  ;		( = -1 if current dir not involved, else
 20345                                  ;		 Points to first char after last "/" of current dir part)
 20346                                  ;	[THISCDS] Points to CDS being used May not be NUL
 20347                                  ; Function:
 20348                                  ;	Validate the path for potential new current directory
 20349                                  ; Returns:
 20350                                  ;	NOTE:
 20351                                  ;	    [SATTRIB] is modified by this call
 20352                                  ;	Carry Clear
 20353                                  ;	    CX is cluster number of the DIR, LOCAL CDS ONLY
 20354                                  ;		Caller must NOT set ID fields on a NET CDS.
 20355                                  ;	Carry Set
 20356                                  ;	    AX is error code
 20357                                  ;		error_path_not_found
 20358                                  ;			Bad path
 20359                                  ;		error_access_denied
 20360                                  ;			device or file name
 20361                                  ; DS preserved, Others destroyed
 20362                                  ;----------------------------------------------------------------------------
 20363                                  
 20364                                  ;hkn; called from path.asm and dir2.asm. DS already set up.
 20365                                  
 20366                                  ; 18/05/2019 - Retro DOS v4.0
 20367                                  ; DOSCODE:70DAh (MSDOS 6.21, MSDOS.SYS)
 20368                                  
 20369                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20370                                  ; DOSCODE:70C6h (MSDOS 5.0, MSDOS.SYS)
 20371                                  
 20372                                  DOS_CHDIR:
 20373 00003128 E806E1                  	call	TestNet
 20374 0000312B 7306                    	JNC	short LOCAL_CHDIR
 20375                                  
 20376                                  ;IF NOT Installed
 20377                                  ;	transfer NET_CHDIR
 20378                                  ;ELSE
 20379                                  	;mov	ax,1105h
 20380 0000312D B80511                  	MOV	AX,(MultNET<<8)|5
 20381 00003130 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CHDIR
 20382                                  			; SS = DOS CS
 20383                                  			; SDA first filename pointer -> fully-qualified directory name
 20384                                  			; SDA CDS pointer -> current directory
 20385                                  			; Return: CF set on error, AX = DOS error code
 20386                                  			; CF clear if successful
 20387 00003132 C3                      	retn
 20388                                  ;ENDIF
 20389                                  
 20390                                  LOCAL_CHDIR:
 20391 00003133 E8BDE1                  	call	ECritDisk
 20392                                  	; MSDOS 6.0
 20393                                  	;;test	word [es:di+43h],2000h
 20394                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice ;PTM.
 20395                                  	; 17/12/2022
 20396                                  	;test	byte [es:di+44h],20h
 20397 00003136 26F6454420              	test	byte [ES:DI+curdir.flags+1],(curdir_splice>>8) ;PTM.
 20398 0000313B 7406                    	JZ	short nojoin		   ;PTM.
 20399                                  	;mov	word [es:di+49h], 0FFFFh
 20400 0000313D 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],0FFFFH ;PTM.
 20401                                  nojoin:
 20402                                  	; MSDOS 3.3 & MSDOS 6.0
 20403 00003143 C606[4C03]00            	MOV	byte [NoSetDir],0 ; FALSE
 20404                                  	;mov	byte [SATTRIB],16h
 20405 00003148 C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 20406                                  				; Dir calls can find these
 20407                                  ; DOS 3.3  6/24/86 FastOpen
 20408 0000314D 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	; set fastopen flag
 20409 00003152 E8160D                  	call	GETPATH
 20410                                  
 20411                                  	; 04/02/2024
 20412                                  	;PUSHF						;AN000;
 20413 00003155 9F                      	lahf						
 20414 00003156 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ; clear it all ;AC000;
 20415                                  	;POPF						;AN000;
 20416 0000315B 9E                      	sahf
 20417                                  
 20418                                  ; DOS 3.3  6/24/86 FastOpen
 20419                                  
 20420                                  	; MSDOS 3.3
 20421                                  	;mov	byte [FastOpenFlg],0
 20422                                  	
 20423                                  	;mov	ax,3
 20424 0000315C B80300                  	MOV	AX,error_path_not_found
 20425 0000315F 7207                    	JC	short ChDirDone
 20426 00003161 753A                    	JNZ	short NOTDIRPATH	; Path not a DIR
 20427 00003163 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get cluster number
 20428 00003167 F8                      	CLC
 20429                                  ChDirDone:
 20430                                  	;call	LCritDisk
 20431                                  	;retn
 20432                                  	; 18/12/2022
 20433 00003168 E9A3E1                  	jmp	LCritDisk
 20434                                  
 20435                                  ;BREAK <DOS_RmDir -- Remove a directory>
 20436                                  ;----------------------------------------------------------------------------
 20437                                  ;
 20438                                  ; Procedure Name : DOS_RmDir
 20439                                  ;
 20440                                  ; Inputs:
 20441                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 20442                                  ;		terminated)
 20443                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 20444                                  ;		( = -1 if current dir not involved, else
 20445                                  ;		 Points to first char after last "/" of current dir part)
 20446                                  ;	[THISCDS] Points to CDS being used
 20447                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 20448                                  ; Function:
 20449                                  ;	Remove a directory
 20450                                  ;	NOTE: Attempt to remove current directory must be detected by caller
 20451                                  ; Returns:
 20452                                  ;	NOTE:
 20453                                  ;	    [SATTRIB] is modified by this call
 20454                                  ;	Carry Clear
 20455                                  ;		No error
 20456                                  ;	Carry Set
 20457                                  ;	    AX is error code
 20458                                  ;		error_path_not_found
 20459                                  ;			Bad path (not in curr dir part if present)
 20460                                  ;		error_bad_curr_dir
 20461                                  ;			Bad path in current directory part of path
 20462                                  ;		error_access_denied
 20463                                  ;			device or file name, root directory
 20464                                  ;			Bad directory ('.' '..' messed up)
 20465                                  ; DS preserved, Others destroyed
 20466                                  ;----------------------------------------------------------------------------
 20467                                  
 20468                                  ;hkn; called from path.asm. DS already set up.
 20469                                  
 20470                                  ; 18/05/2019 - Retro DOS v4.0
 20471                                  ; DOSCODE:711Fh (MSDOS 6.21, MSDOS.SYS)
 20472                                  
 20473                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20474                                  ; DOSCODE:710Bh (MSDOS 5.0, MSDOS.SYS)
 20475                                  
 20476                                  DOS_RMDIR:
 20477 0000316B E8C3E0                  	call	TestNet
 20478 0000316E 7306                    	JNC	short LOCAL_RMDIR
 20479                                  
 20480                                  ;IF NOT Installed
 20481                                  ;	transfer NET_RMDIR
 20482                                  ;ELSE
 20483                                  	;mov	ax,1101h
 20484 00003170 B80111                  	MOV	AX,(MultNET<<8)|1
 20485 00003173 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY
 20486                                  			; SS = DOS CS
 20487                                  			; SDA first filename pointer -> fully-qualified directory name
 20488                                  			; SDA CDS pointer -> current directory
 20489                                  			; Return: CF set on error, AX = DOS error code
 20490                                  			; CF clear if successful
 20491 00003175 C3                      	retn
 20492                                  ;ENDIF
 20493                                  
 20494                                  LOCAL_RMDIR:
 20495 00003176 E87AE1                  	call	ECritDisk
 20496 00003179 C606[4C03]00            	MOV	byte [NoSetDir],0
 20497                                  	;mov	byte [SATTRIB],16h
 20498 0000317E C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 20499                                  					; Dir calls can find these
 20500 00003183 E8E50C                  	call	GETPATH
 20501 00003186 720C                    	JC	short NOPATH		; Path not found
 20502 00003188 7513                    	JNZ	short NOTDIRPATH	; Path not a DIR
 20503 0000318A 8B3E[C205]              	MOV	DI,[DIRSTART]
 20504 0000318E 09FF                    	OR	DI,DI			; Root ?
 20505 00003190 750E                    	JNZ	short rmdir_get_buf	; No
 20506 00003192 EB09                    	JMP	SHORT NOTDIRPATH
 20507                                  
 20508                                  NOPATH:
 20509                                  	;mov	ax,3
 20510 00003194 B80300                  	MOV	AX,error_path_not_found
 20511 00003197 E9AFFE                  	JMP	_BadRet
 20512                                  
 20513                                  NOTDIRPATHPOP:
 20514 0000319A 58                      	POP	AX  ; MSDOS 6.0		;F.C. >32mb
 20515 0000319B 58                      	POP	AX
 20516                                  NOTDIRPATHPOP2:
 20517 0000319C 58                      	POP	AX
 20518                                  NOTDIRPATH:
 20519 0000319D E9A6FE                  	JMP	NODEACCERRJ
 20520                                  
 20521                                  rmdir_get_buf:
 20522 000031A0 C53E[E205]              	LDS	DI,[CURBUF]
 20523 000031A4 29FB                    	SUB	BX,DI		; Compute true offset
 20524 000031A6 53                      	PUSH	BX		; Save entry pointer
 20525                                  	
 20526                                  	; MSDOS 6.0
 20527                                  	;push	word [di+8]
 20528 000031A7 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2] ;F.C. >32mb
 20529                                  	
 20530                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20531                                  	;push	word [di+6]
 20532 000031AA FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Save sector number
 20533                                  
 20534                                  ;hkn; SS is DOSDATA
 20535                                  	;context DS
 20536 000031AD 16                      	push	ss
 20537 000031AE 1F                      	pop	ds
 20538                                  	;context ES
 20539 000031AF 16                      	push	ss
 20540 000031B0 07                      	pop	es
 20541                                  
 20542                                  ;hkn; NAME1 is in DOSDATA
 20543 000031B1 BF[4B05]                	MOV	DI,NAME1
 20544 000031B4 B03F                    	MOV	AL,'?'
 20545 000031B6 B90B00                  	MOV	CX,11
 20546 000031B9 F3AA                    	REP	STOSB
 20547 000031BB 30C0                    	XOR	AL,AL
 20548 000031BD AA                      	STOSB				; Nul terminate it
 20549 000031BE E83D0F                  	call	STARTSRCH		; Set search
 20550 000031C1 E8180C                  	call	GETENTRY		; Get start of directory
 20551 000031C4 72D4                    	JC	short NOTDIRPATHPOP	; Screw up
 20552 000031C6 8E1E[E405]              	MOV	DS,[CURBUF+2]
 20553 000031CA 89DE                    	MOV	SI,BX
 20554 000031CC AD                      	LODSW
 20555                                  	;CMP	AX,(' ' SHL 8) OR '.'   ; First entry '.'?
 20556 000031CD 3D2E20                  	cmp	ax,202Eh ; ". "
 20557 000031D0 75C8                    	JNZ	short NOTDIRPATHPOP	; Nope
 20558                                  	;add	si,30
 20559 000031D2 83C61E                  	ADD	SI,dir_entry.size-2 ; Next entry
 20560 000031D5 AD                      	LODSW
 20561                                  	;CMP	AX,('.' SHL 8) OR '.'   ; Second entry '..'?
 20562                                  	;cmp	ax, '..'
 20563 000031D6 3D2E2E                  	cmp	ax,2E2Eh
 20564 000031D9 75BF                    	JNZ	short NOTDIRPATHPOP	; Nope
 20565                                  
 20566                                  ;hkn; SS is DOSDATA
 20567                                  	;context DS
 20568 000031DB 16                      	push	ss
 20569 000031DC 1F                      	pop	ds
 20570 000031DD C706[4803]0200          	MOV	word [LASTENT],2	; Skip . and ..
 20571 000031E3 E8F60B                  	call	GETENTRY		; Get next entry
 20572 000031E6 72B2                    	JC	short NOTDIRPATHPOP	; Screw up
 20573                                  	;mov	byte [ATTRIB],16h
 20574 000031E8 C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_hidden+attr_system
 20575 000031ED E8F40A                  	call	SRCH			; Do a search
 20576 000031F0 73A8                    	JNC	short NOTDIRPATHPOP	; Found another entry!
 20577 000031F2 803E[4A03]00            	CMP	byte [FAILERR],0
 20578 000031F7 75A1                    	JNZ	short NOTDIRPATHPOP	; Failure of search due to I 24 FAIL
 20579 000031F9 C42E[8A05]              	LES	BP,[THISDPB]
 20580 000031FD 8B1E[C205]              	MOV	BX,[DIRSTART]
 20581 00003201 E8151C                  	call	RELEASE 		; Release data in sub dir
 20582 00003204 7294                    	JC	short NOTDIRPATHPOP	; Screw up
 20583 00003206 5A                      	POP	DX			; Sector # of entry
 20584 00003207 8F06[0706]              	POP	word [HIGH_SECTOR] ; MSDOS 6.0	; F.C. >32mb
 20585                                  	; 22/09/2023
 20586                                  	;;mov	byte [ALLOWED],18h
 20587                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20588                                  	;XOR	AL,AL ; *		; Pre read
 20589                                  	;call	GETBUFFR		; Get sector back
 20590 0000320B E89426                  	call	GETBUFFER ; *		; Pre Read
 20591 0000320E 728C                    	JC	short NOTDIRPATHPOP2	; Screw up
 20592 00003210 C53E[E205]              	LDS	DI,[CURBUF]
 20593                                  	;or	byte [di+5],4
 20594 00003214 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20595 00003218 5B                      	POP	BX			; Pointer to start of entry
 20596 00003219 01FB                    	ADD	BX,DI			; Corrected
 20597 0000321B C607E5                  	MOV	BYTE [BX],0E5H		; Free the entry
 20598                                  
 20599                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 20600 0000321E 1E                      	PUSH	DS
 20601                                  
 20602                                  ;hkn; SS is DOSDATA
 20603                                  	;context DS
 20604 0000321F 16                      	push	ss
 20605 00003220 1F                      	pop	ds
 20606                                  
 20607                                  	; MSDOS 6.0
 20608 00003221 E837F4                  	call	FastOpen_Delete 	; call fastopen to delete an entry
 20609                                  
 20610                                  ;	; MSDOS 3.3
 20611                                  ;_FastOpen_Delete:
 20612                                  ;	push	ax
 20613                                  ;	mov	si,[WFP_START]
 20614                                  ;	mov	bx,FastTable
 20615                                  ;	;mov	al,3  ; FONC_delete
 20616                                  ;	mov	al,FONC_delete
 20617                                  ;	call	far [BX+2]  ; FastTable+2
 20618                                  ;	pop	ax
 20619                                  
 20620 00003224 1F                      	POP	DS
 20621                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 20622                                  
 20623 00003225 E9BBFE                  	JMP	DIRUP			; In MKDIR, dirty buffer and flush
 20624                                  
 20625                                  ;============================================================================
 20626                                  ; DISK.ASM, MSDOS 6.0, 1991
 20627                                  ;============================================================================
 20628                                  ; 23/07/2018 - Retro DOS v3.0 
 20629                                  ; 04/05/2019 - Retro DOS v4.0
 20630                                  
 20631                                  ;	TITLE	DISK - Disk utility routines
 20632                                  ;	NAME	Disk
 20633                                  
 20634                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 20635                                  ;
 20636                                  ;	SWAPCON
 20637                                  ;	SWAPBACK
 20638                                  ;	DOS_READ
 20639                                  ;	DOS_WRITE
 20640                                  ;	get_io_sft
 20641                                  ;	DirRead
 20642                                  ;	FIRSTCLUSTER
 20643                                  ;	SET_BUF_AS_DIR
 20644                                  ;	FATSecRd
 20645                                  ;	DREAD
 20646                                  ;	CHECK_WRITE_LOCK
 20647                                  ;	CHECK_READ_LOCK
 20648                                  ;
 20649                                  ;	Revision history:
 20650                                  ;
 20651                                  ;		A000   version 4.00  Jan. 1988
 20652                                  ;
 20653                                  ;----------------------------------------------------------------------------
 20654                                  ;
 20655                                  ; M065 : B#5276. On raw read/write of a block of characters if a critical
 20656                                  ;		error happens, DOS retries the entire block assuming that
 20657                                  ;		zero characters were transferred. Modified the code to take
 20658                                  ;		into account the number of characters transfered before
 20659                                  ;		retrying the operation.
 20660                                  ;
 20661                                  ;----------------------------------------------------------------------------
 20662                                  ;
 20663                                  
 20664                                  ;Installed = TRUE
 20665                                  
 20666                                  ;Break	<SwapCon, Swap Back - Old-style I/O to files>
 20667                                  
 20668                                  ; **** Drivers for file input from devices ****
 20669                                  ;----------------------------------------------------------------------------
 20670                                  ;   Indicate that there is no more I/O occurring through another SFT outside
 20671                                  ;   of handles 0 and 1
 20672                                  ;
 20673                                  ;   Inputs:	DS is DOSDATA
 20674                                  ;   Outputs:	CONSWAP is set to false.
 20675                                  ;   Registers modified: none
 20676                                  ;----------------------------------------------------------------------------
 20677                                  
 20678                                  ; IBMDOS.COM (MSDOS 3.3) - Offset 3CF8h
 20679                                  
 20680                                  ; DOSCODE:71E3h (MSDOS 6.21, MSDOS.SYS)
 20681                                  ; 04/05/2019 - Retro DOS v4.0
 20682                                  
 20683                                  ; DOSCODE:71CFh (MSDOS 5.0, MSDOS.SYS)
 20684                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20685                                  
 20686                                  SWAPBACK:
 20687 00003228 C606[5703]00            	MOV	BYTE [CONSWAP],0	; signal no conswaps
 20688 0000322D C3                      	retn
 20689                                  
 20690                                  ;----------------------------------------------------------------------------
 20691                                  ;
 20692                                  ; Procedure Name : SWAPCON
 20693                                  ;
 20694                                  ;   Copy ThisSFT to CONSFT for use by the 1-12 primitives.
 20695                                  ;
 20696                                  ;   Inputs:	ThisSFT as the sft of the desired file
 20697                                  ;		DS is DOSDATA
 20698                                  ;   Outputs:	CONSWAP is set.  CONSFT = ThisSFT.
 20699                                  ;   Registers modified: none
 20700                                  ;--------------------------------------------------------------------------
 20701                                  
 20702                                  SWAPCON:
 20703                                  	; MSDOS 3.3
 20704                                  	;push	es
 20705                                  	;push	di
 20706                                  	;mov	byte [CONSWAP],1
 20707                                  	;les	di,[THISSFT]
 20708                                  	;mov	word [CONSFT],di
 20709                                  	;mov	word [CONSFT+2],es
 20710                                  	;pop	di
 20711                                  	;pop	es
 20712                                  	;retn
 20713                                  
 20714                                  	; MSDOS 6.0
 20715 0000322E C606[5703]01            	mov	byte [CONSWAP],1	; ConSwap = TRUE
 20716 00003233 50                      	push	ax
 20717 00003234 A1[9E05]                	mov	ax,[THISSFT]
 20718 00003237 A3[E605]                	mov	[CONSFT],ax
 20719 0000323A A1[A005]                	mov	ax,[THISSFT+2]
 20720 0000323D A3[E805]                	mov	[CONSFT+2],ax
 20721 00003240 58                      	pop	ax
 20722 00003241 C3                      	retn
 20723                                  
 20724                                  ; DOSCODE:71FDh (MSDOS 6.21, MSDOS.SYS)
 20725                                  ; 04/05/2019 - Retro DOS v4.0
 20726                                  
 20727                                  ;Break	<DOS_READ -- MAIN READ ROUTINE AND DEVICE IN ROUTINES>
 20728                                  ;-----------------------------------------------------------------------------
 20729                                  ;
 20730                                  ; Inputs:
 20731                                  ;	ThisSFT set to the SFT for the file being used
 20732                                  ;	[DMAADD] contains transfer address
 20733                                  ;	CX = No. of bytes to read
 20734                                  ;	DS = DOSDATA
 20735                                  ; Function:
 20736                                  ;	Perform read operation
 20737                                  ; Outputs:
 20738                                  ;    Carry clear
 20739                                  ;	SFT Position and cluster pointers updated
 20740                                  ;	CX = No. of bytes read
 20741                                  ;	ES:DI point to SFT
 20742                                  ;    Carry set
 20743                                  ;	AX is error code
 20744                                  ;	CX = 0
 20745                                  ;	ES:DI point to SFT
 20746                                  ; DS preserved, all other registers destroyed
 20747                                  ;
 20748                                  ;-----------------------------------------------------------------------------
 20749                                  
 20750                                  ;hkn; called from fcbio.asm, handle.asm and dev.asm. DS is be set up.
 20751                                  
 20752                                  ; DOSCODE:71E9h (MSDOS 5.0, MSDOS.SYS)
 20753                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20754                                  
 20755                                  DOS_READ:
 20756 00003242 C43E[9E05]              	LES	DI,[THISSFT]
 20757                                  
 20758                                  ; Verify that the sft has been opened in a mode that allows reading.
 20759                                  
 20760                                  	;mov	al,[es:di+2]
 20761 00003246 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 20762                                  	;and	al,0Fh
 20763 0000324A 240F                    	AND	AL,access_mask
 20764                                  	;cmp	al,1
 20765 0000324C 3C01                    	CMP	AL,open_for_write
 20766 0000324E 7503                    	JNE	short READ_NO_MODE	; Is read or both
 20767 00003250 E9EA05                  	jmp	SET_ACC_ERR
 20768                                  
 20769                                  READ_NO_MODE:
 20770 00003253 E8CB04                  	call	SETUP
 20771 00003256 E30B                    	JCXZ	NoIORet 		; no bytes to read - fast return
 20772 00003258 E8EFDF                  	call	IsSFTNet
 20773 0000325B 7408                    	JZ	short LOCAL_READ
 20774                                  
 20775                                  ;IF NOT Installed
 20776                                  ;	transfer NET_READ
 20777                                  ;ELSE
 20778                                  	;mov	ax,1108h
 20779 0000325D B80811                  	MOV	AX,(MultNET<<8)|8
 20780 00003260 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - READ FROM REMOTE FILE
 20781                                  			; ES:DI -> SFT
 20782                                  			; SFT DPB field -> DPB of drive containing file
 20783                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 20784                                  			; Return: CF set on error, CX = bytes read
 20785 00003262 C3                      	retn
 20786                                  ;ENDIF
 20787                                  
 20788                                  ; The user ended up requesting 0 bytes of input. We do nothing for this case
 20789                                  ; except return immediately.
 20790                                  
 20791                                  NoIORet:
 20792 00003263 F8                      	CLC
 20793 00003264 C3                      	retn
 20794                                  
 20795                                  LOCAL_READ:
 20796                                  	;test	word [es:di+5],80h
 20797                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device  ; Check for named device I/O
 20798 00003265 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 02/06/2019
 20799 0000326A 750E                    	JNZ	short READDEV
 20800                                  
 20801                                  	;mov	byte [EXTERR_LOCUS],2
 20802 0000326C C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 20803 00003271 E87FE0                  	call	ECritDisk
 20804 00003274 E88505                  	call	DISKREAD
 20805                                  
 20806                                  critexit:
 20807                                  	;call	LCritDisk
 20808                                  	;retn
 20809                                  	; 16/12/2022
 20810 00003277 E994E0                  	jmp	LCritDisk
 20811                                  
 20812                                  ; We are reading from a device. Examine the status of the device to see if we
 20813                                  ; can short-circuit the I/O. If the device in the EOF state or if it is the
 20814                                  ; null device, we can safely indicate no transfer.
 20815                                  
 20816                                  READDEV:
 20817                                  	;mov	byte [EXTERR_LOCUS],4
 20818 0000327A C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 20819                                  	;mov	bl,[es:di+5]
 20820 0000327F 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 20821 00003283 C43E[2C03]              	LES	DI,[DMAADD]
 20822                                  	;test	bl,40h
 20823 00003287 F6C340                  	test	BL,devid_device_EOF	; End of file?
 20824 0000328A 7407                    	JZ	short ENDRDDEVJ3
 20825                                  	;test	bl,4
 20826 0000328C F6C304                  	test	BL,devid_device_null	; NUL device?
 20827 0000328F 7405                    	JZ	short TESTRAW 		; NO
 20828 00003291 30C0                    	XOR	AL,AL			; Indicate EOF by setting zero
 20829                                  ENDRDDEVJ3:
 20830                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20831                                  	;JMP	short ENDRDDEVJ2
 20832                                  	; 16/12/2022
 20833 00003293 E95101                  	jmp	ENDRDDEV ; 04/05/2019
 20834                                  
 20835                                  ; We need to hit the device. Figure out if we do a raw read or we do the
 20836                                  ; bizarre std_con_string_input.
 20837                                  
 20838                                  TESTRAW:
 20839                                  	;test	bl,20h
 20840 00003296 F6C320                  	test	BL,devid_device_raw	; Raw mode?
 20841 00003299 7508                    	JNZ	short DVRDRAW 		; Yes, let the device do all local editing
 20842                                  	;test	bl,1
 20843 0000329B F6C301                  	test	BL,devid_device_con_in	; Is it console device?
 20844 0000329E 7457                    	JZ	short NOTRDCON
 20845 000032A0 E97901                  	JMP	READCON
 20846                                  
 20847                                  DVRDRAW:
 20848 000032A3 06                      	PUSH	ES
 20849 000032A4 1F                      	POP	DS			; Xaddr to DS:DI
 20850                                  
 20851                                  	; 04/05/2019 - Retro DOS v4.0
 20852                                  
 20853                                  	; MSDOS 6.0
 20854                                  ;SR;
 20855                                  ;Check for win386 presence -- if present, do polled read of characters
 20856                                  
 20857 000032A5 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 19/05/2019
 20858 000032AB 7408                    	jz	short ReadRawRetry	;not present
 20859 000032AD F6C301                  	test	bl,devid_device_con_in	;is it console device
 20860 000032B0 7403                    	jz	short ReadRawRetry	;no, do normal read
 20861 000032B2 E9AA00                  	jmp	do_polling		;yes, do win386 polling loop
 20862                                  
 20863                                  ReadRawRetry:
 20864                                  
 20865                                  ; 07/02/2024
 20866                                  %if 0
 20867                                  	MOV	BX,DI			; DS:BX transfer addr
 20868                                  	; 06/02/2024 ; *
 20869                                  	;XOR	AX,AX			; Media Byte, unit = 0
 20870                                  	;;MOV	DX,AX			; Start at 0
 20871                                  	;; 06/02/2024
 20872                                  	;cwd
 20873                                  	;call	SETREAD
 20874                                  	; 06/02/2024 ; *
 20875                                  	call	SETREAD_X
 20876                                  %else
 20877 000032B5 E87A13                  	call	SETREAD_XJ
 20878                                  %endif
 20879                                  
 20880                                  ;hkn; SS override
 20881 000032B8 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20882 000032BD E8F912                  	call	DEVIOCALL
 20883 000032C0 89FA                    	MOV	DX,DI			; DS:DX is preserved by INT 24
 20884 000032C2 B486                    	MOV	AH,86H			; Read error
 20885                                  
 20886                                  ;hkn; SS override
 20887 000032C4 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20888                                  	; MSDOS 3.3
 20889                                  	;test	di,8000h
 20890                                  	;jz	short CRDROK
 20891                                  	; MSDOS 6.0
 20892 000032C9 09FF                    	or	di,di
 20893 000032CB 7920                    	jns	short CRDROK		; no errors
 20894                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20895 000032CD E85C1F                  	call	CHARHARD
 20896                                  
 20897                                  ; 06/02/2024 - Retrro DOS v5.0
 20898                                  %if 0
 20899                                  	MOV	DI,DX			; DS:DI is Xaddr
 20900                                  	; 04/05/2019
 20901                                  	; MSDOS 6.0
 20902                                  	add	di,[ss:CALLSCNT]	; update ptr and count to reflect the	M065
 20903                                  	sub	cx,[ss:CALLSCNT]	; number of chars xferred		M065
 20904                                  %else
 20905 000032D0 368B3E[6C03]            	mov	di,[ss:CALLSCNT]
 20906 000032D5 29F9                    	sub	cx,di			; update transfer count
 20907 000032D7 01D7                    	add	di,dx			; update pointer
 20908                                  %endif
 20909                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20910 000032D9 08C0                    	OR	AL,AL
 20911 000032DB 7410                    	JZ	short CRDROK		; Ignore
 20912 000032DD 3C03                    	CMP	AL,3
 20913 000032DF 7403                    	JZ	short CRDFERR 		; fail.
 20914 000032E1 1F                      	POP	DS			; Recover saved seg part of Xaddr
 20915 000032E2 EBD1                    	JMP	short ReadRawRetry	; Retry
 20916                                  
 20917                                  ; We have encountered a device-driver error. We have informed the user of it
 20918                                  ; and he has said for us to fail the system call.
 20919                                  
 20920                                  CRDFERR:
 20921 000032E4 5F                      	POP	DI			; Clean stack
 20922                                  DEVIOFERR:
 20923                                  
 20924                                  ;hkn; SS override
 20925 000032E5 36C43E[9E05]            	LES	DI,[SS:THISSFT]
 20926 000032EA E94E05                  	jmp	SET_ACC_ERR_DS
 20927                                  
 20928                                  CRDROK:
 20929 000032ED 5F                      	POP	DI			; Chuck saved seg of Xaddr
 20930 000032EE 89D7                    	MOV	DI,DX
 20931                                  
 20932                                  ;hkn; SS override
 20933 000032F0 36033E[6C03]            	ADD	DI,[ss:CALLSCNT]	; Amount transferred
 20934                                  	;JMP	SHORT ENDRDDEVJ3
 20935                                  	; 16/12/2022
 20936 000032F5 EB65                    	jmp	short ENDRDDEVJ2
 20937                                  
 20938                                  ; We are going to do a cooked read on some character device. There is a
 20939                                  ; problem here, what does the data look like? Is it a terminal device, line
 20940                                  ; CR line CR line CR, or is it file data, line CR LF line CR LF? Does it have
 20941                                  ; a ^Z at the end which is data, or is the ^Z not data?  In any event we're
 20942                                  ; going to do this: Read in pieces up to CR (CRs included in data) or ^z (^z
 20943                                  ; included in data). this "simulates" the way con works in cooked mode
 20944                                  ; reading one line at a time. With file data, however, the lines will look
 20945                                  ; like, LF line CR. This is a little weird.
 20946                                  
 20947                                  NOTRDCON:
 20948 000032F7 8CC0                    	MOV	AX,ES
 20949 000032F9 8ED8                    	MOV	DS,AX
 20950                                  
 20951                                  ; 07/02/2024
 20952                                  %if 0
 20953                                  	MOV	BX,DI
 20954                                  	; 06/02/2024 ; *
 20955                                  	;;XOR	DX,DX
 20956                                  	;;MOV	AX,DX
 20957                                  	;; 06/02/2024
 20958                                  	;xor	ax,ax
 20959                                  	;cwd
 20960                                  	PUSH	CX
 20961                                  	MOV	CX,1
 20962                                  	;call	SETREAD
 20963                                  	; 06/02/2024 ; *
 20964                                  	call	SETREAD_X
 20965                                  	POP	CX
 20966                                  %else
 20967 000032FB 51                      	push	cx
 20968 000032FC B90100                  	mov	cx,1
 20969 000032FF E83013                  	call	SETREAD_XJ
 20970 00003302 59                      	pop	cx
 20971                                  %endif
 20972                                  
 20973                                  ;hkn; SS override
 20974 00003303 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20975                                  	;lds	si,[si+7]
 20976 00003308 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 20977                                  DVRDLP:
 20978 0000330B E8FF1C                  	call	DSKSTATCHK
 20979 0000330E E8AB12                  	call	DEVIOCALL2
 20980 00003311 57                      	PUSH	DI		; Save "count" done
 20981 00003312 B486                    	MOV	AH,86H
 20982                                  
 20983                                  ;hkn; SS override
 20984 00003314 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20985                                  	
 20986                                  	; MSDOS 3.3
 20987                                  	;test	di,8000h
 20988                                  	;jz	short CRDOK
 20989                                  	; MSDOS 6.0
 20990 00003319 09FF                    	or	di,di
 20991 0000331B 7917                    	jns	short CRDOK
 20992                                  	
 20993 0000331D E80C1F                  	call	CHARHARD
 20994 00003320 5F                      	POP	DI
 20995                                  
 20996                                  ;hkn; SS override
 20997 00003321 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 20998 00003328 3C01                    	CMP	AL,1
 20999 0000332A 74DF                    	JZ	short DVRDLP		;Retry
 21000 0000332C 3C03                    	CMP	AL,3
 21001 0000332E 74B5                    	JZ	short DEVIOFERR		; FAIL
 21002 00003330 30C0                    	XOR	AL,AL			; Ignore, Pick some random character
 21003 00003332 EB12                    	JMP	SHORT DVRDIGN
 21004                                  
 21005                                  CRDOK:
 21006 00003334 5F                      	POP	DI
 21007                                  
 21008                                  ;hkn; SS override
 21009 00003335 36833E[6C03]01          	CMP	word [SS:CALLSCNT],1
 21010                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 21011 0000333B 751F                    	JNZ	short ENDRDDEVJ2
 21012                                  	; 16/12/2022
 21013                                  	;jnz	short ENDRDDEV ; 24/07/2019
 21014                                  
 21015 0000333D 1E                      	PUSH	DS
 21016                                  
 21017                                  ;hkn; SS override
 21018 0000333E 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 21019 00003343 8A05                    	MOV	AL,[DI]			; Get the character we just read
 21020 00003345 1F                      	POP	DS
 21021                                  DVRDIGN:
 21022                                  
 21023                                  ;hkn; SS override
 21024 00003346 36FF06[6803]            	INC	WORD [SS:CALLXAD]	; Next character
 21025 0000334B 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 21026 00003352 47                      	INC	DI			; Next character
 21027 00003353 3C1A                    	CMP	AL,1Ah			; ^Z?
 21028                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 21029 00003355 7405                    	JZ	short ENDRDDEVJ2	; Yes, done zero set (EOF)
 21030                                  	; 16/12/2022
 21031                                  	;jz	short ENDRDDEV ; 24/07/2019	
 21032 00003357 3C0D                    	CMP	AL,c_CR  ; 0Dh		; CR?
 21033 00003359 E0B0                    	LOOPNZ	DVRDLP			; Loop if no, else done
 21034 0000335B 40                      	INC	AX			; Resets zero flag so NOT EOF, unless
 21035                                  					;  AX=FFFF which is not likely
 21036                                  ENDRDDEVJ2:
 21037                                  	; 16/12/2022
 21038                                  	;JMP	short ENDRDDEV		; changed short to long for win386
 21039                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21040 0000335C E98800                  	jmp	ENDRDDEV
 21041                                  
 21042                                  	; 04/05/2019
 21043                                  
 21044                                  	; MSDOS 6.0
 21045                                  ;SR;
 21046                                  ;Polling code for raw read on CON when WIN386 is present
 21047                                  ;
 21048                                  ;At this point -- ds:di is transfer address
 21049                                  ;		  cx is count
 21050                                  
 21051                                  do_polling:
 21052                                  
 21053                                  ; 07/02/2024
 21054                                  %if 0
 21055                                  	mov	bx,di			;ds:bx is Xfer address
 21056                                  	; 06/02/2024 ; *
 21057                                  	;xor	ax,ax
 21058                                  	;;mov	dx,ax
 21059                                  	;; 06/02/2024
 21060                                  	;cwd
 21061                                  	;call	SETREAD			;prepare device packet
 21062                                  	; 06/02/2024 ; *
 21063                                  	call	SETREAD_X
 21064                                  %else
 21065 0000335F E8D012                  	call	SETREAD_XJ
 21066                                  %endif
 21067                                  
 21068                                  do_io:
 21069                                  ;Change read to a NON-DESTRUCTIVE READ, NO WAIT
 21070                                  
 21071 00003362 26C6470205              	mov	byte [es:bx+2],DEVRDND ; 5 ;Change command code
 21072 00003367 1E                      	push	ds
 21073 00003368 36C536[9E05]            	lds	si,[ss:THISSFT]		;get device header
 21074 0000336D E84912                  	call	DEVIOCALL		;call device driver
 21075 00003370 1F                      	pop	ds
 21076                                  	
 21077                                  	;test	word [es:bx+3],8000h
 21078                                  	; 16/12/2022
 21079                                  	;test	byte [es:bx+4],80h
 21080 00003371 26F6470480              	test	byte [es:bx+SRHEAD.REQSTAT+1],STERR>>8 
 21081                                  	;test	word [es:bx+SRHEAD.REQSTAT],STERR ;check if error
 21082 00003376 7413                    	jz	short check_busy	;no
 21083                                  
 21084 00003378 1E                      	push	ds
 21085 00003379 89FA                    	mov	dx,di
 21086                                  	;invoke charhard		;invoke int 24h handler
 21087 0000337B E8AE1E                  	call	CHARHARD
 21088 0000337E 89D7                    	mov	di,dx
 21089 00003380 08C0                    	or	al,al
 21090 00003382 745D                    	jz	short pop_done_read	;ignore by user, assume read done
 21091 00003384 3C03                    	cmp	al,3
 21092 00003386 7448                    	jz	short devrderr		;user asked to fail
 21093 00003388 1F                      	pop	ds
 21094 00003389 EBD7                    	jmp	short do_io		;user asked to retry
 21095                                  
 21096                                  check_busy:
 21097                                  	;test	word [es:bx+3],200h
 21098                                  	; 16/12/2022
 21099 0000338B 26F6470402              	test	byte [es:bx+SRHEAD.REQSTAT+1],02h
 21100                                  	;test	word [es:bx+SRHEAD.REQSTAT],0200h ;see if busy bit set
 21101 00003390 7547                    	jnz	short no_char		;yes, no character available
 21102                                  
 21103                                  ;Character is available. Read in 1 character at a time until all characters
 21104                                  ;are read in or no character is available
 21105                                  
 21106 00003392 26C6470204              	mov	byte [es:bx+2],DEVRD ; 4 ;command code is READ now
 21107 00003397 26C747120100            	mov	word [es:bx+18],1	;change count to 1 character
 21108 0000339D 1E                      	push	ds
 21109 0000339E 36C536[9E05]            	lds	si,[ss:THISSFT]
 21110 000033A3 E81312                  	call	DEVIOCALL
 21111                                  
 21112 000033A6 89FA                    	mov	dx,di
 21113 000033A8 B486                    	mov	ah,86h
 21114                                  	;mov	di,[es:bx+3]
 21115 000033AA 268B7F03                	mov	di,[es:bx+SRHEAD.REQSTAT] ;get returned status
 21116 000033AE F7C70080                	test	di,STERR ; 8000h	;was there an error during read?
 21117 000033B2 7410                    	jz	short next_char		;no,read next character
 21118                                  
 21119                                  	;invoke	charhard		;invoke int 24h handler
 21120 000033B4 E8751E                  	call	CHARHARD
 21121 000033B7 89D7                    	mov	di,dx			;restore di
 21122 000033B9 08C0                    	or	al,al			;
 21123 000033BB 7424                    	jz	short pop_done_read	;ignore by user,assume read is done
 21124 000033BD 3C03                    	cmp	al,3
 21125 000033BF 740F                    	jz	short devrderr		;user issued a 'fail',indicate error
 21126 000033C1 1F                      	pop	ds
 21127 000033C2 EB9E                    	jmp	short do_io		;user issued a retry
 21128                                  
 21129                                  next_char:
 21130 000033C4 1F                      	pop	ds
 21131 000033C5 89D7                    	mov	di,dx
 21132 000033C7 49                      	dec	cx			;decrement count
 21133 000033C8 E318                    	jcxz	done_read		;all characters read in
 21134 000033CA 26FF470E                	inc	word [es:bx+14]		;update transfer address
 21135 000033CE EB92                    	jmp	short do_io			;read next character in
 21136                                  
 21137                                  devrderr:
 21138 000033D0 5F                      	pop	di			;discard segment address
 21139 000033D1 36C43E[9E05]            	les	di,[ss:THISSFT]
 21140                                  	;transfer SET_ACC_ERR_DS	;indicate error
 21141 000033D6 E96204                  	jmp     SET_ACC_ERR_DS
 21142                                  
 21143                                  no_char:
 21144                                  ;Since no character is available, we let win386 switch the VM out
 21145                                  
 21146 000033D9 50                      	push	ax
 21147 000033DA B484                    	mov	ah,84h	; Microsoft Networks - KEYBOARD BUSY LOOP
 21148 000033DC CD2A                    	int	2Ah			;indicate idle to WIN386
 21149                                  
 21150                                  ;When control returns from WIN386, we continue the raw read
 21151                                  
 21152 000033DE 58                      	pop	ax
 21153 000033DF EB81                    	jmp	do_io
 21154                                  
 21155                                  pop_done_read:
 21156 000033E1 1F                      	pop	ds
 21157                                  done_read:
 21158 000033E2 36033E[6C03]            	add	di,[ss:CALLSCNT] ; 19/05/2019
 21159                                  
 21160                                  	; 16/12/2022
 21161                                  
 21162                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 21163                                  	;jmp	ENDRDDEV ; 04/05/2019
 21164                                  
 21165                                  	; 04/05/2019 - Retro DOS v4.0
 21166                                  ENDRDDEV:
 21167 000033E7 16                      	push	ss
 21168 000033E8 1F                      	pop	ds
 21169 000033E9 EB1F                    	jmp	short endrddev1
 21170                                  
 21171                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21172                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 21173                                  
 21174                                  TRANBUF:
 21175 000033EB AC                      	LODSB
 21176 000033EC AA                      	STOSB
 21177 000033ED 3C0D                    	CMP	AL,c_CR ; 0Dh	; Check for carriage return
 21178 000033EF 7503                    	JNZ	short NORMCH
 21179 000033F1 C6040A                  	MOV	BYTE [SI],c_LF ; 0Ah
 21180                                  NORMCH:
 21181 000033F4 3C0A                    	CMP	AL,c_LF ; 0Ah
 21182 000033F6 E0F3                    	LOOPNZ	TRANBUF
 21183 000033F8 7507                    	JNZ	short ENDRDCON
 21184 000033FA 31F6                    	XOR	SI,SI		; Cause a new buffer to be read
 21185 000033FC E848E2                  	call	OUTT		; Transmit linefeed
 21186 000033FF 0C01                    	OR	AL,1		; Clear zero flag--not end of file
 21187                                  ENDRDCON:
 21188                                  ;hkn; SS is DOSDATA
 21189 00003401 16                      	push	ss
 21190 00003402 1F                      	pop	ds
 21191 00003403 E822FE                  	CALL	SWAPBACK
 21192 00003406 8936[2200]              	MOV	[CONTPOS],SI
 21193                                  
 21194                                  	; 16/12/2022
 21195                                  ;ENDRDDEV:
 21196                                  ;;hkn; SS is DOSDATA
 21197                                  ;	push	ss
 21198                                  ;	pop	ds
 21199                                  endrddev1:	; 04/05/2019
 21200 0000340A 893E[B805]              	MOV	[NEXTADD],DI
 21201 0000340E 7509                    	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 21202 00003410 C43E[9E05]              	LES	DI,[THISSFT]
 21203                                  	;and	byte [es:di+5],0BFh
 21204 00003414 26806505BF              	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF 
 21205                                  				; Mark as no more data available
 21206                                  SETSFTC:
 21207                                  	; 31/07/2019
 21208                                  	;call	SETSFT
 21209                                  	;retn
 21210 00003419 E9B304                  	jmp	SETSFT
 21211                                  
 21212                                  ; 16/12/2022
 21213                                  %if 0
 21214                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21215                                  ENDRDDEV:
 21216                                  ;hkn; SS is DOSDATA
 21217                                  	push	ss
 21218                                  	pop	ds
 21219                                  	MOV	[NEXTADD],DI
 21220                                  	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 21221                                  	LES	DI,[THISSFT]
 21222                                  	;and	byte [es:di+5],0BFh
 21223                                  	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF 
 21224                                  				; Mark as no more data available
 21225                                  SETSFTC:
 21226                                  	;call	SETSFT
 21227                                  	;retn
 21228                                  	jmp	SETSFT	
 21229                                  %endif
 21230                                  
 21231                                  READCON:
 21232 0000341C E80FFE                  	CALL	SWAPCON
 21233 0000341F 8B36[2200]              	MOV	SI,[CONTPOS]
 21234 00003423 09F6                    	OR	SI,SI
 21235 00003425 75C4                    	JNZ	short TRANBUF
 21236 00003427 803E[7B02]80            	CMP	BYTE [CONBUF],128 ; 80h
 21237 0000342C 7406                    	JZ	short GETBUF
 21238 0000342E C706[7B02]80FF          	MOV	WORD [CONBUF],0FF80H ; Set up 128-byte buffer with no template
 21239                                  GETBUF:
 21240 00003434 51                      	PUSH	CX
 21241 00003435 06                      	PUSH	ES
 21242 00003436 57                      	PUSH	DI
 21243                                  
 21244                                  ;hkn; CONBUF is in DOSDATA
 21245 00003437 BA[7B02]                	MOV	DX,CONBUF
 21246                                  
 21247 0000343A E885DF                  	call	_$STD_CON_STRING_INPUT	; Get input buffer
 21248 0000343D 5F                      	POP	DI
 21249 0000343E 07                      	POP	ES
 21250 0000343F 59                      	POP	CX
 21251                                  
 21252                                  ;hkn; CONBUF is in DOSDATA
 21253 00003440 BE[7D02]                	MOV	SI,CONBUF+2
 21254                                  
 21255 00003443 803C1A                  	CMP	BYTE [SI],1AH	; Check for Ctrl-Z in first character
 21256 00003446 75A3                    	JNZ	short TRANBUF
 21257 00003448 B01A                    	MOV	AL,1AH
 21258 0000344A AA                      	STOSB
 21259 0000344B 4F                      	DEC	DI
 21260 0000344C B00A                    	MOV	AL,c_LF
 21261 0000344E E8F6E1                  	call	OUTT		; Send linefeed
 21262 00003451 31F6                    	XOR	SI,SI
 21263 00003453 EBAC                    	JMP	short ENDRDCON ; 04/05/2019
 21264                                  
 21265                                  ; 24/07/2018 - Retro DOS v3.0
 21266                                  
 21267                                  ;Break	<DOS_WRITE -- MAIN WRITE ROUTINE AND DEVICE OUT ROUTINES>
 21268                                  ;---------------------------------------------------------------------------
 21269                                  ;
 21270                                  ; Procedure Name : DOS_WRITE
 21271                                  ;
 21272                                  ; Inputs:
 21273                                  ;	ThisSFT set to the SFT for the file being used
 21274                                  ;	[DMAADD] contains transfer address
 21275                                  ;	CX = No. of bytes to write
 21276                                  ; Function:
 21277                                  ;	Perform write operation
 21278                                  ;	NOTE: If CX = 0 on input, file is truncated or grown
 21279                                  ;		to current sf_position
 21280                                  ; Outputs:
 21281                                  ;    Carry clear
 21282                                  ;	SFT Position and cluster pointers updated
 21283                                  ;	CX = No. of bytes written
 21284                                  ;	ES:DI point to SFT
 21285                                  ;    Carry set
 21286                                  ;	AX is error code
 21287                                  ;	CX = 0
 21288                                  ;	ES:DI point to SFT
 21289                                  ; DS preserved, all other registers destroyed
 21290                                  ;---------------------------------------------------------------------------
 21291                                  
 21292                                  ;hkn; called from fcbio2.asm, handle.asm and dev.asm. DS is set up at this 
 21293                                  ;hkn; point to DOSDATA.
 21294                                  
 21295                                  ; 04/05/2019 - Retro DOS v4.0
 21296                                  ; DOSCODE:742Ch (MSDOS 6.21, MSDOS.SYS)
 21297                                  
 21298                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21299                                  ; DOSCODE:7418h (MSDOS 5.0, MSDOS.SYS)
 21300                                  
 21301                                  DOS_WRITE:
 21302 00003455 C43E[9E05]              	LES	DI,[THISSFT]
 21303                                  	;mov	al,[ES:DI+2]
 21304 00003459 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 21305                                  	;and	al,0Fh
 21306 0000345D 240F                    	AND	AL,access_mask
 21307                                  	;cmp	al,0
 21308 0000345F 3C00                    	CMP	AL,open_for_read
 21309 00003461 7503                    	JNE	short Check_FCB_RO		 ;Is write or both
 21310                                  BadMode:
 21311 00003463 E9D703                  	jmp	SET_ACC_ERR
 21312                                  
 21313                                  ; NOTE: The following check for writting to a Read Only File is performed
 21314                                  ;	    ONLY on FCBs!!!!
 21315                                  ;	We ALLOW writes to Read Only files via handles to allow a CREATE
 21316                                  ;	    of a read only file which can then be written to.
 21317                                  ;	This is OK because we are NOT ALLOWED to OPEN a RO file via handles
 21318                                  ;	    for writting, or RE-CREATE an EXISTING RO file via handles. Thus,
 21319                                  ;	    CREATing a NEW RO file, or RE-CREATing an existing file which
 21320                                  ;	    is NOT RO to be RO, via handles are the only times we can write
 21321                                  ;	    to a read-only file.
 21322                                  
 21323                                  Check_FCB_RO:
 21324                                  	;;test	word [es:di+2],8000h
 21325                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 21326                                  	;JZ	short WRITE_NO_MODE	; Not an FCB
 21327                                  	
 21328                                  	;test	byte [es:di+3],80h
 21329 00003466 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 21330 0000346B 7407                    	JZ	short WRITE_NO_MODE	; Not an FCB
 21331                                  
 21332                                  	;test	byte [es:di+4],1
 21333 0000346D 26F6450401              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_read_only
 21334 00003472 75EF                    	JNZ	short BadMode 		; Can't write to Read_Only files via FCB
 21335                                  WRITE_NO_MODE:
 21336 00003474 E8AA02                  	call	SETUP
 21337 00003477 E8D0DD                  	call	IsSFTNet
 21338 0000347A 7406                    	JZ	short LOCAL_WRITE
 21339                                  
 21340                                  ;IF NOT Installed
 21341                                  ;	transfer NET_WRITE
 21342                                  ;ELSE
 21343                                  	;mov	ax,1109h
 21344 0000347C B80911                  	MOV	AX,(MultNET<<8)|9
 21345 0000347F CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE
 21346                                  			; ES:DI -> SFT
 21347                                  			; SFT DPB field -> DPB of drive containing file
 21348                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 21349                                  			; Return: CF set on error, CX = bytes written
 21350 00003481 C3                      	retn
 21351                                  ;ENDIF
 21352                                  
 21353                                  LOCAL_WRITE:
 21354                                  	;;test	word [es:di+5],80h
 21355                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 21356                                  	;jnz	short WRTDEV
 21357                                  
 21358                                  	;test	byte [es:di+5],80h
 21359 00003482 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; Check for named device I/O
 21360 00003487 756E                    	jnz	short WRTDEV
 21361                                  
 21362                                  	;mov	byte [EXTERR_LOCUS],2
 21363 00003489 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 21364 0000348E E862DE                  	call	ECritDisk
 21365                                  
 21366 00003491 E8F104                  	call	DISKWRITE
 21367                                  
 21368                                  	; 04/05/2019 - Retro DOS v4.0
 21369                                  
 21370                                  	; MSDOS 6.0
 21371                                  ; Extended Open
 21372 00003494 7210                    	JC	short nocommit
 21373                                  	
 21374 00003496 C43E[9E05]              	LES	DI,[THISSFT]
 21375                                  	
 21376                                  	;;test	word [ES:DI+2],4000h
 21377                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],AUTO_COMMIT_WRITE
 21378                                  	;JZ	short nocommit
 21379                                  	
 21380                                  	;test	byte [ES:DI+3],40h
 21381 0000349A 26F6450340              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(AUTO_COMMIT_WRITE>>8)
 21382 0000349F 7405                    	JZ	short nocommit
 21383                                  	
 21384 000034A1 51                      	PUSH	CX
 21385 000034A2 E84BFB                  	call	DOS_COMMIT
 21386 000034A5 59                      	POP	CX
 21387                                  nocommit:
 21388                                  ; Extended Open
 21389                                  	;call	LCritDisk
 21390                                  	;retn
 21391                                  	; 18/12/2022
 21392 000034A6 E965DE                  	jmp	LCritDisk
 21393                                  
 21394                                  DVWRTRAW:
 21395 000034A9 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 21396 000034AB E8C511                  	call	SETWRITE
 21397 000034AE 1E                      	PUSH	DS			; Save seg of transfer
 21398                                  
 21399                                  ;hkn; SS override
 21400 000034AF 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 21401 000034B4 E80211                  	call	DEVIOCALL		; DS:SI -> DEVICE
 21402                                  
 21403 000034B7 89FA                    	MOV	DX,DI			; Offset part of Xaddr saved in DX
 21404 000034B9 B487                    	MOV	AH,87H
 21405                                  
 21406                                  ;hkn; SS override
 21407 000034BB 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 21408                                  
 21409                                  	; MSDOS 3.3
 21410                                  	;test	di,8000h
 21411                                  	;jz	short CWRTROK
 21412                                  
 21413                                  	; MSDOS 6.0
 21414 000034C0 09FF                    	or	di,di
 21415 000034C2 7920                    	jns	short CWRTROK
 21416                                  	
 21417                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21418 000034C4 E8651D                  	call	CHARHARD
 21419                                  
 21420                                  	; 04/05/2019  - Retro DOS v4.0
 21421                                  
 21422                                  	; MSDOS 6.0
 21423 000034C7 362B0E[6C03]            	sub	cx,[ss:CALLSCNT]	; update ptr & count to reflect	M065
 21424 000034CC 89D3                    	mov	bx,dx			; number of chars xferred	M065
 21425 000034CE 36031E[6C03]            	add	bx,[ss:CALLSCNT]	;				M065
 21426 000034D3 89DF                    	mov	di,bx			;				M065
 21427                                  	
 21428                                  	; MSDOS 3.3
 21429                                  	;MOV	BX,DX			; Recall transfer addr		M065
 21430                                  
 21431                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21432 000034D5 08C0                    	OR	AL,AL
 21433 000034D7 740B                    	JZ	short CWRTROK 		; Ignore
 21434 000034D9 3C03                    	CMP	AL,3
 21435 000034DB 7403                    	JZ	short CWRFERR
 21436 000034DD 1F                      	POP	DS			; Recover saved seg of transfer
 21437 000034DE EBC9                    	JMP	short DVWRTRAW		; Try again
 21438                                  CWRFERR:
 21439 000034E0 58                      	POP	AX			; Chuck saved seg of transfer
 21440 000034E1 E900FE                  	JMP	CRDFERR 		; Will pop one more stack element
 21441                                  CWRTROK:
 21442 000034E4 58                      	POP	AX			; Chuck saved seg of transfer
 21443 000034E5 1F                      	POP	DS
 21444 000034E6 A1[6C03]                	MOV	AX,[CALLSCNT]		; Get actual number of bytes transferred
 21445                                  ENDWRDEV:
 21446 000034E9 C43E[9E05]              	LES	DI,[THISSFT]
 21447 000034ED 89C1                    	MOV	CX,AX
 21448                                  	;call	ADDREC
 21449                                  	;retn
 21450                                  	; 16/12/2022
 21451                                  	; 10/06/2019
 21452 000034EF E9FE03                  	jmp	ADDREC
 21453                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21454                                  	;call	ADDREC
 21455                                  	;retn
 21456                                  	
 21457                                  WRTNUL:
 21458 000034F2 89CA                    	MOV	DX,CX			; Entire transfer done
 21459                                  WRTCOOKJ:
 21460 000034F4 E98D00                  	JMP	WRTCOOKDONE
 21461                                  WRTDEV:
 21462                                  	;mov	byte [EXTERR_LOCUS],4
 21463 000034F7 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 21464                                  	;or	byte [es:di+5],40h
 21465 000034FC 26804D0540              	OR	BYTE [ES:DI+SF_ENTRY.sf_flags],devid_device_EOF
 21466                                  					; Reset EOF for input
 21467                                  	;mov	bl,[es:di+5]
 21468 00003501 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 21469 00003505 31C0                    	XOR	AX,AX
 21470 00003507 E3E0                    	JCXZ	ENDWRDEV		; problem of creating on a device.
 21471 00003509 1E                      	PUSH	DS
 21472 0000350A 88D8                    	MOV	AL,BL
 21473 0000350C C51E[2C03]              	LDS	BX,[DMAADD]		; Xaddr to DS:BX
 21474 00003510 89DF                    	MOV	DI,BX			; Xaddr to DS:DI
 21475 00003512 31D2                    	XOR	DX,DX			; Set starting point
 21476                                  	;test	al,20h
 21477 00003514 A820                    	test	AL,devid_device_raw	; Raw?
 21478                                  	;JZ	short TEST_DEV_CON
 21479                                  	;JMP	DVWRTRAW
 21480                                  	; 16/12/2022
 21481 00003516 7591                    	jnz	short DVWRTRAW
 21482                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21483                                  	;JZ	short TEST_DEV_CON
 21484                                  	;JMP	short DVWRTRAW
 21485                                  
 21486                                  TEST_DEV_CON:
 21487                                  	;test	al,2
 21488 00003518 A802                    	test	AL,devid_device_con_out ; Console output device?
 21489 0000351A 756E                    	jnz	short WRITECON
 21490                                  	;test	al,4
 21491 0000351C A804                    	test	AL,devid_device_null
 21492 0000351E 75D2                    	JNZ	short WRTNUL
 21493 00003520 89D0                    	MOV	AX,DX
 21494 00003522 803F1A                  	CMP	BYTE [BX],1Ah		; ^Z?
 21495 00003525 74CD                    	JZ	short WRTCOOKJ		; Yes, transfer nothing
 21496 00003527 51                      	PUSH	CX
 21497 00003528 B90100                  	MOV	CX,1
 21498 0000352B E84511                  	call	SETWRITE
 21499 0000352E 59                      	POP	CX
 21500                                  
 21501                                  ;hkn; SS override
 21502 0000352F 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 21503                                  ;
 21504                                  ;SR; Removed X25 support from here
 21505                                  ;
 21506                                  	;lds	si,[si+7]
 21507 00003534 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 21508                                  DVWRTLP:
 21509 00003537 E8D31A                  	call	DSKSTATCHK
 21510 0000353A E87F10                  	call	DEVIOCALL2
 21511 0000353D 57                      	PUSH	DI
 21512 0000353E B487                    	MOV	AH,87H
 21513                                  
 21514                                  ;hkn; SS override
 21515 00003540 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 21516                                  	
 21517                                  	; MSDOS 3.3
 21518                                  	;test	di,8000h
 21519                                  	;jz	short CWROK
 21520                                  
 21521                                  	; MSDOS 6.0
 21522 00003545 09FF                    	or	di,di
 21523 00003547 7916                    	jns	short CWROK
 21524                                  	
 21525                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21526 00003549 E8E01C                  	call	CHARHARD
 21527 0000354C 5F                      	POP	DI
 21528                                  
 21529                                  ;hkn; SS override
 21530 0000354D 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 21531 00003554 3C01                    	CMP	AL,1
 21532 00003556 74DF                    	JZ	short DVWRTLP 	; Retry
 21533 00003558 08C0                    	OR	AL,AL
 21534 0000355A 740C                    	JZ	short DVWRTIGN	; Ignore
 21535                                  	; 10/08/2018
 21536 0000355C E985FD                  	JMP	CRDFERR 	; Fail, pops one stack element
 21537                                  CWROK:
 21538 0000355F 5F                      	POP	DI
 21539                                  
 21540                                  ;hkn; SS override
 21541 00003560 36833E[6C03]00          	CMP	word [SS:CALLSCNT],0
 21542 00003566 741C                    	JZ	short WRTCOOKDONE
 21543                                  DVWRTIGN:
 21544 00003568 42                      	INC	DX
 21545                                  
 21546                                  ;hkn; SS override for CALLXAD
 21547 00003569 36FF06[6803]            	INC	WORD [SS:CALLXAD]
 21548 0000356E 47                      	INC	DI
 21549 0000356F 1E                      	PUSH	DS
 21550 00003570 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 21551 00003575 803D1A                  	CMP	BYTE [DI],1Ah	; ^Z?
 21552 00003578 1F                      	POP	DS
 21553 00003579 7409                    	JZ	short WRTCOOKDONE
 21554                                  
 21555                                  ;hkn; SS override
 21556 0000357B 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 21557 00003582 E2B3                    	LOOP	DVWRTLP
 21558                                  WRTCOOKDONE:
 21559 00003584 89D0                    	MOV	AX,DX
 21560 00003586 1F                      	POP	DS
 21561 00003587 E95FFF                  	JMP	ENDWRDEV ; 10/08/2018
 21562                                  
 21563                                  WRITECON:
 21564 0000358A 1E                      	PUSH	DS
 21565                                  
 21566                                  ;hkn; SS is DOSDATA
 21567 0000358B 16                      	push	ss
 21568 0000358C 1F                      	pop	ds
 21569 0000358D E89EFC                  	CALL	SWAPCON
 21570 00003590 1F                      	POP	DS
 21571 00003591 89DE                    	MOV	SI,BX
 21572 00003593 51                      	PUSH	CX
 21573                                  WRCONLP:
 21574 00003594 AC                      	LODSB
 21575 00003595 3C1A                    	CMP	AL,1Ah		; ^Z?
 21576 00003597 7405                    	JZ	short CONEOF
 21577 00003599 E8ABE0                  	call	OUTT
 21578 0000359C E2F6                    	LOOP	WRCONLP
 21579                                  CONEOF:
 21580 0000359E 58                      	POP	AX			; Count
 21581 0000359F 29C8                    	SUB	AX,CX			; Amount actually written
 21582 000035A1 1F                      	POP	DS
 21583 000035A2 E883FC                  	CALL	SWAPBACK
 21584 000035A5 E941FF                  	JMP	ENDWRDEV
 21585                                  
 21586                                  ;---------------------------------------------------------------------------
 21587                                  ;
 21588                                  ; Procedure Name : get_io_sft
 21589                                  ;
 21590                                  ;   Convert JFN number in BX to sf_entry in DS:SI We get the normal SFT if
 21591                                  ;   CONSWAP is FALSE or if the handle desired is 2 or more. Otherwise, we
 21592                                  ;   retrieve the sft from ConSFT which is set by SwapCon.
 21593                                  ;
 21594                                  ;---------------------------------------------------------------------------
 21595                                  
 21596                                  ; 04/05/2019 - Retro DOS v4.0
 21597                                  ; DOSCODE:7583h (MSDOS 6.21, MSDOS.SYS)
 21598                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21599                                  ; DOSCODE:756Fh (MSDOS 5.0, MSDOS.SYS)
 21600                                  
 21601                                  GET_IO_SFT:
 21602                                  	;test	byte [SS:CONSWAP],0FFh
 21603 000035A8 36803E[5703]00          	cmp	byte [SS:CONSWAP],0			;smr;SS Override
 21604 000035AE 7512                    	JNZ	short GetRedir
 21605                                  GetNormal:
 21606 000035B0 16                      	push	ss
 21607 000035B1 1F                      	pop	ds
 21608 000035B2 06                      	PUSH	ES
 21609 000035B3 57                      	PUSH	DI
 21610 000035B4 E81530                  	call	SFFromHandle
 21611 000035B7 7206                    	JC	short RET44P
 21612 000035B9 8CC6                    	MOV	SI,ES
 21613 000035BB 8EDE                    	MOV	DS,SI
 21614 000035BD 89FE                    	MOV	SI,DI
 21615                                  RET44P:
 21616 000035BF 5F                      	POP	DI
 21617 000035C0 07                      	POP	ES
 21618 000035C1 C3                      	retn
 21619                                  GetRedir:
 21620 000035C2 83FB01                  	CMP	BX,1
 21621 000035C5 77E9                    	JA	short GetNormal
 21622 000035C7 36C536[E605]            	LDS	SI,[SS:CONSFT]
 21623 000035CC F8                      	CLC
 21624                                  get_io_sft_retn:
 21625 000035CD C3                      	retn
 21626                                  
 21627                                  ;Break	<DIRREAD -- READ A DIRECTORY SECTOR>
 21628                                  ;---------------------------------------------------------------------------
 21629                                  ;
 21630                                  ; Procedure Name : DIRREAD
 21631                                  ;
 21632                                  ; Inputs:
 21633                                  ;	AX = Directory block number (relative to first block of directory)
 21634                                  ;	ES:BP = Base of drive parameters
 21635                                  ;	[DIRSEC] = First sector of first cluster of directory
 21636                                  ;	[CLUSNUM] = Next cluster
 21637                                  ;	[CLUSFAC] = Sectors/Cluster
 21638                                  ; Function:
 21639                                  ;	Read the directory block into [CURBUF].
 21640                                  ; Outputs:
 21641                                  ;	[NXTCLUSNUM] = Next cluster (after the one skipped to)
 21642                                  ;	[SECCLUSPOS] Set
 21643                                  ;	ES:BP unchanged
 21644                                  ;	[CURBUF] Points to Buffer with dir sector
 21645                                  ;	Carry set if error (user said FAIL to I 24)
 21646                                  ; DS preserved, all other registers destroyed.
 21647                                  ;---------------------------------------------------------------------------
 21648                                  
 21649                                  ;hkn; called from dir.asm. DS already set up to DOSDATA.
 21650                                  
 21651                                  DIRREAD:
 21652                                  
 21653                                  ; Note that ClusFac is the sectors per cluster. This is NOT necessarily
 21654                                  ; the same as what is in the DPB! In the case of the root directory, we have
 21655                                  ; ClusFac = # sectors in the root directory. The root directory is detected
 21656                                  ; by DIRStart = 0.
 21657                                  
 21658 000035CE 31D2                    	XOR	DX,DX
 21659                                  	;CMP	word [DIRSTART],0
 21660                                  	; 21/09/2023
 21661 000035D0 3916[C205]              	cmp	[DIRSTART],dx ; 0
 21662 000035D4 7503                    	jnz	short SubDir
 21663 000035D6 92                      	XCHG	AX,DX
 21664 000035D7 EB0C                    	JMP	short DoRead
 21665                                  
 21666                                  ; Convert the sector number in AX into cluster and sector-within-cluster pair
 21667                                  
 21668                                  SubDir:
 21669 000035D9 88C2                    	MOV	DL,AL
 21670                                  	;and	dl,[es:bp+4]
 21671 000035DB 26225604                	AND	DL,[ES:BP+DPB.CLUSTER_MASK]
 21672                                  
 21673                                  ;	(DX) = sector-in-cluster
 21674                                  
 21675                                  	;mov	cl,[es:bp+5]
 21676 000035DF 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 21677 000035E3 D3E8                    	SHR	AX,CL
 21678                                  
 21679                                  ;	(DX) = position in cluster
 21680                                  ;	(AX) = number of clusters to skip
 21681                                  
 21682                                  DoRead:
 21683 000035E5 8816[7305]              	MOV	[SECCLUSPOS],DL
 21684 000035E9 89C1                    	MOV	CX,AX
 21685 000035EB 88D4                    	MOV	AH,DL
 21686                                  
 21687                                  ;	(CX) = number of clusters to skip.
 21688                                  ;	(AH) = remainder
 21689                                  
 21690                                  	; 04/05/2019 - Retro DOS v4.0
 21691                                  	 
 21692                                  	; MSDOS 6.0
 21693                                  	;MOV	DX,[DIRSEC+2]	     	  ;>32mb
 21694                                  	;MOV	[HIGH_SECTOR],DX	  ;>32mb
 21695                                  	;MOV	DX,[DIRSEC]
 21696                                  	;ADD	DL,AH
 21697                                  	;ADC	DH,0
 21698                                  	;ADC	word [HIGH_SECTOR],0	  ;>32mb
 21699                                  	; 21/09/2023
 21700 000035ED 31DB                    	xor	bx,bx ; 0
 21701 000035EF 8B16[BE05]              	mov	dx,[DIRSEC]
 21702 000035F3 00E2                    	add	dl,ah
 21703 000035F5 10DE                    	adc	dh,bl ; 0
 21704 000035F7 131E[C005]              	adc	bx,[DIRSEC+2]
 21705 000035FB 891E[0706]              	mov	[HIGH_SECTOR],bx
 21706                                  
 21707 000035FF 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 21708 00003603 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21709 00003607 E319                    	JCXZ	FIRSTCLUSTER
 21710                                  SKPCLLP:
 21711 00003609 E88B1E                  	call	UNPACK
 21712 0000360C 72BF                    	jc	short get_io_sft_retn
 21713 0000360E 87DF                    	XCHG	BX,DI
 21714 00003610 E86D1E                  	call	IsEOF			; test for eof based on fat size
 21715 00003613 7302                    	JAE	short HAVESKIPPED
 21716 00003615 E2F2                    	LOOP	SKPCLLP
 21717                                  HAVESKIPPED:
 21718 00003617 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21719 0000361B 89FA                    	MOV	DX,DI
 21720 0000361D 88E3                    	MOV	BL,AH
 21721 0000361F E81E17                  	call	FIGREC
 21722                                  
 21723                                  	;entry	FIRSTCLUSTER
 21724                                  
 21725                                  FIRSTCLUSTER:
 21726                                  	; 22/09/2023
 21727                                  	;;mov	byte [ALLOWED],18h
 21728                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 21729                                  	;XOR	AL,AL ; *	; Indicate pre-read
 21730                                  	;call	GETBUFFR
 21731 00003622 E87D22                  	call	GETBUFFER ; *	; pre-read
 21732 00003625 72A6                    	jc	short get_io_sft_retn
 21733                                  
 21734                                  	;entry	SET_BUF_AS_DIR
 21735                                  
 21736                                  SET_BUF_AS_DIR:
 21737                                  
 21738                                  ;	Set the type of CURBUF to be a directory sector.
 21739                                  ;	Only flags are modified.
 21740                                  
 21741 00003627 1E                      	PUSH	DS
 21742 00003628 56                      	PUSH	SI
 21743 00003629 C536[E205]              	LDS	SI,[CURBUF]
 21744                                  	;or	byte [si+5],4
 21745 0000362D 804C0504                	OR	byte [SI+BUFFINFO.buf_flags],buf_isDIR	; Clears carry
 21746 00003631 5E                      	POP	SI
 21747 00003632 1F                      	POP	DS
 21748                                  dirread_retn:
 21749 00003633 C3                      	retn
 21750                                  
 21751                                  ;Break	<FATSECRD -- READ A FAT SECTOR>
 21752                                  ;----------------------------------------------------------------------------
 21753                                  ;
 21754                                  ; Procedure Name : FATSECRD
 21755                                  ; Inputs:
 21756                                  ;	Same as DREAD
 21757                                  ;	DS:BX = Transfer address
 21758                                  ;	CX = Number of sectors
 21759                                  ;	DX = Absolute record number
 21760                                  ;	ES:BP = Base of drive parameters
 21761                                  ; Function:
 21762                                  ;	Calls BIOS to perform FAT read.
 21763                                  ; Outputs:
 21764                                  ;	Same as DREAD
 21765                                  ;---------------------------------------------------------------------------
 21766                                  
 21767                                  	; 04/05/2019 - Retro DOS v4.0
 21768                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)	
 21769                                  
 21770                                  FATSECRD:
 21771                                  ;hkn; SS override
 21772                                  	;mov	byte [ss:ALLOWED],18h
 21773 00003634 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 21774 0000363A 89CF                    	MOV	DI,CX
 21775                                  	;mov	cl,[es:bp+8]
 21776 0000363C 268A4E08                	MOV	CL,[ES:BP+DPB.FAT_COUNT]
 21777                                  	; MSDOS 3.3
 21778                                  	;;mov	al,[es:bp+0Fh]
 21779                                  	;MOV	AL,[ES:BP+DPB.FAT_SIZE] 				
 21780                                  	;XOR	AH,AH
 21781                                  	; MSDOS 6.0
 21782                                  	;mov	ax,[es:bp+0Fh]
 21783 00003640 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE] ;>32mb
 21784 00003644 30ED                    	XOR	CH,CH	
 21785 00003646 52                      	PUSH	DX
 21786                                  NXTFAT:
 21787                                  	; MSDOS 6.0
 21788                                  ;hkn; SS override
 21789 00003647 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0	;>32mb FAT sectors cannot exceed
 21790 0000364E 51                      	PUSH	CX			;32mb
 21791 0000364F 50                      	PUSH	AX
 21792 00003650 89F9                    	MOV	CX,DI
 21793 00003652 E85B00                  	call	DSKREAD
 21794 00003655 58                      	POP	AX
 21795 00003656 59                      	POP	CX
 21796 00003657 7420                    	JZ	short RET41P		; Carry clear
 21797 00003659 01C2                    	ADD	DX,AX
 21798 0000365B E2EA                    	LOOP	NXTFAT
 21799 0000365D 5A                      	POP	DX
 21800 0000365E 89F9                    	MOV	CX,DI
 21801                                  
 21802                                  ; NOTE FALL THROUGH
 21803                                  
 21804                                  ;Break	<DREAD -- DO A DISK READ>
 21805                                  ;---------------------------------------------------------------------------
 21806                                  ;
 21807                                  ; Procedure Name : DREAD
 21808                                  ;
 21809                                  ; Inputs:
 21810                                  ;	DS:BX = Transfer address
 21811                                  ;	CX = Number of sectors
 21812                                  ;	DX = Absolute record number	      (LOW)
 21813                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21814                                  ;	ES:BP = Base of drive parameters
 21815                                  ;	[ALLOWED] must be set in case call to HARDERR needed
 21816                                  ; Function:
 21817                                  ;	Calls BIOS to perform disk read. If BIOS reports
 21818                                  ;	errors, will call HARDERRRW for further action.
 21819                                  ; Outputs:
 21820                                  ;	Carry set if error (currently user FAILED to INT 24)
 21821                                  ; DS,ES:BP preserved. All other registers destroyed.
 21822                                  ;---------------------------------------------------------------------------
 21823                                  
 21824                                  	;entry	DREAD
 21825                                  DREAD:
 21826 00003660 E84D00                  	call	DSKREAD
 21827 00003663 74CE                    	jz	short dirread_retn	; Carry clear
 21828                                  ;hkn; SS override
 21829 00003665 36C606[7505]00          	MOV	BYTE [SS:READOP],0
 21830 0000366B E89A00                  	call	HARDERRRW
 21831 0000366E 3C01                    	CMP	AL,1			; Check for retry
 21832 00003670 74EE                    	JZ	short DREAD
 21833 00003672 3C03                    	CMP	AL,3			; Check for FAIL
 21834 00003674 F8                      	CLC
 21835 00003675 7501                    	JNZ	short NO_CAR		; Ignore
 21836 00003677 F9                      	STC
 21837                                  NO_CAR:
 21838 00003678 C3                      	retn
 21839                                  RET41P: 
 21840 00003679 5A                      	POP	DX
 21841 0000367A C3                      	retn
 21842                                  
 21843                                  ; 24/07/2018 - Retro DOS v3.0
 21844                                  
 21845                                  ;Break	<CHECK_WRITE_LOCK>
 21846                                  ;---------------------------------------------------------------------------
 21847                                  ;
 21848                                  ; Procedure Name : CHECK_WRITE_LOCK
 21849                                  ;
 21850                                  ; Inputs:
 21851                                  ;	output of SETUP
 21852                                  ;	ES:DI -> SFT
 21853                                  ; Function:
 21854                                  ;	check write lock
 21855                                  ; Outputs:
 21856                                  ;	Carry set if error
 21857                                  ;	Carry clear if ok
 21858                                  ;
 21859                                  ;----------------------------------------------------------------------------
 21860                                  
 21861                                  	; 04/05/2019 - Retro DOS v4.0
 21862                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21863                                  
 21864                                  CHECK_WRITE_LOCK:
 21865                                  	; MSDOS 6.0
 21866                                  	;test	byte [es:di+4],8
 21867 0000367B 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21868                                  	;JZ	short write_cont			     ;no
 21869                                  	;;call	SET_ACC_ERR_DS
 21870                                  	;;retn
 21871                                  	;;jnz	SET_ACC_ERR_DS
 21872                                  	; 19/08/2018
 21873                                  	;jz	short write_cont
 21874                                  	;jmp	SET_ACC_ERR_DS
 21875                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21876 00003680 7403                    	JZ	short write_cont
 21877                                  	;call	SET_ACC_ERR_DS
 21878                                  	;retn
 21879                                  	; 16/12/2022
 21880 00003682 E9B601                  	jmp	SET_ACC_ERR_DS
 21881                                  
 21882                                  write_cont:				;
 21883 00003685 51                      	PUSH	CX			;save reg
 21884 00003686 09C9                    	OR	CX,CX			;
 21885 00003688 7501                    	JNZ	short Not_Truncate	;
 21886 0000368A 49                      	dec	cx			;(cx) = -1; check for lock on whole file
 21887                                  Not_Truncate:				;
 21888 0000368B B080                    	MOV	AL,80H			;check write access
 21889 0000368D E8C53B                  	call	LOCK_CHECK		;check lock
 21890 00003690 59                      	POP	CX			;restore reg
 21891 00003691 7305                    	JNC	short WRITE_OK		;lock ok
 21892 00003693 E85F01                  	call	WRITE_LOCK_VIOLATION	;issue I24
 21893 00003696 73ED                    	JNC	short write_cont	;retry
 21894                                  WRITE_OK:				;
 21895 00003698 C3                      	retn				;
 21896                                  
 21897                                  ;Break	<CHECK_READ_LOCK>
 21898                                  ;---------------------------------------------------------------------------
 21899                                  ;
 21900                                  ; Procedure Name : CHECK_READ_LOC
 21901                                  ;
 21902                                  ; Inputs:
 21903                                  ;	ES:DI -> SFT
 21904                                  ;	output of SETUP
 21905                                  ; Function:
 21906                                  ;	check read lock
 21907                                  ; Outputs:
 21908                                  ;	Carry set if error
 21909                                  ;	Carry clear if ok
 21910                                  ;----------------------------------------------------------------------------
 21911                                  
 21912                                  CHECK_READ_LOCK:
 21913                                  	; MSDOS 6.0
 21914                                  	;test	byte [es:di+4],8
 21915 00003699 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21916                                  	;JZ	short do_retry			   	     ; no
 21917                                  	;;call	SET_ACC_ERR
 21918                                  	;;retn
 21919                                  	;;jnz	SET_ACC_ERR
 21920                                  	; 16/12/2022
 21921                                  	; 28/07/2019
 21922 0000369E 7403                    	jz	short do_retry
 21923 000036A0 E99A01                  	jmp	SET_ACC_ERR
 21924                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21925                                  	;JZ	short do_retry
 21926                                  	;call	SET_ACC_ERR
 21927                                  	;retn
 21928                                  do_retry:				;
 21929 000036A3 30C0                    	xor	al,al			;check read access
 21930 000036A5 E8AD3B                  	call	LOCK_CHECK		;check lock
 21931 000036A8 7305                    	JNC	short READLOCK_OK 	;lock ok
 21932 000036AA E82801                  	call	READ_LOCK_VIOLATION	;issue I24
 21933 000036AD 73F4                    	JNC	short do_retry		;retry
 21934                                  READLOCK_OK:				;
 21935 000036AF C3                      	retn				;
 21936                                  
 21937                                  ;============================================================================
 21938                                  ; DISK2.ASM, MSDOS 6.0, 1991
 21939                                  ;============================================================================
 21940                                  ; 24/07/2018 - Retro DOS v3.0
 21941                                  ; 04/05/2019 - Retro DOS v4.0
 21942                                  
 21943                                  ;	TITLE	DISK2 - Disk utility routines
 21944                                  ;	NAME	Disk2
 21945                                  
 21946                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 21947                                  ;
 21948                                  ;	DskRead
 21949                                  ;	DWRITE
 21950                                  ;	DSKWRITE
 21951                                  ;	HarderrRW
 21952                                  ;	SETUP
 21953                                  ;	BREAKDOWN
 21954                                  ;	READ_LOCK_VIOLATION
 21955                                  ;	WRITE_LOCK_VIOLATION
 21956                                  ;	DISKREAD
 21957                                  ;	SET_ACC_ERR_DS
 21958                                  ;	SET_ACC_ERR
 21959                                  ;	SETSFT
 21960                                  ;	SETCLUS
 21961                                  ;	AddRec
 21962                                  ;
 21963                                  ;	Revision history:
 21964                                  ;
 21965                                  ;		AN000 version 4.00 Jan. 1988
 21966                                  ;		M039 DB 10/17/90 - Disk read/write optimization
 21967                                  
 21968                                  ; 04/05/2019 - Retro DOS v4.0
 21969                                  ; DOSCODE:7699h (MSDOS 6.21, MSDOS.SYS)
 21970                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21971                                  ; DOSCODE:7685h (MSDOS 5.0, MSDOS.SYS)
 21972                                  
 21973                                  ;Break	<DSKREAD -- PHYSICAL DISK READ>
 21974                                  ;---------------------------------------------------------------------------
 21975                                  ;
 21976                                  ; Procedure Name : DSKREAD
 21977                                  ;
 21978                                  ; Inputs:
 21979                                  ;	DS:BX = Transfer addr
 21980                                  ;	CX = Number of sectors
 21981                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21982                                  ;	DX = Absolute record number	       (LOW)
 21983                                  ;	ES:BP = Base of drive parameters
 21984                                  ; Function:
 21985                                  ;	Call BIOS to perform disk read
 21986                                  ; Outputs:
 21987                                  ;	DI = CX on entry
 21988                                  ;	CX = Number of sectors unsuccessfully transfered
 21989                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 21990                                  ;	Zero set if OK (from BIOS) (carry clear)
 21991                                  ;	Zero clear if error (carry clear)
 21992                                  ; SI Destroyed, others preserved
 21993                                  ;---------------------------------------------------------------------------
 21994                                  
 21995                                  DSKREAD:
 21996 000036B0 51                      	PUSH	CX
 21997                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 21998 000036B1 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 21999                                  	;mov	al,[es:bp+1]
 22000 000036B5 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 22001 000036B9 53                      	PUSH	BX
 22002 000036BA 06                      	PUSH	ES
 22003 000036BB E8820F                  	call	SETREAD
 22004 000036BE EB27                    	JMP	short DODSKOP
 22005                                  
 22006                                  ;Break	<DWRITE -- SEE ABOUT WRITING>
 22007                                  ;--------------------------------------------------------------------------
 22008                                  ;
 22009                                  ; Procedure Name : DWRITE
 22010                                  ;
 22011                                  ; Inputs:
 22012                                  ;	DS:BX = Transfer address
 22013                                  ;	CX = Number of sectors
 22014                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 22015                                  ;	DX = Absolute record number	       (LOW)
 22016                                  ;	ES:BP = Base of drive parameters
 22017                                  ;	[ALLOWED] must be set in case HARDERR called
 22018                                  ; Function:
 22019                                  ;	Calls BIOS to perform disk write. If BIOS reports
 22020                                  ;	errors, will call HARDERRRW for further action.
 22021                                  ; Output:
 22022                                  ;	Carry set if error (currently, user FAILed to I 24)
 22023                                  ; BP preserved. All other registers destroyed.
 22024                                  ;----------------------------------------------------------------------------
 22025                                  
 22026                                  	;entry	DWRITE
 22027                                  DWRITE:
 22028 000036C0 E81600                  	CALL	DSKWRITE
 22029 000036C3 7413                    	jz	short dw_ret_label	; Carry clear (retz)
 22030                                  
 22031                                  ;hkn; SS override
 22032 000036C5 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 22033 000036CB E83A00                  	call	HARDERRRW
 22034 000036CE 3C01                    	CMP	AL,1		; Check for retry
 22035 000036D0 74EE                    	JZ	short DWRITE
 22036 000036D2 3C03                    	CMP	AL,3		; Check for FAIL
 22037 000036D4 F8                      	CLC
 22038 000036D5 7501                    	JNZ	short NO_CAR2 	; Ignore
 22039 000036D7 F9                      	STC
 22040                                  NO_CAR2:
 22041                                  dw_ret_label:
 22042 000036D8 C3                      	retn
 22043                                  
 22044                                  ;Break	<DSKWRITE -- PHYSICAL DISK WRITE>
 22045                                  ;---------------------------------------------------------------------------
 22046                                  ;
 22047                                  ; Procedure Name : DSKWRITE
 22048                                  ;
 22049                                  ; Inputs:
 22050                                  ;	DS:BX = Transfer addr
 22051                                  ;	CX = Number of sectors
 22052                                  ;	DX = Absolute record number	       (LOW)
 22053                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 22054                                  ;	ES:BP = Base of drive parameters
 22055                                  ; Function:
 22056                                  ;	Call BIOS to perform disk read
 22057                                  ; Outputs:
 22058                                  ;	DI = CX on entry
 22059                                  ;	CX = Number of sectors unsuccessfully transfered
 22060                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 22061                                  ;	Zero set if OK (from BIOS) (carry clear)
 22062                                  ;	Zero clear if error (carry clear)
 22063                                  ; SI Destroyed, others preserved
 22064                                  ;
 22065                                  ;----------------------------------------------------------------------------
 22066                                  
 22067                                  	;entry	DSKWRITE
 22068                                  DSKWRITE:
 22069 000036D9 51                      	PUSH	CX
 22070                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 22071 000036DA 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 22072                                  	;mov	al,[es:bp+1]
 22073 000036DE 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 22074 000036E2 53                      	PUSH	BX
 22075 000036E3 06                      	PUSH	ES
 22076 000036E4 E88C0F                  	call	SETWRITE
 22077                                  DODSKOP:
 22078 000036E7 8CD9                    	MOV	CX,DS		; Save DS
 22079 000036E9 1F                      	POP	DS		; DS:BP points to DPB
 22080 000036EA 1E                      	PUSH	DS
 22081                                  
 22082                                  	;lds	si,[ds:bp+13h] ; 04/05/2019
 22083 000036EB 3EC57613                	LDS	SI,[ds:BP+DPB.DRIVER_ADDR] ; 07/09/2018
 22084 000036EF E8CA0E                  	call	DEVIOCALL2
 22085                                  
 22086 000036F2 8ED9                    	MOV	DS,CX		; Restore DS
 22087 000036F4 07                      	POP	ES		; Restore ES
 22088 000036F5 5B                      	POP	BX
 22089                                  
 22090                                  ;hkn; SS override
 22091 000036F6 368B0E[6C03]            	MOV	CX,[SS:CALLSCNT] ; Number of sectors transferred
 22092 000036FB 5F                      	POP	DI
 22093 000036FC 29F9                    	SUB	CX,DI
 22094 000036FE F7D9                    	NEG	CX		; Number of sectors not transferred
 22095                                  
 22096                                  ;hkn; SS override
 22097 00003700 36A1[5D03]              	MOV	AX,[SS:DEVCALL_REQSTAT]
 22098                                  	;test	ax,8000h
 22099                                  	; 17/12/2022
 22100                                  	;test	ah,80h
 22101 00003704 F6C480                  	test	ah,(STERR>>8)
 22102                                  	;test	AX,STERR
 22103 00003707 C3                      	retn
 22104                                  
 22105                                  ;Break	<HardErrRW - map extended errors and call harderr>
 22106                                  ;---------------------------------------------------------------------------
 22107                                  ;
 22108                                  ; Procedure Name : HardErrRW
 22109                                  ;
 22110                                  ; Inputs:
 22111                                  ;	AX is error code from read or write
 22112                                  ;	Other registers set as per HARDERR
 22113                                  ; Function:
 22114                                  ;	Checks the error code for special extended
 22115                                  ;	errors and maps them if needed. Then invokes
 22116                                  ;	Harderr
 22117                                  ; Outputs:
 22118                                  ;	Of HARDERR
 22119                                  ; AX may be modified prior to call to HARDERR.
 22120                                  ; No other registers altered.
 22121                                  ;
 22122                                  ;---------------------------------------------------------------------------
 22123                                  
 22124                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22125                                  HARDERRRW:
 22126                                  	;cmp	al,0Fh
 22127 00003708 3C0F                    	CMP	AL,error_I24_wrong_disk
 22128 0000370A 7512                    	JNZ	short DO_ERR				; Nothing to do
 22129                                  
 22130                                  	; MSDOS 3.3
 22131                                  	;push	ds
 22132                                  	;push	si
 22133                                  	;lds	si,[ss:CALLVIDRW]
 22134                                  	;mov	[ss:EXTERRPT+2], ds
 22135                                  	;mov	[ss:EXTERRPT], si
 22136                                  	;pop	si
 22137                                  	;pop	ds
 22138                                  
 22139                                  	; MSDOS 6.0
 22140 0000370C 50                      	push	ax
 22141 0000370D 36A1[7003]              	mov	ax,[SS:CALLVIDRW]		; get ptr lo  ;smr;SS Override
 22142 00003711 36A3[2803]              	mov	[ss:EXTERRPT],ax		; set ext err ptr lo
 22143 00003715 36A1[7203]              	mov	ax,[SS:CALLVIDRW+2]		; get ptr hi from dev
 22144 00003719 36A3[2A03]              	mov	[ss:EXTERRPT+2],ax		; set ext err ptr hi
 22145 0000371D 58                      	pop	ax
 22146                                  DO_ERR:
 22147                                  	;;call	HARDERR
 22148                                  	;;retn
 22149                                  	; 16/12/2022
 22150                                  	; 10/06/2019
 22151 0000371E E93C1B                  	jmp	HARDERR	
 22152                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22153                                  	;call	HARDERR
 22154                                  	;retn
 22155                                  
 22156                                  ; 24/07/2018 - Retro DOS v3.0
 22157                                  
 22158                                  ;Break	<SETUP -- SETUP A DISK READ OR WRITE FROM USER>
 22159                                  ;----------------------------------------------------------------------------
 22160                                  ;
 22161                                  ; Procedure Name : SETUP
 22162                                  ;
 22163                                  ; Inputs:
 22164                                  ;	ES:DI point to SFT (value also in THISSFT)
 22165                                  ;	DMAAdd contains transfer address
 22166                                  ;	CX = Byte count
 22167                                  ;	DS = DOSDATA
 22168                                  ;   WARNING Stack must be clean, two ret addrs on stack, 1st of caller,
 22169                                  ;		2nd of caller of caller.
 22170                                  ; Outputs:
 22171                                  ;	    CX = byte count
 22172                                  ;	    [THISDPB] = Base of drive parameters if file
 22173                                  ;		      = Pointer to device header if device or NET
 22174                                  ;	    ES:DI Points to SFT
 22175                                  ;	    [NEXTADD] = Displacement of disk transfer within segment
 22176                                  ;	    [TRANS] = 0 (No transfers yet)
 22177                                  ;	    BytPos = Byte position in file
 22178                                  ;
 22179                                  ;	The following fields are relevant to local files (not devices) only:
 22180                                  ;
 22181                                  ;	    SecPos = Position of first sector (local files only)
 22182                                  ;	    [BYTSECPOS] = Byte position in first sector (local files only)
 22183                                  ;	    [CLUSNUM] = First cluster (local files only)
 22184                                  ;	    [SECCLUSPOS] = Sector within first cluster (local files only)
 22185                                  ;	    [THISDRV] = Physical unit number (local files only)
 22186                                  ;
 22187                                  ;      RETURNS ONE LEVEL UP WITH:
 22188                                  ;	   CX = 0
 22189                                  ;	   CARRY = Clear
 22190                                  ;	IF AN ERROR IS DETECTED
 22191                                  ; All other registers destroyed
 22192                                  ;----------------------------------------------------------------------------
 22193                                  
 22194                                  ;hkn; called from disk.asm. DS has been set up to DOSDATA.
 22195                                  
 22196                                  ; DOSCODE:770Bh (MSDOS 6.21, MSDOS.SYS)
 22197                                  
 22198                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22199                                  ; DOSCODE:76F7h (MSDOS 5.0, MSDOS.SYS)
 22200                                  
 22201                                  SETUP:
 22202                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 411Bh
 22203                                  
 22204                                  	;lds 	si,[es:di+7]
 22205 00003721 26C57507                	LDS	SI,[ES:DI+SF_ENTRY.sf_devptr]
 22206                                  
 22207                                  ;hkn; SS override
 22208 00003725 368C1E[8C05]            	MOV	[SS:THISDPB+2],DS
 22209                                  
 22210                                  ;hkn; SS is DOSDATA
 22211 0000372A 16                      	push	ss
 22212 0000372B 1F                      	pop	ds
 22213                                  
 22214 0000372C 8936[8A05]              	MOV	[THISDPB],SI
 22215                                  
 22216 00003730 8B1E[2C03]              	MOV	BX,[DMAADD]
 22217 00003734 891E[B805]              	MOV	[NEXTADD],BX		;Set NEXTADD to start of Xaddr
 22218 00003738 C606[7405]00            	MOV	BYTE [TRANS],0		;No transferes
 22219                                  	;mov	ax,[es:di+15h]
 22220 0000373D 268B4515                	MOV	AX,[ES:DI+SF_ENTRY.sf_position]
 22221                                  	;mov	dx,[es:di+17h]
 22222 00003741 268B5517                	MOV	DX,[ES:DI+SF_ENTRY.sf_position+2]
 22223 00003745 8916[D005]              	MOV	[BYTPOS+2],DX		;Set it
 22224 00003749 A3[CE05]                	MOV	[BYTPOS],AX
 22225                                  	;test	word [es:di+5],8080h
 22226 0000374C 26F745058080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet+devid_device
 22227 00003752 753C                    	JNZ	short NOSETSTUFF	;Following not done on devs or NET
 22228 00003754 06                      	PUSH	ES
 22229 00003755 C42E[8A05]              	LES	BP,[THISDPB]		;Point at the DPB
 22230                                  
 22231                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22232                                  	;;mov	bl,[es:bp+0]
 22233                                  	;MOV	BL,[ES:BP+DPB.DRIVE]
 22234                                  	; 05/12/2022
 22235 00003759 268A5E00                	mov	bl,[es:bp]
 22236                                  	
 22237 0000375D 881E[7605]              	MOV	[THISDRV],BL		;Set THISDRV
 22238                                  	;mov	bx,[es:bp+2]
 22239 00003761 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 22240                                  
 22241                                  	;; MSDOS 3.3
 22242                                  	;cmp	dx,bx
 22243                                  	;jnb	short EOFERR
 22244                                  	;div	bx
 22245                                  	;mov	[SECPOS],ax
 22246                                  	;mov	[BYTSECPOS],dx
 22247                                  	;mov	dx,ax
 22248                                  	;;and	al,[es:bp+4]
 22249                                  	;AND	AL,[ES:BP+DPB.CLUSTER_MASK]
 22250                                  	;mov	[SECCLUSPOS],al
 22251                                  	;mov	ax,cx
 22252                                  	;;mov	cl,[es:bp+5]
 22253                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 22254                                  	;shr	dx,cl
 22255                                  	;mov	[CLUSNUM],dx
 22256                                  	;pop	es
 22257                                  	;mov	cx,ax
 22258                                  
 22259                                  	; 04/05/2019 - Retro DOS v4.0
 22260                                  
 22261                                  	; MSDOS 6.0
 22262                                  ;M039: Optimized this section.
 22263 00003765 51                              PUSH    CX			;SHR32 and DIV32 use CX.
 22264 00003766 E83105                  	call	DIV32			;DX:AX/BX = CX:AX + DX (rem)
 22265 00003769 8916[CC05]              	MOV	[BYTSECPOS],DX
 22266 0000376D A3[C405]                	MOV	[SECPOS],AX
 22267 00003770 890E[C605]              	MOV	[SECPOS+2],CX
 22268 00003774 89CA                    	MOV	DX,CX
 22269                                  
 22270 00003776 89C3                    	MOV	BX,AX
 22271                                  	;and	bl,[es:bp+4]
 22272 00003778 26225E04                	AND	BL,[ES:BP+DPB.CLUSTER_MASK]
 22273 0000377C 881E[7305]              	MOV	[SECCLUSPOS],BL
 22274                                  
 22275 00003780 E83E05                  	call	SHR32			;(DX:AX SHR dpb_cluster_shift)
 22276 00003783 59                      	POP	CX			;CX = byte count.
 22277 00003784 751F                    	JNZ	short EOFERR		;cluster number above 64k
 22278                                  	;cmp	ax,[es:bp+0Dh]
 22279 00003786 263B460D                	CMP	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  if > disk size ;AN000;
 22280 0000378A 7719                    	JA	short EOFERR		   ;>32mb  then EOF       ;AN000;
 22281                                  
 22282 0000378C A3[BC05]                	MOV	[CLUSNUM],AX
 22283 0000378F 07                      	POP	ES			; ES:DI point to SFT
 22284                                  ;M039
 22285                                  
 22286                                  NOSETSTUFF:
 22287 00003790 89C8                    	MOV	AX,CX		; AX = Byte count.
 22288 00003792 0306[2C03]              	ADD	AX,[DMAADD]	; See if it will fit in one segment
 22289 00003796 730C                    	JNC	short setup_OK	; Must be less than 64
 22290 00003798 A1[2C03]                	MOV	AX,[DMAADD]
 22291 0000379B F7D8                    	NEG	AX		; Amount of room left in segment (know
 22292                                  				;    less than 64K since max value of CX
 22293                                  				;    is FFFF).
 22294 0000379D 7501                    	JNZ	short NoDec
 22295 0000379F 48                      	DEC	AX
 22296                                  NoDec:
 22297 000037A0 89C1                    	MOV	CX,AX		; Can do this much
 22298 000037A2 E304                    	JCXZ	NOROOM		; Silly user gave Xaddr of FFFF in segment
 22299                                  setup_OK:
 22300 000037A4 C3                      	retn
 22301                                  
 22302                                  EOFERR:
 22303 000037A5 07                      	POP	ES		; ES:DI point to SFT
 22304 000037A6 31C9                    	XOR	CX,CX		; No bytes read
 22305                                  ;;;;;;;;;;; 7/18/86
 22306                                  	; MSDOS 3.3
 22307                                  	;MOV	BYTE [DISK_FULL],1 ; set disk full flag
 22308                                  ;;;;;;;;;;;
 22309                                  NOROOM:
 22310 000037A8 5B                      	POP	BX		; Kill return address
 22311 000037A9 F8                      	CLC
 22312 000037AA C3                      	retn			; RETURN TO CALLER OF CALLER
 22313                                  
 22314                                  ;Break	<BREAKDOWN -- CUT A USER READ OR WRITE INTO PIECES>
 22315                                  ;---------------------------------------------------------------------------
 22316                                  ;
 22317                                  ; Procedure Name : BREAKDOWN
 22318                                  ;
 22319                                  ; Inputs:
 22320                                  ;	CX = Length of disk transfer in bytes
 22321                                  ;	ES:BP = Base of drive parameters
 22322                                  ;	[BYTSECPOS] = Byte position within first sector
 22323                                  ;	DS = DOSDATA
 22324                                  ; Outputs:
 22325                                  ;	[BYTCNT1] = Bytes to transfer in first sector
 22326                                  ;	[SECCNT] = No. of whole sectors to transfer
 22327                                  ;	[BYTCNT2] = Bytes to transfer in last sector
 22328                                  ; AX, BX, DX destroyed. No other registers affected.
 22329                                  ;---------------------------------------------------------------------------
 22330                                  
 22331                                  BREAKDOWN:
 22332 000037AB A1[CC05]                	MOV	AX,[BYTSECPOS]
 22333 000037AE 89CB                    	MOV	BX,CX
 22334 000037B0 09C0                    	OR	AX,AX
 22335 000037B2 740E                    	JZ	short SAVFIR	; Partial first sector?
 22336                                  	;sub	ax,[es:bp+2]
 22337 000037B4 262B4602                	SUB	AX,[ES:BP+DPB.SECTOR_SIZE]
 22338 000037B8 F7D8                    	NEG	AX		; Max number of bytes left in first sector
 22339 000037BA 29C3                    	SUB	BX,AX		; Subtract from total length
 22340 000037BC 7304                    	JAE	short SAVFIR
 22341 000037BE 01D8                    	ADD	AX,BX		; Don't use all of the rest of the sector
 22342 000037C0 31DB                    	XOR	BX,BX		; And no bytes are left
 22343                                  SAVFIR:
 22344 000037C2 A3[D205]                	MOV	[BYTCNT1],AX
 22345 000037C5 89D8                    	MOV	AX,BX
 22346 000037C7 31D2                    	XOR	DX,DX
 22347                                  	;div	word [ES:BP+2]
 22348 000037C9 26F77602                	DIV	word [ES:BP+DPB.SECTOR_SIZE]  ; How many whole sectors?
 22349 000037CD A3[D605]                	MOV	[SECCNT],AX
 22350 000037D0 8916[D405]              	MOV	[BYTCNT2],DX	; Bytes remaining for last sector
 22351                                  	; MSDOS 3.3
 22352                                  	;OR	DX,[BYTCNT1]	; SMR ONESECTORFIX BUGBUG
 22353                                  	;retnz			; NOT (BYTCNT1 = BYTCNT2 = 0)
 22354                                  	;CMP	AX,1
 22355                                  	;retnz
 22356                                  	;MOV	AX,[ES:BP+DPB.SECTOR_SIZE] ; Buffer EXACT one sector I/O
 22357                                  	;MOV	[BYTCNT2],AX
 22358                                  	;MOV	[SECCNT],DX	; DX = 0
 22359                                  _RET45:
 22360 000037D4 C3                      	retn
 22361                                  
 22362                                  ; DOSCODE:77BFh (MSDOS 6.21, MSDOS.SYS)
 22363                                  
 22364                                  ;----------------------------------------------------------------------------
 22365                                  ;
 22366                                  ; Procedure Name : READ_LOCK_VIOLATION
 22367                                  ;
 22368                                  ; ES:DI points to SFT. This entry used by NET_READ
 22369                                  ; Carry set if to return error (CX=0,AX=error_sharing_violation).
 22370                                  ; Else do retrys.
 22371                                  ; ES:DI,DS,CX preserved
 22372                                  ;
 22373                                  ;----------------------------------------------------------------------------
 22374                                  
 22375                                  READ_LOCK_VIOLATION:
 22376 000037D5 C606[7505]00            	MOV	byte [READOP],0
 22377                                  ERR_ON_CHECK:
 22378                                  	;;test	word [es:di+2],8000h
 22379                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 22380                                  	;JNZ	short HARD_ERR
 22381                                  
 22382                                  	; 04/05/2019
 22383                                  	;test	byte [es:di+3],80h
 22384 000037DA 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 22385 000037DF 7508                    	JNZ	short HARD_ERR
 22386                                  
 22387                                  	;PUSH	CX
 22388                                  	;;mov	cl,[es:di+2]
 22389                                  	;MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 22390                                  	;;and	cl,0F0h
 22391                                  	;AND	CL,SHARING_MASK
 22392                                  	;;cmp	cl,0
 22393                                  	;CMP	CL,SHARING_COMPAT
 22394                                  	;POP	CX
 22395                                  	;JNE	short NO_HARD_ERR
 22396                                  	; 21/09/2023
 22397 000037E1 268A4502                	mov	al,[ES:DI+SF_ENTRY.sf_mode]
 22398 000037E5 24F0                    	and	al,SHARING_MASK
 22399                                  	;cmp	al,SHARING_COMPAT
 22400                                  	;jne	short NO_HARD_ERR
 22401 000037E7 7505                    	jnz	short NO_HARD_ERR
 22402                                  HARD_ERR:
 22403 000037E9 E87F3A                  	call	LOCK_VIOLATION
 22404 000037EC 73E6                    	jnc	short _RET45		; User wants Retrys
 22405                                  NO_HARD_ERR:
 22406 000037EE 31C9                    	XOR	CX,CX			;No bytes transferred
 22407                                  	;mov	ax,21h
 22408 000037F0 B82100                  	MOV	AX,error_lock_violation
 22409 000037F3 F9                      	STC
 22410                                  RET3:		; 06/02/2024
 22411 000037F4 C3                      	retn
 22412                                  
 22413                                  ;----------------------------------------------------------------------------
 22414                                  ;
 22415                                  ; Procedure Name : WRITE_LOCK_VIOLATION
 22416                                  ;
 22417                                  ; Same as READ_LOCK_VIOLATION except for READOP.
 22418                                  ; This entry used by NET_WRITE
 22419                                  ;
 22420                                  ;----------------------------------------------------------------------------
 22421                                  
 22422                                  WRITE_LOCK_VIOLATION:
 22423 000037F5 C606[7505]01            	MOV	byte [READOP],1
 22424 000037FA EBDE                    	JMP	short ERR_ON_CHECK
 22425                                  
 22426                                  ; 04/05/2019 - Retro DOS v4.0
 22427                                  
 22428                                  ; DOSCODE:77ECh (MSDOS 6.21, MSDOS.SYS)
 22429                                  
 22430                                  ;Break	<DISKREAD -- PERFORM USER DISK READ>
 22431                                  ;----------------------------------------------------------------------------
 22432                                  ;
 22433                                  ; Procedure Name : DISKREAD
 22434                                  ;
 22435                                  ; Inputs:
 22436                                  ;	Outputs of SETUP
 22437                                  ; Function:
 22438                                  ;	Perform disk read
 22439                                  ; Outputs:
 22440                                  ;    Carry clear
 22441                                  ;	CX = No. of bytes read
 22442                                  ;	ES:DI point to SFT
 22443                                  ;	SFT offset and cluster pointers updated
 22444                                  ;    Carry set
 22445                                  ;	CX = 0
 22446                                  ;	ES:DI point to SFT
 22447                                  ;	AX has error code
 22448                                  ;----------------------------------------------------------------------------
 22449                                  
 22450                                  ;hkn; called from disk.asm. DS already set up.
 22451                                  
 22452                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22453                                  ; DOSCODE:77D8h (MSDOS 5.0, MSDOS.SYS)
 22454                                  
 22455                                  DISKREAD:
 22456                                  	;mov	ax,[es:di+11h]
 22457 000037FC 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 22458                                  	;mov	bx,[es:di+13h]
 22459 00003800 268B5D13                	MOV	BX,[ES:DI+SF_ENTRY.sf_size+2]
 22460 00003804 2B06[CE05]              	SUB	AX,[BYTPOS]
 22461 00003808 1B1E[D005]              	SBB	BX,[BYTPOS+2]
 22462 0000380C 7223                    	JB	short RDERR		;Read starts past EOF
 22463 0000380E 750A                    	JNZ	short ENUF		;More than 64k to EOF
 22464 00003810 09C0                    	OR	AX,AX
 22465 00003812 741D                    	JZ	short RDERR		;Read starts at EOF
 22466 00003814 39C8                    	CMP	AX,CX
 22467 00003816 7302                    	JAE	short ENUF		;I/O fits
 22468 00003818 89C1                    	MOV	CX,AX			;Limit read to up til EOF
 22469                                  ENUF:
 22470                                  	; MSDOS 3.3
 22471                                  	;test	byte [es:di+4],8
 22472                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 22473                                  	;jnz	short SET_ACC_ERR
 22474                                  	;call	LOCK_CHECK
 22475                                  	;jnb	short _READ_OK
 22476                                  	;call	READ_LOCK_VIOLATION
 22477                                  	;jnb	short ENUF
 22478                                  	;retn
 22479                                  
 22480                                  	; MSDOS 6.0
 22481 0000381A E87CFE                  	call	CHECK_READ_LOCK		;IFS. check read lock	;AN000;
 22482                                  	;JNC	short _READ_OK 		; There are no locks
 22483                                  	;retn
 22484                                  	; 06/02/2024
 22485 0000381D 72D5                    	jc	short RET3
 22486                                  
 22487                                  _READ_OK:
 22488 0000381F C42E[8A05]              	LES	BP,[THISDPB]
 22489 00003823 E885FF                  	CALL	BREAKDOWN
 22490 00003826 8B0E[BC05]              	MOV	CX,[CLUSNUM]
 22491                                  
 22492 0000382A E87913                  	call	FNDCLUS
 22493                                       	; MSDOS 6.0			;M022 conditional removed here
 22494 0000382D 720C                    	JC	short SET_ACC_ERR_DS	; fix to take care of I24 fail
 22495                                  					; migrated from 330a - HKN
 22496                                  	;OR	CX,CX
 22497                                  	;JZ	short SKIPERR
 22498                                  	; 06/02/2024
 22499 0000382F E313                    	jcxz	SKIPERR
 22500                                  
 22501                                  RDERR:
 22502 00003831 B40E                    	MOV	AH,0EH			;MS. read/data/fail ;AN000;
 22503 00003833 E92102                  	jmp	WRTERR22
 22504                                  
 22505                                  ;RDLASTJ: 
 22506                                  	;JMP	RDLAST                  ;M039
 22507                                  
 22508                                  SETSFTJ2: 
 22509 00003836 E99600                  	JMP	SETSFT
 22510                                  
 22511                                  CANOT_READ:
 22512                                  	; MSDOS 3.3
 22513                                  	;POP	CX		;M039.
 22514                                  	; MSDOS 3.3 & MSDOS 6.0
 22515 00003839 59                      	POP	CX              ;Clean stack.
 22516 0000383A 5B                      	POP	BX
 22517                                  
 22518                                  	;entry	SET_ACC_ERR_DS
 22519                                  SET_ACC_ERR_DS:
 22520                                  
 22521                                  ;hkn; SS is DOSDATA
 22522                                  	;Context DS
 22523 0000383B 16                      	push	ss
 22524 0000383C 1F                      	pop	ds
 22525                                  
 22526                                  	;entry	SET_ACC_ERR
 22527                                  SET_ACC_ERR:
 22528 0000383D 31C9                    	XOR	CX,CX
 22529                                  	;mov	ax,5
 22530 0000383F B80500                  	MOV	AX,error_access_denied
 22531 00003842 F9                      	STC
 22532 00003843 C3                      	retn
 22533                                  
 22534                                  SKIPERR:
 22535 00003844 8916[BA05]              	MOV	[LASTPOS],DX
 22536 00003848 891E[BC05]              	MOV	[CLUSNUM],BX
 22537 0000384C 833E[D205]00            	CMP	word [BYTCNT1],0
 22538 00003851 7405                    	JZ	short RDMID
 22539                                  
 22540 00003853 E8C613                  	call	BUFRD
 22541 00003856 72E3                    	JC	short SET_ACC_ERR_DS
 22542                                  
 22543                                  RDMID:
 22544 00003858 833E[D605]00            	CMP	word [SECCNT],0
 22545                                  	;JZ	RDLAST ; 10/08/2018
 22546 0000385D 7453                    	jz	short RDLAST
 22547                                  
 22548 0000385F E84F14                  	call	NEXTSEC
 22549 00003862 72D2                    	JC	short SETSFTJ2
 22550                                  
 22551 00003864 C606[7405]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 22552                                  ONSEC:
 22553 00003869 8A16[7305]              	MOV	DL,[SECCLUSPOS]	; (dx/DL = Extent start) ((dh = ?))
 22554 0000386D 8B0E[D605]              	MOV	CX,[SECCNT]
 22555 00003871 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 22556                                  RDLP:
 22557 00003875 E86A14                  	call	OPTIMIZE
 22558 00003878 72C1                    	JC	short SET_ACC_ERR_DS
 22559                                  
 22560 0000387A 57                      	PUSH	DI                      ;DI = Next physical cluster.
 22561 0000387B 50                      	PUSH	AX                      ;AX = # of sectors remaining.
 22562 0000387C 53                      	PUSH	BX			;[DMAADD+2]:BX = Transfer address.
 22563                                  	;mov	byte [ALLOWED],38h
 22564 0000387D C606[4B03]38            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 22565 00003882 8E1E[2E03]              	MOV	DS,[DMAADD+2]
 22566                                  
 22567 00003886 52                      	PUSH	DX                      ;[HIGH_SECTOR]:DX = phys. sector #.
 22568 00003887 51                      	PUSH	CX                      ;CX = # of contiguous sectors to read.
 22569                                  
 22570                                  	; 04/05/2019 - Retro DOS v4.0
 22571                                  
 22572                                  	; MSDOS 6.0
 22573 00003888 E80D22                  	call	SET_RQ_SC_PARMS		;LB. do this for SC ;AN000;
 22574                                  
 22575                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22576 0000388B E8D2FD                  	call	DREAD
 22577                                  
 22578                                  	; MSDOS 3.3 
 22579                                  	;pop	bx
 22580                                  	;pop	dx
 22581                                  	;jc	short CANOT_READ
 22582                                  	;add	bx,dx	; (bx = Extent end)
 22583                                  	;mov	al,[es:bp] ; mov al,[es:bp+0]
 22584                                  	;;mov	al,[ES:BP+DPB.DRIVE] 
 22585                                  	;call	SETVISIT
 22586                                  	; ->***
 22587                                  ;M039
 22588                                  	; MSDOS 6.0 
 22589 0000388E 59                      	pop	cx
 22590 0000388F 5A                      	pop	dx
 22591 00003890 368F06[0C06]            	pop	WORD [ss:TEMP_VAR]
 22592 00003895 72A2                    	jc	short CANOT_READ
 22593                                  
 22594 00003897 368C1E[0E06]            	mov	[ss:TEMP_VAR2],ds
 22595                                  
 22596                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22597                                  ;            sectors, also termed an "Extent".)
 22598                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22599                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22600                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22601                                  ;
 22602                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
 22603                                  ;	buffers must be "read" into the transfer memory block, so that the
 22604                                  ;       transfer memory reflects the most recent data.
 22605                                  
 22606 0000389C E85E00                  	call	DskRdBufScan
 22607                                  
 22608                                  	;Context DS
 22609 0000389F 16                      	push	ss
 22610 000038A0 1F                      	pop	ds
 22611                                          
 22612 000038A1 59                      	pop	cx
 22613 000038A2 5B                              pop	bx
 22614                                  
 22615                                  ;       CX = # of sector remaining.
 22616                                  ;       BX = Next physical cluster.
 22617                                  
 22618                                  ;M039
 22619                                  
 22620                                  ;;;;;;;;
 22621                                  ;	; 25/07/2018 - Retro DOS v3.0
 22622                                  ;	; ***->
 22623                                  ;	; MSDOS 3.3
 22624                                  ;	; IBMDOS.COM (1987) - Offset 42BDh
 22625                                  ;bufq:
 22626                                  ;;	DX = Extent start.
 22627                                  ;;	BX = Extent end.
 22628                                  ;;	 AL = Drive #.
 22629                                  ;;     DS:DI-> 1st buffer in queue.
 22630                                  ;
 22631                                  ;	;or	byte [di+5],20h
 22632                                  ;	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 22633                                  ;	;cmp	al,[di+4]	
 22634                                  ;	cmp	al,[DI+BUFFINFO.buf_ID]
 22635                                  ;	jnz	short bufq3
 22636                                  ;	;cmp	[di+6],dx
 22637                                  ;	cmp	[DI+BUFFINFO.buf_sector],dx
 22638                                  ;	jb	short bufq3	; Jump if Extent start > buffer sector.
 22639                                  ;	;cmp	[di+6],bx
 22640                                  ;	cmp	[DI+BUFFINFO.buf_sector],bx
 22641                                  ;	jnb	short bufq3	; Jump if Extent end >= buffer sector.
 22642                                  ;	
 22643                                  ;	; Buffer sector is in the Extent (contiguous sectors to read)
 22644                                  ;
 22645                                  ;;      Buffer's sector is in Extent: if it is dirty, copy its contents to
 22646                                  ;;      transfer memory; otherwise, just re-position it in the buffer queue
 22647                                  ;;      as MRU (Most Recently Used).
 22648                                  ;
 22649                                  ;	;test	byte [di+5],40h
 22650                                  ;	test	byte [DI+BUFFINFO.buf_flags],buf_dirty ; Bit 6 = dirty flag
 22651                                  ;	jz	short bufq2	; clear buffer, check the next buff sec
 22652                                  ;	pop	ax ; transfer address
 22653                                  ;	push	ax
 22654                                  ;	push	di
 22655                                  ;	push	dx
 22656                                  ;	;sub	dx,[di+6]
 22657                                  ;	sub	dx,[DI+BUFFINFO.buf_sector]
 22658                                  ;	neg	dx
 22659                                  ;
 22660                                  ;;      DX = offset (in sectors) of buffer sector within Transfer memory
 22661                                  ;;           block.
 22662                                  ;
 22663                                  ;	mov	si,di
 22664                                  ;	mov	di,ax
 22665                                  ;	mov	ax,dx
 22666                                  ;	;mov	cx,[es:bp+6]	
 22667                                  ;	mov     cx,[ES:BP+DPB.SECTOR_SIZE] ; CX = sector size (in bytes).
 22668                                  ;	mul	cx
 22669                                  ;	add	di,ax
 22670                                  ;
 22671                                  ;	lea	si,[si+16]
 22672                                  ;	lea	si,[SI+BUFINSIZ] ;DS:SI -> buffer data.
 22673                                  ;	shr	cx,1
 22674                                  ;	push	es
 22675                                  ;	mov	es,[SS:DMAADD+2]
 22676                                  ;
 22677                                  ;;      CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22678                                  ;;      DS:SI-> Buffer sector data.
 22679                                  ;;      ES:DI-> Destination within Transfer memory block.
 22680                                  ;
 22681                                  ;	rep	movsw			;Copy buffer sector to Transfer memory
 22682                                  ;	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22683                                  ;	;rep	movsb                   ;Copy last byte.
 22684                                  ;	jnc	short bufq1
 22685                                  ;	movsb
 22686                                  ;bufq1:
 22687                                  ;	pop	es
 22688                                  ;	pop	dx
 22689                                  ;	pop	di
 22690                                  ;	mov	al,[es:bp]  ; mov al,[es:bp+0]
 22691                                  ;	;mov	al,[ES:BP+DPB.DRIVE]
 22692                                  ;bufq2:
 22693                                  ;	call	SCANPLACE
 22694                                  ;bufq3:
 22695                                  ;	call	SKIPVISIT
 22696                                  ;	jnz	short bufq
 22697                                  ;	
 22698                                  ;	push	ss
 22699                                  ;	pop	ds
 22700                                  ;	pop	cx
 22701                                  ;	pop	cx
 22702                                  ;	pop	bx	
 22703                                  ;bufq4:
 22704                                  ;;;;;;;
 22705 000038A3 E30D                    	JCXZ	RDLAST
 22706                                  
 22707 000038A5 E8D81B                  	call	IsEOF			; test for eof on fat size
 22708 000038A8 7325                    	JAE	short SETSFT
 22709                                  
 22710 000038AA B200                    	MOV	DL,0
 22711 000038AC FF06[BA05]              	INC	word [LASTPOS]		; We'll be using next cluster
 22712 000038B0 EBC3                    	JMP	short RDLP ; 19/05/2019
 22713                                  
 22714                                  RDLAST:
 22715 000038B2 A1[D405]                	MOV	AX,[BYTCNT2]
 22716 000038B5 09C0                    	OR	AX,AX
 22717 000038B7 7416                    	JZ	short SETSFT
 22718 000038B9 A3[D205]                	MOV	[BYTCNT1],AX
 22719                                  
 22720 000038BC E8F213                  	call	NEXTSEC
 22721 000038BF 720E                    	JC	short SETSFT
 22722                                  
 22723 000038C1 C706[CC05]0000          	MOV	word [BYTSECPOS],0
 22724 000038C7 E85213                  	call	BUFRD
 22725                                  	; 10/08/2018
 22726                                  
 22727 000038CA 7303                    	JNC	short SETSFT
 22728 000038CC E96CFF                  	JMP	SET_ACC_ERR_DS
 22729                                  
 22730                                  ;------------------------------------------------------------------------------
 22731                                  ;
 22732                                  ; Procedure Name : SETSFT
 22733                                  ; Inputs:
 22734                                  ;	[NEXTADD],[CLUSNUM],[LASTPOS] set to determine transfer size
 22735                                  ;		and set cluster fields
 22736                                  ; Function:
 22737                                  ;	Update [THISSFT] based on the transfer
 22738                                  ; Outputs:
 22739                                  ;	sf_position, sf_lstclus, and sf_cluspos updated
 22740                                  ;	ES:DI points to [THISSFT]
 22741                                  ;	CX No. of bytes transferred
 22742                                  ;	Carry clear
 22743                                  ;
 22744                                  ;----------------------------------------------------------------------------
 22745                                  
 22746                                  	;entry	SETSFT
 22747                                  
 22748                                  ; 26/07/2018 - Retro DOS v3.0
 22749                                  SETSFT:
 22750 000038CF C43E[9E05]              	LES	DI,[THISSFT]
 22751                                  
 22752                                  ; Same as SETSFT except ES:DI already points to SFT
 22753                                  	;entry	SETCLUS
 22754                                  SETCLUS:	
 22755 000038D3 8B0E[B805]              	MOV	CX,[NEXTADD]
 22756 000038D7 2B0E[2C03]              	SUB	CX,[DMAADD]		; Number of bytes transfered
 22757                                  	;;test	word [es:di+5],80h
 22758                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 22759                                  	;JNZ	short ADDREC		; don't set clusters if device
 22760                                  
 22761                                  	; 04/05/2019 - Retro DOS v4.0
 22762                                  	;test	byte [es:di+5],80h
 22763 000038DB 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 22764 000038E0 750E                    	JNZ	short ADDREC		; don't set clusters if device
 22765                                  
 22766 000038E2 A1[BC05]                	MOV	AX,[CLUSNUM]
 22767                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 22768                                  	;mov	[es:di+35h],ax ; MSDOS 6.0 (& MSDOS 6.21)
 22769 000038E5 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 22770 000038E9 A1[BA05]                	MOV	AX,[LASTPOS]
 22771                                  	;mov	[es:di+19h],ax
 22772 000038EC 26894519                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],AX
 22773                                  
 22774                                  ;----------------------------------------------------------------------------
 22775                                  ;
 22776                                  ; Procedure : AddRec
 22777                                  ; Inputs:
 22778                                  ;	ES:DI points to SFT
 22779                                  ;	CX is No. Bytes transferred
 22780                                  ; Function:
 22781                                  ;	Update the SFT offset based on the transfer
 22782                                  ; Outputs:
 22783                                  ;	sf_position updated to point to first byte after transfer
 22784                                  ;	ES:DI points to SFT
 22785                                  ;	CX No. of bytes transferred
 22786                                  ;	Carry clear
 22787                                  ;----------------------------------------------------------------------------
 22788                                  
 22789                                  	;entry	AddRec
 22790                                  ADDREC:
 22791 000038F0 E309                    	JCXZ	RET28		; If no records read,  don't change position
 22792                                  	;add	[es:di+15h],cx
 22793 000038F2 26014D15                	ADD	[ES:DI+SF_ENTRY.sf_position],CX  ; Update current position
 22794                                  	;adc	word [es:di+17h], 0
 22795 000038F6 2683551700              	ADC	WORD [ES:DI+SF_ENTRY.sf_position+2],0
 22796                                  RET28:	
 22797 000038FB F8                      	CLC
 22798 000038FC C3                      	retn
 22799                                  
 22800                                  ; 25/07/2018
 22801                                  ; MSDOS 6.0
 22802                                  ;Break   <DskRdBufScan -- Disk Read Buffer Scan>
 22803                                  ;----------------------------------------------------------------------------
 22804                                  ;
 22805                                  ; Procedure Name : DskRdBufScan
 22806                                  ;
 22807                                  ; Inputs:
 22808                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22809                                  ;            sectors, also termed an "Extent".)
 22810                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22811                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22812                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22813                                  ;
 22814                                  ; Function:
 22815                                  ;	The Buffer Queue is scanned: the contents of any dirty buffers are
 22816                                  ;	"read" into the transfer memory block, so that the transfer memory
 22817                                  ;	reflects the most recent data.
 22818                                  ;
 22819                                  ; Outputs:
 22820                                  ;       Transfer memory updated as required.
 22821                                  ;
 22822                                  ; Uses:
 22823                                  ;       DS,AX,BX,CX,SI,DI destroyed.
 22824                                  ;       SS override for all global variables.
 22825                                  ;
 22826                                  ; Notes:
 22827                                  ;       FIRST_BUFF_ADDR is set-up to contain the LAST buffer to check, rather
 22828                                  ;	than the FIRST.
 22829                                  ;----------------------------------------------------------------------------
 22830                                  ;M039: Created
 22831                                  
 22832                                  ; 04/05/2019 - Retro DOS v4.0
 22833                                  ; DOSCODE:78F0h (MSDOS 6.21, MSDOS.SYS)
 22834                                  
 22835                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22836                                  ; DOSCODE:78DCh (MSDOS 5.0, MSDOS.SYS) 
 22837                                  
 22838                                  ;procedure DskRdBufScan,NEAR
 22839                                  ;
 22840                                  ;ASSUME  DS:NOTHING
 22841                                  
 22842                                  DskRdBufScan:
 22843 000038FD 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ; Any dirty buffers?
 22844 00003903 743C                    	je	short bufx		     ; -no, skip all work.
 22845                                  
 22846 00003905 368B1E[0706]            	mov     bx,[ss:HIGH_SECTOR]
 22847 0000390A 89DE                    	mov     si,bx
 22848 0000390C 01D1                    	add     cx,dx
 22849 0000390E 83D600                  	adc     si,0
 22850                                  
 22851 00003911 E81C1F                  	call	GETCURHEAD		;DS:DI -> 1st buf in queue.
 22852                                  	;mov	ax,[di+2]
 22853 00003914 8B4502                  	mov     ax,[di+BUFFINFO.buf_prev]
 22854 00003917 36A3[BB0E]              	mov     [ss:FIRST_BUFF_ADDR],ax
 22855                                  		
 22856                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22857                                  	;;mov	al,[es:bp+0]
 22858                                  	;mov	al,[es:bp+DPB.DRIVE]
 22859                                  	; 15/12/2022
 22860 0000391B 268A4600                	mov	al,[es:bp]
 22861                                  
 22862                                  ;       BX:DX = Extent start.
 22863                                  ;       SI:CX = Extent end + 1.
 22864                                  ;          AL = Drive #.
 22865                                  ;       DS:DI-> 1st buffer in queue.
 22866                                  ;[FIRST_BUFF_ADDR] = Address offset of last buffer in queue.
 22867                                  
 22868                                  bufq:	
 22869                                  	;cmp	al,[di+4]
 22870 0000391F 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 22871 00003922 7514                    	jne	short bufq1        	;  -no, jump.
 22872                                  
 22873                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22874                                  ;       ja	short bufq1		;Jump if Extent start > buffer sector.
 22875                                  
 22876                                  	;cmp	bx,[di+8]
 22877 00003924 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 22878 00003927 7503                    	jne	short bufq01
 22879                                  	;cmp	dx,[di+6]
 22880 00003929 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 22881                                  bufq01:
 22882 0000392C 770A                    	ja	short bufq1
 22883                                  
 22884                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22885                                  ;       ja	short bufq2		;Jump if Extent end >= buffer sector.
 22886                                  
 22887                                  	;cmp	si,[di+8]
 22888 0000392E 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 22889 00003931 7503                    	jne	short bufq02
 22890                                  	;cmp	cx,[di+6]
 22891 00003933 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 22892                                  bufq02:
 22893 00003936 770A                    	ja	short bufq2
 22894                                  bufq1:	
 22895 00003938 363B3E[BB0E]            	cmp     di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 22896 0000393D 8B3D                    	mov	di,[di]
 22897                                  	;mov	di,[di+BUFFINFO.buf_next] ; Set-up for next buffer.
 22898 0000393F 75DE                    	jne	short bufq		; -no, do next buffer
 22899                                  bufx:
 22900 00003941 C3                      	retn				;Exit.
 22901                                  
 22902                                  ;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 22903                                  ;	transfer memory; otherwise, just re-position it in the buffer queue
 22904                                  ;       as MRU (Most Recently Used).
 22905                                  
 22906                                  bufq2:	
 22907 00003942 50                      	push	ax
 22908                                  	;test	byte [di+5],40h
 22909 00003943 F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 22910 00003947 742D                    	jz	short bufq3                    ; -no, jump.
 22911                                  
 22912                                  ;       SaveReg <cx,dx,si,di,es>
 22913 00003949 51                      	push	cx
 22914 0000394A 52                      	push	dx
 22915 0000394B 56                      	push	si
 22916 0000394C 57                      	push	di
 22917 0000394D 06                      	push	es
 22918                                  
 22919 0000394E 89D0                    	mov     ax,dx
 22920                                  	;sub	ax,[di+6]
 22921 00003950 2B4506                  	sub	ax,[di+BUFFINFO.buf_sector]
 22922 00003953 F7D8                    	neg	ax
 22923                                  
 22924                                  ;       AX = offset (in sectors) of buffer sector within Transfer memory
 22925                                  ;            block. (Note: the upper word of the sector # may be ignored
 22926                                  ;	     since no more than 64k bytes will ever be read. This 64k limit
 22927                                  ;            is imposed by the input parameters of the disk read operation.)
 22928                                  
 22929                                  	;lea	si,[di+20]
 22930 00003955 8D7514                  	lea	si,[di+BUFINSIZ]	;DS:SI -> buffer data.
 22931                                  	;mov	cx,[es:bp+2]
 22932 00003958 268B4E02                	mov     cx,[es:bp+DPB.SECTOR_SIZE] ;CX = sector size (in bytes).
 22933 0000395C F7E1                    	mul     cx			;AX = offset (in bytes) of buf. sector
 22934 0000395E 368B3E[0C06]            	mov     di,[ss:TEMP_VAR]
 22935 00003963 01C7                    	add	di,ax
 22936 00003965 368E06[0E06]            	mov	es,[ss:TEMP_VAR2]
 22937 0000396A D1E9                    	shr	cx,1
 22938                                  
 22939                                  ;	   CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22940                                  ;       DS:SI-> Buffer sector data.
 22941                                  ;       ES:DI-> Destination within Transfer memory block.
 22942                                  
 22943 0000396C F3A5                    	rep	movsw			;Copy buffer sector to Transfer memory
 22944                                  	;; 04/05/2019
 22945                                  	;;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22946                                  	;;rep	movsb                   ;Copy last byte.
 22947                                  	;jnc	short bufq03	
 22948                                  	;movsb
 22949                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22950                                  	;adc	cx,0
 22951                                  	;rep	movsb
 22952                                  	; 22/09/2023
 22953 0000396E 7301                    	jnc	short bufq03
 22954 00003970 A4                      	movsb
 22955                                  bufq03:
 22956                                  	;RestoreReg <es,di,si,dx,cx>
 22957 00003971 07                      	pop	es
 22958 00003972 5F                      	pop	di
 22959 00003973 5E                      	pop	si
 22960 00003974 5A                      	pop	dx
 22961 00003975 59                      	pop	cx
 22962                                  
 22963                                  ;       DS:DI -> current buffer.
 22964                                  bufq3:	
 22965 00003976 89F8                    	mov     ax,di			;DS:AX -> Current buffer.
 22966                                          ;invoke SCANPLACE
 22967 00003978 E8C71E                  	call	SCANPLACE
 22968 0000397B 363B06[BB0E]            	cmp	ax,[ss:FIRST_BUFF_ADDR] ;Last buffer?
 22969 00003980 58                      	pop	ax
 22970                                  	;jne	short bufq		; -no, jump.
 22971                                  	;;jmp	short bufx		; -yes, exit.
 22972                                  	;; 12/06/2019
 22973                                  	;retn
 22974                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compability)
 22975 00003981 759C                    	jne	short bufq
 22976 00003983 EBBC                    	jmp	short bufx
 22977                                  
 22978                                  ;EndProc DskRdBufScan
 22979                                  
 22980                                  ;============================================================================
 22981                                  ; DISK3.ASM, MSDOS 6.0, 1991
 22982                                  ;============================================================================
 22983                                  ; 04/05/2019 - Retro DOS v4.0
 22984                                  ; 24/07/2018 - Retro DOS v3.0
 22985                                  
 22986                                  ;Break   <DISKWRITE -- PERFORM USER DISK WRITE>
 22987                                  ;----------------------------------------------------------------------------
 22988                                  ;
 22989                                  ; Procedure Name : DISKWRITE
 22990                                  ;
 22991                                  ; Inputs:
 22992                                  ;       Outputs of SETUP
 22993                                  ; Function:
 22994                                  ;       Perform disk write
 22995                                  ; Outputs:
 22996                                  ;    Carry clear
 22997                                  ;       CX = No. of bytes written
 22998                                  ;       ES:DI point to SFT
 22999                                  ;       SFT offset and cluster pointers updated
 23000                                  ;    Carry set
 23001                                  ;       CX = 0
 23002                                  ;       ES:DI point to SFT
 23003                                  ;       AX has error code
 23004                                  ;----------------------------------------------------------------------------
 23005                                  
 23006                                  ;hkn; called by DOS_WRITE. DS already set up at this point.
 23007                                  
 23008                                  ; DOSCODE:797Ah (MSDOS 6.21, MSDOS.SYS)
 23009                                  
 23010                                  ; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23011                                  ; DOSCODE:7966h (MSDOS 5.0, MSDOS.SYS) 
 23012                                  
 23013                                  DISKWRITE:
 23014                                  	; MSDOS 3.3
 23015                                  	; IBMDOS.COM - Offset 436Dh
 23016                                  	;;test	byte [es:di+4],8
 23017                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 23018                                  	;jz	short write_cont
 23019                                  	;jmp	SET_ACC_ERR_DS
 23020                                  ;write_cont:
 23021                                  	;push	cx
 23022                                  	;or	cx,cx
 23023                                  	;jnz	short Not_Truncate
 23024                                  	;;mov	cx,-1
 23025                                  	;dec	cx
 23026                                  ;Not_Truncate:
 23027                                  	;call	LOCK_CHECK
 23028                                  	;pop	cx
 23029                                  	;jnb	short _WRITE_OK
 23030                                  	;call	WRITE_LOCK_VIOLATION
 23031                                  	;jnb	short DISKWRITE
 23032                                  	;retn
 23033                                  
 23034                                  	; MSDOS 6.0
 23035 00003985 E8F3FC                  	call	CHECK_WRITE_LOCK	;IFS. check write lock	;AN000;
 23036                                  	; 19/08/2018
 23037 00003988 7304                    	JNC	short _WRITE_OK		;IFS. lock check ok	;AN000;
 23038 0000398A C3                      	retn
 23039                                  
 23040                                  WRTEOFJ:
 23041 0000398B E9DC01                  	JMP     WRTEOF
 23042                                  
 23043                                  _WRITE_OK:
 23044                                   	; 27/07/2018
 23045                                  	; IBMDOS.COM - Offset 438Eh
 23046                                  	
 23047                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23048                                  	;and	word [es:di+5],0BFBFh
 23049 0000398E 26816505BFBF            	AND     word [ES:DI+SF_ENTRY.sf_flags],~(sf_close_nodate|devid_file_clean)
 23050                                  				; Mark file as dirty, clear no date on close
 23051                                  
 23052                                  	; 04/05/2019 - Retro DOS v4.0	
 23053                                  
 23054                                  	; MSDOS 6.0
 23055                                  	; mov 	ax,[es:di+11h]
 23056 00003994 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]		;M039
 23057 00003998 A3[0C06]                        MOV	[TEMP_VAR],AX                           ;M039
 23058                                  	;mov	ax,[es:di+13h]
 23059 0000399B 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]		;M039
 23060 0000399F A3[0E06]                        MOV	[TEMP_VAR2],AX                          ;M039
 23061                                  
 23062                                  ;	TEMP_VAR2:TEMP_VAR = Current file size (sf_size);M039
 23063                                  
 23064                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23065 000039A2 C42E[8A05]              	LES     BP,[THISDPB]
 23066                                  
 23067 000039A6 E802FE                  	call	BREAKDOWN
 23068                                  
 23069 000039A9 A1[CE05]                	MOV     AX,[BYTPOS]
 23070 000039AC 8B16[D005]              	MOV     DX,[BYTPOS+2]
 23071 000039B0 E3D9                    	JCXZ    WRTEOFJ                 ;Make the file length = sf_position
 23072 000039B2 01C8                    	ADD     AX,CX
 23073 000039B4 83D200                  	ADC     DX,0                    ;DX:AX = last byte to write + 1.
 23074                                  
 23075                                  	;mov	bx,[es:bp+2]
 23076 000039B7 268B5E02                	MOV     BX,[ES:BP+DPB.SECTOR_SIZE]
 23077                                  
 23078                                  	; MSDOS 3.3
 23079                                  	;cmp	dx,bx
 23080                                  	;jnb	short WRTERR33
 23081                                  	;div	bx
 23082                                  	;mov	bx,ax
 23083                                  	;OR	DX,DX
 23084                                  	;JNZ	short CALCLUS
 23085                                  	;dec	ax
 23086                                  ;CALCLUS:
 23087                                  	; MSDOS 3.3
 23088                                  	;mov	cl,[es:bp+5]
 23089                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 23090                                  	;shr	ax,cl
 23091                                  	;push	ax
 23092                                  	;push	dx
 23093                                  	;push	es
 23094                                  	;les	di,[THISSFT]
 23095                                  	;;mov	ax,[es:di+11h]
 23096                                  	;;mov	dx,[es:di+13h]
 23097                                  	;mov	ax,[ES:DI+SF_ENTRY.sf_size]
 23098                                  	;mov	dx,[ES:DI+SF_ENTRY.sf_size+2]
 23099                                  	;pop	es
 23100                                  	;;DX:AX = current file size (in bytes).
 23101                                  	;;div	word [es:bp+2]
 23102                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 23103                                  	;mov	cx,ax
 23104                                  	;or	dx,dx
 23105                                  	;jz	short NORND
 23106                                  	;inc	ax
 23107                                  ;NORND:
 23108                                  	; MSDOS 6.0
 23109 000039BB E8DC02                  	CALL	DIV32                   ;DX:AX/BX = CX:AX + DX (rem.).
 23110 000039BE 89C6                    	MOV	SI,AX
 23111 000039C0 890E[0706]                      MOV	[HIGH_SECTOR],CX
 23112                                  
 23113                                  ;       [HIGH_SECTOR]:SI = Last full sector to write.
 23114                                  
 23115 000039C4 09D2                    	OR	DX,DX
 23116 000039C6 52                      	PUSH	DX			;M039: Free DX for use by SHR32
 23117 000039C7 89CA                    	MOV	DX,CX			;M039
 23118 000039C9 7506                    	JNZ	short CALCLUS
 23119 000039CB 83E801                  	SUB	AX,1                    ;AX must be zero base indexed	;AC000;
 23120 000039CE 83DA00                  	SBB	DX,0			;M039 ;F.C. >32mb		;AN000;
 23121                                  
 23122                                  CALCLUS:
 23123                                  	; MSDOS 6.0
 23124 000039D1 E8ED02                  	CALL	SHR32                   ;F.C. >32mb			;AN000;
 23125 000039D4 5A                      	POP	DX
 23126                                  
 23127                                  ;       AX = Last cluster to write.
 23128                                  ;       DX = # of bytes in last sector to write (the "tail").
 23129                                  ;       BX = [ES:BP+DPB.SECTOR_SIZE]
 23130                                  
 23131 000039D5 50                      	PUSH	AX
 23132 000039D6 52                      	PUSH	DX
 23133                                  ;M039
 23134 000039D7 8B16[0E06]              	mov	dx,[TEMP_VAR2]
 23135 000039DB A1[0C06]                	mov	ax,[TEMP_VAR]           ;DX:AX = current file size (in bytes).
 23136 000039DE E8B902                  	call	DIV32           	;DX:AX/BX = CX:AX + DX (rem.)
 23137 000039E1 890E[0E06]              	mov	[TEMP_VAR2],cx
 23138 000039E5 890E[CA05]              	mov	[VALSEC+2],cx
 23139 000039E9 89C1                    	mov	cx,ax
 23140 000039EB 89F3                    	mov	bx,si
 23141                                  
 23142                                  ;       [HIGH_SECTOR]:BX = Last full sector to write.
 23143                                  ;          [VALSEC+2]:CX = Last full sector of current file.
 23144                                  ;         [TEMP_VAR2]:CX = Last full sector of current file.
 23145                                  ;                     DX = # of bytes in last sector of current file.
 23146                                  ;M039
 23147 000039ED 09D2                    	OR	DX,DX
 23148 000039EF 7407                    	JZ	short NORND
 23149                                  	;ADD	AX,1            	;Round up if any remainder	;AC000;
 23150                                  	;ADC	word [VALSEC+2],0
 23151                                  	; 22/09/2023
 23152 000039F1 40                      	inc	ax  ; 0FFFFh -> 0
 23153 000039F2 7504                    	jnz	short NORND
 23154 000039F4 FF06[CA05]              	inc	word [VALSEC+2]
 23155                                  NORND:	
 23156                                  	; MSDOS 3.3 & MSDOS 6.0
 23157 000039F8 A3[C805]                	MOV     [VALSEC],AX
 23158                                  
 23159                                  ;       [VALSEC] = Last sector of current file.
 23160                                  
 23161 000039FB 31C0                    	XOR     AX,AX
 23162 000039FD A3[DE05]                	MOV     [GROWCNT],AX
 23163 00003A00 A3[E005]                	MOV     [GROWCNT+2],AX
 23164 00003A03 58                      	POP     AX
 23165                                  
 23166                                  	; MSDOS 6.0
 23167 00003A04 8B3E[0706]              	MOV	DI,[HIGH_SECTOR]        ;F.C. >32mb			;AN000;
 23168 00003A08 3B3E[0E06]              	CMP	DI,[TEMP_VAR2]		;M039; F.C. >32mb		;AN000;
 23169 00003A0C 7263                    	JB	short NOGROW		;F.C. >32mb                     ;AN000;
 23170 00003A0E 7408                    	JZ	short lowsec		;F.C. >32mb                     ;AN000;
 23171 00003A10 29CB                    	SUB	BX,CX                   ;F.C. >32mb                     ;AN000;
 23172 00003A12 1B3E[0E06]              	SBB	DI,[TEMP_VAR2]   	;M039; F.C. >32mb di:bx no. of sectors ;AN000;
 23173 00003A16 EB08                    	JMP	short yesgrow           ;F.C. >32mb                     ;AN000;
 23174                                  lowsec:
 23175                                  	;MOV	DI,0			;F.C. >32mb
 23176                                  	; 22/09/2023
 23177 00003A18 31FF                    	xor	di,di
 23178                                  	; MSDOS 3.3 & MSDOS 6.0
 23179 00003A1A 29CB                    	SUB	BX,CX			; Number of full sectors
 23180 00003A1C 7253                    	JB	short NOGROW
 23181 00003A1E 7444                    	JZ	short TESTTAIL
 23182                                  yesgrow:
 23183                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23184 00003A20 89D1                    	MOV     CX,DX
 23185 00003A22 93                      	XCHG    AX,BX
 23186                                  	;mul	word [es:bp+2]
 23187 00003A23 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]  ; Bytes of full sector growth
 23188                                  	
 23189                                  	; MSDOS 6.0
 23190 00003A27 8916[0706]              	MOV	[HIGH_SECTOR],DX         ;F.C. >32mb save dx                    ;AN000;
 23191 00003A2B A3[0E06]                	MOV	[TEMP_VAR2],AX    	 ;M039; F.C. >32mb save ax		;AN000;
 23192 00003A2E 89F8                    	MOV	AX,DI                    ;F.C. >32mb                            ;AN000;
 23193                                  	;mul	word [es:bp+2]
 23194 00003A30 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE] ;F.C. >32mb do higher word multiply ;AN000;
 23195                                  	
 23196 00003A34 0306[0706]              	ADD	AX,[HIGH_SECTOR]         ;F.C. >32mb add lower value            ;AN000;
 23197 00003A38 89C2                    	MOV	DX,AX                    ;F.C. >32mb DX:AX is the result of     ;AN000;
 23198 00003A3A A1[0E06]                	MOV	AX,[TEMP_VAR2]    	 ;M039; F.C. >32mb a 32 bit multiply	;AN000;
 23199                                  
 23200                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23201 00003A3D 29C8                    	SUB     AX,CX			; Take off current "tail"
 23202 00003A3F 83DA00                  	SBB     DX,0			; 32-bit extension
 23203 00003A42 01D8                    	ADD     AX,BX			; Add on new "tail"
 23204 00003A44 83D200                  	ADC     DX,0			; ripple tim's head off
 23205 00003A47 EB21                    	JMP     SHORT SETGRW
 23206                                  
 23207                                  HAVSTART:
 23208                                  	;int 3
 23209 00003A49 89C1                    	MOV     CX,AX
 23210 00003A4B E87811                  	call	SKPCLP
 23211                                  	;JCXZ	DOWRTJ
 23212                                  	; 16/12/2022
 23213 00003A4E E357                    	jcxz	DOWRT
 23214                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23215                                  	;jcxz	DOWRTJ
 23216                                  
 23217 00003A50 E81A13                  	call	ALLOCATE
 23218                                  	;JNC	short DOWRTJ
 23219                                  	; 16/12/2022
 23220 00003A53 7352                    	jnc	short DOWRT
 23221                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23222                                  	;jnc	short DOWRTJ
 23223                                  
 23224                                  	;entry   WRTERR
 23225                                  WRTERR:
 23226 00003A55 B40F                    	MOV     AH,0FH			;MS. write/data/fail/abort      ;AN000;
 23227                                  
 23228                                  	;entry WRTERR22
 23229                                  WRTERR22:
 23230 00003A57 A0[7605]                	MOV     AL,[THISDRV]		;MS.                            ;AN000;
 23231                                  
 23232                                  	; 27/07/2018
 23233                                  WRTERR33:
 23234                                  	;MOV	CX,0			;No bytes transferred
 23235 00003A5A 31C9                    	XOR     CX,CX
 23236                                  					
 23237 00003A5C C43E[9E05]              	LES     DI,[THISSFT]
 23238                                  	;CLC ; 19/05/2019
 23239                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23240                                  	; 16/12/2022
 23241                                  	;clc
 23242 00003A60 C3                      	retn
 23243                                  
 23244                                  	; 16/12/2022
 23245                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23246                                  ;DOWRTJ:
 23247                                  	;JMP	short DOWRT
 23248                                  
 23249                                  ACC_ERRWJ:
 23250                                  	; 10/08/2018
 23251                                  	;JMP	SET_ACC_ERRW
 23252                                  	; 16/12/2022
 23253 00003A61 E9D7FD                  	jmp	SET_ACC_ERR_DS
 23254                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23255                                  	;jmp	SET_ACC_ERRW	
 23256                                  
 23257                                  TESTTAIL:
 23258 00003A64 29D0                    	SUB     AX,DX
 23259 00003A66 7609                    	JBE	short NOGROW
 23260 00003A68 31D2                    	XOR     DX,DX
 23261                                  SETGRW:
 23262 00003A6A A3[DE05]                	MOV	[GROWCNT],AX
 23263 00003A6D 8916[E005]              	MOV	[GROWCNT+2],DX
 23264                                  NOGROW:
 23265 00003A71 58                      	POP     AX
 23266 00003A72 8B0E[BC05]              	MOV     CX,[CLUSNUM]    ; First cluster accessed
 23267 00003A76 E82D11                  	call	FNDCLUS
 23268 00003A79 72E6                    	JC	short ACC_ERRWJ
 23269 00003A7B 891E[BC05]              	MOV     [CLUSNUM],BX
 23270 00003A7F 8916[BA05]              	MOV     [LASTPOS],DX
 23271                                  
 23272 00003A83 29D0                    	SUB     AX,DX           ; Last cluster minus current cluster
 23273 00003A85 7420                    	JZ	short DOWRT	; If we have last clus, we must have first
 23274 00003A87 E3C0                    	JCXZ    HAVSTART        ; See if no more data
 23275 00003A89 51                      	PUSH    CX              ; No. of clusters short of first
 23276 00003A8A 89C1                    	MOV     CX,AX
 23277 00003A8C E8DE12                  	call	ALLOCATE
 23278 00003A8F 59                      	POP     CX
 23279 00003A90 72C3                    	JC	short WRTERR
 23280 00003A92 8B16[BA05]              	MOV     DX,[LASTPOS]
 23281 00003A96 42                      	INC     DX
 23282 00003A97 49                      	DEC     CX
 23283 00003A98 7405                    	JZ	short NOSKIP
 23284 00003A9A E82911                  	call	SKPCLP
 23285 00003A9D 72C2                    	JC	short ACC_ERRWJ
 23286                                  NOSKIP:
 23287 00003A9F 891E[BC05]              	MOV     [CLUSNUM],BX
 23288 00003AA3 8916[BA05]              	MOV     [LASTPOS],DX
 23289                                  DOWRT:
 23290 00003AA7 833E[D205]00            	CMP     word [BYTCNT1],0
 23291 00003AAC 7409                    	JZ	short WRTMID
 23292 00003AAE 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 23293 00003AB2 E8A011                  	call	BUFWRT
 23294 00003AB5 72AA                    	JC	short ACC_ERRWJ
 23295                                  WRTMID:
 23296 00003AB7 A1[D605]                	MOV     AX,[SECCNT]
 23297 00003ABA 09C0                    	OR      AX,AX
 23298                                  	; 20/11/2022
 23299 00003ABC 746F                    	JZ	short WRTLAST	; 24/07/2019	;M039
 23300 00003ABE 0106[C405]              	ADD     [SECPOS],AX
 23301                                  	; 19/05/2019
 23302                                  	; MSDOS 6.0
 23303 00003AC2 8316[C605]00            	ADC	WORD [SECPOS+2],0	;F.C. >32mb 	;AN000;
 23304 00003AC7 E8E711                  	call	NEXTSEC
 23305                                  	; 16/12/2022
 23306 00003ACA 7295                    	JC	short ACC_ERRWJ
 23307                                  	;JC	short SET_ACC_ERRW	;M039
 23308 00003ACC C606[7405]01            	MOV     BYTE [TRANS],1		; A transfer is taking place
 23309 00003AD1 8A16[7305]              	MOV     DL,[SECCLUSPOS] 	; (dx/DL = Extent start) ((dh = ?))
 23310 00003AD5 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 23311 00003AD9 8B0E[D605]              	MOV     CX,[SECCNT]
 23312                                  WRTLP:
 23313 00003ADD E80212                  	call	OPTIMIZE
 23314 00003AE0 7248                    	JC	short SET_ACC_ERRW
 23315                                  	; 16/12/2022
 23316                                  	;JC	short ACC_ERRWJ
 23317                                  
 23318                                  ;M039
 23319                                  ;       DI = Next physical cluster.
 23320                                  ;       AX = # sectors remaining.
 23321                                  ;       [DMAADD+2]:BX = transfer address (source data address).
 23322                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 23323                                  ;	     sectors, also termed an "Extent".)
 23324                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 23325                                  ;       ES:BP -> Drive Parameter Block (DPB).
 23326                                  ;
 23327                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 23328                                  ;	are in Extent; they are being over-written.
 23329                                  
 23330 00003AE2 57                      	push    di
 23331 00003AE3 50                      	push    ax
 23332                                  
 23333                                  	; MSDOS 3.3
 23334                                  	; IBMDOS.COM (1987) - Offset 4497h
 23335                                  	;push	dx
 23336                                  	;push	bx
 23337                                  	;mov	al,[es:bp]
 23338                                  	;;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 23339                                  	;mov	bx,cx
 23340                                  	;add	bx,dx	; (bx = Extent end)
 23341                                  
 23342                                  ;	DX = Extent start.
 23343                                  ;	BX = Extent end.
 23344                                  ;	AL = Drive #.
 23345                                  
 23346                                  	;call	SETVISIT
 23347                                  
 23348                                  ;wbufq1:
 23349                                  	;;or	byte [di+5],20h
 23350                                  	;or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 23351                                  	;;cmp	al,[di+4]	
 23352                                  	;cmp	al,[DI+BUFFINFO.buf_ID]
 23353                                  	;jnz	short wbufq2	; Jump if Extent start > buffer sector.
 23354                                  	;;cmp	[di+6],dx
 23355                                  	;cmp	[DI+BUFFINFO.buf_sector],dx
 23356                                  	;jb	short wbufq2
 23357                                  	;;cmp	[di+6],bx
 23358                                  	;cmp	[DI+BUFFINFO.buf_sector],bx
 23359                                  	;jnb	short wbufq2	; Jump if Extent end >= buffer sector.
 23360                                  
 23361                                  	;; Buffer sector is in the Extent
 23362                                  
 23363                                  	;;mov	word [di+4],20FFh
 23364                                  	;mov	word [DI+BUFFINFO.buf_ID],20FFh
 23365                                  	;				; .buf_ID,    AL = FFh (Free buffer)
 23366                                  	;				; .buf_flags, AH = 0, reset/clear
 23367                                  	;call	SCANPLACE
 23368                                  ;wbufq2:
 23369                                  	;call	SKIPVISIT
 23370                                  	;jnz	short wbufq1
 23371                                  	;pop	bx
 23372                                  	;pop	dx
 23373                                  
 23374                                          ; MSDOS 6.0
 23375 00003AE4 E82D01                  	call	DskWrtBufPurge		;DS trashed.
 23376                                  
 23377                                  ;ASSUME DS:NOTHING
 23378                                  ;M039
 23379                                  	; MSDOS 3.3 & MSDOS 6.0
 23380                                  ;hkn; SS override for DMAADD and ALLOWED
 23381 00003AE7 368E1E[2E03]            	MOV     DS,[SS:DMAADD+2]
 23382                                  	;mov	byte [ss:ALLOWED],38h
 23383 00003AEC 36C606[4B03]38          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 23384                                  
 23385                                  ;	put logic from DWRITE in-line here so we can modify it
 23386                                  ;	for DISK FULL conditions.
 23387                                  
 23388                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23389                                  	; DOSCODE:7AD8h (MSDOS 5.0 MSDOS.SYS)
 23390                                  
 23391                                  	; 16/12/2022
 23392                                  	; MSDOS 3.3 (& MSDOS 5.0)
 23393                                  	;call	DWRITE
 23394                                  
 23395                                  ;DWRITE_OKAY:
 23396                                  
 23397                                  	; 16/12/2022
 23398                                  	; MSDOS 5.0 (& MSDOS 3.3)
 23399                                  	;pop     cx
 23400                                  	;pop     bx
 23401                                  	;push    ss
 23402                                  	;pop     ds
 23403                                  	;jc      short SET_ACC_ERRW
 23404                                  	;jcxz    WRTLAST
 23405                                  	;mov     dl, 0
 23406                                  	;inc     word [LASTPOS]
 23407                                  	;jmp     short WRTLP
 23408                                  
 23409                                  	; 16/12/2022
 23410                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23411                                  DWRITE_LUP:
 23412                                  	; 23/07/2019 - Retro DOS v3.2
 23413                                  
 23414                                  	; MSDOS 6.0
 23415 00003AF2 E8E4FB                  	call	DSKWRITE
 23416 00003AF5 7417                    	jz	short DWRITE_OKAY
 23417                                  
 23418                                  ;;	int	3
 23419                                  
 23420 00003AF7 3C27                    	cmp	al,error_handle_Disk_Full	; compressed volume full?
 23421 00003AF9 7423                    	jz	short DWRITE_DISK_FULL
 23422                                  
 23423                                  	; 16/12/2022
 23424                                  
 23425                                  ;;hkn; SS override
 23426 00003AFB 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 23427 00003B01 E804FC                  	call	HARDERRRW
 23428 00003B04 3C01                    	CMP	AL,1		; Check for retry
 23429 00003B06 74EA                    	JZ	short DWRITE_LUP
 23430                                  
 23431                                  	; 16/12/2022
 23432                                  	; 23/07/2019
 23433                                  	;POP	CX ; *4*
 23434                                  	;POP	BX ; *5*
 23435                                  	;
 23436                                  	;push	ss
 23437                                  	;pop	ds
 23438                                  	;
 23439                                  
 23440                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23441                                  
 23442                                  	; 16/12/2022
 23443 00003B08 3C03                    	CMP	AL,3		; Check for FAIL
 23444 00003B0A F8                      	CLC
 23445 00003B0B 7501                    	JNZ	short DWRITE_OKAY ; Ignore
 23446 00003B0D F9                      	STC
 23447                                  
 23448                                  DWRITE_OKAY:
 23449                                  	; 16/12/2022
 23450                                  	; 23/07/2019
 23451                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23452 00003B0E 59                      	POP	CX ; *4*
 23453 00003B0F 5B                      	POP	BX ; *5*
 23454                                  
 23455                                  ;       CX = # sectors remaining.
 23456                                  ;       BX = Next physical cluster.
 23457                                  
 23458                                  ;hkn; SS override
 23459                                          ;Context DS
 23460                                  	; 16/12/2022
 23461                                  	;push	ss
 23462                                  	;pop	ds
 23463                                  
 23464                                  	; 16/12/2022
 23465 00003B10 7218                    	jc	short SET_ACC_ERRW
 23466                                  
 23467                                  	; 16/12/2022
 23468 00003B12 16                      	push	ss
 23469 00003B13 1F                      	pop	ds
 23470                                  
 23471 00003B14 E317                    	JCXZ    WRTLAST
 23472                                  
 23473                                  	;MOV	DL,0
 23474 00003B16 30D2                    	xor	dl,dl ; 23/07/2019
 23475 00003B18 FF06[BA05]              	INC     word [LASTPOS]	; We'll be using next cluster
 23476 00003B1C EBBF                    	JMP     short WRTLP
 23477                                  
 23478                                  	; 23/07/2019 - Retro DOS v3.2
 23479                                  	; 09/08/2018
 23480                                  	; MSDOS 6.0
 23481                                  DWRITE_DISK_FULL:
 23482                                  	;Context DS		;SQ 3-5-93 DS must be setup on return!
 23483                                  	; 16/12/2022
 23484 00003B1E 16                      	push	ss
 23485 00003B1F 1F                      	pop	ds
 23486 00003B20 59                      	pop	cx		; unjunk stack
 23487 00003B21 5B                      	pop	bx
 23488 00003B22 C606[0B06]01            	mov	byte [DISK_FULL],1
 23489                                  	;stc
 23490 00003B27 E92BFF                  	jmp	WRTERR ; 24/07/2019 ; go to disk full exit
 23491                                  
 23492                                  	; 16/12/2022
 23493                                  SET_ACC_ERRW:
 23494 00003B2A E90EFD                  	jmp	SET_ACC_ERR_DS
 23495                                  
 23496                                  WRTLAST:
 23497 00003B2D A1[D405]                	MOV     AX,[BYTCNT2]
 23498 00003B30 09C0                    	OR      AX,AX
 23499 00003B32 7413                    	JZ	short FINWRT
 23500 00003B34 A3[D205]                	MOV     [BYTCNT1],AX
 23501 00003B37 E87711                  	call	NEXTSEC
 23502 00003B3A 72EE                    	JC	short SET_ACC_ERRW
 23503 00003B3C C706[CC05]0000          	MOV     word [BYTSECPOS],0
 23504 00003B42 E81011                  	call	BUFWRT
 23505 00003B45 72E3                    	JC	short SET_ACC_ERRW
 23506                                  FINWRT:
 23507 00003B47 C43E[9E05]              	LES     DI,[THISSFT]
 23508 00003B4B A1[DE05]                	MOV     AX,[GROWCNT]
 23509 00003B4E 8B0E[E005]              	MOV     CX,[GROWCNT+2]
 23510 00003B52 09C0                    	OR      AX,AX
 23511 00003B54 7502                    	JNZ	short UPDATE_size
 23512 00003B56 E30F                    	JCXZ    SAMSIZ
 23513                                  UPDATE_size:
 23514                                  	;add	[es:di+11h],ax
 23515 00003B58 26014511                	ADD     [ES:DI+SF_ENTRY.sf_size],AX
 23516                                  	;adc	[es:di+13h],cx
 23517 00003B5C 26114D13                	ADC     [ES:DI+SF_ENTRY.sf_size+2],CX
 23518                                  
 23519                                  ; Make sure that all other SFT's see this growth also.
 23520                                  
 23521 00003B60 B80100                  	MOV     AX,1
 23522                                  ;if installed
 23523                                  	;Call	JShare + 14 * 4
 23524 00003B63 FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 23525                                  ;else
 23526                                  ;	Call    ShSU
 23527                                  ;endif
 23528                                  
 23529                                  SAMSIZ:
 23530 00003B67 E969FD                  	jmp	SETCLUS	; ES:DI already points to SFT
 23531                                  
 23532                                  	; 16/12/2022
 23533                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23534                                  ;SET_ACC_ERRW:
 23535                                  	;jmp	SET_ACC_ERR_DS
 23536                                  
 23537                                  WRTEOF:
 23538 00003B6A 89C1                    	MOV     CX,AX
 23539 00003B6C 09D1                    	OR      CX,DX
 23540 00003B6E 746C                    	JZ	short KILLFIL
 23541 00003B70 83E801                  	SUB     AX,1
 23542 00003B73 83DA00                  	SBB     DX,0
 23543                                  
 23544                                  	; MSDOS 3.3
 23545                                  	;;div	word [es:bp+2]
 23546                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 23547                                  	;;mov	cl,[es:bp+5]
 23548                                  	;mov	cl,[ES:BP+DPB.CLUSTER_SHIFT] 
 23549                                  	;shr	ax,cl
 23550                                  
 23551                                  	; MSDOS 6.0
 23552 00003B76 53                      	PUSH	BX
 23553                                  	;mov	bx,[es:bp+2]
 23554 00003B77 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]    ;F.C. >32mb                       ;AN000;
 23555 00003B7B E81C01                  	CALL	DIV32                         ;F.C. >32mb                       ;AN000;
 23556 00003B7E 5B                      	POP	BX			      ;F.C. >32mb			;AN000;
 23557 00003B7F 89CA                    	MOV	DX,CX			      ;M039
 23558 00003B81 890E[0706]                      MOV	[HIGH_SECTOR],CX              ;M039: Probably extraneous, but not sure.
 23559 00003B85 E83901                  	CALL	SHR32                         ;F.C. >32mb                       ;AN000;
 23560                                  
 23561 00003B88 89C1                    	MOV     CX,AX
 23562 00003B8A E81910                  	call	FNDCLUS
 23563                                  SET_ACC_ERRWJ2:
 23564 00003B8D 729B                    	JC	short SET_ACC_ERRW
 23565                                  
 23566 00003B8F E326                    	JCXZ    RELFILE
 23567 00003B91 E8D911                  	call	ALLOCATE
 23568                                  	;JC	short WRTERRJ              ;;;;;;;;; disk full
 23569                                  	; 16/12/2022
 23570 00003B94 7303                    	jnc	short UPDATE
 23571 00003B96 E9BCFE                  	JMP	WRTERR
 23572                                  UPDATE:
 23573 00003B99 C43E[9E05]              	LES	DI,[THISSFT]
 23574 00003B9D A1[CE05]                	MOV	AX,[BYTPOS]
 23575                                  	;mov	[es:di+11h],ax
 23576 00003BA0 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 23577 00003BA4 A1[D005]                	MOV	AX,[BYTPOS+2]
 23578                                  	;mov	[es:di+13h],ax
 23579 00003BA7 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 23580                                  ;
 23581                                  ; Make sure that all other SFT's see this growth also.
 23582                                  ;
 23583 00003BAB B80200                  	MOV     AX,2
 23584                                  ;if installed
 23585                                  	;Call	JShare + 14 * 4
 23586 00003BAE FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 23587                                  ;else
 23588                                  ;	Call    ShSU
 23589                                  ;endif
 23590 00003BB2 31C9                    	XOR     CX,CX
 23591 00003BB4 E939FD                  	jmp	ADDREC
 23592                                  
 23593                                  	; 16/12/2022
 23594                                  ;WRTERRJ: 
 23595                                  	;JMP	WRTERR
 23596                                  
 23597                                  ;;;;;;;;;;;;;;;; 7/18/86
 23598                                  ;;;;;;;;;;;;;;;;
 23599                                  
 23600                                  RELFILE:
 23601                                  	; MSDOS 6.0
 23602 00003BB7 06                      	PUSH    ES                    ;AN002; BL Reset Lstclus and cluspos to
 23603 00003BB8 C43E[9E05]              	LES     DI,[THISSFT]          ;AN002; BL beginning of file if current
 23604                                  	;cmp	dx,[es:di+19h]
 23605 00003BBC 263B5519                	CMP     DX,[ES:DI+SF_ENTRY.sf_cluspos]	;AN002; BL cluspos is past EOF.
 23606 00003BC0 730E                    	JAE	short SKIPRESET	      		;AN002; BL
 23607                                  	;mov	[es:di+19h],0
 23608 00003BC2 26C745190000            	MOV     word [ES:DI+SF_ENTRY.sf_cluspos],0 ;AN002; BL
 23609                                  	;mov	dx,[es:di+0Bh]
 23610 00003BC8 268B550B                	MOV     DX,[ES:DI+SF_ENTRY.sf_firclus]	;AN002; BL
 23611                                  	;mov	[es:di+35h],dx
 23612 00003BCC 26895535                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],DX	;AN002; BL
 23613                                  SKIPRESET:                            		;AN002; BL
 23614 00003BD0 07                      	POP     ES                    		;AN002; BL
 23615                                  ;
 23616 00003BD1 BAFFFF                  	MOV     DX,0FFFFH
 23617 00003BD4 E84412                  	call	RELBLKS
 23618                                  	; 16/12/2022
 23619                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23620 00003BD7 73C0                    	jnc	short UPDATE
 23621                                  SET_ACC_ERRWJ:
 23622                                  	;JC	short SET_ACC_ERRWJ2
 23623                                  	;JMP	SHORT UPDATE
 23624                                  	; 16/12/2022
 23625 00003BD9 E95FFC                  	jmp	SET_ACC_ERR_DS
 23626                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23627                                  	;JC	short SET_ACC_ERRWJ2
 23628                                  	;JMP	SHORT UPDATE
 23629                                  
 23630                                  KILLFIL:
 23631 00003BDC 31DB                    	XOR     BX,BX
 23632 00003BDE 06                      	PUSH    ES
 23633 00003BDF C43E[9E05]              	LES     DI,[THISSFT]
 23634                                  	;mov	[es:di+19h],bx
 23635 00003BE3 26895D19                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],BX
 23636                                  	;mov	[es:di+35h],bx ; 04/05/2019
 23637 00003BE7 26895D35                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],BX
 23638                                  	;xchg	bx,[es:di+0Bh]
 23639 00003BEB 26875D0B                	XCHG    BX,[ES:DI+SF_ENTRY.sf_firclus]
 23640 00003BEF 07                      	POP	ES
 23641                                  
 23642 00003BF0 09DB                    	OR	BX,BX
 23643                                  	;JZ	short UPDATEJ
 23644                                  	; 16/12/2022
 23645 00003BF2 74A5                    	jz	short UPDATE
 23646                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23647                                  	;jz	short UPDATEJ
 23648                                  
 23649                                  ;; 10/23/86 FastOpen update
 23650 00003BF4 06                      	PUSH	ES              ; since first cluster # is 0
 23651 00003BF5 55                      	PUSH	BP              ; we must delete the old cache entry
 23652 00003BF6 50                      	PUSH	AX
 23653 00003BF7 51                      	PUSH	CX
 23654 00003BF8 52                      	PUSH	DX
 23655 00003BF9 C42E[8A05]              	LES	BP,[THISDPB]             ; get current DPB
 23656                                  	; 15/12/2022
 23657 00003BFD 268A5600                	mov	dl,[ES:BP] ; mov dl,[es:bp+0]
 23658                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23659                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; get current drive
 23660 00003C01 89D9                    	MOV	CX,BX                    ; first cluster #
 23661 00003C03 B402                    	MOV	AH,2                     ; delete cache entry by drive:firclus
 23662 00003C05 E87BEA                  	call	FastOpen_Update          ; call fastopen
 23663 00003C08 5A                      	POP	DX
 23664 00003C09 59                      	POP	CX
 23665 00003C0A 58                      	POP	AX
 23666 00003C0B 5D                      	POP	BP
 23667 00003C0C 07                      	POP	ES
 23668                                  ;; 10/23/86 FastOpen update
 23669                                  
 23670 00003C0D E80912                  	call	RELEASE
 23671 00003C10 72C7                    	JC	short SET_ACC_ERRWJ
 23672                                  UPDATEJ:
 23673                                  	; 20/11/2022
 23674 00003C12 EB85                    	JMP	short UPDATE ; 10/08/2018
 23675                                  
 23676                                  ;Break   <DskWrtBufPurge -- Disk Write Buffer Purge>
 23677                                  ;----------------------------------------------------------------------------
 23678                                  ;
 23679                                  ; Procedure Name : DskWrtBufPurge
 23680                                  ;
 23681                                  ; Inputs:
 23682                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 23683                                  ;	     sectors, also termed an "Extent".)
 23684                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 23685                                  ;       ES:BP -> Drive Parameter Block (DPB).
 23686                                  ;
 23687                                  ; Function:
 23688                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 23689                                  ;	are in Extent; they are being over-written.
 23690                                  ;
 23691                                  ; Outputs:
 23692                                  ;       (Same as Input.)
 23693                                  ; Uses:
 23694                                  ;       All registers except DS,AX,SI,DI preserved.
 23695                                  ;       SS override for all global variables.
 23696                                  ;----------------------------------------------------------------------------
 23697                                  ;M039: Created
 23698                                  
 23699                                  ;procedure   DskWrtBufPurge,NEAR
 23700                                  ;
 23701                                  ;ASSUME  DS:NOTHING
 23702                                  
 23703                                  ; 04/05/2019 - Retro DOS v4.0
 23704                                  ; DOSCODE:7C0Eh (MSDOS 6.21, MSDOS.SYS)
 23705                                  
 23706                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23707                                  ; DOSCODE:7BD4h (MSDOS 5.0, MSDOS.SYS) 
 23708                                  
 23709                                  DskWrtBufPurge:
 23710                                  	;SaveReg <bx,cx>
 23711 00003C14 53                      	push	bx
 23712 00003C15 51                      	push	cx
 23713                                  
 23714 00003C16 368B1E[0706]            	mov	bx,[ss:HIGH_SECTOR]	;BX:DX = Extent start (sector #).
 23715 00003C1B 89DE                    	mov	si,bx
 23716 00003C1D 01D1                    	add	cx,dx
 23717 00003C1F 83D600                  	adc	si,0                    ;SI:CX = Extent end + 1.
 23718                                  
 23719                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23720                                  	;;mov	al,[es:bp+0]
 23721                                  	;mov	al,[es:bp+DPB.DRIVE]
 23722                                  	; 15/12/2022
 23723 00003C22 268A4600                	mov	al,[es:bp]
 23724                                  
 23725                                  ;	BX:DX = Extent start.
 23726                                  ;	SI:CX = Extent end + 1.
 23727                                  ;	AL = Drive #
 23728                                  
 23729 00003C26 36833E[7700]00          	cmp	word [ss:SC_CACHE_COUNT],0 ;Secondary cache in-use?
 23730 00003C2C 7431                    	je	short nosc		; -no, jump.
 23731                                  
 23732                                  ;	If any of the sectors to be written are in the secondary cache (SC),
 23733                                  ;	invalidate the entire SC. (This is an optimization; we really only
 23734                                  ;	need to invalidate those sectors which intersect, but that's slower.)
 23735                                  
 23736 00003C2E 363A06[B00D]            	cmp	al,[ss:CurSC_DRIVE]	;Same drive?
 23737 00003C33 752A                    	jne	short nosc		; -no, jump.
 23738                                  
 23739 00003C35 50                      	push    ax
 23740 00003C36 36A1[B10D]              	mov     ax,[ss:CurSC_SECTOR]
 23741 00003C3A 368B3E[B30D]            	mov     di,[ss:CurSC_SECTOR+2]	;DI:AX = SC start.
 23742                                  
 23743                                  	;Cmp32	si,cx,di,ax		;Extent end < SC start?
 23744                                  	;jbe	short sc5		; -yes, jump.
 23745                                  
 23746 00003C3F 39FE                    	cmp	si,di
 23747 00003C41 7502                    	jne	short sc01
 23748 00003C43 39C1                    	cmp	cx,ax
 23749                                  sc01: 
 23750 00003C45 7617                    	jbe	short sc5	
 23751                                  
 23752 00003C47 360306[7700]            	add	ax,[ss:SC_CACHE_COUNT]
 23753 00003C4C 83D700                  	adc	di,0                    ;DI:AX = SC end + 1.
 23754                                  	
 23755                                  	;Cmp32	bx,dx,di,ax             ;Extent start > SC end?
 23756                                  	;jae	short sc5		; -yes, jump.
 23757                                  
 23758 00003C4F 39FB                    	cmp	bx,di
 23759 00003C51 7502                    	jne	short sc02
 23760 00003C53 39C2                    	cmp	dx,ax
 23761                                  sc02:
 23762 00003C55 7307                    	jnb	short sc5
 23763                                  
 23764 00003C57 36C706[B50D]0000        	mov	word [ss:SC_STATUS],0	;Extent intersects SC: invalidate SC.
 23765                                  sc5:	
 23766 00003C5E 58                      	pop     ax
 23767                                  
 23768                                  ;	Free any buffered sectors which are in Extent; they are being over-
 23769                                  ;	written.
 23770                                  
 23771                                  nosc:	
 23772 00003C5F E8CE1B                  	call	GETCURHEAD		;DS:DI -> first buffer in queue.
 23773                                  
 23774                                  _bufq:	
 23775                                  	;cmpo	al,[di+4]
 23776 00003C62 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 23777 00003C65 7527                    	jne	short bufq5		; -no, jump.
 23778                                  
 23779                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23780                                  ;       ja	short bufq5		;Jump if Extent start > buffer sector.
 23781                                  
 23782                                  	;cmp	bx,[di+8]
 23783 00003C67 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 23784 00003C6A 7503                    	jne	short bufq04
 23785                                  	;cmp	dx,[di+6]
 23786 00003C6C 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 23787                                  bufq04:
 23788 00003C6F 771D                    	ja	short bufq5
 23789                                  
 23790                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23791                                  ;       jbe	short bufq5		;Jump if Extent end < buffer sector.
 23792                                  
 23793                                  	;cmp	si,[di+8]
 23794 00003C71 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 23795 00003C74 7503                    	jne	short bufq05
 23796                                  	;cmp	cx,[di+6]
 23797 00003C76 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 23798                                  bufq05:
 23799 00003C79 7613                    	jbe	short bufq5
 23800                                  
 23801                                  ;	Buffer's sector is in Extent, so free it; it is being over-written.
 23802                                  
 23803                                  	;test	byte [di+5],40h
 23804 00003C7B F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 23805 00003C7F 7403                    	jz	short bufq4		; -no, jump.
 23806 00003C81 E82D1E                  	call	DEC_DIRTY_COUNT		; -yes, decrement dirty count.
 23807                                  bufq4:
 23808                                  	;mov	word [di+4],20FFh
 23809 00003C84 C74504FF20              	mov     word [di+BUFFINFO.buf_ID],((buf_visit<<8)|0FFh)
 23810                                  
 23811 00003C89 E8B61B                  	call	SCANPLACE
 23812 00003C8C EB02                    	jmp     short bufq6
 23813                                  bufq5: 
 23814 00003C8E 8B3D                    	mov     di,[di]
 23815                                  	;mov	di,[di+BUFFINFO.buf_next]
 23816                                  bufq6: 
 23817 00003C90 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 23818 00003C95 75CB                    	jne	short _bufq		; --no, go do next buffer.
 23819                                  	
 23820                                  	;RestoreReg <cx,bx>
 23821 00003C97 59                      	pop	cx
 23822 00003C98 5B                      	pop	bx
 23823 00003C99 C3                      	retn
 23824                                  
 23825                                  ;EndProc DskWrtBufPurge
 23826                                  
 23827                                  ;Break   <DIV32 -- PERFORM 32 BIT DIVIDE>
 23828                                  ;----------------------------------------------------------------------------
 23829                                  ;
 23830                                  ; Procedure Name : DIV32
 23831                                  ;
 23832                                  ; Inputs:
 23833                                  ;       DX:AX = 32 bit dividend   BX= divisor
 23834                                  ; Function:
 23835                                  ;       Perform 32 bit division:  DX:AX/BX = CX:AX + DX (rem.)
 23836                                  ; Outputs:
 23837                                  ;       CX:AX = quotient , DX= remainder
 23838                                  ; Uses:
 23839                                  ;       All registers except AX,CX,DX preserved.
 23840                                  ;----------------------------------------------------------------------------
 23841                                  ;M039: DIV32 optimized for divisor of 512 (common sector size).
 23842                                  
 23843                                  ; 04/05/2019 - Retro DOS v4.0
 23844                                  ; DOSCODE:7C94h (MSDOS 6.21, MSDOS.SYS)
 23845                                  
 23846                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23847                                  ; DOSCODE:7C5Ah (MSDOS 5.0, MSDOS.SYS) 
 23848                                  
 23849                                  DIV32:
 23850 00003C9A 81FB0002                	cmp	bx,512
 23851 00003C9E 7515                    	jne	short div5
 23852                                  
 23853 00003CA0 89D1                    	mov	cx,dx
 23854 00003CA2 89C2                    	mov	dx,ax           ; CX:AX = Dividend
 23855 00003CA4 81E2FF01                	and	dx,(512-1)      ; DX = Remainder
 23856 00003CA8 88E0                    	mov	al,ah
 23857 00003CAA 88CC                    	mov	ah,cl
 23858 00003CAC 88E9                    	mov	cl,ch
 23859 00003CAE 30ED                    	xor	ch,ch
 23860 00003CB0 D1E9                    	shr	cx,1
 23861 00003CB2 D1D8                    	rcr	ax,1
 23862 00003CB4 C3                      	retn
 23863                                  div5:	
 23864 00003CB5 89C1                    	mov	cx,ax
 23865 00003CB7 89D0                    	mov	ax,dx
 23866 00003CB9 31D2                    	xor	dx,dx
 23867 00003CBB F7F3                    	div	bx              ; 0:AX/BX
 23868 00003CBD 91                      	xchg	cx,ax
 23869 00003CBE F7F3                    	div	bx              ; DX:AX/BX
 23870 00003CC0 C3                      	retn
 23871                                  
 23872                                  ;Break   <SHR32 -- PERFORM 32 BIT SHIFT RIGHT>
 23873                                  ;----------------------------------------------------------------------------
 23874                                  ;
 23875                                  ; Procedure Name : SHR32
 23876                                  ;
 23877                                  ; Inputs:
 23878                                  ;	DX:AX = 32 bit sector number
 23879                                  ; Function:
 23880                                  ;       Perform 32 bit shift right
 23881                                  ; Outputs:
 23882                                  ;	AX = cluster number
 23883                                  ;	ZF = 1 if no error
 23884                                  ;	   = 0 if error (cluster number > 64k)
 23885                                  ; Uses:
 23886                                  ;       DX,CX
 23887                                  ;---------------------------------------------------------------------------
 23888                                  ; M017	- SHR32 rewritten for better performance
 23889                                  ; M039	- Additional optimization
 23890                                  
 23891                                  ; 04/05/2019 - Retro DOS v4.0
 23892                                  ; DOSCODE:7CBBh (MSDOS 6.21, MSDOS.SYS)
 23893                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23894                                  ; DOSCODE:7C81h (MSDOS 5.0, MSDOS.SYS) 
 23895                                  
 23896                                  SHR32:
 23897                                  	;mov	cl,[es:bp+5]
 23898 00003CC1 268A4E05                	mov	cl,[ES:BP+DPB.CLUSTER_SHIFT]
 23899 00003CC5 30ED                    	xor	ch,ch	    ;ZF=1
 23900 00003CC7 E306                    	jcxz	norota
 23901                                  
 23902                                  rotashft2:
 23903 00003CC9 D1EA                    	shr	dx,1	    ;ZF reflects state of DX.
 23904 00003CCB D1D8                    	rcr	ax,1	    ;ZF not affected.
 23905 00003CCD E2FA                    	loop	rotashft2
 23906                                  norota:
 23907 00003CCF C3                      	retn
 23908                                  
 23909                                  ;============================================================================
 23910                                  ; DIR.ASM, MSDOS 6.0, 1991
 23911                                  ;============================================================================
 23912                                  ; 27/07/2018 - Retro DOS v3.0
 23913                                  ; 19/05/2019 - Retro DOS v4.0 
 23914                                  
 23915                                  ;	TITLE	DIR - Directory and path cracking
 23916                                  ;	NAME	Dir
 23917                                  
 23918                                  ;Break	<FINDENTRY -- LOOK FOR AN ENTRY>
 23919                                  ;---------------------------------------------------------------------------
 23920                                  ;
 23921                                  ; Procedure Name : FINDENTRY,SEARCH
 23922                                  ;
 23923                                  ; Inputs:
 23924                                  ;	[THISDPB] set
 23925                                  ;	[SECCLUSPOS] = 0
 23926                                  ;	[DIRSEC] = Starting directory sector number
 23927                                  ;	[CLUSNUM] = Next cluster of directory
 23928                                  ;	[CLUSFAC] = Sectors/Cluster
 23929                                  ;	[NAME1] = Name to look for
 23930                                  ; Function:
 23931                                  ;	Find file name in disk directory.
 23932                                  ;	"?" matches any character.
 23933                                  ; Outputs:
 23934                                  ;	Carry set if name not found
 23935                                  ;	ELSE
 23936                                  ;	Zero set if attributes match (always except when creating)
 23937                                  ;	AH = Device ID (bit 7 set if not disk)
 23938                                  ;	[THISDPB] = Base of drive parameters
 23939                                  ;	DS = DOSGROUP
 23940                                  ;	ES = DOSGROUP
 23941                                  ;	[CURBUF+2]:BX = Pointer into directory buffer
 23942                                  ;	[CURBUF+2]:SI = Pointer to First Cluster field in directory entry
 23943                                  ;	[CURBUF] has directory record with match
 23944                                  ;	[NAME1] has file name
 23945                                  ;	[LASTENT] is entry number of the entry
 23946                                  ; All other registers destroyed.
 23947                                  ;----------------------------------------------------------------------------
 23948                                  
 23949                                  ;hkn; called from rename.asm and dir2.asm. DS must be already set up at
 23950                                  ;hkn; this point.
 23951                                  
 23952                                  SEARCH:
 23953                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23954                                  	; DOSCODE:7C90h (MSDOS 5.0, MSDOS.SYS) 
 23955                                  
 23956                                  	; 19/05/2019 - Retro DOS v4.0
 23957                                  	; DOSCODE:7CCA (MSDOS 6.21, MSDOS.SYS)
 23958                                  
 23959                                  	; 27/07/2018 - Retro DOS v3.0
 23960                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 45B3h 
 23961                                  	; 15/03/2018 - Retro DOS v2.0
 23962                                  
 23963                                  	; 24/01/2024
 23964                                  
 23965                                  	;entry	FindEntry
 23966                                  FINDENTRY:
 23967 00003CD0 E82B04                  	call	STARTSRCH
 23968 00003CD3 A0[6B05]                	MOV	AL,[ATTRIB]
 23969                                  	;and	al,9Eh
 23970 00003CD6 24DE                    	AND	AL,~attr_ignore		; Ignore useless bits
 23971                                  	;cmp	al,8
 23972 00003CD8 3C08                    	CMP	AL,attr_volume_id	; Looking for vol ID only ?
 23973 00003CDA 7503                    	JNZ	short NOTVOLSRCH	; No
 23974 00003CDC E86A01                  	CALL	SETROOTSRCH		; Yes force search of root
 23975                                  NOTVOLSRCH:
 23976 00003CDF E8FA00                  	CALL	GETENTRY
 23977                                  	;JNC	short SRCH
 23978                                  	;JMP	SETESRET
 23979                                  	; 24/01/2024
 23980 00003CE2 723F                    	jc	short SETESRET
 23981                                  
 23982                                  	;entry	Srch
 23983                                  SRCH:
 23984 00003CE4 1E                      	PUSH	DS
 23985 00003CE5 8E1E[E405]              	MOV	DS,[CURBUF+2]
 23986                                  
 23987                                  ;	(DS:BX) = directory entry address
 23988                                  
 23989 00003CE9 8A27                    	mov	ah,[BX]
 23990                                  	;MOV	AH,[BX+dir_entry.dir_name] ; mov ah,[bx+0]
 23991 00003CEB 08E4                    	OR	AH,AH			; End of directory?
 23992 00003CED 7437                    	JZ	short FREE
 23993                                  
 23994                                  ;hkn; SS override
 23995 00003CEF 363A26[7F05]            	CMP	AH,[SS:DELALL]		; Free entry?
 23996 00003CF4 7430                    	JZ	short FREE
 23997                                  	;test	byte [bx+0Bh],8
 23998 00003CF6 F6470B08                	TEST	byte [BX+dir_entry.dir_attr],attr_volume_id
 23999                                  					; Volume ID file?
 24000 00003CFA 7405                    	JZ	short CHKFNAM 		; NO
 24001                                  
 24002                                  ;hkn; SS override
 24003 00003CFC 36FE06[7B05]            	INC	BYTE [SS:VOLID]
 24004                                  CHKFNAM:
 24005                                  ;	Context ES
 24006 00003D01 8CD6                    	MOV	SI,SS
 24007 00003D03 8EC6                    	MOV	ES,SI
 24008 00003D05 89DE                    	MOV	SI,BX
 24009                                  
 24010                                  ;hkn; NAME1 is in DOSDATA
 24011 00003D07 BF[4B05]                	MOV	DI,NAME1
 24012                                  ;;;;; 7/29/86
 24013                                  
 24014                                  ;hkn; SS override for NAME1
 24015                                  	;CMP	BYTE [SS:NAME1],0E5H	; special char check
 24016                                  	;JNZ	short NO_E5
 24017                                  	;MOV	BYTE [SS:NAME1],05H
 24018                                  	; 22/09/2023
 24019 00003D0A 26803DE5                	cmp	byte [es:di],0E5h
 24020 00003D0E 7504                    	jnz	short NO_E5
 24021 00003D10 26C60505                	mov	byte [es:di],05h
 24022                                  NO_E5:
 24023                                  ;;;;; 7/29/86
 24024 00003D14 E86100                  	CALL	MetaCompare
 24025 00003D17 7429                    	JZ	short FOUND
 24026 00003D19 1F                      	POP	DS
 24027                                  
 24028                                  	;entry	NEXTENT
 24029                                  NEXTENT:
 24030 00003D1A C42E[8A05]              	LES	BP,[THISDPB]
 24031 00003D1E E86600                  	CALL	NEXTENTRY
 24032 00003D21 73C1                    	JNC	short SRCH
 24033                                  	;JMP	SHORT SETESRET
 24034                                  	; 24/01/2024
 24035                                  SETESRET:
 24036 00003D23 16                      	PUSH	SS
 24037 00003D24 07                      	POP	ES
 24038 00003D25 C3                      	retn
 24039                                  FREE:
 24040 00003D26 1F                      	POP	DS
 24041 00003D27 8B0E[4803]              	MOV	CX,[LASTENT]
 24042 00003D2B 3B0E[D805]              	CMP	CX,[ENTFREE]
 24043 00003D2F 7304                    	JAE	short TSTALL
 24044 00003D31 890E[D805]              	MOV	[ENTFREE],CX
 24045                                  TSTALL:
 24046 00003D35 3A26[7F05]              	CMP	AH,[DELALL]		; At end of directory?
 24047                                  NEXTENTJ:
 24048 00003D39 74DF                    	je	short NEXTENT 		; No - continue search
 24049 00003D3B 890E[DA05]              	MOV	[ENTLAST],CX
 24050 00003D3F F9                      	STC
 24051 00003D40 EBE1                    	JMP	SHORT SETESRET
 24052                                  
 24053                                  FOUND:
 24054                                  ; We have a file with a matching name. We must now consider the attributes:
 24055                                  ; ATTRIB	Action
 24056                                  ; ------	------
 24057                                  ; Volume_ID	Is Volume_ID in test?
 24058                                  ; Otherwise	If no create then Is ATTRIB+extra superset of test?
 24059                                  ;		If create then Is ATTRIB equal to test?
 24060                                  
 24061 00003D42 8A2C                    	MOV	CH,[SI] 		; Attributes of file
 24062 00003D44 1F                      	POP	DS
 24063 00003D45 8A26[6B05]              	MOV	AH,[ATTRIB]		; Attributes of search
 24064                                  	;and	ah,9Eh
 24065 00003D49 80E4DE                  	AND	AH,~attr_ignore
 24066                                  	;lea	si,[si+15]
 24067 00003D4C 8D740F                  	LEA	SI,[SI+dir_entry.dir_first-dir_entry.dir_attr]
 24068                                  					; point to first cluster field
 24069                                  	;test	ch,8
 24070 00003D4F F6C508                  	TEST	CH,attr_volume_id	; Volume ID file?
 24071 00003D52 7409                    	JZ	short check_one_volume_id ; Nope check other attributes
 24072                                  	;test	ah,8
 24073 00003D54 F6C408                  	TEST	AH,attr_volume_id	; Can we find Volume ID?
 24074                                  	;JZ	short NEXTENTJ		; Nope, (not even $FCB_CREATE)
 24075                                  	; 16/12/2022
 24076 00003D57 74C1                    	jz	short NEXTENT ; 19/05/2019
 24077                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24078                                  	;JZ	short NEXTENTJ
 24079 00003D59 30E4                    	XOR	AH,AH			; Set zero flag for $FCB_CREATE
 24080 00003D5B EB11                    	JMP	SHORT RETFF		; Found Volume ID
 24081                                  check_one_volume_id:
 24082                                  	;CMP	ah,8
 24083 00003D5D 80FC08                  	CMP	AH,attr_volume_id	; Looking only for Volume ID?
 24084                                  	;JZ	short NEXTENTJ		; Yes, continue search
 24085                                  	; 16/12/2022
 24086 00003D60 74B8                    	je	short NEXTENT ; 19/05/2019
 24087                                  	;JZ	short NEXTENTJ
 24088 00003D62 E8AD03                  	CALL	MatchAttributes
 24089 00003D65 7407                    	JZ	SHORT RETFF
 24090 00003D67 F606[7E05]FF            	TEST	BYTE [CREATING],-1	; Pass back mismatch if creating
 24091                                  	; 16/12/2022
 24092                                  	;JZ	short NEXTENTJ		; Otherwise continue searching
 24093 00003D6C 74AC                    	jz	short NEXTENT ; 19/05/2019
 24094                                  RETFF:
 24095 00003D6E C42E[8A05]              	LES	BP,[THISDPB]
 24096                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24097                                  	;MOV	AH,[ES:BP+DPB.DRIVE]  ; mov ah,[es:bp+0]
 24098                                  	; 15/12/2022
 24099 00003D72 268A6600                	MOV	AH,[ES:BP]
 24100                                  ;SETESRET:
 24101                                  	;PUSH	SS
 24102                                  	;POP	ES
 24103                                  	;retn
 24104                                  	; 24/01/2024
 24105 00003D76 EBAB                    	jmp	short SETESRET
 24106                                  
 24107                                  ;----------------------------------------------------------------------------
 24108                                  ;
 24109                                  ; Procedure Name : MetaCompare
 24110                                  ;
 24111                                  ; Inputs:
 24112                                  ;	DS:SI -> 11 character FCB style name NO '?'
 24113                                  ;	    Typically this is a directory entry. It MUST be in upper case
 24114                                  ;	ES:DI -> 11 character FCB style name with possible '?'
 24115                                  ;	    Typically this is a FCB or SFT. It MUST be in upper case
 24116                                  ; Function:
 24117                                  ;	Compare FCB style names allowing for ? match to any char
 24118                                  ; Outputs:
 24119                                  ;	Zero if match else NZ
 24120                                  ; Destroys CX,SI,DI all others preserved
 24121                                  ;----------------------------------------------------------------------------
 24122                                  
 24123                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24124                                  	; DOSCODE:7D3Fh (MSDOS 5.0, MSDOS.SYS) 
 24125                                  
 24126                                  MetaCompare:
 24127 00003D78 B90B00                  	MOV	CX,11
 24128                                  WILDCRD:
 24129 00003D7B F3A6                    	REPE	CMPSB
 24130 00003D7D 7407                    	JZ	short MetaRet 		; most of the time we will fail.
 24131                                  CHECK_META:
 24132 00003D7F 26807DFF3F              	CMP	BYTE [ES:DI-1],"?"
 24133 00003D84 74F5                    	JZ	short WILDCRD
 24134                                  MetaRet:
 24135 00003D86 C3                       	retn				; Zero set, Match
 24136                                  
 24137                                  ;Break	<NEXTENTRY -- STEP THROUGH DIRECTORY>
 24138                                  ;----------------------------------------------------------------------------
 24139                                  ;
 24140                                  ; Procedure Name : NEXTENTRY
 24141                                  ;
 24142                                  ; Inputs:
 24143                                  ;	Same as outputs of GETENTRY, above
 24144                                  ; Function:
 24145                                  ;	Update BX, and [LASTENT] for next directory entry.
 24146                                  ;	Carry set if no more.
 24147                                  ;----------------------------------------------------------------------------
 24148                                  
 24149                                  NEXTENTRY:
 24150                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24151                                  	; DOSCODE:7D4Eh (MSDOS 5.0, MSDOS.SYS) 
 24152                                  
 24153                                  	; 19/05/2019 - Retro DOS v4.0
 24154                                  	; DOSCODE:7D88h (MSDOS 6.21, MSDOS.SYS)
 24155                                  
 24156                                  	; 27/07/2018 - Retro DOS v3.0
 24157                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 4671h 
 24158                                  	; 15/03/2018 - Retro DOS v2.0
 24159                                  
 24160 00003D87 A1[4803]                	MOV	AX,[LASTENT]
 24161 00003D8A 3B06[DA05]              	CMP	AX,[ENTLAST]
 24162 00003D8E 7422                    	JZ	short NONE
 24163 00003D90 40                      	INC	AX
 24164                                  	;ADD	BX,32
 24165 00003D91 8D5F20                  	LEA	BX,[BX+32]
 24166 00003D94 39D3                    	CMP	BX,DX
 24167                                  	; 21/11/2022 - MSDOS 5.0 MSDOS.SYS (DOSCODE:7D5Dh)
 24168                                  	;JB	short HAVIT ; MSDOS 6.0 src (dir.asm)
 24169                                  	; 16/12/2022
 24170 00003D96 751C                    	jne	short HAVIT ; MSDOS 6.21 (DOSCODE:7D97h)
 24171 00003D98 8A1E[7305]              	MOV	BL,[SECCLUSPOS]
 24172 00003D9C FEC3                    	INC	BL
 24173 00003D9E 3A1E[7705]              	CMP	BL,[CLUSFAC]
 24174 00003DA2 7215                    	JB	short SAMECLUS
 24175 00003DA4 8B1E[DC05]              	MOV	BX,[NXTCLUSNUM]
 24176 00003DA8 E8D516                  	call	IsEOF
 24177 00003DAB 7305                    	JAE	short NONE
 24178                                  	; 23/07/2019
 24179 00003DAD 83FB02                  	CMP	BX,2
 24180                                  	;JB	short NONE
 24181                                  	;JMP	short GETENT
 24182                                  	; 16/12/2022
 24183 00003DB0 732D                    	jnb	short GETENT
 24184                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24185                                  	;JB	short NONE
 24186                                  	;JMP	short GETENT
 24187                                  NONE:
 24188 00003DB2 F9                      	STC
 24189 00003DB3 C3                      	retn
 24190                                  HAVIT:
 24191 00003DB4 A3[4803]                	MOV	[LASTENT],AX
 24192 00003DB7 F8                      	CLC
 24193                                  nextentry_retn:
 24194 00003DB8 C3                      	retn
 24195                                  SAMECLUS:
 24196 00003DB9 881E[7305]              	MOV	[SECCLUSPOS],BL
 24197 00003DBD A3[4803]                	MOV	[LASTENT],AX
 24198 00003DC0 1E                      	PUSH	DS
 24199 00003DC1 C53E[E205]              	LDS	DI,[CURBUF]
 24200                                  	; 19/05/2019
 24201                                  	; MSDOS 6.0
 24202                                  	;;mov	dx,[di+8]
 24203                                  	; 23/09/2023
 24204                                  	;MOV	DX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 24205                                  ;hkn; SS override
 24206                                  	;MOV	[SS:HIGH_SECTOR],DX 		;AN000; >32mb
 24207                                  	; 23/09/2023
 24208 00003DC5 8B7508                  	mov	si,[di+BUFFINFO.buf_sector+2]	
 24209                                  	
 24210                                  	;mov	dx,[di+6]
 24211 00003DC8 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector]	;AN000; >32mb
 24212                                  	;inc	dx ; MSDOS 3.3
 24213                                  	; MSDOS 6.0
 24214                                  	;ADD	DX,1				;AN000; >32mb
 24215                                  	;ADC	word [SS:HIGH_SECTOR],0 	;AN000; >32mb
 24216                                  	; 23/09/2023
 24217 00003DCB 42                      	inc	dx
 24218 00003DCC 7501                    	jnz	short nextexntry_fc
 24219 00003DCE 46                      	inc	si
 24220                                  	;inc	word [SS:HIGH_SECTOR]
 24221                                  nextexntry_fc:
 24222                                  	; 23/09/2023
 24223 00003DCF 368936[0706]            	mov	[SS:HIGH_SECTOR],si
 24224                                  	; MSDOS 3.3 & MSDOS 6.0
 24225 00003DD4 1F                      	POP	DS
 24226 00003DD5 E84AF8                  	call	FIRSTCLUSTER
 24227 00003DD8 31DB                    	XOR	BX,BX
 24228 00003DDA EB23                    	JMP	short SETENTRY
 24229                                  
 24230                                  ;----------------------------------------------------------------------------
 24231                                  ;
 24232                                  ; Procedure Name : GETENTRY
 24233                                  ;
 24234                                  ; Inputs:
 24235                                  ;	[LASTENT] has directory entry
 24236                                  ;	ES:BP points to drive parameters
 24237                                  ;	[DIRSEC],[CLUSNUM],[CLUSFAC],[ENTLAST] set for DIR involved
 24238                                  ; Function:
 24239                                  ;	Locates directory entry in preparation for search
 24240                                  ;	GETENT provides entry for passing desired entry in AX
 24241                                  ; Outputs:
 24242                                  ;	[CURBUF+2]:BX = Pointer to next directory entry in CURBUF
 24243                                  ;	[CURBUF+2]:DX = Pointer to first byte after end of CURBUF
 24244                                  ;	[LASTENT] = New directory entry number
 24245                                  ;	[NXTCLUSNUM],[SECCLUSPOS] set via DIRREAD
 24246                                  ;	Carry set if error (currently user FAILed to I 24)
 24247                                  ;----------------------------------------------------------------------------
 24248                                  
 24249                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24250                                  GETENTRY:
 24251                                  	; 27/07/2018 - Retro DOS v3.0
 24252 00003DDC A1[4803]                	MOV	AX,[LASTENT]
 24253                                  
 24254                                  	;entry	GETENT
 24255                                  GETENT:
 24256 00003DDF A3[4803]                	MOV	[LASTENT],AX
 24257                                  ;
 24258                                  ; Convert the entry number in AX into a byte offset from the beginning of the
 24259                                  ; directory.
 24260                                  ;
 24261 00003DE2 B105                    	mov	cl,5			; shift left by 5 = mult by 32
 24262 00003DE4 D3C0                    	rol	ax,cl			; keep hight order bits
 24263 00003DE6 89C2                    	mov	dx,ax
 24264                                  	; 19/05/2019 - Retro DOS v4.0
 24265                                  	;and	ax,0FFE0h
 24266                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24267                                  	;and	ax,~(32-1)		; mask off high order bits
 24268                                  	; 16/12/2022
 24269 00003DE8 24E0                    	and	al,0E0h ; ~31
 24270 00003DEA 83E21F                  	and	dx,1Fh
 24271                                  	;and	dx,32-1			; mask off low order bits
 24272                                  ;
 24273                                  ; DX:AX contain the byte offset of the required directory entry from the
 24274                                  ; beginning of the directory. Convert this to a sector number. Round the
 24275                                  ; sector size down to a multiple of 32.
 24276                                  ;
 24277                                  	;mov	bx,[es:bp+2]
 24278 00003DED 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 24279 00003DF1 80E3E0                  	and	bl,0E0h
 24280                                  	;AND	BL,255-31		; Must be multiple of 32
 24281 00003DF4 F7F3                    	DIV	BX
 24282 00003DF6 89D3                    	MOV	BX,DX			; Position within sector
 24283 00003DF8 53                      	PUSH	BX
 24284 00003DF9 E8D2F7                  	call	DIRREAD
 24285 00003DFC 5B                      	POP	BX
 24286                                  	;retc
 24287 00003DFD 72B9                    	jc	short nextentry_retn	
 24288                                  SETENTRY:
 24289 00003DFF 8B16[E205]              	MOV	DX,[CURBUF]
 24290                                  	;add	dx,16 ; MSDOS 3.3
 24291                                  	;add	dx,20 ; MSDOS 6.0 
 24292 00003E03 83C214                  	ADD	DX,BUFINSIZ
 24293 00003E06 01D3                    	ADD	BX,DX
 24294                                  	;add	dx,[es:bp+2]
 24295 00003E08 26035602                	ADD	DX,[ES:BP+DPB.SECTOR_SIZE]  ; Always clears carry
 24296                                  	; 29/12/2022
 24297                                  	; MSDOS 6.21 MSDOS.SYS contains a 'CLC' here, at DOSCODE:7E15h
 24298 00003E0C F8                      	clc
 24299 00003E0D C3                      	retn
 24300                                  
 24301                                  ;Break	<SETDIRSRCH SETROOTSRCH -- Set Search environments>
 24302                                  ;----------------------------------------------------------------------------
 24303                                  ;
 24304                                  ; Procedure Name : SETDIRSRCH,SETROOTSRCH
 24305                                  ;
 24306                                  ; Inputs:
 24307                                  ;	BX cluster number of start of directory
 24308                                  ;	ES:BP Points to DPB
 24309                                  ;	DI next cluster number from fastopen extended info. DOS 3.3 only
 24310                                  ; Function:
 24311                                  ;	Set up a directory search
 24312                                  ; Outputs:
 24313                                  ;	[DIRSTART] = BX
 24314                                  ;	[CLUSFAC],[CLUSNUM],[SECCLUSPOS],[DIRSEC] set
 24315                                  ;	Carry set if error (currently user FAILed to I 24)
 24316                                  ; destroys AX,DX,BX
 24317                                  ;----------------------------------------------------------------------------
 24318                                  
 24319                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24320                                  SETDIRSRCH:
 24321 00003E0E 09DB                    	OR	BX,BX
 24322 00003E10 7437                    	JZ	short SETROOTSRCH
 24323 00003E12 891E[C205]              	MOV	[DIRSTART],BX
 24324                                  	;mov	al,[es:bp+4]
 24325 00003E16 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 24326 00003E1A FEC0                    	INC	AL
 24327 00003E1C A2[7705]                	MOV	[CLUSFAC],AL
 24328                                  
 24329                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 24330                                  	;SAVE	<SI>
 24331 00003E1F 56                      	push	si
 24332                                  	;test	byte [FastOpenFlg],2
 24333 00003E20 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24334 00003E25 7507                    	JNZ	short UNP_OK
 24335                                  
 24336                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 24337                                  	;invoke	UNPACK
 24338 00003E27 E86D16                  	call	UNPACK
 24339 00003E2A 7302                    	JNC	short UNP_OK
 24340                                  	;RESTORE <SI>
 24341 00003E2C 5E                      	pop	si
 24342                                  	;return
 24343 00003E2D C3                      	retn
 24344                                  
 24345                                  UNP_OK:
 24346 00003E2E 893E[BC05]              	MOV	[CLUSNUM],DI
 24347 00003E32 89DA                    	MOV	DX,BX
 24348 00003E34 30DB                    	XOR	BL,BL
 24349 00003E36 881E[7305]              	MOV	[SECCLUSPOS],BL
 24350                                  	;invoke	FIGREC
 24351 00003E3A E8030F                  	call	FIGREC
 24352                                  	;RESTORE <SI>
 24353 00003E3D 5E                      	pop	si
 24354                                  	
 24355                                  	; 19/05/2019 - Retro DOS v4.0
 24356                                  
 24357                                  	; MSDOS 6.0
 24358                                  	;PUSH	DX			   ;AN000; >32mb
 24359                                  	;MOV	DX,[HIGH_SECTOR]	   ;AN000; >32mb
 24360                                  	;MOV	[DIRSEC+2],DX		   ;AN000; >32mb
 24361                                  	;POP	DX			   ;AN000; >32mb
 24362                                  
 24363                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24364                                  	;push	dx
 24365                                  	;mov	dx,[HIGH_SECTOR]
 24366                                  	;mov	[DIRSEC+2],dx
 24367                                  	;pop	dx
 24368                                  	;MOV	[DIRSEC],dx
 24369                                  	; 16/12/2022
 24370 00003E3E A1[0706]                	mov	ax,[HIGH_SECTOR]
 24371 00003E41 A3[C005]                	mov	[DIRSEC+2],AX
 24372 00003E44 8916[BE05]              	MOV	[DIRSEC],DX
 24373                                  
 24374                                  	; 16/12/2022
 24375                                  	; cf=0 (at the return of FIGREC)
 24376                                  	;CLC
 24377 00003E48 C3                      	retn
 24378                                  
 24379                                  	;entry	SETROOTSRCH
 24380                                  SETROOTSRCH:
 24381 00003E49 31C0                    	XOR	AX,AX
 24382 00003E4B A3[C205]                	MOV	[DIRSTART],AX
 24383                                  	; 22/09/2023
 24384 00003E4E A3[C005]                	mov	[DIRSEC+2],ax ; 0
 24385 00003E51 A2[7305]                	MOV	[SECCLUSPOS],AL
 24386 00003E54 48                      	DEC	AX
 24387 00003E55 A3[BC05]                	MOV	[CLUSNUM],AX
 24388                                  	;mov	ax,[es:bp+0Bh]
 24389 00003E58 268B460B                	MOV	AX,[ES:BP+DPB.FIRST_SECTOR]
 24390                                  	; 19/05/2019
 24391                                  	;;mov	dx,[es:bp+10h] ; MSDOS 3.3
 24392                                  	;mov	dx,[es:bp+11h] ; MSDOS 6.0
 24393 00003E5C 268B5611                	MOV	DX,[ES:BP+DPB.DIR_SECTOR]
 24394 00003E60 29D0                    	SUB	AX,DX
 24395 00003E62 A2[7705]                	MOV	[CLUSFAC],AL
 24396 00003E65 8916[BE05]              	MOV	[DIRSEC],DX		      ;F.C. >32mb
 24397                                  	; 22/09/2023
 24398                                  	; MSDOS 6.0
 24399                                  	;MOV	WORD [DIRSEC+2],0	      ;F.C. >32mb
 24400 00003E69 F8                      	CLC
 24401 00003E6A C3                      	retn
 24402                                  
 24403                                  ;============================================================================
 24404                                  ; DIR2.ASM, MSDOS 6.0, 1991
 24405                                  ;============================================================================
 24406                                  ; 27/07/2018 - Retro DOS v3.0
 24407                                  ; 19/05/2019 - Retro DOS v4.0 
 24408                                  
 24409                                  ;	TITLE	DIR2 - Directory and path cracking
 24410                                  ;	NAME	Dir2
 24411                                  
 24412                                  ;Break	<GETPATH -- PARSE A WFP>
 24413                                  ;----------------------------------------------------------------------------
 24414                                  ;
 24415                                  ; Procedure Name : GETPATH
 24416                                  ;
 24417                                  ; Inputs:
 24418                                  ;	[WFP_START] Points to WFP string ("d:\" must be first 3 chars, NUL
 24419                                  ;		terminated; d:/ (note forward slash) indicates a real device).
 24420                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 24421                                  ;		( = -1 if current dir not involved, else
 24422                                  ;		 Points to first char after last "/" of current dir part)
 24423                                  ;	[THISCDS] Points to CDS being used
 24424                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 24425                                  ;	[NoSetDir] set
 24426                                  ;	[THISDPB] set to DPB if disk otherwise garbage.
 24427                                  ; Function:
 24428                                  ;	Crack the path
 24429                                  ; Outputs:
 24430                                  ;	Sets EXTERR_LOCUS = errLOC_Disk if disk file
 24431                                  ;	Sets EXTERR_LOCUS = errLOC_Unk if char device
 24432                                  ;	ID1 field of [THISCDS] updated appropriately
 24433                                  ;	[ATTRIB] = [SATTRIB]
 24434                                  ;	ES:BP Points to DPB
 24435                                  ;	Carry set if bad path
 24436                                  ;	   SI Points to path element causing failure
 24437                                  ;	   Zero set
 24438                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 24439                                  ;	      start a search on the last directory
 24440                                  ;	      CL is zero if there is a bad name in the path
 24441                                  ;	      CL is non-zero if the name was simply not found
 24442                                  ;		 [ENTFREE] may have free spot in directory
 24443                                  ;		 [NAME1] is the name.
 24444                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 24445                                  ;	   Zero reset
 24446                                  ;	      File in middle of path or bad name in path or attribute mismatch
 24447                                  ;		or path too long or malformed path
 24448                                  ;	ELSE
 24449                                  ;	   [CurBuf] = -1 if root directory
 24450                                  ;	   [CURBUF] contains directory record with match
 24451                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 24452                                  ;	   [CURBUF+2]:SI Points into [CURBUF] to dir_first field for entry
 24453                                  ;	   AH = device ID
 24454                                  ;	      bit 7 of AH set if device SI and BX
 24455                                  ;	      will point DOSGROUP relative The firclus
 24456                                  ;	      field of the device entry contains the device pointer
 24457                                  ;	   [NAME1] Has name looked for
 24458                                  ;	   If last element is a directory zero is set and:
 24459                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 24460                                  ;	      are set up to start a search on it.
 24461                                  ;	      unless [NoSetDir] is non zero in which case the return is
 24462                                  ;	      like that for a file (except for zero flag)
 24463                                  ;	   If last element is a file zero is reset
 24464                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 24465                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 24466                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 24467                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 24468                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 24469                                  ; DS preserved, Others destroyed
 24470                                  ;---------------------------------------------------------------------------
 24471                                  
 24472                                  ;hkn; called from delete.asm, finfo.asm, mknode.asm and rename.asm.
 24473                                  ;hkn; DS already set up at this point.
 24474                                  
 24475                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24476                                  GETPATH:
 24477                                  	;mov	word [CREATING],0E500h
 24478 00003E6B C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Not Creating, not DEL *.*
 24479                                  
 24480                                  ; Same as GetPath only CREATING and DELALL already set
 24481                                  
 24482                                  	;entry	GetPathNoSet
 24483                                  GetPathNoSet:
 24484                                  	;mov	byte [EXTERR_LOCUS],2	
 24485 00003E71 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 24486 00003E76 C706[E205]FFFF          	MOV	word [CURBUF],-1	; initial setting
 24487                                  
 24488                                  ; See if the input indicates a device that has already been detected. If so,
 24489                                  ; go build the guy quickly. Otherwise, let findpath find the device.
 24490                                  
 24491 00003E7C 8B3E[B205]              	MOV	DI,[WFP_START]		; point to the beginning of the name
 24492                                  	;cmp	word [DI+1],5C3Ah
 24493                                  	;CMP	WORD [DI+1],'\' << 8 + ':'
 24494 00003E80 817D013A5C              	cmp	word [DI+1],':\'
 24495 00003E85 7438                    	JZ	short CrackIt
 24496                                  
 24497                                  ; Let ChkDev find it in the device list
 24498                                  
 24499 00003E87 83C703                  	ADD	DI,3
 24500                                  	; 18/08/2018
 24501                                  	;MOV	SI,DI			; let CHKDEV see the original name
 24502                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24503                                  	; 16/12/2022
 24504                                  	;mov	si,di ; not required ! (it is written in CHKDEV proc already!)
 24505 00003E8A E8AB00                  	CALL	CHKDEV
 24506 00003E8D 722E                    	JC	short InternalError
 24507                                  
 24508                                  Build_devJ:
 24509 00003E8F A0[6D05]                	MOV	AL,[SATTRIB]
 24510 00003E92 A2[6B05]                	MOV	[ATTRIB],AL
 24511                                  	;mov	byte [EXTERR_LOCUS],1
 24512 00003E95 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; In the particular case of
 24513                                  					; "finding" a char device
 24514                                  					; set LOCUS to Unknown. This makes
 24515                                  					; certain idiotic problems reported
 24516                                  					; by a certain 3 letter OEM go away.
 24517                                  
 24518                                  ; Take name in name1 and pack it back into where wfp_start points. This
 24519                                  ; guarantees wfp_start pointing to a canonical representation of a device.
 24520                                  ; We are allowed to do this as GetPath is *ALWAYS* called before entering a
 24521                                  ; wfp into the share set.
 24522                                  ;
 24523                                  ; We copy chars from name1 to wfp_start remembering the position of the last
 24524                                  ; non-space seen +1.  This position is kept in DX.
 24525                                  
 24526                                  ;hkn; SS is DOSDATA
 24527 00003E9A 16                      	push	ss
 24528 00003E9B 07                      	pop	es
 24529                                  
 24530                                  ;hkn; NAME1 is in DOSDATA
 24531 00003E9C BE[4B05]                	mov	si,NAME1
 24532 00003E9F 8B3E[B205]              	mov	di,[WFP_START]
 24533 00003EA3 89FA                    	mov	dx,di
 24534 00003EA5 B90800                  	mov	cx,8			; 8 chars in device name
 24535                                  MoveLoop:
 24536 00003EA8 AC                      	lodsb
 24537 00003EA9 AA                      	stosb
 24538 00003EAA 3C20                    	cmp	al," "
 24539 00003EAC 7402                    	jz	short NoSave
 24540                                  
 24541 00003EAE 89FA                    	mov	dx,di
 24542                                  NoSave:
 24543 00003EB0 E2F6                    	loop	MoveLoop
 24544                                  
 24545                                  ; DX is the position of the last seen non-space + 1. We terminate the name
 24546                                  ; at this point.
 24547                                  
 24548 00003EB2 89D7                    	mov	di,dx
 24549 00003EB4 C60500                  	mov	byte [di],0		; end of string
 24550 00003EB7 E8C402                  	call	Build_device_ent	; Clears carry sets zero
 24551 00003EBA FEC0                    	INC	AL			; reset zero
 24552 00003EBC C3                      	retn
 24553                                  
 24554                                  InternalError:
 24555                                  InternalError_loop:
 24556 00003EBD EBFE                    	JMP	short InternalError_loop	; freeze
 24557                                  
 24558                                  ; Start off at the correct spot. Optimize if the current dir part is valid.
 24559                                  
 24560                                  CrackIt:
 24561 00003EBF 8B36[B605]              	MOV	SI,[CURR_DIR_END]	; get current directory pointer
 24562 00003EC3 83FEFF                  	CMP	SI,-1			; valid?
 24563 00003EC6 7503                    	JNZ	short LOOK_SING		; Yes, use it.
 24564 00003EC8 8D7503                  	LEA	SI,[DI+3]		; skip D:\.
 24565                                  LOOK_SING:
 24566                                  	;mov	byte [ATTRIB],16h
 24567 00003ECB C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_system+attr_hidden
 24568                                  					; Attributes to search through Dirs
 24569 00003ED0 C43E[A205]              	LES	DI,[THISCDS]
 24570 00003ED4 B8FFFF                  	MOV	AX,-1
 24571                                  	;mov	bx,[es:di+73]
 24572 00003ED7 268B5D49                	MOV	BX,[ES:DI+curdir.ID]
 24573 00003EDB 8B36[B605]              	MOV	SI,[CURR_DIR_END]
 24574                                  
 24575                                  ; AX = -1
 24576                                  ; BX = cluster number of current directory. THis number is -1 if the media
 24577                                  ;      has been uncertainly changed.
 24578                                  ; SI = offset in DOSGroup into path to end of current directory text. This
 24579                                  ;      may be -1 if no current directory part has been used.
 24580                                  
 24581 00003EDF 39C6                    	CMP	SI,AX			; if Current directory is not part
 24582 00003EE1 743B                    	JZ	short NO_CURR_D		; then we must crack from root
 24583 00003EE3 39C3                    	CMP	BX,AX			; is the current directory cluster valid
 24584                                  
 24585                                  ; DOS 3.3  6/25/86
 24586 00003EE5 7437                    	JZ	short NO_CURR_D		; no, crack form the root
 24587                                  	;test	byte [FastOpenFlg],1
 24588 00003EE7 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ; for fastopen ?
 24589 00003EEC 743D                    	JZ	short GOT_SEARCH_CLUSTER	; no
 24590 00003EEE 06                      	PUSH	ES			; save registers
 24591 00003EEF 57                      	PUSH	DI
 24592 00003EF0 51                      	PUSH	CX
 24593 00003EF1 FF74FF                  	PUSH	word [SI-1]		; save \ and 1st char of next element
 24594 00003EF4 56                      	PUSH	SI
 24595 00003EF5 53                      	PUSH	BX
 24596                                  
 24597 00003EF6 C644FF00                	MOV	BYTE [SI-1],0		; call fastopen to look up cur dir info
 24598 00003EFA 8B36[B205]              	MOV	SI,[WFP_START]
 24599                                  
 24600                                  ;hkn; FastOpenTable, Dir_Info_Buff & FastOpen_Ext_Info are in DOSDATA
 24601 00003EFE BB[300D]                	MOV	BX,FastOpenTable
 24602 00003F01 BF[460D]                	MOV	DI,Dir_Info_Buff
 24603 00003F04 B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 24604                                  	;mov	al,1
 24605 00003F07 B001                    	MOV	AL,FONC_Look_up
 24606 00003F09 1E                      	PUSH	DS
 24607 00003F0A 07                      	POP	ES
 24608                                  	;call	far [BX+2]
 24609 00003F0B FF5F02                  	CALL	far [BX+fastopen_entry.name_caching]
 24610 00003F0E 7203                    	JC	short GO_Chk_end1 	;fastopen not installed, or wrong drive.
 24611                                  					; Go to Got_Srch_cluster
 24612                                  	; 29/12/2022
 24613                                  	;CMP	BYTE [SI],0		;fastopen has current dir info?
 24614                                  	;JE	short GO_Chk_end	;yes. Go to got_search_cluster
 24615                                  	;stc
 24616                                  	;jmp	short GO_Chk_end	;Go to No_Curr_D
 24617                                  
 24618 00003F10 803C01                  	cmp	byte [si],1
 24619                                  GO_Chk_end1:	; 29/12/2022
 24620 00003F13 F5                      	cmc 
 24621                                  	; [si] = 0 -> cf = 0
 24622                                  	; [si] > 0 -> cf = 1
 24623                                  
 24624                                  ;GO_Chk_end1:
 24625                                  	; 29/12/2022
 24626                                  	;clc
 24627                                  
 24628                                  GO_Chk_end:				; restore registers
 24629 00003F14 5B                      	POP	BX
 24630 00003F15 5E                      	POP	SI
 24631 00003F16 8F44FF                  	POP	word [SI-1]
 24632 00003F19 59                      	POP	CX
 24633 00003F1A 5F                      	POP	DI
 24634 00003F1B 07                      	POP	ES
 24635 00003F1C 730D                    	JNC	short GOT_SEARCH_CLUSTER ; crack based on cur dir
 24636                                  
 24637                                  ; DOS 3.3  6/25/86
 24638                                  ;
 24639                                  ; We must cract the path beginning at the root. Advance pointer to beginning
 24640                                  ; of path and go crack from root.
 24641                                  
 24642                                  NO_CURR_D:
 24643 00003F1E 8B36[B205]              	MOV	SI,[WFP_START]
 24644 00003F22 8D7403                  	LEA	SI,[SI+3]		; Skip "d:/"
 24645 00003F25 C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 24646 00003F29 EB3B                    	JMP	short ROOTPATH
 24647                                  
 24648                                  ; We are able to crack from the current directory part. Go set up for search
 24649                                  ; of specified cluster.
 24650                                  
 24651                                  GOT_SEARCH_CLUSTER:
 24652 00003F2B C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 24653 00003F2F E8DCFE                  	call	SETDIRSRCH
 24654                                  	;JC	short SETFERR
 24655                                  	;JMP	short FINDPATH
 24656                                  	; 16/12/2022
 24657 00003F32 7342                    	jnc	short FINDPATH ; 17/08/2018
 24658                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24659                                  	;JC	short SETFERR
 24660                                  	;JMP	short FINDPATH
 24661                                  SETFERR:
 24662 00003F34 30C9                    	XOR	CL,CL			; set zero
 24663 00003F36 F9                      	STC
 24664 00003F37 C3                      	retn
 24665                                  
 24666                                  ;---------------------------------------------------------------------------
 24667                                  ;
 24668                                  ; Procedure Name : ChkDev
 24669                                  ;
 24670                                  ; Check to see if the name at DS:DI is a device. Returns carry set if not a
 24671                                  ;   device.
 24672                                  ; Blasts CX,SI,DI,AX,BX
 24673                                  ;---------------------------------------------------------------------------
 24674                                  
 24675                                  CHKDEV:
 24676 00003F38 89FE                    	MOV	SI,DI
 24677 00003F3A 8CD7                    	MOV	DI,SS
 24678 00003F3C 8EC7                    	MOV	ES,DI
 24679                                  
 24680 00003F3E BF[4B05]                	MOV	DI,NAME1
 24681 00003F41 B90900                  	MOV	CX,9
 24682                                  TESTLOOP:
 24683 00003F44 E85710                  	call	GETLET
 24684                                  
 24685 00003F47 3C2E                    	CMP	AL,'.'
 24686 00003F49 740E                    	JZ	short TESTDEVICE
 24687 00003F4B E8A610                  	call	PATHCHRCMP
 24688 00003F4E 7407                    	JZ	short NOTDEV
 24689 00003F50 08C0                    	OR	AL,AL
 24690 00003F52 7405                    	JZ	short TESTDEVICE
 24691                                  
 24692 00003F54 AA                      	STOSB
 24693 00003F55 E2ED                    	LOOP	TESTLOOP
 24694                                  NOTDEV:
 24695 00003F57 F9                      	STC
 24696 00003F58 C3                      	retn
 24697                                  
 24698                                  TESTDEVICE:
 24699                                  	;ADD	CX,2
 24700                                  	; 24/09/2023
 24701 00003F59 41                      	inc	cx
 24702 00003F5A 41                      	inc	cx
 24703 00003F5B B020                    	MOV	AL,' '
 24704 00003F5D F3AA                    	REP	STOSB
 24705 00003F5F 8CD0                    	MOV	AX,SS
 24706 00003F61 8ED8                    	MOV	DS,AX
 24707                                  	;call	DEVNAME
 24708                                  	;retn
 24709                                  	; 18/12/2022
 24710 00003F63 E9B901                  	jmp	DEVNAME
 24711                                  
 24712                                  ;Break	<ROOTPATH, FINDPATH -- PARSE A PATH>
 24713                                  ;----------------------------------------------------------------------------
 24714                                  ;
 24715                                  ; Procedure Name : ROOTPATH,FINDPATH
 24716                                  ;
 24717                                  ; Inputs:
 24718                                  ;	Same as FINDPATH but,
 24719                                  ;	SI Points to asciz string of path which is assumed to start at
 24720                                  ;		the root (no leading '/').
 24721                                  ; Function:
 24722                                  ;	Search from root for path
 24723                                  ; Outputs:
 24724                                  ;	Same as FINDPATH but:
 24725                                  ;	If root directory specified, [CURBUF] and [NAME1] are NOT set, and
 24726                                  ;	[NoSetDir] is ignored.
 24727                                  ;----------------------------------------------------------------------------
 24728                                  
 24729                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24730                                  	; DOSCODE:7F47h (MSDOS 5.0, MSDOS.SYS)
 24731                                  
 24732                                  ROOTPATH:
 24733 00003F66 E8E0FE                  	call	SETROOTSRCH
 24734                                  	; 24/09/2023
 24735 00003F69 30E4                    	xor	ah,ah
 24736                                  	;CMP	BYTE [SI],0
 24737 00003F6B 3824                    	cmp	[si],ah ; 0
 24738 00003F6D 7507                    	JNZ	short FINDPATH
 24739                                  
 24740                                  ; Root dir specified
 24741 00003F6F A0[6D05]                	MOV	AL,[SATTRIB]
 24742 00003F72 A2[6B05]                	MOV	[ATTRIB],AL
 24743                                  	; 24/09/2023
 24744                                  	;XOR	AH,AH			; Sets "device ID" byte, sets zero
 24745                                  					; (dir), clears carry.
 24746 00003F75 C3                      	retn
 24747                                  
 24748                                  ; Inputs:
 24749                                  ;	[ATTRIB] Set to get through directories
 24750                                  ;	[SATTRIB] Set to find last element
 24751                                  ;	ES:BP Points to DPB
 24752                                  ;	SI Points to asciz string of path (no leading '/').
 24753                                  ;	[SECCLUSPOS] = 0
 24754                                  ;	[DIRSEC] = Phys sec # of first sector of directory
 24755                                  ;	[CLUSNUM] = Cluster # of next cluster
 24756                                  ;	[CLUSFAC] = Sectors per cluster
 24757                                  ;	[NoSetDir] set
 24758                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 24759                                  ;		( = -1 if current dir not involved, else
 24760                                  ;		 Points to first char after last "/" of current dir part)
 24761                                  ;	[THISCDS] Points to CDS being used
 24762                                  ;	[CREATING] and [DELALL] set
 24763                                  ; Function:
 24764                                  ;	Parse path name
 24765                                  ; Outputs:
 24766                                  ;	ID1 field of [THISCDS] updated appropriately
 24767                                  ;	[ATTRIB] = [SATTRIB]
 24768                                  ;	ES:BP Points to DPB
 24769                                  ;	[THISDPB] = ES:BP
 24770                                  ;	Carry set if bad path
 24771                                  ;	   SI Points to path element causing failure
 24772                                  ;	   Zero set
 24773                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 24774                                  ;	      start a search on the last directory
 24775                                  ;	      CL is zero if there is a bad name in the path
 24776                                  ;	      CL is non-zero if the name was simply not found
 24777                                  ;		 [ENTFREE] may have free spot in directory
 24778                                  ;		 [NAME1] is the name.
 24779                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 24780                                  ;	   Zero reset
 24781                                  ;	      File in middle of path or bad name in path
 24782                                  ;		or path too long or malformed path
 24783                                  ;	ELSE
 24784                                  ;	   [CURBUF] contains directory record with match
 24785                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 24786                                  ;	   [CURBUF+2]:SI Points to fcb_FIRCLUS field for entry
 24787                                  ;	   [NAME1] Has name looked for
 24788                                  ;	   AH = device ID
 24789                                  ;	      bit 7 of AH set if device SI and BX
 24790                                  ;	      will point DOSGROUP relative The firclus
 24791                                  ;	      field of the device entry contains the device pointer
 24792                                  ;	   If last element is a directory zero is set and:
 24793                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 24794                                  ;	      are set up to start a search on it,
 24795                                  ;	      unless [NoSetDir] is non zero in which case the return is
 24796                                  ;	      like that for a file (except for zero flag)
 24797                                  ;	   If last element is a file zero is reset
 24798                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 24799                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 24800                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 24801                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 24802                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 24803                                  ; Destroys all other registers
 24804                                  
 24805                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24806                                  	; DOSCODE:7F58h (MSDOS 5.0, MSDOS.SYS)
 24807                                  
 24808                                      	;entry	FINDPATH
 24809                                  FINDPATH:
 24810 00003F76 06                      	PUSH	ES			; Save ES:BP
 24811 00003F77 56                      	PUSH	SI
 24812 00003F78 89F7                    	MOV	DI,SI
 24813 00003F7A 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get start clus of dir being searched
 24814 00003F7E 833E[B605]FF            	CMP	word [CURR_DIR_END],-1
 24815 00003F83 740E                    	JZ	short NOIDS		; No current dir part
 24816 00003F85 3B3E[B605]              	CMP	DI,[CURR_DIR_END]
 24817 00003F89 7508                    	JNZ	short NOIDS		; Not to current dir end yet
 24818 00003F8B C43E[A205]              	LES	DI,[THISCDS]
 24819                                  	;mov	[es:di+73],cx
 24820 00003F8F 26894D49                	MOV	[ES:DI+curdir.ID],CX	; Set current directory currency
 24821                                  NOIDS:
 24822                                  
 24823                                  ; Parse the name off of DS:SI into NAME1. AL = 1 if there was a meta
 24824                                  ; character in the string. CX,DI may be destroyed.
 24825                                  ;
 24826                                  ;	invoke	NAMETRANS
 24827                                  ;	MOV	CL,AL
 24828                                  ;
 24829                                  ; The above is the slow method. The name has *already* been munged by
 24830                                  ; TransPath so no special casing needs to be done. All we do is try to copy
 24831                                  ; the name until ., \ or 0 is hit.
 24832                                  
 24833 00003F93 8CD0                    	MOV	AX,SS
 24834 00003F95 8EC0                    	MOV	ES,AX
 24835                                  
 24836                                  ;hkn; Name1 is in DOSDATA
 24837 00003F97 BF[4B05]                	MOV	DI,NAME1
 24838 00003F9A B82020                  	MOV	AX,'  ' ; 2020h
 24839 00003F9D AA                      	STOSB
 24840 00003F9E AB                      	STOSW
 24841 00003F9F AB                      	STOSW
 24842 00003FA0 AB                      	STOSW
 24843 00003FA1 AB                      	STOSW
 24844 00003FA2 AB                      	STOSW
 24845                                  
 24846                                  ;hkn; Name1 is in DOSDATA
 24847 00003FA3 BF[4B05]                	MOV	DI,NAME1
 24848 00003FA6 30E4                    	XOR	AH,AH			; bits for CL
 24849                                  GetNam:
 24850                                  	; 19/05/2019 - Retro DOS v4.0
 24851                                  	;INC	CL ; ?*! ; MSDOS 6.0	;AN000; KK increment volid count
 24852                                  
 24853                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24854                                  	; 16/12/2022
 24855                                  	;inc	cl ; not required !	
 24856                                  	
 24857 00003FA8 AC                      	LODSB
 24858 00003FA9 3C2E                    	CMP	AL,'.'	; 2Eh
 24859 00003FAB 7412                    	JZ	short _SetExt
 24860 00003FAD 08C0                    	OR	AL,AL
 24861 00003FAF 7424                    	JZ	short _GetDone
 24862 00003FB1 3C5C                    	CMP	AL,'\'	; 5Ch
 24863 00003FB3 7420                    	JZ	short _GetDone
 24864 00003FB5 3C3F                    	CMP	AL,'?'	; 3Fh
 24865 00003FB7 7503                    	JNZ	short StoNam
 24866 00003FB9 80CC01                  	OR	AH,1
 24867                                  StoNam: 
 24868 00003FBC AA                      	STOSB
 24869 00003FBD EBE9                    	JMP	short GetNam
 24870                                  _SetExt:
 24871 00003FBF BF[5305]                	MOV	DI,NAME1+8
 24872                                  GetExt:
 24873 00003FC2 AC                      	LODSB
 24874 00003FC3 08C0                    	OR	AL,AL
 24875 00003FC5 740E                    	JZ	short _GetDone
 24876 00003FC7 3C5C                    	CMP	AL,'\'
 24877 00003FC9 740A                    	JZ	short _GetDone
 24878 00003FCB 3C3F                    	CMP	AL,'?'
 24879 00003FCD 7503                    	JNZ	short StoExt
 24880 00003FCF 80CC01                  	OR	AH,1
 24881                                  StoExt: 
 24882 00003FD2 AA                      	STOSB
 24883 00003FD3 EBED                    	JMP	short GetExt
 24884                                  _GetDone:
 24885 00003FD5 4E                      	DEC	SI
 24886 00003FD6 88E1                    	MOV	CL,AH  ; 0 or 1 ; 29/12/2022
 24887 00003FD8 80C980                  	OR	CL,80H
 24888 00003FDB 5F                      	POP	DI			; Start of this element
 24889 00003FDC 07                      	POP	ES			; Restore ES:BP
 24890 00003FDD 39FE                    	CMP	SI,DI
 24891 00003FDF 7503                    	JNZ	short check_device
 24892 00003FE1 E9E200                  	JMP	_BADPATH		; NUL parse (two delims most likely)
 24893                                  check_device:
 24894 00003FE4 56                      	PUSH	SI			; Start of next element
 24895                                  	;MOV	AL,[SI]
 24896                                  	;OR	AL,AL
 24897                                  	; 23/09/2023
 24898 00003FE5 803C00                  	cmp	byte [si],0
 24899 00003FE8 7508                    	JNZ	short NOT_LAST
 24900                                  
 24901                                  ; for last element of the path switch to the correct search attributes
 24902                                  
 24903 00003FEA 8A3E[6D05]              	MOV	BH,[SATTRIB]
 24904 00003FEE 883E[6B05]              	MOV	[ATTRIB],BH
 24905                                  
 24906                                  NOT_LAST:
 24907                                  
 24908                                  ; check name1 to see if we have a device...
 24909                                  
 24910 00003FF2 06                      	PUSH	ES			; Save ES:BP
 24911                                  
 24912                                  ;hkn; SS is DOSDATA
 24913                                  	;context ES
 24914 00003FF3 16                      	push	ss
 24915 00003FF4 07                      	pop	es
 24916 00003FF5 E82701                  	call	DEVNAME 		; blast BX
 24917 00003FF8 07                      	POP	ES			; Restore ES:BP
 24918 00003FF9 720B                    	JC	short FindFile		; Not a device
 24919 00003FFB 08C0                    	OR	AL,AL			; Test next char again
 24920 00003FFD 7403                    	JZ	short GO_BDEV
 24921 00003FFF E9C800                  	JMP	FILEINPATH		; Device name in middle of path
 24922                                  
 24923                                  GO_BDEV:
 24924 00004002 5E                      	POP	SI			; Points to NUL at end of path
 24925 00004003 E989FE                  	JMP	Build_devJ
 24926                                  
 24927                                  FindFile:
 24928                                  ;;;; 7/28/86
 24929 00004006 803E[4B05]E5            	CMP	BYTE [NAME1],0E5H	; if 1st char = E5
 24930 0000400B 7505                    	JNZ	short NOE5		; no
 24931 0000400D C606[4B05]05            	MOV	BYTE [NAME1],05H	; change it to 05
 24932                                  NOE5:
 24933                                  ;;;; 7/28/86
 24934 00004012 57                      	PUSH	DI			; Start of this element
 24935 00004013 06                      	PUSH	ES			; Save ES:BP
 24936 00004014 51                      	PUSH	CX			; CL return from NameTrans
 24937                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24938                                  
 24939 00004015 E89502                  	CALL	LookupPath		; call fastopen to get dir entry
 24940 00004018 7303                    	JNC	short DIR_FOUND		; found dir entry
 24941                                  
 24942                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24943 0000401A E8B3FC                  	call	FINDENTRY
 24944                                  DIR_FOUND:
 24945 0000401D 59                      	POP	CX
 24946 0000401E 07                      	POP	ES
 24947 0000401F 5F                      	POP	DI
 24948 00004020 7303                    	JNC	short LOAD_BUF
 24949 00004022 E9CA00                  	JMP	BADPATHPOP
 24950                                  
 24951                                  LOAD_BUF:
 24952 00004025 C53E[E205]              	LDS	DI,[CURBUF]
 24953                                  	;test	byte [bx+0Bh],10h
 24954 00004029 F6470B10                	TEST	BYTE [BX+dir_entry.dir_attr],attr_directory
 24955 0000402D 7503                    	JNZ	short GO_NEXT 		; DOS 3.3
 24956 0000402F E99800                  	JMP	FILEINPATH		; Error or end of path
 24957                                  
 24958                                  ; if we are not setting the directory, then check for end of string
 24959                                  
 24960                                  GO_NEXT:
 24961                                  ;hkn; SS override
 24962 00004032 36803E[4C03]00          	CMP	BYTE [SS:NoSetDir],0
 24963 00004038 7423                    	JZ	short SetDir
 24964 0000403A 89FA                    	MOV	DX,DI			; Save pointer to entry
 24965 0000403C 8CD9                    	MOV	CX,DS
 24966                                  
 24967                                  ;hkn; SS is DOSDATA
 24968                                  	;context DS
 24969 0000403E 16                      	push	ss
 24970 0000403F 1F                      	pop	ds
 24971 00004040 5F                      	POP	DI			; Start of next element
 24972                                  	; 19/05/2019 - Retro DOS v4.0
 24973                                  	; MSDOS 6.0
 24974 00004041 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 24975 00004046 740B                    	JZ	short _nofast			; the FastOpen
 24976 00004048 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success ; Lookup just happened
 24977 0000404D 7404                    	JZ	short _nofast			; no
 24978 0000404F 8B3E[660D]              	MOV	DI,[Next_Element_Start]	; no need to insert it again
 24979                                  _nofast:
 24980 00004053 803D00                  	CMP	BYTE [DI],0
 24981                                  	;;JNZ	short NEXT_ONE		; DOS 3.3
 24982                                  	;;JMP	_SETRET  ; retn		; Got it
 24983                                  	;retn	; 05/09/2018
 24984                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24985                                  	;jmp	_SETRET
 24986                                  	; 16/12/2022
 24987 00004056 7421                    	jz	short _SETRET
 24988                                  
 24989                                  NEXT_ONE:
 24990 00004058 57                      	PUSH	DI			; Put start of next element back on stack
 24991 00004059 89D7                    	MOV	DI,DX
 24992 0000405B 8ED9                    	MOV	DS,CX			; Get back pointer to entry
 24993                                  SetDir:
 24994 0000405D 8B14                    	MOV	DX,[SI] 		; Dir_first
 24995                                  
 24996                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24997 0000405F 1E                      	PUSH	DS		      ; save [curbuf+2]
 24998                                  ;hkn; SS is DOSDATA
 24999 00004060 16                      	push	ss
 25000 00004061 1F                      	pop	ds		      ; set DS Dosgroup
 25001                                  	;test	byte [FastOpenFlg],2
 25002 00004062 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 25003 00004067 7411                    	JZ	short DO_NORMAL	      ; fastopen not in memory or path not
 25004 00004069 89D3                    	MOV	BX,DX		      ; not found
 25005 0000406B 8B3E[BC05]              	MOV	DI,[CLUSNUM]	      ; clusnum was set in LookupPath
 25006 0000406F 50                      	PUSH	AX		      ; save device id (AH)
 25007 00004070 E89BFD                  	call	SETDIRSRCH
 25008 00004073 58                      	POP	AX		      ; restore device id (AH)
 25009 00004074 83C402                  	ADD	SP,2		      ; pop ds in stack
 25010 00004077 EB37                    	JMP	short FAST_OPEN_SKIP
 25011                                  
 25012                                  	; 16/12/2022
 25013                                  _SETRET:
 25014 00004079 C3                      	retn
 25015                                  
 25016                                  DO_NORMAL:
 25017 0000407A 1F                      	POP	DS			; DS = [curbuf + 2]
 25018                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 25019                                  
 25020 0000407B 29FB                    	SUB	BX,DI			; Offset into sector of start of entry
 25021 0000407D 29FE                    	SUB	SI,DI			; Offset into sector of dir_first
 25022 0000407F 53                      	PUSH	BX
 25023 00004080 50                      	PUSH	AX
 25024 00004081 56                      	PUSH	SI
 25025 00004082 51                      	PUSH	CX
 25026                                  	;push	word [di+6]
 25027 00004083 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector]	;AN000;>32mb
 25028                                  	; 19/05/2019
 25029                                  	; MSDOS 6.0
 25030                                  	;push	word [di+8]
 25031 00004086 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;AN000;>32mb
 25032 00004089 89D3                    	MOV	BX,DX
 25033                                  
 25034                                  ;hkn; SS is DOSDATA
 25035                                  	;context DS
 25036 0000408B 16                      	push	ss
 25037 0000408C 1F                      	pop	ds
 25038                                  	;invoke	SETDIRSRCH		; This uses UNPACK which might blow
 25039 0000408D E87EFD                  	call	SETDIRSRCH		; the entry sector buffer
 25040                                  	; 19/05/2019
 25041                                  	; MSDOS 6.0
 25042 00004090 8F06[0706]              	POP	word [HIGH_SECTOR]
 25043 00004094 5A                      	POP	DX
 25044 00004095 7203                    	JC	short SKIP_GETB
 25045                                  	; 22/09/2023
 25046                                  	;;mov	byte [ALLOWED],18h
 25047                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 25048                                  	;XOR	AL,AL ; *
 25049                                  	;;invoke GETBUFFR		; Get the entry buffer back
 25050                                  	;call	GETBUFFR
 25051 00004097 E80818                  	call	GETBUFFER ; * ; pre-read
 25052                                  SKIP_GETB:
 25053 0000409A 59                      	POP	CX
 25054 0000409B 5E                      	POP	SI
 25055 0000409C 58                      	POP	AX
 25056 0000409D 5B                      	POP	BX
 25057 0000409E 7305                    	JNC	short SET_THE_BUF
 25058 000040A0 5F                      	POP	DI			; Start of next element
 25059 000040A1 89FE                    	MOV	SI,DI			; Point with SI
 25060 000040A3 EB21                    	JMP	SHORT _BADPATH
 25061                                  
 25062                                  SET_THE_BUF:
 25063 000040A5 E87FF5                  	call	SET_BUF_AS_DIR
 25064 000040A8 8B3E[E205]              	MOV	DI,[CURBUF]
 25065 000040AC 01FE                    	ADD	SI,DI			; Get the offsets back
 25066 000040AE 01FB                    	ADD	BX,DI
 25067                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 25068                                  FAST_OPEN_SKIP:
 25069 000040B0 5F                      	POP	DI			; Start of next element
 25070 000040B1 E89D02                  	CALL	InsertPath		; insert dir entry info
 25071                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 25072 000040B4 8A05                    	MOV	AL,[DI]
 25073 000040B6 08C0                    	OR	AL,AL
 25074 000040B8 74BF                    	JZ	short _SETRET		; At end
 25075 000040BA 47                      	INC	DI			; Skip over "/"
 25076 000040BB 89FE                    	MOV	SI,DI			; Point with SI
 25077 000040BD E8340F                  	call	PATHCHRCMP
 25078 000040C0 7503                    	JNZ	short find_bad_name	; oops
 25079 000040C2 E9B1FE                  	JMP	FINDPATH		; Next element
 25080                                  
 25081                                  find_bad_name:
 25082 000040C5 4E                      	DEC	SI			; Undo above INC to get failure point
 25083                                  _BADPATH:
 25084 000040C6 30C9                    	XOR	CL,CL			; Set zero
 25085 000040C8 EB2C                    	JMP	SHORT BADPRET
 25086                                  
 25087                                  FILEINPATH:
 25088 000040CA 5F                      	POP	DI			; Start of next element
 25089                                  
 25090                                  ;hkn; SS is DOSDATA
 25091                                  	;context DS			; Got to from one place with DS gone
 25092 000040CB 16                      	push	ss
 25093 000040CC 1F                      	pop	ds
 25094                                  
 25095                                  ; DOS 3.3 FastOpen
 25096                                  	;test	byte [FastOpenFlg],1
 25097 000040CD F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set  ; do this here is we don't want to
 25098 000040D2 740B                    	JZ	short NO_FAST		; device info to fastopen
 25099                                  	;test	byte [FastOpenFlg],2
 25100 000040D4 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 25101 000040D9 7404                    	JZ	short NO_FAST
 25102 000040DB 8B3E[660D]              	MOV	DI,[Next_Element_Start]  ; This takes care of one time lookup
 25103                                  					 ; success
 25104                                  NO_FAST:
 25105                                  ; DOS 3.3 FastOpen
 25106 000040DF 8A05                    	MOV	AL,[DI]
 25107 000040E1 08C0                    	OR	AL,AL
 25108 000040E3 7404                    	JZ	short INCRET
 25109 000040E5 89FE                    	MOV	SI,DI			; Path too long
 25110 000040E7 EB0D                    	JMP	SHORT BADPRET
 25111                                  
 25112                                  INCRET:
 25113                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 25114                                  
 25115 000040E9 E86502                  	CALL   InsertPath		; insert dir entry info
 25116                                  
 25117                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 25118 000040EC FEC0                    	INC	AL			; Reset zero
 25119                                  	; 16/12/2022	
 25120                                  ;_SETRET:
 25121 000040EE C3                      	retn
 25122                                  
 25123                                  BADPATHPOP:
 25124 000040EF 5E                      	POP	SI			; Start of next element
 25125 000040F0 8A04                    	MOV	AL,[SI]
 25126 000040F2 89FE                    	MOV	SI,DI			; Start of bad element
 25127 000040F4 08C0                    	OR	AL,AL			; zero if bad element is last, non-zero if path too long
 25128                                  BADPRET:
 25129 000040F6 A0[6D05]                	MOV	AL,[SATTRIB]
 25130 000040F9 A2[6B05]                	MOV	[ATTRIB],AL		; Make sure return correct
 25131 000040FC F9                      	STC
 25132 000040FD C3                      	retn
 25133                                  
 25134                                  ;Break	<STARTSRCH -- INITIATE DIRECTORY SEARCH>
 25135                                  ;---------------------------------------------------------------------------
 25136                                  ;
 25137                                  ; Procedure Name : STARTSRCH
 25138                                  ;
 25139                                  ; Inputs:
 25140                                  ;	[THISDPB] Set
 25141                                  ; Function:
 25142                                  ;	Set up a search for GETENTRY and NEXTENTRY
 25143                                  ; Outputs:
 25144                                  ;	ES:BP = Drive parameters
 25145                                  ;	Sets up LASTENT, ENTFREE=ENTLAST=-1, VOLID=0
 25146                                  ; Destroys ES,BP,AX
 25147                                  ;--------------------------------------------------------------------------
 25148                                  
 25149                                  STARTSRCH:
 25150 000040FE C42E[8A05]              	LES	BP,[THISDPB]
 25151 00004102 31C0                    	XOR	AX,AX
 25152 00004104 A3[4803]                	MOV	[LASTENT],AX
 25153 00004107 A2[7B05]                	MOV	[VOLID],AL		; No volume ID found
 25154 0000410A 48                      	DEC	AX
 25155 0000410B A3[D805]                	MOV	[ENTFREE],AX
 25156 0000410E A3[DA05]                	MOV	[ENTLAST],AX
 25157 00004111 C3                      	retn
 25158                                  
 25159                                  ;BREAK <MatchAttributes - the final check for attribute matching>
 25160                                  ;----------------------------------------------------------------------------
 25161                                  ; Procedure Name : MatchAttributes
 25162                                  ;
 25163                                  ; Input:    [Attrib] = attribute to search for
 25164                                  ;	    CH = found attribute
 25165                                  ; Output:   JZ <match>
 25166                                  ;	    JNZ <nomatch>
 25167                                  ; Registers modified: noneski
 25168                                  ;----------------------------------------------------------------------------
 25169                                  
 25170                                  MatchAttributes:
 25171 00004112 50                      	PUSH	AX
 25172                                  
 25173                                  ;hkn; SS override
 25174 00004113 36A0[6B05]              	MOV	AL,[ss:ATTRIB]		; AL <- SearchSet
 25175 00004117 F6D0                    	NOT	AL			; AL <- SearchSet'
 25176 00004119 20E8                    	AND	AL,CH			; AL <- SearchSet' and FoundSet
 25177                                  	;and	al,16h
 25178 0000411B 2416                    	AND	AL,attr_all	; AL <- SearchSet' and FoundSet and Important
 25179                                  ;
 25180                                  ; the result is non-zero if an attribute is not in the search set
 25181                                  ; and in the found set and in the important set. This means that we do not
 25182                                  ; have a match. Do a JNZ <nomatch> or JZ <match>
 25183                                  ;
 25184 0000411D 58                      	POP	AX
 25185 0000411E C3                      	retn
 25186                                  
 25187                                  ; 19/05/2019 - Retro DOS v4.0
 25188                                  ; DOSCODE:8148h (MSDOS 6.21, MSDOS.SYS)
 25189                                  
 25190                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25191                                  ; DOSCODE:810Dh (MSDOS 5.0, MSDOS.SYS)
 25192                                  
 25193                                  ;Break <DevName - Look for name of device>
 25194                                  ;---------------------------------------------------------------------------
 25195                                  ;
 25196                                  ; Procedure Name : DevName
 25197                                  ;
 25198                                  ; Inputs:
 25199                                  ;	DS,ES:DOSDATA
 25200                                  ;	Filename in NAME1
 25201                                  ;	ATTRIB set so that we can error out if looking for Volume IDs
 25202                                  ; Function:
 25203                                  ;	Determine if file is in list of I/O drivers
 25204                                  ; Outputs:
 25205                                  ;	Carry set if not a device
 25206                                  ;	ELSE
 25207                                  ;	Zero flag set
 25208                                  ;	BH = Bit 7,6 = 1, bit 5 = 0 (cooked mode)
 25209                                  ;	     bits 0-4 set from low byte of attribute word
 25210                                  ;	DEVPT = DWORD pointer to Device header of device
 25211                                  ; BX destroyed, others preserved
 25212                                  ;---------------------------------------------------------------------------
 25213                                  
 25214                                  DEVNAME:
 25215                                  	; 28/07/2018 - Retro DOS v3.0
 25216                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 49FBh
 25217                                  
 25218 0000411F 56                      	PUSH	SI
 25219 00004120 57                      	PUSH	DI
 25220 00004121 51                      	PUSH	CX
 25221 00004122 50                      	PUSH	AX
 25222                                  
 25223                                  ; E5 special code
 25224 00004123 FF36[4B05]              	PUSH	WORD [NAME1]
 25225 00004127 803E[4B05]05            	CMP	byte [NAME1],5
 25226 0000412C 7505                    	JNZ	short NOKTR
 25227 0000412E C606[4B05]E5            	MOV	byte [NAME1],0E5h
 25228                                  NOKTR:
 25229                                  	;test	byte [ATTRIB],8
 25230 00004133 F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id
 25231                                  					; If looking for VOL id don't find devs
 25232 00004138 7521                    	JNZ	short RET31
 25233                                  
 25234                                  ;hkn; NULDEV is in DOSDATA
 25235 0000413A BE[4800]                	MOV	SI,NULDEV
 25236                                  LOOKIO:
 25237                                  	; 21/11/2022
 25238                                  	;test	byte [SI+SYSDEV.ATT+1],80h
 25239                                  	; 17/12/2022
 25240                                  	;test	byte [si+5],80h
 25241 0000413D F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 25242                                  	;;test	word [si+4],8000h
 25243                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 25244 00004141 7411                    	JZ	short SKIPDEV 		; Skip block devices (NET and LOCAL)
 25245 00004143 89F0                    	MOV	AX,SI
 25246                                  	;add	si,10
 25247 00004145 83C60A                  	ADD	SI,SYSDEV.NAME
 25248                                  
 25249                                  ;hkn; NAME1 is in DOSDATA
 25250 00004148 BF[4B05]                	MOV	DI,NAME1
 25251 0000414B B90400                  	MOV	CX,4			; All devices are 8 letters
 25252 0000414E F3A7                    	REPE	CMPSW			; Check for name in list
 25253 00004150 89C6                    	MOV	SI,AX
 25254 00004152 7415                    	JZ	short IOCHK		; Found it?
 25255                                  SKIPDEV:
 25256 00004154 C534                    	LDS	SI,[SI]			; Get address of next device
 25257 00004156 83FEFF                  	CMP	SI,-1			; At end of list?
 25258 00004159 75E2                    	JNZ	short LOOKIO
 25259                                  RET31:	
 25260 0000415B F9                      	STC				; Not found
 25261                                  RETNV:	
 25262 0000415C 8CD1                    	MOV	CX,SS
 25263 0000415E 8ED9                    	MOV	DS,CX
 25264                                  
 25265 00004160 8F06[4B05]              	POP	WORD [NAME1]
 25266 00004164 58                      	POP	AX
 25267 00004165 59                      	POP	CX
 25268 00004166 5F                      	POP	DI
 25269 00004167 5E                      	POP	SI
 25270 00004168 C3                      	RETN
 25271                                  
 25272                                  IOCHK:
 25273                                  ;hkn; SS override for DEVPT
 25274 00004169 368C1E[9C05]            	MOV	[SS:DEVPT+2],DS		; Save pointer to device
 25275                                  	;mov	bh,[si+4]
 25276 0000416E 8A7C04                  	MOV	BH,[SI+SYSDEV.ATT]
 25277 00004171 80CFC0                  	OR	BH,0C0h
 25278 00004174 80E7DF                  	and	bh,0DFh
 25279                                  	;AND	BH,~(020h)		; Clears Carry
 25280 00004177 368936[9A05]            	MOV	[SS:DEVPT],SI
 25281 0000417C EBDE                    	JMP	short RETNV
 25282                                  
 25283                                  ;BREAK <Build_device_ent - Make a Directory entry>
 25284                                  ;---------------------------------------------------------------------------
 25285                                  ; Procedure Name : Build_device_ent
 25286                                  ;
 25287                                  ; Inputs:
 25288                                  ;	[NAME1] has name
 25289                                  ;	BH is attribute field (supplied by DEVNAME)
 25290                                  ;	[DEVPT] points to device header (supplied by DEVNAME)
 25291                                  ; Function:
 25292                                  ;	Build a directory entry for a device at DEVFCB
 25293                                  ; Outputs:
 25294                                  ;	BX points to DEVFCB
 25295                                  ;	SI points to dir_first field
 25296                                  ;	AH = input BH
 25297                                  ;	AL = 0
 25298                                  ;	dir_first = DEVPT
 25299                                  ;	Zero Set, Carry Clear
 25300                                  ; DS,ES,BP preserved, others destroyed
 25301                                  ;--------------------------------------------------------------------------
 25302                                  
 25303                                  Build_device_ent:
 25304 0000417E B82020                  	MOV	AX,"  " ; 2020h
 25305                                  
 25306                                  ;hkn; DEVFCB is in DOSDATA
 25307 00004181 BF[5305]                	MOV	DI,DEVFCB+8		; Point to extent field
 25308                                  
 25309                                  ;	Fill dir_ext  BUGBUG - use ERRNZs for this stuff!
 25310                                  
 25311 00004184 AB                      	STOSW
 25312 00004185 AA                      	STOSB				; Blank out extent field
 25313                                  	;mov	al,40h
 25314 00004186 B040                    	MOV	AL,attr_device
 25315                                  
 25316                                  ;	Fill Dir_attr
 25317                                  
 25318 00004188 AA                      	STOSB				; Set attribute field
 25319 00004189 31C0                    	XOR	AX,AX
 25320 0000418B B90A00                  	MOV	CX,10
 25321                                  
 25322                                  ; Fill dir_pad
 25323                                  
 25324 0000418E F3AB                    	REP	STOSW			; Fill rest with zeros
 25325 00004190 E853C9                  	call	DATE16
 25326                                  
 25327                                  ;hkn; DEVFCB is in DOSDATA
 25328 00004193 BF[6105]                	MOV	DI,DEVFCB+dir_entry.dir_time ; 09/08/2018
 25329 00004196 92                      	XCHG	AX,DX
 25330                                  
 25331                                  ; Fill dir_time
 25332                                  
 25333 00004197 AB                      	STOSW
 25334 00004198 92                      	XCHG	AX,DX
 25335                                  
 25336                                  ; Fill dir_date
 25337                                  
 25338 00004199 AB                      	STOSW
 25339 0000419A 89FE                    	MOV	SI,DI			; SI points to dir_first field
 25340 0000419C A1[9A05]                	MOV	AX,[DEVPT]
 25341                                  
 25342                                  ; Fill dir_first
 25343                                  
 25344 0000419F AB                      	STOSW				; Dir_first points to device
 25345 000041A0 A1[9C05]                	MOV	AX,[DEVPT+2]
 25346                                  ;
 25347                                  ; Fill dir_size_l
 25348                                  ;
 25349 000041A3 AB                      	STOSW
 25350 000041A4 88FC                    	MOV	AH,BH			; Put device atts in AH
 25351                                  
 25352                                  ;hkn; DEVFCB is in DOSDATA
 25353 000041A6 BB[4B05]                	MOV	BX,DEVFCB
 25354 000041A9 30C0                    	XOR	AL,AL			; Set zero, clear carry
 25355 000041AB C3                      	retn
 25356                                  
 25357                                  ;Break	<ValidateCDS - given a CDS, validate the media and the current directory>
 25358                                  ;----------------------------------------------------------------------------
 25359                                  ;
 25360                                  ;   ValidateCDS - Get current CDS. Splice it. Call FatReadCDS to check
 25361                                  ;   media. If media has been changed, do DOS_Chdir to validate path.
 25362                                  ;   If invalid, reset original CDS to root.
 25363                                  ;
 25364                                  ;   Inputs:	ThisCDS points to CDS of interest
 25365                                  ;		SS:DI points to temp buffer
 25366                                  ;   Outputs:	The current directory string is validated on the appropriate
 25367                                  ;		    drive
 25368                                  ;		ThisDPB changed
 25369                                  ;		ES:DI point to CDS
 25370                                  ;		Carry set if error (currently user FAILed to I 24)
 25371                                  ;   Registers modified: all
 25372                                  ;----------------------------------------------------------------------------
 25373                                  
 25374                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25375                                  	; DOSCODE:819Bh (MSDOS 5.0, MSDOS.SYS)
 25376                                  
 25377                                  ValidateCDS:
 25378                                  	; 19/05/2019 - Retro DOS v4.0
 25379                                  	; 28/07/2018 - Retro DOS v3.0
 25380                                  
 25381                                     %define  Temp	[bp-2]	; word
 25382                                     %define  SaveCDS	[bp-6]	; dword
 25383                                     %define  SaveCDSL	[bp-6]	; word
 25384                                     %define  SaveCDSH	[bp-4]	; word
 25385                                  
 25386                                  	;Enter
 25387 000041AC 55                      	push	bp
 25388 000041AD 89E5                    	mov	bp,sp
 25389 000041AF 83EC06                  	sub	sp,6
 25390                                  
 25391 000041B2 897EFE                  	MOV	Temp,DI
 25392                                  
 25393                                  ;hkn; SS override
 25394 000041B5 36C536[A205]            	LDS	SI,[SS:THISCDS]
 25395 000041BA 8976FA                  	MOV	SaveCDSL,SI
 25396 000041BD 8C5EFC                  	MOV	SaveCDSH,DS
 25397                                  	;EnterCrit critDisk
 25398 000041C0 E830D1                  	call	ECritDisk
 25399                                  	; 21/11/2022
 25400                                  	;test	byte [SI+curdir.flags+1],80h
 25401                                  	;test	word [si+67],8000h
 25402                                  	; 17/12/2022
 25403                                  	;test	byte [SI+68],80h
 25404 000041C3 F6444480                	test	byte [SI+curdir.flags+1],(curdir_isnet>>8)
 25405                                  	;TEST	word [SI+curdir.flags],curdir_isnet	; Clears carry
 25406 000041C7 7403                    	JZ	short _DoSplice
 25407 000041C9 E99200                  	JMP	FatFail
 25408                                  _DoSplice:
 25409 000041CC 30D2                    	XOR	DL,DL
 25410 000041CE 368616[4C03]            	XCHG	DL,[SS:NoSetDir]
 25411                                  
 25412                                  ;hkn; SS is DOSDATA
 25413                                  	;Context ES
 25414 000041D3 16                      	push	ss
 25415 000041D4 07                      	pop	es
 25416                                  	;Invoke	FStrcpy
 25417 000041D5 E8F0CF                  	call	FStrCpy
 25418 000041D8 8B76FE                  	MOV	SI,Temp
 25419                                  
 25420                                  ;hkn; SS is DOSDATA
 25421                                  	;Context DS
 25422 000041DB 16                      	push	ss
 25423 000041DC 1F                      	pop	ds	
 25424                                  	;Invoke	Splice
 25425 000041DD E86B2B                  	call	Splice
 25426                                  
 25427                                   ;hkn; SS is DOSDATA
 25428                                  	;Context DS			;   FatReadCDS (ThisCDS);
 25429 000041E0 16                      	push	ss
 25430 000041E1 1F                      	pop	ds
 25431 000041E2 8816[4C03]              	MOV	[NoSetDir],DL
 25432 000041E6 C43E[A205]              	LES	DI,[THISCDS]
 25433                                  	;SAVE	<BP>
 25434 000041EA 55                      	push	bp
 25435                                  	;Invoke	FATREAD_CDS
 25436 000041EB E83F14                  	call	FATREAD_CDS	
 25437                                  	;RESTORE <BP>
 25438 000041EE 5D                      	pop	bp
 25439 000041EF 726D                    	JC	short FatFail
 25440                                  
 25441 000041F1 C536[A205]              	LDS	SI,[THISCDS]		;   if (ThisCDS->ID == -1) {
 25442                                  	;cmp	word [si+73],-1
 25443 000041F5 837C49FF                	CMP	word [SI+curdir.ID],-1
 25444 000041F9 7555                    	JNZ	short RestoreCDS
 25445                                  
 25446                                  ;hkn; SS is DOSDATA
 25447                                  	;Context ES
 25448 000041FB 16                      	push	ss
 25449 000041FC 07                      	pop	es
 25450                                  
 25451                                  ;hkn; SS override
 25452                                  	;SAVE	<wfp_Start>		;	t = wfp_Start;
 25453 000041FD 36FF36[B205]            	push	word [SS:WFP_START]
 25454                                  	;cmp	si,[bp-6]
 25455 00004202 3B76FA                  	CMP	SI,SaveCDSL		; if not spliced
 25456 00004205 750B                    	JNZ	short DoChdir
 25457                                  	;mov	di,[bp-2]
 25458 00004207 8B7EFE                  	MOV	DI,Temp
 25459                                  
 25460                                  ;hkn; SS override
 25461 0000420A 36893E[B205]            	MOV	[SS:WFP_START],DI	;	wfp_start = d;
 25462                                  	;Invoke	FStrCpy 		;	strcpy (d, ThisCDS->Text);
 25463 0000420F E8B6CF                  	call	FStrCpy
 25464                                  DoChdir:
 25465                                  ;hkn; SS is DOSDATA
 25466                                  	;Context DS
 25467 00004212 16                      	push	ss
 25468 00004213 1F                      	pop	ds
 25469                                  	;SAVE	<<WORD PTR SAttrib>,BP> ;	c = DOSChDir ();
 25470 00004214 FF36[6D05]              	push	word [SATTRIB]
 25471 00004218 55                      	push	bp
 25472                                  	;Invoke	DOS_ChDir
 25473 00004219 E80CEF                  	call	DOS_CHDIR
 25474                                  	;RESTORE <BP,BX,wfp_start>	;	wfp_Start = t;
 25475 0000421C 5D                      	pop	bp
 25476 0000421D 5B                      	pop	bx
 25477 0000421E 8F06[B205]              	pop	word [WFP_START]
 25478 00004222 881E[6D05]              	MOV	[SATTRIB],BL
 25479 00004226 C576FA                  	LDS	SI,SaveCDS
 25480 00004229 730F                    	JNC	short SetCluster	;	if (c == -1) {
 25481                                  
 25482                                  ;hkn; SS override for THISCDS
 25483 0000422B 368936[A205]            	MOV	[SS:THISCDS],SI		;	    ThisCDS = TmpCDS;
 25484 00004230 368C1E[A405]            	MOV	[SS:THISCDS+2],DS
 25485 00004235 31C9                    	XOR	CX,CX			;	    TmpCDS->text[3] = c = 0;
 25486 00004237 884C03                  	MOV	[SI+3],CL		;	    }
 25487                                  SetCluster:
 25488                                  	;mov	word [si+73],0FFFFh
 25489 0000423A C74449FFFF              	MOV	word [SI+curdir.ID],-1	;	TmpCDS->ID = -1;
 25490 0000423F 36C536[A205]            	LDS	SI,[SS:THISCDS]		;	ThisCDS->ID = c;
 25491                                  	; 21/11/2022
 25492                                  	;test	byte [si+curdir.flags+1],20h
 25493                                  	; 19/05/2019
 25494                                  	; MSDOS 6.0
 25495                                  	; 17/12/2022
 25496                                  	;test	byte [si+68],20h
 25497 00004244 F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)	
 25498                                  	;;test	word [si+67],2000h
 25499                                  	;TEST	word [SI+curdir.flags],curdir_splice ;AN000;;MS. for Join and Subst
 25500 00004248 7403                    	JZ	short _setdirclus		     ;AN000;;MS.
 25501 0000424A B9FFFF                  	MOV	CX,-1				     ;AN000;;MS.
 25502                                  _setdirclus:
 25503                                  	;mov	[si+73],cx
 25504 0000424D 894C49                  	MOV	[SI+curdir.ID],CX	;	}
 25505                                  RestoreCDS:
 25506 00004250 C47EFA                  	LES	DI,SaveCDS
 25507 00004253 36893E[A205]            	MOV	[SS:THISCDS],DI
 25508 00004258 368C06[A405]            	MOV	[SS:THISCDS+2],ES
 25509 0000425D F8                      	CLC
 25510                                  FatFail:
 25511                                  	;LeaveCrit critDisk
 25512 0000425E E8ADD0                  	call	LCritDisk
 25513                                  
 25514                                  	;les	di,[bp-6]
 25515 00004261 C47EFA                  	LES	DI,SaveCDS
 25516                                  	;Leave
 25517 00004264 89EC                    	mov	sp,bp
 25518 00004266 5D                      	pop	bp
 25519 00004267 C3                      	retn
 25520                                  
 25521                                  ; 28/07/2018 - Retro DOS v3.0
 25522                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - offset 43BDh
 25523                                  
 25524                                  ;Break	<CheckThisDevice - Check for being a device>
 25525                                  ;---------------------------------------------------------------------------
 25526                                  ;
 25527                                  ;   CheckThisDevice - Examine the area at DS:SI to see if there is a valid
 25528                                  ;   device specified. We will return carry if there is a device present. 
 25529                                  ;   The forms of devices we will recognize are:
 25530                                  ;
 25531                                  ;	[path]device
 25532                                  ;
 25533                                  ;   Note that the drive letter has *already* been removed. All other forms
 25534                                  ;   are not considered to be devices. If such a device is found we change
 25535                                  ;   the source pointer to point to the device component.
 25536                                  ;
 25537                                  ;   Inputs:	ES is DOSDATA
 25538                                  ;		DS:SI contains name
 25539                                  ;   Outputs:	ES is DOSDATA
 25540                                  ;		DS:SI point to name or device
 25541                                  ;		Carry flag set if device was found
 25542                                  ;		Carry flag reset otherwise
 25543                                  ;   Registers Modified: all except ES:DI, DS
 25544                                  ;----------------------------------------------------------------------------
 25545                                  
 25546                                  CheckThisDevice:
 25547 00004268 57                      	push	di
 25548 00004269 56                      	push	si
 25549 0000426A 89F7                    	MOV	DI,SI
 25550                                  
 25551                                  ; Check for presence of \dev\ (Dam multiplan!)
 25552                                  
 25553 0000426C 8A04                    	MOV	AL,[SI]
 25554 0000426E E8830D                  	call	PATHCHRCMP		; is it a path char?
 25555 00004271 7517                    	JNZ	short ParseDev		; no, go attempt to parse device
 25556 00004273 46                      	INC	SI			; simulate LODSB
 25557                                  
 25558                                  ; We have the leading path separator. Look for DEV part.
 25559                                  
 25560 00004274 AD                      	LODSW
 25561 00004275 0D2020                  	OR	AX,2020h
 25562 00004278 3D6465                  	cmp	ax,"de"
 25563                                  	;CMP	AX,"e"<< 8 + "d"
 25564 0000427B 752D                    	JNZ	short NotDevice		; not "de", assume not device
 25565 0000427D AC                      	LODSB
 25566 0000427E 0C20                    	OR	AL,20h
 25567 00004280 3C76                    	CMP	AL,"v"                  ; Not "v", assume not device
 25568 00004282 7526                    	JNZ	short NotDevice
 25569 00004284 AC                      	LODSB
 25570 00004285 E86C0D                  	call	PATHCHRCMP		; do we have the last path separator?
 25571 00004288 7520                    	JNZ	short NotDevice		; no. go for it.
 25572                                  
 25573                                  ; DS:SI now points to a potential drive. Preserve them as NameTrans advances
 25574                                  ; SI and DevName may destroy DS.
 25575                                  
 25576                                  ParseDev:
 25577 0000428A 1E                      	push	ds
 25578 0000428B 56                      	push	si			; preserve the source pointer
 25579 0000428C E8A30C                  	call	NameTrans		; advance DS:SI
 25580 0000428F 803C00                  	CMP	BYTE [SI],0		; parse entire string?
 25581 00004292 F9                      	STC				; simulate a Carry return from DevName
 25582 00004293 750B                    	JNZ	short SkipSearch	; no parse. simulate a file return.
 25583                                  
 25584                                  ;hkn; SS is DOSDATA
 25585 00004295 16                      	push	ss
 25586 00004296 1F                      	pop	ds
 25587                                  
 25588                                  ; M026 - start - fix ported from ROMDOS2 for bug # 2849
 25589                                  ;
 25590                                  ; SR;
 25591                                  ; We have to set Attrib before invoking DevName. Otherwise, the value from
 25592                                  ; a previous DOS call is used and DevName thinks it is not a device if the
 25593                                  ; old call set the volume attribute bit.
 25594                                  
 25595 00004297 A0[6D05]                	mov	al,[SATTRIB]
 25596 0000429A A2[6B05]                	mov	[ATTRIB],al		;set Attrib for DevName
 25597                                  
 25598                                  ; M026 - end
 25599                                  
 25600 0000429D E87FFE                  	call	DEVNAME
 25601                                  
 25602                                  SkipSearch:
 25603 000042A0 5E                      	pop	si
 25604 000042A1 1F                      	pop	ds
 25605                                  
 25606                                  ; SI points to the beginning of the potential device. If we have a device
 25607                                  ; then we do not change SI. If we have a file, then we reset SI back to the
 25608                                  ; original value. At this point Carry set indicates FILE.
 25609                                  
 25610                                  CheckReturn:
 25611 000042A2 5F                      	pop	di			; get original SI
 25612 000042A3 7302                    	JNC	short Check_Done	; if device then do not reset pointer
 25613 000042A5 89FE                    	MOV	SI,DI
 25614                                  Check_Done:
 25615 000042A7 5F                      	pop	di
 25616 000042A8 F5                      	CMC				; invert carry. Carry => device
 25617 000042A9 C3                      	retn
 25618                                  NotDevice:
 25619 000042AA F9                      	STC
 25620 000042AB EBF5                    	JMP	short CheckReturn
 25621                                  
 25622                                  ;BREAK <LookupPath - call fastopen to get dir entry info>
 25623                                  ;-----------------------------------------------------------------------------
 25624                                  ;
 25625                                  ; Procedure Name : LookupPath
 25626                                  ;
 25627                                  ; Output  DS:SI -> path name,
 25628                                  ;	  ES:DI -> dir entry info buffer
 25629                                  ;	  ES:CX -> extended dir info buffer
 25630                                  ;
 25631                                  ;	  carry flag clear : tables pointed by ES:DI and ES:CX are filled by
 25632                                  ;			     FastOpen, DS:SI points to char just one after
 25633                                  ;			     the last char of path name which is fully or
 25634                                  ;			     partially found in FastOPen
 25635                                  ;	  carry flag set : FastOpen not in memory or path name not found
 25636                                  ;
 25637                                  ;----------------------------------------------------------------------------
 25638                                  
 25639                                  LookupPath:
 25640                                  ;	PUSH	AX
 25641                                  
 25642                                  ;hkn; SS override
 25643                                  	;test	byte [ss:FastOpenFlg],1
 25644 000042AD 36F606[3A0D]01          	TEST	byte [ss:FastOpenFlg],FastOpen_Set  ; flg is set in DOSOPEN
 25645 000042B3 7503                    	JNZ	short FASTINST			    ; and this routine is
 25646                                  NOLOOK:
 25647 000042B5 E99700                  	JMP	NOLOOKUP			    ; executed once
 25648                                  
 25649                                  FASTINST:
 25650                                  ;hkn; SS override
 25651                                  	;test	byte [ss:FastOpenFlg],8
 25652 000042B8 36F606[3A0D]08          	TEST	byte [ss:FastOpenFlg],No_Lookup	    ; no more lookup?
 25653 000042BE 75F5                    	JNZ	short NOLOOK			    ; yes
 25654                                  
 25655 000042C0 BB[300D]                	MOV	BX,FastOpenTable		    ; get fastopen related tab
 25656                                  
 25657                                  ;hkn; SS override
 25658 000042C3 368B36[B205]            	MOV	SI,[SS:WFP_START]		    ; si points to path name
 25659 000042C8 BF[460D]                	MOV	DI,Dir_Info_Buff
 25660 000042CB B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 25661 000042CE B001                    	MOV	AL,FONC_Look_up 		    ; al = 1
 25662 000042D0 1E                      	PUSH	DS
 25663 000042D1 07                      	POP	ES
 25664                                  
 25665                                  ;hkn; SS override
 25666                                  	;call	far [bx+2]
 25667 000042D2 FF5F02                  	CALL	far [BX+fastopen_entry.name_caching] ;call fastopen
 25668 000042D5 7267                    	JC	short NOTFOUND			    ; fastopen not in memory
 25669                                  
 25670 000042D7 8D5CFE                  	LEA	BX,[SI-2]
 25671                                  
 25672                                  ;hkn; SS override
 25673 000042DA 363B1E[B205]            	CMP	BX,[SS:WFP_START]		    ; path found ?
 25674 000042DF 745D                    	JZ	short NOTFOUND			    ; no
 25675                                  
 25676                                  	; 19/05/2019 - Retro DOS v4.0
 25677                                  
 25678                                  	; MSDOS 6.0				    ; fully or partially found
 25679 000042E1 803C00                  	CMP	BYTE [SI],0			    ;AN000;FO.
 25680 000042E4 751A                    	JNZ	short parfnd			    ;AN000;FO.; partiallyfound
 25681 000042E6 51                      	PUSH	CX				    ;AN000;FO.; is attribute matched ?
 25682                                  
 25683                                  ;hkn; SS override for attrib/sattrib
 25684 000042E7 368A0E[6B05]            	MOV	CL,[ss:ATTRIB]			    ;AN000;FO.;
 25685 000042EC 368A2E[6D05]            	MOV	CH,[ss:SATTRIB]			    ;AN000;FO.; attrib=sattrib
 25686 000042F1 36882E[6B05]            	MOV	[ss:ATTRIB],CH			    ;AN000;FO.;
 25687                                  	;mov	ch,[es:di+0Bh]
 25688 000042F6 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]	    ;AN000;FO.;
 25689 000042FA E815FE                  	call	MatchAttributes 		    ;AN000;FO.;
 25690                                  ;;;	MOV	[ss:ATTRIB],CL			    ;AN001;FO.; restore attrib
 25691 000042FD 59                      	POP	CX				    ;AN000;FO.;
 25692 000042FE 754F                    	JNZ	short NOLOOKUP			    ;AN000;FO.; not matched
 25693                                  parfnd:
 25694                                  
 25695                                  ;hkn; SS override
 25696 00004300 368936[660D]            	MOV	[SS:Next_Element_Start],SI	    ; save si
 25697 00004305 89CB                    	MOV	BX,CX
 25698                                  	; MSDOS 6.0
 25699                                  	;mov	ax,[bx+7]
 25700 00004307 8B4707                  	MOV	AX,[BX+FEI.lastent]		    ;AN000;;FO. restore lastentry
 25701                                  ;hkn; SS override for LASTENT, DIRSTART, CLUSNUM
 25702 0000430A 36A3[4803]              	MOV	[SS:LASTENT],AX			    ;AN000;;FO.
 25703 0000430E 8B4709                  	MOV	AX,[BX+FEI.dirstart]		    ;AN001;;FO. restore dirstart
 25704 00004311 36A3[C205]              	MOV	[SS:DIRSTART],AX		    ;AN001;;FO.
 25705                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25706                                  	;;mov	ax,[bx+3] ; MSDOS 3.3
 25707                                  	;mov	ax,[bx+5] ; MSDOS 6.0
 25708 00004315 8B4705                  	MOV	AX,[BX+FEI.clusnum]		    ; restore next cluster num
 25709 00004318 36A3[BC05]              	MOV	[SS:CLUSNUM],AX			    ;
 25710                                  
 25711 0000431C 06                      	PUSH	ES				    ; save ES
 25712                                  ;hkn; SS override
 25713 0000431D 36C41E[8A05]            	LES	BX,[SS:THISDPB]			    ; put drive id
 25714 00004322 268A27                  	mov	ah,[ES:BX] ; 15/08/2018
 25715                                  	;MOV	AH,[ES:BX+DPB.DRIVE]		    ; in AH for DOOPEN
 25716 00004325 07                      	POP	ES				    ; pop ES
 25717                                  ;SR;
 25718                                  ; We cannot have a root dir if we have come here. So, we zero out CurBuf to
 25719                                  ;indicate it is not a root dir
 25720                                  
 25721 00004326 36C706[E205]0000        	mov	word [SS:CURBUF],0		    ; indicate not root dir
 25722 0000432D 368C06[E405]            	MOV	WORD [SS:CURBUF+2],ES		    ; [curbuf+2].bx points to
 25723 00004332 89FB                    	MOV	BX,DI				    ; start of entry
 25724                                  	;lea	si,[di+1Ah]
 25725 00004334 8D751A                  	LEA	SI,[DI+dir_entry.dir_first]	    ; [curbuf+2]:si points to
 25726                                  						    ; dir_first field in the
 25727                                  						    ; dir entry
 25728                                  ;hkn; SS override for FastOpenFlg
 25729                                  	;or	byte [ss:FastOpenFlg],12h ; 29/12/2022
 25730 00004337 36800E[3A0D]12          	OR	byte [SS:FastOpenFlg],Lookup_Success+Set_For_Search
 25731                                  ;	POP	AX
 25732 0000433D C3                      	RETN
 25733                                  NOTFOUND:
 25734 0000433E 83F8FF                  	CMP	AX,-1				    ; not in memory ?
 25735 00004341 7506                    	JNZ	short Partial_Success 		    ; yes, in memory
 25736 00004343 36C606[3A0D]00          	MOV	byte [SS:FastOpenFlg],0		    ; no more fastopen
 25737                                  Partial_Success:
 25738                                  	;and	byte [SS:FastOpenFlg],0FBh
 25739 00004349 368026[3A0D]FB          	AND	byte [SS:FastOpenFlg],Special_Fill_Reset
 25740                                  NOLOOKUP:
 25741                                  ;	POP	AX
 25742 0000434F F9                      	STC
 25743 00004350 C3                      	RETN
 25744                                  
 25745                                  ;BREAK <InsertPath - call fastopen to insert dir entry info>
 25746                                  ;-----------------------------------------------------------------------------
 25747                                  ;
 25748                                  ; Procedure Name : InsertPath
 25749                                  ; Input:  FastOpen_Set flag set when from DOSOPEN otherwise 0
 25750                                  ;	  Lookup_Success flag set when got dir entry info from FASTOPEN
 25751                                  ;	  DS = DOSDATA
 25752                                  ; Output: FastOPen_Ext_Info is set and path dir info is inserted
 25753                                  ;
 25754                                  ;-----------------------------------------------------------------------------
 25755                                  
 25756                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25757                                  
 25758                                  InsertPath:
 25759 00004351 9C                      	PUSHF
 25760                                  ;hkn; SS override for FastOpenFlag
 25761                                  	;test	byte [SS:FastOpenFlg], 1
 25762 00004352 36F606[3A0D]01          	TEST	byte [SS:FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 25763 00004358 7479                    	JZ	short GET_NEXT_ELEMENT		; the FastOpen
 25764                                  	;test	byte [ss:FastOpenFlg],2
 25765 0000435A 36F606[3A0D]02          	TEST	byte [SS:FastOpenFlg],Lookup_Success ; Lookup just happened
 25766 00004360 740D                    	JZ	short INSERT_DIR_INFO		; no
 25767                                  	;and	byte [ss:FastOpenFlg],0FDh
 25768 00004362 368026[3A0D]FD          	AND	byte [SS:FastOpenFlg],Lookup_Reset  ; we got dir info from fastopen so
 25769 00004368 368B3E[660D]            	MOV	DI,[SS:Next_Element_Start]	; no need to insert it again
 25770 0000436D EB5E                    	JMP	short GET_NEXT2
 25771                                  INSERT_DIR_INFO:				; save registers
 25772 0000436F 1E                      	PUSH	DS
 25773 00004370 06                      	PUSH	ES
 25774 00004371 53                      	PUSH	BX
 25775 00004372 56                      	PUSH	SI
 25776 00004373 57                      	PUSH	DI
 25777 00004374 51                      	PUSH	CX
 25778 00004375 50                      	PUSH	AX
 25779                                  
 25780                                  ;hkn; SS override
 25781 00004376 36C53E[E205]            	LDS	DI,[SS:CURBUF]			; DS:DI -> buffer header
 25782 0000437B BE[3B0D]                	MOV	SI,FastOpen_Ext_Info
 25783                                  	;mov	ax,[di+6]
 25784 0000437E 8B4506                  	MOV	AX,[DI+BUFFINFO.buf_sector]	; get directory sector
 25785                                  	; MSDOS 6.0
 25786                                  	;mov	[ss:si+1],ax
 25787 00004381 36894401                	MOV	[SS:SI+FEI.dirsec],AX 		;AN000; >32mb save dir sector
 25788                                  	; 19/05/2019 - Retro DOS v4.0
 25789 00004385 8B4508                  	MOV	AX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 25790                                  
 25791                                  ;hkn; SS is DOSDATA
 25792 00004388 16                      	push	ss
 25793 00004389 1F                      	pop	ds
 25794                                  	; MSDOS 3.3	
 25795                                  	;;mov	[si+1],ax	
 25796                                  	;MOV	[SI+FEI.dirsec],AX
 25797                                  	; MSDOS 6.0
 25798                                  	;mov	[si+3],ax
 25799 0000438A 894403                  	MOV	[SI+FEI.dirsec+2],AX		;AN000;>32mb save high dir sector
 25800                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25801 0000438D A1[BC05]                	MOV	AX,[CLUSNUM]		; save next cluster number
 25802                                  	;;mov	[si+5],ax ; MSDOS 6.0
 25803                                  	;mov	[si+3],ax ; MSDOS 3.3
 25804 00004390 894405                  	MOV	[SI+FEI.clusnum],AX
 25805                                  	; MSDOS 6.0
 25806 00004393 A1[4803]                	MOV	AX,[LASTENT]		;AN000;FO. save lastentry for search first
 25807                                  	;mov	[si+7],ax
 25808 00004396 894407                  	MOV	[SI+FEI.lastent],AX	;AN000;FO.
 25809 00004399 A1[C205]                	MOV	AX,[DIRSTART]		;AN001;FO. save  for search first
 25810                                  	;mov	[si+9],ax
 25811 0000439C 894409                  	MOV	[SI+FEI.dirstart],AX	;AN001;FO.
 25812                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25813 0000439F 89D8                    	MOV	AX,BX
 25814                                  	;;add	di,16  ; MSDOS 3.3
 25815                                  	;add	di,20  ; MSDOS 6.0
 25816 000043A1 83C714                  	ADD	DI,BUFINSIZ		; DS:DI -> start of data in buffer
 25817 000043A4 29F8                    	SUB	AX,DI			; AX=BX relative to start of sector
 25818                                  	;mov	cl,32
 25819 000043A6 B120                    	MOV	CL,dir_entry.size
 25820 000043A8 F6F1                    	DIV	CL
 25821                                  	;MOV	[SI+FEI.dirpos],AL	; save directory entry # in buffer
 25822 000043AA 8804                    	mov	[si],al
 25823                                  
 25824 000043AC 1E                      	PUSH	DS
 25825 000043AD 07                      	POP	ES
 25826                                  
 25827 000043AE 8E1E[E405]              	MOV	DS,[CURBUF+2]
 25828 000043B2 89DF                    	MOV	DI,BX			; DS:DI -> dir entry info
 25829                                  	;cmp	word [di+1Ah],0
 25830 000043B4 837D1A00                	CMP	word [DI+dir_entry.dir_first],0 
 25831                                  					; never insert info when file is empty
 25832 000043B8 740C                    	JZ	short SKIP_INSERT	; e.g. newly created file
 25833                                  
 25834 000043BA 56                      	PUSH	SI			; ES:BX -> extended info
 25835 000043BB 5B                      	POP	BX
 25836                                  
 25837                                  	;mov	al,2
 25838 000043BC B002                    	MOV	AL,FONC_insert		; call fastopen insert operation
 25839 000043BE BE[300D]                	MOV	SI,FastOpenTable
 25840                                  	;call	far [es:si+2]	 ; call dword ptr es:[si+2] ; 29/12/2022
 25841                                  	; 07/12/2022
 25842 000043C1 26FF5C02                	CALL	far [ES:SI+fastopen_entry.name_caching]
 25843                                  
 25844 000043C5 F8                      	CLC
 25845                                  SKIP_INSERT:
 25846 000043C6 58                      	POP	AX
 25847 000043C7 59                      	POP	CX			; restore registers
 25848 000043C8 5F                      	POP	DI
 25849 000043C9 5E                      	POP	SI
 25850 000043CA 5B                      	POP	BX
 25851 000043CB 07                      	POP	ES
 25852 000043CC 1F                      	POP	DS
 25853                                  GET_NEXT2:
 25854                                  	;or	[ss:FastOpenFlg],8
 25855 000043CD 36800E[3A0D]08          	OR	byte [SS:FastOpenFlg],No_Lookup
 25856                                  					; we got dir info from fastopen so
 25857                                  GET_NEXT_ELEMENT:
 25858 000043D3 9D                      	POPF
 25859 000043D4 C3                      	RETN
 25860                                  
 25861                                  ;============================================================================
 25862                                  ; DEV.ASM (MSDOS 6.0, 1991)
 25863                                  ;============================================================================
 25864                                  ; 17/07/2018 - Retro DOS v3.0
 25865                                  ; 30/04/2019 - Retro DOS v4.0
 25866                                  
 25867                                  ;**	Misc Routines to do 1-12 low level I/O and call devices
 25868                                  
 25869                                  ; Offset 12B8h of IBMDOS.COM (MSDOS 3.3), 1987
 25870                                  
 25871                                  ;DOSCODE:8401h (MSDOS 6.21, MSDOS.SYS)
 25872                                  
 25873                                  ;Public DEV001S, DEV001E 		; Pathgen labels
 25874                                  ;DEV001s:
 25875                                  ;		length of packets
 25876 000043D5 160E160D0F0E            LenTab:	 DB	DRDWRHL, DRDNDHL, DRDWRHL, DSTATHL, DFLSHL, DRDNDHL
 25877                                  ;LenTab: db	22,14,22,13,15,14
 25878                                  
 25879                                  ;	Error Function
 25880                                  
 25881                                  CmdTab:
 25882 000043DB 8604                    	DB	86h, DEVRD	; 0 input
 25883 000043DD 8605                    	DB	86h, DEVRDND	; 1 input status
 25884 000043DF 8708                    	DB	87h, DEVWRT	; 2 output
 25885 000043E1 870A                    	DB	87h, DEVOST	; 3 output status
 25886 000043E3 8607                    	DB	86h, DEVIFL	; 4 input flush
 25887 000043E5 8605                    	DB	86h, DEVRDND	; 5 input status with system WAIT
 25888                                  
 25889                                  ; Offset 12BEh of IBMDOS.COM (MSDOS 3.3), 1987
 25890                                  
 25891                                  ;CmdTab:
 25892                                  ;	db	86h, 4
 25893                                  ;	db	86h, 5
 25894                                  ;	db	87h, 8
 25895                                  ;	db	87h, 10
 25896                                  ;	db	86h, 7
 25897                                  ;	db	86h, 5
 25898                                  
 25899                                  ;DEV001E:
 25900                                  
 25901                                  ; 30/04/2019 - Retro DOS v4.0
 25902                                  ; DOSCODE:8413h (MSDOS 6.21, MSDOS.SYS)
 25903                                  
 25904                                  ;Break	<IOFUNC -- DO FUNCTION 1-12 I/O>
 25905                                  ;----------------------------------------------------------------------------
 25906                                  ;
 25907                                  ; Procedure Name : IOFUNC
 25908                                  ;
 25909                                  ; Inputs:
 25910                                  ;	DS:SI Points to SFT
 25911                                  ;	AH is function code
 25912                                  ;		= 0 Input
 25913                                  ;		= 1 Input Status
 25914                                  ;		= 2 Output
 25915                                  ;		= 3 Output Status
 25916                                  ;		= 4 Flush
 25917                                  ;		= 5 Input Status - System WAIT invoked for K09 if no char
 25918                                  ;				   present.
 25919                                  ;	AL = character if output
 25920                                  ; Function:
 25921                                  ;	Perform indicated I/O to device or file
 25922                                  ; Outputs:
 25923                                  ;	AL is character if input
 25924                                  ;	If a status call
 25925                                  ;		zero set if not ready
 25926                                  ;		zero reset if ready (character in AL for input status)
 25927                                  ; For regular files:
 25928                                  ;	Input Status
 25929                                  ;		Gets character but restores position
 25930                                  ;		Zero set on EOF
 25931                                  ;	Input
 25932                                  ;		Gets character advances position
 25933                                  ;		Returns ^Z on EOF
 25934                                  ;	Output Status
 25935                                  ;		Always ready
 25936                                  ; AX altered, all other registers preserved
 25937                                  ;----------------------------------------------------------------------------
 25938                                  
 25939                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25940                                  ; DOSCODE:83D8h (MSDOS 5.0, MSDOS.SYS)
 25941                                  
 25942                                  IOFUNC:
 25943 000043E7 368C16[8C03]            	MOV	[SS:IOXAD+2],SS		; SS override for IOXAD, IOSCNT, 
 25944                                  					; DEVIOBUF
 25945 000043EC 36C706[8A03][BC03]      	MOV	WORD [SS:IOXAD],DEVIOBUF
 25946 000043F3 36C706[8E03]0100        	MOV	WORD [SS:IOSCNT],1
 25947 000043FA 36A3[BC03]              	MOV	WORD [SS:DEVIOBUF],AX
 25948                                  	;test	byte [si+6],80h
 25949                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 25950 000043FE F6440680                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 25951 00004402 7403                    	JZ	short IOTO22		;AN000;
 25952 00004404 E9A500                  	JMP	IOTOFILE		;AN000;
 25953                                  IOTO22:
 25954                                  	;test	word [si+5],80h
 25955                                  	;TEST	word [SI+SF_ENTRY.sf_flags],devid_device 
 25956 00004407 F6440580                	test	byte [SI+SF_ENTRY.sf_flags],devid_device	
 25957 0000440B 7503                    	JNZ	short IOTO33		;AN000;
 25958 0000440D E99C00                  	JMP	IOTOFILE		;AN000;
 25959                                  IOTO33:
 25960 00004410 06                      	push	es ; * (MSDOS 6.21)
 25961 00004411 E84EC0                  	call	save_world
 25962 00004414 8CDA                    	MOV	DX,DS
 25963 00004416 8CD3                    	MOV	BX,SS
 25964 00004418 8EDB                    	MOV	DS,BX
 25965 0000441A 8EC3                    	MOV	ES,BX
 25966 0000441C 31DB                    	XOR	BX,BX
 25967 0000441E 80FC05                  	cmp	ah,5		    ; system wait enabled?
 25968 00004421 7503                    	jnz	short _no_sys_wait
 25969                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25970                                  	; 16/12/2022
 25971 00004423 80CF04                  	or	bh,04h
 25972                                  	;or	bx,0400H	    ; Set bit 10 in status word for driver
 25973                                  				    ; It is up to device driver to carry out
 25974                                  				    ; appropriate action.
 25975                                  _no_sys_wait:
 25976 00004426 891E[7F03]              	MOV	[IOCALL_REQSTAT],BX
 25977 0000442A 31DB                    	XOR	BX,BX
 25978 0000442C 881E[8903]              	MOV	[IOMED],BL
 25979                                  
 25980 00004430 88E3                    	MOV	BL,AH		 	; get function
 25981 00004432 2E8AA7[D543]            	MOV	AH,[cs:BX+LenTab]
 25982 00004437 D1E3                    	SHL	BX,1
 25983 00004439 2E8B8F[DB43]            	MOV	CX,[cs:BX+CmdTab]
 25984 0000443E BB[7C03]                	MOV	BX,IOCALL ; DOSDATA:037Ch
 25985 00004441 8826[7C03]              	MOV	[IOCALL_REQLEN],AH
 25986 00004445 882E[7E03]              	MOV	[IOCALL_REQFUNC],CH
 25987                                  
 25988 00004449 8EDA                    	MOV	DS,DX
 25989 0000444B E86B01                  	CALL	DEVIOCALL
 25990 0000444E 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	; SS override
 25991 00004453 21FF                    	and	di,di
 25992 00004455 7834                    	js	short DevErr
 25993                                  OKDevIO:
 25994 00004457 8CD0                    	MOV	AX,SS
 25995 00004459 8ED8                    	MOV	DS,AX
 25996                                  
 25997                                  	;cmp	ch,5
 25998 0000445B 80FD05                  	CMP	CH,DEVRDND
 25999 0000445E 7506                    	JNZ	short DNODRD
 26000 00004460 A0[8903]                	MOV	AL,[IORCHR]
 26001 00004463 A2[BC03]                	MOV	[DEVIOBUF],AL
 26002                                  
 26003                                  DNODRD: 
 26004 00004466 8A26[8003]              	MOV	AH,[IOCALL_REQSTAT+1]
 26005 0000446A F6D4                    	NOT	AH			; Zero = busy, not zero = ready
 26006                                  	;and	ah,2
 26007 0000446C 80E402                  	AND	AH,STBUI>>8
 26008                                  
 26009                                  QuickReturn:				;AN000; 2/13/KK
 26010 0000446F E8D9BF                  	call	restore_world
 26011 00004472 07                      	pop	es ; * (MSDOS 6.21)
 26012                                  
 26013                                  	; SR;
 26014                                  	; We return ax = -1 if the user failed on I24. This is the case if 
 26015                                  	; IoStatFail = -1 (set after return from the I24)
 26016                                  
 26017                                  	; MSDOS 6.0
 26018 00004473 9C                      	pushf
 26019 00004474 36A0[8300]              	mov	al,[ss:IoStatFail]	;assume fail error
 26020 00004478 98                      	cbw				;sign extend to word
 26021 00004479 83F8FF                  	cmp	ax,-1
 26022 0000447C 7507                    	jne	short not_fail_ret
 26023 0000447E 36FE06[8300]            	inc	byte [ss:IoStatFail]
 26024 00004483 9D                      	popf
 26025 00004484 C3                      	retn
 26026                                  
 26027                                  not_fail_ret:
 26028 00004485 36A1[BC03]              	mov	ax,[ss:DEVIOBUF]	;ss override
 26029 00004489 9D                      	popf
 26030 0000448A C3                      	retn
 26031                                  
 26032                                  DevErr:
 26033 0000448B 88CC                    	MOV	AH,CL
 26034 0000448D E89C0D                  	call	CHARHARD
 26035 00004490 3C01                    	CMP	AL,1
 26036 00004492 7507                    	JNZ	short NO_RETRY
 26037 00004494 E8B4BF                  	call	restore_world
 26038                                  	; 12/05/2019
 26039 00004497 07                      	pop	es ; * (MSDOS 6.21)		
 26040 00004498 E94CFF                  	JMP	IOFUNC	; 10/08/2018
 26041                                  
 26042                                  NO_RETRY:
 26043                                  	; Know user must have wanted Ignore OR Fail. Make sure device shows ready
 26044                                  	; ready so that DOS doesn't get caught in a status loop when user 
 26045                                  	; simply wants to ignore the error.
 26046                                  	;
 26047                                  	; SR; If fail wanted by user set ax to special value (ax = -1). This 
 26048                                  	; should be checked by the caller on return
 26049                                  
 26050                                  					; SS override
 26051 0000449B 368026[8003]FD          	and	byte [SS:IOCALL_REQSTAT+1],0FDh
 26052                                  	;AND	BYTE [SS:IOCALL_REQSTAT+1],~(STBUI>>8)
 26053                                  
 26054                                  	; SR;
 26055                                  	; Check if user failed
 26056                                  
 26057                                  	; MSDOS 6.0
 26058 000044A1 3C03                    	cmp	al,3
 26059 000044A3 7505                    	jnz	short not_fail
 26060 000044A5 36FE0E[8300]            	dec	byte [ss:IoStatFail]	;set flag indicating fail on I24
 26061                                  not_fail:
 26062 000044AA EBAB                    	JMP	short OKDevIO
 26063                                  
 26064                                  IOTOFILE:
 26065 000044AC 08E4                    	OR	AH,AH
 26066 000044AE 7421                    	JZ	short IOIN
 26067 000044B0 FECC                    	DEC	AH
 26068 000044B2 7405                    	JZ	short IOIST
 26069 000044B4 FECC                    	DEC	AH
 26070 000044B6 7411                    	JZ	short IOUT
 26071                                  IOUT_retn:	; 18/12/2022
 26072 000044B8 C3                      	retn				; NON ZERO FLAG FOR OUTPUT STATUS
 26073                                  IOIST:
 26074                                  	;push	word [si+15h]
 26075 000044B9 FF7415                  	PUSH	WORD [SI+SF_ENTRY.sf_position]   ; Save position
 26076                                  	;push	word [si+17h]
 26077 000044BC FF7417                  	PUSH	WORD [SI+SF_ENTRY.sf_position+2]
 26078 000044BF E80F00                  	CALL	IOIN
 26079                                  	;pop	word [si+17h]
 26080 000044C2 8F4417                  	POP	WORD [SI+SF_ENTRY.sf_position+2] ; Restore position
 26081                                  	;pop	word [si+15h]
 26082 000044C5 8F4415                  	POP	WORD [SI+SF_ENTRY.sf_position]
 26083 000044C8 C3                      	retn
 26084                                  IOUT:
 26085 000044C9 E82500                  	CALL	SETXADDR
 26086 000044CC E886EF                  	call	DOS_WRITE
 26087                                  	;CALL	RESTXADDR	; If you change this into a jmp don't
 26088                                  	; 18/12/2022
 26089 000044CF EB52                    	jmp	RESTXADDR
 26090                                  ;IOUT_retn:
 26091                                  	;retn			; come crying to me when things don't
 26092                                  				; work ARR
 26093                                  IOIN:
 26094 000044D1 E81D00                  	CALL	SETXADDR
 26095                                  					; SS override for DOS34_FLAG
 26096                                  	;OR	word [SS:DOS34_FLAG],Disable_EOF_I24	;AN000;
 26097                                  	;or	word [ss:DOS34_FLAG],40h
 26098                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26099                                  	; 16/12/2022
 26100 000044D4 36800E[1106]40          	or	byte [ss:DOS34_FLAG],40h 
 26101 000044DA E865ED                  	CALL	DOS_READ
 26102                                  	;AND	word [SS:DOS34_FLAG],NO_Disable_EOF_I24 ;AN000;
 26103                                  	;and	word [SS:DOS34_FLAG],0FFBFh
 26104                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26105                                  	; 16/12/2022
 26106 000044DD 368026[1106]BF          	and	byte [SS:DOS34_FLAG],0BFh ; 07/12/2022
 26107 000044E3 09C9                    	OR	CX,CX			; Check EOF
 26108 000044E5 E83B00                  	CALL	RESTXADDR
 26109                                  					; SS override
 26110 000044E8 36A0[BC03]              	MOV	AL,[SS:DEVIOBUF]	; Get byte from trans addr
 26111 000044EC 75CA                    	jnz	short IOUT_retn	
 26112 000044EE B01A                    	MOV	AL,1AH			; ^Z if no bytes
 26113 000044F0 C3                      	retn
 26114                                  
 26115                                  SETXADDR:
 26116                                  					; SS override
 26117 000044F1 368F06[6C03]            	POP	WORD [SS:CALLSCNT]	; Return address
 26118                                  
 26119 000044F6 06                      	push	es ; * (MSDOS 6.21)
 26120                                  
 26121 000044F7 E868BF                  	call	save_world
 26122                                  					; SS override for DMAADD and THISSFT
 26123                                  	; 24/09/2023
 26124                                  	;PUSH	WORD [SS:DMAADD]	; Save Disk trans addr
 26125                                  	;PUSH	WORD [SS:DMAADD+2]
 26126 000044FA 368C1E[A005]            	MOV	[SS:THISSFT+2],DS
 26127                                  
 26128 000044FF 16                      	push	ss
 26129 00004500 1F                      	pop	ds
 26130                                  
 26131                                  	; 24/09/2023
 26132 00004501 FF36[2C03]              	push	word [DMAADD]
 26133 00004505 FF36[2E03]              	push	word [DMAADD+2]
 26134                                  
 26135 00004509 8936[9E05]              	MOV	[THISSFT],SI		; Finish setting SFT pointer
 26136 0000450D 8B0E[8C03]              	MOV	CX,[IOXAD+2]
 26137 00004511 890E[2E03]              	MOV	[DMAADD+2],CX
 26138 00004515 8B0E[8A03]              	MOV	CX,[IOXAD]
 26139 00004519 890E[2C03]              	MOV	[DMAADD],CX		; Set byte trans addr
 26140 0000451D 8B0E[8E03]              	MOV	CX,[IOSCNT]		; ioscnt specifies length of buffer
 26141 00004521 EB10                    	JMP	SHORT RESTRET		; RETURN ADDRESS
 26142                                  
 26143                                  RESTXADDR:
 26144 00004523 8F06[6C03]              	POP	WORD [CALLSCNT]		; Return address
 26145 00004527 8F06[2E03]              	POP	WORD [DMAADD+2]		; Restore Disk trans addr
 26146 0000452B 8F06[2C03]              	POP	WORD [DMAADD]
 26147                                  
 26148 0000452F E819BF                  	call	restore_world
 26149                                  
 26150 00004532 07                      	pop	es ; * (MSDOS 6.21)
 26151                                  					; SS override
 26152                                  RESTRET:
 26153 00004533 36FF26[6C03]            	JMP	WORD [SS:CALLSCNT]	; Return address
 26154                                  
 26155                                  ; DOSCODE:8569h (MSDOS 6.21, MSDOS.SYS)
 26156                                  ; 21/11/2022
 26157                                  ; DOSCODE:852Eh (MSDOS 5.0, MSDOS.SYS)
 26158                                  
 26159                                  ;Break <DEV_OPEN_SFT, DEV_CLOSE_SFT - OPEN or CLOSE A DEVICE>
 26160                                  
 26161                                  ;----------------------------------------------------------------------------
 26162                                  ;**	Dev_Open_SFT - Open the Device for an SFT
 26163                                  ;
 26164                                  ;	Dev_Open_SFT issues an open call to the device associated with
 26165                                  ;	the SFT.
 26166                                  ;
 26167                                  ;	ENTRY	(ES:DI) = SFT
 26168                                  ;	EXIT	none
 26169                                  ;	USES	all
 26170                                  ;----------------------------------------------------------------------------
 26171                                  
 26172                                  DEV_OPEN_SFT:
 26173 00004538 06                      	push	es ; * (MSDOS 6.21)
 26174 00004539 E826BF                  	call	save_world
 26175                                  	;mov	al,0Dh	
 26176 0000453C B00D                    	MOV	AL,DEVOPN
 26177 0000453E EB06                    	JMP	SHORT DO_OPCLS
 26178                                  
 26179                                  ;----------------------------------------------------------------------------
 26180                                  ; Procedure Name : DEV_CLOSE_SFT
 26181                                  ;
 26182                                  ; Inputs:
 26183                                  ;	ES:DI Points to SFT
 26184                                  ; Function:
 26185                                  ;	Issue a CLOSE call to the correct device
 26186                                  ; Outputs:
 26187                                  ;	None
 26188                                  ; ALL preserved
 26189                                  ;----------------------------------------------------------------------------
 26190                                  
 26191                                  DEV_CLOSE_SFT:
 26192 00004540 06                      	push	es ; * (MSDOS 6.21)
 26193 00004541 E81EBF                  	call	save_world
 26194                                  	;mov	al,0Eh	
 26195 00004544 B00E                    	MOV	AL,DEVCLS
 26196                                  
 26197                                  	; Main entry for device open and close. AL contains the function 
 26198                                  	; requested. Subtlety: if Sharing is NOT loaded then we do NOT issue 
 26199                                  	; open/close to block devices. This allows networks to function but 
 26200                                  	; does NOT hang up with bogus change-line code.
 26201                                  
 26202                                  	;entry	DO_OPCLS
 26203                                  DO_OPCLS:
 26204                                  	; Is the SFT for the net? If so, no action necessary.
 26205                                  
 26206                                  	; MSDOS 6.0
 26207                                  	;test	word [es:di+5],8000h
 26208                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 26209 00004546 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 26210 0000454B 7567                    	jnz	short OPCLS_DONE	; NOP on net SFTs
 26211 0000454D 30E4                    	XOR	AH,AH			; Unit
 26212                                  	;test	byte [es:di+5],80h
 26213 0000454F 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 26214                                  	;les	di,[es:di+7]
 26215 00004554 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get DPB or device
 26216 00004558 7513                    	JNZ	short GOT_DEV_ADDR
 26217                                  
 26218                                  	; We are about to call device open/close on a block driver. If no 
 26219                                  	; sharing then just short circuit to done.
 26220                                  	
 26221                                  	; MSDOS 6.0
 26222                                  					; SS override
 26223 0000455A 36803E[0303]01          	CMP	byte [ss:fShare],1	;AN010; /NC or no SHARE
 26224 00004560 7652                    	JBE	short OPCLS_DONE	;AN010; yes
 26225                                  
 26226                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26227                                  	;mov	ah,[es:di+1]
 26228 00004562 268A6501                	MOV	AH,[ES:DI+DPB.UNIT]	; (ah) = unit
 26229 00004566 268A0D                  	mov	cl,[es:di]
 26230                                  	;MOV	CL,[ES:DI+DPB.DRIVE]	; (cl) = drive
 26231                                  	;;les	di,[es:di+12h] ; MSDOS 3.3
 26232                                  	;les	di,[es:di+13h] ; MSDOS 6.0
 26233 00004569 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Get device
 26234                                  GOT_DEV_ADDR:				; ES:DI -> device
 26235                                  	;test	word [es:di+4],800h
 26236                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL
 26237 0000456D 26F6450508              	test	byte [ES:DI+SYSDEV.ATT+1],(DEVOPCL>>8)
 26238 00004572 7440                    	JZ	short OPCLS_DONE	; Device can't
 26239 00004574 06                      	PUSH	ES
 26240 00004575 1F                      	POP	DS
 26241 00004576 89FE                    	MOV	SI,DI			; DS:SI -> device
 26242                                  
 26243                                  OPCLS_RETRY:
 26244                                  	;Context ES
 26245 00004578 16                      	push	ss
 26246 00004579 07                      	pop	es
 26247                                  					; DEVCALL is in DOSDATA
 26248 0000457A BF[5A03]                	MOV	DI,DEVCALL
 26249                                  
 26250 0000457D 89FB                    	MOV	BX,DI
 26251 0000457F 50                      	PUSH	AX
 26252                                  	;mov	al,13
 26253 00004580 B00D                    	MOV	AL,DOPCLHL
 26254 00004582 AA                      	STOSB				; Length
 26255 00004583 58                      	POP	AX
 26256 00004584 86E0                    	XCHG	AH,AL
 26257 00004586 AA                      	STOSB				; Unit
 26258 00004587 86E0                    	XCHG	AH,AL
 26259 00004589 AA                      	STOSB				; Command
 26260 0000458A 26C7050000              	MOV	WORD [ES:DI],0		; Status
 26261 0000458F 50                      	PUSH	AX			; Save Unit,Command
 26262                                  	;invoke	DEVIOCALL2
 26263 00004590 E82900                  	call	DEVIOCALL2
 26264                                  
 26265                                  	;mov	di,[es:bx+3]
 26266 00004593 268B7F03                	MOV	DI,[ES:BX+SRHEAD.REQSTAT]
 26267                                  	;test	di,8000h
 26268                                  	;jz	short OPCLS_DONEP	
 26269 00004597 21FF                    	and	di,di
 26270 00004599 7918                    	jns	short OPCLS_DONEP	; No error
 26271                                  	; 21/11/2022
 26272                                  	;test	word [si+4],8000h
 26273                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 26274                                  	;test	word [si+5],80h
 26275 0000459B F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 26276 0000459F 7404                    	JZ	short BLKDEV
 26277 000045A1 B486                    	MOV	AH,86H			; Read error in data, Char dev
 26278 000045A3 EB04                    	JMP	SHORT HRDERR
 26279                                  BLKDEV:
 26280 000045A5 88C8                    	MOV	AL,CL			; Drive # in AL
 26281 000045A7 B406                    	MOV	AH,6			; Read error in data, Blk dev
 26282                                  HRDERR:
 26283                                  	;invoke	CHARHARD
 26284 000045A9 E8800C                  	call	CHARHARD
 26285 000045AC 3C01                    	cmp	al,1
 26286 000045AE 7503                    	jne	short OPCLS_DONEP	; IGNORE or FAIL
 26287                                  					;  Note that FAIL is essentually IGNORED
 26288 000045B0 58                      	POP	AX			; Get back Unit, Command
 26289 000045B1 EBC5                    	JMP	short OPCLS_RETRY
 26290                                  OPCLS_DONEP:
 26291 000045B3 58                      	POP	AX			; Clean stack
 26292                                  OPCLS_DONE:
 26293 000045B4 E894BE                  	call	restore_world
 26294 000045B7 07                      	pop	es ; * (MSDOS 6.21)
 26295 000045B8 C3                      	retn
 26296                                  
 26297                                  ; 30/04/2019 - Retro DOS v4.0
 26298                                  ; DOSCODE:85EAh (MSDOS 6.21, MSDOS.SYS)
 26299                                  
 26300                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26301                                  ; DOSCODE:85AFh (MSDOS 5.0, MSDOS.SYS)
 26302                                  
 26303                                  ;Break	<DEVIOCALL, DEVIOCALL2 - CALL A DEVICE>
 26304                                  ;----------------------------------------------------------------------------
 26305                                  ;**	DevIoCall  - Call Device
 26306                                  ;
 26307                                  ;	ENTRY	DS:SI Points to device SFT
 26308                                  ;		ES:BX Points to request data
 26309                                  ;	EXIT	DS:SI -> Device driver
 26310                                  ;	USES	DS:SI,AX
 26311                                  ;----------------------------------------------------------------------------
 26312                                  ;**	DevIoCall2 - Call Device
 26313                                  ;
 26314                                  ;	ENTRY	DS:SI Points to DPB
 26315                                  ;		ES:BX Points to request data
 26316                                  ;	EXIT	DS:SI -> Device driver
 26317                                  ;	USES	DS:SI,AX
 26318                                  ;----------------------------------------------------------------------------
 26319                                  
 26320                                  DEVIOCALL:
 26321                                  					; SS override for CALLSSEC, 
 26322                                  	;lds	si,[si+7]		; CALLNEWSC, HIGH_SECTOR & CALLDEVAD
 26323 000045B9 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 26324                                  
 26325                                  	;entry	DEVIOCALL2
 26326                                  DEVIOCALL2:
 26327                                  	;EnterCrit critDevice
 26328 000045BC E869CD                  	call	ECritDevice
 26329                                  
 26330                                  	; MSDOS 6.0
 26331                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ;AN000; >32mb block device ?
 26332                                  	;test	byte [si+5],80h
 26333 000045BF F6440580                	test	byte [si+SYSDEV.ATT+1],(DEVTYP>>8)
 26334 000045C3 7548                    	jnz	short chardev2		;AN000; >32mb no
 26335                                  
 26336                                  	; 16/12/2022
 26337                                  	; 22/11/2022
 26338 000045C5 268A4702                	mov	al,[ES:BX+SRHEAD.REQFUNC] ; [es:bx+2]
 26339 000045C9 3C04                    	cmp	al,DEVRD	; 4
 26340 000045CB 7408                    	je	short chkext	
 26341 000045CD 3C08                    	cmp	al,DEVWRT	; 8
 26342 000045CF 7404                    	je	short chkext
 26343 000045D1 3C09                    	cmp	al,DEVWRTV	; 9
 26344 000045D3 7538                    	jne	short chardev2
 26345                                  
 26346                                  	; 16/12/2022
 26347                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26348                                  	;;cmp	byte [es:bx+2],4
 26349                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVRD  ;AN000; >32mb read ?
 26350                                  	;JZ	short chkext		;AN000; >32mb   yes
 26351                                  	;;cmp	byte [es:bx+2],8
 26352                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRT ;AN000; >32mb write ?
 26353                                  	;JZ	short chkext		;AN000; >32mb   yes
 26354                                  	;;cmp	byte [es:bx+2],9
 26355                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRTV
 26356                                  	;				;AN000; >32mb write/verify ?
 26357                                  	;JNZ	short chardev2		;AN000; >32mb no
 26358                                  chkext:
 26359 000045D5 E8A700                  	CALL	RW_SC			;AN000;LB. use secondary cache if there
 26360 000045D8 7255                    	JC	short dev_exit		;AN000;LB. done
 26361                                  
 26362                                  	;test	byte [si+4],2
 26363 000045DA F6440402                	TEST	byte [SI+SYSDEV.ATT],EXTDRVR ;AN000;>32mb extended driver?
 26364 000045DE 741D                    	JZ	short chksector		;AN000;>32mb   no
 26365 000045E0 26800708                	ADD	BYTE [ES:BX],8		;AN000;>32mb   make length to 30
 26366 000045E4 36A1[6E03]              	MOV	AX,[SS:CALLSSEC]	;AN000;>32mb
 26367 000045E8 36C706[6E03]FFFF        	MOV	word [SS:CALLSSEC],-1	;AN000;>32mb   old sector  =-1
 26368 000045EF 36A3[7403]              	MOV	[SS:CALLNEWSC],AX	;AN000;>32mb   new sector  =
 26369 000045F3 36A1[0706]              	MOV	AX,[SS:HIGH_SECTOR]	;AN000; >32mb  low sector,high sector
 26370 000045F7 36A3[7603]              	MOV	[SS:CALLNEWSC+2],AX	;AN000; >32mb
 26371 000045FB EB10                    	JMP	short chardev2		;AN000; >32mb
 26372                                  chksector:				;AN000; >32mb
 26373 000045FD 36833E[0706]00          	CMP	word [SS:HIGH_SECTOR],0	;AN000; >32mb   if >32mb
 26374 00004603 7408                    	JZ	short chardev2		;AN000; >32mb   then fake error
 26375                                  	;mov	word [es:bx+3],8107h
 26376 00004605 26C747030781            	MOV	word [ES:BX+SRHEAD.REQSTAT],STERR+STDON+error_I24_not_DOS_disk 
 26377                                  					;AN000; >32mb
 26378 0000460B EB22                    	JMP	SHORT dev_exit		;AN000; >32mb
 26379                                  
 26380                                  chardev2:				;AN000;
 26381                                  	; As above only DS:SI points to device header on entry, and DS:SI is 
 26382                                  	; preserved
 26383                                  
 26384                                  	;mov	ax,[si+6]
 26385 0000460D 8B4406                  	MOV	AX,[SI+SYSDEV.STRAT]
 26386 00004610 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 26387 00004614 368C1E[7A03]            	MOV	[SS:CALLDEVAD+2],DS
 26388 00004619 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 26389                                  
 26390                                  	;mov	ax,[si+8]
 26391 0000461E 8B4408                  	MOV	AX,[SI+SYSDEV.INT]
 26392 00004621 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 26393 00004625 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 26394                                  
 26395                                  	; MSDOS 6.0
 26396 0000462A E84801                  	CALL	VIRREAD 		;AN000;LB. move data from SC to buffer
 26397 0000462D 72DE                    	JC	short chardev2		;AN000;LB. bad sector or exceeds max sec
 26398                                  
 26399                                  dev_exit:
 26400                                  	;LeaveCrit critDevice
 26401                                  	;call	LCritDevice
 26402                                  	;retn
 26403                                  	; 18/12/2022
 26404 0000462F E911CD                  	jmp	LCritDevice
 26405                                  
 26406                                  ; DOSCODE:8669h (MSDOS 6.21, MSDOS.SYS)
 26407                                  ; 22/11/2022
 26408                                  ; DOSCODE:862Eh (MSDOS 5.0, MSDOS.SYS)
 26409                                  
 26410                                  ;Break	<SETREAD, SETWRITE -- SET UP HEADER BLOCK>
 26411                                  ;---------------------------------------------------------------------------
 26412                                  ;
 26413                                  ; Procedure Name : SETREAD, SETWRITE
 26414                                  ;
 26415                                  ; Inputs:
 26416                                  ;	DS:BX = Transfer Address
 26417                                  ;	CX = Record Count
 26418                                  ;	DX = Starting Record
 26419                                  ;	AH = Media Byte
 26420                                  ;	AL = Unit Code
 26421                                  ; Function:
 26422                                  ;	Set up the device call header at DEVCALL
 26423                                  ; Output:
 26424                                  ;	ES:BX Points to DEVCALL
 26425                                  ; No other registers effected
 26426                                  ;
 26427                                  ;---------------------------------------------------------------------------
 26428                                  
 26429                                  SETREAD_XJ:
 26430                                  	;;;
 26431                                  	; 07/02/2024 - Retro DOS v4.2
 26432 00004632 89FB                    	mov	bx,di
 26433 00004634 EB07                    	jmp	short SETREAD_X
 26434                                  	;;;
 26435                                  
 26436                                  SETREAD_XT:
 26437                                  	;;;
 26438                                  	; 07/02/2024 - Retro DOS v4.2
 26439 00004636 BB[B603]                	mov	bx,TIMEBUF
 26440 00004639 53                      	push	bx
 26441                                  SETREAD_XTC:
 26442 0000463A B90600                  	mov	cx,6
 26443                                  	;;;
 26444                                  SETREAD_X:
 26445                                  	;;;
 26446                                  	; 06/02/2024 - Retro DOS v4.2
 26447 0000463D 31C0                    	xor	ax,ax
 26448                                  	;mov	dx,ax ; 0
 26449 0000463F 99                      	cwd
 26450                                  	;;;
 26451                                  
 26452                                  ; ------------------------------------
 26453                                  
 26454                                  SETREAD:
 26455 00004640 57                      	PUSH	DI
 26456 00004641 51                      	PUSH	CX
 26457 00004642 50                      	PUSH	AX
 26458 00004643 B104                    	MOV	CL,DEVRD ; mov cl,4
 26459                                  SETCALLHEAD:
 26460 00004645 B016                    	MOV	AL,DRDWRHL ; mov al,16h
 26461 00004647 16                      	PUSH	SS
 26462 00004648 07                      	POP	ES
 26463                                  					; DEVCALL is in DOSDATA
 26464 00004649 BF[5A03]                	MOV	DI,DEVCALL
 26465                                  
 26466 0000464C AA                      	STOSB				; length
 26467 0000464D 58                      	POP	AX			; 
 26468 0000464E AA                      	STOSB				; Unit
 26469 0000464F 50                      	PUSH	AX
 26470 00004650 88C8                    	MOV	AL,CL
 26471 00004652 AA                      	STOSB				; Command code
 26472 00004653 31C0                    	XOR	AX,AX
 26473 00004655 AB                      	STOSW				; Status
 26474 00004656 83C708                  	ADD	DI,8			; Skip link fields
 26475 00004659 58                      	POP	AX
 26476 0000465A 86E0                    	XCHG	AH,AL
 26477 0000465C AA                      	STOSB				; Media byte
 26478 0000465D 86C4                    	XCHG	AL,AH
 26479 0000465F 50                      	PUSH	AX
 26480 00004660 89D8                    	MOV	AX,BX
 26481 00004662 AB                      	STOSW
 26482                                  
 26483 00004663 8CD8                    	MOV	AX,DS
 26484 00004665 AB                      	STOSW				; Transfer addr
 26485                                  
 26486 00004666 59                      	POP	CX			; Real AX
 26487 00004667 58                      	POP	AX			; Real CX
 26488 00004668 AB                      	STOSW				; Count
 26489                                  
 26490 00004669 92                      	XCHG	AX,DX			; AX=Real DX, DX=real CX, CX=real AX
 26491 0000466A AB                      	STOSW				; Start
 26492 0000466B 91                      	XCHG	AX,CX
 26493 0000466C 87D1                    	XCHG	DX,CX
 26494 0000466E 5F                      	POP	DI
 26495                                  					; DEVCALL is in DOSDATA
 26496 0000466F BB[5A03]                	MOV	BX,DEVCALL
 26497 00004672 C3                      	retn
 26498                                  
 26499                                  	;entry	SETWRITE
 26500                                  SETWRITE:
 26501                                  
 26502                                  ; Inputs:
 26503                                  ;	DS:BX = Transfer Address
 26504                                  ;	CX = Record Count
 26505                                  ;	DX = Starting Record
 26506                                  ;	AH = Media Byte
 26507                                  ;	AL = Unit Code
 26508                                  ; Function:
 26509                                  ;	Set up the device call header at DEVCALL
 26510                                  ; Output:
 26511                                  ;	ES:BX Points to DEVCALL
 26512                                  ; No other registers effected
 26513                                  
 26514 00004673 57                      	PUSH	DI
 26515 00004674 51                      	PUSH	CX
 26516 00004675 50                      	PUSH	AX
 26517 00004676 B108                    	MOV	CL,DEVWRT ; mov cl,8
 26518 00004678 36020E[FF02]            	ADD	CL,[SS:VERFLG]		; SS override
 26519 0000467D EBC6                    	JMP	SHORT SETCALLHEAD
 26520                                  
 26521                                  ; 30/04/2019 - Retro DOS v4.0
 26522                                  ; DOSCODE:86A8h (MSDOS 6.21, MSDOS.SYS)
 26523                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26524                                  ; DOSCODE:866Dh (MSDOS 5.0, MSDOS.SYS)
 26525                                  
 26526                                  ;Break	<RW_SC -- Read Write Secondary Cache>
 26527                                  ;---------------------------------------------------------------------------
 26528                                  ;
 26529                                  ; Procedure Name : RW_SC
 26530                                  ;
 26531                                  ; Inputs:
 26532                                  ;	 [SC_CACHE_COUNT]= secondary cache count
 26533                                  ;	 [SC_STATUS]= SC validity status
 26534                                  ;	 [SEQ_SECTOR]= last sector read
 26535                                  ; Function:
 26536                                  ;	Read from or write through secondary cache
 26537                                  ; Output:
 26538                                  ;	ES:BX Points to DEVCALL
 26539                                  ;	carry clear, I/O is not done
 26540                                  ;		     [SC_FLAG]=1 if continuos sectors will be read
 26541                                  ;	carry set, I/O is done
 26542                                  ;
 26543                                  ;----------------------------------------------------------------------------
 26544                                  
 26545                                  RW_SC:
 26546                                  	; SS override for all variables used.
 26547                                  	
 26548 0000467F 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0  ;AN000;LB. secondary cache exists?
 26549 00004685 7421                    	JZ	short scexit4		    ;AN000;LB. no, do nothing
 26550 00004687 36833E[6C03]01          	CMP	word [ss:CALLSCNT],1	    ;AN000;LB. sector count = 1 (buffer I/O)
 26551 0000468D 7519                    	JNZ	short scexit4 		    ;AN000;LB. no, do nothing
 26552 0000468F 51                      	PUSH	CX			    ;AN000;LB.
 26553 00004690 52                      	PUSH	DX			    ;AN000;LB. yes
 26554 00004691 1E                      	PUSH	DS			    ;AN000;LB. save registers
 26555 00004692 56                      	PUSH	SI			    ;AN000;LB.
 26556 00004693 06                      	PUSH	ES			    ;AN000;LB.
 26557 00004694 57                      	PUSH	DI			    ;AN000;LB.
 26558                                  
 26559 00004695 368B16[6E03]            	MOV	DX,[ss:CALLSSEC]	    ;AN000;LB. starting sector
 26560 0000469A 36803E[5C03]04          	CMP	BYTE [ss:DEVCALL_REQFUNC],DEVRD ;AN000;LB. read ?
 26561 000046A0 7408                    	JZ	short doread		    ;AN000;LB. yes
 26562 000046A2 E8BE00                  	CALL	INVALIDATE_SC		    ;AN000;LB. invalidate SC
 26563 000046A5 E98B00                  	JMP	scexit2 		    ;AN000;LB. back to normal
 26564                                  scexit4:				    ;AN000;
 26565 000046A8 F8                      	CLC				    ;AN000;LB. I/O not done yet
 26566 000046A9 C3                      	retn				    ;AN000;LB.
 26567                                  doread: 				    ;AN000;
 26568 000046AA E82001                  	CALL	SC2BUF			    ;AN000;LB. check if in SC
 26569 000046AD 720A                    	JC	short readSC		    ;AN000;LB.
 26570 000046AF 36C706[5D03]0001        	MOV	word [ss:DEVCALL_REQSTAT],STDON ;AN000;LB. fake done and ok
 26571 000046B6 F9                      	STC				    ;AN000;LB. set carry
 26572 000046B7 EB68                    	JMP	short saveseq 		    ;AN000;LB. save seq. sector #
 26573                                  readSC: 				    ;AN000;
 26574 000046B9 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]   	    ;AN000;LB. subtract sector num from
 26575 000046BD 368B0E[6E03]            	MOV	CX,[ss:CALLSSEC]	    ;AN000;LB. saved sequential sector
 26576 000046C2 362B0E[A90D]            	SUB	CX,[ss:SEQ_SECTOR]    	    ;AN000;LB. number
 26577 000046C7 361B06[AB0D]            	SBB	AX,[ss:SEQ_SECTOR+2]  	    ;AN000;LB.
 26578                                  	; 24/09/2023
 26579                                  	;CMP	AX,0			    ;AN000;LB. greater than 64K
 26580 000046CC 7552                    	JNZ	short saveseq2		    ;AN000;LB. yes,save seq. sector #
 26581                                  chklow: 						
 26582 000046CE 83F901                  	CMP	CX,1			    ;AN000;LB. <= 1
 26583 000046D1 774D                    	JA	short saveseq2		    ;AN000;LB. no, not sequential
 26584 000046D3 36C706[B50D]FFFF        	MOV	word [ss:SC_STATUS],-1	    ;AN000;LB. presume all SC valid
 26585 000046DA 36A1[7700]              	MOV	AX,[ss:SC_CACHE_COUNT]	    ;AN000;LB. yes, sequential
 26586 000046DE 36A3[6C03]              	MOV	[ss:CALLSCNT],AX	    ;AN000;LB. read continuous sectors
 26587                                  readsr:
 26588 000046E2 36A1[6A03]              	MOV	AX,[ss:CALLXAD+2]	    ;AN000;LB. save buffer addr
 26589 000046E6 36A3[0E06]              	MOV	[ss:TEMP_VAR2],AX	    ;AN000;LB. in temp vars
 26590 000046EA 36A1[6803]              	MOV	AX,[ss:CALLXAD]	    	    ;AN000;LB.
 26591 000046EE 36A3[0C06]              	MOV	[ss:TEMP_VAR],AX	    ;AN000;LB.
 26592                                  
 26593 000046F2 36A1[7300]              	MOV	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. use SC cache addr as
 26594 000046F6 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;LB. transfer addr
 26595 000046FA 36A1[7500]              	MOV	AX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 26596 000046FE 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;LB.
 26597 00004702 36C606[B70D]01          	MOV	byte [ss:SC_FLAG],1	    ;AN000;LB. flag it for later;
 26598 00004708 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;LB. current drive
 26599 0000470C 36A2[B00D]              	MOV	[ss:CurSC_DRIVE],AL	    ;AN000;LB. set current drive
 26600 00004710 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB. current sector
 26601 00004714 36A3[B10D]              	MOV	[ss:CurSC_SECTOR],AX	    ;AN000;LB. set current sector
 26602 00004718 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB.
 26603 0000471C 36A3[B30D]              	MOV	[ss:CurSC_SECTOR+2],AX	    ;AN000;LB.
 26604                                  saveseq2:				    ;AN000;
 26605 00004720 F8                      	CLC				    ;AN000;LB. clear carry
 26606                                  saveseq:				    ;AN000;	
 26607 00004721 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB. save current sector #
 26608 00004725 36A3[AB0D]              	MOV	[ss:SEQ_SECTOR+2],AX	    ;AN000;LB. for access mode ref.
 26609 00004729 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB.	
 26610 0000472D 36A3[A90D]              	MOV	[ss:SEQ_SECTOR],AX 	    ;AN000;LB.	
 26611 00004731 EB01                    	JMP	short scexit 		    ;AN000;LB.	
 26612                                  scexit2:				    ;AN000;LB.
 26613 00004733 F8                      	CLC				    ;AN000;LB.	clear carry
 26614                                  scexit: 				    ;AN000;		
 26615 00004734 5F                      	POP	DI			    ;AN000;LB.
 26616 00004735 07                      	POP	ES			    ;AN000;LB. restore registers
 26617 00004736 5E                      	POP	SI			    ;AN000;LB.
 26618 00004737 1F                      	POP	DS			    ;AN000;LB.
 26619 00004738 5A                      	POP	DX			    ;AN000;LB.
 26620 00004739 59                      	POP	CX			    ;AN000;LB.
 26621 0000473A C3                      	retn				    ;AN000;LB.
 26622                                  
 26623                                  ;Break	<IN_SC -- check if in secondary cache>
 26624                                  ;--------------------------------------------------------------------------
 26625                                  ;
 26626                                  ; Procedure Name : IN_SC
 26627                                  ;
 26628                                  ; Inputs:  [SC_DRIVE]= requesting drive
 26629                                  ;	   [CURSC_DRIVE]= current SC drive
 26630                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 26631                                  ;	   [SC_CACHE_COUNT]= SC count
 26632                                  ;	   [HIGH_SECTOR]:DX= sector number
 26633                                  ; Function:
 26634                                  ;	Check if the sector is in secondary cache
 26635                                  ; Output:
 26636                                  ;	carry clear, in SC
 26637                                  ;	   CX= the index in the secondary cache
 26638                                  ;	carry set, not in SC
 26639                                  ;
 26640                                  ;---------------------------------------------------------------------------
 26641                                  
 26642                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26643                                  IN_SC:
 26644                                  	; SS override for all variables used
 26645 0000473B 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;;LB. current drive
 26646 0000473F 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	    ;AN000;;LB. same as SC drive
 26647 00004744 751B                    	JNZ	short outrange2		    ;AN000;;LB. no
 26648 00004746 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;;LB. subtract sector num from
 26649 0000474A 89D1                    	MOV	CX,DX			    ;AN000;;LB. secondary starting sector
 26650 0000474C 362B0E[B10D]            	SUB	CX,[ss:CurSC_SECTOR]        ;AN000;;LB. number
 26651 00004751 361B06[B30D]            	SBB	AX,[ss:CurSC_SECTOR+2]      ;AN000;;LB.
 26652                                  	; 24/09/2023
 26653                                  	;CMP	AX,0			    ;AN000;;LB. greater than 64K
 26654 00004756 7509                    	JNZ	short outrange2		    ;AN000;;LB. yes
 26655 00004758 363B0E[7700]            	CMP	CX,[ss:SC_CACHE_COUNT]	    ;AN000;;LB. greater than SC count
 26656 0000475D 7302                    	JAE	short outrange2		    ;AN000;;LB. yes
 26657 0000475F F8                      	CLC				    ;AN000;;LB. clear carry
 26658                                  	;JMP	short inexit		    ;AN000;;LB. in SC
 26659                                  	; 16/12/2022
 26660 00004760 C3                      	retn	; 30/04/2019
 26661                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26662                                  	;jmp	short inexit
 26663                                  
 26664                                  outrange2:				    ;AN000;;LB. set carry
 26665 00004761 F9                      	STC				    ;AN000;;LB.
 26666                                  inexit: 				    ;AN000;;LB.
 26667 00004762 C3                      	retn				    ;AN000;;LB.
 26668                                  
 26669                                  ;Break	<INVALIDATE_SC - invalide secondary cache>
 26670                                  ;---------------------------------------------------------------------------
 26671                                  ;
 26672                                  ; Procedure Name : Invalidate_Sc
 26673                                  ;
 26674                                  ; Inputs:  [SC_DRIVE]= requesting drive
 26675                                  ;	   [CURSC_DRIVE]= current SC drive
 26676                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 26677                                  ;	   [SC_CACHE_COUNT]= SC count
 26678                                  ;	   [SC_STATUS]= SC status word
 26679                                  ;	   [HIGH_SECTOR]:DX= sector number
 26680                                  ;
 26681                                  ; Function:
 26682                                  ;	invalidate secondary cache if in there
 26683                                  ; Output:
 26684                                  ;	[SC_STATUS] is updated
 26685                                  ;---------------------------------------------------------------------------
 26686                                  
 26687                                  INVALIDATE_SC:
 26688                                  	; SS override for all variables used
 26689                                  
 26690 00004763 E8D5FF                  	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 26691 00004766 720C                    	JC	short outrange		    ;AN000;;LB. no
 26692 00004768 B80100                  	MOV	AX,1			    ;AN000;;LB. invalidate the sector
 26693 0000476B D3E0                    	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 26694 0000476D F7D0                    	NOT	AX			    ;AN000;;LB.
 26695 0000476F 362106[B50D]            	AND	[ss:SC_STATUS],AX	    ;AN000;;LB. save the status
 26696                                  outrange:				    ;AN000;;LB.
 26697 00004774 C3                      	retn				    ;AN000;;LB.
 26698                                  
 26699                                  ; DOSCODE:87A5h (MSDOS 6.21, MSDOS.SYS)
 26700                                  ; 22/11/2022
 26701                                  ; DOSCODE:876Ah (MSDOS 5.0, MSDOS.SYS)
 26702                                  
 26703                                  ;Break	<VIRREAD- virtually read data into buffer>
 26704                                  ;--------------------------------------------------------------------------
 26705                                  ;
 26706                                  ; Procedure Name : SC_FLAG
 26707                                  ;
 26708                                  ; Inputs:  SC_FLAG = 0, no sectors were read into SC
 26709                                  ;		     1, continuous sectors were read into SC
 26710                                  ; Function:
 26711                                  ;	   Move data from SC to buffer
 26712                                  ; Output:
 26713                                  ;	 carry clear, data is moved to buffer
 26714                                  ;	 carry set, bad sector or exceeds maximum sector
 26715                                  ;	   SC_FLAG =0
 26716                                  ;	   CALLSCNT=1
 26717                                  ;	   SC_STATUS= -1 if succeeded
 26718                                  ;     
 26719                                  ;		       0 if failed
 26720                                  ;--------------------------------------------------------------------------
 26721                                  
 26722                                  VIRREAD:
 26723                                  	; SS override for all variables used
 26724                                  
 26725 00004775 36803E[B70D]00          	CMP	byte [ss:SC_FLAG],0	    ;AN000;;LB. from SC fill
 26726 0000477B 744E                    	JZ	short sc2end		    ;AN000;;LB. no
 26727 0000477D 36A1[0E06]              	MOV	AX,[ss:TEMP_VAR2]	    ;AN000;;LB. restore buffer addr
 26728 00004781 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;;LB.
 26729 00004785 36A1[0C06]              	MOV	AX,[ss:TEMP_VAR]	    ;AN000;;LB.
 26730 00004789 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;;LB.
 26731 0000478D 36C606[B70D]00          	MOV	byte [ss:SC_FLAG],0	    ;AN000;;LB. reset sc_flag
 26732 00004793 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. one sector transferred
 26733                                  
 26734                                  	;TEST	word [SS:DEVCALL_REQSTAT],STERR ;AN000;;LB. error?
 26735 0000479A 36F606[5E03]80          	test	byte [ss:DEVCALL_REQSTAT+1],(STERR>>8) ; 80h
 26736 000047A0 7513                    	JNZ	short scerror 		    ;AN000;;LB. yes
 26737 000047A2 1E                      	PUSH	DS			    ;AN000;;LB.
 26738 000047A3 56                      	PUSH	SI			    ;AN000;;LB.
 26739 000047A4 06                      	PUSH	ES			    ;AN000;;LB.
 26740 000047A5 57                      	PUSH	DI			    ;AN000;;LB.
 26741 000047A6 52                      	PUSH	DX			    ;AN000;;LB.
 26742 000047A7 51                      	PUSH	CX			    ;AN000;;LB.
 26743 000047A8 31C9                    	XOR	CX,CX			    ;AN000;;LB. we want first sector in SC
 26744 000047AA E83100                  	CALL	SC2BUF2 		    ;AN000;;LB. move data from SC to buf
 26745 000047AD 59                      	POP	CX
 26746 000047AE 5A                      	POP	DX			    ;AN000;;LB.
 26747 000047AF 5F                      	POP	DI			    ;AN000;;LB.
 26748 000047B0 07                      	POP	ES			    ;AN000;;LB.
 26749 000047B1 5E                      	POP	SI			    ;AN000;;LB.
 26750 000047B2 1F                      	POP	DS			    ;AN000;;LB.
 26751 000047B3 EB16                    	JMP	SHORT sc2end		    ;AN000;;LB. return
 26752                                  scerror:				    ;AN000;
 26753 000047B5 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. reset sector count to 1
 26754 000047BC 36C706[B50D]0000        	MOV	word [ss:SC_STATUS],0	    ;AN000;;LB. invalidate all SC sectors
 26755 000047C3 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1    ;AN000;;LB. invalidate drive
 26756 000047C9 F9                      	STC				    ;AN000;;LB. carry set
 26757 000047CA C3                      	retn				    ;AN000;;LB.
 26758                                  sc2end: 				    ;AN000;
 26759 000047CB F8                      	CLC				    ;AN000;;LB. carry clear
 26760 000047CC C3                      	retn				    ;AN000;;LB.
 26761                                  
 26762                                  ; 30/04/2019 - Retro  DOS v4.0
 26763                                  ; DOSCODE:87FDh (MSDOS 6.21, MSDOS.SYS)
 26764                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26765                                  ; DOSCODE:87C2h (MSDOS 5.0, MSDOS.SYS)
 26766                                  
 26767                                  ;Break	<SC2BUF- move data from SC to buffer>
 26768                                  ;----------------------------------------------------------------------------
 26769                                  ;
 26770                                  ; Procedure Name : SC2BUF
 26771                                  ;
 26772                                  ; Inputs:  [SC_STATUS] = SC validity status
 26773                                  ;	   [SC_SECTOR_SIZE] = request sector size
 26774                                  ;	   [SC_CACHE_PTR] = pointer to SC
 26775                                  ; Function:
 26776                                  ;	   Move data from SC to buffer
 26777                                  ; Output:
 26778                                  ;	   carry clear, in SC  and data is moved
 26779                                  ;	   carry set, not in SC and data is not moved
 26780                                  ;---------------------------------------------------------------------------
 26781                                  
 26782                                  SC2BUF:
 26783                                  	; SS override for all variables used
 26784 000047CD E86BFF                  	CALL	IN_SC			    ;AN000;LB. in secondary cache
 26785                                  	;JC	short noSC		    ;AN000;LB. no
 26786                                  	; 24/09/2023
 26787 000047D0 723D                    	jc	short sexit
 26788 000047D2 B80100                  	MOV	AX,1			    ;AN000;LB. check if valid sector
 26789 000047D5 D3E0                    	SHL	AX,CL			    ;AN000;LB. in the secondary cache
 26790 000047D7 368506[B50D]            	TEST	[ss:SC_STATUS],AX	    ;AN000;LB.
 26791 000047DC 7430                    	JZ	short noSC		    ;AN000;LB. invalid
 26792                                  ;entry SC2BUF2
 26793                                  SC2BUF2:				    ;AN000;
 26794                                  	;MOV	AX,CX			    ;AN000;LB. times index with
 26795                                  	;MUL	word [ss:SC_SECTOR_SIZE]    ;AN000;LB. sector size
 26796                                  	; 24/09/2023
 26797 000047DE 36A1[AD0D]              	mov	ax,[ss:SC_SECTOR_SIZE]
 26798 000047E2 91                      	xchg	ax,cx ; cx = [ss:SC_SECTOR_SIZE]
 26799 000047E3 F7E1                    	mul	cx
 26800 000047E5 360306[7300]            	ADD	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. add SC starting addr
 26801 000047EA 361316[7500]            	ADC	DX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 26802 000047EF 8EDA                    	MOV	DS,DX			    ;AN000;LB. DS:SI-> SC sector addr
 26803 000047F1 89C6                    	MOV	SI,AX			    ;AN000;LB.
 26804 000047F3 368E06[6A03]            	MOV	ES,[ss:CALLXAD+2]		    ;AN000;LB. ES:DI-> buffer addr
 26805 000047F8 368B3E[6803]            	MOV	DI,[ss:CALLXAD]		    ;AN000;LB.
 26806                                  	; 24/09/2023
 26807                                  	;MOV	CX,[ss:SC_SECTOR_SIZE]	    ;AN000;LB. count= sector size
 26808 000047FD D1E9                    	SHR	CX,1			    ;AN000;LB. may use DWORD move for 386
 26809                                  ;entry MOVWORDS
 26810                                  MOVWORDS:				    ;AN000;
 26811 000047FF 36803E[6A00]00          	CMP	byte [ss:DDMOVE],0	    ;AN000;LB. 386 ?
 26812 00004805 7403                    	JZ	short nodd		    ;AN000;LB. no
 26813 00004807 D1E9                    	SHR	CX,1			    ;AN000;LB. words/2
 26814 00004809 66                      	DB	66H			    ;AN000;LB. use double word move
 26815                                  nodd:
 26816 0000480A F3A5                    	REP	MOVSW			    ;AN000;LB. move to buffer
 26817 0000480C F8                      	CLC				    ;AN000;LB. clear carry
 26818 0000480D C3                      	retn				    ;AN000;LB. exit
 26819                                  noSC:					    ;AN000;
 26820 0000480E F9                      	STC				    ;AN000;LB. set carry
 26821                                  sexit:					    ;AN000;
 26822 0000480F C3                      	retn				    ;AN000;LB.
 26823                                  
 26824                                  ;============================================================================
 26825                                  ; MKNODE.ASM, MSDOS 6.0, 1991
 26826                                  ;============================================================================
 26827                                  ; 29/07/2018 - Retro DOS v3.0
 26828                                  ; 19/05/2019 - Retro DOS v4.0
 26829                                  
 26830                                  ;	TITLE	MKNODE - Node maker
 26831                                  ;	NAME	MKNODE
 26832                                  
 26833                                  ;**	MKNODE.ASM
 26834                                  ;----------------------------------------------------------------------------
 26835                                  ;	Low level routines for making a new local file system node
 26836                                  ;	and filling in an SFT from a directory entry
 26837                                  ;
 26838                                  ;	BUILDDIR
 26839                                  ;	SETDOTENT
 26840                                  ;	MakeNode
 26841                                  ;	NEWENTRY
 26842                                  ;	FREEENT
 26843                                  ;	NEWDIR
 26844                                  ;	DOOPEN
 26845                                  ;	RENAME_MAKE
 26846                                  ;	CHECK_VIRT_OPEN
 26847                                  ;
 26848                                  ;	Revision history:
 26849                                  ;
 26850                                  ;	 AN000	version 4.0  Jan. 1988
 26851                                  ;	 A004	PTM 3680  --- Make SFT NAME field offset same as 3.30
 26852                                  
 26853                                  ;Break   <BUILDDIR,NEWDIR -- ALLOCATE DIRECTORIES>
 26854                                  ;----------------------------------------------------------------------------
 26855                                  ;
 26856                                  ; Procedure Name : BUILDDIR,NEWDIR
 26857                                  ;
 26858                                  ; Inputs:
 26859                                  ;       ES:BP Points to DPB
 26860                                  ;       [THISSFT] Set if using NEWDIR entry point
 26861                                  ;               (used by ALLOCATE)
 26862                                  ;       [LASTENT] current last valid entry number in directory if no free
 26863                                  ;               entries
 26864                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 26865                                  ; Function:
 26866                                  ;       Grow directory if no free entries and not root
 26867                                  ; Outputs:
 26868                                  ;       CARRY SET IF FAILURE
 26869                                  ;       ELSE
 26870                                  ;          AX entry number of new entry
 26871                                  ;          If a new dir [DIRSTART],[CLUSFAC],[CLUSNUM],[DIRSEC] set
 26872                                  ;               AX = first entry of new dir
 26873                                  ;       GETENT should be called to set [LASTENT]
 26874                                  ;
 26875                                  ;----------------------------------------------------------------------------
 26876                                  
 26877                                  ; 19/05/2019 - Retro DOS v4.0
 26878                                  ; DOSCODE:8845h (MSDOS 6.21, MSDOS.SYS)
 26879                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26880                                  ; DOSCODE:880Ah (MSDOS 6.21, MSDOS.SYS)
 26881                                  
 26882                                  ; 24/09/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 MSDOS.SYS)
 26883                                  ; DOSCODE:8845h (MSDOS 6.22, MSDOS.SYS)
 26884                                  
 26885                                  BUILDDIR:
 26886                                  	; 29/07/2018 - Retro DOS v3.0
 26887                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 4E66h
 26888                                  
 26889 00004810 A1[D805]                        MOV     AX,[ENTFREE]
 26890 00004813 83F8FF                          CMP     AX,-1 ; 0FFFFh
 26891                                  	;JZ	short CHECK_IF_ROOT
 26892                                          ;CLC
 26893                                          ;retn
 26894                                  	; 24/09/2023
 26895 00004816 7507                    	jne	short builddir_cmc_retn  ; cf=1 (will be 0)
 26896                                  
 26897                                  CHECK_IF_ROOT:
 26898 00004818 833E[C205]00                    CMP     word [DIRSTART],0
 26899 0000481D 7502                            JNZ	short NEWDIR
 26900                                          ;STC
 26901                                  	; 24/09/2023
 26902                                  	; [DIRSTART]=0, cf=0, zf=1 (cf will be 1 after cmc instruction)
 26903                                  builddir_cmc_retn:
 26904                                  	; 24/09/2023
 26905 0000481F F5                      	cmc	; cf=1 <-> cf=0
 26906                                  builddir_retn:
 26907 00004820 C3                              retn				; Can't grow root
 26908                                  
 26909                                  	;entry   NEWDIR
 26910                                  NEWDIR: 
 26911 00004821 8B1E[C205]              	MOV     BX,[DIRSTART]
 26912 00004825 09DB                            OR      BX,BX
 26913 00004827 7405                            JZ	short NULLDIR
 26914 00004829 E82806                  	call	GETEOF
 26915 0000482C 72F2                            jc	short builddir_retn	; Screw up
 26916                                  NULLDIR:
 26917 0000482E B90100                          MOV     CX,1
 26918 00004831 E83905                  	call	ALLOCATE
 26919 00004834 72EA                            jc	short  builddir_retn
 26920 00004836 8B16[C205]                      MOV     DX,[DIRSTART]
 26921 0000483A 09D2                            OR      DX,DX
 26922 0000483C 750D                            JNZ	short ADDINGDIR
 26923 0000483E E8CDF5                  	call	SETDIRSRCH
 26924 00004841 72DD                            jc	short  builddir_retn
 26925 00004843 C706[4803]FFFF                  MOV     word [LASTENT],-1
 26926 00004849 EB29                            JMP     SHORT GOTDIRREC
 26927                                  ADDINGDIR:
 26928 0000484B 53                              PUSH    BX
 26929 0000484C 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 26930 00004850 E82D0C                          call	IsEOF
 26931 00004853 5B                              POP     BX
 26932 00004854 7217                            JB	short NOTFIRSTGROW
 26933                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 26934 00004856 891E[BC05]                      MOV     [CLUSNUM],BX
 26935                                  	; 24/09/2023
 26936                                  	;PUSH	CX ; (not necessary)
 26937 0000485A 50                      	PUSH	AX
 26938 0000485B 55                      	PUSH	BP
 26939 0000485C B401                            MOV     AH,1			; CLUSNUM update
 26940                                  	; 15/12/2022
 26941 0000485E 268A5600                	mov	dl,[ES:BP] ; 09/09/2018
 26942                                          ; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26943                                  	;;mov	dl,[es:bp+0]
 26944                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; drive #
 26945 00004862 8B0E[C205]                      MOV     CX,[DIRSTART]		; first cluster #
 26946 00004866 89DD                            MOV     BP,BX 			; CLUSNUM
 26947 00004868 E818DE                  	call	FastOpen_Update
 26948 0000486B 5D                              POP     BP
 26949 0000486C 58                              POP     AX
 26950                                  	; 24/09/2023
 26951                                          ;POP	CX
 26952                                  
 26953                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 26954                                  NOTFIRSTGROW:
 26955 0000486D 89DA                            MOV     DX,BX
 26956 0000486F 30DB                            XOR     BL,BL
 26957 00004871 E8CC04                  	call	FIGREC
 26958                                  GOTDIRREC:
 26959                                  	;mov	cl,[es:bp+4]
 26960 00004874 268A4E04                        MOV     CL,[ES:BP+DPB.CLUSTER_MASK]
 26961 00004878 FEC1                            INC     CL
 26962 0000487A 30ED                            XOR     CH,CH
 26963                                  ZERODIR:
 26964 0000487C 51                              PUSH    CX
 26965                                  	; 22/09/2023
 26966                                  	;;mov	byte [ALLOWED],18h
 26967                                          ;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 26968 0000487D B0FF                            MOV     AL,0FFH
 26969                                          ;call	GETBUFFR
 26970 0000487F E82210                          call	GETBUFFRD ; *
 26971 00004882 7302                    	JNC	short GET_SSIZE
 26972 00004884 59                              POP     CX
 26973 00004885 C3                              retn
 26974                                  
 26975                                  GET_SSIZE:
 26976                                  	;mov	cx,[es:bp+2]
 26977 00004886 268B4E02                        MOV     CX,[ES:BP+DPB.SECTOR_SIZE]
 26978 0000488A 06                              PUSH    ES
 26979 0000488B C43E[E205]                      LES     DI,[CURBUF]
 26980                                  	;or	byte [es:di+5],4
 26981 0000488F 26804D0504                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 26982 00004894 57                              PUSH    DI
 26983                                  	;;add	di,16	; MSDOS 3.3
 26984                                  	;add	di,20	; MSDOS 6.0	
 26985 00004895 83C714                          ADD     DI,BUFINSIZ
 26986 00004898 31C0                            XOR     AX,AX
 26987 0000489A D1E9                            SHR     CX,1
 26988 0000489C F3AB                            REP     STOSW
 26989 0000489E 7301                            JNC	short EVENZ
 26990 000048A0 AA                              STOSB
 26991                                  EVENZ:
 26992 000048A1 5F                              POP     DI
 26993                                  
 26994                                  	; MSDOS 6.0
 26995 000048A2 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 26996                                  					;LB. if already dirty		  ;AN000;
 26997 000048A7 7508                            JNZ	short yesdirty7		;LB.  don't increment dirty count ;AN000;
 26998 000048A9 E8FF11                          call	INC_DIRTY_COUNT		;LB. 				  ;AN000;
 26999                                          
 27000                                  	;or	byte [es:di+5],40h
 27001 000048AC 26804D0540              	OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 27002                                  yesdirty7:
 27003 000048B1 07                              POP	ES
 27004 000048B2 59                              POP	CX
 27005                                  
 27006                                  	; 19/05/2019 - Retro DOS v4.0
 27007                                  
 27008                                  	; MSDOS 3.3
 27009                                  	;INC	DX
 27010                                  
 27011                                  	; MSDOS 6.0
 27012                                  	; 24/09/2023
 27013                                  	;add	dx,1
 27014                                  	;;adc	word [HIGH_SECTOR],0
 27015                                  	;; 24/09/2023
 27016                                  	;; ax=0
 27017                                  	;adc	[HIGH_SECTOR],ax ; 0
 27018                                  	; 24/09/2023
 27019 000048B3 42                      	inc	dx
 27020 000048B4 7504                    	jnz	short loop_zerodir
 27021 000048B6 FF06[0706]              	inc	word [HIGH_SECTOR]
 27022                                  loop_zerodir:
 27023 000048BA E2C0                            LOOP    ZERODIR
 27024                                  
 27025 000048BC A1[4803]                        MOV     AX,[LASTENT]
 27026 000048BF 40                              INC     AX
 27027                                  	; 24/09/2023
 27028                                  	; cf=0
 27029                                  	;CLC
 27030 000048C0 C3                              retn
 27031                                  
 27032                                  ;--------------------------------------------------------------------------
 27033                                  ;
 27034                                  ; Procedure Name : SETDOTENT
 27035                                  ;
 27036                                  ; set up a . or .. directory entry for a directory.
 27037                                  ;
 27038                                  ;   Inputs:     ES:DI point to the beginning of a directory entry.
 27039                                  ;               AX contains ". " or ".."
 27040                                  ;               DX contains first cluster of entry
 27041                                  ;
 27042                                  ;----------------------------------------------------------------------------
 27043                                  
 27044                                  SETDOTENT:
 27045                                  ;	Fill in name field
 27046 000048C1 AB                              STOSW
 27047 000048C2 B90400                          MOV     CX,4
 27048 000048C5 B82020                          MOV     AX,"  " ; 2020h
 27049 000048C8 F3AB                            REP     STOSW
 27050 000048CA AA                              STOSB
 27051                                  
 27052                                  ;	Set up attribute
 27053                                  	;mov	al, 10h
 27054 000048CB B010                            MOV     AL,attr_directory
 27055 000048CD AA                              STOSB
 27056                                  
 27057                                  ;	Initialize time and date of creation
 27058 000048CE 83C70A                          ADD     DI,10
 27059 000048D1 8B36[9E05]                      MOV     SI,[THISSFT]
 27060                                  	;mov	ax,[si+0Dh]
 27061 000048D5 8B440D                          MOV     AX,[SI+SF_ENTRY.sf_time]
 27062 000048D8 AB                              STOSW
 27063                                  	;mov	ax,[si+0Fh]
 27064 000048D9 8B440F                          MOV     AX,[SI+SF_ENTRY.sf_date]
 27065 000048DC AB                      	STOSW
 27066                                  
 27067                                  ;	Set up first cluster field
 27068 000048DD 89D0                            MOV     AX,DX
 27069 000048DF AB                              STOSW
 27070                                  
 27071                                  ;	0 file size
 27072 000048E0 31C0                            XOR     AX,AX
 27073 000048E2 AB                              STOSW
 27074 000048E3 AB                              STOSW
 27075 000048E4 C3                              retn
 27076                                  
 27077                                  ;Break   <MAKENODE -- CREATE A NEW NODE>
 27078                                  ;---------------------------------------------------------------------------
 27079                                  ;
 27080                                  ; Procedure Name : MakeNode
 27081                                  ;
 27082                                  ; Inputs:
 27083                                  ;       AL - attribute to create
 27084                                  ;       AH = 0 if it is ok to truncate a file already by this name
 27085                                  ;	AH != 0 if truncation not allowed (prexisting file is an error)
 27086                                  ;               (AH ignored on dirs and devices)
 27087                                  ;
 27088                                  ;        NOTE: When making a DIR or volume ID, AH need not be set since
 27089                                  ;               a name already existant is ALWAYS an error in these cases.
 27090                                  ;
 27091                                  ;       [WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 27092                                  ;               terminated)
 27093                                  ;       [CURR_DIR_END] Points to end of Current dir part of string
 27094                                  ;               ( = -1 if current dir not involved, else
 27095                                  ;                Points to first char after last "/" of current dir part)
 27096                                  ;       [THISCDS] Points to CDS being used
 27097                                  ;       [THISSFT] Points to an empty SFT. EXCEPT sf_mode filled in.
 27098                                  ; Function:
 27099                                  ;       Make a new node
 27100                                  ; Outputs:
 27101                                  ;       Sets EXTERR_LOCUS = errLOC_Disk or errLOC_Unk via GetPathNoset
 27102                                  ;       CARRY SET IF ERROR
 27103                                  ;          AX = 1 A node by this name exists and is a directory
 27104                                  ;          AX = 2 A new node could not be created
 27105                                  ;          AX = 3 A node by this name exists and is a disk file
 27106                                  ;               (AH was NZ on input)
 27107                                  ;          AX = 4 Bad Path
 27108                                  ;               SI return from GetPath maintained
 27109                                  ;          AX = 5 Attribute mismatch
 27110                                  ;          AX = 6 Sharing Violation
 27111                                  ;               (INT 24 generated ALWAYS since create is always compat mode
 27112                                  ;          AX = 7 file not found for Extended Open (not exists and fails)
 27113                                  ;       ELSE
 27114                                  ;          AX = 0 Disk Node
 27115                                  ;          AX = 3 Device Node (error in some cases)
 27116                                  ;          [DIRSTART],[DIRSEC],[CLUSFAC],[CLUSNUM] set to directory
 27117                                  ;               containing new node.
 27118                                  ;          [CURBUF+2]:BX Points to entry
 27119                                  ;          [CURBUF+2]:SI Points to entry.dir_first
 27120                                  ;          [THISSFT] is filled in
 27121                                  ;               sf_mode = unchanged.
 27122                                  ;          Attribute byte in entry is input AL
 27123                                  ; DS preserved, others destroyed
 27124                                  ;
 27125                                  ;-------------------------------------------------------------------------
 27126                                  
 27127                                  ; 19/05/2019 - Retro DOS v4.0
 27128                                  ; DOSCODE:8925h (MSDOS 6.21, MSDOS.SYS)
 27129                                  
 27130                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27131                                  ; DOSCODE:88EAh (MSDOS 5.0, MSDOS.SYS)
 27132                                  
 27133                                  MakeNode:
 27134                                  	;mov	word [CREATING],0E5FFh
 27135 000048E5 C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256 + 0FFh ; Creating, not DEL *.*
 27136 000048EB 50                              PUSH    AX              ; Save AH value
 27137 000048EC C606[4C03]00            	MOV	byte [NoSetDir],0
 27138 000048F1 A2[6D05]                	MOV	[SATTRIB],AL
 27139 000048F4 E87AF5                  	call	GetPathNoSet
 27140 000048F7 88CA                            MOV     DL,CL           ; Save CL info
 27141 000048F9 89C1                            MOV     CX,AX           ; Device ID to CH
 27142 000048FB 58                              POP     AX              ; Get back AH
 27143 000048FC 732E                            JNC	short make_exists ; File existed
 27144 000048FE 7505                            JNZ	short make_err_4 ; Path bad
 27145 00004900 80FA80                          CMP     DL,80h          ; Check "CL" return from GETPATH
 27146 00004903 7406                            JZ	short make_type	; Name simply not found, and no metas
 27147                                  make_err_4:
 27148 00004905 B004                            MOV     AL,4            ; case 1 bad path
 27149                                  make_err_ret:
 27150 00004907 30E4                            XOR     AH,AH
 27151 00004909 F9                              STC
 27152                                  ;make_retn:	; 22/11/2022
 27153 0000490A C3                              retn
 27154                                  
 27155                                          ;entry	RENAME_MAKE     ; Used by DOS_RENAME to "copy" a node
 27156                                  RENAME_MAKE:
 27157                                  make_type:
 27158                                  ;Extended Open hooks
 27159                                  	; MSDOS 6.0
 27160                                  	;TESTB	EXTOPEN_ON,EXT_OPEN_ON	;FT. from extended open		;AN000;
 27161 0000490B F606[F605]01            	test	byte [EXTOPEN_ON],EXT_OPEN_ON ; 1
 27162 00004910 7411                    	JZ	short make_type2	;FT. no				;AN000;
 27163 00004912 800E[F605]04            	OR	byte [EXTOPEN_ON],EXT_FILE_NOT_EXISTS ; 4
 27164                                  					;FT. set for extended open ;AN000;
 27165                                  	;TESTB	EXTOPEN_FLAG,0F0H	;FT. not exists and fails	;AN000;
 27166 00004917 F606[F405]F0            	test	byte [EXTOPEN_FLAG],0F0h
 27167 0000491C 7505                    	JNZ	short make_type2	;FT. no				;AN000;
 27168 0000491E F9                      	STC				;FT. set carry			;AN000;
 27169 0000491F B80700                  	MOV    AX,7			;FT. file not found		;AN000;
 27170                                  	; 22/11/2022
 27171                                  make_retn:
 27172                                  	;return
 27173 00004922 C3                      	retn				;FT.				;AN000;
 27174                                  
 27175                                  ;	Extended Open hooks
 27176                                  
 27177                                  make_type2:
 27178 00004923 C43E[9E05]                      LES     DI,[THISSFT]
 27179 00004927 31C0                            XOR     AX,AX           ; nothing exists Disk Node
 27180 00004929 F9                              STC                     ; Not found
 27181 0000492A EB5A                            JMP     short make_new
 27182                                  
 27183                                  ; The node exists. It may be either a device, directory or file:
 27184                                  ;   Zero set => directory
 27185                                  ;   High bit of CH on => device
 27186                                  ;   else => file
 27187                                  
 27188                                  make_exists:
 27189 0000492C 7448                            JZ	short make_exists_dir
 27190 0000492E B003                            MOV     AL,3            ; file exists type 3  (error or device node)
 27191                                  	;test	byte [ATTRIB],18h
 27192 00004930 F606[6B05]18            	TEST	byte [ATTRIB],attr_volume_id+attr_directory
 27193 00004935 753B                            JNZ	short make_err_ret_5
 27194                                  				; Cannot already exist as Disk or Device Node
 27195                                                                  ;       if making DIR or Volume ID
 27196 00004937 08ED                            OR      CH,CH
 27197 00004939 781A                            JS	short make_share ; No further checks on attributes if device
 27198 0000493B 08E4                            OR      AH,AH
 27199 0000493D 75C8                            JNZ	short make_err_ret ; truncating NOT OK (AL = 3)
 27200 0000493F 51                              PUSH    CX              ; Save device ID
 27201 00004940 8E06[E405]                      MOV     ES,[CURBUF+2]
 27202                                  	;mov	ch,[es:bx+0Bh]
 27203 00004944 268A6F0B                        MOV     CH,[ES:BX+dir_entry.dir_attr] ; Get file attributes
 27204                                  	;test	ch,1
 27205 00004948 F6C501                  	test	CH,attr_read_only
 27206 0000494B 7524                            JNZ	short make_err_ret_5P ; Cannot create on read only files
 27207 0000494D E8C2F7                  	call	MatchAttributes
 27208 00004950 59                              POP     CX              ; Devid back in CH
 27209 00004951 751F                            JNZ	short make_err_ret_5 ; Attributes not ok
 27210 00004953 30C0                            XOR     AL,AL           ; AL = 0, Disk Node
 27211                                  make_share:
 27212 00004955 30E4                            XOR     AH,AH
 27213 00004957 50                              PUSH    AX              ; Save Disk or Device node
 27214 00004958 51                              PUSH    CX              ; Save Device ID
 27215 00004959 88EC                            MOV     AH,CH           ; Device ID to AH
 27216 0000495B E84501                          CALL    DOOPEN          ; Fill in SFT for share check
 27217 0000495E C43E[9E05]                      LES     DI,[THISSFT]
 27218 00004962 56                      	push	si
 27219 00004963 53                      	push	bx		; Save CURBUF pointers
 27220 00004964 E86729                  	call	ShareEnter
 27221 00004967 735A                            jnc	short MakeEndShare
 27222                                  
 27223                                  ; User failed request.
 27224 00004969 5B                      	pop	bx
 27225 0000496A 5E                      	pop	si
 27226 0000496B 59                      	pop	cx
 27227 0000496C 58                      	pop	ax
 27228                                  
 27229                                  Make_Share_ret:
 27230 0000496D B006                            MOV     AL,6
 27231 0000496F EB96                            JMP	short make_err_ret
 27232                                  
 27233                                  make_err_ret_5P:
 27234 00004971 59                              POP     CX              ; Get back device ID
 27235                                  make_err_ret_5:
 27236 00004972 B005                            MOV     AL,5            ; Attribute mismatch
 27237                                          ; 22/11/2022
 27238 00004974 EB91                    	JMP     short make_err_ret
 27239                                  
 27240                                  make_exists_dir:
 27241 00004976 B001                            MOV     AL,1            ; exists as directory, always an error
 27242                                  	; 22/11/2022
 27243 00004978 EB8D                    	JMP     short make_err_ret
 27244                                  
 27245                                  make_save:
 27246 0000497A 50                              PUSH    AX              ; Save whether Disk or File
 27247 0000497B 89C8                            MOV     AX,CX           ; Device ID to AH
 27248 0000497D E87400                          CALL    NEWENTRY
 27249 00004980 58                              POP     AX              ; 0 if Disk, 3 if File
 27250 00004981 739F                            jnc	short make_retn
 27251 00004983 B002                            MOV     AL,2            ; create failed case 2
 27252                                  make_save_retn:
 27253 00004985 C3                              retn
 27254                                  
 27255                                  make_new:
 27256 00004986 E8F1FF                          call    make_save
 27257 00004989 72FA                            jc	short make_save_retn	; case 2 fail
 27258                                  	;test	byte [ATTRIB],10h
 27259 0000498B F606[6B05]10            	test	BYTE [ATTRIB],attr_directory
 27260 00004990 75F3                            jnz	short make_save_retn	; Don't "open" directories,
 27261                                  					; so don't tell the sharer about them
 27262 00004992 50                      	push	ax
 27263 00004993 53                      	push	bx
 27264 00004994 56                      	push	si		
 27265 00004995 E83629                          call	ShareEnter
 27266 00004998 5E                      	pop	si
 27267 00004999 5B                      	pop	bx
 27268 0000499A 58                      	pop	ax
 27269 0000499B 73E8                    	jnc	short make_save_retn
 27270                                  
 27271                                  ; We get here by having the user FAIL a share problem. Typically a failure of
 27272                                  ; this nature is an out-of-space or an internal error. We clean up as best as
 27273                                  ; possible: delete the newly created directory entry and return share_error.
 27274                                  
 27275 0000499D 50                              PUSH    AX
 27276 0000499E C43E[E205]                      LES     DI,[CURBUF]
 27277                                  	;mov	byte [es:bx],0E5h
 27278 000049A2 26C607E5                	MOV	BYTE [ES:BX],DIRFREE	; nuke newly created entry.
 27279                                  	
 27280                                  	; MSDOS 6.0
 27281                                  	;test	byte [es:di+5],40h
 27282 000049A6 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 27283                                  					;LB. if already dirty		  ;AN000;
 27284 000049AB 7508                            JNZ	short yesdirty8		;LB.  don't increment dirty count ;AN000;
 27285                                  	; 22/11/2022
 27286 000049AD E8FB10                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 27287                                  	;or	byte [es:di+5],40h
 27288 000049B0 26804D0540                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty ; flag buffer as dirty
 27289                                  yesdirty8:
 27290 000049B5 C42E[8A05]                      LES     BP,[THISDPB]
 27291                                  	; 15/12/2022
 27292 000049B9 268A4600                        mov	al,[ES:BP]
 27293                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27294                                  	;;mov	al,[es:bp+0]
 27295                                  	;MOV	AL,[ES:BP+DPB.DRIVE]	; get drive for flush
 27296 000049BD E8E60F                          call	FLUSHBUF		; write out buffer.
 27297 000049C0 58                              POP     AX
 27298 000049C1 EBAA                            jmp	short Make_Share_ret
 27299                                  
 27300                                  ; We have found an existing file. We have also entered it into the share set.
 27301                                  ; At this point we need to call newentry to correctly address the problem of
 27302                                  ; getting rid of old data (create an existing file) or creating a new
 27303                                  ; directory entry (create a new file). Unfortunately, this operation may
 27304                                  ; result in an INT 24 that the user doesn't return from, thus locking the file
 27305                                  ; irretrievably into the share set. The correct solution is for us to LEAVE
 27306                                  ; the share set now, do the operation and then reassert the share access.
 27307                                  ;
 27308                                  ; We are allowed to do this! There is no window! After all, we are in
 27309                                  ; critDisk here and for someone else to get in, they must enter critDisk also.
 27310                                  
 27311                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27312                                  	; DOSCODE:89C8h (MSDOS 5.0, MSDOS.SYS)
 27313                                  
 27314                                  MakeEndShare:
 27315 000049C3 C43E[9E05]                      LES     DI,[THISSFT]		; grab SFT
 27316 000049C7 31C0                            XOR     AX,AX
 27317 000049C9 E827C9                  	call	ECritSFT
 27318 000049CC 268705                  	xchg	AX,[ES:DI]
 27319                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 27320 000049CF 50                      	push	ax
 27321 000049D0 57                      	push	di
 27322 000049D1 06                      	push	es
 27323 000049D2 9C                              PUSHF
 27324 000049D3 E8F328                          call	ShareEnd                ; remove sharing
 27325 000049D6 9D                              POPF
 27326 000049D7 07                      	pop	es
 27327 000049D8 5F                      	pop	di
 27328 000049D9 268F05                          pop	word [ES:DI]	
 27329                                  	;pop	word [ES:DI+SF_ENTRY.sf_ref_count]
 27330 000049DC E82FC9                  	call	LCritSFT
 27331                                  	; 22/11/2022
 27332                                  	; DOSCODE:89E4h (MSDOS 5.0, MSDOS.SYS)
 27333 000049DF 5B                      	pop	bx
 27334 000049E0 5E                      	pop	si
 27335 000049E1 59                      	pop	cx
 27336 000049E2 58                      	pop	ax
 27337 000049E3 E894FF                          CALL    make_save
 27338                                  
 27339                                  ; If the user failed, we do not reenter into the sharing set.
 27340                                  
 27341 000049E6 729D                            jc	short make_save_retn	; bye if error
 27342 000049E8 50                      	push	ax
 27343 000049E9 53                      	push	bx
 27344 000049EA 56                      	push	si
 27345 000049EB 9C                              PUSHF
 27346 000049EC E8DF28                          call	ShareEnter
 27347 000049EF 9D                              POPF
 27348 000049F0 5E                      	pop	si
 27349 000049F1 5B                      	pop	bx
 27350 000049F2 58                      	pop	ax
 27351                                  
 27352                                  ; If Share_check fails, then we have an internal ERROR!!!!!
 27353                                  
 27354                                  makeendshare_retn:
 27355 000049F3 C3                              retn
 27356                                  
 27357                                  ;---------------------------------------------------------------------------
 27358                                  ;
 27359                                  ; Procedure Name : NEWENTRY
 27360                                  ;
 27361                                  ; Inputs:
 27362                                  ;       [THISSFT] set
 27363                                  ;       [THISDPB] set
 27364                                  ;       [LASTENT] current last valid entry number in directory if no free
 27365                                  ;               entries
 27366                                  ;       [VOLID] set if a volume ID was found during search
 27367                                  ;	Attrib Contains attributes for new file
 27368                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 27369                                  ;       CARRY FLAG INDICATES STATUS OF SEARCH FOR FILE
 27370                                  ;               NC means file existed (device)
 27371                                  ;               C  means file did not exist
 27372                                  ;       AH = Device ID byte
 27373                                  ;       If FILE
 27374                                  ;           [CURBUF+2]:BX points to start of directory entry
 27375                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 27376                                  ;       If device
 27377                                  ;           DS:BX points to start of "fake" directory entry
 27378                                  ;           DS:SI points to dir_first of "fake" directory entry
 27379                                  ;               (has DWORD pointer to device header)
 27380                                  ; Function:
 27381                                  ;       Make a new directory entry
 27382                                  ;       If an old one existed it is truncated first
 27383                                  ; Outputs:
 27384                                  ;       Carry set if error
 27385                                  ;               Can't grow dir, atts didn't match, attempt to make 2nd
 27386                                  ;               vol ID, user FAILed to I 24
 27387                                  ;       else
 27388                                  ;               outputs of DOOPEN
 27389                                  ; DS, BX, SI preserved (meaning on SI BX, not value), others destroyed
 27390                                  ;
 27391                                  ;----------------------------------------------------------------------------
 27392                                  
 27393                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27394                                  	; DOSCODE:89F9h (MSDOS 5.0, MSDOS.SYS)
 27395                                  
 27396                                  NEWENTRY:
 27397 000049F4 C42E[8A05]                      LES     BP,[THISDPB]
 27398 000049F8 7315                            JNC	short EXISTENT	
 27399 000049FA 803E[4A03]00                    CMP     byte [FAILERR],0
 27400                                  	;STC
 27401                                          ;jnz	short makeendshare_retn	; User FAILed, node might exist
 27402                                          ; 24/09/2023
 27403 000049FF 750C                    	jnz	short ERRRET3
 27404 00004A01 E80CFE                  	CALL    BUILDDIR        ; Try to build dir
 27405 00004A04 72ED                            jc	short makeendshare_retn	; Failed
 27406 00004A06 E8D6F3                          call	GETENT          ; Point at that free entry
 27407 00004A09 72E8                            jc	short makeendshare_retn	; Failed
 27408 00004A0B EB0E                            JMP     SHORT FREESPOT
 27409                                  
 27410                                  ERRRET3:
 27411 00004A0D F9                              STC
 27412                                  newentry_retn:
 27413 00004A0E C3                              retn
 27414                                  
 27415                                  EXISTENT:
 27416 00004A0F 08E4                            OR      AH,AH           ; Check if file is I/O device
 27417 00004A11 7903                            JNS	short NOT_DEV1
 27418 00004A13 E98D00                          JMP     DOOPEN          ; If so, proceed with open
 27419                                  
 27420                                  NOT_DEV1:
 27421 00004A16 E82901                          call	FREEENT		; Free cluster chain
 27422 00004A19 72F3                            jc	short newentry_retn ; Failed
 27423                                  FREESPOT:
 27424                                  	;test	byte [ATTRIB],8
 27425 00004A1B F606[6B05]08            	test	BYTE [ATTRIB],attr_volume_id
 27426 00004A20 7407                            JZ	short NOTVOLID
 27427 00004A22 803E[7B05]00                    CMP     BYTE [VOLID],0
 27428 00004A27 75E4                            JNZ	short ERRRET3	; Can't create a second volume ID
 27429                                  NOTVOLID:
 27430 00004A29 8E06[E405]                      MOV     ES,[CURBUF+2]
 27431 00004A2D 89DF                            MOV     DI,BX
 27432                                  
 27433 00004A2F BE[4B05]                        MOV     SI,NAME1
 27434                                  
 27435 00004A32 B90500                          MOV     CX,5
 27436 00004A35 F3A5                            REP     MOVSW
 27437 00004A37 A4                              MOVSB                   ; Move name into dir entry
 27438 00004A38 A0[6B05]                	MOV	AL,[ATTRIB]
 27439 00004A3B AA                      	STOSB                   ; Attributes
 27440                                  
 27441                                  ;; File Tagging for Create DOS 4.00
 27442 00004A3C B105                            MOV     CL,5            ;FT. assume normal FBUGBUG	;AN000;
 27443                                  ;; File Tagging for Create DOS 4.00
 27444                                  
 27445 00004A3E 31C0                            XOR     AX,AX
 27446 00004A40 F3AB                            REP     STOSW           ; Zero pad
 27447 00004A42 E8A1C0                          call	DATE16
 27448 00004A45 92                              XCHG    AX,DX
 27449 00004A46 AB                              STOSW                   ; dir_time
 27450 00004A47 92                              XCHG    AX,DX
 27451 00004A48 AB                              STOSW                   ; dir_date
 27452 00004A49 31C0                            XOR     AX,AX
 27453 00004A4B 57                              PUSH    DI              ; Correct SI input value
 27454                                  				; 	(recomputed for new buffer)
 27455 00004A4C AB                              STOSW                   ; Zero dir_first and size
 27456 00004A4D AB                              STOSW
 27457 00004A4E AB                              STOSW
 27458                                  updnxt:
 27459 00004A4F 8B36[E205]              	MOV	SI,[CURBUF]
 27460                                  
 27461                                  	; 19/05/2019 - Retro DOS v4.0
 27462                                  
 27463                                  	; MSDOS 6.0
 27464 00004A53 26F6440540              	TEST	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 27465                                  				;LB. if already dirty		  ;AN000;
 27466 00004A58 7508                            JNZ	short yesdirty9	;LB.  don't increment dirty count ;AN000;
 27467 00004A5A E84E10                          call	INC_DIRTY_COUNT	;LB.				  ;AN000;
 27468                                          
 27469                                  	;or	byte [es:si+5],40h
 27470 00004A5D 26804C0540              	OR      byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 27471                                  yesdirty9:
 27472 00004A62 C42E[8A05]                      LES     BP,[THISDPB]
 27473                                  	; 15/12/2022
 27474 00004A66 268A4600                	MOV	AL,[ES:BP]
 27475                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27476                                  	;;mov	al,[es:bp+0]
 27477                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; Sets AH value again (in AL)
 27478 00004A6A 50                              PUSH    AX
 27479 00004A6B 53                              PUSH    BX
 27480                                  
 27481                                  ; If we have a file, we need to increment the open ref. count so that
 27482                                  ; we have some protection against invalid media changes if an Int 24
 27483                                  ; error occurs.
 27484                                  ; Do nothing for a device.
 27485                                  
 27486 00004A6C 06                      	push	es
 27487 00004A6D 57                      	push	di
 27488 00004A6E C43E[9E05]                      LES     DI,[THISSFT]
 27489                                  	;test	word [es:di+5],80h
 27490                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 27491 00004A72 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 27492 00004A77 751A                            jnz	short GotADevice
 27493 00004A79 1E                      	push	ds
 27494 00004A7A 53                      	push	bx
 27495 00004A7B C51E[8A05]                      LDS     BX,[THISDPB]
 27496                                  	;mov	[es:di+7],bx
 27497 00004A7F 26895D07                        MOV     [ES:DI+SF_ENTRY.sf_devptr],BX
 27498 00004A83 8CDB                            MOV     BX,DS
 27499                                  	;mov	[es:di+9],bx
 27500 00004A85 26895D09                        MOV     [ES:DI+SF_ENTRY.sf_devptr+2],BX
 27501 00004A89 5B                      	pop	bx
 27502 00004A8A 1F                      	pop	ds ; need to use DS for segment later on
 27503 00004A8B E8AAFA                  	call	DEV_OPEN_SFT    ; increment ref. count
 27504 00004A8E C606[A20A]01                    mov	byte [VIRTUAL_OPEN],1; set flag
 27505                                  GotADevice:
 27506 00004A93 5F                      	pop	di
 27507 00004A94 07                      	pop	es
 27508                                  
 27509 00004A95 E80E0F                          call	FLUSHBUF
 27510 00004A98 E8EF00                          Call    CHECK_VIRT_OPEN ; decrement ref. count            ;AN000;
 27511 00004A9B 5B                              POP     BX
 27512 00004A9C 58                              POP     AX
 27513 00004A9D 5E                              POP     SI              ; Get SI input back
 27514 00004A9E 88C4                            MOV     AH,AL           ; Get I/O driver number back
 27515 00004AA0 7301                    	jnc	short DOOPEN    ; Failed
 27516 00004AA2 C3                      	retn
 27517                                  	
 27518                                  ;NOTE FALL THROUGH
 27519                                  
 27520                                  ; DOSCODE:8AE4h (MSDOS 6.21, MSDOS.SYS)
 27521                                  
 27522                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27523                                  ; DOSCODE:8AA9h (MSDOS 5.0, MSDOS.SYS)
 27524                                  
 27525                                  ; DOOPEN
 27526                                  ;----------------------------------------------------------------------------
 27527                                  ;
 27528                                  ; Inputs:
 27529                                  ;       [THISDPB] points to DPB if file
 27530                                  ;       [THISSFT] points to SFT being used
 27531                                  ;       AH = Device ID byte
 27532                                  ;       If FILE
 27533                                  ;           [CURBUF+2]:BX points to start of directory entry
 27534                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 27535                                  ;       If device
 27536                                  ;           DS:BX points to start of "fake" directory entry
 27537                                  ;           DS:SI points to dir_first of "fake" directory entry
 27538                                  ;               (has DWORD pointer to device header)
 27539                                  ; Function:
 27540                                  ;       Fill in SFT from dir entry
 27541                                  ; Outputs:
 27542                                  ;       CARRY CLEAR
 27543                                  ;       sf_ref_count and sf_mode fields not altered
 27544                                  ;       sf_flags high byte = 0
 27545                                  ;       sf_flags low byte = AH except
 27546                                  ;       sf_flags Bit 6 set (not dirty or not EOF)
 27547                                  ;       sf_attr sf_date sf_time sf_name set from entry
 27548                                  ;       sf_position = 0
 27549                                  ;       If device
 27550                                  ;           sf_devptr = dword at dir_first (pointer to device header)
 27551                                  ;           sf_size = 0
 27552                                  ;       If file
 27553                                  ;           sf_firclus sf_size set from entry
 27554                                  ;           sf_devptr = [THISDPB]
 27555                                  ;           sf_cluspos = 0
 27556                                  ;           sf_lstclus = sf_firclus
 27557                                  ;           sf_dirsec sf_dirpos set
 27558                                  ; DS,SI,BX preserved, others destroyed
 27559                                  ;
 27560                                  ;----------------------------------------------------------------------------
 27561                                  
 27562                                  	;entry	DOOPEN
 27563                                  DOOPEN:
 27564                                  ;	Generate and store attribute
 27565                                  
 27566 00004AA3 88E6                            MOV     DH,AH           ; AH to different place
 27567 00004AA5 C43E[9E05]                      LES     DI,[THISSFT]
 27568                                  	;add	di,4
 27569 00004AA9 83C704                          ADD     DI,SF_ENTRY.sf_attr ; Skip ref_count and mode fields
 27570                                  	; 24/09/2023
 27571 00004AAC 31C0                    	xor	ax,ax
 27572                                  	;XOR	AL,AL		; Assume it's a device, devices have an
 27573                                  				;   attribute of 0 (for R/O testing etc).
 27574 00004AAE 08F6                            OR      DH,DH           ; See if our assumption good.
 27575 00004AB0 7807                            JS	short DEV_SFT1	; If device DS=DOSGROUP
 27576 00004AB2 8E1E[E405]                      MOV     DS,[CURBUF+2]
 27577                                  	;mov	al,[BX+0Bh]
 27578 00004AB6 8A470B                          MOV     AL,[BX+dir_entry.dir_attr]
 27579                                  				; If file, get attrib from dir entry
 27580                                  DEV_SFT1:
 27581 00004AB9 AA                              STOSB                   ; sf_attr, ES:DI -> sf_flags
 27582                                  
 27583                                  ;	Generate and store flags word
 27584                                  
 27585                                  	; 24/09/2023
 27586                                  	;XOR	AX,AX
 27587                                          ; ah=0
 27588 00004ABA 88F0                    	MOV     AL,DH
 27589                                  	;or	al,40h
 27590 00004ABC 0C40                            OR      AL,devid_file_clean
 27591 00004ABE AB                              STOSW                   ; sf_flags, ES:DI -> sf_devptr
 27592                                  
 27593                                  ;	Generate and store device pointer
 27594                                  
 27595 00004ABF 1E                              PUSH    DS
 27596                                  	;lds	ax,[bx+1Ah]
 27597 00004AC0 C5471A                          LDS     AX,[BX+dir_entry.dir_first] ; Assume device
 27598 00004AC3 08F6                            OR      DH,DH
 27599 00004AC5 7805                            JS	short DEV_SFT2
 27600                                  
 27601                                  ;hkn; SS override
 27602 00004AC7 36C506[8A05]                    LDS     AX,[SS:THISDPB]	; Was file
 27603                                  DEV_SFT2:
 27604 00004ACC AB                              STOSW 			; store offset
 27605 00004ACD 8CD8                            MOV     AX,DS
 27606 00004ACF 1F                              POP     DS
 27607 00004AD0 AB                      	STOSW			; store segment
 27608                                  				; ES:DI -> sf_firclus
 27609                                  
 27610                                  ;	Generate pointer to, generate and store first cluster 
 27611                                  ;	(irrelevant for devices)
 27612                                  
 27613 00004AD1 56                              PUSH    SI              ; Save pointer to dir_first
 27614 00004AD2 A5                              MOVSW                   ; dir_first -> sf_firclus
 27615                                                                  ; DS:SI -> dir_size_l, ES:DI -> sf_time
 27616                                  
 27617                                  ;	Copy time/date of last modification
 27618                                  
 27619                                  	;sub	si,6
 27620 00004AD3 83EE06                          SUB     SI,dir_entry.dir_size_l - dir_entry.dir_time 
 27621                                  				; DS:SI->dir_time
 27622 00004AD6 A5                              MOVSW                   ; dir_time -> sf_time
 27623                                                                  ; DS:SI -> dir_date, ES:DI -> sf_date
 27624 00004AD7 A5                              MOVSW                   ; dir_date -> sf_date
 27625                                                                  ; DS:SI -> dir_first, ES:DI -> sf_size
 27626                                  
 27627                                  ;	Generate and store file size (0 for devices)
 27628                                  
 27629 00004AD8 AD                              LODSW                   ; skip dir_first, DS:SI -> dir_size_l
 27630 00004AD9 AD                              LODSW                   ; dir_size_l in AX , DS:SI -> dir_size_h
 27631 00004ADA 89C1                            MOV     CX,AX           ; dir_size_l in CX
 27632 00004ADC AD                              LODSW                   ; dir_size_h (size AX:CX), DS:SI -> ????
 27633 00004ADD 08F6                            OR      DH,DH
 27634 00004ADF 7904                            JNS	short FILE_SFT1
 27635 00004AE1 31C0                            XOR     AX,AX
 27636 00004AE3 89C1                            MOV     CX,AX           ; Devices are open ended
 27637                                  FILE_SFT1:
 27638 00004AE5 91                              XCHG    AX,CX
 27639 00004AE6 AB                              STOSW                   ; Low word of sf_size
 27640 00004AE7 91                              XCHG    AX,CX
 27641 00004AE8 AB                              STOSW                   ; High word of sf_size
 27642                                                                  ; ES:DI -> sf_position
 27643                                  ; Initialize position to 0
 27644                                  
 27645 00004AE9 31C0                            XOR     AX,AX
 27646 00004AEB AB                              STOSW
 27647 00004AEC AB                              STOSW                   ; sf_position
 27648                                                                  ; ES:DI -> sf_cluspos
 27649                                  
 27650                                  ; Generate cluster optimizations for files
 27651                                  
 27652 00004AED 08F6                            OR      DH,DH
 27653 00004AEF 7843                            JS	short DEV_SFT3
 27654 00004AF1 AB                              STOSW                   ; sf_cluspos ; 19h
 27655                                  	;mov	ax,[bx+1Ah]
 27656 00004AF2 8B471A                          MOV     AX,[BX+dir_entry.dir_first]
 27657                                  	; 19/05/2019
 27658                                  	; MSDOS 3.3
 27659                                  	;STOSW 			; sf_lstclus ; 1Bh
 27660                                  	; MSDOS 6.0
 27661 00004AF5 57                              PUSH	DI              ;AN004; save dirsec offset
 27662                                  	;sub	di,1Bh
 27663 00004AF6 83EF1B                          SUB	DI,SF_ENTRY.sf_dirsec	;AN004; es:di -> SFT
 27664                                  	;mov	[es:di+35h],ax
 27665 00004AF9 26894535                        MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX	;AN004; save it
 27666 00004AFD 5F                              POP	DI              ;AN004; restore dirsec offset
 27667                                  
 27668                                  ; DOS 3.3  FastOpen  6/13/86
 27669                                  
 27670 00004AFE 1E                      	PUSH	DS
 27671                                  
 27672                                  ;hkn; SS is DOSDATA
 27673 00004AFF 16                      	push	ss
 27674 00004B00 1F                      	pop	ds
 27675                                  	;test	byte [FastOpenFlg],4
 27676 00004B01 F606[3A0D]04            	TEST	byte [FastOpenFlg],Special_Fill_Set
 27677 00004B06 7411                    	JZ	short Not_FastOpen
 27678                                  
 27679                                  ;hkn; FastOpen_Ext_Info is in DOSDATA
 27680 00004B08 BE[3B0D]                        MOV     SI,FastOpen_Ext_Info
 27681                                  
 27682                                  	;mov	ax,[si+1]
 27683 00004B0B 8B4401                          MOV     AX,[SI+FEI.dirsec]
 27684 00004B0E AB                              STOSW                   ; sf_dirsec
 27685                                  	; MSDOS 6.0
 27686                                  	;mov	ax,[si+3]
 27687 00004B0F 8B4403                          MOV	AX,[SI+FEI.dirsec+2]
 27688                                  				;;; changed for >32mb
 27689 00004B12 AB                              STOSW                   ; sf_dirsec
 27690                                  	; 19/08//2018
 27691 00004B13 8A04                    	mov	al,[SI]
 27692                                          ;MOV	AL,[SI+FEI.dirpos] ; mov al,[SI+0]
 27693 00004B15 AA                              STOSB                   ; sf_dirpos
 27694 00004B16 1F                              POP	DS
 27695                                          ;JMP	short Next_Name
 27696                                  	; 24/09/2023
 27697 00004B17 EB1E                    	jmp	short FILE_SFT2  ; cf=0 (after 'test' instruction)
 27698                                  
 27699                                  ; DOS 3.3  FastOpen  6/13/86
 27700                                  
 27701                                  Not_FastOpen:
 27702                                          ;POP     DS		; normal path
 27703                                  
 27704                                  ;hkn; SS override
 27705                                  	;MOV	SI,[SS:CURBUF]	; DS:SI->buffer header
 27706                                  	; 16/12/2022
 27707                                  	; 28/07/2019
 27708 00004B19 8B36[E205]              	mov	si,[CURBUF]
 27709 00004B1D 1F                      	pop	ds
 27710                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27711                                  	;pop	ds
 27712                                  	;mov	si,[ss:CURBUF]
 27713                                  	
 27714                                  	;mov	ax,[si+6]
 27715 00004B1E 8B4406                          MOV     AX,[SI+BUFFINFO.buf_sector]     ;F.C. >32mb ;AN000;
 27716 00004B21 AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 27717                                  	; 19/05/2019        
 27718                                  	; MSDOS 6.0
 27719                                  	;mov	ax,[si+8]
 27720 00004B22 8B4408                  	MOV	AX,[SI+BUFFINFO.buf_sector+2]	;F.C. >32mb ;AN000;
 27721 00004B25 AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 27722                                          
 27723 00004B26 89D8                    	MOV     AX,BX
 27724                                  	;;add	si,16	; MSDOS 3.3	
 27725                                  	;add	si,20	; MSDOS 6.0
 27726 00004B28 83C614                          ADD     SI,BUFINSIZ     ; DS:SI-> start of data in buffer
 27727 00004B2B 29F0                            SUB     AX,SI           ; AX = BX relative to start of sector
 27728                                          ;mov	cl,32
 27729 00004B2D B120                    	MOV     CL,dir_entry.size
 27730 00004B2F F6F1                            DIV     CL
 27731 00004B31 AA                              STOSB                   ; sf_dirpos
 27732                                  Next_Name:
 27733 00004B32 EB03                            JMP     SHORT FILE_SFT2
 27734                                  
 27735                                  	; 24/09/2023
 27736                                  	; cf=0 (after 'or' instruction)
 27737                                  DEV_SFT3:
 27738                                  	;add	di,7
 27739 00004B34 83C707                          ADD     DI,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 27740                                  FILE_SFT2:
 27741                                  
 27742                                  ; Copy in the object's name
 27743                                  
 27744 00004B37 89DE                            MOV     SI,BX           ; DS:SI points to dir_name
 27745 00004B39 B90B00                          MOV     CX,11
 27746 00004B3C F3A4                            REP     MOVSB           ; sf_name
 27747 00004B3E 5E                              POP     SI              ; recover DS:SI -> dir_first
 27748                                  
 27749                                  ;hkn; SS is DOSDATA
 27750 00004B3F 16                              push	ss
 27751 00004B40 1F                      	pop	ds
 27752                                  	; 24/09/2023
 27753                                  	; cf=0
 27754                                          ;CLC
 27755 00004B41 C3                              retn
 27756                                  
 27757                                  ;---------------------------------------------------------------------------
 27758                                  ;
 27759                                  ; Procedure Name : FREEENT
 27760                                  ;
 27761                                  ; Inputs:
 27762                                  ;       ES:BP -> DPB
 27763                                  ;       [CURBUF] Set
 27764                                  ;       [CURBUF+2]:BX points to directory entry
 27765                                  ;       [CURBUF+2]:SI points to above dir_first
 27766                                  ; Function:
 27767                                  ;       Free the cluster chain for the entry if present
 27768                                  ; Outputs:
 27769                                  ;       Carry set if error (currently user FAILed to I 24)
 27770                                  ;       (NOTE dir_firclus and dir_size_l/h are wrong)
 27771                                  ; DS BX SI ES BP preserved (BX,SI in meaning, not value) others destroyed
 27772                                  ;---------------------------------------------------------------------------
 27773                                  
 27774                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27775                                  FREEENT:
 27776 00004B42 1E                              PUSH    DS
 27777 00004B43 C53E[E205]                      LDS     DI,[CURBUF]
 27778 00004B47 8B0C                            MOV     CX,[SI]         ; Get pointer to clusters
 27779                                  	; 19/05/2019 - Retro DOS v4.0
 27780                                  	; MSDOS 6.0
 27781 00004B49 8B5508                  	MOV	DX,[DI+BUFFINFO.buf_sector+2]  ;F.C. >32mb	;AN000;
 27782                                  ;hkn; SS override
 27783 00004B4C 368916[0706]                    MOV	[SS:HIGH_SECTOR],DX		;F.C. >32mb	;AN000;
 27784 00004B51 8B5506                          MOV     DX,[DI+BUFFINFO.buf_sector]
 27785 00004B54 1F                              POP     DS
 27786 00004B55 83F902                  	CMP	CX,2
 27787 00004B58 722E                            JB	short RET1	; Was 0 length file (or mucked Firclus if CX=1)
 27788                                  	;cmp	cx,[es:bp+0Dh]
 27789 00004B5A 263B4E0D                        CMP     CX,[ES:BP+DPB.MAX_CLUSTER]
 27790 00004B5E 7728                            JA	short RET1	; Treat like zero length file (firclus mucked)
 27791 00004B60 29FB                            SUB     BX,DI
 27792 00004B62 53                              PUSH    BX              ; Save offset
 27793 00004B63 FF36[0706]              	PUSH	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 27794 00004B67 52                              PUSH    DX              ; Save sector number
 27795 00004B68 89CB                            MOV     BX,CX
 27796 00004B6A E8AC02                          call	RELEASE         ; Free any data allocated
 27797 00004B6D 5A                              POP     DX
 27798 00004B6E 8F06[0706]                      POP	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 27799 00004B72 7302                            JNC	short GET_BUF_BACK
 27800 00004B74 5B                              POP     BX
 27801                                  freeent_retn:
 27802 00004B75 C3                              retn			; Screw up
 27803                                  
 27804                                  GET_BUF_BACK:
 27805                                  	; 22/09/2023
 27806                                  	;;mov	byte [ALLOWED],18h
 27807                                          ;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 27808                                          ;XOR	AL,AL ; *
 27809                                  	;call	GETBUFFR        ; Get sector back
 27810 00004B76 E8290D                  	call	GETBUFFER ; * ; pre read      
 27811                                  
 27812 00004B79 5B                      	POP     BX              ; Get offset back
 27813 00004B7A 72F9                            jc	short freeent_retn
 27814 00004B7C E8A8EA                  	call	SET_BUF_AS_DIR
 27815 00004B7F 031E[E205]                      ADD     BX,[CURBUF]	; Correct it for new buffer
 27816 00004B83 89DE                            MOV     SI,BX
 27817                                  	;add	si,1Ah
 27818 00004B85 83C61A                          ADD     SI,dir_entry.dir_first	; Get corrected SI
 27819                                  RET1:
 27820 00004B88 F8                              CLC
 27821 00004B89 C3                              retn
 27822                                  
 27823                                  ;---------------------------------------------------------------------------
 27824                                  ;
 27825                                  ; Procedure Name : CHECK_VIRT_OPEN
 27826                                  ;
 27827                                  ; CHECK_VIRT_OPEN checks to see if we had performed a "virtual open" (by
 27828                                  ; examining the flag [VIRTUAL_OPEN] to see if it is 1). If we did, then
 27829                                  ; it calls Dev_Close_SFT to decrement the ref. count. It also resets the
 27830                                  ; flag [VIRTUAL_OPEN].
 27831                                  ; No registers affected (including flags).
 27832                                  ; On input, [THISSFT] points to current SFT.
 27833                                  ;
 27834                                  ;---------------------------------------------------------------------------
 27835                                  
 27836                                  CHECK_VIRT_OPEN:
 27837 00004B8A 50                      	PUSH    AX
 27838 00004B8B 9F                              lahf                    ; preserve flags
 27839 00004B8C 803E[A20A]00                    CMP     byte [VIRTUAL_OPEN],0
 27840 00004B91 7410                            JZ	short ALL_CLOSED
 27841 00004B93 C606[A20A]00                    mov     byte [VIRTUAL_OPEN],0	; reset flag
 27842 00004B98 06                      	push	es
 27843 00004B99 57                      	push	di
 27844 00004B9A C43E[9E05]                      LES     DI,[THISSFT]
 27845 00004B9E E89FF9                          call	DEV_CLOSE_SFT
 27846 00004BA1 5F                      	pop	di
 27847 00004BA2 07                      	pop	es
 27848                                  
 27849                                  ALL_CLOSED:
 27850 00004BA3 9E                              sahf                    ; restore flags
 27851 00004BA4 58                              POP     AX
 27852 00004BA5 C3                              retn
 27853                                  
 27854                                  ;============================================================================
 27855                                  ; ROM.ASM, MSDOS 6.0, 1991
 27856                                  ;============================================================================
 27857                                  ; 29/07/2018 - Retro DOS v3.0
 27858                                  ; 20/05/2019 - Retro DOS v4.0
 27859                                  
 27860                                  ;	TITLE	ROM - Miscellaneous routines
 27861                                  ;	NAME	ROM
 27862                                  
 27863                                  ;**	Misc Low level routines for doing simple FCB computations, Cache
 27864                                  ;       reads and writes, I/O optimization, and FAT allocation/deallocation
 27865                                  ;
 27866                                  ;	SKPCLP
 27867                                  ;	FNDCLUS
 27868                                  ;	BUFSEC
 27869                                  ;	BUFRD
 27870                                  ;	BUFWRT
 27871                                  ;	NEXTSEC
 27872                                  ;	OPTIMIZE
 27873                                  ;	FIGREC
 27874                                  ;	ALLOCATE
 27875                                  ;	RESTFATBYT
 27876                                  ;	RELEASE
 27877                                  ;	RELBLKS
 27878                                  ;	GETEOF
 27879                                  ;
 27880                                  ;	Modification history:
 27881                                  ;
 27882                                  ;		Created: ARR 30 March 1983
 27883                                  ;               M039: DB 10/25/90 - Disk read/write optimization.
 27884                                  
 27885                                  ;Break   <FNDCLUS -- Skip over allocation units>
 27886                                  ;--------------------------------------------------------------------------
 27887                                  ;
 27888                                  ; Procedure Name : FNDCLUS
 27889                                  ;
 27890                                  ; Inputs:
 27891                                  ;       CX = No. of clusters to skip
 27892                                  ;       ES:BP = Base of drive parameters
 27893                                  ;       [THISSFT] point to SFT
 27894                                  ; Outputs:
 27895                                  ;       BX = Last cluster skipped to
 27896                                  ;       CX = No. of clusters remaining (0 unless EOF)
 27897                                  ;       DX = Position of last cluster
 27898                                  ;       Carry set if error (currently user FAILed to I 24)
 27899                                  ; DI destroyed. No other registers affected.
 27900                                  ;--------------------------------------------------------------------------
 27901                                  
 27902                                  ; 20/05/2019 - Retro DOS v4.0
 27903                                  ; DOSCODE:8BF2h (MSDOS 6.21, MSDOS.SYS)
 27904                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27905                                  ; DOSCODE:8BB7h (MSDOS 5.0, MSDOS.SYS)
 27906                                  
 27907                                  FNDCLUS:
 27908 00004BA6 06                      	PUSH	ES
 27909 00004BA7 C43E[9E05]                      LES     DI,[THISSFT]		; setup addressability to SFT
 27910                                  	;;mov	bx,[es:di+1Bh] ; MSDOS 3.3
 27911                                  	;mov	bx,[es:di+35h] ; MSDOS 6.0
 27912 00004BAB 268B5D35                	MOV	BX,[ES:DI+SF_ENTRY.sf_lstclus]
 27913                                  	;mov	dx,[es:di+19h]
 27914 00004BAF 268B5519                        MOV     DX,[ES:DI+SF_ENTRY.sf_cluspos]
 27915 00004BB3 09DB                    	OR	BX,BX
 27916 00004BB5 7424                    	JZ	short NOCLUS
 27917                                  
 27918 00004BB7 29D1                            SUB     CX,DX
 27919 00004BB9 7308                            JNB	short FINDIT
 27920                                  
 27921 00004BBB 01D1                            ADD     CX,DX
 27922 00004BBD 31D2                            XOR     DX,DX
 27923                                  	;mov	bx,[es:di+0Bh]
 27924 00004BBF 268B5D0B                        MOV     BX,[ES:DI+SF_ENTRY.sf_firclus]
 27925                                  FINDIT:
 27926 00004BC3 07                              POP	ES
 27927 00004BC4 E313                    	JCXZ	RET9
 27928                                  
 27929                                  	;entry	SKPCLP
 27930                                  SKPCLP:
 27931 00004BC6 E8CE08                  	call	UNPACK
 27932 00004BC9 7214                            jc	short fndclus_retn	; retc
 27933                                  
 27934                                  	; 09/09/2018
 27935                                  
 27936                                  	; MSDOS 3.3
 27937                                  	;push	bx
 27938                                  	;mov	bx,di
 27939                                  	;call	IsEOF
 27940                                  	;pop	bx	
 27941                                  	;jae	short RET9
 27942                                  
 27943                                  	; 20/05/2019 - Retro DOS v4.0
 27944                                  
 27945                                  	; MSDOS 6.0
 27946 00004BCB 87DF                    	xchg	bx,di
 27947 00004BCD E8B008                  	call	IsEOF
 27948 00004BD0 87DF                    	xchg	bx,di
 27949 00004BD2 7305                    	jae	short RET9
 27950                                  
 27951 00004BD4 87DF                            XCHG    BX,DI
 27952 00004BD6 42                              INC     DX
 27953                                  
 27954 00004BD7 E2ED                    	LOOP	SKPCLP			; RMFS
 27955                                  RET9:	
 27956 00004BD9 F8                      	CLC
 27957 00004BDA C3                              retn
 27958                                  NOCLUS:
 27959 00004BDB 07                              POP	ES
 27960 00004BDC 41                              INC	CX
 27961 00004BDD 4A                              DEC	DX
 27962 00004BDE F8                              CLC
 27963                                  
 27964                                  fndclus_retn:
 27965 00004BDF C3                              retn
 27966                                  
 27967                                  ;Break  <BUFSEC -- BUFFER A SECTOR AND SET UP A TRANSFER>
 27968                                  ;--------------------------------------------------------------------------
 27969                                  ;
 27970                                  ; Procedure Name : BUFSEC
 27971                                  ;
 27972                                  ; Inputs:
 27973                                  ;       AH = priority of buffer
 27974                                  ;       AL = 0 if buffer must be read, 1 if no pre-read needed
 27975                                  ;       ES:BP = Base of drive parameters
 27976                                  ;       [CLUSNUM] = Physical cluster number
 27977                                  ;       [SECCLUSPOS] = Sector position of transfer within cluster
 27978                                  ;       [BYTCNT1] = Size of transfer
 27979                                  ; Function:
 27980                                  ;       Insure specified sector is in buffer, flushing buffer before
 27981                                  ;       read if necessary.
 27982                                  ; Outputs:
 27983                                  ;       ES:DI = Pointer to buffer
 27984                                  ;       SI = Pointer to transfer address
 27985                                  ;       CX = Number of bytes
 27986                                  ;       [NEXTADD] updated
 27987                                  ;       [TRANS] set to indicate a transfer will occur
 27988                                  ;       Carry set if error (user FAILed to I 24)
 27989                                  ;--------------------------------------------------------------------------
 27990                                  
 27991                                  BUFSEC:
 27992 00004BE0 8B16[BC05]                      MOV     DX,[CLUSNUM]
 27993 00004BE4 8A1E[7305]                      MOV     BL,[SECCLUSPOS]
 27994                                  	;mov	byte [ALLOWED],38h
 27995 00004BE8 C606[4B03]38                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY+Allowed_IGNORE
 27996 00004BED E85001                          CALL    FIGREC
 27997 00004BF0 E8B60C                  	call	GETBUFFR
 27998 00004BF3 72EA                            jc	short fndclus_retn
 27999                                  
 28000 00004BF5 C606[7405]01                    MOV     BYTE [TRANS],1	; A transfer is taking place
 28001 00004BFA 8B36[B805]                      MOV     SI,[NEXTADD]
 28002 00004BFE 89F7                            MOV     DI,SI
 28003 00004C00 8B0E[D205]                      MOV     CX,[BYTCNT1]
 28004 00004C04 01CF                            ADD     DI,CX
 28005 00004C06 893E[B805]                      MOV     [NEXTADD],DI
 28006 00004C0A C43E[E205]                      LES     DI,[CURBUF]
 28007                                  	;or	byte [es:di+5],8
 28008 00004C0E 26804D0508                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDATA
 28009                                  	;;lea	di,[di+16] ; MSDOS 3.3 
 28010                                  	;lea	di,[di+20] ; MSDOS 6.0
 28011 00004C13 8D7D14                          LEA     DI,[DI+BUFINSIZ]        ; Point to buffer
 28012 00004C16 033E[CC05]                      ADD     DI,[BYTSECPOS]
 28013 00004C1A F8                              CLC
 28014 00004C1B C3                              retn
 28015                                  
 28016                                  ;Break   <BUFRD, BUFWRT -- PERFORM BUFFERED READ AND WRITE>
 28017                                  
 28018                                  ;---------------------------------------------------------------------------
 28019                                  ;
 28020                                  ; Procedure Name : BUFRD
 28021                                  ;
 28022                                  ; Do a partial sector read via one of the system buffers
 28023                                  ; ES:BP Points to DPB
 28024                                  ; Carry set if error (currently user FAILed to I 24)
 28025                                  ;
 28026                                  ; DS - set to DOSDATA
 28027                                  ;
 28028                                  ;----------------------------------------------------------------------------
 28029                                  
 28030                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28031                                  	; 20/05/2019 - Retro DOS v4.0
 28032                                  BUFRD:
 28033 00004C1C 06                              PUSH	ES
 28034 00004C1D 31C0                            xor	ax, ax			; pre-read sector
 28035 00004C1F E8BEFF                          CALL    BUFSEC
 28036 00004C22 7303                            JNC	short BUF_OK
 28037                                  
 28038                                  BUF_IO_FAIL:				; this label used by BUFWRT also
 28039 00004C24 07                              POP	ES
 28040 00004C25 EB2B                            JMP     SHORT RBUFPLACED
 28041                                  
 28042                                  BUF_OK:
 28043 00004C27 8CC3                            MOV     BX,ES
 28044 00004C29 8E06[2E03]                      MOV     ES,[DMAADD+2]
 28045 00004C2D 8EDB                            MOV     DS,BX
 28046 00004C2F 87FE                    	XCHG    DI,SI
 28047 00004C31 D1E9                            SHR     CX,1
 28048                                  ;M039
 28049                                  	; MSDOS 3.3
 28050                                  	;JNC	short EVENRD
 28051                                  	;MOVSB
 28052                                  ;EVENRD:
 28053                                  	;REP     MOVSW
 28054                                  
 28055                                  ;	CX = # of whole WORDs ; CF=1 if odd # of bytes.
 28056                                  ;       DS:SI-> Source within Buffer.
 28057                                  ;       ES:DI-> Destination within Transfer memory block.
 28058                                  
 28059                                  	; MSDOS 6.0
 28060 00004C33 F3A5                    	rep	movsw			;Copy Buffer to Transfer memory.
 28061                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 28062                                  	;rep	movsb                   ;Copy last byte.
 28063                                  	; 16/12/2022
 28064 00004C35 7301                    	jnc	short EVENRD ; **** 20/05/2019
 28065 00004C37 A4                      	movsb ; ****
 28066                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28067                                  	;adc	cx,0
 28068                                  	;rep	movsb
 28069                                  ;M039
 28070                                  EVENRD: ; ****
 28071 00004C38 07                              POP	ES
 28072                                  ;hkn; SS override
 28073 00004C39 36C53E[E205]                    LDS     DI,[SS:CURBUF]
 28074                                  	;;lea	bx,[di+16]
 28075                                  	;lea	bx,[di+20] ; MSDOS 6.0
 28076 00004C3E 8D5D14                  	LEA     BX,[DI+BUFINSIZ]
 28077 00004C41 29DE                            SUB     SI,BX                   ; Position in buffer
 28078 00004C43 E8030C                          call	PLACEBUF
 28079                                  	;cmp	si,[es:bp+2]
 28080 00004C46 263B7602                	CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Read Last byte?
 28081 00004C4A 7205                            JB	short RBUFPLACEDC	; No, leave buf where it is
 28082                                  ;M039
 28083                                  	; MSDOS 3.3
 28084                                  	;call	PLACEHEAD               ; Make it prime candidate for chucking
 28085                                                                          ;  even though it is MRU.
 28086                                          ; MSDOS 6.0
 28087 00004C4C 36893E[6D00]            	MOV	[ss:BufferQueue],DI	; Make it prime candidate for
 28088                                  ;M039					; chucking even though it is MRU.
 28089                                  
 28090                                  RBUFPLACEDC:
 28091 00004C51 F8                              CLC
 28092                                  RBUFPLACED:
 28093 00004C52 16                      	push	ss
 28094 00004C53 1F                      	pop	ds
 28095 00004C54 C3                              retn
 28096                                  
 28097                                  ;----------------------------------------------------------------------------
 28098                                  ;
 28099                                  ; Procedure : BUFWRT
 28100                                  ;
 28101                                  ; Do a partial sector write via one of the system buffers
 28102                                  ; ES:BP Points to DPB
 28103                                  ; Carry set if error (currently user FAILed to I 24)
 28104                                  ;
 28105                                  ; DS - set to DOSDATA
 28106                                  ;
 28107                                  ;----------------------------------------------------------------------------
 28108                                  
 28109                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28110                                  	; 20/05/2019 - Retro DOS v4.0
 28111                                  BUFWRT:
 28112                                          ;MOV     AX,[SECPOS]
 28113                                          ; MSDOS 6.0
 28114                                  	;ADD	AX,1            	; Set for next sector
 28115                                          ;MOV	[SECPOS],AX 		;F.C. >32mb	;AN000;
 28116                                          ;ADC	word [SECPOS+2],0	;F.C. >32mb	;AN000;
 28117                                          ; 24/09/2023
 28118 00004C55 FF06[C405]              	inc	word [SECPOS]
 28119 00004C59 7504                    	jnz	short bufw_secpos
 28120 00004C5B FF06[C605]              	inc	word [SECPOS+2]
 28121                                  bufw_secpos:
 28122 00004C5F A1[C605]                	MOV	AX,[SECPOS+2]		;F.C. >32mb	;AN000;
 28123 00004C62 3B06[CA05]                      CMP	AX,[VALSEC+2]		;F.C. >32mb	;AN000;
 28124 00004C66 B001                            MOV	AL,1			;F.C. >32mb	;AN000;
 28125 00004C68 770F                            JA	short NOREAD		;F.C. >32mb	;AN000;
 28126 00004C6A 720B                            JB	short _doread		;F.C. >32mb	;AN000;
 28127 00004C6C A1[C405]                        MOV	AX,[SECPOS]		;F.C. >32mb	;AN000;
 28128                                  
 28129                                  	; MSDOS 3.3
 28130                                  	;INC	AX
 28131                                  	;MOV	[SECPOS],AX ; 09/09/2018
 28132                                  
 28133                                  	; 20/05/2019
 28134                                  	; MSDOS 3.3 & MSDOS 6.0
 28135 00004C6F 3B06[C805]                      CMP     AX,[VALSEC]		; Has sector been written before?
 28136 00004C73 B001                            MOV     AL,1
 28137 00004C75 7702                            JA	short NOREAD		; Skip preread if SECPOS>VALSEC
 28138                                  _doread:
 28139 00004C77 30C0                            XOR     AL,AL
 28140                                  NOREAD:
 28141 00004C79 06                              PUSH	ES
 28142 00004C7A E863FF                          CALL    BUFSEC
 28143 00004C7D 72A5                    	JC	short BUF_IO_FAIL
 28144 00004C7F 8E1E[2E03]                      MOV     DS,[DMAADD+2]
 28145 00004C83 D1E9                            SHR     CX,1
 28146                                  ;M039
 28147                                  	; MSDOS 3.3
 28148                                  	;JNC	short EVENWRT ; 09/09/2018
 28149                                  	;MOVSB
 28150                                  ;EVENWRT:
 28151                                  	;REP	MOVSW
 28152                                  
 28153                                  ;	CX = # of whole WORDs; CF=1 if odd # of bytes.
 28154                                  ;       DS:SI-> Source within Transfer memory block.
 28155                                  ;       ES:DI-> Destination within Buffer.
 28156                                  
 28157                                  	; MSDOS 6.0
 28158 00004C85 F3A5                    	rep	movsw			;Copy Transfer memory to Buffer.
 28159                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 28160                                  	;rep	movsb                   ;Copy last byte.
 28161                                  	; 16/12/2022
 28162 00004C87 7301                    	jnc	short EVENWRT ; **** 20/05/2019
 28163 00004C89 A4                      	movsb ; ****
 28164                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28165                                  	;adc	cx,0
 28166                                  	;rep	movsb
 28167                                  ;M039
 28168                                  EVENWRT: ; ****
 28169 00004C8A 07                              POP	ES
 28170                                  
 28171                                  ;hkn; SS override
 28172 00004C8B 36C51E[E205]                    LDS     BX,[SS:CURBUF]
 28173                                  
 28174                                  	; MSDOS 6.0
 28175 00004C90 F6470540                        TEST	byte [BX+BUFFINFO.buf_flags],buf_dirty
 28176                                  					;LB. if already dirty		  ;AN000;
 28177 00004C94 7507                            JNZ	short yesdirty10	;LB.  don't increment dirty count ;AN000;
 28178 00004C96 E8120E                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 28179                                  	
 28180                                  	;or	byte [bx+5],40h
 28181 00004C99 804F0540                        OR	byte [BX+BUFFINFO.buf_flags],buf_dirty
 28182                                  yesdirty10:
 28183                                  	;;lea	si,[bx+16]
 28184                                  	;lea	si,[bx+20] ; MSDOS 6.0
 28185 00004C9D 8D7714                          LEA     SI,[BX+BUFINSIZ]
 28186 00004CA0 29F7                            SUB     DI,SI                   ; Position in buffer
 28187                                  ;M039
 28188                                  	; MSDOS 3.3
 28189                                  	;MOV	SI,DI
 28190                                  	;MOV	DI,BX
 28191                                  	;call	PLACEBUF
 28192                                  	;;cmp	si,[es:bp+2]
 28193                                  	;CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 28194                                  	;JB	short WBUFPLACED	; No, leave buf where it is
 28195                                  	;call	PLACEHEAD               ; Make it prime candidate for chucking
 28196                                                                          ;  even though it is MRU.
 28197                                  	; MSDOS 6.0
 28198                                  	;cmp	di,[es:bp+2]
 28199 00004CA2 263B7E02                	CMP	di,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 28200 00004CA6 7205                            JB	short WBUFPLACED	; No, leave buf where it is
 28201 00004CA8 36891E[6D00]                    MOV	[ss:BufferQueue],BX	; Make it prime candidate for
 28202                                  					; chucking even though it is MRU.
 28203                                  ;M039
 28204                                  
 28205                                  WBUFPLACED:
 28206 00004CAD F8                              CLC
 28207 00004CAE 16                      	push	ss
 28208 00004CAF 1F                      	pop	ds
 28209 00004CB0 C3                              retn
 28210                                  
 28211                                  ;Break   <NEXTSEC -- Compute next sector to read or write>
 28212                                  ;---------------------------------------------------------------------------
 28213                                  ;
 28214                                  ; Procedure Name : NEXTSEC
 28215                                  ;
 28216                                  ; Compute the next sector to read or write
 28217                                  ; ES:BP Points to DPB
 28218                                  ;
 28219                                  ;---------------------------------------------------------------------------
 28220                                  
 28221                                  NEXTSEC:
 28222 00004CB1 F606[7405]FF            	test	byte [TRANS],0FFh ; -1 
 28223 00004CB6 7426                            JZ	short CLRET
 28224                                  
 28225 00004CB8 A0[7305]                        MOV     AL,[SECCLUSPOS]
 28226 00004CBB FEC0                            INC     AL
 28227                                  	;cmp	al,[es:bp+4]
 28228 00004CBD 263A4604                        CMP     AL,[ES:BP+DPB.CLUSTER_MASK]
 28229 00004CC1 7618                            JBE	short SAVPOS
 28230                                  
 28231 00004CC3 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 28232 00004CC7 E8B607                          call	IsEOF
 28233 00004CCA 7314                            JAE	short NONEXT
 28234                                  
 28235 00004CCC E8C807                          call	UNPACK
 28236 00004CCF 720F                            JC	short NONEXT
 28237                                  clusgot:
 28238 00004CD1 893E[BC05]                      MOV     [CLUSNUM],DI
 28239 00004CD5 FF06[BA05]                      INC     word [LASTPOS]
 28240 00004CD9 B000                            MOV     AL,0
 28241                                  SAVPOS:
 28242 00004CDB A2[7305]                        MOV     [SECCLUSPOS],AL
 28243                                  CLRET:
 28244 00004CDE F8                              CLC
 28245 00004CDF C3                              retn
 28246                                  NONEXT:
 28247 00004CE0 F9                              STC
 28248 00004CE1 C3                              retn
 28249                                  
 28250                                  ;Break	<OPTIMIZE -- DO A USER DISK REQUEST WELL>
 28251                                  ;----------------------------------------------------------------------------
 28252                                  ;
 28253                                  ; Procedure Name : OPTIMIZE
 28254                                  ;
 28255                                  ; Inputs:
 28256                                  ;       BX = Physical cluster
 28257                                  ;       CX = No. of records
 28258                                  ;       DL = sector within cluster
 28259                                  ;       ES:BP = Base of drive parameters
 28260                                  ;       [NEXTADD] = transfer address
 28261                                  ; Outputs:
 28262                                  ;       AX = No. of records remaining
 28263                                  ;       BX = Transfer address
 28264                                  ;       CX = No. or records to be transferred
 28265                                  ;       DX = Physical sector address            (LOW)
 28266                                  ;       [HIGH_SECTOR] = Physical sector address (HIGH)
 28267                                  ;       DI = Next cluster
 28268                                  ;       [CLUSNUM] = Last cluster accessed
 28269                                  ;       [NEXTADD] updated
 28270                                  ;       Carry set if error (currently user FAILed to I 24)
 28271                                  ; ES:BP unchanged. Note that segment of transfer not set.
 28272                                  ;
 28273                                  ;---------------------------------------------------------------------------
 28274                                  
 28275                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28276                                  OPTIMIZE:
 28277 00004CE2 52                      	PUSH    DX
 28278 00004CE3 53                              PUSH    BX
 28279                                  	;mov	al,[es:bp+4]
 28280 00004CE4 268A4604                        MOV     AL,[ES:BP+DPB.CLUSTER_MASK]
 28281 00004CE8 FEC0                            INC     AL              ; Number of sectors per cluster
 28282 00004CEA 88C4                            MOV     AH,AL
 28283 00004CEC 28D0                            SUB     AL,DL           ; AL = Number of sectors left in first cluster
 28284 00004CEE 89CA                            MOV     DX,CX
 28285                                  	;MOV	CX,0
 28286                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28287                                  	; 16/12/2022
 28288 00004CF0 31C9                    	xor	cx,cx	; sub cx,cx
 28289                                  OPTCLUS:
 28290                                  ; AL has number of sectors available in current cluster
 28291                                  ; AH has number of sectors available in next cluster
 28292                                  ; BX has current physical cluster
 28293                                  ; CX has number of sequential sectors found so far
 28294                                  ; DX has number of sectors left to transfer
 28295                                  ; ES:BP Points to DPB
 28296                                  ; ES:SI has FAT pointer
 28297                                  
 28298                                  do_norm3:
 28299 00004CF2 E8A207                          call	UNPACK
 28300 00004CF5 7236                            JC	short OP_ERR
 28301                                  clusgot2:
 28302 00004CF7 00C1                    	ADD	CL,AL
 28303 00004CF9 80D500                          ADC     CH,0
 28304 00004CFC 39D1                            CMP     CX,DX
 28305 00004CFE 7332                            JAE	short BLKDON
 28306 00004D00 88E0                            MOV     AL,AH
 28307 00004D02 43                              INC     BX
 28308 00004D03 39DF                            CMP     DI,BX
 28309 00004D05 74EB                            JZ	short OPTCLUS
 28310 00004D07 4B                              DEC     BX
 28311                                  FINCLUS:
 28312 00004D08 891E[BC05]                      MOV     [CLUSNUM],BX    ; Last cluster accessed
 28313 00004D0C 29CA                            SUB     DX,CX           ; Number of sectors still needed
 28314 00004D0E 52                              PUSH    DX
 28315 00004D0F 89C8                            MOV     AX,CX
 28316                                  	;mul	word[ES:BP+2]
 28317 00004D11 26F76602                        MUL	word [ES:BP+DPB.SECTOR_SIZE] 
 28318                                  				; Number of sectors times sector size
 28319 00004D15 8B36[B805]                      MOV     SI,[NEXTADD]
 28320 00004D19 01F0                            ADD     AX,SI           ; Adjust by size of transfer
 28321 00004D1B A3[B805]                        MOV     [NEXTADD],AX
 28322 00004D1E 58                              POP     AX              ; Number of sectors still needed
 28323 00004D1F 5A                              POP     DX              ; Starting cluster
 28324 00004D20 29D3                            SUB     BX,DX           ; Number of new clusters accessed
 28325 00004D22 011E[BA05]                      ADD     [LASTPOS],BX
 28326 00004D26 5B                              POP     BX              ; BL = sector position within cluster
 28327 00004D27 E81600                  	call	FIGREC
 28328 00004D2A 89F3                            MOV     BX,SI
 28329                                  	; 24/09/2023
 28330                                  	; cf=0 (at the return of FIGREC)
 28331                                  	;CLC
 28332 00004D2C C3                              retn
 28333                                  OP_ERR:
 28334 00004D2D 83C404                          ADD     SP,4
 28335 00004D30 F9                      	STC
 28336 00004D31 C3                              retn
 28337                                  BLKDON:
 28338 00004D32 29D1                            SUB     CX,DX           ; Number of sectors in cluster we don't want
 28339 00004D34 28CC                            SUB     AH,CL           ; Number of sectors in cluster we accepted
 28340 00004D36 FECC                            DEC     AH              ; Adjust to mean position within cluster
 28341 00004D38 8826[7305]                      MOV     [SECCLUSPOS],AH
 28342 00004D3C 89D1                            MOV     CX,DX           ; Anyway, make the total equal to the request
 28343 00004D3E EBC8                            JMP     SHORT FINCLUS
 28344                                  
 28345                                  ;Break	<FIGREC -- Figure sector in allocation unit>
 28346                                  ;---------------------------------------------------------------------------
 28347                                  ;
 28348                                  ; Procedure Name : FIGREC
 28349                                  ;
 28350                                  ; Inputs:
 28351                                  ;       DX = Physical cluster number
 28352                                  ;       BL = Sector position within cluster
 28353                                  ;       ES:BP = Base of drive parameters
 28354                                  ; Outputs:
 28355                                  ;       DX = physical sector number           (LOW)
 28356                                  ;       [HIGH_SECTOR] Physical sector address (HIGH)
 28357                                  ; No other registers affected.
 28358                                  ;
 28359                                  ;---------------------------------------------------------------------------
 28360                                  
 28361                                  	; 10/06/2019
 28362                                  	; 20/05/2019 - Retro DOS v4.0
 28363                                  	; DOSCODE:8D96h (MSDOS 6.21, MSDOS.SYS)
 28364                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28365                                  	; DOSCODE:8D5Bh (MSDOS 5.0, MSDOS.SYS)	
 28366                                  FIGREC:
 28367 00004D40 51                              PUSH    CX
 28368                                  	;mov	cl,[es:bp+5]
 28369 00004D41 268A4E05                        MOV     CL,[ES:BP+DPB.CLUSTER_SHIFT]
 28370 00004D45 4A                              DEC     DX
 28371 00004D46 4A                              DEC     DX
 28372                                  
 28373                                  	; MSDOS 3.3
 28374                                  	;SHL	DX,CL
 28375                                  
 28376                                  ;hkn; SS override HIGH_SECTOR
 28377                                  	; MSDOS 6.0
 28378 00004D47 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0		;F.C. >32mb
 28379                                  	; 24/09/2023
 28380 00004D4E 30ED                    	xor	ch,ch				;F.C. >32mb
 28381 00004D50 08C9                    	OR	CL,CL				;F.C. >32mb
 28382 00004D52 740C                    	JZ	short noshift			;F.C. >32mb
 28383 00004D54 30ED                    	XOR	CH,CH				;F.C. >32mb
 28384                                  rotleft:					;F.C. >32mb
 28385 00004D56 F8                      	CLC					;F.C. >32mb
 28386 00004D57 D1D2                    	RCL	DX,1				;F.C. >32mb
 28387                                  	; 10/06/2019
 28388 00004D59 36D116[0706]            	RCL	word [ss:HIGH_SECTOR],1		;F.C. >32mb
 28389 00004D5E E2F6                    	LOOP	rotleft				;F.C. >32mb
 28390                                  noshift:
 28391                                  	; MSDOS 3.3 & MSDOS 6.0
 28392 00004D60 08DA                            OR      DL,BL
 28393                                  	;add	dx,[es:bp+0Bh]
 28394 00004D62 2603560B                        ADD     DX,[ES:BP+DPB.FIRST_SECTOR]
 28395                                  	; MSDOS 6.0
 28396                                  	; 10/06/2019
 28397                                  	;ADC	word [ss:HIGH_SECTOR],0		;F.C. >32mb
 28398                                  	; 24/09/2023
 28399                                  	; cx=0
 28400 00004D66 36110E[0706]            	ADC	word [ss:HIGH_SECTOR],cx ; 0
 28401                                  
 28402                                  	; MSDOS 3.3 & MSDOS 6.0
 28403 00004D6B 59                      	POP     CX
 28404                                  figrec_retn:
 28405 00004D6C C3                              retn
 28406                                  
 28407                                  ; 20/05/2019 - Retro DOS v4.0
 28408                                  ; DOSCODE:8DC2h (MSDOS 6.21, MSDOS.SYS)
 28409                                  
 28410                                  ; 30/07/2018 - Retro DOS v3.0
 28411                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 
 28412                                  
 28413                                  ;Break   <ALLOCATE -- Assign disk space>
 28414                                  ;---------------------------------------------------------------------------
 28415                                  ;
 28416                                  ; Procedure Name : ALLOCATE - Allocate Disk Space
 28417                                  ;
 28418                                  ;   ALLOCATE is called to allocate disk clusters. The new clusters are
 28419                                  ;   FAT-chained onto the end of the existing file.
 28420                                  ;
 28421                                  ;   The DPB contains the cluster # of the last free cluster allocated
 28422                                  ;   (dpb_next_free). We start at this cluster and scan towards higher
 28423                                  ;   numbered clusters, looking for the necessary free blocks.
 28424                                  ;
 28425                                  ;   Once again, fancy terminology gets in the way of correct coding. When
 28426                                  ;   using next_free, start scanning AT THAT POINT and not the one following it.
 28427                                  ;   This fixes the boundary condition bug when only free = next_free = 2.
 28428                                  ;
 28429                                  ;       If we get to the end of the disk without satisfaction:
 28430                                  ;
 28431                                  ;           if (dpb_next_free == 2) then we've scanned the whole disk.
 28432                                  ;               return (insufficient_disk_space)
 28433                                  ;           ELSE
 28434                                  ;               dpb_next_free = 2; start scan over from the beginning.
 28435                                  ;
 28436                                  ;   Note that there is no multitasking interlock. There is no race when
 28437                                  ;   examining the entrys in an in-core FAT block since there will be no
 28438                                  ;   context switch. When UNPACK context switches while waiting for a FAT read
 28439                                  ;   we are done with any in-core FAT blocks, so again there is no race. The
 28440                                  ;   only special concern is that V2 and V3 MSDOS left the last allocated
 28441                                  ;   cluster as "00"; marking it EOF only when the entire alloc request was
 28442                                  ;   satisfied. We can't allow another activation to think this cluster is
 28443                                  ;   free, so we give it a special temporary mark to show that it is, indeed,
 28444                                  ;   allocated.
 28445                                  ;
 28446                                  ;   Note that when we run out of space this algorithem will scan from
 28447                                  ;   dpb_next_free to the end, then scan from cluster 2 through the end,
 28448                                  ;   redundantly scanning the later part of the disk. This only happens when
 28449                                  ;   we run out of space, so sue me.
 28450                                  ;
 28451                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 28452                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 28453                                  ;                                                                          ;
 28454                                  ;   The use of FATBYT and RESTFATBYT is somewhat mysterious. Here is the
 28455                                  ;   explanation:
 28456                                  ;
 28457                                  ;   In the NUL file case (sf_firclus currently 0) ALLOCATE is called with
 28458                                  ;   entry BX = 0. What needs to be done in this case is to stuff the cluster
 28459                                  ;   number of the first cluster allocated in sf_firclus when the ALLOCATE is
 28460                                  ;   complete. THIS VALUE IS SAVED TEMPORARILY IN CLUSTER 0, HENCE THE CURRENT
 28461                                  ;   VALUE IN CLUSTER 0 MUST BE SAVED AND RESTORED. This is a side effect of
 28462                                  ;   the fact that PACK and UNPACK don't treat requests for clusters 0 and 1 as
 28463                                  ;   errors. This "stuff" is done by the call to PACK which is right before
 28464                                  ;   the
 28465                                  ;           LOOP   findfre         ; alloc more if needed
 28466                                  ;   instruction when the first cluster is allocated to the nul file. The
 28467                                  ;   value is recalled from cluster 0 and stored at sf_firclus at ads4:
 28468                                  ;
 28469                                  ;   This method is obviously useless (because it is non-reentrant) for
 28470                                  ;   multitasking, and will have to be changed. Storing the required value on
 28471                                  ;   the stack is recommended. Setting sf_firclus at the PACK of cluster 0
 28472                                  ;   (instead of actually doing the PACK) is BAD because it doesn't handle
 28473                                  ;   problems with INT 24 well.
 28474                                  ;
 28475                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 28476                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 28477                                  ;                                                                          ;
 28478                                  ;       ENTRY   BX = Last cluster of file (0 if null file)
 28479                                  ;               CX = No. of clusters to allocate
 28480                                  ;               ES:BP = Base of drive parameters
 28481                                  ;               [THISSFT] = Points to SFT
 28482                                  ;
 28483                                  ;       EXIT    'C' set if insufficient space
 28484                                  ;                 [FAILERR] can be tested to see the reason for failure
 28485                                  ;                 CX = max. no. of clusters that could be added to file
 28486                                  ;               'C' clear if space allocated
 28487                                  ;                 BX = First cluster allocated
 28488                                  ;                 FAT is fully updated
 28489                                  ;                 sf_FIRCLUS field of SFT set if file was null
 28490                                  ;
 28491                                  ;       USES    ALL but SI, BP
 28492                                  
 28493                                  ;callmagic  proc near
 28494                                  ;       push    ds                             ;push segment of routine 
 28495                                  ;       push    Offset MagicPatch              ;push offset for routine
 28496                                  ;       retf                                   ;simulate jmp far
 28497                                  ;                                              ;far return address is on
 28498                                  ;                                              ;stack, so far return from
 28499                                  ;                                              ;call will return this routine
 28500                                  ;callmagic  endp
 28501                                  
 28502                                  
 28503                                  ; 25/09/2023
 28504                                  %if 0
 28505                                  callmagic:
 28506                                  	push	ds
 28507                                  	push	MagicPatch
 28508                                  	retf	
 28509                                  %endif
 28510                                  
 28511                                  ALLOCATE:
 28512                                  	; 10/09/2018
 28513                                  ;BEGIN MAGICDRV MODIFICATIONS
 28514                                  ;
 28515                                  ;7/5/92 scottq
 28516                                  ;
 28517                                  ;This is the disk compression patch location which allows
 28518                                  ;the disk compression software to fail allocations if the
 28519                                  ;FAT would allows allocation, but the free space for compressed
 28520                                  ;data would not.
 28521                                  ;        
 28522                                  ;;;	call    far ptr MAGICPATCH
 28523                                  ;;; We cannot do a far call since we cannot have fix-ups[romdos,hidos],
 28524                                  ;;; but we do know the segment and offset of the routine
 28525                                  ;;; so simulate a far call to dosdata:magicpatch
 28526                                  ;;; note dosassume above, so DS -> dosdata
 28527                                  
 28528                                  	; MSDOS 6.0
 28529                                          ;clc				;clear carry so we fall through
 28530                                  	;				;if no patch is present
 28531                                  	;push	cs			;push segment for far return
 28532                                          ;call	callmagic		;this is a near call
 28533                                          ;jnc	short Regular_Allocate_Path
 28534                                  	;jmp	Disk_Full_Return
 28535                                  
 28536                                  ; 25/09/2023
 28537                                  %if 0
 28538                                  	clc
 28539                                  	push	cs
 28540                                  	call	callmagic
 28541                                  	jnc	short Regular_Allocate_Path
 28542                                  	jmp	Disk_Full_Return
 28543                                  Regular_Allocate_Path:
 28544                                  %endif
 28545                                  
 28546                                  	; 20/05/2019 - Retro DOS v4.0
 28547                                  ;END MAGICDRV MODIFICATIONS
 28548                                  
 28549                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28550                                  	; DOSCODE:8D87h (MSDOS 5.0, MSDOS.SYS)
 28551                                  
 28552 00004D6D 53                              PUSH    BX                      ; save (bx)
 28553 00004D6E 31DB                            XOR     BX,BX
 28554 00004D70 E82407                  	call	UNPACK
 28555 00004D73 893E[9605]                      MOV     [FATBYT],DI             ; save correct cluster 0 value
 28556 00004D77 5B                              POP     BX
 28557 00004D78 72F2                            jc	short figrec_retn	; abort if error   [INTERR?]
 28558                                  
 28559 00004D7A 51                              PUSH    CX
 28560 00004D7B 53                              PUSH    BX
 28561                                  
 28562 00004D7C 89DA                            MOV     DX,BX
 28563                                  	;;mov	bx,[es:bp+1Ch]  ; MSDOS 3.3
 28564                                  	;mov	bx,[es:bp+1Dh]	; MSDOS 6.0
 28565 00004D7E 268B5E1D                        mov     bx,[ES:BP+DPB.NEXT_FREE]
 28566 00004D82 83FB02                          cmp     bx,2
 28567 00004D85 7709                            ja	short FINDFRE
 28568                                  
 28569                                  ;   couldn't find enough free space beyond dpb_next_free, or dpb_next_free is
 28570                                  ;   <2 or >dpb_max_clus. Reset it and restart the scan
 28571                                  
 28572                                  ads1:
 28573                                  	;;mov	word [es:bp+1Ch],2 ; MSDOS 3.3
 28574                                  	;mov	word [es:bp+1Dh],2 ; MSDOS 6.0
 28575 00004D87 26C7461D0200                    mov     word [ES:BP+DPB.NEXT_FREE],2
 28576 00004D8D BB0100                          mov     bx,1                    ; Counter next instruction so first
 28577                                                                          ;       cluster examined is 2
 28578                                  
 28579                                  ;   Scanning both forwards and backwards for a free cluster
 28580                                  ;
 28581                                  ;       (BX) = forwards scan pointer
 28582                                  ;       (CX) = clusters remaining to be allocated
 28583                                  ;       (DX) = current last cluster in file
 28584                                  ;       (TOS) = last cluster of file
 28585                                  
 28586                                  FINDFRE:
 28587 00004D90 43                              INC     BX
 28588                                  	;cmp	bx,[es:bp+0Dh]
 28589 00004D91 263B5E0D                        CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 28590 00004D95 7757                    	ja	short ads7	; at end of disk
 28591 00004D97 E8FD06                          call	UNPACK          ; check out this cluster
 28592 00004D9A 722F                            jc	short ads4	; FAT error             [INTERR?]
 28593 00004D9C 75F2                            jnz	short FINDFRE	; not free, keep on truckin
 28594                                  
 28595                                  ;   Have found a free cluster. Chain it to the file
 28596                                  ;
 28597                                  ;       (BX) = found free cluster #
 28598                                  ;       (DX) = current last cluster in file
 28599                                  
 28600                                  	;;mov	[es:bp+1Ch],bx
 28601                                  	;mov	[es:bp+1Dh],bx ; MSDOS 6.0
 28602 00004D9E 26895E1D                        mov	[ES:BP+DPB.NEXT_FREE],bx ; next time start search here
 28603 00004DA2 92                              xchg    ax,dx           ; save (dx) in ax
 28604 00004DA3 BA0100                          mov     dx,1            ; mark this free guy as "1"
 28605 00004DA6 E84207                  	call	PACK            ; set special "temporary" mark
 28606 00004DA9 7220                            jc	short ads4	; FAT error             [INTERR?]
 28607                                  	;;cmp	word [es:bp+1Eh],-1
 28608                                          ;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 28609 00004DAB 26837E1FFF              	CMP	word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 28610 00004DB0 7404                            JZ	short NO_ALLOC	; No
 28611                                  	;;dec	word [es:bp+1Eh]
 28612                                          ;dec	word [es:bp+1Fh] ; MSDOS 6.0
 28613 00004DB2 26FF4E1F                        DEC     word [ES:BP+DPB.FREE_CNT] ; Reduce free count by 1
 28614                                  NO_ALLOC:
 28615 00004DB6 92                              xchg    ax,dx           ; (dx) = current last cluster in file
 28616 00004DB7 87DA                            XCHG    BX,DX
 28617 00004DB9 89D0                            MOV     AX,DX
 28618 00004DBB E82D07                  	call	PACK            ; link free cluster onto file
 28619                                                                  ;  CAVEAT.. On Nul file, first pass stuffs
 28620                                                                  ;    cluster 0 with FIRCLUS value.
 28621 00004DBE 720B                            jc	short ads4	; FAT error [INTERR?]
 28622 00004DC0 93                              xchg    BX,AX           ; (BX) = last one we looked at
 28623 00004DC1 89DA                            mov     dx,bx           ; (dx) = current end of file
 28624 00004DC3 E2CB                            LOOP    FINDFRE         ; alloc more if needed
 28625                                  
 28626                                  ;   We've successfully extended the file. Clean up and exit
 28627                                  ;
 28628                                  ;       (BX) = last cluster in file
 28629                                  
 28630 00004DC5 BAFFFF                          MOV     DX,0FFFFH
 28631 00004DC8 E82007                  	call	PACK            ; mark last cluster EOF
 28632                                  
 28633                                  ;   Note that FAT errors jump here to clean the stack and exit. This saves us
 28634                                  ;   2 whole bytes. Hope its worth it...
 28635                                  ;
 28636                                  ;       'C' set if error
 28637                                  ;       calling (BX) and (CX) pushed on stack
 28638                                  
 28639                                  ads4:   
 28640 00004DCB 5B                      	POP     BX
 28641 00004DCC 59                              POP     CX              ; Don't need this stuff since we're successful
 28642 00004DCD 729D                            jc	short figrec_retn
 28643 00004DCF E8C506                          call	UNPACK          ; Get first cluster allocated for return
 28644                                                                  ; CAVEAT... In nul file case, UNPACKs cluster 0.
 28645 00004DD2 7298                            jc	short figrec_retn
 28646 00004DD4 E83200                  	call	RESTFATBYT      ; Restore correct cluster 0 value
 28647 00004DD7 7293                            jc	short figrec_retn
 28648 00004DD9 87DF                            XCHG    BX,DI           ; (DI) = last cluster in file upon our entry
 28649 00004DDB 09FF                            OR      DI,DI           ; clear 'C'
 28650 00004DDD 758D                    	jnz	short figrec_retn ; we were extending an existing file
 28651                                  
 28652                                  ;   We were doing the first allocation for a new file. Update the SFT cluster
 28653                                  ;   info
 28654                                  dofastk:
 28655                                  	; 20/05/2019
 28656                                  	; MSDOS 6.0
 28657                                  	;push	dx ; * MSDOS 6.0
 28658                                  	;;mov	dl,[es:bp+0]
 28659                                  	;;MOV	DL,[ES:BP+DPB.DRIVE]	; get drive #
 28660                                  	;mov	dl,[es:bp]
 28661                                  
 28662                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28663                                  	; DOSCODE:8DF9h (MSDOS 5.0, MSDOS.SYS)
 28664                                  	
 28665                                  	; 16/12/2022
 28666                                  	;push	dx ; *
 28667                                  	;mov	dl,[ES:BP+DPB.DRIVE] 
 28668                                  	; 15/12/2022
 28669                                  	;mov	dl,[es:bp]
 28670                                  	
 28671                                  	; MSDOS 3.3 & MSDOS 6.0
 28672 00004DDF 06                      	PUSH	ES
 28673 00004DE0 C43E[9E05]              	LES     DI,[THISSFT]
 28674                                  	;mov	[es:di+0Bh],bx
 28675 00004DE4 26895D0B                	MOV     [ES:DI+SF_ENTRY.sf_firclus],BX
 28676                                  	;;mov	[es:di+1Bh],bx ; MSDOS 3.3
 28677                                  	;mov	[es:di+35h],bx ; MSDOS 6.0
 28678 00004DE8 26895D35                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],BX
 28679 00004DEC 07                      	POP	ES
 28680                                  	;retn
 28681                                  
 28682                                  	;pop	dx ; * MSDOS 6.0
 28683                                  
 28684                                  	; 16/12/2022
 28685                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28686                                  	;pop	dx ; *
 28687                                  
 28688 00004DED C3                      	retn	
 28689                                  
 28690                                  ;** we're at the end of the disk, and not satisfied. See if we've scanned ALL
 28691                                  ;   of the disk...
 28692                                  
 28693                                  ads7:   
 28694 00004DEE 26837E1D02              	cmp	word [ES:BP+DPB.NEXT_FREE],2
 28695 00004DF3 7592                    	jnz	short ads1	; start scan from front of disk
 28696                                  
 28697                                  ;   Sorry, we've gone over the whole disk, with insufficient luck. Lets give
 28698                                  ;   the space back to the free list and tell the caller how much he could have
 28699                                  ;   had.  We have to make sure we remove the "special mark" we put on the last
 28700                                  ;   cluster we were able to allocate, so it doesn't become orphaned.
 28701                                  ;
 28702                                  ;       (CX) = clusters remaining to be allocated
 28703                                  ;       (TOS) = last cluster of file (before call to ALLOCATE)
 28704                                  ;       (TOS+1) = # of clusters wanted to allocate
 28705                                  
 28706 00004DF5 5B                              POP     BX              ; (BX) = last cluster of file
 28707 00004DF6 BAFFFF                          MOV     DX,0FFFFH
 28708 00004DF9 E81F00                  	call	RELBLKS         ; give back any clusters just alloced
 28709 00004DFC 58                              POP     AX              ; No. of clusters requested
 28710                                                                  ; Don't "retc". We are setting Carry anyway,
 28711                                                                  ;   Alloc failed, so proceed with return CX
 28712                                                                  ;   setup.
 28713 00004DFD 29C8                            SUB     AX,CX           ; AX=No. of clusters allocated
 28714 00004DFF E80700                  	call	RESTFATBYT      ; Don't "retc". We are setting Carry anyway,
 28715                                                                  ;   Alloc failed.
 28716                                  Disk_Full_Return:               ;label added for magic patch 8-6-92 scottq
 28717                                          ; MSDOS 6.0
 28718 00004E02 C606[0B06]01            	MOV	byte [DISK_FULL],1 ;MS. indicating disk full
 28719 00004E07 F9                              STC
 28720 00004E08 C3                              retn
 28721                                  
 28722                                  ;-----------------------------------------------------------------------
 28723                                  ;
 28724                                  ; Procedure Name : RESTFATBYT
 28725                                  ;
 28726                                  ; SEE ALLOCATE CAVEAT
 28727                                  ;       Carry set if error (currently user FAILed to I 24)
 28728                                  ;-----------------------------------------------------------------------
 28729                                  
 28730                                  RESTFATBYT:
 28731 00004E09 53                              PUSH    BX
 28732 00004E0A 52                              PUSH    DX
 28733 00004E0B 57                              PUSH    DI
 28734 00004E0C 31DB                            XOR     BX,BX
 28735 00004E0E 8B16[9605]                      MOV     DX,[FATBYT]
 28736 00004E12 E8D606                  	call	PACK
 28737 00004E15 5F                              POP     DI
 28738 00004E16 5A                              POP     DX
 28739 00004E17 5B                              POP     BX
 28740                                  ; 16/12/2022
 28741                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28742                                  ;RELEASE_flush:
 28743 00004E18 C3                      	retn
 28744                                  
 28745                                  ;Break	<RELEASE -- DEASSIGN DISK SPACE>
 28746                                  ;---------------------------------------------------------------------------
 28747                                  ;
 28748                                  ; Procedure Name : RELEASE
 28749                                  ;
 28750                                  ; Inputs:
 28751                                  ;       BX = Cluster in file
 28752                                  ;       ES:BP = Base of drive parameters
 28753                                  ; Function:
 28754                                  ;       Frees cluster chain starting with [BX]
 28755                                  ;       Carry set if error (currently user FAILed to I 24)
 28756                                  ; AX,BX,DX,DI all destroyed. Other registers unchanged.
 28757                                  ;
 28758                                  ;-----------------------------------------------------------------------------
 28759                                  
 28760                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28761                                  	; 20/05/2019 - Retro DOS v4.0
 28762                                  RELEASE:
 28763 00004E19 31D2                            XOR     DX,DX
 28764                                  
 28765                                  	;entry	RELBLKS
 28766                                  RELBLKS:
 28767                                  
 28768                                  ;   Enter here with DX=0FFFFH to put an end-of-file mark in the first cluster
 28769                                  ;   and free the rest in the chain.
 28770                                  
 28771 00004E1B E87906                  	call	UNPACK
 28772 00004E1E 7224                    	jc	short RELEASE_flush
 28773 00004E20 7422                    	jz	short RELEASE_flush
 28774 00004E22 89F8                            MOV     AX,DI
 28775 00004E24 52                              PUSH    DX
 28776 00004E25 E8C306                  	call	PACK
 28777 00004E28 5A                              POP     DX
 28778 00004E29 7219                    	jc	short RELEASE_flush
 28779 00004E2B 09D2                            OR      DX,DX
 28780 00004E2D 750B                            JNZ	short NO_DEALLOC	; Was putting EOF mark
 28781                                  	;;cmp	word [es:bp+1Eh],-1 ; MSDOS 3.3
 28782                                  	;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 28783 00004E2F 26837E1FFF              	CMP     word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 28784 00004E34 7404                            JZ	short NO_DEALLOC	; No
 28785 00004E36 26FF461F                        INC	word [ES:BP+DPB.FREE_CNT] ; Increase free count by 1
 28786                                  NO_DEALLOC:
 28787 00004E3A 89C3                            MOV     BX,AX
 28788 00004E3C 48                              dec     ax              ; check for "1"
 28789 00004E3D 7405                    	jz	short RELEASE_flush	; is last cluster of incomplete chain
 28790 00004E3F E83E06                  	call	IsEOF
 28791 00004E42 72D5                            JB	short RELEASE	; Carry clear if JMP not taken
 28792                                  
 28793                                  	; 16/12/2022
 28794                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28795                                  ;%if 0
 28796                                  RELEASE_flush:
 28797                                  	; MSDOS 6.0
 28798 00004E44 268A4600                	mov	al,[es:bp]
 28799                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 28800 00004E48 56                      	push	si		; FLUSHBUF may trash these and we guarantee
 28801 00004E49 51                      	push	cx		;  them to be preserved.
 28802 00004E4A 06                      	push	es
 28803 00004E4B 55                      	push	bp
 28804 00004E4C E8570B                  	call	FLUSHBUF	; commit buffers for this drive
 28805 00004E4F 5D                      	pop	bp
 28806 00004E50 07                      	pop	es
 28807 00004E51 59                      	pop	cx
 28808 00004E52 5E                      	pop	si
 28809                                  ;%endif
 28810                                  RET12:
 28811 00004E53 C3                      	retn
 28812                                  
 28813                                  ;Break	<GETEOF -- Find the end of a file>
 28814                                  ;------------------------------------------------------------------------
 28815                                  ;
 28816                                  ; Procedure Name : GETEOF
 28817                                  ;
 28818                                  ; Inputs:
 28819                                  ;       ES:BP Points to DPB
 28820                                  ;       BX = Cluster in a file
 28821                                  ;       DS = CS
 28822                                  ; Outputs:
 28823                                  ;       BX = Last cluster in the file
 28824                                  ;       Carry set if error (currently user FAILed to I 24)
 28825                                  ; DI destroyed. No other registers affected.
 28826                                  ;
 28827                                  ;--------------------------------------------------------------------------
 28828                                  
 28829                                  GETEOF:
 28830 00004E54 E84006                  	call	UNPACK
 28831 00004E57 72FA                            jc	short RET12
 28832 00004E59 53                              PUSH    BX
 28833 00004E5A 89FB                            MOV     BX,DI
 28834 00004E5C E82106                  	call	IsEOF
 28835 00004E5F 5B                              POP     BX
 28836 00004E60 73F1                            JAE     short RET12
 28837 00004E62 89FB                            MOV     BX,DI
 28838 00004E64 EBEE                            JMP     short GETEOF
 28839                                  
 28840                                  ;============================================================================
 28841                                  ; FCB.ASM, MSDOS 6.0, 1991
 28842                                  ;============================================================================
 28843                                  ; 30/07/2018 - Retro DOS v3.0
 28844                                  ; 20/05/2019 - Retro DOS v4.0
 28845                                  
 28846                                  ;	TITLE	FCB - FCB parse calls for MSDOS
 28847                                  ;	NAME	FCB
 28848                                  
 28849                                  ;**	FCB.ASM - Low level routines for parsing names into FCBs and analyzing
 28850                                  ;		  filename characters
 28851                                  ;
 28852                                  ;	MakeFcb
 28853                                  ;	NameTrans
 28854                                  ;	PATHCHRCMP
 28855                                  ;	GetLet
 28856                                  ;	UCase
 28857                                  ;	GetLet3
 28858                                  ;	GetCharType
 28859                                  ;	TESTKANJ
 28860                                  ;	NORMSCAN
 28861                                  ;	DELIM
 28862                                  ;
 28863                                  ;	Revision history:
 28864                                  ;
 28865                                  ;		A000  version 4.00  Jan. 1988
 28866                                  ;	
 28867                                  ;	M048 - access FILE_UCASE_TAB using DS rather than SS.
 28868                                  
 28869                                  TableLook	EQU	-1
 28870                                  
 28871                                  SCANSEPARATOR	EQU	1
 28872                                  DRVBIT		EQU	2
 28873                                  NAMBIT		EQU	4
 28874                                  EXTBIT		EQU	8
 28875                                  
 28876                                  ;----------------------------------------------------------------------------
 28877                                  ;
 28878                                  ; Procedure : MakeFcb
 28879                                  ;
 28880                                  ;----------------------------------------------------------------------------
 28881                                  
 28882                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28883                                  	; DOSCODE:8E77h (MSDOS 5.0, MSDOS.SYS)
 28884                                  MAKEFCB:
 28885                                  ;hkn; SS override
 28886 00004E66 36C606[4E03]00          	MOV	BYTE [SS:SpaceFlag],0
 28887 00004E6C 30D2                    	XOR	DL,DL		; Flag--not ambiguous file name
 28888                                  	;test	al,2
 28889 00004E6E A802                    	test	AL,DRVBIT	; Use current drive field if default?
 28890 00004E70 7504                    	JNZ	short DEFDRV
 28891 00004E72 26C60500                	MOV	BYTE [ES:DI],0	; No - use default drive
 28892                                  DEFDRV:
 28893 00004E76 47                      	INC	DI
 28894 00004E77 B90800                  	MOV	CX,8
 28895                                  	;test	al,4
 28896 00004E7A A804                    	test	AL,NAMBIT	; Use current name fields as default?
 28897 00004E7C 93                      	XCHG	AX,BX		; Save bits in BX
 28898 00004E7D B020                    	MOV	AL," "
 28899 00004E7F 7404                    	JZ	short FILLB	; If not, go fill with blanks
 28900 00004E81 01CF                    	ADD	DI,CX
 28901 00004E83 31C9                    	XOR	CX,CX		; Don't fill any
 28902                                  FILLB:
 28903 00004E85 F3AA                    	REP	STOSB
 28904 00004E87 B103                    	MOV	CL,3
 28905 00004E89 F6C308                  	test	BL,EXTBIT	; Use current extension as default
 28906 00004E8C 7404                    	JZ	short FILLB2
 28907 00004E8E 01CF                    	ADD	DI,CX
 28908 00004E90 31C9                    	XOR	CX,CX
 28909                                  FILLB2:
 28910 00004E92 F3AA                    	REP	STOSB
 28911 00004E94 91                      	XCHG	AX,CX		; Put zero in AX
 28912 00004E95 AB                      	STOSW
 28913 00004E96 AB                      	STOSW			; Initialize two words after to zero
 28914 00004E97 83EF10                  	SUB	DI,16		; Point back at start
 28915                                  	;test	bl,1
 28916 00004E9A F6C301                  	test	BL,SCANSEPARATOR; Scan off separators if not zero
 28917 00004E9D 7409                    	JZ	short SKPSPC
 28918 00004E9F E88800                  	CALL	SCANB		; Peel off blanks and tabs
 28919 00004EA2 E82201                  	CALL	DELIM		; Is it a one-time-only delimiter?
 28920 00004EA5 7504                    	JNZ	short NOSCAN
 28921 00004EA7 46                      	INC	SI		; Skip over the delimiter
 28922                                  SKPSPC:
 28923 00004EA8 E87F00                  	CALL	SCANB		; Always kill preceding blanks and tabs
 28924                                  NOSCAN:
 28925 00004EAB E8F000                  	CALL	GETLET
 28926 00004EAE 761E                    	JBE	short NODRV	; Quit if termination character
 28927 00004EB0 803C3A                  	CMP	BYTE [SI],":"	; Check for potential drive specifier
 28928 00004EB3 7519                    	JNZ	short NODRV
 28929 00004EB5 46                      	INC	SI		; Skip over colon
 28930 00004EB6 2C40                    	SUB	AL,"@"          ; Convert drive letter to drive number (A=1)
 28931 00004EB8 760F                    	JBE	short BADDRV	; Drive letter out of range
 28932                                  
 28933 00004EBA 50                      	PUSH	AX
 28934 00004EBB E8161B                  	call	GetVisDrv
 28935 00004EBE 58                      	POP	AX
 28936 00004EBF 730A                    	JNC	short HAVDRV
 28937                                  
 28938                                  	; 20/05/2019 - Retro DOS v4.0
 28939                                  	; MSDOS 6.0
 28940                                  ;hkn; SS override
 28941 00004EC1 36803E[1006]1A          	CMP	byte [SS:DrvErr],error_not_DOS_disk ; 1Ah
 28942                                  					; if not FAT drive ;AN000;
 28943 00004EC7 7402                    	JZ	short HAVDRV		; assume ok	   ;AN000;
 28944                                  BADDRV:
 28945 00004EC9 B2FF                    	MOV	DL,-1
 28946                                  HAVDRV:
 28947 00004ECB AA                      	STOSB			; Put drive specifier in first byte
 28948 00004ECC 46                      	INC	SI
 28949 00004ECD 4F                      	DEC	DI		; Counteract next two instructions
 28950                                  NODRV:
 28951 00004ECE 4E                      	DEC	SI		; Back up
 28952 00004ECF 47                      	INC	DI		; Skip drive byte
 28953                                  
 28954                                  	;entry	NORMSCAN
 28955                                  NORMSCAN:
 28956 00004ED0 B90800                  	MOV	CX,8
 28957 00004ED3 E82200                  	CALL	GETWORD 	; Get 8-letter file name
 28958 00004ED6 803C2E                  	CMP	BYTE [SI],"."
 28959 00004ED9 7510                    	JNZ	short NODOT
 28960 00004EDB 46                      	INC	SI		; Skip over dot if present
 28961                                  
 28962                                  	; 24/09/2023
 28963                                  	;mov	cx,3
 28964 00004EDC B103                    	mov	cl,3	; ch=0
 28965                                  
 28966                                  	; MSDOS 6.0
 28967                                  ;hkn; SS override
 28968                                  	;TEST	word [SS:DOS34_FLAG],DBCS_VOLID2 ; 100h ;AN000;
 28969                                  	; 10/06/2019
 28970 00004EDE 36F606[1206]01          	test	byte [SS:DOS34_FLAG+1],(DBCS_VOLID2>>8) ; 1
 28971 00004EE4 7402                    	JZ	short VOLOK				;AN000;
 28972 00004EE6 A4                      	MOVSB			; 2nd byte of DBCS	;AN000;
 28973                                  	; 24/09/2023
 28974                                  	;MOV	CX,2					;AN000;
 28975 00004EE7 49                      	dec	cx  ; cx=2
 28976                                  	;JMP	SHORT contvol				;AN000;
 28977                                  VOLOK:
 28978                                  	;MOV	CX,3		; Get 3-letter extension
 28979                                  contvol:
 28980 00004EE8 E81300                  	CALL	MUSTGETWORD
 28981                                  NODOT:
 28982 00004EEB 88D0                    	MOV	AL,DL
 28983                                  
 28984                                  	; MSDOS 6.0
 28985                                  	;and	word [ss:DOS34_FLAG],0FEFFh
 28986                                  	; 18/12/2022
 28987 00004EED 368026[1206]FE          	and	byte [ss:DOS34_FLAG+1],0FEh ; (~DBCS_VOLID2)>>8
 28988                                  	;and	word [ss:DOS34_FLAG],~DBCS_VOLID2 ; ### BUG FIX ###
 28989                                  
 28990 00004EF3 C3                      	retn
 28991                                  
 28992                                  NONAM:
 28993 00004EF4 01CF                    	ADD	DI,CX
 28994 00004EF6 4E                      	DEC	SI
 28995 00004EF7 C3                      	retn
 28996                                  
 28997                                  GETWORD:
 28998 00004EF8 E8A300                  	CALL	GETLET		
 28999 00004EFB 76F7                    	JBE	short NONAM	; Exit if invalid character
 29000 00004EFD 4E                      	DEC	SI
 29001                                  
 29002                                  ;	UGH!!! Horrible bug here that should be fixed at some point:
 29003                                  ;	If the name we are scanning is longer than CX, we keep on reading!
 29004                                  
 29005                                  MUSTGETWORD:
 29006 00004EFE E89D00                  	CALL	GETLET
 29007                                  
 29008                                  ;	If spaceFlag is set then we allow spaces in a pathname
 29009                                  
 29010                                  ;IF NOT TABLELOOK
 29011                                  ;	JB	short FILLNAM  ; MSDOS 3.3
 29012                                  ;ENDIF
 29013 00004F01 750C                    	JNZ	short MustCheckCX
 29014                                  
 29015                                  ;hkn; SS override
 29016 00004F03 36F606[4E03]FF          	test	BYTE [SS:SpaceFlag],0FFh
 29017 00004F09 7419                    	JZ	short FILLNAM
 29018 00004F0B 3C20                    	CMP	AL," "
 29019 00004F0D 7515                    	JNZ	short FILLNAM
 29020                                  
 29021                                  MustCheckCX:
 29022 00004F0F E3ED                    	JCXZ	MUSTGETWORD
 29023 00004F11 49                      	DEC	CX
 29024 00004F12 3C2A                    	CMP	AL,"*"          ; Check for ambiguous file specifier
 29025 00004F14 7504                    	JNZ	short NOSTAR
 29026 00004F16 B03F                    	MOV	AL,"?"
 29027 00004F18 F3AA                    	REP	STOSB
 29028                                  NOSTAR:
 29029 00004F1A AA                      	STOSB
 29030 00004F1B 3C3F                    	CMP	AL,"?"
 29031 00004F1D 75DF                    	JNZ	short MUSTGETWORD
 29032 00004F1F 80CA01                  	OR	DL,1		; Flag ambiguous file name
 29033 00004F22 EBDA                    	JMP	short MUSTGETWORD
 29034                                  FILLNAM:
 29035 00004F24 B020                    	MOV	AL," "
 29036 00004F26 F3AA                    	REP	STOSB
 29037 00004F28 4E                      	DEC	SI
 29038 00004F29 C3                      	retn
 29039                                  
 29040                                  SCANB:
 29041 00004F2A AC                      	LODSB
 29042 00004F2B E8A100                  	CALL	SPCHK
 29043 00004F2E 74FA                    	JZ	short SCANB
 29044 00004F30 4E                      	DEC	SI
 29045                                  scanb_retn:
 29046 00004F31 C3                      	retn
 29047                                  
 29048                                  ;----------------------------------------------------------------------------
 29049                                  ;
 29050                                  ; Procedure Name : NameTrans
 29051                                  ;
 29052                                  ; NameTrans is used by FindPath to scan off an element of a path. We must
 29053                                  ; allow spaces in pathnames
 29054                                  ;
 29055                                  ;   Inputs:	DS:SI points to start of path element
 29056                                  ;   Outputs:	Name1 has unpacked name, uppercased
 29057                                  ;		ES = DOSGroup
 29058                                  ;		DS:SI advanced after name
 29059                                  ;   Registers modified: DI,AX,DX,CX
 29060                                  ;
 29061                                  ;----------------------------------------------------------------------------
 29062                                  
 29063                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29064                                  	; 20/05/2019 - Retro DOS v4.0
 29065                                  NameTrans:
 29066                                  ;hkn; SS override
 29067 00004F32 36C606[4E03]01          	MOV	BYTE [SS:SpaceFlag],1
 29068 00004F38 16                      	push	ss
 29069 00004F39 07                      	pop	es
 29070                                  
 29071                                  ;hkn; NAME1 is in DOSDATA
 29072 00004F3A BF[4B05]                	MOV	DI,NAME1
 29073 00004F3D 57                      	PUSH	DI
 29074 00004F3E B82020                  	MOV	AX,'  '
 29075 00004F41 B90500                  	MOV	CX,5
 29076 00004F44 AA                      	STOSB
 29077 00004F45 F3AB                    	REP	STOSW		; Fill "FCB" at NAME1 with spaces
 29078 00004F47 30C0                    	XOR	AL,AL		; Set stuff for NORMSCAN
 29079 00004F49 88C2                    	MOV	DL,AL
 29080 00004F4B AA                      	STOSB
 29081 00004F4C 5F                      	POP	DI
 29082                                  
 29083 00004F4D E880FF                  	CALL	NORMSCAN
 29084                                  
 29085                                  ;hkn; SS override for NAME1
 29086 00004F50 36803E[4B05]E5          	CMP	byte [SS:NAME1],0E5H
 29087 00004F56 75D9                    	jnz	short scanb_retn
 29088 00004F58 36C606[4B05]05          	MOV	byte [SS:NAME1],5 ; Magic name translation
 29089 00004F5E C3                      	retn
 29090                                  
 29091                                  ;Break	<GETLET, DELIM -- CHECK CHARACTERS AND CONVERT>
 29092                                  ;============================================================================
 29093                                  
 29094                                  ; 20/05/2019 - Retro DOS v4.0
 29095                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 29096                                  
 29097                                  ;If TableLook
 29098                                  
 29099                                  ;hkn; Table	SEGMENT
 29100                                  ;	PUBLIC	CharType
 29101                                  ;----------------------------------------------------------------------------
 29102                                  
 29103                                  ; Character type table for file name scanning
 29104                                  ; Table provides a mapping of characters to validity bits.
 29105                                  ; Four bits are provided for each character. Values 7Dh and above
 29106                                  ; have all bits set, so that part of the table is chopped off, and
 29107                                  ; the translation routine is responsible for screening these values.
 29108                                  ; The bit values are defined in DOSSYM.INC
 29109                                  
 29110                                  ;	      ; ^A and NUL
 29111                                  ;CharType:
 29112                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29113                                  ;	      ; ^C and ^B
 29114                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29115                                  ;	      ; ^E and ^D
 29116                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29117                                  ;	      ; ^G and ^F
 29118                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29119                                  ;	      ; TAB and BS
 29120                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM+FSPCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29121                                  ;	      ; ^K and ^J
 29122                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29123                                  ;	      ; ^M and ^L
 29124                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29125                                  ;	      ; ^O and ^N
 29126                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29127                                  ;	      ; ^Q and ^P
 29128                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29129                                  ;	      ; ^S and ^R
 29130                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29131                                  ;	      ; ^U and ^T
 29132                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29133                                  ;	      ; ^W and ^V
 29134                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29135                                  ;	      ; ^Y and ^X
 29136                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29137                                  ;	      ; ESC and ^Z
 29138                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29139                                  ;	      ; ^] and ^;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29141                                  ;	      ; ^_ and ^^
 29142                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29143                                  ;	      ; ! and SPACE
 29144                                  ;	 db   LOW (NOT FCHK+FDELIM+FSPCHK)
 29145                                  ;	      ; # and "
 29146                                  ;	 db   LOW (NOT FFCB+FCHK)
 29147                                  ;	      ; $ - )
 29148                                  ;	 db   3 dup (0FFh)
 29149                                  ;	      ; + and *
 29150                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR 0Fh
 29151                                  ;	      ; - and '
 29152                                  ;	 db   NOT (FFCB+FCHK+FDELIM)
 29153                                  ;	      ; / and .
 29154                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FCHK) AND 0Fh
 29155                                  ;	      ; 0 - 9
 29156                                  ;	 db   5 dup (0FFh)
 29157                                  ;	      ; ; and :
 29158                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 29159                                  ;	      ; = and <
 29160                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 29161                                  ;	      ; ? and >
 29162                                  ;	 db   NOT FFCB+FCHK+FDELIM
 29163                                  ;	      ; A - Z
 29164                                  ;	 db   13 dup (0FFh)
 29165                                  ;	      ; \ and [
 29166                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR 0Fh
 29167                                  ;	      ; ^ and ]
 29168                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29169                                  ;	      ; _ - {
 29170                                  ;	 db   15 dup (0FFh)
 29171                                  ;	      ; } and |
 29172                                  ;	 db   NOT FFCB+FCHK+FDELIM
 29173                                  
 29174                                  ;CharType_last equ ($ - CharType) * 2	; This is the value of the last
 29175                                  ;					; character in the table
 29176                                  
 29177                                  ;FCHK	equ 1		; normal name char, no chks needed
 29178                                  ;FDELIM	equ 2		; is a delimiter
 29179                                  ;FSPCHK	equ 4		; set if character is not a space or equivalent
 29180                                  ;FFCB	equ 8		; is valid in an FCB
 29181                                  
 29182                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 29183                                  ;----------------------------------------------------------------------------
 29184                                  ; DOSCODE:8F76h (MSDOS 5.0, MSDOS.SYS)
 29185                                  
 29186                                  CharType: ; 63 bytes
 29187 00004F5F 6666666606666666                db  66h, 66h, 66h, 66h, 06h, 66h, 66h, 66h ; 0-7
 29188 00004F67 6666666666666666        	db  66h, 66h, 66h, 66h, 66h, 66h, 66h, 66h ; 8-15
 29189 00004F6F F8F6FFFFFF4FF46E        	db 0F8h,0F6h,0FFh,0FFh,0FFh, 4Fh,0F4h, 6Eh ; 16-23
 29190 00004F77 FFFFFFFFFF4444F4        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 44h, 44h,0F4h ; 24-31
 29191 00004F7F FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 32-39
 29192 00004F87 FFFFFFFFFF6F66FF        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 6Fh, 66h,0FFh ; 40-47
 29193 00004F8F FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 48-55
 29194 00004F97 FFFFFFFFFFFFF4          	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0F4h	   ; 56-62
 29195                                  
 29196                                  CharType_last equ ($ - CharType) * 2
 29197                                  
 29198                                  ; Offset 12CAh of IBMDOS.COM (MSDOS 3.3), 1987
 29199                                  ;----------------------------------------------------------------------------
 29200                                  ;CharType:
 29201                                  ;       db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29202                                  ;	db 0F6h,0F0h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29203                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29204                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29205                                  ;	db 0F8h,0FFh,0F6h,0FFh,0FFh,0FFh,0FFh,0FFh
 29206                                  ;	db 0FFh,0FFh,0FFh,0F4h,0F4h,0FFh,0FEh,0F6h
 29207                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29208                                  ;	db 0FFh,0FFh,0F4h,0F4h,0F4h,0F4h,0F4h,0FFh
 29209                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29210                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29211                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29212                                  ;	db 0FFh,0FFh,0FFh,0F6h,0F6h,0F6h,0FFh,0FFh
 29213                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29214                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29215                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29216                                  ;	db 0FFh,0FFh,0FFh,0FFh,0F4h,0FFh,0FFh,0FFh
 29217                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29218                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29219                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29220                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29221                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29222                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29223                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29224                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29225                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29226                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29227                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29228                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29229                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29230                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29231                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29232                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29233                                  
 29234                                  ;hkn; Table	ENDS
 29235                                  
 29236                                  ;ENDIF
 29237                                  
 29238                                  ; 20/05/2019 - Retro DOS v4.0
 29239                                  ; DOSCODE:9011h (MSDOS 6.21, MSDOS.SYS)
 29240                                  
 29241                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29242                                  ; DOSCODE:8FB5h (MSDOS 5.0, MSDOS.SYS)
 29243                                  
 29244                                  ;----------------------------------------------------------------------------
 29245                                  ;
 29246                                  ; Procedure Names : GetLet, UCase, GetLet3
 29247                                  ;
 29248                                  ; These routines take a character, convert it to upper case, and check
 29249                                  ; for delimiters.  Three different entry points:
 29250                                  ;	GetLet -  DS:[SI] = character to convert
 29251                                  ;	UCase  -  AL = character to convert
 29252                                  ;	GetLet3 - AL = character
 29253                                  ;		  [BX] = translation table to use
 29254                                  ;
 29255                                  ;	Exit (in all cases) : AL = upper case character
 29256                                  ;			      CY set if char is control char other than TAB
 29257                                  ;			      ZF set if char is a delimiter
 29258                                  ;	Uses : AX, flags
 29259                                  ;
 29260                                  ; NOTE: This routine exists in a fast table lookup version, and a slow
 29261                                  ; inline version.  Return with carry set is only possible in the inline
 29262                                  ; version. The table lookup version is the one in use.
 29263                                  ;
 29264                                  ;----------------------------------------------------------------------------
 29265                                  
 29266                                  ; This entry point has character at [SI]
 29267                                  
 29268                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5517h
 29269                                  GETLET:	
 29270 00004F9E AC                      	LODSB
 29271                                  
 29272                                  ; This entry point has character in AL
 29273                                  
 29274                                  	;entry	UCase
 29275                                  UCase:	
 29276                                  	; 09/08/2018
 29277                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5518h
 29278                                  _UCase:
 29279 00004F9F 53                      	PUSH	BX
 29280 00004FA0 BB[310B]                	MOV	BX,FILE_UCASE_TAB+2
 29281                                  
 29282                                  ; Convert the character in AL to upper case
 29283                                  
 29284                                  gl_0:
 29285 00004FA3 3C61                    	CMP	AL,"a"
 29286 00004FA5 7214                    	JB	short gl_2	; Already upper case, go check type
 29287 00004FA7 3C7A                    	CMP	AL,"z"
 29288 00004FA9 7702                    	JA	short gl_1
 29289 00004FAB 2C20                    	SUB	AL,20H		; Convert to upper case
 29290                                  
 29291                                  ; Map European character to upper case
 29292                                  
 29293                                  gl_1:
 29294 00004FAD 3C80                    	CMP	AL,80H
 29295 00004FAF 720A                    	JB	short gl_2	; Not EuroChar, go check type
 29296 00004FB1 2C80                    	SUB	AL,80H		; translate to upper case with this index
 29297                                  
 29298                                  	; M048 - Start 
 29299                                  	; Lantastic call Ucase thru int 2f without setting SS to DOSDATA.
 29300                                  	; So we shall set up DS and to access FILE_UCASE_TAB in BX and also 
 29301                                  	; preserve it.
 29302                                  
 29303                                  	; 09/08/2018 - Retro DOS v3.0
 29304                                  	; MSDOS 3.3
 29305                                  	;;XLAT	BYTE [CS:BX]	; ds as file_ucase_tab is in DOSDATA
 29306                                  	;CS	XLAT
 29307                                  
 29308                                  	; 20/05/2019 - Retro DOS v4.0
 29309                                  
 29310                                  	; MSDOS 6.0
 29311 00004FB3 1E                      	push	ds
 29312                                  	;getdseg <ds>
 29313 00004FB4 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29314 00004FB9 D7                      	XLAT			; ds as file_ucase_tab is in DOSDATA
 29315 00004FBA 1F                      	pop	ds
 29316                                  
 29317                                  	; M048 - End
 29318                                  
 29319                                  ; Now check the type
 29320                                  
 29321                                  ;If TableLook
 29322                                  gl_2:
 29323                                  	; 20/05/2019 - Retro DOS v4.0
 29324 00004FBB 50                      	PUSH	AX
 29325                                  
 29326                                  	; MSDOS 3.3
 29327                                  	;mov	bx,CharType
 29328                                  	;; 09/08/2018
 29329                                  	;;xlat	byte [cs:bx]
 29330                                  	;cs	xlat	
 29331                                  	
 29332                                  	; MSDOS 6.0
 29333 00004FBC E81800                  	CALL	GetCharType	; returns type flags in AL
 29334                                  	
 29335                                  	;test	al,1	
 29336 00004FBF A801                    	TEST	AL,FCHK 	; test for normal character
 29337 00004FC1 58                      	POP	AX
 29338                                  
 29339 00004FC2 5B                      	POP	BX
 29340 00004FC3 C3                      	RETN
 29341                                  
 29342                                  ; This entry has character in AL and lookup table in BX
 29343                                  
 29344                                  	; MSDOS 6.0
 29345                                  ;	;entry GetLet3
 29346                                  GETLET3: ; 10/08/2018
 29347 00004FC4 53                      	PUSH	BX
 29348 00004FC5 EBDC                    	JMP	short gl_0
 29349                                  ;ELSE
 29350                                  ;
 29351                                  ;gl_2:
 29352                                  ;	POP	BX
 29353                                  ;	CMP	AL,"."
 29354                                  ;	retz
 29355                                  ;	CMP	AL,'"'
 29356                                  ;	retz
 29357                                  ;	CALL	PATHCHRCMP
 29358                                  ;	retz
 29359                                  ;	CMP	AL,"["
 29360                                  ;	retz
 29361                                  ;	CMP	AL,"]"
 29362                                  ;	retz
 29363                                  ;ENDIF
 29364                                  
 29365                                  ;---------------------------------------------------------------------
 29366                                  ;
 29367                                  ; DELIM - check if character is a delimiter
 29368                                  ;	Entry : AX = character to check
 29369                                  ;	Exit  : ZF set if character is not a delimiter
 29370                                  ;	Uses  : Flags
 29371                                  ;
 29372                                  ;--------------------------------------------------------------------
 29373                                  
 29374                                  	;entry	DELIM
 29375                                  DELIM:
 29376                                  ;IF TableLook
 29377                                  	; 20/05/2019 - Retro DOS v4.0
 29378 00004FC7 50                      	PUSH	AX
 29379                                  
 29380                                  	; MSDOS 3.3
 29381                                  	;push	bx
 29382                                  	;mov	bx,CharType
 29383                                  	;;09/08/2018
 29384                                  	;;xlat	byte [cs:bx]
 29385                                  	;cs	xlat
 29386                                  	;pop	bx
 29387                                  
 29388                                  	; MSDOS 6.0
 29389 00004FC8 E80C00                  	CALL	GetCharType
 29390                                  	
 29391                                  	;test	al,2
 29392 00004FCB A802                    	TEST	AL,FDELIM
 29393 00004FCD 58                      	POP	AX
 29394 00004FCE C3                      	RETN
 29395                                  ;ELSE
 29396                                  ;	CMP	AL,":"
 29397                                  ;	retz
 29398                                  ;
 29399                                  ;	CMP	AL,"<"
 29400                                  ;	retz
 29401                                  ;	CMP	AL,"|"
 29402                                  ;	retz
 29403                                  ;	CMP	AL,">"
 29404                                  ;	retz
 29405                                  ;
 29406                                  ;	CMP	AL,"+"
 29407                                  ;	retz
 29408                                  ;	CMP	AL,"="
 29409                                  ;	retz
 29410                                  ;	CMP	AL,";"
 29411                                  ;	retz
 29412                                  ;	CMP	AL,","
 29413                                  ;	retz
 29414                                  ;ENDIF
 29415                                  
 29416                                  ;-------------------------------------------------------------------------
 29417                                  ;
 29418                                  ;  SPCHK - checks to see if a character is a space or equivalent
 29419                                  ;	Entry : AL = character to check
 29420                                  ;	Exit  : ZF set if character is a space
 29421                                  ;	Uses  : flags
 29422                                  ;
 29423                                  ;-------------------------------------------------------------------------
 29424                                  
 29425                                  	;entry SPCHK
 29426                                  SPCHK:
 29427                                  ;IF TableLook
 29428                                  	; 20/05/2019 - Retro DOS v4.0
 29429 00004FCF 50                      	PUSH	AX
 29430                                  
 29431                                  	; MSDOS 3.3
 29432                                  	;push	bx
 29433                                  	;mov	bx,CharType
 29434                                  	;; 09/08/2018
 29435                                  	;;xlat	byte [cs:bx]
 29436                                  	;cs	xlat
 29437                                  	;pop	bx
 29438                                  
 29439                                  	; MSDOS 6.0
 29440 00004FD0 E80400                  	CALL	GetCharType
 29441                                  	
 29442                                  	;test	al,4
 29443 00004FD3 A804                    	TEST	AL,FSPCHK
 29444 00004FD5 58                      	POP	AX
 29445 00004FD6 C3                      	RETN
 29446                                  ;ELSE
 29447                                  ;	CMP	AL,9		; Filter out tabs too
 29448                                  ;	retz
 29449                                  ;; WARNING! " " MUST be the last compare
 29450                                  ;	CMP	AL," "
 29451                                  ;	return
 29452                                  ;ENDIF
 29453                                  
 29454                                  ;-------------------------------------------------------------------------
 29455                                  ;
 29456                                  ;  GetCharType - return flag bits indicating character type
 29457                                  ;	Bits are defined in DOSSYM.INC. Uses lookup table
 29458                                  ;	defined above at label CharType.
 29459                                  ;
 29460                                  ;	Entry : AL = character to return type flags for
 29461                                  ;	Exit  : AL = type flags
 29462                                  ;	Uses  : AL, flags
 29463                                  ;
 29464                                  ;-------------------------------------------------------------------------
 29465                                  
 29466                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29467                                  
 29468                                  	; 20/05/2019 - Retro DOS v4.0
 29469                                  	; MSDOS 6.0
 29470                                  GetCharType:
 29471                                  	;cmp	al,7Eh
 29472 00004FD7 3C7E                    	cmp	al,CharType_last 	; beyond end of table?
 29473 00004FD9 7316                    	jae	short gct_90		; return standard value
 29474                                  
 29475 00004FDB 53                      	push	bx
 29476 00004FDC BB[5F4F]                	mov	bx,CharType		; load lookup table
 29477 00004FDF D0E8                    	shr	al,1			; adjust for half-byte table entry size
 29478                                  	;xlat	cs:[bx] 		; get flags
 29479 00004FE1 2ED7                    	cs	xlat	
 29480 00004FE3 5B                      	pop	bx
 29481                                  
 29482                                  ; carry clear from previous shift means we want the low nibble.  Otherwise
 29483                                  ; we have to shift the flags down to the low nibble
 29484                                  
 29485 00004FE4 7308                    	jnc	short gct_80		; carry clear, no shift needed
 29486                                  
 29487 00004FE6 D0E8                    	shr	al,1			; we want high nibble, shift it down
 29488 00004FE8 D0E8                    	shr	al,1
 29489 00004FEA D0E8                    	shr	al,1
 29490 00004FEC D0E8                    	shr	al,1
 29491                                  gct_80:
 29492 00004FEE 240F                    	and	al,0Fh			; clear the unused nibble
 29493 00004FF0 C3                      	retn
 29494                                  gct_90:
 29495 00004FF1 B00F                    	mov	al,0Fh			; set all flags
 29496 00004FF3 C3                      	retn
 29497                                  
 29498                                  ;----------------------------------------------------------------------------
 29499                                  ;
 29500                                  ; Procedure : PATHCHRCMP
 29501                                  ;
 29502                                  ;----------------------------------------------------------------------------
 29503                                  
 29504                                  PATHCHRCMP:
 29505 00004FF4 3C2F                    	CMP	AL,'/'
 29506 00004FF6 7606                    	JBE	short PathRet
 29507 00004FF8 3C5C                    	CMP	AL,'\'
 29508 00004FFA C3                      	retn
 29509                                  GotFor:
 29510 00004FFB B05C                    	MOV	AL,'\'
 29511 00004FFD C3                      	retn
 29512                                  PathRet:
 29513 00004FFE 74FB                    	JZ	short GotFor
 29514 00005000 C3                      	retn
 29515                                  
 29516                                  ;============================================================================
 29517                                  ; MSCRTLC.ASM, MSDOS 6.0, 1991
 29518                                  ;============================================================================
 29519                                  ; 30/07/2018 - Retro DOS v3.0
 29520                                  ; 29/04/2019 - Retro DOS v4.0
 29521                                  
 29522                                  ; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11, CTRLC.ASM, 1983)
 29523                                  
 29524                                  ;**	MSCTRLC.ASM - ^C and error handler for MSDOS
 29525                                  
 29526                                  ;	TITLE	Control C detection, Hard error and EXIT routines
 29527                                  ;	NAME	IBMCTRLC
 29528                                  
 29529                                  ;**	Low level routines for detecting special characters on CON input,
 29530                                  ;	the ^C exit/int code, the Hard error INT 24 code, the
 29531                                  ;	process termination code, and the INT 0 divide overflow handler.
 29532                                  ;
 29533                                  ;	FATAL
 29534                                  ;	FATAL1
 29535                                  ;	reset_environment
 29536                                  ;	DSKSTATCHK
 29537                                  ;	SPOOLINT
 29538                                  ;	STATCHK
 29539                                  ;	CNTCHAND
 29540                                  ;	DIVOV
 29541                                  ;	CHARHARD
 29542                                  ;	HardErr
 29543                                  ;
 29544                                  ;	Revision history:
 29545                                  ;
 29546                                  ;	    AN000	version 4.0   Jan 1988
 29547                                  ;	    A002	PTM    -- dir >lpt3 hangs
 29548                                  ;	    A003	PTM 3957- fake version for IBMCAHE.COM
 29549                                  ;
 29550                                  ; 	M011: NEC's 8086 clone chip uses Intel's undocumented bit number in
 29551                                  ;	      flags register. In order to return to user normally DOS used to
 29552                                  ;	      move F202 into flags, which sets bit number 1 in flags uncondit-
 29553                                  ;	      ionally. Now it is modified to maintain the state of bit 1.
 29554                                  ;
 29555                                  ; 	M024: suppressed fail and ignore options if not in the middle of int 
 29556                                  ;	      24 and if Ctrl P or ctrl printscrn is pressed in routine 
 29557                                  ;	      charhard.
 29558                                  
 29559                                  ; 29/04/2019 - Retro DOS v4.0
 29560                                  	; MSDOS 6.0
 29561                                  ;		public	LowInt23Addr		
 29562                                  LowInt23Addr: ;	LABEL	DWORD
 29563 00005001 [CD10]0000              	DW	LowInt23, 0
 29564                                  
 29565                                  ;		public	LowInt24Addr
 29566                                  LowInt24Addr: ;	LABEL	DWORD
 29567 00005005 [E110]0000              	DW	LowInt24, 0
 29568                                  
 29569                                  ;		public	LowInt28Addr
 29570                                  LowInt28Addr: ;	LABEL	DWORD
 29571 00005009 [F510]0000              	DW	LowInt28, 0
 29572                                  
 29573                                  ;Break	<Checks for ^C in CON I/O>
 29574                                  
 29575                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29576                                  ; 05/05/2019 - Retro DOS v4.0
 29577                                  
 29578                                  ;---------------------------------------------------------------------------
 29579                                  ;
 29580                                  ; Procedure Name : DSKSTATCHK
 29581                                  ;
 29582                                  ; Check for ^C if only one level in
 29583                                  ;
 29584                                  ;---------------------------------------------------------------------------
 29585                                  
 29586                                          ;procedure DSKSTATCHK,NEAR ; Check for ^C if only one level in
 29587                                  
 29588                                  DSKSTATCHK:        
 29589                                  	;CMP	BYTE [INDOS],1
 29590 0000500D 36803E[2103]01                  CMP     BYTE [SS:INDOS],1 ; 15/03/2018
 29591                                  	;retnz			; Do NOTHING
 29592                                  	; 16/12/2022
 29593 00005013 7534                    	JNZ	SHORT _RET37 ; Retro DOS v2.0 - 04/03/2018         
 29594                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29595                                  	;jz	short _RET37 ; dskstatchk1
 29596                                  	;retn
 29597                                  ;_RET37:
 29598                                  ;dskstatchk1:
 29599 00005015 51                      	PUSH    CX
 29600 00005016 06                              PUSH    ES
 29601 00005017 53                              PUSH    BX
 29602 00005018 1E                              PUSH    DS
 29603 00005019 56                              PUSH    SI
 29604                                          
 29605                                  	;PUSH	CS
 29606                                          ;POP	ES
 29607                                          ;PUSH	CS
 29608                                          ;POP	DS
 29609                                  
 29610 0000501A 8CD3                    	MOV	BX,SS		; SS is DOSDATA. ES:BX must be set up
 29611 0000501C 8EC3                    	MOV	ES,BX		; for deviocall2
 29612 0000501E 8EDB                    	MOV	DS,BX
 29613                                  
 29614                                  	; 16/12/2022
 29615                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29616                                  
 29617                                  	; 05/05/2019
 29618                                  	;MOV	BYTE [ss:DSKSTCOM],DEVRDND
 29619                                          ;MOV	BYTE [ss:DSKSTCALL],DRDNDHL
 29620                                  	;mov	word [ss:DSKSTST],0
 29621                                  
 29622                                  	; 16/12/2022
 29623                                  	; 25/06/2019
 29624 00005020 C606[9403]05            	MOV	BYTE [DSKSTCOM],DEVRDND	 ; 5
 29625 00005025 C606[9203]0E                    MOV	BYTE [DSKSTCALL],DRDNDHL ; 14
 29626 0000502A C706[9503]0000          	mov	word [DSKSTST],0
 29627                                  
 29628 00005030 BB[9203]                        MOV     BX,DSKSTCALL
 29629                                  
 29630                                  	;LDS	SI,[ss:BCON]
 29631                                          ; 25/062019
 29632 00005033 C536[3200]              	lds	si,[BCON]
 29633                                  
 29634                                  ; 16/12/2022
 29635                                  ;	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29636                                  ;	mov	byte [ss:DSKSTCOM],DEVRDND  ; 5
 29637                                  ;       mov	byte [ss:DSKSTCALL],DRDNDHL ; 14
 29638                                  ;	mov	word [ss:DSKSTST],0
 29639                                  ;	mov	bx,DSKSTCALL
 29640                                  ;	lds	si,[ss:BCON]
 29641                                  
 29642 00005037 E882F5                  	CALL	DEVIOCALL2
 29643                                   	; 15/03/2018
 29644                                  	;;test	word [ss:DSKSTST],200h
 29645                                          ;TEST	WORD [SS:DSKSTST],STBUI
 29646                                  	; 05/05/2019
 29647 0000503A 36F606[9603]02          	test	byte [ss:DSKSTST+1],(STBUI>>8) ; 2
 29648 00005040 7408                    	jz	short _GotCh		; No characters available
 29649                                  
 29650 00005042 30C0                            XOR     AL,AL                   ; Set zero
 29651                                  RET36:
 29652 00005044 5E                              POP     SI
 29653 00005045 1F                              POP     DS
 29654 00005046 5B                              POP     BX
 29655 00005047 07                              POP     ES
 29656 00005048 59                              POP     CX
 29657                                  	; 16/12/2022
 29658                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29659                                  _RET37:
 29660 00005049 C3                              RETN
 29661                                  
 29662                                  _GotCh:
 29663 0000504A 36A0[9F03]                      MOV     AL,[SS:DSKCHRET]	; SS override
 29664                                  
 29665 0000504E 3C03                            CMP     AL,"C"-"@" ; cmp al,3
 29666 00005050 75F2                            JNZ     SHORT RET36
 29667 00005052 36C606[9403]04                  MOV     BYTE [SS:DSKSTCOM],DEVRD
 29668 00005058 36C606[9203]16                  MOV     BYTE [SS:DSKSTCALL],DRDWRHL
 29669 0000505E 36880E[9F03]                    MOV     [SS:DSKCHRET],CL
 29670                                  	; 09/09/2018
 29671 00005063 36C706[9503]0000        	MOV	word [SS:DSKSTST],0
 29672 0000506A 36C706[A403]0100        	MOV	word [SS:DSKSTCNT],1
 29673 00005071 E848F5                  	CALL	DEVIOCALL2              ; Eat the ^C
 29674 00005074 5E                              POP     SI
 29675 00005075 1F                              POP     DS
 29676 00005076 5B                              POP     BX                      ; Clean stack
 29677 00005077 07                              POP     ES
 29678 00005078 59                              POP     CX
 29679 00005079 E9CF00                          JMP	CNTCHAND ; 10/08/2018
 29680                                  
 29681                                  	; 05/05/2019
 29682                                  NOSTOP:
 29683                                  	; MSDOS 6.0
 29684 0000507C 3C10                    	CMP	AL,"P"-"@"
 29685 0000507E 7509                    	JNZ	short check_next
 29686                                  				    	; SS override
 29687 00005080 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; ALT_Q ?
 29688 00005086 7405                    	JZ	short INCHKJ		; no
 29689                                  check_end:	; 24/09/2023
 29690 00005088 C3                      	retn
 29691                                  check_next:
 29692                                  	;IF	NOT TOGLPRN
 29693                                  	;CMP	AL,"N"-"@"
 29694                                  	;JZ	short INCHKJ
 29695                                  	;ENDIF
 29696                                  
 29697 00005089 3C03                    	CMP	AL,"C"-"@"
 29698                                  	; 24/09/2023
 29699                                  	;JZ	short INCHKJ
 29700                                  ;check_end:
 29701                                  	;retn
 29702 0000508B 75FB                    	jnz	short check_end
 29703                                  
 29704                                  	; 24/09/2023
 29705                                  	; 08/09/2018
 29706                                  INCHKJ:	; 10/08/2018
 29707 0000508D E9A500                  	jmp	INCHK
 29708                                  
 29709                                  	; MSDOS 3.3
 29710                                          ;CMP     AL,"P"-"@"  ; cmp al,16
 29711                                          ;JZ	short INCHKJ
 29712                                  
 29713                                  	; 15/04/2018
 29714                                          ;;IF	NOT TOGLPRN
 29715                                          ;CMP	AL,"N"-"@"
 29716                                          ;JZ	SHORT INCHKJ
 29717                                          ;;ENDIF
 29718                                  	
 29719                                  	;CMP     AL,"C"-"@"  ; cmp al,3
 29720                                          ;JZ	short INCHKJ
 29721                                  	;RETN
 29722                                  
 29723                                  ;	; 08/09/2018
 29724                                  ;INCHKJ:; 10/08/2018
 29725                                  ;	JMP	INCHK
 29726                                  
 29727                                  ;----------------------------------------------------------------------------
 29728                                  ;
 29729                                  ; Procedure Name : SpoolInt
 29730                                  ;
 29731                                  ; SpoolInt - signal processes that the DOS is truly idle. We are allowed to
 29732                                  ; do this ONLY if we are working on a 1-12 system call AND if we are not in
 29733                                  ; the middle of an INT 24.
 29734                                  ;
 29735                                  ;----------------------------------------------------------------------------
 29736                                  
 29737                                  SPOOLINT:
 29738 00005090 9C                              PUSHF
 29739                                  	; 15/03/2018
 29740 00005091 36803E[5803]00                  CMP     BYTE [SS:IDLEINT],0	; SS override
 29741 00005097 7423                            JZ      SHORT POPFRET
 29742 00005099 36803E[2003]00                  CMP     BYTE [SS:ERRORMODE],0
 29743 0000509F 751B                            JNZ     SHORT POPFRET		;No spool ints in error mode
 29744                                  
 29745                                  	; 30/07/2018
 29746                                  
 29747                                  	; Note that we are going to allow an external program to issue system 
 29748                                  	; calls at this time. We MUST preserve IdleInt across this.
 29749                                  
 29750 000050A1 36FF36[5803]            	PUSH	WORD [SS:IDLEINT]
 29751                                  
 29752                                  	; 05/05/2019 - Retro DOS v4.0
 29753                                   
 29754                                  	; MSDOS 6.0
 29755 000050A6 36803E[F211]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos running in HMA (M021)
 29756 000050AC 7504                    	jne	short do_low_int28	; Y: the int must be done from low mem
 29757 000050AE CD28                    	INT	int_spooler  ; int 28h 	; N: Execute user int 28 handler
 29758 000050B0 EB05                    	jmp	short spool_ret_addr
 29759                                  
 29760                                  do_low_int28:
 29761                                  	;call	far [ss:LowInt28Addr]
 29762 000050B2 2EFF1E[0950]            	call	far [cs:LowInt28Addr]	; 05/05/2019
 29763                                  
 29764                                  spool_ret_addr:
 29765                                  	;INT	int_spooler		; INT 28h
 29766                                  
 29767 000050B7 368F06[5803]            	POP	WORD [SS:IDLEINT]
 29768                                  POPFRET:
 29769 000050BC 9D                              POPF
 29770                                  _RET18:  
 29771 000050BD C3                      	RETN
 29772                                  
 29773                                  ; 05/05/2019 - Retro DOS v4.0
 29774                                  ; DOSCODE:9137h (MSDOS 6.21, MSDOS.SYS)
 29775                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29776                                  ; DOSCODE:90DBh (MSDOS 5.0, MSDOS.SYS)
 29777                                  
 29778                                  ;----------------------------------------------------------------------------
 29779                                  ;
 29780                                  ; Procedure Name : STATCHK
 29781                                  ;
 29782                                  ;----------------------------------------------------------------------------
 29783                                  
 29784                                  STATCHK:
 29785 000050BE E84CFF                          CALL	DSKSTATCHK              ; Allows ^C to be detected under
 29786                                                                          ; input redirection
 29787 000050C1 53                              PUSH    BX
 29788 000050C2 31DB                            XOR     BX,BX
 29789 000050C4 E8E1E4                          CALL	GET_IO_SFT
 29790 000050C7 5B                              POP     BX
 29791 000050C8 72F3                            JC      SHORT _RET18
 29792                                  
 29793 000050CA B401                            MOV     AH,1
 29794 000050CC E818F3                          CALL	IOFUNC
 29795 000050CF 74BF                            JZ      SHORT SPOOLINT
 29796 000050D1 3C13                            CMP     AL,'S'-'@'
 29797 000050D3 75A7                            JNZ     SHORT NOSTOP
 29798                                  
 29799                                  	; 05/05/2019
 29800                                  	; MSDOS 6.0			; SS override
 29801 000050D5 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; AN000; ALT_R ?
 29802 000050DB 75AB                    	JNZ	short check_end		; AN000; yes
 29803                                  
 29804 000050DD 30E4                            XOR     AH,AH
 29805 000050DF E805F3                          CALL	IOFUNC                  ; Eat Cntrl-S
 29806 000050E2 EB4A                            JMP     SHORT PAUSOSTRT
 29807                                  PRINTOFF:
 29808                                  PRINTON:
 29809 000050E4 36F616[FE02]            	NOT	BYTE [SS:PFLAG] ; 14/03/2018
 29810                                  
 29811                                  	; 30/07/2018 - Retro DOS v3.0
 29812 000050E9 53                      	PUSH	BX
 29813 000050EA BB0400                  	MOV	BX,4
 29814 000050ED E8B8E4                  	call	GET_IO_SFT
 29815 000050F0 5B                      	POP	BX
 29816 000050F1 72CA                    	jc	short _RET18
 29817 000050F3 06                      	PUSH	ES
 29818 000050F4 57                      	PUSH	DI
 29819 000050F5 1E                      	PUSH	DS
 29820 000050F6 07                      	POP	ES
 29821 000050F7 89F7                    	MOV	DI,SI			; ES:DI -> SFT
 29822                                  	;test	word [es:di+5],800h
 29823                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_net_spool
 29824                                  	; 05/05/2019
 29825 000050F9 26F6450608              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8)
 29826 000050FE 7418                    	JZ	short NORM_PR 		; Not redirected, echo is OK
 29827                                  
 29828                                  	;Callinstall NetSpoolEchoCheck,MultNet,38,<AX>,<AX> 
 29829                                  					; See if allowed
 29830 00005100 50                      	push	ax
 29831 00005101 B82611                  	mov	ax,1126h
 29832 00005104 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 29833                                  			; Return: CF set on error, AX = error code
 29834                                  			; STACK unchanged
 29835 00005106 58                      	pop	ax
 29836                                  
 29837 00005107 730F                    	JNC	short NORM_PR 		; Echo is OK
 29838                                  
 29839                                  					; SS override
 29840 00005109 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0	; If not allowed, disable echo
 29841                                  
 29842                                  	;Callinstall NetSpoolClose,MultNet,36,<AX>,<AX> ; and close
 29843                                  
 29844 0000510F 50                      	push    ax
 29845 00005110 B82411                  	mov     ax,1124h
 29846 00005113 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 29847                                  			; ES:DI -> SFT, SS = DOS CS
 29848 00005115 58                      	pop     ax
 29849                                  
 29850 00005116 EB10                    	JMP	SHORT RETP6
 29851                                  NORM_PR:
 29852 00005118 36803E[FE02]00          	CMP	BYTE [SS:PFLAG],0	; SS override
 29853 0000511E 7505                    	JNZ	short PRNOPN
 29854 00005120 E81DF4                  	call	DEV_CLOSE_SFT
 29855 00005123 EB03                    	JMP	SHORT RETP6
 29856                                  PRNOPN:
 29857 00005125 E810F4                  	call	DEV_OPEN_SFT
 29858                                  RETP6:
 29859 00005128 5F                      	POP	DI
 29860 00005129 07                      	POP	ES
 29861                                  STATCHK_RETN:
 29862 0000512A C3                              RETN
 29863                                  PAUSOLP:
 29864 0000512B E862FF                          CALL    SPOOLINT
 29865                                  PAUSOSTRT:
 29866 0000512E B401                            MOV     AH,1
 29867 00005130 E8B4F2                          CALL	IOFUNC
 29868 00005133 74F6                            JZ      SHORT PAUSOLP
 29869                                  INCHK:
 29870 00005135 53                              PUSH    BX
 29871 00005136 31DB                            XOR     BX,BX
 29872 00005138 E86DE4                          CALL	GET_IO_SFT
 29873 0000513B 5B                              POP     BX
 29874 0000513C 72EC                            JC      SHORT STATCHK_RETN ; 30/07/2018
 29875 0000513E 30E4                            XOR     AH,AH
 29876 00005140 E8A4F2                          CALL	IOFUNC
 29877                                  	; 30/07/2018
 29878                                  	; MSDOS 3.3
 29879                                          ;CMP	AL,'P'-'@' ;cmp al,16
 29880                                          ;JNZ	SHORT NOPRINT
 29881                                  
 29882                                  	;cmp	byte [SS:SCAN_FLAG],0
 29883                                  	;JZ	SHORT PRINTON	
 29884                                  	;mov	byte [ss:SCAN_FLAG],0
 29885                                  
 29886                                  	; 05/05/2019
 29887                                  	; MSDOS 6.0
 29888 00005143 3C10                    	CMP	AL,"P"-"@"
 29889                                  	;;;;  7/14/86	ALT_Q key fix
 29890 00005145 749D                    	JZ	short PRINTON		; no! must be CTRL_P
 29891                                  ;NOPRINT:	
 29892                                  	;IF	NOT TOGLPRN
 29893                                  	;CMP	AL,"N"-"@"
 29894                                  	;JZ	short PRINTOFF
 29895                                  	;ENDIF
 29896 00005147 3C03                    	CMP	AL,"C"-"@" ; cmp al,3 
 29897                                  	;retnz
 29898 00005149 75DF                    	jnz	short STATCHK_RETN
 29899                                  
 29900                                  	; !! NOTE: FALL THROUGH !!
 29901                                  
 29902                                  ;---------------------------------------------------------------------------
 29903                                  ;
 29904                                  ; Procedure Name : CNTHAND ( CTRLC_C HANDLER )
 29905                                  ;
 29906                                  ; "^C" and CR/LF is printed. Then the user registers are restored and the
 29907                                  ; user CTRL-C handler is executed. At this point the top of the stack has 1)
 29908                                  ; the interrupt return address should the user CTRL-C handler wish to allow
 29909                                  ; processing to continue; 2) the original interrupt return address to the code
 29910                                  ; that performed the function call in the first place. If the user CTRL-C
 29911                                  ; handler wishes to continue, it must leave all registers unchanged and RET
 29912                                  ; (not IRET) with carry CLEAR. If carry is SET then an terminate system call
 29913                                  ; is simulated.
 29914                                  ;
 29915                                  ;---------------------------------------------------------------------------
 29916                                  
 29917                                  CNTCHAND:
 29918                                  	; MSDOS 6.0			; SS override
 29919                                  					; AN002; from RAWOUT
 29920                                  	;TEST	word [SS:DOS34_FLAG],CTRL_BREAK_FLAG  
 29921                                  	;JNZ	short around_deadlock 	; AN002;
 29922                                  
 29923                                  	; 05/05/2019 - Retro DOS v4.0
 29924                                  	; (MSDOS 6.21 MSDOS.SYS DOSCODE:91C4h, 29/12/2022)
 29925 0000514B 36F606[1206]02          	TEST	byte [SS:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8)  ; 2 
 29926 00005151 7508                    	JNZ	short around_deadlock 	; AN002;
 29927                                  
 29928 00005153 B003                            MOV     AL,3			; Display "^C"
 29929 00005155 E883C5                          CALL	BUFOUT
 29930 00005158 E81EC4                          CALL	CRLF
 29931                                  around_deadlock:
 29932 0000515B 16                              PUSH    SS
 29933 0000515C 1F                              POP     DS
 29934 0000515D 803E[5703]00                    CMP     BYTE [CONSWAP],0
 29935 00005162 7403                            JZ      SHORT NOSWAP
 29936 00005164 E8C1E0                          CALL	SWAPBACK
 29937                                  NOSWAP:
 29938 00005167 FA                      	CLI				; Prepare to play with stack
 29939 00005168 8E16[8605]              	MOV	SS,[USER_SS]		; User stack now restored
 29940 0000516C 8B26[8405]              	MOV	SP,[USER_SP]
 29941 00005170 E8D8B2                          CALL	restore_world       ; User registers now restored
 29942                                  
 29943                                  	; 30/07/2018 - Retro DOS v3.0 
 29944                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56ACh)
 29945                                          ; 14/03/2018 - Retro DOS v2.0
 29946                                  	;MOV	BYTE [CS:INDOS],0	
 29947                                          ;MOV	BYTE [CS:ERRORMODE],0
 29948                                          ;MOV	[CS:ConC_Spsave],SP
 29949                                  	;clc	;30/07/2018
 29950                                          ;INT	int_ctrl_c ; 23h    ; Execute user Ctrl-C handler
 29951                                  	;;int	23h	; DOS - CONTROL "C" EXIT ADDRESS
 29952                                  			; Return: return via RETF 2 with CF set
 29953                                  			; DOS will abort program with errorlevel 0
 29954                                  			; else
 29955                                  			; interrupted DOS call continues
 29956                                  
 29957                                  	; 05/05/2019 - Retro DOS v4.0
 29958                                  	; MSDOS 6.0 (MSDOS 6.21, MSDOS.SYS,91ECh) 
 29959                                  
 29960                                  	; CS was used to address these variables. We have to use DOSDATA
 29961                                  	
 29962 00005173 07                      	pop	es ; *	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:91ECh)
 29963                                  			; (pop es, after 'call restore_world')	
 29964 00005174 1E                      	push	ds
 29965                                  	;getdseg <ds>			; ds -> dosdata
 29966 00005175 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29967 0000517A C606[2103]00            	mov	byte [INDOS],0		; Go to known state
 29968 0000517F C606[2003]00            	mov	byte [ERRORMODE],0
 29969 00005184 8926[3203]              	mov	[ConC_Spsave],SP	; save his SP
 29970                                  	; User SP has changed because of push. Adjust for it
 29971 00005188 8306[3203]02            	add	word [ConC_Spsave],2
 29972                                  
 29973 0000518D 803E[F211]00            	cmp	byte [DosHasHMA],0	; Q: is dos running in HMA (M021)
 29974 00005192 1F                       	pop	ds	; restore ds
 29975 00005193 7505                    	jne	short do_low_int23	; Y: the int must be done from low mem
 29976 00005195 F8                      	CLC				
 29977 00005196 CD23                    	INT	int_ctrl_c  ; int 23h	; N: Execute user Ctrl-C handler
 29978 00005198 EB06                    	jmp	short ctrlc_ret_addr
 29979                                  
 29980                                  	; 05/05/2019
 29981                                  do_low_int23:
 29982 0000519A F8                      	clc
 29983 0000519B 2EFF1E[0150]            	call	far [cs:LowInt23Addr]	
 29984                                  
 29985                                  	; 30/07/2018 
 29986                                  
 29987                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56C0h)
 29988                                  
 29989                                  ; The user has returned to us. The circumstances we allow are:
 29990                                  ;
 29991                                  ;   IRET	We retry the operation by redispatching the system call
 29992                                  ;   CLC/RETF	POP the stack and retry
 29993                                  ;   ... 	Exit the current process with ^C exit
 29994                                  ;
 29995                                  ; User's may RETURN to us and leave interrupts on. 
 29996                                  ; Turn 'em off just to be sure
 29997                                  
 29998                                  ctrlc_ret_addr: ; 05/05/2019
 29999                                  
 30000 000051A0 FA                      	CLI
 30001                                  
 30002                                  	; MSDOS 3.3 
 30003                                  	;MOV	[CS:USER_IN_AX],ax	; save the AX
 30004                                  	;PUSHF				; and the flags (maybe new call)
 30005                                  	;POP	AX
 30006                                  
 30007                                  	; 05/05/2019
 30008                                  	; MSDOS 6.0
 30009                                  
 30010                                  	; We have to use DOSDATA for these variables. Previously CS was used 
 30011                                  
 30012 000051A1 50                      	push	ax
 30013 000051A2 8CD8                    	mov	ax,ds
 30014                                  	;getdseg <ds>			; ds -> dosdata
 30015 000051A4 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 30016 000051A9 A3[0A0D]                	mov	[TEMPSEG],ax
 30017 000051AC 58                      	pop	ax
 30018 000051AD A3[3A03]                	MOV	[USER_IN_AX],ax		; save the AX
 30019 000051B0 9C                      	pushf				; and the flags (maybe new call)
 30020 000051B1 58                      	pop	ax
 30021                                  
 30022                                  ; See if the input stack is identical to the output stack
 30023                                  
 30024                                  	; MSDOS 3.3
 30025                                  	;CMP	SP,[CS:ConC_Spsave]
 30026                                  	;JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 30027                                  
 30028                                  	; MSDOS 6.0
 30029 000051B2 3B26[3203]              	CMP	SP,[ConC_Spsave]
 30030 000051B6 750A                    	JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 30031                                  
 30032                                  ; Repeat the operation by redispatching the system call.
 30033                                  
 30034                                  ctrlc_repeat:
 30035                                  	; MSDOS 3.3
 30036                                  	;MOV	AX,[CS:USER_IN_AX]
 30037                                  	; 05/05/2019
 30038                                  	; MSDOS 6.0
 30039 000051B8 A1[3A03]                	mov	ax,[USER_IN_AX]
 30040 000051BB 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds and original sp
 30041                                  	; MSDOS 3.3 & MSDOS 6.0 
 30042                                  	;transfer COMMAND
 30043                                  COMMANDJ:
 30044 000051BF E946B1                  	JMP	COMMAND
 30045                                  
 30046                                  ; The current SP is NOT the same as the input SP. Presume that he 
 30047                                  ; RETF'd leaving some flags on the stack and examine the input
 30048                                  
 30049                                  ctrlc_try_new:
 30050 000051C2 83C402                  	ADD	SP,2			; pop those flags
 30051                                  	;;test	ax,1
 30052                                  	;TEST	AX,f_Carry		; did he return with carry?
 30053 000051C5 A801                    	test	al,f_Carry ; test al,1
 30054 000051C7 74EF                    	JZ	short ctrlc_repeat	; no carry set, just retry
 30055                                  
 30056                                  	; MSDOS 6.0
 30057 000051C9 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds
 30058                                  
 30059                                  	; Well...  time to abort the user.  
 30060                                  	; Signal a ^C exit and use the EXIT system call..
 30061                                  
 30062                                  ctrlc_abort:
 30063                                  	; MSDOS 3.3
 30064                                          ;;MOV	AX,(EXIT SHL 8) + 0
 30065                                          ;MOV	AX, (EXIT*256) + 0  ; 4C00h
 30066                                  	;mov	byte [CS:DidCTRLC],0FFh ; 14/03/2018
 30067                                          ;transfer COMMAND	    ; give up by faking $EXIT
 30068                                  	;;JMP	SHORT COMMANDJ
 30069                                  	;JMP	COMMAND
 30070                                  
 30071                                  	; 05/05/2019 - Retro DOS v4.0
 30072                                  	; MSDOS 6.0
 30073 000051CD B8004C                  	MOV	AX,(EXIT<<8)+0  ; 4C00h
 30074 000051D0 1E                      	push	ds
 30075                                  	;getdseg <ds>			; ds -> dosdata
 30076 000051D1 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]	
 30077 000051D6 C606[4D03]FF            	MOV	byte [DidCTRLC],-1 ; 0FFh
 30078 000051DB 1F                      	pop	ds
 30079                                  	;transfer COMMAND		; give up by faking $EXIT
 30080 000051DC EBE1                    	JMP	SHORT COMMANDJ
 30081                                  	;JMP	COMMAND
 30082                                  
 30083                                  ;Break	<DIVISION OVERFLOW INTERRUPT>
 30084                                  ;----------------------------------------------------------------------------
 30085                                  ;
 30086                                  ; Procedure Name : DIVOV
 30087                                  ;
 30088                                  ; Default handler for division overflow trap
 30089                                  ;
 30090                                  ;----------------------------------------------------------------------------
 30091                                  
 30092                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30093                                  DIVOV: 
 30094                                  	; 05/05/2019 - Retro DOS v4.0
 30095                                  	; 30/07/2018
 30096                                  	; 07/07/2018 - Retro DOS v3.0
 30097 000051DE BE[9D09]                	mov	si,DIVMES
 30098 000051E1 2E8B1E[B009]            	mov	bx,[cs:DivMesLen]
 30099                                  	;mov	ax,cs
 30100                                  	;mov	ss,ax
 30101                                  	; 05/05/2019
 30102                                  	;getdseg <ss>		; we are in an ISR, flag is CLI
 30103 000051E6 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
 30104 000051EB BC[A007]                	mov     sp,AUXSTACK
 30105                                  	;call	RealDivOv ; MSDOS 3.3
 30106 000051EE E80200                  	call	_OUTMES ; MSDOS 6.0
 30107 000051F1 EBDA                    	jmp	short ctrlc_abort  ; Use Ctrl-C abort on divide overflow
 30108                                  
 30109                                  ; 30/07/2018
 30110                                  
 30111                                  ; MSDOS 6.0
 30112                                  ;---------------------------------------------------------------------------
 30113                                  ;
 30114                                  ; Procedure Name : OutMes
 30115                                  ;
 30116                                  ;
 30117                                  ; OutMes: perform message output
 30118                                  ; Inputs:   SS:SI points to message
 30119                                  ;	    BX has message length
 30120                                  ; Outputs:  message to BCON
 30121                                  ;
 30122                                  ;Actually, cs:si points to the message now. The segment address is filled in
 30123                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 30124                                  ;NB. This procedure is called only from DIVOV. -SR
 30125                                  ;
 30126                                  ;---------------------------------------------------------------------------
 30127                                  
 30128                                  ;MSDOS 3.3
 30129                                  ;---------------------------------------------------------------------------
 30130                                  ; RealDivOv: perform actual divide overflow stuff.
 30131                                  ; Inputs:   none
 30132                                  ; Outputs:  message to BCON
 30133                                  ;---------------------------------------------------------------------------
 30134                                  
 30135                                  	; 05/05/2019 - Retro DOS v4.0
 30136                                  	; DOSCODE:926Ch (MSDOS 6.21, MSDOS.SYS)
 30137                                  
 30138                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30139                                  	; DOSCODE:9210h (MSDOS 5.0, MSDOS.SYS)
 30140                                  
 30141                                  ;---------------------------------------------------------------------------
 30142                                  ;
 30143                                  ; Procedure Name : OutMes
 30144                                  ;
 30145                                  ; OutMes: perform message output
 30146                                  ; Inputs:   SS:SI points to message
 30147                                  ;	    BX has message length
 30148                                  ; Outputs:  message to BCON
 30149                                  ;
 30150                                  ;Actually, cs:si points to the message now. The segment address is filled in
 30151                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 30152                                  ;NB. This procedure is called only from DIVOV. -SR
 30153                                  ;
 30154                                  ;---------------------------------------------------------------------------
 30155                                  
 30156                                  	; 30/07/2018
 30157                                  	; MSDOS 6.0
 30158                                  _OUTMES:
 30159                                  	; MSDOS 3.3
 30160                                  ;RealDivOv:
 30161                                  	; 07/07/2018 - Retro DOS v3.0
 30162                                          ;Context ES
 30163 000051F3 16                      	push	ss ; 05/05/2019
 30164                                  	;PUSH	CS ; 30/07/2018		; get ES addressability
 30165 000051F4 07                      	POP	ES
 30166                                          ;Context DS
 30167 000051F5 16                      	push	ss ; 05/05/2019	
 30168                                  	;PUSH	CS ; 30/07/2018		; get DS addressability
 30169 000051F6 1F                      	POP	DS
 30170 000051F7 C606[9403]08                    MOV     BYTE [DSKSTCOM],DEVWRT
 30171 000051FC C606[9203]16                    MOV     BYTE [DSKSTCALL],DRDWRHL
 30172 00005201 C706[9503]0000                  MOV     WORD [DSKSTST],0
 30173                                  	; BX = [DivMesLen] = 19
 30174 00005207 891E[A403]                      MOV     [DSKSTCNT],BX
 30175 0000520B BB[9203]                        MOV     BX,DSKSTCALL
 30176 0000520E 8936[A003]                      MOV     [DSKCHRET+1],SI		; transfer address (need an EQU)
 30177                                  	; 08/09/2018
 30178                                  	;mov	[DEVIOBUF_PTR],si
 30179                                  	; MSDOS 6.0
 30180                                  					; CS is used for string, fill in 
 30181                                  					; segment address 
 30182 00005212 8C0E[A203]              	MOV	[DSKCHRET+3],CS
 30183                                  
 30184 00005216 C536[3200]                      LDS     SI,[BCON]
 30185 0000521A E89FF3                          CALL	DEVIOCALL2
 30186                                  
 30187                                  	;; 14/03/2018
 30188                                          ;;MOV	WORD [CS:DSKCHRET+1],DEVIOBUF
 30189                                  	;; 08/09/2018
 30190                                  	;mov	word [CS:DEVIOBUF_PTR],DEVIOBUF
 30191                                          ;MOV	WORD [CS:DSKSTCNT],1
 30192                                          
 30193                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 30194                                  
 30195                                  	; ES still points to DOSDATA. ES is
 30196                                  					; not destroyed by deviocall2. So use
 30197                                  					; ES override.
 30198                                  
 30199 0000521D 26C706[A003][BC03]      	MOV	WORD [ES:DSKCHRET+1],DEVIOBUF
 30200 00005224 26C706[A403]0100        	MOV	WORD [ES:DSKSTCNT],1
 30201                                  
 30202 0000522B C3                      	RETN
 30203                                  
 30204                                  ;Break	<CHARHRD,HARDERR,ERROR -- HANDLE DISK ERRORS AND RETURN TO USER>
 30205                                  ;---------------------------------------------------------------------------
 30206                                  ;
 30207                                  ; Procedure Name : CHARHARD
 30208                                  ;
 30209                                  ;
 30210                                  ; Character device error handler
 30211                                  ; Same function as HARDERR
 30212                                  ;
 30213                                  ;---------------------------------------------------------------------------
 30214                                  
 30215                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30216                                  CHARHARD:
 30217                                  	; 05/05/2019 - Retro DOS v4.0
 30218                                  	; 30/07/2018
 30219                                  	; 08/07/2018 - Retro DOS v3.0
 30220                                  
 30221                                  	; MSDOS 6.0
 30222                                  		   			; M024 - start
 30223 0000522C 36803E[2003]00          	cmp	byte [SS:ERRORMODE], 0	; Q: are we in the middle of int 24
 30224                                  	;jne	short @f		; Y: allow fail
 30225 00005232 750B                    	jne	short chard1
 30226                                  
 30227 00005234 80CC10                  	OR	AH,Allowed_RETRY ; 10h	; assume ctrl p
 30228                                  
 30229 00005237 36F606[FE02]FF          	test	byte [ss:PFLAG],-1	; Q: has ctrl p been pressed
 30230 0000523D 7503                    	jnz	short ctrlp		; Y: 
 30231                                  ;@@:
 30232                                  chard1:					; M024 - end
 30233                                  	; MSDOS 6.0 & MSDOS 3.3
 30234                                  
 30235                                  ; Character device error handler
 30236                                  ; Same function as HARDERR
 30237                                  
 30238                                  	;or	ah,38h
 30239 0000523F 80CC38                  	or	ah,Allowed_IGNORE+Allowed_RETRY+Allowed_FAIL
 30240                                  ctrlp:			; SS override for Allowed and EXITHOLD
 30241 00005242 368826[4B03]            	mov	[SS:ALLOWED],ah
 30242                                  
 30243                                  	; 15/03/2018
 30244 00005247 368C06[8205]                    MOV     [SS:EXITHOLD+2],ES
 30245 0000524C 36892E[8005]                    MOV     [SS:EXITHOLD],BP
 30246 00005251 56                              PUSH    SI
 30247                                  	;and	di,0FFh
 30248 00005252 81E7FF00                        AND     DI,STECODE
 30249 00005256 8CDD                            MOV     BP,DS                   ;Device pointer is BP:SI
 30250 00005258 E86400                          CALL    FATALC
 30251 0000525B 5E                              POP     SI
 30252                                  	;return
 30253 0000525C C3                              RETN
 30254                                  
 30255                                  ;---------------------------------------------------------------------------
 30256                                  ;
 30257                                  ; Procedure Name : HardErr
 30258                                  ;
 30259                                  ; Hard disk error handler. Entry conditions:
 30260                                  ;	DS:BX = Original disk transfer address
 30261                                  ;	DX = Original logical sector number
 30262                                  ;	CX = Number of sectors to go (first one gave the error)
 30263                                  ;	AX = Hardware error code
 30264                                  ;	DI = Original sector transfer count	
 30265                                  ;	ES:BP = Base of drive parameters
 30266                                  ;	[READOP] = 0 for read, 1 for write
 30267                                  ;	Allowed Set with allowed responses to this error (other bits MUST BE 0)
 30268                                  ; Output:
 30269                                  ;	[FAILERR] will be set if user responded FAIL
 30270                                  ;
 30271                                  ;--------------------------------------------------------------------------
 30272                                  
 30273                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30274                                  HARDERR:
 30275                                  	; 05/05/2019 - Retro DOS v4.0
 30276                                  	; 30/07/2018
 30277                                  	; 08/07/2018 - Retro DOS v3.0
 30278 0000525D 97                      	XCHG    AX,DI                   ; Error code in DI, count in AX
 30279                                          ;and	di,0FFh
 30280 0000525E 81E7FF00                	AND     DI,STECODE              ; And off status bits
 30281                                          ;CMP	DI,WRECODE		; Write Protect Error?
 30282                                  	;cmp	di,0
 30283 00005262 83FF00                  	cmp	DI,error_I24_write_protect ; Write Protect Error?
 30284 00005265 750A                            JNZ     short NOSETWRPERR
 30285 00005267 50                              PUSH    AX
 30286                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30287                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 30288                                          ;;MOV	AL,[ES:BP+0]
 30289                                  	; 15/12/2022
 30290 00005268 268A4600                	mov	al,[ES:BP]
 30291                                          	; 15/03/2018
 30292 0000526C 36A2[2203]                      MOV     [SS:WPERR],AL		; Flag drive with WP error
 30293 00005270 58                              POP     AX
 30294                                  NOSETWRPERR:
 30295 00005271 29C8                            SUB     AX,CX                   ; Number of sectors successfully transferred
 30296 00005273 01C2                            ADD     DX,AX                   ; First sector number to retry
 30297 00005275 52                              PUSH    DX
 30298                                  	; 08/07/2018
 30299                                          ;MUL	word [ES:BP+2] 		; Number of bytes transferred
 30300 00005276 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]
 30301 0000527A 5A                              POP     DX
 30302 0000527B 01C3                            ADD     BX,AX                   ; First address for retry
 30303 0000527D 30E4                            XOR     AH,AH                   ; Flag disk section in error
 30304                                          ;CMP	DX,[ES:BP+6] 		; In reserved area?
 30305 0000527F 263B5606                	CMP	DX,[ES:BP+DPB.FIRST_FAT]
 30306 00005283 721A                            JB      SHORT ERRINT
 30307 00005285 FEC4                            INC     AH                      ; Flag for FAT
 30308                                          ;CMP	DX,[ES:BP+10H] ; MSDOS 3.3
 30309                                  	;cmp	dx,[ES:BP+11h] ; MSDOS 6.0 - 05/05/2019 	
 30310 00005287 263B5611                	CMP	DX,[ES:BP+DPB.DIR_SECTOR]  ; In FAT?  
 30311 0000528B 7308                    	JAE	short TESTDIR 		; No
 30312                                  		 ; Err in FAT must force recomp of freespace
 30313                                  	;mov	word [ES:BP+1Eh],-1 ; MSDOS 3.3
 30314                                  	;mov	word [ES:BP+1Fh],-1 ; MSDOS 6.0 - 05/05/2019 
 30315 0000528D 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1
 30316 00005293 EB0A                    	JMP	SHORT ERRINT
 30317                                  TESTDIR:
 30318 00005295 FEC4                            INC     AH
 30319                                          ;CMP	DX,[ES:BP+0BH]		; In directory?
 30320 00005297 263B560B                	CMP	DX,[ES:BP+DPB.FIRST_SECTOR] 
 30321 0000529B 7202                            JB      SHORT ERRINT
 30322 0000529D FEC4                            INC     AH                      ; Must be in data area
 30323                                  ERRINT:
 30324 0000529F D0E4                            SHL     AH,1                    ; Make room for read/write bit
 30325 000052A1 360A26[7505]                    OR      AH,[SS:READOP] ; 15/03/2018
 30326                                  
 30327                                  	; 15/08/2018
 30328                                  					; SS override for allowed and EXITHOLD
 30329 000052A6 360A26[4B03]            	OR	AH,[SS:ALLOWED]		; Set the allowed_ bits
 30330                                  
 30331                                          ;entry   FATAL
 30332                                  FATAL:
 30333                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30334                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 30335                                          ;;MOV	AL,[ES:BP+0]		; Get drive number
 30336                                  	; 15/12/2022
 30337 000052AB 268A4600                	MOV	AL,[ES:BP]        
 30338                                  
 30339                                  	;entry   FATAL1
 30340                                  FATAL1:  
 30341                                  	; 15/03/2018      
 30342 000052AF 368C06[8205]            	MOV     [SS:EXITHOLD+2],ES
 30343 000052B4 36892E[8005]                    MOV     [SS:EXITHOLD],BP	; The only things we preserve	
 30344                                  	;LES	SI,[ES:BP+12H] ; MSDOS 3.3
 30345                                  	;LES	SI,[ES:BP+13H] ; MSDOS 6.0 - 05/05/2019
 30346 000052B9 26C47613                	LES	SI,[ES:BP+DPB.DRIVER_ADDR]
 30347 000052BD 8CC5                            MOV     BP,ES                   ; BP:SI points to the device involved
 30348                                  
 30349                                  	; DI has the INT-24-style extended error. We now map the error code 
 30350                                  	; for this into the normalized get extended error set by using the 
 30351                                  	; ErrMap24 table as a translate table. Note that we translate ONLY 
 30352                                  	; the device returned codes and leave all others beyond the look up 
 30353                                  	; table alone.
 30354                                  
 30355                                  	; 08/07/2018 - Retro DOS v3.0
 30356                                  FATALC:
 30357 000052BF E89701                  	call	SET_I24_EXTENDED_ERROR
 30358                                  	;cmp	di,0Ch
 30359 000052C2 83FF0C                  	CMP	DI,error_I24_gen_failure
 30360 000052C5 7603                    	JBE	short GOT_RIGHT_CODE	; Error codes above gen_failure get
 30361 000052C7 BF0C00                  	MOV	DI,error_I24_gen_failure; mapped to gen_failure. Real codes
 30362                                  					;  Only come via GetExtendedError
 30363                                  ;** ----------------------------------------------------------------
 30364                                  ;
 30365                                  ; Entry point used by REDIRector on Network I 24 errors.
 30366                                  ;
 30367                                  ;	ASSUME	DS:NOTHING,ES:NOTHING,SS:DOSDATA
 30368                                  ;
 30369                                  ; ALL I 24 regs set up. ALL Extended error info SET. ALLOWED Set.
 30370                                  ;     EXITHOLD set for restore of ES:BP.
 30371                                  ; ------------------------------------------------------------------
 30372                                  	;entry	NET_I24_ENTRY
 30373                                  NET_I24_ENTRY:
 30374                                  GOT_RIGHT_CODE:
 30375 000052CA 36803E[2003]00          	CMP     BYTE [SS:ERRORMODE],0	; No INT 24s if already INT 24
 30376 000052D0 7404                            JZ	SHORT NoSetFail
 30377 000052D2 B003                    	MOV	AL,3
 30378 000052D4 EB6C                    	JMP	short FailRet
 30379                                  NoSetFail:
 30380 000052D6 368926[8805]                    MOV     [SS:CONTSTK],SP		; SS override
 30381 000052DB 16                              PUSH	SS
 30382 000052DC 07                              POP	ES
 30383                                      
 30384                                  	; Wango!!! We may need to free some user state info... In 
 30385                                  	; particular, we may have locked down a JFN for a user and he may 
 30386                                  	; NEVER return to us. Thus,we need to free it here and then 
 30387                                  	; reallocate it when we come back.
 30388                                  
 30389 000052DD 36833E[AA05]FF          	CMP	word [SS:SFN],-1 ; 0FFFFh
 30390 000052E3 740C                    	JZ	short _NoFree
 30391 000052E5 1E                      	push	ds
 30392 000052E6 56                      	push	si
 30393 000052E7 36C536[AE05]            	LDS	SI,[SS:PJFN]
 30394 000052EC C604FF                  	MOV	BYTE [SI],0FFH
 30395 000052EF 5E                      	pop	si
 30396 000052F0 1F                      	pop	ds
 30397                                  
 30398                                  _NoFree:
 30399 000052F1 FA                      	CLI
 30400                                  					; Prepare to play with stack
 30401 000052F2 36FE06[2003]                    INC     BYTE [SS:ERRORMODE]	; Flag INT 24 in progress
 30402 000052F7 36FE0E[2103]                    DEC     BYTE [SS:INDOS]		; INT 24 handler might not return
 30403                                  
 30404                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 30405                                  
 30406                                  	;; Extended Open hooks
 30407                                  					; AN000;IFS.I24 error disabled
 30408                                  	;test	byte [ss:EXTOPEN_ON],2
 30409 000052FC 36F606[F605]02          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF 
 30410 00005302 7404                    	JZ	short i24yes		; AN000;IFS.no
 30411                                  faili24:				; AN000;
 30412 00005304 B003                    	MOV	AL,3			; AN000;IFS.fake fail
 30413 00005306 EB29                    	JMP	short passi24 		; AN000;IFS.exit
 30414                                  i24yes: 				; AN000;
 30415                                  	;; Extended Open hooks
 30416                                  
 30417 00005308 368E16[8605]                    MOV     SS,[SS:USER_SS]
 30418 0000530D 268B26[8405]                    MOV     SP,[ES:USER_SP]         ; User stack pointer restored
 30419                                  
 30420                                  	;;int	24h	
 30421                                          ;IN	int_fatal_abort		; Fatal error interrupt vector,
 30422                                  					; must preserve ES
 30423                                  	; 05/05/2019
 30424 00005312 26803E[F211]00          	cmp	byte [es:DosHasHMA], 0	; Q: is dos running in HMA (M021)
 30425 00005318 7504                    	jne	short do_low_int24	; Y: the int must be done from low mem
 30426 0000531A CD24                    	INT	int_fatal_abort 	; Fatal error interrupt vector, 
 30427                                  					; must preserve ES
 30428 0000531C EB05                    	jmp	short criterr_ret_addr
 30429                                  
 30430                                  do_low_int24:
 30431                                  	; 05/05/2019
 30432                                  	; MSDOS 6.0
 30433 0000531E 2EFF1E[0550]            	call    far [cs:LowInt24Addr]
 30434                                  criterr_ret_addr:
 30435 00005323 268926[8405]                    MOV     [ES:USER_SP],SP         ; restore our stack
 30436 00005328 268C16[8605]                    MOV     [ES:USER_SS],SS
 30437 0000532D 8CC5                            MOV     BP,ES
 30438 0000532F 8ED5                            MOV     SS,BP
 30439                                  passi24:
 30440 00005331 368B26[8805]                    MOV     SP,[SS:CONTSTK]
 30441 00005336 36FE06[2103]                    INC     BYTE [SS:INDOS]		; Back in the DOS
 30442 0000533B 36C606[2003]00                  MOV     BYTE [SS:ERRORMODE],0	; Back from INT 24
 30443 00005341 FB                              STI
 30444                                  FailRet:
 30445 00005342 36C42E[8005]                    LES     BP,[SS:EXITHOLD]
 30446                                  	
 30447                                  	; 08/07/2018
 30448                                  
 30449                                  	; Triage the user's reply.
 30450                                  
 30451 00005347 3C01                    	CMP	AL,1
 30452 00005349 723D                    	JB	short CheckIgnore	; 0 => ignore
 30453 0000534B 7445                    	JZ	short CheckRetry	; 1 => retry
 30454 0000534D 3C03                    	CMP	AL,3			; 3 => fail
 30455 0000534F 754B                    	JNZ	short DoAbort 		; 2, invalid => abort
 30456                                  
 30457                                  	; The reply was fail. See if we are allowed to fail.
 30458                                  
 30459                                  				; SS override for ALLOWED, EXTOPEN_ON, 
 30460                                  				; ALLOWED, FAILERR, WPERR, SFN, pJFN
 30461                                  	;test	byte [ss:ALLOWED],8
 30462 00005351 36F606[4B03]08          	test	byte [ss:ALLOWED],Allowed_FAIL ; Can we?
 30463 00005357 7443                    	jz	short DoAbort	; No, do abort
 30464                                  DoFail:
 30465 00005359 B003                    	MOV	AL,3		; just in case...
 30466                                  				; AN000;EO. I24 error disabled
 30467                                  	; 05/05/2019
 30468                                  	;(MSDOS 6.0, MSCTRLC.ASM, 1991)
 30469 0000535B 36F606[F605]02          	test	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 30470 00005361 7505                    	jnz	short CleanUp 		; AN000;EO. no
 30471                                  	
 30472 00005363 36FE06[4A03]            	inc	byte [SS:FAILERR]	; Tell everybody
 30473                                  CleanUp:
 30474 00005368 36C606[2203]FF          	MOV	byte [SS:WPERR],-1
 30475 0000536E 36833E[AA05]FF          	CMP	word [SS:SFN],-1
 30476                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30477                                  	;jnz	short CleanUp2
 30478                                  	;retn
 30479                                  	; 17/12/2022
 30480 00005374 7411                    	jz	short Cleanup_retn ; 08/07/2018 - Retro DOS v3.0
 30481                                  CleanUp2:
 30482 00005376 1E                      	push	ds
 30483 00005377 56                      	push	si
 30484 00005378 50                      	push	ax
 30485 00005379 36A1[AA05]              	MOV	AX,[ss:SFN]
 30486 0000537D 36C536[AE05]            	LDS	SI,[ss:PJFN]
 30487 00005382 8804                    	MOV	[SI],AL
 30488 00005384 58                      	pop	ax
 30489 00005385 5E                      	pop	si
 30490 00005386 1F                      	pop	ds
 30491                                  Cleanup_retn:
 30492 00005387 C3                      	retn
 30493                                  
 30494                                  	; The reply was IGNORE. See if we are allowed to ignore.
 30495                                  
 30496                                  CheckIgnore:
 30497                                  	;test	byte [ss:ALLOWED],20h
 30498 00005388 36F606[4B03]20          	test	byte [ss:ALLOWED],Allowed_IGNORE ; Can we?
 30499 0000538E 74C9                    	jz	short DoFail			 ; No, do fail
 30500 00005390 EBD6                    	jmp	short CleanUp
 30501                                  
 30502                                  	; The reply was RETRY. See if we are allowed to retry.
 30503                                  
 30504                                  CheckRetry:
 30505                                  	;test	byte [ss:ALLOWED],10h
 30506 00005392 36F606[4B03]10          	test	byte [ss:ALLOWED],Allowed_RETRY	; Can we?
 30507 00005398 74BF                    	jz	short DoFail			; No, do fail
 30508 0000539A EBCC                    	JMP	short CleanUp
 30509                                  
 30510                                  	; The reply was ABORT.
 30511                                  DoAbort:
 30512 0000539C 16                      	push	ss
 30513 0000539D 1F                      	pop	ds
 30514                                  
 30515 0000539E 803E[5703]00            	CMP	byte [CONSWAP],0
 30516 000053A3 7403                    	JZ	short NOSWAP2
 30517 000053A5 E880DE                  	call	SWAPBACK
 30518                                  NOSWAP2:
 30519                                  	; See if we are to truly abort. If we are in the process of aborting, 
 30520                                  	; turn this abort into a fail.
 30521                                  
 30522                                  	;test	[fAborting],0FFh
 30523                                  	;jnz	short DoFail
 30524                                  
 30525 000053A8 803E[5903]00            	cmp	byte [fAborting],0
 30526 000053AD 75AA                    	JNZ	short DoFail
 30527                                  
 30528                                  	; Set return code
 30529                                  
 30530 000053AF C606[7C05]02            	MOV	BYTE [EXIT_TYPE],EXIT_HARD_ERROR ; 2
 30531 000053B4 30C0                    	XOR	AL,AL
 30532                                  
 30533                                  	; we are truly aborting the process. Go restore information from 
 30534                                  	; the PDB as necessary.
 30535                                  
 30536 000053B6 E9850D                  	jmp	exit_inner
 30537                                  
 30538                                  ;** --------------------------------------------------------------------------
 30539                                  ;
 30540                                  ; reset_environment checks the DS value against the CurrentPDB. If they are
 30541                                  ; different, then an old-style return is performed. If they are the same,
 30542                                  ; then we release jfns and restore to parent. We still use the PDB at DS:0 as
 30543                                  ; the source of the terminate addresses.
 30544                                  ;
 30545                                  ; Some subtlety: We are about to issue a bunch of calls that *may* generate
 30546                                  ; INT 24s. We *cannot* allow the user to restart the abort process; we may
 30547                                  ; end up aborting the wrong process or turn a terminate/stay/resident into a
 30548                                  ; normal abort and leave interrupt handlers around. What we do is to set a
 30549                                  ; flag that will indicate that if any abort code is seen, we just continue the
 30550                                  ; operation. In essence, we dis-allow the abort response.
 30551                                  ;
 30552                                  ; output:   none.
 30553                                  ; ----------------------------------------------------------------------------
 30554                                  
 30555                                  	;entry	reset_environment
 30556                                  	
 30557                                  reset_environment:
 30558                                  	; 30/07/2018 - Retro DOS v3.0
 30559                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 588Ah 
 30560                                  
 30561                                  ;***	invoke	Reset_Version		; AN007 ;MS. reset version number
 30562                                  
 30563 000053B9 1E                      	PUSH	DS			; save PDB of process
 30564                                  
 30565                                  	; There are no critical sections in force. Although we may enter 
 30566                                  	; here with critical sections locked down, they are no longer 
 30567                                  	; relevant. We may safely free all allocated resources.
 30568                                  
 30569 000053BA B482                    	MOV	AH,82h
 30570                                  		; Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
 30571                                  	;int	2Ah 	
 30572 000053BC CD2A                    	INT	int_IBM
 30573                                  
 30574                                  					; SS override
 30575 000053BE 36C606[5903]FF          	MOV	byte [SS:fAborting],-1	; signal abort in progress
 30576                                  
 30577                                  					; DOS 4.00 doesn't need it
 30578                                  	;CallInstall NetResetEnvironment, MultNET, 34  
 30579                                  					; Allow REDIR to clear some stuff
 30580                                  					; On process exit.
 30581 000053C4 B82211                  	mov     ax, 1122h
 30582 000053C7 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK
 30583                                  			; SS = DOS CS
 30584                                  	;mov	al,22h	
 30585 000053C9 B022                    	MOV	AL,int_terminate
 30586 000053CB E8ACBA                  	call	_$GET_INTERRUPT_VECTOR	; and who to go to
 30587                                  
 30588 000053CE 59                      	POP	CX			; get ThisPDB
 30589 000053CF 06                      	push	es
 30590 000053D0 53                      	push	bx			; save return address
 30591                                  
 30592 000053D1 368B1E[3003]            	MOV	BX,[SS:CurrentPDB] 	; get currentPDB
 30593 000053D6 8EDB                    	MOV	DS,BX
 30594 000053D8 A11600                  	MOV	AX,[PDB.PARENT_PID]	; get parentPDB
 30595                                  
 30596                                  	; AX = parentPDB, BX = CurrentPDB, CX = ThisPDB
 30597                                  	; Only free handles if AX <> BX and BX = CX and [exit_code].upper 
 30598                                  	; is not Exit_keep_process
 30599                                  	
 30600 000053DB 39D8                    	CMP	AX,BX
 30601 000053DD 7418                    	JZ	short reset_return	; parentPDB = CurrentPDB
 30602 000053DF 39CB                    	CMP	BX,CX
 30603 000053E1 7514                    	JNZ	short reset_return	; CurrentPDB <> ThisPDB
 30604 000053E3 50                      	PUSH	AX			; save parent
 30605                                  
 30606                                  					; SS override
 30607                                  	;cmp	byte [SS:EXIT_TYPE],3
 30608 000053E4 36803E[7C05]03          	CMP	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS ; 15/08/2018
 30609 000053EA 7406                    	JZ	short reset_to_parent 	; keeping this process
 30610                                  
 30611                                  	; We are truly removing a process. Free all allocation blocks 
 30612                                  	; belonging to this PDB
 30613                                  
 30614                                  	;invoke	arena_free_process
 30615 000053EC E8870D                  	call	arena_free_process
 30616                                  
 30617                                  	; Kill off remainder of this process. Close file handles and signal 
 30618                                  	; to relevant network folks that this process is dead. Remember that 
 30619                                  	; CurrentPDB is STILL the current process!
 30620                                  
 30621                                  	;invoke	DOS_ABORT
 30622 000053EF E850DA                  	call	DOS_ABORT
 30623                                  
 30624                                  reset_to_parent:
 30625                                  					; SS override
 30626 000053F2 368F06[3003]            	POP	word [SS:CurrentPDB]	; set up process as parent
 30627                                  
 30628                                  reset_return:				; come here for normal return
 30629                                  	;Context DS			; DS is used to refer to DOSDATA  
 30630 000053F7 16                      	push	ss
 30631 000053F8 1F                      	pop	ds	
 30632                                  
 30633 000053F9 B0FF                    	MOV	AL,-1
 30634                                  
 30635                                  	; make sure that everything is clean In this case ignore any errors, 
 30636                                  	; we cannot "FAIL" the abort, the program being aborted is dead.
 30637                                  
 30638                                  	;EnterCrit critDisk
 30639 000053FB E8F5BE                  	call	ECritDisk
 30640                                  	;invoke	FLUSHBUF
 30641 000053FE E8A505                  	call	FLUSHBUF
 30642                                  	;LeaveCrit critDisk
 30643 00005401 E80ABF                  	call	LCritDisk
 30644                                  
 30645                                  	; Decrement open ref. count if we had done a virtual open earlier.
 30646                                  
 30647 00005404 E883F7                  	call	CHECK_VIRT_OPEN
 30648 00005407 FA                      	CLI
 30649 00005408 C606[2103]00            	MOV	BYTE [INDOS],0		; Go to known state
 30650 0000540D C606[2203]FF            	MOV	BYTE [WPERR],-1		; Forget about WP error
 30651 00005412 C606[5903]00            	MOV	byte [fAborting],0	; let aborts occur
 30652 00005417 8F06[8005]              	POP	WORD [EXITHOLD]
 30653 0000541B 8F06[8205]              	POP	WORD [EXITHOLD+2]
 30654                                  
 30655                                  	; Snake into multitasking... Get stack from CurrentPDB person
 30656                                  
 30657 0000541F 8E1E[3003]              	MOV	DS,[CurrentPDB]
 30658 00005423 8E163000                	MOV	SS,[PDB.USER_STACK+2]
 30659 00005427 8B262E00                	MOV	SP,[PDB.USER_STACK]
 30660                                  
 30661 0000542B E81DB0                  	call	restore_world
 30662                                  
 30663                                  	; 05/05/2019
 30664 0000542E 07                      	pop	es ; * ; MSDOS 6.21 (DOSCODE:94A8h, MSDOS.SYS)
 30665                                  
 30666                                  	; MSDOS 6.0
 30667 0000542F 50                      	push	ax			; set up ds, but save ds in TEMPSEG 
 30668 00005430 8CD8                    	mov	ax,ds			; and not on stack.
 30669                                  	;getdseg <ds>			; ds -> dosdata
 30670 00005432 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] 
 30671 00005437 A3[0A0D]                	mov	[TEMPSEG],ax
 30672 0000543A 58                      	pop	ax
 30673                                  					; set up ds to DOSDATA
 30674                                  	;MOV	[CS:USER_SP],AX ; MSDOS 3.3
 30675 0000543B A3[8405]                	mov	[USER_SP],ax
 30676                                  
 30677 0000543E 58                      	POP	AX			; suck off CS:IP of interrupt...
 30678 0000543F 58                      	POP	AX
 30679 00005440 58                      	POP	AX
 30680                                  
 30681                                  ; M011 : BEGIN
 30682                                  
 30683                                  	; MSDOS 3.3
 30684                                  ;	MOV	AX,0F202h	; STI
 30685                                  
 30686                                  	; MSDOS 6.0
 30687 00005441 9F                      	LAHF
 30688 00005442 86E0                    	XCHG	AH,AL
 30689 00005444 2402                    	AND	AL,2
 30690 00005446 B4F2                    	MOV	AH,0F2h
 30691                                  
 30692                                  ; M011 : END
 30693                                  
 30694                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30695 00005448 50                      	PUSH	AX
 30696                                   
 30697                                  	;PUSH	word [CS:EXITHOLD+2]
 30698                                  	;PUSH	word [CS:EXITHOLD]
 30699                                  	
 30700                                  	; MSDOS 6.0
 30701 00005449 FF36[8205]              	PUSH	word [EXITHOLD+2]
 30702 0000544D FF36[8005]              	PUSH	word [EXITHOLD]
 30703                                  
 30704                                  	;MOV	AX,[CS:USER_SP]
 30705                                  
 30706                                  	; MSDOS 6.0
 30707 00005451 A1[8405]                	MOV	AX,[USER_SP]
 30708 00005454 8E1E[0A0D]              	mov	ds,[TEMPSEG]	; restore ds
 30709                                  
 30710 00005458 CF                      	IRET			; Long return back to user terminate address
 30711                                  
 30712                                  ;---------------------------------------------------------------------------
 30713                                  ;
 30714                                  ; Procedure Name : SET_I24_EXTENDED_ERROR
 30715                                  ;
 30716                                  ; This routine handles extended error codes.
 30717                                  ; Input : DI = error code from device
 30718                                  ; Output: All EXTERR fields are set
 30719                                  ;
 30720                                  ;--------------------------------------------------------------------------
 30721                                  
 30722                                  SET_I24_EXTENDED_ERROR:
 30723 00005459 50                      	PUSH	AX
 30724                                  					; ErrMap24End is in DOSDATA
 30725 0000545A B8[BB0E]                	MOV	AX,ErrMap24End
 30726 0000545D 2D[AB0E]                	SUB	AX,ErrMap24
 30727                                  					; Change to dosdata to access 
 30728                                  					; ErrMap24 and EXTERR -SR
 30729                                  	; 05/05/2019 - Retro DOS v4.0
 30730                                  	
 30731                                  	; MSDOS 6.0
 30732 00005460 1E                      	push	ds
 30733                                  	;getdseg <ds>			; ds ->dosdata
 30734 00005461 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 30735                                  
 30736                                  	; AX is the index of the first unavailable error. Do not translate 
 30737                                  	; if greater or equal to AX.
 30738                                  
 30739 00005466 39C7                    	CMP	DI,AX
 30740 00005468 89F8                    	MOV	AX,DI
 30741 0000546A 7306                    	JAE	short NoTrans
 30742                                  
 30743                                  	;MOV	AL,[CS:DI+ErrMap24]  ; MSDOS 3.3
 30744 0000546C 8A85[AB0E]              	mov	al,[ErrMap24+di] ; MSDOS 6.0
 30745 00005470 30E4                    	XOR	AH,AH
 30746                                  NoTrans:
 30747                                  	;MOV	[CS:EXTERR],AX
 30748 00005472 A3[2403]                	mov	[EXTERR],AX
 30749 00005475 1F                      	pop	ds
 30750                                  	;assume	ds:nothing
 30751 00005476 58                      	POP	AX
 30752                                  
 30753                                  	; Now Extended error is set correctly. Translate it to get correct 
 30754                                  	; error locus class and recommended action.
 30755                                  
 30756 00005477 56                      	PUSH	SI
 30757                                  					; ERR_TABLE_24 is in DOSCODE 
 30758 00005478 BE[5B0E]                	MOV	SI,ERR_TABLE_24
 30759 0000547B E8FCB1                  	call	CAL_LK			; Set other extended error fields
 30760 0000547E 5E                      	POP	SI
 30761 0000547F C3                      	retn
 30762                                  
 30763                                  ;============================================================================
 30764                                  ; FAT.ASM, MSDOS 6.0, 1991
 30765                                  ;============================================================================
 30766                                  ; 30/07/2018 - Retro DOS v3.0
 30767                                  ; 20/05/2019 - Retro DOS v4.0
 30768                                  
 30769                                  ;	TITLE	FAT - FAT maintenance routines
 30770                                  ;	NAME	FAT
 30771                                  
 30772                                  ;**	FAT.ASM
 30773                                  ;----------------------------------------------------------------------------
 30774                                  ;	Low level local device routines for performing disk change sequence,
 30775                                  ;	setting cluster validity, and manipulating the FAT
 30776                                  ;
 30777                                  ;	IsEof
 30778                                  ;	UNPACK
 30779                                  ;	PACK
 30780                                  ;	MAPCLUSTER
 30781                                  ;	FATREAD_SFT
 30782                                  ;	FATREAD_CDS
 30783                                  ;	FAT_operation
 30784                                  ;
 30785                                  ;	Revision history:
 30786                                  ;
 30787                                  ;	  AN000  version Jan. 1988
 30788                                  ;	   A001  PTM	      -- disk changed for look ahead buffers
 30789                                  ;
 30790                                  ;	M014 - if a request for pack\unpack cluster 0 is made we write\read
 30791                                  ;	       from CL0FATENTRY rather than disk.
 30792                                  
 30793                                  ; DOSCODE:94FAh (MSDOS 6.21, MSDOS.SYS)
 30794                                  
 30795                                  ;Break <IsEOF - check the quantity in BX for EOF>
 30796                                  ;----------------------------------------------------------------------------
 30797                                  ;
 30798                                  ; Procedure Name : IsEOF
 30799                                  ;
 30800                                  ; IsEOF - check the fat value in BX for eof.
 30801                                  ;
 30802                                  ;   Inputs:	ES:BP point to DPB
 30803                                  ;		BX has fat value
 30804                                  ;   Outputs:	JAE eof
 30805                                  ;   Registers modified: none
 30806                                  ;
 30807                                  ;---------------------------------------------------------------------------
 30808                                  
 30809                                  IsEOF:
 30810                                  	;cmp	word [es:bp+0Dh],0FF6h
 30811 00005480 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; is this 16 bit fat?
 30812 00005486 730B                    	JAE	short EOF16			; yes, check for eof there
 30813                                  
 30814                                  ;J.K. 8/27/86
 30815                                  ;Modified to accept 0FF0h as an eof. This is to handle the diskfull case
 30816                                  ;of any media that has "F0"(Other) as a MediaByte.
 30817                                  ;Hopely, this does not create any side effect for those who may use any value
 30818                                  ;other than "FF8-FFF" as an EOF for their own file.
 30819                                  
 30820 00005488 81FBF00F                	cmp	bx,0FF0h
 30821 0000548C 7404                    	je	short IsEOF_other
 30822                                  
 30823 0000548E 81FBF80F                	CMP	BX,0FF8h		; do the 12 bit compare
 30824                                  IsEOF_other:
 30825 00005492 C3                      	retn
 30826                                  EOF16:
 30827 00005493 83FBF8                  	CMP	BX,0FFF8h		; 16 bit compare
 30828 00005496 C3                      	retn
 30829                                  
 30830                                  ; DOSCODE:9511h (MSDOS 6.21, MSDOS.SYS)
 30831                                  
 30832                                  ;Break	<UNPACK -- UNPACK FAT ENTRIES>
 30833                                  ;---------------------------------------------------------------------------
 30834                                  ;
 30835                                  ; Procedur Name : UNPACK
 30836                                  ;
 30837                                  ; Inputs:
 30838                                  ;	BX = Cluster number (may be full 16-bit quantity)
 30839                                  ;	ES:BP = Base of drive parameters
 30840                                  ; Outputs:
 30841                                  ;	DI = Contents of FAT for given cluster (may be full 16-bit quantity)
 30842                                  ;	Zero set means DI=0 (free cluster)
 30843                                  ;	Carry set means error (currently user FAILed to I 24)
 30844                                  ; SI Destroyed, No other registers affected. Fatal error if cluster too big.
 30845                                  ;
 30846                                  ; NOTE: if BX = 0 then DI = contents of CL0FATENTRY
 30847                                  ;
 30848                                  ;----------------------------------------------------------------------------
 30849                                  	
 30850                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30851                                  	; DOSCODE:94B5h (MSDOS 5.0, MSDOS.SYS)
 30852                                  
 30853                                  	; 20/05/2019 - Retro DOS v4.0
 30854                                  UNPACK:
 30855                                  	; MSDOS 6.0			; M014 - Start
 30856 00005497 09DB                    	or	bx, bx			; Q: are we unpacking cluster 0
 30857 00005499 7507                    	jnz	short up_cont		; N: proceed with normal unpack
 30858 0000549B 8B3E[8100]              	mov	di,[CL0FATENTRY]	; Y: return value in CL0FATENTRY
 30859 0000549F 09FF                    	or	di,di 			; return z if di=0
 30860 000054A1 C3                      	retn				; done
 30861                                  up_cont:				; M014 - End
 30862                                  	; MSDOS 3.3 & MSDOS 6.0
 30863                                  	;cmp	bx,[es:bp+0Dh]
 30864 000054A2 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 30865 000054A6 7726                    	JA	short HURTFAT
 30866 000054A8 E8D600                  	CALL	MAPCLUSTER
 30867 000054AB 721E                    	jc	short _DoContext
 30868 000054AD 8B3D                    	MOV	DI,[DI]
 30869 000054AF 750E                    	JNZ	short High12		; MZ if high 12 bits, go get 'em
 30870 000054B1 268B760D                	MOV	SI,[ES:BP+DPB.MAX_CLUSTER] ; MZ is this 16-bit fat?
 30871 000054B5 81FEF60F                	CMP	SI,4096-10
 30872 000054B9 720C                    	JB	short Unpack12		; MZ No, go 'AND' off bits
 30873 000054BB 09FF                    	OR	DI,DI			; MZ set zero condition code, clears carry
 30874 000054BD EB0C                    	JMP	SHORT _DoContext 	; MZ go do context
 30875                                  High12:
 30876 000054BF D1EF                    	SHR	DI,1
 30877 000054C1 D1EF                    	SHR	DI,1
 30878 000054C3 D1EF                    	SHR	DI,1
 30879 000054C5 D1EF                    	SHR	DI,1
 30880                                  Unpack12:
 30881 000054C7 81E7FF0F                	AND	DI,0FFFh		; Clears carry
 30882                                  _DoContext:
 30883 000054CB 16                      	PUSH	SS
 30884 000054CC 1F                      	POP	DS
 30885 000054CD C3                      	retn
 30886                                  HURTFAT:
 30887                                  	;;mov	word [es:bp+1Eh],0FFFFh
 30888                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 30889 000054CE 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; Err in FAT must force recomp of freespace
 30890 000054D4 50                      	PUSH	AX
 30891 000054D5 B488                    	MOV	AH,Allowed_FAIL+80h ; 88h
 30892                                  
 30893                                  ;hkn; SS override
 30894 000054D7 36C606[4B03]08          	MOV	byte [SS:ALLOWED],Allowed_FAIL ; 8
 30895                                  ;
 30896                                  ; Signal Bad FAT to INT int_fatal_abort handler. We have an invalid cluster.
 30897                                  ;
 30898 000054DD BFFF0F                  	MOV	DI,0FFFh		; In case INT int_fatal_abort returns (it shouldn't)
 30899 000054E0 E8C8FD                  	call	FATAL
 30900 000054E3 3C03                    	CMP	AL,3
 30901 000054E5 F8                      	CLC
 30902 000054E6 7501                    	JNZ	short OKU_RET 		; Try to ignore bad FAT
 30903 000054E8 F9                      	STC				; User said FAIL
 30904                                  OKU_RET:
 30905 000054E9 58                      	POP	AX
 30906                                  hurtfat_retn:
 30907 000054EA C3                      	retn
 30908                                  
 30909                                  ; DOSCODE:9565h (MSDOS 6.21, MSDOS.SYS)
 30910                                  
 30911                                  ;Break	<PACK -- PACK FAT ENTRIES>
 30912                                  ;----------------------------------------------------------------------------
 30913                                  ;
 30914                                  ; Procedure Name : PACK
 30915                                  ;
 30916                                  ; Inputs:
 30917                                  ;	BX = Cluster number
 30918                                  ;	DX = Data
 30919                                  ;	ES:BP = Pointer to drive DPB
 30920                                  ; Outputs:
 30921                                  ;	The data is stored in the FAT at the given cluster.
 30922                                  ;	SI,DX,DI all destroyed
 30923                                  ;	Carry set means error (currently user FAILed to I 24)
 30924                                  ;	No other registers affected
 30925                                  ;
 30926                                  ; NOTE: if BX = 0 then data in DX is stored in CL0FATENTRY.
 30927                                  ;
 30928                                  ;---------------------------------------------------------------------------
 30929                                  
 30930                                  	; 02/01/2024
 30931                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30932                                  	; 20/05/2019 - Retro DOS v4.0
 30933                                  PACK:
 30934                                  	; MSDOS 6.0			; M014 - start
 30935 000054EB 09DB                    	or	bx,bx			; Q: are we packing cluster 0
 30936 000054ED 7505                    	jnz	short p_cont		; N: proceed with normal pack
 30937 000054EF 8916[8100]              	mov	[CL0FATENTRY],dx	; Y: place value in CL0FATENTRY
 30938 000054F3 C3                      	retn				; done
 30939                                  p_cont:					; M014 - end
 30940                                  	; MSDOS 3.3 & MSDOS 6.0
 30941 000054F4 E88A00                  	CALL	MAPCLUSTER
 30942 000054F7 72D2                    	JC	short _DoContext
 30943 000054F9 8B35                    	MOV	SI,[DI]
 30944 000054FB 740B                    	JZ	short ALIGNED 		; byte (not nibble) aligned
 30945 000054FD 51                      	PUSH	CX			; move data to upper 12 bits
 30946 000054FE B104                    	MOV	CL,4
 30947 00005500 D3E2                    	SHL	DX,CL
 30948 00005502 59                      	POP	CX
 30949 00005503 83E60F                  	AND	SI,0FH			; leave in original low 4 bits
 30950 00005506 EB14                    	JMP	SHORT PACKIN
 30951                                  ALIGNED:
 30952                                  	;cmp	word [es:bp+0Dh],0FF6h
 30953 00005508 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ 16 bit fats?
 30954 0000550E 730A                    	JAE	short Pack16		; MZ yes, go clobber original data
 30955 00005510 81E600F0                	AND	SI,0F000h		; MZ leave in upper 4 bits of original
 30956 00005514 81E2FF0F                	AND	DX,0FFFh		; MZ store only 12 bits
 30957 00005518 EB02                    	JMP	SHORT PACKIN		; MZ go store
 30958                                  Pack16:
 30959 0000551A 31F6                    	XOR	SI,SI			; MZ no original data
 30960                                  PACKIN:
 30961 0000551C 09D6                    	OR	SI,DX
 30962 0000551E 8935                    	MOV	[DI],SI
 30963                                  
 30964                                  ;hkn; SS override
 30965 00005520 36C536[E205]            	LDS	SI,[SS:CURBUF]
 30966                                  	; MSDOS 6.0
 30967 00005525 F6440540                	TEST	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 30968                                  					;LB. if already dirty		  ;AN000;
 30969 00005529 7507                    	JNZ	short yesdirty11	;LB.  don't increment dirty count ;AN000;
 30970                                  	; 10/06/2019
 30971 0000552B E87D05                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 30972                                  	
 30973                                  	;or	byte [si+5],40h
 30974 0000552E 804C0540                	OR	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 30975                                  yesdirty11:				;LB.				;AN000;
 30976                                  ;hkn; SS override
 30977 00005532 36803E[7805]00          	CMP	BYTE [SS:CLUSSPLIT],0	; 15/08/2018
 30978                                  ;hkn; SS is DOSDATA
 30979 00005538 16                      	push	ss
 30980 00005539 1F                      	pop	ds
 30981 0000553A 74AE                    	jz	short hurtfat_retn	; Carry clear
 30982 0000553C 50                      	PUSH	AX
 30983 0000553D 53                      	PUSH	BX
 30984 0000553E 51                      	PUSH	CX
 30985 0000553F A1[8E05]                	MOV	AX,[CLUSSAVE]
 30986 00005542 8E1E[E405]              	MOV	DS,[CURBUF+2]
 30987                                  	;;add	si,16 ; MSDOS 3.3
 30988                                  	;add	si,20 ; MSDOS 6.0
 30989 00005546 83C614                  	ADD	SI,BUFINSIZ
 30990 00005549 8824                    	MOV	[SI],AH
 30991                                  ;hkn; SS is DOSDATA
 30992                                  	;Context DS
 30993 0000554B 16                      	push	ss
 30994 0000554C 1F                      	pop	ds
 30995                                  	
 30996 0000554D 50                      	PUSH	AX
 30997                                  	
 30998                                  	; MSDOS 6.0
 30999 0000554E 8B16[9205]              	MOV	DX,[CLUSSEC+2]		;F.C. >32mb			;AN000;
 31000 00005552 8916[0706]              	MOV	[HIGH_SECTOR],DX	;F.C. >32mb			;AN000;
 31001                                  
 31002                                  	; MSDOS 3.3 & MSDOS 6.0
 31003 00005556 8B16[9005]              	MOV	DX,[CLUSSEC]
 31004                                  
 31005                                  	;MOV	SI,1	  ; *
 31006                                  	;XOR	AL,AL     ; *
 31007                                  	;call	GETBUFFRB ; *
 31008                                  	; 22/09/2023
 31009 0000555A E83E03                  	call	GETBUFFRA ; *
 31010                                  
 31011 0000555D 58                      	POP	AX
 31012 0000555E 721B                    	JC	short POPP_RET
 31013 00005560 C53E[E205]              	LDS	DI,[CURBUF]
 31014                                  	
 31015                                  	; MSDOS 6.0
 31016 00005564 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 31017                                  					;LB. if already dirty		  ;AN000;
 31018 00005568 7507                    	JNZ	short yesdirty12	;LB.  don't increment dirty count ;AN000;
 31019 0000556A E83E05                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 31020                                  	
 31021                                  	;or	byte [di+5],40h
 31022 0000556D 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 31023                                  yesdirty12:
 31024                                  	;;add	di,16
 31025                                  	;add	di,20 ; MSDOS 6.0
 31026                                  	; 02/01/2024
 31027                                  	;ADD	DI,BUFINSIZ
 31028                                  	;DEC	DI
 31029 00005571 83C713                  	add	di,BUFINSIZ-1 ; 19
 31030                                  
 31031                                  	;add	di,[es:bp+2]
 31032 00005574 26037E02                	ADD	DI,[ES:BP+DPB.SECTOR_SIZE]
 31033 00005578 8805                    	MOV	[DI],AL
 31034 0000557A F8                      	CLC
 31035                                  POPP_RET:
 31036 0000557B 16                      	PUSH	SS
 31037 0000557C 1F                      	POP	DS
 31038 0000557D 59                      	POP	CX
 31039 0000557E 5B                      	POP	BX
 31040 0000557F 58                      	POP	AX
 31041 00005580 C3                      	retn
 31042                                  
 31043                                  ; 31/07/2018 - Retro DOS v3.0
 31044                                  
 31045                                  ;Break	<MAPCLUSTER - BUFFER A FAT SECTOR>
 31046                                  ;---------------------------------------------------------------------------
 31047                                  ;
 31048                                  ; Procedure Name : MAPCLUSTER
 31049                                  ;
 31050                                  ; Inputs:
 31051                                  ;	ES:BP Points to DPB
 31052                                  ;	BX Is cluster number
 31053                                  ; Function:
 31054                                  ;	Get a pointer to the cluster
 31055                                  ; Outputs:
 31056                                  ;	DS:DI Points to contents of FAT for given cluster
 31057                                  ;	DS:SI Points to start of buffer
 31058                                  ;	Zero Not set if cluster data is in high 12 bits of word
 31059                                  ;	Zero set if cluster data is in low 12 or 16 bits
 31060                                  ;	Carry set if failed.
 31061                                  ; SI is destroyed.
 31062                                  ;
 31063                                  ;---------------------------------------------------------------------------
 31064                                  
 31065                                  	; 20/05/2019 - Retro DOS v4.0
 31066                                  	; DOSCODE:9601h (MSDOS 6.21, MSDOS.SYS)
 31067                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31068                                  	; DOSCODE:95A5h (MSDOS 5.0, MSDOS.SYS)
 31069                                  
 31070                                  MAPCLUSTER:
 31071                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5A15h
 31072 00005581 C606[7805]00            	MOV	BYTE [CLUSSPLIT],0
 31073                                  	;SAVE	<AX,BX,CX,DX>
 31074 00005586 50                      	push	ax
 31075 00005587 53                      	push	bx
 31076 00005588 51                      	push	cx
 31077 00005589 52                      	push	dx
 31078 0000558A 89D8                    	MOV	AX,BX			; AX = BX
 31079 0000558C 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10  ; MZ 16 bit fat?
 31080 00005592 7302                    	JAE	short Map16		; MZ yes, do 16 bit algorithm
 31081 00005594 D1E8                    	SHR	AX,1			; AX = BX/2
 31082                                  Map16:	
 31083                                  	; MSDOS 6.0			; MZ skip prev => AX=2*BX
 31084 00005596 31FF                    	XOR	DI,DI ; *		; >32mb fat ;AN000;
 31085                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31086 00005598 01D8                    	ADD	AX,BX			; AX = 1.5*fat = byte offset in fat
 31087 0000559A 11FF                    	ADC	DI,DI ; * MSDOS 6.0	; >32mb fat ;DI is zero before op;AN000;
 31088 0000559C 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE]
 31089                                  
 31090                                  ;IF FastDiv
 31091                                  ;
 31092                                  ; Gross hack: 99% of all disks have 512 bytes per sector. We test for this
 31093                                  ; case and apply a really fast algorithm to get the desired results
 31094                                  ;
 31095                                  ; Divide method takes 157+4*4=173 (MOV and DIV)
 31096                                  ; Fast method takes 39+20*4=119
 31097                                  ;
 31098                                  ; This saves a bunch.
 31099                                  
 31100 000055A0 81F90002                	CMP	CX,512			; 4  Is this 512 byte sector?
 31101 000055A4 7510                    	jne	short _DoDiv		; 4  for no jump
 31102 000055A6 89C2                    	MOV	DX,AX			; 2  get set for remainder
 31103 000055A8 81E2FF01                	AND	DX,512-1		; 4  Form remainder
 31104 000055AC 88E0                    	MOV	AL,AH			; 2  Quotient in formation in AL
 31105                                  	; MDOS 3.3
 31106                                  	;shr	al,1	
 31107                                  	; MDOS 6.0
 31108 000055AE D1EF                    	shr	di,1			; 2
 31109 000055B0 D0D8                    	rcr	al,1			; 2
 31110                                  	; MDOS 3.3 (& MSDOS 6.0)
 31111 000055B2 30E4                    	xor	ah,ah			; 3
 31112 000055B4 EB04                    	jmp	short DivDone		; 16
 31113                                  _DoDiv:
 31114                                  ;ENDIF
 31115                                  	; MSDOS 3.3
 31116                                  	;xor	dx,dx
 31117                                  	; MSDOS 6.0
 31118 000055B6 89FA                    	mov	dx,di			; 2
 31119                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 31120 000055B8 F7F1                    	DIV	CX			; 155 AX is FAT sector # DX is sector index
 31121                                  ;IF FastDiv
 31122                                  DivDone:
 31123                                  ;ENDIF
 31124                                  	;add	ax,[es:bp+6]
 31125 000055BA 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
 31126 000055BE 49                      	DEC	CX			; CX is sector size - 1
 31127                                  	;SAVE	<AX,DX,CX>
 31128 000055BF 50                      	push	ax
 31129 000055C0 52                      	push	dx
 31130 000055C1 51                      	push	cx
 31131 000055C2 89C2                    	MOV	DX,AX
 31132                                  
 31133                                  	; MSDOS 6.0
 31134                                  	; 22/09/2023
 31135                                  	;MOV	word [HIGH_SECTOR],0 ; *! ;F.C. >32mb  low sector #
 31136                                  	;
 31137                                  	; MDOS 3.3 (& MSDOS 6.0)
 31138                                  	;XOR	AL,AL	   ; *
 31139                                  	;MOV	SI,1	   ; *
 31140                                  	;;invoke GETBUFFRB ; *
 31141                                  	;call	GETBUFFRB  ; *
 31142                                  	; 22/09/2023
 31143 000055C4 E8CE02                  	call	GETBUFFRC  ; *!
 31144                                  
 31145                                  	;RESTORE <CX,AX,DX>		; CX is sec siz-1, AX is offset in sec
 31146 000055C7 59                      	pop	cx
 31147 000055C8 58                      	pop	ax
 31148 000055C9 5A                      	pop	dx
 31149 000055CA 724C                    	JC	short MAP_POP
 31150                                  
 31151 000055CC C536[E205]              	LDS	SI,[CURBUF]
 31152                                  	;;lea	di,[si+16]
 31153                                  	;lea	di,[si+20] ; MSDOS 6.0
 31154 000055D0 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 31155 000055D3 01C7                    	ADD	DI,AX
 31156 000055D5 39C8                    	CMP	AX,CX
 31157 000055D7 752C                    	JNZ	short MAPRET
 31158 000055D9 8A05                    	MOV	AL,[DI]
 31159                                  	;Context DS		 	;hkn; SS is DOSDATA
 31160 000055DB 16                      	push	ss
 31161 000055DC 1F                      	pop	ds	
 31162 000055DD FE06[7805]              	INC	BYTE [CLUSSPLIT]
 31163 000055E1 A2[8E05]                	MOV	[CLUSSAVE],AL
 31164 000055E4 8916[9005]              	MOV	[CLUSSEC],DX
 31165                                  	; MSDOS 6.0
 31166 000055E8 C706[9205]0000          	MOV	WORD [CLUSSEC+2],0      ;F.C. >32mb	;AN000;
 31167 000055EE 42                      	INC	DX
 31168                                  
 31169                                  	; 22/09/2023
 31170                                  	;MOV	word [HIGH_SECTOR],0 ; *! ;F.C. >32mb FAT sector <32mb ;AN000;
 31171                                  	;
 31172                                  	; MDOS 3.3 (& MSDOS 6.0)
 31173                                  	;XOR	AL,AL	   ; *
 31174                                  	;MOV	SI,1	   ; *
 31175                                  	;;invoke GETBUFFRB ; *
 31176                                  	;call	GETBUFFRB  ; *
 31177                                  	; 22/09/2023
 31178 000055EF E8A302                  	call	GETBUFFRC  ; *!
 31179 000055F2 7224                    	JC	short MAP_POP
 31180                                  
 31181 000055F4 C536[E205]              	LDS	SI,[CURBUF]
 31182 000055F8 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 31183 000055FB 8A05                    	MOV	AL,[DI]
 31184                                  	;Context DS			;hkn; SS is DOSDATA
 31185 000055FD 16                      	push	ss
 31186 000055FE 1F                      	pop	ds
 31187 000055FF A2[8F05]                	MOV	[CLUSSAVE+1],AL
 31188                                  
 31189                                  ;hkn; CLUSSAVE is in DOSDATA
 31190 00005602 BF[8E05]                	MOV	DI,CLUSSAVE
 31191                                  MAPRET:
 31192                                  	;RESTORE <DX,CX,BX>
 31193 00005605 5A                      	pop	dx
 31194 00005606 59                      	pop	cx
 31195 00005607 5B                      	pop	bx
 31196 00005608 31C0                    	XOR	AX,AX			; MZ allow shift to clear carry
 31197 0000560A 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ is this 16-bit fat?
 31198 00005610 7302                    	JAE	short MapSet		; MZ no, set flags
 31199 00005612 89D8                    	MOV	AX,BX
 31200                                  MapSet:
 31201 00005614 A801                    	TEST	AL,1			; set zero flag if not on boundary
 31202                                  	;RESTORE <AX>
 31203 00005616 58                      	pop	ax
 31204 00005617 C3                      	retn
 31205                                  
 31206                                  MAP_POP:
 31207                                  	;RESTORE <DX,CX,BX,AX>
 31208 00005618 5A                      	pop	dx
 31209 00005619 59                      	pop	cx
 31210 0000561A 5B                      	pop	bx
 31211 0000561B 58                      	pop	ax
 31212                                  fatread_sft_retn: ; 17/12/2022
 31213 0000561C C3                      	retn
 31214                                  
 31215                                  ; 20/05/2019 - Retro DOS v4.0
 31216                                  ; DOSCODE:96B3h (MSDOS 6.21, MSDOS.SYS)
 31217                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31218                                  ; DOSCODE:9657h (MSDOS 5.0, MSDOS.SYS)
 31219                                  
 31220                                  ;Break	<FATREAD_SFT/FATREAD_CDS -- CHECK DRIVE GET FAT>
 31221                                  ;----------------------------------------------------------------------------
 31222                                  ;
 31223                                  ; Procedure Name : FATREAD_SFT
 31224                                  ;
 31225                                  ; Inputs:
 31226                                  ;	ES:DI points to an SFT for the drive of intrest (local only,
 31227                                  ;		giving a NET SFT will produce system crashing results).
 31228                                  ;	DS DOSDATA
 31229                                  ; Function:
 31230                                  ;	Can be used by an SFT routine (like CLOSE) to invalidate buffers
 31231                                  ;	if disk changed.
 31232                                  ;	In other respects, same as FATREAD_CDS.
 31233                                  ;	(note ES:DI destroyed!)
 31234                                  ; Outputs:
 31235                                  ;	Carry set if error (currently user FAILed to I 24)
 31236                                  ; NOTE: This routine may cause FATREAD_CDS to "miss" a disk change
 31237                                  ;	as far as invalidating curdir_ID is concerned.
 31238                                  ;	Since getting a true disk changed on this call is a screw up
 31239                                  ;	anyway, that's the way it goes.
 31240                                  ;
 31241                                  ;---------------------------------------------------------------------------
 31242                                  
 31243                                  FATREAD_SFT:
 31244 0000561D 26C46D07                	LES	BP,[ES:DI+SF_ENTRY.sf_devptr]
 31245                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31246                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 31247                                  	; 15/12/2022
 31248 00005621 268A4600                	mov	AL,[ES:BP]
 31249 00005625 A2[7605]                	MOV	[THISDRV],AL
 31250 00005628 E803B0                  	call	GOTDPB			;Set THISDPB
 31251                                  	;CALL	FAT_GOT_DPB
 31252                                  	; 17/12/2022
 31253 0000562B EB78                    	jmp	FAT_GOT_DPB
 31254                                  ;fatread_sft_retn:
 31255                                  	;retn
 31256                                  
 31257                                  ;----------------------------------------------------------------------------
 31258                                  ;
 31259                                  ; Procedure Name : FATREAD_CDS
 31260                                  ;
 31261                                  ; Inputs:
 31262                                  ;	DS:DOSDATA
 31263                                  ;	ES:DI points to an CDS for the drive of intrest (local only,
 31264                                  ;		giving a NET or NUL CDS will produce system crashing results).
 31265                                  ; Function:
 31266                                  ;	If disk may have been changed, media is determined and buffers are
 31267                                  ;	flagged invalid. If not, no action is taken.
 31268                                  ; Outputs:
 31269                                  ;	ES:BP = Drive parameter block
 31270                                  ;	THISDPB = ES:BP
 31271                                  ;	THISDRV set
 31272                                  ;	Carry set if error (currently user FAILed to I 24)
 31273                                  ; DS preserved , all other registers destroyed
 31274                                  ;
 31275                                  ;---------------------------------------------------------------------------
 31276                                  
 31277                                  	; 20/05/2019 - Retro DOS v4.0
 31278                                  	; DOSCODE:96C5h (MSDOS 6.21, MSDOS.SYS)
 31279                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31280                                  	; DOSCODE:9669h (MSDOS 5.0, MSDOS.SYS)
 31281                                  
 31282                                  FATREAD_CDS:
 31283 0000562D 06                      	PUSH	ES
 31284 0000562E 57                      	PUSH	DI
 31285                                  	;les	bp,[es:di+45h]
 31286 0000562F 26C46D45                	LES	BP,[ES:DI+curdir.devptr]
 31287                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31288                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 31289                                  	; 15/12/2022
 31290 00005633 268A4600                	mov	AL,[ES:BP]
 31291 00005637 A2[7605]                	MOV	[THISDRV],AL
 31292 0000563A E8F1AF                  	call	GOTDPB			;Set THISDPB
 31293 0000563D E86500                  	CALL	FAT_GOT_DPB
 31294 00005640 5F                      	POP	DI			;Get back CDS pointer
 31295 00005641 07                      	POP	ES
 31296 00005642 72D8                    	jc	short fatread_sft_retn
 31297 00005644 7538                    	JNZ	short NO_CHANGE		;Media NOT changed
 31298                                  
 31299                                  ;	Media changed. We now need to find all CDS structures which use this
 31300                                  ;	DPB and invalidate their ID pointers.
 31301                                  
 31302                                  MED_CHANGE:
 31303 00005646 31C0                    	XOR	AX,AX
 31304 00005648 48                      	DEC	AX			; AX = -1
 31305 00005649 1E                      	PUSH	DS
 31306 0000564A 8A0E[4700]              	MOV	CL,[CDSCOUNT]
 31307 0000564E 30ED                    	XOR	CH,CH			; CX is number of structures
 31308                                  	;lds	si,[es:di+45h]
 31309 00005650 26C57545                	LDS	SI,[ES:DI+curdir.devptr] ; Find all CDS with this devptr
 31310                                  
 31311                                  ;hkn; SS override
 31312                                  
 31313                                  ;	Find all CDSs with this DevPtr
 31314                                  ;
 31315                                  ;	(ax) = -1
 31316                                  ;	(ds:si) = DevPtr
 31317                                  
 31318 00005654 36C43E[3C00]            	LES	DI,[SS:CDSADDR]		; (es:di) = CDS pointer
 31319                                  frcd20: 
 31320                                  	;;test	word [es:di+43h],8000h
 31321                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 31322 00005659 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 31323 0000565E 7518                    	JNZ	short frcd25		; Leave NET guys alone!!
 31324                                  
 31325                                  	; MSDOS 3.3
 31326                                  	;push	es
 31327                                  	;push	di
 31328                                  	;les	di,[es:di+45h]
 31329                                  	;;les	di,[ES:DI+curdir.devptr]
 31330                                  	;call	POINTCOMP
 31331                                  	;pop	di
 31332                                  	;pop	es
 31333                                  	;jnz	short frcd25
 31334                                  
 31335                                  	; MSDOS 6.0
 31336 00005660 263B7545                	cmp	si,[ES:DI+curdir.devptr]
 31337 00005664 7512                    	jne	short frcd25		; no match
 31338 00005666 8CDB                    	mov	bx,ds
 31339 00005668 263B5D47                	cmp	bx,[ES:DI+curdir.devptr+2]
 31340 0000566C 750A                    	jne	short frcd25		; CDS not for this drive
 31341                                  
 31342                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31343                                  	;test	[es:di+49h],ax
 31344 0000566E 26854549                	test	[ES:DI+curdir.ID],AX
 31345 00005672 7404                    	JZ	short frcd25		; If root (0), leave root
 31346                                  	;mov	[es:di+49h],ax
 31347 00005674 26894549                	MOV	[ES:DI+curdir.ID],AX	; else invalid
 31348                                  frcd25:	
 31349                                  	;;add	di,81  ; MSDOS 3.3
 31350                                  	;add	di,88  ; MSDOS 6.0	 
 31351 00005678 83C758                  	ADD	DI,curdir.size		; Point to next CDS
 31352 0000567B E2DC                    	LOOP	frcd20
 31353 0000567D 1F                      	POP	DS
 31354                                  NO_CHANGE:
 31355 0000567E C42E[8A05]              	LES	BP,[THISDPB]
 31356 00005682 F8                      	CLC
 31357 00005683 C3                      	retn
 31358                                  
 31359                                  ;Break	<Fat_Operation - miscellaneous fat stuff>
 31360                                  ;----------------------------------------------------------------------------
 31361                                  ;
 31362                                  ; Procedure Name : FAT_operation
 31363                                  ;
 31364                                  ;----------------------------------------------------------------------------
 31365                                  
 31366                                  	; 03/01/2024
 31367                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31368                                  
 31369                                  FAT_operation:
 31370                                  	; 31/07/2018 - Retro DOS v3.0
 31371                                  FATERR:
 31372                                  	;mov	word [es:bp+1Eh],-1
 31373                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
 31374 00005684 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 
 31375                                  					; Err in FAT must force recomp of freespace
 31376                                  	;and	di,0FFh
 31377 0000568A 81E7FF00                	AND	DI,STECODE		; Put error code in DI
 31378                                  	;mov	byte [ALLOWED],18h
 31379 0000568E C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 31380                                  	;mov	ah,1Ah
 31381 00005693 B41A                    	MOV	AH,2+Allowed_FAIL+Allowed_RETRY ; While trying to read FAT
 31382 00005695 A0[7605]                	MOV	AL,[THISDRV]		; Tell which drive
 31383 00005698 E814FC                  	call	FATAL1
 31384 0000569B C42E[8A05]              	LES	BP,[THISDPB]
 31385 0000569F 3C03                    	CMP	AL,3
 31386 000056A1 7502                    	JNZ	short FAT_GOT_DPB	; User said retry
 31387 000056A3 F9                      	STC				; User said FAIL
 31388 000056A4 C3                      	retn
 31389                                  
 31390                                  FAT_GOT_DPB:
 31391                                  	;Context DS			;hkn; SS is DOSDATA
 31392 000056A5 16                      	push	ss			
 31393 000056A6 1F                      	pop	ds
 31394                                  	;mov	al,0Fh
 31395 000056A7 B00F                    	MOV	AL,DMEDHL
 31396                                  	;mov	ah,[es:bp+1]
 31397 000056A9 268A6601                	MOV	AH,[ES:BP+DPB.UNIT] 
 31398 000056AD A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018 
 31399 000056B0 C606[5C03]01            	MOV	BYTE [DEVCALL_REQFUNC],DEVMDCH
 31400 000056B5 C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 31401                                  	;;mov	al,[es:bp+16h]
 31402                                  	;mov	al,[es:bp+17h] ; MSDOS 6.0
 31403 000056BB 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 31404 000056BF A2[6703]                	MOV	[CALLMED],AL
 31405 000056C2 06                      	PUSH	ES
 31406 000056C3 1E                      	PUSH	DS
 31407                                  
 31408                                  ;hkn; DEVCALL is in DOSDATA
 31409 000056C4 BB[5A03]                	MOV	BX,DEVCALL
 31410                                  	;;lds	si,[es:bp+12h]
 31411                                  	;lds	si,[es:bp+13h] ; MSDOS 6.0
 31412 000056C7 26C57613                	LDS	SI,[ES:BP+DPB.DRIVER_ADDR] ; DS:SI Points to device header
 31413 000056CB 07                      	POP	ES			; ES:BX Points to call header
 31414 000056CC E8EDEE                  	call	DEVIOCALL2
 31415                                  	;Context DS		 	;hkn; SS is DOSDATA
 31416 000056CF 16                      	push	ss
 31417 000056D0 1F                      	pop	ds
 31418 000056D1 07                      	POP	ES			; Restore ES:BP
 31419 000056D2 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 31420                                  	;test	di,8000h
 31421                                  	;jnz	short FATERR
 31422 000056D6 09FF                    	or	di,di
 31423 000056D8 78AA                    	js	short FATERR		; have error
 31424 000056DA 30E4                    	XOR	AH,AH
 31425                                  	;xchg	ah,[es:bp+17h] ; MSDOS 3.3
 31426                                  	;xchg	ah,[es:bp+18h] ; MSDOS 6.0
 31427 000056DC 26866618                	XCHG	AH,[ES:BP+DPB.FIRST_ACCESS] ; Reset dpb_first_access
 31428 000056E0 A0[7605]                	MOV	AL,[THISDRV]		; Use physical unit number
 31429                                  ; See if we had changed volume id by creating one on the diskette
 31430 000056E3 3806[A10A]              	cmp	[VOLCHNG_FLAG],AL
 31431 000056E7 7508                    	jnz	short CHECK_BYT
 31432 000056E9 C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1
 31433 000056EE E9A500                  	jmp	GOGETBPB		; Need to get device driver to read in
 31434                                  					; new volume label.
 31435                                  CHECK_BYT:
 31436 000056F1 0A26[6803]              	OR	AH,[CALLRBYT]
 31437                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 31438                                  	;JMP	short NEWDSK
 31439                                  	; 17/12/2022
 31440 000056F5 7863                    	js	short NEWDSK
 31441                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31442                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 31443                                  	;JMP	short NEWDSK
 31444                                  
 31445                                  CHECK_ZR:
 31446 000056F7 743B                    	JZ	short CHKBUFFDIRT	; jump if I don't know
 31447                                  	; 24/09/2023
 31448                                  	; cf=0 (after 'or' instruction)
 31449                                  	;CLC
 31450 000056F9 C3                      	retn				; If Media not changed (NZ)
 31451                                  
 31452                                  DISK_CHNG_ERR:
 31453 000056FA 06                      	PUSH	ES
 31454 000056FB 55                      	PUSH	BP
 31455                                  	;;les	bp,[es:bp+12h]
 31456                                  	;les	bp,[es:bp+13h] ; MSDOS 6.0
 31457 000056FC 26C46E13                	LES	BP,[ES:BP+DPB.DRIVER_ADDR] ; Get device pointer
 31458                                  	;;test	word [es:bp+4],800h
 31459                                  	;TEST	word [ES:BP+SYSDEV.ATT],DEVOPCL ; Did it set vol id?
 31460 00005700 26F6460508              	test	byte [es:bp+SYSDEV.ATT+1],(DEVOPCL>>8)
 31461 00005705 5D                      	POP	BP
 31462 00005706 07                      	POP	ES
 31463 00005707 7426                    	JZ	short FAIL_OPJ2		; Nope, FAIL
 31464 00005709 1E                      	PUSH	DS			; Save buffer pointer for ignore
 31465 0000570A 57                      	PUSH	DI
 31466 0000570B 16                      	push	ss			;hkn; SS is DOSDATA
 31467 0000570C 1F                      	pop	ds
 31468                                  	;mov	byte [ALLOWED],18h
 31469 0000570D C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 31470 00005712 06                      	PUSH	ES
 31471 00005713 C43E[6903]              	LES	DI,[CALLVIDM]		; Get volume ID pointer
 31472 00005717 8C06[2A03]              	MOV	[EXTERRPT+2],ES
 31473 0000571B 07                      	POP	ES
 31474 0000571C 893E[2803]              	MOV	[EXTERRPT],DI
 31475                                  	;mov	ax,0Fh
 31476 00005720 B80F00                  	MOV	AX,error_I24_wrong_disk
 31477 00005723 C606[7505]01            	MOV	byte [READOP],1		; Write
 31478                                  	;invoke	HARDERR
 31479 00005728 E832FB                  	call	HARDERR
 31480 0000572B 5F                      	POP	DI			; Get back buffer for ignore
 31481 0000572C 1F                      	POP	DS
 31482 0000572D 3C03                    	CMP	AL,3
 31483                                  FAIL_OPJ2:
 31484 0000572F 741C                    	JZ	short FAIL_OP
 31485 00005731 E971FF                  	JMP	FAT_GOT_DPB		; Retry
 31486                                  
 31487                                  CHKBUFFDIRT:
 31488                                  	; 20/05/2019 - Retro DOS v4.0
 31489                                  
 31490                                  	; MSDOS 3.3
 31491                                  	;lds	di,[BUFFHEAD]
 31492                                  
 31493                                  	; MSDOS 6.0
 31494 00005734 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0	; any dirty buffers ? ;hkn;
 31495 0000573A 741E                    	je	short NEWDSK			; no, skip the check
 31496 0000573C E8F100                  	call	GETCURHEAD			; get pointer to first buffer
 31497                                  nbuffer:
 31498                                  	;cmp	al,[di+4]
 31499 0000573F 384504                  	cmp	[di+BUFFINFO.buf_ID],al	; Unit OK ?
 31500 00005742 750D                    	jne	short lfnxt			; no, go for next buffer
 31501                                  	;test   byte [di+5],40h
 31502 00005744 F6450540                	TEST	byte [di+BUFFINFO.buf_flags],buf_dirty	; is the buffer dirty ?
 31503 00005748 7407                    	jz	short lfnxt			; no, go for next buffer
 31504                                  	;Context DS
 31505 0000574A 16                      	push	ss
 31506 0000574B 1F                      	pop	ds
 31507                                  	; 24/09/2023
 31508                                  	; cf=0 (after 'test' instruction)
 31509                                  	;clc
 31510 0000574C C3                      	retn
 31511                                  
 31512                                  FAIL_OP:					; This label & code is here
 31513                                  	;Context DS				;  for reachability
 31514 0000574D 16                      	push	ss
 31515 0000574E 1F                      	pop	ds
 31516 0000574F F9                      	STC
 31517 00005750 C3                      	retn
 31518                                  
 31519                                  lfnxt:
 31520                                  	; 15/08/2018 - Retro DOS v3.0
 31521                                  	; MSDOS 3.3
 31522                                  	;lds	di,[di]
 31523                                  
 31524                                  	; 20/05/2019 - Retro DOS v4.0
 31525 00005751 8B3D                    	mov	di,[di]
 31526                                  	;;mov	di,[di+BUFFINFO.buf_next]	; get next buffer
 31527                                  	
 31528                                  	; MSDOS 3.3
 31529                                  	;cmp	di,-1
 31530                                  	;jne	short nbuffer
 31531                                  	
 31532                                  	; MSDOS 6.0
 31533 00005753 36393E[BB0E]            	cmp	[ss:FIRST_BUFF_ADDR],di		; is this where we started ?;hkn;
 31534 00005758 75E5                    	jne	short nbuffer			; no, check this guy also
 31535                                  
 31536                                  ; If no dirty buffers, assume Media changed
 31537                                  NEWDSK:
 31538                                  	;;mov	word [es:bp+1Eh],0FFFFh  ; MSDOS 3.3
 31539                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 31540 0000575A 26C7461FFFFF            	mov	word [ES:BP+DPB.FREE_CNT],-1	; Media changed, must
 31541                                  						;  recompute
 31542                                  	; MSDOS 3.3
 31543                                  	;call	SETVISIT
 31544                                  	; MSDOS 6.0
 31545 00005760 E8CD00                  	call	 GETCURHEAD
 31546                                  nxbuffer:
 31547                                  	; MSDOS 3.3
 31548                                  	;or 	byte [di+5],20h
 31549                                  	; MSDOS 3.3 & MSDOS 6.0
 31550                                  	;cmp	[di+4],al
 31551 00005763 384504                  	cmp	[DI+BUFFINFO.buf_ID],al		; This drive ?
 31552 00005766 7510                    	jne	short lfnxt2
 31553                                  	;test	byte [di+5],40h
 31554 00005768 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 31555 0000576C 758C                    	jnz	short DISK_CHNG_ERR
 31556                                  	;mov	word [di+4],20FFh
 31557 0000576E C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],(buf_visit*256)+0FFh ; free up
 31558 00005773 E8CC00                  	call	SCANPLACE
 31559                                  	; MSDOS 6.0
 31560 00005776 EB02                    	jmp	short skpbuff
 31561                                  lfnxt2:
 31562 00005778 8B3D                    	mov	di,[di]
 31563                                  	;mov	di,[di+BUFFINFO.buf_next]
 31564                                  skpbuff:
 31565                                  	; MSDOS 6.0
 31566 0000577A 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]					;hkn;
 31567 0000577F 75E2                    	jne	short nxbuffer
 31568                                  
 31569 00005781 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0 ;LB.  look ahead buffers ?	;AN001;
 31570 00005787 740D                    	JZ	short GOGETBPB		;LB.  no			;AN001;
 31571 00005789 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	;LB.  same as changed drive	;AN001;
 31572 0000578E 7506                    	JNZ	short GOGETBPB		;LB.  no			;AN001;
 31573 00005790 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ;LB.  invalidate look ahead buffers ;AN000;
 31574                                  ;lfnxt2:
 31575                                  	; MSDOS 3.3
 31576                                  	;call	SKIPVISIT
 31577                                  	;jnz	short nxbuffer
 31578                                  GOGETBPB:
 31579                                  	; MSDOS 3.3 & MSDOS 6.0
 31580                                  	;;lds	di,[es:bp+12h]
 31581                                  	;lds	di,[es:bp+13h] ; MSDOS 6.0	
 31582 00005796 26C57E13                	LDS	DI,[ES:BP+DPB.DRIVER_ADDR]
 31583                                  	; 20/05/2019
 31584                                  	;test	word [di+4],2000h
 31585                                  	;TEST	word [DI+SYSDEV.ATT],ISFATBYDEV
 31586 0000579A F6450520                	TEST	byte [DI+SYSDEV.ATT+1],(ISFATBYDEV>>8)
 31587 0000579E 7510                    	JNZ	short GETFREEBUF
 31588                                  	;context DS	    		;hkn; SS is DOSDATA
 31589 000057A0 16                      	push	ss
 31590 000057A1 1F                      	pop	ds
 31591 000057A2 BB0200                  	MOV	BX,2
 31592 000057A5 E8EFFC                  	CALL	UNPACK			; Read the first FAT sector into CURBUF
 31593                                  FAIL_OPJ:
 31594 000057A8 72A3                    	JC	short FAIL_OP
 31595 000057AA C53E[E205]              	LDS	DI,[CURBUF]
 31596 000057AE EB13                    	JMP	SHORT GOTGETBUF
 31597                                  
 31598                                  GETFREEBUF:
 31599 000057B0 06                      	PUSH	ES			; Get a free buffer for BIOS to use
 31600 000057B1 55                      	PUSH	BP
 31601                                  	; MSDOS 3.3
 31602                                  	;LDS	DI,[SS:BUFFHEAD] ; 15/08/2018
 31603                                  	; MSDOS 6.0
 31604 000057B2 31D2                    	XOR	DX,DX			;LB.  fake to get 1st	  ;AN000;
 31605                                  ;hkn; SS override
 31606 000057B4 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX ; 0	;LB.  buffer addr	  ;AN000;
 31607 000057B9 E87400                  	call	GETCURHEAD		;LB.			  ;AN000;
 31608                                  	; MSDOS 3.3 & MSDOS 6.0
 31609 000057BC E84F02                  	call	BUFWRITE
 31610 000057BF 5D                      	POP	BP
 31611 000057C0 07                      	POP	ES
 31612                                  	;JC	short FAIL_OPJ
 31613 000057C1 728A                    	jc	short FAIL_OP
 31614                                  GOTGETBUF:
 31615                                  	;;add	di,16
 31616                                  	;add	di,20 ; MSDOS 6.0
 31617 000057C3 83C714                  	ADD	DI,BUFINSIZ
 31618                                  
 31619                                  ;hkn; SS override
 31620 000057C6 368C1E[6A03]            	MOV	[SS:CALLXAD+2],DS
 31621                                  	;Context DS			;hkn; SS is DOSDATA
 31622 000057CB 16                      	push	ss
 31623 000057CC 1F                      	pop	ds
 31624 000057CD 893E[6803]              	MOV	[CALLXAD],DI
 31625                                  	;mov	al,16h
 31626 000057D1 B016                    	MOV	AL,DBPBHL
 31627                                  	;mov	ah,[es:bp+1]
 31628 000057D3 268A6601                	MOV	AH,[ES:BP+DPB.UNIT]
 31629 000057D7 A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018
 31630 000057DA C606[5C03]02            	MOV	BYTE [DEVCALL_REQFUNC],DEVBPB
 31631 000057DF C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 31632                                  	;;mov	al,[es:bp+16h]
 31633                                  	;mov	al,[es:bp+17h]
 31634 000057E5 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 31635 000057E9 A2[6703]                	MOV	[CALLMED],AL
 31636 000057EC 06                      	PUSH	ES ; **
 31637 000057ED 1E                      	PUSH	DS ; *
 31638                                  	;;
 31639                                  ; 03/01/2023
 31640                                  %if 0
 31641                                  	;;push	word [es:bp+14h]
 31642                                  	;push	word [es:bp+15h] ; MSDOS 6.0
 31643                                  	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR+2]
 31644                                  	;;push	word [es:bp+12h]
 31645                                  	;push	word [es:bp+13h] ; MSDOS 6.0
 31646                                  	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR]
 31647                                  
 31648                                  ;hkn; DEVCALL is in DOSDATA
 31649                                  	MOV	BX,DEVCALL
 31650                                  	POP	SI
 31651                                  	POP	DS			; DS:SI Points to device header
 31652                                  %endif
 31653                                  	; 03/01/2024
 31654 000057EE BB[5A03]                	mov	bx,DEVCALL
 31655                                  	;lds	si,[es:bp+13h]
 31656 000057F1 26C57613                	lds	si,[es:bp+DPB.DRIVER_ADDR]
 31657                                  					; DS:SI Points to device header
 31658                                  	;;
 31659 000057F5 07                      	POP	ES ; *			; ES:BX Points to call header
 31660                                  	;invoke	DEVIOCALL2
 31661 000057F6 E8C3ED                  	call	DEVIOCALL2
 31662 000057F9 07                      	POP	ES ; **			; Restore ES:BP
 31663                                  	;Context DS
 31664 000057FA 16                      	push	ss		 	;hkn; SS is DOSDATA
 31665 000057FB 1F                      	pop	ds
 31666 000057FC 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 31667                                  	; MSDOS 3.3
 31668                                  	;test	di,8000h
 31669                                  	;jnz	short FATERRJ
 31670                                  	; MSDOS 6.0
 31671 00005800 09FF                    	or	di,di
 31672 00005802 7829                    	js	short FATERRJ 		; have error
 31673                                  	;;mov	al,[es:bp+16h]
 31674                                  	;mov	al,[es:bp+17h]  ; MSDOS 6.0
 31675 00005804 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 31676 00005808 C536[6C03]              	LDS	SI,[CALLBPB]
 31677                                  	;;mov	word [es:bp+1Ch],0
 31678                                  	;mov	word [es:bp+1Dh],0 ; MSDOS 6.0
 31679 0000580C 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 ; recycle scanning pointer
 31680                                  	;invoke	$SETDPB
 31681 00005812 E8A1B7                  	call	_$SETDPB
 31682                                  
 31683                                  ;hkn; SS override
 31684 00005815 36C53E[6803]            	LDS	DI,[SS:CALLXAD]		; Get back buffer pointer
 31685                                  	;mov	al,[es:bp+8]
 31686 0000581A 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]
 31687                                  
 31688                                  	; MSDOS 3.3
 31689                                  	;;mov	ah,[es:bp+0Fh]
 31690                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 31691                                  	;;mov	[DI-8],ax
 31692                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AX
 31693                                  
 31694                                  	; MSDOS 6.0
 31695                                  	;mov	[di-0Ah],al
 31696 0000581E 8845F6                  	MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AL 
 31697                                  						;>32mb		  ;AN000;
 31698                                  	;mov	ax,[es:bp+0Fh]
 31699 00005821 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		;>32mb
 31700                                  	;mov	[di-9h],ax			  ;AC000;
 31701 00005825 8945F7                  	MOV	[DI+BUFFINFO.buf_wrtcntinc-BUFINSIZ],AX 
 31702                                  					;>32mb Correct buffer info ;AC000;
 31703                                  	;Context DS			;hkn; SS is DOSDATA
 31704 00005828 16                      	push	ss
 31705 00005829 1F                      	pop	ds
 31706 0000582A 30C0                    	XOR	AL,AL			;Media changed (Z), Carry clear
 31707 0000582C C3                      	retn
 31708                                  
 31709                                  FATERRJ: 
 31710 0000582D E954FE                  	JMP	FATERR
 31711                                  
 31712                                  ;============================================================================
 31713                                  ; STDBUF.ASM
 31714                                  ;============================================================================
 31715                                  ; Retro DOS v2.0 - 12/03/2018
 31716                                  
 31717                                  ;
 31718                                  ; Standard buffer management for MSDOS
 31719                                  ;
 31720                                  
 31721                                  ;.xlist
 31722                                  ;.xcref
 31723                                  ;INCLUDE STDSW.ASM
 31724                                  ;.cref
 31725                                  ;.list
 31726                                  
 31727                                  ;TITLE	STDBUF - MSDOS buffer management
 31728                                  ;NAME	STDBUF
 31729                                  
 31730                                  ;INCLUDE BUF.ASM
 31731                                  
 31732                                  ;============================================================================
 31733                                  ; BUF.ASM
 31734                                  ;============================================================================
 31735                                  ; 31/07/2018 - Retro DOS v3.0
 31736                                  ; Retro DOS v2.0 - 12/03/2018
 31737                                  ;
 31738                                  ; buffer management for MSDOS
 31739                                  ;
 31740                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 31741                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 31742                                  ;
 31743                                  ;SUBTTL SETVISIT,SKIPVISIT -- MANAGE BUFFER SCANS
 31744                                  ;
 31745                                  ;SETVISIT:
 31746                                  ;	; 31/07/2018 - Retro DOS v3.0
 31747                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CAFh
 31748                                  ;; Inputs:
 31749                                  ;;      None
 31750                                  ;; Function:
 31751                                  ;;      Set up a scan of I/O buffers
 31752                                  ;; Outputs:
 31753                                  ;;      All visit flags = 0
 31754                                  ;;              NOTE: This pre-scan is needed because a hard disk error
 31755                                  ;;                    may cause a scan to stop in the middle leaving some
 31756                                  ;;                    visit flags set, and some not set.
 31757                                  ;;      DS:DI Points to [BUFFHEAD]
 31758                                  ;; No other registers altered
 31759                                  ;
 31760                                  ;       LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 31761                                  ;	PUSH    AX
 31762                                  ;       ;;XOR	AX,AX	  ;; MSDOS 2.11
 31763                                  ;	;mov	al,0DFh
 31764                                  ;	mov	al,~buf_visit
 31765                                  ;SETLOOP:
 31766                                  ;       ;;MOV	[DI+7],AL ;; MSDOS 2.11
 31767                                  ;	;and	[DI+5],al
 31768                                  ;	AND	[DI+BUFFINFO.buf_flags],AL
 31769                                  ;       LDS     DI,[DI]
 31770                                  ;       CMP     DI,-1
 31771                                  ;       JNZ     SHORT SETLOOP
 31772                                  ;       POP     AX ; 09/09/2018
 31773                                  ;	LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 31774                                  ;SVISIT_RETN:
 31775                                  ;       RETN
 31776                                  ;
 31777                                  ;SKIPVISIT:
 31778                                  ;	; 31/07/2018 - Retro DOS v3.0
 31779                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CC8h
 31780                                  ;
 31781                                  ;; Inputs:
 31782                                  ;;      DS:DI Points to a buffer
 31783                                  ;; Function:
 31784                                  ;;      Skip visited buffers
 31785                                  ;; Outputs:
 31786                                  ;;      DS:DI Points to next unvisited buffer
 31787                                  ;;      Zero is set if skip to LAST buffer
 31788                                  ;; No other registers altered
 31789                                  ;
 31790                                  ;       CMP     DI,-1
 31791                                  ;       ;retz
 31792                                  ;       JZ	SHORT SVISIT_RETN
 31793                                  ;
 31794                                  ;	;;CMP	BYTE [DI+7],1 ;; MSDOS 2.11
 31795                                  ;       ;;;retnz
 31796                                  ;       ;;JNZ	SHORT SVISIT_RETN
 31797                                  ;
 31798                                  ;	;test	byte [di+5],20h
 31799                                  ;	TEST	byte [DI+BUFFINFO.buf_flags],buf_visit	
 31800                                  ;	JNZ	short SKIPLOOP
 31801                                  ;	
 31802                                  ;	push	ax
 31803                                  ;	or	al,1
 31804                                  ;	pop	ax
 31805                                  ;	retn	
 31806                                  ;
 31807                                  ;SKIPLOOP:
 31808                                  ;	LDS     DI,[DI]
 31809                                  ;       JMP     SHORT SKIPVISIT
 31810                                  
 31811                                  ;============================================================================
 31812                                  ; BUF.ASM, MSDOS 6.0, 1991
 31813                                  ;============================================================================
 31814                                  ; 31/07/2018 - Retro DOS v3.0
 31815                                  ; 04/05/2019 - Retro DOS v4.0
 31816                                  
 31817                                  ;	TITLE	BUF - MSDOS buffer management
 31818                                  ;	NAME	BUF
 31819                                  
 31820                                  ;**	BUF.ASM - Low level routines for buffer cache management
 31821                                  ;
 31822                                  ;	GETCURHEAD
 31823                                  ;	ScanPlace
 31824                                  ;	PLACEBUF
 31825                                  ;	PLACEHEAD
 31826                                  ;	PointComp
 31827                                  ;	GETBUFFR
 31828                                  ;	GETBUFFRB
 31829                                  ;	FlushBuf
 31830                                  ;	BufWrite
 31831                                  ;	SET_RQ_SC_PARMS
 31832                                  ;
 31833                                  ;	Revision history:
 31834                                  ;
 31835                                  ;		AN000  version 4.00  Jan. 1988
 31836                                  ;		A004   PTM 3765 -- Disk reset failed
 31837                                  ;		M039 DB 10/17/90 - Disk write optimization
 31838                                  ;		I001   5.0 PTR 722211 - Preserve CY when in buffer in HMA
 31839                                  
 31840                                  ;Break	<GETCURHEAD -- Get current buffer header>
 31841                                  ;----------------------------------------------------------------------------
 31842                                  ; Procedure Name : GetCurHead
 31843                                  ; Inputs:
 31844                                  ;	 No Inputs
 31845                                  ; Function:
 31846                                  ;	Returns the pointer to the first buffer in Queue
 31847                                  ;	and updates FIRST_BUFF_ADDR
 31848                                  ;       and invalidates LASTBUFFER (recency pointer)
 31849                                  ; Outputs:
 31850                                  ;	DS:DI = pointer to the first buffer in Queue
 31851                                  ;	FIRST_BUFF_ADDR = offset ( DI ) of First buffer in Queue
 31852                                  ;       LASTBUFFER = -1
 31853                                  ; No other registers altered
 31854                                  ;----------------------------------------------------------------------------
 31855                                  
 31856                                  ; 04/05/2019 - Retro DOS v4.0
 31857                                  ; DOSCODE:98D2h (MSDOS 6.21, MSDOS.SYS)
 31858                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31859                                  ; DOSCODE:9876h (MSDOS 5.0, MSDOS.SYS)
 31860                                  
 31861                                  GETCURHEAD:
 31862 00005830 36C53E[6D00]            	lds	di,[ss:BufferQueue]	; Pointer to the first buffer
 31863 00005835 36C706[1E00]FFFF        	mov	word [ss:LastBuffer],-1	; invalidate last buffer
 31864 0000583C 36893E[BB0E]            	mov	[ss:FIRST_BUFF_ADDR],di	;save first buffer addr
 31865 00005841 C3                      	retn
 31866                                  
 31867                                  ;Break	<SCANPLACE, PLACEBUF -- PUT A BUFFER BACK IN THE POOL>
 31868                                  ;----------------------------------------------------------------------------
 31869                                  ; Procedure Name : ScanPlace
 31870                                  ; Inputs:
 31871                                  ;	Same as PLACEBUF
 31872                                  ; Function:
 31873                                  ;	Save scan location and call PLACEBUF
 31874                                  ; Outputs:
 31875                                  ;	DS:DI Points to saved scan location
 31876                                  ; All registers, except DS:DI, preserved.
 31877                                  ;----------------------------------------------------------------------------
 31878                                  ;M039: Rewritten to preserve registers.
 31879                                  
 31880                                  ;SCANPLACE:
 31881                                  ;	; 31/07/2018 - Retro DOS v3.0
 31882                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 31883                                  ;	push	es
 31884                                  ;	les	si,[di]
 31885                                  ;	;les	si,[DI+BUFFINFO.buf_link]
 31886                                  ;	call	PLACEBUF
 31887                                  ;	push	es
 31888                                  ;	pop	ds
 31889                                  ;	mov	di,si
 31890                                  ;	pop	es
 31891                                  ;scanplace_retn:
 31892                                  ;	retn	
 31893                                  	
 31894                                  	; MSDOS 6.0
 31895                                  SCANPLACE:
 31896 00005842 FF35                    	push	word [di]
 31897                                  	;push	word [di+BUFFINFO.buf_next] ;Save scan location
 31898 00005844 E80200                  	call	PLACEBUF
 31899 00005847 5F                      	pop	di
 31900 00005848 C3                      	retn
 31901                                  
 31902                                  ;----------------------------------------------------------------------------
 31903                                  ; Procedure Name : PlaceBuf
 31904                                  ; Input:
 31905                                  ;	DS:DI points to buffer (DS->BUFFINFO array, DI=offset in array)
 31906                                  ; Function:
 31907                                  ;	Remove buffer from queue and re-insert it in proper place.
 31908                                  ; NO registers altered
 31909                                  ;----------------------------------------------------------------------------
 31910                                  
 31911                                  ;procedure PLACEBUF,NEAR
 31912                                  
 31913                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31914                                  	; 20/05/2019 - Retro DOS v4.0
 31915                                  PLACEBUF:
 31916                                  	; 31/07/2018 - Retro DOS v3.0
 31917                                  
 31918                                  	; MSDOS 6.0
 31919 00005849 50                      	push	AX			;Save only regs we modify	;AN000;
 31920 0000584A 53                      	push	BX							;AN000;
 31921                                  	; 23/09/2023
 31922                                  	;push	SI							;AN000;
 31923                                  	
 31924 0000584B 8B05                    	mov	ax,[di]
 31925                                  	;mov	ax,[di+BUFFINFO.buf_next]
 31926 0000584D 368B1E[6D00]            	mov	bx,[ss:BufferQueue]	; bx = offset of head of list;smr;SS Override
 31927                                  	
 31928 00005852 39D8                    	cmp	ax,bx				;Buf = last?		;AN000;
 31929 00005854 7422                    	je	short nret			;Yes, special case	;AN000;
 31930 00005856 39DF                    	cmp	di,bx				;Buf = first?		;AN000;
 31931 00005858 7506                    	jne	short not_first 		;Yes, special case	;AN000;
 31932 0000585A 36A3[6D00]              	mov	[ss:BufferQueue],ax		;smr;SS Override
 31933 0000585E EB18                    	jmp	short nret 			;Continue with repositioning;AN000;
 31934                                  not_first:
 31935                                  	; 23/09/2023
 31936 00005860 56                      	push	si
 31937                                  	;mov	si,[di+2]
 31938 00005861 8B7502                  	mov	SI,[DI+BUFFINFO.buf_prev]	;No, SI = prior Buf	;AN000;
 31939 00005864 8904                    	mov	[si],ax
 31940                                  	;mov	[SI+BUFFINFO.buf_next],AX	; ax has di->buf_next	;AN000;
 31941 00005866 96                      	xchg	si,ax
 31942                                  	;mov	[si+2],ax
 31943 00005867 894402                  	mov	[SI+BUFFINFO.buf_prev],AX	;			;AN000;
 31944                                  	
 31945 0000586A 8B7702                  	mov	SI,[BX+BUFFINFO.buf_prev]	;SI-> last buffer	;AN000;
 31946 0000586D 893C                    	mov	[si],di
 31947                                  	;mov	[SI+BUFFINFO.buf_next],DI	;Add Buf to end of list ;AN000;
 31948 0000586F 897F02                  	mov	[BX+BUFFINFO.buf_prev],DI				;AN000;
 31949 00005872 897502                  	mov	[DI+BUFFINFO.buf_prev],SI	;Update link in Buf too	;AN000;
 31950 00005875 891D                    	mov	[di],bx
 31951                                  	;mov	[DI+BUFFINFO.buf_next],BX				;AN000;
 31952                                  	; 23/09/2023
 31953 00005877 5E                      	pop	si
 31954                                  nret:	
 31955                                  	; 23/09/2023							;AN000;
 31956                                  	;pop	SI							;AN000;
 31957 00005878 5B                      	pop	BX							;AN000;
 31958 00005879 58                      	pop	AX							;AN000;
 31959                                  									;AN000;
 31960                                  	;cmp	byte [di+4],0FFh
 31961 0000587A 807D04FF                	cmp	byte [di+BUFFINFO.buf_ID],-1	; Buffer FREE?		;AN000;
 31962 0000587E 7505                            jne	short pbx			; M039: -no, jump.
 31963 00005880 36893E[6D00]            	mov	[ss:BufferQueue],di		; M039: -yes, make it LRU.
 31964                                  pbx:	
 31965 00005885 C3                      	retn								;AN000;
 31966                                  
 31967                                  	; 31/07/2018 - Retro DOS v3.0
 31968                                  
 31969                                  	; MSDOS 3.3
 31970                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 31971                                  
 31972                                  ;PLACEBUF:
 31973                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 31974                                  ;	
 31975                                  ;       CALL	save_world
 31976                                  ;       LES     CX,[DI]
 31977                                  ;       CMP     CX,-1           	; Buf is LAST?
 31978                                  ;       JZ      SHORT NRET		; Buffer already last
 31979                                  ;       MOV     BP,ES           	; Pointsave = Buf.nextbuf
 31980                                  ;       PUSH    DS
 31981                                  ;       POP     ES              	; Buf is ES:DI
 31982                                  ;	; 15/03/2018
 31983                                  ;       LDS     SI,[SS:BUFFHEAD] 	; Curbuf = HEAD
 31984                                  ;       CALL    POINTCOMP       	; Buf == HEAD?
 31985                                  ;       JNZ     SHORT BUFLOOP
 31986                                  ;       MOV     [SS:BUFFHEAD],CX
 31987                                  ;       MOV     [SS:BUFFHEAD+2],BP	; HEAD = Pointsave
 31988                                  ;       JMP     SHORT LOOKEND
 31989                                  ;BUFLOOP:
 31990                                  ;	; 31/07/2018
 31991                                  ;	mov	ax,ds
 31992                                  ;	mov	bx,si
 31993                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 31994                                  ;       LDS     SI,[SI]
 31995                                  ;       CALL    POINTCOMP
 31996                                  ;       jnz	short BUFLOOP
 31997                                  ;	;
 31998                                  ;	mov	ds,ax
 31999                                  ;	mov	si,bx
 32000                                  ;	mov	[SI],cx
 32001                                  ;	;mov	[SI+BUFFINFO.buf_link],cx   ; If Curbuf.nextbuf == buf
 32002                                  ;	mov	[SI+2],bp
 32003                                  ;	;mov	[BX+BUFFINFO.buf_link+2],bp ; Curbuf.nextbuf = Pointsave
 32004                                  ;LOOKEND:
 32005                                  ;	mov	ax,ds
 32006                                  ;	mov	bx,si
 32007                                  ;       LDS     SI,[SI]
 32008                                  ;       CMP     SI,-1
 32009                                  ;       jnz     short LOOKEND
 32010                                  ;GOTHEEND:
 32011                                  ;       mov	ds,ax
 32012                                  ;	mov	[BX],di
 32013                                  ;	MOV     [BX+2],ES 		; Curbuf.nextbuf = Buf
 32014                                  ;       MOV     WORD [ES:DI],-1
 32015                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link],-1
 32016                                  ;       MOV     WORD [ES:DI+2],-1 	; Buf is LAST
 32017                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link+2],-1
 32018                                  ;NRET:
 32019                                  ;       CALL	restore_world
 32020                                  ;	
 32021                                  ;	;cmp	byte [di+4],-1
 32022                                  ;	cmp	byte [DI+BUFFINFO.buf_ID],-1  ; Free buffer ?
 32023                                  ;	jnz     short scanplace_retn
 32024                                  ;	call    PLACEHEAD
 32025                                  ;	retn
 32026                                  
 32027                                  ;EndProc PLACEBUF
 32028                                  
 32029                                  ;M039 - Removed PLACEHEAD.
 32030                                  ;----------------------------------------------------------------------------
 32031                                  ; places buffer at head
 32032                                  ;  NOTE:::::: ASSUMES THAT BUFFER IS CURRENTLY THE LAST
 32033                                  ;	ONE IN THE LIST!!!!!!!
 32034                                  ; BUGBUG ---- this routine can be removed because it has only
 32035                                  ; BUGBUG ---- one instruction. This routine is called from
 32036                                  ; BUGBUG ---- 3 places. ( Size = 3*3+6 = 15 bytes )
 32037                                  ; BUGBUG ---- if coded in line = 3 * 5 = 15 bytes
 32038                                  ; BUGBUG ---- But kept as it is for modularity
 32039                                  ;----------------------------------------------------------------------------
 32040                                  ;procedure   PLACEHEAD,NEAR
 32041                                  ;	mov	word ptr [BufferQueue], di
 32042                                  ;	ret
 32043                                  ;EndProc PLACEHEAD
 32044                                  ;M039
 32045                                  
 32046                                  ;----------------------------------------------------------------------------
 32047                                  ; Procedure Name : PLACEHEAD
 32048                                  ;
 32049                                  ; SAME AS PLACEBUF except places buffer at head
 32050                                  ;----------------------------------------------------------------------------
 32051                                  
 32052                                  	; MSDOS 3.3 (Retro DOS v3.0)
 32053                                  	; 05/09/2018
 32054                                  	; MSDOS 2.11 (Retro DOS v2.0)
 32055                                  ;PLACEHEAD:
 32056                                  ;	; 31/07/2018 - Retro DOS v3.0
 32057                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D4Ah
 32058                                  ;
 32059                                  ;       CALL	save_world
 32060                                  ;       PUSH	DS
 32061                                  ;       POP	ES
 32062                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 32063                                  ;       LDS     SI,[SS:BUFFHEAD]
 32064                                  ;	; 31/07/2018 - Retro DOS v3.0 (MSDOS 3.3)
 32065                                  ;	CALL    POINTCOMP
 32066                                  ;       JZ      SHORT GOTHEEND2
 32067                                  ;	MOV	[ES:DI],SI
 32068                                  ;	;mov	[ES:DI+BUFFINFO.buf_link],si
 32069                                  ;       MOV	[ES:DI+2],DS
 32070                                  ;	;mov	[ES:DI+BUFFINFO.buf_link+2],ds
 32071                                  ;       MOV	[SS:BUFFHEAD],DI
 32072                                  ;       MOV	[SS:BUFFHEAD+2],ES
 32073                                  ;LOOKEND2:
 32074                                  ;       mov	ax,ds
 32075                                  ;	mov	bx,si
 32076                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 32077                                  ;       LDS     SI,[SI]
 32078                                  ;       CALL    POINTCOMP
 32079                                  ;       JNZ	SHORT LOOKEND2 ; 05/09/2018
 32080                                  ;       mov	ds,ax
 32081                                  ;	mov	word [bx],-1
 32082                                  ;	;mov	word [BX+BUFFINFO.buf_link],-1
 32083                                  ;	mov	word [bx+2],-1
 32084                                  ;	;mov	word [BX+BUFFINFO.buf_link+2],-1
 32085                                  ;GOTHEEND2:
 32086                                  ;      	call	restore_world
 32087                                  ;placehead_retn:
 32088                                  ;	retn
 32089                                  
 32090                                  ; 20/05/2019 - Retro DOS v4.0
 32091                                  ; DOSCODE:9928h (MSDOS 6.21, MSDOS.SYS)
 32092                                  
 32093                                  ;Break	<POINTCOMP -- 20 BIT POINTER COMPARE>
 32094                                  ;----------------------------------------------------------------------------
 32095                                  ;
 32096                                  ; Procedure Name : PointComp
 32097                                  ; Inputs:
 32098                                  ;         DS:SI & ES:DI
 32099                                  ; Function:
 32100                                  ;          Checks for ((SI==DI) && (ES==DS))
 32101                                  ;	   Assumes that pointers are normalized for the
 32102                                  ;	   same segment
 32103                                  ;
 32104                                  ; Compare DS:SI to ES:DI (or DS:DI to ES:SI) for equality
 32105                                  ; DO NOT USE FOR < or >
 32106                                  ; No Registers altered
 32107                                  ;
 32108                                  ;----------------------------------------------------------------------------
 32109                                  
 32110                                  POINTCOMP:
 32111                                  	; 31/07/2018 - Retro DOS v3.0
 32112                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D84h
 32113 00005886 39FE                    	CMP	SI,DI
 32114 00005888 750A                    	jnz	short _ret_label	; return if nz
 32115                                  	;jnz	short placehead_retn 
 32116 0000588A 51                      	PUSH	CX
 32117 0000588B 52                      	PUSH	DX
 32118 0000588C 8CD9                    	MOV	CX,DS
 32119 0000588E 8CC2                    	MOV	DX,ES
 32120 00005890 39D1                    	CMP	CX,DX
 32121 00005892 5A                      	POP	DX
 32122 00005893 59                      	POP	CX
 32123                                  _ret_label:
 32124 00005894 C3                      	retn
 32125                                  
 32126                                  ; 01/08/2018 - Retro DOS v3.0
 32127                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D93h 
 32128                                  
 32129                                  ;Break	<GETBUFFR, GETBUFFRB -- GET A SECTOR INTO A BUFFER>
 32130                                  
 32131                                  ;**	GetBuffr - Get a non-FAT Sector into a Buffer
 32132                                  ;----------------------------------------------------------------------------
 32133                                  ;	GetBuffr does normal ( non-FAT ) sector buffering
 32134                                  ;	It gets the specified local sector into one of the I/O buffers
 32135                                  ;	and shuffles the queue
 32136                                  ; 
 32137                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 32138                                  ;		       ELSE no pre-read
 32139                                  ;		(DX) = Desired physical sector number	      (LOW)
 32140                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 32141                                  ;		(ES:BP) = Pointer to drive parameters
 32142                                  ;		ALLOWED set in case of INT 24
 32143                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 32144                                  ;		'C' clear if OK
 32145                                  ;		CURBUF Points to the Buffer for the sector
 32146                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 32147                                  ;	USES	AX, BX, CX, SI, DI, Flags
 32148                                  ;----------------------------------------------------------------------------
 32149                                  
 32150                                  ;**	GetBuffrb - Get a FAT Sector into a Buffer
 32151                                  ;----------------------------------------------------------------------------
 32152                                  ;	GetBuffrb reads a sector from the FAT file system's FAT table.
 32153                                  ;	It gets the specified sector into one of the I/O buffers
 32154                                  ;	and shuffles the queue. We need a special entry point so that
 32155                                  ;	we can read the alternate FAT sector if the first read fails, also
 32156                                  ;	so we can mark the buffer as a FAT sector.
 32157                                  ; 
 32158                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 32159                                  ;		       ELSE no pre-read
 32160                                  ;		(DX) = Desired physical sector number	     (LOW)
 32161                                  ;		(SI) != 0
 32162                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 32163                                  ;		(ES:BP) = Pointer to drive parameters
 32164                                  ;		ALLOWED set in case of INT 24
 32165                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 32166                                  ;		'C' clear if OK
 32167                                  ;		CUR ddBUF Points to the Buffer for the sector
 32168                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 32169                                  ;	USES	AX, BX, CX, SI, DI, Flags
 32170                                  ;----------------------------------------------------------------------------
 32171                                  
 32172                                  	; 22/09/2023 - RetroDOS v4.2 MSDOS.SYS (optimization)
 32173                                  GETBUFFRC:
 32174 00005895 C706[0706]0000          	mov	word [HIGH_SECTOR],0
 32175                                  GETBUFFRA:
 32176 0000589B 30C0                    	xor	al,al
 32177 0000589D BE0100                  	mov	si,1
 32178 000058A0 EB09                    	jmp	short GETBUFFRB
 32179                                  
 32180                                  	; 22/09/2023
 32181                                  GETBUFFER:
 32182 000058A2 30C0                    	xor	al,al
 32183                                  GETBUFFRD:
 32184                                  	;mov	byte [ALLOWED],18h
 32185 000058A4 C606[4B03]18            	mov	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 32186                                  
 32187                                  	; 20/05/2019 - Retro DOS v4.0
 32188                                  	; DOSCODE:9937h (MSDOS 6.21, MSDOS.SYS)
 32189                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32190                                  	; DOSCODE:98DBh (MSDOS 5.0, MSDOS.SYS)
 32191                                  GETBUFFR:
 32192 000058A9 31F6                    	XOR	SI,SI
 32193                                  
 32194                                  ;	This entry point is called for FAT buffering with SI != 0
 32195                                  
 32196                                  GETBUFFRB:
 32197 000058AB A3[9405]                	MOV	[PREREAD],AX			; save pre-read flag
 32198                                  	; 15/12/2022
 32199 000058AE 268A4600                	mov	al,[ES:BP]
 32200                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32201                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 32202 000058B2 C53E[1E00]              	LDS	DI,[LastBuffer]			; Get the recency pointer
 32203                                  	; MSDOS 6.0
 32204                                  ;hkn; SS override
 32205 000058B6 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]		; F.C. >32mb	;AN000;
 32206                                  
 32207                                  ;	See if this is the buffer that was most recently returned.
 32208                                  ;	A big performance win if it is.
 32209                                  
 32210 000058BB 83FFFF                  	CMP	DI,-1				; Recency pointer valid?
 32211 000058BE 7412                    	je	short getb5			; No
 32212                                  	;cmp	dx,[di+6]
 32213 000058C0 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 32214 000058C3 750D                    	JNZ	short getb5			; Wrong sector
 32215                                  	
 32216                                  	; MSDOS 6.0
 32217                                  	;cmp	cx,[di+8]
 32218 000058C5 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]	; F.C. >32mb	;AN000;
 32219 000058C8 7508                    	JNZ	short getb5			; F.C. >32mb	;AN000;
 32220                                  	
 32221                                  	;cmp	al,[di+4]
 32222 000058CA 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 32223                                  	;JZ	getb35				; Just asked for same buffer
 32224 000058CD 7503                    	jnz	short getb5
 32225                                  	;jmp	getb35
 32226                                  	; 17/12/2022
 32227                                  	; 28/07/2019
 32228 000058CF E9C700                  	jmp	getb35x
 32229                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32230                                  	;jmp	getb35
 32231                                  
 32232                                  ;	It's not the buffer most recently returned. See if it's in the
 32233                                  ;	cache.
 32234                                  ;
 32235                                  ;	(cx:dx) = sector #
 32236                                  ;	(al) = drive #
 32237                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 32238                                  ;	??? list may be incomplete ???
 32239                                  
 32240                                  getb5:	
 32241                                  	; MSDOS 3.3
 32242                                  	;lds	di,[SS:BUFFHEAD]
 32243                                  	; MSDOS 6.0
 32244 000058D2 E85BFF                  	CALL	GETCURHEAD			; get Q Head
 32245                                  getb10:	
 32246                                  	;cmp	dx,[di+6]
 32247 000058D5 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 32248 000058D8 750D                    	jne	short getb12			; wrong sector lo
 32249                                  	
 32250                                  	; MSDOS 6.0
 32251                                  	;cmp	cx,[di+8]
 32252 000058DA 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]
 32253 000058DD 7508                    	jne	short getb12			; wrong sector hi
 32254                                  	
 32255                                  	;cmp	al,[di+4]
 32256 000058DF 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 32257                                  	;je	short getb25 ; 05/09/2018	; Found the requested sector
 32258 000058E2 7503                    	jne	short getb12
 32259 000058E4 E98C00                  	jmp	getb25
 32260                                  getb12:	
 32261                                  	; MSDOS 3.3
 32262                                  	;;mov	di,[DI]
 32263                                  	;;;mov	di,[DI+BUFFINFO.buf_link]
 32264                                  	;
 32265                                  	; 15/08/2018
 32266                                  	;lds	di,[di]
 32267                                  
 32268                                  	;cmp	di,-1 ; 0FFFFh
 32269                                  	;jne	short getb10
 32270                                  	;lds	di,[SS:BUFFHEAD]
 32271                                  
 32272                                  	; MSDOS 6.0
 32273 000058E7 8B3D                    	mov	di,[di]
 32274                                  	;mov	DI,[DI+BUFFINFO.BUF_NEXT]
 32275 000058E9 363B3E[BB0E]            	cmp	DI,[SS:FIRST_BUFF_ADDR]		; back at the front again?
 32276 000058EE 75E5                    	jne	short getb10			; no, continue looking
 32277                                  
 32278                                  ;	The requested sector is not available in the buffers. DS:DI now points
 32279                                  ;	to the first buffer in the Queue. Flush the first buffer & read in the
 32280                                  ;	new sector into it.
 32281                                  ;
 32282                                  ;	BUGBUG - what goes on here? Isn't the first guy the most recently
 32283                                  ;	used guy? Shuld be for fast lookup. If he is, we shouldn't take
 32284                                  ;	him, we should take LRU. And the above lookup shouldn't be
 32285                                  ;	down a chain, but should be hashed.
 32286                                  ;
 32287                                  ;	(DS:DI) = first buffer in the queue
 32288                                  ;	(CX:DX) = sector # we want
 32289                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 32290                                  
 32291                                  	; MSDOS 3.3 & MSDOS 6.0
 32292                                  ;hkn; SS override
 32293 000058F0 51                      	PUSH	CX  ; MSDOS 6.0
 32294 000058F1 56                      	push	si
 32295 000058F2 52                      	push	dx
 32296 000058F3 55                      	push	bp
 32297 000058F4 06                      	push	es
 32298 000058F5 E81601                  	CALL	BUFWRITE			; Write out the dirty buffer
 32299 000058F8 07                      	pop	es
 32300 000058F9 5D                      	pop	bp
 32301 000058FA 5A                      	pop	dx
 32302 000058FB 5E                      	pop	si
 32303 000058FC 368F06[0706]            	POP	word [SS:HIGH_SECTOR]  ; MSDOS 6.0
 32304                                  	;jc	short getbx			; if got hard error
 32305 00005901 7303                    	jnc	short getb13
 32306 00005903 E99D00                  	jmp	getbx
 32307                                  
 32308                                  getb13:
 32309                                  	; MSDOS 6.0
 32310 00005906 E88F01                  	CALL	SET_RQ_SC_PARMS 		; set parms for secondary cache
 32311                                  
 32312                                  ;	We're ready to read in the buffer, if need be. If the caller
 32313                                  ;	wanted to just *write* the buffer then we'll skip reading it in.
 32314                                  
 32315 00005909 30E4                    	XOR	AH,AH				; initial flags
 32316                                  ;hkn; SS override
 32317                                  	;test	byte [ss:PREREAD],0FFh
 32318                                  	;jnz	short getb20
 32319 0000590B 363826[9405]            	CMP	[SS:PREREAD],ah ; 0		; am to Read in the new sector?
 32320 00005910 7549                    	JNZ	short getb20			; no, we're done
 32321                                  	;;lea	bx,[di+16] ; MSDOS 3.3
 32322                                  	;lea	bx,[di+20] ; MSDOS 6.0
 32323 00005912 8D5D14                  	LEA	BX,[DI+BUFINSIZ] 		; (ds:bx) = data address
 32324                                  	;MOV	CX,1
 32325                                  	; 22/09/2023
 32326 00005915 29C9                    	sub	cx,cx ; 0
 32327 00005917 56                      	push	si
 32328 00005918 57                      	push	di
 32329 00005919 52                      	push	dx
 32330                                  	; MSDOS 6.0
 32331 0000591A 06                      	push	es ; ***
 32332                                  
 32333                                  ; Note: As far as I can tell, all disk reads into buffers go through
 32334                                  ;	this point. -mrw 10/88
 32335                                  	
 32336                                  	;cmp	byte [ss:BuffInHMA],0	; is buffers in HMA?
 32337                                  	; 22/09/2023
 32338 0000591B 36380E[7900]            	cmp	[ss:BuffInHMA],cl ; 0
 32339 00005920 7407                    	jz	short getb14
 32340 00005922 1E                      	push	ds ; **
 32341 00005923 53                      	push	bx ; *
 32342 00005924 36C51E[7A00]            	lds	bx,[ss:LoMemBuff]	; Then let's read it into scratch buff
 32343                                  getb14:
 32344                                  ;M039: Eliminated redundant HMA code.
 32345                                  
 32346                                  	; 22/09/2023
 32347 00005929 41                      	inc	cx ; cx = 1
 32348                                  
 32349                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32350 0000592A 09F6                    	OR	SI,SI			; FAT sector ?
 32351 0000592C 7407                    	JZ	short getb15		
 32352                                  
 32353 0000592E E803DD                  	call	FATSECRD
 32354                                  	;mov	ah,2
 32355 00005931 B402                    	MOV	AH,buf_isFAT		; Set buf_flags
 32356                                  
 32357 00005933 EB05                    	JMP	SHORT getb17		; Buffer is marked free if read barfs
 32358                                  
 32359                                  getb15:
 32360 00005935 E828DD                  	call	DREAD			; Buffer is marked free if read barfs
 32361 00005938 B400                    	MOV	AH,0			; Set buf_flags to no type, DO NOT XOR!
 32362                                  getb17:
 32363                                  	; 17/12/2022	
 32364                                  ; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32365                                  ;%if 0
 32366                                  	; MSDOS 6.0							  ;I001
 32367 0000593A 9C                      	pushf								  ;I001
 32368 0000593B 36803E[7900]00          	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ? ;I001
 32369 00005941 7411                    	jz	short not_in_hma	; no				  ;I001
 32370                                  	;mov	cx,[es:bp+2]
 32371 00005943 268B4E02                	mov	cx,[ES:BP+DPB.SECTOR_SIZE]				  ;I001
 32372 00005947 D1E9                    	shr	cx,1							  ;I001
 32373 00005949 9D                      	popf				; Retrieve possible CY from DREAD ;I001
 32374 0000594A 89DE                    	mov	si,bx							  ;I001
 32375 0000594C 5F                      	pop	di ; *							  ;I001
 32376 0000594D 07                      	pop	es ; **							  ;I001
 32377 0000594E FC                      	cld								  ;I001
 32378 0000594F 9C                      	pushf				; Preserve possible CY from DREAD ;I001
 32379 00005950 F3A5                    	rep	movsw			; move the contents of scratch buf;I001
 32380 00005952 06                      	push	es							  ;I001
 32381 00005953 1F                      	pop	ds							  ;I001
 32382                                  ;%endif
 32383                                  
 32384                                  ; 17/12/2022
 32385                                  %if 0
 32386                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32387                                  	; MSDOS 5.0
 32388                                  	pushf
 32389                                  	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ?
 32390                                  	jz	short not_in_hma	; no
 32391                                  	popf
 32392                                  	mov	cx,[ES:BP+DPB.SECTOR_SIZE]
 32393                                  	shr	cx,1
 32394                                  	mov	si,bx
 32395                                  	pop	di ; *
 32396                                  	pop	es ; **
 32397                                  	cld
 32398                                  	rep	movsw
 32399                                  	push	es
 32400                                  	pop	ds
 32401                                  	jmp	short getb19 ; 27/11/2022
 32402                                  %endif
 32403                                  
 32404                                  not_in_hma:								  ;I001
 32405 00005954 9D                      	popf							 	  ;I001
 32406                                  getb19:
 32407 00005955 07                      	pop	es ; ***
 32408 00005956 5A                      	pop	dx
 32409 00005957 5F                      	pop	di
 32410 00005958 5E                      	pop	si
 32411 00005959 7248                    	JC	short getbx
 32412                                  
 32413                                  ;	The buffer has the data setup in it (if we were to read)
 32414                                  ;	Setup the various buffer fields
 32415                                  ;
 32416                                  ;	(ds:di) = buffer address
 32417                                  ;	(es:bp) = DPB address
 32418                                  ;	(HIGH_SECTOR:DX) = sector #
 32419                                  ;	(ah) = BUF_FLAGS value
 32420                                  ;	(si) = 0 if non fat sector, != 0 if FAT sector read
 32421                                  
 32422                                  ;hkn; SS override
 32423                                  getb20:	; MSDOS 6.0
 32424 0000595B 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]
 32425                                  	;mov	[di+8],cx
 32426 00005960 894D08                  	MOV	[DI+BUFFINFO.buf_sector+2],CX
 32427                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 32428                                   	;mov	[di+6],dx
 32429 00005963 895506                  	MOV	[DI+BUFFINFO.buf_sector],DX
 32430                                  	;;mov	[di+0Ah],bp  ; MSDOS 3.3
 32431                                  	;mov	[di+0Dh],bp  ; MSDOS 6.0
 32432 00005966 896D0D                  	MOV	[DI+BUFFINFO.buf_DPB],BP
 32433                                  	;;mov	[di+0Ch],es
 32434                                  	;mov	[di+0Fh],es  ; MSDOS 6.0
 32435 00005969 8C450F                  	MOV	[DI+BUFFINFO.buf_DPB+2],ES
 32436                                  	; 15/12/2022
 32437 0000596C 268A4600                	mov	al,[es:bp]
 32438                                  	;mov	al,[es:bp+0]
 32439                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 32440                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 32441                                  	;mov	[di+4],ax
 32442 00005970 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX		; Set ID and Flags
 32443                                  getb25:	
 32444                                  	; MSDOS 3.3
 32445                                  	;mov     ax,1
 32446                                  
 32447                                  	; MSDOS 6.0
 32448                                  	;mov	byte [di+0Ah],1
 32449 00005973 C6450A01                	MOV	byte [DI+BUFFINFO.buf_wrtcnt],1	; Default to not a FAT sector ;AC000;
 32450 00005977 31C0                    	XOR	AX,AX
 32451                                  
 32452                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32453 00005979 09F6                    	OR	SI,SI				; FAT sector ?
 32454 0000597B 740B                    	JZ	short getb30
 32455                                  
 32456                                  	;mov	al,[es:bp+8]
 32457 0000597D 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]	; update number of copies of
 32458                                  	
 32459                                  	; MSDOS 6.0
 32460 00005981 88450A                  	MOV	[DI+BUFFINFO.buf_wrtcnt],AL	;  this sector present on disk
 32461                                  	;mov	ax,[es:bp+0Fh]
 32462 00005984 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		; offset of identical FAT
 32463                                  						;  sectors
 32464                                  	; MSDOS 3.3
 32465                                  	;;mov	ah,[es:bp+0Fh]
 32466                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 32467                                  
 32468                                  ;	BUGBUG - dos 6 can clean this up by not setting wrtcntinc unless wrtcnt
 32469                                  ;		is set
 32470                                  
 32471                                  getb30:	
 32472                                  	; MSDOS 6.0
 32473                                  	;mov	[di+0Bh],ax
 32474 00005988 89450B                  	MOV	[DI+BUFFINFO.buf_wrtcntinc],AX
 32475                                  
 32476                                  	; MSDOS 3.3
 32477                                  	;;mov	[di+8],ax ; 15/08/2018	
 32478                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],AX
 32479                                  
 32480 0000598B E8BBFE                  	CALL	PLACEBUF
 32481                                  
 32482                                  ;hkn; SS override for next 4
 32483                                  getb35: 
 32484                                  	; 17/12/2022
 32485                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32486                                  	; MSDOS 3.3 & MSDOS 5.0 & MSDOS 6.0
 32487                                  	;MOV	[SS:CURBUF+2],DS
 32488                                  	;MOV	[SS:LastBuffer+2],DS
 32489                                  	;MOV	[SS:CURBUF],DI
 32490                                  	;MOV	[SS:LastBuffer],DI
 32491                                  	;CLC
 32492                                  
 32493                                  	; 17/12/2022
 32494                                  	; 07/12/2022
 32495                                  	; Retro DOS v4.0
 32496 0000598E 368C1E[2000]            	mov	[ss:LastBuffer+2],ds
 32497 00005993 36893E[1E00]            	mov	[ss:LastBuffer],di
 32498 00005998 F8                      	clc
 32499                                  getb35x: ; 28/07/2019
 32500 00005999 368C1E[E405]            	MOV	[ss:CURBUF+2],ds
 32501 0000599E 36893E[E205]            	MOV	[ss:CURBUF],di
 32502                                  
 32503                                  ;	Return with 'C' set appropriately
 32504                                  ;	(dx) = caller's original value
 32505                                  
 32506                                  getbx:	
 32507 000059A3 16                      	push	ss
 32508 000059A4 1F                      	pop	ds
 32509                                  	;retn
 32510                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32511                                  getbuffrb_retn:
 32512                                  ;flushbuf_retn:	; 17/12/2022
 32513 000059A5 C3                      	retn
 32514                                  
 32515                                  ;Break	<FLUSHBUF -- WRITE OUT DIRTY BUFFERS>
 32516                                  ;----------------------------------------------------------------------------
 32517                                  ; Input:
 32518                                  ;	DS = DOSGROUP
 32519                                  ;	AL = Physical unit number local buffers only
 32520                                  ;	   = -1 for all units and all remote buffers
 32521                                  ; Function:
 32522                                  ;	Write out all dirty buffers for unit, and flag them as clean
 32523                                  ;	Carry set if error (user FAILed to I 24)
 32524                                  ;	    Flush operation completed.
 32525                                  ; DS Preserved, all others destroyed (ES too)
 32526                                  ;----------------------------------------------------------------------------
 32527                                  
 32528                                  	; 20/05/2019 - Retro DOS v4.0
 32529                                  	; DOSCODE:9A35h (MSDOS 6.21, MSDOS.SYS)
 32530                                  
 32531                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32532                                  	; DOSCODE:99DAh (MSDOS 5.0, MSDOS.SYS)
 32533                                  FLUSHBUF:
 32534                                  	; MSDOS 3.3
 32535                                  	;;mov	ah,-1 ; 01/08/2018 - Retro DOS v3.0
 32536                                  	;lds	di,[BUFFHEAD]
 32537                                  
 32538                                  	; MSDOS 6.0
 32539 000059A6 E887FE                  	call	GETCURHEAD
 32540                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 32541 000059A9 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 32542 000059AF 7508                    	jnz	short scan_buf_queue
 32543 000059B1 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0			;hkn;
 32544 000059B7 7423                    	je	short end_scan
 32545                                  	
 32546                                  scan_buf_queue:
 32547 000059B9 E82900                  	call	CHECKFLUSH
 32548                                  	;push	ax  ; MSDOS 3.3
 32549                                  	; MSDOS 6.0
 32550                                  	;mov	ah,[di+4]
 32551 000059BC 8A6504                  	mov	ah,[DI+BUFFINFO.buf_ID]
 32552 000059BF 363826[2203]            	cmp	[SS:WPERR],ah					;hkn;
 32553 000059C4 7408                    	je	short free_the_buf
 32554                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 32555 000059C6 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 32556 000059CC 7405                    	jz	short dont_free_the_buf
 32557                                  	; MSDOS 3.3
 32558                                  	;;mov	al,[di+4]
 32559                                  	;mov	al,[DI+BUFFINFO.buf_ID]
 32560                                  	;cmp	[SS:WPERR],al					;hkn;
 32561                                  	; 15/08/2018
 32562                                  	;jne	short dont_free_the_buf	
 32563                                  free_the_buf:
 32564                                  	; MSDOS 6.0 (& MSDOS 3.3)
 32565 000059CE C74504FF00              	mov	word [DI+BUFFINFO.buf_ID],00FFh
 32566                                  dont_free_the_buf:
 32567                                  	;pop	ax  ; MSDOS 3.3 	   	
 32568                                  
 32569                                  	; MSDOS 3.3
 32570                                  	;mov	di,[DI]
 32571                                  	;;mov	di,[DI+BUFFINFO.buf_link] ; .buf_next
 32572                                  	;
 32573                                  	; 15/08/2018
 32574                                  	;lds	di,[di]
 32575                                  	;
 32576                                  	;cmp	di,-1 ; 0FFFFh
 32577                                  	;jnz	short scan_buf_queue 
 32578                                  	
 32579                                  	; MSDOS 6.0
 32580 000059D3 8B3D                    	mov	di,[di]
 32581                                  	;mov	di,[DI+BUFFINFO.buf_next] ; .buf_link
 32582 000059D5 363B3E[BB0E]            	cmp	di,[SS:FIRST_BUFF_ADDR]				;hkn;
 32583 000059DA 75DD                    	jne	short scan_buf_queue
 32584                                  
 32585                                  end_scan:
 32586 000059DC 16                      	push	ss
 32587 000059DD 1F                      	pop	ds
 32588                                  	; 01/08/2018 - Retro DOS v3.0
 32589                                  	;cmp	byte [FAILERR],0
 32590                                  	;jne	short bad_flush
 32591                                  	;retn
 32592                                  ;bad_flush:
 32593                                  	;stc
 32594                                  	;retn
 32595                                  
 32596                                  	; 17/12/2022
 32597                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32598                                  	; 01/08/2018 - Retro DOS v3.0
 32599 000059DE 803E[4A03]01            	cmp	byte [FAILERR],1
 32600 000059E3 F5                      	cmc
 32601                                  flushbuf_retn:
 32602 000059E4 C3                      	retn
 32603                                  	
 32604                                  	; 17/12/2022
 32605                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32606                                  	;cmp	byte [FAILERR],0
 32607                                  	;jne	short bad_flush
 32608                                  	;retn
 32609                                  ;bad_flush:
 32610                                  	;stc
 32611                                  	;retn
 32612                                  
 32613                                  ;----------------------------------------------------------------------------
 32614                                  ;
 32615                                  ; Procedure Name : CHECKFLUSH
 32616                                  ;
 32617                                  ; Inputs : AL - Drive number, -1 means do not check for drive
 32618                                  ;	   DS:DI - pointer to buffer
 32619                                  ;
 32620                                  ; Function : Write out a buffer if it is dirty
 32621                                  ;
 32622                                  ; Carry set if problem (currently user FAILed to I 24)
 32623                                  ;
 32624                                  ;----------------------------------------------------------------------------
 32625                                  
 32626                                  CHECKFLUSH:
 32627                                  	; MSDOS 6.0
 32628 000059E5 B4FF                    	mov	ah,-1	; 01/08/2018 Retro DOS v3.0
 32629                                  	;cmp	[di+4],ah
 32630 000059E7 386504                  	CMP	[DI+BUFFINFO.buf_ID],AH
 32631 000059EA 74F8                    	jz	short flushbuf_retn	; Skip free buffer, carry clear
 32632 000059EC 38C4                    	CMP	AH,AL			; 
 32633 000059EE 7406                    	JZ	short DOBUFFER		; do this buffer
 32634                                  	;cmp	al,[di+4]
 32635 000059F0 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 32636 000059F3 F8                      	CLC
 32637 000059F4 75EE                    	jnz	short flushbuf_retn	; Buffer not for this unit or SFT
 32638                                  DOBUFFER:
 32639                                  	;test	byte [di+5],40h
 32640 000059F6 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 32641 000059FA 74E8                    	jz	short flushbuf_retn	; Buffer not dirty, carry clear by TEST
 32642 000059FC 50                      	PUSH	AX
 32643                                  	;push	word [di+4]
 32644 000059FD FF7504                  	PUSH	WORD [DI+BUFFINFO.buf_ID]
 32645 00005A00 E80B00                  	CALL	BUFWRITE
 32646 00005A03 58                      	POP	AX
 32647 00005A04 7206                    	JC	short LEAVE_BUF		; Leave buffer marked free (lost).
 32648                                  	;and	ah,0BFh
 32649 00005A06 80E4BF                  	AND	AH,~buf_dirty		; Buffer is clean, clears carry
 32650                                  	;mov	[di+4],ax
 32651 00005A09 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX
 32652                                  LEAVE_BUF:
 32653 00005A0C 58                      	POP	AX			; Search info
 32654                                  checkflush_retn:
 32655 00005A0D C3                      	retn
 32656                                  
 32657                                  ;Break	<BUFWRITE -- WRITE OUT A BUFFER IF DIRTY>
 32658                                  ;----------------------------------------------------------------------------
 32659                                  ;
 32660                                  ;	BufWrite writes a buffer to the disk, if it's dirty.
 32661                                  ;
 32662                                  ;	ENTRY	DS:DI Points to the buffer
 32663                                  ;
 32664                                  ;	EXIT	Buffer marked free
 32665                                  ;		Carry set if error (currently user FAILed to I 24)
 32666                                  ;
 32667                                  ;	USES	All buf DS:DI
 32668                                  ;		HIGH_SECTOR
 32669                                  ;----------------------------------------------------------------------------
 32670                                  
 32671                                  	; 20/05/2019 - Retro DOS v4.0
 32672                                  	; DOSCODE:9AA0h (MSDOS 6.21, MSDOS.SYS)
 32673                                  
 32674                                  
 32675                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32676                                  	; DOSCODE:9A45h (MSDOS 5.0, MSDOS.SYS)
 32677                                  
 32678                                  BUFWRITE:
 32679                                  	; 10/09/2018
 32680                                  	; 01/08/2018 - Retro DOS v3.0
 32681                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E94h
 32682 00005A0E B8FF00                  	MOV	AX,00FFH
 32683                                  	;xchg	ax,[di+4]
 32684 00005A11 874504                  	XCHG	AX,[DI+BUFFINFO.buf_ID]	; Free, in case write barfs
 32685 00005A14 3CFF                    	CMP	AL,0FFH
 32686 00005A16 74F5                    	jz      short checkflush_retn	; Buffer is free, carry clear.
 32687                                  	;test	ah,40h
 32688 00005A18 F6C440                  	test	AH,buf_dirty
 32689 00005A1B 74F0                    	jz      short checkflush_retn	; Buffer is clean, carry clear.
 32690                                  	; MSDOS 6.0
 32691 00005A1D E89100                  	call	DEC_DIRTY_COUNT 	; LB. decrement dirty count
 32692                                  
 32693                                  ;hkn; SS override
 32694 00005A20 363A06[2203]            	CMP	AL,[SS:WPERR]
 32695 00005A25 74E6                    	jz      short checkflush_retn	; If in WP error zap buffer
 32696                                  
 32697                                  ;hkn; SS override
 32698                                  	; MSDOS 6.0
 32699 00005A27 36A2[AF0D]              	MOV	[SS:SC_DRIVE],AL	;LB. set it for invalidation ;AN000;
 32700                                  	
 32701                                  	;;les	bp,[di+10] ; MSDOS 3.3
 32702                                  	;les	bp,[di+13] ; MSDOS 6.0
 32703 00005A2B C46D0D                  	LES	BP,[DI+BUFFINFO.buf_DPB]
 32704                                  	;;lea	bx,[di+16]
 32705                                  	;lea	bx,[di+20] ; MSDOS 6.0
 32706 00005A2E 8D5D14                  	LEA	BX,[DI+BUFINSIZ]	; Point at buffer
 32707                                  	;mov	dx,[di+6]
 32708 00005A31 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector] ;F.C. >32mb		;AN000;
 32709                                  	
 32710                                  	; MSDOS 6.0
 32711                                  	;mov	cx,[di+8]
 32712 00005A34 8B4D08                  	MOV	CX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb	;AN000;
 32713                                  
 32714                                  ;hkn; SS override
 32715 00005A37 36890E[0706]            	MOV	[SS:HIGH_SECTOR],CX	;F.C. >32mb		;AN000;
 32716 00005A3C 8A4D0A                  	MOV	CL,[DI+BUFFINFO.buf_wrtcnt] ;>32mb		;AC000;
 32717                                  	; MSDOS 3.3
 32718                                  	;; mov	cx,[DI+8]
 32719                                  	;mov	cx,[DI+BUFFINFO.buf_wrtcnt]
 32720                                  	;MOV	AL,CH			; [DI+BUFFINFO.buf_wrtcntinc]
 32721 00005A3F 30ED                    	XOR	CH,CH
 32722                                  	;;mov	ah,ch ; MSDOS 3.3
 32723                                  
 32724                                  ;hkn; SS override for ALLOWED
 32725                                  	;mov	byte [SS:ALLOWED],18h
 32726 00005A41 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 32727                                  	;test	byte [di+5],8
 32728                                  	; MSDOS 6.0 (& Retro DOS 3.0)
 32729                                  	;test	ah,8
 32730 00005A47 F6C408                  	test	AH,buf_isDATA
 32731 00005A4A 7406                    	JZ	short NO_IGNORE
 32732                                  	;or	byte [SS:ALLOWED],20h
 32733 00005A4C 36800E[4B03]20          	OR	byte [SS:ALLOWED],Allowed_IGNORE
 32734                                  NO_IGNORE:
 32735                                  	;xor	ah,ah ; 10/09/2018 (MSDOS 3.3, Retro DOS v3.0)
 32736                                  	; MSDOS 6.0
 32737                                  	;mov	ax,[di+11]
 32738 00005A52 8B450B                  	MOV	AX,[DI+BUFFINFO.buf_wrtcntinc]	;>32mb		;AC000;
 32739                                  
 32740 00005A55 57                      	PUSH	DI		; Save buffer pointer
 32741 00005A56 31FF                    	XOR	DI,DI		; Indicate failure
 32742                                  
 32743 00005A58 1E                      	push	ds ; *
 32744 00005A59 53                      	push	bx ; **
 32745                                  WRTAGAIN:
 32746 00005A5A 57                      	push	di ; ***
 32747 00005A5B 51                      	push	cx ; ****
 32748 00005A5C 50                      	push	ax ; *****
 32749                                  	;MOV	CX,1
 32750                                  	; 17/12/2022
 32751                                  	; ch = 0
 32752 00005A5D B101                    	mov	cl,1 ; 24/07/2019
 32753                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32754                                  	;mov	cx,1
 32755 00005A5F 53                      	push	bx ; ******
 32756 00005A60 52                      	push	dx ; *******
 32757 00005A61 1E                      	push	ds ; ********
 32758                                  
 32759                                  ; Note: As far as I can tell, all disk reads into buffers go through this point. -mrw 10/88
 32760                                  
 32761                                  	; MSDOS 6.0
 32762                                  	;cmp	byte [ss:BuffInHMA],0 ; 10/06/2019
 32763                                  	; 22/09/2023
 32764 00005A62 36382E[7900]            	cmp	[ss:BuffInHMA],ch ; 0
 32765 00005A67 7418                    	jz	short NBUFFINHMA
 32766 00005A69 51                      	push	cx
 32767 00005A6A 06                      	push	es
 32768 00005A6B 89DE                    	mov	si,bx
 32769 00005A6D 268B4E02                	mov	cx,[es:bp+DPB.SECTOR_SIZE]
 32770 00005A71 D1E9                    	shr	cx,1
 32771 00005A73 36C43E[7A00]            	les	di,[ss:LoMemBuff] ; 10/06/2019
 32772 00005A78 89FB                    	mov	bx,di
 32773 00005A7A FC                      	cld
 32774 00005A7B F3A5                    	rep	movsw
 32775 00005A7D 06                      	push	es
 32776 00005A7E 1F                      	pop	ds
 32777 00005A7F 07                      	pop	es
 32778 00005A80 59                      	pop	cx
 32779                                  NBUFFINHMA:
 32780 00005A81 E83CDC                  	call	DWRITE		; Write out the dirty buffer
 32781 00005A84 1F                      	pop	ds ; ********
 32782 00005A85 5A                      	pop	dx ; *******
 32783 00005A86 5B                      	pop	bx ; ******
 32784 00005A87 58                      	pop	ax ; *****
 32785 00005A88 59                      	pop	cx ; ****
 32786 00005A89 5F                      	pop	di ; ***
 32787 00005A8A 7201                    	JC	short NOSET
 32788 00005A8C 47                      	INC	DI		; If at least ONE write succeedes, the operation
 32789                                  NOSET:				;	succeedes.
 32790 00005A8D 01C2                    	ADD	DX,AX
 32791 00005A8F E2C9                    	LOOP	WRTAGAIN
 32792 00005A91 5B                      	pop	bx ; **
 32793 00005A92 1F                      	pop	ds ; *
 32794                                  	;OR	DI,DI		; Clears carry
 32795                                  	;JNZ	short BWROK	; At least one write worked
 32796                                  	;STC			; DI never got INCed, all writes failed.
 32797                                  	; 22/09/2023
 32798 00005A93 83FF01                  	cmp	di,1
 32799                                  BWROK:	
 32800 00005A96 5F                      	POP	DI
 32801 00005A97 C3                      	retn
 32802                                  
 32803                                  ;**	Set_RQ_SC_Parms - Set Secondary Cache Parameters
 32804                                  ;----------------------------------------------------------------------------
 32805                                  ;	Set_RQ_SC_Parms sets the sector size and drive number value
 32806                                  ;	for the secondary cache. This updates SC_SECTOR_SIZE &
 32807                                  ;	SC_DRIVE even if SC is disabled to save the testing
 32808                                  ;	code and time
 32809                                  ;
 32810                                  ;	ENTRY	ES:BP = drive parameter block
 32811                                  ;
 32812                                  ;	EXIT	[SC_SECTOR_SIZE]= drive sector size
 32813                                  ;		[SC_DRIVE]= drive #
 32814                                  ;
 32815                                  ;	USES	Flags
 32816                                  ;----------------------------------------------------------------------------
 32817                                  
 32818                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32819                                  ; 04/05/2019 - Retro DOS v4.0
 32820                                  
 32821                                  SET_RQ_SC_PARMS:
 32822                                  ;hkn; SS override for all variables used in this procedure.
 32823 00005A98 50                      	push	ax
 32824                                  	;mov	ax,[es:bp+2]
 32825 00005A99 268B4602                	MOV	ax,[ES:BP+DPB.SECTOR_SIZE]	; save sector size
 32826 00005A9D 36A3[AD0D]              	MOV	[ss:SC_SECTOR_SIZE],ax
 32827                                  	;;mov	al,[es:bp+0]
 32828                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32829                                  	;MOV	al,[ES:BP+DPB.DRIVE]		; save drive #
 32830                                  	; 15/12/2022
 32831 00005AA1 268A4600                	mov	al,[ES:BP]
 32832 00005AA5 36A2[AF0D]              	MOV	[ss:SC_DRIVE],al
 32833 00005AA9 58                      	pop	ax
 32834                                  srspx:	
 32835 00005AAA C3                      	retn					;LB. return
 32836                                  
 32837                                  ;Break	<INC_DIRTY_COUNT-increment dirty count>
 32838                                  ;----------------------------------------------------------------------------
 32839                                  ; Input:
 32840                                  ;	none
 32841                                  ; Function:
 32842                                  ;	increment dirty buffers count
 32843                                  ; Output:
 32844                                  ;	dirty buffers count is incremented
 32845                                  ;
 32846                                  ; All registers preserved
 32847                                  ;----------------------------------------------------------------------------
 32848                                  
 32849                                  INC_DIRTY_COUNT:
 32850                                  ;; BUGBUG  ---- remove this routine
 32851                                  ;; BUGBUG ---- only one instruction is needed (speed win, space loose)
 32852 00005AAB 36FF06[7100]            	inc	word [ss:DirtyBufferCount]	;hkn;
 32853 00005AB0 C3                      	retn
 32854                                  
 32855                                  ;Break	<DEC_DIRTY_COUNT-decrement dirty count>
 32856                                  ;----------------------------------------------------------------------------
 32857                                  ; Input:
 32858                                  ;	none
 32859                                  ; Function:
 32860                                  ;	decrement dirty buffers count
 32861                                  ; Output:
 32862                                  ;	dirty buffers count is decremented
 32863                                  ;
 32864                                  ; All registers preserved
 32865                                  ;----------------------------------------------------------------------------
 32866                                  
 32867                                  DEC_DIRTY_COUNT:
 32868 00005AB1 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ;hkn;
 32869 00005AB7 7405                    	jz	short ddcx		; BUGBUG - shouldn't it be an
 32870 00005AB9 36FF0E[7100]            	dec	word [ss:DirtyBufferCount] 
 32871                                  					; error condition to underflow here? ;hkn;
 32872                                  ddcx:	
 32873 00005ABE C3                      	retn
 32874                                  
 32875                                  ;============================================================================
 32876                                  ; MSPROC.ASM, MSDOS 6.0, 1992
 32877                                  ;============================================================================
 32878                                  ; 02/08/2018 - Retro DOS v3.0
 32879                                  ; 29/04/2019 - Retro DOS v4.0
 32880                                  
 32881                                  ; (15/04/2018 - RetrO DOS v2.0, MSDOS 2.11 - PROC.ASM - 1983)
 32882                                  
 32883                                  ; Pseudo EXEC system call for DOS
 32884                                  
 32885                                  ;	TITLE	MSPROC - process maintenance
 32886                                  ;	NAME	MSPROC
 32887                                  
 32888                                  ; =========================================================================
 32889                                  ;**	Process related system calls and low level routines for DOS 2.X.
 32890                                  ;	I/O specs are defined in DISPATCH.
 32891                                  ;
 32892                                  ;	$WAIT
 32893                                  ;	$EXEC
 32894                                  ;	$Keep_process
 32895                                  ;	Stay_resident
 32896                                  ;	$EXIT
 32897                                  ;	$ABORT
 32898                                  ;	abort_inner
 32899                                  ;
 32900                                  ;	Modification history:
 32901                                  ;
 32902                                  ;		Created: ARR 30 March 1983
 32903                                  ;		AN000	version 4.0 jan. 1988
 32904                                  ;		A007	PTM 3957 - fake vesrion for IBMCACHE.COM
 32905                                  ;		A008	PTM 4070 - fake version for MS WINDOWS
 32906                                  ;
 32907                                  ;		M000	added support for loading programs into UMBs 7/9/90
 32908                                  ;
 32909                                  ;		M004 - MS PASCAL 3.2 support. Please see under tag M003 in 
 32910                                  ;		       dossym.inc. 7/30/90
 32911                                  ;		M005 - Support for EXE programs with out STACK segment and 
 32912                                  ;		       with resident size < 64K - 256 bytes. A 256 byte 
 32913                                  ;		       stack is provided at the end of the program. Note that
 32914                                  ;		       only SP is changed.
 32915                                  ;		M020 - Fix for Rational bug for details see exepatch.asm
 32916                                  ;
 32917                                  ;		M028 - 4b04 implementation
 32918                                  ;
 32919                                  ;		M029 - Support for EXEs without stack rewritten. If EXE is
 32920                                  ;			in memory block >= 64K, sp = 0. If memory block
 32921                                  ;			obtained is <64K, point sp at the end of the memory
 32922                                  ;			block. For EXEs smaller than 64K, 256 bytes are still
 32923                                  ;			added for a stack segment which may be needed if it
 32924                                  ;			is loaded in low memory situations.
 32925                                  ;
 32926                                  ;		M030 - Fixing bug in EXEPACPATCH & changing 4b04 to 4b05
 32927                                  ;
 32928                                  ;		M040 - Bug #3052. The environment sizing code would flag a
 32929                                  ;			a bad environment if it reached 32767 bytes. Changed
 32930                                  ;			to allow 32768 bytes of environment.
 32931                                  ;
 32932                                  ;		M047 - Release the allocated UMB when we failed to load a 
 32933                                  ;		       COM file high. Also ensure that if the biggest block
 32934                                  ;		       into which we load the com file is less than 64K then
 32935                                  ;		       we provide atleast 256 bytes of stack to the user.
 32936                                  ;
 32937                                  ;		M050 - Made Lie table search CASE insensitive
 32938                                  ;
 32939                                  ;		M060 - Removed special version table from the kernal and
 32940                                  ;                      put it in a device drive which puts the address
 32941                                  ;                      in the DOS DATA area location UU_IFS_DOS_CALL
 32942                                  ;		       as a DWORD.
 32943                                  ;
 32944                                  ;		M063 - Modified UMB support. If the HIGH_ONLY bit is set on
 32945                                  ;		       entry do not try to load low if there is no space in
 32946                                  ;		       UMBs.
 32947                                  ;
 32948                                  ;		M068 - Support for copy protect apps. Call ChkCopyProt to 
 32949                                  ;		       set a20off_count. Set bit EXECA20BIT in DOS_FLAG. Also
 32950                                  ;		       change return address to LeaveDos if AL=5.
 32951                                  ;
 32952                                  ;               20-Jul-1992 bens  Added ifdef RESTRICTED_BUILD code that
 32953                                  ;                      controls building a version of MSDOS.SYS that only
 32954                                  ;                      runs programs from a fixed list (defined in the
 32955                                  ;                      file RESTRICT.INC).  Search for "RESTRICTED_BUILD"
 32956                                  ;                      for details.  This feature is used to build a
 32957                                  ;                      "special" version of DOS that can be handed out to
 32958                                  ;                      OEM/ISV customers as part of a "service" disk.
 32959                                  ;
 32960                                  ; =========================================================================
 32961                                  
 32962                                  ;SAVEXIT  EQU  10
 32963                                  
 32964                                  ;BREAK	<$WAIT - return previous process error code>
 32965                                  ; =========================================================================
 32966                                  ;	$WAIT - Return previous process error code.
 32967                                  ;
 32968                                  ;	Assembler usage:
 32969                                  ;
 32970                                  ;	    MOV     AH, WaitProcess
 32971                                  ;	    INT     int_command
 32972                                  ;
 32973                                  ;	ENTRY	none
 32974                                  ;	EXIT	(ax) = exit code
 32975                                  ;	USES	all
 32976                                  ; =========================================================================
 32977                                  
 32978                                  	; 20/05/2019 - Retro DOS v4.0
 32979                                  	; DOSCODE:9B55h (MSDOS 6.21, MSDOS.SYS)
 32980                                  
 32981                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32982                                  	; DOSCODE:9A5Ah (MSDOS 5.0, MSDOS.SYS)	
 32983                                  _$WAIT:
 32984                                  	; 02/08/2018 - Retro DOS v3.0
 32985                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E1h
 32986                                  
 32987 00005ABF 31C0                    	xor	AX,AX
 32988 00005AC1 368706[3403]            	xchg	AX,[ss:exit_code]
 32989 00005AC6 E96EAB                  	jmp	SYS_RET_OK
 32990                                  
 32991                                  ; =========================================================================
 32992                                  ;BREAK <$exec - load/go a program>
 32993                                  ;	EXEC.ASM - EXEC System Call
 32994                                  ;
 32995                                  ;
 32996                                  ; Assembler usage:
 32997                                  ;	    lds     DX, Name
 32998                                  ;	    les     BX, Blk
 32999                                  ;	    mov     AH, Exec
 33000                                  ;	    mov     AL, FUNC
 33001                                  ;	    int     INT_COMMAND
 33002                                  ;
 33003                                  ;	AL  Function
 33004                                  ;	--  --------
 33005                                  ;	 0  Load and execute the program.
 33006                                  ;	 1  Load, create the program header but do not
 33007                                  ;	    begin execution.
 33008                                  ;	 3  Load overlay. No header created.
 33009                                  ;
 33010                                  ;	    AL = 0 -> load/execute program
 33011                                  ;
 33012                                  ;	    +---------------------------+
 33013                                  ;	    | WORD segment address of	|
 33014                                  ;	    | environment.		|
 33015                                  ;	    +---------------------------+
 33016                                  ;	    | DWORD pointer to ASCIZ	|
 33017                                  ;	    | command line at 80h	|
 33018                                  ;	    +---------------------------+
 33019                                  ;	    | DWORD pointer to default	|
 33020                                  ;	    | FCB to be passed at 5Ch	|
 33021                                  ;	    +---------------------------+
 33022                                  ;	    | DWORD pointer to default	|
 33023                                  ;	    | FCB to be passed at 6Ch	|
 33024                                  ;	    +---------------------------+
 33025                                  ;
 33026                                  ;	    AL = 1 -> load program
 33027                                  ;
 33028                                  ;	    +---------------------------+
 33029                                  ;	    | WORD segment address of	|
 33030                                  ;	    | environment.		|
 33031                                  ;	    +---------------------------+
 33032                                  ;	    | DWORD pointer to ASCIZ	|
 33033                                  ;	    | command line at 80h	|
 33034                                  ;	    +---------------------------+
 33035                                  ;	    | DWORD pointer to default	|
 33036                                  ;	    | FCB to be passed at 5Ch	|
 33037                                  ;	    +---------------------------+
 33038                                  ;	    | DWORD pointer to default	|
 33039                                  ;	    | FCB to be passed at 6Ch	|
 33040                                  ;	    +---------------------------+
 33041                                  ;	    | DWORD returned value of	|
 33042                                  ;	    | CS:IP			|
 33043                                  ;	    +---------------------------+
 33044                                  ;	    | DWORD returned value of	|
 33045                                  ;	    | SS:IP			|
 33046                                  ;	    +---------------------------+
 33047                                  ;
 33048                                  ;	    AL = 3 -> load overlay
 33049                                  ;
 33050                                  ;	    +---------------------------+
 33051                                  ;	    | WORD segment address where|
 33052                                  ;	    | file will be loaded.	|
 33053                                  ;	    +---------------------------+
 33054                                  ;	    | WORD relocation factor to |
 33055                                  ;	    | be applied to the image.	|
 33056                                  ;	    +---------------------------+
 33057                                  ;
 33058                                  ; Returns:
 33059                                  ;	    AX = error_invalid_function
 33060                                  ;	       = error_bad_format
 33061                                  ;	       = error_bad_environment
 33062                                  ;	       = error_not_enough_memory
 33063                                  ;	       = error_file_not_found
 33064                                  ; =========================================================================
 33065                                  ;
 33066                                  ;   Revision history:
 33067                                  ;
 33068                                  ;	 A000	version 4.00  Jan. 1988
 33069                                  ;
 33070                                  ; =========================================================================
 33071                                  
 33072                                  Exec_Internal_Buffer		EQU	OPENBUF
 33073                                  Exec_Internal_Buffer_Size	EQU	(128+128+53+curdirLen)
 33074                                  
 33075                                  ; =========================================================================
 33076                                  
 33077                                  ;IF1		; warning message on buffers
 33078                                  ;%out	Please make sure that the following are contiguous and of the
 33079                                  ;%out	following sizes:
 33080                                  ;%out
 33081                                  ;%out	OpenBuf     128
 33082                                  ;%out	RenBuf	    128
 33083                                  ;%out	SearchBuf    53
 33084                                  ;%out	DummyCDS    curdirLen
 33085                                  ;ENDIF
 33086                                  
 33087                                  ; =========================================================================
 33088                                  
 33089                                  ; =========================================================================
 33090                                  ;
 33091                                  ; =========================================================================
 33092                                  
 33093                                  	; 20/05/2019 - Retro DOS v4.0
 33094                                  	; DOSCODE:9B5Fh (MSDOS 6.21, MSDOS.SYS)
 33095                                  
 33096                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33097                                  	; DOSCODE:9B04h (MSDOS 5.0, MSDOS.SYS)
 33098                                  	
 33099                                  _$EXEC:
 33100                                  	; 02/08/2018 - Retro DOS v3.0
 33101                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5EF1h
 33102                                  
 33103                                  EXEC001S:
 33104                                  	;LocalVar    Exec_Blk		,DWORD
 33105                                  	;LocalVar    Exec_Func		,BYTE
 33106                                  	;LocalVar    Exec_Load_High	,BYTE
 33107                                  	;LocalVar    Exec_FH		,WORD
 33108                                  	;LocalVar    Exec_Rel_Fac	,WORD
 33109                                  	;LocalVar    Exec_Res_Len_Para	,WORD
 33110                                  	;LocalVar    Exec_Environ	,WORD
 33111                                  	;LocalVar    Exec_Size		,WORD
 33112                                  	;LocalVar    Exec_Load_Block	,WORD
 33113                                  	;LocalVar    Exec_DMA		,WORD
 33114                                  	;LocalVar    ExecNameLen 	,WORD
 33115                                  	;LocalVar    ExecName		,DWORD
 33116                                  	;
 33117                                  	;LocalVar    Exec_DMA_Save	,WORD
 33118                                  	;LocalVar    Exec_NoStack	,BYTE
 33119                                  
 33120                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33121                                  	;%define	Exec_Blk	dword [bp-4]
 33122                                  	%define		Exec_Blk	[bp-4] ; 09/08/2018
 33123                                  	%define		Exec_BlkL	word [bp-4]	
 33124                                  	%define		Exec_BlkH	word [bp-2]
 33125                                  	%define		Exec_Func	byte [bp-5]
 33126                                  	%define		Exec_Load_High	byte [bp-6]
 33127                                  	%define		Exec_FH		word [bp-8]
 33128                                  	%define		Exec_Rel_Fac	word [bp-10]
 33129                                  	%define		Exec_Res_Len_Para word [bp-12]
 33130                                  	%define		Exec_Environ	word [bp-14]
 33131                                  	%define		Exec_Size	word [bp-16]
 33132                                  	%define		Exec_Load_Block	word [bp-18]
 33133                                  	%define		Exec_DMA	word [bp-20]
 33134                                  	%define		ExecNameLen	word [bp-22]
 33135                                  	;%define	ExecName	dword [bp-26]
 33136                                  	%define		ExecName	[bp-26] ; 09/08/2018
 33137                                  	%define		ExecNameL	word [bp-26]	
 33138                                  	%define		ExecNameH	word [bp-24]
 33139                                  	; MSDOS 6.0
 33140                                  	%define		Exec_DMA_Save	word [bp-28]
 33141                                  	%define		Exec_NoStack	byte [bp-29]
 33142                                  	
 33143                                  	; ==================================================================
 33144                                  	; validate function
 33145                                  	; ==================================================================
 33146                                  		      	
 33147                                  	; M068 - Start
 33148                                  	;
 33149                                  	; Reset the A20OFF_COUNT to 0. This is done as there is a 
 33150                                  	; possibility that the count may not be decremented all the way to
 33151                                  	; 0. A typical case is if the program for which we intended to keep 
 33152                                  	; the A20  off for a sufficiently long time (A20OFF_COUNT int 21 
 33153                                  	; calls), exits pre-maturely due to error conditions.
 33154                                  
 33155                                  	; MSDOS 6.0
 33156 00005AC9 36C606[8500]00          	mov	byte [SS:A20OFF_COUNT], 0
 33157                                  
 33158                                  	; If al=5 (ExecReady) we'll change the return address on the stack	
 33159                                  	; to be LeaveDos in msdisp.asm. This ensures that the EXECA20OFF
 33160                                  	; bit set in DOS_FLAG by ExceReady is not cleared in msdisp.asm
 33161                                  
 33162 00005ACF 3C05                    	cmp	al,5			; Q: is this ExecReady call
 33163                                  	;jne	short @f
 33164 00005AD1 7505                    	jne	short Exec_@f		; N: continue
 33165                                  					; Y: change ret addr. to LeaveDos.
 33166 00005AD3 59                      	pop	cx			; Note CX is not input to ExecReady
 33167 00005AD4 B9[0404]                	mov	cx,LeaveDOS
 33168 00005AD7 51                      	push	cx
 33169                                  ;@@:
 33170                                  Exec_@f:
 33171                                  	; M068 - End
 33172                                  	
 33173                                  	;Enter
 33174                                  
 33175 00005AD8 55                      	push	bp
 33176 00005AD9 89E5                    	mov	bp,sp
 33177                                  	;;sub	sp,26	; MSDOS 3.3
 33178                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)	
 33179                                  	;sub	sp,29	; MSDOS 6.0 (& MSDOS 6.21)
 33180                                  	; 17/12/2022
 33181                                  	; 20/05/2019
 33182 00005ADB 83EC1E                  	sub	sp,30	; Retro DOS v4.0	
 33183                                  
 33184                                  	; MSDOS 6.0
 33185 00005ADE 3C05                    	cmp	AL,5			; only 0, 1, 3 or 5 are allowed ;M028
 33186                                  					; M030
 33187 00005AE0 7614                    	jna	short Exec_Check_2
 33188                                  
 33189                                  	; MSDOS 3.3
 33190                                  	;cmp	AL,3
 33191                                  	;jna	short Exec_Check_2
 33192                                  
 33193                                  Exec_Bad_Fun:
 33194 00005AE2 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; 1
 33195                                  					; Extended Error Locus	;smr;SS Override
 33196                                  	;mov	al,1
 33197 00005AE8 B001                    	mov	al,error_invalid_function
 33198                                  
 33199                                  Exec_Ret_Err:
 33200                                  	;Leave
 33201 00005AEA 89EC                    	mov	sp,bp
 33202 00005AEC 5D                      	pop	bp
 33203                                  	;transfer SYS_RET_ERR
 33204 00005AED E950AB                  	jmp	SYS_RET_ERR
 33205                                  
 33206                                  	; MSDOS 6.0
 33207                                  ExecReadyJ:
 33208 00005AF0 E8FD17                  	call	ExecReady		; M028
 33209 00005AF3 E90504                  	jmp	norm_ovl		; do a Leave & xfer sysret_OK ; M028
 33210                                  
 33211                                  Exec_Check_2:
 33212 00005AF6 3C02                    	cmp	AL,2			
 33213 00005AF8 74E8                    	je	short Exec_Bad_Fun
 33214                                  
 33215                                  	; MSDOS 6.0
 33216 00005AFA 3C04                    	cmp	al,4			; 2 & 4 are not allowed
 33217 00005AFC 74E4                    	je	short Exec_Bad_Fun
 33218                                  	
 33219 00005AFE 3C05                    	cmp	al,5			; M028 ; M030
 33220 00005B00 74EE                    	je	short ExecReadyJ	; M028
 33221                                  
 33222                                  	;mov	[bp-4],bx
 33223 00005B02 895EFC                  	mov	Exec_BlkL,BX		; stash args
 33224                                  	;mov	[bp-2],es
 33225 00005B05 8C46FE                  	mov	Exec_BlkH,ES
 33226                                  	;mov	[bp-5],al
 33227 00005B08 8846FB                  	mov	Exec_Func,AL
 33228                                  	;mov	byte [bp-6],0
 33229 00005B0B C646FA00                	mov	Exec_Load_High,0
 33230                                  
 33231                                  	;mov	[bp-26],dx
 33232 00005B0F 8956E6                  	mov	ExecNameL,DX		; set up length of exec name
 33233                                  	;mov	[bp-24],ds
 33234 00005B12 8C5EE8                  	mov	ExecNameH,DS
 33235 00005B15 89D6                    	mov	SI,DX			; move pointer to convenient place
 33236                                  	;invoke	DStrLen
 33237 00005B17 E8C5B6                  	call	DStrLen
 33238                                  	;mov	[bp-22],cx
 33239 00005B1A 894EEA                  	mov	ExecNameLen,CX		; save length
 33240                                  
 33241                                  	; MSDOS 6.0
 33242 00005B1D 36A0[0203]              	mov	al,[ss:AllocMethod]	; M063: save alloc method in 
 33243 00005B21 36A2[8400]              	mov	[ss:ALLOCMSAVE],al	; M063: AllocMsave
 33244                                  
 33245 00005B25 30C0                    	xor	AL,AL			; open for reading
 33246 00005B27 55                      	push	BP
 33247                                  
 33248                                  	; MSDOS 6.0
 33249                                  	;or	byte [ss:DOS_FLAG],1
 33250 00005B28 36800E[8600]01          	or	byte [ss:DOS_FLAG],EXECOPEN ; this flag is set to indicate to 
 33251                                  					; the redir that this open call is
 33252                                  					; due to an exec.
 33253                                  
 33254                                  	;invoke	$OPEN			; is the file there?
 33255 00005B2E E80513                  	call	_$OPEN
 33256                                  
 33257                                  	; MSDOS 6.0
 33258 00005B31 9C                      	pushf
 33259                                  	; 02/06/2019
 33260                                  	;and	byte [ss:DOS_FLAG],0FEh
 33261 00005B32 368026[8600]FE          	and	byte [ss:DOS_FLAG],~EXECOPEN ; reset flag
 33262 00005B38 9D                      	popf
 33263                                  
 33264 00005B39 5D                      	pop	BP
 33265                                  
 33266                                  	; MSDOS 3.3 & MSDOS 6.0
 33267 00005B3A 72AE                    	jc	short Exec_Ret_Err
 33268                                  
 33269                                  	;mov	[bp-8],ax
 33270 00005B3C 8946F8                  	mov	Exec_FH,AX
 33271 00005B3F 89C3                    	mov	BX,AX
 33272 00005B41 30C0                    	xor	AL,AL
 33273                                  	;invoke	$Ioctl
 33274 00005B43 E8DBC6                  	call	_$IOCTL
 33275 00005B46 7207                    	jc	short Exec_BombJ
 33276                                  
 33277                                  	;test	dl,80h
 33278 00005B48 F6C280                  	test	DL,devid_ISDEV
 33279 00005B4B 740A                    	jz	short Exec_Check_Environ
 33280                                  
 33281                                  	;mov	al,2
 33282 00005B4D B002                    	mov	AL,error_file_not_found
 33283                                  Exec_BombJ:
 33284 00005B4F E9CA00                  	jmp	Exec_Bomb
 33285                                  
 33286                                  BadEnv:
 33287                                  	;mov	al,0Ah
 33288 00005B52 B00A                    	mov	AL,error_bad_environment
 33289 00005B54 E9C500                  	jmp	Exec_Bomb
 33290                                  
 33291                                  Exec_Check_Environ:
 33292                                  	;mov	word [bp-18],0
 33293 00005B57 C746EE0000              	mov	Exec_Load_Block,0
 33294                                  	;mov	word [bp-14],0
 33295 00005B5C C746F20000              	mov	Exec_Environ,0
 33296                                  					; overlays... no environment
 33297                                  	;test	byte [bp-5],2
 33298 00005B61 F646FB02                	test	Exec_Func,exec_func_overlay
 33299 00005B65 7552                    	jnz	short Exec_Read_Header
 33300                                  
 33301                                  	;lds	si,[bp-4]
 33302 00005B67 C576FC                  	lds	SI,Exec_Blk		; get block
 33303 00005B6A 8B04                    	mov	ax,[SI]
 33304                                  	;mov	AX,[SI+EXEC1.ENVIRON]	; address of environ
 33305 00005B6C 09C0                    	or	AX,AX
 33306 00005B6E 750C                    	jnz	short Exec_Scan_Env
 33307                                  
 33308 00005B70 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	;smr;SS Override
 33309                                  	;mov	ax,[44]
 33310 00005B75 A12C00                  	mov	AX,[PDB.ENVIRON]
 33311                                  
 33312                                  ; MSDOS 6.0
 33313                                  ;---------------------------------------------BUG 92 4/30/90-----------------
 33314                                  ;
 33315                                  ; Exec_environ is being correctly initialized after the environment has been
 33316                                  ; allocated and copied form the parent's env. It must not be initialized here.
 33317                                  ; Because if the call to $alloc below fails Exec_dealloc will deallocate the
 33318                                  ; parent's environment.
 33319                                  ;	mov	Exec_Environ,AX
 33320                                  ;
 33321                                  ;----------------------------------------------------------------------------
 33322                                  
 33323                                  	;mov	[bp-14],ax
 33324                                  	;mov	Exec_Environ,ax
 33325                                  
 33326 00005B78 09C0                    	or	AX,AX
 33327 00005B7A 743D                    	jz	short Exec_Read_Header
 33328                                  
 33329                                  Exec_Scan_Env:
 33330 00005B7C 8EC0                    	mov	ES,AX
 33331 00005B7E 31FF                    	xor	DI,DI
 33332                                  	;mov	cx,7FFFh ; MSDOS 3.3
 33333 00005B80 B90080                  	mov	CX,8000h ; MSDOS 6.0	; at most 32k of environment ;M040
 33334 00005B83 30C0                    	xor	AL,AL
 33335                                  
 33336                                  Exec_Get_Environ_Len:
 33337 00005B85 F2AE                    	repnz	scasb			; find that nul byte
 33338 00005B87 75C9                    	jnz	short BadEnv
 33339                                  
 33340 00005B89 49                      	dec	CX			; Dec CX for the next nul byte test
 33341 00005B8A 78C6                    	js	short BadEnv		; gone beyond the end of the environment
 33342                                  
 33343 00005B8C AE                      	scasb				; is there another nul byte?
 33344 00005B8D 75F6                    	jnz	short Exec_Get_Environ_Len ; no, scan some more
 33345                                  
 33346 00005B8F 57                      	push	DI
 33347                                  	;lea	bx,[DI+11h]
 33348 00005B90 8D5D11                  	lea	BX,[DI+0Fh+2]
 33349                                  	;add	bx,[bp-22]
 33350 00005B93 035EEA                  	add	BX,ExecNameLen		; BX <- length of environment
 33351                                  					; remember argv[0] length
 33352                                  					; round up and remember argc
 33353 00005B96 B104                    	mov	CL,4
 33354 00005B98 D3EB                    	shr	BX,CL			; number of paragraphs needed
 33355 00005B9A 06                      	push	ES
 33356                                  	;invoke	$Alloc			; can we get the space?
 33357 00005B9B E84406                  	call	_$ALLOC
 33358 00005B9E 1F                      	pop	DS
 33359 00005B9F 59                      	pop	CX
 33360                                  
 33361                                  	;jnc	short Exec_Save_Environ
 33362                                  	;jmp	SHORT Exec_No_Mem	; nope... cry and sob
 33363                                  	; 17/12/2022
 33364 00005BA0 7274                    	jc	short Exec_No_Mem ; 02/06/2019
 33365                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33366                                  	;jnc	short Exec_Save_Environ
 33367                                  	;jmp	SHORT Exec_No_Mem
 33368                                  
 33369                                  Exec_Save_Environ:
 33370 00005BA2 8EC0                    	mov	ES,AX
 33371                                  	;mov	[bp-14],ax
 33372 00005BA4 8946F2                  	mov	Exec_Environ,AX 	; save him for a rainy day
 33373 00005BA7 31F6                    	xor	SI,SI
 33374 00005BA9 89F7                    	mov	DI,SI
 33375 00005BAB F3A4                    	rep	movsb			; copy the environment
 33376 00005BAD B80100                  	mov	AX,1
 33377 00005BB0 AB                      	stosw
 33378                                  	;lds	si,[bp-26]
 33379 00005BB1 C576E6                  	lds	SI,ExecName
 33380                                  	;mov	cx,[bp-22]
 33381 00005BB4 8B4EEA                  	mov	CX,ExecNameLen
 33382 00005BB7 F3A4                    	rep	movsb
 33383                                  
 33384                                  Exec_Read_Header:
 33385                                  	; We read in the program header into the above data area and
 33386                                  	; determine where in this memory the image will be located.
 33387                                  
 33388                                  	;Context DS
 33389 00005BB9 16                      	push	ss
 33390 00005BBA 1F                      	pop	ds
 33391                                  	;mov	cx,26
 33392 00005BBB B91A00                  	mov	CX,exec_header_len	; header size
 33393 00005BBE BA[C80F]                	mov	DX,exec_signature
 33394 00005BC1 06                      	push	ES
 33395 00005BC2 1E                      	push	DS
 33396 00005BC3 E88304                  	call	ExecRead
 33397 00005BC6 1F                      	pop	DS
 33398 00005BC7 07                      	pop	ES
 33399 00005BC8 7250                    	jc	short Exec_Bad_File
 33400                                  
 33401 00005BCA 09C0                    	or	AX,AX
 33402 00005BCC 744C                    	jz	short Exec_Bad_File
 33403                                  	;cmp	ax,26
 33404 00005BCE 83F81A                  	cmp	AX,exec_header_len	; did we read the right number?
 33405 00005BD1 7519                    	jnz	short Exec_Com_Filej	; yep... continue
 33406                                  
 33407 00005BD3 F706[D40F]FFFF          	test	word [exec_max_BSS],-1 	; indicate load high?
 33408 00005BD9 7504                    	jnz	short Exec_Check_Sig
 33409                                  
 33410                                  	;mov	byte [bp-6],0FFh
 33411 00005BDB C646FAFF                	mov	Exec_Load_High,-1
 33412                                  
 33413                                  Exec_Check_Sig:
 33414 00005BDF A1[C80F]                	mov	AX,[exec_signature]	; rms;NSS
 33415                                  	;cmp	ax,5A4Dh ; 'MZ'
 33416 00005BE2 3D4D5A                  	cmp	AX,exe_valid_signature	; zibo arises!
 33417 00005BE5 7408                    	jz	short Exec_Save_Start 	; assume com file if no signature
 33418                                  
 33419                                  	;cmp	ax,4D5Ah ; 'ZM'
 33420 00005BE7 3D5A4D                  	cmp	AX,exe_valid_old_signature  ; zibo arises!
 33421 00005BEA 7403                    	jz	short Exec_Save_Start 	; assume com file if no signature
 33422                                  
 33423                                  Exec_Com_Filej:
 33424 00005BEC E9E901                  	jmp	Exec_Com_File
 33425                                  
 33426                                  	; We have the program header... determine memory requirements
 33427                                  
 33428                                  Exec_Save_Start:
 33429 00005BEF A1[CC0F]                	mov	AX,[exec_pages]		; get 512-byte pages	;rms;NSS
 33430 00005BF2 B105                    	mov	CL,5			; convert to paragraphs
 33431 00005BF4 D3E0                    	shl	AX,CL
 33432 00005BF6 2B06[D00F]              	sub	AX,[exec_par_dir] 	; AX = size in paragraphs ;rms;NSS
 33433                                  	;mov	[bp-12],ax
 33434 00005BFA 8946F4                  	mov	Exec_Res_Len_Para,AX
 33435                                  
 33436                                  		; Do we need to allocate memory?
 33437                                  		; Yes if function is not load-overlay
 33438                                  
 33439                                  	;test	byte [bp-5],2
 33440 00005BFD F646FB02                	test	Exec_Func,exec_func_overlay
 33441 00005C01 7445                    	jz	short Exec_Allocate	; allocation of space
 33442                                  
 33443                                  		; get load address from block
 33444                                  
 33445                                  	;les	di,[bp-4]
 33446 00005C03 C47EFC                  	les	DI,Exec_Blk
 33447 00005C06 268B05                  	mov	ax,[es:di]
 33448                                  	;mov	AX,[ES:DI+EXEC3.load_addr]
 33449                                  	;mov	[bp-20],ax
 33450 00005C09 8946EC                  	mov	Exec_DMA,AX
 33451                                  
 33452                                  	; 17/12/2022
 33453                                  	;;mov	ax,[es:di+2]
 33454                                  	;mov	AX,[ES:DI+EXEC3.reloc_fac]
 33455                                  	;;mov	[bp-10],ax
 33456                                  	;mov	Exec_Rel_Fac,AX
 33457                                  
 33458                                  	; 17/12/2022
 33459                                  	; 30/11/2022 (!most proper code!)
 33460                                  	;mov	dx,[es:di+2]
 33461 00005C0C 268B5502                	mov	dx,[ES:DI+EXEC3.reloc_fac]
 33462                                  	;mov	[bp-10],dx
 33463 00005C10 8956F6                  	mov	Exec_Rel_Fac,dx
 33464                                  	; ax = Exec_DMA
 33465 00005C13 E9DE00                  	jmp	Exec_Find_Res
 33466                                  
 33467                                  ; 17/12/2022
 33468                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33469                                  ; 27/09/2023
 33470                                  %if 0
 33471                                  	; 02/06/2019 - Retro DOS v4.0
 33472                                  	;mov	ax,[bp-20]  ; *+*
 33473                                  	mov	AX,Exec_DMA ; *+*
 33474                                  	; 10/08/2018
 33475                                  	jmp	Exec_Find_Res		; M000
 33476                                  %endif
 33477                                  
 33478                                  Exec_No_Mem:
 33479                                  	;mov	al,8
 33480 00005C16 B008                    	mov	AL,error_not_enough_memory
 33481 00005C18 EB02                    	jmp	short Exec_Bomb
 33482                                  
 33483                                  Exec_Bad_File:
 33484                                  	;mov	al,0Bh
 33485 00005C1A B00B                    	mov	AL,error_bad_format
 33486                                  
 33487                                  Exec_Bomb:
 33488                                  	;mov	bx,[bp-8]
 33489 00005C1C 8B5EF8                  	mov	BX,Exec_FH
 33490 00005C1F E84004                  	call	Exec_Dealloc
 33491                                  	;LeaveCrit CritMem
 33492 00005C22 E8E9B6                  	call	LCritMEM
 33493                                  	;save	<AX,BP>
 33494 00005C25 50                      	push	ax
 33495 00005C26 55                      	push	bp
 33496                                  	;invoke	$CLOSE
 33497 00005C27 E83D0A                  	call	_$CLOSE
 33498                                  	;restore <BP,AX>
 33499 00005C2A 5D                      	pop	bp
 33500 00005C2B 58                      	pop	ax
 33501 00005C2C E9BBFE                  	jmp	Exec_Ret_Err
 33502                                  
 33503                                  Exec_Chk_Mem: 
 33504                                  
 33505                                  	; 24/09/2023
 33506                                  	; ds = DOSDATA
 33507                                  ; 17/12/2022
 33508                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33509                                  ;%if 0
 33510                                  	; MSDOS 6.0    			; M063 - Start
 33511                                  	;mov	al,[ss:AllocMethod]	; save current alloc method in ax
 33512                                  	; 10/06/2019
 33513 00005C2F A0[0203]                	mov	al,[AllocMethod]
 33514                                  	;mov	bl,[ss:ALLOCMSAVE]
 33515 00005C32 8A1E[8400]              	mov	bl,[ALLOCMSAVE]
 33516                                  	;mov	[ss:AllocMethod],bl	; restore original allocmethod
 33517 00005C36 881E[0203]              	mov	[AllocMethod],bl
 33518                                  	
 33519 00005C3A F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 33520 00005C3D 75D7                    	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 33521                                  	;				; N: continue
 33522                                  	;
 33523 00005C3F A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 33524 00005C41 74D3                    	jz	short Exec_No_Mem	; N: no memory 
 33525                                  	; 02/06/2019
 33526                                  	;mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 33527 00005C43 A1[8A00]                	mov	ax,[SAVE_AX]
 33528                                  	;jmp	short Exec_Norm_Alloc	;    Try again
 33529                                  					; M063 - End
 33530 00005C46 EB2B                    	jmp	short Exec_Norm_Alloc1
 33531                                  ;%endif
 33532                                  
 33533                                  ; 17/12/2022
 33534                                  %if 0
 33535                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33536                                  	; MSDOS 6.0    			; M063 - Start
 33537                                  	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 33538                                  	mov	bl,[ss:ALLOCMSAVE]
 33539                                  	mov	[ss:AllocMethod],bl	; restore original allocmethod
 33540                                  
 33541                                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 33542                                  	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 33543                                  	;				; N: continue
 33544                                  	;
 33545                                  	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 33546                                  	jz	short Exec_No_Mem	; N: no memory 
 33547                                  
 33548                                  	mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 33549                                  	jmp	short Exec_Norm_Alloc	;    Try again
 33550                                  					; M063 - End
 33551                                  %endif
 33552                                  
 33553                                  Exec_Allocate:
 33554                                  	; 09/09/2018
 33555                                  
 33556                                  	; M005 - START
 33557                                  	; If there is no STACK segment for this exe file and if this
 33558                                  	; not an overlay and the resident size is less than 64K - 
 33559                                  	; 256 bytes we shall add 256 bytes to the programs 
 33560                                  	; resident memory requirement and set Exec_SP to this value.
 33561                                  	
 33562                                  	; 17/12/2022
 33563 00005C48 29DB                    	sub	bx,bx ; 0	
 33564                                  
 33565                                  	; MSDOS 6.0
 33566                                  	;;mov	byte [bp-29],0
 33567                                  	;mov	Exec_NoStack,0
 33568                                  	; 17/12/2022
 33569 00005C4A 885EE3                  	mov	Exec_NoStack,bl ; 0
 33570 00005C4D 391E[D60F]              	cmp	[exec_SS],bx ; 0
 33571                                  	;cmp	word [exec_SS],0	; Q: is there a stack seg
 33572 00005C51 7511                    	jne	short ea1		; Y: continue normal processing
 33573 00005C53 391E[D80F]              	cmp	[exec_SP],bx ; 0
 33574                                  	;cmp	word [exec_SP],0	; Q: is there a stack ptr
 33575 00005C57 750B                    	jne	short ea1		; Y: continue normal processing
 33576                                  
 33577                                  	;inc	byte [bp-29]
 33578 00005C59 FE46E3                  	inc	Exec_NoStack
 33579 00005C5C 3DF00F                  	cmp	ax,1000h-10h		; Q: is this >= 64K-256 bytes
 33580 00005C5F 7303                    	jae	short ea1		; Y: don't set Exec_SP
 33581                                  
 33582 00005C61 83C010                  	add	ax,10h			; add 10h paras to mem requirement
 33583                                  ea1:
 33584                                  	; M005 - END
 33585                                  
 33586                                  	; MSDOS 6.0			; M000 - start
 33587                                  	; 20/05/2019
 33588                                  	; (ds = ss = DOSDATA)
 33589 00005C64 F606[0203]80            	test	byte [AllocMethod],HIGH_FIRST ; 80h
 33590                                  					; Q: is the alloc strat high_first
 33591 00005C69 7405                    	jz	short Exec_Norm_Alloc	; N: normal allocate
 33592                                  					; Y: set high_only bit
 33593 00005C6B 800E[0203]40            	or	byte [AllocMethod],HIGH_ONLY ; 40h
 33594                                  					; M000 - end
 33595                                  Exec_Norm_Alloc:
 33596 00005C70 A3[8A00]                	mov	[SAVE_AX],ax		; M000: save ax for possible 2nd  
 33597                                  Exec_Norm_Alloc1:	; 02/06/2019
 33598                                  					; M000: attempt at allocating memory
 33599                                  	; MSDOS 3.3
 33600                                  	;push	ax			; M000
 33601                                  
 33602 00005C73 BBFFFF                  	mov	BX,0FFFFh		; see how much room in arena
 33603 00005C76 1E                      	push	DS
 33604                                  	;invoke	$Alloc			; should have carry set and BX has max
 33605 00005C77 E86805                  	call	_$ALLOC
 33606 00005C7A 1F                      	pop	DS
 33607                                  
 33608                                  	; MSDOS 6.0
 33609 00005C7B A1[8A00]                	mov	AX,[SAVE_AX]		; M000
 33610                                  	; MSDOS 3.3
 33611                                  	;pop	ax			; M000
 33612                                  
 33613 00005C7E 83C010                  	add	AX,10h			; room for header
 33614 00005C81 83FB11                  	cmp	BX,11h			; enough room for a header
 33615                                  	; MSDOS 6.0
 33616 00005C84 72A9                    	jb	short Exec_Chk_Mem	; M000
 33617                                  	; MSDOS 3.3	
 33618                                  	;jb	short Exec_No_Mem
 33619                                  
 33620 00005C86 39D8                    	cmp	AX,BX			; is there enough for bare image?
 33621                                  	; MSDOS 6.0
 33622 00005C88 77A5                    	ja	short Exec_Chk_Mem	; M000
 33623                                  	; MSDOS 3.3
 33624                                  	;ja	short Exec_No_Mem
 33625                                  
 33626                                  	;test	byte [bp-6],0FFh
 33627 00005C8A F646FAFF                	test	Exec_Load_High,-1	; if load high, use max
 33628 00005C8E 7518                    	jnz	short Exec_BX_Max	; use max
 33629                                  
 33630                                  	; 09/09/2018
 33631                                  
 33632 00005C90 0306[D20F]              	add	AX,[exec_min_BSS] 	; go for min allocation;rms;NSS
 33633                                  	; MSDOS 6.0
 33634 00005C94 7299                    	jc	short Exec_Chk_Mem		; M000
 33635                                  	; MSDOS 3.3
 33636                                  	;jc	short Exec_No_Mem
 33637                                  
 33638 00005C96 39D8                    	cmp	AX,BX			; enough space?
 33639                                  	; MSDOS 6.0
 33640 00005C98 7795                    	ja	short Exec_Chk_Mem	; M000: nope...	
 33641                                  	; MSDOS 3.3
 33642                                  	;ja	short Exec_No_Mem
 33643                                  
 33644 00005C9A 2B06[D20F]              	sub	AX,[exec_min_BSS] 	; rms;NSS
 33645 00005C9E 0306[D40F]              	add	AX,[exec_max_BSS] 	; go for the MAX
 33646 00005CA2 7204                    	jc	short Exec_BX_Max
 33647                                  
 33648 00005CA4 39D8                    	cmp	AX,BX
 33649 00005CA6 7602                    	jbe	short Exec_Got_Block
 33650                                  
 33651                                  Exec_BX_Max:
 33652 00005CA8 89D8                    	mov	AX,BX
 33653                                  
 33654                                  Exec_Got_Block:
 33655                                  	; 03/08/2018 - Retro DOS v3.0
 33656                                  
 33657 00005CAA 1E                      	push	DS
 33658 00005CAB 89C3                    	mov	BX,AX
 33659                                  	;mov	[bp-16],bx
 33660 00005CAD 895EF0                  	mov	Exec_Size,BX
 33661                                  	;invoke	$Alloc			; get the space
 33662 00005CB0 E82F05                  	call	_$ALLOC
 33663 00005CB3 1F                      	pop	DS
 33664                                  	; MSDOS 6.0
 33665                                  	;jc	short Exec_Chk_Mem	; M000
 33666                                  	; MSDOS 3.3
 33667                                  	;;jc	short Exec_No_Mem
 33668                                  	; 20/05/2019
 33669 00005CB4 7303                    	jnc	short ea0
 33670 00005CB6 E976FF                  	jmp	Exec_Chk_Mem
 33671                                  ea0:
 33672                                  	; MSDOS 6.0
 33673 00005CB9 8A0E[8400]              	mov	cl,[ALLOCMSAVE]		; M063: 
 33674 00005CBD 880E[0203]              	mov	[AllocMethod],cl	; M063: restore allocmethod
 33675                                  
 33676                                  ;M029; Begin changes
 33677                                  ; This code does special handling for programs with no stack segment. If so,
 33678                                  ;check if the current block is larger than 64K. If so, we do not modify
 33679                                  ;Exec_SP. If smaller than 64K, we make Exec_SP = top of block. In either
 33680                                  ;case Exec_SS is not changed.
 33681                                  
 33682                                  	; MSDOS 6.0
 33683                                  	;cmp	byte [bp-29],0
 33684 00005CC1 807EE300                	cmp	Exec_NoStack,0
 33685                                  	;je	@f
 33686 00005CC5 7412                    	je	short ea2
 33687                                  
 33688 00005CC7 81FB0010                	cmp	bx,1000h		; Q: >= 64K memory block
 33689                                  	;jae	@f			; Y: Exec_SP = 0
 33690 00005CCB 730C                    	jae	short ea2
 33691                                  
 33692                                  ;Make Exec_SP point at the top of the memory block
 33693                                  
 33694 00005CCD B104                    	mov	cl,4
 33695 00005CCF D3E3                    	shl	bx,cl			; get byte offset
 33696 00005CD1 81EB0001                	sub	bx,100h			; take care of PSP
 33697 00005CD5 891E[D80F]              	mov	[exec_SP],bx		; Exec_SP = top of block
 33698                                  ea2:
 33699                                  ;@@:
 33700                                  ;M029; end changes
 33701                                  
 33702                                  	;mov	[bp-18],ax
 33703 00005CD9 8946EE                  	mov	Exec_Load_Block,AX
 33704 00005CDC 83C010                  	add	AX,10h
 33705                                  	;test	byte [bp-6],0FFh
 33706 00005CDF F646FAFF                	test	Exec_Load_High,-1
 33707 00005CE3 7409                    	jz	short Exec_Use_AX	; use ax for load info
 33708                                  
 33709                                  	;add	ax,[bp-16]
 33710 00005CE5 0346F0                  	add	AX,Exec_Size		; go to end
 33711                                  	;sub	ax,[bp-12]
 33712 00005CE8 2B46F4                  	sub	AX,Exec_Res_Len_Para	; drop off header
 33713 00005CEB 83E810                  	sub	AX,10h			; drop off pdb
 33714                                  
 33715                                  Exec_Use_AX:
 33716                                  	;mov	[bp-10],ax
 33717 00005CEE 8946F6                  	mov	Exec_Rel_Fac,AX 	; new segment
 33718                                  	;mov	[bp-20],ax
 33719 00005CF1 8946EC                  	mov	Exec_DMA,AX ; *+*	; beginning of dma
 33720                                  
 33721                                  	; Determine the location in the file of the beginning of
 33722                                  	; the resident
 33723                                  
 33724                                  ; 17/12/2022
 33725                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33726                                  ;%if 0
 33727                                  
 33728                                  Exec_Find_Res:
 33729                                  	; MSDOS 6.0
 33730                                  	;;mov	dx,[bp-20]
 33731                                  	;mov	DX,Exec_DMA ; *+*
 33732                                  	;;mov	[bp-28],dx
 33733                                  	;mov	Exec_DMA_Save,DX
 33734                                  
 33735                                  	; 17/12/2022
 33736                                  	; AX = Exec_DMA
 33737                                  
 33738                                  	; 02/06/2019 - Retro DOS v4.0
 33739                                  	;mov	[bp-28],ax ; *+*
 33740 00005CF4 8946E4                  	mov	Exec_DMA_Save,AX ; *+*
 33741                                  
 33742                                  ;%endif
 33743                                  
 33744                                  ; 17/12/2022
 33745                                  %if 0
 33746                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33747                                  Exec_Find_Res:
 33748                                  	;mov	dx,[bp-20]
 33749                                  	mov	DX,Exec_DMA ; *+*
 33750                                  	;mov	[bp-28],dx
 33751                                  	mov	Exec_DMA_Save,DX
 33752                                  %endif
 33753                                  
 33754                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33755 00005CF7 8B16[D00F]              	mov	DX,[exec_par_dir]
 33756 00005CFB 52                      	push	DX
 33757 00005CFC B104                    	mov	CL,4
 33758 00005CFE D3E2                    	shl	DX,CL			; low word of location
 33759 00005D00 58                      	pop	AX
 33760 00005D01 B10C                    	mov	CL,12
 33761 00005D03 D3E8                    	shr	AX,CL			; high word of location
 33762 00005D05 89C1                    	mov	CX,AX			; CX <- high
 33763                                  
 33764                                  		; Read in the resident image (first, seek to it)
 33765                                  	;mov	bx,[bp-8]
 33766 00005D07 8B5EF8                  	mov	BX,Exec_FH
 33767 00005D0A 1E                      	push	DS
 33768 00005D0B 30C0                    	xor	AL,AL
 33769                                  	;invoke	$Lseek			; Seek to resident
 33770 00005D0D E8D30A                  	call	_$LSEEK
 33771 00005D10 1F                      	pop	DS
 33772 00005D11 7303                    	jnc	short Exec_Big_Read
 33773                                  
 33774 00005D13 E906FF                  	jmp	Exec_Bomb
 33775                                  
 33776                                  Exec_Big_Read:				; Read resident into memory
 33777                                  	;mov	bx,[bp-12]
 33778 00005D16 8B5EF4                  	mov	BX,Exec_Res_Len_Para
 33779 00005D19 81FB0010                	cmp	BX,1000h		; Too many bytes to read?
 33780 00005D1D 7203                    	jb	short Exec_Read_OK
 33781                                  
 33782 00005D1F BBE00F                  	mov	BX,0FE0h		; Max in one chunk FE00 bytes
 33783                                  
 33784                                  Exec_Read_OK:
 33785                                  	;sub	[bp-12],bx
 33786 00005D22 295EF4                  	sub	Exec_Res_Len_Para,BX	; We read (soon) this many
 33787 00005D25 53                      	push	BX
 33788 00005D26 B104                    	mov	CL,4
 33789 00005D28 D3E3                    	shl	BX,CL			; Get count in bytes from paras
 33790 00005D2A 89D9                    	mov	CX,BX			; Count in correct register
 33791 00005D2C 1E                      	push	DS
 33792                                  	;mov	ds,[bp-20]
 33793 00005D2D 8E5EEC                  	mov	DS,Exec_DMA		; Set up read buffer
 33794                                  
 33795 00005D30 31D2                    	xor	DX,DX
 33796 00005D32 51                      	push	CX			; Save our count
 33797 00005D33 E81303                  	call	ExecRead
 33798 00005D36 59                      	pop	CX			; Get old count to verify
 33799 00005D37 1F                      	pop	DS
 33800 00005D38 7248                    	jc	short Exec_Bad_FileJ
 33801                                  
 33802 00005D3A 39C1                    	cmp	CX,AX			; Did we read enough?
 33803 00005D3C 5B                      	pop	BX			; Get paragraph count back
 33804 00005D3D 7408                    	jz	short ExecCheckEnd	; and do reloc if no more to read
 33805                                  
 33806                                  	; The read did not match the request. If we are off by 512
 33807                                  	; bytes or more then the header lied and we have an error.
 33808                                  
 33809 00005D3F 29C1                    	sub	CX,AX
 33810 00005D41 81F90002                	cmp	CX,512
 33811 00005D45 733B                    	jae	short Exec_Bad_FileJ
 33812                                  
 33813                                  	; We've read in CX bytes... bump DTA location
 33814                                  
 33815                                  ExecCheckEnd:
 33816                                  	;add	[bp-20],bx
 33817 00005D47 015EEC                  	add	Exec_DMA,BX		; Bump dma address
 33818                                  	;test	word [bp-12],0FFFFh
 33819 00005D4A F746F4FFFF              	test	Exec_Res_Len_Para,-1
 33820 00005D4F 75C5                    	jnz	short Exec_Big_Read
 33821                                  
 33822                                  	; The image has now been read in. We must perform relocation
 33823                                  	; to the current location.
 33824                                  
 33825                                  exec_do_reloc:
 33826                                  	;mov	cx,[bp-10]
 33827 00005D51 8B4EF6                  	mov	CX,Exec_Rel_Fac
 33828 00005D54 A1[D60F]                	mov	AX,[exec_SS]		; get initial SS ;rms;NSS
 33829 00005D57 01C8                    	add	AX,CX			; and relocate him
 33830 00005D59 A3[C20F]                	mov	[exec_init_SS],AX 	; rms;NSS
 33831                                  
 33832 00005D5C A1[D80F]                	mov	AX,[exec_SP]		; initial SP ;rms;NSS
 33833 00005D5F A3[C00F]                	mov	[exec_init_SP],AX 	; rms;NSS
 33834                                  
 33835 00005D62 C406[DC0F]              	les	AX,[exec_IP]		; rms;NSS
 33836 00005D66 A3[C40F]                	mov	[exec_init_IP],AX 	; rms;NSS
 33837 00005D69 8CC0                    	mov	AX,ES			; rms;NSS
 33838 00005D6B 01C8                    	add	AX,CX			; relocated...
 33839 00005D6D A3[C60F]                	mov	[exec_init_CS],AX 	; rms;NSS
 33840                                  
 33841 00005D70 31C9                    	xor	CX,CX
 33842 00005D72 8B16[E00F]              	mov	DX,[exec_rle_table]	; rms;NSS
 33843                                  	;mov	bx,[bp-8]
 33844 00005D76 8B5EF8                  	mov	BX,Exec_FH
 33845 00005D79 1E                      	push	DS
 33846 00005D7A 31C0                    	xor	AX,AX
 33847                                  	;invoke	$Lseek
 33848 00005D7C E8640A                  	call	_$LSEEK
 33849 00005D7F 1F                      	pop	DS
 33850 00005D80 7303                    	jnc	short exec_get_entries
 33851                                  
 33852                                  Exec_Bad_FileJ:
 33853 00005D82 E995FE                  	jmp	Exec_Bad_File
 33854                                  
 33855                                  exec_get_entries:
 33856 00005D85 8B16[CE0F]              	mov	DX,[exec_rle_count]	; Number of entries left ;rms;NSS
 33857                                  
 33858                                  exec_read_reloc:
 33859 00005D89 52                      	push	DX
 33860                                  	;mov	dx,OPENBUF
 33861 00005D8A BA[BE03]                	mov	DX,Exec_Internal_Buffer
 33862                                  	;;mov	cx,388 ; MSDOS 3.3 ; (390>>2)<<2
 33863                                  	;mov	cx,396 ; MSDOS 6.0
 33864 00005D8D B98C01                  	mov	CX,((Exec_Internal_Buffer_Size)/4)*4 ; (397>>2)<<2
 33865 00005D90 1E                      	push	DS
 33866 00005D91 E8B502                  	call	ExecRead
 33867 00005D94 07                      	pop	ES
 33868 00005D95 5A                      	pop	DX
 33869 00005D96 72EA                    	jc	short Exec_Bad_FileJ
 33870                                  
 33871                                  	;;mov	cx,97 ;  MSDOS 3.3 ; (390>>2)
 33872                                  	;mov	cx,99 ;  MSDOS 6.0
 33873 00005D98 B96300                  	mov	CX,(Exec_Internal_Buffer_Size)/4 ; (397>>2)
 33874                                  					; Pointer to byte location in header
 33875                                  	;mov	di,OPENBUF
 33876 00005D9B BF[BE03]                	mov	DI,Exec_Internal_Buffer
 33877                                  	;mov	si,[bp-10]
 33878 00005D9E 8B76F6                  	mov	SI,Exec_Rel_Fac 	; Relocate a single address
 33879                                  
 33880                                  exec_reloc_one:
 33881 00005DA1 09D2                    	or	DX,DX			; Any more entries?
 33882 00005DA3 7416                    	jz	short Exec_Set_PDBJ
 33883                                  
 33884                                  exec_get_addr:
 33885 00005DA5 26C51D                  	lds	BX,[ES:DI]		; Get ra/sa of entry
 33886 00005DA8 8CD8                    	mov	AX,DS			; Relocate address of item
 33887                                  
 33888                                  	; MSDOS 6.0
 33889                                  ;;;;;;	add	AX,SI  ; MSDOS 3.3
 33890                                  	;add	ax,[bp-28]
 33891 00005DAA 0346E4                  	add	AX,Exec_DMA_Save
 33892                                  
 33893 00005DAD 8ED8                    	mov	DS,AX
 33894 00005DAF 0137                    	add	[BX],SI
 33895 00005DB1 83C704                  	add	DI,4
 33896 00005DB4 4A                      	dec	DX
 33897 00005DB5 E2EA                    	loop	exec_reloc_one		; End of internal buffer?
 33898                                  
 33899                                  	; We've exhausted a single buffer's worth. Read in the next
 33900                                  	; piece of the relocation table.
 33901                                  
 33902 00005DB7 06                      	push	ES
 33903 00005DB8 1F                      	pop	DS
 33904 00005DB9 EBCE                    	jmp	short exec_read_reloc
 33905                                  
 33906                                  Exec_Set_PDBJ:
 33907                                  	; MSDOS 6.0
 33908                                  	
 33909                                  	; We now determine if this is a buggy exe packed file and if 
 33910                                  	; so we patch in the right code. Note that fixexepatch will
 33911                                  	; point to a ret if dos loads low. The load segment as 
 33912                                  	; determined above will be in exec_dma_save
 33913                                  	
 33914 00005DBB 06                      	push	es
 33915 00005DBC 50                      	push	ax			; M030
 33916 00005DBD 51                      	push	cx			; M030
 33917                                  	;mov	es,[bp-28]
 33918 00005DBE 8E46E4                  	mov	es,Exec_DMA_Save
 33919 00005DC1 36A1[C60F]              	mov	ax,[ss:exec_init_CS]	; M030
 33920 00005DC5 368B0E[C40F]            	mov	cx,[ss:exec_init_IP]	; M030
 33921 00005DCA 36FF16[F311]            	call	word [ss:FixExePatch]
 33922                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33923                                  	; (MSDOS 5.0 MSDOS.SYS does not contain 'Rational386Patch')
 33924                                  	;call	word [ss:Rational386PatchPtr]
 33925 00005DCF 59                      	pop	cx			; M030
 33926 00005DD0 58                      	pop	ax			; M030
 33927 00005DD1 07                      	pop	es
 33928                                  
 33929 00005DD2 E9DE00                  	jmp	Exec_Set_PDB
 33930                                  
 33931                                  Exec_No_Memj:
 33932 00005DD5 E93EFE                  	jmp	Exec_No_Mem
 33933                                  
 33934                                  	; we have a .COM file. First, determine if we are merely
 33935                                  	; loading an overlay.
 33936                                  
 33937                                  Exec_Com_File:
 33938                                  	;test	byte [bp-5],2
 33939 00005DD8 F646FB02                	test	Exec_Func,exec_func_overlay
 33940 00005DDC 742D                    	jz	short Exec_Alloc_Com_File
 33941                                  	;lds	si,[bp-4]
 33942 00005DDE C576FC                  	lds	SI,Exec_Blk		; get arg block
 33943 00005DE1 AD                      	lodsw				; get load address
 33944                                  	;mov	[bp-20],ax
 33945 00005DE2 8946EC                  	mov	Exec_DMA,AX
 33946 00005DE5 B8FFFF                  	mov	AX,0FFFFh
 33947 00005DE8 EB63                    	jmp	short Exec_Read_Block	; read it all!
 33948                                  
 33949                                  Exec_Chk_Com_Mem:			
 33950                                  	; MSDOS 6.0	     		; M063 - Start
 33951 00005DEA 36A0[0203]              	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 33952 00005DEE 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]
 33953 00005DF3 36881E[0203]            	mov	[ss:AllocMethod],bl	; restore original allocmethod
 33954 00005DF8 F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 33955 00005DFB 75D8                    	jnz	short Exec_No_Memj	; Y: no space in UMBs. Quit
 33956                                  					; N: continue
 33957                                  	
 33958 00005DFD A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 33959 00005DFF 74D4                    	jz	short Exec_No_Memj	; N: no memory 
 33960                                  	
 33961                                  	;mov	ax,[bp-18]
 33962 00005E01 8B46EE                  	mov	ax,Exec_Load_Block	; M047: ax = block we just allocated	
 33963 00005E04 31DB                    	xor	bx,bx			; M047: bx => free arena
 33964 00005E06 E87502                  	call	ChangeOwner		; M047: free this block
 33965                                  	
 33966 00005E09 EB0E                    	jmp	short Exec_Norm_Com_Alloc
 33967                                  					; M063 - End
 33968                                  	
 33969                                  	; We must allocate the max possible size block (ick!)
 33970                                  	; and set up CS=DS=ES=SS=PDB pointer, IP=100, SP=max
 33971                                  	; size of block.
 33972                                  
 33973                                  Exec_Alloc_Com_File:
 33974                                  	; MSDOS 6.0			; M000 -start
 33975 00005E0B 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST ; 80h
 33976                                  					; Q: is the alloc strat high_first
 33977 00005E11 7406                    	jz	short Exec_Norm_Com_Alloc ; N: normal allocate
 33978                                  					; Y: set high_only bit
 33979 00005E13 36800E[0203]40          	or	byte [ss:AllocMethod],HIGH_ONLY ; 40h
 33980                                  					; M000 - end
 33981                                  Exec_Norm_Com_Alloc:			; M000
 33982                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33983 00005E19 BBFFFF                  	mov	BX,0FFFFh
 33984                                  	;invoke	$Alloc			; largest piece available as error
 33985 00005E1C E8C303                  	call	_$ALLOC
 33986 00005E1F 09DB                    	or	BX,BX
 33987                                  	; MSDOS 6.0
 33988 00005E21 74C7                    	jz	short Exec_Chk_Com_Mem	; M000
 33989                                  	; MSDOS 3.3
 33990                                  	;jz	short Exec_No_Memj
 33991                                  
 33992                                  	;mov	[bp-16],bx
 33993 00005E23 895EF0                  	mov	Exec_Size,BX		; save size of allocation block
 33994 00005E26 53                      	push	BX
 33995                                  	;invoke	$ALLOC			; largest piece available
 33996 00005E27 E8B803                  	call	_$ALLOC
 33997 00005E2A 5B                      	pop	BX			; get size of block...
 33998                                  	;mov	[bp-18],ax
 33999 00005E2B 8946EE                  	mov	Exec_Load_Block,AX
 34000                                  
 34001 00005E2E 83C010                  	add	AX,10h			; increment for header
 34002                                  	;mov	[bp-20],ax
 34003 00005E31 8946EC                  	mov	Exec_DMA,AX
 34004                                  
 34005 00005E34 31C0                    	xor	AX,AX			; presume 64K read...
 34006 00005E36 81FB0010                	cmp	BX,1000h		; 64k or more in block?
 34007 00005E3A 730E                    	jae	short Exec_Read_Com	; yes, read only 64k
 34008                                  
 34009 00005E3C 89D8                    	mov	AX,BX			; convert size to bytes
 34010 00005E3E B104                    	mov	CL,4
 34011 00005E40 D3E0                    	shl	AX,CL
 34012                                  	; 17/12/2022
 34013                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34014                                  	;			(MSDOS 5.0, MSDOS.SYS compatibility)
 34015                                  	; MSDOS 5.0
 34016                                  	;cmp	AX,100h   
 34017                                  	; 02/06/2019 - Retro DOS v4.0
 34018                                  	; MSDOS 6.0
 34019                                          ; 17/12/2022
 34020 00005E42 3D0002                  	cmp	AX,200h                 ; enough memory for PSP and stack?
 34021 00005E45 76A3                    	jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 34022                                  	;;jbe	short Exec_No_Memj	; M000: jump if not
 34023                                  	;; Retro DOS v3.0 modification (on MSDOS 6.0 code) -03/08/2018-
 34024                                  	;;jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 34025                                  	;jbe	short Exec_No_Memj	; M000: jump if not
 34026                                  
 34027                                  					; M047: size of the block is < 64K
 34028 00005E47 2D0001                  	sub	ax,100h			; M047: reserve 256 bytes for stack
 34029                                  
 34030                                  Exec_Read_Com:
 34031                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34032 00005E4A 2D0001                  	sub	AX,100h 		; remember size of psp
 34033                                  Exec_Read_Block:
 34034 00005E4D 50                      	push	AX			; save number to read
 34035                                  	;mov	bx,[bp-8]
 34036 00005E4E 8B5EF8                  	mov	BX,Exec_FH		; of com file
 34037 00005E51 31C9                    	xor	CX,CX			; but seek to 0:0
 34038 00005E53 89CA                    	mov	DX,CX
 34039 00005E55 31C0                    	xor	AX,AX			; seek relative to beginning
 34040                                  	;invoke	$Lseek			; back to beginning of file
 34041 00005E57 E88909                  	call	_$LSEEK
 34042 00005E5A 59                      	pop	CX			; number to read
 34043                                  	;mov	ds,[bp-20]
 34044 00005E5B 8E5EEC                  	mov	DS,Exec_DMA
 34045 00005E5E 31D2                    	xor	DX,DX
 34046 00005E60 51                      	push	CX
 34047 00005E61 E8E501                  	call	ExecRead
 34048 00005E64 5E                      	pop	SI			; get number of bytes to read
 34049 00005E65 7303                    	jnc	short OkRead
 34050 00005E67 E9B0FD                  	jmp	Exec_Bad_File
 34051                                  
 34052                                  	; 10/09/2018
 34053                                  OkRead:
 34054 00005E6A 39F0                    	cmp	AX,SI			; did we read them all?
 34055                                  	; MSDOS 6.0
 34056                                  	;jz	short Exec_Chk_Com_Mem	; M00: exactly the wrong number...no 
 34057                                  	; MSDOS 3.3
 34058                                  	;;jz	short Exec_No_Memj	; M00: exactly the wrong number...
 34059 00005E6C 7503                    	jne	short OkRead2
 34060 00005E6E E979FF                  	jmp	Exec_Chk_Com_Mem
 34061                                  OkRead2:
 34062                                  	; MSDOS 6.0
 34063 00005E71 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]	; M063
 34064 00005E76 36881E[0203]            	mov	[ss:AllocMethod],bl	; M063: restore alloc method
 34065                                  
 34066                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34067                                  	;test	byte [bp-5],2
 34068 00005E7B F646FB02                	test	Exec_Func,exec_func_overlay
 34069 00005E7F 7532                    	jnz	short Exec_Set_PDB	; no starto, chumo!
 34070                                  
 34071                                  	;mov	ax,[bp-20]
 34072 00005E81 8B46EC                  	mov	AX,Exec_DMA
 34073 00005E84 83E810                  	sub	AX,10h
 34074 00005E87 36A3[C60F]              	mov	[SS:exec_init_CS],AX
 34075 00005E8B 36C706[C40F]0001        	mov	word [SS:exec_init_IP],100h ; initial IP is 100h
 34076                                  
 34077                                  	; SI is AT MOST FF00h. Add FE to account for PSP - word
 34078                                  	; of 0 on stack.
 34079                                  
 34080 00005E92 81C6FE00                	add	SI,0FEh 		; make room for stack
 34081                                  
 34082                                  	; MSDOS 6.0
 34083 00005E96 83FEFE                  	cmp	si,0FFFEh		; M047: Q: was there >= 64K available
 34084 00005E99 7404                    	je	short Exec_St_Ok	; M047: Y: stack is fine
 34085 00005E9B 81C60001                	add	si,100h			; M047: N: add the xtra 100h for stack
 34086                                  
 34087                                  Exec_St_Ok:
 34088                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34089 00005E9F 368936[C00F]            	mov	[SS:exec_init_SP],SI 	; max value for read is also SP!;smr;SS Override
 34090 00005EA4 36A3[C20F]              	mov	[SS:exec_init_SS],AX 					;smr;SS Override
 34091 00005EA8 8ED8                    	mov	DS,AX
 34092 00005EAA C7040000                	mov	WORD [SI],0		; 0 for return
 34093                                  
 34094                                  	; MSDOS 6.0
 34095                                  
 34096                                  	; M068
 34097                                  	;
 34098                                  	; We now determine if this is a Copy Protected App. If so the 
 34099                                  	; A20OFF_COUNT is set to 6. Note that ChkCopyProt will point to a 
 34100                                  	; a ret if DOS is loaded low. Also DS contains the load segment.
 34101                                  
 34102 00005EAE 36FF16[6100]            	call	word [ss:ChkCopyProt]	
 34103                                  
 34104                                  Exec_Set_PDB:
 34105                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34106                                  	;mov	bx,[bp-8]
 34107 00005EB3 8B5EF8                  	mov	BX,Exec_FH		; we are finished with the file.
 34108 00005EB6 E8A901                  	call	Exec_Dealloc
 34109 00005EB9 55                      	push	BP
 34110                                  	;invoke	$Close			; release the jfn
 34111 00005EBA E8AA07                  	call	_$CLOSE
 34112 00005EBD 5D                      	pop	BP
 34113 00005EBE E89301                  	call	Exec_Alloc
 34114                                  	;test	byte [bp-5],2
 34115 00005EC1 F646FB02                	test	Exec_Func,exec_func_overlay
 34116 00005EC5 743A                    	jz	short Exec_Build_Header
 34117                                  
 34118                                  	; MSDOS 6.0
 34119 00005EC7 E8C201                  	call	Scan_Execname
 34120 00005ECA E8D601                  	call	Scan_Special_Entries
 34121                                  ;SR;
 34122                                  ;The current lie strategy uses the PSP to store the lie version. However,
 34123                                  ;device drivers are loaded as overlays and have no PSP. To handle them, we
 34124                                  ;use the Sysinit flag provided by the BIOS as part of a structure pointed at
 34125                                  ;by BiosDataPtr. If this flag is set, the overlay call has been issued from
 34126                                  ;Sysinit and therefore must be a device driver load. We then get the lie 
 34127                                  ;version for this driver and put it into the Sysinit PSP. When the driver
 34128                                  ;issues the version check, it gets the lie version until the next overlay
 34129                                  ;call is issued.
 34130                                  
 34131 00005ECD 36803E[3F10]00          	cmp	byte [ss:DriverLoad],0	;was Sysinit processing done?
 34132 00005ED3 7426                    	je	short norm_ovl		;yes, no special handling
 34133 00005ED5 56                      	push	si
 34134 00005ED6 06                      	push	es
 34135 00005ED7 36C436[4010]            	les	si,[ss:BiosDataPtr]	;get ptr to BIOS data block
 34136                                  	 
 34137                                  	; (es:si points to 'SysinitPresent' address/flag in retrodos4.s) 
 34138 00005EDC 26803C00                	cmp	byte [es:si],0		;in Sysinit?
 34139 00005EE0 7411                    	je	short sysinit_done	;no, Sysinit is finished
 34140                                  	
 34141 00005EE2 368E06[3003]            	mov	es,[ss:CurrentPDB]	;es = current PSP (Sysinit PSP)
 34142 00005EE7 36FF36[BD0E]            	push	word [ss:SPECIAL_VERSION]
 34143 00005EEC 268F064000              	pop	word [es:PDB.Version]	;store lie version in Sysinit PSP
 34144                                  		;;; PDB.VERSION
 34145 00005EF1 EB06                    	jmp	short setver_done
 34146                                  sysinit_done:
 34147 00005EF3 36C606[3F10]00          	mov	byte [ss:DriverLoad],0	;Sysinit done,special handling off
 34148                                  setver_done:
 34149 00005EF9 07                      	pop	es
 34150 00005EFA 5E                      	pop	si
 34151                                  norm_ovl:
 34152                                  	;leave
 34153 00005EFB 89EC                    	mov	sp,bp		
 34154 00005EFD 5D                      	pop	bp
 34155                                  
 34156                                  	;transfer SYS_RET_OK		; overlay load -> done
 34157 00005EFE E936A7                  	jmp	SYS_RET_OK
 34158                                  
 34159                                  Exec_Build_Header:
 34160                                  	;mov	dx,[bp-18]
 34161 00005F01 8B56EE                  	mov	DX,Exec_Load_Block
 34162                                  					; assign the space to the process
 34163                                  	;mov	si,1
 34164 00005F04 BE0100                  	mov	SI,ARENA.OWNER		; pointer to owner field
 34165                                  	;mov	ax,[bp-14]
 34166 00005F07 8B46F2                  	mov	AX,Exec_Environ 	; get environ pointer
 34167 00005F0A 09C0                    	or	AX,AX
 34168 00005F0C 7405                    	jz	short No_Owner		; no environment
 34169                                  
 34170 00005F0E 48                      	dec	AX			; point to header
 34171 00005F0F 8ED8                    	mov	DS,AX
 34172 00005F11 8914                    	mov	[SI],DX 		; assign ownership
 34173                                  No_Owner:
 34174                                  	;mov	ax,[bp-18]
 34175                                  	;mov	AX,Exec_Load_Block	; get load block pointer
 34176                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34177                                  	; 17/12/2022
 34178 00005F13 89D0                    	mov	ax,dx ; 06/06/2019
 34179                                  	;mov	ax,Exec_Load_Block	; get load block pointer
 34180                                  	
 34181 00005F15 48                      	dec	AX
 34182 00005F16 8ED8                    	mov	DS,AX			; point to header
 34183 00005F18 8914                    	mov	[SI],DX 		; assign ownership
 34184                                  
 34185                                  	; MSDOS 6.0
 34186 00005F1A 1E                      	push	DS			;AN000;MS. make ES=DS
 34187 00005F1B 07                      	pop	ES			;AN000;MS.
 34188                                  	;mov	di,8
 34189 00005F1C BF0800                  	mov	DI,ARENA.NAME		;AN000;MS. ES:DI points to destination
 34190 00005F1F E86A01                  	call	Scan_Execname		;AN007;MS. parse execname
 34191                                  					;	   ds:si->name, cx=name length
 34192 00005F22 51                      	push	CX			;AN007;;MS. save for fake version
 34193 00005F23 56                      	push	SI			;AN007;;MS. save for fake version
 34194                                  
 34195                                  MoveName:				;AN000;
 34196 00005F24 AC                      	lodsb				;AN000;;MS. get char
 34197 00005F25 3C2E                    	cmp	AL,'.'			;AN000;;MS. is '.' ,may be name.exe
 34198 00005F27 7408                    	jz	short Mem_Done		;AN000;;MS. no, move to header
 34199                                  					;AN000;
 34200 00005F29 AA                      	stosb				;AN000;;MS. move char
 34201                                  					; MSKK bug fix - limit length copied
 34202 00005F2A 83FF10                  	cmp	di,16 ; ARENAHEADERSIZE	; end of memory arena block?
 34203 00005F2D 7302                    	jae	short Mem_Done		; jump if so
 34204                                  	;
 34205 00005F2F E2F3                    	loop	MoveName		;AN000;;MS. continue
 34206                                  Mem_Done:				;AN000;
 34207 00005F31 30C0                    	xor	AL,AL			;AN000;;MS. make ASCIIZ
 34208                                  	;cmp	di,16
 34209 00005F33 83FF10                  	cmp	DI,ARENAHEADERSIZE ; 16 ;AN000;MS. if not all filled
 34210 00005F36 7301                    	jae	short Fill8		;AN000;MS.
 34211                                  	
 34212 00005F38 AA                      	stosb				;AN000;MS.
 34213                                  	
 34214                                  Fill8:					;AN000;
 34215 00005F39 5E                      	pop	SI			;AN007;MS. ds:si -> file name
 34216 00005F3A 59                      	pop	CX			;AN007;MS.
 34217                                  	
 34218 00005F3B E86501                  	call	Scan_Special_Entries	;AN007;MS.
 34219                                  
 34220                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34221 00005F3E 52                      	push	DX
 34222                                  	;mov	si,[bp-16]
 34223 00005F3F 8B76F0                  	mov	SI,Exec_Size
 34224 00005F42 01D6                    	add	SI,DX
 34225                                  	;Invoke	$Dup_PDB		; ES is now PDB
 34226 00005F44 E836B1                  	call	_$DUP_PDB
 34227 00005F47 5A                      	pop	DX
 34228                                  
 34229                                  	;push	word [bp-14]
 34230 00005F48 FF76F2                  	push	Exec_Environ
 34231                                  	;pop	WORD [ES:2Ch]
 34232 00005F4B 268F062C00              	pop	word [ES:PDB.ENVIRON]
 34233                                  
 34234                                  	; MSDOS 6.0			; *** Added for DOS 5.00
 34235                                  					; version number in PSP
 34236 00005F50 36FF36[BD0E]             	push	word [ss:SPECIAL_VERSION] ; Set the DOS version number to
 34237 00005F55 268F064000              	pop	word [ES:PDB.Version]	; to be used for this application
 34238                                  		; PDB.VERSION
 34239                                  
 34240                                  	; MSDOS 3.3 (& MSDOS 6.0)	; set up proper command line stuff
 34241                                  	;lds	si,[bp-4]
 34242 00005F5A C576FC                  	lds	SI,Exec_Blk		; get the block
 34243 00005F5D 1E                      	push	DS			; save its location
 34244 00005F5E 56                      	push	SI
 34245                                  	;lds	si,[si+6]
 34246 00005F5F C57406                  	lds	SI,[SI+EXEC0.5C_FCB]	; get the 5c fcb
 34247                                  
 34248                                  	; DS points to user space 5C FCB
 34249                                  
 34250 00005F62 B90C00                  	mov	CX,12			; copy drive, name and ext
 34251 00005F65 51                      	push	CX
 34252 00005F66 BF5C00                  	mov	DI,5Ch
 34253 00005F69 8A1C                    	mov	BL,[SI]
 34254 00005F6B F3A4                    	rep	movsb
 34255                                  
 34256                                  	; DI = 5Ch + 12 = 5Ch + 0Ch = 68h
 34257                                  
 34258 00005F6D 31C0                    	xor	AX,AX			; zero extent, etc for CPM
 34259 00005F6F AB                      	stosw
 34260 00005F70 AB                      	stosw
 34261                                  
 34262                                  	; DI = 5Ch + 12 + 4 = 5Ch + 10h = 6Ch
 34263                                  
 34264 00005F71 59                      	pop	CX
 34265 00005F72 5E                      	pop	SI			; get block
 34266 00005F73 1F                      	pop	DS
 34267 00005F74 1E                      	push	DS			; save (again)
 34268 00005F75 56                      	push	SI
 34269                                  	;lds	si,[si+0Ah]
 34270 00005F76 C5740A                  	lds	SI,[SI+EXEC0.6C_FCB]	; get 6C FCB
 34271                                  
 34272                                  	; DS points to user space 6C FCB
 34273                                  
 34274 00005F79 8A3C                    	mov	BH,[SI] 		; do same as above
 34275 00005F7B F3A4                    	rep	movsb
 34276 00005F7D AB                      	stosw
 34277 00005F7E AB                      	stosw
 34278 00005F7F 5E                      	pop	SI			; get block (last time)
 34279 00005F80 1F                      	pop	DS
 34280                                  	;ld	si,[si+2]
 34281 00005F81 C57402                  	lds	SI,[SI+EXEC0.COM_LINE]	; command line
 34282                                  
 34283                                  	; DS points to user space 80 command line
 34284                                  
 34285 00005F84 80C980                  	or	CL,80h
 34286 00005F87 89CF                    	mov	DI,CX
 34287 00005F89 F3A4                    	rep	movsb			; Wham!
 34288                                  
 34289                                  	; Process BX into default AX (validity of drive specs on args).
 34290                                  	; We no longer care about DS:SI.
 34291                                  
 34292 00005F8B FEC9                    	dec	CL			; get 0FFh in CL
 34293 00005F8D 88F8                    	mov	AL,BH
 34294 00005F8F 30FF                    	xor	BH,BH
 34295                                  	;invoke	GetVisDrv
 34296 00005F91 E8400A                  	call	GetVisDrv
 34297 00005F94 7302                    	jnc	short Exec_BL
 34298                                  
 34299 00005F96 88CF                    	mov	BH,CL
 34300                                  
 34301                                  Exec_BL:
 34302 00005F98 88D8                    	mov	AL,BL
 34303 00005F9A 30DB                    	xor	BL,BL
 34304                                  	;invoke	GetVisDrv
 34305 00005F9C E8350A                  	call	GetVisDrv
 34306 00005F9F 7302                    	jnc	short Exec_Set_Return
 34307                                  
 34308 00005FA1 88CB                    	mov	BL,CL
 34309                                  
 34310                                  Exec_Set_Return:
 34311                                  	;invoke	Get_User_Stack			; get his return address
 34312 00005FA3 E8DBA4                  	call	Get_User_Stack
 34313                                  
 34314                                  	;push	word [si+14h]
 34315 00005FA6 FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 34316                                  	;push	word [si+12h]
 34317 00005FA9 FF7412                  	push	word [SI+user_env.user_IP]
 34318                                  	;push	word [si+14h]
 34319 00005FAC FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 34320                                  	;push	word [si+12h]
 34321 00005FAF FF7412                  	push	word [SI+user_env.user_IP]
 34322                                  	;pop	word [ES:0Ah]
 34323 00005FB2 268F060A00              	pop	WORD [ES:PDB.EXIT]
 34324                                  	;pop	word [ES:0Ch]
 34325 00005FB7 268F060C00              	pop	WORD [ES:PDB.EXIT+2]
 34326                                  
 34327 00005FBC 31C0                    	xor	AX,AX
 34328 00005FBE 8ED8                    	mov	DS,AX
 34329                                  					; save them where we can get them
 34330                                  					; later when the child exits.
 34331                                  	;pop	word [88h]
 34332 00005FC0 8F068800                	pop	word [addr_int_terminate] ; 22h*4
 34333                                  	;pop	word [90h]
 34334 00005FC4 8F068A00                	pop	word [addr_int_terminate+2] ; (22h*4)+2
 34335                                  
 34336 00005FC8 36C706[2C03]8000        	mov	WORD [SS:DMAADD],80h	; SS Override
 34337 00005FCF 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	; SS Override
 34338 00005FD4 368C1E[2E03]            	mov	[SS:DMAADD+2],DS	; SS Override
 34339                                  
 34340                                  	;test	byte [bp-5],1
 34341 00005FD9 F646FB01                	test	Exec_Func,exec_func_no_execute
 34342 00005FDD 7427                    	jz	short exec_go
 34343                                  
 34344 00005FDF 36C536[C00F]            	lds	SI,[SS:exec_init_SP]	; get stack SS Override
 34345                                  	;les	di,[bp-4]
 34346 00005FE4 C47EFC                  	les	DI,Exec_Blk		; and block for return
 34347                                  	;mov	[es:di+10h],ds
 34348 00005FE7 268C5D10                	mov	[ES:DI+EXEC1.SS],DS	; return SS
 34349                                  
 34350 00005FEB 4E                      	dec	SI			; 'push' default AX
 34351 00005FEC 4E                      	dec	SI
 34352 00005FED 891C                    	mov	[SI],BX 		; save default AX reg
 34353                                  	;mov	[es:di+0Eh], si
 34354 00005FEF 2689750E                	mov	[ES:DI+EXEC1.SP],SI	; return 'SP'
 34355                                  
 34356 00005FF3 36C506[C40F]            	lds	AX,[SS:exec_init_IP]	; SS Override
 34357                                  	;mov	[es:di+14h],ds
 34358 00005FF8 268C5D14                	mov	[ES:DI+EXEC1.CS],DS	; initial entry stuff
 34359                                  	;mov	[es:di+12h],ax
 34360 00005FFC 26894512                	mov	[ES:DI+EXEC1.IP],AX
 34361                                  	
 34362                                  	;leave
 34363 00006000 89EC                    	mov	sp,bp
 34364 00006002 5D                      	pop	bp	
 34365                                  
 34366                                  	;transfer SYS_RET_OK
 34367 00006003 E931A6                  	jmp	SYS_RET_OK
 34368                                  
 34369                                  exec_go:
 34370 00006006 36C536[C40F]            	lds	SI,[SS:exec_init_IP]	; get entry point SS Override
 34371 0000600B 36C43E[C00F]            	les	DI,[SS:exec_init_SP]	; new stack SS Override
 34372 00006010 8CC0                    	mov	AX,ES
 34373                                  
 34374                                  	; MSDOS 6.0
 34375 00006012 36803E[F211]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos in HMA (M021)
 34376 00006018 741A                    	je	short Xfer_To_User	; N: transfer control to user
 34377                                  
 34378 0000601A 1E                      	push	ds			; Y: control must go to low mem stub
 34379                                  		
 34380 0000601B 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]		;    where we disable a20 and Xfer 
 34381                                  					;    control to user 
 34382 00006020 800E[8600]04            	or	byte [DOS_FLAG],EXECA20OFF ; M068:
 34383                                  					; M004: Set bit to signal int 21
 34384                                  					; ah = 25 & ah= 49. See dossym.inc 
 34385                                  					; under TAG M003 & M009 for 
 34386                                  					; explanation
 34387 00006025 8916[6300]              	mov	[A20OFF_PSP],dx		; M068: set the PSP for which A20 is
 34388                                  					; M068: going to be turned OFF.
 34389                                  	
 34390 00006029 8CD8                    	mov	ax,ds			; ax = segment of low mem stub
 34391 0000602B 1F                      	pop	ds
 34392                                  	
 34393 0000602C 50                      	push	ax			; ret far into the low mem stub
 34394 0000602D B8[FB10]                	mov	ax,disa20_xfer
 34395 00006030 50                      	push	ax
 34396 00006031 8CC0                    	mov	AX,ES			; restore ax
 34397 00006033 CB                      	retf
 34398                                  
 34399                                  Xfer_To_User:
 34400                                  	; DS:SI points to entry point
 34401                                  	; AX:DI points to initial stack
 34402                                  	; DX has PDB pointer
 34403                                  	; BX has initial AX value
 34404                                  
 34405 00006034 FA                      	cli
 34406                                  	; 15/08/2018
 34407 00006035 36C606[2103]00          	mov	BYTE [SS:INDOS],0	; SS Override
 34408                                  
 34409 0000603B 8ED0                    	mov	SS,AX			; set up user's stack
 34410 0000603D 89FC                    	mov	SP,DI			; and SP
 34411 0000603F FB                      	sti
 34412                                  
 34413 00006040 1E                      	push	DS			; fake long call to entry
 34414 00006041 56                      	push	SI
 34415 00006042 8EC2                    	mov	ES,DX			; set up proper seg registers
 34416 00006044 8EDA                    	mov	DS,DX
 34417 00006046 89D8                    	mov	AX,BX			; set up proper AX
 34418                                  
 34419 00006048 CB                      	retf
 34420                                  
 34421                                  ; 04/08/2018 - Retro DOS v3.0
 34422                                  
 34423                                  ;----------------------------------------------------------------------------
 34424                                  ;
 34425                                  ;----------------------------------------------------------------------------
 34426                                  
 34427                                  ExecRead:
 34428 00006049 E81600                  	CALL	Exec_Dealloc
 34429                                  	;mov	bx,[bp-8]
 34430 0000604C 8B5EF8                  	MOV	bx,Exec_FH
 34431                                  
 34432 0000604F 55                      	PUSH	BP
 34433 00006050 E82507                  	call	_$READ
 34434 00006053 5D                      	POP	BP
 34435                                  
 34436                                  	;CALL	Exec_Alloc
 34437                                  	;retn
 34438                                  	; 18/12/2022
 34439                                  	;jmp	short Exec_Alloc
 34440                                  
 34441                                  ; 18/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
 34442                                  
 34443                                  ;----------------------------------------------------------------------------
 34444                                  ;
 34445                                  ;----------------------------------------------------------------------------
 34446                                  
 34447                                  Exec_Alloc:
 34448 00006054 53                      	push	BX
 34449                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 34450                                  	; 20/05/2019 - Retro DOS v4.0
 34451                                  	; MSDOS 6.0
 34452 00006055 368B1E[3003]            	mov	bx,[SS:CurrentPDB]  ; SS Override
 34453 0000605A E81000                  	call	ChangeOwners
 34454 0000605D E8AEB2                  	call	LCritMEM
 34455 00006060 5B                      	pop	BX
 34456 00006061 C3                      	retn
 34457                                  
 34458                                  ;----------------------------------------------------------------------------
 34459                                  ;
 34460                                  ;----------------------------------------------------------------------------
 34461                                  
 34462                                  Exec_Dealloc:
 34463 00006062 53                      	push	BX
 34464                                  	;mov	bx,0
 34465 00006063 29DB                    	sub	BX,BX		; (bx) = ARENA_OWNER_SYSTEM
 34466 00006065 E88BB2                  	call	ECritMEM
 34467 00006068 E80200                  	call	ChangeOwners
 34468 0000606B 5B                      	pop	BX
 34469 0000606C C3                      	retn
 34470                                  
 34471                                  ; 18/12/2022
 34472                                  %if 0
 34473                                  ;----------------------------------------------------------------------------
 34474                                  ;
 34475                                  ;----------------------------------------------------------------------------
 34476                                  
 34477                                  Exec_Alloc:
 34478                                  	push	BX
 34479                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 34480                                  	; 20/05/2019 - Retro DOS v4.0
 34481                                  	; MSDOS 6.0
 34482                                  	mov	bx,[SS:CurrentPDB]  ; SS Override
 34483                                  	call	ChangeOwners
 34484                                  	call	LCritMEM
 34485                                  	pop	BX
 34486                                  	retn
 34487                                  
 34488                                  %endif
 34489                                  
 34490                                  ;----------------------------------------------------------------------------
 34491                                  ;
 34492                                  ;----------------------------------------------------------------------------
 34493                                  
 34494                                  ChangeOwners:
 34495 0000606D 9C                      	pushf
 34496 0000606E 50                      	push	AX
 34497                                  	;mov	ax,[bp-14]
 34498 0000606F 8B46F2                  	mov	AX,Exec_Environ
 34499 00006072 E80900                  	call	ChangeOwner
 34500                                  	;mov	ax,[bp-18]
 34501 00006075 8B46EE                  	mov	AX,Exec_Load_Block
 34502 00006078 E80300                  	call	ChangeOwner
 34503 0000607B 58                      	pop	AX
 34504 0000607C 9D                      	popf
 34505                                  chgown_retn:
 34506 0000607D C3                      	retn
 34507                                  
 34508                                  ;----------------------------------------------------------------------------
 34509                                  ;
 34510                                  ;----------------------------------------------------------------------------
 34511                                  
 34512                                  ChangeOwner:
 34513 0000607E 09C0                    	or	AX,AX			; is area allocated?
 34514 00006080 74FB                    	jz	short chgown_retn	; no, do nothing
 34515 00006082 48                      	dec	AX
 34516 00006083 1E                      	push	DS
 34517 00006084 8ED8                    	mov	DS,AX
 34518 00006086 891E0100                	mov	[ARENA.OWNER],BX
 34519 0000608A 1F                      	pop	DS
 34520 0000608B C3                      	retn
 34521                                  
 34522                                  ;----------------------------------------------------------------------------
 34523                                  ;
 34524                                  ;----------------------------------------------------------------------------
 34525                                  
 34526                                  ; 20/05/2019 - Retro DOS v4.0
 34527                                  
 34528                                  	; MSDOS 6.0
 34529                                  Scan_Execname:
 34530 0000608C C576E6                  	lds	SI,ExecName		; DS:SI points to name
 34531                                  Scan_Execname1:				; M028
 34532                                  Save_Begin:				;
 34533 0000608F 89F1                    	mov	CX,SI			; CX= starting addr
 34534                                  Scan0:					;
 34535 00006091 AC                      	lodsb				; get char
 34536                                  
 34537 00006092 3C3A                    	cmp	AL,':'			; is ':' , may be A:name
 34538 00006094 74F9                    	jz	short Save_Begin	; yes, save si
 34539 00006096 3C5C                    	cmp	AL,'\'                  ; is '\', may be A:\name
 34540 00006098 74F5                    	jz	short Save_Begin	; yes, save si
 34541 0000609A 3C00                    	cmp	AL,0			; is end of name
 34542 0000609C 75F3                    	jnz	short Scan0		; no, continue scanning
 34543 0000609E 29CE                    	sub	SI,CX			; get name's length
 34544 000060A0 87F1                    	xchg	SI,CX			; cx= length, si= starting addr
 34545                                  
 34546 000060A2 C3                      	retn
 34547                                  
 34548                                  ;----------------------------------------------------------------------------
 34549                                  ;
 34550                                  ;----------------------------------------------------------------------------
 34551                                  
 34552                                  ; 20/05/2019 - Retro DOS v4.0
 34553                                  
 34554                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34555                                  ; DOSCODE:A0EDh (MSDOS 5.0, MSDOS.SYS)
 34556                                  
 34557                                  	; MSDOS 6.0
 34558                                  
 34559                                  Scan_Special_Entries:
 34560                                  
 34561 000060A3 49                      	dec	CX			; cx= name length
 34562                                  ;M060	mov	DI,[Special_Entries]	; es:di -> addr of special entries
 34563                                  					;reset to current version
 34564                                  	;mov	word [ss:SPECIAL_VERSION],1406h 
 34565                                  				; (MSDOS 6.21, MSDOS.SYS, DOSCODE:A14Eh)
 34566                                  	;mov	word [ss:SPECIAL_VERSION],5
 34567                                  				; (MSDOS 5.0, MSDOS.SYS, DOSCODE:A0EEh)
 34568                                  
 34569                                  				; 5 for Retro DOS 4.0 (01/12/2022, MSDOS 5.0)
 34570 000060A4 36C706[BD0E]0616        	mov	word [ss:SPECIAL_VERSION],(MINOR_VERSION<<8)+MAJOR_VERSION
 34571                                  				; 0005h for Retro DOS v4.1 (MSDOS 5.0)
 34572                                  				; 24/09/2023
 34573                                  				; 1606h for Retro DOS v4.2 (MSDOS 6.22)
 34574                                  ;***	call	Reset_Version
 34575                                  
 34576                                  ;M060	push	SS
 34577                                  ;M060	pop	ES
 34578                                  
 34579 000060AB 36C43E[5D00]            	les	DI,[SS:UU_IFS_DOS_CALL]	;M060; ES:DI --> Table in SETVER.SYS
 34580 000060B0 8CC0                    	mov	AX,ES			;M060; First do a NULL ptr check to
 34581 000060B2 09F8                    	or	AX,DI			;M060; be sure the table exists
 34582 000060B4 7427                    	jz	short End_List		;M060; If ZR then no table
 34583                                  
 34584                                  GetEntries:
 34585 000060B6 268A05                  	mov	AL,[ES:DI]		; end of list
 34586 000060B9 08C0                    	or	AL,AL
 34587 000060BB 7420                    	jz	short End_List		; yes
 34588                                  
 34589 000060BD 36893E[0E06]            	mov	[ss:TEMP_VAR2],DI	; save di
 34590 000060C2 38C8                    	cmp	AL,CL			; same length ?
 34591 000060C4 751B                    	jnz	short SkipOne 		; no
 34592                                  
 34593 000060C6 47                      	inc	DI			; es:di -> special name
 34594 000060C7 51                      	push	CX			; save length and name addr
 34595 000060C8 56                      	push	SI
 34596                                  
 34597                                  ; M050 - BEGIN
 34598                                  
 34599 000060C9 50                      	push	ax			; save len
 34600                                  sse_next_char:
 34601 000060CA AC                      	lodsb
 34602 000060CB E8D1EE                  	call	UCase
 34603 000060CE AE                      	scasb
 34604 000060CF 750D                    	jne	short Not_Matched
 34605 000060D1 E2F7                    	loop	sse_next_char
 34606                                  	
 34607                                  ;	repz	cmpsb			; same name ?
 34608                                  ;	jnz	short Not_Matched	; no
 34609                                  
 34610 000060D3 58                      	pop	ax			; take len off the stack
 34611                                  
 34612                                  ; M050 - END
 34613                                  
 34614 000060D4 268B05                  	mov	AX,[ES:DI]		; get special version
 34615 000060D7 36A3[BD0E]              	mov	[ss:SPECIAL_VERSION],AX	; save it
 34616                                  
 34617                                  ;***	mov	AL,[ES:DI+2]		; get fake count
 34618                                  ;***	mov	[ss:FAKE_COUNT],AL 	; save it
 34619                                  
 34620 000060DB 5E                      	pop	SI
 34621 000060DC 59                      	pop	CX
 34622                                  	; 18/12/2022
 34623                                  	;jmp	SHORT End_List
 34624                                  
 34625                                  	; 18/12/2022
 34626                                  End_List:
 34627 000060DD C3                      	retn
 34628                                  
 34629                                  Not_Matched:
 34630 000060DE 58                      	pop	ax			; get len from stack ; M050
 34631 000060DF 5E                      	pop	SI			; restore si,cx
 34632 000060E0 59                      	pop	CX
 34633                                  
 34634                                  SkipOne:
 34635 000060E1 368B3E[0E06]            	mov	DI,[ss:TEMP_VAR2]	; restore old di use SS Override
 34636 000060E6 30E4                    	xor	AH,AH			; position to next entry
 34637 000060E8 01C7                    	add	DI,AX
 34638                                  
 34639 000060EA 83C703                  	add	DI,3			; DI -> next entry length
 34640                                  ;***	add	DI,4			; DI -> next entry length
 34641                                  
 34642 000060ED EBC7                    	jmp	short GetEntries
 34643                                  
 34644                                  	; 18/12/2022
 34645                                  ;End_List:
 34646                                  	;retn
 34647                                  
 34648                                  ; 04/08/2018 - Retro DOS v3.0
 34649                                  ; IBMDOS.COm (MSDOS 3.3, 1987) - Offset 633Dh
 34650                                  
 34651                                  ;----------------------------------------------------------------------------
 34652                                  ;SUBTTL Terminate and stay resident handler
 34653                                  ;
 34654                                  ; Input:    DX is  an  offset  from  CurrentPDB  at which to
 34655                                  ;	    truncate the current block.
 34656                                  ;
 34657                                  ; output:   The current block is truncated (expanded) to be [DX+15]/16
 34658                                  ;	    paragraphs long.  An exit is simulated via resetting CurrentPDB
 34659                                  ;	    and restoring the vectors.
 34660                                  ;
 34661                                  ;----------------------------------------------------------------------------
 34662                                  
 34663                                  	; 20/05/2019 - Retro DOS v4.0
 34664                                  	; DOSCODE:A19Bh (MSDOS 6.21, MSDOS.SYS)
 34665                                  
 34666                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34667                                  	; DOSCODE:A13Bh (MSDOS 5.0, MSDOS.SYS)
 34668                                  
 34669                                  _$KEEP_PROCESS:
 34670 000060EF 50                      	push	AX			; keep exit code around
 34671                                  	;mov	byte [SS:EXIT_TYPE],3
 34672 000060F0 36C606[7C05]03          	mov	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS
 34673 000060F6 368E06[3003]            	mov	ES,[SS:CurrentPDB]
 34674 000060FB 83FA06                  	cmp	DX,6h			; keep enough space around for system
 34675 000060FE 7303                    	jae	short Keep_Shrink	; info
 34676                                  
 34677 00006100 BA0600                  	mov	DX,6h
 34678                                  
 34679                                  Keep_Shrink:
 34680 00006103 89D3                    	mov	BX,DX
 34681 00006105 53                      	push	BX
 34682 00006106 06                      	push	ES
 34683 00006107 E82E02                  	call	_$SETBLOCK		; ignore return codes.
 34684 0000610A 1F                      	pop	DS
 34685 0000610B 5B                      	pop	BX
 34686 0000610C 7207                    	jc	short Keep_Done		; failed on modification
 34687                                  
 34688 0000610E 8CD8                    	mov	AX,DS
 34689 00006110 01D8                    	add	AX,BX
 34690                                  	;mov	[2],ax
 34691 00006112 A30200                  	mov	[PDB.BLOCK_LEN],AX	;PBUGBUG
 34692                                  
 34693                                  Keep_Done:
 34694 00006115 58                      	pop	AX
 34695 00006116 EB26                    	jmp	SHORT exit_inner	; and let abort take care of the rest
 34696                                  
 34697                                  ;----------------------------------------------------------------------------
 34698                                  ;
 34699                                  ;----------------------------------------------------------------------------
 34700                                  
 34701                                  STAY_RESIDENT:
 34702                                  	;mov	ax,3100h
 34703 00006118 B80031                  	mov	AX,(KEEP_PROCESS<<8)+0 ; Lower part is return code;PBUGBUG
 34704 0000611B 83C20F                  	add	DX,15
 34705 0000611E D1DA                    	rcr	DX,1
 34706 00006120 B103                    	mov	CL,3
 34707 00006122 D3EA                    	shr	DX,CL
 34708                                  
 34709 00006124 E9E1A1                  	jmp	COMMAND
 34710                                  
 34711                                  ;----------------------------------------------------------------------------
 34712                                  ;SUBTTL $EXIT - return to parent process
 34713                                  ;   Assembler usage:
 34714                                  ;	    MOV     AL, code
 34715                                  ;	    MOV     AH, Exit
 34716                                  ;	    INT     int_command
 34717                                  ;   Error return:
 34718                                  ;	    None.
 34719                                  ;
 34720                                  ;----------------------------------------------------------------------------
 34721                                  
 34722                                  	; 20/05/2019 - Retro DOS v4.0
 34723                                  	; DOSCODE:A1D3h (MSDOS 6.21, MSDOS.SYS)
 34724                                  
 34725                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34726                                  	; DOSCODE:A173h (MSDOS 5.0, MSDOS.SYS)
 34727                                  _$EXIT:
 34728                                  	; 04/08/2018 - Retro DOS v3.0
 34729                                  	; IBMDOSDOS.COM (MSDOS 3.3, 1987) - Offset 6375h
 34730 00006127 30E4                    	xor	AH,AH
 34731 00006129 368626[4D03]            	xchg	AH,[SS:DidCTRLC]
 34732 0000612E 08E4                    	or	AH,AH
 34733                                  	;mov	BYTE [SS:EXIT_TYPE],0
 34734 00006130 36C606[7C05]00          	mov	BYTE [SS:EXIT_TYPE],EXIT_TERMINATE
 34735 00006136 7406                    	jz	short exit_inner
 34736                                  	;mov	BYTE [SS:EXIT_TYPE],1
 34737 00006138 36C606[7C05]01          	mov	BYTE [SS:EXIT_TYPE],EXIT_CTRL_C
 34738                                  
 34739                                  	;entry	Exit_inner
 34740                                  exit_inner:
 34741 0000613E E840A3                  	call	Get_User_Stack		;PBUGBUG
 34742                                  
 34743 00006141 36FF36[3003]            	push	word [ss:CurrentPDB]
 34744                                  	;pop	word [si+14h]
 34745 00006146 8F4414                  	pop	word [SI+user_env.user_CS] ;PBUGBUG
 34746 00006149 EB08                    	jmp	short abort_inner
 34747                                  
 34748                                  ;BREAK <$ABORT -- Terminate a process>
 34749                                  ;----------------------------------------------------------------------------
 34750                                  ; Inputs:
 34751                                  ;	user_CS:00 must point to valid program header block
 34752                                  ; Function:
 34753                                  ;	Restore terminate and Cntrl-C addresses, flush buffers and transfer
 34754                                  ;	to the terminate address
 34755                                  ; Returns:
 34756                                  ;	TO THE TERMINATE ADDRESS
 34757                                  ;----------------------------------------------------------------------------
 34758                                  
 34759                                  _$ABORT:
 34760 0000614B 30C0                    	xor	AL,AL
 34761                                  	;mov	byte [SS:EXIT_TYPE],0
 34762                                  	;mov	byte [SS:EXIT_TYPE],AL ; = 0
 34763 0000614D 36C606[7C05]00          	mov	byte [SS:EXIT_TYPE],EXIT_ABORT
 34764                                  
 34765                                  	; abort_inner must have AL set as the exit code! The exit type
 34766                                  	; is retrieved from exit_type. Also, the PDB at user_CS needs
 34767                                  	; to be correct as the one that is terminating.
 34768                                  
 34769                                  abort_inner:
 34770 00006153 368A26[7C05]            	mov	AH,[SS:EXIT_TYPE]
 34771 00006158 36A3[3403]              	mov	[SS:exit_code],AX
 34772 0000615C E822A3                  	call	Get_User_Stack
 34773                                  
 34774                                  	;mov	ds,[si+14h]
 34775 0000615F 8E5C14                  	mov	DS,[SI+user_env.user_CS] ; set up old interrupts ;PBUGBUG
 34776 00006162 31C0                    	xor	AX,AX
 34777 00006164 8EC0                    	mov	ES,AX
 34778                                  	;mov	si,10
 34779 00006166 BE0A00                  	mov	SI,SAVEXIT
 34780                                  	;mov	di,88h
 34781 00006169 BF8800                  	mov	DI,addr_int_terminate
 34782 0000616C A5                      	movsw
 34783 0000616D A5                      	movsw
 34784 0000616E A5                      	movsw
 34785 0000616F A5                      	movsw
 34786 00006170 A5                      	movsw
 34787 00006171 A5                      	movsw
 34788 00006172 E944F2                  	jmp	reset_environment
 34789                                  
 34790                                  ;----------------------------------------------------------------------------
 34791                                  ;
 34792                                  ; fixexepatch will point to this is DOS loads low. 
 34793                                  ;
 34794                                  ;----------------------------------------------------------------------------
 34795                                  ; MSDOS 6.0
 34796                                  
 34797                                  ; 29/04/2019 - Retro DOS v4.0
 34798                                  ; DOSCODE:A221h (MSDOS 6.21, MSDOS.SYS)
 34799                                  
 34800                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34801                                  ; DOSCODE:A1C1h (MSDOS 5.0, MSDOS.SYS)
 34802                                  
 34803                                  RetExePatch: ; proc near
 34804                                  	
 34805 00006175 C3                      	retn
 34806                                  
 34807                                  ;============================================================================
 34808                                  ; ALLOC.ASM, MSDOS 6.0, 1991
 34809                                  ;============================================================================
 34810                                  ; 04/08/2018 - Retro DOS v3.0
 34811                                  ; 14/05/2019 - Retro DOS v4.0
 34812                                  
 34813                                  ;	TITLE ALLOC.ASM - memory arena manager	NAME Alloc
 34814                                  
 34815                                  ;**
 34816                                  ;	Microsoft Confidential
 34817                                  ;	Copyright (C) Microsoft Corporation 1991
 34818                                  ;	All Rights Reserved.
 34819                                  ;
 34820                                  ;	Memory related system calls and low level routines for MSDOS 2.X.
 34821                                  ;	I/O specs are defined in DISPATCH.
 34822                                  ;
 34823                                  ;	$ALLOC
 34824                                  ;	$SETBLOCK
 34825                                  ;	$DEALLOC
 34826                                  ;	$AllocOper
 34827                                  ;	arena_free_process
 34828                                  ;	arena_next
 34829                                  ;	check_signature
 34830                                  ;	Coalesce
 34831                                  ;
 34832                                  ;	Modification history:
 34833                                  ;
 34834                                  ;	    Created: ARR 30 March 1983
 34835                                  ;
 34836                                  ;	    Revision: M000 - added support for allocing UMBs. 7/9/90
 34837                                  ;		      M003 - added support for link/unlink UMBs from
 34838                                  ;			     DOS arena chain. 7/18/90
 34839                                  ;		      M009 - Added error returns invalid function and 
 34840                                  ;			     arena trashed in set link state call.
 34841                                  ;		      M010 - Release UMB arenas allocated to current PDB
 34842                                  ;			     if UMB_HEAD is initialized.
 34843                                  ;
 34844                                  ;		      M016 - MACE utilities mkeyrate.com version 1.0 
 34845                                  ;			     support. Please see under M009 in 
 34846                                  ;			     ..\inc\dossym.inc. 8/31/90.
 34847                                  ;
 34848                                  ;		      M061 - In GetLastArena, if linking in UMBs check to make
 34849                                  ;			     sure that umb_head arena is valid and also make
 34850                                  ;			     sure that the previous arena is pointing to 
 34851                                  ;			     umb_head.
 34852                                  ;
 34853                                  ;		      M064 - allow HIGH_ONLY bit to be set by a call to 
 34854                                  ;			     set allloc strategy.
 34855                                  ;			     use STRAT_MASK to mask out bits 6 & 7 of 
 34856                                  ;			     bx in AllocSetStrat.
 34857                                  ;
 34858                                  ;		      M068 - use a count value (A20OFF_COUNT) rather than
 34859                                  ;			     a bit to indicate to dos dispatcher to turn
 34860                                  ;			     a20 off before iret. See M016.
 34861                                  ;
 34862                                  
 34863                                  ;	BREAK	<memory allocation utility routines>
 34864                                  
 34865                                  
 34866                                  ; 15/04/2018 - Retro DOS v2.0
 34867                                  ;----------------------------------------------------------------------------
 34868                                  ; xenix memory calls for MSDOS
 34869                                  ;
 34870                                  ; CAUTION: The following routines rely on the fact that arena_signature and
 34871                                  ; arena_owner_system are all equal to zero and are contained in DI.
 34872                                  ;
 34873                                  ;INCLUDE DOSSEG.ASM
 34874                                  
 34875                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 34876                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 34877                                  
 34878                                  ;.xlist
 34879                                  ;.xcref
 34880                                  ;INCLUDE DOSSYM.ASM
 34881                                  ;INCLUDE DEVSYM.ASM
 34882                                  ;.cref
 34883                                  ;.list
 34884                                  
 34885                                  ;TITLE ALLOC.ASM - memory arena manager
 34886                                  ;NAME Alloc
 34887                                  
 34888                                  ;SUBTTL memory allocation utility routines
 34889                                  ;PAGE
 34890                                  ;
 34891                                  ; arena data
 34892                                  ;
 34893                                  ;       i_need  arena_head,WORD         ; seg address of start of arena
 34894                                  ;       i_need  CurrentPDB,WORD         ; current process data block addr
 34895                                  ;       i_need  FirstArena,WORD         ; first free block found
 34896                                  ;       i_need  BestArena,WORD          ; best free block found
 34897                                  ;       i_need  LastArena,WORD          ; last free block found
 34898                                  ;       i_need  AllocMethod,BYTE        ; how to alloc first(best)last
 34899                                  
 34900                                  ;**	Arena_Free_Process
 34901                                  ;----------------------------------------------------------------------------
 34902                                  ;	Free all arena blocks allocated to a prOcess
 34903                                  ;
 34904                                  ;	ENTRY	(bx) = PID of process
 34905                                  ;	EXIT	none
 34906                                  ;	USES	????? BUGBUG
 34907                                  ;----------------------------------------------------------------------------
 34908                                  
 34909                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34910                                  	; DOSCODE:A1C2h (MSDOS 5.0, MSDOS.SYS)
 34911                                  
 34912                                  arena_free_process:
 34913                                  	; 14/05/2019 - Retro DOS v4.0
 34914                                  	; 04/08/2018 - Retro DOS v3.0
 34915 00006176 36A1[2400]                      MOV	AX,[SS:arena_head]
 34916                                  arena_free_process_start:
 34917 0000617A BF0000                  	MOV     DI,ARENA.SIGNATURE ; 0
 34918                                  	;MOV	AX,[SS:arena_head] ; 15/04/2018  
 34919 0000617D E83000                          CALL	check_signature         ; ES <- AX, check for valid block
 34920                                  
 34921                                  arena_free_process_loop:
 34922                                          ;retc
 34923 00006180 723D                            JC	SHORT AFP_RETN	; Retro DOS v2.0 - 05/03/2018
 34924 00006182 06                      	PUSH    ES
 34925 00006183 1F                              POP     DS
 34926                                  	;cmp	[1],bx 
 34927 00006184 391E0100                        CMP     [ARENA.OWNER],BX	; is block owned by pid?
 34928 00006188 7504                            JNZ     SHORT arena_free_next	; no, skip to next
 34929                                  	;mov	[1],di
 34930 0000618A 893E0100                        MOV     [ARENA.OWNER],DI	; yes... free him
 34931                                  
 34932                                  arena_free_next:
 34933                                  	;cmp	byte [di],5Ah ;'Z'
 34934 0000618E 803D5A                          CMP     BYTE [DI],arena_signature_end
 34935                                                                          ; end of road, Jack?
 34936                                          ;retz				; never come back no more
 34937                                  	;JZ	SHORT AFP_RETN  ; MSDOS 3.3 (& MSDOS 2.11)
 34938                                  	; 14/05/2019
 34939                                  	; MSDOS 6.0
 34940 00006191 7405                    	jz	short arena_chk_umbs
 34941                                          
 34942 00006193 E81300                  	CALL    arena_next              ; next item in ES/AX carry set if trash
 34943 00006196 EBE8                            JMP     SHORT arena_free_process_loop
 34944                                  
 34945                                  	; MSDOS 6.0
 34946                                  arena_chk_umbs:				; M010 - Start
 34947                                  	; 20/05/2019
 34948 00006198 36A1[8C00]              	mov	ax,[ss:UMB_HEAD]	; ax = umb_head
 34949 0000619C 83F8FF                  	cmp	ax,0FFFFh		; Q: is umb_head initialized
 34950 0000619F 741E                    	je	short ret_label		; N: we're done
 34951                                  	
 34952 000061A1 8CDF                    	mov	di,ds			; di = last arena
 34953 000061A3 39C7                    	cmp	di,ax			; Q: is last arena above umb_head
 34954 000061A5 7318                    	jae	short ret_label		; Y: we've scanned umbs also. done.
 34955 000061A7 EBD1                    	jmp	short arena_free_process_start
 34956                                  					; M010 - End
 34957                                  ;AFP_RETN:
 34958                                  ;	RETN
 34959                                  
 34960                                  ;	BREAK	<Arena Helper Routines>
 34961                                  
 34962                                  ;**	Arena_Next - Find Next item in Arena
 34963                                  ;----------------------------------------------------------------------------
 34964                                  ;	ENTRY	DS - pointer to block head
 34965                                  ;		(di) = 0
 34966                                  ;	EXIT	AX,ES - pointers to next head
 34967                                  ;		'C' set iff arena damaged
 34968                                  ;----------------------------------------------------------------------------
 34969                                  
 34970                                  arena_next:
 34971 000061A9 8CD8                            MOV     AX,DS                   ; AX <- current block
 34972 000061AB 03060300                        ADD     AX,[ARENA.SIZE]		; AX <- AX + current block length
 34973 000061AF 40                              INC     AX                      ; remember that header!
 34974                                  
 34975                                  ;       fall into check_signature and return
 34976                                  ;
 34977                                  ;       CALL    check_signature         ; ES <- AX, carry set if error
 34978                                  ;       RETN
 34979                                  
 34980                                  ;**	Check_Signature - Check Memory Block Signature
 34981                                  ;----------------------------------------------------------------------------
 34982                                  ;	ENTRY	(AX) = address of block header
 34983                                  ;		(di) = 0
 34984                                  ;	EXIT	 ES = AX
 34985                                  ;		'C' clear if signature good
 34986                                  ;		'C' set if signature bad
 34987                                  ;	USES	ES, Flags
 34988                                  ;----------------------------------------------------------------------------
 34989                                  
 34990                                  check_signature:        
 34991                                  
 34992 000061B0 8EC0                    	MOV     ES,AX                   ; ES <- AX
 34993                                  	;cmp	byte [es:di],4Dh ; 'M'
 34994 000061B2 26803D4D                        CMP     BYTE [ES:DI],arena_signature_normal
 34995                                                                          ; IF next signature = not_end THEN
 34996 000061B6 7407                            JZ      SHORT check_signature_ok ;   GOTO ok
 34997                                  	;cmp 	byte [es:di],5Ah ; 'Z'
 34998 000061B8 26803D5A                        CMP     BYTE [ES:DI],arena_signature_end
 34999                                                                          ; IF next signature = end then
 35000 000061BC 7401                            JZ      SHORT check_signature_ok ;   GOTO ok
 35001 000061BE F9                              STC                             ; set error
 35002                                  ret_label: ; MSDOS 6.0
 35003                                  AFP_RETN:
 35004                                   	; Retro DOS v2.0 - 05/03/2018
 35005                                  check_signature_ok:
 35006                                  COALESCE_RETN:
 35007 000061BF C3                      	RETN
 35008                                  
 35009                                  ;**	Coalesce - Combine free blocks ahead with current block
 35010                                  ;----------------------------------------------------------------------------
 35011                                  ;	Coalesce adds the block following the argument to the argument block,
 35012                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 35013                                  ;	some callers (such as $setblock) use it to join a free block to it's
 35014                                  ;	preceeding allocated block.
 35015                                  ;
 35016                                  ;	ENTRY	(ds) = pointer to the head of a free block
 35017                                  ;		(di) = 0
 35018                                  ;	EXIT	'C' clear if OK
 35019                                  ;		  (ds) unchanged, this block updated
 35020                                  ;		  (ax) = address of next block, IFF not at end
 35021                                  ;		'C' set if arena trashed
 35022                                  ;	USES	(cx)
 35023                                  ;----------------------------------------------------------------------------
 35024                                          
 35025                                  Coalesce:
 35026                                  	;cmp	byte [di],5Ah ; 'Z'
 35027 000061C0 803D5A                  	CMP     BYTE [DI],arena_signature_end
 35028                                                                          ; IF current signature = END THEN
 35029                                          ;retz				;   GOTO ok
 35030 000061C3 74FA                            jz	short COALESCE_RETN
 35031 000061C5 E8E1FF                  	CALL    arena_next              ; ES, AX <- next block, Carry set if error
 35032                                          ;retc				; IF no error THEN GOTO check
 35033 000061C8 72F5                    	jc	short COALESCE_RETN
 35034                                  
 35035                                  coalesce_check:
 35036                                  	;cmp	[es:1],di
 35037 000061CA 26393E0100                      CMP     [ES:ARENA.OWNER],DI
 35038                                          ;retnz				; IF next block isnt free THEN return
 35039 000061CF 75EE                            JNZ	SHORT COALESCE_RETN
 35040                                  	;mov	cx,[ES:3]
 35041 000061D1 268B0E0300              	MOV     CX,[ES:ARENA.SIZE]	; CX <- next block size
 35042 000061D6 41                              INC     CX                      ; CX <- CX + 1 (for header size)
 35043                                          ;ADD	[3],CX
 35044 000061D7 010E0300                	ADD     [ARENA.SIZE],CX		; current size <- current size + CX
 35045 000061DB 268A0D                          MOV     CL,[ES:DI]              ; move up signature
 35046 000061DE 880D                            MOV     [DI],CL
 35047 000061E0 EBDE                            JMP     SHORT Coalesce		; try again
 35048                                  
 35049                                  ; 04/08/2018 - Retro DOS v3.0
 35050                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 641Fh
 35051                                  
 35052                                  ;	BREAK  <$Alloc - allocate space in memory>
 35053                                  
 35054                                  ; MSDOS 6.0
 35055                                  ;----------------------------------------------------------------------------
 35056                                  ;**	$Alloc - Allocate Memory Space
 35057                                  ;
 35058                                  ;	$Alloc services the INT21 that allocates memory space to a program.
 35059                                  ;	Alloc returns a pointer to a free block of memory that
 35060                                  ;	has the requested size in paragraphs.
 35061                                  ;
 35062                                  ;	If the allocation strategy is HIGH_FIRST or HIGH_ONLY memory is 
 35063                                  ;	scanned from umb_head if not from arena_head. If the strategy is
 35064                                  ; 	HIGH_FIRST the scan is continued from arena_head if a block of 
 35065                                  ;	appropriate size is not found in the UMBs. If the strategy is 
 35066                                  ;	HIGH_FIRST+HIGH_ONLY only the UMBs are scanned for memory.
 35067                                  ;
 35068                                  ;	In either case if bit 0 of UmbFlag is not initialized then the scan
 35069                                  ;	starts from arena_head.
 35070                                  ;
 35071                                  ;	Assembler usage:
 35072                                  ;           MOV     BX,size
 35073                                  ;           MOV     AH,Alloc
 35074                                  ;           INT     21h
 35075                                  ;
 35076                                  ;	BUGBUG - a lot can be done to improve performance. We can set marks
 35077                                  ;	so that we start searching the arena at it's first non-trivial free
 35078                                  ;	block, we can peephole the code, etc. (We can move some subr calls
 35079                                  ;	inline, etc.) I assume that this is called rarely and that the arena
 35080                                  ;	doesn't have too many memory objects in it beyond the first free one.
 35081                                  ;	verify that this is true; if so, this can stay as is
 35082                                  ;
 35083                                  ;	ENTRY	(bx) = requested size, in bytes
 35084                                  ;		(DS) = (ES) = DOSGROUP
 35085                                  ;	EXIT	'C' clear if memory allocated
 35086                                  ;		  (ax:0) = address of requested memory
 35087                                  ;		'C' set if request failed
 35088                                  ;		  (AX) = error_not_enough_memory
 35089                                  ;		    (bx) = max size we could have allocated
 35090                                  ;		  (ax) = error_arena_trashed
 35091                                  ;	USES	All
 35092                                  ;----------------------------------------------------------------------------
 35093                                  
 35094                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35095                                  ;----------------------------------------------------------------------------
 35096                                  ;SUBTTL $Alloc - allocate space in memory
 35097                                  ;
 35098                                  ;   Assembler usage:
 35099                                  ;           MOV     BX,size
 35100                                  ;           MOV     AH,Alloc
 35101                                  ;           INT     21h
 35102                                  ;         AX:0 is pointer to allocated memory
 35103                                  ;         BX is max size if not enough memory
 35104                                  ;
 35105                                  ;   Description:
 35106                                  ;           Alloc returns  a  pointer  to  a  free  block of
 35107                                  ;       memory that has the requested  size  in  paragraphs.
 35108                                  ;
 35109                                  ;   Error return:
 35110                                  ;           AX = error_not_enough_memory
 35111                                  ;              = error_arena_trashed
 35112                                  ;----------------------------------------------------------------------------
 35113                                  
 35114                                  ; DOSCODE:A28Eh (MSDOS 6.21, MSDOS.SYS)
 35115                                  
 35116                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 35117                                  ; DOSCODE:A22Eh (MSDOS 5.0, MSDOS.SYS)
 35118                                  
 35119                                  _$ALLOC:
 35120                                  	; 25/05/2019 (Procedure has been checked and confirmed)
 35121                                  	; 14/05/2019 - Retro DOS v4.0
 35122                                  	; 04/08/2018 - Retro DOS v3.0
 35123                                  	;EnterCrit critMem
 35124 000061E2 E80EB1                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 35125                                  
 35126                                  ; 17/12/2022
 35127                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35128                                  ;%if 0
 35129                                  	; 14/05/2019
 35130 000061E5 16                      	push	ss
 35131 000061E6 1F                      	pop	ds
 35132                                  
 35133                                  	; MSDOS 6.0
 35134                                  	;mov	ax,[ss:arena_head]
 35135                                  	;mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 35136                                  
 35137 000061E7 A1[2400]                	mov	ax,[arena_head]
 35138 000061EA A3[8E00]                	mov	[START_ARENA],ax			
 35139                                  	
 35140                                  	;test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 35141 000061ED F606[0203]C0            	test	byte [AllocMethod],HIGH_FIRST+HIGH_ONLY
 35142                                  					; Q: should we start scanning from 
 35143                                  					;    UMB's
 35144 000061F2 740D                    	jz	short norm_alloc	; N: scan from arena_head
 35145                                  		
 35146                                  	;;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 35147                                  	;cmp	word [UMB_HEAD],-1
 35148                                  	;je	short norm_alloc	; N: scan from arena_head
 35149                                  
 35150                                  	;test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 35151 000061F4 F606[8900]01            	test	byte [UMBFLAG],LINKSTATE ; 1
 35152 000061F9 7406                    	jz	short norm_alloc	; N: scan from arena_head
 35153                                  	
 35154                                  	;mov	ax,[ss:UMB_HEAD]
 35155                                  	;mov	[ss:START_ARENA],ax	; start_arena = umb_head
 35156 000061FB A1[8C00]                	mov	ax,[UMB_HEAD]
 35157 000061FE A3[8E00]                	mov	[START_ARENA],ax
 35158                                  					; M000 - end
 35159                                  norm_alloc:
 35160 00006201 31C0                            XOR     AX,AX
 35161 00006203 89C7                            MOV     DI,AX
 35162                                  	; 15/03/2018
 35163                                          ;MOV	[SS:FirstArena],AX	; init the options
 35164                                          ;MOV	[SS:BestArena],AX
 35165                                          ;MOV	[SS:LastArena],AX
 35166                                  	; 14/05/2019
 35167 00006205 A3[4003]                	MOV	[FirstArena],AX		; init the options
 35168 00006208 A3[4203]                        MOV	[BestArena],AX
 35169 0000620B A3[4403]                        MOV	[LastArena],AX
 35170 0000620E 50                              PUSH    AX                      ; alloc_max <- 0
 35171                                  	; 04/08/2018
 35172                                  start_scan:
 35173                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 35174                                  	;MOV	AX,[arena_head]
 35175                                  
 35176                                  	; 14/05/2019	
 35177                                  	; MSDOS 6.0
 35178                                  	;mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 35179 0000620F A1[8E00]                	mov	ax,[START_ARENA]
 35180                                  
 35181                                  	; 27/09/2023 (BugFix) (*) 
 35182                                  	; ( jump from 'alloc_chk' (ds<>ss, ax = [SS:START_ARENA]))
 35183                                  start_scan_x:
 35184                                  
 35185 00006212 E89BFF                  	CALL    check_signature         ; ES <- AX, carry set if error
 35186 00006215 7236                            JC      SHORT alloc_err		; IF error THEN GOTO err
 35187                                  
 35188                                  ;%endif
 35189                                  
 35190                                  ; 17/12/2022
 35191                                  %if 0
 35192                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35193                                  
 35194                                  	; MSDOS 6.0
 35195                                  	mov	ax,[ss:arena_head]
 35196                                  	mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 35197                                  
 35198                                  	test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 35199                                  					; Q: should we start scanning from 
 35200                                  					;    UMB's
 35201                                  	jz	short norm_alloc	; N: scan from arena_head
 35202                                  		
 35203                                  	;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 35204                                  	;je	short norm_alloc	; N: scan from arena_head
 35205                                  
 35206                                  	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 35207                                  	jz	short norm_alloc	; N: scan from arena_head
 35208                                  	
 35209                                  	mov	ax,[ss:UMB_HEAD]
 35210                                  	mov	[ss:START_ARENA],ax	; start_arena = umb_head
 35211                                  					; M000 - end
 35212                                  norm_alloc:
 35213                                          XOR     AX,AX
 35214                                          MOV     DI,AX
 35215                                  	; 15/03/2018
 35216                                  	MOV	[SS:FirstArena],AX	; init the options
 35217                                  	MOV	[SS:BestArena],AX
 35218                                  	MOV	[SS:LastArena],AX
 35219                                          PUSH    AX                      ; alloc_max <- 0
 35220                                  	; 04/08/2018
 35221                                  start_scan:
 35222                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 35223                                  	; 14/05/2019	
 35224                                  	; MSDOS 6.0
 35225                                  	mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 35226                                  	CALL    check_signature         ; ES <- AX, carry set if error
 35227                                          JC      SHORT alloc_err		; IF error THEN GOTO err
 35228                                  %endif
 35229                                  
 35230                                  alloc_scan:
 35231 00006217 06                              PUSH    ES
 35232 00006218 1F                              POP     DS                      ; DS <- ES
 35233 00006219 393E0100                        CMP     [ARENA.OWNER],DI ; 0
 35234 0000621D 7469                            JZ      SHORT alloc_free	; IF current block is free THEN examine
 35235                                  
 35236                                  alloc_next:
 35237                                  	; MSDOS 6.0			; M000 - start 
 35238 0000621F 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 35239 00006225 741C                    	jz	short norm_strat	; N: see if we reached last arena
 35240                                  	
 35241 00006227 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST
 35242                                  					; Q: is alloc strategy high_first
 35243 0000622D 7414                    	jz	short norm_strat	; N: see if we reached last arena
 35244 0000622F 36A1[8E00]              	mov	ax,[ss:START_ARENA]
 35245 00006233 363B06[2400]            	cmp	ax,[ss:arena_head]	; Q: did we start scan from 
 35246                                  					;    arena_head
 35247 00006238 7509                    	jne	short norm_strat	; N: see if we reached last arena
 35248 0000623A 8CD8                    	mov	ax,ds			; ax = current block
 35249 0000623C 363B06[8C00]            	cmp	ax,[ss:UMB_HEAD]	; Q: check against umb_head 
 35250 00006241 EB03                    	jmp	short alloc_chk_end
 35251                                  
 35252                                  norm_strat:
 35253                                  	;cmp	byte [di],5Ah ; 'Z'
 35254 00006243 803D5A                          CMP     BYTE [DI],arena_signature_end
 35255                                                                          ; IF current block is last THEN
 35256                                  alloc_chk_end:
 35257 00006246 740E                            JZ      SHORT alloc_end		;   GOTO end
 35258 00006248 E85EFF                          CALL    arena_next              ; AX, ES <- next block, Carry set if error
 35259 0000624B 73CA                            JNC     SHORT alloc_scan	; IF no error THEN GOTO scan
 35260                                  
 35261                                  alloc_err:
 35262 0000624D 58                              POP     AX
 35263                                  
 35264                                  alloc_trashed:
 35265                                  	;LeaveCrit critMem
 35266 0000624E E8BDB0                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0	
 35267                                          ;error	error_arena_trashed
 35268                                  	;mov	al,7
 35269 00006251 B007                    	MOV	AL,error_arena_trashed
 35270                                  alloc_errj:
 35271 00006253 E9EAA3                  	JMP	SYS_RET_ERR
 35272                                  
 35273                                  alloc_end:
 35274                                  	; 18/05/2019
 35275 00006256 36833E[4003]00                  CMP	WORD [SS:FirstArena],0
 35276 0000625C 7403                    	jz	short alloc_chk 
 35277 0000625E E98400                  	jmp	alloc_do_split
 35278                                  
 35279                                  alloc_chk:
 35280                                  	; MSDOS 6.0
 35281 00006261 36A1[2400]              	mov	ax,[ss:arena_head]
 35282 00006265 363B06[8E00]            	cmp	ax,[ss:START_ARENA]	; Q: started scanning from arena_head
 35283 0000626A 740E                    	je	short alloc_fail	; Y: not enough memory
 35284                                  					; N:
 35285                                  					; Q: is the alloc strat HIGH_ONLY
 35286 0000626C 36F606[0203]40          	test 	byte [ss:AllocMethod],HIGH_ONLY
 35287 00006272 7506                    	jnz	short alloc_fail	; Y: return size of largest UMB
 35288                                  	
 35289 00006274 36A3[8E00]              	mov	[ss:START_ARENA],ax	; N: start scanning from arena_head
 35290                                  	; 27/09/2023 (*)
 35291 00006278 EB98                    	jmp	short start_scan_x ; (*) ; (BugFix)
 35292                                  	;jmp	short start_scan
 35293                                  					; M000 - end
 35294                                  
 35295                                  alloc_fail:
 35296                                          ;invoke Get_User_Stack
 35297 0000627A E804A2                          CALL	Get_User_Stack
 35298 0000627D 5B                      	POP     BX
 35299                                          ;MOV	[SI].user_BX,BX
 35300                                  	;MOV	[SI+2],BX
 35301 0000627E 895C02                  	mov	[SI+user_env.user_BX],bx
 35302                                  	;LeaveCrit critMem
 35303 00006281 E88AB0                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35304                                  	;error	error_not_enough_memory
 35305                                  	;mov	al,8
 35306 00006284 B008                    	MOV	AL,error_not_enough_memory
 35307                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35308 00006286 EBCB                    	jmp	short alloc_errj
 35309                                  	;JMP	SYS_RET_ERR
 35310                                  
 35311                                  alloc_free:
 35312 00006288 E835FF                          CALL    Coalesce		; add following free block to current
 35313 0000628B 72C0                            JC	SHORT alloc_err		; IF error THEN GOTO err
 35314 0000628D 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35315 00006291 5A                              POP     DX                      ; check for max found size
 35316 00006292 39D1                            CMP     CX,DX
 35317 00006294 7602                            JNA     SHORT alloc_test
 35318 00006296 89CA                            MOV     DX,CX
 35319                                  
 35320                                  alloc_test:
 35321 00006298 52                              PUSH    DX
 35322 00006299 39CB                            CMP     BX,CX                   ; IF BX > size of current block THEN
 35323 0000629B 7782                    	JA      SHORT alloc_next	;   GOTO next
 35324                                  
 35325                                  	; 15/03/2018
 35326 0000629D 36833E[4003]00                  CMP     WORD [SS:FirstArena],0
 35327 000062A3 7505                    	JNZ	SHORT alloc_best
 35328 000062A5 368C1E[4003]                    MOV     [SS:FirstArena],DS	; save first one found	
 35329                                  alloc_best:
 35330 000062AA 36833E[4203]00                  CMP     WORD [SS:BestArena],0
 35331 000062B0 740E                            JZ      SHORT alloc_make_best	; initial best
 35332 000062B2 06                              PUSH	ES
 35333 000062B3 368E06[4203]                    MOV     ES,[SS:BestArena]
 35334 000062B8 26390E0300                      CMP     [ES:ARENA.SIZE],CX	; is size of best larger than found?
 35335 000062BD 07                              POP	ES
 35336 000062BE 7605                            JBE     SHORT alloc_last
 35337                                  alloc_make_best:
 35338 000062C0 368C1E[4203]                    MOV     [SS:BestArena],DS	; assign best
 35339                                  alloc_last:
 35340 000062C5 368C1E[4403]                    MOV     [SS:LastArena],DS 	; assign last
 35341 000062CA E952FF                          JMP     alloc_next
 35342                                  ;
 35343                                  ; split the block high
 35344                                  ;
 35345                                  alloc_do_split_high:
 35346 000062CD 368E1E[4403]                    MOV     DS,[SS:LastArena]
 35347 000062D2 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35348 000062D6 29D9                            SUB     CX,BX
 35349 000062D8 8CDA                            MOV     DX,DS
 35350 000062DA 7449                            JE      SHORT alloc_set_owner	; sizes are equal, no split
 35351 000062DC 01CA                            ADD     DX,CX                   ; point to next block
 35352 000062DE 8EC2                            MOV     ES,DX                   ; no decrement!
 35353 000062E0 49                              DEC     CX
 35354 000062E1 87D9                            XCHG    BX,CX                   ; bx has size of lower block
 35355 000062E3 EB2B                            JMP     SHORT alloc_set_sizes	; cx has upper (requested) size
 35356                                  ;
 35357                                  ; we have scanned memory and have found all appropriate blocks
 35358                                  ; check for the type of allocation desired; first and best are identical
 35359                                  ; last must be split high
 35360                                  ;
 35361                                  alloc_do_split:
 35362                                  
 35363                                  ; 17/12/2022
 35364                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35365                                  ;%if 0
 35366                                  	; 14/05/2019
 35367                                  	; MSDOS 6.0			; M000 - start
 35368                                  	;xor	cx,cx
 35369 000062E5 368A0E[0203]            	mov	cl,[ss:AllocMethod]
 35370                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 35371 000062EA 80E13F                  	and	cl,3Fh
 35372                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 35373 000062ED 80F901                  	cmp	cl,BEST_FIT
 35374 000062F0 77DB                    	ja	short alloc_do_split_high
 35375                                  ;%endif
 35376                                  
 35377                                  	; 17/12/2022
 35378                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35379                                  	; MSDOS 6.0 & MSDOS 5.0
 35380                                  	;xor	cx,cx
 35381                                  	;mov	cl,[ss:AllocMethod]
 35382                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 35383                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 35384                                  	;ja	short alloc_do_split_high
 35385                                  
 35386                                  	; 15/03/2018
 35387                                          ;;CMP	BYTE [SS:AllocMethod], 1
 35388                                  	; 04/08/2018
 35389                                  	;CMP	BYTE [SS:AllocMethod],BEST_FIT
 35390                                          ;JA	SHORT alloc_do_split_high
 35391                                          
 35392 000062F2 368E1E[4003]            	MOV     DS,[SS:FirstArena]        
 35393 000062F7 7205                    	JB      SHORT alloc_get_size
 35394 000062F9 368E1E[4203]            	MOV     DS,[SS:BestArena]
 35395                                  
 35396                                  alloc_get_size:
 35397 000062FE 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35398 00006302 29D9                            SUB     CX,BX                   ; get room left over
 35399 00006304 8CD8                            MOV     AX,DS
 35400 00006306 89C2                            MOV     DX,AX                   ; save for owner setting
 35401 00006308 741B                            JE      SHORT alloc_set_owner	; IF BX = size THEN (don't split)
 35402 0000630A 01D8                            ADD     AX,BX
 35403 0000630C 40                              INC     AX                      ; remember the header
 35404 0000630D 8EC0                            MOV     ES,AX                   ; ES <- DS + BX (new header location)
 35405 0000630F 49                              DEC     CX                      ; CX <- size of split block
 35406                                  alloc_set_sizes:
 35407 00006310 891E0300                        MOV     [ARENA.SIZE],BX		; current size <- BX
 35408 00006314 26890E0300                      MOV     [ES:ARENA.SIZE],CX      ; split size <- CX
 35409                                  	;mov	bl,4Dh ; 'M'
 35410 00006319 B34D                            MOV     BL,arena_signature_normal
 35411 0000631B 861D                            XCHG    BL,[DI]			; current signature <- 4D
 35412 0000631D 26881D                          MOV     [ES:DI],BL		; new block sig <- old block sig
 35413 00006320 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 35414                                  
 35415                                  alloc_set_owner:
 35416 00006325 8EDA                            MOV     DS,DX
 35417 00006327 36A1[3003]                      MOV     AX,[SS:CurrentPDB] ; 15/03/2018
 35418 0000632B A30100                          MOV     [ARENA.OWNER],AX
 35419 0000632E 8CD8                            MOV     AX,DS
 35420 00006330 40                              INC     AX
 35421 00006331 5B                              POP     BX
 35422                                  	;LeaveCrit critMem
 35423 00006332 E8D9AF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35424                                  	
 35425                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35426                                  alloc_ok:
 35427                                          ;transfer SYS_RET_OK
 35428 00006335 E9FFA2                  	JMP	SYS_RET_OK
 35429                                  
 35430                                  ;	BREAK $SETBLOCK - change size of an allocated block (if possible)
 35431                                  
 35432                                  ; MSDOS 6.0
 35433                                  ;----------------------------------------------------------------------------
 35434                                  ;**	$SETBLOCK - Change size of an Allocated Block
 35435                                  ;
 35436                                  ;	Setblock changes the size of an allocated block. First, we coalesce
 35437                                  ;	any following free space onto this block; then we try to trim the
 35438                                  ;	block down to the size requested.
 35439                                  ;
 35440                                  ;	Note that if the guy wants to grow the block but that growth fails,
 35441                                  ;	we still go ahead and coalesce any trailing free blocks onto it.
 35442                                  ;	Thus the maximum-size-possible value that we return has already
 35443                                  ;	been allocated! This is a bug, dare we fix it? BUGBUG
 35444                                  ;
 35445                                  ;	NOTE - $SETBLOCK is in bed with $ALLOC and jumps into $ALLOC to
 35446                                  ;		finish it's work. For this reason we build the allocsf
 35447                                  ;		structure on the frame, to make us compatible with $ALLOCs
 35448                                  ;		code.
 35449                                  ;
 35450                                  ;	ENTRY	(es) = segment of old block
 35451                                  ;		(bx) = newsize
 35452                                  ;		(ah) = SETBLOCK
 35453                                  ;
 35454                                  ;	EXIT	'C' clear if OK
 35455                                  ;		'C' set if error
 35456                                  ;		  (ax) = error_invalid_block
 35457                                  ;		       = error_arena_trashed
 35458                                  ;		       = error_not_enough_memory
 35459                                  ;		       = error_invalid_function
 35460                                  ;		  (bx) = maximum size possible, iff (ax) = error_not_enough_memory
 35461                                  ;	USES	???? BUGBUG
 35462                                  ;----------------------------------------------------------------------------
 35463                                  
 35464                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35465                                  ;----------------------------------------------------------------------------
 35466                                  ;SUBTTL $SETBLOCK - change size of an allocated block (if possible)
 35467                                  ;
 35468                                  ;   Assembler usage:
 35469                                  ;           MOV     ES,block
 35470                                  ;           MOV     BX,newsize
 35471                                  ;           MOV     AH,setblock
 35472                                  ;           INT     21h
 35473                                  ;         if setblock fails for growing, BX will have the maximum
 35474                                  ;         size possible
 35475                                  ;   Error return:
 35476                                  ;           AX = error_invalid_block
 35477                                  ;              = error_arena_trashed
 35478                                  ;              = error_not_enough_memory
 35479                                  ;              = error_invalid_function
 35480                                  ;----------------------------------------------------------------------------
 35481                                  
 35482                                  _$SETBLOCK:        
 35483                                  	; 04/08/2018 - Retro DOS v3.0
 35484                                  	;EnterCrit   critMem
 35485 00006338 E8B8AF                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 35486                                  
 35487 0000633B BF0000                  	MOV     DI,ARENA.SIGNATURE
 35488 0000633E 8CC0                            MOV     AX,ES
 35489 00006340 48                              DEC     AX
 35490 00006341 E86CFE                          CALL    check_signature
 35491 00006344 7303                            JNC     SHORT setblock_grab
 35492                                  
 35493                                  setblock_bad:
 35494 00006346 E905FF                          JMP     alloc_trashed
 35495                                  
 35496                                  setblock_grab:
 35497 00006349 8ED8                            MOV     DS,AX
 35498 0000634B E872FE                          CALL    Coalesce
 35499 0000634E 72F6                            JC      SHORT setblock_bad
 35500 00006350 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35501 00006354 51                              PUSH    CX
 35502 00006355 39CB                            CMP     BX,CX
 35503 00006357 76A5                            JBE     SHORT alloc_get_size
 35504 00006359 E91EFF                          JMP     alloc_fail
 35505                                  
 35506                                  ;	BREAK $DEALLOC - free previously allocated piece of memory
 35507                                  
 35508                                  ; MSDOS 6.0
 35509                                  ;----------------------------------------------------------------------------
 35510                                  ;**	$DEALLOC - Free Heap Memory
 35511                                  ;
 35512                                  ;	ENTRY	(es) = address of item
 35513                                  ;
 35514                                  ;	EXIT	'C' clear of OK
 35515                                  ;		'C' set if error
 35516                                  ;		  (AX) = error_invalid_block
 35517                                  ;	USES	???? BUGBUG
 35518                                  
 35519                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35520                                  ;----------------------------------------------------------------------------
 35521                                  ;SUBTTL $DEALLOC - free previously allocated piece of memory
 35522                                  ;
 35523                                  ;   Assembler usage:
 35524                                  ;           MOV     ES,block
 35525                                  ;           MOV     AH,dealloc
 35526                                  ;           INT     21h
 35527                                  ;
 35528                                  ;   Error return:
 35529                                  ;           AX = error_invalid_block
 35530                                  ;              = error_arena_trashed
 35531                                  ;---------------------------------------------------------------------------- 
 35532                                  
 35533                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35534                                  _$DEALLOC:
 35535                                  	; 14/05/2019 - Retro DOS v4.0    
 35536                                  	; 04/08/2018 - Retro DOS v3.0
 35537                                  	;EnterCrit   critMem
 35538 0000635C E894AF                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 35539                                  
 35540                                  	; MSDOS 6.0			; M016, M068 - Start
 35541 0000635F 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF
 35542                                  					; Q: was the previous call an int 21
 35543                                  					;    exec call
 35544 00006365 740D                    	jz	short deallocate	; N: continue
 35545 00006367 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT], 0 ; Q: is count 0
 35546 0000636D 7505                    	jne	short deallocate	; N: continue
 35547                                  	;mov	byte [ss:A20OFF_COUNT], 1 ; Y: set count to 1
 35548                                  	; 25/09/2023
 35549 0000636F 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]
 35550                                  deallocate:				; M016, M068 - End
 35551 00006374 BF0000                  	MOV     DI,ARENA.SIGNATURE ; = 0
 35552 00006377 8CC0                            MOV     AX,ES
 35553 00006379 48                              DEC     AX
 35554 0000637A E833FE                          CALL    check_signature
 35555 0000637D 720A                            JC      SHORT dealloc_err
 35556 0000637F 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 35557                                  	;LeaveCrit critMem
 35558 00006384 E887AF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35559                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35560                                          ;transfer SYS_RET_OK
 35561                                  dealloc_ok:
 35562 00006387 EBAC                    	jmp	short alloc_ok
 35563                                  	;JMP	SYS_RET_OK
 35564                                  
 35565                                  dealloc_err:
 35566                                  	;LeaveCrit critMem
 35567 00006389 E882AF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35568                                          ;error	error_invalid_block
 35569                                  	;mov	al,9
 35570 0000638C B009                    	MOV	AL,error_invalid_block
 35571                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35572                                  dealloc_errj:
 35573                                  AllocOperErrj:	; 17/12/2022
 35574 0000638E E9AFA2                  	JMP	SYS_RET_ERR
 35575                                  
 35576                                  ;	BREAK $AllocOper - get/set allocation mechanism
 35577                                  
 35578                                  ; MSDOS 6.0
 35579                                  ;----------------------------------------------------------------------------
 35580                                  ;**	$AllocOper - Get/Set Allocation Mechanism
 35581                                  ;
 35582                                  ;	Assembler usage:
 35583                                  ;           MOV     AH,AllocOper
 35584                                  ;           MOV     BX,method
 35585                                  ;           MOV     AL,func
 35586                                  ;           INT     21h
 35587                                  ;
 35588                                  ;	ENTRY	
 35589                                  ;		(al) = 0
 35590                                  ;		  Get allocation Strategy in (ax)
 35591                                  ;
 35592                                  ;		(al) = 1, (bx) = method = zw0000xy
 35593                                  ;		  Set allocation strategy.
 35594                                  ;		   w  = 1  => HIGH_ONLY
 35595                                  ;		   z  = 1  => HIGH_FIRST
 35596                                  ;		   xy = 00 => FIRST_FIT
 35597                                  ;		      = 01 => BEST_FIT
 35598                                  ;		      = 10 => LAST_FIT
 35599                                  ;
 35600                                  ;		(al) = 2
 35601                                  ;		  Get UMB link state in (al)
 35602                                  ;
 35603                                  ;		(al) = 3
 35604                                  ;		  Set UMB link state
 35605                                  ;		   (bx) = 0 => Unlink UMBs
 35606                                  ;		   (bx) = 1 => Link UMBs
 35607                                  ;
 35608                                  ;
 35609                                  ;	EXIT	'C' clear if OK
 35610                                  ;
 35611                                  ;		 if (al) = 0
 35612                                  ;		  (ax) = existing method
 35613                                  ;		 if (al) = 1
 35614                                  ;		  Sets allocation strategy
 35615                                  ;		 if (al) = 2
 35616                                  ;		  (al) = 0 => UMBs not linked
 35617                                  ;		  (al) = 1 => UMBs linked in
 35618                                  ;		 if (al) = 3
 35619                                  ;		  Links/Unlinks the UMBs into DOS chain
 35620                                  ;
 35621                                  ;		'C' set if error
 35622                                  ;		  AX = error_invalid_function
 35623                                  ;
 35624                                  ;	Rev. M000 - added support for HIGH_FIRST in (al) = 1. 7/9/90
 35625                                  ; 	Rev. M003 - added functions (al) = 2 and (al) = 3. 7/18/90
 35626                                  ;	Rev. M009 - (al) = 3 will return 'invalid function' in ax if
 35627                                  ;		    umbhead has'nt been initialized by sysinit and 'trashed
 35628                                  ;		    arena' if an arena sig is damaged.
 35629                                  ;----------------------------------------------------------------------------
 35630                                  
 35631                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35632                                  ;----------------------------------------------------------------------------
 35633                                  ;SUBTTL $AllocOper - get/set allocation mechanism
 35634                                  ;
 35635                                  ;   Assembler usage:
 35636                                  ;           MOV     AH,AllocOper
 35637                                  ;           MOV     BX,method
 35638                                  ;           MOV     AL,func
 35639                                  ;           INT     21h
 35640                                  ;
 35641                                  ;   Error return:
 35642                                  ;           AX = error_invalid_function
 35643                                  ;----------------------------------------------------------------------------
 35644                                  
 35645                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35646                                  _$ALLOCOPER:
 35647                                  	; 14/05/2019 - Retro DOS v4.0
 35648                                  	; MSDOS 6.0
 35649 00006391 08C0                    	or	al,al ; 0
 35650 00006393 741E                    	jz	short AllocGetStrat
 35651                                  	; 17/12/2022
 35652                                  	;cmp	al,1
 35653                                  	;jz	short AllocSetStrat
 35654                                  
 35655                                  	; 01/12/2022
 35656                                  	;cmp	al, 2
 35657                                  	;jb	short AllocSetStrat
 35658                                  	;ja	short AllocSetLink
 35659                                  	;;jmp	short AllocGetLink
 35660                                  ;AllocGetLink:
 35661                                  	; MSDOS 6.0
 35662                                  	;mov	al,[ss:UMBFLAG]		; return link state in al
 35663                                  	;and 	al,LINKSTATE		
 35664                                  	;;transfer SYS_RET_OK
 35665                                  	;jmp	SYS_RET_OK
 35666                                  
 35667 00006395 3C02                    	cmp	al,2
 35668                                  	; 17/12/2022
 35669 00006397 7223                    	jb	short AllocSetStrat ; al = 1
 35670 00006399 7432                    	je	short AllocGetLink
 35671                                  
 35672                                  	;cmp	al,2
 35673                                  	;jz	short AllocGetLink
 35674 0000639B 3C03                    	cmp	al,3
 35675 0000639D 7436                    	jz	short AllocSetLink
 35676                                  
 35677                                  	; 15/04/2018
 35678                                  	;CMP	AL,1
 35679                                          ;JB	SHORT AllocOperGet
 35680                                          ;JZ	SHORT AllocOperSet
 35681                                  
 35682                                  AllocOperError:
 35683                                  	; 04/08/2018 - Retro DOS v3.0
 35684                                  	; MSDOS 3.3 (& MSDOS 6.0)	; Extended Error Locus	
 35685                                  	;mov	byte [ss:EXTERR_LOCUS],5
 35686 0000639F 36C606[2303]05                  MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 35687                                  	;error	error_invalid_function
 35688                                  	;mov	al,1
 35689 000063A5 B001                    	MOV	AL,error_invalid_function
 35690                                  	; 17/12/2022
 35691                                  ;AllocOperErrj:
 35692                                  	;JMP	SYS_RET_ERR
 35693                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35694                                  	;jmp	short dealloc_errj
 35695                                  	; 17/12/2022
 35696 000063A7 EBE5                    	jmp	short AllocOperErrj
 35697                                  
 35698                                  AllocArenaError:
 35699                                  	; MSDOS 6.0
 35700 000063A9 36C606[2303]05          	MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 35701                                  					; M009: Extended Error Locus
 35702                                  	;error	error_arena_trashed	; M009:
 35703                                  	;mov	al,7
 35704 000063AF B007                    	MOV	AL,error_arena_trashed
 35705                                  	;JMP	SYS_RET_ERR
 35706 000063B1 EBDB                    	jmp	short AllocOperErrj ; 17/12/2022
 35707                                  
 35708                                  AllocGetStrat: 
 35709                                  	; MSDOS 6.0
 35710                                  AllocOperGet:
 35711 000063B3 36A0[0203]                      MOV     AL,[SS:AllocMethod]
 35712 000063B7 30E4                            XOR     AH,AH
 35713                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35714                                  	;transfer SYS_RET_OK
 35715                                  AllocOperOk:
 35716                                  	; 17/12/2022
 35717                                  	;jmp	short dealloc_ok
 35718 000063B9 E97BA2                  	JMP	SYS_RET_OK
 35719                                  
 35720                                  AllocSetStrat: 
 35721                                  	; 14/05/2019
 35722                                  	; MSDOS 6.0
 35723 000063BC 53                      	push	bx			; M000 - start
 35724                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35725                                  	;and	bx,STRAT_MASK ; 0FF3Fh	; M064: mask off bit 6 & 7
 35726                                  	; 17/12/2022
 35727 000063BD 80E33F                  	and	bl,3Fh
 35728 000063C0 83FB02                  	cmp	bx,2			; BX must be 0-2
 35729                                  	;cmp	bl,2
 35730 000063C3 5B                      	pop	bx			; M000 - end
 35731 000063C4 77D9                    	ja	short AllocOperError
 35732                                  
 35733                                  AllocOperSet:
 35734 000063C6 36881E[0203]                    MOV     [SS:AllocMethod],BL
 35735                                    	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35736                                  	;transfer SYS_RET_OK
 35737                                  AllocOperOkj:
 35738 000063CB EBEC                    	jmp	short AllocOperOk
 35739                                  	;JMP	SYS_RET_OK
 35740                                  
 35741                                  AllocGetLink:
 35742                                  	; MSDOS 6.0
 35743 000063CD 36A0[8900]              	mov	al,[ss:UMBFLAG]		; return link state in al
 35744                                  	;and	al,1
 35745 000063D1 2401                    	and 	al,LINKSTATE		
 35746                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35747                                  	;transfer SYS_RET_OK
 35748                                  AllocOperOkj2:
 35749                                  	; 17/12/2022
 35750 000063D3 EBE4                    	jmp	short AllocOperOk
 35751                                  	;jmp	short AllocOperOkj
 35752                                  	;;JMP	SYS_RET_OK
 35753                                  
 35754                                  AllocSetLink:
 35755                                  	; MSDOS 6.0			; M009 - start
 35756 000063D5 368B0E[8C00]            	mov	cx,[ss:UMB_HEAD]	; cx = umb_head
 35757 000063DA 83F9FF                  	cmp	cx,0FFFFh		; Q: has umb_head been initialized
 35758 000063DD 74C0                    	je	short AllocOperError	; N: error
 35759                                  					; Y: continue
 35760                                  					; M009 - end
 35761 000063DF 83FB01                  	cmp	bx,1			
 35762 000063E2 7204                    	jb	short UnlinkUmbs
 35763 000063E4 741C                    	jz	short LinkUmbs
 35764                                  	
 35765 000063E6 EBB7                    	jmp	short AllocOperError
 35766                                  	
 35767                                  UnlinkUmbs:
 35768                                  	;test	byte [ss:UMBFLAG],1
 35769 000063E8 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs unlinked?
 35770 000063EE 7410                    	jz	short unlinked		; Y: return 
 35771                                  	
 35772 000063F0 E82900                  	call	GetLastArena		; get arena before umb_head in DS
 35773 000063F3 72B4                    	jc	short AllocArenaError	; M009: arena trashed
 35774                                  	
 35775                                  					; make it last
 35776 000063F5 C60600005A              	mov	byte [0],arena_signature_end
 35777                                  	
 35778                                  	;and	byte [ss:UMBFLAG],0FEh
 35779 000063FA 368026[8900]FE          	and	byte [ss:UMBFLAG],~LINKSTATE ; indicate unlink'd state in umbflag
 35780                                  	
 35781                                  unlinked:
 35782                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35783                                  	;transfer SYS_RET_OK
 35784                                  	; 17/12/2022
 35785 00006400 EBB7                    	jmp	short AllocOperOk
 35786                                  	;jmp	short AllocOperOkj2
 35787                                  	;;JMP	SYS_RET_OK
 35788                                  
 35789                                  LinkUmbs:
 35790 00006402 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs linked?
 35791 00006408 7510                    	jnz	short linked		; Y: return
 35792                                  	
 35793 0000640A E80F00                  	call	GetLastArena		; get arena before umb_head
 35794 0000640D 729A                    	jc	short AllocArenaError	; M009: arena trashed
 35795                                  	
 35796                                  					; make it normal. M061: ds points to
 35797                                  					; arena before umb_head
 35798 0000640F C60600004D              	mov	byte [0],arena_signature_normal
 35799                                  	
 35800 00006414 36800E[8900]01          	or	byte [ss:UMBFLAG],LINKSTATE ; indicate link'd state in umbflag
 35801                                  linked:
 35802                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35803                                  	;transfer SYS_RET_OK
 35804                                  	; 17/12/2022
 35805 0000641A EB9D                    	jmp	short AllocOperOk
 35806                                  	;jmp	short unlinked
 35807                                  	;;JMP	SYS_RET_OK
 35808                                  
 35809                                  ; MSDOS 6.0
 35810                                  ;--------------------------------------------------------------------------
 35811                                  ; Procedure Name : GetLastArena		-  M003
 35812                                  ;
 35813                                  ; Inputs	 : cx = umb_head
 35814                                  ;
 35815                                  ;
 35816                                  ; Outputs	 : If UMBs are linked
 35817                                  ;			ES = umb_head
 35818                                  ;			DS = arena before umb_head
 35819                                  ;		   else
 35820                                  ;			DS = last arena
 35821                                  ;			ES = next arena. will be umb_head if NC.
 35822                                  ;
 35823                                  ;		   CY if error
 35824                                  ;
 35825                                  ; Uses		 : DS, ES, DI, BX
 35826                                  ;--------------------------------------------------------------------------
 35827                                  
 35828                                  ; 14/05/2019 - Retro DOS v4.0
 35829                                  ; DOSCODE:A4D6h (MSDOS 6.21, MSDOS.SYS)
 35830                                  
 35831                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35832                                  ; DOSCODE:A476h (MSDOS 5.0, MSDOS.SYS)
 35833                                  	
 35834                                  GetLastArena:
 35835 0000641C 50                      	push	ax			; save ax
 35836                                  
 35837 0000641D 36A1[2400]              	mov	ax,[ss:arena_head]
 35838 00006421 8EC0                    	mov	es,ax			; es = arena_head
 35839 00006423 31FF                    	xor	di,di
 35840                                  
 35841 00006425 26803D5A                	cmp     byte [es:di],arena_signature_end
 35842                                  					; Q: is this the last arena
 35843 00006429 7419                    	je	short GLA_done		; Y: return last arena in ES		
 35844                                  					
 35845                                  GLA_next:
 35846 0000642B 8ED8                    	mov	ds,ax
 35847 0000642D E879FD                  	call	arena_next		; ax, es -> next arena
 35848                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35849                                  	;jc	short GLA_err
 35850                                  	; 17/12/2022
 35851 00006430 7228                    	jc	short GLA_err2
 35852                                  
 35853 00006432 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 35854 00006438 7506                    	jnz	short GLA_chkumb	; Y: terminating condition is 
 35855                                  					;    umb_head
 35856                                  					; N: terminating condition is 05Ah
 35857                                  
 35858 0000643A 26803D5A                	cmp     byte [es:di],arena_signature_end
 35859                                  					; Q: is this the last arena
 35860 0000643E EB02                    	jmp	short GLA_@f
 35861                                  GLA_chkumb:
 35862 00006440 39C8                    	cmp	ax,cx			; Q: is this umb_head
 35863                                  GLA_@f:
 35864 00006442 75E7                    	jne	short GLA_next		; N: get next arena
 35865                                  
 35866                                  GLA_done:
 35867                                  					; M061 - Start
 35868 00006444 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 35869 0000644A 750B                    	jnz	short GLA_ret		; Y: we're done
 35870                                  					; N: let us confirm that the next 
 35871                                  					;    arena is umb_head
 35872 0000644C 8ED8                    	mov	ds,ax
 35873 0000644E E858FD                  	call	arena_next		; ax, es -> next arena
 35874                                  	;jc	short GLA_err
 35875 00006451 7207                    	jc	short GLA_err2
 35876 00006453 39C8                    	cmp	ax,cx			; Q: is this umb_head
 35877 00006455 7502                    	jne	short GLA_err		; N: error
 35878                                  					; M061 - End
 35879                                  GLA_ret:
 35880                                  	; 17/12/2022				
 35881                                  	;clc
 35882                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35883                                  	;clc
 35884 00006457 58                      	pop	ax			; M061
 35885 00006458 C3                      	retn				; M061
 35886                                  
 35887                                  GLA_err:
 35888 00006459 F9                      	stc				; M061
 35889                                  GLA_err2:
 35890 0000645A 58                      	pop	ax
 35891 0000645B C3                      	retn
 35892                                  
 35893                                  ;============================================================================
 35894                                  ; SRVCALL.ASM, MSDOS 6.0, 1991
 35895                                  ;============================================================================
 35896                                  ; 04/08/2018 - Retro DOS v3.0
 35897                                  
 35898                                  ;	TITLE SRVCALL - Server DOS call
 35899                                  ;	NAME  SRVCALL
 35900                                  
 35901                                  ;**	SRVCALL.ASM - Server DOS call functions
 35902                                  ;
 35903                                  ;
 35904                                  ;	$ServerCall
 35905                                  ;
 35906                                  ;	Modification history:
 35907                                  ;
 35908                                  ;	    Created: ARR 08 August 1983
 35909                                  
 35910                                  ;AsmVars <Installed>
 35911                                  
 35912                                  ;include dpl.asm
 35913                                  
 35914                                  ;Installed = TRUE
 35915                                  
 35916                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 35917                                  ; ---------------------------------------------------------------------------
 35918                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35919                                  
 35920                                  ;BREAK <ServerCall -- Server DOS call>
 35921                                  
 35922                                  ; DOSCODE:A517h (MSDOS 6.21, MSDOS.SYS)
 35923                                  ; DOSCODE:A4B7h (MSDOS 5.0, MSDOS.SYS)
 35924                                  
 35925                                  ;hkn; TABLE	SEGMENT
 35926                                  ;Public SRVC001S,SRVC001E
 35927                                  ;SRVC001S label byte
 35928                                  
 35929                                  SRVC001S:
 35930                                  
 35931 0000645C [6064]                  SERVERTAB:	dw	SERVER_DISP
 35932 0000645E [B264]                  SERVERLEAVE:	dw	SERVERRETURN
 35933 00006460 0B                      SERVER_DISP:	db	(SERVER_DISP_END-SERVER_DISP-1)/2 ; = 11
 35934 00006461 [1A65]                  		dw	SRV_CALL	; 0
 35935 00006463 [B364]                  		dw	COMMIT_ALL	; 1
 35936 00006465 [E964]                  		dw	CLOSE_NAME	; 2
 35937 00006467 [F464]                  		dw	CLOSE_UID	; 3
 35938 00006469 [FB64]                  		dw	CLOSE_UID_PID	; 4
 35939 0000646B [0265]                  		dw	GET_LIST	; 5
 35940 0000646D [5B65]                  		dw	GET_DOS_DATA	; 6
 35941 0000646F [7F65]                  		dw	SPOOL_OPER	; 7
 35942 00006471 [7F65]                  		dw	SPOOL_OPER	; 8
 35943 00006473 [7F65]                  		dw	SPOOL_OPER	; 9
 35944 00006475 [8B65]                  		dw	_$SetExtendedError  ; 10
 35945                                  
 35946                                  SERVER_DISP_END:  ;  LABEL BYTE
 35947                                  
 35948                                  ;SRVC001E label byte
 35949                                  
 35950                                  SRVC001E:
 35951                                  
 35952                                  ;hkn; TABLE	ENDS
 35953                                  
 35954                                  ;----------------------------------------------------------------------------
 35955                                  ;
 35956                                  ; Procedure Name : $ServerCall
 35957                                  ;
 35958                                  ; Inputs:
 35959                                  ;	DS:DX -> DPL  (except calls 7,8,9)
 35960                                  ; Function:
 35961                                  ;	AL=0	Server DOS call
 35962                                  ;	AL=1	Commit All files
 35963                                  ;	AL=2	Close file by name (SHARING LOADED ONLY) DS:DX in DPL -> name
 35964                                  ;	AL=3	Close all files for DPL_UID
 35965                                  ;	AL=4	Close all files for DPL_UID/PID_PID
 35966                                  ;	AL=5	Get open file list entry
 35967                                  ;		    IN: BX File Index
 35968                                  ;			CX User Index
 35969                                  ;		    OUT:ES:DI -> Name
 35970                                  ;			BX = UID
 35971                                  ;		    CX = # locked blocks held by this UID
 35972                                  ;	AL=6	Get DOS data area
 35973                                  ;		    OUT: DS:SI -> Start
 35974                                  ;			CX size in bytes of swap if indos
 35975                                  ;			DX size in bytes of swap always
 35976                                  ;	AL=7	Get truncate flag
 35977                                  ;	AL=8	Set truncate flag
 35978                                  ;	AL=9	Close all spool files
 35979                                  ;	AL=10	SetExtendedError
 35980                                  ;
 35981                                  ;----------------------------------------------------------------------------
 35982                                  
 35983                                  _$ServerCall:
 35984                                  	; 13/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35985                                  	; DOSCODE:A4D2h (MSDOS 5.0 MSDOS.SYS)		
 35986                                  	; 10/06/2019
 35987                                  	; 29/04/2019 - Retro DOS v4.0
 35988                                  	; DOSCODE:A532h (MSDOS 6.21 MSDOS.SYS)
 35989                                  
 35990                                  	; 05/08/2018 - Retro DOS v3.0
 35991                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 657Bh
 35992 00006477 3C07                    	CMP	AL,7
 35993 00006479 7204                    	JB	short SET_STUFF
 35994 0000647B 3C09                    	CMP	AL,9
 35995 0000647D 761A                    	JBE	short NO_SET_ID		; No DPL on calls 7,8,9
 35996                                  SET_STUFF:
 35997 0000647F 89D6                    	MOV	SI,DX			; Point to DPL with DS:SI
 35998                                  	;mov	bx,[si+12h]
 35999 00006481 8B5C12                  	MOV	BX,[SI+DPL.UID]
 36000                                  
 36001                                  	; MSDOS 6.0
 36002                                  ;SR;
 36003                                  ; WIN386 updates the USER_ID itself. If WIN386 is present we skip the updating
 36004                                  ; of USER_ID
 36005                                  
 36006 00006484 36F606[3010]01          	test	byte [SS:IsWin386],1
 36007 0000648A 7505                    	jnz	short skip_win386
 36008                                  
 36009                                  ;hkn; SS override for user_id and proc_id
 36010                                  	; 15/08/2018
 36011 0000648C 36891E[3E03]            	MOV	[SS:USER_ID],BX		; Set UID
 36012                                  
 36013                                  skip_win386:
 36014 00006491 8B5C14                  	MOV	BX,[SI+DPL.PID]
 36015 00006494 36891E[3C03]            	MOV	[SS:PROC_ID],BX		; Set process ID
 36016                                  NO_SET_ID:
 36017                                  	; 10/06/2019 - Retro DOS v4.0
 36018 00006499 2EFF36[5E64]            	PUSH	word [cs:SERVERLEAVE]	; push return address
 36019 0000649E 2EFF36[5C64]            	PUSH	word [cS:SERVERTAB]	; push table address
 36020 000064A3 50                      	PUSH	AX
 36021 000064A4 E85FAD                  	call	TableDispatch
 36022                                  
 36023                                  ;hkn; SS override
 36024                                  	;mov 	byte [SS:EXETERR_LOCUS],1
 36025 000064A7 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36026                                  	;error	error_invalid_function
 36027                                  	;mov	al,1
 36028 000064AD B001                    	MOV	AL,error_invalid_function
 36029                                  servercall_error:
 36030 000064AF E98EA1                  	JMP	SYS_RET_ERR
 36031                                  
 36032                                  SERVERRETURN:
 36033 000064B2 C3                      	retn
 36034                                  
 36035                                  ; Commit - iterate through the open file list and make sure that the
 36036                                  ; directory entries are correctly updated.
 36037                                  
 36038                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36039                                  COMMIT_ALL:
 36040 000064B3 31DB                    	XOR	BX,BX			;   for (i=0; ThisSFT=getSFT(i); i++)
 36041 000064B5 16                      	push	ss
 36042 000064B6 1F                      	pop	ds
 36043 000064B7 E839AE                  	call	ECritSFT		; Gonna scan SFT cache, lock it down
 36044                                  CommitLoop:
 36045 000064BA 53                      	push	bx
 36046 000064BB E82401                  	call	SFFromSFN
 36047 000064BE 7222                    	JC	short CommitDone
 36048 000064C0 26833D00                	cmp	word [es:di],0
 36049                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],0
 36050                                  					; if (ThisSFT->refcount != 0)
 36051 000064C4 7418                    	JZ	short CommitNext
 36052                                  	;cmp	word [es:di],0FFFFh ; -1
 36053 000064C6 26833DFF                	cmp	word [ES:DI],sf_busy
 36054                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],sf_busy  
 36055                                  					; BUSY SFTs have god knows what
 36056 000064CA 7412                    	JZ	short CommitNext	;   in them.
 36057                                  	; 17/12/2022
 36058 000064CC 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 36059                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 36060 000064D1 750B                    	JNZ	short CommitNext	;  Skip Network SFTs so the SERVER
 36061                                  					;	doesn't deadlock
 36062 000064D3 893E[9E05]              	MOV	[THISSFT],DI
 36063 000064D7 8C06[A005]              	MOV	[THISSFT+2],ES
 36064 000064DB E812CB                  	call	DOS_COMMIT		;	DOSCommit ();
 36065                                  CommitNext:
 36066 000064DE 5B                      	pop	bx
 36067 000064DF 43                      	INC	BX
 36068 000064E0 EBD8                    	JMP	short CommitLoop
 36069                                  CommitDone:
 36070 000064E2 E829AE                  	call	LCritSFT
 36071 000064E5 5B                      	pop	bx
 36072                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36073                                  Commit_Ok:
 36074 000064E6 E94EA1                  	jmp	SYS_RET_OK
 36075                                  	
 36076                                  
 36077                                  CLOSE_NAME:
 36078                                  
 36079                                  ;if installed
 36080                                  
 36081                                  ;hkn; SS override
 36082                                  	;call	far [ss:MFTcloN]
 36083 000064E9 36FF1E[A400]            	Call	far [SS:JShare+(5*4)] ; 5 = MFTcloN
 36084                                  ;else
 36085                                  ;	Call	MFTcloN
 36086                                  ;endif
 36087                                  
 36088                                  CheckReturns:
 36089 000064EE 7202                    	JC	short func_err
 36090                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36091                                  	;transfer SYS_RET_OK
 36092                                  Commit_Okj:
 36093 000064F0 EBF4                    	jmp	short Commit_Ok
 36094                                  	;jmp	SYS_RET_OK
 36095                                  
 36096                                  func_err:
 36097                                  	;transfer SYS_RET_ERR
 36098                                  	;jmp	SYS_RET_ERR
 36099 000064F2 EBBB                    	jmp	short servercall_error
 36100                                  
 36101                                  CLOSE_UID:
 36102                                  
 36103                                  ;if installed
 36104                                  ;hkn; SS override
 36105                                  	;call	far [ss:MFTclU]
 36106 000064F4 36FF1E[9C00]            	Call	far [SS:JShare+(3*4)] ; 3 = MTFTclu
 36107                                  ;else
 36108                                  ;	Call	MFTclU
 36109                                  ;endif
 36110 000064F9 EBF3                    	JMP	short CheckReturns
 36111                                  
 36112                                  CLOSE_UID_PID:
 36113                                  
 36114                                  ;if installed
 36115                                  ;hkn; SS override
 36116                                  	;call	far [ss:MFTCloseP]
 36117 000064FB 36FF1E[A000]            	Call	far [SS:JShare+(4*4)] ; 4 = MFTCloseP 
 36118                                  ;else
 36119                                  ;	Call	MFTCloseP
 36120                                  ;endif
 36121 00006500 EBEC                    	JMP	short CheckReturns
 36122                                  
 36123                                  GET_LIST:
 36124                                  
 36125                                  ;if installed
 36126                                  ;hkn; SS override
 36127                                  	;call	far [ss:MFT_get]
 36128 00006502 36FF1E[B400]            	Call	far [SS:JShare+(9*4)] ; 9 = MFT_get
 36129                                  ;else
 36130                                  ;	Call	MFT_get
 36131                                  ;endif
 36132 00006507 72E9                    	JC	short func_err
 36133 00006509 E8759F                  	call	Get_User_Stack
 36134                                  	;mov	[si+2],bx
 36135 0000650C 895C02                  	MOV	[SI+user_env.user_BX],BX
 36136                                  	;mov	[si+10],di
 36137 0000650F 897C0A                  	MOV	[SI+user_env.user_DI],DI
 36138                                  	;mov	[si+16],es
 36139 00006512 8C4410                  	MOV	[SI+user_env.user_ES],ES
 36140                                  SetCXOK:
 36141                                  	;mov	[si+4],cx
 36142 00006515 894C04                  	MOV	[SI+user_env.user_CX],CX
 36143                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36144                                  	;transfer SYS_RET_OK
 36145                                  Commit_Okj2:
 36146                                  	; 17/12/2022
 36147 00006518 EBCC                    	jmp	short Commit_Ok
 36148                                  	;jmp	short Commit_Okj
 36149                                  	;;jmp	SYS_RET_OK
 36150                                  
 36151                                  SRV_CALL:
 36152 0000651A 58                      	POP	AX			; get rid of call to $srvcall
 36153 0000651B 1E                      	push	ds
 36154 0000651C 56                      	push	si
 36155 0000651D E8619F                  	call	Get_User_Stack
 36156 00006520 5F                      	pop	di
 36157 00006521 07                      	pop	es
 36158                                  
 36159                                  ; DS:SI point to stack
 36160                                  ; ES:DI point to DPL
 36161                                  
 36162 00006522 E8C0AC                  	call	XCHGP
 36163                                  
 36164                                  ; DS:SI point to DPL
 36165                                  ; ES:DI point to stack
 36166                                  ;
 36167                                  ; We now copy the registers from DPL to save stack
 36168                                  
 36169 00006525 56                      	push	si
 36170 00006526 B90600                  	MOV	CX,6
 36171 00006529 F3A5                    	REP	MOVSW			; Put in AX,BX,CX,DX,SI,DI
 36172 0000652B 47                      	INC	DI
 36173 0000652C 47                      	INC	DI			; Skip user_BP
 36174 0000652D A5                      	MOVSW				; DS
 36175 0000652E A5                      	MOVSW				; ES
 36176 0000652F 5E                      	pop	si			; DS:SI -> DPL
 36177 00006530 8B04                    	mov	ax,[SI]
 36178                                  	;MOV	AX,[SI+DPL.AX]
 36179                                  	;mov	bx,[si+2]
 36180 00006532 8B5C02                  	MOV	BX,[SI+DPL.BX]
 36181                                  	;mov	cx,[si+4]
 36182 00006535 8B4C04                  	MOV	CX,[SI+DPL.CX]
 36183                                  	;mov	dx,[si+6]
 36184 00006538 8B5406                  	MOV	DX,[SI+DPL.DX]
 36185                                  	;mov	di,[si+10]
 36186 0000653B 8B7C0A                  	MOV	DI,[SI+DPL.DI]
 36187                                  	;mov	es,[si+14]
 36188 0000653E 8E440E                  	MOV	ES,[SI+DPL.ES]
 36189                                  	;push	word [si+8]
 36190 00006541 FF7408                  	PUSH	word [SI+DPL.SI]
 36191                                  	;mov	ds,[si+12]
 36192 00006544 8E5C0C                  	MOV	DS,[SI+DPL.DS]
 36193 00006547 5E                      	POP	SI
 36194                                  
 36195                                  ;hkn; SS override for next 3
 36196 00006548 368C1E[EC05]            	MOV	[SS:SAVEDS],DS
 36197 0000654D 36891E[EA05]            	MOV	[SS:SAVEBX],BX
 36198 00006552 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; set no redirect flag
 36199 00006558 E92D9E                  	jmp	REDISP
 36200                                  
 36201                                  GET_DOS_DATA:
 36202 0000655B 16                      	push	ss
 36203 0000655C 07                      	pop	es
 36204 0000655D BF[2003]                	MOV     DI,SWAP_START
 36205 00006560 B9[AC0A]                	MOV     CX,SWAP_END
 36206 00006563 BA[3A03]                	MOV     DX,SWAP_ALWAYS
 36207 00006566 29F9                    	SUB     CX,DI
 36208 00006568 29FA                    	SUB     DX,DI
 36209 0000656A D1E9                    	SHR     CX,1                    ; div by 2, remainder in carry
 36210 0000656C 83D100                  	ADC     CX,0                    ; div by 2 + round up
 36211 0000656F D1E1                    	SHL     CX,1                    ; round up to 2 boundary.
 36212 00006571 E80D9F                  	call	Get_User_Stack
 36213                                  	;mov	[si+14],es
 36214 00006574 8C440E                  	MOV     [SI+user_env.user_DS],ES
 36215                                  	;mov	[si+8],di
 36216 00006577 897C08                  	MOV     [SI+user_env.user_SI],DI
 36217                                  	;mov	[si+6],dx
 36218 0000657A 895406                  	MOV     [SI+user_env.user_DX],DX
 36219 0000657D EB96                    	JMP	short SetCXOK
 36220                                  
 36221                                  SPOOL_OPER:
 36222                                  	;CallInstall NETSpoolOper,MultNET,37,AX,BX
 36223                                  
 36224 0000657F 50                      	push    ax
 36225 00006580 B82511                  	mov     ax,1125h
 36226 00006583 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE
 36227                                  			; STACK: WORD subfunction
 36228                                  			; Return: CF set on error, AX = error code
 36229                                  			; STACK unchanged
 36230 00006585 5B                      	pop	bx
 36231                                  	; 17/12/2022
 36232                                  	;JC	short func_err2
 36233 00006586 7390                    	jnc	short Commit_Okj2
 36234                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36235                                  	;;jmp	SYS_RET_OK
 36236                                  	;jmp	short Commit_Okj2
 36237                                  	
 36238                                  func_err2:
 36239 00006588 E9B5A0                  	jmp	SYS_RET_ERR
 36240                                  
 36241                                  ;Break	<$SetExtendedError - set extended error for later retrieval>
 36242                                  ;--------------------------------------------------------------------------
 36243                                  ;
 36244                                  ; Procedure Name : $SetExtendedError
 36245                                  ;
 36246                                  ; $SetExtendedError takes extended error information and loads it up for the
 36247                                  ; next extended error call. This is used by interrupt-level proccessors to
 36248                                  ; mask their actions.
 36249                                  ;
 36250                                  ;   Inputs: DS:SI points to DPL which contains all registers
 36251                                  ;   Outputs: none
 36252                                  ;
 36253                                  ;---------------------------------------------------------------------------
 36254                                  
 36255                                  _$SetExtendedError:
 36256                                  
 36257                                  ;hkn; SS override for all variables used
 36258                                  
 36259 0000658B 8B04                    	mov	ax,[si]
 36260                                  	;MOV	AX,[SI+DPL.AX]
 36261 0000658D 36A3[2403]              	MOV	[SS:EXTERR],AX
 36262                                  	;mov	ax,[si+10]
 36263 00006591 8B440A                  	MOV	AX,[SI+DPL.DI]
 36264 00006594 36A3[2803]              	MOV	[SS:EXTERRPT],AX
 36265                                  	;mov	ax,[si+14]
 36266 00006598 8B440E                  	MOV	AX,[SI+DPL.ES]
 36267 0000659B 36A3[2A03]              	MOV	[SS:EXTERRPT+2],AX
 36268                                  	;mov	ax,[si+2]
 36269 0000659F 8B4402                  	MOV	AX,[SI+DPL.BX]
 36270 000065A2 36A3[2603]              	MOV	[SS:EXTERR_ACTION],AX
 36271                                  	;mov	ax,[si+4]
 36272 000065A6 8B4404                  	MOV	AX,[SI+DPL.CX]
 36273 000065A9 368826[2303]            	MOV	[SS:EXTERR_LOCUS],AH
 36274 000065AE C3                      	retn
 36275                                  
 36276                                  ;============================================================================
 36277                                  ; UTIL.ASM, MSDOS 6.0, 1991
 36278                                  ;============================================================================
 36279                                  ; 05/08/2018 - Retro DOS v3.0
 36280                                  ; 05/05/2019 - Retro DOS v4.0
 36281                                  
 36282                                  ;**	Handle related utilities for MSDOS 2.X.
 36283                                  ;----------------------------------------------------------------------------
 36284                                  ;	pJFNFromHandle	written
 36285                                  ;	SFFromHandle	written
 36286                                  ;	SFFromSFN	written
 36287                                  ;	JFNFree 	written
 36288                                  ;	SFNFree 	written
 36289                                  ;
 36290                                  ;	Modification history:
 36291                                  ;
 36292                                  ;	    Created: MZ 1 April 1983
 36293                                  ;----------------------------------------------------------------------------
 36294                                  
 36295                                  ;	BREAK	<pJFNFromHandle - return pointer to JFN table entry>
 36296                                  
 36297                                  ;**	pJFNFromHandle - Translate Handle to Pointer to JFN
 36298                                  ;----------------------------------------------------------------------------
 36299                                  ;	pJFNFromHandle takes a file handle and turns that into a pointer to
 36300                                  ;	the JFN entry (i.e., to a byte holding the internal file handle #)
 36301                                  ;
 36302                                  ;	NOTE:
 36303                                  ;	  This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 36304                                  ;	  at DOSINIT time with SS NOT DOSGROUP
 36305                                  ;
 36306                                  ;	ENTRY	(bx) = handle
 36307                                  ;	EXIT	'C' clear if ok
 36308                                  ;		  (es:di) = address of JFN value
 36309                                  ;		'C' set if error
 36310                                  ;		  (ax) = error code
 36311                                  ;	USES	AX, DI, ES, Flags
 36312                                  ;----------------------------------------------------------------------------
 36313                                  
 36314                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36315                                  
 36316                                  pJFNFromHandle:
 36317                                  	; 05/05/2019 - Retro DOS v4.0
 36318                                  	;getdseg <es>			; es -> dosdata
 36319 000065AF 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 36320                                  	
 36321                                  	;MOV	ES,[cs:CurrentPDB]	; get user process data block
 36322 000065B4 268E06[3003]            	mov	es,[es:CurrentPDB]
 36323                                  
 36324                                  	;cmp	bx,[ES:32h]
 36325 000065B9 263B1E3200              	CMP	BX,[ES:PDB.JFN_Length]	; is handle greater than allocated
 36326 000065BE 7204                    	JB	short pjfn10		; no, get offset
 36327                                  ReturnCarry_inv_hndl: ; 05/08/2018 - Retro DOS v3.0
 36328                                  	;mov	al,6
 36329 000065C0 B006                    	MOV     AL,error_invalid_handle ; appropriate error
 36330                                  ReturnCarry:
 36331 000065C2 F9                      	STC                             ; signal error
 36332 000065C3 C3                      	retn				; go back
 36333                                  pjfn10: 
 36334                                  	;les	di,[es:34h]
 36335 000065C4 26C43E3400              	LES	DI,[ES:PDB.JFN_Pointer]	; get pointer to beginning of table
 36336 000065C9 01DF                    	ADD	DI,BX			; add in offset, clear 'C'
 36337                                  	;clc
 36338                                  pJFNFromHandle_error:
 36339 000065CB C3                      	retn
 36340                                  
 36341                                  ;BREAK <SFFromHandle - return pointer (or error) to SF entry from handle>
 36342                                  ;----------------------------------------------------------------------------
 36343                                  ;
 36344                                  ; Procedure Name : SFFromHandle
 36345                                  ;
 36346                                  ; SFFromHandle - Given a handle, get JFN and then index into SF table
 36347                                  ;
 36348                                  ;   Input:      BX has handle
 36349                                  ;   Output:     Carry Set
 36350                                  ;                   AX has error code
 36351                                  ;               Carry Reset
 36352                                  ;                   ES:DI has pointer to SF entry
 36353                                  ;   Registers modified: If error, AX,ES, else ES:DI
 36354                                  ; NOTE:
 36355                                  ;   This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 36356                                  ;       at DOSINIT time with SS NOT DOSGROUP
 36357                                  ;
 36358                                  ;----------------------------------------------------------------------------
 36359                                  
 36360                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36361                                  
 36362                                  SFFromHandle:
 36363 000065CC E8E0FF                  	CALL	pJFNFromHandle		; get jfn pointer
 36364                                  	;retc				; return if error
 36365 000065CF 72FA                    	jc	short pJFNFromHandle_error
 36366 000065D1 26803DFF                	CMP     BYTE [ES:DI],-1		; unused handle
 36367                                  	;JNZ	short GetSF		; nope, suck out SF
 36368                                  	;;mov	al,6
 36369                                  	;MOV	AL,error_invalid_handle ; appropriate error
 36370                                  	;jmp	short ReturnCarry	; signal it
 36371                                  	; 17/12/2022
 36372                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36373 000065D5 74E9                    	jz	short ReturnCarry_inv_hndl ; Retro DOS v3.0 modification
 36374                                  	;JNZ	short GetSF		; nope, suck out SF
 36375                                  	;;mov	al,6
 36376                                  	;MOV	AL,error_invalid_handle ; appropriate error
 36377                                  	;jmp	short ReturnCarry	; signal it
 36378                                  GetSF:
 36379 000065D7 53                      	push	bx			; save handle
 36380 000065D8 268A1D                  	MOV     BL,[ES:DI]		; get SFN
 36381 000065DB 30FF                    	XOR     BH,BH                   ; ignore upper half
 36382 000065DD E80200                  	CALL    SFFromSFN               ; get real sf spot
 36383 000065E0 5B                      	pop	bx			; restore
 36384 000065E1 C3                      	retn                        	; say goodbye
 36385                                  
 36386                                  ;BREAK <SFFromSFN - index into SF table for SFN>
 36387                                  
 36388                                  ;**	SFFromSFN - Get an SF Table entry from an SFN
 36389                                  ;----------------------------------------------------------------------------
 36390                                  ;	SFFromSfn uses an SFN to index an entry into the SF table. This
 36391                                  ;	is more than just a simple index instruction because the SF table
 36392                                  ;	can be made up of multiple pieces chained together. We follow the
 36393                                  ;	chain to the right piece and then do the index operation.
 36394                                  ;
 36395                                  ;   NOTE:
 36396                                  ;	This routine is called from SFFromHandle which is called
 36397                                  ;       at DOSINIT time with SS NOT DOSGROUP
 36398                                  ;
 36399                                  ;	ENTRY	BX has SF index
 36400                                  ;	EXIT	'C' clear if OK
 36401                                  ;		  ES:DI points to SF entry
 36402                                  ;		'C' set if index too large
 36403                                  ;	USES	BX, DI, ES
 36404                                  ;----------------------------------------------------------------------------
 36405                                  
 36406                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36407                                  
 36408                                  SFFromSFN:
 36409                                  	; 05/05/2019 - Retro DOS v4.0
 36410                                  	;getdseg <es>			; es -> dosdata
 36411 000065E2 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 36412                                  
 36413                                  	;LES	DI,[CS:SFT_ADDR]	; (es:di) = start of SFT table
 36414 000065E7 26C43E[2A00]            	les	di,[es:SFT_ADDR]
 36415                                  sfsfn5:	
 36416                                  	;cmp	bx,[es:di+4]
 36417 000065EC 263B5D04                	CMP	BX,[ES:DI+SFT.SFCount]	; is handle in this table?
 36418 000065F0 720E                    	JB	short sfsfn7		; yes, go grab it
 36419                                  	;sub	bx,[es:di+4]
 36420 000065F2 262B5D04                	SUB     BX,[ES:DI+SFT.SFCount]
 36421 000065F6 26C43D                  	les	di,[es:di] ; 14/08/2018
 36422                                  	;LES	DI,[ES:DI+SFT.SFLink]	; get next table segment
 36423 000065F9 83FFFF                  	CMP     DI,-1                   ; end of tables?
 36424 000065FC 75EE                    	JNZ	short sfsfn5		; no, try again
 36425 000065FE F9                      	STC
 36426 000065FF C3                      	retn				; return with error, not found
 36427                                  sfsfn7:
 36428 00006600 50                      	push	ax
 36429                                  	;mov	ax,53 ; MSDOS 3.3
 36430                                  	;mov	ax,59 ; MSDOS 6.0
 36431                                  	;MOV	AX,SF_ENTRY.size	; put it in a nice place
 36432                                  	
 36433                                  	; 17/12/2022
 36434 00006601 B03B                    	mov	al,SF_ENTRY.size ; 28/05/2019
 36435                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36436                                  	;mov	ax,SF_ENTRY.size ; 59
 36437                                  	
 36438 00006603 F6E3                    	MUL	BL			; (ax) = offset into this SF block
 36439 00006605 01C7                    	ADD	DI,AX			; add base of SF block
 36440 00006607 58                      	pop	ax
 36441                                  	;add	di,6
 36442 00006608 83C706                  	ADD	DI,SFT.SFTable		; offset into structure, 'C' cleared
 36443 0000660B C3                      	retn				; return with 'C' clear
 36444                                  
 36445                                  ;	BREAK <JFNFree - return a jfn pointer if one is free>
 36446                                  
 36447                                  ;**	JFNFree - Find a Free JFN Slot
 36448                                  ;----------------------------------------------------------------------------
 36449                                  ;	JFNFree scansthrough the JFN table and returnsa pointer to a free slot
 36450                                  ;
 36451                                  ;	ENTRY	(ss) = DOSDATA
 36452                                  ;	EXIT	'C' clear if OK
 36453                                  ;		  (bx) = new handle
 36454                                  ;		  (es:di) = pointer to JFN slot
 36455                                  ;		'C' set if error
 36456                                  ;		  (al) = error code
 36457                                  ;	USES	bx, di, es, flags
 36458                                  ;----------------------------------------------------------------------------
 36459                                  
 36460                                  JFNFree:
 36461 0000660C 31DB                    	XOR	BX,BX			; (bx) = initial JFN to try
 36462                                  jfnf1:	
 36463 0000660E E89EFF                  	CALL	pJFNFromHandle		; get the appropriate handle
 36464 00006611 7209                    	JC	short jfnf5		; no more handles
 36465 00006613 26803DFF                	CMP     BYTE [ES:DI],-1		; free?
 36466 00006617 7405                    	je	short jfnfx		; yes, carry is clear
 36467 00006619 43                      	INC     BX                      ; no, next handle
 36468 0000661A EBF2                    	JMP	short jfnf1		; and try again
 36469                                  
 36470                                  	; Error. 'C' set
 36471                                  jfnf5:	
 36472                                  	;mov	al,4
 36473 0000661C B004                    	MOV	AL,error_too_many_open_files
 36474                                  jfnfx:	
 36475 0000661E C3                      	retn				; bye
 36476                                  
 36477                                  ;	BREAK <SFNFree - Allocate a free SFN>
 36478                                  
 36479                                  ;**	SFNFree - Allocate a Free SFN/SFT
 36480                                  ;----------------------------------------------------------------------------
 36481                                  ;	SFNFree scans through the sf table looking for a free entry
 36482                                  ;	If it finds one it partially allocates it by setting SFT_REF_COUNT = -1
 36483                                  ;
 36484                                  ;	The problem is that we want to mark the SFT busy so that other threads
 36485                                  ;	can't allocate the SFT before we're finished marking it up.  However,
 36486                                  ;	we can't just mark it busy because we may get blown out of our open
 36487                                  ;	by INT24 and leave the thing orphaned.	To solve this we mark it
 36488                                  ;	"allocation in progress" by setting SFT_REF_COUNT = -1.  If we see
 36489                                  ;	an SFT with this value we look to see if it belongs to this user
 36490                                  ;	and process.  If it does belong to us then it must be an orphan
 36491                                  ;	and we reclaim it.
 36492                                  ;
 36493                                  ;	BUGBUG - improve the performance. I guess it's smaller to call SFFromSFN
 36494                                  ;		over and over, but we could at least set a high water mark...
 36495                                  ;		cause an N^2 loop calling slow SFFromSFN is real slow, too slow
 36496                                  ;		even though this is not a frequently called routine - jgl
 36497                                  ;
 36498                                  ;	ENTRY	(ss) = DOSDATA
 36499                                  ;	EXIT	'C' clear if no error
 36500                                  ;		  (bx) = SFN
 36501                                  ;		  (es:di) = pointer to SFT
 36502                                  ;		  es:[di].SFT_REF_COUNT = -1
 36503                                  ;		'C' set if error
 36504                                  ;		  (al) = error code
 36505                                  ;	USES	bx, di, es, Flags
 36506                                  ;----------------------------------------------------------------------------
 36507                                  
 36508                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36509                                  	; DOSCODE:A682h (MSDOS 5.0 MSDOS.SYS)
 36510                                  
 36511                                  SFNFree:
 36512                                  	; 12/08/2018
 36513                                  	; 05/08/2018 - Retro DOS v3.0
 36514                                  	;
 36515                                  	; MSDOS 6.0
 36516 0000661F 50                      	push	ax
 36517 00006620 31DB                    	xor	bx,bx			; (bx) = SFN to consider
 36518                                  sfnf5:	
 36519 00006622 53                      	push	bx
 36520 00006623 E8BCFF                  	call	SFFromSFN		; get the potential handle
 36521 00006626 5B                      	pop	bx
 36522 00006627 723A                    	jc	short sfnf95		; no more free SFNs
 36523 00006629 26833D00                	cmp	word [ES:DI],0
 36524                                  	;cmp	word [ES:DI+SF_ENTRY.sf_Ref_Count],0 ; free?
 36525 0000662D 741D                    	je	short sfnf20			; yep, got one
 36526                                  	
 36527                                  	;cmp	word [es:di],0FFFFh ; -1
 36528 0000662F 26833DFF                	cmp	word [ES:DI],sf_busy
 36529                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 36530 00006633 7403                    	je	short sfnf10		; special busy mark
 36531                                  sfnf7:	
 36532 00006635 43                      	inc	bx			; try the next one
 36533 00006636 EBEA                    	jmp	short sfnf5
 36534                                  
 36535                                  ;	The SFT has the special "busy" mark; if it belongs to us then
 36536                                  ;	it was abandoned during a earlier call and we can use it.
 36537                                  ;
 36538                                  ;	(bx)	= SFN
 36539                                  ;	(es:di) = pointer to SFT
 36540                                  ;	(TOS)	= caller's (ax)
 36541                                  
 36542                                  sfnf10:	
 36543 00006638 36A1[3E03]              	mov	ax,[SS:USER_ID]
 36544                                  	;cmp	[es:di+2Fh],ax
 36545 0000663C 2639452F                	cmp	[ES:DI+SF_ENTRY.sf_UID],ax
 36546 00006640 75F3                    	jnz	short sfnf7		; not ours
 36547 00006642 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 36548                                  	;cmp	[es:di+31h],ax
 36549 00006646 26394531                	cmp	[ES:DI+SF_ENTRY.sf_PID],ax
 36550 0000664A 75E9                    	jnz	short sfnf7		; can't use this one, try the next
 36551                                  
 36552                                  ;	We have an SFT to allocate
 36553                                  ;
 36554                                  ;	(bx)	= SFN
 36555                                  ;	(es:di) = pointer to SFT
 36556                                  ;	(TOS)	= caller's (ax)
 36557                                  
 36558                                  sfnf20:
 36559                                  	; cf = 0 ;; Retro DOS v3.0
 36560                                  
 36561                                  	;mov	word [es:di],0FFFFh
 36562 0000664C 26C705FFFF              	mov	word [ES:DI],sf_busy
 36563                                  					; make sure that this is allocated
 36564                                  	;mov	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 36565                                  
 36566 00006651 36A1[3E03]              	mov	ax,[SS:USER_ID]
 36567                                  	;mov	[es:di+2Fh],ax
 36568 00006655 2689452F                	mov	[ES:DI+SF_ENTRY.sf_UID],ax
 36569 00006659 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 36570                                  	;mov	[es:di+31h],ax
 36571 0000665D 26894531                	mov	[ES:DI+SF_ENTRY.sf_PID],ax
 36572                                  sfnf21: ;; Retro DOS v3.0
 36573                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36574                                  	;pop	ax
 36575                                  	;;clc
 36576                                  	;retn				; return with no error
 36577                                  	; 17/12/2022
 36578 00006661 58                      	pop	ax
 36579                                  	;clc
 36580 00006662 C3                      	retn
 36581                                  
 36582                                  ;**	Error - no more free SFNs
 36583                                  ;
 36584                                  ;	'C' set
 36585                                  ;	(TOS) = saved ax
 36586                                  
 36587                                  sfnf95: 
 36588 00006663 58                      	pop	ax
 36589                                  	;mov	al,4
 36590 00006664 B004                    	mov	al,error_too_many_open_files
 36591 00006666 C3                      	retn				; return with 'C' and error
 36592                                  
 36593                                  ;============================================================================
 36594                                  ; HANDLE.ASM, MSDOS 6.0, 1991
 36595                                  ;============================================================================
 36596                                  ; 13/07/2018 - Retro DOS v3.0
 36597                                  ; 20/05/2019 - Retro DOS v4.0
 36598                                  
 36599                                  ; DOSCODE:A72Bh (MSDOS 6.21, MSDOS.SYS)
 36600                                  
 36601                                  ;	BREAK <$Close - return a handle to the system>
 36602                                  ;----------------------------------------------------------------------------
 36603                                  ;
 36604                                  ;**	$Close - Close a file Handle
 36605                                  ;
 36606                                  ;	BUGBUG - close gets called a LOT with invalid handles - sizzle that
 36607                                  ;		path
 36608                                  ;
 36609                                  ;	Assembler usage:
 36610                                  ;	    MOV     BX, handle
 36611                                  ;	    MOV     AH, Close
 36612                                  ;	    INT     int_command
 36613                                  ;
 36614                                  ;	ENTRY	(bx) = handle
 36615                                  ;	EXIT	<normal INT21 return convention>
 36616                                  ;	USES	all
 36617                                  ;
 36618                                  ;----------------------------------------------------------------------------
 36619                                  
 36620                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36621                                  ; DOSCODE:A6CBh (MSDOS 5.0 MSDOS.SYS)
 36622                                  
 36623                                  _$CLOSE:
 36624                                  ;	Grab the SFT pointer from the JFN.
 36625                                  
 36626 00006667 E85A02                  	call	CheckOwner		; get system file entry
 36627 0000666A 722B                    	jc	short CloseError	; error return
 36628 0000666C 16                      	push	ss
 36629 0000666D 1F                      	pop	ds			; For DOS_CLOSE
 36630 0000666E 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 36631 00006672 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 36632                                  
 36633                                  ; DS:SI point to JFN table entry.
 36634                                  ; ES:DI point to SFT
 36635                                  ;
 36636                                  ; We now examine the user's JFN entry; If the file was a 70-mode file (network
 36637                                  ; FCB, we examine the ref count on the SFT;  if it was 1, we free the JFN.
 36638                                  ; If the file was not a net FCB, we free the JFN too.
 36639                                  
 36640                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],1
 36641 00006676 26833D01                	cmp	word [ES:DI],1		; will the SFT become free?
 36642 0000667A 740A                    	jz	short FreeJFN 		; yes, free JFN anyway.
 36643                                  	;mov	al,[ES:DI+2]
 36644 0000667C 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 36645                                  	;and	al,0F0h
 36646 00006680 24F0                    	AND	AL,SHARING_MASK
 36647                                  	;cmp	al,70h
 36648 00006682 3C70                    	CMP	AL,SHARING_NET_FCB
 36649 00006684 7407                    	JZ	short PostFree		; 70-mode and big ref count => free it
 36650                                  
 36651                                  ; The JFN must be freed.  Get the pointer to it and replace the contents with
 36652                                  ; -1.
 36653                                  
 36654                                  FreeJFN:
 36655 00006686 E826FF                  	call	pJFNFromHandle		;   d = pJFN (handle);
 36656 00006689 26C605FF                	MOV	BYTE [ES:DI],0FFh	; release the JFN
 36657                                  PostFree:
 36658                                  
 36659                                  ; ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_CLOSE!
 36660                                  
 36661 0000668D E81EC8                  	call	DOS_CLOSE
 36662                                  
 36663                                  ; DOS_Close may return an error. If we see such an error, we report it but
 36664                                  ; the JFN stays closed because DOS_Close always frees the SFT!
 36665                                  
 36666 00006690 7205                    	JC	short CloseError
 36667                                  	;mov	ah,3Eh
 36668 00006692 B43E                    	MOV	AH,CLOSE		; MZ Bogus multiplan fix
 36669                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36670                                  CloseOk:
 36671 00006694 E9A09F                  	jmp	SYS_RET_OK
 36672                                  CloseError:
 36673 00006697 E9A69F                  	jmp	SYS_RET_ERR
 36674                                  
 36675                                  ;	BREAK <$Commit - commit the file>
 36676                                  ;----------------------------------------------------------------------------
 36677                                  ;
 36678                                  ;**	$Commit - Commit a File
 36679                                  ;
 36680                                  ;	$Commit "commits" a file to disk - all of it's buffers are
 36681                                  ;	flushed out.  BUGBUG - I'm pretty sure that $Commit doesn't update
 36682                                  ;	the directory entry, etc., so this commit is pretty useless. check
 36683                                  ;	and fix this!! jgl
 36684                                  ;
 36685                                  ;	Assembler usage:
 36686                                  ;	    MOV     BX, handle
 36687                                  ;	    MOV     AH, Commit
 36688                                  ;	    INT     int_command
 36689                                  ;
 36690                                  ;	ENTRY	(bx) = handle
 36691                                  ;	EXIT	none
 36692                                  ;	USES	all
 36693                                  ;;----------------------------------------------------------------------------
 36694                                  
 36695                                  _$COMMIT:
 36696                                  ;	Grab the SFT pointer from the JFN.
 36697                                  
 36698 0000669A E82702                  	call	CheckOwner		; get system file entry
 36699 0000669D 7213                    	JC	short CommitError	; error return
 36700 0000669F 16                      	push	ss
 36701 000066A0 1F                      	pop	ds			; For DOS_COMMIT
 36702 000066A1 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 36703 000066A5 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 36704                                  
 36705                                  ;	ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_COMMIT
 36706                                  ;
 36707                                  ;	ES:DI point to SFT
 36708                                  
 36709 000066A9 E844C9                  	call	DOS_COMMIT
 36710 000066AC 7204                    	JC	short CommitError
 36711                                  	; 07/12/2022
 36712                                  	;jc	short CloseError
 36713                                  	;mov	ah,68h
 36714 000066AE B468                    	MOV	AH,COMMIT
 36715                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36716                                  	;jmp	SYS_RET_OK
 36717                                  CommitOk:
 36718 000066B0 EBE2                    	jmp	short CloseOk	
 36719                                  
 36720                                  CommitError:
 36721                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36722                                  	;jmp	SYS_RET_ERR
 36723 000066B2 EBE3                    	jmp	short CloseError
 36724                                  
 36725                                  ;	BREAK <$ExtHandle - extend handle count>
 36726                                  
 36727                                  ;**	$ExtHandle - Extend Handle Count
 36728                                  ;----------------------------------------------------------------------------
 36729                                  ;	Assembler usage:
 36730                                  ;	    MOV     BX, Number of Opens Allowed (MAX=65534;66535 is
 36731                                  ;	    MOV     AX, 6700H			 reserved to mark SFT
 36732                                  ;	    INT     int_command 		 busy )
 36733                                  ;
 36734                                  ;	ENTRY	(bx) = new number of handles
 36735                                  ;	EXIT	'C' clear if OK
 36736                                  ;		'C' set iff err
 36737                                  ;		  (ax) = error code
 36738                                  ;			 AX = error_not_enough_memory
 36739                                  ;			      error_too_many_open_files
 36740                                  ;	USES	all
 36741                                  ;----------------------------------------------------------------------------
 36742                                  
 36743                                  _$ExtHandle:
 36744 000066B4 31ED                    	XOR	BP,BP			; 0: enlarge   1: shrink  2:psp
 36745                                  	;cmp	bx,20
 36746 000066B6 83FB14                  	CMP	BX,FILPERPROC
 36747 000066B9 7303                    	JAE	short exth2		; Don't set less than FilPerProc no
 36748 000066BB BB1400                  	MOV	BX,FILPERPROC
 36749                                  exth2:	
 36750 000066BE 368E06[3003]            	MOV	ES,[ss:CurrentPDB]	; get user process data block;smr;SS Override
 36751                                  	;mov	cx,[ES:32h]
 36752 000066C3 268B0E3200              	MOV	CX,[ES:PDB.JFN_Length]	; get number of handle allowed
 36753 000066C8 39CB                    	CMP	BX,CX			; the requested == current
 36754 000066CA 7455                    	JE	short ok_done 		; yes and exit
 36755 000066CC 7722                    	JA	short larger		; go allocate new table
 36756                                  
 36757                                  ;	We're going to shrink the # of handles available
 36758                                  
 36759 000066CE BD0100                  	MOV	BP,1			; shrink
 36760                                  	;mov	ds,[ES:36h]
 36761 000066D1 268E1E3600              	MOV	DS,[ES:PDB.JFN_Pointer+2] ;
 36762 000066D6 89DE                    	MOV	SI,BX			;
 36763 000066D8 29D9                    	SUB	CX,BX			; get difference
 36764                                  
 36765                                  ;	BUGBUG - code a SCASB here, should be a bit smaller
 36766                                  chck_handles:
 36767 000066DA 803CFF                  	CMP	BYTE [SI],-1		; scan through handles to ensure close
 36768 000066DD 753D                    	JNZ	short too_many_files	; status
 36769 000066DF 46                      	INC	SI
 36770 000066E0 E2F8                    	LOOP	chck_handles
 36771 000066E2 83FB14                  	CMP	BX,FILPERPROC		; = 20
 36772 000066E5 7709                    	JA	short larger		; no
 36773                                  
 36774 000066E7 BD0200                  	MOV	BP,2			; psp
 36775                                  	;mov	di,24
 36776 000066EA BF1800                  	MOV	DI,PDB.JFN_TABLE	; es:di -> jfn table in psp
 36777 000066ED 53                      	PUSH	BX
 36778 000066EE EB1D                    	JMP	short movhandl
 36779                                  
 36780                                  larger:
 36781 000066F0 83FBFF                  	CMP	BX,-1			; 65535 is not allowed
 36782 000066F3 747F                    	JZ	short invalid_func	; 10/08/2018
 36783 000066F5 F8                      	CLC
 36784 000066F6 53                      	PUSH	BX			; save requested number
 36785 000066F7 83C30F                  	ADD	BX,0FH			; adjust to paragraph boundary
 36786 000066FA B104                    	MOV	CL,4
 36787                                  	;ror	bx,cl			; MSDOS 3.3
 36788 000066FC D3DB                    	RCR	BX,CL			; DOS 4.00 fix		;AC000;
 36789 000066FE 81E3FF1F                	AND	BX,1FFFH		; clear most 3 bits
 36790                                  
 36791 00006702 55                      	PUSH	BP
 36792 00006703 E8DCFA                  	call	_$ALLOC			; allocate memory
 36793 00006706 5D                      	POP	BP
 36794 00006707 7266                    	JC	short no_memory		; not enough meory
 36795                                  
 36796 00006709 8EC0                    	MOV	ES,AX			; es:di points to new table memory
 36797 0000670B 31FF                    	XOR	DI,DI
 36798                                  movhandl:
 36799 0000670D 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user PDB address	;smr;SS Override
 36800                                  
 36801 00006712 F7C50300                	test	BP,3			; enlarge ?
 36802 00006716 740C                    	JZ	short enlarge 		; yes
 36803 00006718 59                      	POP	CX			; cx = the amount you shrink
 36804 00006719 51                      	PUSH	CX
 36805 0000671A EB0C                    	JMP	short copy_hand
 36806                                  
 36807                                  ;	Done.  'C' clear
 36808                                  
 36809                                  ; 17/12/2022
 36810                                  ;ok_done:
 36811                                  ;	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36812                                  ;	;jmp	short CommitOk
 36813                                  ;	; 17/12/2022
 36814                                  ;	jmp	SYS_RET_OK
 36815                                  
 36816                                  too_many_files:
 36817                                  	;mov	al,4
 36818 0000671C B004                    	MOV	AL,error_too_many_open_files
 36819                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36820                                  	;jmp	SYS_RET_ERR
 36821                                  CommitErrorj:
 36822                                  	;jmp	short CommitError
 36823                                  	; 17/12/2022
 36824 0000671E E91F9F                  	jmp	SYS_RET_ERR
 36825                                  
 36826                                  ; 17/12/2022 
 36827                                  ok_done:
 36828                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36829                                  	;jmp	short CommitOk
 36830                                  	; 17/12/2022
 36831 00006721 E9139F                  	jmp	SYS_RET_OK
 36832                                  
 36833                                  enlarge:
 36834                                  	;mov	cx,[32h]
 36835 00006724 8B0E3200                	MOV	CX,[PDB.JFN_Length]	; get number of old handles
 36836                                  copy_hand:
 36837 00006728 89CA                    	MOV	DX,CX
 36838                                  	;lds	si,[34h]
 36839 0000672A C5363400                	LDS	SI,[PDB.JFN_Pointer]	; get old table pointer
 36840 0000672E F3A4                    	REP	MOVSB			; copy infomation to new table
 36841 00006730 59                      	POP	CX			; get new number of handles
 36842 00006731 51                      	PUSH	CX			; save it again
 36843 00006732 29D1                    	SUB	CX,DX			; get the difference
 36844 00006734 B0FF                    	MOV	AL,-1			; set availability to handles
 36845 00006736 F3AA                    	REP	STOSB
 36846 00006738 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user process data block;smr;SS Override
 36847                                  	;cmp	word [34h],0
 36848 0000673D 833E340000              	CMP	WORD [PDB.JFN_Pointer],0 ; check if original table pointer
 36849 00006742 750D                    	JNZ	short update_info	; yes, go update PDB entries
 36850 00006744 55                      	PUSH	BP
 36851 00006745 1E                      	PUSH	DS			; save old table segment
 36852 00006746 06                      	PUSH	ES			; save new table segment
 36853 00006747 8E063600                	MOV	ES,[PDB.JFN_Pointer+2]	; get old table segment
 36854 0000674B E80EFC                  	call	_$DEALLOC		; deallocate old table meomory
 36855 0000674E 07                      	POP	ES			; restore new table segment
 36856 0000674F 1F                      	POP	DS			; restore old table segment
 36857 00006750 5D                      	POP	BP
 36858                                  
 36859                                  update_info:
 36860 00006751 F7C50200                	test	BP,2			; psp?
 36861 00006755 7408                    	JZ	short non_psp 		; no
 36862                                  	;mov	word [34h],18h ; 24
 36863 00006757 C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE ; restore
 36864 0000675D EB06                    	JMP	short final
 36865                                  non_psp:
 36866                                  	;mov	word [34h],0
 36867 0000675F C70634000000            	MOV	WORD [PDB.JFN_Pointer],0 ; new table pointer offset always 0
 36868                                  final:
 36869                                  	;mov	[36h],es	
 36870 00006765 8C063600                	MOV	[PDB.JFN_Pointer+2],ES	; update table pointer segment
 36871                                  	;pop	word [32h]
 36872 00006769 8F063200                	POP	word [PDB.JFN_Length]	; restore new number of handles
 36873                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36874                                  	;jmp	SYS_RET_OK
 36875                                  ok_done_j:
 36876 0000676D EBB2                    	jmp	short ok_done
 36877                                  
 36878                                  no_memory:
 36879 0000676F 5B                      	POP	BX			; clean stack
 36880                                  	;mov	al,8
 36881 00006770 B008                    	MOV	AL,error_not_enough_memory
 36882                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36883                                  	;jmp	SYS_RET_ERR
 36884                                  CommitErrorj2:
 36885 00006772 EBAA                    	jmp	short CommitErrorj
 36886                                  
 36887                                  invalid_func:
 36888                                  	;mov	al,1
 36889 00006774 B001                    	MOV	AL,error_invalid_function
 36890                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36891                                  	;jmp	SYS_RET_ERR
 36892                                  CommitErrorj3:
 36893                                  	;jmp	short CommitErrorj2
 36894                                  	; 17/12/2022
 36895 00006776 EBA6                    	jmp	short CommitErrorj
 36896                                  
 36897                                  ; 20/05/2019 - Retro DOS v4.0
 36898                                  ; DOSCODE:A83Ah (MSDOS 6.21, MSDOS.SYS)
 36899                                  
 36900                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36901                                  ; DOSCODE:A7DAh (MSDOS 5.0 MSDOS.SYS)
 36902                                  
 36903                                  ;	BREAK <$READ - Read from a file handle>
 36904                                  ;----------------------------------------------------------------------------
 36905                                  ;
 36906                                  ;**	$Read - Read from a File Handle
 36907                                  ;
 36908                                  ;   Assembler usage:
 36909                                  ;
 36910                                  ;	LDS	DX, buf
 36911                                  ;	MOV	CX, count
 36912                                  ;	MOV	BX, handle
 36913                                  ;	MOV	AH, Read
 36914                                  ;	INT	int_command
 36915                                  ;	  AX has number of bytes read
 36916                                  ;
 36917                                  ;	ENTRY	(bx) = file handle
 36918                                  ;		(cx) = byte count
 36919                                  ;		(ds:dx) = buffer address
 36920                                  ;	EXIT	Through system call return so that to user:
 36921                                  ;		  'C' clear if OK
 36922                                  ;		    (ax) = bytes read
 36923                                  ;		  'C' set if error
 36924                                  ;		    (ax) = error code
 36925                                  ;
 36926                                  ;----------------------------------------------------------------------------
 36927                                  
 36928                                  _$READ:
 36929 00006778 BE[4232]                	MOV	SI,DOS_READ
 36930                                  ReadDo:
 36931 0000677B E831FE                  	call	pJFNFromHandle
 36932 0000677E 7208                    	JC	short ReadError
 36933                                  
 36934 00006780 268A05                  	MOV	AL,[ES:DI]
 36935 00006783 E83E01                  	call	CheckOwner		; get the handle
 36936 00006786 7303                    	JNC	short ReadSetup		; no errors do the operation
 36937                                  
 36938                                  ;	Have an error. 'C' set
 36939                                  
 36940                                  ReadError:
 36941                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36942                                  	;;jmp	SYS_RET_ERR		; go to error traps
 36943                                  	;jmp	short CommitErrorj3
 36944                                  	; 17/12/2022
 36945 00006788 E9B59E                  	jmp	SYS_RET_ERR
 36946                                  
 36947                                  ReadSetup:
 36948 0000678B 36893E[9E05]            	MOV	[ss:THISSFT],DI		; save offset of pointer;smr;SS Override
 36949 00006790 368C06[A005]            	MOV	[ss:THISSFT+2],ES	; save segment value	;smr;SS Override
 36950                                  	; 20/05/2019 - Retro DOS v4.0
 36951                                  	; MSDOS 6.0 
 36952                                  ;; Extended Open
 36953                                  	;test	byte [es:di+3],20h
 36954 00006795 26F6450320              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(INT_24_ERROR>>8)
 36955                                  						 ;AN000;;EO. need i24
 36956 0000679A 7406                    	JZ	short needi24 		     	 ;AN000;;EO. yes
 36957 0000679C 36800E[F605]02          	OR	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 36958                                  					;AN000;;EO. set it off;smr;SS Override
 36959                                  needi24:				;AN000;
 36960                                  ;; Extended Open
 36961 000067A2 36FF36[2C03]            	push	word [SS:DMAADD]
 36962 000067A7 36FF36[2E03]            	push	word [SS:DMAADD+2]	;smr;SS Override
 36963                                  
 36964                                  ;;;;;	BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 36965                                  
 36966                                  	; 26/07/2019
 36967                                  
 36968                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36969                                  	;
 36970                                  	; (It is not necessary to call 'Align_Buffer' proc here/below because
 36971                                  	; there is not another caller; it is better to put the code in this proc
 36972                                   	; here instead of calling it as a subroutine; but I have modified code
 36973                                  	; here for MSDOS 5.0 MSDOS.SYS address compatibility)
 36974                                  
 36975                                  	; MSDOS 6.0
 36976 000067AC E81300                  	CALL	Align_Buffer		;AN000;MS. align user's buffer
 36977                                  	
 36978                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36979                                  	; MSDOS 3.3
 36980                                  	;MOV	BX,DX			; copy offset
 36981                                  	;push	cx			; don't stomp on count
 36982                                  	;MOV	CL,4			; bits to shift bytes->para
 36983                                  	;SHR	BX,CL			; get number of paragraphs
 36984                                  	;pop	cx			; get count back
 36985                                  	;MOV	AX,DS			; get original segment
 36986                                  	;ADD	AX,BX			; get new segment
 36987                                  	;MOV	DS,AX			; in seg register
 36988                                  	;AND	DX,0Fh			; normalize offset
 36989                                  	;MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36990                                  	;MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36991                                  						;smr;SS Override
 36992                                  ;;;;;	END BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 36993                                  	
 36994 000067AF 16                      	push	ss			; go for DOS addressability
 36995 000067B0 1F                      	pop	ds
 36996                                  
 36997 000067B1 FFD6                    	CALL	SI ; DOS_READ		; indirect call to operation
 36998                                  
 36999 000067B3 8F06[2E03]              	pop	word [DMAADD+2]
 37000 000067B7 8F06[2C03]              	pop	word [DMAADD]
 37001                                  	;JNC	short READ_OK		;AN002;
 37002                                  	;JMP	short ReadError		;AN002; if error, say bye bye
 37003                                  	; 17/12/2022
 37004 000067BB 72CB                    	jc	short ReadError
 37005                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37006                                  	;jnc	short READ_OK		;AN002;
 37007                                  	;jmp	short ReadError
 37008                                  
 37009                                  READ_OK:
 37010 000067BD 89C8                    	MOV	AX,CX			; get correct return in correct reg
 37011                                  Read_Okj:
 37012                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37013                                  	;;jmp	SYS_RET_OK		; successful return
 37014                                  	;jmp	short ok_done_j
 37015                                  	; 17/12/2022
 37016 000067BF E9759E                  	jmp	SYS_RET_OK
 37017                                  
 37018                                  ; 13/07/2018 - Retro DOS v3.0
 37019                                  
 37020                                  ;----------------------------------------------------------------------------
 37021                                  
 37022                                  ;   Input: DS:DX points to user's buffer addr
 37023                                  ;   Function: rearrange segment and offset for READ/WRITE buffer
 37024                                  ;   Output: [DMAADD] set
 37025                                  
 37026                                  ; 20/05/2019 - Retro DOS v4.0
 37027                                  ; 26/07/2019
 37028                                  ;	; MSDOS 6.0
 37029                                  ;Align_Buffer:
 37030                                  ;	MOV	BX,DX			; copy offset
 37031                                  ;	push	cx			; don't stomp on count
 37032                                  ;	MOV	CL,4			; bits to shift bytes->para
 37033                                  ;	SHR	BX,CL			; get number of paragraphs
 37034                                  ;	pop	cx			; get count back
 37035                                  ;	MOV	AX,DS			; get original segment
 37036                                  ;	ADD	AX,BX			; get new segment
 37037                                  ;	MOV	DS,AX			; in seg register
 37038                                  ;	AND	DX,0Fh			; normalize offset
 37039                                  ;	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 37040                                  ;	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 37041                                  ;						;smr;SS Override
 37042                                  ;	retn
 37043                                  
 37044                                  ; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37045                                  Align_Buffer:
 37046 000067C2 89D3                    	MOV	BX,DX			; copy offset
 37047 000067C4 51                      	push	cx			; don't stomp on count
 37048 000067C5 B104                    	MOV	CL,4			; bits to shift bytes->para
 37049 000067C7 D3EB                    	SHR	BX,CL			; get number of paragraphs
 37050 000067C9 59                      	pop	cx			; get count back
 37051 000067CA 8CD8                    	MOV	AX,DS			; get original segment
 37052 000067CC 01D8                    	ADD	AX,BX			; get new segment
 37053 000067CE 8ED8                    	MOV	DS,AX			; in seg register
 37054 000067D0 83E20F                  	AND	DX,0Fh			; normalize offset
 37055 000067D3 368916[2C03]            	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 37056 000067D8 368C1E[2E03]            	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 37057                                  						;smr;SS Override
 37058 000067DD C3                      	retn
 37059                                  
 37060                                  ; 20/05/2019 - Retro DOS v4.0
 37061                                  ; DOSCODE:A8A0h (MSDOS 6.21, MSDOS.SYS)
 37062                                  
 37063                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37064                                  ; DOSCODE:A840h (MSDOS 5.0 MSDOS.SYS)
 37065                                  
 37066                                  ;BREAK <$WRITE - write to a file handle>
 37067                                  ;----------------------------------------------------------------------------
 37068                                  ;
 37069                                  ;   Assembler usage:
 37070                                  ;	    LDS     DX, buf
 37071                                  ;	    MOV     CX, count
 37072                                  ;	    MOV     BX, handle
 37073                                  ;	    MOV     AH, Write
 37074                                  ;	    INT     int_command
 37075                                  ;	  AX has number of bytes written
 37076                                  ;   Errors:
 37077                                  ;	    AX = write_invalid_handle
 37078                                  ;	       = write_access_denied
 37079                                  ;
 37080                                  ;   Returns in register AX
 37081                                  ;
 37082                                  ;----------------------------------------------------------------------------
 37083                                  
 37084                                  _$WRITE:
 37085 000067DE BE[5534]                	MOV	SI,DOS_WRITE
 37086 000067E1 EB98                    	JMP	short ReadDo
 37087                                  
 37088                                  ;BREAK <$LSEEK - move r/w pointer>
 37089                                  ;----------------------------------------------------------------------------
 37090                                  ;
 37091                                  ;   Assembler usage:
 37092                                  ;	    MOV     DX, offsetlow
 37093                                  ;	    MOV     CX, offsethigh
 37094                                  ;	    MOV     BX, handle
 37095                                  ;	    MOV     AL, method
 37096                                  ;	    MOV     AH, LSeek
 37097                                  ;	    INT     int_command
 37098                                  ;	  DX:AX has the new location of the pointer
 37099                                  ;   Error returns:
 37100                                  ;	    AX = error_invalid_handle
 37101                                  ;	       = error_invalid_function
 37102                                  ;   Returns in registers DX:AX
 37103                                  ;
 37104                                  ;----------------------------------------------------------------------------
 37105                                  
 37106                                  ; 21/05/2019 - Retro DOS v4.0
 37107                                  ; DOSCODE:A8A5h (MSDOS 6.21, MSDOS.SYS)
 37108                                  
 37109                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37110                                  ; DOSCODE:A845h (MSDOS 5.0 MSDOS.SYS)
 37111                                  
 37112                                  _$LSEEK:
 37113 000067E3 E8DE00                  	call	CheckOwner		; get system file entry
 37114                                  
 37115                                  	; 17/12/2022
 37116                                  ;LSeekError:
 37117                                  	;JNC	short CHKOWN_OK		;AN002;
 37118                                  	;JMP	short ReadError		;AN002; error return
 37119                                  	; 17/12/2022
 37120                                  	; 02/06/2019
 37121 000067E6 72A0                    	jc	short ReadError
 37122                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37123                                  	;JNC	short CHKOWN_OK		;AN002;
 37124                                  	;JMP	short ReadError		;AN002; error return
 37125                                  
 37126                                  CHKOWN_OK:
 37127                                  					;AN002;
 37128 000067E8 3C02                    	CMP	AL,2			; is the seek value correct?
 37129 000067EA 760A                    	JBE	short LSeekDisp		; yes, go dispatch
 37130                                  	;mov	byte [ss:EXTERR_LOCUS],1 
 37131 000067EC 36C606[2303]01          	MOV	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 37132                                  					;smr;SS Override
 37133                                  	;mov	al,1
 37134 000067F2 B001                    	mov	al,error_invalid_function ; invalid method
 37135                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37136                                  LSeekError2:
 37137 000067F4 EB92                    	jmp	short ReadError
 37138                                  
 37139                                  LSeekDisp:
 37140 000067F6 3C01                    	CMP	AL,1			; best way to dispatch; check middle
 37141 000067F8 720A                    	JB	short LSeekStore	; just store CX:DX
 37142 000067FA 771B                    	JA	short LSeekEOF		; seek from end of file
 37143                                  	;add	dx,[es:di+21]
 37144 000067FC 26035515                	ADD	DX,[ES:DI+SF_ENTRY.sf_position]
 37145                                  	;adc	cx,[es:di+23]
 37146 00006800 26134D17                	ADC	CX,[ES:DI+SF_ENTRY.sf_position+2]
 37147                                  LSeekStore:
 37148 00006804 89C8                    	MOV	AX,CX			; AX:DX
 37149 00006806 92                      	XCHG	AX,DX			; DX:AX is the correct value
 37150                                  LSeekSetpos:
 37151                                  	;mov	[es:di+21],ax
 37152 00006807 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 37153                                  	;mov	[es:di+23],dx
 37154 0000680B 26895517                	MOV	[ES:DI+SF_ENTRY.sf_position+2],DX
 37155 0000680F E86F9C                  	call	Get_User_Stack
 37156                                  	;mov	[si+6],dx
 37157 00006812 895406                  	MOV	[SI+user_env.user_DX],DX ; return DX:AX
 37158                                  	;jmp	SYS_RET_OK		; successful return
 37159                                  	; 25/06/2019
 37160                                  	;jmp	SYS_RET_OK_clc
 37161                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37162                                  	;jmp	SYS_RET_OK_clc
 37163                                  LSeekOk:
 37164 00006815 EBA8                    	jmp     short Read_Okj
 37165                                  
 37166                                  LSeekEOF:
 37167                                  	;;test	word [es:di+5],8000h
 37168                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 37169                                  	; 21/05/2019 - Retro DOS v4.0
 37170 00006817 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 37171 0000681C 750A                    	JNZ	short Check_LSeek_Mode	; Is Net
 37172                                  LOCAL_LSeek:
 37173                                  	;add	dx,[es:di+17]
 37174 0000681E 26035511                	ADD	DX,[ES:DI+SF_ENTRY.sf_size]
 37175                                  	;adc	cx,[es:di+19]
 37176 00006822 26134D13                	ADC	CX,[ES:DI+SF_ENTRY.sf_size+2]
 37177 00006826 EBDC                    	JMP	short LSeekStore	; go and set the position
 37178                                  
 37179                                  Check_LSeek_Mode:
 37180                                  	;;test	word [es:di+2],8000h
 37181                                  	;test	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 37182                                  	; 21/05/2019
 37183 00006828 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 37184 0000682D 75EF                    	JNZ	short LOCAL_LSeek	; FCB treated like local file
 37185                                  	;mov	ax,[es:di+2]
 37186 0000682F 268B4502                	MOV	AX,[ES:DI+SF_ENTRY.sf_mode]
 37187                                  	;and	ax, 0F0h
 37188 00006833 25F000                  	AND	AX,SHARING_MASK
 37189                                  	;cmp	ax,40h
 37190 00006836 83F840                  	CMP	AX,SHARING_DENY_NONE
 37191 00006839 7405                    	JZ	short NET_LSEEK		; LSEEK exported in this mode
 37192                                  	;cmp	ax,30h
 37193 0000683B 83F830                  	CMP	AX,SHARING_DENY_READ
 37194 0000683E 75DE                    	JNZ	short LOCAL_LSeek	; Treated like local Lseek
 37195                                  NET_LSEEK:
 37196                                  ;	JMP	short LOCAL_LSeek
 37197                                  ; REMOVE ABOVE INSTRUCTION TO ENABLE DCR 142
 37198                                  	;CallInstall Net_Lseek,MultNET,33
 37199                                  	;JNC	short LSeekSetPos
 37200                                  
 37201 00006840 B82111                  	mov     ax,1121h
 37202 00006843 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SEEK FROM END OF REMOTE FILE
 37203                                  			; CX:DX = offset (in bytes) from end
 37204                                  			; ES:DI -> SFT, SFT DPB field -> DPB of drive with file
 37205                                  			; SS = DOS CS
 37206                                  			; Return: CF set on error
 37207                                  			; CF clear if successful, DX:AX = new file position
 37208 00006845 73C0                    	jnb     short LSeekSetpos
 37209                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37210                                  	;jmp	SYS_RET_ERR
 37211                                  ;LSeekError3:
 37212                                  	; 17/12/2022
 37213                                  LSeekError:
 37214                                  	;jmp	short LSeekError2
 37215                                  DupErr:	; 17/12/2022
 37216 00006847 E9F69D                  	jmp	SYS_RET_ERR
 37217                                  
 37218                                  ;BREAK <FileTimes - modify write times on a handle>
 37219                                  ;----------------------------------------------------------------------------
 37220                                  ;
 37221                                  ;   Assembler usage:
 37222                                  ;	    MOV AH, FileTimes (57H)
 37223                                  ;	    MOV AL, func
 37224                                  ;	    MOV BX, handle
 37225                                  ;	; if AL = 1 then then next two are mandatory
 37226                                  ;	    MOV CX, time
 37227                                  ;	    MOV DX, date
 37228                                  ;	    INT 21h
 37229                                  ;	; if AL = 0 then CX/DX has the last write time/date
 37230                                  ;	; for the handle.
 37231                                  ;
 37232                                  ;	AL=02		 get extended attributes
 37233                                  ;	   BX=handle
 37234                                  ;	   CX=size of buffer (0, return max size )
 37235                                  ;	   DS:SI query list (si=-1, selects all EA)
 37236                                  ;	   ES:DI buffer to hold EA list
 37237                                  ;
 37238                                  ;	AL=03		 get EA name list
 37239                                  ;	   BX=handle
 37240                                  ;	   CX=size of buffer (0, return max size )
 37241                                  ;	   ES:DI buffer to hold name list
 37242                                  ;
 37243                                  ;	AL=04		 set extended attributes
 37244                                  ;	   BX=handle
 37245                                  ;	   ES:DI buffer of EA list
 37246                                  ;
 37247                                  ;
 37248                                  ;   Error returns:
 37249                                  ;	    AX = error_invalid_function
 37250                                  ;	       = error_invalid_handle
 37251                                  ;
 37252                                  ;----------------------------------------------------------------------------
 37253                                  
 37254                                  ; 21/05/2019 - Retro DOS v4.0
 37255                                  ; DOSCODE:A90Dh (MSDOS 6.21, MSDOS.SYS)
 37256                                  
 37257                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37258                                  ; DOSCODE:A8ADh (MSDOS 5.0 MSDOS.SYS)
 37259                                  
 37260                                  _$FILE_TIMES:
 37261                                  	; 13/07/2018 - Retro DOS v3.0
 37262                                  
 37263                                  	; MSDOS 3.3
 37264                                  	;cmp	al,2			; correct subfunction ?
 37265                                  	;jb	short ft1
 37266                                  
 37267                                  	;;mov	byte [ss:EXTERR_LOCUS], 1
 37268                                  	;mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 37269                                  						;SS Overr
 37270                                  	;;mov	al,1
 37271                                  	;mov	al,error_invalid_function ; give bad return
 37272                                  	;jmp	SYS_RET_ERR
 37273                                  
 37274                                  	; MSDOS 6.0
 37275 0000684A 3C02                    	cmp	al,2			; correct subfunction ?
 37276 0000684C 7340                    	jae	short inval_func
 37277                                  ;ft1:
 37278 0000684E E87300                  	call	CheckOwner		; get sft
 37279                                  	; 17/12/2022
 37280 00006851 72F4                    	jc	short LSeekError	; bad handle
 37281                                  
 37282 00006853 08C0                    	or	al,al			; get time/date ?
 37283 00006855 7515                    	jnz	short ft_set_time
 37284                                  
 37285                                  ;------ here we get the time & date from the sft for the user
 37286                                  
 37287 00006857 FA                      	cli				; is this cli/sti reqd ? BUGBUG
 37288                                  	;mov	cx,[es:di+13]
 37289 00006858 268B4D0D                	mov	cx,[es:di+SF_ENTRY.sf_time] ; get the time
 37290                                  	;mov	dx,[es:di+15]
 37291 0000685C 268B550F                	mov	dx,[es:di+SF_ENTRY.sf_date] ;  & date
 37292 00006860 FB                      	sti
 37293 00006861 E81D9C                  	call	Get_User_Stack
 37294                                  	;mov	[si+4],cx
 37295 00006864 894C04                  	mov	[si+user_env.user_CX],cx
 37296                                  	;mov	[si+6],dx
 37297 00006867 895406                  	mov	[si+user_env.user_DX],dx
 37298 0000686A EB1F                    	jmp	short ok_ret
 37299                                  
 37300                                  ;------ here we set the time in sft
 37301                                  
 37302                                  ft_set_time:
 37303 0000686C E884AA                  	call    ECritSFT
 37304                                  	;mov	[es:di+13],cx
 37305 0000686F 26894D0D                	mov	[es:di+SF_ENTRY.sf_time],cx ; drop in new time
 37306                                  	;mov	[es:di+15],dx
 37307 00006873 2689550F                	mov	[es:di+SF_ENTRY.sf_date],dx ;  and date	
 37308                                  
 37309 00006877 31C0                    	xor	ax, ax
 37310 00006879 36FF1E[C800]            	call	far [ss:JShare+(14*4)] ; 14 = ShSU	; SS Override
 37311                                  
 37312                                  ;------ set the flags in SFT entry
 37313                                  	;and	word [es:di+5],0FFBFh
 37314                                  	; 18/12/2022
 37315                                  	;and	byte [es:di+5],0BFh
 37316 0000687E 26806505BF              	and	byte [es:di+SF_ENTRY.sf_flags],~devid_file_clean
 37317                                  	;and	word [es:di+SF_ENTRY.sf_flags],~devid_file_clean 
 37318                                  							; mark file as dirty
 37319                                  	;or	word [es:di+5],4000h
 37320                                  	; 17/12/2022
 37321                                  	;or	byte [es:di+6],40h
 37322 00006883 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8)
 37323                                  	;or	word [es:di+SF_ENTRY.sf_flags],sf_close_nodate
 37324                                  							; ask close not to
 37325                                  							;   bother about date
 37326                                  							;   and time
 37327 00006888 E883AA                  	call	LCritSFT
 37328                                  ok_ret:
 37329                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37330                                  	; 17/12/2022
 37331 0000688B E9A99D                  	jmp	SYS_RET_OK
 37332                                  	;jmp	short LSeekOk
 37333                                  
 37334                                  inval_func:
 37335                                  	;mov	byte [ss:EXTERR_LOCUS],1
 37336 0000688E 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 37337                                  						;SS Overr
 37338                                  	;mov	al,1
 37339 00006894 B001                    	mov	al,error_invalid_function ; give bad return
 37340                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37341                                  ft_error:
 37342                                  	;;jmp	SYS_RET_ERR
 37343                                  	;jmp	short LSeekError3
 37344                                  	; 17/12/2022
 37345 00006896 EBAF                    	jmp	short LSeekError
 37346                                  
 37347                                  ; 21/05/2019 - Retro DOS v4.0
 37348                                  ; DOSCODE:A95Bh (MSDOS 6.21, MSDOS.SYS)
 37349                                  
 37350                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37351                                  ; DOSCODE:A8FBh (MSDOS 5.0 MSDOS.SYS)
 37352                                  
 37353                                  ;BREAK <$DUP - duplicate a jfn>
 37354                                  ;----------------------------------------------------------------------------
 37355                                  ;
 37356                                  ;   Assembler usage:
 37357                                  ;	    MOV     BX, fh
 37358                                  ;	    MOV     AH, Dup
 37359                                  ;	    INT     int_command
 37360                                  ;	  AX has the returned handle
 37361                                  ;   Errors:
 37362                                  ;	    AX = dup_invalid_handle
 37363                                  ;	       = dup_too_many_open_files
 37364                                  ;
 37365                                  ;----------------------------------------------------------------------------
 37366                                  
 37367                                  _$DUP:
 37368 00006898 89D8                    	MOV	AX,BX			; save away old handle in AX
 37369 0000689A E86FFD                  	call	JFNFree 		; free handle? into ES:DI, new in BX
 37370                                  DupErrorCheck:
 37371 0000689D 72A8                    	JC	short DupErr		; nope, bye
 37372 0000689F 06                      	push	es
 37373 000068A0 57                      	push	di			; save away SFT
 37374 000068A1 5E                      	pop	si			; into convenient place DS:SI
 37375 000068A2 1F                      	pop	ds
 37376 000068A3 93                      	XCHG	AX,BX			; get back old handle
 37377 000068A4 E81D00                  	call	CheckOwner		; get sft in ES:DI
 37378 000068A7 729E                    	JC	short DupErr		; errors go home
 37379 000068A9 E81AC1                  	call	DOS_Dup_Direct
 37380 000068AC E800FD                  	call	pJFNFromHandle		; get pointer
 37381 000068AF 268A1D                  	MOV	BL,[ES:DI]		; get SFT number
 37382 000068B2 881C                    	MOV	[SI],BL			; stuff in new SFT
 37383                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37384                                  	;jmp	SYS_RET_OK		; and go home
 37385 000068B4 EBD5                    	jmp	short ok_ret
 37386                                  
 37387                                  	; 17/12/2022
 37388                                  ;DupErr:
 37389                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37390                                  	;;jmp	SYS_RET_ERR
 37391                                  	;jmp	short ft_error
 37392                                  
 37393                                  ;BREAK <$DUP2 - force a dup on a particular jfn>
 37394                                  ;----------------------------------------------------------------------------
 37395                                  ;
 37396                                  ;   Assembler usage:
 37397                                  ;	    MOV     BX, fh
 37398                                  ;	    MOV     CX, newfh
 37399                                  ;	    MOV     AH, Dup2
 37400                                  ;	    INT     int_command
 37401                                  ;   Error returns:
 37402                                  ;	    AX = error_invalid_handle
 37403                                  ;
 37404                                  ;----------------------------------------------------------------------------
 37405                                  
 37406                                  _$DUP2:
 37407 000068B6 53                      	push	bx
 37408 000068B7 51                      	push	cx			; save source
 37409 000068B8 89CB                    	MOV	BX,CX			; get one to close
 37410 000068BA E8AAFD                  	call	_$CLOSE			; close destination handle
 37411 000068BD 5B                      	pop	bx
 37412 000068BE 58                      	pop	ax			; old in AX, new in BX
 37413 000068BF E8EDFC                  	call	pJFNFromHandle		; get pointer
 37414 000068C2 EBD9                    	JMP	short DupErrorCheck	; check error and do dup
 37415                                  
 37416                                  ;Break	<CheckOwner - verify ownership of handles from server>
 37417                                  ;----------------------------------------------------------------------------
 37418                                  ;   CheckOwner - Due to the ability of the server to close file handles for a
 37419                                  ;   process without the process knowing it (delete/rename of open files, for
 37420                                  ;   example), it is possible for the redirector to issue a call to a handle
 37421                                  ;   that it soes not rightfully own. We check here to make sure that the
 37422                                  ;   issuing process is the owner of the SFT. At the same time, we do a
 37423                                  ;   SFFromHandle to really make sure that the SFT is good.
 37424                                  ;
 37425                                  ;	ENTRY	BX has the handle
 37426                                  ;		User_ID is the current user
 37427                                  ;	EXIT	Carry Clear => ES:DI points to SFT
 37428                                  ;		Carry Set => AX has error code
 37429                                  ;	USES	none
 37430                                  ;----------------------------------------------------------------------------
 37431                                  
 37432                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37433                                  	; 21/05/2019 - Retro DOS v4.0
 37434                                  CheckOwner:
 37435                                  	; 13/07/2018 - Retro DOS v3.0
 37436                                  
 37437 000068C4 E805FD                  	call	SFFromHandle
 37438 000068C7 721B                    	jc	short co_ret_label	; retc
 37439                                  
 37440 000068C9 50                      	push	ax
 37441                                  
 37442                                  	; MSDOS 6.0
 37443                                  
 37444                                  ;SR; WIN386 patch - Do not check for USER_ID for using handles since these 
 37445                                  ;SR; are shared across multiple VMs in win386.
 37446                                  
 37447 000068CA 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 02/06/2019
 37448 000068D0 7404                    	jz	short no_win386		;win386 is not present
 37449 000068D2 31C0                    	xor	ax,ax			;set the zero flag
 37450 000068D4 EB08                    	jmp	short _skip_win386	
 37451                                  
 37452                                  no_win386:
 37453 000068D6 36A1[3E03]              	mov	ax,[SS:USER_ID]		;smr;SS Override
 37454                                  	;cmp	ax,[es:di+47]
 37455 000068DA 263B452F                	cmp	ax,[es:di+SF_ENTRY.sf_UID]
 37456                                  
 37457                                  _skip_win386:
 37458 000068DE 58                      	pop	ax
 37459                                  	
 37460                                  	; 17/12/2022
 37461 000068DF 7403                    	jz	short co_ret_label
 37462                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37463                                  	;jnz	short CheckOwner_err
 37464                                  	;retn
 37465                                  	
 37466                                  CheckOwner_err:
 37467                                  	;mov	al,6
 37468 000068E1 B006                    	mov	al,error_invalid_handle
 37469 000068E3 F9                      	stc
 37470                                  
 37471                                  co_ret_label:
 37472 000068E4 C3                      	retn
 37473                                  
 37474                                  ;============================================================================
 37475                                  ; MACRO.ASM, MSDOS 6.0, 1991
 37476                                  ;============================================================================
 37477                                  ; Retro	DOS v3.0 - 11/07/2018
 37478                                  ; 21/05/2019 - Retro DOS v4.0
 37479                                  
 37480                                  ;	TITLE	MACRO - Pathname and macro related internal routines
 37481                                  ;	NAME	MACRO
 37482                                  
 37483                                  ;	Microsoft Confidential
 37484                                  ;	Copyright (C) Microsoft Corporation 1991
 37485                                  ;	All Rights Reserved.
 37486                                  
 37487                                  ;**	MACRO.ASM
 37488                                  ;
 37489                                  ;	$AssignOper
 37490                                  ;	FIND_DPB
 37491                                  ;	InitCDS
 37492                                  ;	$UserOper
 37493                                  ;	GetVisDrv
 37494                                  ;	GetThisDrv
 37495                                  ;	GetCDSFromDrv
 37496                                  ;
 37497                                  ;   Revision history:
 37498                                  ;
 37499                                  ;	Created: MZ 4 April 1983
 37500                                  ;		 MZ 18 April 1983   Make TransFCB handle extended FCBs
 37501                                  ;		 AR 2 June 1983     Define/Delete macro for NET redir.
 37502                                  ;		 MZ 3 Nov 83	    Fix InitCDS to reset length to 2
 37503                                  ;		 MZ 4 Nov 83	    Fix NetAssign to use STRLEN only
 37504                                  ;		 MZ 18 Nov 83	    Rewrite string processing for subtree
 37505                                  ;				    aliasing.
 37506                                  ;
 37507                                  ;   MSDOS performs several types of name translation. First, we maintain for
 37508                                  ;   each valid drive letter the text of the current directory on that drive.
 37509                                  ;   For invalid drive letters, there is no current directory so we pretend to
 37510                                  ;   be at the root. A current directory is either the raw local directory
 37511                                  ;   (consisting of drive:\path) or a local network directory (consisting of
 37512                                  ;   \\machine\path. There is a limit on the point to which a .. is allowed.
 37513                                  ;
 37514                                  ;   Given a path, MSDOS will transform this into a real from-the-root path
 37515                                  ;   without . or .. entries. Any component that is > 8.3 is truncated to
 37516                                  ;   this and all * are expanded into ?'s.
 37517                                  ;
 37518                                  ;   The second part of name translation involves subtree aliasing. A list of
 37519                                  ;   subtree pairs is maintained by the external utility SUBST. The results of
 37520                                  ;   the previous 'canonicalization' are then examined to see if any of the
 37521                                  ;   subtree pairs is a prefix of the user path. If so, then this prefix is
 37522                                  ;   replaced with the other subtree in the pair.
 37523                                  ;
 37524                                  ;   A third part involves mapping this "real" path into a "physical" path.  A
 37525                                  ;   list of drive/subtree pairs are maintained by the external utility JOIN.
 37526                                  ;   The output of the previous translation is examined to see if any of the
 37527                                  ;   subtrees in this list are a prefix of the string. If so, then the prefix
 37528                                  ;   is replaced by the appropriate drive letter. In this manner, we can
 37529                                  ;   'mount' one device under another.
 37530                                  ;
 37531                                  ;   The final form of name translation involves the mapping of a user's
 37532                                  ;   logical drive number into the internal physical drive. This is
 37533                                  ;   accomplished by converting the drive number into letter:CON, performing
 37534                                  ;   the above translation and then converting the character back into a drive
 37535                                  ;   number.
 37536                                  ;
 37537                                  ;   There are two main entry points: TransPath and TransFCB. TransPath will
 37538                                  ;   take a path and form the real text of the pathname with all . and ..
 37539                                  ;   removed. TransFCB will translate an FCB into a path and then invoke
 37540                                  ;   TransPath.
 37541                                  ;
 37542                                  ;	A000	version 4.00  Jan. 1988
 37543                                  
 37544                                  ;Installed = TRUE
 37545                                  
 37546                                  ;	I_need	ThisCDS,DWORD		; pointer to CDS used
 37547                                  ;	I_need	CDSAddr,DWORD		; pointer to CDS table
 37548                                  ;	I_need	CDSCount,BYTE		; number of CDS entries
 37549                                  ;	I_need	CurDrv,BYTE		; current macro assignment (old
 37550                                  ;					; current drive)
 37551                                  ;	I_need	NUMIO,BYTE		; Number of physical drives
 37552                                  ;	I_need	fSharing,BYTE		; TRUE => no redirection allowed
 37553                                  ;	I_need	DummyCDS,80h		; buffer for dummy cds
 37554                                  ;	I_need	DIFFNAM,BYTE		; flag for MyName being set
 37555                                  ;	I_need	MYNAME,16		; machine name
 37556                                  ;	I_need	MYNUM,WORD		; machine number
 37557                                  ;	I_need	DPBHEAD,DWORD		; beginning of DPB chain
 37558                                  ;	I_need	EXTERR_LOCUS,BYTE	; Extended Error Locus
 37559                                  ;	I_need	DrvErr,BYTE		; drive error
 37560                                  
 37561                                  ;BREAK <$AssignOper -- Set up a Macro>
 37562                                  ;----------------------------------------------------------------------------
 37563                                  ; Inputs:
 37564                                  ;	AL = 00 get assign mode 		    (ReturnMode)
 37565                                  ;	AL = 01 set assign mode 		    (SetMode)
 37566                                  ;	AL = 02 get attach list entry		    (GetAsgList)
 37567                                  ;	AL = 03 Define Macro (attch start)
 37568                                  ;	    BL = Macro type
 37569                                  ;	       = 0 alias
 37570                                  ;	       = 1 file/device
 37571                                  ;	       = 2 drive
 37572                                  ;	       = 3 Char device -> network
 37573                                  ;	       = 4 File device -> network
 37574                                  ;	    DS:SI -> ASCIZ source name
 37575                                  ;	    ES:DI -> ASCIZ destination name
 37576                                  ;	AL = 04 Cancel Macro
 37577                                  ;	    DS:SI -> ASCIZ source name
 37578                                  ;	AL = 05 Modified get attach list entry
 37579                                  ;	AL = 06 Get ifsfunc item
 37580                                  ;	AL = 07 set in_use of a drive's CDS
 37581                                  ;	     DL = drive number, 0=default  0=A,,
 37582                                  ;	AL = 08 reset in_use of a drive's CDS
 37583                                  ;	     DL = drive number, 0=A, 1=B,,,
 37584                                  ; Function:
 37585                                  ;	Do macro stuff
 37586                                  ; Returns:
 37587                                  ;	Std Xenix style error return
 37588                                  ;----------------------------------------------------------------------------
 37589                                  
 37590                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37591                                  	; 21/05/2019 - Retro DOS v4.0
 37592                                  _$AssignOper:
 37593                                  	; MSDOS 6.0
 37594 000068E5 3C07                    	CMP	AL,7			      ; set in_use ?		;AN000;
 37595 000068E7 7525                    	JNZ	short chk08		      ; no			;AN000;
 37596                                  srinuse:								;AN000;
 37597 000068E9 50                      	PUSH	AX			      ; save al 		;AN000;
 37598 000068EA 88D0                    	MOV	AL,DL			      ; AL= drive id		;AN000;
 37599 000068EC E85601                  	CALL	GetCDSFromDrv		      ; ds:si -> cds		;AN000;
 37600 000068EF 58                      	POP	AX			      ; 			;AN000;
 37601 000068F0 7216                    	JC	short baddrv		      ; bad drive		;AN000;
 37602                                  	;cmp	word [si+45h],0
 37603 000068F2 837C4500                	CMP	WORD [SI+curdir.devptr],0     ; dpb ptr =0 ?		;AN000;
 37604 000068F6 7410                    	JZ	short baddrv		      ;     no			;AN000;
 37605 000068F8 3C07                    	CMP	AL,7			      ; set ?			;AN000;
 37606 000068FA 7506                    	JNZ	short resetdrv		      ; no			;AN000;
 37607                                  	;or	word [si+43h],4000h
 37608                                  	; 17/12/2022
 37609                                  	;or	byte [si+44h],40h
 37610 000068FC 804C4440                	or	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 37611                                  	;OR	word [SI+curdir.flags],curdir_inuse ; set in_use	;AN000;
 37612 00006900 EB19                    	JMP	SHORT okdone		      ; 			;AN000;
 37613                                  resetdrv:
 37614                                  	;and	word [si+43h],0BFFFh									;AN000;
 37615                                  	; 18/12/2022
 37616 00006902 806444BF                	and	byte [SI+curdir.flags+1],0BFh ; (~curdir_inuse)>>8
 37617                                  	;AND	word [SI+curdir.flags],~curdir_inuse ; reset in_use	;AN000;
 37618 00006906 EB13                    	JMP	SHORT okdone		      ; 			;AN000;
 37619                                  
 37620                                  	; 17/12/2022
 37621                                  baddrv: 								;AN000;
 37622 00006908 B80F00                  	MOV	AX,error_invalid_drive	      ; error			;AN000;
 37623                                  
 37624                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37625                                  	;JMP	SHORT ASS_ERR		      ; 			;AN000;
 37626                                  	; 17/12/2022
 37627                                  	; 21/05/2019
 37628                                  ASS_ERR:
 37629 0000690B E9329D                  	jmp	SYS_RET_ERR
 37630                                  
 37631                                  chk08:									;AN000;
 37632 0000690E 3C08                    	CMP	AL,8			      ; reset inuse ?		;AN000;
 37633 00006910 74D7                    	JZ	short srinuse 		      ; yes			;AN000;
 37634                                  
 37635                                    ;IF	NOT INSTALLED
 37636                                  	;transfer NET_ASSOPER
 37637                                    ;ELSE
 37638                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37639 00006912 50                      	PUSH	AX
 37640                                  	;mov	ax,111Eh
 37641                                  	;MOV	AX,(MultNET SHL 8) OR 30
 37642 00006913 B81E11                  	mov	ax,(MultNET*256)+30
 37643 00006916 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - DO REDIRECTION
 37644                                  			; SS = DOS CS
 37645                                  			; STACK: WORD function to execute
 37646                                  			; Return: CF set on error, AX = error code
 37647                                  			; STACK unchanged
 37648 00006918 5B                      	POP	BX			; Don't zap error code in AX
 37649 00006919 72F0                    	JC	short ASS_ERR
 37650                                  okdone:
 37651 0000691B E9199D                  	jmp	SYS_RET_OK
 37652                                  
 37653                                  	; 17/12/2022
 37654                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37655                                  ;ASS_ERR:
 37656                                  	;jmp	SYS_RET_ERR
 37657                                  
 37658                                    ;ENDIF
 37659                                  
 37660                                  ;Break <FIND_DPB - Find a DPB from a drive number>
 37661                                  ;----------------------------------------------------------------------------
 37662                                  ;**	FIND_DPB - Find a DPB from a Drive #
 37663                                  ;
 37664                                  ;	ENTRY	AL has drive number A = 0
 37665                                  ;	EXIT	'C' set
 37666                                  ;		    No DPB for this drive number
 37667                                  ;		'C' clear
 37668                                  ;		    DS:SI points to DPB for drive
 37669                                  ;	USES	SI, DS, Flags
 37670                                  ;----------------------------------------------------------------------------
 37671                                  
 37672                                  	; 21/05/2019 - Retro DOS v4.0
 37673                                  FIND_DPB:
 37674 0000691E 36C536[2600]            	LDS	SI,[SS:DPBHEAD]		;smr;SS Override
 37675                                  fdpb5:	
 37676 00006923 83FEFF                  	CMP	SI,-1
 37677 00006926 7409                    	JZ	short fdpb10
 37678 00006928 3A04                    	cmp	al,[si]
 37679                                  	;CMP	AL,[SI+DPB.DRIVE]
 37680 0000692A 7406                    	jz	short ret_label15	; Carry clear (retz)
 37681                                  	;;lds	si,[si+18h] ; MSDOS 3.3
 37682                                  	;lds	si,[si+19h] ; MSDOS 6.0
 37683 0000692C C57419                  	LDS	SI,[SI+DPB.NEXT_DPB]
 37684 0000692F EBF2                    	JMP	short fdpb5
 37685                                  fdpb10:	
 37686 00006931 F9                      	STC
 37687                                  ret_label15:
 37688 00006932 C3                      	retn
 37689                                  
 37690                                  ;	Break <InitCDS - set up an empty CDS>
 37691                                  ;----------------------------------------------------------------------------
 37692                                  ;**	InitCDS - Setup an Empty CDS
 37693                                  ;
 37694                                  ;	ENTRY	ThisCDS points to CDS
 37695                                  ;		AL has uppercase drive letter
 37696                                  ;	EXIT	ThisCDS is now empty
 37697                                  ;		(ES:DI) = CDS
 37698                                  ;		'C' set if no DPB associated with drive
 37699                                  ;	USES	AH,ES,DI, Flags
 37700                                  ;----------------------------------------------------------------------------
 37701                                  
 37702                                  ; 21/05/2019 - Retro DOS v4.0
 37703                                  ; DOSCODE:A9FDh (MSDOS 6.21, MSDOS.SYS)
 37704                                  
 37705                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37706                                  ; DOSCODE:A99Dh (MSDOS 5.0, MSDOS.SYS)
 37707                                  
 37708                                  InitCDS:
 37709                                  	; 19/08/2018
 37710                                  	; 05/08/2018 - Retro DOS v3.0
 37711                                  	; MSDOS 6.0
 37712 00006933 50                      	push	ax			; save (AL) for caller
 37713 00006934 36C43E[A205]            	LES	DI,[SS:THISCDS]		; (es:di) = CDS address
 37714                                  	;mov	word [es:di+67],0
 37715 00006939 26C745430000            	MOV	word [ES:DI+curdir.flags],0 ; "free" CDS
 37716 0000693F 2C40                    	SUB	AL,"A"-1                ; A = 1
 37717 00006941 363806[4600]            	CMP	[SS:NUMIO],AL		;smr;SS Override
 37718 00006946 7236                    	JC	short icdsx		; Drive does not map a physical drive
 37719 00006948 48                      	dec	ax			; (AL) = 0 if A, 1 if B, etc.
 37720 00006949 50                      	PUSH	AX			; save drive number for later
 37721 0000694A 0441                    	add	al,"A"
 37722 0000694C B43A                    	MOV	AH,':'
 37723 0000694E 268905                  	mov	[ES:DI],ax
 37724                                  	;MOV	[ES:DI+curdir.text],AX 	; set "x:"
 37725                                  	;mov	ax,"\"
 37726                                  	;mov	[es:di+2],ax
 37727                                  	;MOV	word [ES:DI+curdir.text+2],"\"	; NUL terminate
 37728 00006951 26C745025C00            	mov	word [ES:DI+curdir.text+2],005Ch ; 19/08/2018
 37729                                  	;or	word [es:di+67],4000h
 37730                                  	;or	byte [es:di+68],40h
 37731 00006957 26804D4440              	OR	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 37732 0000695C 29C0                    	sub	ax,ax
 37733                                  	;MOV	[es:di+73],ax ; 0
 37734 0000695E 26894549                	MOV	[ES:DI+curdir.ID],ax
 37735                                  	;mov	[es:di+75],ax ; 0
 37736 00006962 2689454B                	MOV	[ES:DI+curdir.ID+2],ax
 37737 00006966 B002                    	mov	al,2
 37738                                  	;mov	[es:di+79],aX ; 2
 37739 00006968 2689454F                	MOV	[ES:DI+curdir.end],ax
 37740 0000696C 58                      	POP	AX			; (al) = drive number
 37741 0000696D 1E                      	push	ds
 37742 0000696E 56                      	push	si
 37743 0000696F E8ACFF                  	call	FIND_DPB
 37744 00006972 7208                    	JC	short icds5		; OOOOPPPPPSSSS!!!!
 37745                                  	;mov	[es:di+69],si
 37746 00006974 26897545                	MOV	[ES:DI+curdir.devptr],SI
 37747                                  	;mov	[es:di+71],ds
 37748 00006978 268C5D47                	MOV	[ES:DI+curdir.devptr+2],DS
 37749                                  icds5:	
 37750 0000697C 5E                      	pop	si
 37751 0000697D 1F                      	pop	ds
 37752                                  icdsx:	
 37753 0000697E 58                      	pop	ax
 37754                                  RET45:
 37755 0000697F C3                      	retn
 37756                                  
 37757                                  ;Break <$UserOper - get/set current user ID (for net)>
 37758                                  ;----------------------------------------------------------------------------
 37759                                  ;   $UserOper - retrieve or initiate a user id string.	MSDOS will only
 37760                                  ;	maintain this string and do no verifications.
 37761                                  ;
 37762                                  ;   Inputs:	AL has function type (0-get 1-set 2-printer-set 3-printer-get
 37763                                  ;				      4-printer-set-flags,5-printer-get-flags)
 37764                                  ;		DS:DX is user string pointer (calls 1,2)
 37765                                  ;		ES:DI is user buffer (call 3)
 37766                                  ;		BX is assign index (calls 2,3,4,5)
 37767                                  ;		CX is user number (call 1)
 37768                                  ;		DX is flag word (call 4)
 37769                                  ;   Outputs:	If AL = 0 then the current user string is written to DS:DX
 37770                                  ;			and user CX is set to the user number
 37771                                  ;		If AL = 3 then CX bytes have been put at input ES:DI
 37772                                  ;		If AL = 5 then DX is flag word
 37773                                  ;----------------------------------------------------------------------------
 37774                                  
 37775                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37776                                  	; 21/05/2019 - Retro DOS v4.0
 37777                                  _$UserOper:
 37778                                  	; 05/08/2018 - Retro DOS v3.0
 37779                                  	; MSDOS 6.0 (& MSDOS 3.3)
 37780 00006980 50                      	PUSH	AX
 37781 00006981 2C01                    	SUB	AL,1			; quick dispatch on 0,1
 37782 00006983 58                      	POP	AX
 37783 00006984 7211                    	JB	short UserGet 		; return to user the string
 37784 00006986 742E                    	JZ	short UserSet 		; set the current user
 37785 00006988 3C05                    	CMP	AL,5			; test for 2,3,4 or 5
 37786 0000698A 763D                    	JBE	short UserPrint		; yep
 37787                                  	;mov	byte [ss:EXTERR_LOCUS],1
 37788 0000698C 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ;smr;SS Override 
 37789                                  					; Extended Error Locus
 37790                                  	;error	error_invalid_function	; not 0,1,2,3
 37791                                  	;mov	al,1
 37792 00006992 B001                    	MOV	AL,error_invalid_function
 37793                                  useroper_error:
 37794                                  	; 17/12/2022
 37795                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37796 00006994 E9A99C                  	JMP	SYS_RET_ERR
 37797                                  	;jmp	short ASS_ERR
 37798                                  
 37799                                  UserGet:
 37800                                  ; Transfer MYNAME to DS:DX
 37801                                  ; Set Return CX to MYNUM
 37802 00006997 1E                      	PUSH	DS			; switch registers
 37803 00006998 07                      	POP	ES
 37804 00006999 89D7                    	MOV	DI,DX			; destination
 37805 0000699B 368B0E[0E00]            	MOV	CX,[SS:MYNUM]		; Get number	;smr;SS Override
 37806 000069A0 E8DE9A                  	call	Get_User_Stack
 37807                                  	;mov	[si+4],cx
 37808 000069A3 894C04                  	MOV	[SI+user_env.user_CX],CX ; Set number return
 37809 000069A6 16                      	push	ss			; point to DOSDATA
 37810 000069A7 1F                      	pop	ds
 37811 000069A8 BE[0503]                	MOV	SI,MYNAME		; point source to user string
 37812                                  UserMove:
 37813 000069AB B90F00                  	MOV	CX,15
 37814 000069AE F3A4                    	REP	MOVSB			; blam.
 37815 000069B0 31C0                    	XOR	AX,AX			; 16th byte is 0
 37816 000069B2 AA                      	STOSB
 37817                                  UserBye:
 37818 000069B3 E9819C                  	jmp	SYS_RET_OK		; no errors here
 37819                                  
 37820                                  UserSet:
 37821                                  ; Transfer DS:DX to MYNAME
 37822                                  ; CX to MYNUM
 37823 000069B6 36890E[0E00]            	MOV	[SS:MYNUM],CX				;smr;SS Override
 37824 000069BB 89D6                    	MOV	SI,DX			; user space has source
 37825 000069BD 16                      	push	ss
 37826 000069BE 07                      	pop	es
 37827 000069BF BF[0503]                	MOV	DI,MYNAME		; point dest to user string
 37828 000069C2 36FE06[0403]            	INC	byte [SS:DIFFNAM]	; signal change ;smr;SS Override
 37829 000069C7 EBE2                    	JMP	short UserMove
 37830                                  
 37831                                  UserPrint:
 37832                                  
 37833                                    ;IF NOT Installed
 37834                                    ;	transfer PRINTER_GETSET_STRING
 37835                                    ;ELSE
 37836 000069C9 50                      	PUSH	AX
 37837                                  	;mov	ax,111Fh
 37838                                  	;MOV	AX,(MultNET SHL 8) OR 31
 37839 000069CA B81F11                  	mov	ax,(MultNET<<8)|31
 37840 000069CD CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PRINTER SETUP
 37841                                  			; STACK: WORD function
 37842                                  			; Return: CF set on error, AX = error code
 37843                                  			; STACK unchanged
 37844 000069CF 5A                      	POP	DX			; Clean stack
 37845                                  	;JNC	short OKPA
 37846 000069D0 73E1                    	jnc	short UserBye ; 21/05/2019
 37847                                  	; 17/12/2022
 37848 000069D2 EBC0                    	jmp	short useroper_error
 37849                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37850                                  	;jnb     short OKPA
 37851                                  	;jmp     short useroper_error
 37852                                  
 37853                                  	; 17/12/2022
 37854                                  ;OKPA:
 37855                                  ;	jmp	short UserBye
 37856                                  
 37857                                    ;ENDIF
 37858                                  
 37859                                  
 37860                                  ;Break	<GetVisDrv - return visible drive>
 37861                                  ;----------------------------------------------------------------------------
 37862                                  ;   GetVisDrv - correctly map non-spliced inuse drives
 37863                                  ;
 37864                                  ;   Inputs:	AL has drive identifier (0=default)
 37865                                  ;   Outputs:	Carry Set - invalid drive/macro
 37866                                  ;		Carry Clear - AL has physical drive (0=A)
 37867                                  ;		    ThisCDS points to CDS
 37868                                  ;   Registers modified: AL
 37869                                  ;----------------------------------------------------------------------------
 37870                                  
 37871                                  	; 21/05/2019 - Retro DOS v4.0
 37872                                  	; DOSCODE:AA9Fh (MSDOS 6.21, MSDOS.SYS)
 37873                                  
 37874                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37875                                  	; DOSCODE:AA3Fh (MSDOS 5.0, MSDOS.SYS)	
 37876                                  GetVisDrv:
 37877                                  	; 05/08/2018 - Retro DOS v3.0
 37878                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6839h
 37879 000069D4 E81900                  	CALL	GETTHISDRV		; get inuse drive
 37880 000069D7 72A6                    	jc	short RET45
 37881 000069D9 1E                      	push	ds
 37882 000069DA 56                      	push	si
 37883 000069DB 36C536[A205]            	LDS	SI,[SS:THISCDS]		;smr;SS Override
 37884                                  	;test	word [si+67],2000h
 37885                                  	; 17/12/2022
 37886                                  	;test	byte [si+68],20h
 37887 000069E0 F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)
 37888                                  	;TEST	word [SI+curdir.flags],curdir_splice
 37889 000069E4 5E                      	pop	si
 37890 000069E5 1F                      	pop	ds
 37891 000069E6 7497                    	jz	short RET45		; if not spliced, return OK
 37892                                  	; MSDOS 6.0
 37893                                  	;mov	byte [ss:DrvErr],0Fh
 37894 000069E8 36C606[1006]0F          	MOV	byte [SS:DrvErr],error_invalid_drive ;IFS. ;AN000;smr;SS Override
 37895 000069EE F9                      	STC				; signal error
 37896 000069EF C3                      	retn
 37897                                  
 37898                                  ;Break <Getthisdrv - map a drive designator (0=def, 1=A...)>
 37899                                  ;----------------------------------------------------------------------------
 37900                                  ;   GetThisDrv - look through a set of macros and return the current drive and
 37901                                  ;	macro pointer
 37902                                  ;
 37903                                  ;   Inputs:	AL has drive identifier (1=A, 0=default)
 37904                                  ;   Outputs:
 37905                                  ;		Carry Set - invalid drive/macro
 37906                                  ;		Carry Clear - AL has physical drive (0=A)
 37907                                  ;		   ThisCDS points to macro
 37908                                  ;   Registers modified: AL
 37909                                  ;----------------------------------------------------------------------------
 37910                                  
 37911                                  	; 21/05/2019 - Retro DOS v4.0
 37912                                  	; DOSCODE:AABCh (MSDOS 6.21, MSDOS.SYS)
 37913                                  
 37914                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37915                                  	; DOSCODE:AA5Ch (MSDOS 5.0, MSDOS.SYS)	
 37916                                  GETTHISDRV:
 37917                                  	; 05/08/2018
 37918                                  	; 12/07/2018 - Retro DOS v3.0
 37919                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6850h
 37920                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37921 000069F0 08C0                    	OR	AL,AL			; are we using default drive?
 37922 000069F2 7505                    	JNZ	SHORT GTD10		; no, go get the CDS pointers
 37923 000069F4 36A0[3603]              	MOV	AL,[SS:CURDRV]		; get the current drive
 37924                                  	;INC	ax			; Counteract next instruction
 37925                                  	; 04/09/2018
 37926                                  	;inc	al
 37927                                  	; 07/12/2022
 37928 000069F8 40                      	inc	ax
 37929                                  GTD10:	
 37930                                  	;DEC	AX
 37931                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37932 000069F9 48                      	dec	ax			; 0 = A
 37933                                  	;dec	al
 37934 000069FA 1E                      	PUSH	DS			; save world
 37935 000069FB 56                      	PUSH	SI
 37936                                  	;mov	byte [ss:EXTERR_LOCUS],2
 37937 000069FC 36C606[2303]02          	MOV	BYTE [SS:EXTERR_LOCUS],errLOC_Disk		;smr;SS Override
 37938 00006A02 36F606[7205]FF          	TEST	BYTE [SS:FSHARING],-1	; Logical or Physical?	;smr;SS Override
 37939 00006A08 7420                    	JZ	SHORT GTD20		; Logical
 37940 00006A0A 50                      	PUSH	AX
 37941 00006A0B 06                      	PUSH	ES
 37942 00006A0C 57                      	PUSH	DI
 37943 00006A0D 36C706[A205][F304]      	MOV	WORD [SS:THISCDS],DUMMYCDS ;smr;SS Override
 37944                                  	;mov	[SS:THISCDS+2],CS ; MSDOS 3.3
 37945 00006A14 368C16[A405]            	MOV	[SS:THISCDS+2],SS ; MSDOS 6.0 ;ThisCDS = &DummyCDS;smr;
 37946 00006A19 0441                    	ADD	AL,'A'
 37947 00006A1B E815FF                  	CALL	InitCDS			; InitCDS(c);
 37948                                  	;test	word [es:di+67],4000h
 37949                                  	; 17/12/2022
 37950                                  	;test	byte [es:di+68],40h
 37951 00006A1E 26F6454440              	test	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 37952                                  	;TEST	WORD [ES:DI+curdir.flags],curdir_inuse	; Clears carry
 37953 00006A23 5F                      	POP	DI
 37954 00006A24 07                      	POP	ES
 37955 00006A25 58                      	POP	AX
 37956 00006A26 740D                    	JZ	SHORT GTD30		; Not a physical drive.
 37957 00006A28 EB18                    	JMP	SHORT GTDX		; carry clear
 37958                                  GTD20:
 37959 00006A2A E81800                  	CALL	GetCDSFromDrv
 37960 00006A2D 7206                    	JC	SHORT GTD30	; Unassigned CDS -> return error already set
 37961                                  	;test	word [si+43h],4000h
 37962                                  	; 17/12/2022
 37963                                  	;test	byte [si+44h],40h
 37964 00006A2F F6444440                	test	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 37965                                  	;TEST	WORD [SI+curdir.flags],curdir_inuse ; Clears Carry
 37966 00006A33 750D                    	JNZ	SHORT GTDX		; carry clear
 37967                                  GTD30:	
 37968                                  	; 21/05/2019
 37969                                  	; MSDOS 6.0
 37970 00006A35 B00F                    	MOV	AL,error_invalid_drive	; invalid FAT drive
 37971 00006A37 36A2[1006]              	MOV	BYTE [ss:DrvErr],AL	; save this for IOCTL
 37972                                  	; MSDOS 3.3 (.& MSDOS 6.0)
 37973 00006A3B 36C606[2303]01          	MOV	BYTE [ss:EXTERR_LOCUS],errLOC_Unk
 37974 00006A41 F9                      	STC
 37975                                  GTDX:	
 37976 00006A42 5E                      	POP	SI			; restore world
 37977 00006A43 1F                      	POP	DS
 37978 00006A44 C3                      	RETN
 37979                                   
 37980                                  
 37981                                  ;Break <GetCDSFromDrv - convert a drive number to a CDS pointer>
 37982                                  ;----------------------------------------------------------------------------
 37983                                  ;   GetCDSFromDrv - given a physical drive number, convert it to a CDS
 37984                                  ;	pointer, returning an error if the drive number is greater than the
 37985                                  ;	number of CDS's
 37986                                  ;
 37987                                  ;   Inputs:	AL is physical unit # A=0...
 37988                                  ;   Outputs:	Carry Set if Bad Drive
 37989                                  ;		Carry Clear
 37990                                  ;		    DS:SI -> CDS
 37991                                  ;		    [THISCDS] = DS:SI
 37992                                  ;   Registers modified: DS,SI
 37993                                  ;----------------------------------------------------------------------------
 37994                                  
 37995                                  	; 21/05/2019 - Retro DOS v4.0
 37996                                  GetCDSFromDrv:
 37997 00006A45 363A06[4700]            	CMP	AL,[SS:CDSCOUNT]	; is this a valid designator;smr;SS Override
 37998                                  	;JB	SHORT GetCDS	; cf=1	; yes, go get the macro
 37999                                  	;STC				; signal error
 38000                                  	;RETN				; bye
 38001                                  	; 23/09/2023
 38002 00006A4A F5                      	cmc	; cf=1 <-> cf=0
 38003 00006A4B 7217                    	jc	short GetCDS_retn
 38004                                  GetCDS:
 38005                                  	; 23/09/2023
 38006                                  	;PUSH	BX
 38007 00006A4D 50                      	PUSH	AX
 38008 00006A4E 36C536[3C00]            	LDS	SI,[SS:CDSADDR]		; get pointer to table	;smr;SS Override
 38009                                  	;mov	bl,81 ; MSDOS 3.3
 38010                                  	;mov	bl,88 ; MSDOS 6.0 
 38011                                  	; 23/09/2023
 38012                                  	;MOV	BL,curdir.size		; size in convenient spot
 38013                                  	;MUL	BL			; get net offset
 38014 00006A53 B458                    	mov	ah,curdir.size
 38015 00006A55 F6E4                    	mul	ah
 38016 00006A57 01C6                    	ADD	SI,AX ; *		; convert to true pointer
 38017 00006A59 368936[A205]            	MOV	[SS:THISCDS],SI		; store convenient offset;smr;SS Override
 38018 00006A5E 368C1E[A405]            	MOV	[SS:THISCDS+2],DS	; store convenient segment;smr;SS Override
 38019 00006A63 58                      	POP	AX
 38020                                  	; 23/09/2023
 38021                                  	;POP	BX
 38022                                  	; (cf must be 0 here) ; *
 38023                                  	;CLC				; no error
 38024                                  GetCDS_retn:
 38025 00006A64 C3                      	RETN				; bye!
 38026                                  
 38027                                  ;============================================================================
 38028                                  ; MACRO2.ASM, MSDOS 6.0, 1991
 38029                                  ;============================================================================
 38030                                  ; Retro	DOS v3.0 - 12/07/2018
 38031                                  ; 22/05/2019 - Retro DOS v4.0
 38032                                  
 38033                                  ;BREAK <TransFCB - convert an FCB into a path, doing substitution>
 38034                                  ;----------------------------------------------------------------------------
 38035                                  ;   TransFCB - Copy an FCB from DS:DX into a reserved area doing all of the
 38036                                  ;       gritty substitution.
 38037                                  ;
 38038                                  ;   Inputs:     DS:DX - pointer to FCB
 38039                                  ;               ES:DI - point to destination
 38040                                  ;   Outputs:    Carry Set - invalid path in final map
 38041                                  ;               Carry Clear - FCB has been mapped into ES:DI
 38042                                  ;                   Sattrib is set from possibly extended FCB
 38043                                  ;                   ExtFCB set if extended FCB found
 38044                                  ;   Registers modified: most
 38045                                  ;----------------------------------------------------------------------------
 38046                                  
 38047                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38048                                  TransFCB:
 38049                                  	; 22/05/2019 - Retro DOS v4.0
 38050                                  	; 12/07/2018 - Retro DOS v3.0
 38051                                  	;LocalVar FCBTmp,16
 38052                                  	;ENTER
 38053 00006A65 55                      	push	bp
 38054 00006A66 89E5                    	mov	bp,sp
 38055                                  	;sub	sp,15	; MSDOS 3.3
 38056 00006A68 83EC10                  	sub	sp,16	; MSDOS 6.0
 38057 00006A6B 16                      	push	ss
 38058 00006A6C 07                      	pop	es
 38059 00006A6D 06                      	push	es
 38060 00006A6E 57                      	push	di
 38061                                  	;lea	di,[bp-15] ; MSDOS 3.3
 38062                                  	;LEA	DI,FCBTmp 
 38063 00006A6F 8D7EF0                  	lea	di,[bp-16]		; point to FCB temp area
 38064 00006A72 36C606[6C05]00          	mov	byte [SS:EXTFCB],0	; no extended FCB found ;smr;SS Override
 38065 00006A78 36C606[6D05]00          	mov	byte [SS:SATTRIB],0	; default search attributes;smr;SS Override
 38066 00006A7E E8B9B1                  	call	GetExtended             ; get FCB, extended or not
 38067                                  	; 06/12/2022
 38068 00006A81 740D                    	jz	short GetDrive		; not an extended FCB, get drive
 38069 00006A83 8A44FF                  	mov	AL,[SI-1]               ; get attributes
 38070 00006A86 36A2[6D05]              	mov	[SS:SATTRIB],AL		; store search attributes;smr;SS Override
 38071 00006A8A 36C606[6C05]FF          	mov	byte [SS:EXTFCB],-1	; signal extended FCB  ;smr;SS Override
 38072                                  GetDrive:
 38073 00006A90 AC                      	lodsb				; get drive byte
 38074 00006A91 E85CFF                  	call	GETTHISDRV
 38075 00006A94 722A                    	jc	short BadPack
 38076 00006A96 E87303                  	call	TextFromDrive           ; convert 0-based drive to text
 38077                                  
 38078                                  ; Scan the source to see if there are any illegal chars
 38079                                  
 38080                                  	;mov	bx,CharType		; load lookup table
 38081 00006A99 B90B00                  	mov	cx,11
 38082 00006A9C 56                      	push	si			; back over name, ext
 38083                                  FCBScan:
 38084 00006A9D AC                      	lodsb				; get a byte
 38085                                  	
 38086                                  	; 09/08/2018
 38087                                  	;;xlat	byte [es:bx]
 38088                                  	;es	xlat
 38089                                  
 38090                                  	; 22/05/2019 - Retro DOS v4.0	
 38091 00006A9E E836E5                  	call	GetCharType		; get flags
 38092                                  
 38093                                  	;test	al,8	
 38094 00006AA1 A808                    	test	al,FFCB
 38095 00006AA3 741B                    	jz	short BadPack
 38096                                  NextCh: 
 38097 00006AA5 E2F6                    	loop	FCBScan
 38098 00006AA7 5E                      	pop	si
 38099 00006AA8 89FB                    	mov	bx,di
 38100 00006AAA E8C9B5                  	call	PackName                ; crunch the path
 38101 00006AAD 5F                      	pop	di			; get original destination
 38102 00006AAE 07                      	pop	es
 38103 00006AAF 16                      	push	ss			; get DS addressability
 38104 00006AB0 1F                      	pop	ds
 38105                                  	;lea	si,[bp-15] ; MSDOS 3.3
 38106                                  	;LEA	SI,FCBTmp		; point at new pathname
 38107 00006AB1 8D76F0                  	lea	si,[bp-16]
 38108 00006AB4 803F00                  	cmp	byte [bx],0
 38109 00006AB7 7407                    	jz	short BadPack
 38110 00006AB9 55                      	push	bp
 38111 00006ABA E80E00                  	call	TransPathSet            ; convert the path
 38112 00006ABD 5D                      	pop	bp
 38113 00006ABE 7303                    	jnc	short FCBRet		; bye with transPath error code
 38114                                  BadPack:
 38115 00006AC0 F9                      	STC
 38116                                  	;mov	al,3
 38117 00006AC1 B003                    	MOV     AL,error_path_not_found
 38118                                  FCBRet: 
 38119                                  	;LEAVE
 38120 00006AC3 89EC                    	mov	sp,bp
 38121 00006AC5 5D                      	pop	bp
 38122                                  TransPath_retn:
 38123 00006AC6 C3                      	retn
 38124                                  
 38125                                  ; 12/07/2018 - Retro DOS v3.0
 38126                                  
 38127                                  ;BREAK <TransPath - copy a path, do string sub and put in current dir>
 38128                                  ;----------------------------------------------------------------------------
 38129                                  ;
 38130                                  ;   TransPath - copy a path from DS:SI to ES:DI, performing component string
 38131                                  ;       substitution, insertion of current directory and fixing . and ..
 38132                                  ;       entries. Perform splicing. Allow input string to match splice
 38133                                  ;       exactly.
 38134                                  ;
 38135                                  ;   TransPathSet - Same as above except No splicing is performed if input path
 38136                                  ;       matches splice.
 38137                                  ;
 38138                                  ;   TransPathNoSet - No splicing/local using is performed at all.
 38139                                  ;
 38140                                  ;   The following anomalous behaviour is required:
 38141                                  ;
 38142                                  ;       Drive letters on devices are ignored. (set up DummyCDS)
 38143                                  ;       Paths on devices are ignored. (truncate to 0-length)
 38144                                  ;       Raw net I/O sets ThisCDS => NULL.
 38145                                  ;       fSharing => dummyCDS and no subst/splice. Only canonicalize.
 38146                                  ;
 38147                                  ;   Other behaviour:
 38148                                  ;
 38149                                  ;       ThisCDS set up.
 38150                                  ;       FatRead done on local CDS.
 38151                                  ;       ValidateCDS done on local CDS.
 38152                                  ;
 38153                                  ;   Brief flowchart:
 38154                                  ;
 38155                                  ;       if fSharing then
 38156                                  ;           set up DummyCDS (ThisCDS)
 38157                                  ;           canonicalize (sets cMeta)
 38158                                  ;           splice
 38159                                  ;           fatRead
 38160                                  ;           return
 38161                                  ;       if \\ or d:\\ lead then
 38162                                  ;           set up null CDS (ThisCDS)
 38163                                  ;           canonicalize (sets cMeta)
 38164                                  ;           return
 38165                                  ;       if device then
 38166                                  ;           set up dummyCDS (ThisCDS)
 38167                                  ;           canonicalize (sets cMeta)
 38168                                  ;           return
 38169                                  ;       if file then
 38170                                  ;           getCDS (sets (ThisCDS) from name)
 38171                                  ;           validateCDS (may reset current dir)
 38172                                  ;           Copy current dir
 38173                                  ;           canonicalize (set cMeta)
 38174                                  ;           splice
 38175                                  ;           generate correct CDS (ThisCDS)
 38176                                  ;           if local then
 38177                                  ;               fatread
 38178                                  ;           return
 38179                                  ;
 38180                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 38181                                  ;               DI - point to buffer in DOSDATA
 38182                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 38183                                  ;                   syntax, etc. or user FAILed to I 24.
 38184                                  ;               WFP_Start - points to beginning of buffer
 38185                                  ;               Curr_Dir_End - points to end of current dir in path
 38186                                  ;               DS - DOSDATA
 38187                                  ;   Registers modified: most
 38188                                  ;
 38189                                  ;----------------------------------------------------------------------------
 38190                                  
 38191                                  ; 22/05/2019
 38192                                  ; 13/05/2019 - Retro DOS v4.0
 38193                                  ; DOSCODE:AB99h (MSDOS 6.21, MSDOS.SYS)
 38194                                  
 38195                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38196                                  ; DOSCODE:AB39h (MSDOS 5.0, MSDOS.SYS)
 38197                                  
 38198                                  TransPath:
 38199 00006AC7 30C0                    	XOR     AL,AL
 38200 00006AC9 EB02                    	JMP     SHORT SetSplice
 38201                                  TransPathSet:
 38202 00006ACB B0FF                    	MOV     AL,-1
 38203                                  SetSplice:
 38204 00006ACD 36A2[4C03]              	MOV	[SS:NoSetDir],AL	;   NoSetDir = !fExact; ;smr;SS Override
 38205 00006AD1 B0FF                    	MOV     AL,-1
 38206                                  TransPathNoSet:
 38207 00006AD3 36A2[7105]              	MOV	[SS:FSPLICE],AL		;   fSplice = TRUE;     ;smr;SS Override
 38208 00006AD7 36C606[7A05]FF          	MOV	byte [ss:CMETA],-1      			;smr;SS Override
 38209 00006ADD 36893E[B205]            	MOV     [SS:WFP_START],DI 				;smr;SS Override
 38210 00006AE2 36C706[B605]FFFF        	MOV	word [SS:CURR_DIR_END],-1 ; crack from start	;smr;SS Override
 38211 00006AE9 16                      	push	ss
 38212 00006AEA 07                      	pop	es
 38213                                  	;lea	bp,[di+134]
 38214 00006AEB 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; end of buffer
 38215                                  ;
 38216                                  ; if this is through the server dos call, fsharing is set. We set up a
 38217                                  ; dummy cds and let the operation go.
 38218                                  ;
 38219 00006AEF 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	; if no sharing		;smr;SS Override
 38220 00006AF5 7435                    	JZ	short CheckUNC		; skip to UNC check
 38221                                  ;
 38222                                  ; ES:DI point to buffer
 38223                                  ;
 38224 00006AF7 E8FC02                  	CALL	DriveFromText           ; get drive and advance DS:SI
 38225 00006AFA E8F3FE                  	call	GETTHISDRV              ; Set ThisCDS and convert to 0-based
 38226 00006AFD 722A                    	jc	short NoPath
 38227 00006AFF E80A03                  	CALL	TextFromDrive		; drop in new
 38228 00006B02 8D5D01                  	LEA	BX,[DI+1]               ; backup limit
 38229 00006B05 E83401                  	CALL	Canonicalize            ; copy and canonicalize
 38230 00006B08 72BC                    	jc	short TransPath_retn	; errors
 38231                                  ;
 38232                                  ; Perform splices for net guys.
 38233                                  ;
 38234 00006B0A 16                      	push	ss
 38235 00006B0B 1F                      	pop	ds
 38236 00006B0C 8B36[B205]              	MOV     SI,[WFP_START] 		; point to name
 38237 00006B10 F606[7105]FF            	TEST	byte [FSPLICE],-1
 38238 00006B15 7403                    	JZ	short NoServerSplice
 38239 00006B17 E83102                  	CALL    Splice
 38240                                  NoServerSplice:
 38241 00006B1A 16                      	push	ss
 38242 00006B1B 1F                      	pop	ds                      ; for FATREAD
 38243 00006B1C C43E[A205]              	LES     DI,[THISCDS]		; for fatread
 38244 00006B20 E8D0A7                  	call	ECritDisk
 38245 00006B23 E807EB                  	call	FATREAD_CDS
 38246 00006B26 E8E5A7                  	call	LCritDisk
 38247                                  NoPath:
 38248                                  	;mov	al,3
 38249 00006B29 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38250 00006B2B C3                      	retn				; any errors are in Carry flag
 38251                                  
 38252                                  ; Let the network decide if the name is for a spooled device. It will map
 38253                                  ; the name if so.
 38254                                  
 38255                                  CheckUNC:
 38256 00006B2C 36C706[A205]FFFF        	MOV     WORD [SS:THISCDS],-1	; NULL thisCDS		;smr;SS Override
 38257                                  	;CallInstall NetSpoolCheck,MultNET,35
 38258 00006B33 B82311                  	mov	ax,1123h
 38259 00006B36 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME
 38260                                  			; DS:SI -> ASCIZ filename to canonicalize
 38261                                  			; ES:DI -> 128-byte buffer for qualified name
 38262                                  			; Return: CF set if not resolved
 38263 00006B38 7329                    	JNC	short UNCDone
 38264                                  
 38265                                  ; At this point the name is either a UNC-style name (prefixed with two leading
 38266                                  ; \\s) or is a local file/device. Remember that if a net-spooled device was
 38267                                  ; input, then the name has been changed to the remote spooler by the above net
 38268                                  ; call. Also, there may be a drive in front of the \\.
 38269                                  
 38270                                  NO_CHECK:
 38271 00006B3A E8B902                  	CALL    DriveFromText		; eat drive letter
 38272 00006B3D 50                      	PUSH    AX                      ; save it
 38273 00006B3E 8B04                    	MOV     AX,[SI]			; get first two bytes of path
 38274 00006B40 E8B1E4                  	call    PATHCHRCMP              ; convert to normal form
 38275 00006B43 86E0                    	XCHG    AH,AL                   ; swap for second byte
 38276 00006B45 E8ACE4                  	call    PATHCHRCMP              ; convert to normal form
 38277 00006B48 751F                    	JNZ	short CheckDevice	; not a path char
 38278 00006B4A 38C4                    	CMP     AH,AL                   ; are they same?
 38279 00006B4C 751B                    	JNZ	short CheckDevice	; nope
 38280                                  
 38281                                  ; We have a UNC request. We must copy the string up to the beginning of the
 38282                                  ; local machine root path
 38283                                  
 38284 00006B4E 58                      	POP     AX
 38285 00006B4F A5                      	MOVSW                           ; get the lead \\.
 38286                                  UNCCpy:
 38287 00006B50 AC                      	LODSB                           ; get a byte
 38288 00006B51 E84BE4                   	call	UCase                   ;AN000;; convert the char
 38289 00006B54 08C0                    	OR      AL,AL
 38290 00006B56 740E                    	JZ	short UNCTerm		; end of string. All done.
 38291 00006B58 E899E4                  	call    PATHCHRCMP              ; is it a path char?
 38292 00006B5B 89FB                    	MOV     BX,DI                   ; backup position
 38293 00006B5D AA                      	STOSB
 38294 00006B5E 75F0                    	JNZ	short UNCCpy		; no, go copy
 38295 00006B60 E8D900                  	CALL    Canonicalize            ; wham (and set cMeta)
 38296                                  UNCDone:
 38297 00006B63 16                      	push	ss
 38298 00006B64 1F                      	pop	ds
 38299 00006B65 C3                       	retn				; return error code
 38300                                  UNCTerm:
 38301 00006B66 AA                      	STOSB                           ;AN000;
 38302 00006B67 EBFA                    	JMP	short UNCDone		;AN000;
 38303                                  
 38304                                  CheckDevice:
 38305                                  
 38306                                  ; Check DS:SI for device. First eat any path stuff
 38307                                  
 38308 00006B69 58                      	POP     AX                      ; retrieve drive info
 38309 00006B6A 803C00                  	CMP     BYTE [SI],0		; check for null file
 38310 00006B6D 7504                    	JNZ	short CheckPath
 38311                                  	;mov	al,2 
 38312 00006B6F B002                    	MOV     AL,error_file_not_found ; bad file error
 38313 00006B71 F9                      	STC                             ; signal error on null input
 38314 00006B72 C3                      	RETN				; bye!
 38315                                  CheckPath:
 38316 00006B73 50                      	push	ax
 38317 00006B74 55                      	push	bp			; save drive number
 38318                                  
 38319                                  
 38320                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38321                                  %if 0
 38322                                  	; MSDOS 6.0
 38323                                  ;;;BUGBUG BUG 10-26-1992 scottq
 38324                                  ;;;This is a hack for the CDROM extensions (2.1) who scan looking
 38325                                  ;;;for the following POP BP == 5Dh (restore <bp,ax>).
 38326                                  ;;;The problem is that a direct call to CheckThisDevice can (and did)
 38327                                  ;;;end up having a 5D in the opcode's displacement field. The
 38328                                  ;;;scanning code would choke on this thinking it was a POP BP instruction.
 38329                                  ;;;
 38330                                  ;;;What we do here is do a call to a function that is less than 5Dh
 38331                                  ;;;bytes away (and assert its not exactly 5D away) that jmps (transfers)
 38332                                  ;;;to the correct function. This cannot accidently insert a 5Dh.
 38333                                  ;;;
 38334                                  ;;;More info:
 38335                                  ;;;  This particular scan is begun at the UNCdone label for 32 bytes
 38336                                  ;;;looking for pop BP, so you cannot put a 5D between here and there.
 38337                                  ;;;
 38338                                  	call	no5Dshere
 38339                                  start5Dhack:
 38340                                  ;following is replaced with 5Dhack code--Invoke CheckThisDevice         
 38341                                  backfrom5Dhack:
 38342                                  
 38343                                  %endif
 38344                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38345                                  	; Note: 'call no5Dshere' is not required for MSDOS 5.0 MSDOS.SYS
 38346 00006B75 E8F0D6                  	call    CheckThisDevice	; E8h,6Fh,0D6h
 38347                                  
 38348 00006B78 5D                      	pop	bp
 38349 00006B79 58                      	pop	ax			; get drive letter back
 38350 00006B7A 731C                    	JNC	short DoFile		; yes we have a file.
 38351                                  
 38352                                  ; We have a device. AX has drive letter. At this point we may fake a CDS ala
 38353                                  ; sharing DOS call. We know by getting here that we are NOT in a sharing DOS
 38354                                  ; call.
 38355                                  
 38356 00006B7C 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; simulate sharing dos call;smr;SS Override
 38357 00006B82 E86BFE                  	call	GETTHISDRV              ; set ThisCDS and init DUMMYCDS
 38358 00006B85 36C606[7205]00          	MOV     byte [SS:FSHARING],0	;                       ;smr;SS Override
 38359                                  
 38360                                  ; Now that we have noted that we have a device, we put it into a form that
 38361                                  ; getpath can understand. Normally getpath requires d:\ to begin the input
 38362                                  ; string. We relax this to state that if the d:\ is present then the path
 38363                                  ; may be a file. If D:/ (note the forward slash) is present then we have
 38364                                  ; a device.
 38365                                  
 38366 00006B8B E87E02                  	CALL    TextFromDrive
 38367 00006B8E B02F                    	MOV     AL,'/'                  ; path sep.
 38368 00006B90 AA                      	STOSB
 38369 00006B91 E825A6                  	call	StrCpy			; move remainder of string
 38370                                  
 38371 00006B94 F8                      	CLC                             ; everything OK.
 38372 00006B95 16                      	push	ss
 38373 00006B96 1F                      	pop	ds                      ; remainder of OK stuff
 38374                                  DoFile_retn:
 38375 00006B97 C3                      	retn
 38376                                  
 38377                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38378                                  %if 0
 38379                                  
 38380                                  no5Dshere:
 38381                                  	; 10/08/2018
 38382                                  	jmp	CheckThisDevice		; snoop for device
 38383                                  %endif
 38384                                  
 38385                                  ;.erre (no5Dshere - start5Dhack - 5D)
 38386                                  
 38387                                  ; We have a file. Get the raw CDS.
 38388                                  
 38389                                  DoFile:
 38390                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38391                                  
 38392 00006B98 E839FE                  	call	GetVisDrv               ; get proper CDS
 38393                                  	;mov	al,3 
 38394 00006B9B B003                    	MOV     AL,error_path_not_found ; Set up for possible bad file error
 38395 00006B9D 72F8                    	jc	short DoFile_retn  ; CARRY set -> bogus drive/spliced
 38396                                  
 38397                                  ; ThisCDS has correct CDS. DS:SI advanced to point to beginning of path/file.
 38398                                  ; Make sure that CDS has valid directory; ValidateCDS requires a temp buffer
 38399                                  ; Use the one that we are going to use (ES:DI).
 38400                                  
 38401                                  	;SAVE    <DS,SI,ES,DI>		; save all string pointers.
 38402 00006B9F 1E                      	push	ds
 38403 00006BA0 56                      	push	si
 38404 00006BA1 06                      	push	es
 38405 00006BA2 57                      	push	di
 38406 00006BA3 E806D6                  	call	ValidateCDS             ; poke CDS and make everything OK
 38407                                  	;RESTORE <DI,ES,SI,DS>		; get back pointers
 38408 00006BA6 5F                      	pop	di
 38409 00006BA7 07                      	pop	es
 38410 00006BA8 5E                      	pop	si
 38411 00006BA9 1F                      	pop	ds
 38412                                  	;mov	al,3
 38413 00006BAA B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38414                                  	;retc				; someone failed an operation
 38415 00006BAC 72E9                    	jc	short DoFile_retn
 38416                                  
 38417                                  ; ThisCDS points to correct CDS. It contains the correct text of the
 38418                                  ; current directory. Copy it in.
 38419                                  
 38420 00006BAE 1E                      	push	ds
 38421 00006BAF 56                      	push	si
 38422 00006BB0 36C536[A205]            	LDS     SI,[SS:THISCDS]		; point to CDS	;smr;SS Override
 38423 00006BB5 89FB                    	MOV     BX,DI                   ; point to destination
 38424                                  	;add	bx,[si+79] ; MSDOS 6.0
 38425 00006BB7 035C4F                  	ADD     BX,[SI+curdir.end]	; point to backup limit
 38426                                  	;lea	bp,[di+134]
 38427 00006BBA 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; regenerate end of buffer
 38428                                  					;AN000;
 38429 00006BBE E807A6                  	call	FStrCpy                 ; copy string. ES:DI point to end
 38430 00006BC1 4F                      	DEC     DI                      ; point to NUL byte
 38431                                  
 38432                                  ; Make sure that there is a path char at end.
 38433                                  
 38434 00006BC2 B05C                    	MOV     AL,'\'
 38435 00006BC4 263845FF                	CMP     [ES:DI-1],AL
 38436 00006BC8 7401                    	JZ	short GetOrig
 38437 00006BCA AA                      	STOSB
 38438                                  
 38439                                  ; Now get original string.
 38440                                  
 38441                                  GetOrig:
 38442 00006BCB 4F                      	DEC     DI                      ; point to path char
 38443 00006BCC 5E                      	pop	si
 38444 00006BCD 1F                      	pop	ds
 38445                                  
 38446                                  ; BX points to the end of the root part of the CDS (at where a path char
 38447                                  ; should be). Now, we decide whether we use this root or extend it with the
 38448                                  ; current directory. See if the input string begins with a leading 
 38450 00006BCE E8D000                  	CALL    PathSep                 ; is DS:SI a path sep?
 38451 00006BD1 7511                    	JNZ	short PathAssure	; no, DI is correct. Assure a path char
 38452 00006BD3 08C0                    	OR      AL,AL                   ; end of string?
 38453 00006BD5 7410                    	JZ	short DoCanon		; yes, skip.
 38454                                  ;
 38455                                  ; The string does begin with a \. Reset the beginning of the canonicalization
 38456                                  ; to this root. Make sure that there is a path char there and advance the
 38457                                  ; source string over all leading \'s.
 38458                                  ;
 38459 00006BD7 89DF                    	MOV     DI,BX                   ; back up to root point.
 38460                                  SkipPath:
 38461 00006BD9 AC                      	LODSB
 38462 00006BDA E817E4                  	call    PATHCHRCMP
 38463 00006BDD 74FA                    	JZ	short SkipPath
 38464 00006BDF 4E                      	DEC     SI
 38465 00006BE0 08C0                    	OR      AL,AL
 38466 00006BE2 7403                    	JZ	short DoCanon
 38467                                  
 38468                                  ; DS:SI start at some file name. ES:DI points at some path char. Drop one in
 38469                                  ; for yucks.
 38470                                  
 38471                                  PathAssure:
 38472 00006BE4 B05C                    	MOV     AL,'\'	; 5Ch
 38473 00006BE6 AA                      	STOSB
 38474                                  
 38475                                  ; ES:DI point to the correct spot for canonicalization to begin.
 38476                                  ; BP is the max extent to advance DI
 38477                                  ; BX is the backup limit for ..
 38478                                  
 38479                                  DoCanon:
 38480 00006BE7 E85200                  	CALL    Canonicalize            ; wham.
 38481                                  	;retc				; badly formatted path.
 38482 00006BEA 72AB                    	jc	short DoFile_retn
 38483                                  
 38484                                  ; The string has been moved to ES:DI. Reset world to DOS context, pointers
 38485                                  ; to wfp_start and do string substitution. BP is still the max position in
 38486                                  ; buffer.
 38487                                  
 38488 00006BEC 16                      	push	ss
 38489 00006BED 1F                      	pop	ds
 38490 00006BEE 8B3E[B205]              	MOV     DI,[WFP_START]		; DS:SI point to string
 38491 00006BF2 C536[A205]              	LDS     SI,[THISCDS]		; point to CDS
 38492 00006BF6 E81B02                  	CALL    PathPref                ; is there a prefix?
 38493 00006BF9 7514                    	JNZ	short DoSplice		; no, do splice
 38494                                  
 38495                                  ; We have a match. Check to see if we ended in a path char.
 38496                                  
 38497 00006BFB 8A44FF                  	MOV     AL,[SI-1]		; last char to match
 38498 00006BFE E8F3E3                  	call    PATHCHRCMP              ; did we end on a path char? (root)
 38499 00006C01 740C                    	JZ	short DoSplice		; yes, no current dir here.
 38500                                  Pathline:                               ; 2/13/KK
 38501 00006C03 26803D00                	CMP     BYTE [ES:DI],0		; end at NUL?
 38502 00006C07 7406                    	JZ	short DoSplice
 38503 00006C09 47                      	INC     DI                      ; point to after current path char
 38504 00006C0A 36893E[B605]            	MOV     [SS:CURR_DIR_END],DI	; point to correct spot ;smr;SS Override
 38505                                  
 38506                                  ; Splice the result.
 38507                                  
 38508                                  DoSplice:
 38509 00006C0F 16                      	push	ss
 38510 00006C10 1F                      	pop	ds			; back to DOSDATA
 38511 00006C11 8B36[B205]              	MOV     SI,[WFP_START]		; point to beginning of string
 38512 00006C15 31C9                    	XOR     CX,CX
 38513 00006C17 F606[7105]FF            	TEST	byte [FSPLICE],-1
 38514 00006C1C 7403                    	JZ	short SkipSplice
 38515 00006C1E E82A01                  	CALL    Splice                  ; replaces in place.
 38516                                  SkipSplice:
 38517                                  
 38518                                  ; The final thing is to assure ourselves that a FATREAD is done on the local
 38519                                  ; device.
 38520                                  
 38521 00006C21 16                      	push	ss
 38522 00006C22 1F                      	pop	ds
 38523 00006C23 C43E[A205]              	LES     DI,[THISCDS]		; point to correct drive
 38524                                  	;test	word [es:di+67],8000h
 38525                                  	; 17/12/2022
 38526                                  	;test	byte [es:di+68],80h
 38527 00006C27 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8 ; 04/12/2022
 38528                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 38529 00006C2C 750D                    	JNZ	short Done		; net, no fatread necessary (retnz)
 38530 00006C2E E30B                    	JCXZ    Done
 38531 00006C30 E8C0A6                  	call	ECritDisk
 38532 00006C33 E8F7E9                  	call	FATREAD_CDS
 38533 00006C36 E8D5A6                  	call	LCritDisk
 38534                                  	;mov	al, 3
 38535 00006C39 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38536                                  Done:   
 38537 00006C3B C3                      	retn                         ; any errors in carry flag.
 38538                                  
 38539                                  ; 13/07/2018
 38540                                  
 38541                                  ;BREAK <Canonicalize - copy a path and remove . and .. entries>
 38542                                  ;----------------------------------------------------------------------------
 38543                                  ;   Canonicalize - copy path removing . and .. entries.
 38544                                  ;
 38545                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 38546                                  ;               ES:DI - point to buffer
 38547                                  ;               BX - backup limit (offset from ES) points to slash
 38548                                  ;               BP - end of buffer
 38549                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 38550                                  ;                   syntax, etc.
 38551                                  ;               Carry Clear -
 38552                                  ;                   DS:DI - advanced to end of string
 38553                                  ;                   ES:DI - advanced to end of canonicalized form after nul
 38554                                  ;   Registers modified: AX CX DX (in addition to those above)
 38555                                  ;----------------------------------------------------------------------------
 38556                                  
 38557                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38558                                  
 38559                                  Canonicalize:
 38560                                  
 38561                                  ; We copy all leading path separators.
 38562                                  
 38563 00006C3C AC                      	LODSB                           ;   while (PathChr (*s))
 38564 00006C3D E8B4E3                  	call    PATHCHRCMP
 38565 00006C40 7507                    	JNZ	short CanonDec
 38566 00006C42 39EF                    	CMP     DI,BP                   ;       if (d > dlim)
 38567 00006C44 7319                    	JAE	short CanonBad		;           goto error;
 38568 00006C46 AA                      	STOSB
 38569 00006C47 EBF3                    	JMP	short Canonicalize	;           *d++ = *s++;
 38570                                  CanonDec:
 38571 00006C49 4E                      	DEC     SI
 38572                                  
 38573                                  ; Main canonicalization loop. We come here with DS:SI pointing to a textual
 38574                                  ; component (no leading path separators) and ES:DI being the destination
 38575                                  ; buffer.
 38576                                  
 38577                                  CanonLoop:
 38578                                  
 38579                                  ; If we are at the end of the source string, then we need to check to see that
 38580                                  ; a potential drive specifier is correctly terminated with a path sep char.
 38581                                  ; Otherwise, do nothing
 38582                                  
 38583 00006C4A 31C0                    	XOR     AX,AX
 38584 00006C4C 3804                    	CMP     [SI],AL                 ;       if (*s == 0) {
 38585 00006C4E 751A                    	JNZ	short DoComponent
 38586 00006C50 26807DFF3A              	CMP     BYTE [ES:DI-1],':'	;           if (d[-1] == ':')
 38587 00006C55 7505                    	JNZ	short DoTerminate
 38588 00006C57 B05C                    	MOV     AL,'\'                  ;               *d++ = '\';
 38589 00006C59 AA                      	STOSB
 38590 00006C5A 88E0                    	MOV     AL,AH
 38591                                  DoTerminate:
 38592 00006C5C AA                      	STOSB                           ;           *d++ = 0;
 38593 00006C5D F8                      	CLC                             ;           return (0);
 38594 00006C5E C3                      	retn
 38595                                  
 38596                                  CanonBad:
 38597 00006C5F E8CB01                  	CALL	ScanPathChar            ; check for path chars in rest of string
 38598                                  	;mov	al,3
 38599 00006C62 B003                    	MOV     AL,error_path_not_found ; Set up for bad path error
 38600 00006C64 7402                    	JZ	short PathEnc		; path character encountered in string
 38601                                  	;mov	al,2
 38602 00006C66 B002                    	MOV     AL,error_file_not_found ; Set bad file error
 38603                                  PathEnc:
 38604 00006C68 F9                      	STC
 38605                                  CanonBad_retn:
 38606 00006C69 C3                      	retn
 38607                                  
 38608                                  ; We have a textual component that we must copy. We uppercase it and truncate
 38609                                  ; it to 8.3
 38610                                  
 38611                                  DoComponent:                            ;           }
 38612 00006C6A E85000                  	CALL    CopyComponent		;       if (!CopyComponent (s, d))
 38613 00006C6D 72FA                    	jc	short CanonBad_retn	;           return (-1);
 38614                                  
 38615                                  ; We special case the . and .. cases.  These will be backed up.
 38616                                  
 38617                                  	;CMP	WORD PTR ES:[DI],'.' + (0 SHL 8)
 38618 00006C6F 26833D2E                	CMP	WORD [ES:DI],002Eh
 38619 00006C73 7408                    	JZ	short Skip1
 38620                                  	;CMP	WORD PTR ES:[DI],'..'
 38621 00006C75 26813D2E2E              	CMP     WORD [ES:DI],2E2Eh
 38622 00006C7A 750A                    	JNZ	short CanonNormal
 38623 00006C7C 4F                      	DEC     DI                      ;           d--;
 38624                                  Skip1:  
 38625 00006C7D E82A00                  	CALL    SkipBack                ;           SkipBack ();
 38626                                  	;mov	al,3
 38627 00006C80 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38628 00006C82 72E5                    	jc	short CanonBad_retn
 38629 00006C84 EB02                    	JMP     short CanonPath         ;           }
 38630                                  
 38631                                  ; We have a normal path. Advance destination pointer over it.
 38632                                  
 38633                                  CanonNormal:                            ;       else
 38634 00006C86 01CF                    	ADD     DI,CX                   ;           d += ct;
 38635                                  
 38636                                  ; We have successfully copied a component. We are now pointing at a path
 38637                                  ; sep char or are pointing at a nul or are pointing at something else.
 38638                                  ; If we point at something else, then we have an error.
 38639                                  
 38640                                  CanonPath:
 38641 00006C88 E81600                  	CALL    PathSep
 38642 00006C8B 75D2                    	JNZ	short CanonBad		; something else...
 38643                                  
 38644                                  ; Copy the first path char we see.
 38645                                  
 38646 00006C8D AC                      	LODSB                           ; get the char
 38647 00006C8E E863E3                  	call    PATHCHRCMP              ; is it path char?
 38648 00006C91 75B6                    	JNZ	short CanonDec		; no, go test for nul
 38649 00006C93 39EF                    	CMP     DI,BP                   ; beyond buffer end?
 38650 00006C95 73C8                    	JAE	short CanonBad		; yep, error.
 38651 00006C97 AA                      	STOSB                           ; copy the one byte
 38652                                  
 38653                                  ; Skip all remaining path chars
 38654                                  
 38655                                  CanonPathLoop:
 38656 00006C98 AC                      	LODSB                           ; get next byte
 38657 00006C99 E858E3                  	call    PATHCHRCMP              ; path char again?
 38658 00006C9C 74FA                    	JZ	short CanonPathLoop	; yep, grab another
 38659 00006C9E 4E                      	DEC     SI                      ; back up
 38660 00006C9F EBA9                    	JMP	short  CanonLoop	; go copy component
 38661                                  
 38662                                  ;BREAK <PathSep - determine if char is a path separator>
 38663                                  ;----------------------------------------------------------------------------
 38664                                  ;   PathSep - look at DS:SI and see if char is / \ or NUL
 38665                                  ;   Inputs:     DS:SI - point to a char
 38666                                  ;   Outputs:    AL has char from DS:SI (/ => \)
 38667                                  ;               Zero set if AL is / \ or NUL
 38668                                  ;               Zero reset otherwise
 38669                                  ;   Registers modified: AL
 38670                                  ;----------------------------------------------------------------------------
 38671                                  
 38672                                  PathSep:
 38673 00006CA1 8A04                    	MOV     AL,[SI]                 ; get the character
 38674                                  PathSepGotCh:				; already have character
 38675 00006CA3 08C0                    	OR      AL,AL                   ; test for zero
 38676 00006CA5 74C2                    	jz	short CanonBad_retn	; return if equal to zero (NUL)
 38677                                  	;call	PATHCHRCMP              ; check for path character
 38678                                  	;retn				; and return HIS determination
 38679                                  	; 18/12/2022
 38680 00006CA7 E94AE3                  	jmp	PATHCHRCMP
 38681                                  
 38682                                  
 38683                                  ;BREAK <SkipBack - move backwards to a path separator>
 38684                                  ;----------------------------------------------------------------------------
 38685                                  ;   SkipBack - look at ES:DI and backup until it points to a / ;   Inputs:     ES:DI - point to a char
 38687                                  ;               BX has current directory back up limit (point to a / \)
 38688                                  ;   Outputs:    ES:DI backed up to point to a path char
 38689                                  ;               AL has char from output ES:DI (path sep if carry clear)
 38690                                  ;               Carry set if illegal backup
 38691                                  ;               Carry Clear if ok
 38692                                  ;   Registers modified: DI,AL
 38693                                  ;----------------------------------------------------------------------------
 38694                                  
 38695                                  SkipBack:
 38696 00006CAA 39DF                    	CMP     DI,BX                   ;   while (TRUE) {
 38697 00006CAC 720B                    	JB	short SkipBad		;       if (d < dlim)
 38698 00006CAE 4F                      	DEC     DI                      ;           goto err;
 38699 00006CAF 268A05                  	MOV     AL,[ES:DI]		;       if (pathchr (*--d))
 38700 00006CB2 E83FE3                  	call    PATHCHRCMP              ;           break;
 38701 00006CB5 75F3                    	JNZ	short SkipBack		;       }
 38702 00006CB7 F8                      	CLC                             ;   return (0);
 38703 00006CB8 C3                      	retn				;
 38704                                  SkipBad:                                ;err:
 38705                                  	;mov	al,3
 38706 00006CB9 B003                    	MOV     AL,error_path_not_found ; bad path error
 38707 00006CBB F9                      	STC                             ;   return (-1);
 38708 00006CBC C3                      	retn				;
 38709                                  
 38710                                  ;Break <CopyComponent - copy out a file path component>
 38711                                  ;----------------------------------------------------------------------------
 38712                                  ;   CopyComponent - copy a file component from a path string (DS:SI) into ES:DI
 38713                                  ;
 38714                                  ;   Inputs:     DS:SI - source path
 38715                                  ;               ES:DI - destination
 38716                                  ;               ES:BP - end of buffer
 38717                                  ;   Outputs:    Carry Set - too long
 38718                                  ;               Carry Clear - DS:SI moved past component
 38719                                  ;                   CX has length of destination
 38720                                  ;   Registers modified: AX,CX,DX
 38721                                  ;----------------------------------------------------------------------------
 38722                                  
 38723                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38724                                  
 38725                                  CopyComponent:
 38726                                  
 38727                                  %define CopyBP	 [BP]		; word
 38728                                  %define CopyD	 [BP+2]		; dword
 38729                                  %define CopyDoff [BP+2]		; word
 38730                                  %define CopyS	 [BP+6]		; dword
 38731                                  %define CopySoff [BP+6]		; word
 38732                                  %define CopyTemp [BP+10]	; byte
 38733                                  
 38734 00006CBD 83EC0E                  	SUB     SP,14                   ; room for temp buffer
 38735 00006CC0 1E                      	push	ds
 38736 00006CC1 56                      	push	si
 38737 00006CC2 06                      	push	es
 38738 00006CC3 57                      	push	di
 38739 00006CC4 55                      	push	bp
 38740 00006CC5 89E5                    	MOV     BP,SP
 38741 00006CC7 B42E                    	MOV     AH,'.'
 38742 00006CC9 AC                      	LODSB
 38743 00006CCA AA                      	STOSB
 38744 00006CCB 38E0                    	CMP     AL,AH                   ;   if ((*d++=*s++) == '.') {
 38745 00006CCD 7518                    	JNZ	short NormalComp
 38746 00006CCF E8CFFF                  	CALL    PathSep                 ;       if (!pathsep(*s))
 38747 00006CD2 740B                    	JZ	short NulTerm
 38748                                  TryTwoDot:
 38749 00006CD4 AC                      	LODSB                           ;           if ((*d++=*s++) != '.'
 38750 00006CD5 AA                      	STOSB
 38751 00006CD6 38E0                    	CMP     AL,AH
 38752 00006CD8 7557                    	JNZ	short CopyBad
 38753 00006CDA E8C4FF                  	CALL    PathSep
 38754 00006CDD 7552                    	JNZ	short CopyBad		;               || !pathsep (*s))
 38755                                  NulTerm:                                ;               return -1;
 38756 00006CDF 30C0                    	XOR     AL,AL                   ;       *d++ = 0;
 38757 00006CE1 AA                      	STOSB
 38758 00006CE2 897606                  	MOV     CopySoff,SI
 38759 00006CE5 EB47                    	JMP     SHORT _GoodRet		;       }
 38760                                  NormalComp:                             ;   else {
 38761 00006CE7 8B7606                  	MOV     SI,CopySoff ; [bp+6]
 38762 00006CEA E845E2                  	call	NameTrans               ;       s = NameTrans (s, Name1);
 38763 00006CED 3B7606                  	CMP     SI,CopySoff             ;       if (s == CopySOff)
 38764 00006CF0 743F                    	JZ	short CopyBad		;           return (-1);
 38765 00006CF2 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	;       if (!fSharing) {;smr;SS Override
 38766 00006CF8 7510                    	JNZ	short DoPack
 38767 00006CFA 80E201                  	AND     DL,1                    ;           cMeta += fMeta;
 38768 00006CFD 360016[7A05]            	ADD	[ss:CMETA],DL		;           if (cMeta > 0);smr;SS Override
 38769 00006D02 7F2D                    	JG	short CopyBad		;               return (-1);
 38770 00006D04 7504                    	JNZ	short DoPack		;           else
 38771 00006D06 08D2                    	OR      DL,DL                   ;           if (cMeta == 0 && fMeta == 0)
 38772 00006D08 742F                    	JZ	short CopyBadPath	;               return (-1);
 38773                                  DoPack:                                 ;           }
 38774 00006D0A 897606                  	MOV     CopySoff,SI ; [bp+6]
 38775 00006D0D 16                      	push	ss
 38776 00006D0E 1F                      	pop	ds
 38777 00006D0F BE[4B05]                	MOV     SI,NAME1
 38778 00006D12 8D7E0A                  	LEA     DI,CopyTemp ; [bp+10]
 38779 00006D15 57                      	push	di
 38780 00006D16 E85DB3                  	call	PackName                ;       PackName (Name1, temp);
 38781 00006D19 5F                      	pop	di
 38782 00006D1A E8B4A4                  	call	StrLen                  ;       if (strlen(temp)+d > bp)
 38783 00006D1D 49                      	DEC     CX
 38784 00006D1E 034E02                  	ADD     CX,CopyDoff ; [bp+2]
 38785                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38786                                  	;cmp	cx,[bp+0]
 38787                                  	; 15/12/2022
 38788                                  	;cmp	cx,[bp]
 38789 00006D21 3B4E00                  	CMP	CX,CopyBP   ; [bp+0]
 38790 00006D24 730B                    	JAE	short CopyBad		;           return (-1);
 38791 00006D26 89FE                    	MOV     SI,DI                   ;       strcpy (d, temp);
 38792 00006D28 C47E02                  	LES     DI,CopyD    ; [bp+2]	
 38793 00006D2B E89AA4                  	call	FStrCpy
 38794                                  _GoodRet:				;       }
 38795 00006D2E F8                      	CLC
 38796 00006D2F EB0B                    	JMP     SHORT CopyEnd           ;   return 0;
 38797                                  CopyBad:
 38798 00006D31 F9                      	STC
 38799 00006D32 E8F800                  	CALL    ScanPathChar            ; check for path chars in rest of string
 38800                                  	;mov	al,2
 38801 00006D35 B002                    	MOV     AL,error_file_not_found ; Set up for bad file error
 38802 00006D37 7503                    	JNZ	short CopyEnd
 38803                                  CopyBadPath:
 38804 00006D39 F9                      	STC
 38805                                  	;mov	al,3
 38806 00006D3A B003                    	MOV     AL,error_path_not_found ; Set bad path error
 38807                                  CopyEnd:
 38808 00006D3C 5D                      	pop	bp
 38809 00006D3D 5F                      	pop	di
 38810 00006D3E 07                      	pop	es
 38811 00006D3F 5E                      	pop	si
 38812 00006D40 1F                      	pop	ds
 38813 00006D41 9F                      	LAHF
 38814 00006D42 83C40E                  	ADD     SP,14                   ; reclaim temp buffer
 38815 00006D45 E889A4                  	call	StrLen
 38816 00006D48 49                      	DEC     CX
 38817 00006D49 9E                      	SAHF
 38818 00006D4A C3                      	retn
 38819                                  
 38820                                  ; 14/05/2019 - Retro DOS v4.0
 38821                                  ; DOSCODE:AE22h (MSDOS 6.21, MSDOS.SYS)
 38822                                  
 38823                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38824                                  ; DOSCODE:ADBFh (MSDOS 5.0, MSDOS.SYS)
 38825                                  
 38826                                  ;Break <Splice - pseudo mount by string substitution>
 38827                                  ;----------------------------------------------------------------------------
 38828                                  ;   Splice - take a string and substitute a prefix if one exists. Change
 38829                                  ;       ThisCDS to point to physical drive CDS.
 38830                                  ;   Inputs:     DS:SI point to string
 38831                                  ;               NoSetDir = TRUE => exact matches with splice fail
 38832                                  ;   Outputs:    DS:SI points to thisCDS
 38833                                  ;               ES:DI points to DPB
 38834                                  ;               String at DS:SI may be reduced in length by removing prefix
 38835                                  ;               and substituting drive letter.
 38836                                  ;               CX = 0 If no splice done
 38837                                  ;               CX <> 0 otherwise
 38838                                  ;               ThisCDS points to proper CDS if spliced, otherwise it is
 38839                                  ;                   left alone
 38840                                  ;               ThisDPB points to proper DPB
 38841                                  ;   Registers modified: DS:SI, ES:DI, BX,AX,CX
 38842                                  ;----------------------------------------------------------------------------
 38843                                  
 38844                                  Splice:
 38845 00006D4B 36F606[5A00]FF          	TEST	byte [SS:SPLICES],-1	;smr;SS Override
 38846 00006D51 7469                    	JZ	short AllDone
 38847 00006D53 36FF36[A205]            	push	word [SS:THISCDS]
 38848 00006D58 36FF36[A405]            	push	word [SS:THISCDS+2]	; TmpCDS = ThisCDS;smr;SS Override
 38849 00006D5D 1E                      	push	ds
 38850 00006D5E 56                      	push	si
 38851 00006D5F 5F                      	pop	di
 38852 00006D60 07                      	pop	es
 38853 00006D61 31C0                    	XOR     AX,AX                   ;   for (i=1; s = GetCDSFromDrv (i); i++)
 38854                                  SpliceScan:
 38855 00006D63 E8DFFC                  	call	GetCDSFromDrv
 38856 00006D66 724A                    	JC	short SpliceDone
 38857 00006D68 FEC0                    	INC     AL
 38858                                  	; 17/12/2022
 38859                                  	;test	byte [si+68],20h
 38860 00006D6A F6444420                	test	byte [si+curdir.flags+1],curdir_splice>>8 ; 04/12/2022
 38861                                  	;;test	word [si+67],2000h
 38862                                  	;TEST	word [SI+curdir.flags],curdir_splice
 38863 00006D6E 74F3                    	JZ	short SpliceScan 	;       if ( Spliced (i) ) {
 38864 00006D70 57                      	push	di
 38865 00006D71 E8A000                  	CALL    PathPref                ;           if (!PathPref (s, d))
 38866 00006D74 7403                    	JZ	short SpliceFound	;
 38867                                  SpliceSkip:
 38868 00006D76 5F                      	pop	di
 38869 00006D77 EBEA                    	JMP	short SpliceScan	;               continue;
 38870                                  SpliceFound:
 38871 00006D79 26803D00                	CMP     BYTE [ES:DI],0		;           if (*s || NoSetDir) {
 38872 00006D7D 7508                    	JNZ	short SpliceDo
 38873 00006D7F 36F606[4C03]FF          	TEST	byte [ss:NoSetDir],-1			;smr;SS Override
 38874 00006D85 75EF                    	JNZ	short SpliceSkip
 38875                                  SpliceDo:
 38876 00006D87 89FE                    	MOV     SI,DI                   ;               p = src + strlen (p);
 38877 00006D89 06                      	push	es
 38878 00006D8A 1F                      	pop	ds
 38879 00006D8B 5F                      	pop	di
 38880 00006D8C E87F00                  	CALL	TextFromDrive1          ;               src = TextFromDrive1(src,i);
 38881 00006D8F 36A1[B605]              	MOV     AX,[SS:CURR_DIR_END]			;smr;SS Override
 38882 00006D93 09C0                    	OR      AX,AX
 38883 00006D95 7808                    	JS	short NoPoke
 38884 00006D97 01F8                    	ADD     AX,DI                   ;               curdirend += src-p;
 38885 00006D99 29F0                    	SUB     AX,SI
 38886 00006D9B 36A3[B605]              	MOV     [SS:CURR_DIR_END],AX			;smr;SS Override
 38887                                  NoPoke:
 38888 00006D9F 803C00                  	CMP     BYTE [SI],0		;               if (*p)
 38889 00006DA2 7503                    	JNZ	short SpliceCopy	;                   *src++ = '\\';
 38890 00006DA4 B05C                    	MOV     AL,"\"
 38891 00006DA6 AA                      	STOSB
 38892                                  SpliceCopy:                             ;               strcpy (src, p);
 38893 00006DA7 E81EA4                  	call	FStrCpy
 38894 00006DAA 83C404                  	ADD     SP,4                    ; throw away saved stuff
 38895 00006DAD 80C901                  	OR      CL,1                    ; signal splice done.
 38896 00006DB0 EB0C                    	JMP     SHORT DoSet             ;               return;
 38897                                  SpliceDone:                             ;               }
 38898 00006DB2 368F06[A405]            	pop	word [SS:THISCDS+2]     ;   ThisCDS = TmpCDS;
 38899 00006DB7 368F06[A205]            	pop	word [SS:THISCDS]			;smr;SS Override
 38900                                  AllDone:
 38901 00006DBC 31C9                    	XOR     CX,CX
 38902                                  DoSet:
 38903 00006DBE 36C536[A205]            	LDS     SI,[SS:THISCDS]		;   ThisDPB = ThisCDS->devptr;;smr;SS Override
 38904                                  	;les	di,[si+69]
 38905 00006DC3 C47C45                  	LES     DI,[SI+curdir.devptr]	
 38906 00006DC6 36893E[8A05]            	MOV	[SS:THISDPB],DI				;smr;SS Override
 38907 00006DCB 368C06[8C05]            	MOV	[SS:THISDPB+2],ES			;smr;SS Override
 38908                                  Splice_retn:
 38909 00006DD0 C3                      	retn
 38910                                  
 38911                                  ; 15/05/2019 - Retro DOS v4.0
 38912                                  ; DOSCODE:AEA9h (MSDOS 6.21, MSDOS.SYS)
 38913                                  
 38914                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38915                                  ; DOSCODE:AE46h (MSDOS 5.0, MSDOS.SYS)
 38916                                  
 38917                                  ;Break <$NameTrans - partially process a name>
 38918                                  ;----------------------------------------------------------------------------
 38919                                  ;   $NameTrans - allow users to see what names get mapped to. This call
 38920                                  ;   performs only string substitution and canonicalization, not splicing.  Due
 38921                                  ;   to Transpath playing games with devices, we need to insure that the output
 38922                                  ;   has drive letter and : in it.
 38923                                  ;
 38924                                  ;   Inputs:     DS:SI - source string for translation
 38925                                  ;               ES:DI - pointer to buffer
 38926                                  ;   Outputs:
 38927                                  ;       Carry Clear
 38928                                  ;               Buffer at ES:DI is filled in with data
 38929                                  ;               ES:DI point byte after nul byte at end of dest string in buffer
 38930                                  ;       Carry Set
 38931                                  ;               AX = error_path_not_found
 38932                                  ;   Registers modified: all
 38933                                  ;----------------------------------------------------------------------------
 38934                                  
 38935                                  _$NameTrans:
 38936 00006DD1 1E                      	push	ds
 38937 00006DD2 56                      	push	si
 38938 00006DD3 06                      	push	es
 38939 00006DD4 57                      	push	di
 38940 00006DD5 51                      	push	cx ; MSDOS 6.0
 38941                                  	
 38942                                  	; MSDOS 6.0	
 38943                                  ; M027 - Start
 38944                                  ;
 38945                                  ; Sattrib must be set up with default values here. Otherwise, the value from
 38946                                  ; a previous DOS call is used for attrib and DevName thinks it is not a 
 38947                                  ; device if the old call set the volume attribute bit. Note that devname in
 38948                                  ; dir2.asm gets ultimately called by Transpath. See also M026. Also save
 38949                                  ; and restore CX.
 38950                                  
 38951                                  	;mov	ch,16h
 38952 00006DD6 B516                    	mov     ch,attr_hidden+attr_system+attr_directory
 38953 00006DD8 E8B902                  	call	SetAttrib
 38954                                  
 38955                                  ; M027 - End
 38956                                  
 38957                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38958 00006DDB BF[BE03]                	MOV     DI,OPENBUF
 38959 00006DDE E8E6FC                  	CALL    TransPath               ; to translation (everything)
 38960 00006DE1 59                      	pop	cx ; MSDOS 6.0
 38961 00006DE2 5F                      	pop     di
 38962 00006DE3 07                      	pop	es
 38963 00006DE4 5E                      	pop     si
 38964 00006DE5 1F                      	pop     ds
 38965 00006DE6 7303                    	JNC	short TransOK
 38966 00006DE8 E95598                  	jmp	SYS_RET_ERR
 38967                                  TransOK:
 38968 00006DEB BE[BE03]                	MOV     SI,OPENBUF
 38969 00006DEE 16                      	push	ss
 38970 00006DEF 1F                      	pop	ds
 38971                                  ;GotText:
 38972 00006DF0 E8D5A3                  	call	FStrCpy
 38973 00006DF3 E94198                  	jmp	SYS_RET_OK
 38974                                  
 38975                                  ;Break   <DriveFromText - return drive number from a text string>
 38976                                  ;----------------------------------------------------------------------------
 38977                                  ;   DriveFromText - examine DS:SI and remove a drive letter, advancing the
 38978                                  ;   pointer.
 38979                                  ;
 38980                                  ;   Inputs:     DS:SI point to a text string
 38981                                  ;   Outputs:    AL has drive number
 38982                                  ;               DS:SI advanced
 38983                                  ;   Registers modified: AX,SI.
 38984                                  ;----------------------------------------------------------------------------
 38985                                  
 38986                                  DriveFromText:
 38987 00006DF6 30C0                    	XOR     AL,AL                   ;       drive = 0;
 38988                                  	;CMP	BYTE [SI],0		;       if (*s &&
 38989                                  	; 23/09/2023
 38990 00006DF8 3804                    	cmp	[si],al ; 0
 38991 00006DFA 74D4                    	jz	short Splice_retn
 38992 00006DFC 807C013A                	CMP     BYTE [SI+1],':'		;           s[1] == ':') {
 38993 00006E00 75CE                    	jnz	short Splice_retn
 38994 00006E02 AD                      	LODSW                           ;           drive = (*s | 020) - 'a'+1;
 38995 00006E03 0C20                    	OR      AL,20h
 38996                                  	;sub	al,60h
 38997 00006E05 2C60                    	SUB     AL,'a'-1                ;           s += 2;
 38998 00006E07 75C7                    	jnz	short Splice_retn
 38999 00006E09 B0FF                    	MOV	AL,-1                   ; nuke AL...
 39000                                  	; 23/09/2023
 39001                                  	;dec	al ; -1
 39002 00006E0B C3                      	retn				;           }
 39003                                  
 39004                                  ;Break   <TextFromDrive - convert a drive number to a text string>
 39005                                  ;----------------------------------------------------------------------------
 39006                                  ;   TextFromDrive - turn AL into a drive letter: and put it at es:di with
 39007                                  ;   trailing :. TextFromDrive1 takes a 1-based number.
 39008                                  ;
 39009                                  ;   Inputs:     AL has 0-based drive number
 39010                                  ;   Outputs:    ES:DI advanced
 39011                                  ;   Registers modified: AX
 39012                                  ;----------------------------------------------------------------------------
 39013                                  
 39014                                  TextFromDrive:
 39015 00006E0C FEC0                    	INC     AL
 39016                                  TextFromDrive1:
 39017                                  	;add	al,40h
 39018 00006E0E 0440                    	ADD     AL,'A'-1                ;   *d++ = drive-1+'A';
 39019 00006E10 B43A                    	MOV     AH,":"	; 3Ah           ;   strcat (d, ":");
 39020 00006E12 AB                      	STOSW
 39021                                  PathPref_retn:
 39022 00006E13 C3                      	retn
 39023                                  
 39024                                  ;Break   <PathPref - see if one path is a prefix of another>
 39025                                  ;----------------------------------------------------------------------------
 39026                                  ;   PathPref - compare DS:SI with ES:DI to see if one is the prefix of the
 39027                                  ;   other.  Remember that only at a pathchar break are we allowed to have a
 39028                                  ;   prefix: A:\ and A:\FOO
 39029                                  ;
 39030                                  ;   Inputs:     DS:SI potential prefix
 39031                                  ;               ES:DI string
 39032                                  ;   Outputs:    Zero set => prefix found
 39033                                  ;                   DI/SI advanced past matching part
 39034                                  ;               Zero reset => no prefix, DS/SI garbage
 39035                                  ;   Registers modified: CX
 39036                                  ;----------------------------------------------------------------------------
 39037                                  
 39038                                  PathPref:
 39039 00006E14 E8C8A3                  	call	DStrLen                 ; get length
 39040 00006E17 49                      	DEC     CX                      ; do not include nul byte
 39041 00006E18 F3A6                    	REPZ    CMPSB                   ; compare
 39042 00006E1A 75F7                    	jnz	short PathPref_retn	; if NZ then return NZ
 39043 00006E1C 50                      	push	ax			; save char register
 39044 00006E1D 8A44FF                  	MOV     AL,[SI-1]               ; get last byte to match
 39045 00006E20 E8D1E1                  	call    PATHCHRCMP              ; is it a path char (Root!)
 39046 00006E23 7406                    	JZ	short Prefix		; yes, match root (I hope)
 39047                                  NotSep:                                 ; 2/13/KK
 39048 00006E25 268A05                  	MOV     AL,[ES:DI]		; get next char to match
 39049 00006E28 E878FE                  	CALL    PathSepGotCh            ; was it a pathchar?
 39050                                  Prefix:
 39051 00006E2B 58                      	pop	ax			; get back original
 39052 00006E2C C3                      	retn
 39053                                  
 39054                                  ;Break   <ScanPathChar - see if there is a path character in a string>
 39055                                  ;----------------------------------------------------------------------------
 39056                                  ;     ScanPathChar - search through the string (pointed to by DS:SI) for
 39057                                  ;     a path separator.
 39058                                  ;
 39059                                  ;     Input:    DS:SI target string (null terminated)
 39060                                  ;     Output:   Zero set => path separator encountered in string
 39061                                  ;               Zero clear => null encountered
 39062                                  ;     Registers modified: SI
 39063                                  ;----------------------------------------------------------------------------
 39064                                  
 39065                                  ScanPathChar:
 39066 00006E2D AC                      	LODSB                           ; fetch a character
 39067 00006E2E E872FE                  	call    PathSepGotCh
 39068 00006E31 75FA                    	JNZ	short ScanPathChar	; not \, / or NUL => go back for more
 39069                                  	;call	PATHCHRCMP              ; path separator?
 39070                                  	;retn
 39071                                  	; 18/12/2022
 39072 00006E33 E9BEE1                  	jmp	PATHCHRCMP
 39073                                  
 39074                                  ;============================================================================
 39075                                  ; FILE.ASM, MSDOS 6.0, 1991
 39076                                  ;============================================================================
 39077                                  ; 14/07/2018 - Retro DOS v3.0
 39078                                  
 39079                                  ; 13/05/2019 - Retro DOS v4.0
 39080                                  ; DOSCODE:AF10h (MSDOS 6.21, MSDOS.SYS)
 39081                                  
 39082                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39083                                  ; DOSCODE:AEADh (MSDOS 5.0, MSDOS.SYS)
 39084                                  
 39085                                  ; MSDOS 2.11
 39086                                  ;BREAK <$Open - open a file handle>
 39087                                  ;----------------------------------------------------------------------------
 39088                                  ;   Assembler usage:
 39089                                  ;           LDS     DX, Name
 39090                                  ;           MOV     AH, Open
 39091                                  ;           MOV     AL, access
 39092                                  ;           INT     int_command
 39093                                  ;
 39094                                  ;       ACCESS          Function
 39095                                  ;       ------          --------
 39096                                  ;       open_for_read   file is opened for reading
 39097                                  ;       open_for_write  file is opened for writing
 39098                                  ;       open_for_both   file is opened for both reading and writing.
 39099                                  ;
 39100                                  ;   Error returns:
 39101                                  ;           AX = error_invalid_access
 39102                                  ;              = error_file_not_found
 39103                                  ;              = error_access_denied
 39104                                  ;              = error_too_many_open_files
 39105                                  ;----------------------------------------------------------------------------
 39106                                  
 39107                                  ; MSDOS 6.0
 39108                                  ;	BREAK <$Open - open a file from a path string>
 39109                                  ;----------------------------------------------------------------------------
 39110                                  ;
 39111                                  ;**	$OPen - Open a File
 39112                                  ;
 39113                                  ;	given a path name in DS:DX and an open mode in AL, $Open opens the
 39114                                  ;	file and and returns a handle
 39115                                  ;
 39116                                  ;	ENTRY	(DS:DX) = pointer to asciz name
 39117                                  ;		(AL) = open mode
 39118                                  ;	EXIT	'C' clear if OK
 39119                                  ;		  (ax) = file handle
 39120                                  ;		'C' set if error
 39121                                  ;		  (ax) = error code
 39122                                  ;	USES	all
 39123                                  ;
 39124                                  ;----------------------------------------------------------------------------
 39125                                  
 39126                                  ; 13/05/2019 - Retro DOS v4.0
 39127                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39128                                  
 39129                                  _$OPEN:       
 39130 00006E36 30E4                    	xor	ah,ah  ; MSDOS 6.0	
 39131                                  _$Open2:
 39132                                  	;mov	ch,16h
 39133 00006E38 B516                    	mov	ch,attr_hidden+attr_system+attr_directory
 39134 00006E3A E85702                  	call	SetAttrib
 39135 00006E3D B9[F82A]                	mov	cx,DOS_OPEN
 39136                                  
 39137                                  	;xor	ah,ah  ; MSDOS 3.3
 39138                                  
 39139 00006E40 50                      	push	ax
 39140                                  
 39141                                  ;*	General file open/create code. The $CREATE call and the various
 39142                                  ;	$OPEN calls all come here.
 39143                                  ;
 39144                                  ;	We'll share a lot of the standard stuff of allocating SFTs, cracking
 39145                                  ;	path names, etc., and then dispatch to our individual handlers.
 39146                                  ;	WARNING - this info and list is just a guess, not definitive - jgl
 39147                                  ;
 39148                                  ;	(TOS) = create mode
 39149                                  ;	(CX) = address of routine to call to do actual function
 39150                                  ;	(DS:DX) = ASCIZ name
 39151                                  ;	SAttrib = Attribute mask
 39152                                  
 39153                                  ;	Get a free SFT and mark it "being allocated"
 39154                                  
 39155                                  AccessFile:
 39156 00006E41 E8AFA4                  	call	ECritSFT
 39157 00006E44 E8D8F7                  	call	SFNFree			; get a free sfn
 39158 00006E47 E8C4A4                  	call	LCritSFT
 39159 00006E4A 7214                    	jc	short OpenFailJ		; oops, no free sft's
 39160 00006E4C 36891E[AA05]            	MOV	[SS:SFN],BX		; save the SFN for later;smr;SS Override
 39161 00006E51 36893E[9E05]            	MOV	[SS:THISSFT],DI		; save the SF offset	;smr;SS Override
 39162 00006E56 368C06[A005]            	MOV	[SS:THISSFT+2],ES	; save the SF segment	;smr;SS Override
 39163                                  
 39164                                  ;	Find a free area in the user's JFN table.
 39165                                  
 39166 00006E5B E8AEF7                  	call	JFNFree			; get a free jfn
 39167 00006E5E 7303                    	jnc	short SaveJFN
 39168                                  OpenFailJ:
 39169 00006E60 E99300                  	JMP	OpenFail		; there were free JFNs... try SFN
 39170                                  
 39171                                  SaveJFN:
 39172 00006E63 36893E[AE05]            	mov	[ss:PJFN],DI		; save the jfn offset	;smr;SS Override
 39173 00006E68 368C06[B005]            	MOV	[ss:PJFN+2],ES		; save the jfn segment	;smr;SS Override
 39174 00006E6D 36891E[AC05]            	MOV	[ss:JFN],BX		; save the jfn itself	;smr;SS Override
 39175                                  
 39176                                  ;	We have been given an JFN. We lock it down to prevent other tasks from
 39177                                  ;	reusing the same JFN.
 39178                                  
 39179 00006E72 368B1E[AA05]            	MOV	BX,[ss:SFN]					;smr;SS Override
 39180 00006E77 26881D                  	MOV	[ES:DI],BL		; assign the JFN
 39181 00006E7A 89D6                    	MOV	SI,DX			; get name in appropriate place
 39182 00006E7C BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 39183 00006E7F 51                      	push	cx			; save routine to call
 39184 00006E80 E844FC                  	call	TransPath		; convert the path
 39185 00006E83 5B                      	pop	bx			; (bx) = routine to call
 39186                                  
 39187 00006E84 36C536[9E05]            	LDS	SI,[SS:THISSFT]					;smr;SS Override
 39188 00006E89 720A                    	JC	short OpenCleanJ	; no error, go and open file
 39189 00006E8B 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1				;smr;SS Override
 39190 00006E91 7404                    	JZ	short SetSearch
 39191                                  	;mov	al,2
 39192 00006E93 B002                    	MOV	AL,error_file_not_found ; no meta chars allowed
 39193                                  OpenCleanJ:
 39194 00006E95 EB50                    	JMP	short OpenClean
 39195                                  
 39196                                  SetSearch:
 39197 00006E97 58                      	pop	ax			; Mode (Open), Attributes (Create)
 39198                                  
 39199                                  ;	We need to get the new inheritance bits.
 39200                                  
 39201 00006E98 31C9                    	xor	cx,cx
 39202                                  	; MSDOS 6.0
 39203                                  	;mov	[si+2],cx ; 0
 39204 00006E9A 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],cx ; initialize mode field to 0
 39205                                  	;mov    [si+51],cx ; 0
 39206 00006E9D 894C33                  	MOV	[SI+SF_ENTRY.sf_MFT],cx	 ; clean out sharing info
 39207                                  	;
 39208 00006EA0 81FB[F82A]              	CMP	BX,DOS_OPEN
 39209 00006EA4 7509                    	JNZ	short _DoOper
 39210                                  	;test   al,80h
 39211 00006EA6 A880                    	test	AL,SHARING_NO_INHERIT	; look for no inher
 39212 00006EA8 7405                    	JZ	short _DoOper ; 10/08/2018
 39213 00006EAA 247F                    	AND	AL,7Fh			; mask off inherit bit
 39214                                  	;mov	cx,1000h
 39215 00006EAC B90010                  	MOV	CX,sf_no_inherit
 39216                                  _DoOper:
 39217                                  	;; MSDOS 3.3
 39218                                  	;;mov	word [si+2], 0
 39219                                  	;;mov	word [si+33h], 0
 39220                                  	;MOV	word [SI+SF_ENTRY.sf_mode],0
 39221                                  	;MOV	word [SI+SF_ENTRY.sf_MFT],0
 39222                                  
 39223                                  	; MSDOS 6.0
 39224                                  ;**	Check if this is an extended open. If so you must set the
 39225                                  ;	modes in sf_mode. Call Set_EXT_mode to do all this. See
 39226                                  ;	Set_EXT_mode in creat.asm
 39227                                  
 39228                                  	; MSDOS 6.0
 39229                                  	;SAVE	<di, es>                ;M022 conditional removed here
 39230 00006EAF 57                      	push	di
 39231 00006EB0 06                      	push	es
 39232 00006EB1 1E                      	push	ds
 39233 00006EB2 07                      	pop	es
 39234 00006EB3 56                      	push	si
 39235 00006EB4 5F                      	pop	di			; (es:di) = SFT address
 39236 00006EB5 E82CBC                  	call	Set_EXT_mode
 39237                                  	;RESTORE <es, di>
 39238 00006EB8 07                      	pop	es
 39239 00006EB9 5F                      	pop	di
 39240                                  
 39241                                  	;Context DS
 39242 00006EBA 16                      	push	ss
 39243 00006EBB 1F                      	pop	ds	
 39244                                  
 39245 00006EBC 51                      	push	cx
 39246 00006EBD FFD3                    	CALL	BX			; blam!
 39247 00006EBF 59                      	pop	cx
 39248 00006EC0 C536[9E05]              	LDS	SI,[THISSFT]
 39249 00006EC4 721A                    	JC	short OpenE2		;AN000;FT. chek extended open hooks first
 39250                                  	;jc	short OpenE ; MSDOS 3.3
 39251                                  
 39252                                  ;	The SFT was successfully opened. Remove busy mark.
 39253                                  
 39254                                  OpenOK:
 39255                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],1
 39256 00006EC6 C7040100                	mov	word [SI],1
 39257                                  	;or	[SI+5],cx
 39258 00006ECA 094C05                  	OR	[SI+SF_ENTRY.sf_flags],CX ; set no inherit bit if necessary
 39259                                  
 39260                                  ; If the open mode is 70, we scan the system for other SFT's with the same
 39261                                  ; contents. If we find one, then we can 'collapse' thissft onto the already
 39262                                  ; opened one. Otherwise we use this new one. We compare uid/pid/mode/mft
 39263                                  ;
 39264                                  ; Since this is only relevant on sharer systems, we stick this code into the
 39265                                  ; sharer.
 39266                                  
 39267 00006ECD 36A1[AC05]              	MOV	AX,[ss:JFN]				;smr;SS Override
 39268 00006ED1 36FF1E[C000]            	Call	far [ss:JShare+(12*4)]	; 12 = ShCol	;smr;SS Override
 39269                                  
 39270 00006ED6 36C706[AA05]FFFF        	MOV	word [ss:SFN],-1	; clear out sfn pointer	;smr;SS Override
 39271                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39272                                  OpenOkj:
 39273 00006EDD E95797                  	jmp	SYS_RET_OK		; bye with no errors
 39274                                  
 39275                                  	; MSDOS 6.0
 39276                                  ;Extended Open hooks check
 39277                                  OpenE2:					;AN000;;EO.
 39278 00006EE0 83F857                  	CMP	AX,error_invalid_parameter ;AN000;;EO. IFS extended open ?
 39279 00006EE3 7503                    	JNZ	short OpenE		;AN000;;EO. no.
 39280 00006EE5 EB11                    	JMP	short OpenCritLeave	;AN000;;EO. keep handle
 39281                                  
 39282                                  ;	Extended Open hooks check
 39283                                  ;
 39284                                  ;	AL has error code.  Stack has argument to dos_open/dos_create.
 39285                                  
 39286                                  OpenClean:
 39287 00006EE7 5B                      	pop	bx			; clean off stack
 39288                                  OpenE:
 39289                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],0 ; release SFT
 39290 00006EE8 C7040000                	mov	word [SI],0
 39291 00006EEC 36C536[AE05]            	LDS	SI,[ss:PJFN]		;smr;SS Override
 39292 00006EF1 C604FF                  	MOV	BYTE [SI],0FFh		; free the SFN...
 39293 00006EF4 EB02                    	JMP	SHORT OpenCritLeave
 39294                                  
 39295                                  OpenFail:
 39296 00006EF6 FB                      	STI
 39297 00006EF7 59                      	pop	cx			; Clean stack
 39298                                  OpenCritLeave:
 39299 00006EF8 36C706[AA05]FFFF        	MOV	word [SS:SFN],-1	; remove mark.
 39300                                  
 39301                                  	; MSDOS 6.0
 39302                                  ; File Tagging DOS 4.00
 39303 00006EFF 36833E[2403]25          	CMP	word [SS:EXTERR],error_Code_Page_Mismatched
 39304                                  					;AN000;;FT. code page mismatch
 39305 00006F05 7503                    	JNZ	short NORERR	  	;AN000;;FT. no
 39306 00006F07 E93E97                  	jmp	From_GetSet		;AN000;;FT. yes
 39307                                  NORERR: 				;AN000;
 39308                                  ; File Tagging DOS 4.00
 39309                                  
 39310 00006F0A E93397                  	jmp	SYS_RET_ERR		; no free, return error
 39311                                  
 39312                                  ; MSDOS 2.11
 39313                                  ;BREAK <$CREAT - creat a new file and open him for input>
 39314                                  ;----------------------------------------------------------------------------
 39315                                  ;   Assembler usage:
 39316                                  ;           LDS     DX, name
 39317                                  ;           MOV     AH, Creat
 39318                                  ;           MOV     CX, access
 39319                                  ;           INT     21h
 39320                                  ;       ; AX now has the handle
 39321                                  ;
 39322                                  ;   Error returns:
 39323                                  ;           AX = error_access_denied
 39324                                  ;              = error_path_not_found
 39325                                  ;              = error_too_many_open_files
 39326                                  ;----------------------------------------------------------------------------
 39327                                  
 39328                                  ; MSDOS 6.0
 39329                                  ;	BREAK <$Creat - create a brand-new file>
 39330                                  ;----------------------------------------------------------------------------
 39331                                  ;
 39332                                  ;**	$Creat - Create a File
 39333                                  ;
 39334                                  ;	$Creat creates the directory entry specified in DS:DX and gives it the
 39335                                  ;	initial attributes contained in CX
 39336                                  ;
 39337                                  ;	ENTRY	(DS:DX) = ASCIZ path name
 39338                                  ;		(CX) = initial attributes
 39339                                  ;	EXIT	'C' set if error
 39340                                  ;		  (ax) = error code
 39341                                  ;		'C' clear if OK
 39342                                  ;		  (ax) = file handle
 39343                                  ;	USES	all
 39344                                  ;
 39345                                  ;----------------------------------------------------------------------------
 39346                                  
 39347                                  _$CREAT:
 39348 00006F0D 51                      	push	cx			; Save attributes on stack
 39349 00006F0E B9[D229]                	mov	CX,DOS_CREATE		; routine to call
 39350                                  AccessSet:
 39351                                  	;mov	byte [ss:SATTRIB],6
 39352 00006F11 36C606[6D05]06          	mov	byte [ss:SATTRIB],attr_hidden+attr_system ;smr;SS Override
 39353                                  	; 10/08/2018
 39354 00006F17 E927FF                  	JMP	AccessFile		; use good ol' open
 39355                                  
 39356                                  ; MSDOS 6.0 (MSDOS 3.3)
 39357                                  ;	BREAK <$CHMOD - change file attributes>
 39358                                  ;----------------------------------------------------------------------------
 39359                                  ;
 39360                                  ;**	$CHMOD - Change File Attributes
 39361                                  ;
 39362                                  ;   Assembler usage:
 39363                                  ;	    LDS     DX, name
 39364                                  ;	    MOV     CX, attributes
 39365                                  ;	    MOV     AL,func (0=get, 1=set)
 39366                                  ;	    INT     21h
 39367                                  ;   Error returns:
 39368                                  ;	    AX = error_path_not_found
 39369                                  ;	    AX = error_access_denied
 39370                                  ;
 39371                                  ;----------------------------------------------------------------------------
 39372                                  
 39373                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39374                                  _$CHMOD:
 39375                                  	; 05/08/2018 - Retro DOS v3.0
 39376                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6FCCh ,
 39377 00006F1A BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 39378 00006F1D 50                      	push	ax
 39379 00006F1E 51                      	push	cx			; save function and attributes
 39380 00006F1F 89D6                    	MOV	SI,DX			; get things in appropriate places
 39381 00006F21 E8A7FB                  	call	TransPathSet		; get correct path
 39382 00006F24 59                      	pop	cx
 39383 00006F25 58                      	pop	ax			; and get function and attrs back
 39384 00006F26 7257                    	JC	short ChModErr		; errors get mapped to path not found
 39385 00006F28 16                      	push	ss			; set up for later possible calls
 39386 00006F29 1F                      	pop	ds
 39387 00006F2A 803E[7A05]FF            	CMP	byte [CMETA],-1
 39388 00006F2F 754E                    	JNZ	short ChModErr
 39389                                  	;mov	byte [SATTRIB],16h
 39390 00006F31 C606[6D05]16            	MOV	byte [SATTRIB],attr_hidden+attr_system+attr_directory
 39391 00006F36 2C01                    	SUB	AL,1			; fast way to discriminate
 39392 00006F38 720B                    	JB	short ChModGet		; 0 -> go get value
 39393 00006F3A 7417                    	JZ	short ChModSet		; 1 -> go set value
 39394                                  	;mov	byte [EXTERR_LOCUS],1
 39395 00006F3C C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 39396                                  	;mov	al,1
 39397 00006F41 B001                    	mov	al,error_invalid_function ; bad value
 39398                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39399                                  chmod_errj:	
 39400                                  	;;jmp	SYS_RET_ERR
 39401                                  	;jmp	short ChModE	
 39402 00006F43 EBC5                    	jmp	short NORERR	; 06/12/2022
 39403                                  ChModGet:
 39404 00006F45 E875B9                  	call	GET_FILE_INFO		; suck out the ol' info
 39405 00006F48 7237                    	JC	short ChModE		; error codes are already set for ret
 39406 00006F4A E83495                  	call	Get_User_Stack		; point to user saved vaiables
 39407                                  	;mov	[SI+4],ax
 39408 00006F4D 894404                  	MOV	[SI+user_env.user_CX],AX ; return the attributes
 39409                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 39410                                  OpenOkj2:
 39411                                  	; 17/12/2022
 39412                                  	;;jmp	SYS_RET_OK		; say sayonara
 39413                                  	;jmp	short OpenOkj
 39414                                  	; 25/06/2019
 39415 00006F50 E9E796                  	jmp	SYS_RET_OK_clc
 39416                                  
 39417                                  ChModSet:
 39418 00006F53 89C8                    	MOV	AX,CX			; get attrs in position
 39419 00006F55 E8C3B9                  	call	SET_FILE_ATTRIBUTE	; go set
 39420 00006F58 7227                    	JC	short ChModE		; errors are set
 39421                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 39422                                  	;jmp	SYS_RET_OK
 39423                                  OpenOkj3:
 39424                                  	;jmp	short OpenOkj2
 39425                                  	; 17/12/2022
 39426 00006F5A E9DA96                  	jmp	SYS_RET_OK
 39427                                  
 39428                                  ; 17/12/2022
 39429                                  %if 0
 39430                                  ChModErr:
 39431                                  NotFound:	; 17/12/2022
 39432                                  	;mov	al,3
 39433                                  	mov	al,error_path_not_found
 39434                                  ChModE:
 39435                                  UnlinkE:	; 17/12/2022
 39436                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39437                                  	;;jmp	SYS_RET_ERR
 39438                                  	;jmp	short chmod_errj
 39439                                  	; 17/12/2022
 39440                                  	jmp	short NORERR
 39441                                  %endif
 39442                                  
 39443                                  ; 22/05/2019 - Retro DOS v4.0
 39444                                  ; DOSCODE:B039h (MSDOS 6.21, MSDOS.SYS)
 39445                                  
 39446                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39447                                  ; DOSCODE:AFD6h (MSDOS 5.0, MSDOS.SYS)
 39448                                  
 39449                                  ;	BREAK <$UNLINK - delete a file entry>
 39450                                  ;----------------------------------------------------------------------------
 39451                                  ;
 39452                                  ;**	$UNLINK - Delete a File
 39453                                  ;
 39454                                  ;
 39455                                  ;	Assembler usage:
 39456                                  ;	    LDS     DX, name
 39457                                  ;	    IF VIA SERVER DOS CALL
 39458                                  ;	     MOV     CX,SEARCH_ATTRIB
 39459                                  ;	    MOV     AH, Unlink
 39460                                  ;	    INT     21h
 39461                                  ;
 39462                                  ;	ENTRY	(ds:dx) = path name
 39463                                  ;		(cx) = search_attribute, if via server_dos
 39464                                  ;	EXIT	'C' clear if no error
 39465                                  ;		'C' set if error
 39466                                  ;		  (ax) = error code
 39467                                  ;			= error_file_not_found
 39468                                  ;			= error_access_denied
 39469                                  ;
 39470                                  ;----------------------------------------------------------------------------
 39471                                  
 39472                                  _$UNLINK:
 39473 00006F5D 51                      	push	cx			; Save possible CX input parm
 39474 00006F5E 89D6                    	MOV	SI,DX			; Point at input string
 39475 00006F60 BF[BE03]                	MOV	DI,OPENBUF		; temp spot for path
 39476 00006F63 E865FB                  	call	TransPathSet		; go get normalized path
 39477 00006F66 59                      	pop	cx
 39478 00006F67 7216                    	JC	short ChModErr		; badly formed path
 39479 00006F69 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	; meta chars?	;smr;SS Override
 39480 00006F6F 750E                    	JNZ	short NotFound
 39481 00006F71 16                      	push	ss
 39482 00006F72 1F                      	pop	ds
 39483                                  	;mov	ch,6
 39484 00006F73 B506                    	mov	ch,attr_hidden+attr_system ; unlink appropriate files
 39485 00006F75 E81C01                  	call	SetAttrib
 39486 00006F78 E844B5                  	call	DOS_DELETE		; remove that file
 39487                                  	;JC	short UnlinkE 		; error is there
 39488                                  	; 17/12/2022
 39489 00006F7B 728D                    	jc	short NORERR
 39490                                  
 39491                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39492                                  UnlinkOk:
 39493                                  	;jmp	SYS_RET_OK		; okey doksy
 39494 00006F7D EBDB                    	jmp	short OpenOkj3
 39495                                  
 39496                                  	; 17/12/2022
 39497                                  ChModErr:	; 17/12/2022
 39498                                  NotFound:
 39499                                  	;mov	al,3
 39500 00006F7F B003                    	MOV	AL,error_path_not_found
 39501                                  ChModE:		; 17/12/2022
 39502                                  UnlinkE:
 39503                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39504                                  	;;jmp	SYS_RET_ERR		; bye
 39505                                  	;jmp	short ChModE
 39506                                  	; 17/12/2022
 39507 00006F81 EB87                    	jmp	short NORERR
 39508                                  
 39509                                  ;BREAK <$RENAME - move directory entries around>
 39510                                  ;----------------------------------------------------------------------------
 39511                                  ;
 39512                                  ;   Assembler usage:
 39513                                  ;	    LDS     DX, source
 39514                                  ;	    LES     DI, dest
 39515                                  ;	    IF VIA SERVER DOS CALL
 39516                                  ;	      MOV   CX,SEARCH_ATTRIB
 39517                                  ;	    MOV     AH, Rename
 39518                                  ;	    INT     21h
 39519                                  ;
 39520                                  ;   Error returns:
 39521                                  ;	    AX = error_file_not_found
 39522                                  ;	       = error_not_same_device
 39523                                  ;	       = error_access_denied
 39524                                  ;
 39525                                  ;----------------------------------------------------------------------------
 39526                                  
 39527                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39528                                  _$RENAME:
 39529                                  	; MSDOS 3.3 (& MSDOS 6.0)
 39530 00006F83 51                      	push	cx
 39531 00006F84 1E                      	push	ds
 39532 00006F85 52                      	push	dx			; save source and possible CX arg
 39533 00006F86 06                      	PUSH	ES
 39534 00006F87 1F                      	POP	DS			; move dest to source
 39535 00006F88 89FE                    	MOV	SI,DI			; save for offsets
 39536 00006F8A BF[3E04]                	MOV	DI,RENBUF
 39537 00006F8D E83BFB                  	call	TransPathSet		; munge the paths
 39538 00006F90 36FF36[B205]            	PUSH	word [ss:WFP_START]	; get pointer	;smr;SS Override
 39539 00006F95 368F06[B405]            	POP	word [ss:REN_WFP]	; stash it	;smr;SS Override
 39540 00006F9A 5E                      	pop	si
 39541 00006F9B 1F                      	pop	ds
 39542 00006F9C 59                      	pop	cx			; get back source and possible CX arg
 39543                                  epjc2:	
 39544 00006F9D 72E0                    	JC	short ChModErr		; get old error
 39545 00006F9F 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1			;smr;SS Override
 39546 00006FA5 75D8                    	JNZ	short NotFound
 39547 00006FA7 51                      	push	cx			; Save possible CX arg
 39548 00006FA8 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 39549 00006FAB E81DFB                  	call	TransPathSet		; wham
 39550 00006FAE 59                      	pop	cx
 39551 00006FAF 72EC                    	JC	short epjc2
 39552 00006FB1 16                      	push	ss
 39553 00006FB2 1F                      	pop	ds
 39554 00006FB3 803E[7A05]FF            	CMP	byte [CMETA],-1
 39555 00006FB8 72C5                    	JB	short NotFound
 39556                                  
 39557                                  	; MSDOS 6.0
 39558 00006FBA FF36[A205]              	PUSH	WORD [THISCDS]		   ;AN000;;MS.save thiscds
 39559 00006FBE FF36[A405]              	PUSH	WORD [THISCDS+2]	   ;AN000;;MS.
 39560 00006FC2 BF[BE03]                	MOV	DI,OPENBUF		   ;AN000;;MS.
 39561 00006FC5 16                      	PUSH	SS			   ;AN000;;MS.
 39562 00006FC6 07                      	POP	ES			   ;AN000;;MS.es:di-> source
 39563 00006FC7 30C0                    	XOR	AL,AL			   ;AN000;;MS.scan all CDS
 39564                                  rnloop: 				   ;AN000;
 39565 00006FC9 E879FA                  	call	GetCDSFromDrv		   ;AN000;;MS.
 39566 00006FCC 7210                    	JC	short dorn		   ;AN000;;MS.	end of CDS
 39567 00006FCE E8C6A1                  	call	StrCmp			   ;AN000;;MS.	current dir ?
 39568 00006FD1 7404                    	JZ	short rnerr		   ;AN000;;MS.	yes
 39569 00006FD3 FEC0                    	INC	AL			   ;AN000;;MS.	next
 39570 00006FD5 EBF2                    	JMP	short rnloop		   ;AN000;;MS.
 39571                                  rnerr:					   ;AN000;
 39572 00006FD7 83C404                  	ADD	SP,4			   ;AN000;;MS. pop thiscds
 39573                                  	;error	error_current_directory    ;AN000;;MS.
 39574 00006FDA B010                    	mov	al,error_current_directory 
 39575                                  	;jmp	SYS_RET_ERR
 39576                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39577 00006FDC EBA3                    	jmp	short UnlinkE
 39578                                  dorn:					   ;AN000;
 39579 00006FDE 368F06[A405]            	POP	WORD [SS:THISCDS+2]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 39580 00006FE3 368F06[A205]            	POP	WORD [SS:THISCDS]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 39581                                  
 39582 00006FE8 16                      	push	ss
 39583 00006FE9 1F                      	pop	ds
 39584                                  
 39585                                  	; MSDOS 3.3 (& MSDOS 6.0)
 39586                                  	;mov	ch,16h
 39587 00006FEA B516                    	mov	ch,attr_directory+attr_hidden+attr_system
 39588                                  					; rename appropriate files
 39589 00006FEC E8A500                  	call	SetAttrib
 39590 00006FEF E8A1B6                  	call	DOS_RENAME		; do the deed
 39591 00006FF2 728D                    	JC	short UnlinkE 		; errors
 39592                                  
 39593                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39594                                  	;jmp	SYS_RET_OK
 39595 00006FF4 EB87                    	jmp	short UnlinkOk
 39596                                  
 39597                                  
 39598                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39599                                  
 39600                                  ; 14/07/2018 - Retro DOS v3.0
 39601                                  ; MSDOS 3.3 (& MSDOS 6.0)
 39602                                  
 39603                                  ;Break <$CreateNewFile - Create a new directory entry>
 39604                                  ;----------------------------------------------------------------------------
 39605                                  ;   CreateNew - Create a new directory entry.  Return a file handle if there
 39606                                  ;	was no previous directory entry, and fail if a directory entry with
 39607                                  ;	the same name existed previously.
 39608                                  ;
 39609                                  ;   Inputs:	DS:DX point to an ASCIZ file name
 39610                                  ;		CX contains default file attributes
 39611                                  ;   Outputs:	Carry Clear:
 39612                                  ;		    AX has file handle opened for read/write
 39613                                  ;		Carry Set:
 39614                                  ;		    AX has error code
 39615                                  ;   Registers modified: All
 39616                                  ;----------------------------------------------------------------------------
 39617                                  
 39618                                  _$CreateNewFile:
 39619 00006FF6 51                      	push	cx			; Save attributes on stack
 39620 00006FF7 B9[9B2A]                	MOV	CX,DOS_Create_New	; routine to call
 39621 00006FFA E914FF                  	JMP	AccessSet		; use good ol' open
 39622                                  
 39623                                  ;**	BinToAscii - convert a number to a string.
 39624                                  ;----------------------------------------------------------------------------
 39625                                  ;	BinToAscii converts a 16 bit number into a 4 ascii characters.
 39626                                  ;	This routine is used to generate temp file names so we don't spend
 39627                                  ;	the time and code needed for a true hex number, we just use
 39628                                  ;	A thorugh O.
 39629                                  ;
 39630                                  ;	ENTRY	(ax) = value
 39631                                  ;		(es:di) = destination
 39632                                  ;	EXIT	(es:di) updated by 4
 39633                                  ;	USES	cx, di, flags
 39634                                  ;----------------------------------------------------------------------------
 39635                                  
 39636                                  ; MSDOS 3.3
 39637                                  ;BinToAscii:
 39638                                  ;	mov     cx,4
 39639                                  ;bta5:
 39640                                  ;	push    cx
 39641                                  ;	mov     cl,4
 39642                                  ;	rol     ax,cl
 39643                                  ;	push    ax
 39644                                  ;	and     al,0Fh
 39645                                  ;	add     al,'0'
 39646                                  ;	cmp     al,'9'
 39647                                  ;	jbe     short bta6
 39648                                  ;	add     al,7
 39649                                  ;bta6: 
 39650                                  ;	stosb
 39651                                  ;	pop     ax
 39652                                  ;	pop     cx
 39653                                  ;	loop    bta5
 39654                                  ;	retn
 39655                                  
 39656                                  ; MSDOS 6.0
 39657                                  BinToAscii:
 39658 00006FFD B90404                  	mov	cx,404h			; (ch) = digit counter, (cl) = shift cnt
 39659                                  bta5:	
 39660 00007000 D3C0                    	ROL	AX,CL			; move leftmost nibble into rightmost
 39661 00007002 50                      	push	ax			; preserve remainder of digits
 39662 00007003 240F                    	AND	AL,0Fh			; grab low nibble
 39663 00007005 0441                    	ADD	AL,'A'			; turn into ascii
 39664 00007007 AA                      	STOSB				; drop in the character
 39665 00007008 58                      	pop	ax			; (ax) = shifted number
 39666 00007009 FECD                    	dec	ch
 39667 0000700B 75F3                    	jnz	short bta5		; process 4 digits
 39668 0000700D C3                      	retn
 39669                                  
 39670                                  ;Break	<$CreateTempFile - create a unique name>
 39671                                  ;----------------------------------------------------------------------------
 39672                                  ;   $CreateTemp - given a directory, create a unique name in that directory.
 39673                                  ;	Method used is to get the current time, convert to a name and attempt
 39674                                  ;	a create new. Repeat until create new succeeds.
 39675                                  ;
 39676                                  ;   Inputs:	DS:DX point to a null terminated directory name.
 39677                                  ;		CX  contains default attributes
 39678                                  ;   Outputs:	Unique name is appended to DS:DX directory.
 39679                                  ;		AX has handle
 39680                                  ;   Registers modified: all
 39681                                  ;----------------------------------------------------------------------------
 39682                                  
 39683                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39684                                  
 39685                                  _$CreateTempFile:
 39686                                  	;Enter
 39687 0000700E 55                      	push	bp
 39688 0000700F 89E5                    	mov	bp,sp
 39689                                  
 39690                                  	;LocalVar  EndPtr,DWORD
 39691                                  	;LocalVar  FilPtr,DWORD
 39692                                  	;LocalVar  Attr,WORD
 39693                                  
 39694 00007011 83EC0A                  	sub	sp,10
 39695                                  
 39696                                  	;test	cx,0FFD8h
 39697 00007014 F7C1D8FF                	test	CX,~attr_changeable
 39698 00007018 7405                    	JZ	short OKatts		; Ok if no non-changeable bits set
 39699                                  
 39700                                  ; We need this "hook" here to detect these cases (like user sets one both of
 39701                                  ; vol_id and dir bits) because of the structure of the or $CreateNewFile loop
 39702                                  ; below. The code loops on error_access_denied, but if one of the non
 39703                                  ; changeable attributes is specified, the loop COULD be infinite or WILL be
 39704                                  ; infinite because CreateNewFile will fail with access_denied always. Thus we
 39705                                  ; need to detect these cases before getting to the loop.
 39706                                  
 39707                                  	;mov	ax, 5
 39708 0000701A B80500                  	MOV	AX,error_access_denied
 39709 0000701D EB69                    	JMP	SHORT SETTMPERR
 39710                                  
 39711                                  OKatts:
 39712                                  	;MOV	attr,CX 		; save attribute
 39713 0000701F 894EF6                  	mov     [bp-10],cx
 39714                                  	;MOV	FilPtrL,DX		; pointer to file
 39715 00007022 8956F8                  	mov	[bp-8],dx
 39716                                  	;MOV	FilPtrH,DS
 39717 00007025 8C5EFA                  	mov	[bp-6],ds
 39718                                  	;MOV	EndPtrH,DS		; seg pointer to end of dir
 39719 00007028 8C5EFE                  	mov	[bp-2],ds
 39720 0000702B 1E                      	PUSH	DS
 39721 0000702C 07                      	POP	ES			; destination for nul search
 39722 0000702D 89D7                    	MOV	DI,DX
 39723 0000702F 89F9                    	MOV	CX,DI
 39724 00007031 F7D9                    	NEG	CX			; number of bytes remaining in segment
 39725                                  	; MSDOS 6.0
 39726 00007033 09C9                    	OR	CX,CX			;AN000;MS. cx=0 ? ds:dx on segment boundary
 39727 00007035 7501                    	JNZ	short okok		;AN000;MS. no
 39728                                  	;MOV	CX,-1			;AN000;MS.
 39729                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39730                                  	; 17/12/2022
 39731 00007037 49                      	dec	cx  ; mov cx,-1
 39732                                  	;mov	cx,-1 ; 0FFFh
 39733                                  okok:					;AN000;
 39734 00007038 31C0                    	XOR	AX,AX			;AN000;
 39735 0000703A F2AE                    	REPNZ	SCASB			;AN000;
 39736                                  					;AN000;
 39737 0000703C 4F                      	DEC	DI			; point back to the null
 39738 0000703D 268A45FF                	MOV	AL,[ES:DI-1]		; Get char before the NUL
 39739 00007041 E8B0DF                  	call	PATHCHRCMP		; Is it a path separator?
 39740 00007044 7403                    	JZ	short SETENDPTR		; Yes
 39741                                  STOREPTH:
 39742 00007046 B05C                    	MOV	AL,'\'
 39743 00007048 AA                      	STOSB				; Add a path separator (and INC DI)
 39744                                  SETENDPTR:
 39745                                  	;MOV	EndPtrL,DI		; pointer to the tail
 39746 00007049 8856FC                  	mov	[bp-4],dl
 39747                                  CreateLoop:
 39748 0000704C 16                      	push	ss			; let ReadTime see variables
 39749 0000704D 1F                      	pop	ds
 39750 0000704E 55                      	push	bp
 39751 0000704F E8BE9A                  	call	READTIME		; go get time
 39752 00007052 5D                      	pop	bp
 39753                                  ;
 39754                                  ; Time is in CX:DX. Go drop it into the string.
 39755                                  ;
 39756                                  	;les	di,EndPtr		; point to the string
 39757 00007053 C47EFC                  	les	di,[BP-4]
 39758 00007056 89C8                    	mov	ax,cx
 39759 00007058 E8A2FF                  	call	BinToAscii		; store upper word
 39760 0000705B 89D0                    	mov	ax,dx
 39761 0000705D E89DFF                  	call	BinToAscii		; store lower word
 39762 00007060 30C0                    	xor	al,al
 39763 00007062 AA                      	STOSB				; nul terminate
 39764                                  	;LDS	DX,FilPtr		; get name
 39765 00007063 C556F8                  	lds	dx,[bp-8]
 39766                                  	;MOV	CX,Attr 		; get attr
 39767 00007066 8B4EF6                  	mov	cx,[bp-10]
 39768 00007069 55                      	push	bp
 39769 0000706A E889FF                  	CALL	_$CreateNewFile		; try to create a new file
 39770 0000706D 5D                      	pop	bp
 39771 0000706E 7319                    	JNC	short CreateDone	; failed, go try again
 39772                                  
 39773                                  ; The operation failed and the error has been mapped in AX. Grab the extended
 39774                                  ; error and figure out what to do.
 39775                                  
 39776                                  	;; MSDOS 3.3			; M049 - start
 39777                                  ;;	mov	ax,[ss:EXTERR]				;smr;SS Override
 39778                                  ;;	cmp	al,error_file_exists
 39779                                  ;;	jz	short CreateLoop	; file existed => try with new name
 39780                                  ;;	cmp	al,error_access_denied
 39781                                  ;;	jz	short CreateLoop	; access denied (attr mismatch)
 39782                                  
 39783                                  	; MSDOS 6.0
 39784                                  	;cmp	al,50h
 39785 00007070 3C50                    	CMP	AL,error_file_exists	; Q: did file already exist
 39786 00007072 74D8                    	JZ	short CreateLoop	; Y: try again
 39787                                  	;cmp	al,5
 39788 00007074 3C05                    	CMP	AL,error_access_denied	; Q: was it access denied
 39789 00007076 7510                    	JNZ	short SETTMPERR		; N: Error out
 39790                                  					; Y: Check to see if we got this due
 39791                                  					;    to the network drive. Note that
 39792                                  					;    the redir will set the exterr
 39793                                  					;    to error_cannot_make if this is 
 39794                                  					;    so. 
 39795 00007078 36803E[2403]41          	CMP	byte [SS:EXTERR],error_net_access_denied ; M069
 39796                                  					; See if it's REALLY an att mismatch
 39797 0000707E 7408                    	je	short SETTMPERR		; no, network error, stop
 39798                                  ;M070
 39799                                  ; If the user failed on an I24, we do not want to try again
 39800                                  ;
 39801 00007080 36803E[2403]53          	cmp	byte [SS:EXTERR],error_FAIL_I24 ;User failed on I24? ;M070
 39802                                  	;je	short SETTMPERR		;yes, do not try again ;M070
 39803                                  
 39804                                  	;jmp	short CreateLoop	;attr mismatch, try again ;M070
 39805                                  	; 17/12/2022
 39806 00007086 75C4                    	jne	short CreateLoop ; 10/06/2019 
 39807                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39808                                  	;jz	short SETTMPERR
 39809                                  	;jmp	short CreateLoop
 39810                                  
 39811                                  ;;	MOV	AL,error_access_denied	; Return this "extended" error
 39812                                  					; M049 - end
 39813                                  SETTMPERR:
 39814 00007088 F9                      	STC
 39815                                  CreateDone:
 39816                                  	;Leave
 39817 00007089 89EC                    	mov	sp,bp
 39818 0000708B 5D                      	pop	bp
 39819 0000708C 7203                    	JC	short CreateFail
 39820 0000708E E9A695                  	jmp	SYS_RET_OK		; success!
 39821                                  CreateFail:
 39822 00007091 E9AC95                  	jmp	SYS_RET_ERR
 39823                                  
 39824                                  ;   SetAttrib will set the search attribute (SAttrib) either to the normal
 39825                                  ;   (CH) or to the value in CL if the current system call is through
 39826                                  ;   serverdoscall.
 39827                                  ;
 39828                                  ;   Inputs:	fSharing == FALSE => set sattrib to CH
 39829                                  ;		fSharing == TRUE => set sattrib to CL
 39830                                  ;   Outputs:	none
 39831                                  ;   Registers changed:	CX
 39832                                  
 39833                                  SetAttrib:
 39834 00007094 36F606[7205]FF          	test	byte [SS:FSHARING],-1		;smr;SS Override
 39835 0000709A 7502                    	jnz	short Set
 39836 0000709C 88E9                    	mov	cl,ch
 39837                                  Set:
 39838 0000709E 36880E[6D05]            	mov	byte [ss:SATTRIB],cl		;smr;SS Override
 39839 000070A3 C3                      	retn
 39840                                  
 39841                                  ; 14/07/2018 - Retro DOS v3.0
 39842                                  ; MSDOS 6.0
 39843                                  
 39844                                  ; 29/04/2019 - Retro DOS v4.0
 39845                                  
 39846                                  ;Break	<Extended_Open- Extended open the file>
 39847                                  ;----------------------------------------------------------------------------
 39848                                  ; Input: AL= 0 reserved  AH=6CH
 39849                                  ;	 BX= mode
 39850                                  ;	 CL= create attribute  CH=search attribute (from server)
 39851                                  ;	 DX= flag
 39852                                  ;	 DS:SI = file name
 39853                                  ;	 ES:DI = parm list
 39854                                  ;			   DD  SET EA list (-1) null
 39855                                  ;			   DW  n  parameters
 39856                                  ;			   DB  type (TTTTTTLL)
 39857                                  ;			   DW  IOMODE
 39858                                  ; Function: Extended Open
 39859                                  ; Output: carry clear
 39860                                  ;		     AX= handle
 39861                                  ;		     CX=1 file opened
 39862                                  ;			2 file created/opened
 39863                                  ;			3 file replaced/opened
 39864                                  ;	  carry set: AX has error code
 39865                                  ;----------------------------------------------------------------------------
 39866                                  
 39867                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39868                                  _$Extended_Open:			  ;AN000;
 39869                                  	;ASSUME	CS:DOSCODE,SS:DOSDATA	  ;AN000;
 39870 000070A4 368916[F405]            	MOV	[SS:EXTOPEN_FLAG],DX	  ;AN000;EO. save ext. open flag;smr;SS Override
 39871 000070A9 36C706[F705]0000        	MOV	word [SS:EXTOPEN_IO_MODE],0 ;AN000;EO. initialize IO mode;smr;SS Override
 39872                                  	; 17/12/2022
 39873 000070B0 F6C6FE                  	test	dh,0FEh ; 04/12/2022 
 39874                                  	;;test	dx,0FE00h
 39875                                  	;TEST	DX,RESERVED_BITS_MASK	  ;AN000;EO. reserved bits 0  ?
 39876 000070B3 7545                    	JNZ	short ext_inval2	  ;AN000;EO. no
 39877 000070B5 88D4                    	MOV	AH,DL			  ;AN000;EO. make sure flag is right
 39878 000070B7 80FA00                  	CMP	DL,0			  ;AN000;EO. all fail ?
 39879 000070BA 743E                    	JZ	short ext_inval2	  ;AN000;EO. yes, error
 39880                                  	;and	dl,0Fh
 39881 000070BC 80E20F                  	AND	DL,EXISTS_MASK		  ;AN000;EO. get exists action byte
 39882 000070BF 80FA02                  	CMP	DL,2			  ;AN000;EO, > 02
 39883 000070C2 7736                    	JA	short ext_inval2	  ;AN000;EO. yes ,error
 39884                                  	;and	ah,0F0h
 39885 000070C4 80E4F0                  	AND	AH,NOT_EXISTS_MASK	  ;AN000;EO. get no exists action byte
 39886 000070C7 80FC10                  	CMP	AH,10H			  ;AN000;EO. > 10
 39887 000070CA 772E                    	JA	short ext_inval2	  ;AN000;EO. yes error
 39888                                  
 39889 000070CC 368C06[FB05]            	MOV	[SS:SAVE_ES],ES		  ;AN000;EO. save API parms;smr;SS Override
 39890 000070D1 36893E[F905]            	MOV	[SS:SAVE_DI],DI		  ;AN000;EO.;smr;SS Override
 39891 000070D6 36FF36[F405]            	PUSH	word [SS:EXTOPEN_FLAG]	  ;AN000;EO.;smr;SS Override
 39892 000070DB 368F06[FD05]            	POP	word [SS:SAVE_DX]	  ;AN000;EO.;smr;SS Override
 39893 000070E0 36890E[FF05]            	MOV	[SS:SAVE_CX],CX		  ;AN000;EO.;smr;SS Override
 39894 000070E5 36891E[0106]            	MOV	[SS:SAVE_BX],BX		  ;AN000;EO.;smr;SS Override
 39895 000070EA 368C1E[0506]            	MOV	[SS:SAVE_DS],DS		  ;AN000;EO.;smr;SS Override
 39896 000070EF 368936[0306]            	MOV	[SS:SAVE_SI],SI		  ;AN000;EO.;smr;SS Override
 39897 000070F4 89F2                    	MOV	DX,SI			  ;AN000;EO. ds:dx points to file name
 39898 000070F6 89D8                    	MOV	AX,BX			  ;AN000;EO. ax= mode
 39899 000070F8 EB0A                    	JMP	SHORT goopen2		  ;AN000;;EO. do normal
 39900                                  ext_inval2:				  ;AN000;;EO.
 39901                                  	;mov	al,1
 39902 000070FA B001                    	mov	al,error_invalid_function ;AN000;EO.. invalid function
 39903                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39904                                  eo_err:
 39905                                  	;jmp	SYS_RET_ERR
 39906 000070FC EB93                    	jmp	short CreateFail
 39907                                  
 39908                                  ext_inval_parm:				  ;AN000;EO..
 39909 000070FE 59                      	POP	CX			  ;AN000;EO..  pop up satck
 39910 000070FF 5E                      	POP	SI			  ;AN000;EO..
 39911                                  	;error	error_invalid_data	  ;AN000;EO..  invalid parms
 39912                                  	;mov	al,13
 39913 00007100 B00D                    	mov	al,error_invalid_data
 39914                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39915                                  	;;jmp	SYS_RET_ERR
 39916                                  	;jmp	short eo_err
 39917                                  	; 17/12/2022
 39918 00007102 EB8D                    	jmp	short CreateFail
 39919                                  
 39920                                  	; 17/12/2022	
 39921                                  ;error_return:				  ;AN000;EO.
 39922                                  ;	retn				  ;AN000;EO.. return with error
 39923                                  
 39924                                  goopen2:				  ;AN000;
 39925                                  	; 17/12/2022
 39926                                  	;test	bh,20h				 
 39927 00007104 F6C720                  	test	bh,INT_24_ERROR>>8 ; 04/12/2022
 39928                                  	;;test	bx,2000h
 39929                                  	;TEST	BX,INT_24_ERROR		  ;AN000;EO.. disable INT 24 error ?
 39930 00007107 7406                    	JZ	short goopen		  ;AN000;EO.. no
 39931                                  	;or	byte [SS:EXTOPEN_ON],2
 39932 00007109 36800E[F605]02          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_I24_OFF ;AN000;EO.. set bit to disable;smr;SS Override
 39933                                  goopen:					  ;AN000;
 39934                                  	;or	byte [SS:EXTOPEN_ON],1 
 39935 0000710F 36800E[F605]01          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_ON  ;AN000;EO.. set Extended Open active;smr;SS Override
 39936                                  	;AND	word [SS:EXTOPEN_FLAG],0FFh  ;AN000;EO.create new ?;smr;SS Override
 39937                                  	; 18/12/2022
 39938 00007115 36C606[F505]00          	mov	byte [SS:EXTOPEN_FLAG+1],0 ; AND word [SS:EXTOPEN_FLAG],0FFh
 39939                                  	;cmp	word [SS:EXTOPEN_FLAG],10h
 39940 0000711B 36833E[F405]10          	CMP	word [SS:EXTOPEN_FLAG],EXT_EXISTS_FAIL+EXT_NEXISTS_CREATE ;AN000;FT.;smr;SS Override
 39941 00007121 7516                    	JNZ	short chknext 		  ;AN000;;EO. no
 39942 00007123 E8D0FE                  	call	_$CreateNewFile		  ;AN000;;EO. yes
 39943 00007126 723F                    	JC	short error_return	  ;AN000;;EO. error
 39944                                  
 39945 00007128 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 39946 0000712E 7438                    	JZ	short ok_return2	  ;AN000;;EO. yes
 39947                                  	;mov	word [SS:EXTOPEN_FLAG],2
 39948 00007130 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. creted/opened;smr;SS Override
 39949 00007137 EB7F                    	JMP	setXAttr		  ;AN000;;EO. set XAs
 39950                                  
 39951                                  	; 17/12/2022
 39952                                  ;ok_return2:
 39953                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 39954                                  
 39955                                  chknext:
 39956                                  	; 17/12/2022
 39957 00007139 36F606[F405]01          	test	byte [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ; 1
 39958                                  	;;test	word [SS:EXTOPEN_FLAG],1
 39959                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ;AN000;;EO. exists open;smr;SS Override
 39960 0000713F 752A                    	JNZ	short exist_open	  ;AN000;;EO. yes
 39961 00007141 E8C9FD                  	call	_$CREAT			  ;AN000;;EO. must be replace open
 39962 00007144 7221                    	JC	short error_return	  ;AN000;;EO. return with error
 39963 00007146 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 39964 0000714C 741A                    	JZ	short ok_return2	  ;AN000;;EO. yes
 39965 0000714E 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. prsume create/open;smr;SS Override
 39966 00007155 36F606[F605]04          	TEST	byte [SS:EXTOPEN_ON],EXT_FILE_NOT_EXISTS ;AN000;;EO. file not exists ?;smr;SS Override
 39967 0000715B 755B                    	JNZ	short setXAttr		  ;AN000;;EO. no
 39968 0000715D 36C706[F405]0300        	MOV	word [SS:EXTOPEN_FLAG],ACTION_REPLACED_OPENED ;AN000;;EO. replaced/opened;smr;SS Override
 39969 00007164 EB52                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 39970                                  error_return2:
 39971 00007166 F9                      	STC 				  ; Set Carry again to flag error ;AN001;
 39972                                  error_return:	 ;17/12/2022
 39973 00007167 C3                      	retn				  ;AN000;;EO. return with error
 39974                                  
 39975                                  	; 17/12/2022
 39976                                  ok_return:
 39977                                  ok_return2:
 39978 00007168 E9CC94                  	jmp	SYS_RET_OK
 39979                                  
 39980                                  exist_open:				  ;AN000;
 39981 0000716B 36F606[7205]FF          	test	byte [SS:FSHARING],-1	  ;AN000;;EO. server doscall?;smr;SS Override
 39982 00007171 7402                    	jz	short noserver		  ;AN000;;EO. no
 39983 00007173 88E9                    	MOV	CL,CH			  ;AN000;;EO. cl=search attribute
 39984                                  noserver:
 39985 00007175 E8C0FC                  	call	_$Open2			  ;AN000;;EO. do open
 39986 00007178 732F                    	JNC	short ext_ok		  ;AN000;;EO.
 39987 0000717A 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. error and IFS call;smr;SS Override
 39988 00007180 74E4                    	JZ	short error_return2	  ;AN000;;EO. return with error
 39989                                  local_extopen:
 39990                                  	;cmp	ax,2
 39991 00007182 83F802                  	CMP	AX,error_file_not_found   ;AN000;;EO. file not found error
 39992 00007185 75DF                    	JNZ	short error_return2	  ;AN000;;EO. no,
 39993                                  	;;test	word [SS:EXTOPEN_FLAG],10h
 39994                                  	; 17/12/2022
 39995 00007187 36F606[F405]10          	test	byte [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ; 10h
 39996                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ;AN000;;EO. want to fail;smr;SS Override
 39997                                  	;JNZ	short do_creat		  ;AN000;;EO. yes
 39998                                  	;JMP	short extexit 		  ;AN000;;EO. yes
 39999                                  	; 17/12/2022
 40000 0000718D 745D                    	jz	short extexit ; 10/06/2019
 40001                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40002                                  	;jnz	short do_creat
 40003                                  	;jmp	short extexit
 40004                                  do_creat:
 40005 0000718F 368B0E[FF05]            	MOV	CX,[SS:SAVE_CX]		  ;AN000;;EO. get ds:dx for file name;smr;SS Override
 40006 00007194 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;;EO. cx = attribute;smr;SS Override
 40007 00007199 89F2                    	MOV	DX,SI			  ;AN000;;EO.
 40008 0000719B E86FFD                  	call	_$CREAT			  ;AN000;;EO. do create
 40009 0000719E 724C                    	JC	short extexit 		  ;AN000;;EO. error
 40010                                  	;mov	word [SS:EXTOPEN_FLAG],2
 40011 000071A0 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 40012                                  					  ;AN000;;EO. is created/opened;smr;SS Override
 40013 000071A7 EB0F                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 40014                                  
 40015                                  ext_ok:
 40016 000071A9 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS call ?;smr;SS Override
 40017 000071AF 74B7                    	JZ	short ok_return		  ;AN000;;EO. yes
 40018                                  	;mov	word [SS:EXTOPEN_FLAG],1
 40019 000071B1 36C706[F405]0100        	MOV	word [SS:EXTOPEN_FLAG],ACTION_OPENED ;AN000;;EO. opened;smr;SS Override
 40020                                  setXAttr:
 40021                                  	; 29/04/2019
 40022 000071B8 50                      	push	ax
 40023 000071B9 E8C592                  	call	Get_User_Stack		  ;AN000;;EO.
 40024 000071BC 36A1[F405]              	MOV	AX,[SS:EXTOPEN_FLAG]	  ;AN000;;EO.;smr;SS Override
 40025                                  	;mov	[si+4],ax
 40026 000071C0 894404                  	MOV	[SI+user_env.user_CX],AX  ;AN000;;EO. set action code for cx
 40027 000071C3 58                      	pop	ax			  ;AN000;;EO.
 40028 000071C4 8904                    	mov	[si],ax
 40029                                  	;MOV	[SI+user_env.user_AX],AX  ;AN000;;EO. set handle for ax
 40030                                  	; 17/12/2022
 40031 000071C6 EBA0                    	jmp	short ok_return
 40032                                  ;ok_return:				  ;AN000;
 40033                                  	;jmp	SYS_RET_OK		  ;AN000;;EO.
 40034                                  
 40035                                  extexit2:				  ;AN000; ERROR RECOVERY
 40036 000071C8 5B                      	POP	BX			  ;AN000;EO. close the handle
 40037 000071C9 50                      	PUSH	AX			  ;AN000;EO. save error code from set XA
 40038                                  	;cmp	word [SS:EXTOPEN_FLAG],2
 40039 000071CA 36833E[F405]02          	CMP	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 40040                                  					  ;AN000;EO. from create;smr;SS Override
 40041 000071D0 750C                    	JNZ	short justopen		  ;AN000;EO.
 40042 000071D2 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;EO. cx = attribute;smr;SS Override
 40043 000071D7 C514                    	LDS	DX,[SI]			  ;AN000;EO.
 40044 000071D9 E881FD                  	call	_$UNLINK 		  ;AN000;EO. delete the file
 40045 000071DC EB03                    	JMP	SHORT reserror		  ;AN000;EO.
 40046                                  
 40047                                  justopen:				  ;AN000;
 40048 000071DE E886F4                  	call	_$CLOSE			  ;AN000;EO. pretend never happend
 40049                                  reserror:				  ;AN000;
 40050 000071E1 58                      	POP	AX			  ;AN000;EO. restore error code from set XA
 40051 000071E2 EB08                    	JMP	SHORT extexit		  ;AN000;EO.
 40052                                  
 40053                                  ext_file_unfound:			  ;AN000;
 40054                                  	;mov	ax,2
 40055 000071E4 B80200                  	MOV	AX,error_file_not_found   ;AN000;EO.
 40056 000071E7 EB03                    	JMP	SHORT extexit		  ;AN000;EO.
 40057                                  ext_inval:				  ;AN000;
 40058                                  	;mov	ax,1
 40059 000071E9 B80100                  	MOV	AX,error_invalid_function ;AN000;EO.
 40060                                  lockoperr:	; 17/12/2022
 40061                                  extexit:
 40062 000071EC E95194                  	jmp	SYS_RET_ERR		  ;AN000;EO.
 40063                                  
 40064                                  ;============================================================================
 40065                                  ; LOCK.ASM, MSDOS 6.0, 1991
 40066                                  ;============================================================================
 40067                                  ; 14/07/2018 - Retro DOS v3.0
 40068                                  ; 22/05/2019 - Retro DOS v4.0
 40069                                  
 40070                                  ;BREAK <$LockOper - Lock Calls>
 40071                                  ;----------------------------------------------------------------------------
 40072                                  ;
 40073                                  ;   Assembler usage:
 40074                                  ;	    MOV     BX, Handle	       (DOS 3.3)
 40075                                  ;	    MOV     CX, OffsetHigh
 40076                                  ;	    MOV     DX, OffsetLow
 40077                                  ;	    MOV     SI, LengthHigh
 40078                                  ;	    MOV     DI, LengthLow
 40079                                  ;	    MOV     AH, LockOper
 40080                                  ;	    MOV     AL, Request
 40081                                  ;	    INT     21h
 40082                                  ;
 40083                                  ;   Error returns:
 40084                                  ;	    AX = error_invalid_handle
 40085                                  ;	       = error_invalid_function
 40086                                  ;	       = error_lock_violation
 40087                                  ;
 40088                                  ;   Assembler usage:
 40089                                  ;	    MOV     AX, 5C??	       (DOS 4.00)
 40090                                  ;
 40091                                  ;				    0? lock all
 40092                                  ;				    8? lock write
 40093                                  ;				    ?2 lock multiple
 40094                                  ;				    ?3 unlock multiple
 40095                                  ;				    ?4 lock/read
 40096                                  ;				    ?5 write/unlock
 40097                                  ;				    ?6 add (lseek EOF/lock/write/unlock)
 40098                                  ;	    MOV     BX, Handle
 40099                                  ;	    MOV     CX, count or size
 40100                                  ;	    LDS     DX, buffer
 40101                                  ;	    INT     21h
 40102                                  ;
 40103                                  ;   Error returns:
 40104                                  ;	    AX = error_invalid_handle
 40105                                  ;	       = error_invalid_function
 40106                                  ;	       = error_lock_violation
 40107                                  ;
 40108                                  ;----------------------------------------------------------------------------
 40109                                  
 40110                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40111                                  _$LockOper:
 40112 000071EF 3C01                    	CMP	AL,1
 40113 000071F1 770B                    	JA	short lock_bad_func
 40114                                  
 40115 000071F3 57                      	PUSH	DI			       ; Save LengthLow
 40116 000071F4 E8D5F3                  	call	SFFromHandle		       ; ES:DI -> SFT
 40117 000071F7 731D                    	JNC	short lock_do 		       ; have valid handle
 40118 000071F9 5F                      	POP	DI			       ; Clean stack
 40119                                  	;mov	al,6
 40120 000071FA B006                    	mov	al,error_invalid_handle
 40121                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40122                                  ;lockoperr:
 40123                                  	;jmp	SYS_RET_ERR
 40124                                  	; 17/12/2022
 40125 000071FC EBEE                    	jmp	short lockoperr ; jmp SYS_RET_ERR
 40126                                  
 40127                                  lock_bad_func:
 40128                                  	;mov	byte [ss:EXTERR_LOCUS],1
 40129 000071FE 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus;smr;SS Override
 40130                                  	;mov	al,1
 40131 00007204 B001                    	mov	al,error_invalid_function
 40132                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40133                                  lockoperrj:
 40134                                  	;jmp	SYS_RET_ERR
 40135 00007206 EBE4                    	jmp	short lockoperr
 40136                                  
 40137                                  	; 22/05/2019 - Retro DOS v4.0
 40138                                  
 40139                                  	; MSDOS 6.0 
 40140                                  ; Align_buffer call has been deleted, since it corrupts the DTA (6/5/88) P5013
 40141                                  ; Dead code deleted, MD, 23 Mar 90
 40142                                  
 40143                                  ;lock_do:
 40144                                  ;	; MSDOS 3.3
 40145                                  ;	or	al,al
 40146                                  ;	pop	ax
 40147                                  ;	jz	short DOS_Lock
 40148                                  ;DOS_Unlock:
 40149                                  ;	;test	word [es:di+5],8000h
 40150                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40151                                  ;	JZ	short LOCAL_UNLOCK
 40152                                  ;	push    ax
 40153                                  ;	mov     ax,110Bh
 40154                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 40155                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40156                                  ;			; STACK: WORD low word of size, ES:DI -> SFT for file
 40157                                  ;			; SFT DPB field -> DPB of drive containing file
 40158                                  ;			; Return: CF set error
 40159                                  ;	pop     bx
 40160                                  ;	jmp     short ValChk
 40161                                  ;
 40162                                  ;LOCAL_UNLOCK:
 40163                                  ;	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40164                                  ;ValChk:
 40165                                  ;	JNC	short Lock_OK
 40166                                  ;lockerror:
 40167                                  ;	jmp	SYS_RET_ERR
 40168                                  ;Lock_OK:
 40169                                  ;	;MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 40170                                  ;	jmp	SYS_RET_OK
 40171                                  ;DOS_Lock:
 40172                                  ;	;test	word [es:di+5],8000h
 40173                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40174                                  ;	JZ	short LOCAL_LOCK
 40175                                  ;	;CallInstall NET_XLock,MultNET,10
 40176                                  ;	mov     ax, 110Ah
 40177                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 40178                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40179                                  ;			; STACK: WORD low word of size, ES:DI -> SFT
 40180                                  ;			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 40181                                  ;			; Return: CF set error
 40182                                  ;	JMP	short ValChk
 40183                                  ;
 40184                                  ;LOCAL_LOCK:
 40185                                  ;	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 40186                                  ;	JMP	short ValChk
 40187                                  
 40188                                  ; 17/12/2022
 40189                                  LOCAL_UNLOCK:
 40190                                  	; MSDOS 3.3
 40191                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40192                                  	; MSDOS 6.0
 40193 00007208 FF1E[AC00]              	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40194                                  ValChk:
 40195 0000720C 7302                    	JNC	short Lock_OK
 40196                                  lockerror:
 40197                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40198                                  	;;jmp	SYS_RET_ERR
 40199                                  	;jmp	short lockoperrj
 40200                                  	; 17/12/2022
 40201 0000720E EBDC                    	jmp	short lockoperr	; jmp SYS_RET_ERR
 40202                                  Lock_OK:
 40203                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 40204                                  	; 10/06/2019
 40205 00007210 A1[0C06]                	mov	ax,[TEMP_VAR]
 40206 00007213 E92194                  	jmp	SYS_RET_OK
 40207                                  
 40208                                  	; 22/05/2019
 40209                                  lock_do:
 40210                                  	; MSDOS 6.0
 40211 00007216 89C3                    	MOV	BX,AX				; save AX
 40212 00007218 BD[A903]                	MOV	BP,Lock_Buffer			; get DOS LOCK buffer
 40213                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40214                                  	;;mov	[bp+0],dx
 40215                                  	;MOV	[BP+LockBuf.Lock_position],DX	; set low offset
 40216                                  	; 15/12/2022
 40217 0000721B 895600                  	mov	[bp],dx
 40218                                  	;mov	[bp+2],cx
 40219 0000721E 894E02                  	MOV	[BP+LockBuf.Lock_position+2],CX; set high offset
 40220 00007221 59                      	POP	CX				; get low length
 40221                                  	;mov	[bp+4],cx
 40222 00007222 894E04                  	MOV	[BP+LockBuf.Lock_length],CX	; set low length
 40223                                  	;mov	[bp+6],si
 40224 00007225 897606                  	MOV	[BP+LockBuf.Lock_length+2],SI	; set high length
 40225 00007228 B90100                  	MOV	CX,1				; one range
 40226                                  
 40227                                  ;	PUSH	CS				;
 40228                                  ;	POP	DS				; DS:DX points to
 40229                                  
 40230 0000722B 16                      	push	ss
 40231 0000722C 1F                      	pop	ds
 40232                                  
 40233 0000722D 89EA                    	MOV	DX,BP				; Lock_Buffer
 40234                                  	;test	al,1
 40235 0000722F A801                    	TEST	AL,UNLOCK_ALL			; function 1
 40236                                  	;JNZ	short DOS_Unlock		; yes
 40237                                  	;JMP	short DOS_Lock			; function 0
 40238                                  	; 17/12/2022
 40239                                  	; 10/06/2019
 40240 00007231 740E                    	jz	short DOS_Lock
 40241                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40242                                  	;JNZ	short DOS_Unlock
 40243                                  	;JMP	short DOS_Lock
 40244                                  
 40245                                  DOS_Unlock:
 40246                                  	;;test	word [es:di+5],8000h
 40247                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40248 00007233 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 40249 00007238 74CE                    	JZ	short LOCAL_UNLOCK
 40250                                  
 40251                                  lock_unlock: ; 22/05/2019
 40252                                  	
 40253                                  	;CallInstall Net_Xlock,MultNET,10
 40254                                  	
 40255                                  	; MSDOS 3.3
 40256                                  	;mov     ax,110Bh
 40257                                  	;int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 40258                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40259                                  			; STACK: WORD low word of size, ES:DI -> SFT for file
 40260                                  			; SFT DPB field -> DPB of drive containing file
 40261                                  			; Return: CF set error
 40262                                  	; MSDOS 6.0
 40263 0000723A B80A11                  	mov     ax,110Ah
 40264 0000723D CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 40265                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40266                                  			; STACK: WORD low word of size, ES:DI -> SFT
 40267                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 40268                                  			; Return: CF set error
 40269                                  
 40270 0000723F EBCB                    	JMP	SHORT ValChk
 40271                                  
 40272                                  ; 17/12/2022
 40273                                  %if 0
 40274                                  LOCAL_UNLOCK:
 40275                                  	; MSDOS 3.3
 40276                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40277                                  	; MSDOS 6.0
 40278                                  	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40279                                  ValChk:
 40280                                  	JNC	short Lock_OK
 40281                                  lockerror:
 40282                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40283                                  	;jmp	SYS_RET_ERR
 40284                                  	jmp	short lockoperrj
 40285                                  Lock_OK:
 40286                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 40287                                  	; 10/06/2019
 40288                                  	mov	ax,[TEMP_VAR]
 40289                                  	jmp	SYS_RET_OK
 40290                                  %endif
 40291                                  
 40292                                  DOS_Lock:
 40293                                  	;;test	word [es:di+5],8000h
 40294                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40295 00007241 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 40296 00007246 7407                    	JZ	short LOCAL_LOCK
 40297                                  
 40298                                  	;CallInstall NET_XLock,MultNET,10
 40299                                  
 40300 00007248 B80A11                  	mov     ax,110Ah
 40301 0000724B CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 40302                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40303                                  			; STACK: WORD low word of size, ES:DI -> SFT
 40304                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 40305                                  			; Return: CF set error
 40306                                  
 40307 0000724D EBBD                    	JMP	short ValChk
 40308                                  
 40309                                  LOCAL_LOCK:
 40310                                  	; MSDOS 3.3
 40311                                  	;Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 40312                                  	; MSDOS 6.0
 40313 0000724F FF1E[A800]              	Call	far [JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 40314                                  
 40315 00007253 EBB7                    	JMP	short ValChk
 40316                                  
 40317                                  ; 14/07/2018 - Retro DOS v3.0
 40318                                  ; LOCK_CHECK
 40319                                  ;MSDOS 6.0 (& MSDOS 3.3)
 40320                                  
 40321                                  ;----------------------------------------------------------------------------
 40322                                  ; Inputs:
 40323                                  ;	Outputs of SETUP
 40324                                  ;	[USER_ID] Set
 40325                                  ;	[PROC_ID] Set
 40326                                  ; Function:
 40327                                  ;	Check for lock violations on local I/O
 40328                                  ;	Retries are attempted with sleeps in between
 40329                                  ; Outputs:
 40330                                  ;    Carry clear
 40331                                  ;	Operation is OK
 40332                                  ;    Carry set
 40333                                  ;	A lock violation detected
 40334                                  ; Outputs of SETUP preserved
 40335                                  ;----------------------------------------------------------------------------
 40336                                  
 40337                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40338                                  	; 22/05/2019 - Retro DOS v4.0
 40339                                  LOCK_CHECK:
 40340 00007255 8B1E[1A00]              	MOV	BX,[RetryCount]	; Number retries
 40341                                  LockRetry:
 40342 00007259 53                      	push	bx		; save regs
 40343 0000725A 50                      	push	ax ; MSDOS 6.0
 40344                                  
 40345                                  	;MSDOS 3.3
 40346                                  	;Call	far [ss:JShare+(8*4)]	; 8 = chk_block
 40347                                  	;MSDOS 6.0
 40348 0000725B FF1E[B000]              	Call	far [JShare+(8*4)]	; 8 = chk_block
 40349                                  
 40350 0000725F 58                      	pop	ax ; MSDOS 6.0
 40351 00007260 5B                      	pop	bx		; restrore regs
 40352 00007261 7307                    	jnc	short lc_ret_label ; There are no locks (retnc)
 40353                                  LockN:
 40354 00007263 E8869F                  	call	Idle		; wait a while
 40355 00007266 4B                      	DEC	BX		; remember a retry
 40356 00007267 75F0                    	JNZ	short LockRetry	; more retries left...
 40357 00007269 F9                      	STC
 40358                                  lc_ret_label:
 40359 0000726A C3                      	retn
 40360                                  
 40361                                  ; 14/07/2018 - Retro DOS v3.0
 40362                                  ; LOCK_VIOLATION
 40363                                  ;MSDOS 6.0 (& MSDOS 3.3)
 40364                                  
 40365                                  ;----------------------------------------------------------------------------
 40366                                  ; Inputs:
 40367                                  ;	[THISDPB] set
 40368                                  ;	[READOP] indicates whether error on read or write
 40369                                  ; Function:
 40370                                  ;	Handle Lock violation on compatibility (FCB) mode SFTs
 40371                                  ; Outputs:
 40372                                  ;	Carry set if user says FAIL, causes error_lock_violation
 40373                                  ;	Carry clear if user wants a retry
 40374                                  ;
 40375                                  ; DS, ES, DI, CX preserved, others destroyed
 40376                                  ;----------------------------------------------------------------------------
 40377                                  
 40378                                  LOCK_VIOLATION:
 40379 0000726B 1E                      	PUSH	DS
 40380 0000726C 06                      	PUSH	ES
 40381 0000726D 57                      	PUSH	DI
 40382 0000726E 51                      	PUSH	CX
 40383                                  	;mov	ax,21h
 40384 0000726F B82100                  	MOV	AX,error_lock_violation
 40385                                  	;mov	byte [ALLOWED],18h
 40386 00007272 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 40387 00007277 C42E[8A05]              	LES	BP,[THISDPB]
 40388 0000727B BF0100                  	MOV	DI,1		; Fake some registers
 40389 0000727E 89F9                    	MOV	CX,DI
 40390                                  	;mov	dx,[es:bp+11]
 40391 00007280 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 40392 00007284 E8D6DF                  	call	HARDERR
 40393 00007287 59                      	POP	CX
 40394 00007288 5F                      	POP	DI
 40395 00007289 07                      	POP	ES
 40396 0000728A 1F                      	POP	DS
 40397 0000728B 3C01                    	CMP	AL,1
 40398 0000728D 74DB                    	jz	short lc_ret_label ; 1 = retry, carry clear
 40399 0000728F F9                      	STC
 40400 00007290 C3                      	retn
 40401                                  
 40402                                  ; 14/07/2018 - Retro DOS v3.0
 40403                                  
 40404                                  ;----------------------------------------------------------------------------
 40405                                  
 40406                                  ;	do a retz to return error
 40407                                  
 40408                                  	; 22/05/2019 - Retro DOS v4.0
 40409                                  CheckShare:
 40410                                  	; MSDOS 3.3
 40411                                  	;cmp	byte [cs:fShare],0
 40412                                  	;retn
 40413                                  
 40414                                  	; MSDOS 6.0
 40415 00007291 1E                      	push	ds			;smr;
 40416                                  	;getdseg <ds>			; ds -> dosdata
 40417 00007292 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 40418 00007297 803E[0303]00            	cmp	byte [fShare],0
 40419 0000729C 1F                      	pop	ds			;smr;
 40420 0000729D C3                      	retn
 40421                                  	
 40422                                  ;============================================================================
 40423                                  ; SHARE.ASM, MSDOS 6.0, 1991
 40424                                  ;============================================================================
 40425                                  ; 14/07/2018 - Retro DOS v3.0
 40426                                  ; 22/05/2019 - Retro DOS v4.0
 40427                                  
 40428                                  ; SHARE_CHECK
 40429                                  ;----------------------------------------------------------------------------
 40430                                  ; Inputs:
 40431                                  ;       [THISSFT] Points to filled in local file/device SFT for new
 40432                                  ;               instance of file sf_mode ALWAYS has mode (even on FCB SFTs)
 40433                                  ;       [WFP_START] has full path of name
 40434                                  ;       [USER_ID] Set
 40435                                  ;       [PROC_ID] Set
 40436                                  ; Function:
 40437                                  ;       Check for sharing violations on local file/device access
 40438                                  ; Outputs:
 40439                                  ;    Carry clear
 40440                                  ;       Sharing approved
 40441                                  ;    Carry set
 40442                                  ;       A sharing violation detected
 40443                                  ;           AX is error code
 40444                                  ; USES    ALL but DS
 40445                                  ;----------------------------------------------------------------------------
 40446                                  
 40447                                  	; 22/05/2019 - Retro DOS v4.0
 40448                                  SHARE_CHECK:
 40449                                  	; 26/07/2019
 40450 0000729E FF1E[9400]              	call	far [JShare+(1*4)] 	; 1 = MFT_Enter
 40451                                  shchk_retn:
 40452 000072A2 C3                      	retn
 40453                                  
 40454                                  ; SHARE_VIOLATION
 40455                                  ;----------------------------------------------------------------------------
 40456                                  ; Inputs:
 40457                                  ;       [THISDPB] Set
 40458                                  ;       AX has error code
 40459                                  ; Function:
 40460                                  ;       Handle Sharing errors
 40461                                  ; Outputs:
 40462                                  ;       Carry set if user says FAIL, causes error_sharing_violation
 40463                                  ;       Carry clear if user wants a retry
 40464                                  ;
 40465                                  ; DS, ES, DI preserved, others destroyed
 40466                                  ;----------------------------------------------------------------------------
 40467                                  
 40468                                  SHARE_VIOLATION:
 40469 000072A3 1E                      	PUSH    DS
 40470 000072A4 06                      	PUSH	ES
 40471 000072A5 57                      	PUSH    DI
 40472 000072A6 C606[7505]00            	MOV     byte [READOP],0		; All share errors are reading
 40473                                  	;mov	byte [ALLOWED],18h
 40474 000072AB C606[4B03]18            	MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 40475 000072B0 C42E[8A05]              	LES     BP,[THISDPB]
 40476 000072B4 BF0100                  	MOV     DI,1			; Fake some registers
 40477 000072B7 89F9                    	MOV     CX,DI
 40478                                  	;mov	dx,[es:bp+17]
 40479 000072B9 268B5611                	MOV     DX,[ES:BP+DPB.DIR_SECTOR]
 40480 000072BD E89DDF                  	call	HARDERR
 40481 000072C0 5F                      	POP     DI
 40482 000072C1 07                      	POP	ES
 40483 000072C2 1F                      	POP     DS
 40484 000072C3 3C01                    	CMP     AL,1
 40485 000072C5 74DB                    	jz	short shchk_retn	; 1 = retry, carry clear
 40486 000072C7 F9                      	STC
 40487 000072C8 C3                      	retn
 40488                                  
 40489                                  ;----------------------------------------------------------------------------
 40490                                  ;   ShareEnd - terminate sharing info on a particular SFT/UID/PID. This does
 40491                                  ;       NOT perform a close, it merely asserts that the sharing information
 40492                                  ;       for the SFT/UID/PID may be safely released.
 40493                                  ;
 40494                                  ;   Inputs:     ES:DI points to an SFT
 40495                                  ;   Outputs:    None
 40496                                  ;   Registers modified: all except DS,ES,DI
 40497                                  ;----------------------------------------------------------------------------
 40498                                  
 40499                                  ShareEnd:
 40500                                  	; 26/07/2019
 40501 000072C9 FF1E[9800]              	call	far [JShare+(2*4)]	; 2 = MFTClose
 40502 000072CD C3                      	retn
 40503                                  
 40504                                  ;Break <ShareEnter - attempt to enter a node into the sharing set>
 40505                                  ;----------------------------------------------------------------------------
 40506                                  ;   ShareEnter - perform a retried entry of a nodde into the sharing set. If
 40507                                  ;   the max number of retries is exceeded, we notify the user via int 24.
 40508                                  ;
 40509                                  ;   Inputs:     ThisSFT points to the SFT
 40510                                  ;               WFP_Start points to the WFP
 40511                                  ;   Outputs:    Carry clear => successful entry
 40512                                  ;               Carry set => failed system call
 40513                                  ;   Registers modified: all
 40514                                  ;----------------------------------------------------------------------------
 40515                                  
 40516                                  ShareEnter:
 40517 000072CE 51                      	push	cx
 40518                                  retry:
 40519 000072CF 8B0E[1A00]              	mov     cx,[RetryCount]
 40520                                  attempt:
 40521 000072D3 C43E[9E05]              	les     di,[THISSFT]		; grab sft
 40522 000072D7 31C0                    	XOR     AX,AX
 40523                                   	;mov	[es:di+51],axfff
 40524 000072D9 26894533                	MOV     [ES:DI+SF_ENTRY.sf_MFT],AX ; indicate free SFT
 40525 000072DD 51                      	push	cx
 40526 000072DE E8BDFF                  	call    SHARE_CHECK             ; attempt to enter into the sharing set
 40527 000072E1 59                      	pop	cx
 40528 000072E2 730A                    	jnc	short done		; success, let the user see this
 40529 000072E4 E8059F                  	call	Idle                    ; wait a while
 40530 000072E7 E2EA                    	loop    attempt                 ; go back for another attempt
 40531 000072E9 E8B7FF                  	call    SHARE_VIOLATION         ; signal the problem to the user
 40532 000072EC 73E1                    	jnc	short retry		; user said to retry, go do it
 40533                                  done:
 40534 000072EE 59                      	pop	cx
 40535 000072EF C3                      	retn
 40536                                  
 40537                                  ;============================================================================
 40538                                  ; EXEPATCH.ASM (MSDOS 6.0, 1991)
 40539                                  ;============================================================================
 40540                                  ; 29/04/2019 - Retro DOS 4.0
 40541                                  
 40542                                  ;** EXEPATCH.ASM 
 40543                                  ;----------------------------------------------------------------------------
 40544                                  ;	Contains the foll:
 40545                                  ;
 40546                                  ;		- code to find and overlay buggy unpack code
 40547                                  ;		- new code to be overlayed on buggy unpack code 
 40548                                  ;		- old code sequence to identify buggy unpack code
 40549                                  ;
 40550                                  ;	Revision history:
 40551                                  ;
 40552                                  ;		Created: 5/14/90
 40553                                  ;----------------------------------------------------------------------------
 40554                                  
 40555                                  ;----------------------------------------------------------------------------
 40556                                  ;
 40557                                  ; M020 : Fix for rational bug - for details see routine header
 40558                                  ; M028 : 4b04 implementation
 40559                                  ; M030 : Fixing bug in EXEPACKPATCH (EXEC_CS is an un-relocated value)
 40560                                  ; M032 : set turnoff bit only if DOS in HMA.
 40561                                  ; M033 : if IP < 2 then not exepacked.
 40562                                  ; M046 : support for a 4th version of exepacked files.
 40563                                  ; M068 : support for copy protected apps.
 40564                                  ; M071 : use A20OFF_COUNT of 10.
 40565                                  ;
 40566                                  ;----------------------------------------------------------------------------
 40567                                  
 40568                                  PATCH1_COM_OFFSET	EQU	06CH
 40569                                  PATCH1_OFFSET		EQU	028H
 40570                                  PATCH1_CHKSUM		EQU	0EF4EH
 40571                                  CHKSUM1_LEN		EQU	11CH/2 ; 142
 40572                                  
 40573                                  PATCH2_COM_OFFSET	EQU	076H
 40574                                  PATCH2_OFFSET		EQU	032H
 40575                                  
 40576                                  	; The strings that start at offset 076h have two possible 
 40577                                  	; check sums that are defined as PATCH2_CHKSUM PATCH2A_CHKSUM
 40578                                  
 40579                                  PATCH2_CHKSUM		EQU	78B2H
 40580                                  CHKSUM2_LEN		EQU	119H/2
 40581                                  PATCH2A_CHKSUM		EQU	1C47H		; M046
 40582                                  CHKSUM2A_LEN		EQU	103H/2		; M046
 40583                                  
 40584                                  PATCH3_COM_OFFSET	EQU	074H
 40585                                  PATCH3_OFFSET		EQU	032H
 40586                                  PATCH3_CHKSUM		EQU	4EDEH
 40587                                  CHKSUM3_LEN		EQU	117H/2
 40588                                  
 40589                                  ;**	Data structure passed for ExecReady call
 40590                                  ;
 40591                                  ;struc ERStruc
 40592                                  ; .ER_Reserved:	resw	1	; reserved, should be zero
 40593                                  ; .ER_Flags:	resw	1
 40594                                  ; .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
 40595                                  ; .ER_PSP:	resw	1	; PSP of the program
 40596                                  ; .ER_StartAddr: resd	1	; Start CS:IP of the program
 40597                                  ; .ER_ProgSize:	resd	1	; Program size including PSP
 40598                                  ; .size:
 40599                                  ;endstruc
 40600                                  
 40601                                  ;DOSCODE SEGMENT
 40602                                  
 40603                                  	; 22/05/2019 - Retro DOS v4.0
 40604                                  	; DOSCODE:B3DDh (MSDOS 6.21, MSDOS.SYS)
 40605                                  
 40606                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40607                                  	; DOSCODE:B37Ah (MSDOS 5.0, MSDOS.SYS)
 40608                                  
 40609                                  ; M028 - BEGIN
 40610                                  
 40611                                  ;--------------------------------------------------------------------------
 40612                                  ;
 40613                                  ;	Procedure Name		: ExecReady
 40614                                  ;
 40615                                  ;	Input			: DS:DX -> ERStruc (see exe.inc)
 40616                                  ;
 40617                                  ;--------------------------------------------------------------------------
 40618                                  
 40619                                  ExecReady:
 40620 000072F0 89D6                    	mov	si,dx			; move the pointer into a friendly one
 40621                                  	;;test	word [si+2],1
 40622                                  	; 17/12/2022
 40623 000072F2 F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 40624                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; COM or EXE ?
 40625 000072F6 7413                    	jz	short er_setver		; only setver for .COM files
 40626                                  
 40627                                  	;mov	ax,[si+8]
 40628 000072F8 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]
 40629 000072FB 83C010                  	add	ax,10h
 40630 000072FE 8EC0                    	mov	es,ax
 40631                                  
 40632                                  	;mov	cx,[si+10]
 40633 00007300 8B4C0A                  	mov	cx,[si+ERStruc.ER_StartAddr]   ; M030
 40634                                  	;mov	cx,[si+12]
 40635 00007303 8B440C                  	mov	ax,[si+ERStruc.ER_StartAddr+2] ; M030
 40636                                  
 40637                                  	;call	[ss:FixExePatch]
 40638 00007306 36FF16[F311]            	call	word [ss:FixExePatch] ; 28/12/2022
 40639                                  	
 40640                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40641                                  	;call	[ss:Rational386PatchPtr]
 40642                                  
 40643                                  er_setver:
 40644                                  	;;test	word [si+2],2		; Q: is this an overlay
 40645                                  	; 17/12/2022
 40646 0000730B F6440202                	test	byte [si+ERStruc.ER_Flags],ER_OVERLAY ; 2
 40647                                  	;test	word [si+ERStruc.ER_Flags],ER_OVERLAY
 40648 0000730F 7518                    	jnz	short er_chkdoshi	; Y: set A20OFF_COUNT if DOS high
 40649                                  					; N: set up lie version first
 40650 00007311 1E                      	push	ds
 40651 00007312 56                      	push	si
 40652                                  	;lds	si,[si+4]
 40653 00007313 C57404                  	lds	si,[si+ERStruc.ER_ProgName]
 40654 00007316 E876ED                  	call	Scan_Execname1
 40655 00007319 E887ED                  	call	Scan_Special_Entries
 40656 0000731C 5E                      	pop	si
 40657 0000731D 1F                      	pop	ds
 40658                                  	;mov	es,[si+8]
 40659 0000731E 8E4408                  	mov	es,[si+ERStruc.ER_PSP]
 40660 00007321 36A1[BD0E]              	mov	ax,[ss:SPECIAL_VERSION]
 40661 00007325 26A34000                	mov	[es:PDB.Version],ax
 40662                                  
 40663                                  er_chkdoshi:
 40664 00007329 36803E[F211]00          	cmp	byte [ss:DosHasHMA],0	; M032: Q: is dos in HMA (M021)
 40665 0000732F 741F                    	je	short er_done		; M032: N: done
 40666                                  
 40667                                  					; M068 - Start
 40668                                  	;mov	ax,[si+8]
 40669 00007331 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]	; ax = PSP
 40670                                  
 40671                                  	;or	byte [ss:DOS_FLAG],4
 40672 00007334 36800E[8600]04          	or	byte [ss:DOS_FLAG],EXECA20OFF ; Set bit to signal int 21
 40673                                  					; ah = 25 & ah= 49. See dossym.inc 
 40674                                  					; under TAG M003 & M009 for 
 40675                                  					; explanation
 40676                                  	;;test	word [si+2],1
 40677                                  	; 17/12/2022
 40678 0000733A F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 40679                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; Q: COM file
 40680 0000733E 7507                    	jnz	short er_setA20		; N: inc a20off_count, set 
 40681                                  					;    a20off_psp and ret
 40682 00007340 1E                         	push	ds
 40683 00007341 8ED8                    	mov	ds,ax			; DS = load segment of com file.
 40684 00007343 E88E02                  	call	IsCopyProt		; check if copy protected
 40685 00007346 1F                      	pop	ds
 40686                                  
 40687                                  er_setA20:
 40688                                  	; We need to inc the A20OFF_COUNT here. Note that if the count
 40689                                  	; is non-zero at this point it indicates that the A20 is to be 
 40690                                  	; turned off for that many int 21 calls made by the app. In 
 40691                                  	; addition the A20 has to be turned off when we exit from this 
 40692                                  	; call. Hence the inc.
 40693                                  
 40694 00007347 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]		
 40695 0000734C 36A3[6300]              	mov	[ss:A20OFF_PSP],ax	; set the PSP for which A20 is to be
 40696                                  					; turned OFF.
 40697                                  er_done:				; M068 - End
 40698 00007350 31C0                    	xor	ax,ax
 40699 00007352 C3                      	retn
 40700                                  
 40701                                  ; M028 - END
 40702                                  
 40703                                  
 40704                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40705                                  %if 0
 40706                                  
 40707                                  ;----------------------------------------------------------------------------
 40708                                  ;
 40709                                  ; procedure : Rational386Patch
 40710                                  ;
 40711                                  ; Older versions of the Rational DOS Extender have several bugs which trash
 40712                                  ; 386 registers (usually just the high word of 32 bit registers) during
 40713                                  ; interrupt processing. Lotus 123 3.1+ is a popular application that uses a
 40714                                  ; version of the Rational extender with the 32 bit register trashing bugs.
 40715                                  ;
 40716                                  ; This routine applies patches to the Rational DOS Extender to work around
 40717                                  ; most of the register trashing bugs.
 40718                                  ;
 40719                                  ; Note that there are additional register trashing bugs not fixed by these
 40720                                  ; patches. In particular, the high word of ESP and the FS and GS registers
 40721                                  ; may be modified on interrupts.
 40722                                  ;
 40723                                  ; There are two different Rational DOS Extender patchs in this module.
 40724                                  ; Rational386Patch is to correct 386 register trashing bugs on 386 or later
 40725                                  ; processors. This patch code is executed when MS-DOS is running on a 386
 40726                                  ; or later processor, regardless of whether MS-DOS is running in the HMA
 40727                                  ; or not.
 40728                                  ;
 40729                                  ; The other Rational patch routine (RationalPatch, below) fixes a register
 40730                                  ; trashing problem on 286 processors, and is only executed if MS-DOS is
 40731                                  ; running in the HMA.
 40732                                  ;
 40733                                  ; This patch detection and replacement is based on an example supplied by
 40734                                  ; Ben Williams at Rational.
 40735                                  ;
 40736                                  ;----------------------------------------------------------------------------
 40737                                  
 40738                                  ; 22/05/2019 - Retro DOS v4.0
 40739                                  ; DOSCODE:B448h (MSDOS 6.21, MSDOS.SYS)
 40740                                  
 40741                                  ;----------------------------------------------------------------------------
 40742                                  ;
 40743                                  ; INPUT : ES = segment where program got loaded
 40744                                  ;
 40745                                  ;----------------------------------------------------------------------------
 40746                                  
 40747                                  rpFind1:
 40748                                  	db	0FAh, 0E4h, 21h, 60h, 33h, 0C0h, 0E6h, 43h, 8Bh, 16h
 40749                                  
 40750                                  rpFind1Len equ	$ - rpFind1
 40751                                  
 40752                                  ;	cli
 40753                                  ;	in	al, 21h
 40754                                  ;	pusha
 40755                                  ;	xor	ax, ax
 40756                                  ;	out	43h, al
 40757                                  ;	mov	dx, ...
 40758                                  
 40759                                  rpFind1a:
 40760                                  	db	0B0h, 0Eh, 0E6h, 37h, 33h, 0C0h, 0E6h, 0F2h
 40761                                  
 40762                                  rpFind1aLen equ	$ - rpFind1a
 40763                                  
 40764                                  ;	mov	al, 0Eh
 40765                                  ;	out	37h, al
 40766                                  ;	xor	ax, ax
 40767                                  ;	out	0F2h, al
 40768                                  
 40769                                  ; bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 40770                                  
 40771                                  rpFind2:
 40772                                  	db	0Fh, 20h, 0C0h
 40773                                  
 40774                                  rpFind2Len equ	$ - rpFind2
 40775                                  
 40776                                  ;	mov	eax, cr0	;may be preceeded by PUSH CX (51h)
 40777                                  
 40778                                  rpFind3:
 40779                                  	db	0Fh, 22h, 0C0h, 0EAh
 40780                                  
 40781                                  rpFind3Len equ	$ - rpFind3
 40782                                  
 40783                                  ;	mov	cr0, eax	;may be preceeded by POP CX (59h)
 40784                                  ;	jmp	far ptr xxx	;change far ptr to go to replace3
 40785                                  ;	mov	ss, bx		;8E D3 ... and come back at or after this
 40786                                  
 40787                                  ; note, there is no rpRepl1 string
 40788                                  
 40789                                  rpRepl2:
 40790                                   	db	66h, 50h, 51h, 0Fh, 20h, 0C0h
 40791                                  
 40792                                  rpRepl2Len equ	$ - rpRepl2
 40793                                  
 40794                                  ;	push	eax
 40795                                  ;	push	cx
 40796                                  ;	mov	eax, cr0
 40797                                  
 40798                                  rpRepl3:
 40799                                  	db	8Eh, 0D3h, 59h, 66h, 58h
 40800                                  
 40801                                  rpRepl3Len equ	$ - rpRepl3
 40802                                  
 40803                                  ;	mov	ss, bx
 40804                                  ;	pop	cx
 40805                                  ;	pop	eax
 40806                                  
 40807                                  ; bug # 2 -- loss of high EAX and ESI on 386+ only if VCPI
 40808                                  
 40809                                  rpFind4:
 40810                                  	db	93h, 58h, 8Bh, 0CCh
 40811                                  
 40812                                  rpFind4Len equ	$ - rpFind4
 40813                                  
 40814                                  ;	xchg	bx, ax
 40815                                  ;	pop	ax
 40816                                  ;	mov	cx, sp
 40817                                  
 40818                                  rpFind5:
 40819                                  	db	0B8h, 0Ch, 0DEh, 0CDh, 67h, 8Bh, 0E1h, 0FFh, 0E3h
 40820                                  
 40821                                  rpFind5Len equ	$ - rpFind5
 40822                                  
 40823                                  ;	mov	ax, DE0Ch
 40824                                  ;	int	67h
 40825                                  ;	mov	sp, cx
 40826                                  ;	jmp	bx
 40827                                  
 40828                                  rpRepl4:
 40829                                  	db	93h, 58h, 8Bh, 0CCh
 40830                                  	db	02Eh, 066h, 0A3h
 40831                                  
 40832                                  rpRepl4o1Len equ $ - rpRepl4
 40833                                  
 40834                                  	db	00h, 00h
 40835                                  	db	02Eh, 066h, 89h, 36h
 40836                                  
 40837                                  rpRepl4o2Len equ $ - rpRepl4
 40838                                  
 40839                                  	db	00h, 00h
 40840                                  
 40841                                  rpRepl4Len equ	$ - rpRepl4
 40842                                  
 40843                                  ;	xchg	bx, ax
 40844                                  ;	pop	ax
 40845                                  ;	mov	cx, sp
 40846                                  ;	mov	dword ptr cs:[xxxx], eax
 40847                                  ;	mov	dword ptr cs:[xxxx], esi
 40848                                  
 40849                                  rpRepl5:
 40850                                  	db	8Bh, 0E1h
 40851                                  	db	2Eh, 66h, 0A1h
 40852                                  
 40853                                  rpRepl5o1Len equ $ - rpRepl5
 40854                                  
 40855                                  	db	00h, 00h
 40856                                  	db	2Eh, 66h, 8Bh, 36h
 40857                                  
 40858                                  rpRepl5o2Len equ $ - rpRepl5
 40859                                  
 40860                                  	db	00h, 00h
 40861                                  	db	0FFh, 0E3h
 40862                                  
 40863                                  rpRepl5Len equ	$ - rpRepl5
 40864                                  
 40865                                  ;	mov	sp, cx
 40866                                  ;	mov	eax, dword ptr cs:[xxxx]
 40867                                  ;	mov	esi, dword ptr cs:[xxxx]
 40868                                  ;	jmp	bx
 40869                                  
 40870                                  ; bug # 3 -- loss of high EAX, EBX, ECX, EDX on 386+ only if VCPI
 40871                                  
 40872                                  rpFind6:
 40873                                  	db	0FAh, 52h, 51h
 40874                                  
 40875                                  rpFind6Len equ	$ - rpFind6
 40876                                  
 40877                                  ;	cli
 40878                                  ;	push	dx
 40879                                  ;	push	cx
 40880                                  
 40881                                  rpFind7a:
 40882                                  	db	0B8h, 0Ch, 0DEh, 66h, 26h, 0FFh, 1Eh
 40883                                  
 40884                                  rpFind7aLen equ	$ - rpFind7a
 40885                                  
 40886                                  ;	mov	ax, 0DE0Ch
 40887                                  ;	call	fword ptr es:[xxxx]
 40888                                  
 40889                                  rpFind7b:
 40890                                  	db	59h, 5Ah, 5Bh
 40891                                  
 40892                                  rpFind7bLen equ	$ - rpFind7b
 40893                                  
 40894                                  ;	pop	cx
 40895                                  ;	pop	dx
 40896                                  ;	pop	bx
 40897                                  
 40898                                  rpRepl6 :
 40899                                  	db	0FAh, 66h, 50h, 66h, 53h, 66h, 51h, 66h, 52h
 40900                                  
 40901                                  rpRepl6Len equ	$ - rpRepl6
 40902                                  
 40903                                  ;	cli
 40904                                  ;	push	eax
 40905                                  ;	push	ebx
 40906                                  ;	push	ecx
 40907                                  ;	push	edx
 40908                                  
 40909                                  rpRepl7:
 40910                                  	db	66h, 5Ah, 66h, 59h, 66h, 5Bh, 66h, 58h, 5Bh
 40911                                  
 40912                                  rpRepl7Len equ	$ - rpRepl7
 40913                                  
 40914                                  ;	pop	edx
 40915                                  ;	pop	ecx
 40916                                  ;	pop	ebx
 40917                                  ;	pop	eax
 40918                                  ;	pop	bx
 40919                                  
 40920                                  ; bug # 4 -- loss of high EAX and EBX on 386+ only if VCPI
 40921                                  
 40922                                  rpFind8:
 40923                                   	db	60h, 06h, 1Eh, 0B8h, 00h, 00h, 8Eh, 0D8h
 40924                                  
 40925                                  rpFind8Len equ	$ - rpFind8
 40926                                  
 40927                                  ;	pusha
 40928                                  ;	push	es
 40929                                  ;	push	ds
 40930                                  ;	mov	ax, dgroup	;jump back to here from replace8
 40931                                  ;	mov	ds, ax
 40932                                  
 40933                                  rpFind9 :
 40934                                  	db	1Fh, 07h, 61h
 40935                                  
 40936                                  rpFind9Len equ	$ - rpFind9
 40937                                  
 40938                                  ;	pop	ds
 40939                                  ;	pop	es
 40940                                  ;	popa
 40941                                  
 40942                                  rpRepl8:
 40943                                   	db	66h, 60h, 06h, 1Eh
 40944                                  
 40945                                  rpRepl8Len equ	$ - rpRepl8
 40946                                  
 40947                                  ;	pushad
 40948                                  ;	push	es
 40949                                  ;	push	ds
 40950                                  
 40951                                  rpRepl9:
 40952                                  	db	1Fh, 07h, 66h, 61h, 0C3h
 40953                                  
 40954                                  rpRepl9Len equ	$ - rpRepl9
 40955                                  
 40956                                  ;	pop	ds
 40957                                  ;	pop	es
 40958                                  ;	popad
 40959                                  ;	retn			;no need to jmp back to main-line
 40960                                  
 40961                                  ;----------------------------------------------------------------------------
 40962                                  
 40963                                  struc SearchPair
 40964                                   .sp_off1: resw 1	; offset of 1st search string
 40965                                   .sp_len1: resw 1	; length of 1st search string
 40966                                   .sp_off2: resw 1	; 2nd string
 40967                                   .sp_len2: resw 1	; 2nd string
 40968                                   .sp_diff: resw 1	; max difference between offsets
 40969                                   .size:
 40970                                  endstruc
 40971                                  
 40972                                  ;rpBug1Strs SearchPair	<offset rpFind2, rpFind2Len, offset rpFind3, rpFind3Len, 20h>
 40973                                  
 40974                                  rpBug1Strs:
 40975                                  	dw	rpFind2
 40976                                  	dw	rpFind2Len ; 3
 40977                                  	dw	rpFind3
 40978                                  	dw	rpFind3Len ; 4
 40979                                  	dw	20h
 40980                                  
 40981                                  ;rpBug2Strs SearchPair	<offset rpFind4, rpFind4Len, offset rpFind5, rpFind5Len, 80h>
 40982                                  
 40983                                  rpBug2Strs:
 40984                                  	dw	rpFind4
 40985                                  	dw	rpFind4Len ; 4
 40986                                  	dw	rpFind5
 40987                                  	dw	rpFind5Len ; 9
 40988                                  	dw	80h
 40989                                  
 40990                                  ;rpBug3Strs SearchPair	<offset rpFind6, rpFind6Len, offset rpFind7a, rpFind7aLen, 80h>
 40991                                  
 40992                                  rpBug3Strs:
 40993                                  	dw	rpFind6
 40994                                  	dw	rpFind6Len ; 3
 40995                                  	dw	rpFind7a
 40996                                  	dw	rpFind7aLen ; 7
 40997                                  	dw	80h
 40998                                  
 40999                                  ;rpBug4Strs SearchPair	<offset rpFind8, 4, offset rpFind9, rpFind9Len, 80h>
 41000                                  
 41001                                  rpBug4Strs:
 41002                                  	dw	rpFind8
 41003                                  	dw	4
 41004                                  	dw	rpFind9
 41005                                  	dw	rpFind9Len ; 3
 41006                                  	dw	80h
 41007                                  
 41008                                  ;----------------------------------------------------------------------------
 41009                                  
 41010                                  struc StackVars
 41011                                   .sv_wVersion:	resw 1		; Rational extender version #
 41012                                   .sv_cbCodeSeg: resw 1		; code seg size to scan
 41013                                   .sv_pPatch:	resw 1		; offset of next avail patch byte
 41014                                   .size:
 41015                                  endstruc
 41016                                  
 41017                                  ;----------------------------------------------------------------------------
 41018                                  
 41019                                  ; 22/05/2019 - Retro DOS v4.0
 41020                                  
 41021                                  Rational386Patch:
 41022                                  	; Do a few quick checks to see if this looks like a Rational
 41023                                  	; Extended application. Hopefully this will quickly weed out
 41024                                  	; most non Rational apps.
 41025                                  
 41026                                  	cmp	word [es:0],395		; version number goes here - versions
 41027                                  	jae	short rp3QuickOut	;   3.95+ don't need patching
 41028                                  
 41029                                  	cmp	word [es:0Ch],20h	; always has this value here
 41030                                  	jne	short rp3QuickOut
 41031                                  
 41032                                  	push	ax
 41033                                  
 41034                                  	mov	ax,18h 			; extender has 18h at
 41035                                  	cmp	[es:24],ax		;   offsets 24, 28, & 36
 41036                                  	jne	short rp3QO_ax
 41037                                  	cmp	[es:28],ax
 41038                                  	jne	short rp3QO_ax
 41039                                  	cmp	[es:36],ax
 41040                                  	je	short rp3Maybe
 41041                                  rp3QO_ax:
 41042                                  	pop	ax
 41043                                  rp3QuickOut:
 41044                                  	retn
 41045                                  
 41046                                  ; It might be the rational extender, do more extensive checking
 41047                                  
 41048                                  rp3Maybe:
 41049                                  	cld
 41050                                  	push	bx			; note ax pushed above
 41051                                  	push	cx
 41052                                  	push	dx
 41053                                  	push	si
 41054                                  	push	di
 41055                                  	push	es
 41056                                  	push	ds			; we use all of them
 41057                                  	push	bp
 41058                                  	sub	sp,StackVars.size  ; 6	; make space for stack variables
 41059                                  	mov	bp,sp
 41060                                  
 41061                                  	push	cs
 41062                                  	pop	ds
 41063                                  
 41064                                  	mov	ax,[es:0]		; save version #
 41065                                  	;mov	[bp+StackVars.sv_wVersion],ax
 41066                                  	mov	[bp],ax	
 41067                                  					; check that binary version # matches
 41068                                  	call	VerifyVersion		;   ascii string
 41069                                  	jne	short rp3Exit_j
 41070                                  
 41071                                  ; Looks like this is it, find where to put the patch code.  The
 41072                                  ; patch will be located on top of Rational code specific to 80286
 41073                                  ; processors, so these patchs MUST NOT be applied if running on
 41074                                  ; an 80286 system.
 41075                                  
 41076                                  	; Rational says the code to patch will never be beyond offset 46xxh
 41077                                  
 41078                                  	mov	cx,4500h		; force search len to 4700h (searches
 41079                                  	;mov	[bp+2],cx
 41080                                  	mov	[bp+StackVars.sv_cbCodeSeg],cx	; start at offset 200h)
 41081                                  
 41082                                  	mov	es,[es:20h]		; es=code segment
 41083                                  
 41084                                  	mov	si,rpFind1		; string to find
 41085                                  	mov	dx,rpFind1Len ; 10	; length to match
 41086                                  	call	ScanCodeSeq		; look for code seq
 41087                                  	jz	short rpGotPatch
 41088                                  
 41089                                  ; According to Rational, some very old versions of the extender may not
 41090                                  ; have the find1 code sequence. If the find1 code wasn't found above,
 41091                                  ; try an alternative patch area which is on top of NEC 98xx switching code.
 41092                                  
 41093                                  	mov	si,rpFind1a
 41094                                  	mov	dx,rpFind1aLen  ;8
 41095                                  	call	ScanCodeSeq
 41096                                  	jz	short rpGotPatch
 41097                                  
 41098                                  rp3Exit_j:
 41099                                  	jmp	rp3Exit
 41100                                  
 41101                                  ; Found the location to write patch code! DI = offset in code seg.
 41102                                  
 41103                                  rpGotPatch:
 41104                                  	;mov	[bp+4],di
 41105                                  	mov	[bp-StackVars.sv_pPatch],di	; save patch pointer
 41106                                  
 41107                                  ;----------------------------------------------------------------------------
 41108                                  ; Bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 41109                                  
 41110                                  	;cmp	word [bp+0],381
 41111                                  	;cmp	word [bp+StackVars.sv_wVersion],381 ; only need bug 1 if version
 41112                                  	cmp	word [bp],381
 41113                                  	jae	short rpBug2			;   < 3.81
 41114                                  
 41115                                  	mov	bx,rpBug1Strs			; locate find2 & find3 code
 41116                                  	call	FindBadCode
 41117                                  	jc	short rpBug2
 41118                                  
 41119                                  ; si = rpFind2 offset, di = rpFind3 offset
 41120                                  
 41121                                  	push	di
 41122                                  	mov	di,si				; rpFind2 offset
 41123                                  	mov	dx,rpFind2Len ; 3
 41124                                  
 41125                                  	cmp	byte [es:di-1],51h	 	; find2 preceeded by push cx?
 41126                                  	jne	short rp_no_cx
 41127                                  
 41128                                  	dec	di				;   yes, gobble up push cx too
 41129                                  	inc	dx
 41130                                  rp_no_cx:
 41131                                  	mov	si,rpRepl2			; patch out find2 sequence
 41132                                  	mov	cx,rpRepl2Len  ; 6
 41133                                  	call	GenPatch
 41134                                  
 41135                                  	pop	di				; rpFind3 offset
 41136                                  	cmp	byte [es:di-1],59h 		; find3 preceeded by pop cx?
 41137                                  	jne	short rp_no_cx2
 41138                                  
 41139                                  	mov	byte [es:di-1],90h		;   yes, no-op it
 41140                                  rp_no_cx2:
 41141                                  	;mov	ax,[bp+4]
 41142                                  	mov	ax,[bp+StackVars.sv_pPatch]	; change offset of far jmp
 41143                                  	;mov	[es:di+4],ax
 41144                                  	mov	[es:di+rpFind3Len],ax		;   to go to patch code
 41145                                  
 41146                                  	push	di				; save find3 offset
 41147                                  	mov	si,rpRepl3			; copy repl3 to patch area
 41148                                  	mov	cx,rpRepl3Len ; 5
 41149                                  	call	CopyPatch
 41150                                  
 41151                                  	pop	bx				; find3 offset
 41152                                  	add	bx,rpFind3Len+4	 ; 8		; skip over find3 and far jmp
 41153                                  	call	GenJump 			; jmp back from patch area
 41154                                  	;mov	[bp+4],di
 41155                                  	mov	[bp+StackVars.sv_pPatch], di	;   to main-line, update patch
 41156                                  						;   area pointer
 41157                                  
 41158                                  ;----------------------------------------------------------------------------
 41159                                  ; Bug # 2 -- loss of high regs on 386+ under VCPI only
 41160                                  
 41161                                  rpBug2:
 41162                                  	mov	bx,rpBug2Strs			; locate find4 & find5 code
 41163                                  	call	FindBadCode
 41164                                  	jc	short rpBug3
 41165                                  
 41166                                  ; si = rpFind4 offset, di = rpFind5 offset
 41167                                  
 41168                                  	;push	word [bp+4]
 41169                                  	push	word [bp+StackVars.sv_pPatch]	; save current patch pointer
 41170                                  						;   (where repl4 goes)
 41171                                  	push	di				; save find5 offset
 41172                                  
 41173                                  	mov	di,si
 41174                                  	mov	dx,rpFind4Len ; 4
 41175                                  	mov	si,rpRepl4
 41176                                  	mov	cx,rpRepl4Len ; 15
 41177                                  	call	GenPatch			; patch out find4 code
 41178                                  
 41179                                  	pop	di				; find5 offset
 41180                                  	add	di,5				; keep 5 bytes of find5 code
 41181                                  	;mov	bx,[bp+4]
 41182                                  	mov	bx,[bp+StackVars.sv_pPatch]	; jump to patch area
 41183                                  	push	bx				; save repl5 location
 41184                                  	call	GenJump
 41185                                  
 41186                                  	mov	si,rpRepl5			; copy repl5 code to patch
 41187                                  	mov	cx,rpRepl5Len  ; 15		;   area -- it has a jmp bx
 41188                                  	call	CopyPatch			;   so no need to jmp back to
 41189                                  						;   main-line code
 41190                                  
 41191                                  ; patches have been made, now update the patch code to store/load dwords just
 41192                                  ; after the code in the patch area
 41193                                  
 41194                                  	pop	di				; repl5 location
 41195                                  	pop	si				; repl4 location
 41196                                  
 41197                                  	;mov	ax,[bp+4]
 41198                                  	mov	ax,[bp+StackVars.sv_pPatch]	; (where dwords go)
 41199                                  
 41200                                  	;mov	[es:si+7],ax
 41201                                  	mov	[es:si+rpRepl4o1Len],ax		; offset for EAX
 41202                                  	;mov	[es:di+5],ax
 41203                                  	mov	[es:di+rpRepl5o1Len],ax
 41204                                  	add	ax,4
 41205                                  	;mov	[es:si+0Dh],ax
 41206                                  	mov	[es:si+rpRepl4o2Len],ax		; offset for ESI
 41207                                  	;mov	[es:di+0Bh],ax
 41208                                  	mov	[es:di+rpRepl5o2Len],ax
 41209                                  
 41210                                  	;add	word [bp+4],8
 41211                                  	add	word [bp+StackVars.sv_pPatch],8	; reserve space for 2 dwords in
 41212                                  						; patch area
 41213                                  
 41214                                  ;----------------------------------------------------------------------------
 41215                                  ; Bug # 3 -- loss of high regs on 386+ under VCPI only
 41216                                  
 41217                                  rpBug3:
 41218                                  	mov	bx,rpBug3Strs			; locate find6 & find7a code
 41219                                  	call	FindBadCode
 41220                                  	jc	short rpBug4
 41221                                  
 41222                                  	;add	di,9
 41223                                  	add	di,rpFind7aLen + 2		; skip over offset in find7a
 41224                                  	push	si				;   code and locate find7b
 41225                                  	mov	si,rpFind7b			;   sequence
 41226                                  	mov	dx,rpFind7bLen ; 3
 41227                                  	call	ScanCodeSeq_di
 41228                                  	pop	si
 41229                                  	jnz	short rpBug4
 41230                                  
 41231                                  	push	di				; save find7b code offset
 41232                                  
 41233                                  	mov	di,si
 41234                                  	mov	dx,rpFind6Len ; 3
 41235                                  	mov	si,rpRepl6
 41236                                  	mov	cx,rpRepl6Len ; 9
 41237                                  	call	GenPatch			; patch out find6 code
 41238                                  
 41239                                  	pop	di
 41240                                  	mov	dx,rpFind7bLen ; 3
 41241                                  	mov	si,rpRepl7
 41242                                  	mov	cx,rpRepl7Len ; 9
 41243                                  	call	GenPatch			; patch out find7b code
 41244                                  
 41245                                  ;----------------------------------------------------------------------------
 41246                                  ; Bug # 4 -- loss of high regs on 386+ under VCPI only
 41247                                  
 41248                                  rpBug4:
 41249                                  	;cmp	word [bp+0],360
 41250                                  	;cmp	word [bp+StackVars.sv_wVersion],360 ; only applies if 
 41251                                  	cmp	word [bp],360
 41252                                  	jbe	short rp3Exit 			; version > 3.60 and < 3.95
 41253                                  
 41254                                  	mov	bx,rpBug4Strs			; locate find8 & find9 code
 41255                                  	call	FindBadCode
 41256                                  	jc	short rp3Exit
 41257                                  
 41258                                  	push	di				; save find9 code offset
 41259                                  
 41260                                  	mov	di,si
 41261                                  	mov	dx,3
 41262                                  	mov	si,rpRepl8
 41263                                  	mov	cx,rpRepl8Len ; 4
 41264                                  	call	GenPatch			; patch out find8 code
 41265                                  
 41266                                  	pop	di				; find9 offset
 41267                                  	;mov	bx,[bp+4]
 41268                                  	mov	bx,[bp+StackVars.sv_pPatch]	; patch find9 to jmp to
 41269                                  	call	GenJump 			;   patch area
 41270                                  
 41271                                  	mov	si,rpRepl9			; copy replacement code to
 41272                                  	mov	cx,rpRepl9Len ; 5		;   patch area--it does a RET
 41273                                  	call	CopyPatch			;   so no jmp back to main-line
 41274                                  
 41275                                  rp3Exit:
 41276                                  	add	sp,StackVars.size
 41277                                  	pop	bp
 41278                                  	pop	ds
 41279                                  	pop	es
 41280                                  	pop	di
 41281                                  	pop	si
 41282                                  	pop	dx
 41283                                  	pop	cx
 41284                                  	pop	bx
 41285                                  	pop	ax
 41286                                  	retn
 41287                                  
 41288                                  ;----------------------------------------------------------------------------
 41289                                  ;
 41290                                  ; FindBadCode
 41291                                  ;
 41292                                  ; Searches Rational code segment looking for a pair of find strings (all
 41293                                  ; patches have at least two find strings).
 41294                                  ;
 41295                                  ; Entry:
 41296                                  ;	ES    = code segment to search
 41297                                  ;	DS:BX = search pair structure for this search
 41298                                  ;	[bp].sv_cbCodeSeg = length of code seg to search
 41299                                  ;
 41300                                  ; Exit:
 41301                                  ;	CY flag clear if both strings found, and
 41302                                  ;	SI    = offset in ES of 1st string
 41303                                  ;	DI    = offset in ES of 2nd string
 41304                                  ;	CY set if either string not found, or strings too far apart
 41305                                  ;
 41306                                  ; Used:
 41307                                  ;	CX
 41308                                  ;
 41309                                  ;----------------------------------------------------------------------------
 41310                                  
 41311                                  ;struc SearchPair
 41312                                  ; .sp_off1: resw 1	; offset of 1st search string
 41313                                  ; .sp_len1: resw 1	; length of 1st search string
 41314                                  ; .sp_off2: resw 1	; 2nd string
 41315                                  ; .sp_len2: resw 1	; 2nd string
 41316                                  ; .sp_diff: resw 1	; max difference between offsets
 41317                                  ; .size:
 41318                                  ;endstruc
 41319                                  
 41320                                  FindBadCode:
 41321                                  	;mov	cx,[bp+2]
 41322                                  	mov	cx,[bp+StackVars.sv_cbCodeSeg]	; search length
 41323                                  
 41324                                  	mov	si,[bx]	; mov si,[bx+0]
 41325                                  	;mov	si,[bx+Searchpair.sp_off1] ; ds:si -> search string
 41326                                  	
 41327                                  	;mov	dx,[bx+2]
 41328                                  	mov	dx,[bx+SearchPair.sp_len1] ; dx = search len
 41329                                  	call	ScanCodeSeq
 41330                                  	jnz	short fbc_error		; done if 1st not found
 41331                                  
 41332                                  	push	di			; save 1st string offset
 41333                                  
 41334                                  	;mov	si,[bx+4]
 41335                                  	mov	si,[bx+SearchPair.sp_off2]
 41336                                  	;mov	dx,[bx+6]
 41337                                  	mov	dx,[bx+SearchPair.sp_len2]
 41338                                  	call	ScanCodeSeq_di		; don't change flags after this!
 41339                                  
 41340                                  	pop	si			; restore 1st string offset
 41341                                  	jnz	short fbc_error
 41342                                  
 41343                                  	mov	ax,di			; sanity check that
 41344                                  	sub	ax,si			;   si < di && di - si <= allowed diff
 41345                                  	jc	short fbc_error
 41346                                  	;cmp	ax,[bx+8]
 41347                                  	cmp	ax,[bx+SearchPair.sp_diff]
 41348                                  	ja	short fbc_error
 41349                                  
 41350                                  	clc
 41351                                  	retn
 41352                                  
 41353                                  fbc_error:
 41354                                  	stc
 41355                                  	retn
 41356                                  
 41357                                  ;----------------------------------------------------------------------------
 41358                                  ;
 41359                                  ; GenPatch
 41360                                  ;
 41361                                  ; Generate a patch sequence. 1) insert a jump at the buggy code location
 41362                                  ; (jumps to the patch code area), 2) copy the selected patch code to the
 41363                                  ; patch area, 3) insert a jump from the patch area back to the main-line
 41364                                  ; code.
 41365                                  ;
 41366                                  ; Entry:
 41367                                  ;	ES:DI = start of buggy code to be patched
 41368                                  ;	DX    = length of buggy code to be patched
 41369                                  ;	DS:SI = replacement patch code
 41370                                  ;	CX    = length of replacement patch code
 41371                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 41372                                  ;
 41373                                  ; Exit:
 41374                                  ;	DI, [bp].sv_pPatch = byte after generated patch code
 41375                                  ;
 41376                                  ; Used:
 41377                                  ;	AX, BX, SI, Flags
 41378                                  ;
 41379                                  ;----------------------------------------------------------------------------
 41380                                  
 41381                                  GenPatch:
 41382                                  	push	di			;save offset of buggy code
 41383                                  
 41384                                  	;mov	bx,[bp+4]
 41385                                  	mov	bx,[bp+StackVars.sv_pPatch]
 41386                                  					;jump from buggy code to patch area
 41387                                  	call	GenJump
 41388                                  
 41389                                  	call	CopyPatch		;copy replacement code to patch area
 41390                                  
 41391                                  	pop	bx			;offset of buggy code + buggy code
 41392                                  	add	bx,dx			;  length = return from patch offset
 41393                                  
 41394                                  	call	GenJump 		;jump from patch area back to main-
 41395                                  	;mov	[bp+4],di
 41396                                  	mov	[bp+StackVars.sv_pPatch],di
 41397                                  					;  line code, update patch pointer
 41398                                  	retn
 41399                                  
 41400                                  ;----------------------------------------------------------------------------
 41401                                  ;
 41402                                  ; CopyPatch
 41403                                  ;
 41404                                  ; Copies patch code to patch location.
 41405                                  ;
 41406                                  ; Entry:
 41407                                  ;	DS:SI = patch code to be copied
 41408                                  ;	ES    = segment of code to patch
 41409                                  ;	CX    = length of code to copy
 41410                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 41411                                  ;
 41412                                  ; Exit:
 41413                                  ;	DI, [bp].sv_pPatch = byte after copied patch code
 41414                                  ;
 41415                                  ; Used:
 41416                                  ;	SI, Flags
 41417                                  ;
 41418                                  ;----------------------------------------------------------------------------
 41419                                  
 41420                                  CopyPatch:
 41421                                  	push	cx
 41422                                  	;mov	di,[bp+4]
 41423                                  	mov	di,[bp+StackVars.sv_pPatch] ;patch pointer is the dest offset
 41424                                  	cld
 41425                                  	rep movsb
 41426                                  	pop	cx
 41427                                  	;mov	[bp+4],di
 41428                                  	mov	[bp+StackVars.sv_pPatch],di ;update net pointer location
 41429                                  	retn
 41430                                  
 41431                                  ;----------------------------------------------------------------------------
 41432                                  ;
 41433                                  ; GenJump
 41434                                  ;
 41435                                  ; Generates a rel16 JMP instruction at location 'from' to location 'to'.
 41436                                  ;
 41437                                  ; Entry:
 41438                                  ;	ES:DI = from location (where to put jmp instruction)
 41439                                  ;	BX    = to location (where to jump to)
 41440                                  ;
 41441                                  ; Exit:
 41442                                  ;	DI = byte after generated jump
 41443                                  ;
 41444                                  ; Used:
 41445                                  ;	AX
 41446                                  ;
 41447                                  ;----------------------------------------------------------------------------
 41448                                  
 41449                                  GenJump:
 41450                                  	mov	al,0E9h		; jmp rel16 opcode
 41451                                  	stosb
 41452                                  
 41453                                  	mov	ax,bx		; calc offset to 'to' location
 41454                                  	sub	ax,di
 41455                                  	sub	ax,2
 41456                                  
 41457                                  	stosw			; output offset
 41458                                  
 41459                                  	retn
 41460                                  
 41461                                  ;----------------------------------------------------------------------------
 41462                                  ;
 41463                                  ; ScanCodeSeq
 41464                                  ;
 41465                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 41466                                  ;
 41467                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 41468                                  ;
 41469                                  ;----------------------------------------------------------------------------
 41470                                  
 41471                                  ScanCodeSeq:
 41472                                  	mov	di,200h
 41473                                  ScanCodeSeq_di:
 41474                                  	push	cx
 41475                                  	sub	cx,dx
 41476                                  	inc	cx
 41477                                  scsagain:
 41478                                  	push	si
 41479                                  	push	di
 41480                                  	push	cx
 41481                                  	mov	cx,dx
 41482                                  	rep	cmpsb
 41483                                  	pop	cx
 41484                                  	pop	di
 41485                                  	pop	si
 41486                                  	je	short scsfound
 41487                                  	inc	di
 41488                                  	loop	scsagain
 41489                                  scsfound:
 41490                                  	pop	cx
 41491                                  vvexit:		; 18/12/2022
 41492                                  	retn
 41493                                  	
 41494                                  ;----------------------------------------------------------------------------
 41495                                  ;
 41496                                  ; VerifyVersion
 41497                                  ;
 41498                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 41499                                  ; from ES:2A.
 41500                                  ;
 41501                                  ;       Entry: AX = binary version number 
 41502                                  ;       Exit : Z flag set if version numbers match
 41503                                  ;
 41504                                  ;----------------------------------------------------------------------------
 41505                                  
 41506                                  VerifyVersion:
 41507                                  	mov	si,[es:2Ah]		; offset of version number
 41508                                  					;  in ascii
 41509                                  	mov	bl,10
 41510                                  	add	si,3			; point to last digit
 41511                                  
 41512                                  	call	VVDigit
 41513                                  	jne	short vvexit
 41514                                  	call	VVDigit
 41515                                  	jne	short vvexit
 41516                                  	cmp	byte [es:si],'.'
 41517                                  	jne	short vvexit
 41518                                  	dec	si
 41519                                  	;call	VVDigit
 41520                                  	; 18/12/2022
 41521                                  	;jmp	short VVDigit
 41522                                  ;vvexit:
 41523                                  	;retn
 41524                                  VVDigit:
 41525                                  	div	bl
 41526                                  	add	ah,'0'
 41527                                  	dec	si
 41528                                  	cmp	[es:si+1],ah
 41529                                  	mov	ah,0			; do not xor or sub we need Z
 41530                                  	retn
 41531                                  
 41532                                  %endif
 41533                                  
 41534                                  ;-----------------------------------------------------------------------
 41535                                  
 41536                                  ; 23/05/2019 - Retro DOS v4.0
 41537                                  ; DOSCODE:B702h (MSDOS 6.21, MSDOS.SYS)
 41538                                  
 41539                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41540                                  ; DOSCODE:B3E0h (MSDOS 5.0, MSDOS.SYS)
 41541                                  
 41542                                  exepatch_start:	 ; label byte
 41543                                  
 41544                                  	; The following is the code that'll be layed over the buggy unpack
 41545                                  	; code.
 41546                                  str1:
 41547 00007353 06                      	db  06h	  		;push	es		 
 41548 00007354 8CD8                    	db  8Ch,0D8h		;mov	ax,ds 
 41549                                  
 41550                                  first_stop equ	$-str1
 41551                                  			
 41552 00007356 2BC2                    	db  2Bh, 0C2h		;sub	ax, dx			
 41553                                  
 41554                                  first:  ; label	byte
 41555                                  
 41556 00007358 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41557 0000735A 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41558 0000735C BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41559 0000735F 57                      	db  57h	    		;push	di
 41560 00007360 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41561 00007363 B0FF                    	db  0B0h,0FFh 		;mov	al,0FFH 		
 41562 00007365 F3AE                    	db  0F3h,0AEh 		;repz	scasb			
 41563 00007367 47                      	db  47h	    		;inc	di			
 41564 00007368 8BF7                    	db  8Bh,0F7h  		;mov	si,di			
 41565 0000736A 5F                      	db  5Fh	    		;pop	di
 41566 0000736B 58                      	db  58h	    		;pop	ax
 41567                                  
 41568                                  second_stop equ	$-first
 41569                                  
 41570 0000736C 2BC2                    	db  2Bh,0C2h  		;sub	ax, dx			
 41571                                  
 41572                                  second: ; label	byte
 41573                                  
 41574 0000736E 8EC0                    	db  8Eh,0C0h  		;mov	es,ax			
 41575                                  		    		;NextRec:				
 41576 00007370 B90402                  	db  0B9h,04h,02h	;mov	cx, 0204h
 41577                                  		    		;norm_agn:				
 41578 00007373 8BC6                    	db  8Bh,0C6h		;mov	ax,si			
 41579 00007375 F7D0                    	db  0F7h,0D0h		;not	ax		
 41580 00007377 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41581 00007379 7413                    	db  74h,13h		;jz	short SI_ok			
 41582 0000737B 8CDA                    	db  8Ch,0DAh		;mov	dx,ds			
 41583 0000737D 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H
 41584 00007380 2BD0                    	db  2Bh,0D0h		;sub	dx,ax			
 41585 00007382 7308                    	db  73h,08h		;jnc	short SItoDS			
 41586 00007384 F7DA                    	db  0F7h,0DAh		;neg	dx			
 41587 00007386 D3E2                    	db  0D3h,0E2h		;shl	dx,cl			
 41588 00007388 2BF2                    	db  2Bh,0F2h		;sub	si,dx			
 41589 0000738A 33D2                    	db  33h,0D2h		;xor	dx,dx			
 41590                                  				;SItoDS: 				
 41591 0000738C 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 41592                                  				;SI_ok:					
 41593 0000738E 87F7                    	db  87h,0F7h		;xchg	si,di			
 41594 00007390 1E                      	db  1Eh			;push	ds			
 41595 00007391 06                      	db  06h			;push	es			
 41596 00007392 1F                      	db  1Fh			;pop	ds			
 41597 00007393 07                      	db  07h			;pop	es			
 41598 00007394 FECD                    	db  0FEh,0CDh		;dec	ch			
 41599 00007396 75DB                    	db  75h,0DBh		;jnz	short norm_agn		
 41600 00007398 AC                      	db  0ACh		;lodsb			
 41601 00007399 92                      	db  92h			;xchg	dx,ax
 41602 0000739A 4E                      	db  4Eh			;dec	si
 41603 0000739B AD                      	db  0ADh		;lodsw			
 41604 0000739C 8BC8                    	db  8Bh,0C8h		;mov	cx,ax		
 41605 0000739E 46                      	db  46h			;inc	si		
 41606 0000739F 8AC2                    	db  8Ah,0C2h		;mov	al,dl		
 41607 000073A1 24FE                    	db  24h,0FEh		;and	al,0FEH		
 41608 000073A3 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 41609 000073A5 7505                    	db  75h,05h		;jne	short TryEnum
 41610 000073A7 AC                      	db  0ACh		;lodsb				
 41611 000073A8 F3AA                    	db  0F3h,0AAh		;rep stosb			
 41612                                  
 41613                                  ;	db  0EBh,07h,90h	;jmp	short TryNext
 41614 000073AA EB06                    	db  0EBh,06h		;jmp	short TryNext
 41615                                  
 41616                                  				;TryEnum:
 41617 000073AC 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 41618 000073AE 756C                    	db  75h,6Ch		;jne	short CorruptExe		
 41619 000073B0 F3A4                    	db  0F3h,0A4h		;rep movsb			
 41620                                  				;TryNext:
 41621                                  
 41622 000073B2 92                      	db  92h			;xchg	dx,ax
 41623                                  ;	db  8Ah,0C2h		;mov	al,dl			
 41624                                  
 41625 000073B3 A801                    	db  0A8h,01h		;test	al,1			
 41626 000073B5 74B9                    	db  74h,0B9h		;jz	short NextRec			
 41627 000073B7 9090                    	db  90h,90h		;nop,nop
 41628                                  	
 41629                                  last_stop equ $-second
 41630                                  size_str1 equ $-str1
 41631                                  
 41632                                  	; The following is the code that we need to look for in the exe
 41633                                  	; file.
 41634                                  
 41635                                  scan_patch1: ; label byte
 41636                                  
 41637 000073B9 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 41638 000073BB 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 41639 000073BD 2BC2                    	db  2Bh,0C2h		;sub	ax,dx
 41640 000073BF 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41641 000073C1 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41642 000073C3 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41643 000073C6 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41644 000073C9 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 41645 000073CB F3AE                    	db  0F3h,0AEh		;repz	scasb			
 41646 000073CD 47                      	db  47h			;inc	di			
 41647 000073CE 8BF7                    	db  8Bh,0F7h		;mov	si,di
 41648 000073D0 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 41649 000073D2 2BC2                    	db  2Bh,0C2h		;sub	ax, dx
 41650 000073D4 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 41651 000073D6 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41652                                  				;NextRec:
 41653 000073D9 B104                    	db  0B1h,04h		;mov	cl,4
 41654 000073DB 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 41655 000073DD F7D0                    	db  0F7h,0D0h		;not	ax		
 41656 000073DF D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41657 000073E1 7409                    	db  74h,09h		;jz	short SI_ok
 41658 000073E3 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 41659 000073E5 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41660 000073E7 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 41661 000073E9 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H	       
 41662                                  	       			;SI_ok:
 41663 000073EC 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 41664 000073EE F7D0                    	db  0F7h,0D0h		;not	ax
 41665 000073F0 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 41666 000073F2 7409                    	db  74h,09h		;jz	short DI_ok
 41667 000073F4 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 41668 000073F6 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41669 000073F8 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 41670 000073FA 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 41671                                  				;DI_ok:
 41672                                  
 41673                                  size_scan_patch1 equ $-scan_patch1
 41674                                  
 41675                                  scan_patch2: ; label byte
 41676                                  			
 41677 000073FD 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 41678 000073FF 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 41679 00007401 48                      	db  48h			;dec	ax
 41680 00007402 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41681 00007404 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41682 00007406 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41683 00007409 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41684 0000740C B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 41685 0000740E F3AE                    	db  0F3h,0AEh		;repz	scasb			
 41686 00007410 47                      	db  47h			;inc	di			
 41687 00007411 8BF7                    	db  8Bh,0F7h		;mov	si,di
 41688 00007413 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 41689 00007415 48                      	db  48h			;dec	ax
 41690 00007416 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 41691 00007418 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH		
 41692                                  				;NextRec:
 41693 0000741B B104                    	db  0B1h,04h		;mov	cl,4
 41694 0000741D 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 41695 0000741F F7D0                    	db  0F7h,0D0h		;not	ax		
 41696 00007421 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41697 00007423 740A                    	db  74h,0Ah		;jz	short SI_ok
 41698 00007425 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 41699 00007427 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41700 00007429 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 41701 0000742B 81CEF0FF                	db  81h,0CEh,0F0h,0FFh
 41702                                  				;or	si,0FFF0H
 41703                                  				;SI_ok:
 41704 0000742F 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 41705 00007431 F7D0                    	db  0F7h,0D0h		;not	ax
 41706 00007433 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 41707 00007435 740A                    	db  74h,0Ah		;jz	short DI_ok
 41708 00007437 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 41709 00007439 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41710 0000743B 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 41711 0000743D 81CFF0FF                	db  81h,0CFh,0F0h,0FFh
 41712                                  				;or	di,0FFF0H
 41713                                  				;DI_ok:
 41714                                  
 41715                                  size_scan_patch2 equ $-scan_patch2
 41716                                  
 41717                                  scan_patch3: ; label byte
 41718                                  
 41719 00007441 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 41720 00007443 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 41721 00007445 48                      	db  48h			;dec	ax
 41722 00007446 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41723 00007448 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41724 0000744A BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41725 0000744D B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41726 00007450 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 41727 00007452 F3AE                    	db  0F3h,0AEh		;repz	scasb			
 41728 00007454 47                      	db  47h			;inc	di			
 41729 00007455 8BF7                    	db  8Bh,0F7h		;mov	si,di
 41730 00007457 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 41731 00007459 48                      	db  48h			;dec	ax
 41732 0000745A 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 41733 0000745C BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH		
 41734                                  				;NextRec:
 41735 0000745F B104                    	db  0B1h,04h		;mov	cl,4
 41736 00007461 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 41737 00007463 F7D0                    	db  0F7h,0D0h		;not	ax		
 41738 00007465 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41739 00007467 7409                    	db  74h,09h		;jz	short SI_ok
 41740 00007469 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 41741 0000746B 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41742 0000746D 8EDA                    	db  8Eh,0DAh		;mov	ds,dx	
 41743 0000746F 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H	
 41744                                  				;SI_ok:
 41745 00007472 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 41746 00007474 F7D0                    	db  0F7h,0D0h		;not	ax
 41747 00007476 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 41748 00007478 7409                    	db  74h,09h		;jz	short DI_ok
 41749 0000747A 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 41750 0000747C 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41751 0000747E 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 41752 00007480 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 41753                                  				;DI_ok:
 41754                                  
 41755                                  size_scan_patch3 equ $-scan_patch3
 41756                                  
 41757                                  scan_com: ; label byte
 41758                                  
 41759 00007483 AC                      	db  0ACh		;lodsb			
 41760 00007484 8AD0                    	db  8Ah,0D0h		;mov	dl,al		
 41761 00007486 4E                      	db  4Eh			;dec	si
 41762 00007487 AD                      	db  0ADh		;lodsw			
 41763 00007488 8BC8                    	db  8Bh,0C8h		;mov	cx,ax		
 41764 0000748A 46                      	db  46h			;inc	si		
 41765 0000748B 8AC2                    	db  8Ah,0C2h		;mov	al,dl		
 41766 0000748D 24FE                    	db  24h,0FEh		;and	al,0FEH		
 41767 0000748F 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 41768 00007491 7506                    	db  75h,06h		;jne	short TryEnum
 41769 00007493 AC                      	db  0ACh		;lodsb				
 41770 00007494 F3AA                    	db  0F3h,0AAh		;rep stosb			
 41771 00007496 EB0790                  	db  0EBh,07h,90h	;jmp	short TryNext
 41772                                  				;TryEnum:
 41773 00007499 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 41774 0000749B 756B                    	db  75h,6Bh		;jne	short CorruptExe		
 41775 0000749D F3A4                    	db  0F3h,0A4h		;rep movsb			
 41776                                  				;TryNext:
 41777 0000749F 8AC2                    	db  8Ah,0C2h		;mov	al,dl			
 41778 000074A1 A801                    	db  0A8h,01h		;test	al,1			
 41779                                  ;	db  74h,0BAh		;jz	short NextRec			
 41780                                  
 41781                                  size_scan_com	equ	$-scan_com
 41782                                  
 41783                                  ;-----------------------------------------------------------------------
 41784                                  
 41785                                  ; 23/05/2019 - Retro DOS v4.0
 41786                                  ; DOSCODE:B852h (MSDOS 6.21, MSDOS.SYS)
 41787                                  
 41788                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41789                                  ; DOSCODE:B530h (MSDOS 5.0, MSDOS.SYS)
 41790                                  
 41791                                  ExePatch:
 41792                                  	; 28/12/2022 - Retro DOS v4.1
 41793                                  	;call	ExePackPatch
 41794                                  	;;call	word [ss:RationalPatchPtr]
 41795                                  	;retn
 41796                                  	; 28/12/2022
 41797                                  	;jmp	short ExePackPatch
 41798                                  
 41799                                  ;-----------------------------------------------------------------------
 41800                                  ;
 41801                                  ; Procedure Name 	: ExePackPatch
 41802                                  ;
 41803                                  ; Inputs	 	: DS 			-> DOSDATA
 41804                                  ;			  ES:0 			-> read in image
 41805                                  ;			  ax:cx = start cs:ip of program
 41806                                  ; Output		:		
 41807                                  ;
 41808                                  ;	1. If ES <= 0fffh
 41809                                  ;	   2. if exepack signature ('RB') found
 41810                                  ;	      3. if common code to patch compares (for 3 diff. versions)
 41811                                  ;	       	 4. if rest of the code & checksum compares
 41812                                  ;	  	    5. overlay buggy code with code in 
 41813                                  ;		       doscode:str1.
 41814                                  ;		 6. endif
 41815                                  ;	      7. endif
 41816                                  ;	   8. endif
 41817                                  ;	9. endif
 41818                                  ;
 41819                                  ;
 41820                                  ; Uses			: NONE
 41821                                  ;
 41822                                  ;-----------------------------------------------------------------------
 41823                                  		
 41824                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41825                                  	; 23/05/2019 - Retro DOS v4.0	
 41826                                  ExePackPatch:
 41827 000074A3 53                      	push	bx
 41828 000074A4 8CC3                    	mov	bx,es			; bx has load segment
 41829 000074A6 81FBFF0F                	cmp	bx,0FFFh		; Q: is the load segment > 64K
 41830 000074AA 7602                    	jbe	short ep_cont		; N: 
 41831 000074AC 5B                      	pop	bx			; Y: no need to patch
 41832 000074AD C3                      	retn
 41833                                  ep_cont:
 41834 000074AE 1E                      	push	ds
 41835 000074AF 06                      	push	es
 41836 000074B0 50                      	push	ax
 41837 000074B1 51                      	push	cx
 41838 000074B2 56                      	push	si
 41839 000074B3 57                      	push	di
 41840                                  	
 41841                                  		; M033 - start
 41842                                  		; exepacked programs have an IP of 12h (>=2)
 41843                                  
 41844 000074B4 83E902                  	sub	cx,2			; Q: is IP >=2 
 41845 000074B7 7303                    	jnb	short epp_1		; N: exit
 41846 000074B9 E9C500                  	jmp	ep_notpacked
 41847                                  					; ax:cx now points to location of
 41848                                  					; 'RB' if this is an exepacked file.
 41849                                  		; M033 - end
 41850                                  epp_1:
 41851 000074BC 89CF                    	mov	di,cx
 41852 000074BE 8EC0                    	mov	es,ax
 41853 000074C0 36893E[8700]            	mov	[ss:UNPACK_OFFSET],di	; save pointer to 'RB' in 
 41854                                  					; unpack_offset
 41855                                  
 41856 000074C5 26813D5242              	cmp	word [es:di],'RB' ; 4252h
 41857                                  	;ljne	ep_notpacked
 41858 000074CA 7403                    	je	short epp_2
 41859 000074CC E9B200                  	jmp	ep_notpacked
 41860                                  epp_2:
 41861 000074CF 0E                      	push	cs
 41862 000074D0 1F                      	pop	ds			; set ds to cs
 41863                                  
 41864                                  	;add	di,6Ch
 41865 000074D1 83C76C                  	add	di,PATCH1_COM_OFFSET	; es:di -> points to place in packed 
 41866                                  					;          file where we hope to find
 41867                                  					;	   scan string. 
 41868                                  
 41869 000074D4 E8B200                  	call	chk_common_str		; check for match
 41870                                  
 41871 000074D7 7524                    	jnz	short ep_chkpatch2	; Q: does the patch match
 41872                                  					; N: check at patch2_offset
 41873                                  					; Y: check for rest of patch string
 41874 000074D9 BE[B973]                	mov	si,scan_patch1
 41875                                  					; ds:si -> scan string 
 41876 000074DC 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; restore di to point to 'RB'
 41877                                  
 41878                                  	;add	di,28h
 41879                                  	; 07/12/2022
 41880 000074E1 83C728                  	add	di,PATCH1_OFFSET	; es:di -> points to place in packed 
 41881                                  					;          file where we hope to find
 41882                                  					;	   scan string. 
 41883                                  	;mov	cx,68
 41884 000074E4 B94400                  	mov	cx,size_scan_patch1
 41885                                  	;mov	bx,142
 41886 000074E7 BB8E00                  	mov	bx,CHKSUM1_LEN
 41887                                  	;mov	ax,0EF4Eh
 41888 000074EA B84EEF                  	mov	ax,PATCH1_CHKSUM
 41889 000074ED E8AD00                  	call	chk_patchsum		; check if patch and chk sum compare
 41890 000074F0 7208                    	jc	short ep_done1		; Q: did we pass the test
 41891                                  					; N: exit
 41892                                  					; Y: overlay code with new 
 41893 000074F2 BE[5373]                	mov	si,str1
 41894                                  	;mov	cx,102
 41895 000074F5 B96600                  	mov	cx,size_str1
 41896                                  	
 41897 000074F8 F3A4                    	rep	movsb
 41898                                  ep_done1:
 41899 000074FA E98400                  	jmp	ep_done
 41900                                  
 41901                                  ep_chkpatch2:
 41902                                  	;mov	di,76h
 41903 000074FD BF7600                  	mov	di,PATCH2_COM_OFFSET	; es:di -> possible location of patch
 41904                                  					; in another version of unpack
 41905 00007500 E88600                  	call	chk_common_str		; check for match
 41906                                  
 41907 00007503 7544                    	jnz	short ep_chkpatch3	; Q: does the patch match
 41908                                  					; N: check for patch3_offset
 41909                                  					; Y: check for rest of patch string
 41910                                  
 41911 00007505 BE[FD73]                	mov	si,scan_patch2
 41912                                  					; ds:si -> scan string 
 41913                                  	;mov	di,32h
 41914 00007508 BF3200                  	mov	di,PATCH2_OFFSET	; es:di -> points to place in packed 
 41915                                  					;          file where we hope to find
 41916                                  	;mov	cx,68			;	   scan string. 
 41917 0000750B B94400                  	mov	cx,size_scan_patch2
 41918                                  	;mov	bx,140
 41919 0000750E BB8C00                  	mov	bx,CHKSUM2_LEN
 41920                                  	;mov	ax,78B2h
 41921 00007511 B8B278                  	mov	ax,PATCH2_CHKSUM
 41922 00007514 E88600                  	call	chk_patchsum		; check if patch and chk sum compare
 41923                                  
 41924                                  					; M046 - Start
 41925                                  					; Q: did we pass the test
 41926 00007517 7311                    	jnc	short ep_patchcode2		; Y: overlay code with new 
 41927                                  					; N: try with a different chksum
 41928                                  
 41929 00007519 BE[FD73]                	mov	si,scan_patch2
 41930                                  					; ds:si -> scan string 
 41931                                  	;mov	cx,68
 41932 0000751C B94400                  	mov	cx,size_scan_patch2
 41933                                  	;mov	bx,129
 41934 0000751F BB8100                  	mov	bx,CHKSUM2A_LEN
 41935                                  	;mov	ax,1C47h
 41936 00007522 B8471C                  	mov	ax,PATCH2A_CHKSUM
 41937 00007525 E87500                  	call	chk_patchsum		; check if patch and chk sum compare
 41938                                  					; Q: did we pass the test
 41939 00007528 7257                    	jc	short ep_notpacked		; N: try with a different chksum
 41940                                  					; Y: overlay code with new 
 41941                                  						
 41942                                  ep_patchcode2:			       	; M046 - End
 41943 0000752A BE[5373]                	mov	si,str1
 41944                                  	;mov	cx,3
 41945 0000752D B90300                  	mov	cx,first_stop
 41946 00007530 F3A4                    	rep	movsb
 41947 00007532 B89048                  	mov	ax,4890h		; ax = opcodes for dec ax, nop
 41948 00007535 AB                      	stosw
 41949 00007536 83C602                  	add	si,2
 41950                                  	;mov	cx,20
 41951 00007539 B91400                  	mov	cx,second_stop
 41952 0000753C F3A4                    	rep	movsb
 41953 0000753E AB                      	stosw				; put in dec ax and nop
 41954 0000753F 83C602                  	add	si,2
 41955                                  	;mov	cx,75
 41956 00007542 B94B00                  	mov	cx,last_stop
 41957 00007545 F3A4                    	rep	movsb
 41958 00007547 EB38                    	jmp	short ep_done
 41959                                  
 41960                                  ep_chkpatch3:
 41961                                  	;mov	di,74h
 41962 00007549 BF7400                  	mov	di,PATCH3_COM_OFFSET	; es:di -> possible location of patch
 41963                                  					; in another version of unpack
 41964 0000754C E83A00                  	call	chk_common_str		; check for match
 41965                                  
 41966 0000754F 7530                    	jnz	short ep_notpacked	; Q: does the patch match
 41967                                  					; N: exit
 41968                                  					; Y: check for rest of patch string
 41969 00007551 BE[4174]                	mov	si,scan_patch3
 41970                                  					; ds:si -> scan string 
 41971                                  	;mov	di,32h
 41972 00007554 BF3200                  	mov	di,PATCH3_OFFSET	; es:di -> points to place in packed 
 41973                                  					;          file where we hope to find
 41974                                  					;	   scan string. 
 41975                                  	;mov	cx,66
 41976 00007557 B94200                  	mov	cx,size_scan_patch3
 41977                                  	;mov	bx,139
 41978 0000755A BB8B00                  	mov	bx,CHKSUM3_LEN
 41979                                  	;mov	ax,4EDEh
 41980 0000755D B8DE4E                  	mov	ax,PATCH3_CHKSUM
 41981 00007560 E83A00                  	call	chk_patchsum		; check if patch and chk sum compare
 41982 00007563 721C                    	jc	short ep_notpacked	; Q: did we pass the test
 41983                                  					; N: exit
 41984                                  					; Y: overlay code with new 
 41985 00007565 BE[5373]                	mov	si,str1
 41986                                  	;mv	cx,3
 41987 00007568 B90300                  	mov	cx,first_stop
 41988 0000756B F3A4                    	rep	movsb
 41989 0000756D B048                    	mov	al,48h			; al = opcode for dec ax
 41990 0000756F AA                      	stosb
 41991 00007570 83C602                  	add	si,2
 41992                                  	;mov	cx,20
 41993 00007573 B91400                  	mov	cx,second_stop
 41994 00007576 F3A4                    	rep	movsb
 41995 00007578 AA                      	stosb				; put in dec ax
 41996 00007579 83C602                  	add	si,2
 41997                                  	;mov	cx,75
 41998 0000757C B94B00                  	mov	cx,last_stop
 41999 0000757F F3A4                    	rep	movsb
 42000                                  
 42001                                  ep_notpacked:
 42002                                  	;stc
 42003                                  ep_done:
 42004 00007581 5F                      	pop	di
 42005 00007582 5E                      	pop	si
 42006 00007583 59                      	pop	cx
 42007 00007584 58                      	pop	ax
 42008 00007585 07                      	pop	es
 42009 00007586 1F                      	pop	ds
 42010 00007587 5B                      	pop	bx
 42011 00007588 C3                      	retn
 42012                                  
 42013                                  ;-------------------------------------------------------------------------
 42014                                  ;
 42015                                  ; 	Procedure Name	: chk_common_str
 42016                                  ;
 42017                                  ;	Input		: DS = DOSCODE
 42018                                  ;			; ES:DI points to string in packed file
 42019                                  ;
 42020                                  ;	Output		; Z if match else NZ
 42021                                  ;
 42022                                  ;-------------------------------------------------------------------------
 42023                                  
 42024                                  	; 23/05/2019 - Retro DOS v4.0
 42025                                  chk_common_str:
 42026 00007589 BE[8374]                	mov	si,scan_com
 42027                                  					; ds:si -> scan string 
 42028                                  	;mov	cx,32
 42029 0000758C B92000                  	mov	cx,size_scan_com
 42030                                  
 42031 0000758F F3A6                    	repe	cmpsb	       
 42032                                  
 42033                                  					; M046 - start
 42034                                  	; a fourth possible version of these exepacked programs have a 
 42035                                  	; 056h instead of 06Bh. See scan_com above
 42036                                  	;
 42037                                  	; 	db  75h, 6Bh		;jne CorruptExe		
 42038                                  	;
 42039                                  	; If the mismatch at this point is due to a 56h instead of 6Bh 
 42040                                  	; we shall try to match the rest of the string
 42041                                  	;
 42042                                  
 42043 00007591 7409                    	jz	short ccs_done
 42044 00007593 26807DFF56              	cmp	byte [es:di-1],56h
 42045 00007598 7502                    	jnz	short ccs_done
 42046                                  
 42047 0000759A F3A6                    	repe	cmpsb	    
 42048                                  ccs_done:				; M046 - end
 42049 0000759C C3                      	retn
 42050                                  
 42051                                  ;-------------------------------------------------------------------------
 42052                                  ;
 42053                                  ;	Procedure Name	: chk_patchsum
 42054                                  ;
 42055                                  ;	Input		: DS:SI -> string we're looking for
 42056                                  ;			: ES:DI -> offset in packed file
 42057                                  ;			: CX 	= scan length
 42058                                  ;			: BX	= length of check sum
 42059                                  ;			: AX 	= value of check sum
 42060                                  ;
 42061                                  ;	Output		: if patch & check sum compare
 42062                                  ;				NC
 42063                                  ;			  else
 42064                                  ;				CY
 42065                                  ;
 42066                                  ;	Uses		: AX, BX, CX, SI
 42067                                  ;
 42068                                  ;-------------------------------------------------------------------------
 42069                                  
 42070                                  	; 23/05/2019 - Retro DOS v4.0
 42071                                  chk_patchsum:
 42072 0000759D 57                      	push	di
 42073                                  
 42074 0000759E F3A6                    	repe	cmpsb			   
 42075                                  
 42076 000075A0 7518                    	jnz	short cp_fail		; Q: does the patch match
 42077                                  					; N: exit
 42078                                  					; Y:	
 42079                                  
 42080                                  		; we do a check sum starting from the location of the 
 42081                                  		; exepack signature 'RB' up to 11c/2 bytes, the end of the
 42082                                  		; unpacking code.
 42083                                  
 42084 000075A2 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; di -> start of unpack code
 42085 000075A7 89D9                    	mov	cx,bx			; cx = length of check sum
 42086                                  
 42087 000075A9 89C3                    	mov	bx,ax			; save check sum passed to us in bx
 42088 000075AB 31C0                    	xor	ax,ax
 42089                                  ep_chksum:
 42090 000075AD 260305                  	add	ax,[es:di]
 42091 000075B0 83C702                  	add	di,2
 42092 000075B3 E2F8                    	loop	ep_chksum
 42093                                  
 42094 000075B5 5F                      	pop	di			; restore di
 42095                                  
 42096 000075B6 39D8                    	cmp	ax,bx		 	; Q: does the check sum match
 42097                                  	;jne	short cp_fail		; N: exit
 42098                                  					; Y: 
 42099                                  	; 25/09/2023
 42100                                  	;clc	
 42101                                  	;retn
 42102 000075B8 74E2                    	je	short ccs_done ; cf=0
 42103                                  	
 42104                                  cp_fail:
 42105 000075BA F9                      	stc
 42106 000075BB C3                      	retn
 42107                                  
 42108                                  ; 28/12/2022 - Retro DOS v4.1
 42109                                  %if 0
 42110                                  ;--------------------------------------------------------------------------- 
 42111                                  
 42112                                  
 42113                                  ; M020 : BEGIN
 42114                                  ;
 42115                                  ;---------------------------------------------------------------------------
 42116                                  ;
 42117                                  ; procedure : RationalPatch
 42118                                  ;
 42119                                  ; A routine (in Ration DOS extender) which is invoked at hardware interrupts
 42120                                  ; clobbers CX register on 286 machines. (123 release 3 uses Rational DOS
 42121                                  ; extender). This routine identifies Buggy Rational EXEs and fixes the bug.
 42122                                  ;
 42123                                  ; THE BUG is in the following code sequence:
 42124                                  ;
 42125                                  ;8b 0e 10 00	mov	cx, ds:[10h]		; delay count
 42126                                  ;90		even				; word align
 42127                                  ;e2 fe		loop	$			; wait		CLOBBERS CX
 42128                                  ;e8 xx xx	call	set_A20			; enable A20
 42129                                  ;
 42130                                  ; This patch routine replaces the mov & the loop with a far call into a
 42131                                  ; routine in DOS data segment which is in low memory (because A20 line
 42132                                  ; is off). The routine (RatBugCode) in DOS data saves & restores CX around
 42133                                  ; a mov & loop.
 42134                                  ;
 42135                                  ; Identification of Buggy Rational EXE
 42136                                  ; ====================================
 42137                                  ;
 42138                                  ; (ALL OFFSETS ARE IN THE PROGRAM SECTION - EXCLUDING THE EXE HEADER)
 42139                                  ;
 42140                                  ; OFFSET				Contains
 42141                                  ; ------				--------
 42142                                  ; 0000h			100 times Version number in binary
 42143                                  ;			bug exists in version 3.48 thru 3.83 (both inclusive)
 42144                                  ;
 42145                                  ; 000ah			the WORDS : 0000h, 0020h, 0000h, 0040h, 0001h
 42146                                  ;
 42147                                  ; 002ah			offset where version number is stored in ASCII
 42148                                  ;				e.g. '3.48A'
 42149                                  ;
 42150                                  ; 0030h			offset of copyright string. Copyright strings either
 42151                                  ;			start with "DOS/16M Copyright...." or
 42152                                  ;			"Copyright.....". The string contains
 42153                                  ;			"Rational Systems, Inc."
 42154                                  ;
 42155                                  ; 0020h			word : Paragraph offset of the buggy code segment
 42156                                  ;				from the program image
 42157                                  ; 0016h			word : size of buggy code segment
 42158                                  ;
 42159                                  ;	Buggy code is definite to start after offset 200h in its segment
 42160                                  ;
 42161                                  ;----------------------------------------------------------------------------
 42162                                  
 42163                                  ; 23/05/2019 - Retro DOS v4.0
 42164                                  ; DOSCODE:B976h (MSDOS 6.21, MSDOS.SYS)
 42165                                  
 42166                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42167                                  ; DOSCODE:B654h (MSDOS 5.0, MSDOS.SYS)
 42168                                  
 42169                                  RScanPattern1:
 42170                                  	db	0, 0, 20h, 0, 0, 0, 40h, 0, 1, 0
 42171                                  
 42172                                  RLen1 equ $ - RScanPattern1
 42173                                  
 42174                                  RScanPattern2:
 42175                                  	db	8Bh, 0Eh, 10h, 00h, 90h, 0E2h, 0FEh, 0E8h
 42176                                  
 42177                                  RLen2 equ $ - RScanPattern2
 42178                                  
 42179                                  RScanPattern3:
 42180                                  	db	8Bh, 0Eh, 10h, 00h, 0E2h, 0FEh, 0E8h
 42181                                  
 42182                                  RLen3 equ $ - RScanPattern2
 42183                                  
 42184                                  ; DOSCODE:B98Fh (MSDOS 6.21, MSDOS.SYS)
 42185                                  ; DOSCODE:B66Dh (MSDOS 5.0, MSDOS.SYS)
 42186                                  
 42187                                  ;----------------------------------------------------------------------------
 42188                                  ;
 42189                                  ; INPUT : ES = segment where program got loaded
 42190                                  ;
 42191                                  ;----------------------------------------------------------------------------
 42192                                  
 42193                                  RationalPatch:
 42194                                  	cld
 42195                                  	push	ax
 42196                                  	push	bx
 42197                                  	push	cx
 42198                                  	push	dx
 42199                                  	push	si
 42200                                  	push	di
 42201                                  	push	es
 42202                                  	push	ds			; we use all of them
 42203                                  	mov	di,0Ah			; look for pat1 at offset 0Ah
 42204                                  	push	cs
 42205                                  	pop	ds
 42206                                  	
 42207                                  	mov	si,RScanPattern1
 42208                                  	;mov	cx,10
 42209                                  	mov	cx,RLen1
 42210                                  	rep	cmpsb			; do we have the pattern ?
 42211                                  	jne	short rpexit
 42212                                  	mov	ax,[es:0]
 42213                                  	cmp	ax,348			; is it a buggy version ?
 42214                                  	jb	short rpexit
 42215                                  	cmp	ax,383			; is it a buggy version
 42216                                  	ja	short rpexit
 42217                                  
 42218                                  	call	VerifyVersion
 42219                                  	jne	short rpexit
 42220                                  
 42221                                  	mov	cx,[es:16h]		; Length of buggy code seg
 42222                                  	sub	cx,200h			; Length we search (we start
 42223                                  					;  at offset 200h)
 42224                                  	mov	es,[es:20h]		; es=buggy code segment
 42225                                  	mov	si,RScanPattern2
 42226                                  	;mov	dx,8	
 42227                                  	mov	dx,RLen2
 42228                                  	call	ScanCodeSeq		; look for code seq with nop
 42229                                  	jz	short rpfound
 42230                                  
 42231                                  	mov	si,RScanPattern3
 42232                                  	;mov	dx,15
 42233                                  	mov	dx,RLen3
 42234                                  	call	ScanCodeSeq		; look for code seq w/o nop
 42235                                  	jnz	short rpexit
 42236                                  
 42237                                  rpfound:
 42238                                  	
 42239                                  ;	we set up a far call into DOS data
 42240                                  ;	dx has the length of the code seq we were searching for
 42241                                  
 42242                                  	mov	al,9Ah			; far call opcode
 42243                                  	stosb
 42244                                  	mov	ax,RatBugCode
 42245                                  	stosw
 42246                                  	mov	ax,ss
 42247                                  	stosw
 42248                                  	mov	cx,dx
 42249                                  	sub	cx,6			; filler (with NOPs)
 42250                                  	mov	al,90h
 42251                                  	rep	stosb
 42252                                  rpexit:
 42253                                  	pop	ds
 42254                                  	pop	es
 42255                                  	pop	di
 42256                                  	pop	si
 42257                                  	pop	dx
 42258                                  	pop	cx
 42259                                  	pop	bx
 42260                                  	pop	ax
 42261                                  	retn
 42262                                  
 42263                                  ; M020 END
 42264                                  
 42265                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42266                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 42267                                  
 42268                                  ; DOSCODE:B6D8h (MSDOS 5.0, MSDOS.SYS)
 42269                                  
 42270                                  ;----------------------------------------------------------------------------
 42271                                  ;
 42272                                  ; ScanCodeSeq
 42273                                  ;
 42274                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 42275                                  ;
 42276                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 42277                                  ;
 42278                                  ;----------------------------------------------------------------------------
 42279                                  
 42280                                  ScanCodeSeq:
 42281                                  	; 17/12/2022
 42282                                  	mov	di,200h
 42283                                  ;ScanCodeSeq_di:
 42284                                  	push	cx
 42285                                  	sub	cx,dx
 42286                                  	inc	cx
 42287                                  	; 17/12/2022
 42288                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42289                                  	;mov	di,200h
 42290                                  scsagain:
 42291                                  	push	si
 42292                                  	push	di
 42293                                  	push	cx
 42294                                  	mov	cx,dx
 42295                                  	rep	cmpsb
 42296                                  	pop	cx
 42297                                  	pop	di
 42298                                  	pop	si
 42299                                  	je	short scsfound
 42300                                  	inc	di
 42301                                  	loop	scsagain
 42302                                  scsfound:
 42303                                  	pop	cx
 42304                                  vvexit:		; 18/12/2022
 42305                                  	retn
 42306                                  
 42307                                  
 42308                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42309                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 42310                                  
 42311                                  ; DOSCODE:B6F0h (MSDOS 5.0, MSDOS.SYS)
 42312                                  
 42313                                  ;----------------------------------------------------------------------------
 42314                                  ;
 42315                                  ; VerifyVersion
 42316                                  ;
 42317                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 42318                                  ; from ES:2A.
 42319                                  ;
 42320                                  ;       Entry: AX = binary version number 
 42321                                  ;       Exit : Z flag set if version numbers match
 42322                                  ;
 42323                                  ;----------------------------------------------------------------------------
 42324                                  
 42325                                  VerifyVersion:
 42326                                  	mov	si,[es:2Ah]		; offset of version number
 42327                                  					;  in ascii
 42328                                  	mov	bl,10
 42329                                  	add	si,3			; point to last digit
 42330                                  
 42331                                  	call	VVDigit
 42332                                  	jne	short vvexit
 42333                                  	call	VVDigit
 42334                                  	jne	short vvexit
 42335                                  	cmp	byte [es:si],'.' ; 2Eh
 42336                                  	jne	short vvexit
 42337                                  	dec	si
 42338                                  	;call	VVDigit
 42339                                  	; 18/12/2022
 42340                                  	;jmp	short VVDigit
 42341                                  ;vvexit:
 42342                                  	;retn
 42343                                  VVDigit:
 42344                                  	div	bl
 42345                                  	add	ah,'0' ; 30h
 42346                                  	dec	si
 42347                                  	cmp	[es:si+1],ah
 42348                                  	mov	ah,0			; do not xor or sub we need Z
 42349                                  	retn
 42350                                  
 42351                                  ;--------------------------------------------------------------------------- 
 42352                                  %endif	; 28/12/2022
 42353                                  
 42354                                  ;---------------------------------------------------------------------------
 42355                                  ;
 42356                                  ;	M068
 42357                                  ;
 42358                                  ; 	Procedure Name	: IsCopyProt
 42359                                  ;
 42360                                  ;	Inputs		: DS:100 -> start of com file just read in
 42361                                  ;
 42362                                  ;	Outputs		: sets the A20OFF_COUNT variable to 10 if 
 42363                                  ;			  the program loaded in DS:100 uses a MICROSOFT
 42364                                  ;			  copy protect scheme that relies on the A20 line
 42365                                  ;			  being turned off for it's scheme to work.
 42366                                  ;
 42367                                  ;			  Note: The int 21 function dispatcher will turn 
 42368                                  ;				a20 off, if the A20OFF_COUNT is non-zero 
 42369                                  ;				and dec the A20OFF_COUNT before	iretting 
 42370                                  ;				to the user. 
 42371                                  ;
 42372                                  ;	Uses		: ES, DI, SI, CX
 42373                                  ;
 42374                                  ;---------------------------------------------------------------------------
 42375                                  
 42376                                  ; 23/05/2019 - Retro DOS v4.0
 42377                                  
 42378                                  CPStartOffset	EQU	0175h
 42379                                  CPID1Offset	EQU	011Bh
 42380                                  CPID2Offset	EQU	0173h
 42381                                  CPID3Offset	EQU	0146h
 42382                                  CPID4Offset	EQU	0124h
 42383                                  ID1		EQU	05343h
 42384                                  ID2		EQU	05044h
 42385                                  ID3		EQU	0F413h
 42386                                  ID4		EQU	08000h
 42387                                  
 42388                                  ; DOSCODE:B9FAh (MSDOS 6.21, MSDOS.SYS)
 42389                                  
 42390                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42391                                  ; DOSCODE:B71Ch (MSDOS 5.0, MSDOS.SYS)
 42392                                  
 42393                                  CPScanPattern:
 42394 000075BC 89264801                	db	89h,26h,48h,01h		 ; mov [148],sp
 42395 000075C0 8C0E4C01                	db	8Ch,0Eh,4Ch,01h		 ; mov [14C],cs
 42396 000075C4 C7064A010001            	db	0C7h,06h,4Ah,01h,00h,01h ; mov [14A],100h 
 42397 000075CA 8C0E1301                	db 	8Ch,0Eh,13h,01h		 ; mov [113],cs
 42398 000075CE B82001                  	db	0B8h,20h,01h		 ; mov ax,120h
 42399 000075D1 BE0001                  	db	0BEh,00h,01h		 ; mov si,100h
 42400                                  
 42401                                  CPSPlen	EQU $ - CPScanPattern
 42402                                  
 42403                                  ; DOSCODE:BA12h (MSDOS 6.21, MSDOS.SYS)
 42404                                  ; DOSCODE:B734h (MSDOS 5.0, MSDOS.SYS)
 42405                                  
 42406                                  IsCopyProt:
 42407 000075D4 813E1B014353            	cmp	word [CPID1Offset],ID1
 42408 000075DA 752D                    	jne	short CP_done
 42409                                  
 42410 000075DC 813E73014450            	cmp	word [CPID2Offset],ID2
 42411 000075E2 7525                    	jne	short CP_done
 42412                                  
 42413 000075E4 813E460113F4            	cmp	word [CPID3Offset],ID3
 42414 000075EA 751D                    	jne	short CP_done
 42415                                  
 42416 000075EC 813E24010080            	cmp	word [CPID4Offset],ID4
 42417 000075F2 7515                    	jne	short CP_done
 42418                                  
 42419 000075F4 0E                      	push	cs
 42420 000075F5 07                      	pop	es
 42421 000075F6 BF[BC75]                	mov	di,CPScanPattern	; es:di -> Pattern to find
 42422                                  
 42423 000075F9 BE7501                  	mov	si,CPStartOffset	; ds:si -> possible location 
 42424                                  					; of pattern
 42425                                  
 42426 000075FC B91800                  	mov	cx,CPSPlen ; 24		; cx = length of pattern
 42427 000075FF F3A6                    	repe	cmpsb
 42428 00007601 7506                    	jnz	short CP_done
 42429                                  
 42430 00007603 36C606[8500]0A          	mov	byte [ss:A20OFF_COUNT],0Ah ; M071
 42431                                  CP_done:
 42432 00007609 C3                      	retn
 42433                                  	
 42434                                  ;DOSCODE ENDS
 42435                                  
 42436                                  	;END
 42437                                  
 42438                                  ;----------------------------------------------------------------------------
 42439                                  
 42440                                  ;align 2 ; 05/09/2018 (Error!)
 42441                                  
 42442                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42443                                  ;align 16 ; 08/09/2018 (OK.)
 42444                                  align 2
 42445                                  
 42446                                  ; 06/08/2018 - Retro DOS v3.0
 42447                                  ;============================================================================
 42448                                  ; MSINIT.ASM
 42449                                  ;============================================================================
 42450                                  ; 22/04/2019 - Retro DOS v4.0 (MSINIT.ASM, MSDOS 6.0, 1991)
 42451                                  ;
 42452                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 42453                                  ;
 42454                                  	; 15/07/2018 - Retro DOS v3.0
 42455                                  	; (MSDOS 3.3, IBMDOS.COM, 1987)
 42456                                  
 42457                                  ; temp iret instruction
 42458                                  
 42459                                  
 42460                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42461                                  ; DOSCODE:B76Ah (MSDOS 5.0, MSDOS.SYS)
 42462                                  
 42463                                  initiret: ; MSDOS 6.0
 42464                                  SYSBUF:
 42465                                  ;IRETT: ; 06/05/2019
 42466 0000760A CF                      	iret
 42467                                  
 42468                                  ; 22/04/2019 - Retro DOS v4.0
 42469                                  
 42470                                  ; pointer to the BIOS data segment that will be available just to the
 42471                                  ; initialization code
 42472                                  
 42473 0000760B 7000                    InitBioDataSeg:	dw 70h ; KERNEL_SEGMENT = 0070h
 42474                                  
 42475                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42476                                  ; DOSCODE:B76Dh (MSDOS 5.0, MSDOS.SYS)
 42477                                  
 42478                                  ; Convert AX from a number of bytes to a number of paragraphs (round up).
 42479                                  
 42480                                  ParaRound:
 42481 0000760D 83C00F                  	add	ax, 15
 42482 00007610 D1D8                    	rcr	ax, 1
 42483 00007612 D1E8                    	shr	ax, 1
 42484 00007614 D1E8                    	shr	ax, 1
 42485 00007616 D1E8                    	shr	ax, 1
 42486 00007618 C3                      	retn
 42487                                  
 42488                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 42489                                  
 42490                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42491                                  	; DOSCODE:B779h (MSDOS 5.0, MSDOS.SYS)
 42492                                  	
 42493                                  	; 30/05/2019
 42494                                  	; 22/04/2019 - Retro DOS v4.0
 42495                                  	; 07/07/2018 - Retro DOS v3.0
 42496                                  	; Retro DOS v2.0 - 03/03/2018
 42497                                  	; 03/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42498                                  	; MSDOS 5.0 - MSDOS.SYS, offset 79A9h
 42499                                  DOSINIT:
 42500                                  	; MSDOS 6.21 - MSDOS.SYS, offset 7C77h
 42501                                  	;
 42502                                  	; Far call from SYSINIT
 42503                                  	; DX = Memory size in paragraphs
 42504                                  	; DS:SI = [DEVICE_LIST] (SYSINIT.S) 
 42505                                  	;	  (Retro DOS v2.0, 16/03/2018)
 42506                                  	;
 42507                                  	; ES:DI = ptr to BIOS communication block (sysinit3.s)
 42508                                  	;	  (Retro DOS v4.0, 20/04/2019)
 42509                                  
 42510 00007619 FA                              CLI
 42511 0000761A FC                              CLD
 42512                                  
 42513                                  	; 03/11/2022
 42514                                  	;push	dx ; 30/05/2019		; save parameters from BIOS
 42515                                  	
 42516                                  	; 17/12/2022
 42517                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42518                                  	;push	dx ; =*=		; save parameters from BIOS
 42519                                  	
 42520 0000761B 56                      	push	si
 42521 0000761C 1E                      	push	ds
 42522 0000761D 57                      	push	di			;save di (ptr to BiosComBlock)
 42523                                  
 42524 0000761E 8CC3                    	mov	bx,es			;bx:di = ptr to BiosComBlock
 42525                                  
 42526                                  ; First, move the DOS data segment to its final location in low memory
 42527                                  
 42528                                  	;;mov	ax,0BF69h ; MSDOS 6.21 MSDOS.SYS, file offset 7C7Fh
 42529                                  	;mov	ax,0BC77h ; MSDOS 5.0 MSDOS.SYS, file offset 79B1h	
 42530 00007620 B8[9A7A]                	mov	ax,MEMSTRT		; get offset of end of init code
 42531                                  
 42532                                  	;add	ax,15	; 0Fh		; round to nearest paragraph
 42533                                  	;and	ax,~15	; 0FFF0h	; boundary
 42534                                  
 42535                                  	;mov	si,ax			; si = offset of DOSDATA in current 
 42536                                  					; code segment
 42537                                  
 42538                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42539 00007623 83C00F                  	add	ax,15			; round to nearest paragraph
 42540 00007626 83E0F0                  	and	ax,~15			; boundary
 42541                                  
 42542 00007629 89C6                    	mov	si,ax			; si = offset of DOSDATA in current 
 42543                                  					; code segment
 42544                                  	; 05/12/2022
 42545                                  	; 30/04/2019 - Retro DOS v4.0
 42546                                  	;xor	si,si
 42547                                  	
 42548 0000762B 8CC8                    	mov	ax,cs
 42549 0000762D 8ED8                    	mov	ds,ax			; ds = current code segment
 42550                                  					; DS:SI now points to dosdata
 42551                                  
 42552                                  	;mov	es,[cs:0BA49h] ; MSDOS 6.21 IO.SYS, offset 7C8Eh 
 42553                                  	;mov	es,[cs:InitBioDataSeg]	; First access to DosDataSg in
 42554                                  					;  BData segment. Cannot use
 42555                                  					;  getdseg macro here!!!
 42556                                  	; 17/12/2022
 42557 0000762F 8E06[0B76]              	mov	es,[InitBioDataSeg]
 42558                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42559                                  	;mov	es,[cs:InitBioDataSeg]  ; ds = cs !
 42560                                  
 42561                                  	;mov	es,[es:3]
 42562 00007633 268E060300              	mov	es,[es:DosDataSg]	; Get free location in low memory
 42563                                  
 42564 00007638 31FF                    	xor	di,di			; ES:DI now points to RAM data
 42565                                  
 42566                                  	;mov	cx,4970  ; Offset 0BA78h in MSDOS 6.21 MSDOS.SYS)
 42567                                  	;mov	cx,4976  ; 25/05/2019
 42568                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42569                                  	;mov	cx,4962
 42570                                  	;mov	cx,MSDAT001E		; get end of dosdata = size of dosdata
 42571 0000763A B9A512                  	mov	cx,DOSDATASIZE ; = 4962 for MSDOS 5.0 MSDOS.SYS
 42572 0000763D F3A4                    	rep	movsb			; move data to final location
 42573                                  	
 42574 0000763F 5F                      	pop	di			; restore ptr to BiosComBlock
 42575 00007640 1F                      	pop	ds			; restore parms from BIOS
 42576 00007641 5E                      	pop	si
 42577                                  	; 17/12/2022
 42578                                  	;pop	dx ; 30/05/2019	
 42579                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42580                                  	;pop	dx ; =*=		
 42581                                  
 42582 00007642 06                      	push	es
 42583 00007643 1E                      	push	ds
 42584 00007644 07                      	pop	es			; es:si -> device chain
 42585 00007645 1F                      	pop	ds			; ds points to dosdata
 42586                                  
 42587                                  ;SR;
 42588                                  ;We get a ptr to the BIOS exchange data block. This has been setup right 
 42589                                  ;now so that the EXEC call knows when SysInit is present to do the special
 42590                                  ;lie table handling for device drivers. This can be expanded later on to
 42591                                  ;establish a communication block from the BIOS to the DOS.
 42592                                  
 42593                                  	;mov	[1040h],di	; Offset 0BA87h in MSDOS 6.21 MSDOS.SYS)
 42594                                  	;mov	[1042h],bx
 42595 00007646 893E[4010]              	mov	[BiosDataPtr],di
 42596 0000764A 891E[4210]              	mov	[BiosDataPtr+2],bx	; save ptr to BiosComBlock
 42597                                  
 42598 0000764E 2E8C1E[0700]            	mov	[cs:DosDSeg],ds		; set pointer to dosdata in code seg
 42599                                  
 42600                                  	; Set the segment of Lowint23/24/28Addr in msctrlc.asm to dosdata
 42601                                  
 42602 00007653 2E8C1E[0350]            	mov	[cs:LowInt23Addr+2],ds	; set pointers in code seg
 42603 00007658 2E8C1E[0750]            	mov	[cs:LowInt24Addr+2],ds
 42604 0000765D 2E8C1E[0B50]            	mov	[cs:LowInt28Addr+2],ds
 42605                                  
 42606                                  	;mov	[346h],dx	; MSDOS 6.21 DOSDATA addresses
 42607                                  	;mov	[584h],sp
 42608                                  	;mov	[586h],ss
 42609 00007662 8916[4603]                  	mov	[ENDMEM],dx	; =*=
 42610 00007666 8926[8405]              	mov	[USER_SP],sp
 42611 0000766A 8C16[8605]              	mov	[USER_SS],ss
 42612                                  
 42613 0000766E 8CD8                    	mov	ax,ds		; set up ss:sp to dosdata:dskstack
 42614 00007670 8ED0                    	mov	ss,ax
 42615                                  
 42616                                  	;mov	sp,920h		; MSDOS 6.21 DOSDATA address
 42617                                  	;mov	sp,offset dosdata:dskstack
 42618 00007672 BC[2009]                	mov	sp,DSKSTACK
 42619                                  
 42620                                  ;M023
 42621                                  ; Init patch ptrs to default values
 42622                                  
 42623                                  	;mov	word [1212h],RetExePatch
 42624                                  	;mov	word [1214h],RetExePatch
 42625                                  	;mov	word [61h],RetExePatch
 42626 00007675 C706[F311][7561]        	mov	word [FixExePatch],RetExePatch	; M023
 42627                                  	; 28/12/2022 - Retro DOS v4.1
 42628                                  	;mov	word [RationalPatchPtr],RetExePatch ; M023
 42629 0000767B C706[6100][7561]        	mov	word [ChkCopyProt],RetExePatch	; M068
 42630                                  
 42631                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42632                                  %if 0	; 19/09/2023
 42633                                  
 42634                                  ; Setup to call 386 Rational DOS Extender patch routine if running on
 42635                                  ; a 386 or later. Unlike other patches, this is not dependent on MS-DOS
 42636                                  ; running in the HMA.
 42637                                  
 42638                                  	call	WhatCPUType	; get cpu type (0 < 286,1==286,2 >= 386)
 42639                                  	cmp	al,2		;   386 or later?
 42640                                  	mov	ax,Rational386Patch
 42641                                  	jae	short di_set_patch
 42642                                  	mov	ax,RetExePatch	; < 386, don't need this patch
 42643                                  di_set_patch:
 42644                                  	mov	[Rational386PatchPtr],ax ; patch routine or RET instr.
 42645                                  
 42646                                  %endif
 42647                                  	; Set up the variable temp_dosloc to point to the dos code segment
 42648                                  
 42649 00007681 8CC8                    	mov	ax,cs		; ax = current segment of DOS code
 42650                                  
 42651                                  	; ax now holds segment of DOS code
 42652 00007683 A3[AA0A]                	mov	[TEMP_DOSLOC],ax   ; store temp location of DOS
 42653                                  
 42654 00007686 8C06[4A00]              	mov	word [NULDEV+2],es ; nuldev -> points to device chain
 42655 0000768A 8936[4800]              	mov	word [NULDEV],si
 42656                                  ;SR;
 42657                                  ; There are some locations in the Win386 instance data structures
 42658                                  ; which need to be set up with the DOS data segment. First, initialize
 42659                                  ; the segment part of the instance table pointer in the SIS.
 42660                                  
 42661                                  	;mov	[0FF2h],ds ; [Win386_Info+14+2]	
 42662 0000768E 8C1E[F20F]              	mov	[Win386_Info+Win386_SIS.Instance_Data_Ptr+2],ds
 42663                                  
 42664                                  ; Now initialize the segment part of the pointer to the data in each
 42665                                  ; instance table entry.
 42666                                  
 42667 00007692 56                      	push	si		; preserve pointer to device chain
 42668                                  	; 18/12/2022
 42669                                  	; cx = 0
 42670 00007693 B107                    	mov	cl,7
 42671                                  	;mov	cx,7		; There are 7 entries in the instance table
 42672                                  				; M019
 42673                                  	;mov	si,0FF6h ; offset (dosdata:Instance_Table+2)
 42674 00007695 BE[F60F]                	mov	si,Instance_Table+2 ; point si to segment field
 42675                                  Instance_init_loop:
 42676 00007698 8C1C                    	mov	[si],ds		; set offset in instance entry
 42677                                  	;add	si,6
 42678 0000769A 83C606                  	add	si,size_of_Win386_IIS ; move on to next entry
 42679 0000769D E2F9                    	loop	Instance_init_loop
 42680                                  
 42681                                  ;Initialize the WIN386 2.xx instance table with the DOS data segment value
 42682                                  
 42683                                  	; 18/12/2022
 42684 0000769F B105                    	mov	cl,5
 42685                                  	;mov	cx,5		; There are five entries in the instance table
 42686                                  
 42687                                  	;mov	si,(offset dosdata:OldInstanceJunk) + 6
 42688                                  	;mov	si,11EDh	; point si to segment field
 42689 000076A1 BE[CE11]                	mov	si,OldInstanceJunk+6
 42690                                  OldInstance_init_loop:
 42691 000076A4 8C1C                    	mov	[si],ds		; set offset in instance entry
 42692 000076A6 83C606                  	add	si,6		; move on to next entry
 42693 000076A9 E2F9                    	loop	OldInstance_init_loop
 42694 000076AB 5E                      	pop	si		; restore pointer to device chain
 42695                                  
 42696                                  ; End of WIN386 2.xx compatibility bullshit
 42697                                  
 42698                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42699                                  %if 0	
 42700                                     	; 30/04/2019
 42701                                  	;push	es
 42702                                  	;pop	ds
 42703                                  			; ds:si points to console device
 42704                                  
 42705                                  	; 24/04/2019 - Retro DOS v4.0
 42706                                  
 42707                                  	; 15/07/2018
 42708                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 42709                                  	; (Set INT 2Ah handler address to an 'IRET')
 42710                                  
 42711                                  	; need crit vector inited to use deviocall
 42712                                  	;push	ds			; preserve segment of device chain
 42713                                  	push	es ; 30/04/2019
 42714                                  
 42715                                  %endif
 42716                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42717 000076AC 06                      	push	es
 42718                                  	; 17/12/2022
 42719                                  	;pop	ds
 42720                                  	;push	ds
 42721                                  
 42722 000076AD 31C0                    	xor	ax,ax
 42723 000076AF 8ED8                    	mov	ds,ax			; point DS to int vector table
 42724 000076B1 B8[0A76]                	mov	ax,initiret
 42725                                  	;mov	[0A8h],ax  ; [2Ah*4]
 42726 000076B4 A3A800                  	mov	[addr_int_ibm],ax
 42727 000076B7 8CC8                    	mov	ax,cs
 42728                                  	;mov	[0AAh],ax  ; [(2Ah*4)+2] 		
 42729 000076B9 A3AA00                  	mov	[addr_int_ibm+2],ax
 42730 000076BC 1F                      	pop	ds			; restore segment of device chain
 42731                                  
 42732 000076BD E81C02                  	call	CHARINIT  		; initialize console driver
 42733 000076C0 56                      	push	si			; save pointer to header
 42734                                  
 42735 000076C1 16                      	push	ss			; move pointer to dos data...
 42736 000076C2 07                      	pop	es			; ...into ES
 42737                                  
 42738                                  	;initialize sft for file 0 (CON)
 42739                                  
 42740                                          ; 07/07/2018 - Retro DOS v3.0
 42741                                  	; 24/04/2019 - Retro DOS v4.0
 42742                                  	;mov	di,SFTABL+6 
 42743 000076C3 BF[D200]                	MOV     DI,SFTABL+SFT.SFTable	; Point to sft 0
 42744 000076C6 B80300                          MOV     AX,3
 42745 000076C9 AB                              STOSW           	; Refcount
 42746 000076CA FEC8                            DEC     AL
 42747 000076CC AB                              STOSW           	; Access rd/wr, compatibility
 42748 000076CD 30C0                            XOR     AL,AL
 42749 000076CF AA                              STOSB           	; attribute
 42750                                  	;mov	al,0C3h
 42751 000076D0 B0C3                    	mov	al,devid_device_EOF|devid_device|ISCIN|ISCOUT
 42752 000076D2 AB                      	STOSW			; flags
 42753 000076D3 89F0                            mov	ax,si
 42754 000076D5 AB                              stosw			; device pointer in devptr	
 42755 000076D6 8CD8                            mov	ax,ds
 42756 000076D8 AB                      	stosw
 42757 000076D9 31C0                    	xor	ax,ax	; 0
 42758 000076DB AB                      	stosw			; firclus
 42759 000076DC AB                      	stosw			; time
 42760 000076DD AB                      	stosw			; date
 42761 000076DE 48                      	dec	ax	; -1
 42762 000076DF AB                      	stosw			; size
 42763 000076E0 AB                      	stosw
 42764 000076E1 40                      	inc	ax	; 0
 42765 000076E2 AB                      	stosw			; position
 42766 000076E3 AB                      	stosw
 42767                                  	;add	di,7
 42768 000076E4 83C707                  	add	di,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 42769                                  				; point at name
 42770                                  	;add	si,10
 42771 000076E7 83C60A                  	add	si,SYSDEV.NAME	; sdevname
 42772                                  				; point to name
 42773 000076EA B90400                  	mov	cx,4
 42774 000076ED F3A5                    	rep	movsw		; name
 42775 000076EF B103                    	mov	cl,3
 42776 000076F1 B020                    	mov	al," "
 42777 000076F3 F3AA                    	rep	stosb		; extension
 42778                                  
 42779 000076F5 5E                      	pop	si		; get back pointer to header
 42780                                  
 42781                                  				; mark device as CON I/O
 42782                                  	; 15/07/2018
 42783                                          ;OR	BYTE [SI+4],ISCIN|ISCOUT ; or byte [si+4],3
 42784 000076F6 804C0403                	OR	BYTE [SI+SYSDEV.ATT],ISCIN|ISCOUT
 42785                                  	; 12/03/2018
 42786                                  	;mov	[ss:32h],si
 42787 000076FA 368936[3200]            	MOV     [SS:BCON],SI
 42788                                  	;mov	[ss:34h],ds
 42789 000076FF 368C1E[3400]                    MOV     [SS:BCON+2],DS
 42790                                  
 42791                                  	; initialize each device until the clock device is found
 42792                                  
 42793                                  CHAR_INIT_LOOP:
 42794 00007704 C534                            LDS     SI,[SI]			; AUX device
 42795 00007706 E8D301                  	call	CHARINIT 
 42796                                         	;15/07/2018
 42797                                  	;test	byte [SI+4],8
 42798 00007709 F6440408                	TEST    BYTE [SI+SYSDEV.ATT],ISCLOCK
 42799 0000770D 74F5                            JZ      SHORT CHAR_INIT_LOOP
 42800                                  	; 12/03/2018
 42801                                  	;mov	[ss:2Eh],si
 42802 0000770F 368936[2E00]                    MOV     [SS:BCLOCK],SI
 42803                                  	;mov	[ss:30h],ds
 42804 00007714 368C1E[3000]                    MOV     [SS:BCLOCK+2],DS
 42805                                          ;MOV	BP,MEMSTRT ; Retro DOS 3.0 ; ES:BP points to DPB
 42806                                  
 42807                                  	;mov	bp,4970			; bp = pointer to free mem
 42808                                  	;mov	bp,4976  ; 25/05/2019 - Retro DOS v4.0
 42809                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
 42810                                  	;mov	bp,4962 ; (MSDOS 5.0 MSDOS.SYS)
 42811 00007719 BDA512                  	mov	bp,MSDAT001E		; es:bp points to dpb area
 42812                                  
 42813 0000771C 36892E[2600]            	mov	[ss:DPBHEAD],bp		; set offset of pointer to DPB's
 42814 00007721 368C06[2800]            	mov	[ss:DPBHEAD+2],es	; set segment of pointer to DPB's
 42815                                  PERDRV:
 42816                                  	;lds	si,[SI+SYSDEV.NEXT] ; 15/07/2018
 42817 00007726 C534                            LDS	SI,[SI]			; Next device
 42818 00007728 83FEFF                          CMP	SI,-1	; 0FFFFh
 42819 0000772B 7479                    	JZ	SHORT CONTINIT
 42820                                  
 42821 0000772D E8AC01                          call	CHARINIT
 42822                                  
 42823                                  	; Retro DOS v2.0 - 16/03/2018 (NOTE for 'CHARINIT' return):
 42824                                  	; [CALLUNIT] = Number of drives for (Disk) Block Dev Driver ([DRVMAX])
 42825                                  	;           (..When the command is 'DSK$INIT', as in 'CHARINIT')
 42826                                  	; [CALLBPB] = [DEVCALL.COUNT] = Address of the BPB (DEVCALL offset 18) 
 42827                                  	; (REF: MSDOS 3.3 MSBIO2.ASM, MSDATA.INC, MSDISK.ASM, MSBIO1.ASM)
 42828                                  	; (.. !DSK$IN' in MSBIO1.ASM)
 42829                                  	; DEVCALL.MEDIA = CALLUNIT (DEVCALL offset 13)
 42830                                  
 42831                                          ; 15/07/2018
 42832                                  	;test	word [SI+4],8000h		; DEVTYP
 42833                                          ; 17/12/2022
 42834                                  	;test	byte [SI+5],80h
 42835 00007730 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8) ; 80h
 42836                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ; 8000h
 42837 00007734 75F0                    	JNZ     SHORT PERDRV			; Skip any other character devs
 42838                                  
 42839 00007736 368A0E[6703]                    MOV	CL,[SS:CALLUNIT] ; 12/03/2018
 42840 0000773B 30ED                    	XOR     CH,CH
 42841                                          ; 07/07/2018
 42842                                  	;MOV	[SI+10],CL		; Number of units in name field
 42843 0000773D 884C0A                  	mov	[si+SYSDEV.NAME],cl	; sdevname        
 42844 00007740 368A16[4600]            	MOV     DL,[SS:NUMIO]	; 15/03/2018
 42845 00007745 30F6                    	XOR     DH,DH
 42846 00007747 36000E[4600]            	ADD	[SS:NUMIO],CL	; 12/03/2018
 42847 0000774C 1E                      	PUSH    DS
 42848 0000774D 56                              PUSH    SI
 42849 0000774E 36C51E[6C03]            	LDS	BX,[SS:CALLBPB]	; 12/03/2018
 42850                                  
 42851                                  PERUNIT:
 42852 00007753 8B37                            MOV     SI,[BX]                 ; DS:SI Points to BPB
 42853 00007755 43                              INC     BX
 42854 00007756 43                              INC     BX                      ; On to next BPB
 42855                                  	; 15/12/2022
 42856                                  	; 07/07/2018
 42857                                          ;mov	[ES:BP+DPB.DRIVE],DL
 42858 00007757 26885600                	MOV     [ES:BP],DL
 42859                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42860                                  	;;mov	[ES:BP+0],DL
 42861                                  	;mov	[ES:BP+DPB.DRIVE],DL
 42862                                  
 42863                                  	;MOV	[ES:BP+1],DH
 42864 0000775B 26887601                	MOV	[ES:BP+DPB.UNIT],DH
 42865 0000775F 53                              PUSH    BX
 42866 00007760 51                              PUSH    CX
 42867 00007761 52                              PUSH    DX
 42868                                  
 42869                                          ;invoke	$SETDPB
 42870 00007762 E85198                          CALL	_$SETDPB		; build DPB!
 42871                                  
 42872                                  	; 07/07/2018
 42873                                  	;MOV	AX,[ES:BP+2]
 42874 00007765 268B4602                	mov	ax,[ES:BP+DPB.SECTOR_SIZE]
 42875                                          ; 12/03/2018
 42876 00007769 363B06[3600]            	CMP	AX,[SS:MAXSEC]		; Q:is this the largest sector so far
 42877 0000776E 7604                    	JBE     SHORT NOTMAX		; N:
 42878 00007770 36A3[3600]              	MOV	[SS:MAXSEC],AX		; Y: save it in maxsec
 42879                                  NOTMAX:					
 42880                                  	; set the next dpb field in the currently built bpb
 42881                                  	; and mark as never accessed
 42882                                          
 42883                                  	; 24/04/2019
 42884 00007774 89E8                    	mov	ax,bp			; get pointer to DPB
 42885                                  	;add	ax,33
 42886 00007776 83C021                  	add	ax,DPBSIZ		; advance pointer to next DPB
 42887                                  					; set seg & offset of next DPB
 42888                                  	;mov	[es:bp+25],ax
 42889 00007779 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 42890                                  	;mov	[es:bp+27],es
 42891 0000777D 268C461B                	mov	[es:bp+DPB.NEXT_DPB+2],es
 42892                                  					; mark as never accessed
 42893                                  	;mov	byte [es:bp+24],0FFh
 42894 00007781 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 42895                                  
 42896 00007786 5A                      	POP     DX
 42897 00007787 59                              POP     CX
 42898 00007788 5B                              POP     BX
 42899 00007789 8CD8                            MOV     AX,DS                   ; save segment of bpb array
 42900 0000778B 5E                              POP     SI
 42901 0000778C 1F                              POP     DS
 42902                                  					; ds:si -> device header
 42903                                  					; store it in the corresponding dpb
 42904                                  	; 07/07/2018
 42905                                          ;MOV	[ES:BP+19],SI ; 24/04/2019
 42906 0000778D 26897613                	mov	[ES:BP+DPB.DRIVER_ADDR],si
 42907                                          ;MOV	[ES:BP+21],DS ; 24/04/2019
 42908 00007791 268C5E15                	mov	[ES:BP+DPB.DRIVER_ADDR+2],ds
 42909                                  
 42910 00007795 1E                              PUSH    DS			; save pointer to device header
 42911 00007796 56                              PUSH    SI
 42912 00007797 FEC6                            INC     DH			; inc unit #
 42913 00007799 FEC2                            INC     DL			; inc drive #
 42914 0000779B 8ED8                            MOV     DS,AX			; restore segment of BPB array
 42915                                          ;add	bp,33 ; 24/04/2019
 42916 0000779D 83C521                  	ADD     BP,DPBSIZ		; advance pointer to next dpb
 42917 000077A0 E2B1                    	LOOP    PERUNIT			; process all units in each driver
 42918                                          
 42919 000077A2 5E                      	POP     SI			; restore pointer to device header
 42920 000077A3 1F                              POP     DS
 42921 000077A4 EB80                    	JMP	PERDRV			; process all drivers in chain
 42922                                  
 42923                                  CONTINIT:
 42924                                  	; 24/04/2019
 42925                                  	;sub	bp,33			; set link in last DPB to -1
 42926 000077A6 83ED21                  	sub	bp,DPBSIZ		; back up to last dpb
 42927                                  					; set last link offset & segment
 42928                                  	;mov	word [bp+25],0FFFFh
 42929 000077A9 C74619FFFF              	mov	word [bp+DPB.NEXT_DPB],-1
 42930                                  	;mov	word [bp+27],0FFFFh
 42931 000077AE C7461BFFFF              	mov	word [bp+DPB.NEXT_DPB+2],-1
 42932                                  	;add	bp,33
 42933 000077B3 83C521                  	add	BP,DPBSIZ		; advance to free memory again
 42934                                  					; the DPB chain is done.  
 42935 000077B6 16                      	push	ss
 42936 000077B7 1F                      	pop	ds
 42937                                  
 42938 000077B8 89E8                    	mov	ax,bp
 42939 000077BA E850FE                  	call	ParaRound		; round up to segment
 42940                                  
 42941 000077BD 8CDA                    	mov	dx,ds			; dx = dosdata segment
 42942 000077BF 01C2                    	add	dx,ax			; dx = ds+ax first free segment
 42943                                  
 42944 000077C1 BB0F00                  	mov	bx,0Fh
 42945                                  	
 42946                                  	; 24/05/2019
 42947                                  	;mov	cx,[ENDMEM]
 42948                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42949                                  	; 17/12/2022
 42950                                  	;mov	cx,[ENDMEM] 
 42951                                  					; set seg inpacketto dosdata					
 42952 000077C4 8C1E[A203]              	mov	[DSKCHRET+3],ds ; mov [DOSSEG_INIT],ds 
 42953                                  
 42954                                  ; Patch in the segments of the interrupt vectors with current code segment.
 42955                                  ; Also patch in the segment of the pointers in the dosdata area.
 42956                                  ;
 42957                                  ; Note: Formerly, temp_dosloc was initialized to -1 until after these
 42958                                  ; calls were done. The procedure patch_misc_segments is called multiple
 42959                                  ; times, and relies on temp_dosloc being initialized to -1 as a flag
 42960                                  ; for the first invocation. Thus, we must set it to -1 for this call.
 42961                                  
 42962 000077C8 52                      	push	dx			; preserve first free segment
 42963                                  
 42964 000077C9 A1[AA0A]                	mov	ax,[TEMP_DOSLOC]	; ax = segment to patch in 
 42965 000077CC 8EC0                    	mov	es,ax			; es = segment of DOS
 42966 000077CE C706[AA0A]FFFF          	mov	word [TEMP_DOSLOC],-1	; -1 means first call to patch_misc_segments
 42967                                  
 42968 000077D4 E8AF01                  	call	patch_vec_segments	; uses AX as doscode segment
 42969 000077D7 E8E401                  	call	patch_misc_segments	; patch in segments for sharer and 
 42970                                  					; other tables with seg in ES.
 42971                                  	; 17/12/2022
 42972                                  	; cx = 0
 42973 000077DA 8C06[AA0A]              	mov	[TEMP_DOSLOC],es	; put back segment of dos code
 42974                                  
 42975 000077DE 5A                      	pop	dx			; restore first free segment
 42976                                  
 42977                                  ; We shall now proceed to set the offsets of the interrupt vectors handled
 42978                                  ; by DOS to their appropriate values in DOSCODE. In case the DOS loads in
 42979                                  ; HIMEM the offsets also will be patched to their appropriate values in the
 42980                                  ; low_mem_stub by seg_reinit.
 42981                                  
 42982                                  	;xor	ax,ax ; 0
 42983                                  	;mov	ds,ax
 42984                                  	;mov	es,ax
 42985                                  	; 17/12/2022
 42986                                  	; cx = 0
 42987                                  	;xor	cx,cx ; 0
 42988 000077DF 8ED9                    	mov	ds,cx
 42989 000077E1 8EC1                    	mov	es,cx
 42990                                  
 42991                                  	; set the segment of int 24 vector that was 
 42992                                  	; left out by patch_vec_segments above.
 42993                                  
 42994                                  	; 17/12/2022
 42995                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42996                                  ;%if 0
 42997                                  	; 24/05/2019
 42998                                  	;;mov	di,90h
 42999                                  	;;mov	di,4*int_fatal_abort
 43000                                  	;mov	di,addr_int_fatal_abort
 43001 000077E3 BF9200                  	mov	di,addr_int_fatal_abort+2 ; 24/05/2019
 43002                                  
 43003 000077E6 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]
 43004                                  	;mov	[di+2],ax  ; int 24h segment
 43005 000077EA 8905                    	mov	[di],ax ; 24/05/2019
 43006                                  
 43007                                  	;;mov	di,82h
 43008                                  	;mov	di,INTBASE+2
 43009                                  
 43010                                  ;%endif
 43011                                  	; 17/12/2022
 43012                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43013                                  	;;mov	di,90h
 43014                                  	;;mov	di,4*int_fatal_abort
 43015                                  	;mov	di,addr_int_fatal_abort
 43016                                  	;mov	ax,[ss:TEMP_DOSLOC]
 43017                                  	;mov	[di+2],ax  ; int 24h segment
 43018                                  	;;mov	di,82h
 43019                                  	;mov	di,INTBASE+2
 43020                                  
 43021                                  	; set default divide trap offset
 43022                                  
 43023                                  	;mov	word ptr ds:[0],offset doscode:divov
 43024 000077EC C7060000[DE51]          	mov	word [0],DIVOV	
 43025                                  
 43026                                  	; set vectors 20-28 and 2a-3f to point to iret.
 43027                                  
 43028                                  	;mov	di,80h
 43029 000077F2 BF8000                  	mov	di,INTBASE
 43030                                  	;mov	ax,offset doscode:irett
 43031 000077F5 B8[E202]                	mov	ax,IRETT
 43032                                  
 43033                                  	; 17/12/2022
 43034                                  	; cx = 0
 43035 000077F8 B109                    	mov	cl,9
 43036                                  	;mov	cx,9			; set 9 offsets (skip 2 between each)
 43037                                  					;   sets offsets for ints 20h-28h
 43038                                  iset1:
 43039 000077FA AB                      	stosw
 43040                                  	;add	di,2
 43041                                  	; 20/09/2023
 43042 000077FB 47                      	inc	di
 43043 000077FC 47                      	inc	di
 43044 000077FD E2FB                    	loop	iset1
 43045                                  
 43046 000077FF 83C704                  	add	di,4			; skip vector 29h
 43047                                  
 43048                                  ;	mov	cx,6			; set 6 offsets (skip 2 between each)
 43049                                  ;					;   sets offsets for ints 2ah-2fh
 43050                                  ;iset2:
 43051                                  ;	stosw
 43052                                  ;	add	di,2
 43053                                  ;	loop	iset2
 43054                                  
 43055                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 43056                                  ; patch_vec_segments above. So skip it.
 43057                                  
 43058                                  ;	add	di,8			; skip vector 30h & 31h 
 43059                                  
 43060                                  	;;;
 43061                                  	; 06/05/2019 - Retro DOS v4.0
 43062                                  	;mov	cx,5			; set offsets for int 2Ah-2Eh
 43063                                  	; 17/12/2022
 43064 00007802 B105                    	mov	cl,5 ; 28/06/2019
 43065                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43066                                  	;mov	cx,6
 43067                                  iset2:
 43068 00007804 AB                      	stosw
 43069                                  	;add	di,2
 43070                                  	; 20/09/2023
 43071 00007805 47                      	inc	di
 43072 00007806 47                      	inc	di
 43073 00007807 E2FB                    	loop	iset2
 43074                                  
 43075                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43076                                  	; 17/12/2022
 43077 00007809 83C70C                  	add	di,12			; skip vectors 2Fh, 30h & 31h
 43078                                  	;add	di,8
 43079                                  	;;;
 43080                                  
 43081                                  	; 17/12/2022
 43082 0000780C B10E                    	mov	cl,14
 43083                                  	;mov	cx,14			; set 14 offsets (skip 2 between each)
 43084                                  					;   sets offsets for ints 32h-3fh
 43085                                  iset3:
 43086 0000780E AB                      	stosw
 43087                                  	;add	di,2
 43088                                  	; 20/09/2023
 43089 0000780F 47                      	inc	di
 43090 00007810 47                      	inc	di
 43091 00007811 E2FB                    	loop	iset3
 43092                                  
 43093                                  ;if installed
 43094                                  	; set the offset of int2f handler
 43095                                  	;mov	word [0BCh],INT2F
 43096 00007813 C706BC00[0307]          	mov	word [02Fh*4],INT2F
 43097                                  	; set segment to doscode as we have to do int 2f to check for XMS
 43098 00007819 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]	; get segment of doscode
 43099                                  	;mov	[0BEh],ax
 43100 0000781D A3BE00                  	mov	[(02Fh*4)+2],ax
 43101                                  ;endif
 43102                                  	; set up entry point call at vectors 30-31h. Note the segment of the 
 43103                                  	; long jump will be patched in by seg_reinit
 43104                                  
 43105                                  	;mov	byte [C0h],0EAh
 43106 00007820 C606C000EA              	mov	byte [ENTRYPOINT],mi_long_jmp
 43107                                  	;mov	byte [C1h],CALL_ENTRY
 43108 00007825 C706C100[E302]          	mov	word [ENTRYPOINT+1],CALL_ENTRY
 43109                                  
 43110 0000782B C7068000[DC02]          	mov	word [addr_int_abort],QUIT	; INT 20h
 43111 00007831 C7068400[0803]          	mov	word [addr_int_command],COMMAND ; INT 21h
 43112 00007837 C70688000001            	mov	word [addr_int_terminate],100h	; INT 22h
 43113 0000783D 89168A00                	mov	word [addr_int_terminate+2],dx	
 43114 00007841 C7069400[2D05]          	mov	word [addr_int_disk_read],ABSDRD   ; INT 25h
 43115 00007847 C7069800[B405]          	mov	word [addr_int_disk_write],ABSDWRT ; INT 26h 
 43116 0000784D C7069C00[1861]          	mov	word [addr_int_keep_process],STAY_RESIDENT ; INT 27h
 43117                                  
 43118 00007853 16                      	push	ss
 43119 00007854 1F                      	pop	ds
 43120                                  	
 43121                                  	; 24/05/2019
 43122                                  	;push	ss
 43123                                  	;pop	es
 43124                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43125                                  	; 17/12/2022
 43126                                  	;push	ss
 43127                                  	;pop	es
 43128                                  
 43129 00007855 52                      	push	dx			; remember address of arena
 43130                                  
 43131 00007856 42                      	inc	dx			; leave room for arena header
 43132                                  	;mov	[330h],dx
 43133 00007857 8916[3003]              	mov     [CurrentPDB],dx		; set current pdb
 43134                                  
 43135 0000785B 31FF                    	xor	di,di			; point es:di at end of memory
 43136 0000785D 8EC2                    	mov	es,dx			; ...where psp will be
 43137 0000785F 31C0                    	xor	ax,ax
 43138                                  	;mov	cx,80h			; psp is 128 words
 43139                                  	; 17/12/2022
 43140 00007861 B180                    	mov	cl,128 ; 28/06/2019
 43141                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43142                                  	;mov	cx,128
 43143                                  
 43144 00007863 F3AB                    	rep	stosw			; zero out psp area
 43145 00007865 A1[4603]                        mov     ax,[ENDMEM]
 43146                                  	
 43147                                  	; 17/12/2022
 43148                                  	; cx = 0
 43149 00007868 E89998                  	call	SETMEM         	 	; build psp at dx; ax is memory size
 43150                                  
 43151                                  	; ds, es now point to PSP
 43152                                  
 43153 0000786B 16                      	push	ss
 43154 0000786C 1F                      	pop	ds
 43155                                  
 43156                                  	;mov	di,24
 43157 0000786D BF1800                  	mov	di,PDB.JFN_TABLE	; es:di -> pdb_jfn_table in psp
 43158 00007870 31C0                    	xor	ax,ax
 43159 00007872 AB                      	stosw
 43160 00007873 AA                      	stosb				; 0,1 and 2 are con device
 43161 00007874 B0FF                    	mov	al,0FFh
 43162                                  	;mov	cx,FILPERPROC-3 ; 17
 43163                                  	; 17/12/2022
 43164                                  	; cx = 4
 43165 00007876 B111                    	mov	cl,FILPERPROC-3 ; 17
 43166 00007878 F3AA                    	rep	stosb			; rest are unused
 43167                                  
 43168 0000787A 16                      	push	ss
 43169 0000787B 07                      	pop	es
 43170                                  					; must be set to print messages
 43171 0000787C 8C1E[2C00]              	mov	[SFT_ADDR+2],ds     
 43172                                  
 43173                                  ; after this point the char device functions for con will work for
 43174                                  ; printing messages
 43175                                  
 43176                                  	; 24/04/2019 - Retro DOS v4.0
 43177                                  
 43178                                  ; 12/05/2019
 43179                                  ;
 43180                                  ;write_version_msg:
 43181                                  ;
 43182                                  ;	;if	(not ibm)
 43183                                  ;	;mov	si,offset doscode:header
 43184                                  ;	mov	si,HEADER
 43185                                  ;outmes:
 43186                                  ;	;lods	cs:byte ptr [si]
 43187                                  ;	cs
 43188                                  ;	lodsb
 43189                                  ;	cmp	al,"$"
 43190                                  ;	je	short outdone
 43191                                  ;	call	OUTT
 43192                                  ;	jmp	short outmes
 43193                                  ;outdone:
 43194                                  ;	push	ss			; out stomps on segments
 43195                                  ;	pop	ds
 43196                                  ;	push	ss
 43197                                  ;	pop	es
 43198                                  ;	;endif
 43199                                  
 43200                                  	; at this point es is dosdata
 43201                                  
 43202                                  	; Fill in the segment addresses of sysinitvar and country_cdpg 
 43203                                  	; in sysinittable (ms_data.asm)
 43204                                  
 43205                                  	;mov	si,0D28h
 43206 00007880 BE[280D]                	mov	si,SysInitTable
 43207                                  
 43208                                  	; 17/12/2022
 43209                                  	; ds = es = ss
 43210                                  
 43211                                  	; 17/12/2022
 43212                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43213                                  ;%if 0
 43214                                  	;;mov	[es:si+6],es
 43215                                  	;mov	[es:si+SYSI_EXT.Country_Tab+2],es
 43216                                  	;;mov	[es:si+2],es
 43217                                  	;mov	[es:si+SYSI_EXT.SysInitVars+2],es
 43218                                  	
 43219 00007883 8C4406                  	mov	[si+SYSI_EXT.Country_Tab+2],es
 43220 00007886 8C4402                  	mov	[si+SYSI_EXT.SysInitVars+2],es
 43221                                  
 43222                                  	; buffhead -> dosdata:hashinitvar 
 43223                                  
 43224                                  	;mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 43225 00007889 8C06[3A00]              	mov	[BUFFHEAD+2],es
 43226                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 43227                                  	;mov	si,6Dh
 43228 0000788D BE[6D00]                	mov	si,HASHINITVAR
 43229                                  	;mov	[es:BUFFHEAD],si
 43230 00007890 8936[3800]              	mov	[BUFFHEAD],si
 43231                                  
 43232 00007894 5A                              pop     dx                      ; restore address of arena
 43233                                  
 43234                                  	;mov	[032Ch+2],dx
 43235 00007895 8916[2E03]                      mov     [DMAADD+2],dx
 43236                                  
 43237                                  	;mov	[es:arena_head],dx
 43238 00007899 8916[2400]              	mov	[arena_head],dx
 43239                                  
 43240                                  ;%endif
 43241                                  
 43242                                  ; 17/12/2022
 43243                                  %if 0
 43244                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43245                                  	;;;
 43246                                  	;mov	[es:si+6],es
 43247                                  	mov	[es:si+SYSI_EXT.Country_Tab+2],es
 43248                                  	;mov	[es:si+2],es
 43249                                  	mov	[es:si+SYSI_EXT.SysInitVars+2],es
 43250                                  
 43251                                  	; buffhead -> dosdata:hashinitvar 
 43252                                  
 43253                                  	mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 43254                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 43255                                  	;mov	si,6Dh
 43256                                  	mov	si,HASHINITVAR
 43257                                  	mov	[es:BUFFHEAD],si
 43258                                  
 43259                                          pop     dx                      ; restore address of arena
 43260                                  
 43261                                  	;mov	[032Ch+2],dx
 43262                                          mov     [DMAADD+2],dx
 43263                                  
 43264                                  	mov	[es:arena_head],dx
 43265                                  	;;;
 43266                                  %endif
 43267                                  
 43268 0000789D 8EDA                            mov     ds,dx
 43269                                  
 43270                                  	;mov	byte [0],'Z'
 43271 0000789F C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end
 43272                                          ;mov	word [1],0
 43273 000078A4 C70601000000            	mov     word [ARENA.OWNER],arena_owner_system
 43274                                  
 43275 000078AA 36A1[4603]                      mov     ax,[ss:ENDMEM]
 43276 000078AE 29D0                    	sub	ax,dx
 43277 000078B0 48                              dec     ax
 43278 000078B1 A30300                          mov     [ARENA.SIZE],ax
 43279                                  
 43280                                  	; point to sft 0
 43281                                  
 43282                                  	;mov	di,offset dosdata:sftabl + sftable
 43283                                  	;mov	di,SFTABL+6
 43284 000078B4 BF[D200]                	mov	di,SFTABL+SFT.SFTable
 43285 000078B7 B80300                          mov     ax,3
 43286 000078BA AB                              stosw           		; adjust refcount
 43287                                  
 43288                                  	; es:di is shared data area i.e., es:di -> dosdata:sysinttable
 43289                                  
 43290                                          ;mov	di,offset dosdata:sysinittable
 43291                                  	;mov	di,0D28h
 43292 000078BB BF[280D]                	mov	di,SysInitTable	
 43293                                  
 43294 000078BE 42                      	inc	dx			; advance dx from arena to psp
 43295 000078BF 8EDA                    	mov	ds,dx			; point ds to psp
 43296                                  
 43297                                  					; pass the address os seg_reinit 
 43298                                  					; in dx
 43299 000078C1 BA[2F79]                	mov	dx,seg_reinit
 43300 000078C4 B9[5373]                	mov	cx,exepatch_start
 43301 000078C7 81E9[0000]              	sub	cx,_$STARTCODE		; cx = (doscode - exepatch) - dosinit
 43302                                  
 43303 000078CB B8[0A76]                	mov	ax,SYSBUF
 43304 000078CE 2D[0000]                	sub	ax,_$STARTCODE		; ax = size of doscode - dosinit
 43305                                  	
 43306 000078D1 368B26[8405]                    mov     sp,[ss:USER_SP]		; use ss override for next 2
 43307 000078D6 368E16[8605]                    mov     ss,[ss:USER_SS]
 43308                                  
 43309 000078DB CB                              retf
 43310                                  
 43311                                  ;
 43312                                  ; END OF DOSINIT
 43313                                  ;
 43314                                  ;--------------------------------------------------------------------------
 43315                                  
 43316                                  CHARINIT:
 43317                                  	; 24/04/2019 - Retro DOS v4.0
 43318                                  	; 07/07/2018 - Retro DOS v3.0
 43319                                  	;mov	byte [ss:035Ah],26 ; 1Ah
 43320 000078DC 36C606[5A03]1A                  MOV	BYTE [SS:DEVCALL_REQLEN],DINITHL
 43321                                  	;mov	byte [ss:035Bh],0
 43322 000078E2 36C606[5B03]00                  MOV	BYTE [SS:DEVCALL_REQUNIT],0
 43323                                  	;mov	byte [ss:035Ch],0
 43324 000078E8 36C606[5C03]00                  MOV	BYTE [SS:DEVCALL_REQFUNC],DEVINIT
 43325                                  	;mov	word [ss:035BD],0
 43326 000078EE 36C706[5D03]0000                MOV	WORD [SS:DEVCALL_REQSTAT],0
 43327 000078F5 06                              PUSH	ES
 43328 000078F6 53                              PUSH	BX
 43329 000078F7 50                              PUSH	AX
 43330 000078F8 BB[5A03]                        MOV	BX,DEVCALL
 43331                                          ;PUSH	CS
 43332 000078FB 16                      	PUSH	SS ; 30/04/2019
 43333 000078FC 07                              POP	ES
 43334 000078FD E8BCCC                          CALL	DEVIOCALL2	
 43335 00007900 58                      	POP	AX
 43336 00007901 5B                              POP	BX
 43337 00007902 07                              POP	ES
 43338 00007903 C3                              RETN
 43339                                  
 43340                                  ; 25/04/2019 - Retro DOS v4.0
 43341                                  
 43342                                  ;-----------------------------------------------------------------------------
 43343                                  ;
 43344                                  ;	check_XMM: routine to check presence of XMM driver
 43345                                  ;
 43346                                  ;	Exit:   Sets up the XMM entry point in XMMcontrol in DOSDATA
 43347                                  ;
 43348                                  ;	USED:	none
 43349                                  ;
 43350                                  ;-----------------------------------------------------------------------------
 43351                                  
 43352                                  check_XMM: ; proc near
 43353                                  ;
 43354                                  ; determine whether or not an XMM driver is installed
 43355                                  ;
 43356 00007904 50                      	push	ax
 43357                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_INSTALL_CHECK
 43358 00007905 B80043                  	mov	ax,4300h
 43359 00007908 CD2F                    	int	2Fh
 43360                                  		; - Multiplex - XMS - INSTALLATION CHECK
 43361                                  		; Return: AL = 80h XMS driver installed
 43362                                  		; AL <> 80h no driver
 43363 0000790A 3C80                    	cmp	al,80h			; Q: installed
 43364 0000790C 751D                    	jne	short cXMM_no_driver	; N: set error, quit
 43365                                  ;
 43366                                  ; get the XMM control functions entry point, save it, we
 43367                                  ; need to call it later.
 43368                                  ;
 43369 0000790E 53                      	push	bx
 43370 0000790F 52                      	push	dx
 43371 00007910 1E                      	push	ds
 43372 00007911 06                      	push	es
 43373                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_FUNCTION_ADDR
 43374 00007912 B81043                  	mov	ax,4310h
 43375 00007915 CD2F                    	int	2Fh
 43376                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 43377                                  		; Return: ES:BX -> driver entry point
 43378                                  
 43379 00007917 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 43380                                  
 43381 0000791C 891E[4911]              	mov	[XMMcontrol],bx
 43382 00007920 8C06[4B11]              	mov	[XMMcontrol+2],es
 43383                                  cXMMexit:
 43384 00007924 F8                      	clc
 43385 00007925 07                      	pop	es
 43386 00007926 1F                      	pop	ds
 43387 00007927 5A                      	pop	dx
 43388 00007928 5B                      	pop	bx
 43389 00007929 58                      	pop	ax
 43390 0000792A C3                      	retn				; done
 43391                                  ;
 43392                                  ; set carry if XMM driver not present
 43393                                  ;
 43394                                  cXMM_no_driver:
 43395 0000792B F9                      	stc
 43396 0000792C 58                      	pop	ax
 43397 0000792D C3                      	retn
 43398                                  
 43399                                  ;-----------------------------------------------------------------------------
 43400                                  ;
 43401                                  ; Procedure Name : seg_reinit
 43402                                  ;
 43403                                  ; Inputs	 : ES has final dos code location
 43404                                  ;		   AX = 0 / 1
 43405                                  ;
 43406                                  ; Outputs	 : Patch in the sharer and other tables with seg in ES
 43407                                  ;		   if AX =0
 43408                                  ;		      if first entry
 43409                                  ;			 patch segment & offset of vectors with stub
 43410                                  ;			 and stub with segment in ES
 43411                                  ;		      else
 43412                                  ;			 patch stub with segment in ES
 43413                                  ;
 43414                                  ;		   else if AX = 1
 43415                                  ;			patch segment of vectors with segment in ES	
 43416                                  ;
 43417                                  ; NOTE		 : This routine can be called at most twice!
 43418                                  ;
 43419                                  ; Regs Mod.	 : es, ax, di, cx, bx
 43420                                  ;-----------------------------------------------------------------------------
 43421                                  
 43422 0000792E 00                      num_entry: db	0		; keeps track of the # of times this routine
 43423                                  				; has been called. (0 or 1)
 43424                                  
 43425                                  	; 04/11/2022 - Retro DOS v4.0 (ref: MSDOS 5.0)
 43426                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BAB7h
 43427                                  	; 25/05/2019 - Retro DOS v4.0 (ref: MSDOS 6.21)
 43428                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDA5h
 43429                                  
 43430                                  seg_reinit:	; proc	far
 43431 0000792F 1E                      	push	ds
 43432                                  
 43433 00007930 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 43434                                  
 43435 00007935 E88600                  	call	patch_misc_segments	; patch in segments for sharer and 
 43436                                  					; other tables with seg in ES.
 43437                                  	; 17/12/2022
 43438                                  	; cx = 0
 43439 00007938 39C8                    	cmp	ax,cx ; 0
 43440                                  	;cmp	ax,0
 43441 0000793A 753D                    	jne	short patch_vec_seg	; patch vectors with segment in es
 43442                                  
 43443                                  	; 17/12/2022
 43444 0000793C 2E380E[2E79]            	cmp	[cs:num_entry],cl ; 0
 43445                                  	;cmp	byte [cs:num_entry],0	; Q: is it the first call to this 
 43446 00007941 7508                    	jne	short second_entry	; N: just patch the stub with 
 43447                                  					;    segment in ES
 43448                                  					; Y: patch the vectors with stub 
 43449 00007943 8CD8                    	mov	ax,ds
 43450 00007945 E83E00                  	call	patch_vec_segments	; patch the segment of vectors
 43451 00007948 E8BD00                  	call	patch_offset		; patch the offsets of vectors 
 43452                                  					; with those in the stub.
 43453                                  	; 17/12/2022
 43454                                  	; cx = 0
 43455                                  second_entry:
 43456 0000794B 8CC0                    	mov	ax,es			; patch the stub with segment in es
 43457                                  
 43458                                  	;mov	di,OFFSET DOSDATA:DOSINTTABLE
 43459                                  	;mov	di,1062h	; (same table addr for MSDOS 5.0 and MSDOS 6.21)
 43460 0000794D BF[4810]                	mov	di,DOSINTTABLE
 43461                                  	; 17/12/2022
 43462                                  	; cx = 0
 43463                                  	;mov	cx,9
 43464 00007950 B109                    	mov	cl,9
 43465 00007952 1E                      	push	ds			
 43466 00007953 07                      	pop	es			; es:di -> DOSINTTABLE
 43467                                  
 43468                                  dosinttabloop:
 43469                                  	;add	di,2
 43470                                  	; 19/06/2023
 43471 00007954 47                      	inc	di
 43472 00007955 47                      	inc	di
 43473 00007956 AB                      	stosw
 43474 00007957 E2FB                    	loop	dosinttabloop	
 43475                                  
 43476                                  ; For ROMDOS, this routine will only be called when the DOS wants to
 43477                                  ; use the HMA, so we don't want to check CS
 43478                                  
 43479                                  ;ifndef ROMDOS
 43480 00007959 3D00F0                  	cmp	ax,0F000h		; Q: is the DOS running in the HMA
 43481 0000795C 7220                    	jb	short sr_done		; N: done
 43482                                  ;endif
 43483 0000795E E8A3FF                  	call	check_XMM		; Y: set up the XMS entry point
 43484 00007961 721B                    	jc	short sr_done		; failed to set up XMS do not do
 43485                                  					; A20 toggling in the stub.
 43486                                  	; 17/12/2022
 43487                                  	; cx = 0
 43488 00007963 E81D01                  	call	patch_in_nops		; enable the stub to check A20 state
 43489                                  ; M021-
 43490                                  	;mov	byte [1211h],1
 43491 00007966 C606[F211]01            	mov	byte [DosHasHMA],1	; set flag telling DOS control of HMA 
 43492                                  				
 43493                                  					; set pointer to the routine that 
 43494                                  					; patches buggy exepacked code.
 43495                                  	;mov	[FixExePatch],offset DOSCODE:ExePatch
 43496 0000796B C706[F311][A374]        	mov	word [FixExePatch],ExePatch
 43497                                  					; M068: set pointer to the routine 
 43498                                  					; M068: that detects copy protected
 43499                                  					; M068: apps
 43500                                  	;mov	[ChkCopyProt],offset DOSCODE:IsCopyProt
 43501 00007971 C706[6100][D475]        	mov	word [ChkCopyProt],IsCopyProt
 43502                                  
 43503                                  	; 19/09/2023
 43504 00007977 EB05                    	jmp	short sr_done
 43505                                  
 43506                                  ; 28/12/2022 - Retro DOS v4.1
 43507                                  %if 0
 43508                                  ;----------------------------------------------------------------------------
 43509                                  
 43510                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDF1h
 43511                                  
 43512                                  ;	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43513                                  ;
 43514                                  ;; M020 - begin
 43515                                  ;
 43516                                  ;	call	WhatCPUType
 43517                                  ;	cmp	al,1
 43518                                  ;	jne	short sr_done 		; we need Rational Patch only
 43519                                  ;					;  on 286 systems
 43520                                  ;	;mov	[RationalPatchPtr],offset DOSCODE:RationalPatch
 43521                                  ;	mov	word [RationalPatchPtr],RationalPatch
 43522                                  ;
 43523                                  ;; M020 - end
 43524                                  ;
 43525                                  ;	jmp	short sr_done
 43526                                  ;
 43527                                  ;patch_vec_seg:				; patch vectors with segment in es
 43528                                  ;	mov	ax,es
 43529                                  ;	call	patch_vec_segments	; patch in DOSCODE for the segments
 43530                                  ;					; NOTE we don't have to patch the 
 43531                                  ;					; offsets as they have been already
 43532                                  ;					; set to the doscode offsets at
 43533                                  ;					; DOSINIT.
 43534                                  ;sr_done:
 43535                                  ;	mov	byte [cs:num_entry],1
 43536                                  ;	pop	ds
 43537                                  ;	retf	; ! far return !
 43538                                  
 43539                                  ;----------------------------------------------------------------------------
 43540                                  ;
 43541                                  ; Procedure Name : WhatCPUType
 43542                                  ;
 43543                                  ; Inputs	 : none
 43544                                  ;
 43545                                  ; Outputs	 : AL = 0 if CPU <  286
 43546                                  ;		      = 1 if CPU == 286
 43547                                  ;		      = 2 if CPU >= 386
 43548                                  ;
 43549                                  ; Regs. Mod.	 : AX
 43550                                  ;
 43551                                  ;----------------------------------------------------------------------------
 43552                                  
 43553                                  WhatCPUType:
 43554                                  	; 25/04/2019 - Retro DOS v4.0
 43555                                  	;get_cpu_type	; done with a MACRO which can't be generated > once
 43556                                  
 43557                                  	;CPUTYPE.INC (MSDOS 6.0, 1991)
 43558                                  
 43559                                  ; Note: this must be a macro, and not a subroutine in the BIOS since
 43560                                  ; 	it is called from both CODE and SYSINITSEG.
 43561                                  ;
 43562                                  ;------GET_CPU_TYPE-----------------------------------May, 88 by M.Williamson
 43563                                  ;  Returns: AX = 0 if 8086 or 8088
 43564                                  ;              = 1 if 80286
 43565                                  ;              = 2 if 80386
 43566                                  
 43567                                  	; 04/11/2022
 43568                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB03h
 43569                                  
 43570                                  Get_CPU_Type:	;macro
 43571                                  	pushf
 43572                                  	push	bx			; preserve bx
 43573                                  	xor	bx,bx			; init bx to zero
 43574                                  
 43575                                  	xor	ax,ax			; 0000 into AX
 43576                                  	push	ax			; put it on the stack...
 43577                                  	popf				; ...then shove it into the flags
 43578                                  	pushf				; get it back out of the flags...
 43579                                  	pop	ax			; ...and into ax
 43580                                  	and	ax,0F000h		; mask off high four bits
 43581                                  	cmp	ax,0F000h		; was it all 1's?
 43582                                  	je	short cpu_8086		; aye; it's an 8086 or 8088
 43583                                  
 43584                                  	mov	ax,0F000h		; now try to set the high four bits..
 43585                                  	push	ax
 43586                                  	popf
 43587                                  	pushf
 43588                                  	pop	ax			; ...and see what happens
 43589                                  	and	ax,0F000h		; any high bits set ?
 43590                                  	jz	short cpu_286		; nay; it's an 80286
 43591                                  
 43592                                  cpu_386:				; bx starts as zero
 43593                                  	inc	bx			; inc twice if 386
 43594                                  cpu_286:				; just inc once if 286
 43595                                  	inc	bx
 43596                                  cpu_8086:				; don't inc at all if 086
 43597                                  	mov	ax,bx			; put CPU type value in ax
 43598                                  	pop	bx			; restore original bx
 43599                                  	popf
 43600                                  	
 43601                                  	;endm
 43602                                  
 43603                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS)
 43604                                  	retn	; 19/09/2023
 43605                                  
 43606                                  ; 19/09/2023
 43607                                  ;	; 04/11/2022
 43608                                  ;	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB27h
 43609                                  ;	cmp	al,1
 43610                                  ;	jne	short sr_done 		; we need Rational Patch only
 43611                                  ;					;  on 286 systems
 43612                                  ;	mov	word [RationalPatchPtr],RationalPatch
 43613                                  
 43614                                  ;----------------------------------------------------------------------------
 43615                                  %endif	; 28/12/2022
 43616                                  
 43617                                  	; 19/09/2023
 43618                                  	;jmp	short sr_done
 43619                                  
 43620                                  patch_vec_seg:				; patch vectors with segment in es
 43621 00007979 8CC0                    	mov	ax,es
 43622 0000797B E80800                  	call	patch_vec_segments	; patch in DOSCODE for the segments
 43623                                  					; NOTE we don't have to patch the 
 43624                                  					; offsets as they have been already
 43625                                  					; set to the doscode offsets at
 43626                                  					; DOSINIT.
 43627                                  sr_done:
 43628 0000797E 2EC606[2E79]01          	mov	byte [cs:num_entry],1
 43629 00007984 1F                      	pop	ds
 43630 00007985 CB                      	retf	; ! far return !
 43631                                  
 43632                                  ;----------------------------------------------------------------------------
 43633                                  ;
 43634                                  ; Procedure Name : patch_vec_segments
 43635                                  ;
 43636                                  ; Inputs	 : ax -> has segment address to patch in
 43637                                  ;		   ds -> DOSDATA
 43638                                  ;
 43639                                  ; Outputs	 : Patches in AX as the segment for the following vectors:
 43640                                  ;			
 43641                                  ;			0,20-28,3a-3f
 43642                                  ;
 43643                                  ; Regs. Mod.	 : DI,CX,DX,AX
 43644                                  ;
 43645                                  ;----------------------------------------------------------------------------
 43646                                  
 43647                                  patch_vec_segments:
 43648                                  
 43649 00007986 06                      	push	es
 43650                                  
 43651 00007987 31C9                    	xor	cx,cx ; 0
 43652 00007989 8EC1                    	mov	es,cx
 43653                                  
 43654                                  	;mov	di,82h
 43655 0000798B BF8200                  	mov	di,INTBASE+2		; di -> segment of int 20 vector
 43656                                  
 43657 0000798E 26A30200                	mov	[es:2],ax		; segment of default divide trap handler
 43658                                  
 43659                                  					; set vectors 20 & 21
 43660                                  	; 04/11/2022
 43661                                  	;mov	cx,2
 43662                                  	; 17/12/2022
 43663                                  	;mov	cl,2
 43664                                  ps_set1:
 43665 00007992 AB                      	stosw	; int 20h segment
 43666                                  	;add	di,2
 43667                                  	; 17/12/2022
 43668 00007993 47                      	inc	di
 43669 00007994 47                      	inc	di
 43670                                  	;loop	ps_set1
 43671                                  
 43672                                  	; 17/12/2022
 43673 00007995 AB                      	stosw	; int 21h segment
 43674                                  	;inc	di
 43675                                  	;inc	di
 43676                                  
 43677                                  	;add	di,4			; skip int 22h vector
 43678 00007996 83C706                  	add	di,6 ; *
 43679                                  
 43680 00007999 AB                      	stosw				; set int 23h
 43681 0000799A 83C706                  	add	di,6			; skip int 24h
 43682                                  
 43683                                  					; set vectors 25-28 and 2a-3f 
 43684                                  	; 04/11/2022
 43685                                  	;mov	cx,4			; set 4 segments
 43686                                  	; 17/12/2022
 43687 0000799D B104                    	mov	cl,4
 43688                                  ps_set2:
 43689 0000799F AB                      	stosw				
 43690                                  	;add	di,2
 43691                                  	; 17/12/2022
 43692 000079A0 47                      	inc	di
 43693 000079A1 47                      	inc	di
 43694 000079A2 E2FB                    	loop	ps_set2
 43695                                  
 43696 000079A4 83C704                  	add	di,4			; skip int 29h vector (fast con) as it may
 43697                                  					;   already be set.
 43698                                  	; 04/11/2022
 43699                                  	;mov	cx,6			; set 6 segs (skip 2 between each)
 43700                                  	; 17/12/2022
 43701 000079A7 B106                    	mov	cl,6			;  set segs for ints 2ah-2fh
 43702                                  ps_set3:
 43703 000079A9 AB                      	stosw
 43704                                  	;add	di,2
 43705                                  	; 17/12/2022
 43706 000079AA 47                      	inc	di
 43707 000079AB 47                      	inc	di
 43708 000079AC E2FB                    	loop	ps_set3
 43709                                  
 43710                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 43711                                  ; below. So skip it.
 43712                                  
 43713 000079AE 83C708                  	add	di,8			; skip vector 30h & 31h 
 43714                                  	
 43715                                  	; 04/11/2022
 43716                                  	;mov	cx,14			; set 14 segs (skip 2 between each)
 43717                                  	; 17/12/2022
 43718 000079B1 B10E                    	mov	cl,14			;   sets segs for ints 32h-3fh
 43719                                  ps_set4:
 43720 000079B3 AB                      	stosw
 43721                                  	;add	di,2
 43722                                  	; 17/12/2022
 43723 000079B4 47                      	inc	di
 43724 000079B5 47                      	inc	di
 43725 000079B6 E2FB                    	loop	ps_set4
 43726                                  
 43727                                  ; set offset of int2f
 43728                                  
 43729                                  ;if installed
 43730                                  ;	mov	word ptr es:[02fh * 4],offset doscode:int2f
 43731                                  ;endif
 43732                                  	;mov	[es:0C3h],ax
 43733 000079B8 26A3C300                	mov	[es:ENTRYPOINT+3],ax
 43734                                  	; 17/12/2022
 43735                                  	; cx = 0
 43736 000079BC 07                      	pop	es
 43737 000079BD C3                      	retn
 43738                                  
 43739                                  ;---------------------------------------------------------------------------
 43740                                  ;
 43741                                  ; Procedure Name : patch_misc_segments
 43742                                  ;
 43743                                  ; Inputs	 : es = segment to patch in
 43744                                  ;		   ds = dosdata
 43745                                  ;
 43746                                  ; outputs	 : patches in the sharer and other tables in the dos
 43747                                  ;		   with right dos code segment in es
 43748                                  ;
 43749                                  ; Regs Mod	 : DI,SI,CX
 43750                                  ;
 43751                                  ;---------------------------------------------------------------------------
 43752                                  
 43753                                  patch_misc_segments:
 43754                                  
 43755 000079BE 53                      	push	bx
 43756 000079BF 06                      	push	es
 43757 000079C0 50                      	push	ax
 43758                                  
 43759 000079C1 8CC0                    	mov	ax,es			; ax - > DOS segment
 43760                                  	
 43761 000079C3 1E                      	push	ds
 43762 000079C4 07                      	pop	es			; es -> DOSDATA
 43763                                  	
 43764                                  ; initialize the jump table for the sharer...
 43765                                  
 43766                                  	;mov	di,offset dosdata:jshare
 43767                                  	;mov	di,90h
 43768 000079C5 BF[9000]                	mov	di,JShare
 43769                                  	;mov	bx,[0AAAh]
 43770 000079C8 8B1E[AA0A]              	mov	bx,[TEMP_DOSLOC]	; bx = location to which the share
 43771                                  					; table was patched during the first
 43772                                  					; call to this routine
 43773 000079CC B90F00                  	mov	cx,15
 43774                                  jumptabloop:
 43775                                  	;add	di,2			; skip offset
 43776                                  	; 17/12/2022
 43777 000079CF 47                      	inc	di
 43778 000079D0 47                      	inc	di
 43779 000079D1 83FBFF                  	cmp	bx,-1 ; 0FFFFh		; Q: is this called for the 1st time
 43780 000079D4 7405                    	je	short share_patch	; Y: patch in sharer table
 43781                                  					; N: 
 43782 000079D6 263B1D                  	cmp	bx,[es:di]		; Q: has share been installed
 43783 000079D9 7501                    	jne	short no_share_patch	; Y: don't patch in sharer table
 43784                                  share_patch:
 43785 000079DB AB                      	stosw				; drop in segment
 43786                                  no_share_patch:
 43787 000079DC E2F1                    	loop	jumptabloop
 43788                                  					; BUGBUG patching the country info 
 43789                                  					; with dosdata can be done inline
 43790                                  					; in dosinit.
 43791                                  					; for dos 3.3 country info
 43792                                  					; table address
 43793                                  
 43794                                  	;mov	si,offset dosdata:country_cdpg
 43795                                  	;mov	si,122Ah   
 43796 000079DE BE[0012]                	mov	si,COUNTRY_CDPG
 43797                                  					; initialize double word
 43798                                  					; pointers with dosdata in ds
 43799                                  	;mov	[si+4Fh],ds
 43800                                  	;mov	[si+54h],ds
 43801                                  	;mov	[si+59h],ds
 43802                                  	;mov	[si+5Eh],ds
 43803                                  	;mov	[si+80h],ds
 43804                                  	;mov	[si+63h],ds
 43805 000079E1 8C5C4F                  	mov	[si+DOS_CCDPG.ccUcase_ptr+2],ds    
 43806 000079E4 8C5C54                  	mov	[si+DOS_CCDPG.ccFileUcase_ptr+2],ds 
 43807 000079E7 8C5C59                  	mov	[si+DOS_CCDPG.ccFileChar_ptr+2],ds
 43808 000079EA 8C5C5E                  	mov	[si+DOS_CCDPG.ccCollate_ptr+2],ds
 43809 000079ED 8C9C8000                	mov	[si+DOS_CCDPG.ccMono_ptr+2],ds
 43810 000079F1 8C5C63                  	mov	[si+DOS_CCDPG.ccDBCS_ptr+2],ds	
 43811                                  
 43812                                  					; fastopen routines are in doscode
 43813                                  					; so patch with doscode seg in ax
 43814                                  
 43815                                  	;mov	si,offset dosdata:fastopentable
 43816                                  	;mov	si,0D30h
 43817 000079F4 BE[300D]                	mov	si,FastOpenTable
 43818                                  
 43819                                  	; 17/12/2022
 43820                                  	; bx = [TEMP_DOSLOC]
 43821 000079F7 83FBFF                  	cmp	bx,-1
 43822                                  	;cmp	word [TEMP_DOSLOC],-1	; Q: first time 
 43823 000079FA 7405                    	je	short fast_patch	; Y: patch segment
 43824                                  	;mov	cx,[TEMP_DOSLOC]
 43825                                  					; Q: has fastopen patched in it's
 43826                                  					;    segment
 43827                                  	; 17/12/2022
 43828 000079FC 3B5C04                  	cmp	bx,[si+fastopen_entry.name_caching+2]
 43829                                  	;;cmp	cx,[si+4]
 43830                                  	;cmp	cx,[si+fastopen_entry.name_caching+2]
 43831 000079FF 7503                    	jne	short no_fast_patch	; Y: don't patch in doscode seg
 43832                                  
 43833                                  fast_patch:
 43834                                  	;mov	[si+4],ax
 43835 00007A01 894404                  	mov	[si+fastopen_entry.name_caching+2],ax
 43836                                  no_fast_patch:
 43837                                  	; 17/12/2022
 43838                                  	; cx = 0
 43839 00007A04 58                      	pop	ax
 43840 00007A05 07                      	pop	es
 43841 00007A06 5B                      	pop	bx
 43842                                  
 43843 00007A07 C3                      	retn
 43844                                  
 43845                                  ;--------------------------------------------------------------------------
 43846                                  ;
 43847                                  ; Procedure Name : patch_offset
 43848                                  ; 
 43849                                  ; Inputs	 : NONE
 43850                                  ;
 43851                                  ; Outputs	 : Patches in the offsets in the low_mem_stub for vectors
 43852                                  ;		   0,20-28,3a-3f, and 30,31
 43853                                  ;
 43854                                  ;
 43855                                  ; Regs. Mod	 : AX,DI,CX
 43856                                  ;--------------------------------------------------------------------------
 43857                                  
 43858                                  patch_offset:
 43859 00007A08 06                      	push	es		; preserve es
 43860                                  
 43861 00007A09 31C0                    	xor	ax,ax
 43862 00007A0B 8EC0                    	mov	es,ax
 43863                                  				; set default divide trap address
 43864                                  	;mov	word ptr es:[0],offset dosdata:ldivov	
 43865                                  	;mov	word [es:0],108Ah
 43866 00007A0D 26C7060000[7010]        	mov	word [es:0],ldivov
 43867                                  
 43868                                  	;mov	di,80h
 43869 00007A14 BF8000                  	mov	di,INTBASE	; di-> offset of int 20 handler
 43870                                  	;mov	ax,offset dosdata:lirett
 43871                                  	;mov	ax,10DAh
 43872 00007A17 B8[C010]                	mov	ax,lirett
 43873                                  				; set vectors 20 & 21 to point to iret.
 43874                                  	; 17/12/2022
 43875                                  	; cx = 0
 43876                                  
 43877                                  	;mov	cx,2		; set 2 offsets (skip 2 between each)
 43878                                  po_iset1:
 43879 00007A1A AB                      	stosw	; int 20h offset
 43880                                  	;add	di,2 ; *
 43881                                  	;loop	po_iset1
 43882                                  	; 17/12/2022
 43883 00007A1B 47                      	inc	di
 43884 00007A1C 47                      	inc	di
 43885 00007A1D AB                      	stosw	; int 21h offset
 43886                                  
 43887                                  	;add	di,4		; skip vector 22h
 43888                                  	; 17/12/2022
 43889 00007A1E 83C706                  	add	di,6 ; *	
 43890                                  
 43891 00007A21 AB                      	stosw			; set offset of 23h
 43892                                  	;add	di,6		; skip 24h
 43893                                  	; 19/09/2023
 43894 00007A22 83C712                  	add	di,18		; skip 23h segment and int 24-25-26-27h
 43895                                  
 43896                                  				; set vectors 25-28 and 2a-3f to iret.
 43897                                  	; 04/11/2022
 43898                                  	;mov	cx,4		; set 4 offsets (skip 2 between each)
 43899                                  	; 19/09/2023
 43900                                  	; 17/12/2022
 43901                                  	;mov	cl,4		;   sets offsets for ints 25h-28h
 43902                                  po_iset2:
 43903 00007A25 AB                      	stosw		; set offset for int 28h ; 19/09/2023
 43904                                  	;add	di,2
 43905                                  	; 19/09/2023
 43906                                  	; 17/12/2022
 43907                                  	;inc	di
 43908                                  	;inc	di
 43909                                  	; 19/09/2023
 43910                                  	;loop	po_iset2
 43911                                  
 43912                                  	;add	di,4		; skip vector 29h
 43913                                  	; 19/09/2023
 43914 00007A26 83C706                  	add	di,6	; skip int 28h segment and int 29h ; 19/09/2023
 43915                                  
 43916                                  	; 04/11/2022
 43917                                  	;mov	cx,6		; set 6 offsets (skip 2 between each)
 43918                                  	; 17/12/2022
 43919                                  	;mov	cl,6		;   sets offsets for ints 2ah-2fh
 43920 00007A29 B105                    	mov	cl,5		; sets offsets for ints 2Ah-2Eh
 43921                                  po_iset3:
 43922 00007A2B AB                      	stosw
 43923                                  	;add	di,2
 43924                                  	; 17/12/2022
 43925 00007A2C 47                      	inc	di
 43926 00007A2D 47                      	inc	di
 43927 00007A2E E2FB                    	loop	po_iset3
 43928                                  
 43929                                  ; 30h & 31H is the CPM call entry point whose offset address is set up by
 43930                                  ; below. So skip it.
 43931                                  
 43932                                  	;add	di,8		; skip vector 30h & 31h 
 43933                                  	; 17/12/2022
 43934 00007A30 83C70C                  	add	di,12		; skip vector 2Fh, 30h & 31h
 43935                                  
 43936                                  	; 04/11/2022
 43937                                  	;mov	cx,14		; set 14 offsets (skip 2 between each)
 43938                                  				;   sets offsets for ints 32h-3fh
 43939                                  	; 17/12/2022
 43940 00007A33 B10E                    	mov	cl,14 ; 26/06/2019
 43941                                  po_iset4:
 43942 00007A35 AB                      	stosw
 43943                                  	;add	di,2
 43944                                  	; 17/12/2022
 43945 00007A36 47                      	inc	di
 43946 00007A37 47                      	inc	di
 43947 00007A38 E2FB                    	loop	po_iset4
 43948                                  
 43949                                  ;if installed
 43950                                  	;mov	word ptr es:[02fh * 4],offset dosdata:lint2f
 43951                                  	;mov	word [es:0BCh],10C6h ; (MSDOS 5.0 & 6.21)
 43952 00007A3A 26C706BC00[AC10]        	mov	word [es:(2Fh*4)],lint2f
 43953                                  ;endif
 43954                                  
 43955                                  ; set up entry point call at vectors 30-31h
 43956                                  	;mov	byte [es:0C0h],0EAh
 43957 00007A41 26C606C000EA            	mov	byte [es:ENTRYPOINT],mi_long_jmp
 43958                                  	;mov	word [es:0C1h],10D0h
 43959                                  
 43960 00007A47 26C706C100[B610]        	mov	word [es:ENTRYPOINT+1],lcall_entry
 43961                                  
 43962                                  							; 19/09/2023
 43963                                  	;mov	word [es:80h],1094h
 43964 00007A4E 26C7068000[7A10]        	mov	word [es:addr_int_abort],lquit		; int 20h
 43965                                  	;mov	word [es:84h],109Eh
 43966 00007A55 26C7068400[8410]        	mov	word [es:addr_int_command],lcommand	; int 21h
 43967                                  	;mov	word [es:94h],10A8h
 43968 00007A5C 26C7069400[8E10]        	mov	word [es:addr_int_disk_read],labsdrd	; int 25h  
 43969                                  	;mov	word [es:98h],10B2h
 43970 00007A63 26C7069800[9810]        	mov	word [es:addr_int_disk_write],labsdwrt	; int 26h
 43971                                  	;mov	word [es:9Ch],10BCh
 43972 00007A6A 26C7069C00[A210]        	mov	word [es:addr_int_keep_process],lstay_resident	; int 27h
 43973                                  
 43974                                  	; 17/12/2022
 43975                                  	; CX = 0
 43976 00007A71 07                      	pop	es		; restore es
 43977 00007A72 C3                      	retn
 43978                                  
 43979                                  ;--------------------------------------------------------------------------
 43980                                  ;
 43981                                  ; 	Procedure Name	:	patch_in_nops
 43982                                  ;
 43983                                  ; 	Entry		: 	ES -> DOSDATA
 43984                                  ;
 43985                                  ;	Regs Mod	: 	cx, di
 43986                                  ;
 43987                                  ;	Description:
 43988                                  ;		This routine patches in 2 nops at the offsets specified in 
 43989                                  ;	patch_table. This basically enables the low mem stub to start 
 43990                                  ;	making XMS calls.
 43991                                  ;
 43992                                  ;--------------------------------------------------------------------------
 43993                                  
 43994                                  	; 04/11/2022
 43995                                  	; (MSDOS 5.0 MSDOS.SYS)
 43996                                  	; DOSCODE:0BC50h
 43997                                  
 43998                                  patch_table:	; label	byte
 43999                                  	;dw	offset dosdata:i0patch
 44000                                  	;dw	offset dosdata:i20patch
 44001                                  	;dw	offset dosdata:i21patch
 44002                                  	;dw	offset dosdata:i25patch
 44003                                  	;dw	offset dosdata:i26patch
 44004                                  	;dw	offset dosdata:i27patch
 44005                                  	;dw	offset dosdata:i2fpatch
 44006                                  	;dw	offset dosdata:cpmpatch
 44007 00007A73 [7010]                  	dw	i0patch
 44008 00007A75 [7A10]                  	dw	i20patch
 44009 00007A77 [8410]                  	dw	i21patch
 44010 00007A79 [8E10]                  	dw	i25patch
 44011 00007A7B [9810]                  	dw	i26patch
 44012 00007A7D [A210]                  	dw	i27patch
 44013 00007A7F [AC10]                  	dw	i2fpatch
 44014 00007A81 [B610]                  	dw	cpmpatch
 44015                                  
 44016                                  patch_table_size equ ($-patch_table)/2
 44017                                  
 44018                                  patch_in_nops:
 44019 00007A83 50                      	push	ax
 44020 00007A84 56                      	push	si
 44021 00007A85 BE[737A]                	mov	si,patch_table
 44022 00007A88 B89090                  	mov	ax,9090h ; nop, nop
 44023                                  	; 17/12/2022
 44024                                  	; cx = 0
 44025                                  	;mov	cx,8
 44026                                  	;mov	cx,patch_table_size ; 8
 44027 00007A8B B108                    	mov	cl,patch_table_size ; 8
 44028                                  pin_loop:
 44029 00007A8D 2E8B3C                  	mov	di,[cs:si]
 44030 00007A90 AB                      	stosw
 44031                                  	;add	si,2
 44032                                  	; 17/12/2022
 44033 00007A91 46                      	inc	si
 44034 00007A92 46                      	inc	si
 44035 00007A93 E2F8                    	loop	pin_loop
 44036 00007A95 5E                      	pop	si
 44037 00007A96 58                      	pop	ax
 44038 00007A97 C3                      	retn
 44039                                  
 44040                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 44041                                  ; ---------------------------------------------------------------------------
 44042                                  ; MSDOS 5.0 - MSDOS.SYS offset BC77h, file offset 7EA7h
 44043                                  ; ---------------------------------------------------------------------------
 44044                                  
 44045                                  	; 05/12/2022 - temporary ; (paragraph alinment)
 44046                                  DOSCODE_END:
 44047                                  	;times	9 db 0	; db 9 dup(0)
 44048                                  	; 18/12/2022
 44049 00007A98 0000                    	dw	0  ;	times 2 db 0
 44050                                  
 44051                                  ;align 16
 44052                                  	; DOSCODE:BC80h	(MSDOS 5.0 MSDOS.SYS file offset 7EB0h)
 44053                                  	; MSDOS.SYS file offset: 32432 (start of DOSDATA)
 44054                                  
 44055                                  ; ---------------------------------------------------------------------------
 44056                                  
 44057                                  
 44058                                  ;memstrt label word
 44059                                  ; ---------------------------------------------------------------------------
 44060                                  ; MSDOS 6.21 - MSDOS.SYS offset BF69h, file offset 8189h
 44061                                  ; ---------------------------------------------------------------------------
 44062                                  
 44063                                  MEMSTRT: ; 25/04/2019 - Retro DOS v4.0
 44064                                  
 44065                                  ; if not ROMDOS, then we close the dos code segment, otherwise we close
 44066                                  ; the dos initialization segment
 44067                                  
 44068                                  ;ifndef ROMDOS
 44069                                  
 44070                                  ;doscode ends
 44071                                  
 44072                                  ;else
 44073                                  
 44074                                  ;;dosinitseg ends
 44075                                  
 44076                                  ;endif ; ROMDOS
 44077                                  
 44078                                  ;============================================================================
 44079                                  
 44080                                  ; DPUBLIC <ParaRound, cXMM_no_driver, cXMMexit, char_init_loop, charinit>
 44081                                  ; DPUBLIC <check_XMM, continit, dosinttabloop, endlist>
 44082                                  ; DPUBLIC <initiret, iset1, iset2, jumptabloop, nxtentry>
 44083                                  ; DPUBLIC <notmax,  patch_offset, perdrv>
 44084                                  ; DPUBLIC <perunit, po_iset1, po_iset2, po_iset3>
 44085                                  ; DPUBLIC <ps_set1, ps_set2, ps_set3, seg_reinit>
 44086                                  ; DPUBLIC <sr_done, version_fake_table, xxx>
 44087                                  
 44088                                  ;; burasý doscode sonu
 44089                                  
 44090                                  ;============================================================================
 44091                                  ; DOSDATA
 44092                                  ;============================================================================
 44093                                  ; 29/04/2019 - Retro DOS 4.0
 44094                                  
 44095                                  ;[BITS 16]
 44096                                  
 44097                                  ;[ORG 0]
 44098                                  
 44099                                  ; 25/04/2019 - Retro DOS v4.0
 44100                                  
 44101                                  ;============================================================================
 44102                                  ; DOSDATA - MSDOS 6.21 - MSDOS.SYS Offset 0BF70h, file offset 8190h
 44103                                  ;============================================================================
 44104                                  
 44105                                  ;align 16
 44106                                  	; DOSDATA (MSDOS.SYS kernel DATA) segment starts here...
 44107                                  	; (4970 bytes for MSDOS 6.21)
 44108                                  	; (4976 bytes for Retro DOS v4.0, 25/05/2019 modification.)
 44109                                  
 44110                                  ;============================================================================
 44111                                  ; MSCONST.ASM (MSDOS 6.0, 1991)
 44112                                  ;============================================================================
 44113                                  ; 03/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44114                                  ; 25/04/2019 - Retro DOS 4.0 (MSDOS 6.21)
 44115                                  ; 16/07/2018 - Retro DOS 3.0	
 44116                                  
 44117                                  ;Break <Initialized data and data used at DOS initialization>
 44118                                  ;----------------------------------------------------------------------------
 44119                                  
 44120                                  ; We need to identify the parts of the data area that are relevant to tasks
 44121                                  ; and those that are relevant to the system as a whole. Under 3.0, the system
 44122                                  ; data will be gathered with the system code. The process data under 2.x will
 44123                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 44124                                  ;
 44125                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 44126                                  ; describing that data item.
 44127                                  
 44128                                  ;DOSDATA SEGMENT
 44129                                  
 44130                                  ; 04/11/2022
 44131                                  ;[ORG 0]
 44132                                  
 44133                                  ; ----------------------------------------------------------------------------
 44134                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44135                                  ; ----------------------------------------------------------------------------
 44136                                  ; DOSDATA segment start offset from beginning of MSDOS.SYS file: 32432 (7EB0h)
 44137                                  ; (3DD0h+7EB0h = 0BC80h) - for MSDOS 5.0 kernel file -
 44138                                  ; ----------------------------------------------------------------------------
 44139                                  
 44140                                  ; 04/11/2022
 44141                                  
 44142                                  ;DOSDATA:0000h
 44143                                  
 44144 00007A9A 90<rep 6h>              align 16
 44145                                  
 44146                                  ; ----------------------------------------------------------------------------
 44147                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44148                                  ; ----------------------------------------------------------------------------
 44149                                  
 44150                                  segment .data  vstart=0 ; 06/12/2022
 44151                                  								
 44152                                  ; ============================================================================
 44153                                  
 44154                                  ; 06/12/2022
 44155                                  ;DOSDATASTART equ $
 44156                                  DOSDATASTART:
 44157                                  
 44158                                  
 44159                                  ;hkn; add 4 bytes to get correct offsets since jmp has been removed in START
 44160                                  
 44161                                  	;; 03/11/2022
 44162                                  	;jmp	DOSINIT		; MSDOS 5.0 - MSDOS.SYS (DOSDATA:0000h)
 44163                                  
 44164                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44165                                  	;db	4 dup (?)	
 44166 00000000 00<rep 4h>              	times	4 db 0
 44167                                  
 44168                                  	; 29/04/2019 - Retro DOS v4.0 modification
 44169                                  	;dw 	_$STARTCODE ; DOSCODE offset and/or size of DOSDATA
 44170                                  	;dw	0
 44171                                  
 44172                                  	;EVEN
 44173                                  
 44174                                  ;align 2
 44175                                  
 44176                                  ; WANGO!!! The following word is used by SHARE and REDIR to determin data
 44177                                  ; area compatability. This location must be incremented EACH TIME the data
 44178                                  ; area here gets mucked with.
 44179                                  ;
 44180                                  ; Also, do NOT change this position relative to DOSDATA:0.
 44181                                  
 44182                                  MSCT001S:	; LABEL BYTE
 44183                                  	
 44184                                  DataVersion:	
 44185 00000004 0100                    	dw	1	;AC000; [SYSTEM] version number for DOS DATA
 44186                                  
 44187                                  ;hkn; add 8 bytes to get correct offsets since BugTyp, BugLev and "BUG " has 
 44188                                  ;hkn; been removed to DOSCODE above
 44189                                  
 44190                                  ;M044
 44191                                  ; First part of save area for saving last para of Window memory
 44192                                  
 44193                                  WinoldPatch1:	; db 8 dup (?)	;M044
 44194 00000006 00<rep 8h>              	times	8 db 0
 44195                                  
 44196                                  	; MSDOS 6.21 DOSDATA:000Eh
 44197                                  MYNUM:			; Offset 000Eh
 44198 0000000E 0000                    	dw	0	; [SYSTEM] A number that goes with MYNAME
 44199                                  FCBLRU: 		; [SYSTEM] LRU count for FCB cache
 44200 00000010 0000                    	dw	0
 44201                                  OpenLRU:
 44202 00000012 0000                    	dw	0	; [SYSTEM] LRU count for FCB cache opens
 44203                                  OEM_HANDLER: 		
 44204 00000014 FFFFFFFF                	dd	-1	; [SYSTEM] Pointer to OEM handler code	
 44205                                  
 44206                                  ;	BUGBUG - who uses LeaveAddr?  What if we want to rework the
 44207                                  ;;			way that we leave DOS???? - jgl
 44208                                  
 44209                                  LeaveAddr:
 44210 00000018 [0404]                  	dw	LeaveDOS  ; <<OFFSET DOSCODE:LeaveDOS>> ; [SYSTEM]
 44211                                  RetryCount:		
 44212 0000001A 0300                    	dw	3	; [SYSTEM] Share retries
 44213                                  RetryLoop:
 44214 0000001C 0100                    	dw	1	; [SYSTEM] Share retries
 44215                                  LastBuffer:
 44216 0000001E FFFFFFFF                	dd	-1	; [SYSTEM] Buffer queue recency pointer
 44217                                  CONTPOS:
 44218 00000022 0000                    	dw	0	; [SYSTEM] location in buffer of next read
 44219                                  arena_head:
 44220 00000024 0000                    	dw	0	; [SYSTEM] Segment # of first arena in memory
 44221                                  
 44222                                  ;; 16/07/2018
 44223                                  ;;***************************************************************************
 44224                                  ;; NOTE: INT 21H AH=52H !  (http://stanislavs.org/helppc/int_21-52.html)
 44225                                  ;;***************************************************************************
 44226                                  ;; INT 21,52 - Get Pointer to DOS "INVARS" (Undocumented)
 44227                                  ;;
 44228                                  ;;	AH = 52h
 44229                                  ;;
 44230                                  ;;	on return:
 44231                                  ;;	ES:BX = pointer to DOS "invars", a table of pointers used by DOS.
 44232                                  ;;		Known "invars" fields follow (varies with DOS version):
 44233                                  ;;
 44234                                  ;;	Offset Size		 Description
 44235                                  ;;
 44236                                  ;;	 -12   word   sharing retry count (DOS 3.1-3.3)
 44237                                  ;;	 -10   word   sharing retry delay  (DOS 3.1-3.3)
 44238                                  ;;	  -8   dword  pointer to current disk buffer (DOS 3.x)
 44239                                  ;;	  -4   word   pointer in DOS code segment of unread CON input;
 44240                                  ;;		      0 indicates no unread input (DOS 3.x)
 44241                                  ;;	  -2   word   segment of first Memory Control Block (MCB)
 44242                                  ;;	  00   dword  pointer to first DRIVE PARAMETER TABLE (A:) in chain
 44243                                  ;;	  04   dword  pointer to DOS System File Table (SFT)
 44244                                  ;;	  08   dword  pointer to $CLOCK device driver
 44245                                  ;;	  0C   dword  pointer to CON device driver
 44246                                  ;;	  10   byte   number of logical drives in system
 44247                                  ;;	  11   word   maximum bytes/block of any block device
 44248                                  ;;	  13   dword  pointer to DOS cache buffer header
 44249                                  ;;	  17 18bytes  NUL device header, first 4 bytes of device header
 44250                                  ;;		      point to the next device in device chain
 44251                                  ;;
 44252                                  ;;***************************************************************************
 44253                                  
 44254                                  ; The following block of data is used by SYSINIT. 
 44255                                  ; Do not change the order or size of this block
 44256                                  
 44257                                  ;SYSINITVAR:
 44258                                  ;----------------------------------------------------------------------------
 44259                                  SYSINITVARS:
 44260                                  DPBHEAD:
 44261 00000026 00000000                	dd	0	; [SYSTEM] Pointer to head of DPB-FAT list
 44262                                  SFT_ADDR:
 44263 0000002A [CC000000]              	dd	SFTABL	; [SYSTEM] Pointer to first SFT table
 44264                                  BCLOCK:
 44265 0000002E 00000000                	dd	0	; [SYSTEM] The CLOCK device
 44266                                  BCON:
 44267 00000032 00000000                	dd	0	; [SYSTEM] Console device entry points
 44268                                  MAXSEC:
 44269 00000036 8000                    	dw	128	; [SYSTEM] Maximum allowed sector size
 44270                                  BUFFHEAD:
 44271 00000038 00000000                	dd	0	; [SYSTEM] Pointer to head of buffer queue
 44272                                  CDSADDR:
 44273 0000003C 00000000                	dd	0	; [SYSTEM] Pointer to curdir structure table
 44274                                  SFTFCB:
 44275 00000040 00000000                	dd	0	; [SYSTEM] pointer to FCB cache table
 44276                                  KEEPCOUNT:
 44277 00000044 0000                    	dw	0	; [SYSTEM] count of FCB opens to keep
 44278                                  NUMIO:
 44279 00000046 00                      	db	0	; [SYSTEM] Number of disk tables
 44280                                  CDSCOUNT:
 44281 00000047 00                      	db	0	; [SYSTEM] Number of CDS structures in above
 44282                                  
 44283                                  ; A fake header for the NUL device
 44284                                  NULDEV:
 44285 00000048 00000000                	dd	0	; [SYSTEM] Link to rest of device list
 44286                                  	;dw	8004h
 44287 0000004C 0480                    	dw	DEVTYP|ISNULL ; [SYSTEM] Null device attributes
 44288 0000004E [C60D]                  	dw	SNULDEV	; [SYSTEM] Strategy entry point
 44289 00000050 [CC0D]                  	dw	INULDEV	; [SYSTEM] Interrupt entry point
 44290 00000052 4E554C2020202020        	db	"NUL     " ; [SYSTEM] Name of null device
 44291                                  SPLICES:
 44292 0000005A 00                      	db	0	; [SYSTEM] TRUE => splices being done
 44293                                  
 44294                                  Special_Entries:
 44295 0000005B 0000                    	dw	0	; [SYSTEM] address of special entries ;AN000;
 44296                                  UU_IFS_DOS_CALL:
 44297 0000005D 00000000                	dd	0	; [SYSTEM] entry for IFS DOS service ;AN000;
 44298                                  ; 
 44299                                  ; UU_IFS_HEADER:
 44300                                  ; 	dd	0	; [SYSTEM] IFS header chain ;AN000;
 44301                                  
 44302                                  ChkCopyProt:
 44303 00000061 0000                    	dw	0	; M068
 44304                                  A20OFF_PSP:
 44305 00000063 0000                    	dw	0	; M068
 44306                                  BUFFERS_PARM1:
 44307 00000065 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,m	;AN000;
 44308                                  BUFFERS_PARM2:
 44309 00000067 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,n ;AN000;
 44310                                  BOOTDRIVE:
 44311 00000069 00                      	db	0	; [SYSTEM] the boot drive ;AN000;
 44312                                  DDMOVE:
 44313 0000006A 00                      	db	0 	; [SYSTEM] 1 if we need DWORD move ;AN000;
 44314                                  EXT_MEM_SIZE:
 44315 0000006B 0000                    	dw	0	; [SYSTEM] extended memory size	;AN000;
 44316                                  
 44317                                  HASHINITVAR: ; LABEL   WORD	; AN000;
 44318                                  ;
 44319                                  ; Replaced by next two declarations
 44320                                  ;
 44321                                  ;UU_BUF_HASH_PTR:
 44322                                  ;	dd	0	; [SYSTEM] buffer Hash table addr
 44323                                  ;UU_BUF_HASH_COUNT:
 44324                                  ;	dw	1	; [SYSTEM] number of Hash entries
 44325                                  
 44326                                  BufferQueue:
 44327 0000006D 00000000                	dd	0	; [SYSTEM] Head of the buffer Queue
 44328                                  DirtyBufferCount:
 44329 00000071 0000                    	dw	0	; [SYSTEM] Count of Dirty buffers in the Que
 44330                                  			; BUGBUG ---- change to byte
 44331                                  SC_CACHE_PTR:
 44332 00000073 00000000                	dd	0	; [SYSTEM] secondary cache pointer
 44333                                  SC_CACHE_COUNT:
 44334 00000077 0000                    	dw	0 	; [SYSTEM] secondary cache count
 44335                                  BuffInHMA:
 44336 00000079 00                      	db	0	; Flag to indicate that buffs are in HMA
 44337                                  LoMemBuff:
 44338 0000007A 00000000                	dd	0	; Ptr to intermediate buffer
 44339                                  			;  in Low mem when buffs are in HMA
 44340                                  ;
 44341                                  ; All variables which have UU_ as prefix can be reused for other
 44342                                  ; purposes and can be renamed. All these variables were used for
 44343                                  ; EMS support of Buffer Manager. Now they are useless for Buffer
 44344                                  ; manager ---- MOHANS
 44345                                  ;
 44346                                  	;I_am	UU_BUF_EMS_FIRST_PAGE,3,<0,0,0>  
 44347                                  UU_BUF_EMS_FIRST_PAGE:	
 44348 0000007E 000000                  	db	0,0,0	; holds the first page above 640K
 44349                                  
 44350                                  	;;I_am	UU_BUF_EMS_NPA640,WORD,<0> ; holds the number of pages 
 44351                                  ;UU_BUF_EMS_NPA640:			   ; above 640K	
 44352                                  ;	dw	0			
 44353                                  
 44354                                  CL0FATENTRY:
 44355 00000081 FFFF                    	dw	-1	; M014:	Holds the data that
 44356                                  			; is used in pack/unpack rts.
 44357                                  			; in fat.asm if cluster 0 is specified.
 44358                                  			; SR;
 44359                                  IoStatFail:
 44360 00000083 00                      	db	0	; IoStatFail has been added to 
 44361                                  			; record a fail on an I24 
 44362                                  			; issued from IOFUNC on a status call. 
 44363                                  
 44364                                  ;***	I_am	UU_BUF_EMS_MODE,BYTE,<-1>	; EMS mode 	;AN000;
 44365                                  ;***	I_am	UU_BUF_EMS_HANDLE,BYTE		; buffer EMS handle ;AN000;
 44366                                  ;***	I_am	UU_BUF_EMS_PAGE_FRAME,WORD ,<-1>; EMS page frame # ;AN000;
 44367                                  ;***	I_am	UU_BUF_EMS_SEG_CNT,WORD,<1>	; EMS seg count	;AN000;
 44368                                  ;***	I_am	UU_BUF_EMS_PFRAME,WORD		; EMS page frame seg address ;AN000;
 44369                                  ;***	I_am	UU_BUF_EMS_RESERV,WORD,<0> 	; reserved	;AN000;
 44370                                  ;
 44371                                  ;***	I_am	UU_BUF_EMS_MAP_BUFF,1,<0>	; this is not used to save the 
 44372                                  						; state of the 	buffers page.
 44373                                  						; This one byte is retained to 
 44374                                  						; keep the size of this data 
 44375                                  						; block the same.;
 44376                                  ALLOCMSAVE:
 44377 00000084 00                      	db	0	; M063: temp var. used to 
 44378                                  			; M063: save alloc method in
 44379                                  			; M063: msproc.asm
 44380                                  A20OFF_COUNT:
 44381 00000085 00                      	db	0	; M068: indiactes the # of 
 44382                                  			; M068: int 21 calls for 
 44383                                  			; M068: which A20 is off
 44384                                  DOS_FLAG:
 44385 00000086 00                      	db	0	; see DOSSYM.INC for Bit 
 44386                                  			; definitions
 44387                                  UNPACK_OFFSET:
 44388 00000087 0000                    	dw	0	; saves pointer to the start
 44389                                  			; of unpack code in exepatch.
 44390                                  			; asm.
 44391                                  UMBFLAG:
 44392 00000089 00                      	db	0 	; M003: bit 0 indicates the 
 44393                                  			; M003: link state of the UMBs
 44394                                  			; M003: whether linked or not 
 44395                                  			; M003: to the DOS arena chain
 44396                                  SAVE_AX:
 44397 0000008A 0000                    	dw	0	; M000: temp varibale to store ax
 44398                                  			; M000: in msproc.asm
 44399                                  UMB_HEAD:
 44400 0000008C FFFF                    	dw	-1	; M000: this is initialized to  
 44401                                  			; M000: the first umb arena by 
 44402                                  			; M000: BIOS sysinit.
 44403                                  START_ARENA:
 44404 0000008E 0100                    	dw	1	; M000: this is the first arena 
 44405                                  			; M000: from which DOS will 
 44406                                  			; M000: start its scan for alloc.
 44407                                  
 44408                                  ; End of SYSINITVar block
 44409                                  ;----------------------------------------------------------------------------
 44410                                  
 44411                                  ; 25/04/2019 - Retro DOS v4.0
 44412                                  
 44413                                  ; 16/07/2018
 44414                                  ; MSDOS 3.3 (& MDOS 6.0)
 44415                                  
 44416                                  ;
 44417                                  ; Sharer jump table
 44418                                  ;
 44419                                  
 44420                                  ;PUBLIC	JShare
 44421                                  	;EVEN
 44422                                  
 44423                                  ;JShare	LABEL	DWORD
 44424                                  ;	DW	OFFSET DOSCODE:BadCall, 0
 44425                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	1   MFT_enter
 44426                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	2   MFTClose
 44427                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	3   MFTclU
 44428                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	4   MFTCloseP
 44429                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	5   MFTCloN
 44430                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	6   set_block
 44431                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	7   clr_block
 44432                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	8   chk_block
 44433                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	9   MFT_get
 44434                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	10  ShSave
 44435                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	11  ShChk
 44436                                  ;	DW	OFFSET DOSCODE:OKCall , 0  ;	12  ShCol
 44437                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	13  ShCloseFile
 44438                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	14  ShSU
 44439                                  
 44440                                  align 2
 44441                                  
 44442                                  JShare:
 44443 00000090 [FD06]0000              		DW	BadCall,0
 44444 00000094 [0107]0000              MFT_enter:	DW	OKCall, 0  ; 1   MFT_enter
 44445 00000098 [0107]0000              MFTClose:	DW	OKCall, 0  ; 2   MFTClose
 44446 0000009C [FD06]0000              MFTclU:		DW	BadCall,0  ; 3   MFTclU
 44447 000000A0 [FD06]0000              MFTCloseP:	DW	BadCall,0  ; 4   MFTCloseP
 44448 000000A4 [FD06]0000              MFTCloN:	DW	BadCall,0  ; 5   MFTCloN
 44449 000000A8 [FD06]0000              set_block:	DW	BadCall,0  ; 6   set_block
 44450 000000AC [FD06]0000              clr_block:	DW	BadCall,0  ; 7   clr_block
 44451 000000B0 [0107]0000              chk_block:	DW	OKCall, 0  ; 8   chk_block
 44452 000000B4 [FD06]0000              MFT_get:	DW	BadCall,0  ; 9   MFT_get
 44453 000000B8 [FD06]0000              ShSave:		DW	BadCall,0  ; 10  ShSave
 44454 000000BC [FD06]0000              ShChk:		DW	BadCall,0  ; 11  ShChk
 44455 000000C0 [0107]0000              ShCol:		DW	OKCall, 0  ; 12  ShCol
 44456 000000C4 [FD06]0000              ShCloseFile:	DW	BadCall,0  ; 13  ShCloseFile
 44457 000000C8 [FD06]0000              ShSU:		DW	BadCall,0  ; 14  ShSU
 44458                                  
 44459                                  
 44460                                  ;============================================================================
 44461                                  ; CONST2.ASM (MSDOS 6.0, 1991)
 44462                                  ;============================================================================
 44463                                  ; 25/04/2019 - Retro DOS 4.0 
 44464                                  ; 16/07/2018 - Retro DOS 3.0	
 44465                                  
 44466                                  ;Break <Initialized data and data used at DOS initialization>
 44467                                  ;----------------------------------------------------------------------------
 44468                                  
 44469                                  ; We need to identify the parts of the data area that are relevant to tasks
 44470                                  ; and those that are relevant to the system as a whole.  Under 3.0, the system
 44471                                  ; data will be gathered with the system code.  The process data under 2.x will
 44472                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 44473                                  ;
 44474                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 44475                                  ; describing that data item.
 44476                                  
 44477                                  ;DOSDATA SEGMENT WORD PUBLIC 'DATA'
 44478                                  
 44479                                  ;
 44480                                  ; Table of routines for assignable devices
 44481                                  ;
 44482                                  ; MSDOS allows assignment if the following standard devices:
 44483                                  ;   stdin  (usually CON input)
 44484                                  ;   stdout (usually CON output)
 44485                                  ;   auxin  (usually AUX input)
 44486                                  ;   auxout (usually AUX output)
 44487                                  ;   stdlpt (usually PRN output)
 44488                                  ;
 44489                                  ; SPECIAL NOTE:
 44490                                  ;   Status of a file is a strange idea. We choose to handle it in this manner:
 44491                                  ;   If we're not at end-of-file, then we always say that we have a character.
 44492                                  ;   Otherwise, we return ^Z as the character and set the ZERO flag. In this
 44493                                  ;   manner we can support program written under the old DOS (they use ^Z as EOF
 44494                                  ;   on devices) and programs written under the new DOS (they use the ZERO flag
 44495                                  ;   as EOF).
 44496                                  
 44497                                  ; Default SFTs for boot up
 44498                                  
 44499                                  		;PUBLIC	SFTABL
 44500                                  
 44501                                  SFTABL:	   ; LABEL   DWORD		; [SYSTEM] file table
 44502 000000CC FFFF                    		DW -1			; [SYSTEM] link to next table
 44503 000000CE FFFF                    		DW -1			; [SYSTEM] link seg to next table
 44504 000000D0 0500                    		DW sf_default_number	; [SYSTEM] Number of entries in table
 44505                                  		;times 295 db 0 ; MSDOS 6.0
 44506 000000D2 00<rep 127h>            		times (sf_default_number*sf_entry_size) db 0
 44507                                  
 44508                                  ; the next two variables relate to the position of the logical stdout/stdin
 44509                                  ; cursor. They are only meaningful when stdin/stdout are assigned to the
 44510                                  ; console.
 44511                                  		; DOSDATA:01F9h (MSDOS 6.21)
 44512 000001F9 00                      CARPOS:		db 0			; [SYSTEM] cursor position in stdin
 44513 000001FA 00                      STARTPOS:	db 0			; [SYSTEM] position of cursor at beginning
 44514                                  					;	   of buffered input call
 44515 000001FB 00<rep 80h>             INBUF:		times 128 db 0		; [SYSTEM] general device input buffer
 44516 0000027B 00<rep 83h>             CONBUF:		times 131 db 0		; [SYSTEM] The rest of INBUF and console buffer
 44517                                  		; DOSDATA:02FEh (MSDOS 6.21)
 44518 000002FE 00                      PFLAG:		db 0			; [SYSTEM] printer echoing flag
 44519 000002FF 00                      VERFLG:		db 0			; [SYSTEM] Initialize with verify off
 44520 00000300 03                      CHARCO:		db 00000011b		; [SYSTEM] Allows statchks every 4 chars...
 44521                                  switch_character:
 44522 00000301 2F                      chSwitch:	db '/'			; UNUSED - obsolete datum, can be reused
 44523 00000302 00                      AllocMethod:	db 0			; [SYSTEM] how to alloc first(best)last
 44524 00000303 00                      fShare:		db 0			; [SYSTEM] TRUE => sharing installed
 44525 00000304 01                      DIFFNAM:	db 1			; [SYSTEM] Indicates when MYNAME has changed
 44526 00000305 20<rep 10h>             MYNAME:		times 16 db 20h		; [SYSTEM] My network name
 44527                                  
 44528                                  ; The following table is a list of addresses that the sharer patches to be
 44529                                  ; PUSH AX to enable the critical sections
 44530                                  
 44531                                  		; DOSDATA:0315h (MSDOS 6.21)
 44532                                  
 44533                                  ;PUBLIC	CritPatch
 44534                                  
 44535                                  CritPatch:	; LABEL WORD
 44536                                  
 44537                                  ;IRP sect,<critDisk,critDevice>
 44538                                  
 44539                                  ;IF (NOT REDIRECTOR) AND (NOT SHAREF)
 44540                                  ;
 44541                                  ;SR; Change code patch address to a variable in data segment
 44542                                  ;
 44543                                  ;       dw OFFSET DOSDATA: redir_patch
 44544                                  ;       dw OFFSET DOSDATA: redir_patch
 44545                                  ;
 44546                                  ;;hkn	Short_Addr  E&sect
 44547                                  ;;hkn	Short_Addr  L&sect
 44548                                  ;
 44549                                  ;ELSE
 44550                                  ;	DW	0
 44551                                  ;	DW	0
 44552                                  ;ENDIF
 44553                                  ;ENDM
 44554                                  ;	DW	0
 44555                                  
 44556                                  	; 25/07/2019 - Retro DOS v4.0 (MSDOS 6.21)
 44557                                   
 44558 00000315 [0C0D]                  	dw 	redir_patch
 44559 00000317 [0C0D]                  	dw 	redir_patch			
 44560 00000319 [0C0D]                  	dw	redir_patch
 44561 0000031B [0C0D]                  	dw 	redir_patch
 44562                                  
 44563 0000031D 0000                    	dw	0
 44564                                  
 44565                                  ; WARNING!!! PRINT and PSPRINT *REQUIRE* ErrorMode to precede INDOS.
 44566                                  ; Also, IBM server 1.0 requires this also.
 44567                                  
 44568                                  	;EVEN			; Force swap area to start on word boundry
 44569 0000031F 90                      align 2
 44570                                  	;PUBLIC	SWAP_START
 44571                                  SWAP_START:	; LABEL BYTE
 44572 00000320 00                      ERRORMODE:	db 0		; Flag for INT 24 processing
 44573 00000321 00                      INDOS:		db 0		; DOS status for interrupt processing
 44574 00000322 FF                      WPERR:		db -1		; Write protect error flag
 44575 00000323 00                      EXTERR_LOCUS:	db 0		; Extended Error Locus
 44576 00000324 0000                    EXTERR:		dw 0		; Extended Error code
 44577                                  
 44578                                  ;WARNING Following two bytes Accessed as word in $GetExtendedError
 44579 00000326 00                      EXTERR_ACTION:	db 0		; Extended Error Action
 44580 00000327 00                      EXTERR_CLASS:	db 0		; Extended Error Class
 44581                                  ; end warning
 44582                                   
 44583 00000328 00000000                EXTERRPT:	dd 0		; Extended Error pointer
 44584                                  
 44585 0000032C 80000000                DMAADD:		dd 80h		; User's disk transfer address (disp/seg)
 44586 00000330 0000                    CurrentPDB:	dw 0		; Current process identifier
 44587 00000332 0000                    ConC_Spsave:	dw 0		; saved SP before ^C
 44588 00000334 0000                    exit_code:	dw 0		; exit code of last proc.
 44589 00000336 00                      CURDRV:		db 0		; Default drive (init A)
 44590 00000337 00                      CNTCFLAG:	db 0		; ^C check in dispatch disabled
 44591                                  ;				; F.C. 2/17/86
 44592 00000338 00                      CPSWFLAG:	db 0		; Code Page Switching Flag  DOS 4.00
 44593 00000339 00                      CPSWSAVE:	db 0		; copy of above in case of ABORT
 44594                                  ;align 2
 44595                                  SWAP_ALWAYS:	; 05/08/2018
 44596 0000033A 0000                    USER_IN_AX:	dw 0		; User INPUT AX value (used for
 44597                                  				;   extended error type stuff.
 44598                                  				;   NOTE: does not have Correct value on
 44599                                  				;   1-12, OEM, Get/Set CurrentPDB,
 44600                                  				;   GetExtendedError system calls)
 44601 0000033C 0000                    PROC_ID:	dw 0		; PID for sharing (0 = local)
 44602 0000033E 0000                    USER_ID:	dw 0		; Machine for sharing (0 = local)
 44603 00000340 0000                    FirstArena:	dw 0		; first free block found
 44604 00000342 0000                    BestArena:	dw 0		; best free block found
 44605 00000344 0000                    LastArena:	dw 0		; last free block found
 44606 00000346 0000                    ENDMEM:		dw 0		; End of memory used in DOSINIT
 44607 00000348 0000                    LASTENT:	dw 0		; Last entry for directory search
 44608 0000034A 00                      FAILERR:	db 0		; NZ if user did FAIL on I 24
 44609 0000034B 00                      ALLOWED:	db 0		; Allowed I 24 answers (see allowed_)
 44610 0000034C 00                      NoSetDir:	db 0		; true -> do not set directory
 44611 0000034D 00                      DidCTRLC:	db 0		; true -> we did a ^C exit
 44612 0000034E 00                      SpaceFlag:	db 0		; true -> embedded spaces are allowed in FC
 44613                                  
 44614                                  ; Warning!  The following items are accessed as a WORD in TIME.ASM
 44615                                  	;EVEN
 44616 0000034F 90                      align 2
 44617                                  		; DOSDATA:0350h (MSDOS 6.21)
 44618 00000350 00                      DAY:		db 0		; Day of month
 44619 00000351 00                      MONTH:		db 0		; Month of year
 44620 00000352 0000                    YEAR:		dw 0		; Year (with century)
 44621 00000354 FFFF                    DAYCNT:		dw -1		; Day count from beginning of year
 44622 00000356 00                      WEEKDAY:	db 0		; Day of week
 44623                                  ; end warning
 44624                                  
 44625 00000357 00                      CONSWAP:	db 0		; TRUE => console was swapped during device read
 44626 00000358 01                      IDLEINT:	db 1		; TRUE => idle int is allowed
 44627 00000359 00                      fAborting:	db 0		; TRUE => abort in progress
 44628                                  
 44629                                  ; Combination of all device call parameters
 44630                                  	;PUBLIC	DEVCALL 	;
 44631                                  ;DEVCALL SRHEAD	<>		; basic header for disk packet
 44632                                  DEVCALL: ; 08/08/2018
 44633 0000035A 00                      DEVCALL_REQLEN:  db 0 		;Length in bytes of request block
 44634 0000035B 00                      DEVCALL_REQUNIT: db 0		;Device unit number
 44635 0000035C 00                      DEVCALL_REQFUNC: db 0		;Type of request
 44636 0000035D 0000                    DEVCALL_REQSTAT: dw 0		;Status Word
 44637 0000035F 00<rep 8h>                       times 8 db 0		;Reserved for queue links
 44638                                  
 44639                                  	;PUBLIC	CALLUNIT
 44640                                  CALLUNIT: ; LABEL   BYTE	; unit number for disk
 44641                                  CALLFLSH: ; LABEL   WORD	;
 44642 00000367 00                      CALLMED:	db 0		; media byte
 44643                                  CALLBR:	  ; LABEL   DWORD	;
 44644                                  	;PUBLIC	CALLXAD 	;
 44645                                  CALLXAD:  ; LABEL   DWORD	;
 44646 00000368 00                      CALLRBYT:	db 0		;
 44647                                  	;PUBLIC	CALLVIDM	;
 44648                                  CALLVIDM: ; LABEL   DWORD	;
 44649 00000369 00<rep 3h>              	times 3 db 0	;
 44650                                  	;PUBLIC CallBPB		;
 44651                                  CALLBPB:  ; LABEL   DWORD	;
 44652                                  CALLSCNT:			;
 44653 0000036C 0000                    		dw 0		;
 44654                                  	;PUBLIC	CALLSSEC	;
 44655                                  CALLSSEC: ; LABEL   WORD	;
 44656 0000036E 0000                    		dw 0		;
 44657 00000370 00000000                CALLVIDRW:	dd 0		;
 44658                                  ;MSDOS 6.0
 44659 00000374 00000000                CALLNEWSC:	dd 0		; starting sector for >32mb
 44660 00000378 00000000                CALLDEVAD:	dd 0		; stash for device entry point
 44661                                  
 44662                                  ; Same as above for I/O calls	;
 44663                                  				;
 44664                                  	;PUBLIC	IOCall		;
 44665                                  ;IOCALL	SRHEAD	<>		;
 44666                                  IOCALL:	; 07/08/2018
 44667 0000037C 00                      IOCALL_REQLEN:	db 0		;Length in bytes of request block	
 44668 0000037D 00                      IOCALL_REQUNIT:	db 0		;Device unit number
 44669 0000037E 00                      IOCALL_REQFUNC: db 0		;Type of request
 44670 0000037F 0000                    IOCALL_REQSTAT: dw 0		;Status Word
 44671 00000381 00<rep 8h>              	times 8	db 0		;Reserved for queue links
 44672                                  IOFLSH:	  ; LABEL   WORD	;
 44673                                          ;PUBLIC  IORCHR		;
 44674                                  IORCHR:	  ; LABEL   BYTE	;
 44675 00000389 00                      IOMED:		db 0		;
 44676 0000038A 00000000                IOXAD:		dd 0		;
 44677 0000038E 0000                    IOSCNT:		dw 0		;	
 44678 00000390 0000                    IOSSEC:		dw 0		;
 44679                                  
 44680                                  ; Call struct for DSKSTATCHK	;
 44681 00000392 0E                      DSKSTCALL:	db DRDNDHL 	; = 14
 44682 00000393 00                      		db 0
 44683 00000394 05                      DSKSTCOM:	db DEVRDND	; = 5
 44684 00000395 0000                    DSKSTST:	dw 0		;
 44685 00000397 00<rep 8h>              	times 8	db 0		;
 44686 0000039F 00                      DSKCHRET:	db 0		;
 44687                                  
 44688                                  ;hkn; short_addr has been changed to provide offset in DOSCODE.
 44689                                  ;hkn; deviobuf is in DATA seg (DOSDATA)
 44690                                  ;hkn   short_addr  DEVIOBUF	;
 44691                                  	
 44692 000003A0 [BC03]                  DEVIOBUF_PTR	dw DEVIOBUF
 44693 000003A2 0000                    DOSSEG_INIT	dw 0		; DOS segment set at Init
 44694 000003A4 0100                    DSKSTCNT:	dw 1		;
 44695 000003A6 0000                    		dw 0		;
 44696                                  
 44697 000003A8 00                      CreatePDB:	db 0		; flag for creating a process
 44698                                  
 44699                                  ;MSDOS 6.0
 44700                                  Lock_Buffer:	; LABEL  DWORD	;MS. DOS Lock Buffer for Ext Lock
 44701 000003A9 00000000                		dd 0		;MS. position
 44702 000003AD 00000000                		dd 0		;MS. length
 44703                                  
 44704                                  ;hkn; the foll. was moved from dosmes.asm.
 44705                                  
 44706                                  	;EVEN
 44707 000003B1 90                      align 2				; needed to maintain offsets
 44708                                  
 44709                                  		; DOSDATA:03B2h (MSDOS 6.21)
 44710                                  USERNUM:
 44711 000003B2 0000                     		dw 0		; 24 bit user number
 44712 000003B4 00                      		db 0
 44713                                  ;IF IBM
 44714                                  ;IF IBMCOPYRIGHT
 44715                                  ;OEMNUM:	DB 0		; 8 bit OEM number
 44716                                  ;ELSE
 44717                                  ;OEMNUM:	DB 0FFh		; 8 bit OEM number
 44718                                  ;ENDIF
 44719                                  ;ELSE
 44720 000003B5 FF                      OEMNUM:		DB 0FFh
 44721                                  ;ENDIF
 44722                                  
 44723                                  ;============================================================================
 44724                                  ; MS_DATA.ASM (MSDOS 6.0, 1991)
 44725                                  ;============================================================================
 44726                                  ; 25/04/2019 - Retro DOS 4.0
 44727                                  
 44728                                  ; Retro DOS v4.0 NOTE: (by Erdogan Tan, 25/04/2019)
 44729                                  ; ----------------------------------------------------------
 44730                                  ; This data section which was named as uninitialized data
 44731                                  ; (as overlayed by initialization code) but follows 
 44732                                  ; initialized data section from DOSDATA:03B6h address
 44733                                  ; (in otherwords, the method is different than MSDOS 3.3,
 44734                                  ; and there is not overlaying..)
 44735                                  ; **********************************************************
 44736                                  ; Reference: MSDOS 6.21 kernel DOSDATA section (4970 bytes)
 44737                                  ; follows DOSCODE section in the kernel file (MSDOS.SYS) 
 44738                                  ; (it is located at offset 0BF70h, file offset 0BF70h-3DE0h) 
 44739                                  ; but starts from offset 0 (ORG 0) and ends at offset 1370h.
 44740                                  ; TIMEBUF is at offset 03B6h.
 44741                                  ; **********************************************************	
 44742                                  
 44743                                  ;Break <Uninitialized data overlayed by initialization code>
 44744                                  ;----------------------------------------------------------------------------
 44745                                  ;DOSDATA    SEGMENT WORD PUBLIC 'DATA'
 44746                                  ; Init code overlaps with data area below
 44747                                  
 44748                                  ; 	ORG     0
 44749                                  
 44750                                  MSDAT001S:	; label byte
 44751                                  
 44752                                  ; DOSDATA:03B6h	; MSDOS 6.21 (MSDOS.SYS, file offset 0BF70h-3DE0h+3B6h)
 44753                                  TIMEBUF: ;	times 6 db 0
 44754 000003B6 0000<rep 3h>            	times 3 dw	0		; Time read from clock device
 44755 000003BC 0000                    DEVIOBUF:	dw	0		; Buffer for I/O under file assignment
 44756                                  
 44757                                  ; The following areas are used as temp buffer in EXEC system call
 44758                                  
 44759                                  ; DOSDATA:03BEh
 44760                                  OPENBUF: ;times 64  dw	0
 44761 000003BE 00<rep 80h>             	times	128 db	0		; buffer for name operations
 44762                                  RENBUF:	
 44763 0000043E 00<rep 80h>             	times	128 db	0		; buffer for rename destination
 44764                                  
 44765                                  ; Buffer for search calls
 44766                                  SEARCHBUF:	
 44767 000004BE 00<rep 35h>             	times	53  db	0		; internal search buffer
 44768                                  DUMMYCDS:  ;times 88 db 0
 44769 000004F3 00<rep 58h>             	times	curdirLen db 0
 44770                                  
 44771                                  ; End of contiguous buffer
 44772                                   
 44773                                  ; Temporary directory entry for use by many routines. Device directory
 44774                                  ; entries (bogus) are built here.
 44775                                  
 44776                                  ; DOSDATA:054Bh
 44777                                  
 44778                                  DEVFCB:	; LABEL   BYTE			; Uses NAME1, NAME2, combined
 44779                                  
 44780                                  ; WARNING..  do not alter position of NAME1 relative to DEVFCB
 44781                                  ; without first examining BUILD_DEVICE_ENT. Look carefully at DOS_RENAME
 44782                                  ; as well as it is the only guy who uses NAME2 and DESTSTART.
 44783                                  
 44784                                  NAME1:	
 44785 0000054B 00<rep Ch>                      times 	12 db	0		; File name buffer
 44786                                  NAME2:
 44787 00000557 00<rep Dh>              	times	13 db	0 		;
 44788                                  DESTSTART:
 44789 00000564 0000                    	dw	0			;
 44790                                          ;DB      ((SIZE DIR_ENTRY) - ($ - DEVFCB)) DUP (?)
 44791                                  	;times	5  db	0
 44792 00000566 00<rep 5h>              	times	((dir_entry.size)-($-DEVFCB)) db 0
 44793                                  
 44794                                  ; End Temporary directory entry.
 44795                                  
 44796 0000056B 00                      ATTRIB:	db	0		; storage for file attributes
 44797                                  EXTFCB:	
 44798 0000056C 00                      	db	0		; TRUE => extended FCB in use
 44799                                  SATTRIB:
 44800 0000056D 00                      	db	0		; Storage for search attributes
 44801                                  OPEN_ACCESS:
 44802 0000056E 00                      	db	0		; access of open system call
 44803                                  FOUNDDEL:
 44804 0000056F 00                      	db	0		; true => file was deleted
 44805                                  FOUND_DEV:
 44806 00000570 00                      	db	0		; true => search found a device
 44807                                  FSPLICE:
 44808 00000571 00                      	db	0		; true => do a splice in transpath
 44809                                  FSHARING:
 44810 00000572 00                      	db	0		; TRUE => no redirection
 44811                                  SECCLUSPOS:
 44812 00000573 00                      	db	0		; Position of first sector within cluster
 44813 00000574 00                      TRANS:	db	0		;
 44814 00000575 00                      READOP:	db	0		;
 44815                                  THISDRV:
 44816 00000576 00                      	db	0		;
 44817                                  CLUSFAC:
 44818 00000577 00                      	db	0		;
 44819                                  CLUSSPLIT:
 44820 00000578 00                      	db	0		;
 44821                                  INSMODE:
 44822 00000579 00                      	db	0		; true => insert mode in buffered read
 44823 0000057A 00                      CMETA:	db	0		; count of meta'ed components found
 44824 0000057B 00                      VOLID:	db	0		;
 44825                                  EXIT_TYPE:
 44826 0000057C 00                      	db	0		; type of exit...
 44827                                   
 44828                                  	;EVEN
 44829                                  
 44830 0000057D 90                      align 2
 44831                                  
 44832                                  ; DOSDATA:057Eh
 44833                                  
 44834                                  ; WARNING - the following two items are accessed as a word
 44835                                  
 44836                                  CREATING:
 44837 0000057E 00                      	db	0		; true => creating a file
 44838 0000057F 00                      DELALL:	db	0		; = 0 iff BUGBUG
 44839                                  				; = DIRFREE iff BUGBUG
 44840                                  EXITHOLD:
 44841 00000580 00000000                	dd	0		; Temp location for proc terminate
 44842                                  USER_SP:
 44843 00000584 0000                    	dw	0		; User SP for system call
 44844                                  USER_SS:
 44845 00000586 0000                    	dw	0		; User SS for system call
 44846                                  CONTSTK:
 44847 00000588 0000                    	dw	0		;
 44848                                  THISDPB:
 44849 0000058A 00000000                	dd	0		;
 44850                                  CLUSSAVE:
 44851 0000058E 0000                    	dw	0		;
 44852                                  CLUSSEC:
 44853 00000590 00000000                	dd	0		;>32mb			AC0000
 44854                                  PREREAD:
 44855 00000594 0000                    	dw	0		; 0 means preread; 1 means optional
 44856 00000596 0000                    FATBYT:	dw	0		; Used by ALLOCATE
 44857                                  FATBYTE:
 44858 00000598 0000                    	dw	0		; Used by $SLEAZEFUNC
 44859                                  ; DOSDATA:059Ah
 44860 0000059A 00000000                DEVPT:	dd	0		;
 44861                                  THISSFT:
 44862 0000059E 00000000                	dd	0		; Address of user SFT
 44863                                  THISCDS:
 44864 000005A2 00000000                	dd	0		; Address of current CDS
 44865                                  THISFCB:
 44866 000005A6 00000000                	dd	0		; Address of user FCB
 44867 000005AA FFFF                    SFN:	dw	-1		; SystemFileNumber found for accessfile
 44868 000005AC 0000                    JFN:	dw	0		; JobFileNumber found for accessfile
 44869 000005AE 00000000                PJFN:	dd	0		; PointerJobFileNumber found for accessfile
 44870                                  WFP_START:
 44871 000005B2 0000                    	dw	0		;
 44872                                  REN_WFP:
 44873 000005B4 0000                    	dw	0		;
 44874                                  CURR_DIR_END:
 44875 000005B6 0000                    	dw	0		;
 44876                                  NEXTADD:
 44877 000005B8 0000                    	dw	0		;
 44878                                  LASTPOS:
 44879 000005BA 0000                    	dw	0		;
 44880                                  CLUSNUM:
 44881 000005BC 0000                    	dw	0		;
 44882 000005BE 00000000                DIRSEC:	dd	0		;>32mb			AC0000
 44883                                  DIRSTART:
 44884 000005C2 0000                    	dw	0		;
 44885 000005C4 00000000                SECPOS:	dd	0		;>32mb Position of first sector accessed
 44886 000005C8 00000000                VALSEC:	dd	0		;>32mb Number of valid (previously written)
 44887                                                                  ; sectors
 44888                                  BYTSECPOS:
 44889 000005CC 0000                    	dw	0		; Position of first byte within sector
 44890                                  BYTPOS: ;times	4 db 0		; Byte position in file of access
 44891 000005CE 0000<rep 2h>                    times	2 dw 0
 44892                                  BYTCNT1:
 44893 000005D2 0000                    	dw	0		; No. of bytes in first sector
 44894                                  BYTCNT2:
 44895 000005D4 0000                    	dw	0		; No. of bytes in last sector
 44896 000005D6 0000                    SECCNT:	dw	0		; No. of whole sectors
 44897                                  ; DOSDATA:05D8h
 44898                                  ENTFREE:
 44899 000005D8 0000                    	dw	0		;
 44900                                  ENTLAST:
 44901 000005DA 0000                    	dw	0		;
 44902                                  NXTCLUSNUM:
 44903 000005DC 0000                    	dw	0		;
 44904                                  GROWCNT:
 44905 000005DE 00000000                	dd	0		;
 44906 000005E2 00000000                CURBUF:	dd	0		;
 44907 000005E6 00000000                CONSFT:	dd	0		; SFT of console swapped guy.
 44908 000005EA 0000                    SAVEBX:	dw	0		;
 44909 000005EC 0000                    SAVEDS:	dw	0		;
 44910                                  RESTORE_TMP:
 44911 000005EE 0000                    	dw	0		; return address for restore world
 44912 000005F0 0000                    NSS:	dw	0
 44913 000005F2 0000                    NSP:	dw	0
 44914                                  ; DOSDATA:05F4h
 44915                                  EXTOPEN_FLAG:
 44916 000005F4 0000                    	dw	0		;FT. extended open input flag	;AN000;
 44917                                  EXTOPEN_ON:
 44918 000005F6 00                      	db	0		;FT. extended open conditional flag ;AN000;
 44919                                  EXTOPEN_IO_MODE:
 44920 000005F7 0000                    	dw	0		;FT. extended open io mode	;AN000;
 44921                                  SAVE_DI:
 44922 000005F9 0000                    	dw	0		;FT. extended open saved DI	;AN000;
 44923                                  SAVE_ES:
 44924 000005FB 0000                    	dw	0		;FT. extended open saved ES	;AN000;
 44925                                  SAVE_DX:
 44926 000005FD 0000                    	dw	0		;FT. extended open saved DX	;AN000;
 44927                                  SAVE_CX:
 44928 000005FF 0000                    	dw	0		;FT. extended open saved CX	;AN000;
 44929                                  SAVE_BX:
 44930 00000601 0000                    	dw	0		;FT. extended open saved BX	;AN000;
 44931                                  SAVE_SI:
 44932 00000603 0000                    	dw	0		;FT. extended open saved SI	;AN000;
 44933                                  SAVE_DS:
 44934 00000605 0000                    	dw	0		;FT. extended open saved DS	;AN000;
 44935                                  
 44936                                  ; DOSDATA:0607h
 44937                                  
 44938                                  ; HIGH_SECTOR is a hack to allow passing 32-bit sector numbers where
 44939                                  ; we used to just pass 16 bits in a register. Now High_SECTOR holds
 44940                                  ; the high 16, the low 16 are still in the register.
 44941                                  
 44942                                  HIGH_SECTOR:	
 44943 00000607 0000                    	dw	0		;>32mb higher sector #		;AN000;
 44944                                  	; 25/09/2023
 44945                                  OffsetMagicPatch:
 44946                                  	;dw	MagicPatch	;scottq 8/6/92
 44947                                  	; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44948 00000609 0000                    	dw	0
 44949                                  				;see dos\mpatch.asm
 44950                                  DISK_FULL:
 44951 0000060B 00                      	db	0		;>32mb indicating disk full when 1 ;AN000;
 44952                                  TEMP_VAR:
 44953 0000060C 0000                    	dw	0		; temporary variable for everyone ;AN000;
 44954                                  TEMP_VAR2:
 44955 0000060E 0000                    	dw	0		; temporary variable 2 for everyone ;AN000;
 44956 00000610 00                      DrvErr:	db	0		; used to save drive error	;AN000;
 44957                                  DOS34_FLAG:
 44958 00000611 0000                    	dw	0		; common flag for DOS 3.4	;AN000;
 44959                                  NO_FILTER_PATH:
 44960 00000613 00000000                	dd	0		; pointer to original path	;AN000;
 44961                                  NO_FILTER_DPATH:
 44962 00000617 00000000                	dd	0		; pointer to original path of destination ;AN000;
 44963                                  ; M008
 44964                                  AbsRdWr_SS:
 44965 0000061B 0000                    	dw	0		; INT 25/26 user stack segment
 44966                                  AbsRdWr_SP:
 44967 0000061D 0000                    	dw	0		; INT 25/26 user stack offset
 44968                                  
 44969                                  	; I_am   UU_Callback_flag,BYTE,<0>  ; Unused
 44970                                  ; M008
 44971                                   
 44972                                   
 44973                                  ; make those pushes fast!!!
 44974                                  
 44975                                  ;EVEN
 44976                                  
 44977 0000061F 90                      align 2
 44978                                  
 44979                                  StackSize   equ 180h  ; 384	; gross but effective
 44980                                  
 44981                                  ;StackSize  equ 300h  ;	768	; This is a "trial" change IBM hasn't
 44982                                  ;				; made up their minds about
 44983                                   
 44984                                  ; WARNING!!!! DskStack may grow into AUXSTACK due to interrupt service.
 44985                                  ; This is NO problem as long as AUXSTACK comes immediately before DSKSTACK
 44986                                  
 44987                                  RENAMEDMA:	; LABEL   BYTE	; See DOS_RENAME
 44988                                   
 44989 00000620 00<rep 180h>                    times	StackSize db	0	;
 44990                                  AUXSTACK:			; LABEL   BYTE
 44991                                   
 44992 000007A0 00<rep 180h>                    times	StackSize db 	0	;
 44993                                  DSKSTACK:			; LABEL   BYTE
 44994                                   
 44995 00000920 00<rep 180h>                    times	StackSize db	0	;
 44996                                  IOSTACK:			; LABEL   BYTE
 44997                                  
 44998                                  ; DOSDATA:0AA0h 
 44999                                   
 45000                                  ; patch space for Boca folks.
 45001                                  ; Say What????!!! This does NOT go into the swappable area!
 45002                                  ; NOTE: We include the decl of ibmpatch in ms-dos even though it is not needed.
 45003                                  ;       This allows the REDIRector to work on either IBM or MS-DOS.
 45004                                   
 45005                                  IBMPATCH: ; label byte
 45006                                  PRINTER_FLAG:
 45007 00000AA0 00                      	db	0		; [SYSTEM] status of PRINT utility
 45008                                  VOLCHNG_FLAG:
 45009 00000AA1 00                      	db	0		; [SYSTEM] true if volume label created
 45010                                  VIRTUAL_OPEN:
 45011 00000AA2 00                      	db	0		; [SYSTEM] non-zero if we opened a virtual file
 45012                                   
 45013                                  ; Following 4 variables moved to MSDATA.asm from MSTABLE.asm (P4986)
 45014                                  
 45015                                  FSeek_drive:
 45016 00000AA3 00                      	db	0		;AN000; fastseek drive #
 45017                                  FSeek_firclus:
 45018 00000AA4 0000                    	dw	0		;AN000; fastseek first cluster #
 45019                                  FSeek_logclus:
 45020 00000AA6 0000                    	dw	0		;AN000; fastseek logical cluster #
 45021                                  FSeek_logsave:
 45022 00000AA8 0000                    	dw	0		;AN000; fastseek returned log clus #
 45023                                  
 45024                                  ; DOSDATA:0AAAh
 45025                                  
 45026                                  TEMP_DOSLOC:
 45027 00000AAA FFFF                    	dw	-1		;stores the temporary location of dos
 45028                                  				;at SYSINIT time.
 45029                                  SWAP_END:  ; LABEL   BYTE
 45030                                   
 45031                                  ; THE FOLLOWING BYTE MUST BE HERE, IMMEDIATELY FOLLOWING SWAP_END. IT CANNOT
 45032                                  ; BE USED. If the size of the swap data area is ODD, it will be rounded up
 45033                                  ; to include this byte.
 45034                                   
 45035 00000AAC 00                      	db	0
 45036                                  
 45037                                  ; DOSDATA:0AADh
 45038                                   
 45039                                  ;hkn;	DB	(512+80+32-(SWAP_END-ibmpatch)) DUP (?)
 45040                                  
 45041                                  ;DOSDATA    ENDS
 45042                                  
 45043                                  ;============================================================================
 45044                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
 45045                                  ;============================================================================
 45046                                  ; 27/04/2019 - Retro DOS 4.0
 45047                                  ; 16/07/2018 - Retro DOS 3.0
 45048                                  
 45049                                  ;DOSDATA Segment
 45050                                  
 45051                                  ; DOSDATA:0AADh (MSDOS 6.21, MSDOS.SYS)
 45052                                  
 45053                                  ;
 45054                                  ; upper case table
 45055                                  ; ---------------------------------------------------------------------------
 45056                                  UCASE_TAB:	; label   byte
 45057 00000AAD 8000                    	dw	128
 45058 00000AAF 809A45418E418F80        	db	128,154,069,065,142,065,143,128 
 45059 00000AB7 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 45060 00000ABF 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 45061 00000AC7 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 45062 00000ACF 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 45063 00000AD7 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 45064 00000ADF B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 45065 00000AE7 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 45066 00000AEF C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 45067 00000AF7 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 45068 00000AFF D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 45069 00000B07 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 45070 00000B0F E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 45071 00000B17 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 45072 00000B1F F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 45073 00000B27 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 45074                                  ;
 45075                                  ; file upper case table
 45076                                  ; ---------------------------------------------------------------------------
 45077                                  FILE_UCASE_TAB:	; label  byte
 45078 00000B2F 8000                    	dw	128
 45079 00000B31 809A45418E418F80        	db	128,154,069,065,142,065,143,128
 45080 00000B39 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 45081 00000B41 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 45082 00000B49 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 45083 00000B51 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 45084 00000B59 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 45085 00000B61 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 45086 00000B69 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 45087 00000B71 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 45088 00000B79 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 45089 00000B81 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 45090 00000B89 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 45091 00000B91 E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 45092 00000B99 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 45093 00000BA1 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 45094 00000BA9 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 45095                                  ;
 45096                                  ; file char list
 45097                                  ; ---------------------------------------------------------------------------
 45098                                  FILE_CHAR_TAB:	; label  byte
 45099 00000BB1 1600                    	dw	22				; length
 45100 00000BB3 0100FF                  	db	1,0,255 			; include all
 45101 00000BB6 000020                  	db	0,0,20h 			; exclude 0 - 20h
 45102 00000BB9 020E2E222F5C5B5D3A-     	db	2,14,'."/\[]:|<>+=;,'           ; exclude 14 special
 45102 00000BC2 7C3C3E2B3D3B2C     
 45103                                  	;db	24 dup (?)			; reserved
 45104 00000BC9 00<rep 18h>             	times	24 db 0
 45105                                  
 45106                                  ;
 45107                                  ; collate table
 45108                                  ; ---------------------------------------------------------------------------
 45109                                  COLLATE_TAB:	; label   byte
 45110 00000BE1 0001                    	dw	256
 45111 00000BE3 0001020304050607        	db	0,1,2,3,4,5,6,7
 45112 00000BEB 08090A0B0C0D0E0F        	db	8,9,10,11,12,13,14,15
 45113 00000BF3 1011121314151617        	db	16,17,18,19,20,21,22,23
 45114 00000BFB 18191A1B1C1D1E1F        	db	24,25,26,27,28,29,30,31
 45115 00000C03 2021222324252627        	db	" ","!",'"',"#","$","%","&","'"
 45116 00000C0B 28292A2B2C2D2E2F        	db	"(",")","*","+",",","-",".","/"
 45117 00000C13 3031323334353637        	db	"0","1","2","3","4","5","6","7"
 45118 00000C1B 38393A3B3C3D3E3F        	db	"8","9",":",";","<","=",">","?"
 45119 00000C23 4041424344454647        	db	"@","A","B","C","D","E","F","G"
 45120 00000C2B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 45121 00000C33 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 45122 00000C3B 58595A5B5C5D5E5F        	db	"X","Y","Z","[","\","]","^","_"
 45123 00000C43 6041424344454647        	db	"`","A","B","C","D","E","F","G"
 45124 00000C4B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 45125 00000C53 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 45126 00000C5B 58595A7B7C7D7E7F        	db	"X","Y","Z","{","|","}","~",127
 45127 00000C63 4355454141414143        	db	"C","U","E","A","A","A","A","C"
 45128 00000C6B 4545454949494141        	db	"E","E","E","I","I","I","A","A"
 45129 00000C73 4541414F4F4F5555        	db	"E","A","A","O","O","O","U","U"
 45130 00000C7B 594F552424242424        	db	"Y","O","U","$","$","$","$","$"
 45131 00000C83 41494F554E4EA6A7        	db	"A","I","O","U","N","N",166,167
 45132 00000C8B 3FA9AAABAC212222        	db	"?",169,170,171,172,"!",'"','"'
 45133 00000C93 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 45134 00000C9B B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 45135 00000CA3 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 45136 00000CAB C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 45137 00000CB3 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 45138 00000CBB D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 45139 00000CC3 E053                    	db	224,"S"
 45140 00000CC5 E2E3E4E5E6E7            	db	226,227,228,229,230,231
 45141 00000CCB E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 45142 00000CD3 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 45143 00000CDB F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 45144                                  
 45145                                  ; ------------------------------------------------<MSKK01>----------------------
 45146                                  
 45147                                  ; DOSDATA:0CE3h
 45148                                  
 45149                                  ; 29/04/2019
 45150                                  
 45151                                  ; dbcs is not supported in DOS 3.3
 45152                                  ;		   DBCS_TAB	    CC_DBCS <>
 45153                                  ;
 45154                                  ; DBCS for DOS 4.00			   2/12/KK
 45155                                  
 45156                                  DBCS_TAB:	; label byte		;AN000;  2/12/KK
 45157                                  ; ------------------------------------------------<MSKK01>----------------------
 45158                                  ;ifdef	DBCS
 45159                                  ; ifdef	  JAPAN
 45160                                  ;		dw	6		; <MSKK01>
 45161                                  ;		db	081h,09fh	; <MSKK01>
 45162                                  ;		db	0e0h,0fch	; <MSKK01>
 45163                                  ;		db	0,0		; <MSKK01>
 45164                                  ;
 45165                                  ;		db	0,0,0,0,0,0,0,0,0,0	; <MSKK01>
 45166                                  ; endif
 45167                                  ; ifdef	  TAIWAN
 45168                                  ;		dw	4		; <TAIWAN>
 45169                                  ;		db	081h,0FEh	; <TAIWAN>
 45170                                  ;		db	0,0		; <TAIWAN>
 45171                                  ;
 45172                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 45173                                  ; endif
 45174                                  ; ifdef   KOREA                         ; Keyl
 45175                                  ;               dw      4               ; <KOREA>
 45176                                  ;               db      0A1h,0FEh       ; <KOREA>
 45177                                  ;               db      0,0             ; <KOREA>
 45178                                  ;
 45179                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 45180                                  ;  endif
 45181                                  ;else
 45182 00000CE3 0000                    		dw	0		;AN000;  2/12/KK      max number
 45183                                  		;db	16 dup(0)	;AN000;  2/12/KK
 45184 00000CE5 00<rep 10h>             		times	16 db 0
 45185                                  
 45186                                  ;		dw	6		;  2/12/KK
 45187                                  ;		db	081h,09Fh	;  2/12/KK
 45188                                  ;		db	0E0h,0FCh	;  2/12/KK
 45189                                  ;		db	0,0		;  2/12/KK
 45190                                  ;
 45191                                  ;endif
 45192                                  ; ------------------------------------------------<MSKK01>----------------------
 45193                                  
 45194                                  ; DOSDATA:0CF5h
 45195                                  
 45196                                  ; ---------------------------------------------------------------------------
 45197                                  ;
 45198                                  ;CASE MAPPER ROUTINE FOR 80H-FFH character range, DOS 3.3
 45199                                  ;     ENTRY: AL = Character to map
 45200                                  ;     EXIT:  AL = The converted character
 45201                                  ; Alters no registers except AL and flags.
 45202                                  ; The routine should do nothing to chars below 80H.
 45203                                  ; ---------------------------------------------------------------------------
 45204                                  ; Example:
 45205                                  
 45206                                  MAP_CASE:
 45207                                  ;Procedure MAP_CASE,FAR
 45208                                  
 45209 00000CF5 3C80                    	CMP	AL,80h
 45210 00000CF7 7301                    	JAE	short Map1	;Map no chars below 80H ever
 45211 00000CF9 CB                      	RETF
 45212                                  Map1:
 45213 00000CFA 2C80                    	SUB	AL,80h		;Turn into index value
 45214 00000CFC 1E                      	PUSH	DS
 45215 00000CFD 53                      	PUSH	BX
 45216 00000CFE BB[AF0A]                	MOV	BX,UCASE_TAB+2
 45217                                  FINISH:
 45218 00000D01 0E                      	PUSH	CS		;Move to DS
 45219 00000D02 1F                      	POP	DS
 45220 00000D03 D7                      	XLAT			;Get upper case character
 45221 00000D04 5B                      	POP	BX
 45222 00000D05 1F                      	POP	DS
 45223                                  L_RET:	
 45224 00000D06 CB                      	RETF
 45225                                  
 45226                                  ;EndProc MAP_CASE
 45227                                  
 45228                                  ; ---------------------------------------------------------------------------
 45229                                  
 45230                                  ; The variables for ECS version are moved here for the same data alignments
 45231                                  ; as IBM-DOS and MS-DOS.
 45232                                  
 45233                                  InterChar:
 45234 00000D07 00                      	db	0	; Interim character flag ( 1= interim)  ;AN000;
 45235                                  ;------- NOTE: NEXT TWO BYTES SOMETIMES USED AS A WORD !! -------------------
 45236                                  DUMMY:	; LABEL   WORD
 45237                                  InterCon:  
 45238 00000D08 00                      	db	0	; Console in Interim mode ( 1= interim) ;AN000;
 45239                                  SaveCurFlg:
 45240 00000D09 00                      	db	0	; Print, do not advance cursor flag     ;AN000;
 45241                                  
 45242                                  ; ---------------------------------------------------------------------------
 45243                                  
 45244 00000D0A 0000                    TEMPSEG:  dw	0	;hkn; used to store ds.
 45245                                  redir_patch:
 45246 00000D0C 00                      	  db	0
 45247                                  
 45248                                  ; DOSDATA:0D0Dh
 45249                                  
 45250                                  Mark1:	; label byte
 45251                                  
 45252                                  ;IF2
 45253                                  ;	IF ((OFFSET MARK1) GT (OFFSET MSVERSION) )
 45254                                  ;		%OUT !DATA CORRUPTION!MARK1 OFFSET TOO BIG. RE-ORGANIZE DATA.
 45255                                  ;	ENDIF
 45256                                  ;ENDIF
 45257                                  
 45258 00000D0D 00<rep 5h>              	  times 5 db 0
 45259                                  
 45260                                  ;############################################################################
 45261                                  ;
 45262                                  ; ** HACK FOR DOS 4.0 REDIR **
 45263                                  ; 
 45264                                  ; The redir requires the following:
 45265                                  ;
 45266                                  ;	MSVERS	offset D12H
 45267                                  ;	YRTAB	offset D14H
 45268                                  ; 	MONTAB	offset D1CH
 45269                                  ;
 45270                                  ; WARNING! WARNING!
 45271                                  ; 
 45272                                  ; MARK1 SHOULD NOT BE >= 0D12H. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 45273                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 45274                                  ;
 45275                                  ; CURRENTLY MARK1 = 0D0DH
 45276                                  ;
 45277                                  ;############################################################################
 45278                                  
 45279                                  	;ORG	0D12h
 45280                                  
 45281                                  ; DOSDATA:0D12h (MSDOS 6.21, MSDOS.SYS)
 45282                                  
 45283                                  	;db	6
 45284                                  	;db	20
 45285                                  
 45286                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
 45287                                  MSVERSION:				; MS-DOS version in hex for $GET_VERSION
 45288 00000D12 06                      MSMAJORV: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
 45289 00000D13 16                      MSMINORV: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
 45290                                  
 45291                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
 45292                                  ;
 45293                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
 45294                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
 45295                                  
 45296                                  ; Days in year
 45297                                  
 45298                                  YRTAB:   
 45299 00000D14 C8A6                    	DB	200,166			; Leap year
 45300 00000D16 C8A5                    	DB	200,165
 45301 00000D18 C8A5                    	DB	200,165
 45302 00000D1A C8A5                    	DB	200,165
 45303                                  
 45304                                  ; Days of each month
 45305                                  
 45306                                  MONTAB:        
 45307 00000D1C 1F                      	DB      31                      ; January
 45308                                  february:
 45309 00000D1D 1C                      	DB	28 			; February--reset each 
 45310                                  					; time year changes
 45311 00000D1E 1F                              DB      31                      ; March
 45312 00000D1F 1E                              DB      30                      ; April
 45313 00000D20 1F                              DB      31                      ; May
 45314 00000D21 1E                              DB      30                      ; June
 45315 00000D22 1F                              DB      31                      ; July
 45316 00000D23 1F                              DB      31                      ; August
 45317 00000D24 1E                              DB      30                      ; September
 45318 00000D25 1F                              DB      31                      ; October
 45319 00000D26 1E                              DB      30                      ; November
 45320 00000D27 1F                              DB      31                      ; December
 45321                                  
 45322                                  ;----------------THE FOLL. BLOCK MOVED FROM TABLE SEG IN MS_TABLE.ASM-------
 45323                                  
 45324                                  ; SYS init extended table,   DOS 3.3   F.C. 5/29/86
 45325                                  
 45326                                  SysInitTable:
 45327                                  	;dw	SYSINITVAR
 45328 00000D28 [2600]                  	dw	SYSINITVARS	; pointer to sysinit var
 45329 00000D2A 0000                            dw      0		; segment
 45330 00000D2C [0012]                          dw	COUNTRY_CDPG	; pointer to country tabl
 45331 00000D2E 0000                            dw      0		; segment of pointer
 45332                                  
 45333                                  ; DOS 3.3 F.C. 6/12/86
 45334                                  ; FASTOPEN communications area DOS 3.3   F.C. 5/29/86
 45335                                  
 45336                                  FastTable:				; a better name
 45337                                  FastOpenTable:
 45338 00000D30 0200                    	dw      2                       ; number of entries
 45339 00000D32 [8A12]                  	dw      FastRet			; pointer to ret instr.
 45340 00000D34 0000                    	dw      0                       ; and will be modified by
 45341 00000D36 [8A12]                  	dw      FastRet			; FASTxxx when loaded in
 45342 00000D38 0000                    	dw      0                       
 45343                                  
 45344                                  ; DOS 3.3 F.C. 6/12/86
 45345                                  
 45346                                  FastFlg:				; flags
 45347                                  FastOpenFlg:
 45348 00000D3A 00                      	db	0			; don't change the foll: order  
 45349                                  
 45350                                  ; FastOpen_Ext_Info is used as a temporary storage for saving dirpos,dirsec
 45351                                  ; and clusnum which are filled by DOS 3.nc when calling FastOpen Insert
 45352                                  ; or filled by FastOPen when calling FastOpen Lookup
 45353                                  
 45354                                  FastOpen_Ext_Info: ; label  byte	;dirpos
 45355                                  	;db	SIZE FASTOPEN_EXTENDED_INFO dup(0)
 45356                                  	;times	11 db 0
 45357 00000D3B 00<rep Bh>              	times	FEI.size db 0
 45358                                  
 45359                                  ; Dir_Info_Buff is a dir entry buffer which is filled by FastOPen
 45360                                  ; when calling FastOpen Lookup
 45361                                  
 45362                                  Dir_Info_Buff:	; label  byte
 45363                                  	;db   	SIZE dir_entry dup (0)
 45364                                  	;times	32 db 0
 45365 00000D46 00<rep 20h>             	times	dir_entry.size db 0
 45366                                  
 45367                                  Next_Element_Start:
 45368 00000D66 0000                    	dw	0			; save next element start offset
 45369                                  Del_ExtCluster:
 45370 00000D68 0000                    	dw	0			; for dos_delete                       
 45371                                  
 45372                                  ; The following is a stack and its pointer for interrupt 2F which is used
 45373                                  ; by NLSFUNC. There is no significant use of this stack, we are just trying
 45374                                  ; not to destroy the INT 21 stack saved for the user.
 45375                                  
 45376                                  USER_SP_2F:	; LABEL  WORD
 45377 00000D6A [6C0D]                  	dw    	FAKE_STACK_2F
 45378                                  
 45379                                  Packet_Temp:	; label  word		; temporary packet used by readtime
 45380                                  DOS_TEMP:	; label  word		; temporary word
 45381                                  FAKE_STACK_2F:  
 45382                                  	; dw  14 dup (0)		; 12 register temporary storage
 45383 00000D6C 0000<rep Eh>            	times 14 dw 0
 45384                                  
 45385                                  Hash_Temp: 	;label  word		; temporary word             
 45386                                  	;dw   4 dup (0)			; temporary hash table during config.sys
 45387 00000D88 0000<rep 4h>            	times 4 dw 0
 45388                                              	
 45389                                  SCAN_FLAG:	
 45390 00000D90 00                      	db     0			; flag to indicate key ALT_Q
 45391                                  DATE_FLAG:
 45392 00000D91 0000                    	dw     0                	; flag to update the date
 45393                                  
 45394                                  FETCHI_TAG:	; label  word		; OBSOLETE - no longer used
 45395 00000D93 0000                    	dw     0			; formerly part of IBM's piracy protection
 45396                                  
 45397                                  MSG_EXTERROR:	; label  DWORD   ; for system message addr                                                       
 45398 00000D95 00000000                	dd     0               		; for extended error                   
 45399 00000D99 00000000                	dd     0			; for parser                           
 45400 00000D9D 00000000                	dd     0			; for critical errror                  
 45401 00000DA1 00000000                	dd     0			; for IFS                              
 45402 00000DA5 00000000                	dd     0			; for code reduction                   
 45403                                  
 45404                                  SEQ_SECTOR:	; label  DWORD 		; last sector read                                                     
 45405 00000DA9 FFFFFFFF                	dd     -1                                                        
 45406                                  SC_SECTOR_SIZE:
 45407 00000DAD 0000                    	dw	0			; sector size for SC                 
 45408                                  SC_DRIVE:
 45409 00000DAF 00                      	db	0			; drive # for secondary cache        
 45410                                  CurSC_DRIVE:
 45411 00000DB0 FF                      	db	-1			; current SC drive                   
 45412                                  CurSC_SECTOR:
 45413 00000DB1 00000000                	dd	0			; current SC starting sector         
 45414                                  SC_STATUS:
 45415 00000DB5 0000                    	dw	0			; SC status word                     
 45416                                  SC_FLAG:
 45417 00000DB7 00                      	db	0			; SC flag                            
 45418                                  AbsDskErr:
 45419 00000DB8 0000                    	dw	0			; Storage for Abs dsk read/write err
 45420                                                                                            
 45421                                  NO_NAME_ID:	; label byte                                                           
 45422 00000DBA 4E4F204E414D452020-     	db	'NO NAME    '		; null media id                      
 45422 00000DC3 2020               
 45423                                  
 45424                                  ;hkn; moved from TABLE segment in kstrin.asm
 45425                                  
 45426                                  KISTR001S:	; label	byte		; 2/17/KK
 45427 00000DC5 00                      LOOKSIZ: DB	0			; 0 if byte, NZ if word	2/17/KK
 45428                                  KISTR001E:	; label	byte		; 2/17/KK
 45429                                  
 45430                                  ; the nul device driver used to be part of the code. However, since the 
 45431                                  ; header is in the data, and the entry points are only given as an offset,
 45432                                  ; the strategy and interrupt entry points must also be in the data now.
 45433                                  
 45434                                  ; DOSDATA:0DC6h
 45435                                  
 45436                                  SNULDEV:
 45437                                  ;procedure snuldev,far
 45438                                  	;or	word [es:bx+3],100h
 45439                                  	; 17/12/2022
 45440                                  	;or	byte [es:bx+4],01h
 45441                                  	; 05/01/2024 (Original MSDOS and RetroDOS DATA address compatibility)
 45442                                  	;or	byte [es:bx+SRHEAD.REQSTAT+1],(STDON>>8)
 45443 00000DC6 26814F030001            	or	word [es:bx+SRHEAD.REQSTAT],STDON ; set done bit
 45444                                  INULDEV:
 45445 00000DCC CB                      	retf				; must not be a return!
 45446                                  ;endproc snuldev
 45447                                  
 45448                                  ;M044
 45449                                  ; Second part of save area for saving last para of Windows memory
 45450                                  
 45451                                  WinoldPatch2:
 45452                                  	;db	8 dup (?)	; M044
 45453 00000DCD 00<rep 8h>              	times	8 db 0	
 45454                                  UmbSave2:
 45455                                  	;db	5 dup (?)	; M062
 45456 00000DD5 00<rep 5h>              	times	5 db 0
 45457                                  UmbSaveFlag:
 45458 00000DDA 00                      	db	0		; M062
 45459                                  
 45460                                  ; DOSDATA:0DDBh
 45461                                  
 45462                                  Mark2:	; label byte
 45463                                  
 45464                                  ;IF2
 45465                                  ;	IF ((OFFSET MARK2) GT (OFFSET ERR_TABLE_21) )
 45466                                  ;		%OUT !DATA CORRUPTION!MARK2 OFFSET TOO BIG. RE-ORGANIZE DATA.
 45467                                  ;	ENDIF
 45468                                  ;ENDIF
 45469                                  
 45470                                  ;############################################################################
 45471                                  ;
 45472                                  ; ** HACK FOR DOS 4.0 REDIR **
 45473                                  ; 
 45474                                  ; The redir requires the following:
 45475                                  ;
 45476                                  ;	ERR_TABLE_21	offset DDBH
 45477                                  ;	ERR_TABLE_24	offset E5BH
 45478                                  ; 	ErrMap24	offset EABH
 45479                                  ;
 45480                                  ; WARNING! WARNING!
 45481                                  ;
 45482                                  ; MARK2 SHOULD NOT BE >= 0DDBH. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 45483                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 45484                                  ;
 45485                                  ; CURRENTLY MARK2 = 0DD0H
 45486                                  ;
 45487                                  ;############################################################################
 45488                                  
 45489                                  	;ORG	0DDBh
 45490                                  
 45491                                  ; DOSDATA:0DDBh (MSDOS 6.21, MSDOS.SYS)
 45492                                  
 45493                                  ; ---------------------------------------------------------------------------
 45494                                  ;
 45495                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 21H
 45496                                  ; errors. Each entry is 4 bytes long:
 45497                                  ;
 45498                                  ;       Err#,Class,Action,Locus
 45499                                  ;
 45500                                  ; A value of 0FFh indicates a call specific value (ie. should already
 45501                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 45502                                  ; THE END, IT IS ASSUMES THAT CLASS, ACTION, LOCUS IS ALREADY SET.
 45503                                  ;
 45504                                  ; ---------------------------------------------------------------------------
 45505                                  
 45506                                  ;ErrTab  Macro   err,class,action,locus
 45507                                  ;ifidn <locus>,<0FFh>
 45508                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,0FFh
 45509                                  ;ELSE
 45510                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,errLOC_&locus
 45511                                  ;ENDIF
 45512                                  ;ENDM
 45513                                  
 45514                                  ERR_TABLE_21: ; LABEL   BYTE
 45515 00000DDB 010704FF                    DB  error_invalid_function,       errCLASS_Apperr,    errACT_Abort,    0FFh
 45516 00000DDF 02080302                    DB  error_file_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 45517 00000DE3 03080302                    DB  error_path_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 45518 00000DE7 04010401                    DB  error_too_many_open_files,    errCLASS_OutRes,    errACT_Abort,    errLOC_Unk
 45519 00000DEB 050303FF                    DB  error_access_denied,          errCLASS_Auth,      errACT_User,     0FFh
 45520 00000DEF 06070401                    DB  error_invalid_handle,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 45521 00000DF3 07070505                    DB  error_arena_trashed,          errCLASS_Apperr,    errACT_Panic,    errLOC_Mem
 45522 00000DF7 08010405                    DB  error_not_enough_memory,      errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 45523 00000DFB 09070405                    DB  error_invalid_block,          errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 45524 00000DFF 0A070405                    DB  error_bad_environment,        errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 45525 00000E03 0B090301                    DB  error_bad_format,             errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 45526 00000E07 0C070401                    DB  error_invalid_access,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 45527 00000E0B 0D090401                    DB  error_invalid_data,           errCLASS_BadFmt,    errACT_Abort,    errLOC_Unk
 45528 00000E0F 0F080302                    DB  error_invalid_drive,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 45529 00000E13 10030302                    DB  error_current_directory,      errCLASS_Auth,      errACT_User,     errLOC_Disk
 45530 00000E17 110D0302                    DB  error_not_same_device,        errCLASS_Unk,       errACT_User,     errLOC_Disk
 45531 00000E1B 12080302                    DB  error_no_more_files,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 45532 00000E1F 500C0302                    DB  error_file_exists,            errCLASS_Already,   errACT_User,     errLOC_Disk
 45533 00000E23 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 45534 00000E27 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 45535 00000E2B 540104FF                    DB  error_out_of_structures,      errCLASS_OutRes,    errACT_Abort,    0FFh
 45536 00000E2F 56030301                    DB  error_invalid_password,       errCLASS_Auth,      errACT_User,     errLOC_Unk
 45537 00000E33 52010402                    DB  error_cannot_make,            errCLASS_OutRes,    errACT_Abort,    errLOC_Disk
 45538 00000E37 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 45539 00000E3B 550C0303                    DB  error_already_assigned,       errCLASS_Already,   errACT_User,     errLOC_Net
 45540 00000E3F 57090301                    DB  error_invalid_parameter,      errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 45541 00000E43 530D0401                    DB  error_FAIL_I24,               errCLASS_Unk,       errACT_Abort,    errLOC_Unk
 45542 00000E47 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 45543                                      ; MSDOS 6.0
 45544 00000E4B 26010401                    DB  error_handle_EOF,             errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 45545 00000E4F 27010401                    DB  error_handle_Disk_Full,       errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 45546 00000E53 5A0D0402                    DB  error_sys_comp_not_loaded,    errCLASS_Unk,       errACT_Abort,    errLOC_Disk ;AN001;
 45547 00000E57 FFFFFFFF                    DB  0FFh,                         0FFH,       	  0FFH,       	   0FFh
 45548                                  
 45549                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D2Ah
 45550                                  ;ERR_TABLE_21:	db 1,7,4,0FFh
 45551                                  ;		db 2,8,3,2
 45552                                  ;		db 3,8,3,2
 45553                                  ;		db 4,1,4,1
 45554                                  ;		db 5,3,3,0FFh
 45555                                  ;		db 6,7,4,1
 45556                                  ;		db 7,7,5,5
 45557                                  ;		db 8,1,4,5
 45558                                  ;		db 9,7,4,5
 45559                                  ;		db 0Ah,7,4,5
 45560                                  ;		db 0Bh,9,3,1
 45561                                  ;		db 0Ch,7,4,1
 45562                                  ;		db 0Dh,9,4,1
 45563                                  ;		db 0Fh,8,3,2
 45564                                  ;		db 10h,3,3,2
 45565                                  ;		db 11h,0Dh,3,2
 45566                                  ;		db 12h,8,3,2
 45567                                  ;		db 50h,0Ch,3,2
 45568                                  ;		db 20h,0Ah,2,2
 45569                                  ;		db 21h,0Ah,2,2
 45570                                  ;		db 54h,1,4,0FFh
 45571                                  ;		db 56h,3,3,1
 45572                                  ;		db 52h,1,4,2
 45573                                  ;		db 32h,9,3,3
 45574                                  ;		db 55h,0Ch,3,3
 45575                                  ;		db 57h,9,3,1
 45576                                  ;		db 53h,0Dh,4,1
 45577                                  ;		db 24h,1,4,5
 45578                                  ; MSDOS 6.0 (MSDOS 6.21)
 45579                                  ;		db 26h,1,4,1
 45580                                  ;		db 27h,1,4,1
 45581                                  ;		db 5Ah,0Dh,4,2
 45582                                  ; MSDOS 6.0 & MSDOS 3.3
 45583                                  ;		db 0FFh,0FFh,0FFh,0FFh
 45584                                  
 45585                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 45586                                  
 45587                                  ; ---------------------------------------------------------------------------
 45588                                  ;
 45589                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 24H
 45590                                  ; errors. Each entry is 4 bytes long:
 45591                                  ;
 45592                                  ;       Err#,Class,Action,Locus
 45593                                  ;
 45594                                  ; A Locus value of 0FFh indicates a call specific value (ie. should already
 45595                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 45596                                  ; THE END.
 45597                                  ;
 45598                                  ; ---------------------------------------------------------------------------
 45599                                  
 45600                                  ERR_TABLE_24: ; LABEL   BYTE
 45601 00000E5B 130B0702                    DB  error_write_protect,          errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 45602 00000E5F 14040501                    DB  error_bad_unit,               errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 45603 00000E63 150507FF                    DB  error_not_ready,              errCLASS_HrdFail,   errACT_IntRet,   0FFh
 45604 00000E67 16040501                    DB  error_bad_command,            errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 45605 00000E6B 170B0402                    DB  error_CRC,                    errCLASS_Media,     errACT_Abort,    errLOC_Disk
 45606 00000E6F 18040501                    DB  error_bad_length,             errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 45607 00000E73 19050102                    DB  error_seek,                   errCLASS_HrdFail,   errACT_Retry,    errLOC_Disk
 45608 00000E77 1A0B0702                    DB  error_not_DOS_disk,           errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 45609 00000E7B 1B0B0402                    DB  error_sector_not_found,       errCLASS_Media,     errACT_Abort,    errLOC_Disk
 45610 00000E7F 1C020704                    DB  error_out_of_paper,           errCLASS_TempSit,   errACT_IntRet,   errLOC_SerDev
 45611 00000E83 1D0504FF                    DB  error_write_fault,            errCLASS_HrdFail,   errACT_Abort,    0FFh
 45612 00000E87 1E0504FF                    DB  error_read_fault,             errCLASS_HrdFail,   errACT_Abort,    0FFh
 45613 00000E8B 1F0D04FF                    DB  error_gen_failure,            errCLASS_Unk,       errACT_Abort,    0FFh
 45614 00000E8F 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 45615 00000E93 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 45616 00000E97 220B0702                    DB  error_wrong_disk,             errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 45617 00000E9B 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 45618 00000E9F 23070401                    DB  error_FCB_unavailable,        errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 45619 00000EA3 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 45620 00000EA7 FF0D05FF                    DB	0FFh,                         errCLASS_Unk,       errACT_Panic,    0FFh
 45621                                  
 45622                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D9Eh
 45623                                  ;ERR_TABLE_24:	db 13h,0Bh,7,2
 45624                                  ;		db 14h,4,5,1
 45625                                  ;		db 15h,5,7,0FFh
 45626                                  ;		db 16h,4,5,1
 45627                                  ;		db 17h,0Bh,4,2
 45628                                  ;		db 18h,4,5,1
 45629                                  ;		db 19h,5,1,2
 45630                                  ;		db 1Ah,0Bh,7,2
 45631                                  ;		db 1Bh,0Bh,4,2
 45632                                  ;		db 1Ch,2,7,4
 45633                                  ;		db 1Dh,5,4,0FFh
 45634                                  ;		db 1Eh,5,4,0FFh
 45635                                  ;		db 1Fh,0Dh,4,0FFh
 45636                                  ;		db 20h,0Ah,2,2
 45637                                  ;		db 21h,0Ah,2,2
 45638                                  ;		db 22h,0Bh,7,2
 45639                                  ;		db 32h,9,3,3
 45640                                  ;		db 23h,7,4,1
 45641                                  ;		db 24h,1,4,5
 45642                                  ;		db 0FFh,0Dh,5,0FFh
 45643                                  
 45644                                  ; DOSDATA:0EABh (MSDOS 6.21, MSDOS.SYS)
 45645                                  
 45646                                  ; ---------------------------------------------------------------------------
 45647                                  ;
 45648                                  ; We need to map old int 24 errors and device driver errors into the new set
 45649                                  ; of errors. The following table is indexed by the new errors
 45650                                  ;
 45651                                  ; ---------------------------------------------------------------------------
 45652                                  
 45653                                  ;Public  ErrMap24
 45654                                  ErrMap24: ; Label   BYTE
 45655 00000EAB 13                          DB  error_write_protect	; 0
 45656 00000EAC 14                          DB  error_bad_unit		; 1
 45657 00000EAD 15                          DB  error_not_ready		; 2
 45658 00000EAE 16                          DB  error_bad_command	; 3
 45659 00000EAF 17                          DB  error_CRC		; 4
 45660 00000EB0 18                          DB  error_bad_length	; 5
 45661 00000EB1 19                          DB  error_seek		; 6
 45662 00000EB2 1A                          DB  error_not_DOS_disk	; 7
 45663 00000EB3 1B                          DB  error_sector_not_found	; 8
 45664 00000EB4 1C                          DB  error_out_of_paper	; 9
 45665 00000EB5 1D                          DB  error_write_fault	; A
 45666 00000EB6 1E                          DB  error_read_fault	; B
 45667 00000EB7 1F                          DB  error_gen_failure	; C
 45668 00000EB8 1F                          DB  error_gen_failure	; D  RESERVED
 45669 00000EB9 1F                          DB  error_gen_failure	; E  RESERVED
 45670 00000EBA 22                          DB  error_wrong_disk	; F
 45671                                  
 45672                                  ;ErrMap24: db 13h, 14h, 15h, 16h, 17h, 18h, 19h, 1Ah
 45673                                  ;	   db 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 1Fh, 1Fh, 22h
 45674                                  	
 45675                                  ErrMap24End: ; LABEL   BYTE
 45676                                  
 45677                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 45678                                  
 45679                                  ; ---------------------------------------------------------------------------
 45680                                  
 45681                                  ; 27/04/2019 - Retro DOS v4.0
 45682                                  
 45683                                  FIRST_BUFF_ADDR:
 45684 00000EBB 0000                    	dw	0			; first buffer address               
 45685                                  SPECIAL_VERSION:
 45686 00000EBD 0000                    	dw	0			;AN006; used by INT 2F 47H
 45687                                  FAKE_COUNT:
 45688 00000EBF 00<rep FFh>             	times 255 db 0			;AN008; fake version count
 45689                                  OLD_FIRSTCLUS:
 45690 00000FBE 0000                    	dw	0			;AN011; save old first cluster for fastopen
 45691                                  
 45692                                  ; ---------------------------------------------------------------------------
 45693                                  
 45694                                  ;smr; moved from TABLE segment in exec.asm
 45695                                  
 45696 00000FC0 0000                    exec_init_SP: dw 0
 45697 00000FC2 0000                    exec_init_SS: dw 0
 45698 00000FC4 0000                    exec_init_IP: dw 0
 45699 00000FC6 0000                    exec_init_CS: dw 0
 45700                                  
 45701                                  exec_signature:
 45702 00000FC8 0000                    	dw	0	; must contain 4D5A (yay zibo!)
 45703                                  exec_len_mod_512:
 45704 00000FCA 0000                    	dw	0	; low 9 bits of length
 45705                                  exec_pages:
 45706 00000FCC 0000                    	dw	0	; number of 512b pages in file
 45707                                  exec_rle_count:
 45708 00000FCE 0000                    	dw	0	; count of reloc entries
 45709                                  exec_par_dir:
 45710 00000FD0 0000                    	dw	0	; number of paragraphs before image
 45711                                  exec_min_BSS:
 45712 00000FD2 0000                    	dw	0	; minimum number of para of BSS
 45713                                  exec_max_BSS:
 45714 00000FD4 0000                    	dw	0	; max number of para of BSS
 45715                                  exec_SS:
 45716 00000FD6 0000                    	dw	0	; stack of image
 45717                                  exec_SP:
 45718 00000FD8 0000                    	dw	0	; SP of image
 45719                                  exec_chksum:
 45720 00000FDA 0000                    	dw	0	; checksum of file (ignored)
 45721                                  exec_IP:
 45722 00000FDC 0000                    	dw	0	; IP of entry
 45723                                  exec_CS:
 45724 00000FDE 0000                    	dw	0	; CS of entry
 45725                                  exec_rle_table:
 45726 00000FE0 0000                    	dw	0	; byte offset of reloc table
 45727                                  
 45728                                  exec_header_len	equ $-exec_signature			;PBUGBUG
 45729                                  
 45730                                  ;smr; eom
 45731                                  
 45732                                  ; ---------------------------------------------------------------------------
 45733                                  
 45734                                  ;SR;
 45735                                  ; WIN386 instance table for DOS
 45736                                  
 45737                                  Win386_Info:
 45738 00000FE2 0300                    	db	3, 0
 45739 00000FE4 000000000000000000-     	dd	0, 0, 0
 45739 00000FED 000000             
 45740 00000FF0 [F40F]0000              	dw	Instance_Table, 0
 45741                                  
 45742                                  Instance_Table:
 45743 00000FF4 [2200]00000200          	dw	CONTPOS, 0, 2
 45744 00000FFA [3200]00000400          	dw	BCON, 0, 4
 45745 00001000 [F901]00000601          	dw	CARPOS, 0, 106h
 45746 00001006 [0003]00000100          	dw	CHARCO, 0, 1
 45747 0000100C [C00F]00002200          	dw	exec_init_SP, 0, 34	; M074
 45748 00001012 [8900]00000100          	dw	UMBFLAG,0,1		; M019
 45749 00001018 [8C00]00000200          	dw	UMB_HEAD,0,2		; M019
 45750 0000101E 00000000                	dw	0, 0
 45751                                  
 45752                                  ; M001; SR;
 45753                                  ; M001; On DOSMGR call ( cx == 0 ), we need to return a table of offsets of 
 45754                                  ; M001; some DOS variables. Note that the only really important variable in 
 45755                                  ; M001; this is User_Id. The other variables are needed only to patch stuff 
 45756                                  ; M001; which does not need to be done in DOS 5.0. 
 45757                                  
 45758                                  ; 29/12/2022
 45759                                  ; (MSDOS 6.21 MSDOS.SYS DOSDATA:1022h)
 45760                                  
 45761                                  Win386_DOSVars:
 45762 00001022 05                      	db	5	;Major version 5 ; M001
 45763 00001023 00                      	db	0	;Minor version 0 ; M001
 45764 00001024 [EC05]                  	dw	SAVEDS	; M001
 45765 00001026 [EA05]                  	dw	SAVEBX	; M001
 45766 00001028 [2103]                  	dw	INDOS	; M001
 45767 0000102A [3E03]                  	dw	USER_ID	; M001
 45768 0000102C [1503]                  	dw	CritPatch ; M001
 45769 0000102E [8C00]                  	dw	UMB_HEAD ; M012
 45770                                  
 45771                                  ;SR;
 45772                                  ; Flag to indicate whether WIN386 is running or not
 45773                                  
 45774 00001030 00                      IsWin386: db	0
 45775                                  
 45776                                  ;M018
 45777                                  ; This variable contains the path to the VxD device needed for Win386
 45778                                  
 45779 00001031 633A5C77696E613230-     VxDpath:  db	'c:\wina20.386',0	;M018
 45779 0000103A 2E33383600         
 45780                                  
 45781                                  ;End WIN386 support
 45782                                  
 45783                                  ; ---------------------------------------------------------------------------
 45784                                  
 45785                                  ;SR;
 45786                                  ; These variables have been added for the special lie support for device
 45787                                  ;drivers.
 45788                                  ;
 45789                                  
 45790                                  DriverLoad:	
 45791 0000103F 01                      	db	1	;initialized to do special handling
 45792                                  BiosDataPtr:
 45793 00001040 00000000                	dd	0
 45794                                  
 45795                                  ; 29/12/2022 - Retro DOS v4.1
 45796                                  %if 0
 45797                                  
 45798                                  ; 27/04/2019 - Retro DOS v4.0
 45799                                  ; 04/11/2022
 45800                                  ; DOSDATA:1044h (MSDOS 6.21 & MSDOS 5.0, MSDOS.SYS)
 45801                                  
 45802                                  ;------------------------------------------------------------------------
 45803                                  ; Patch for Sidekick
 45804                                  ;
 45805                                  ; A documented method for finding the offset of the Errormode flag in the 
 45806                                  ; dos swappable data area if for the app to scan in the dos segment (data) 
 45807                                  ; for the following sequence of instructions.
 45808                                  ;
 45809                                  ; Ref: Part C, Article 11, pg 356 of MSDOS Encyclopedia
 45810                                  ;
 45811                                  ; The Offset of Errormode flag is 0320h
 45812                                  ;
 45813                                  ;------------------------------------------------------------------------
 45814                                  
 45815                                  	db	036h, 0F6h, 06h, 020h, 03h, 0FFh ; test ss:[errormode], -1
 45816                                  	db	075h, 0Ch			 ; jnz  NearLabel
 45817                                  	db	036h, 0FFh, 036h, 058h, 03h	 ; push ss:[NearWord]
 45818                                  	db	0CDh, 028h			 ; int  28h
 45819                                  
 45820                                  ;--------------------------------------------------------------------------
 45821                                  ; Patch for PortOfEntry - M036
 45822                                  ;
 45823                                  ; PortOfEntry by Sector Technology uses an un documented way of determining
 45824                                  ; the offset of Errormode flag. The following patch is to support them in 
 45825                                  ; DOS 5.0. The corresponding code is actually in msdisp.asm
 45826                                  ;
 45827                                  ;---------------------------------------------------------------------------
 45828                                  
 45829                                  	db 	080h, 03Eh, 020h, 03h, 00h 	 ; cmp 	[errormode], 0
 45830                                  	db	075h, 037h			 ; jnz	NearLabel
 45831                                  	db 	0BCh, 0A0h, 0Ah		  	 ; mov	sp, dosdata:iostack
 45832                                  
 45833                                  %endif ; 29/12/2022
 45834                                  
 45835                                  ; DOSDATA:105Dh (MSDOS 6.21, MSDOS.SYS)
 45836                                  
 45837                                  ;--------------------------------------------------------------------------
 45838                                  
 45839                                  ;*** New FCB Implementation
 45840                                  ; This variable is used as a cache in the new FCB implementation to remember
 45841                                  ;the address of a local SFT that can be recycled for a regenerate operation
 45842                                  
 45843 00001044 00000000                LocalSFT: dd	0		; 0 to indicate invalid pointer
 45844                                  
 45845                                  ;DOSDATA ENDS
 45846                                  
 45847                                  ;============================================================================
 45848                                  ; LMSTUB.ASM (MSDOS 6.0, 1991)
 45849                                  ;============================================================================
 45850                                  ; 27/04/2019 - Retro DOS 4.0
 45851                                  
 45852                                  ;DOSDATA  SEGMENT WORD PUBLIC 'DATA'
 45853                                  
 45854                                  ;---------------------------------------------------------------------------
 45855                                  ;	Low Memory Stub for DOS when DOS runs in HMA
 45856                                  ;----------------------------------------------------------------------------
 45857                                  	
 45858                                  	;db	90h
 45859                                  
 45860                                  	;EVEN
 45861                                  align 2
 45862                                  
 45863                                  ; DOSDATA:1062h (MSDOS 6.21, MSDOS.SYS)
 45864                                  
 45865                                  DOSINTTABLE:	; LABEL	DWORD
 45866                                  
 45867                                  	;DW	OFFSET DOSCODE:DIVOV 		, 0
 45868                                  	;DW	OFFSET DOSCODE:QUIT 		, 0
 45869                                  	;DW	OFFSET DOSCODE:COMMAND		, 0
 45870                                  	;DW	OFFSET DOSCODE:ABSDRD		, 0
 45871                                  	;DW	OFFSET DOSCODE:ABSDWRT		, 0
 45872                                  	;DW	OFFSET DOSCODE:Stay_resident	, 0
 45873                                  	;DW	OFFSET DOSCODE:INT2F		, 0
 45874                                  	;DW	OFFSET DOSCODE:CALL_ENTRY	, 0
 45875                                  	;DW	OFFSET DOSCODE:IRETT		, 0
 45876                                  	
 45877 00001048 [DE51]0000              	dw	DIVOV 		, 0  ; DOSINTTABLE+0
 45878 0000104C [DC02]0000              	dw	QUIT 		, 0  ; DOSINTTABLE+4	
 45879 00001050 [0803]0000              	dw	COMMAND		, 0  ; DOSINTTABLE+8
 45880 00001054 [2D05]0000              	dw	ABSDRD		, 0  ; DOSINTTABLE+12
 45881 00001058 [B405]0000              	dw	ABSDWRT		, 0  ; DOSINTTABLE+16
 45882 0000105C [1861]0000              	dw	STAY_RESIDENT	, 0  ; DOSINTTABLE+20
 45883 00001060 [0307]0000              	dw	INT2F		, 0  ; DOSINTTABLE+24
 45884 00001064 [E302]0000              	dw	CALL_ENTRY	, 0  ; DOSINTTABLE+28
 45885 00001068 [E202]0000              	dw	IRETT		, 0  ; DOSINTTABLE+32
 45886                                  
 45887 0000106C 0000                    SS_Save: dw	0		; save user's stack segment
 45888 0000106E 0000                    SP_Save: dw	0		; save user's stack offset
 45889                                  
 45890                                  ;-------------------------------------------------------------------------
 45891                                  ;
 45892                                  ; LOW MEM STUB:
 45893                                  ;
 45894                                  ; The low mem stub contains the entry points into DOS for all interrupts 
 45895                                  ; handled by DOS. This stub is installed if the user specifies that the 
 45896                                  ; DOS load in HIMEM. Each entry point does this.
 45897                                  ;
 45898                                  ; 	1. if jmp to 8 has been patched out
 45899                                  ;	   2. if A20 OFF
 45900                                  ;	      3. Enable A20
 45901                                  ;	   4. else 
 45902                                  ;	      5. just go to dos entry
 45903                                  ;	   6. endif
 45904                                  ;	7. else
 45905                                  ;	   8. just go to dos entry
 45906                                  ;	9. endif
 45907                                  ;
 45908                                  ;--------------------------------------------------------------------------
 45909                                  
 45910                                  ; 27/04/2019 - Retro DOS v4.0
 45911                                  
 45912                                  ; DOSDATA:108Ah (MSDOS 6.21, MSDOS.SYS)
 45913                                  
 45914                                  ;--------------------------------------------------------------------------
 45915                                  ;
 45916                                  ; DIVIDE BY 0 handler
 45917                                  ;
 45918                                  ;--------------------------------------------------------------------------
 45919                                  
 45920                                  ldivov:
 45921                                  	; The following jump, skipping the XMS calls will be patched to 
 45922                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45923                                  	; needed because the stub is installed even before the XMS driver
 45924                                  	; is loaded if the user specifies dos=high in the config.sys
 45925                                  i0patch:
 45926 00001070 EB03                    	jmp	short divov_cont	
 45927                                  
 45928 00001072 E8D800                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45929                                  divov_cont:
 45930 00001075 2EFF2E[4810]            	jmp	far [cs:DOSINTTABLE]	; jmp to DOS
 45931                                  
 45932                                  ;------------------------------------------------------------------------
 45933                                  ;
 45934                                  ; INT 20 Handler
 45935                                  ;
 45936                                  ; Here we do not have to set up the stack to return here as the abort call
 45937                                  ; will return to the address after the int 21 ah=4b call. This would be the
 45938                                  ; common exit point if A20 had been OFF (for TOGGLE DOS) and the A20 line
 45939                                  ; will be restored then.
 45940                                  ;
 45941                                  ;-------------------------------------------------------------------------
 45942                                  
 45943                                  lquit:
 45944                                  	; The following jump, skipping the XMS calls will be patched to 
 45945                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45946                                  	; needed because the stub is installed even before the XMS driver
 45947                                  	; is loaded if the user specifies dos=high in the config.sys
 45948                                  i20patch:
 45949 0000107A EB03                    	jmp	short quit_cont	
 45950                                  
 45951 0000107C E8CE00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45952                                  quit_cont:
 45953 0000107F 2EFF2E[4C10]            	jmp	far [cs:DOSINTTABLE+4]	; jump to DOS
 45954                                  
 45955                                  ;--------------------------------------------------------------------------
 45956                                  ;
 45957                                  ; INT 21 Handler
 45958                                  ;
 45959                                  ;--------------------------------------------------------------------------
 45960                                  
 45961                                  lcommand:
 45962                                  	; The following jump, skipping the XMS calls will be patched to 
 45963                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45964                                  	; needed because the stub is installed even before the XMS driver
 45965                                  	; is loaded if the user specifies dos=high in the config.sys
 45966                                  i21patch:
 45967 00001084 EB03                    	jmp	short command_cont	
 45968                                  
 45969 00001086 E8C400                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45970                                  command_cont:
 45971 00001089 2EFF2E[5010]            	jmp	far [cs:DOSINTTABLE+8]	; jmp to DOS
 45972                                  
 45973                                  ;------------------------------------------------------------------------
 45974                                  ;
 45975                                  ; INT 25 
 45976                                  ;
 45977                                  ;----------------------------------------------------------------------------
 45978                                  
 45979                                  labsdrd:
 45980                                  	; The following jump, skipping the XMS calls will be patched to 
 45981                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45982                                  	; needed because the stub is installed even before the XMS driver
 45983                                  	; is loaded if the user specifies dos=high in the config.sys
 45984                                  i25patch:
 45985 0000108E EB03                    	jmp	short absdrd_cont	
 45986                                  
 45987 00001090 E8BA00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45988                                  absdrd_cont:
 45989 00001093 2EFF2E[5410]            	jmp	far [cs:DOSINTTABLE+12]	; jmp to DOS
 45990                                  
 45991                                  ;-------------------------------------------------------------------------
 45992                                  ;
 45993                                  ; INT 26
 45994                                  ;
 45995                                  ;-----------------------------------------------------------------------
 45996                                  
 45997                                  labsdwrt:
 45998                                  	; The following jump, skipping the XMS calls will be patched to 
 45999                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 46000                                  	; needed because the stub is installed even before the XMS driver
 46001                                  	; is loaded if the user specifies dos=high in the config.sys
 46002                                  i26patch:
 46003 00001098 EB03                    	jmp	short absdwrt_cont	
 46004                                  
 46005 0000109A E8B000                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 46006                                  absdwrt_cont:
 46007 0000109D 2EFF2E[5810]            	jmp	far [cs:DOSINTTABLE+16]	; jmp to DOS
 46008                                  
 46009                                  ;------------------------------------------------------------------------
 46010                                  ;
 46011                                  ; INT 27
 46012                                  ;
 46013                                  ;-----------------------------------------------------------------------
 46014                                  
 46015                                  lstay_resident:
 46016                                  	; The following jump, skipping the XMS calls will be patched to 
 46017                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 46018                                  	; needed because the stub is installed even before the XMS driver
 46019                                  	; is loaded if the user specifies dos=high in the config.sys
 46020                                  i27patch:
 46021 000010A2 EB03                    	jmp	short sr_cont	
 46022                                  
 46023 000010A4 E8A600                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 46024                                  sr_cont:
 46025 000010A7 2EFF2E[5C10]            	jmp	far [cs:DOSINTTABLE+20]	; jmp to DOS
 46026                                  
 46027                                  ;-----------------------------------------------------------------------------
 46028                                  ;
 46029                                  ; INT 2f
 46030                                  ;
 46031                                  ;-------------------------------------------------------------------------
 46032                                  
 46033                                  lint2f:
 46034                                  	; The following jump, skipping the XMS calls will be patched to 
 46035                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 46036                                  	; needed because the stub is installed even before the XMS driver
 46037                                  	; is loaded if the user specifies dos=high in the config.sys
 46038                                  i2fpatch:
 46039 000010AC EB03                    	jmp	short int2f_cont	
 46040                                  
 46041 000010AE E89C00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 46042                                  int2f_cont:
 46043 000010B1 2EFF2E[6010]            	jmp	far [cs:DOSINTTABLE+24]	; jmp to DOS
 46044                                  
 46045                                  ;-----------------------------------------------------------------------------
 46046                                  ;
 46047                                  ; CPM entry
 46048                                  ;
 46049                                  ;------------------------------------------------------------------------
 46050                                  
 46051                                  lcall_entry:
 46052                                  	; The following jump, skipping the XMS calls will be patched to 
 46053                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 46054                                  	; needed because the stub is installed even before the XMS driver
 46055                                  	; is loaded if the user specifies dos=high in the config.sys
 46056                                  cpmpatch:
 46057 000010B6 EB03                    	jmp	short callentry_cont	
 46058                                  
 46059 000010B8 E89200                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 46060                                  callentry_cont:
 46061 000010BB 2EFF2E[6410]            	jmp	far [cs:DOSINTTABLE+28]	; jmp to DOS
 46062                                  
 46063                                  ;--------------------------------------------------------------------------
 46064                                  
 46065                                  lirett:
 46066 000010C0 CF                      	iret
 46067                                  
 46068                                  ;---------------------------------------------------------------------------
 46069                                  ;
 46070                                  ; LowIntXX:
 46071                                  ;
 46072                                  ; Interrupts from DOS that pass control to a user program must be done from
 46073                                  ; low memory, as the user program may change the state of the A20 line or
 46074                                  ; they may require that the A20 line be OFF. The following piece of code is
 46075                                  ; far call'd from the following places in DOS:
 46076                                  ;
 46077                                  ;	1. msctrlc.asm where dos issues an int 23h (ctrlc)
 46078                                  ;	2. msctrlc.asm where dos issues an int 24h (critical error)
 46079                                  ;	3. msctrlc.asm where dos issues an int 28h (idle int)
 46080                                  ;
 46081                                  ; The int 23 and int 24 handlers may decide to do a far return instead of an
 46082                                  ; IRET ane leave the flags on the stack. Therefore we save the return address
 46083                                  ; before doing the ints and then do a far junp back into DOS.
 46084                                  ;
 46085                                  ;---------------------------------------------------------------------------
 46086                                  
 46087 000010C1 00000000                DosRetAddr23:	dd	0
 46088 000010C5 00000000                DosRetAddr24:	dd	0
 46089 000010C9 00000000                DosRetAddr28:	dd	0
 46090                                  
 46091                                  	; Execute int 23h from low memory
 46092                                  LowInt23:
 46093                                  					; save the return address that is on
 46094                                  					; the stack
 46095 000010CD 2E8F06[C110]            	pop	word [cs:DosRetAddr23]
 46096 000010D2 2E8F06[C310]            	pop	word [cs:DosRetAddr23+2]
 46097                                  
 46098 000010D7 CD23                    	int	23h			; ctrl C
 46099                                  					; turn on A20 it has been turned OFF
 46100                                  					; by int 28/23/24 handler.
 46101                                  
 46102 000010D9 E87100                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF 
 46103                                  
 46104 000010DC 2EFF2E[C110]            	jmp	far [cs:DosRetAddr23]	; jump back to DOS
 46105                                  
 46106                                  
 46107                                  	; Execute int 24h from low memory
 46108                                  LowInt24:
 46109                                  					; save the return address that is on
 46110                                  					; the stack
 46111 000010E1 2E8F06[C510]            	pop	word [cs:DosRetAddr24]
 46112 000010E6 2E8F06[C710]            	pop	word [cs:DosRetAddr24+2]
 46113                                  
 46114 000010EB CD24                    	int	24h			; crit error
 46115                                  					; turn on A20 it has been turned OFF
 46116                                  					; by int 28/23/24 handler.
 46117                                  
 46118 000010ED E85D00                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF	
 46119                                  
 46120 000010F0 2EFF2E[C510]            	jmp	far [cs:DosRetAddr24]	; jump back to DOS
 46121                                  
 46122                                  
 46123                                   
 46124                                  	; Execute int 28h from low memory
 46125                                  LowInt28:
 46126 000010F5 CD28                    	int	28h			; idle int
 46127                                  					; turn on A20 it has been turned OFF
 46128                                  					; by int 28/23/24 handler.
 46129                                  
 46130 000010F7 E85300                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF	
 46131                                  
 46132 000010FA CB                      	retf
 46133                                  
 46134                                  ; DOSDATA:1115h (MSDOS 6.21, MSDOS.SYS)
 46135                                  
 46136                                  ;-------------------------------------------------------------------------
 46137                                  ;
 46138                                  ; int 21 ah=4b (exec) call will jump to the following label before xferring
 46139                                  ; control to the exec'd program. We turn off A20 inorder to allow programs
 46140                                  ; that have been packed by the faulty exepack utility to unpack correctly.
 46141                                  ; This is so because exepac'd programs rely on address wrap.
 46142                                  ;
 46143                                  ;------------------------------------------------------------------------- 
 46144                                  
 46145                                  disa20_xfer:
 46146 000010FB E83F00                  	call	XMMDisableA20		; disable A20
 46147                                  
 46148                                  	; Look at msproc.asm at label exec_go for understanding the following:
 46149                                  
 46150                                  	; DS:SI points to entry point
 46151                                  	; AX:DI points to initial stack
 46152                                  	; DX has PDB pointer
 46153                                  	; BX has initial AX value
 46154                                  
 46155 000010FE FA                      	cli
 46156 000010FF 2EC606[2103]00          	mov	byte [cs:INDOS],0	; SS Override
 46157                                  
 46158 00001105 8ED0                    	mov	SS,AX			; set up user's stack
 46159 00001107 89FC                    	mov	SP,DI			; and SP
 46160 00001109 FB                      	sti
 46161                                  
 46162 0000110A 1E                      	push	DS			; fake long call to entry
 46163 0000110B 56                      	push	SI
 46164 0000110C 8EC2                    	mov	ES,DX			; set up proper seg registers
 46165 0000110E 8EDA                    	mov	DS,DX
 46166 00001110 89D8                    	mov	AX,BX			; set up proper AX
 46167 00001112 CB                      	retf
 46168                                  
 46169                                  ;-------------------------------------------------------------------------
 46170                                  ;
 46171                                  ; M003:
 46172                                  ;
 46173                                  ; If an int 21 ah=25 call is made immediately after an exec call, DOS will
 46174                                  ; come here, turn A20 OFF restore user stack and registers before returning 
 46175                                  ; to user. This is done in dos\msdisp.asm. This has been done to support 
 46176                                  ; programs compiled with MS PASCAL 3.2. See under TAG M003 in DOSSYM.INC for 
 46177                                  ; more info.	
 46178                                  ;
 46179                                  ; Also at this point DS is DOSDATA. So we can assume DS DOSDATA. Note that 
 46180                                  ; SS is also DOS stack. It is important that we do the XMS call on DOS's 
 46181                                  ; stack to avoid additional stack overhead for the user.
 46182                                  ;
 46183                                  ; -------------------------------------------------------------------------
 46184                                  
 46185                                  disa20_iret:
 46186 00001113 E82700                  	call	XMMDisableA20
 46187 00001116 FE0E[2103]              	dec	byte [INDOS]
 46188 0000111A 8E16[8605]              	mov	SS,[USER_SS]		; restore user stack
 46189 0000111E 8B26[8405]              	mov	SP,[USER_SP]
 46190 00001122 89E5                    	mov	BP,SP
 46191                                  	;mov	[BP+user_env.user_AX],AL
 46192 00001124 884600                  	mov	[bp],al
 46193 00001127 A1[F205]                	mov	AX,[NSP]
 46194 0000112A A3[8405]                	mov	[USER_SP],AX
 46195 0000112D A1[F005]                	mov	AX,[NSS]
 46196 00001130 A3[8605]                	mov	[USER_SS],AX
 46197                                  
 46198 00001133 58                      	pop	AX			; restore user regs
 46199 00001134 5B                      	pop	BX
 46200 00001135 59                      	pop	CX
 46201 00001136 5A                      	pop	DX
 46202 00001137 5E                      	pop	SI
 46203 00001138 5F                      	pop	DI
 46204 00001139 5D                      	pop	BP
 46205 0000113A 1F                      	pop	DS
 46206 0000113B 07                      	pop	ES
 46207 0000113C CF                      	iret
 46208                                  
 46209                                  ;**************************************************************************
 46210                                  ;***	XMMDisableA20 - switch 20th address line			      
 46211                                  ;									      
 46212                                  ;	This routine is used to disable the 20th address line in 	      
 46213                                  ;	the system using XMM calls.					      
 46214                                  ;									      
 46215                                  ;	ENTRY	none		;ds = _DATA				      
 46216                                  ;	EXIT	A20 line disabled					      
 46217                                  ;	USES	NOTHING					      
 46218                                  ;									      
 46219                                  ;**************************************************************************
 46220                                  
 46221                                  XMMDisableA20:
 46222 0000113D 53                      	push	bx
 46223 0000113E 50                      	push	ax
 46224                                  	;mov	ah,XMM_LOCAL_DISABLE_A20
 46225 0000113F B406                    	mov	ah,6
 46226 00001141 2EFF1E[4911]            	call	far [cs:XMMcontrol]
 46227 00001146 58                      	pop	ax
 46228 00001147 5B                      	pop	bx
 46229 00001148 C3                      	retn
 46230                                  
 46231                                  ; The entry point in the BIOS XMS driver is defined here.
 46232                                  
 46233                                  XMMcontrol:
 46234 00001149 00000000                	dd	0
 46235                                  
 46236                                  ;--------------------------------------------------------------------------
 46237                                  ;
 46238                                  ;***	EnsureA20ON - Ensures that A20 is ON
 46239                                  ;									      
 46240                                  ;	This routine is used to query the A20 state in		 	      
 46241                                  ;	the system using XMM calls.					      
 46242                                  ;									      
 46243                                  ;	ENTRY: none		
 46244                                  ;
 46245                                  ;	EXIT : A20 will be ON
 46246                                  ;		
 46247                                  ; 	USES : NONE								      
 46248                                  ;									      
 46249                                  ;--------------------------------------------------------------------------
 46250                                  
 46251                                  ; 19/09/2023
 46252                                  ;LowMemory:	; label dword		; Set equal to 0000:0080
 46253                                  ;	dw	00080h
 46254                                  ;	dw	00000h
 46255                                  ;
 46256                                  ;HighMemory:	; label dword
 46257                                  ;	dw	00090h			; Set equal to FFFF:0090
 46258                                  ;	dw	0FFFFh
 46259                                  
 46260                                  EnsureA20ON:
 46261 0000114D 9C                      	pushf
 46262 0000114E 1E                      	push    ds
 46263 0000114F 06                      	push	es
 46264 00001150 51                      	push	cx
 46265 00001151 56                      	push	si
 46266 00001152 57                      	push	di
 46267                                  
 46268                                  	; 19/09/2023
 46269                                  	;lds	si,[cs:LowMemory]	; Compare the 4 words at 0000:0080
 46270                                  	;les	di,[cs:HighMemory]	; with the 4 at FFFF:0090
 46271                                  
 46272 00001153 31FF                    	xor	di,di
 46273 00001155 8EC7                    	mov	es,di
 46274 00001157 4F                      	dec	di
 46275 00001158 BE9000                  	mov	si,90h	; 0FFFFh:0090h	; HighMemory
 46276 0000115B 8EDF                    	mov	ds,di
 46277 0000115D BF8000                  	mov	di,80h ; 0000h:0080h	; LowMemory
 46278                                  	
 46279 00001160 B90400                  	mov	cx,4
 46280 00001163 FC                      	cld
 46281 00001164 F3A7                    	repe    cmpsw
 46282                                  
 46283 00001166 7407                    	jz	short EA20_OFF
 46284                                  EA20_RET:
 46285 00001168 5F                      	pop	di
 46286 00001169 5E                      	pop	si
 46287 0000116A 59                      	pop	cx
 46288 0000116B 07                      	pop	es
 46289 0000116C 1F                      	pop	ds
 46290 0000116D 9D                      	popf
 46291 0000116E C3                      	retn
 46292                                  
 46293                                  EA20_OFF:
 46294                                  	; We are going to do the XMS call on the DOS's AuxStack.
 46295                                  	; NOTE: ints are disabled at this point.
 46296                                  
 46297 0000116F 53                      	push	bx
 46298 00001170 50                      	push	ax
 46299                                  
 46300 00001171 8CD0                    	mov	ax,ss			; save user's stack pointer
 46301 00001173 2EA3[6C10]              	mov	[cs:SS_Save],ax
 46302 00001177 2E8926[6E10]            	mov	[cs:SP_Save],sp
 46303 0000117C 8CC8                    	mov	ax,cs
 46304 0000117E 8ED0                    	mov	ss,ax
 46305 00001180 BC[A007]                	mov	sp,AUXSTACK
 46306                                  					; ss:sp -> DOSDATA:AuxStack
 46307                                  	;mov	ah,XMM_LOCAL_ENABLE_A20
 46308 00001183 B405                    	mov	ah,5
 46309 00001185 2EFF1E[4911]            	call	far [cs:XMMcontrol]
 46310 0000118A 09C0                    	or	ax,ax
 46311 0000118C 740F                    	jz	short XMMerror		; AX = 0 fatal error
 46312                                  
 46313 0000118E 2EA1[6C10]              	mov	ax,[cs:SS_Save]		; restore user stack
 46314 00001192 8ED0                    	mov	ss,ax
 46315 00001194 2E8B26[6E10]            	mov	sp,[cs:SP_Save]
 46316                                  
 46317 00001199 58                      	pop	ax
 46318 0000119A 5B                      	pop	bx
 46319                                  
 46320 0000119B EBCB                    	jmp	short EA20_RET
 46321                                  
 46322                                  XMMerror:				; M006 - Start
 46323 0000119D B40F                    	mov	ah,0Fh			; get video mode
 46324 0000119F CD10                    	int	10h
 46325 000011A1 3C07                    	cmp	al,7			; Q: are we an MDA
 46326 000011A3 7406                    	je	short XMMcont			; Y: do not change mode
 46327 000011A5 30E4                    	xor	ah,ah ; 0			; set video mode
 46328 000011A7 B002                    	mov	al,02h			; 80 X 25 text
 46329 000011A9 CD10                    	int	10h
 46330                                  XMMcont:
 46331 000011AB B405                    	mov	ah,05h			; set display page
 46332 000011AD 30C0                    	xor	al,al			; page 0
 46333 000011AF CD10                    	int	10h
 46334                                  	
 46335 000011B1 BE[8E12]                	mov	si,XMMERRMSG
 46336 000011B4 0E                      	push	cs
 46337 000011B5 1F                      	pop	ds
 46338 000011B6 FC                      	cld				; clear direction flag
 46339                                  XMMprnt:
 46340 000011B7 AC                      	lodsb
 46341 000011B8 3C24                    	cmp	al,'$'			; indicates end of XMMERRMSG
 46342 000011BA 7409                    	jz	short XMMStall		; function 0Eh	
 46343 000011BC B40E                    	mov	ah,0Eh
 46344 000011BE BB0700                  	mov	bx,7
 46345 000011C1 CD10                    	int	10h
 46346 000011C3 EBF2                    	jmp	short XMMprnt
 46347                                  
 46348                                  XMMStall:
 46349 000011C5 FB                      	sti				; allow the user to warm boot
 46350 000011C6 EBFD                    	jmp	short XMMStall		; M006 - End
 46351                                  
 46352                                  ;---------------------------------------------------------------------------
 46353                                  
 46354                                  ; 27/04/2019 - Retro DOS v4.0
 46355                                  
 46356                                  ; retrodos4.s ; offset 0Ch in BIOS segment (0070h)
 46357                                  ALTAH	equ 0Ch
 46358                                  
 46359                                  ;This has been put in for WIN386 2.XX support. The format of the instance 
 46360                                  ;table was different for this. Segments will be patched in at init time.
 46361                                  
 46362                                  OldInstanceJunk:
 46363 000011C8 7000                    	dw	70h	;segment of BIOS
 46364 000011CA 0000                    	dw	0	;indicate stacks in SYSINIT area
 46365 000011CC 0600                    	dw	6	;5 instance items
 46366                                  
 46367                                  	;dw	0,offset dosdata:contpos, 2
 46368                                  	;dw	0,offset dosdata:bcon, 4
 46369                                  	;dw	0,offset dosdata:carpos,106h
 46370                                  	;dw	0,offset dosdata:charco, 1
 46371                                  	;dw	0,offset dosdata:exec_init_sp, 34               ;M032
 46372                                  	;dw	070h,offset BData:altah, 1	 ; altah byte in bios
 46373                                  
 46374 000011CE 0000[2200]0200          	dw	0,CONTPOS,2
 46375 000011D4 0000[3200]0400          	dw	0,BCON,4
 46376 000011DA 0000[F901]0601          	dw	0,CARPOS,106h
 46377 000011E0 0000[0003]0100          	dw	0,CHARCO,1
 46378 000011E6 0000[C00F]2200          	dw	0,exec_init_SP,34
 46379 000011EC 70000C000100            	dw	70h,ALTAH,1	; altah byte in bios
 46380                                  
 46381                                  ;---------------------------------------------------------------------------
 46382                                  
 46383                                  ; M021-
 46384                                  ;
 46385                                  ; DosHasHMA - This flag is set by seg_reinit when the DOS actually
 46386                                  ; 	takes control of the HMA. When running, this word is a reliable
 46387                                  ;	indicator that the DOS is actually using HMA. You can't just use
 46388                                  ;	CS, because ROMDOS uses HMA with CS < F000.
 46389                                  
 46390                                  DosHasHMA:
 46391 000011F2 00                      	db	0
 46392                                  FixExePatch:
 46393 000011F3 0000                    	dw	0		; M012
 46394                                  
 46395                                  ; 28/12/2022 - Retro DOS v4.1
 46396                                  ;RationalPatchPtr:
 46397                                  ;	dw	0		; M012
 46398                                  
 46399                                  ; End M021
 46400                                  
 46401                                  ;---------------------------------------------------------------------------
 46402                                  
 46403                                  ; 28/12/2022 - Retro DOS v4.1
 46404                                  %if 0
 46405                                  
 46406                                  ; M020 Begin
 46407                                  
 46408                                  RatBugCode:	; proc	far
 46409                                  	push	cx
 46410                                  	mov	cx,[10h]
 46411                                  rbc_loop:
 46412                                  	;loop	$
 46413                                  	loop	rbc_loop
 46414                                  	pop	cx
 46415                                  	retf
 46416                                  		
 46417                                  ; M020 End
 46418                                  
 46419                                  %endif
 46420                                  
 46421                                  ;---------------------------------------------------------------------------
 46422                                  	
 46423                                  UmbSave1:
 46424                                  	;db	11 dup (?)	; M023
 46425 000011F5 00<rep Bh>              	times	11 db 0	
 46426                                  
 46427                                  ; DOSDATA:122Ah
 46428                                  
 46429                                  Mark3:	; label byte
 46430                                  
 46431                                  ;IF2
 46432                                  ;	IF ((OFFSET MARK3) GT (OFFSET COUNTRY_CDPG) )
 46433                                  ;		%OUT !DATA CORRUPTION!MARK3 OFFSET TOO BIG. RE-ORGANIZE DATA.
 46434                                  ;	ENDIF
 46435                                  ;ENDIF
 46436                                  
 46437                                  ;############################################################################
 46438                                  ;
 46439                                  ; ** HACK FOR DOS 4.0 REDIR **
 46440                                  ;
 46441                                  ; The dos 4.X redir requires that country_cdpg is at offset 0122ah. Any new
 46442                                  ; data variable that is to be added to DOSDATA must go in between Mark3
 46443                                  ; COUNTRY_CDPG if it can. 
 46444                                  ;
 46445                                  ; MARK3 SHOULD NOT BE > 122AH 
 46446                                  ;
 46447                                  ; As of 9/6/90, this area is FULL!
 46448                                  ;
 46449                                  ;############################################################################
 46450                                   
 46451                                  	;ORG	0122Ah
 46452                                  
 46453                                  ; DOSDATA:122Ah (MSDOS 6.21, MSDOS.SYS)
 46454                                  
 46455                                  ; The following table is used for DOS 3.3
 46456                                  ;DOS country and code page information is defined here for DOS 3.3.
 46457                                  ;The initial value for ccDosCountry is 1 (USA).
 46458                                  ;The initial value for ccDosCodepage is 850.
 46459                                  
 46460                                  ; country and code page information
 46461                                  ; ---------------------------------------------------------------------------
 46462                                  COUNTRY_CDPG:	; label  byte
 46463 00001200 0000000000000000        	db   0,0,0,0,0,0,0,0		; reserved words
 46464 00001208 5C434F554E5452592E-     	db   '\COUNTRY.SYS',0		; path name of country.sys
 46464 00001211 53595300           
 46465                                  	;db   51 dup (?)
 46466 00001215 00<rep 33h>             	times 51 db 0
 46467                                  ; ------------------------------------------------<MSKK01>-------------------
 46468                                  ;ifdef	DBCS
 46469                                  ;  ifdef JAPAN
 46470                                  ;	dw   932			; system code page id (JAPAN)
 46471                                  ;  endif
 46472                                  ;  ifdef TAIWAN
 46473                                  ;	dw   938			; system code page id (TAIWAN)
 46474                                  ;  endif
 46475                                  ;  ifdef KOREA
 46476                                  ;	dw   934			; system code page id (KOREA IBM)
 46477                                  ;  endif
 46478                                  ;else
 46479 00001248 B501                    	dw   437			; system code page id
 46480                                  ;endif
 46481                                  ; ------------------------------------------------<MSKK01>-------------------
 46482 0000124A 0600                    	dw   6				; number of entries
 46483 0000124C 02                      	db   SetUcase  ; 2		; Ucase type
 46484 0000124D [AD0A]                  	dw   UCASE_TAB			;pointer to upper case table
 46485 0000124F 0000                    	dw   0				; segment of poiter
 46486 00001251 04                      	db   SetUcaseFile  ; 4		; Ucase file char type
 46487 00001252 [2F0B]                  	dw   FILE_UCASE_TAB 		;pointer to file upper case table
 46488 00001254 0000                    	dw   0				; segment of poiter
 46489 00001256 05                      	db   SetFileList ; 5		; valid file chars type
 46490 00001257 [B10B]                  	dw   FILE_CHAR_TAB 		;pointer to valid file char tab
 46491 00001259 0000                    	dw   0				; segment of poiter
 46492 0000125B 06                      	db   SetCollate	; 6		; collate type
 46493 0000125C [E10B]                  	dw   COLLATE_TAB		;pointer to collate table
 46494 0000125E 0000                    	dw   0				; segment of poiter
 46495 00001260 07                      	db   SetDBCS	; 7		;AN000; DBCS Ev			2/12/KK
 46496 00001261 [E30C]                  	dw   DBCS_TAB			;AN000;pointer to DBCS Ev table	2/12/KK
 46497 00001263 0000                    	dw   0				;AN000; segment of pointer	2/12/KK
 46498 00001265 01                      	db   SetCountryInfo  ; 1	; country info type
 46499 00001266 2600                    	dw   NEW_COUNTRY_SIZE		; extended country info size
 46500                                  ; ------------------------------------------------<MSKK01>-------------------
 46501                                  ;ifdef	DBCS
 46502                                  ;	...... 
 46503                                  ;else
 46504 00001268 0100                    	dw   1				; USA country id
 46505 0000126A B501                    	dw   437			; USA system code page id
 46506 0000126C 0000                    	dw   0 				; date format
 46507 0000126E 2400000000              	db   '$',0,0,0,0		; currency symbol
 46508 00001273 2C00                    	db   ',',0			; thousand separator
 46509 00001275 2E00                    	db   '.',0			; decimal separator
 46510 00001277 2D00                    	db   '-',0			; date separator
 46511 00001279 3A00                    	db   ':',0			; time separator
 46512 0000127B 00                      	db   0				; currency format flag
 46513 0000127C 02                      	db   2				; # of digits in currency
 46514 0000127D 00                      	db   0 				; time format
 46515 0000127E [F50C]                  	dw   MAP_CASE			; mono case routine entry point
 46516 00001280 0000                    	dw   0				; segment of entry point
 46517 00001282 2C00                    	db   ',',0			; data list separator
 46518 00001284 000000000000000000-     	dw   0,0,0,0,0			; reserved
 46518 0000128D 00                 
 46519                                  ;endif
 46520                                  ; ------------------------------------------------<MSKK01>-------------------
 46521                                  
 46522                                  ; 27/04/2019 - Retro DOS v4.0
 46523                                  
 46524                                  ;include msdos.cl2			; XMMERRMSG
 46525                                  
 46526                                  ; DOSDATA:12B8h (MSDOS 6.22, MSDOS.SYS) ; 17/01/2024
 46527                                  
 46528                                  XMMERRMSG:
 46529 0000128E 0D0A                    	db	0Dh,0Ah
 46530 00001290 413230204861726477-     	db	'A20 Hardware Error',0Dh,0Ah,'$'
 46530 00001299 617265204572726F72-
 46530 000012A2 0D0A24             
 46531                                  
 46532                                  ; DOSDATA ends
 46533                                  
 46534                                  ; 05/11/2022
 46535                                  ;----------------------------------------------------------------------------
 46536                                  ; End of MSDOS 5.0 MSDOS.SYS /// Retro DOS v4.0 (2022) - 05/11/2022
 46537                                  ;----------------------------------------------------------------------------
 46538                                  
 46539                                  ; 28/12/2022 - Retro DOS v4.1
 46540                                  ; (windows 3.1 and Rational Extender patches are removed/disabled)
 46541                                  ; (Windows 3.1 does not use the patches below if DOS version is MSDOS 5.0)
 46542                                  ;----------------------------------------------------------------------------
 46543                                  %if 0
 46544                                  
 46545                                  ;----------------------------------------------------------------------------
 46546                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 46547                                  
 46548                                  ;============================================================================
 46549                                  ; WPATCH.INC (MSDOS 6.0, 1991)  ;;; Windows 3.1 patches ;;;
 46550                                  ;============================================================================
 46551                                  ; 27/04/2019 - Retro DOS 4.0
 46552                                  
 46553                                  ;DOSDATA Segment
 46554                                  
 46555                                  ; DOSDATA:12CFh (MSDOS 6.21, MSDOS.SYS)
 46556                                  
 46557                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 46558                                  ; DOSDATA:12CFh (MSDOS 5.0, MSDOS.SYS)
 46559                                  
 46560                                  ; first and second DOS patches
 46561                                  ;	Non-console device read/write (system calls 3Fh and 40h)
 46562                                  ;
 46563                                  ; Code in disk.asm, 2 locations, one for read, one for write
 46564                                  ;	DVRDLP:
 46565                                  ;	DVWRTLP:
 46566                                  ;
 46567                                  ;
 46568                                  ; 036h	lds	si,SS:[????]				  ; ThisSFT
 46569                                  ;	lds	si,si+7 				  ; sf_devptr
 46570                                  ; 0E8h	call	????		<- "simulate" int28 event ; DSKSTATCHK
 46571                                  
 46572                                  DOSP1_ID:	db	036h,0C5h,036h
 46573                                  DOSP1_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 46574                                  DOSP1_ID_LEN	equ	$-DOSP1_ID
 46575                                  
 46576                                  		db	90h, 90h
 46577                                  
 46578                                  DOSP12_ID:	db	036h,0C5h,036h
 46579                                  DOSP12_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 46580                                  DOSP12_ID_LEN	equ	$-DOSP1_ID
 46581                                  
 46582                                  ; DOSDATA:12E3h
 46583                                  
 46584                                  ; Third/Fourth DOS patch - System call 3Fh (Read) from console
 46585                                  ;
 46586                                  ; Code in disk.asm, 1 location
 46587                                  ;	GETBUF:
 46588                                  ;
 46589                                  ; 051h	push	cx	<- begin special int28 mode
 46590                                  ;	push	es
 46591                                  ;	push	di
 46592                                  ;	mov	dx,???? ; offset dosgroup:CONBUF
 46593                                  ;	call	????	; $STD_CON_STRING_INPUT
 46594                                  ;	pop	di
 46595                                  ;	pop	es
 46596                                  ; 059h	pop	cx	<- end special int28 mode
 46597                                  
 46598                                  DOSP3_ID:	db	051h,006h,057h,0BAh
 46599                                  DOSP3_CONBUF:	db	029h,002h,0E8h
 46600                                  DOSP3_ID_LEN	equ	$-DOSP3_ID
 46601                                  		db	09Ah,0E3h,05Fh,007h	; ???? , pop di, pop es
 46602                                  DOSP4_ID:	db	059h			; pop cx
 46603                                  DOSP4_ID_OFF	equ	(DOSP4_ID - DOSP3_ID)
 46604                                  	
 46605                                  ; DOSDATA:12EFh
 46606                                  
 46607                                  ; Fifth DOS patch - System call 40h (Write) to console
 46608                                  ;
 46609                                  ; Code in disk.asm, 1 location
 46610                                  ;
 46611                                  ;		push	cx
 46612                                  ;      WRCONLP: lodsb
 46613                                  ;		cmp	al,1Ah
 46614                                  ;		jz	????
 46615                                  ;		call	????	<- "simulate" int28 event
 46616                                  ;		loop	WRCONLP
 46617                                  ;      CONEOF:	pop	ax
 46618                                  
 46619                                  DOSP5_ID:	db	051h			; push cx
 46620                                  		db	0ACh,03Ch,01Ah,074h,005h
 46621                                  		db	0E8h			; call
 46622                                  DOSP5_ID_LEN	equ	$-DOSP5_ID
 46623                                  
 46624                                  ; DOSDATA:12F6h
 46625                                  
 46626                                  ; Seventh DOS patch - System call entry, patch USER_ID with VMid for share
 46627                                  ;
 46628                                  ; Code in disp.asm, 1 location
 46629                                  ;
 46630                                  ;
 46631                                  ;	mov [SaveDS],ds
 46632                                  ;	mov [SaveBX],bx
 46633                                  ;	mov bx,cs
 46634                                  ;	mov ds,bx
 46635                                  ;	inc [indos]
 46636                                  ;	xor ax,ax
 46637                                  ;	mov [USER_ID],AX	<- Patch to set USER_ID to VMID
 46638                                  
 46639                                  DOSP7_ID:	db	02Eh,08Ch,01Eh
 46640                                  DOSP7_SAVEDS:	db	07Eh,05h		; mov [SaveDS],ds
 46641                                  		db	02Eh,089h,01Eh
 46642                                  DOSP7_SAVEBX:	db	07Ch,05h		; mov [SaveBX],bx
 46643                                  		db	08Ch,0CBh		; mov bx,cs
 46644                                  		db	08Eh,0DBh		; mov ds,bx
 46645                                  		db	0FEh,006h
 46646                                  DOSP7_INDOS:	db	0CFh,002h		; inc [indos]
 46647                                  		db	033h,0C0h		; xor ax,ax
 46648                                  DOSP7_ID_LEN	equ	$-DOSP7_ID
 46649                                  
 46650                                  ; DOSDATA:130Ah
 46651                                  
 46652                                  ; Eighth DOS patch - OWNER check in handle calls. For share, need to NOP test
 46653                                  ;
 46654                                  ; Code in handle.asm, 1 location in routine CheckOwner
 46655                                  ;
 46656                                  ;
 46657                                  ;
 46658                                  ;	push	ax
 46659                                  ;	mov	ax,ss:[USER_ID]     <- patch to XOR AX,AX to set zero
 46660                                  ;	cmp	ax,es:[di.sf_UID]   <- NOP
 46661                                  ;	pop	ax
 46662                                  ;	jz	????
 46663                                  
 46664                                  DOSP8_ID:	db	050h			; push ax
 46665                                  		db	036h,0A1h
 46666                                  DOSP8_USER_ID:	db	0EAh,002h		; mov  ax,ss:[USER_ID]
 46667                                  		db	026h,03Bh,045h		; cmp  ax,es:[di+2F]
 46668                                  DOSP8_ID_LEN	equ	$-DOSP8_ID
 46669                                  		db	02Fh,058h		; pop  ax
 46670                                  
 46671                                  ; DOSDATA:1314h
 46672                                  
 46673                                  ; 10th, 11th, 12th DOS patch - System call 3Fh (Read) in raw mode
 46674                                  ;
 46675                                  ;   Take RAW read to STDIN SFT and turn it into a polling loop doing
 46676                                  ;   a yeild when a character is not ready to be read.
 46677                                  ;
 46678                                  ; Code in disk.asm, 3 locations
 46679                                  ;
 46680                                  ;   DVRDRAW:
 46681                                  ;	    PUSH    ES
 46682                                  ;	    POP     DS
 46683                                  ;   ReadRawRetry:				<- Patch 10
 46684                                  ;	    MOV     BX,DI
 46685                                  ;	    XOR     AX,AX			<- Reenter #2
 46686                                  ;	    MOV     DX,AX
 46687                                  ;	    call    SETREAD
 46688                                  ;	    PUSH    DS				<- Reenter #1
 46689                                  ;	    LDS     SI,[THISSFT]
 46690                                  ;	    call    DEVIOCALL
 46691                                  ;	    MOV     DX,DI
 46692                                  ;	    MOV     AH,86H
 46693                                  ;	    MOV     DI,[DEVCALL.REQSTAT]
 46694                                  ;	    TEST    DI,STERR
 46695                                  ;	    JZ	    CRDROK
 46696                                  ;	    call    CHARHARD
 46697                                  ;	    MOV     DI,DX
 46698                                  ;	    OR	    AL,AL
 46699                                  ;	    JZ	    CRDROK
 46700                                  ;	    CMP     AL,3
 46701                                  ;	    JZ	    CRDFERR
 46702                                  ;	    POP     DS
 46703                                  ;	    JMP     ReadRawRetry
 46704                                  ;
 46705                                  ;   CRDFERR:
 46706                                  ;	    POP     DI				<- Patch 11
 46707                                  ;   DEVIOFERR:
 46708                                  ;	    LES     DI,[THISSFT]
 46709                                  ;	    jmp     SET_ACC_ERR_DS
 46710                                  ;
 46711                                  ;   CRDROK:
 46712                                  ;	    POP     DI				<- Patch 12
 46713                                  ;	    MOV     DI,DX
 46714                                  ;	    ADD     DI,[CALLSCNT]
 46715                                  ;	    JMP     SHORT ENDRDDEVJ3
 46716                                  
 46717                                  DOSP10_ID:		db	006H,01FH
 46718                                  DOSP10_LOC_OFFSET	equ	$-DOSP10_ID
 46719                                  DOSP10_LOC:		db	08BH,0DFH
 46720                                  DOSP10_REENT2_OFFSET	equ	$-DOSP10_LOC
 46721                                  			db	033H,0C0H,08BH,0D0H,0E8H
 46722                                  DOSP10_ID_LEN		equ	$-DOSP10_ID
 46723                                  			db	0DFH,00EH
 46724                                  DOSP10_REENT1_OFFSET	equ	$-DOSP10_LOC
 46725                                  			db	01EH,036H,0C5H,036H,036H,005H,0E8H,0AFH,00EH
 46726                                  			db	08BH,0D7H,0B4H,086H,036H,08BH,03EH
 46727                                  DOSP10_PACKVAL_OFFSET	equ	$-DOSP10_ID
 46728                                  			db	009H,003H
 46729                                  			db	0F7H,0C7H,000H,080H,074H,019H,0E8H,047H,017H
 46730                                  			db	08BH,0FAH,00AH,0C0H,074H,010H,03CH,003H,074H,003H
 46731                                  			db	01FH,0EBH,0CFH
 46732                                  DOSP11_LOC_OFFSET	equ	$-DOSP10_ID
 46733                                  			db	05FH
 46734                                  DOSP11_REENT_OFFSET	equ	$-DOSP10_LOC
 46735                                  			db	036H,0C4H,03EH,036H,005H,0E9H,0A1H,004H
 46736                                  
 46737                                  DOSP12_LOC_OFFSET	equ	$-DOSP10_ID
 46738                                  			db	05FH,08BH,0FAH
 46739                                  ; DOSDATA:1353h
 46740                                  
 46741                                  ; 13th DOS patch - Actually a SYSINIT patch. Patches the stack fault code
 46742                                  ;		which prints the fatal stack fault error on DOS >= 3.20.
 46743                                  ;
 46744                                  ;	    Sets focus to current VM so user can see fatal message.
 46745                                  ;
 46746                                  ;
 46747                                  ;	l0: lodsb		<- Setfocus here
 46748                                  ;	    cmp al, '$'
 46749                                  ;	    je l1
 46750                                  ;	    mov bl, 7
 46751                                  ;	    mov ah, 0Eh
 46752                                  ;	    int 10h
 46753                                  ;	    jmp l0
 46754                                  ;	l1: jmp $
 46755                                  
 46756                                  DOSP13_ID:	db	0ACh			; l0: lodsb
 46757                                  		db	03Ch,024h		;     cmp al, '$'
 46758                                  		db	074h,008h		;     je l1
 46759                                  		db	0B3h,007h		;     mov bl, 7
 46760                                  		db	0B4h,00Eh		;     mov ah, 0Eh
 46761                                  		db	0CDh,010h		;     int 10h
 46762                                  		db	0EBh,0F3h		;     jmp l0
 46763                                  		db	0EBh,0FEh		; l1: jmp $
 46764                                  DOSP13_ID_LEN	equ	$-DOSP13_ID
 46765                                  
 46766                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 46767                                  ; DOSDATA:1362h (MSDOS 5.0 MSDOS.SYS)
 46768                                  
 46769                                  ; 06/12/2022
 46770                                  ;DOSDATASIZE	equ  $ - DOSDATASTART ; 4962 bytes (1362h)
 46771                                  
 46772                                  ; DOSDATA ends
 46773                                  
 46774                                  ;============================================================================
 46775                                  ; MPATCH.ASM (MSDOS 6.0, 1993)
 46776                                  ;============================================================================
 46777                                  ; 27/04/2019 - Retro DOS 4.0
 46778                                  
 46779                                  ;mpatch.asm -- holds data patch location for callouts 
 46780                                  ; -- allocate cluster in rom.asm
 46781                                  ;
 46782                                  ; This area is pointed to by OffsetMagicPatch[609h] in fixed DOS data.
 46783                                  ; Currently, this location is used only by magicdrv.sys's patch to
 46784                                  ; cluster allocation, however it can be expanded to be used by other
 46785                                  ; patches. This is important since we have an easy-access pointer to
 46786                                  ; this location in OffsetMagicPatch. Magicdrv.sys is guaranteed to
 46787                                  ; only patch out a far call/retf, so any space after that could be
 46788                                  ; used as a patch by using OffsetMagicPatch+6. See rom.asm on how
 46789                                  ; to call out here.
 46790                                  ;
 46791                                  ; Currently, we allocate only the minimum space required for the 6
 46792                                  ; byte magicdrv patch, so if you change the dos data, you may want
 46793                                  ; to reserve space here if your new data will be position dependent
 46794                                  ; and would prohibit growing of this table.
 46795                                  ;       
 46796                                  ;history	-	created 8-7-92 by scottq
 46797                                  ;		-	added Rational386PatchPtr 2-1-93 by jimmat
 46798                                  ;
 46799                                  ;Exported Functions
 46800                                  ;==================
 46801                                  ;MagicPatch     -       callout patched by magidrv.sys for cluster allocations
 46802                                  
 46803                                  ; DosData Segment
 46804                                  
 46805                                  ; DOSDATA:1362h (MSDOS 6.21, MSDOS.SYS)
 46806                                  
 46807                                  ; ---------------------------------------------------------------------------
 46808                                  
 46809                                  ; Rational386PatchPtr points to either a RET instruction (80286 or less) or
 46810                                  ; a routine to fix buggy versions of the Rational DOS Extender (80386 or
 46811                                  ; greater). Added to this file because it needed to be somewhere and is
 46812                                  ; 'patch' related.
 46813                                  
 46814                                  Rational386PatchPtr:
 46815                                  	dw	0	; points to patch routine or RET instr.
 46816                                  ; ---------------------------------------------------------------------------
 46817                                  
 46818                                  MagicPatch:
 46819                                  ;MagicPatch proc far
 46820                                          retf            ;default is to just return to allocate
 46821                                          nop             ;however, this code will be patched
 46822                                          nop             ;by magicdrv.sys to
 46823                                          nop             ; call far ?:?     
 46824                                          nop             ; retf or perhaps just jmp far
 46825                                          nop             ;retf/nop take one byte, so we need six instructions
 46826                                                          ;for 6 byte patch
 46827                                  ;MagicPatch endp
 46828                                  
 46829                                  ; ---------------------------------------------------------------------------
 46830                                  
 46831                                  ;DosData Ends
 46832                                  
 46833                                  ; DOSDATA:136Ah
 46834                                  
 46835                                  ;----------------------------------------------------------------------------
 46836                                  
 46837                                  ;DOSDATALAST SEGMENT
 46838                                  
 46839                                  ; 29/04/2019 - Retro DOS v4.0
 46840                                  
 46841                                  ;----------------------------------------------------------------------------
 46842                                  ; 25/05/2019 - Retro DOS v4.0 Modification (paragraph alignment)
 46843                                  
 46844                                  ;db 0,1,12,64,19,0 ; ! Magic numbers !
 46845                                  
 46846                                  ;align 16
 46847                                  
 46848                                  ; !!! DOSDATA:1370h ; Retro DOS v4.0 only!
 46849                                  
 46850                                  ;----------------------------------------------------------------------------
 46851                                  
 46852                                  %endif	; 05/11/2022
 46853                                  
 46854                                  ; 05/12/2022
 46855                                  ;MSDAT001E:	; label byte
 46856                                  
 46857                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 46858                                  DOSDATAEND equ $
 46859                                  DOSDATASIZE equ DOSDATAEND - DOSDATASTART ; = 4962 for MSDOS 5.0 MSDOS.SYS
 46860                                  MSDAT001E equ DOSDATAEND - DOSDATASTART
 46861                                  
 46862                                  ;DOSDATALAST ENDS
 46863                                  
 46864                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 46865                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
 46866                                  ;============================================================================
 46867                                  ;	END
 46868                                  ;============================================================================
 46869                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 6.21 KERNEL via NASM)
 46870                                  ; -----------------------------
 46871                                  ; MAY 2019, ISTANBUL - TURKIYE.
